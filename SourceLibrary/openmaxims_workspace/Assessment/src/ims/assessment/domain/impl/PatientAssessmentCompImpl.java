//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.53 build 2572.17685)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.assessment.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.assessment.domain.base.impl.BasePatientAssessmentCompImpl;
import ims.assessment.instantiation.domain.objects.PatientAssessment;
import ims.assessment.instantiation.domain.objects.PatientUserDefinedObject;
import ims.assessment.instantiation.vo.PatientUserDefinedObjectRefVo;
import ims.assessment.vo.PatientAssessmentListVo;
import ims.assessment.vo.PatientAssessmentListVoCollection;
import ims.assessment.vo.PatientUserDefinedObjectListVo;
import ims.assessment.vo.PatientUserDefinedObjectListVoCollection;
import ims.assessment.vo.PatientUserDefinedObjectVo;
import ims.assessment.vo.domain.PatientAssessmentListVoAssembler;
import ims.assessment.vo.domain.PatientAssessmentVoAssembler;
import ims.assessment.vo.domain.PatientUserDefinedObjectListVoAssembler;
import ims.assessment.vo.domain.PatientUserDefinedObjectVoAssembler;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class PatientAssessmentCompImpl extends BasePatientAssessmentCompImpl
{

	private static final long serialVersionUID = 1L;

	public PatientAssessmentListVoCollection listPatientAssessments(CareContextRefVo careContextRefVo)
	{
		return listPatientAssessment(careContextRefVo, null);
	}

	public PatientAssessmentListVoCollection listPatientAssessments(CareContextRefVo careContextRefVo, UserDefinedAssessmentType assessmentType)
	{
		return listPatientAssessment(careContextRefVo, assessmentType);
	}
	
	private PatientAssessmentListVoCollection listPatientAssessment(CareContextRefVo careContextRefVo, UserDefinedAssessmentType assessmentType)
	{
		if(careContextRefVo == null || careContextRefVo.getID_CareContext() == null)
			throw new RuntimeException("Cannot list PatientAssessments for null CareContextRefVo");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from PatientAssessment pa where pa.careContext.id =:RefId");
		ArrayList values  = new ArrayList();
		ArrayList params  = new ArrayList();
	
		values.add(careContextRefVo.getID_CareContext());
		params.add("RefId");
		
		if(assessmentType != null)
		{
			hql.append(" and ");
			hql.append("pa.assessmentData.userAssessment.assessmentType =:assType");
			values.add(getDomLookup(assessmentType));
			params.add("assType");	
		}
		
		List list = factory.find(hql.toString(), params, values);
		return PatientAssessmentListVoAssembler.createPatientAssessmentListVoCollectionFromPatientAssessment(list).sort();
	}
	
	public PatientUserDefinedObjectListVoCollection listPatientUserDefinedObjects(CareContextRefVo careContextRefVo)
	{
		if(careContextRefVo == null || careContextRefVo.getID_CareContext() == null)
			throw new RuntimeException("Cannot list PatientUserDefinedObjectList for null CareContextRefVo");
	
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" select distinct pudo from PatientUserDefinedObject pudo left join pudo.patientAssessments as patAss");
		ArrayList values  = new ArrayList();
		ArrayList params  = new ArrayList();
		hql.append(" where patAss.careContext.id = :careContextId");
		params.add("careContextId");
		values.add(careContextRefVo.getID_CareContext());
		List list = factory.find(hql.toString(), params, values);
		return PatientUserDefinedObjectListVoAssembler.createPatientUserDefinedObjectListVoCollectionFromPatientUserDefinedObject(list).sort();
	}

	/**
	* save Patient Assessment
	*/
	public ims.assessment.vo.PatientAssessmentVo savePatientAssessment(ims.assessment.vo.PatientAssessmentVo voPatientAssessment) throws ims.domain.exceptions.StaleObjectException
	{
		if(voPatientAssessment == null)
			throw new RuntimeException("Cannot save null value for PatientAssessmentVo");
		if(voPatientAssessment.isValidated() == false)
			throw new CodingRuntimeException("PatientAssessmentVo not validated");
		
		DomainFactory factory = getDomainFactory();
		PatientAssessment doPatientAssessment = PatientAssessmentVoAssembler.extractPatientAssessment(factory, voPatientAssessment);
		factory.save(doPatientAssessment);
		return PatientAssessmentVoAssembler.create(doPatientAssessment);
	}
	
	public PatientUserDefinedObjectVo savePatientUserDefinedObject(PatientUserDefinedObjectVo voPatientUserDefinedObject) throws StaleObjectException
	{
		if(voPatientUserDefinedObject == null)
			throw new RuntimeException("Cannot save null value for PatientUserDefinedObjectVo");
		if(voPatientUserDefinedObject.isValidated() == false)
			throw new CodingRuntimeException("PatientUserDefinedObjectVo not validated");
		
		DomainFactory factory = getDomainFactory();
		PatientUserDefinedObject doPatientUserDefinedObject = PatientUserDefinedObjectVoAssembler.extractPatientUserDefinedObject(factory, voPatientUserDefinedObject);
		factory.save(doPatientUserDefinedObject);
		return PatientUserDefinedObjectVoAssembler.create(doPatientUserDefinedObject);
	}
	
	public PatientUserDefinedObjectListVo getPatientUserDefinedObjectList(PatientUserDefinedObjectRefVo patientUserDefinedObjectRefVo)
	{
		if(patientUserDefinedObjectRefVo == null)
			throw new RuntimeException("Cannot get PatientUserDefinedObjectListVo for null PatientUserDefinedObjectRefVo");

		DomainFactory factory = getDomainFactory();
		PatientUserDefinedObject doPatientUserDefinedObject = (PatientUserDefinedObject) factory.getDomainObject(PatientUserDefinedObject.class, patientUserDefinedObjectRefVo.getID_PatientUserDefinedObject());
		return PatientUserDefinedObjectListVoAssembler.create(doPatientUserDefinedObject);
	}

	/**
	* get Patient Assessment
	*/
	public ims.assessment.vo.PatientAssessmentVo getPatientAssessment(Integer patientAssessmentId)
	{
		if(patientAssessmentId == null)
			throw new RuntimeException("Cannot get PatientAssessmentVo for null id");
		
		DomainFactory factory = getDomainFactory();
		PatientAssessment doPatientAssesment = (PatientAssessment) factory.getDomainObject(PatientAssessment.class, patientAssessmentId);
		return PatientAssessmentVoAssembler.create(doPatientAssesment);
	}
	
	public ims.assessment.vo.PatientAssessmentListVo getPatientAssessmentList(Integer patAssessmentId)
	{
		if(patAssessmentId == null)
			throw new RuntimeException("Cannot get PatientAssessmentListVo for null id");
		DomainFactory factory = getDomainFactory();
		PatientAssessment doPatientAssessment = (PatientAssessment) factory.getDomainObject(PatientAssessment.class, patAssessmentId);
		return PatientAssessmentListVoAssembler.create(doPatientAssessment);
	}

	public PatientAssessmentListVo savePatientAssessmentList(PatientAssessmentListVo voPatientAssessmentList) throws StaleObjectException
	{
		if(voPatientAssessmentList == null)
			throw new RuntimeException("Cannot save null value for PatientAssessmentListVo");
		if(voPatientAssessmentList.isValidated() == false)
			throw new CodingRuntimeException("PatientAssessmentListVo not validated");
		
		DomainFactory factory = getDomainFactory();
		PatientAssessment doPatientAssessment = PatientAssessmentListVoAssembler.extractPatientAssessment(factory, voPatientAssessmentList);
		factory.save(doPatientAssessment);
		return PatientAssessmentListVoAssembler.create(doPatientAssessment);
	}

	public PatientUserDefinedObjectVo getPatientUserDefinedObject(PatientUserDefinedObjectRefVo patientUserDefinedObjectRefVo)
	{
		if(patientUserDefinedObjectRefVo == null)
			throw new RuntimeException("Cannot get PatientUserDefinedObjectVo for null PatientUserDefinedObjectRefVo");
		DomainFactory factory = getDomainFactory();
		PatientUserDefinedObject doPatientAssessment = (PatientUserDefinedObject) factory.getDomainObject(PatientUserDefinedObject.class, patientUserDefinedObjectRefVo.getID_PatientUserDefinedObject());
		return PatientUserDefinedObjectVoAssembler.create(doPatientAssessment);
	}
}
