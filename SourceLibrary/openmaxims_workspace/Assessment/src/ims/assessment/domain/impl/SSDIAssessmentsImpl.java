//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.assessment.domain.impl;

import java.util.List;


import ims.assessment.domain.base.impl.BaseSSDIAssessmentsImpl;
import ims.domain.DomainFactory;
import ims.dto_move.domain.objects.SiteAssess;
import ims.dtomove.vo.domain.SiteAssessVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class SSDIAssessmentsImpl extends BaseSSDIAssessmentsImpl
{

	private static final long serialVersionUID = 1L;

	public ims.dtomove.vo.SiteAssessVoCollection listSiteAssess(ims.core.admin.vo.EpisodeOfCareRefVo episodeRef)
	{
		if(episodeRef == null)
			throw new CodingRuntimeException("The Episode Of Care must not be null");
		DomainFactory factory = getDomainFactory();
		String hql = " select s1_1 from SiteAssess as s1_1 left join s1_1.episode as e1_1 where (s1_1.episode.id = :episodeId   ) order by s1_1.creationDate desc, s1_1.creationTime desc ";
		List lst = factory.find(hql, new String[]{"episodeId"}, new Object[]{episodeRef.getID_EpisodeOfCare()});
			
		if(lst == null || lst.size() == 0)
			return null;
		
		return SiteAssessVoAssembler.createSiteAssessVoCollectionFromSiteAssess(lst);
	}

	public ims.dtomove.vo.SiteAssessVo getSiteAssess(ims.dto_move.vo.SiteAssessRefVo siteAssessRef)
	{
		if(siteAssessRef == null)
			throw new CodingRuntimeException(" SiteAssess must not be null ");
		
		return SiteAssessVoAssembler.create((SiteAssess)getDomainFactory().getDomainObject(SiteAssess.class,siteAssessRef.getID_SiteAssess()));
	}
}
