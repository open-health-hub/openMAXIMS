//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.54 build 2705.14694)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.assessment.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.assessment.configuration.domain.objects.GraphicAssessment;
import ims.assessment.configuration.domain.objects.UserAssessment;
import ims.assessment.configuration.domain.objects.UserPatientAssessmentFavourites;
import ims.assessment.domain.base.impl.BaseAssessmentFavouritesImpl;
import ims.assessment.vo.UserPatientAssessmentFavouritesVo;
import ims.assessment.vo.domain.GraphicAssessmentShortVoAssembler;
import ims.assessment.vo.domain.GraphicAssessmentVoAssembler;
import ims.assessment.vo.domain.UserAssessmentShortVoAssembler;
import ims.assessment.vo.domain.UserAssessmentVoAssembler;
import ims.assessment.vo.domain.UserPatientAssessmentFavouritesVoAssembler;
import ims.core.resource.people.vo.HcpRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

public class AssessmentFavouritesImpl extends BaseAssessmentFavouritesImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* list Graphic Assessments
	*/
	public ims.assessment.vo.GraphicAssessmentShortVoCollection listGraphicAssessment(String name)
	{
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql  = new StringBuffer("from GraphicAssessment ga ");
		ArrayList markers = new ArrayList();
		ArrayList values  = new ArrayList();
		String andSql  	  = new String("");
		
		if(name != null)
			hql.append(" where ");
		
		if(name != null && name.length() > 0)
		{
			hql.append(andSql + " upper(ga.name) like :name");
			values.add(name.toUpperCase());
			markers.add("name");
			andSql = " and ";
		}
		
		List list = factory.find(hql.toString(), markers, values);
		
		return GraphicAssessmentShortVoAssembler.createGraphicAssessmentShortVoCollectionFromGraphicAssessment(list).sort();
	}

	/**
	* get Graphic Assessment
	*/
	public ims.assessment.vo.GraphicAssessmentVo getGraphicAssessment(ims.assessment.configuration.vo.GraphicAssessmentRefVo graphicRefVo)
	{
		DomainFactory factory = getDomainFactory();
		return GraphicAssessmentVoAssembler.create((GraphicAssessment)factory.getDomainObject(GraphicAssessment.class, graphicRefVo.getID_GraphicAssessment()));
	}

	/**
	* Returns a Favourite
	*/
	public UserPatientAssessmentFavouritesVo getFavourite(HcpRefVo hcpRefVo) 
	{
		if(hcpRefVo == null)
			throw new CodingRuntimeException("Cannot getFavourite for null hcpRefVo");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from UserPatientAssessmentFavourites upaf where ");
		ArrayList markers = new ArrayList();
		ArrayList values  = new ArrayList();
		
		hql.append("upaf.hCP.id = :hcpId");
		values.add(hcpRefVo.getID_Hcp());
		markers.add("hcpId");

		List list = factory.find(hql.toString(),markers,values);
		
		ims.assessment.vo.UserPatientAssessmentFavouritesVoCollection voColl = UserPatientAssessmentFavouritesVoAssembler.createUserPatientAssessmentFavouritesVoCollectionFromUserPatientAssessmentFavourites(list);
		int size = voColl.size();
		
		if(size == 1)
			return voColl.get(0);
		
		if( size > 1)
			throw new CodingRuntimeException("More than one favourite record for the current HCP exists.");

		return null;
	}

	/**
	* Favourite
	*/
	public UserPatientAssessmentFavouritesVo saveFavourite(UserPatientAssessmentFavouritesVo favouriteVo) throws StaleObjectException
	{
		if(favouriteVo == null)
			throw new CodingRuntimeException("Cannot save null value for UserPatientAssessmentFavouritesVo");
		
		if(favouriteVo.isValidated() == false)
			throw new CodingRuntimeException("UserPatientAssessmentFavouritesVo has not been validated");
		
		DomainFactory factory = getDomainFactory();
		UserPatientAssessmentFavourites doFavourites = UserPatientAssessmentFavouritesVoAssembler.extractUserPatientAssessmentFavourites(factory, favouriteVo);
		factory.save(doFavourites);	
		return UserPatientAssessmentFavouritesVoAssembler.create(doFavourites);
	}

	/**
	* list Userassessments
	*/
	public ims.assessment.vo.UserAssessmentShortVoCollection listUserAssessments(String name)
	{
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql  = new StringBuffer("from UserAssessment ua ");
		ArrayList markers = new ArrayList();
		ArrayList values  = new ArrayList();
		String andSql  	  = new String("");
		
		if(name != null)
			hql.append(" where ");
		
		if(name != null && name.length() > 0)
		{
			hql.append(andSql + " upper(ua.name) like :name");
			values.add(name.toUpperCase());
			markers.add("name");
			andSql = " and ";
		}
		
		List list = factory.find(hql.toString(), markers, values);
		
		return UserAssessmentShortVoAssembler.createUserAssessmentShortVoCollectionFromUserAssessment(list).sort();
	}

	/**
	* User Defined Oject
	*/
	public ims.assessment.vo.UserAssessmentVo getUserAssessment(ims.assessment.configuration.vo.UserAssessmentRefVo userassessRefVo)
	{
		DomainFactory factory = getDomainFactory();
		return UserAssessmentVoAssembler.create((UserAssessment)factory.getDomainObject(UserAssessment.class, userassessRefVo.getID_UserAssessment()));
	}

}
