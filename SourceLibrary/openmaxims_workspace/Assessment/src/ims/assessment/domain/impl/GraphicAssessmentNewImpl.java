//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.42 build 2208.18562)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.domain.impl;

import ims.assessment.configuration.domain.objects.GraphicAssessment;
import ims.assessment.domain.base.impl.BaseGraphicAssessmentNewImpl;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.domain.GraphicAssessmentVoAssembler;
import ims.core.admin.domain.objects.TemplateBo;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.clinical.domain.objects.QuestionInformation;
import ims.core.vo.QuestionInformationVo;
import ims.core.vo.TemplateBoLiteVo;
import ims.core.vo.domain.QuestionInformationVoAssembler;
import ims.core.vo.domain.TemplateBoLiteVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;


public class GraphicAssessmentNewImpl extends BaseGraphicAssessmentNewImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* Save Graphic Assessment
	*/
	public ims.assessment.vo.GraphicAssessmentVo saveGraphicAssessment(ims.assessment.vo.GraphicAssessmentVo voGraphicAssessment, Integer clonedId) throws ims.domain.exceptions.StaleObjectException
	{
		if(voGraphicAssessment == null)
			throw new RuntimeException("Cannot save null value for GraphicAssessmentVo");
		if(voGraphicAssessment.isValidated() == false)
			throw new CodingRuntimeException("GraphicAssessmentVo is not validated");
		
		DomainFactory factory = getDomainFactory();
		GraphicAssessment doGraphicAssesssment = GraphicAssessmentVoAssembler.extractGraphicAssessment(factory, voGraphicAssessment);
		GraphicAssessment doGraphicAssesssmentCloned = null;

		if(clonedId != null)
		{
			doGraphicAssesssmentCloned = (GraphicAssessment) factory.getDomainObject(GraphicAssessment.class, clonedId);
			doGraphicAssesssmentCloned.setActiveStatus(factory.getLookupInstance(PreActiveActiveInactiveStatus.INACTIVE.getID()));
		}
		/*
		System.out.println("Values from VO...");
		System.out.println(voGraphicAssessment.getAssessmentStage().get(0));
		System.out.println(voGraphicAssessment.getFindingsAndQuestions().get(0).getFindingStage().get(0).getAssessmentStage());

		System.out.println("Values from BO...");
		System.out.println(doGraphicAssesssment.getAssessmentStage().toArray()[0]);
		System.out.println(((FindingStageQuestions)((GraphicAssessmentFinding)doGraphicAssesssment.getFindingsAndQuestions().toArray()[0]).getFindingStage().toArray()[0]).getAssessmentStage());
		
		Set stages = doGraphicAssesssment.getAssessmentStage();
		
		Set findingsAndQuestions = doGraphicAssesssment.getFindingsAndQuestions();
		for (Iterator iter = findingsAndQuestions.iterator(); iter.hasNext();)
		{
			GraphicAssessmentFinding gaf = (GraphicAssessmentFinding) iter.next();
			
			Set findingStages = gaf.getFindingStage();
			for (Iterator iterator = findingStages.iterator(); iterator.hasNext();)
			{
				FindingStageQuestions fsq = (FindingStageQuestions) iterator.next();
				
				fsq.setAssessmentStage((GraphicAssessmentStage) stages.toArray()[0]);
			}
			
		}

		System.out.println("Values from BO...");
		System.out.println(doGraphicAssesssment.getAssessmentStage().toArray()[0]);
		System.out.println(((FindingStageQuestions)((GraphicAssessmentFinding)doGraphicAssesssment.getFindingsAndQuestions().toArray()[0]).getFindingStage().toArray()[0]).getAssessmentStage());
		*/
		
		factory.save(doGraphicAssesssment);
		
		if(doGraphicAssesssmentCloned != null)
			factory.save(doGraphicAssesssmentCloned);

		/*
		for (Iterator iter = links.keySet().iterator(); iter.hasNext();)
		{
			FindingStageQuestions element = (FindingStageQuestions) iter.next();
			
			element.setAssessmentStage((GraphicAssessmentStage) links.get(element));
			
			factory.update(element);
		}
		*/
		
		return GraphicAssessmentVoAssembler.create(doGraphicAssesssment);
	}

	public GraphicAssessmentVo getGraphicAssessment(Integer id)
	{
		if (id == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		GraphicAssessment doGraphicAssessment = (GraphicAssessment)factory.getDomainObject(GraphicAssessment.class, id);
		return GraphicAssessmentVoAssembler.create(doGraphicAssessment);
	}

	public QuestionInformationVo getQuestion(Integer questionId)
	{
		if(questionId == null)
			throw new RuntimeException("Cannot get QuestionInformatioVo for null id");
		
		DomainFactory factory = getDomainFactory();
		QuestionInformation doQuestionInformation = (QuestionInformation)factory.getDomainObject(QuestionInformation.class, questionId);
		return QuestionInformationVoAssembler.create(doQuestionInformation);
	}

	public Integer counActiveAssessmentByType(UserDefinedAssessmentType type, Integer excludedId)
	{
		if(type == null)
			throw new CodingRuntimeException("Cannot count GraphicAssessment for null GraphicAssessment");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select count (g1_1.id) from GraphicAssessment as g1_1 where g1_1.isRIE is null and (g1_1.assessmentType.id = :TYPE and g1_1.activeStatus.id = :STATUS)");
		ArrayList<String> paramNames = new ArrayList<String>();
		paramNames.add("TYPE");
		paramNames.add("STATUS");
		
		ArrayList<Object> paramValues = new ArrayList<Object>();
		paramValues.add(new Integer(type.getID()));
		paramValues.add(new Integer(PreActiveActiveInactiveStatus.ACTIVE.getID()));
		
		if(excludedId != null)
		{
			hql.append(" and ");
			hql.append("g1_1.id !=:EXCLUDEDID");
			paramNames.add("EXCLUDEDID");
			paramValues.add(excludedId);
		}
		List list = factory.find(hql.toString(), paramNames, paramValues);
		
		Object objCount = list.get(0);
		
		if(objCount instanceof Long)
			return new Integer(((Long)objCount).intValue());
		
		return (Integer) objCount;
	}

	/**
	 * WDEV-13704
	 * Function used to retrieve a template based on 
	 */
	public TemplateBoLiteVo getReportTemplate(TemplateBoRefVo templateRef)
	{
		if (templateRef == null || !templateRef.getID_TemplateBoIsNotNull())
			return null;
		
		return TemplateBoLiteVoAssembler.create((TemplateBo) getDomainFactory().getDomainObject(TemplateBo.class, templateRef.getID_TemplateBo()));
	}

	//WDEV-14708
	public TemplateBoLiteVo getReportTemplateByName(String templateName)
	{	
		DomainFactory factory = getDomainFactory();
		String hql = "select template from TemplateBo as template where template.name =:tempName";
		List <?> list = factory.find(hql,new String[]{"tempName"}, new Object[]{templateName});

		if (list!=null && list.size()>0)
			return TemplateBoLiteVoAssembler.createTemplateBoLiteVoCollectionFromTemplateBo(list).get(0);
		
		return null;
	}
}
