//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2389.16953)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.domain.impl;

import ims.assessment.domain.base.impl.BaseUserDefinedFormImpl;
import java.util.ArrayList;
import java.util.List;

import ims.assessment.configuration.domain.objects.UserAssessFavourites;
import ims.assessment.configuration.domain.objects.UserDefinedObject;
import ims.assessment.vo.UserAssessmentFavouritesShortVo;
import ims.assessment.vo.UserDefinedObjectVo;
import ims.assessment.vo.domain.UserAssessmentFavouritesShortVoAssembler;
import ims.assessment.vo.domain.UserDefinedObjectShortVoAssembler;
import ims.assessment.vo.domain.UserDefinedObjectVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;

public class UserDefinedFormImpl extends BaseUserDefinedFormImpl
{
	/**
	* list User Defined Objects
	*/
	public ims.assessment.vo.UserDefinedObjectShortVoCollection listUserDefinedObjects(String name, ims.core.vo.lookups.UserDefinedObjectType category, PreActiveActiveInactiveStatus status)
	{
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql  = new StringBuffer("from UserDefinedObject udo ");
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values  = new ArrayList<Object>();
		String andSql  	  = new String("");
		
		if((name != null && name.length() > 0) || category != null || status != null)
			hql.append(" where ");
		
		if(name != null && name.length() > 0)
		{
			hql.append(andSql + " upper(udo.name) like :name");
			values.add(name.toUpperCase());
			markers.add("name");
			andSql = " and ";
		}
		
		if(category != null)
		{
			hql.append(andSql + " udo.objectType = :category");
			values.add(getDomLookup(category));
			markers.add("category");
			andSql = " and ";
		}
		
		if(status != null)
		{
			hql.append(andSql + " udo.activeStatus = :status");
			values.add(getDomLookup(status));
			markers.add("status");
			andSql = " and ";
		}

		List<?> list = factory.find(hql.toString(), markers, values);
		
		return UserDefinedObjectShortVoAssembler.createUserDefinedObjectShortVoCollectionFromUserDefinedObject(list).sort();
	}

	public UserDefinedObjectVo getUserDefinedObject(Integer id)
	{
		DomainFactory factory = getDomainFactory();
		return UserDefinedObjectVoAssembler.create((UserDefinedObject)factory.getDomainObject(UserDefinedObject.class, id));
	}

	public UserAssessmentFavouritesShortVo getFavourite(Integer hcpId)
	{
		if(hcpId == null)
			throw new CodingRuntimeException("Cannot get UserAssessmentFavouritesVo for null id");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from UserAssessFavourites uaf where ");
		ArrayList markers = new ArrayList();
		ArrayList values  = new ArrayList();
		
		hql.append("uaf.authoringHCP.id = :hcpId");
		values.add(hcpId);
		markers.add("hcpId");

		List list = factory.find(hql.toString(),markers,values);
		
		ims.assessment.vo.UserAssessmentFavouritesShortVoCollection voColl = UserAssessmentFavouritesShortVoAssembler.createUserAssessmentFavouritesShortVoCollectionFromUserAssessFavourites(list);
		int size = voColl.size();
		
		if(size == 1)
			return voColl.get(0);
		
		if( size > 1)
			throw new CodingRuntimeException("More than one favourite record for the current HCP exists.");

		return null;
	}

	public UserAssessmentFavouritesShortVo saveFavourite(UserAssessmentFavouritesShortVo favouriteVo) throws ims.domain.exceptions.StaleObjectException
	{
		if(favouriteVo == null)
			throw new CodingRuntimeException("Cannot save null value for UserAssessmentFavouritesVo");
		if(favouriteVo.isValidated() == false)
			throw new CodingRuntimeException("UserAssessmentFavouritesShortVo has not been validated");
		DomainFactory factory = getDomainFactory();
		UserAssessFavourites doFavourites = UserAssessmentFavouritesShortVoAssembler.extractUserAssessFavourites(factory, favouriteVo);
		factory.save(doFavourites);	
		return UserAssessmentFavouritesShortVoAssembler.create(doFavourites);
	}
}
