//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.assessmentfavourites;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabSearchContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdAssessmentRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAssessmentRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolNameOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolName()
				{
					return (String)super.row.get(0);
				}
				public void setcolName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolTypeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolTypeOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolType()
				{
					return (String)super.row.get(1);
				}
				public void setcolType(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolTypeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolSelectReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolSelectOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getcolSelect()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolSelect(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolSelectTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.vo.ValueObject getValue()
				{
					return (ims.vo.ValueObject)super.row.getValue();
				}
				public void setValue(ims.vo.ValueObject value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAssessmentRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAssessmentRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAssessmentRow get(int index)
				{
					return new grdAssessmentRow(super.collection.get(index));
				}
				public grdAssessmentRow newRow()
				{
					return new grdAssessmentRow(super.collection.newRow());
				}
				public grdAssessmentRow newRow(boolean autoSelect)
				{
					return new grdAssessmentRow(super.collection.newRow(autoSelect));
				}
				public grdAssessmentRow newRowAt(int index)
				{
					return new grdAssessmentRow(super.collection.newRowAt(index));
				}
				public grdAssessmentRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAssessmentRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAssessmentGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.vo.ValueObject[] getValues()
				{
					ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.vo.ValueObject getValue()
				{
					return (ims.vo.ValueObject)super.grid.getValue();
				}
				public void setValue(ims.vo.ValueObject value)
				{
					super.grid.setValue(value);
				}
				public grdAssessmentRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAssessmentRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAssessmentRowCollection getRows()
				{
					return new grdAssessmentRowCollection(super.grid.getRows());
				}
				public grdAssessmentRow getRowByValue(ims.vo.ValueObject value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAssessmentRow(row);
				}
				public void setcolNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
		
			public static class Group1RadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 248, 8, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Graphical Assessments", startTabIndex.intValue() + 2);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 80, 8, 136, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Structured Assessments", startTabIndex.intValue() + 1);
				}
				public void setText(Group1Enumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public Group1Enumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return Group1Enumeration.None;
						case 0: return Group1Enumeration.rdoGraphical;
						case 1: return Group1Enumeration.rdoStructured;
					}
					return null;
				}
				public void setValue(Group1Enumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(Group1Enumeration.None.id);
				}
				public boolean isEnabled(Group1Enumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(Group1Enumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(Group1Enumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(Group1Enumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class Group1Enumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static Group1Enumeration None = new Group1Enumeration(-1);
				public static Group1Enumeration rdoGraphical = new Group1Enumeration(0);
				public static Group1Enumeration rdoStructured = new Group1Enumeration(1);
				private Group1Enumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((Group1Enumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 80, 32, 376, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 536, 384, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				Grid m_grdAssessmentTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuFavourites, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAssessmentTemp);
				grdAssessmentGrid grdAssessment = (grdAssessmentGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAssessmentGrid.class, m_grdAssessmentTemp);
				grdAssessment.addStringColumn("Name", 0, 0, 230, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAssessment.addStringColumn("Type", 0, 0, 230, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAssessment.addBoolColumn("Select", 0, 0, -1, false, true, 0, true);
				super.addGrid(grdAssessment);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 512, 24, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 480, 24, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroup1);
				Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
				Group1.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(Group1);
			}

			public TextBox txtNameSearch()
			{
				return (TextBox)super.getControl(1);
			}
			public grdAssessmentGrid grdAssessment()
			{
				return (grdAssessmentGrid)super.getGrid(0);
			}
			public ImageButton imbClear()
			{
				return (ImageButton)super.getControl(3);
			}
			public ImageButton imbSearch()
			{
				return (ImageButton)super.getControl(4);
			}
			public Group1RadioButton Group1()
			{
				return (Group1RadioButton)super.getRadioButton(0);
			}
		}
		public static class tabFavouritesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 536, 448, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, contextMenus.contextMenuFavourites, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
			}

			public TreeView treFavourites()
			{
				return (TreeView)super.getControl(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 560, 488, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabSearch = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Search Assessments", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSearchContainer m_tabSearchContainer = (tabSearchContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSearchContainer.class, m_tabSearch, factory);
			super.addContainer(m_tabSearch, m_tabSearchContainer);
			ims.framework.utils.SizeInfo m_tabSearchDesignSize = new ims.framework.utils.SizeInfo(560, 488);
			ims.framework.utils.SizeInfo m_tabSearchRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
			m_tabSearchContainer.setContext(form, appForm, m_tabSearch, loader, form_images_local, contextMenus, startControlID, m_tabSearchDesignSize, m_tabSearchRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 560, 488, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabFavourites = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Favourites", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabFavouritesContainer m_tabFavouritesContainer = (tabFavouritesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabFavouritesContainer.class, m_tabFavourites, factory);
			super.addContainer(m_tabFavourites, m_tabFavouritesContainer);
			ims.framework.utils.SizeInfo m_tabFavouritesDesignSize = new ims.framework.utils.SizeInfo(560, 488);
			ims.framework.utils.SizeInfo m_tabFavouritesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper10.getWidth(), anchoringHelper10.getHeight());
			m_tabFavouritesContainer.setContext(form, appForm, m_tabFavourites, loader, form_images_local, contextMenus, startControlID, m_tabFavouritesDesignSize, m_tabFavouritesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabSearch().setVisible(false);
			tabFavourites().setVisible(false);
		}
		public void settabSearchEnabled(boolean value)
		{
			tabSearch().setEnabled(value);
		}
		public void settabFavouritesEnabled(boolean value)
		{
			tabFavourites().setEnabled(value);
		}
		public void showtabSearch()
		{
			tabFavourites().setVisible(false);
			tabSearch().setVisible(true);
		}
		public void showtabFavourites()
		{
			tabSearch().setVisible(false);
			tabFavourites().setVisible(true);
		}

		public tabSearchContainer tabSearch()
		{
			return (tabSearchContainer)super.layers.get(0);
		}
		public tabFavouritesContainer tabFavourites()
		{
			return (tabFavouritesContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(576, 536);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuFavourites = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuFavouritesAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add To Favourites", true, false, new Integer(102257), true, false);
		contextMenus.contextMenuFavourites.add(contextMenus.contextMenuFavouritesAddItem);
		contextMenus.contextMenuFavouritesAddNewFolderItem = factory.createMenuItem(startControlID.intValue() + 2, "Add New Folder", true, false, new Integer(102208), true, false);
		contextMenus.contextMenuFavourites.add(contextMenus.contextMenuFavouritesAddNewFolderItem);
		contextMenus.contextMenuFavouritesEditFolderItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit Folder", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuFavourites.add(contextMenus.contextMenuFavouritesEditFolderItem);
		contextMenus.contextMenuFavouritesRemoveFolderItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuFavourites.add(contextMenus.contextMenuFavouritesRemoveFolderItem);
		form.registerMenu(contextMenus.contextMenuFavourites);


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 328, 504, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 488, 504, 80, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 400, 504, 80, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Select", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnSaveFavourite()
	{
		return (Button)super.getControl(2);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(3);
	}
	public Button btnSelect()
	{
		return (Button)super.getControl(4);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			ICP = new ICPForms();
		}
		public final class ICPForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPForms()
			{
				ICPConfig = new LocalFormName(118111);
			}
			public final FormName ICPConfig;
		}

		public ICPForms ICP;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				CollapseAll = new ImageHelper(102208, "Images/Core/Folder.gif", new Integer(16), new Integer(16));
				ExpandAll = new ImageHelper(102207, "Images/Core/open_folder.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image CollapseAll;
			public final ims.framework.utils.Image ExpandAll;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_FavouriteAssessments = new ims.framework.ContextVariable("FavouriteAssessments", prefix + "_lv_Assessment.AssessmentFavourites.__internal_x_context__FavouriteAssessments_" + componentIdentifier + "");
		}
		
		public boolean getFavouriteAssessmentsIsNotNull()
		{
			return !cxl_FavouriteAssessments.getValueIsNull(context);
		}
		public ims.assessment.vo.UserPatientAssessmentFavouritesVo getFavouriteAssessments()
		{
			return (ims.assessment.vo.UserPatientAssessmentFavouritesVo)cxl_FavouriteAssessments.getValue(context);
		}
		public void setFavouriteAssessments(ims.assessment.vo.UserPatientAssessmentFavouritesVo value)
		{
			cxl_FavouriteAssessments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FavouriteAssessments = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class Favourites implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int AddNewFolder = 2;
			public static final int EditFolder = 3;
			public static final int RemoveFolder = 4;
		}
		public void disableAllFavouritesMenuItems()
		{
			this.contextMenuFavouritesAddItem.setEnabled(false);
			this.contextMenuFavouritesAddNewFolderItem.setEnabled(false);
			this.contextMenuFavouritesEditFolderItem.setEnabled(false);
			this.contextMenuFavouritesRemoveFolderItem.setEnabled(false);
		}
		public void hideAllFavouritesMenuItems()
		{
			this.contextMenuFavouritesAddItem.setVisible(false);
			this.contextMenuFavouritesAddNewFolderItem.setVisible(false);
			this.contextMenuFavouritesEditFolderItem.setVisible(false);
			this.contextMenuFavouritesRemoveFolderItem.setVisible(false);
		}
		private Menu contextMenuFavourites;
		public MenuItem getFavouritesAddItem()
		{
			return this.contextMenuFavouritesAddItem;
		}
		private MenuItem contextMenuFavouritesAddItem;
		public MenuItem getFavouritesAddNewFolderItem()
		{
			return this.contextMenuFavouritesAddNewFolderItem;
		}
		private MenuItem contextMenuFavouritesAddNewFolderItem;
		public MenuItem getFavouritesEditFolderItem()
		{
			return this.contextMenuFavouritesEditFolderItem;
		}
		private MenuItem contextMenuFavouritesEditFolderItem;
		public MenuItem getFavouritesRemoveFolderItem()
		{
			return this.contextMenuFavouritesRemoveFolderItem;
		}
		private MenuItem contextMenuFavouritesRemoveFolderItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[107];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ASSESSMENTTYPE", "AssessmentType");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ACTIVESTATUS", "ActiveStatus");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-HELPURL", "HelpUrl");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-STOREPRINTEDREPORT", "StorePrintedReport");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.GraphicAssessmentShortVo", "BO-1028100006-ASSOCIATEDREPORTFORPRINTING", "AssociatedReportForPrinting");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-NAME", "Name");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-ASSESSMENTTYPE", "AssessmentType");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-ACTIVESTATUS", "ActiveStatus");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-HELPURL", "HelpUrl");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-STOREPRINTEDREPORT", "StorePrintedReport");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentVo", "BO-1028100006-ASSOCIATEDREPORTFORPRINTING", "AssociatedReportForPrinting");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ID", "ID_UserAssessment");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-NAME", "Name");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-DESCRIPTION", "Description");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-HELPURL", "HelpURL");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-CATEGORY", "Category");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentVo", "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.AssessmentFavourites.__internal_x_context__FavouriteAssessments_" + componentIdentifier, "BO-1083100005-ID", "ID_UserPatientAssessmentFavourites");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.AssessmentFavourites.__internal_x_context__FavouriteAssessments_" + componentIdentifier, "BO-1083100005-HCP", "HCP");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
