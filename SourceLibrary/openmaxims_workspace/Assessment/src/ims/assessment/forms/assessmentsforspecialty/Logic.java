//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3362.22026)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.assessmentsforspecialty;

import ims.assessment.forms.assessmentsforspecialty.GenForm.grdDetailsRow;
import ims.assessment.vo.UserAssessmentLiteVoCollection;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnSave().setEnabled(false);
		
		UserAssessmentLiteVoCollection coll = form.getGlobalContext().Assessment.getAssessmentsForSpecialtyCollection();
		for(int i = 0 ; coll != null && i < coll.size() ; i++)
		{
			if (coll.get(i).getActiveStatusIsNotNull()
				&& coll.get(i).getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
			{
				grdDetailsRow row = form.grdDetails().getRows().newRow();
				row.setColAssessment(coll.get(i).getName());
				row.setValue(coll.get(i));
			}
		}
	}
	@Override
	protected void onGrdDetailsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnSave().setEnabled(true);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setSelectedUserAssessmentLite(form.grdDetails().getSelectedRow().getValue());
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
