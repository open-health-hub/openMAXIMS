//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.findingquestions;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrFindingsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabSearchContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrFindingSearchLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabPageViewContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 744, 448, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuDrawingConfig, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public DynamicGrid dyngrdFinding()
					{
						return (DynamicGrid)super.getControl(0);
					}
				}
				public static class tabPageSelectContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Button Controls
						RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 686, 440, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
						RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 600, 440, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Select", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 744, 416, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.EDITABLE, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public Button btnCancelSelect()
					{
						return (Button)super.getControl(0);
					}
					public Button btnSelect()
					{
						return (Button)super.getControl(1);
					}
					public DynamicGrid dyngrdSelect()
					{
						return (DynamicGrid)super.getControl(2);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 784, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageView = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL," ", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabPageViewContainer m_tabPageViewContainer = (tabPageViewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageViewContainer.class, m_tabPageView, factory);
					super.addContainer(m_tabPageView, m_tabPageViewContainer);
					ims.framework.utils.SizeInfo m_tabPageViewDesignSize = new ims.framework.utils.SizeInfo(784, 504);
					ims.framework.utils.SizeInfo m_tabPageViewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper5.getWidth(), anchoringHelper5.getHeight());
					m_tabPageViewContainer.setContext(form, appForm, m_tabPageView, loader, form_images_local, contextMenus, startControlID, m_tabPageViewDesignSize, m_tabPageViewRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 784, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageSelect = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL," ", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabPageSelectContainer m_tabPageSelectContainer = (tabPageSelectContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageSelectContainer.class, m_tabPageSelect, factory);
					super.addContainer(m_tabPageSelect, m_tabPageSelectContainer);
					ims.framework.utils.SizeInfo m_tabPageSelectDesignSize = new ims.framework.utils.SizeInfo(784, 504);
					ims.framework.utils.SizeInfo m_tabPageSelectRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper6.getWidth(), anchoringHelper6.getHeight());
					m_tabPageSelectContainer.setContext(form, appForm, m_tabPageSelect, loader, form_images_local, contextMenus, startControlID, m_tabPageSelectDesignSize, m_tabPageSelectRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabPageView().setVisible(false);
					tabPageSelect().setVisible(false);
				}
				public void showtabPageView()
				{
					tabPageSelect().setVisible(false);
					tabPageView().setVisible(true);
				}
				public void showtabPageSelect()
				{
					tabPageView().setVisible(false);
					tabPageSelect().setVisible(true);
				}
		
				public tabPageViewContainer tabPageView()
				{
					return (tabPageViewContainer)super.layers.get(0);
				}
				public tabPageSelectContainer tabPageSelect()
				{
					return (tabPageSelectContainer)super.layers.get(1);
				}
			}
		
			public static class GroupCriteriaRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 320, 8, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "Exact text:", startTabIndex.intValue() + 3);
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 224, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper8.getX(), anchoringHelper8.getY(), anchoringHelper8.getWidth(), "Contains:", startTabIndex.intValue() + 2);
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 120, 8, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper9.getX(), anchoringHelper9.getY(), anchoringHelper9.getWidth(), "Begins with:", startTabIndex.intValue() + 1);
				}
				public void setText(GroupCriteriaEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupCriteriaEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupCriteriaEnumeration.None;
						case 0: return GroupCriteriaEnumeration.rdoExactText;
						case 1: return GroupCriteriaEnumeration.rdoContains;
						case 2: return GroupCriteriaEnumeration.rdoBeginsWith;
					}
					return null;
				}
				public void setValue(GroupCriteriaEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupCriteriaEnumeration.None.id);
				}
				public boolean isEnabled(GroupCriteriaEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupCriteriaEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupCriteriaEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupCriteriaEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupCriteriaEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupCriteriaEnumeration None = new GroupCriteriaEnumeration(-1);
				public static GroupCriteriaEnumeration rdoExactText = new GroupCriteriaEnumeration(0);
				public static GroupCriteriaEnumeration rdoContains = new GroupCriteriaEnumeration(1);
				public static GroupCriteriaEnumeration rdoBeginsWith = new GroupCriteriaEnumeration(2);
				private GroupCriteriaEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupCriteriaEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrFindingSearchLayer m_lyrFindingSearchLayer = (lyrFindingSearchLayer)LayerFlyweightFactory.getInstance().createLayer(lyrFindingSearchLayer.class, this, factory);
				super.addLayer(m_lyrFindingSearchLayer);
				m_lyrFindingSearchLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 24, 32, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Finding Name:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 120, 32, 584, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(70), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 768, 27, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 736, 27, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupCriteria = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
				super.addControl(tmpGroupCriteria);
				GroupCriteriaRadioButton GroupCriteria = (GroupCriteriaRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupCriteriaRadioButton.class, tmpGroupCriteria);
				GroupCriteria.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupCriteria);
			}

			public lyrFindingSearchLayer lyrFindingSearch()
			{
				return (lyrFindingSearchLayer)super.getLayer(0);
			}
			public TextBox txtSearch()
			{
				return (TextBox)super.getControl(3);
			}
			public ImageButton imbClearFindings()
			{
				return (ImageButton)super.getControl(4);
			}
			public ImageButton imbSearchFinding()
			{
				return (ImageButton)super.getControl(5);
			}
			public GroupCriteriaRadioButton GroupCriteria()
			{
				return (GroupCriteriaRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabViewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbColorComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.framework.utils.Color value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.framework.utils.Color value)
				{
					return super.control.removeRow(value);
				}
				public ims.framework.utils.Color getValue()
				{
					return (ims.framework.utils.Color)super.control.getValue();
				}
				public void setValue(ims.framework.utils.Color value)
				{
					// should add value if does not exist
					if(value != null && super.control.getValues() != null)
					{
						boolean exist = false;
						for(int x = 0; x < super.control.getValues().size(); x++)
						{
							ims.framework.utils.Color item = (ims.framework.utils.Color)super.control.getValues().get(x);
							if(item != null && item.equals(value))
							{
								exist = true;
								break;
							}
						}
						if(!exist)
						{
							newRow(value, value.getText(), value.getImage());
						}
					}
					super.control.setValue(value);
				}
			}
			public static class cmbStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbImageComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.admin.vo.AppImageVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.admin.vo.AppImageVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.admin.vo.AppImageVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.admin.vo.AppImageVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.admin.vo.AppImageVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.admin.vo.AppImageVo getValue()
				{
					return (ims.admin.vo.AppImageVo)super.control.getValue();
				}
				public void setValue(ims.admin.vo.AppImageVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
		
			public static class GroupColourImageRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 512, 16, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "Line", startTabIndex.intValue() + 16);
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 603, 16, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper15.getX(), anchoringHelper15.getY(), anchoringHelper15.getWidth(), "Image", startTabIndex.intValue() + 17);
				}
				public void setText(GroupColourImageEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupColourImageEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupColourImageEnumeration.None;
						case 0: return GroupColourImageEnumeration.rdoColouredLine;
						case 1: return GroupColourImageEnumeration.rdoImage;
					}
					return null;
				}
				public void setValue(GroupColourImageEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupColourImageEnumeration.None.id);
				}
				public boolean isEnabled(GroupColourImageEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupColourImageEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupColourImageEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupColourImageEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupColourImageEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupColourImageEnumeration None = new GroupColourImageEnumeration(-1);
				public static GroupColourImageEnumeration rdoColouredLine = new GroupColourImageEnumeration(0);
				public static GroupColourImageEnumeration rdoImage = new GroupColourImageEnumeration(1);
				private GroupColourImageEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupColourImageEnumeration)o).id;
				}
				private int id;
			}
		
			public static class GroupRenderStyleRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 603, 96, 104, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper16.getX(), anchoringHelper16.getY(), anchoringHelper16.getWidth(), "Multiple Markings", startTabIndex.intValue() + 22);
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 512, 96, 88, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper17.getX(), anchoringHelper17.getY(), anchoringHelper17.getWidth(), "Single Mark", startTabIndex.intValue() + 21);
				}
				public void setText(GroupRenderStyleEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public GroupRenderStyleEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return GroupRenderStyleEnumeration.None;
						case 0: return GroupRenderStyleEnumeration.rdoMultipleImages;
						case 1: return GroupRenderStyleEnumeration.rdoSingleImage;
					}
					return null;
				}
				public void setValue(GroupRenderStyleEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(GroupRenderStyleEnumeration.None.id);
				}
				public boolean isEnabled(GroupRenderStyleEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(GroupRenderStyleEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(GroupRenderStyleEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(GroupRenderStyleEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class GroupRenderStyleEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static GroupRenderStyleEnumeration None = new GroupRenderStyleEnumeration(-1);
				public static GroupRenderStyleEnumeration rdoMultipleImages = new GroupRenderStyleEnumeration(0);
				public static GroupRenderStyleEnumeration rdoSingleImage = new GroupRenderStyleEnumeration(1);
				private GroupRenderStyleEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((GroupRenderStyleEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 135, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Associated Questions:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 98, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 384, 98, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Image Render Style:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 384, 70, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Image:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 384, 40, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Colour:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 70, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 42, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Finding Name:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 725, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 645, 552, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 104, 68, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(70), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 104, 40, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(70), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 512, 40, 288, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbColorTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbColorTemp);
				cmbColorComboBox cmbColor = (cmbColorComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbColorComboBox.class, m_cmbColorTemp);
				super.addComboBox(cmbColor);
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 104, 96, 240, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbStatusTemp);
				cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
				super.addComboBox(cmbStatus);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 512, 68, 250, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_qmbImageTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbImageTemp);
				qmbImageComboBox qmbImage = (qmbImageComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbImageComboBox.class, m_qmbImageTemp);
				super.addComboBox(qmbImage);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 152, 784, 384, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 772, 67, 28, 28, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Admin.ImageEnabled24, form_images_local.Admin.ImageDisabled24, "Select Image", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpGroupColourImage = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE});
				super.addControl(tmpGroupColourImage);
				GroupColourImageRadioButton GroupColourImage = (GroupColourImageRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupColourImageRadioButton.class, tmpGroupColourImage);
				GroupColourImage.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupColourImage);
				RadioButton tmpGroupRenderStyle = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE});
				super.addControl(tmpGroupRenderStyle);
				GroupRenderStyleRadioButton GroupRenderStyle = (GroupRenderStyleRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupRenderStyleRadioButton.class, tmpGroupRenderStyle);
				GroupRenderStyle.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(GroupRenderStyle);
			}

			public Button btnUpdate()
			{
				return (Button)super.getControl(7);
			}
			public Button btnCancel()
			{
				return (Button)super.getControl(8);
			}
			public Button btnSave()
			{
				return (Button)super.getControl(9);
			}
			public TextBox txtDescription()
			{
				return (TextBox)super.getControl(10);
			}
			public TextBox txtFinding()
			{
				return (TextBox)super.getControl(11);
			}
			public cmbColorComboBox cmbColor()
			{
				return (cmbColorComboBox)super.getComboBox(0);
			}
			public cmbStatusComboBox cmbStatus()
			{
				return (cmbStatusComboBox)super.getComboBox(1);
			}
			public qmbImageComboBox qmbImage()
			{
				return (qmbImageComboBox)super.getComboBox(2);
			}
			public DynamicGrid dyngrdAssocQuestions()
			{
				return (DynamicGrid)super.getControl(15);
			}
			public ImageButton imbImagePicker()
			{
				return (ImageButton)super.getControl(16);
			}
			public GroupColourImageRadioButton GroupColourImage()
			{
				return (GroupColourImageRadioButton)super.getRadioButton(0);
			}
			public GroupRenderStyleRadioButton GroupRenderStyle()
			{
				return (GroupRenderStyleRadioButton)super.getRadioButton(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 824, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSearch = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Search Findings", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabSearchContainer m_tabSearchContainer = (tabSearchContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSearchContainer.class, m_tabSearch, factory);
			super.addContainer(m_tabSearch, m_tabSearchContainer);
			ims.framework.utils.SizeInfo m_tabSearchDesignSize = new ims.framework.utils.SizeInfo(824, 608);
			ims.framework.utils.SizeInfo m_tabSearchRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper35.getWidth(), anchoringHelper35.getHeight());
			m_tabSearchContainer.setContext(form, appForm, m_tabSearch, loader, form_images_local, contextMenus, startControlID, m_tabSearchDesignSize, m_tabSearchRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 824, 608, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabView = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Findings", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabViewContainer m_tabViewContainer = (tabViewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabViewContainer.class, m_tabView, factory);
			super.addContainer(m_tabView, m_tabViewContainer);
			ims.framework.utils.SizeInfo m_tabViewDesignSize = new ims.framework.utils.SizeInfo(824, 608);
			ims.framework.utils.SizeInfo m_tabViewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper36.getWidth(), anchoringHelper36.getHeight());
			m_tabViewContainer.setContext(form, appForm, m_tabView, loader, form_images_local, contextMenus, startControlID, m_tabViewDesignSize, m_tabViewRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabSearch().setVisible(false);
			tabView().setVisible(false);
		}
		public void settabSearchEnabled(boolean value)
		{
			tabSearch().setEnabled(value);
		}
		public void settabViewEnabled(boolean value)
		{
			tabView().setEnabled(value);
		}
		public void showtabSearch()
		{
			tabView().setVisible(false);
			tabSearch().setVisible(true);
		}
		public void showtabView()
		{
			tabSearch().setVisible(false);
			tabView().setVisible(true);
		}

		public tabSearchContainer tabSearch()
		{
			return (tabSearchContainer)super.layers.get(0);
		}
		public tabViewContainer tabView()
		{
			return (tabViewContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuDrawingConfig = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuDrawingConfigNEWItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Finding", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuDrawingConfig.add(contextMenus.contextMenuDrawingConfigNEWItem);
		contextMenus.contextMenuDrawingConfigEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Findings", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuDrawingConfig.add(contextMenus.contextMenuDrawingConfigEDITItem);
		contextMenus.contextMenuDrawingConfigVIEWItem = factory.createMenuItem(startControlID.intValue() + 3, "View Finding", true, false, new Integer(102223), false, false);
		contextMenus.contextMenuDrawingConfig.add(contextMenus.contextMenuDrawingConfigVIEWItem);
		contextMenus.contextMenuDrawingConfigSELECTItem = factory.createMenuItem(startControlID.intValue() + 4, "Select Finding", true, false, new Integer(102232), true, false);
		contextMenus.contextMenuDrawingConfig.add(contextMenus.contextMenuDrawingConfigSELECTItem);
		form.registerMenu(contextMenus.contextMenuDrawingConfig);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 5, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 7, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 8, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 9, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 10, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 11, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 12, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 13, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Layer Clasess
		lyrFindingsLayer m_lyrFindingsLayer = (lyrFindingsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrFindingsLayer.class, this, factory);
		super.addLayer(m_lyrFindingsLayer);
		m_lyrFindingsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Link Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 736, 12, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrFindingsLayer lyrFindings()
	{
		return (lyrFindingsLayer)super.getLayer(0);
	}
	public Link lnkReturnToList()
	{
		return (Link)super.getControl(2);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			Admin = new AdminForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				QuestionSelectNew = new LocalFormName(102182);
			}
			public final FormName QuestionSelectNew;
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				ImageSelectDialog = new LocalFormName(103109);
			}
			public final FormName ImageSelectDialog;
		}

		public CoreForms Core;
		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				Right = new ImageHelper(102112, "Images/Core/right.gif", new Integer(16), new Integer(16));
				RightDisabled = new ImageHelper(102113, "Images/Core/right_disabled.gif", new Integer(16), new Integer(16));
				DeleteDisabled = new ImageHelper(102177, "Images/Core/delete_dis.png", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				QuestionSmall = new ImageHelper(102215, "Images/Core/Help-3.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image Right;
			public final ims.framework.utils.Image RightDisabled;
			public final ims.framework.utils.Image DeleteDisabled;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image QuestionSmall;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Image = new ImageHelper(103114, "Images/Admin/Image.gif", new Integer(16), new Integer(16));
				Image_disabled = new ImageHelper(103115, "Images/Admin/Image_disabled1.gif", new Integer(16), new Integer(16));
				ImageDisabled24 = new ImageHelper(103353, "Images/Admin/image_disabled_24.png", new Integer(24), new Integer(24));
				ImageEnabled24 = new ImageHelper(103352, "Images/Admin/image_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Image;
			public final ims.framework.utils.Image Image_disabled;
			public final ims.framework.utils.Image ImageDisabled24;
			public final ims.framework.utils.Image ImageEnabled24;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_IsNew = new ims.framework.ContextVariable("IsNew", prefix + "_lv_Assessment.FindingQuestions.__internal_x_context__IsNew_" + componentIdentifier + "");
			cxl_VoDrawingGraphicFinding = new ims.framework.ContextVariable("VoDrawingGraphicFinding", prefix + "_lv_Assessment.FindingQuestions.__internal_x_context__VoDrawingGraphicFinding_" + componentIdentifier + "");
			cxl_InactiveFindingQuestions = new ims.framework.ContextVariable("InactiveFindingQuestions", prefix + "_lv_Assessment.FindingQuestions.__internal_x_context__InactiveFindingQuestions_" + componentIdentifier + "");
		}
		
		public boolean getIsNewIsNotNull()
		{
			return !cxl_IsNew.getValueIsNull(context);
		}
		public Boolean getIsNew()
		{
			return (Boolean)cxl_IsNew.getValue(context);
		}
		public void setIsNew(Boolean value)
		{
			cxl_IsNew.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsNew = null;
		public boolean getVoDrawingGraphicFindingIsNotNull()
		{
			return !cxl_VoDrawingGraphicFinding.getValueIsNull(context);
		}
		public ims.core.vo.DrawingGraphicFindingVo getVoDrawingGraphicFinding()
		{
			return (ims.core.vo.DrawingGraphicFindingVo)cxl_VoDrawingGraphicFinding.getValue(context);
		}
		public void setVoDrawingGraphicFinding(ims.core.vo.DrawingGraphicFindingVo value)
		{
			cxl_VoDrawingGraphicFinding.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_VoDrawingGraphicFinding = null;
		public boolean getInactiveFindingQuestionsIsNotNull()
		{
			return !cxl_InactiveFindingQuestions.getValueIsNull(context);
		}
		public ims.core.vo.DrawingGraphicFindingQuestionVoCollection getInactiveFindingQuestions()
		{
			return (ims.core.vo.DrawingGraphicFindingQuestionVoCollection)cxl_InactiveFindingQuestions.getValue(context);
		}
		public void setInactiveFindingQuestions(ims.core.vo.DrawingGraphicFindingQuestionVoCollection value)
		{
			cxl_InactiveFindingQuestions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InactiveFindingQuestions = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class DrawingConfig implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NEW = 1;
			public static final int EDIT = 2;
			public static final int VIEW = 3;
			public static final int SELECT = 4;
		}
		public void disableAllDrawingConfigMenuItems()
		{
			this.contextMenuDrawingConfigNEWItem.setEnabled(false);
			this.contextMenuDrawingConfigEDITItem.setEnabled(false);
			this.contextMenuDrawingConfigVIEWItem.setEnabled(false);
			this.contextMenuDrawingConfigSELECTItem.setEnabled(false);
		}
		public void hideAllDrawingConfigMenuItems()
		{
			this.contextMenuDrawingConfigNEWItem.setVisible(false);
			this.contextMenuDrawingConfigEDITItem.setVisible(false);
			this.contextMenuDrawingConfigVIEWItem.setVisible(false);
			this.contextMenuDrawingConfigSELECTItem.setVisible(false);
		}
		private Menu contextMenuDrawingConfig;
		public MenuItem getDrawingConfigNEWItem()
		{
			return this.contextMenuDrawingConfigNEWItem;
		}
		private MenuItem contextMenuDrawingConfigNEWItem;
		public MenuItem getDrawingConfigEDITItem()
		{
			return this.contextMenuDrawingConfigEDITItem;
		}
		private MenuItem contextMenuDrawingConfigEDITItem;
		public MenuItem getDrawingConfigVIEWItem()
		{
			return this.contextMenuDrawingConfigVIEWItem;
		}
		private MenuItem contextMenuDrawingConfigVIEWItem;
		public MenuItem getDrawingConfigSELECTItem()
		{
			return this.contextMenuDrawingConfigSELECTItem;
		}
		private MenuItem contextMenuDrawingConfigSELECTItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 5;
			public static final int Update = 6;
			public static final int Remove = 7;
			public static final int View = 8;
			public static final int MoveUp = 9;
			public static final int MoveDown = 10;
			public static final int Replace = 11;
			public static final int Confirm = 12;
			public static final int EDIT_VIEW_ICP_ACTIONS = 13;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[99];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedImage", "BO-1021100003-ID", "ID_AppImage");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedImage", "BO-1021100003-IMAGEPATH", "ImagePath");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedImage", "BO-1021100003-ISSYSTEM", "IsSystem");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedImage", "BO-1021100003-NAMESPACE", "NameSpace");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedImage", "BO-1021100003-ISACTIVE", "IsActive");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedImage", "BO-1021100003-WIDTH", "Width");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedImage", "BO-1021100003-HEIGHT", "Height");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-ID", "ID_DrawingGraphicFinding");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-DESCRIPTION", "Description");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-DISPLAYTEXT", "DisplayText");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-COLOUR", "Colour");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-ISSINGLEMARK", "IsSingleMark");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedDrawingGraphicFindingVo", "BO-1028100011-ACTIVESTATUS", "ActiveStatus");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-ID", "ID_QuestionInformation");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-TEXT", "Text");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-SHORTTEXT", "ShortText");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-ISQUESTION", "IsQuestion");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-GENDERSPECIFIC", "GenderSpecific");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-AGERANGEMIN", "AgeRangeMin");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-AGERANGEMAX", "AgeRangeMax");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-STATUS", "Status");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedQuestion", "BO-1058100000-LEGENDTEXT", "LegendText");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.FindingQuestions.__internal_x_context__VoDrawingGraphicFinding_" + componentIdentifier, "BO-1028100011-ID", "ID_DrawingGraphicFinding");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.FindingQuestions.__internal_x_context__VoDrawingGraphicFinding_" + componentIdentifier, "BO-1028100011-DESCRIPTION", "Description");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.FindingQuestions.__internal_x_context__VoDrawingGraphicFinding_" + componentIdentifier, "BO-1028100011-DISPLAYTEXT", "DisplayText");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.FindingQuestions.__internal_x_context__VoDrawingGraphicFinding_" + componentIdentifier, "BO-1028100011-COLOUR", "Colour");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.FindingQuestions.__internal_x_context__VoDrawingGraphicFinding_" + componentIdentifier, "BO-1028100011-ISSINGLEMARK", "IsSingleMark");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.FindingQuestions.__internal_x_context__VoDrawingGraphicFinding_" + componentIdentifier, "BO-1028100011-ACTIVESTATUS", "ActiveStatus");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
