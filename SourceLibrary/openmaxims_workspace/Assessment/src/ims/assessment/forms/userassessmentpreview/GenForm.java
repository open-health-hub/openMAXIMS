//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.forms.userassessmentpreview;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbRolesComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.assessment.vo.AssessmentRoleVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.assessment.vo.AssessmentRoleVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.assessment.vo.AssessmentRoleVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.assessment.vo.AssessmentRoleVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.assessment.vo.AssessmentRoleVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.assessment.vo.AssessmentRoleVo getValue()
		{
			return (ims.assessment.vo.AssessmentRoleVo)super.control.getValue();
		}
		public void setValue(ims.assessment.vo.AssessmentRoleVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(808, 560);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 792, 480, ims.framework.enumerations.ControlAnchoring.ALL);
		ims.framework.FormUiLogic m_customAssessmentForm = loader.loadComponent(127109, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 2, skipContextValidation);
		//ims.framework.Control m_customAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(40), new Integer(792), new Integer(480), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2), m_customAssessmentForm, instance1 } );
		ims.framework.Control m_customAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2), m_customAssessmentForm, instance1, Boolean.FALSE } );
		super.addControl(m_customAssessmentControl);
		Menu[] menus1 = m_customAssessmentForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Roles:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 725, 528, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 48, 8, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbRolesTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbRolesTemp);
		cmbRolesComboBox cmbRoles = (cmbRolesComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRolesComboBox.class, m_cmbRolesTemp);
		super.addComboBox(cmbRoles);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.assessment.forms.structuralassessment.IComponent customAssessment()
	{
		return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomAssessmentVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomAssessmentVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomAssessmentEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomAssessmentEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Button btnClose()
	{
		return (Button)super.getControl(2);
	}
	public cmbRolesComboBox cmbRoles()
	{
		return (cmbRolesComboBox)super.getComboBox(0);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				QuestionSmall = new ImageHelper(102215, "Images/Core/Help-3.gif", new Integer(16), new Integer(16));
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(10), new Integer(10));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(10), new Integer(10));
				TextBox = new ImageHelper(102240, "Images/Core/Textbox.gif", new Integer(16), new Integer(16));
				SmallCancel = new ImageHelper(102248, "Images/Core/SmallCancel.gif", new Integer(12), new Integer(12));
				SmallNew = new ImageHelper(102247, "Images/Core/SmallNew.gif", new Integer(12), new Integer(12));
				MandatoryQuestion = new ImageHelper(102272, "Images/Core/Help4.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image QuestionSmall;
			public final ims.framework.utils.Image AnswerBox_No;
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image TextBox;
			public final ims.framework.utils.Image SmallCancel;
			public final ims.framework.utils.Image SmallNew;
			public final ims.framework.utils.Image MandatoryQuestion;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Role = new ImageHelper(116114, "Images/OCRR/User-Properties.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Role;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_UserAssessmentVo = new ims.framework.ContextVariable("UserAssessmentVo", prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier + "");
		}
		
		public boolean getUserAssessmentVoIsNotNull()
		{
			return !cxl_UserAssessmentVo.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentVo getUserAssessmentVo()
		{
			return (ims.assessment.vo.UserAssessmentVo)cxl_UserAssessmentVo.getValue(context);
		}
		public void setUserAssessmentVo(ims.assessment.vo.UserAssessmentVo value)
		{
			cxl_UserAssessmentVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UserAssessmentVo = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[103];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ID", "ID_UserAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-HELPURL", "HelpURL");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-CATEGORY", "Category");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessment", "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-NAME", "Name");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-DESCRIPTION", "Description");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-HELPURL", "HelpURL");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-SCORINGMETHOD", "ScoringMethod");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-ISFLATVIEW", "IsFlatView");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-CATEGORY", "Category");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-ISMULTIPLEGROUP", "IsMultipleGroup");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-GROUPQUESTIONWIDTH", "GroupQuestionWidth");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-STOREPRINTEDASSESSMENT", "StorePrintedAssessment");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-ISMULTIROLE", "IsMultiRole");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-HEADERTEXT", "HeaderText");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-FOOTERTEXT", "FooterText");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-MAXHEADERHEIGHT", "MaxHeaderHeight");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-MAXFOOTERHEIGHT", "MaxFooterHeight");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-ASSOCIATEDREPORT", "AssociatedReport");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-CANCOPYLAST", "CanCopyLast");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Assessment.UserAssessmentPreview.__internal_x_context__UserAssessmentVo_" + componentIdentifier, "BO-1003100043-COPYLASTFROMCONTEXT", "CopyLastFromContext");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
