//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.assessment.forms.ssdiassessments;



import ims.assessment.forms.ssdiassessments.GenForm.grdAssessmentItemsRow;
import ims.dtomove.vo.SiteAssessVo;
import ims.dtomove.vo.SiteAssessVoCollection;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateRecordBrowser();
		populateScreenFromData();
	}
	
	protected void onRecbrSSDIAssessmentsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setFirstSiteAssess(domain.getSiteAssess(form.recbrSSDIAssessments().getValue()));
		populateScreenFromData();
	}
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO: Add you code here.
	}
	public void clearInstanceControls()
	{
		// TODO: Add you code here.
	}
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO: Add you code here.
	}
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO: Add you code here.
		return false;
	}
	public void updateControlsState()
	{
		// TODO: Add you code here.
	}
	public void updateInstance()
	{
		// TODO: Add you code here.
	}
	private void populateRecordBrowser()
	{
		SiteAssessVoCollection SiteAssesVoColl = domain.listSiteAssess(form.getGlobalContext().Core.getEpisodeofCareShort());
		form.getLocalContext().setFirstSiteAssess(null);
		boolean FirstRec = false;
		if(SiteAssesVoColl != null)
		{
			for(int i = 0;i < SiteAssesVoColl.size();i++ )
			{
				if(SiteAssesVoColl.get(i) != null)
				{
					String textStr =( SiteAssesVoColl.get(i).getAssessNameIsNotNull() ? SiteAssesVoColl.get(i).getAssessName():"") + "  " + (SiteAssesVoColl.get(i).getCreationDateIsNotNull()? SiteAssesVoColl.get(i).getCreationDate():"")+ " "+ (SiteAssesVoColl.get(i).getCreationTimeIsNotNull() ? SiteAssesVoColl.get(i).getCreationTime():""); 
					form.recbrSSDIAssessments().newRow(SiteAssesVoColl.get(i), textStr);
					if(FirstRec == false)
					{
						form.getLocalContext().setFirstSiteAssess(SiteAssesVoColl.get(i));
						FirstRec = true;
					}
						
				}
			}
			if(form.getLocalContext().getFirstSiteAssess() != null)
				form.recbrSSDIAssessments().setValue(form.getLocalContext().getFirstSiteAssess());
			
		}
	}
	private void populateGrid(SiteAssessVo assess)
	{
		form.grdAssessmentItems().getRows().clear();
		if(assess != null)
		{
			if(assess.getAssessDataItemsIsNotNull())
			{
				for(int i = 0;i < assess.getAssessDataItems().size();i++)
				{
					if(assess.getAssessDataItems().get(i) != null)
					{
						grdAssessmentItemsRow childRow = form.grdAssessmentItems().getRows().newRow();
						Integer intNr = i+1;
						childRow.setColumnNr(intNr.toString());
						childRow.setColumnItemDescription(assess.getAssessDataItems().get(i).getQuestion());
						childRow.setColumnValue(assess.getAssessDataItems().get(i).getAnswer());
						childRow.setTooltipForColumnItemDescription(assess.getAssessDataItems().get(i).getQuestion());
						childRow.setTooltipForColumnValue(assess.getAssessDataItems().get(i).getAnswer());
						childRow.setValue(assess.getAssessDataItems().get(i));
						
					}
				}
			}
		}
	}
	private void populateScreenFromData()
	{
		if(form.getLocalContext().getFirstSiteAssess() != null)
		{
			form.txtAssessmentName().setValue(form.getLocalContext().getFirstSiteAssess().getAssessName());
			form.txtSpecialty().setValue(form.getLocalContext().getFirstSiteAssess().getAssessSpecialty());
			form.dteCreationDate().setValue(form.getLocalContext().getFirstSiteAssess().getCreationDate());
			form.timCreationTime().setValue(form.getLocalContext().getFirstSiteAssess().getCreationTime());
			populateGrid(form.getLocalContext().getFirstSiteAssess());
		}
	}
}
