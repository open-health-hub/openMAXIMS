//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2446.19845)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.graphicassessmentinstantiationfindingcustom;

import java.util.ArrayList;

import ims.assessment.helper.UserAssessmentInstHelper;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingVo;
import ims.assessment.vo.PatientGraphicalAssessmentStageVo;
import ims.assessment.vo.PatientGraphicalAssessmentStageVoCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
		
		if(form.getGlobalContext().Assessment.getAutoSubmitIsNotNull() && form.getGlobalContext().Assessment.getAutoSubmit().booleanValue())
		{
			if(save())
				engine.close(DialogResult.OK);
		}
		
	}
	private void open() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = form.getGlobalContext().Core.getPatientGraphicAssessmentFinding();
		PatientGraphicalAssessmentStageVo pgasVo = form.getGlobalContext().Assessment.getPatientGraphicalAssessmentStage();
		
		if(voPatientGraphicAssessmentFinding != null && pgasVo != null)
		{
			if(pgasVo.getAuthoringInformationIsNotNull())
			{
				form.customControlAuthoringInfo().setValue(pgasVo.getAuthoringInformation());
				form.customControlAuthoringInfo().setEnabledAuthoringHCP(Boolean.FALSE);
				form.customControlAuthoringInfo().setEnabledDateTime(Boolean.FALSE);
			}
			else
			{
				form.customControlAuthoringInfo().initializeComponent();
				//form.customControlAuthoringInfo().setEnabledAuthoringHCP(Boolean.TRUE);
				//form.customControlAuthoringInfo().setEnabledDateTime(Boolean.TRUE);
			}
			
			if(pgasVo.getStageIsNotNull() && pgasVo.getStage().getAssessmentStageIsNotNull())
			{
				form.cmbStage().newRow(pgasVo.getStage().getAssessmentStage(), pgasVo.getStageIsNotNull() ? pgasVo.getStage().getAssessmentStage().getStageName() : "");
				form.cmbStage().setValue(pgasVo.getStage().getAssessmentStage());
			}

			if(voPatientGraphicAssessmentFinding.getGraphicFindingIsNotNull())
			{
				form.cmbFinding().newRow(voPatientGraphicAssessmentFinding, voPatientGraphicAssessmentFinding.getGraphicFinding().getDisplayText());
				form.cmbFinding().setValue(voPatientGraphicAssessmentFinding);
			}
			
			populateScreenFromData(voPatientGraphicAssessmentFinding);
			displayQuestions(voPatientGraphicAssessmentFinding, pgasVo);
		}
	}
	private void displayQuestions(PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding, PatientGraphicalAssessmentStageVo pgasVo) throws PresentationLogicException
	{
		UserAssessmentInstHelper helper = getHelper();		
		helper.populateGraphicFinding(form.getGlobalContext().Core.getPatientAssessmentFull(), voPatientGraphicAssessmentFinding, pgasVo);
	}
	
	private UserAssessmentInstHelper getHelper()
	{
		UserAssessmentInstHelper helper = new UserAssessmentInstHelper(form.dyngrdQuestions(), form.getImages().Core.QuestionSmall, form.getImages().Core.TextBox, form.getImages().Core.SmallNew, form.getImages().Core.SmallCancel, form.getImages().Core.MandatoryQuestion);
		return helper;
	}
	private void initialize()
	{
		form.txtDetails().setFocus();
		
		form.txtDetails().setEnabled(false);
		form.cmbStage().setEnabled(false);
		form.cmbFinding().setEnabled(false);
		
		form.customControlAuthoringInfo().setIsRequiredPropertyToControls(true);	//WDEV-13179
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}
	protected void onDyngrdQuestionsCellButtonClicked(ims.framework.controls.DynamicGridCell cell)
	{
		getHelper().addOrRemoveAnswer(cell);
	}
	private boolean save()
	{
		if(uiErrors())
			return false;
		
		PatientGraphicalAssessmentStageVo pgasVo = form.getGlobalContext().Assessment.getPatientGraphicalAssessmentStage();
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = form.getGlobalContext().Core.getPatientGraphicAssessmentFinding();
		voPatientGraphicAssessmentFinding = populateDataFromScreen(voPatientGraphicAssessmentFinding);
		populateAuthoringInfo(pgasVo);
		populateAnswersDataFromScreen(voPatientGraphicAssessmentFinding);
		String[] errors = voPatientGraphicAssessmentFinding.validate();
		if(errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		PatientAssessmentVo patientAssessment = form.getGlobalContext().Core.getPatientAssessmentFull();
		errors = patientAssessment.validate();

		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		form.getGlobalContext().Core.setPatientGraphicAssessmentFinding(voPatientGraphicAssessmentFinding);
		return true;
	}
	
	private boolean uiErrors()
	{
		//	WDEV-13179 - starts here
		String authoringErrors = form.customControlAuthoringInfo().getErrors();
		
		if(authoringErrors != null && authoringErrors.length() > 0)
		{
			engine.showErrors(new String[] {authoringErrors});
			return true;
		}
		//	WDEV-13179 - ends here
		
		return false;
	}
	
	private void populateAnswersDataFromScreen(PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding)
	{
		PatientGraphicalAssessmentStageVo pgasVo = form.getGlobalContext().Assessment.getPatientGraphicalAssessmentStage();
		
		UserAssessmentInstHelper helper = getHelper();
		
		if(voPatientGraphicAssessmentFinding.getStage() == null)
			voPatientGraphicAssessmentFinding.setStage(new PatientGraphicalAssessmentStageVoCollection());
		
		if(pgasVo.getID_PatientGraphicalAssessmentStage() == null)
			voPatientGraphicAssessmentFinding.getStage().add(pgasVo);
		
		pgasVo.setFindingQuestion(helper.getGraphicFindingAnswers(pgasVo.getFindingQuestion()));
	}
	private void populateAuthoringInfo(PatientGraphicalAssessmentStageVo pgasVo)
	{
		if(pgasVo == null)
			return;
		
		pgasVo.setAuthoringInformation(form.customControlAuthoringInfo().getValue());
	}
}
