//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.42 build 2204.20175)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.graphicassessmentnew;

import ims.assessment.forms.graphicassessmentnew.GenForm.lyrDetailsLayer.tabFindingsContainer.grdFindingQuestionsRow;
import ims.assessment.forms.graphicassessmentnew.GenForm.lyrDetailsLayer.tabFindingsWithStagesContainer.grdFindingQuestionsWithStageRow;
import ims.assessment.forms.graphicassessmentnew.GenForm.lyrDetailsLayer.tabImagesContainer.grdImagesRow;
import ims.assessment.forms.graphicassessmentnew.GenForm.lyrDetailsLayer.tabQuestionsContainer.grdAssociatedQuestionsRow;
import ims.assessment.forms.graphicassessmentnew.GenForm.lyrDetailsLayer.tabSpecialtiesContainer.grdSpecialitiesRow;
import ims.assessment.forms.graphicassessmentnew.GenForm.lyrDetailsLayer.tabStagesContainer.grdStagesRow;
import ims.assessment.vo.FindingStageQuestionsVo;
import ims.assessment.vo.FindingStageQuestionsVoCollection;
import ims.assessment.vo.GraphicAssessmentFindingQuestionVo;
import ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection;
import ims.assessment.vo.GraphicAssessmentFindingVo;
import ims.assessment.vo.GraphicAssessmentFindingVoCollection;
import ims.assessment.vo.GraphicAssessmentQuestionVo;
import ims.assessment.vo.GraphicAssessmentShortVo;
import ims.assessment.vo.GraphicAssessmentStageVo;
import ims.assessment.vo.GraphicAssessmentStageVoCollection;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.DrawingGraphicFindingVo;
import ims.core.vo.DrawingGraphicImageVo;
import ims.core.vo.GraphicAreaVo;
import ims.core.vo.GraphicGroupVo;
import ims.core.vo.QuestionInformationShortVo;
import ims.core.vo.QuestionInformationShortVoCollection;
import ims.core.vo.TemplateBoLiteVo;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.core.vo.lookups.QuestionType;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DrawingControlArea;
import ims.framework.controls.DrawingControlGroup;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Image;
import ims.utils.textile.Textile;

public class Logic extends BaseLogic
{
	private static final int	FINDING_COLUMN_WIDTH	= 180;
	private final static String	CR			= "\n";
	private final static String	COLFINDING	= "0";
	private final static String	COLIMAGE	= "1";
	
	private final static Integer	ADD_ASSOCIATED_QUESTION		= new Integer(1);
	private final static Integer	EDIT_ASSOCIATED_QUESTION	= new Integer(2);
	private final static Integer	ADD_FINDING_QUESTION		= new Integer(3);

	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		GraphicAssessmentShortVo voGraphicAssessment = form.getGlobalContext().Core.getGraphicAssessmentShortVo();

		if(voGraphicAssessment.getAssessmentTypeIsNotNull() && 
				(voGraphicAssessment.getAssessmentType().equals(UserDefinedAssessmentType.ANNOTATEDIMAGEWITHREVIEWS)						
						|| voGraphicAssessment.getAssessmentType().equals(UserDefinedAssessmentType.SKINASSESSMENT)
						/*|| voGraphicAssessment.getAssessmentType().equals(UserDefinedAssessmentType.PAINASSESSMENT)*/))
			form.getLocalContext().setIsAssessmentWithStages(Boolean.TRUE);

		initializeScreen();
		open();
		
		if(isSkinAssessment() || isPainAssessment() || isMedicalNotingAssessment())
		{
			if(form.getMode().equals(FormMode.EDIT))
				form.txtName().setEnabled(false);
			
			form.txtName().setValue(voGraphicAssessment.getAssessmentType().getText());
		}

		if(isAssessmentWithStages() && voGraphicAssessment.getID_GraphicAssessment() == null)
		{
			GraphicAssessmentStageVo stage = new GraphicAssessmentStageVo();
			stage.setIsActive(Boolean.TRUE);
			
			stage.setStageName("Assessment");
			stage.setIsAnnotated(Boolean.TRUE);

			if(form.getLocalContext().getCurrentStage() == null)
			{
				addStageRow(stage);
				form.lyrDetails().tabStages().grdStages().setValue(stage);
			}
			
			GraphicAssessmentStageVoCollection stageColl = form.getLocalContext().getStages();
			
			if(stageColl == null)
				stageColl = new GraphicAssessmentStageVoCollection();
			
			stageColl.add(stage);
			
			form.getLocalContext().setCurrentStage(stage);
			form.getLocalContext().setStages(stageColl);
			
			setPanelStatus();
			form.lyrDetails().tabStages().grdStages().setEnabled(true);
			updateContextMenuStages();
			displayStageRecord(form.lyrDetails().tabStages().grdStages().getValue());
			updateFindingStagesOnScreen(stage, true);
		}
	}


	/**
	 * WDEV-13704
	 * Event handler for 'Link' button
	 * <li>starts the process of linking a report to assessment</li>
	 */
	@Override
	protected void onBtnLinkClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Core.ReportTemplate);
	}

	/**
	 * WDEV-13704
	 * Event handler for Clear button click.
	 * <li>clears the linked Report</li>
	 * <li>calls update Controls state</li> 
	 */
	@Override
	protected void onBtnClearClick() throws PresentationLogicException
	{
		// Clear global contexts
		form.getGlobalContext().Core.setReportTemplateRef(null);
		form.getGlobalContext().Core.setTemplate(null);
		
		// Clear local context
		form.getLocalContext().setLinkedReport(null);
		// Clear controls
		form.txtReport().setValue(null);
	}


	
	
	private void open()
	{
		if (form.getLocalContext().getGraphicAssessmentVoIsNotNull() && form.getLocalContext().getGraphicAssessmentVo().getID_GraphicAssessmentIsNotNull())
		{
			form.getLocalContext().setGraphicAssessmentVo(domain.getGraphicAssessment(form.getLocalContext().getGraphicAssessmentVo().getID_GraphicAssessment()));
		}
		
		GraphicAssessmentVo voGraphicAssessment = form.getLocalContext().getGraphicAssessmentVo();
		
		clearStagePanel();
		
		sortCollections(voGraphicAssessment);
		
		
		if(voGraphicAssessment.getAssessmentStageIsNotNull())
		{
			for (int i = 0; i < voGraphicAssessment.getAssessmentStage().size(); i++)
			{
				GraphicAssessmentStageVo stage = voGraphicAssessment.getAssessmentStage().get(i);
				
				if(stage.getIsActiveIsNotNull() && stage.getIsActive().booleanValue())
				{
					//active stages
					if(form.getLocalContext().getStages() == null)
						form.getLocalContext().setStages(new GraphicAssessmentStageVoCollection());
					
					form.getLocalContext().getStages().add(stage);
				}
				else
				{
					//inactive stages
					if(form.getLocalContext().getInactiveStages() == null)
						form.getLocalContext().setInactiveStages(new GraphicAssessmentStageVoCollection());
					
					form.getLocalContext().getInactiveStages().add(stage);
				}
			}
		}
		else
		{
			form.getLocalContext().setStages(null);
			form.getLocalContext().setInactiveStages(null);
		}
		
		populateScreenFromData(voGraphicAssessment);
		updateTabsStatus(voGraphicAssessment);
		if(!isAssessmentWithStages())
		{
			displayFindings();
		}
		else
		{
			displayFindingsWithStages();
		}

		displayImages();
		loadDrawingImage();
		updateContextMenuStages();
		setPanelStatus();
		
		//Set current status for  assessment 
		form.getLocalContext().setIsInactive(isStatusInactive());
	}

	private void displayFindingsWithStages()
	{
		GraphicAssessmentVo voGraphicAssessment = form.getLocalContext().getGraphicAssessmentVo();
		
		//display stages
		form.lyrDetails().tabStages().grdStages().getRows().clear();
		form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().clear();
		form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().clear();
		
		if(voGraphicAssessment.getAssessmentStageIsNotNull())
		{
			for (int i = 0; i < voGraphicAssessment.getAssessmentStage().size(); i++)
			{
				GraphicAssessmentStageVo stage = voGraphicAssessment.getAssessmentStage().get(i);
				
				if(stage.getIsActiveIsNotNull() && stage.getIsActive().booleanValue())
					addStageRow(stage);
				else
				{
					if(form.getLocalContext().getInactiveStages() == null)
						form.getLocalContext().setInactiveStages(new GraphicAssessmentStageVoCollection());
					
					form.getLocalContext().getInactiveStages().add(stage);
				}
			}
		}
		
		form.getLocalContext().setStages(voGraphicAssessment.getAssessmentStage());
		
		//display findings
		form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().clear();
		if (voGraphicAssessment != null && voGraphicAssessment.getFindingsAndQuestionsIsNotNull())
		{
			for (int i = 0; i < voGraphicAssessment.getFindingsAndQuestions().size(); i++)
			{
				addFindingWithStagesGridRow(voGraphicAssessment.getFindingsAndQuestions().get(i));
			}
		}
	}

	/**
	 * @param voGraphicAssessment
	 */
	private void sortCollections(GraphicAssessmentVo voGraphicAssessment)
	{
		if(voGraphicAssessment == null)
			return;
		
		if(voGraphicAssessment.getAssociatedQuestionsIsNotNull())
			voGraphicAssessment.getAssociatedQuestions().sort();
		
		for(int i = 0; voGraphicAssessment.getFindingsAndQuestionsIsNotNull() && i < voGraphicAssessment.getFindingsAndQuestions().size(); i++)
		{
			GraphicAssessmentFindingVo fsq = voGraphicAssessment.getFindingsAndQuestions().get(i);
			
			if(fsq.getFindingStageIsNotNull())
			{
				for (int j = 0; j < fsq.getFindingStage().size(); j++)
				{
					if(fsq.getFindingStage().get(j).getAssociatedQuestionsIsNotNull())
						fsq.getFindingStage().get(j).getAssociatedQuestions().sort();
				}
			}
		}
	
		if (voGraphicAssessment != null && voGraphicAssessment.getFindingsAndQuestionsIsNotNull())
			voGraphicAssessment.getFindingsAndQuestions().sort();
	}
	
	
	@Override
	protected void populateScreenFromData(GraphicAssessmentVo value) {
		super.populateScreenFromData(value);
		if (value == null)
			return;
		
		
		if (value.getAssociatedReportForPrintingIsNotNull())
		{
			TemplateBoLiteVo template = domain.getReportTemplate(value.getAssociatedReportForPrinting());
			
			if (template != null)
				form.txtReport().setValue(template.getName());
		}
		else
			form.txtReport().setValue(null); //WDEV-17583
		
		populateSpecialitiesScreenFromData(value.getAssessmentSpecialties());
	}

	@Override
	protected void clearScreen() {
		super.clearScreen();
		form.lyrDetails().tabSpecialties().grdSpecialities().getRows().clear();
	}

	

	private void initializeScreen()
	{
		initializeSpecialitiesRelated();
		
		initialiseScreenStep2();
		setContextMenu();
		enableContextMenu();
	}

	private void initializeSpecialitiesRelated() {
		if (!ConfigFlag.UI.DISPLAY_ASSESSMENT_SPECIALTY_TAB.getValue())
		{
			form.lyrDetails().tabSpecialties().setVisible(false);
			form.lyrDetails().tabSpecialties().setHeaderVisible(false);
		}
		else
		{
		form.getContextMenus().getLIPNewItem().setEnabled(true);
		form.getContextMenus().getLIPNewItem().setText("Update Specialties");
		form.getContextMenus().getLIPUpdateItem().setEnabled(true);
		form.getContextMenus().getLIPUpdateItem().setText("Remove Specialties");
		}
	}
	
	private void populateSpecialitiesScreenFromData(SpecialtyCollection spec)
	{
		form.lyrDetails().tabSpecialties().grdSpecialities().getRows().clear();
		if (spec == null)
			return;
		for (int i=0 ; i<spec.size() ; i++)
		{
			Specialty specialty = spec.get(i);
			if (specialty != null)
			{
				grdSpecialitiesRow newRow = form.lyrDetails().tabSpecialties().grdSpecialities().getRows().newRow();
				newRow.setValue(specialty);
				newRow.setcolSpecialty(specialty.getText());
			}
		}
	}
	private SpecialtyCollection populateSpecialitiesDataFromScreen()
	{
		Specialty[] specs = form.lyrDetails().tabSpecialties().grdSpecialities().getValues();
		if (specs == null)
			return null;
		SpecialtyCollection retVa = new SpecialtyCollection();
		for (int i = 0 ; i<specs.length ; i++)
		{
			if (specs[i] != null)
			{
				retVa.add(specs[i]);
			}
		}
		return retVa;
		
	}

	private void displayFindings()
	{
		clearFindingQuestionGrid();
		form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().clear();
		GraphicAssessmentVo voGraphicAssessment = form.getLocalContext().getGraphicAssessmentVo();
		if (voGraphicAssessment != null && voGraphicAssessment.getFindingsAndQuestionsIsNotNull())
		{
			for (int i = 0; i < voGraphicAssessment.getFindingsAndQuestions().size(); i++)
			{
				createDynamicGridRow(form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().newRow(), voGraphicAssessment.getFindingsAndQuestions().get(i));
			}
		}
	}

	private void initialiseScreenStep2()
	{
		if (form.getGlobalContext().Core.getGraphicAssessmentFormModeIsNotNull())
			form.setMode(form.getGlobalContext().Core.getGraphicAssessmentFormMode());

		GraphicAssessmentShortVo voGraphicAssessmentShort = form.getGlobalContext().Core.getGraphicAssessmentShortVo();
		GraphicAssessmentVo voGraphicAssessment;
		if(voGraphicAssessmentShort.getID_GraphicAssessmentIsNotNull())
		{
			voGraphicAssessment = domain.getGraphicAssessment(voGraphicAssessmentShort.getID_GraphicAssessment());
			//Clear the id of the VOs that have to be copied (of ones that the aggregation is composite in the BO)
			if(isGraphicAssessmentCopyMode())
			{
				form.getLocalContext().setClonedId(voGraphicAssessment.getID_GraphicAssessment());
				voGraphicAssessment.setID_GraphicAssessment(null);
				voGraphicAssessment.setActiveStatus(PreActiveActiveInactiveStatus.PREACTIVE);
				
				//Associated Questions
				if(voGraphicAssessment.getAssociatedQuestionsIsNotNull())
				{
					for(int i = 0; i < voGraphicAssessment.getAssociatedQuestions().size(); i++)
					{
						voGraphicAssessment.getAssociatedQuestions().get(i).setID_GraphicAssessmentQuestion(null);
					}
				}
				
				if(voGraphicAssessment.getAssessmentStageIsNotNull())
				{
					for (int i = 0; i < voGraphicAssessment.getAssessmentStage().size(); i++)
					{
						voGraphicAssessment.getAssessmentStage().get(i).setID_GraphicAssessmentStage(null);
					}
				}
				
				//Finding Questions
				if(voGraphicAssessment.getFindingsAndQuestionsIsNotNull())
				{
					for(int i = 0; i < voGraphicAssessment.getFindingsAndQuestions().size(); i++)
					{
						voGraphicAssessment.getFindingsAndQuestions().get(i).setID_GraphicAssessmentFinding(null);
						
						if(voGraphicAssessment.getFindingsAndQuestions().get(i).getFindingStageIsNotNull())
						{
							for (int j = 0; j < voGraphicAssessment.getFindingsAndQuestions().get(i).getFindingStage().size(); j++)
							{
								FindingStageQuestionsVo findingStageQuestions = voGraphicAssessment.getFindingsAndQuestions().get(i).getFindingStage().get(j);
								
								findingStageQuestions.setID_FindingStageQuestions(null);
								
								if(findingStageQuestions.getAssociatedQuestionsIsNotNull())
								{
									for (int k = 0; k < findingStageQuestions.getAssociatedQuestions().size(); k++)
									{
										findingStageQuestions.getAssociatedQuestions().get(k).setID_GraphicAssessmentFindingQuestion(null);
									}
								}
							}
						}
					}
				}
				//Clear the copy flag
				form.getGlobalContext().Core.setGraphicAssessmentCopy(null);
			}
		}
		else
		{
			voGraphicAssessment = new GraphicAssessmentVo();
			voGraphicAssessment.setName(voGraphicAssessmentShort.getName());
			voGraphicAssessment.setActiveStatus(voGraphicAssessmentShort.getActiveStatus());
			voGraphicAssessment.setAssessmentType(voGraphicAssessmentShort.getAssessmentType());
			voGraphicAssessment.setAssessmentStage(new GraphicAssessmentStageVoCollection());
			
			if(!isAssessmentWithStages())
			{
				GraphicAssessmentStageVo stage = new GraphicAssessmentStageVo();
				stage.setIsAnnotated(Boolean.TRUE);
				stage.setStageName("Assessment");
				
				voGraphicAssessment.getAssessmentStage().add(stage);
			}
		}

		form.getLocalContext().setGraphicAssessmentVo(voGraphicAssessment);
		initialiseDynamicGrid();
		initialiseDynamicGridForStages();
		
		updateTabsStatus(voGraphicAssessment);
		setPanelStatus();
		
	}

	private void updateTabsStatus(GraphicAssessmentVo voGraphicAssessment)
	{
		form.lyrDetails().tabQuestions().setHeaderVisible(false);
		form.lyrDetails().tabFindings().setHeaderVisible(false);
		form.lyrDetails().tabFindingsWithStages().setHeaderVisible(false);
		form.lyrDetails().tabImages().setHeaderVisible(true);
		form.lyrDetails().tabStages().setHeaderVisible(false);

		if(voGraphicAssessment != null && voGraphicAssessment.getAssessmentTypeIsNotNull())
		{
			if(voGraphicAssessment.getAssessmentType().equals(UserDefinedAssessmentType.ANNOTATEDIMAGE)
					|| voGraphicAssessment.getAssessmentType().equals(UserDefinedAssessmentType.MEDICALNOTING))
			{
				form.lyrDetails().tabFindings().setHeaderVisible(true);
			}
			else if(voGraphicAssessment.getAssessmentType().equals(UserDefinedAssessmentType.ANNOTATEDIMAGEWITHQUESTIONS) || voGraphicAssessment.getAssessmentType().equals(UserDefinedAssessmentType.PAINASSESSMENT))
			{
				form.lyrDetails().tabFindings().setHeaderVisible(true);
				form.lyrDetails().tabQuestions().setHeaderVisible(true);
			}
			else if(isAssessmentWithStages())
			{
				form.lyrDetails().tabStages().setHeaderVisible(true);
				if(form.getLocalContext().getStagesIsNotNull() && form.getLocalContext().getStages().size() > 0)
				{
					form.lyrDetails().tabFindingsWithStages().setHeaderVisible(true);
				}
			}
		}
	}

	private void initialiseDynamicGrid()
	{
		DynamicGridColumn colFinding = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getColumns().getByIdentifier(COLFINDING);
		if(colFinding == null)
			colFinding = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getColumns().newColumn("Finding", COLFINDING);
		colFinding.setWidth(180);

		DynamicGridColumn colImage = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getColumns().getByIdentifier(COLIMAGE); 
		if(colImage == null)
			colImage = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getColumns().newColumn("Colour/Image", COLIMAGE);
		colImage.setWidth(-1);
	}

	private void initialiseDynamicGridForStages()
	{
		DynamicGridColumn colFinding = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getColumns().getByIdentifier(COLFINDING);
		if(colFinding == null)
			colFinding = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getColumns().newColumn("Finding", COLFINDING);
		colFinding.setWidth(180);

		DynamicGridColumn colImage = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getColumns().getByIdentifier(COLIMAGE); 
		if(colImage == null)
			colImage = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getColumns().newColumn("Colour/Image", COLIMAGE);
		colImage.setWidth(-1);
		colImage.setAlignment(Alignment.CENTER);
	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		setIsFindingQuestion(false);
		if (result.equals(DialogResult.OK))
		{
			if (formName.equals(form.getForms().Admin.DrawingConfigSelect))
			{
				DrawingGraphicImageVo voDrawingGraphicImage = form.getGlobalContext().Core.getDrawingGraphicImageVo();
				displayImageRow(voDrawingGraphicImage, true);
				form.lyrDetails().tabImages().grdImages().setValue(voDrawingGraphicImage);
				loadDrawingImage();
			}

			if (formName.equals(form.getForms().Core.QuestionSelectNew))
			{
				if(isQuestionAssociatedEdited())
				{
					//WDEV-2308
					ims.core.vo.QuestionInformationVo editedQuestion = getEditedQuestion();
					grdAssociatedQuestionsRow rowSelected = form.lyrDetails().tabQuestions().grdAssociatedQuestions().getSelectedRow();
					if(rowSelected != null && editedQuestion != null)
					{
						rowSelected.setcolQuestion(editedQuestion);
					}
				}
				else
				{
					QuestionInformationShortVoCollection voColl = form.getGlobalContext().Admin.getSelectedQuestions();
					if (voColl != null)
					{
						if (isFindingQuestionAdded())
						{
							if(isAssessmentWithStages())
							{
								addQuestionWithStages(voColl);
							}
							else
							{
								for (int i = 0; i < voColl.size(); i++)
								{
									grdFindingQuestionsRow questionRow = getFindingQuestionRowByQuestion(voColl.get(i));
									if (questionRow == null)
									{
										questionRow = form.lyrDetails().tabFindings().grdFindingQuestions().getRows().newRow();
									}
									else
									{
										// Duplicate question
										continue;
									}
									GraphicAssessmentFindingQuestionVo voGAFQ = new GraphicAssessmentFindingQuestionVo();
									voGAFQ.setQuestion(domain.getQuestion(voColl.get(i).getID_QuestionInformation()));
									voGAFQ.setActiveStatus(PreActiveActiveInactiveStatus.ACTIVE);
									voGAFQ.setSequence(new Integer(form.lyrDetails().tabFindings().grdFindingQuestions().getRows().size()-1));
									displayQuestionRow(questionRow, voGAFQ);
		
									updateQuestionVoIntoFindingVo(questionRow);
								}
							}
						}
						else
						{
							// Associated Questions
							for (int i = 0; i < voColl.size(); i++)
							{
								grdAssociatedQuestionsRow row = getAssociatedQuestionRowByQuestion(voColl.get(i));
								if (row != null)
									continue;
								row = form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().newRow();
								row.setcolQuestion(domain.getQuestion(voColl.get(i).getID_QuestionInformation()));
								row.setcolStatus(PreActiveActiveInactiveStatus.ACTIVE);
							}
						}
					}
				}
			}

			if (formName.equals(form.getForms().Assessment.FindingQuestionsSelect))
			{
				if(isAssessmentWithStages())
				{
					addGraphicFindingWithStages();
				}
				else
				{
					DrawingGraphicFindingVo voDrawingGraphicFinding = form.getGlobalContext().Core.getSelectedDrawingGraphicFindingVo();
					DynamicGridRow findingRow = getDynamicRowByValue(voDrawingGraphicFinding);
					if (findingRow == null)
					{
						findingRow = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().newRow(true);
					}
					else
					{
						// The same finding aleady added
						return;
					}
					Object objValue = findingRow.getValue();
					GraphicAssessmentFindingVo voGAFinding = null;
					if (objValue != null && objValue instanceof GraphicAssessmentFindingVo)
					{
						voGAFinding = (GraphicAssessmentFindingVo) objValue;
					}
					else
					{
						voGAFinding = new GraphicAssessmentFindingVo();
						voGAFinding.setFindingStage(new FindingStageQuestionsVoCollection());
						
						FindingStageQuestionsVo fsq = new FindingStageQuestionsVo();
						fsq.setAssessmentStage(form.getLocalContext().getGraphicAssessmentVo().getAssessmentStage().get(0));
						
						voGAFinding.getFindingStage().add(fsq);
					}
					voGAFinding.setFinding(voDrawingGraphicFinding);
	
					clearFindingQuestionGrid();
					QuestionInformationShortVoCollection voColl = form.getGlobalContext().Admin.getSelectedQuestions();
					GraphicAssessmentFindingQuestionVoCollection voGAFQColl = null;
					for (int i = 0; voColl != null && i < voColl.size(); i++)
					{
						if (voGAFQColl == null)
							voGAFQColl = new GraphicAssessmentFindingQuestionVoCollection();
	
						GraphicAssessmentFindingQuestionVo voGAFQ = new GraphicAssessmentFindingQuestionVo();
						grdFindingQuestionsRow questionRow = getFindingQuestionRowByQuestion(voColl.get(i));
						if (questionRow == null)
						{
							questionRow = form.lyrDetails().tabFindings().grdFindingQuestions().getRows().newRow();
							voGAFQ.setActiveStatus(PreActiveActiveInactiveStatus.ACTIVE);
							voGAFQ.setSequence(new Integer(form.lyrDetails().tabFindings().grdFindingQuestions().getRows().size()-1));
						}
	
						voGAFQ.setQuestion(domain.getQuestion(voColl.get(i).getID_QuestionInformation()));
						voGAFQColl.add(voGAFQ);
						displayQuestionRow(questionRow, voGAFQ);
					}
					
					voGAFinding.getFindingStage().get(0).setAssociatedQuestions(voGAFQColl);
	
					createDynamicGridRow(findingRow, voGAFinding);
				}
			}
		
			if (formName.equals(form.getForms().ClinicalAdmin.HotlistDialog))
			{
				populateSpecialitiesScreenFromData(form.getGlobalContext().Core.getSpecialties());
			}
		}
		else 
		{
			form.getGlobalContext().Core.setTemplate(null); //WDEV-14763
		}
		
		if (form.getForms().Core.ReportTemplate.equals(formName))
		{
			if (form.getGlobalContext().Core.getTemplate() != null) //WDEV-14763
			{
			form.txtReport().setValue(form.getGlobalContext().Core.getTemplate());
			}
			form.getLocalContext().setLinkedReport(form.getGlobalContext().Core.getReportTemplateRef());
		}

		enableContextMenu();
	}

	private boolean isFindingQuestionAdded()
	{
		return form.getLocalContext().getQuestionModeIsNotNull() && form.getLocalContext().getQuestionMode() == ADD_FINDING_QUESTION;
	}

	private boolean isQuestionAssociatedEdited()
	{
		return form.getLocalContext().getQuestionModeIsNotNull() && form.getLocalContext().getQuestionMode() == EDIT_ASSOCIATED_QUESTION; 
	}

	private ims.core.vo.QuestionInformationVo getEditedQuestion()
	{
		ims.core.vo.QuestionInformationVoCollection editedQuestions = form.getGlobalContext().Core.getEditedQuestions();
		if(editedQuestions != null && editedQuestions.size() > 0)
			return editedQuestions.get(0);
			
		return null;
	}

	private boolean isAssessmentWithStages()
	{
		if(form.getLocalContext().getIsAssessmentWithStages() == null)
			return false;
		
		return form.getLocalContext().getIsAssessmentWithStages().booleanValue();
	}

	private void addQuestionWithStages(QuestionInformationShortVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			grdFindingQuestionsWithStageRow questionRow = getFindingQuestionRowByQuestionWithStages(voColl.get(i));
			if (questionRow == null)
			{
				questionRow = form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().newRow();
			}
			else
			{
				// Duplicate question
				continue;
			}
			GraphicAssessmentFindingQuestionVo voGAFQ = new GraphicAssessmentFindingQuestionVo();
			voGAFQ.setQuestion(domain.getQuestion(voColl.get(i).getID_QuestionInformation()));
			voGAFQ.setActiveStatus(PreActiveActiveInactiveStatus.ACTIVE);
			voGAFQ.setSequence(new Integer(form.lyrDetails().tabFindings().grdFindingQuestions().getRows().size()-1));
			displayQuestionWithStagesRow(questionRow, voGAFQ);

			FindingStageQuestionsVo findingStageQuestionsVo = (FindingStageQuestionsVo) form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getValue();
			
			if(findingStageQuestionsVo.getAssociatedQuestions() == null)
			{
				findingStageQuestionsVo.setAssociatedQuestions(new GraphicAssessmentFindingQuestionVoCollection());
			}
			
			findingStageQuestionsVo.getAssociatedQuestions().add(voGAFQ);
		}
	}

	private void addGraphicFindingWithStages()
	{
		DrawingGraphicFindingVo voDrawingGraphicFinding = form.getGlobalContext().Core.getSelectedDrawingGraphicFindingVo();
		DynamicGridRow findingRow = getDynamicRowByValueWithStages(voDrawingGraphicFinding);
		if (findingRow != null)
		{
			// The same finding aleady added
			return;
		}
		GraphicAssessmentFindingVo voGAFinding = new GraphicAssessmentFindingVo();
		voGAFinding.setFindingStage(new FindingStageQuestionsVoCollection());

		//create a FindingStageQuestions record for every stage
		GraphicAssessmentStageVoCollection stages = form.getLocalContext().getStages();
		
		for (int i = 0; i < stages.size(); i++)
		{
			FindingStageQuestionsVo fsq = new FindingStageQuestionsVo();
			fsq.setAssessmentStage(stages.get(i));

			if(stages.get(i).getIsAnnotatedIsNotNull() && stages.get(i).getIsAnnotated().booleanValue())
			{
				if(fsq.getAssociatedQuestions() == null)
					fsq.setAssociatedQuestions(new GraphicAssessmentFindingQuestionVoCollection());

				QuestionInformationShortVoCollection voColl = form.getGlobalContext().Admin.getSelectedQuestions();
				
				for (int j = 0; voColl != null && j < voColl.size(); j++)
				{
					GraphicAssessmentFindingQuestionVo voGAFQ = new GraphicAssessmentFindingQuestionVo();

					voGAFQ.setActiveStatus(PreActiveActiveInactiveStatus.ACTIVE);
					voGAFQ.setSequence(new Integer(form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().size()-1));
					voGAFQ.setQuestion(domain.getQuestion(voColl.get(j).getID_QuestionInformation()));

					fsq.getAssociatedQuestions().add(voGAFQ);
				}
			}
			
			voGAFinding.getFindingStage().add(fsq);
		}
		
		voGAFinding.setFinding(voDrawingGraphicFinding);

		addFindingWithStagesGridRow(voGAFinding);
	}

	private DynamicGridRow addFindingWithStagesGridRow(GraphicAssessmentFindingVo voGAFinding)
	{
		if (voGAFinding == null || voGAFinding.getFinding() == null)
			return null;

		DynamicGridRow row = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().newRow();
		
		row.setValue(voGAFinding);
		
		DrawingGraphicFindingVo voDrawingGraphicFinding = voGAFinding.getFinding();
		DynamicGridColumn colFinding = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getColumns().getByIdentifier(COLFINDING);
		if (colFinding == null)
		{
			colFinding = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getColumns().newColumn("Finding");
			colFinding.setWidth(180);
		}

		DynamicGridColumn colImage = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getColumns().getByIdentifier(COLIMAGE);
		if (colImage == null)
		{
			colImage = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getColumns().newColumn("Colour/Image");
			colImage.setWidth(-1);
		}

		row.setValue(voGAFinding);
		row.setReadOnly(true);
		row.setSelectable(true);
		if (row != null)
		{
			DynamicGridCell cellFinding = row.getCells().get(colFinding);
			if (cellFinding == null)
				cellFinding = row.getCells().newCell(colFinding, DynamicCellType.STRING);

			cellFinding.setValue(voDrawingGraphicFinding.getDisplayText());
			cellFinding.setReadOnly(true);

			DynamicGridCell cellImage = row.getCells().get(colImage);
			if (voDrawingGraphicFinding.getImageIsNotNull())
			{
				// Change the type to be image
				if (cellImage == null || cellImage.getType().equals(DynamicCellType.STRING))
					cellImage = row.getCells().newCell(colImage, DynamicCellType.IMAGE);

				cellImage.setValue(engine.getRegisteredImage(voDrawingGraphicFinding.getImage().getID_AppImage().intValue()));
			}
			else
			{
				// Change the type to be String
				if (cellImage == null || cellImage.getType().equals(DynamicCellType.IMAGE))
					cellImage = row.getCells().newCell(colImage, DynamicCellType.STRING);

				cellImage.setValue("Line");
				cellImage.setTextColor(voDrawingGraphicFinding.getColour());
			}
		}
		
		//add FindingStageQuestions
		if(voGAFinding.getFindingStageIsNotNull())
		{
			for (int i = 0; i < voGAFinding.getFindingStage().size(); i++)
			{
				DynamicGridRow fsqRow = row.getRows().newRow();
				
				FindingStageQuestionsVo findingStageQuestionsVo = voGAFinding.getFindingStage().get(i);
				createFindingStageRow(colFinding, fsqRow, findingStageQuestionsVo);
			}		
		}
		
		row.setExpanded(true);

		return row;
	}

	private void createFindingStageRow(DynamicGridColumn colFinding, DynamicGridRow fsqRow, FindingStageQuestionsVo findingStageQuestionsVo)
	{
		fsqRow.setValue(findingStageQuestionsVo);
		fsqRow.setReadOnly(true);
		
		DynamicGridCell cellFinding = fsqRow.getCells().get(colFinding);
		if (cellFinding == null)
			cellFinding = fsqRow.getCells().newCell(colFinding, DynamicCellType.STRING);

		cellFinding.setValue(findingStageQuestionsVo.getAssessmentStage().getStageName());
		cellFinding.setReadOnly(true);
		if(findingStageQuestionsVo.getAssessmentStage().getIsAnnotatedIsNotNull() && findingStageQuestionsVo.getAssessmentStage().getIsAnnotated().booleanValue())
		{
			fsqRow.setCollapsedImage(form.getImages().Admin.Brush);
			fsqRow.setExpandedImage(form.getImages().Admin.Brush);
		}
		else
		{
			fsqRow.setCollapsedImage(form.getImages().Admin.Page);
			fsqRow.setExpandedImage(form.getImages().Admin.Page);
		}
	}

	private grdAssociatedQuestionsRow getAssociatedQuestionRowByQuestion(QuestionInformationShortVo voQuestionInfoShort)
	{
		for (int i = 0; i < form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().size(); i++)
		{
			GraphicAssessmentQuestionVo voGAQuestion = form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().get(i).getValue();
			if (voGAQuestion != null && voGAQuestion.getQuestionIsNotNull() && voGAQuestion.getQuestion().equals(voQuestionInfoShort))
				return form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().get(i);
		}
		return null;
	}

	/**
	 * @param value
	 * 
	 */
	private void setIsFindingQuestion(boolean value)
	{
		form.getLocalContext().setIsFindingQuestion(new Boolean(value));
	}

	private grdFindingQuestionsRow getFindingQuestionRowByQuestion(QuestionInformationShortVo voQIS)
	{
		for (int i = 0; i < form.lyrDetails().tabFindings().grdFindingQuestions().getRows().size(); i++)
		{
			GraphicAssessmentFindingQuestionVo voGAFQ = form.lyrDetails().tabFindings().grdFindingQuestions().getRows().get(i).getValue();
			if (voGAFQ != null && voGAFQ.getQuestionIsNotNull() && voGAFQ.getQuestion().equals(voQIS))
				return form.lyrDetails().tabFindings().grdFindingQuestions().getRows().get(i);
		}
		return null;
	}

	private grdFindingQuestionsWithStageRow getFindingQuestionRowByQuestionWithStages(QuestionInformationShortVo voQIS)
	{
		for (int i = 0; i < form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().size(); i++)
		{
			GraphicAssessmentFindingQuestionVo voGAFQ = form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().get(i).getValue();
			if (voGAFQ != null && voGAFQ.getQuestionIsNotNull() && voGAFQ.getQuestion().equals(voQIS))
				return form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().get(i);
		}
		return null;
	}

	private void displayQuestionRow(grdFindingQuestionsRow row, GraphicAssessmentFindingQuestionVo voGAFQ)
	{
		if (row != null && voGAFQ != null)
		{
			QuestionInformationShortVo voQInfoShort = voGAFQ.getQuestion();
			if (voQInfoShort != null)
			{
				row.setcolFindingQuestions(voQInfoShort.getShortText());
				row.setcolStatus(voGAFQ.getActiveStatus());
				row.setcolMandatory(voGAFQ.getIsMandatoryIsNotNull() ? voGAFQ.getIsMandatory().booleanValue() : false);
				row.setcolAllowMultipleAnswers(voGAFQ.getAllowsMultipleAnswersIsNotNull()?voGAFQ.getAllowsMultipleAnswers().booleanValue() : false);
				row.setValue(voGAFQ);
			}
		}
	}

	private void displayQuestionWithStagesRow(grdFindingQuestionsWithStageRow row, GraphicAssessmentFindingQuestionVo voGAFQ)
	{
		if (row != null && voGAFQ != null)
		{
			QuestionInformationShortVo voQInfoShort = voGAFQ.getQuestion();
			if (voQInfoShort != null)
			{
				row.setcolFindingQuestions(voQInfoShort.getShortText());
				row.setcolStatus(voGAFQ.getActiveStatus());
				row.setcolMandatory(voGAFQ.getIsMandatoryIsNotNull() ? voGAFQ.getIsMandatory().booleanValue() : false);
				row.setcolAllowMultipleAnswers(voGAFQ.getAllowsMultipleAnswersIsNotNull()?voGAFQ.getAllowsMultipleAnswers().booleanValue() : false);
				row.setValue(voGAFQ);
			}
		}
	}
	
	/**
	 * @param voGAFinding
	 */
	private void displayFindingQuestions(GraphicAssessmentFindingVo voGAFinding)
	{
		if(voGAFinding.getFindingStageIsNotNull() && voGAFinding.getFindingStage().size() > 0)
		{
			for (int i = 0; voGAFinding.getFindingStage().get(0).getAssociatedQuestionsIsNotNull() && i < voGAFinding.getFindingStage().get(0).getAssociatedQuestions().size(); i++)
			{
				displayQuestionRow(form.lyrDetails().tabFindings().grdFindingQuestions().getRows().newRow(), voGAFinding.getFindingStage().get(0).getAssociatedQuestions().get(i));
			}
		}
	}

	private DynamicGridRow createDynamicGridRow(DynamicGridRow row, GraphicAssessmentFindingVo voGAFinding)
	{
		if (voGAFinding == null || voGAFinding.getFinding() == null)
			return null;

		DrawingGraphicFindingVo voDrawingGraphicFinding = voGAFinding.getFinding();
		DynamicGridColumn colFinding = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getColumns().getByIdentifier(COLFINDING);
		if (colFinding == null)
		{
			colFinding = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getColumns().newColumn("Finding");
			colFinding.setWidth(FINDING_COLUMN_WIDTH);
		}

		DynamicGridColumn colImage = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getColumns().getByIdentifier(COLIMAGE);
		if (colImage == null)
		{
			colImage = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getColumns().newColumn("Colour/Image");
			colImage.setWidth(-1);
		}

		row.setValue(voGAFinding);
		row.setReadOnly(true);
		row.setSelectable(true);
		if (row != null)
		{
			DynamicGridCell cellFinding = row.getCells().get(colFinding);
			if (cellFinding == null)
				cellFinding = row.getCells().newCell(colFinding, DynamicCellType.STRING);

			cellFinding.setValue(voDrawingGraphicFinding.getDisplayText());

			DynamicGridCell cellImage = row.getCells().get(colImage);
			if (voDrawingGraphicFinding.getImageIsNotNull())
			{
				// Change the type to be image
				if (cellImage == null || cellImage.getType().equals(DynamicCellType.STRING))
					cellImage = row.getCells().newCell(colImage, DynamicCellType.IMAGE);

				cellImage.setValue(engine.getRegisteredImage(voDrawingGraphicFinding.getImage().getID_AppImage().intValue()));
			}
			else
			{
				// Change the type to be String
				if (cellImage == null || cellImage.getType().equals(DynamicCellType.IMAGE))
					cellImage = row.getCells().newCell(colImage, DynamicCellType.STRING);

				cellImage.setValue("Line");
				cellImage.setTextColor(voDrawingGraphicFinding.getColour());
			}
		}

		return row;
	}

	protected void onDyngrdAssessmentFindingsRowSelectionChanged(DynamicGridRow row)
	{
		clearFindingQuestionGrid();
		Object voObj = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getValue();
		if (voObj != null && voObj instanceof GraphicAssessmentFindingVo)
		{
			GraphicAssessmentFindingVo voGAFinding = (GraphicAssessmentFindingVo) voObj;
			displayFindingQuestions(voGAFinding);
		}

		enableContextMenu();
	}

	private DynamicGridRow getDynamicRowByValue(DrawingGraphicFindingVo voDrawingGraphicFinding)
	{
		for (int i = 0; voDrawingGraphicFinding != null && i < form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().size(); i++)
		{
			DynamicGridRow selRow = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().get(i);
			Object objValue = selRow.getValue();

			GraphicAssessmentFindingVo voGraphicAssessmentFinding = objValue != null ? (GraphicAssessmentFindingVo) objValue : null;
			if (voGraphicAssessmentFinding != null)
			{
				if (voGraphicAssessmentFinding.getFindingIsNotNull() && voGraphicAssessmentFinding.getFinding().equals(voDrawingGraphicFinding))
				{
					return selRow;
				}
			}
		}

		return null;
	}

	private DynamicGridRow getDynamicRowByValueWithStages(DrawingGraphicFindingVo voDrawingGraphicFinding)
	{
		for (int i = 0; voDrawingGraphicFinding != null && i < form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().size(); i++)
		{
			DynamicGridRow selRow = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().get(i);
			Object objValue = selRow.getValue();

			GraphicAssessmentFindingVo voGraphicAssessmentFinding = objValue != null ? (GraphicAssessmentFindingVo) objValue : null;
			if (voGraphicAssessmentFinding != null)
			{
				if (voGraphicAssessmentFinding.getFindingIsNotNull() && voGraphicAssessmentFinding.getFinding().equals(voDrawingGraphicFinding))
				{
					return selRow;
				}
			}
		}

		return null;
	}
	
	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setClipboardQuestions(null);
		
		if(isNewRecord())
		{
			engine.open(form.getForms().Assessment.GraphicAssessments);
		}
		else
		{
			initializeScreen();
			open();
			form.setMode(FormMode.VIEW);
		}
		disableStageDetailControls();
	}

	private void disableStageDetailControls() {
		form.lyrDetails().tabStages().ctnStageDetails().txtStageName().setEnabled(false);
		form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().setEnabled(false);
		form.lyrDetails().tabStages().ctnStageDetails().btnCancelStage().setEnabled(false);
		form.lyrDetails().tabStages().ctnStageDetails().btnAddStage().setEnabled(false);
		form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setEnabled(false);
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSave();
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			// Images
			case GenForm.ContextMenus.GenericGrid.Add :
				addDrawingConfiguration();
			break;

			case GenForm.ContextMenus.GenericGrid.Remove:
				removeDrawingConfiguration();
			break;

			// Associated Questions
			case GenForm.ContextMenus.UserAssessments.ADD :
				addAssociatedQuestion();
			break;

			case GenForm.ContextMenus.UserAssessments.EDIT:
				editAssociatedQuestion();
			break;
			
			case GenForm.ContextMenus.UserAssessments.PREVIEW :
				removeAssociatedQuestion();
			break;
			
			case GenForm.ContextMenus.UserAssessments.MOVE_UP:
				moveAssociatedQuestionUp();
			break;
			
			case GenForm.ContextMenus.UserAssessments.MOVE_DOWN:
				moveAssociatedQuestionDown();
			break;

			// Finding
			case GenForm.ContextMenus.FindingMenu.Add :
				addAssessmentFinding();
			break;

			case GenForm.ContextMenus.FindingMenu.Remove :
				removeAssessmentFinding();
			break;

			// Finding Question
			case GenForm.ContextMenus.Questions.Add :
				addFindingQuestion();
			break;

			/*
			 * case GenForm.ContextMenus.Questions.Edit: editFindingQuestion();
			 * break;
			 */

			case GenForm.ContextMenus.Questions.Remove :
				removeFindingQuestion();
			break;

			case GenForm.ContextMenus.Questions.MoveUp :
				moveFindingQuestionUp();
			break;

			case GenForm.ContextMenus.Questions.MoveDown :
				moveFindingQuestionDown();
			break;

			case GenForm.ContextMenus.Stages.ADD_STAGE :
				addStage();
				break;
			case GenForm.ContextMenus.Stages.EDIT_STAGE :
				editStage();
				break;
			case GenForm.ContextMenus.Stages.REMOVE_STAGE :
				removeStage();
				break;

			case GenForm.ContextMenus.FindingWithStagesMenu.ADD :
				addFindingWithStageStage();
				break;
			case GenForm.ContextMenus.FindingWithStagesMenu.REMOVE :
				removeFindingWithStageStage();
				break;
			case GenForm.ContextMenus.FindingWithStagesMenu.COPY :
				copyFindingWithStageStageQuestions();
				break;
			case GenForm.ContextMenus.FindingWithStagesMenu.PASTE :
				pasteFindingWithStageStageQuestions();
				break;
			
			case GenForm.ContextMenus.LIP.New:
				updateSpeciality();
				break;
			case GenForm.ContextMenus.LIP.Update:
				removeSpeciality();
				break;
				
			default:
				break;
		}
	}

	private void removeSpeciality() {
		form.lyrDetails().tabSpecialties().grdSpecialities().removeSelectedRow();
		updateContextMenuSpecialities(FormMode.EDIT.equals(form.getMode()));
		
	}

	private void updateSpeciality() {
		form.getGlobalContext().Core.setSpecialties(populateSpecialitiesDataFromScreen());
		engine.open(form.getForms().ClinicalAdmin.HotlistDialog);
		
	}

	private void addFindingWithStageStage()
	{
		GraphicAssessmentStageVo annStage = getAnnotatedStage();
		
		if(annStage == null)
		{
			engine.showMessage("Please mark a stage as annotated !");
			return;
		}
		
		engine.open(form.getForms().Assessment.FindingQuestionsSelect);
	}

	private void removeFindingWithStageStage()
	{
		DynamicGridRow row = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getSelectedRow();
		
		if(row == null)
			return;

		form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().remove(row);
		
		dyngrdFindingWithStageRowSelectionChanged();
		updateContextMenuStages();
	}

	private void copyFindingWithStageStageQuestions()
	{
		DynamicGridRow row = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getSelectedRow();
		
		if(row == null)
			return;
		
		FindingStageQuestionsVo fsq = (FindingStageQuestionsVo) row.getValue();
		
		form.getLocalContext().setClipboardQuestions(fsq.getAssociatedQuestions());
		updateContextMenuStages();
	}

	private void pasteFindingWithStageStageQuestions()
	{
		GraphicAssessmentFindingQuestionVoCollection coll = form.getLocalContext().getClipboardQuestions();
		
		if(coll == null)
			return;
		
		DynamicGridRow row = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getSelectedRow();
		
		if(row == null)
			return;

		FindingStageQuestionsVo fsq = (FindingStageQuestionsVo) row.getValue();

		int lastSeq = -1;
		if(fsq.getAssociatedQuestions() == null)
			fsq.setAssociatedQuestions(new GraphicAssessmentFindingQuestionVoCollection());
		else
		{
			for (int j = 0; j < fsq.getAssociatedQuestions().size(); j++)
			{
				if(fsq.getAssociatedQuestions().get(j).getSequenceIsNotNull())
				{
					if(fsq.getAssociatedQuestions().get(j).getSequence().intValue() > lastSeq)
						lastSeq = fsq.getAssociatedQuestions().get(j).getSequence().intValue();
				}
			}
		}

		for (int i = 0; i < coll.size(); i++)
		{
			boolean questionExists = false;
			for (int j = 0; j < fsq.getAssociatedQuestions().size(); j++)
			{
				if(fsq.getAssociatedQuestions().get(j).getQuestionIsNotNull() && fsq.getAssociatedQuestions().get(j).getQuestion().equals(coll.get(i).getQuestion()))
				{
					questionExists = true;
					break;
				}
			}
			
			if(questionExists == false)
			{
				GraphicAssessmentFindingQuestionVo oldInstance = coll.get(i);
				
				GraphicAssessmentFindingQuestionVo newInstance = new GraphicAssessmentFindingQuestionVo();
				newInstance.setActiveStatus(oldInstance.getActiveStatus());
				newInstance.setAllowsMultipleAnswers(oldInstance.getAllowsMultipleAnswers());
				newInstance.setIsMandatory(oldInstance.getIsMandatory());
				newInstance.setQuestion(oldInstance.getQuestion());
				newInstance.setSequence(new Integer(++lastSeq));
				
				fsq.getAssociatedQuestions().add(newInstance);
			}
		}
		
		dyngrdFindingWithStageRowSelectionChanged();
		updateContextMenuStages();
	}

	private void removeStage()
	{
		GraphicAssessmentStageVo stage = form.lyrDetails().tabStages().grdStages().getValue(); 
		
		if(stage == null)
			return;
		
		//check to see if there is any stage which depends on it
		for (int i = 0; i < form.lyrDetails().tabStages().grdStages().getRows().size(); i++)
		{
			if(stage.getStageName().equalsIgnoreCase(form.lyrDetails().tabStages().grdStages().getRows().get(i).getColEquivalentStage()))
			{
				engine.showMessage("I can't remove this stage, it is linked to another stage.");
				return;
			}
		}

		//check to see if this stage has questions
		for (int i = 0; i < form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().size(); i++)
		{
			DynamicGridRow findingRow = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().get(i);
			
			for (int j = 0; j < findingRow.getRows().size(); j++)
			{
				DynamicGridRow stageRow = findingRow.getRows().get(j);
				
				if(stageRow.getValue() instanceof FindingStageQuestionsVo)
				{
					FindingStageQuestionsVo fsqVo = (FindingStageQuestionsVo)stageRow.getValue();
					
					if(stage.equals(fsqVo.getAssessmentStage()) && fsqVo.getAssociatedQuestionsIsNotNull() && fsqVo.getAssociatedQuestions().size() > 0)
					{
						engine.showMessage("This stage has questions. Please remove the questions first.");
						return;
					}
				}
			}
		}
		
		if(form.getLocalContext().getStagesIsNotNull())
		{
			form.getLocalContext().getStages().remove(stage);
			
			if(stage.getID_GraphicAssessmentStageIsNotNull())
			{
				stage.setIsActive(Boolean.FALSE);
	
				if(form.getLocalContext().getInactiveStages() == null)
					form.getLocalContext().setInactiveStages(new GraphicAssessmentStageVoCollection());
				
				form.getLocalContext().getInactiveStages().add(stage);
			}
		}
		
		form.lyrDetails().tabStages().grdStages().removeSelectedRow();
		clearStagePanel();
		updateContextMenuStages();
		setPanelStatus();
		updateFindingStagesOnScreen(stage, false);
	}

	private void updateFindingStagesOnScreen(GraphicAssessmentStageVo stage, boolean addStage)
	{
		updateTabsStatus(form.getLocalContext().getGraphicAssessmentVo());
		
		//WDEV-16280
		if (form.lyrDetails().tabStages().grdStages().getRows().size() == 0)
		{
			form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().clear();
		}
		if(addStage)
		{
			//new stage or an existing one was updated
			for (int i = 0; i < form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().size(); i++)
			{
				DynamicGridRow findingRow = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().get(i); 
				
				DynamicGridRow stageRow = null;
				for (int j = 0; j < findingRow.getRows().size(); j++)
				{
					DynamicGridRow childRow = findingRow.getRows().get(j);
					
					GraphicAssessmentStageVo value = ((FindingStageQuestionsVo) childRow.getValue()).getAssessmentStage();
					
					//compare instance if id == null
					if(value.getID_GraphicAssessmentStageIsNotNull() && value.equals(stage) || value == stage)
					{
						stageRow = childRow;
						break;
					}
				}
				
				if(stageRow == null)
				{
					//new stage added, we have to add a new stage row
					stageRow = findingRow.getRows().newRow();
					
					FindingStageQuestionsVo findingStageQuestionsVo = new FindingStageQuestionsVo();
					findingStageQuestionsVo.setAssessmentStage(stage);
					
					GraphicAssessmentFindingVo graphicAssessmentFindingVo = (GraphicAssessmentFindingVo) findingRow.getValue();
					if(graphicAssessmentFindingVo.getFindingStage() == null)
						graphicAssessmentFindingVo.setFindingStage(new FindingStageQuestionsVoCollection());
					
					graphicAssessmentFindingVo.getFindingStage().add(findingStageQuestionsVo);
					
					createFindingStageRow(form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getColumns().getByIdentifier(COLFINDING), stageRow, findingStageQuestionsVo);
				}
				else
				{
					//existing stage updated
					createFindingStageRow(form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getColumns().getByIdentifier(COLFINDING), stageRow, (FindingStageQuestionsVo) stageRow.getValue());					
				}
			}
		}
		else
		{
			//the stage was removed, need to remove it from finding's collection
			for (int i = 0; i < form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().size(); i++)
			{
				DynamicGridRow findingRow = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().get(i); 
				
				for (int j =0; j < findingRow.getRows().size(); j++)
				{
					DynamicGridRow childRow = findingRow.getRows().get(j);
					
					GraphicAssessmentStageVo value = ((FindingStageQuestionsVo) childRow.getValue()).getAssessmentStage();
					
					//compare instance if id == null
					if(value.getID_GraphicAssessmentStageIsNotNull() && value.equals(stage) || value == stage)
					{
						GraphicAssessmentFindingVo gaf = (GraphicAssessmentFindingVo)findingRow.getValue();
						
						if(gaf.getFindingStageIsNotNull())
							gaf.getFindingStage().remove((FindingStageQuestionsVo)childRow.getValue());
						
						findingRow.getRows().remove(childRow);
						break;
					}
				}
			}	
		}
	}

	private void editStage()
	{
		form.getLocalContext().setStageBeingEdited(Boolean.TRUE);
		form.getLocalContext().setCurrentStage(form.lyrDetails().tabStages().grdStages().getValue());
		setPanelStatus();
		form.lyrDetails().tabStages().ctnStageDetails().btnAddStage().setText("Apply");
		//form.lyrDetails().tabStages().ctnStageDetails().setCollapsed(false); 
		
		populateStageCombo();
		form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setValue(form.getLocalContext().getCurrentStage().getEquivalentStage());
		enableOrDisableAnnotationControl();
		handleChkAnnotated();
		form.lyrDetails().tabStages().grdStages().setEnabled(false);
		
		updateContextMenuStages();
		form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().setEnabled(true);
	}

	private void enableOrDisableAnnotationControl()
	{
		GraphicAssessmentStageVo annStage = getAnnotatedStage();
		if(annStage != null && !annStage.equals(form.getLocalContext().getCurrentStage()))
			form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().setEnabled(false);
	}

	private void addStage()
	{
		clearStagePanel();
		form.getLocalContext().setStageBeingEdited(Boolean.TRUE);
		form.getLocalContext().setCurrentStage(null);
		setPanelStatus();
		form.lyrDetails().tabStages().ctnStageDetails().btnAddStage().setText("Add");
		//form.lyrDetails().tabStages().ctnStageDetails().setCollapsed(false);
		
		populateStageCombo();
		enableOrDisableAnnotationControl();
		form.lyrDetails().tabStages().grdStages().setEnabled(false);
		form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().setEnabled(true);
		form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setEnabled(form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().getValue());
		form.lyrDetails().tabStages().ctnStageDetails().txtStageName().setFocus();
		updateContextMenuStages();
	}

	protected void onGrdImagesSelectionChanged() throws PresentationLogicException
	{
		loadDrawingImage();
	}

	protected void onGrdAssociatedQuestionsSelectionChanged() throws PresentationLogicException
	{
		enableContextMenu();
	}

	protected void onGrdFindingQuestionsSelectionChanged() throws PresentationLogicException
	{
		enableContextMenu();
	}

	protected void onGrdFindingQuestionsGridComboBoxSelectionChanged(int column, grdFindingQuestionsRow row, Object value) throws PresentationLogicException
	{
		updateQuestionVoIntoFindingVo(row);
	}

	protected void onGrdFindingQuestionsGridCheckBoxClicked(int column, grdFindingQuestionsRow row, boolean isChecked) throws PresentationLogicException
	{
		updateQuestionVoIntoFindingVo(row);
	}
	
	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Assessment.GraphicAssessments);
	}

	private void updateQuestionVoIntoFindingVo(grdFindingQuestionsRow row)
	{
		GraphicAssessmentFindingQuestionVo voGAFQuestion = row.getValue();
		if (voGAFQuestion != null)
		{
			voGAFQuestion.setIsMandatory(new Boolean(row.getcolMandatory()));
			voGAFQuestion.setActiveStatus(row.getcolStatus());
			voGAFQuestion.setAllowsMultipleAnswers(new Boolean(row.getcolAllowMultipleAnswers()));
		}
		row.setValue(voGAFQuestion);

		DynamicGridRow dynamicRow = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getSelectedRow();
		if (dynamicRow != null)
		{
			Object objValue = dynamicRow.getValue();
			if (objValue != null && objValue instanceof GraphicAssessmentFindingVo)
			{
				GraphicAssessmentFindingVo voGAFinding = (GraphicAssessmentFindingVo) objValue;
				if (voGAFinding.getFindingStage().size() > 0 && voGAFinding.getFindingStage().get(0).getAssociatedQuestionsIsNotNull())
				{
					int questionIndex = voGAFinding.getFindingStage().get(0).getAssociatedQuestions().indexOf(voGAFQuestion);
					if (questionIndex >= 0)
						voGAFinding.getFindingStage().get(0).getAssociatedQuestions().set(questionIndex, voGAFQuestion);
					else
						voGAFinding.getFindingStage().get(0).getAssociatedQuestions().add(voGAFQuestion);
				}
				else
				{
					voGAFinding.getFindingStage().get(0).setAssociatedQuestions(new GraphicAssessmentFindingQuestionVoCollection());
					voGAFinding.getFindingStage().get(0).getAssociatedQuestions().add(voGAFQuestion);
				}
				dynamicRow.setValue(voGAFinding);
			}
		}
	}

	// Finding
	private void addAssessmentFinding()
	{
		engine.open(form.getForms().Assessment.FindingQuestionsSelect);
	}

	private void removeAssessmentFinding()
	{
		DynamicGridRow row = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getSelectedRow();
		if (row != null)
			form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().remove(row);

		// Remove the Finding Questions
		clearFindingQuestionGrid();

		enableContextMenu();
	}

	/**
	 * 
	 */
	private void clearFindingQuestionGrid()
	{
		form.lyrDetails().tabFindings().grdFindingQuestions().getRows().clear();
	}

	// Finding Question
	private void addFindingQuestion()
	{
		setIsFindingQuestion(true);
		addQuestion("Finding Question - Add Finding Questions", QuestionType.FINDING, ADD_FINDING_QUESTION);
	}

	/*
	 * private void editFindingQuestion() { editQuestion(); }
	 */

	private void removeFindingQuestion()
	{
		if(isAssessmentWithStages())
		{
			if(removeQuestionWithStages())
				form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().removeSelectedRow();
			
			updateContextMenuStages();
		}
		else
		{
			boolean rowDataRemoved = removeRowData();
			if(rowDataRemoved)
				form.lyrDetails().tabFindings().grdFindingQuestions().removeSelectedRow();
			enableContextMenu();
		}
	}

	private boolean removeQuestionWithStages()
	{
		boolean rowDataRemoved = false;
		GraphicAssessmentFindingQuestionVo voGAFQuestion = form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getValue();
		DynamicGridRow dynamicRow = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getSelectedRow();
		if (dynamicRow != null)
		{
			Object objValue = dynamicRow.getValue();
			if (objValue != null && objValue instanceof FindingStageQuestionsVo)
			{
				FindingStageQuestionsVo voFsq = (FindingStageQuestionsVo) objValue;
				if (voFsq.getAssociatedQuestionsIsNotNull())
				{
					int questionIndex = voFsq.getAssociatedQuestions().indexOf(voGAFQuestion);
					if (questionIndex >= 0)
					{
						voFsq.getAssociatedQuestions().remove(voGAFQuestion);
						rowDataRemoved = true;
					}
				}
			}
		}
		return rowDataRemoved;
	}
	
	/**
	 * @return
	 */
	private boolean removeRowData()
	{
		boolean rowDataRemoved = false;
		GraphicAssessmentFindingQuestionVo voGAFQuestion = form.lyrDetails().tabFindings().grdFindingQuestions().getValue();
		DynamicGridRow dynamicRow = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getSelectedRow();
		if (dynamicRow != null)
		{
			Object objValue = dynamicRow.getValue();
			if (objValue != null && objValue instanceof GraphicAssessmentFindingVo)
			{
				GraphicAssessmentFindingVo voGAFinding = (GraphicAssessmentFindingVo) objValue;
				if (voGAFinding.getFindingStageIsNotNull() &&  voGAFinding.getFindingStage().get(0).getAssociatedQuestionsIsNotNull())
				{
					int questionIndex = voGAFinding.getFindingStage().get(0).getAssociatedQuestions().indexOf(voGAFQuestion);
					if (questionIndex >= 0)
					{
						voGAFinding.getFindingStage().get(0).getAssociatedQuestions().remove(voGAFQuestion);
						rowDataRemoved = true;
					}
				}
			}
		}
		return rowDataRemoved;
	}

	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			if(isStatusActiveOrInactive())
			{
				removePreactiveOrActiveLookup();
				form.txtName().setEnabled(false);
			}
			else
			{
				if(isSkinAssessment() || isPainAssessment() || isMedicalNotingAssessment())
					form.txtName().setEnabled(false);
				else
					form.txtName().setEnabled(true);
			}
		}
		
		enableContextMenu();
		updateContextMenuStages();
	}

	// ------------- Private Methods -----------------------
	private void setContextMenu()
	{
		
		form.getContextMenus().getGenericGridAddItem().setText("Add Drawing Configuration");
		form.getContextMenus().getGenericGridRemoveItem().setText("Remove Drawing Configuration");
		form.getContextMenus().getUserAssessmentsADDItem().setText("Add Question");
		form.getContextMenus().getUserAssessmentsPREVIEWItem().setText("Remove Question");
		form.getContextMenus().getUserAssessmentsPREVIEWItem().setIcon(form.getImages().Core.Delete);
	}

	private void enableContextMenu()
	{
		boolean editMode  = form.getMode().equals(FormMode.EDIT);
		boolean preactive = !isStatusActiveOrInactive();

		// Images
		boolean isGridImgSelected = form.lyrDetails().tabImages().grdImages().getSelectedRowIndex() >= 0;
		if(isPainAssessment() || isSkinAssessment())
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(editMode && preactive && form.lyrDetails().tabImages().grdImages().getRows().size() == 0);
		}
		else
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(editMode && preactive);
		}
		form.getContextMenus().getGenericGridRemoveItem().setVisible(editMode && preactive && isGridImgSelected);

		boolean graphicAssessmentNotSaved = !form.getLocalContext().getGraphicAssessmentVoIsNotNull() || !form.getLocalContext().getGraphicAssessmentVo().getID_GraphicAssessmentIsNotNull() || !form.getLocalContext().getGraphicAssessmentVo().getActiveStatusIsNotNull();
		boolean graphicAssessmentIsPreactive = form.getLocalContext().getGraphicAssessmentVoIsNotNull() && PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getLocalContext().getGraphicAssessmentVo().getActiveStatus());
	
		// Associated Question
		boolean isAssocQGridSel = form.lyrDetails().tabQuestions().grdAssociatedQuestions().getSelectedRowIndex() >= 0;
		form.getContextMenus().getUserAssessmentsADDItem().setVisible(editMode);
		form.getContextMenus().getUserAssessmentsEDITItem().setVisible(editMode && isAssocQGridSel);
		form.getContextMenus().getUserAssessmentsPREVIEWItem().setVisible(editMode && isAssocQGridSel && (graphicAssessmentNotSaved || graphicAssessmentIsPreactive));
		form.getContextMenus().getUserAssessmentsMOVE_UPItem().setVisible(editMode && form.lyrDetails().tabQuestions().grdAssociatedQuestions().canMoveCurrentUp());
		form.getContextMenus().getUserAssessmentsMOVE_DOWNItem().setVisible(editMode && form.lyrDetails().tabQuestions().grdAssociatedQuestions().canMoveCurrentDown());

		// Findings
		boolean isFindingSelected = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getSelectedRow() != null;
		form.getContextMenus().getFindingMenuAddItem().setVisible(editMode && preactive);
		form.getContextMenus().getFindingMenuRemoveItem().setVisible(editMode && isFindingSelected && preactive);

		// Finding Question
		boolean isGrdFindingQuestionSel = form.lyrDetails().tabFindings().grdFindingQuestions().getSelectedRowIndex() >= 0;
		form.getContextMenus().getQuestionsAddItem().setVisible(editMode && isFindingSelected);
		//form.getContextMenus().getQuestionsEditItem().setVisible(editMode && isGrdFindingQuestionSel);
		form.getContextMenus().getQuestionsRemoveItem().setVisible(editMode && isGrdFindingQuestionSel  && (graphicAssessmentNotSaved || graphicAssessmentIsPreactive));
		form.getContextMenus().getQuestionsMoveDownItem().setVisible(editMode && form.lyrDetails().tabFindings().grdFindingQuestions().canMoveCurrentDown());
		form.getContextMenus().getQuestionsMoveUpItem().setVisible(editMode && form.lyrDetails().tabFindings().grdFindingQuestions().canMoveCurrentUp());
		
		if (form.lyrDetails().tabSpecialties().isHeaderVisible())
		{
			updateContextMenuSpecialities(editMode);
		}
	}

	private void updateContextMenuSpecialities(boolean editMode) {
		form.getContextMenus().getLIPNewItem().setVisible(editMode);
		form.getContextMenus().getLIPUpdateItem().setVisible(editMode && form.lyrDetails().tabSpecialties().grdSpecialities().getSelectedRowIndex()>=0);
	}

	private void addDrawingConfiguration()
	{
		engine.open(form.getForms().Admin.DrawingConfigSelect);
	}

	private void removeDrawingConfiguration()
	{
		form.lyrDetails().tabImages().grdImages().removeSelectedRow();
		loadDefaultImage(form.lyrDetails().tabImages().grdImages().getValue());
		enableContextMenu();
	}

	private void addAssociatedQuestion()
	{
		//WDEV-2308 - Associated Questions - these are General questions not Finding questions
		addQuestion("Associated Question - Add Associated Questions", QuestionType.PRIMARY, ADD_ASSOCIATED_QUESTION);
	}
	
	private void editAssociatedQuestion()
	{
		grdAssociatedQuestionsRow selectedRow =  form.lyrDetails().tabQuestions().grdAssociatedQuestions().getSelectedRow();
		if(selectedRow != null && selectedRow.getcolQuestion() != null)
		{
			form.getGlobalContext().Core.setQuestionType(selectedRow.getcolQuestion().getQuestionType());
			form.getGlobalContext().Core.setQuestionFormMode(FormMode.EDIT);
			form.getLocalContext().setQuestionMode(EDIT_ASSOCIATED_QUESTION);
			form.getGlobalContext().Admin.setSelectedQuestions(null);
			form.getGlobalContext().Core.setSelectedQuestion(selectedRow.getcolQuestion());
			engine.open(form.getForms().Core.QuestionSelectNew, "Edit Question");
		}
	}

	private void removeAssociatedQuestion()
	{
		form.lyrDetails().tabQuestions().grdAssociatedQuestions().removeSelectedRow();
		enableContextMenu();
	}
	
	private void moveAssociatedQuestionDown()
	{
		form.lyrDetails().tabQuestions().grdAssociatedQuestions().moveDown();
		enableContextMenu();
	}

	private void moveAssociatedQuestionUp()
	{
		form.lyrDetails().tabQuestions().grdAssociatedQuestions().moveUp();
		enableContextMenu();
	}

	private void displayImages()
	{
		form.lyrDetails().tabImages().grdImages().getRows().clear();
		GraphicAssessmentVo voGraphicAssessment = form.getLocalContext().getGraphicAssessmentVo();
		if (voGraphicAssessment != null && voGraphicAssessment.getImagesIsNotNull())
		{
			for (int i = 0; i < voGraphicAssessment.getImages().size(); i++)
			{
				displayImageRow(voGraphicAssessment.getImages().get(i), i==0?true: false);
			}
		}
		
		if(form.lyrDetails().tabImages().grdImages().getSelectedRowIndex() >=0)
			loadDrawingImage();
	}

	private void loadDrawingImage()
	{
		DrawingGraphicImageVo voGraphicImage = form.lyrDetails().tabImages().grdImages().getValue();
		loadDefaultImage(voGraphicImage);
	}

	// Load the image into the control - blank if no image is provided (for avoiding control crash)
	private void loadDefaultImage(DrawingGraphicImageVo voGraphicImage)
	{
		//Print
		form.lyrDetails().tabImages().drawingPreview().setPrintSubTitle("Graphic Assessment");

		// IMAGE
		Image img = null;
		if (voGraphicImage != null && voGraphicImage.getImageIsNotNull())
			img = engine.getRegisteredImage(voGraphicImage.getImage().getID_AppImage().intValue());
		else
			img = form.getImages().GeneralMedical.Blank;

		form.lyrDetails().tabImages().drawingPreview().setImage(img);
		
		//Default brush
		setBrushes();
		
		// AREAS
		DrawingControlGroup root = null;
		if (voGraphicImage != null && voGraphicImage.getRootGroupIsNotNull())
		{
			root = new DrawingControlGroup(voGraphicImage.getRootGroup().getGroupID().intValue(), voGraphicImage.getRootGroup().getGroupName());
			convertAllAreasToNode(voGraphicImage.getRootGroup(), root);
		}
		else
		{
			root = new DrawingControlGroup(-1, " ");
		}

		form.lyrDetails().tabImages().drawingPreview().setAreas(root);
	}

	private void setBrushes()
	{
		form.lyrDetails().tabImages().drawingPreview().clearBrushes();
		boolean isFindingTab = form.lyrDetails().tabFindings().isHeaderVisible();
		boolean isFindingStagesTab = form.lyrDetails().tabFindingsWithStages().isHeaderVisible();
		
		int assessmentFindings = 0;
		if (isFindingTab)
			assessmentFindings = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().size();
		else if (isFindingStagesTab)
			assessmentFindings = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().size();
		
		for(int i=0; i<assessmentFindings; i++)
		{
			Object objValue = null;
			if(isFindingTab)
				objValue = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().get(i).getValue();
			else if(isFindingStagesTab)
				objValue = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().get(i).getValue();
				
			GraphicAssessmentFindingVo voGAFinding = null;
			if (objValue != null && objValue instanceof GraphicAssessmentFindingVo)
				voGAFinding = (GraphicAssessmentFindingVo) objValue;
			
			if(voGAFinding != null && voGAFinding.getFindingIsNotNull())
			{
				DrawingGraphicFindingVo voDrawingGraphicFinding = voGAFinding.getFinding();
				Integer id  = voDrawingGraphicFinding.getID_DrawingGraphicFinding();
				String text = voDrawingGraphicFinding.getDisplayText();
				Image   img = voDrawingGraphicFinding.getImageIsNotNull()?engine.getRegisteredImage(voDrawingGraphicFinding.getImage().getID_AppImage().intValue()):null;
				Color colour = voDrawingGraphicFinding.getColourIsNotNull()?voDrawingGraphicFinding.getColour():null;

				if(img != null)
					form.lyrDetails().tabImages().drawingPreview().addBrush(id.intValue(), text, img);
				
				if(colour != null)
					form.lyrDetails().tabImages().drawingPreview().addBrush(id.intValue(), text, colour);
			}
		}

		//Set default brush
		if(assessmentFindings == 0)
			form.lyrDetails().tabImages().drawingPreview().addBrush(-1, "", Color.White);
	}
	
	protected void onlyrDetailsTabChanged(LayerBridge tab)
	{
		loadDrawingImage();
	}

	private void convertAllAreasToNode(GraphicGroupVo voGroup, DrawingControlGroup node)
	{
		node.setName(voGroup.getGroupName());
		// convert all areas to controlgroup
		int i;
		for (i = 0; i < voGroup.getAreaCollection().size(); i++)
		{
			node.add(createDrawingControlArea(voGroup.getAreaCollection().get(i)));
		}

		for (int j = 0; j < voGroup.getChildGroups().size(); j++)
		{
			GraphicGroupVo childGroup = voGroup.getChildGroups().get(j);
			node.add(createDrawingControlGroup(childGroup));
			convertAllAreasToNode(childGroup, node.getGroup(i + j));
		}
	}

	private DrawingControlGroup createDrawingControlGroup(GraphicGroupVo voGroup)
	{
		DrawingControlGroup group = new DrawingControlGroup(voGroup.getGroupID().intValue(), voGroup.getGroupName());
		return group;
	}

	private DrawingControlArea createDrawingControlArea(GraphicAreaVo voArea)
	{
		DrawingControlArea area = new DrawingControlArea(voArea.getAreaID().intValue(), voArea.getAreaName(), voArea.getAreaVectors());
		return area;
	}

	/**

		
	 * @param voDrawingGraphicImage
	 * @return
	 */
	private void displayImageRow(DrawingGraphicImageVo voDrawingGraphicImage, boolean autoSelect)
	{
		grdImagesRow row = form.lyrDetails().tabImages().grdImages().getRowByValue(voDrawingGraphicImage);
		if (row == null)
			row = form.lyrDetails().tabImages().grdImages().getRows().newRow(autoSelect);
		row.setcolImageName(voDrawingGraphicImage.getImageName());
		row.setcolStatus(voDrawingGraphicImage.getImageStatusIsNotNull() ? voDrawingGraphicImage.getImageStatus().toString() : "");
		row.setTooltip(getImageRowTolltip(voDrawingGraphicImage));
		row.setValue(voDrawingGraphicImage);
	}

	private String getImageRowTolltip(DrawingGraphicImageVo voDrawingGraphicImage)
	{
		if (voDrawingGraphicImage != null)
		{
			StringBuffer tooltip = new StringBuffer();
			if (voDrawingGraphicImage.getImageDescriptionIsNotNull())
			{
				tooltip.append("*Image Description: *");
				tooltip.append(voDrawingGraphicImage.getImageDescription());
				tooltip.append(CR);
			}
			if (voDrawingGraphicImage.getVersionNumberIsNotNull())
			{
				tooltip.append("*Version No. : *");
				tooltip.append(voDrawingGraphicImage.getVersionNumber());
				tooltip.append(CR);
			}

			return new Textile().process(tooltip.toString());
		}

		return "";
	}

	protected GraphicAssessmentVo populateDataFromScreen(GraphicAssessmentVo voGraphicAssessment)
	{
		if (voGraphicAssessment != null)
		{
			GraphicAssessmentFindingVoCollection voGAFQcoll = getFindingsFromGrid();
			voGraphicAssessment.setFindingsAndQuestions(voGAFQcoll);
			
			voGraphicAssessment.setAssessmentStage(form.getLocalContext().getStages());
			
			if(voGraphicAssessment.getAssessmentStage() == null)
				voGraphicAssessment.setAssessmentStage(new GraphicAssessmentStageVoCollection());
			
			if(form.getLocalContext().getInactiveStagesIsNotNull())
			{
				for (int i = 0; i < form.getLocalContext().getInactiveStages().size(); i++)
				{
					voGraphicAssessment.getAssessmentStage().add(form.getLocalContext().getInactiveStages().get(i));
				}
			}
		}
		
		voGraphicAssessment = super.populateDataFromScreen(voGraphicAssessment);
		
		//Set sequence for the Associated Questions
		if(voGraphicAssessment != null && voGraphicAssessment.getAssociatedQuestionsIsNotNull())
		{
			for(int i = 0; i < voGraphicAssessment.getAssociatedQuestions().size(); i++)
			{
				voGraphicAssessment.getAssociatedQuestions().get(i).setSequence(new Integer(i));
			}
		}
		
		voGraphicAssessment.setAssessmentSpecialties(populateSpecialitiesDataFromScreen());
		
		// WDEV-13704
		//voGraphicAssessment.setAssociatedReportForPrinting(form.getLocalContext().getLinkedReport());
		//WDEV-14708
		voGraphicAssessment.setAssociatedReportForPrinting(domain.getReportTemplateByName(form.txtReport().getValue()));
		
		
		return voGraphicAssessment;
	}
	
	private GraphicAssessmentFindingVoCollection getFindingsFromGrid()
	{
		GraphicAssessmentFindingVoCollection voGAFQcoll = new GraphicAssessmentFindingVoCollection();
		if(isAssessmentWithStages())
		{
			for (int i = 0; i < form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().size(); i++)
			{
				Object objValue = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().get(i).getValue();
				if (objValue != null && objValue instanceof GraphicAssessmentFindingVo)
				{
					GraphicAssessmentFindingVo voGraphicAssessmentFinding = (GraphicAssessmentFindingVo) objValue;
					voGraphicAssessmentFinding.setSequence(new Integer(i));
					voGAFQcoll.add(voGraphicAssessmentFinding);
				}
			}
		}
		else
		{
			for (int i = 0; i < form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().size(); i++)
			{
				Object objValue = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().get(i).getValue();
				if (objValue != null && objValue instanceof GraphicAssessmentFindingVo)
				{
					GraphicAssessmentFindingVo voGraphicAssessmentFinding = (GraphicAssessmentFindingVo) objValue;
					voGraphicAssessmentFinding.setSequence(new Integer(i));
					voGAFQcoll.add(voGraphicAssessmentFinding);
				}
			}
		}
		return voGAFQcoll;
	}

	private void doSave()
	{
		
		if (!validateAndPopulate())
		{
			return;
		}
		
		
		if (isStatusInactive() && !form.getLocalContext().getIsInactive())
		{
			engine.showMessage("Are you sure you want to inactivate this assessment ?", "Inactive Assessment", MessageButtons.YESNO, MessageIcon.QUESTION);
			return;
		}
		
		performSave();
	}

	private void performSave()
	{
		if (save())
		{
			form.getLocalContext().setClipboardQuestions(null);
			
			open();
			
			form.setMode(FormMode.VIEW);
			
			disableStageDetailControls();
		}
	}

	private boolean save()
	{
		GraphicAssessmentVo voGraphicAssessment = form.getLocalContext().getGraphicAssessmentVo();
		try
		{
			//WDEV-1707 - Do not inactivate the parent record copied using "Copy based on " mechanism
			//voGraphicAssessment = domain.saveGraphicAssessment(voGraphicAssessment, form.getLocalContext().getClonedId());
			voGraphicAssessment = domain.saveGraphicAssessment(voGraphicAssessment, null);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setGraphicAssessmentVo(voGraphicAssessment);
			form.getLocalContext().setClipboardQuestions(null);
			open();
			form.setMode(FormMode.VIEW);
			disableStageDetailControls();
			return false;
		}
		form.getLocalContext().setGraphicAssessmentVo(voGraphicAssessment);
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(voGraphicAssessment);
		return true;
	}

	private boolean validateAndPopulate()
	{
		String[] uiErrors = getUIValidationErrors();
		if(uiErrors != null)
		{
			engine.showErrors(uiErrors);
			return false;
		}
		GraphicAssessmentVo voGraphicAssessment = form.getLocalContext().getGraphicAssessmentVo();

		populateDataFromScreen(voGraphicAssessment);

		// update sequence no records
		if(voGraphicAssessment.getFindingsAndQuestionsIsNotNull())
		{
			for (int i = 0; i < voGraphicAssessment.getFindingsAndQuestions().size(); i++)
			{
				GraphicAssessmentFindingVo gafVo = voGraphicAssessment.getFindingsAndQuestions().get(i);
				gafVo.setSequence(new Integer(i));
				
				if(gafVo.getFindingStageIsNotNull())
				{
					for (int j = 0; j < gafVo.getFindingStage().size(); j++)
					{
						FindingStageQuestionsVo fsqVp = gafVo.getFindingStage().get(j);
						
						if(fsqVp.getAssociatedQuestionsIsNotNull())
						{
							for (int k = 0; k < fsqVp.getAssociatedQuestions().size(); k++)
							{
								GraphicAssessmentFindingQuestionVo gafqVo = fsqVp.getAssociatedQuestions().get(k);
								
								gafqVo.setSequence(new Integer(k));
							}
						}
					}
				}
			}
		}
		
		String[] errors = voGraphicAssessment.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		if(UserDefinedAssessmentType.PAINASSESSMENT.equals(voGraphicAssessment.getAssessmentType()) 
			|| UserDefinedAssessmentType.MEDICALNOTING.equals(voGraphicAssessment.getAssessmentType())
			|| UserDefinedAssessmentType.SKINASSESSMENT.equals(voGraphicAssessment.getAssessmentType()))
		{
			if(PreActiveActiveInactiveStatus.ACTIVE.equals(voGraphicAssessment.getActiveStatus()))
			{
				int intValue = domain.counActiveAssessmentByType(voGraphicAssessment.getAssessmentType(), voGraphicAssessment.getID_GraphicAssessment()).intValue();
				if(intValue > 0)
				{
					engine.showErrors("Error", new String[]{"Cannot save this assessment as there can only be one 'Active' assessment of type '" + voGraphicAssessment.getAssessmentType() + "' on the system."});
					return false;
				}
			}
		}
		form.getLocalContext().setGraphicAssessmentVo(voGraphicAssessment);
		return true;
	}

	private String[] getUIValidationErrors()
	{
		java.util.ArrayList<String> errors = new java.util.ArrayList<String>();
		if(form.lyrDetails().tabImages().grdImages().getRows().size() == 0)
		{
			errors.add("Please add at least one Drawing Configuration");
		}
		if(form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getRows().size() == 0 && form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getRows().size() == 0)
		{
			errors.add("Please add at least one Finding");
		}
		
		if(isAssessmentWithStages())
		{
			boolean annotated = false;
			for (int i = 0; i < form.lyrDetails().tabStages().grdStages().getRows().size(); i++)
			{
				grdStagesRow row = form.lyrDetails().tabStages().grdStages().getRows().get(i);
				
				if(row.getColAnnotated())
				{
					annotated = true;
					break;
				}
			}
			
			if(annotated == false)
			{
				errors.add("Please add at least one annotated stage");
			}
		}
		
		PreActiveActiveInactiveStatus status = form.cmbActiveStatus().getValue();
		if(status != null && status.equals(PreActiveActiveInactiveStatus.ACTIVE))
		{
			//Associated Questions
			for(int x = 0; x < this.form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().size(); x++)
			{
				grdAssociatedQuestionsRow row = form.lyrDetails().tabQuestions().grdAssociatedQuestions().getRows().get(x);
				ims.assessment.vo.GraphicAssessmentQuestionVo rowValue = row.getValue();
				if(rowValue == null)
					rowValue = new ims.assessment.vo.GraphicAssessmentQuestionVo();

				ims.core.vo.QuestionInformationVo question = row.getcolQuestion();
				PreActiveActiveInactiveStatus assocQuestionStatus = row.getcolStatus();
				PreActiveActiveInactiveStatus questionStatus = question.getStatus();
				if(question != null && assocQuestionStatus != null && assocQuestionStatus.equals(PreActiveActiveInactiveStatus.ACTIVE))
				{
					if(questionStatus != null && questionStatus.equals(PreActiveActiveInactiveStatus.PREACTIVE))
						errors.add("Associated question '" + question.getShortText()+ "' cannot be preactive");
				}
			}

			GraphicAssessmentFindingVoCollection findingsAndQuestions = getFindingsFromGrid();
			for (int i = 0; findingsAndQuestions != null && i < findingsAndQuestions.size(); i++)
			{
				GraphicAssessmentFindingVo graphicFinding = findingsAndQuestions.get(i);
				DrawingGraphicFindingVo finding 		  = graphicFinding.getFinding();
				
				//Findings
				String findingName = finding.getDisplayText();
				if(finding.getActiveStatusIsNotNull() && !finding.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
				{
					errors.add("Finding '" + findingName+ "' has to be active");
				}

				//Graphic Findings
				for (int j = 0; graphicFinding.getFindingStage().size()>0 && graphicFinding.getFindingStage().get(0).getAssociatedQuestionsIsNotNull() && j < graphicFinding.getFindingStage().get(0).getAssociatedQuestions().size() ; j++)
				{
					GraphicAssessmentFindingQuestionVo findingQuestion  = graphicFinding.getFindingStage().get(0).getAssociatedQuestions().get(j);
					PreActiveActiveInactiveStatus findingQuestionStatus = findingQuestion.getActiveStatus();
					String findingQuestionName = findingQuestion.getQuestionIsNotNull()?findingQuestion.getQuestion().getShortText():null;
					if(findingQuestionName != null && findingQuestionStatus != null && findingQuestionStatus.equals(PreActiveActiveInactiveStatus.ACTIVE))
					{
						if(findingQuestion.getQuestionIsNotNull() && findingQuestion.getQuestion().getStatusIsNotNull() && findingQuestion.getQuestion().getStatus().equals(PreActiveActiveInactiveStatus.PREACTIVE))
							errors.add("Finding question '" + findingQuestionName +"' referenced by '" + findingName + "' finding cannot be preactive");
					}
				}
			}
		}
		if(errors.size() > 0)
		{
			String[] uiErrors = new String[errors.size()];
			errors.toArray(uiErrors);
			return uiErrors;
		}
			
		return null;
	}

	private void addQuestion(String title, QuestionType questionType, Integer questionMode)
	{
		form.getLocalContext().setQuestionMode(questionMode);
		form.getGlobalContext().Core.setQuestionType(questionType);
		form.getGlobalContext().Core.setQuestionFormMode(null);
		form.getGlobalContext().Core.setSelectedQuestion(null);
		engine.open(form.getForms().Core.QuestionSelectNew, title);
	}

	private void moveFindingQuestionDown()
	{
		if(isAssessmentWithStages())
		{
			moveDataFindingQuestionWithStages(false);
			form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().moveDown();
			updateContextMenuStages();
		}
		else
		{
			moveDataFindingQuestion(false);
			form.lyrDetails().tabFindings().grdFindingQuestions().moveDown();
			enableContextMenu();
		}
	}

	private void moveFindingQuestionUp()
	{
		if(isAssessmentWithStages())
		{
			moveDataFindingQuestionWithStages(true);
			form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().moveUp();
			updateContextMenuStages();
		}
		else
		{
			moveDataFindingQuestion(true);
			form.lyrDetails().tabFindings().grdFindingQuestions().moveUp();
			enableContextMenu();
		}
	}
	private void moveDataFindingQuestionWithStages(boolean up)
	{
		GraphicAssessmentFindingQuestionVo voGAFQuestion  = form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getValue();
		GraphicAssessmentFindingQuestionVo voGAFQuestion1 = null;
		int selIndex = form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getSelectedRowIndex();
		if(up)
		{
			int newIndex = selIndex - 1; 
			if(newIndex >= 0)
				voGAFQuestion1 = form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().get(newIndex).getValue();
		}
		else
		{
			int newIndex = selIndex + 1;
			if(newIndex < form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().size())
				voGAFQuestion1 = form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().get(newIndex).getValue();
		}
		
		if(voGAFQuestion1 == null)
			throw new CodingRuntimeException("Cannot swap rows");
		
		DynamicGridRow dynamicRow = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getSelectedRow();
		if (dynamicRow != null)
		{
			Object objValue = dynamicRow.getValue();
			if (objValue != null && objValue instanceof FindingStageQuestionsVo)
			{
				FindingStageQuestionsVo voFsq = (FindingStageQuestionsVo) objValue;
				if (voFsq.getAssociatedQuestionsIsNotNull())
				{
					int questionIndex  = voFsq.getAssociatedQuestions().indexOf(voGAFQuestion);
					int questionIndex1 = voFsq.getAssociatedQuestions().indexOf(voGAFQuestion1);
					//Change the sequence then Swap the records but first 
					voGAFQuestion.setSequence(new Integer(questionIndex1));
					voGAFQuestion1.setSequence(new Integer(questionIndex));
					voFsq.getAssociatedQuestions().set(questionIndex, voGAFQuestion1);
					voFsq.getAssociatedQuestions().set(questionIndex1, voGAFQuestion);
				}
			}
		}
	}
	private void moveDataFindingQuestion(boolean up)
	{
		GraphicAssessmentFindingQuestionVo voGAFQuestion  = form.lyrDetails().tabFindings().grdFindingQuestions().getValue();
		GraphicAssessmentFindingQuestionVo voGAFQuestion1 = null;
		int selIndex = form.lyrDetails().tabFindings().grdFindingQuestions().getSelectedRowIndex();
		if(up)
		{
			int newIndex = selIndex - 1; 
			if(newIndex >= 0)
				voGAFQuestion1 = form.lyrDetails().tabFindings().grdFindingQuestions().getRows().get(newIndex).getValue();
		}
		else
		{
			int newIndex = selIndex + 1;
			if(newIndex < form.lyrDetails().tabFindings().grdFindingQuestions().getRows().size())
				voGAFQuestion1 = form.lyrDetails().tabFindings().grdFindingQuestions().getRows().get(newIndex).getValue();
		}
		
		if(voGAFQuestion1 == null)
			throw new CodingRuntimeException("Cannot swap rows");
		
		DynamicGridRow dynamicRow = form.lyrDetails().tabFindings().dyngrdAssessmentFindings().getSelectedRow();
		if (dynamicRow != null)
		{
			Object objValue = dynamicRow.getValue();
			if (objValue != null && objValue instanceof GraphicAssessmentFindingVo)
			{
				GraphicAssessmentFindingVo voGAFinding = (GraphicAssessmentFindingVo) objValue;
				if (voGAFinding.getFindingStage().get(0).getAssociatedQuestionsIsNotNull())
				{
					int questionIndex  = voGAFinding.getFindingStage().get(0).getAssociatedQuestions().indexOf(voGAFQuestion);
					int questionIndex1 = voGAFinding.getFindingStage().get(0).getAssociatedQuestions().indexOf(voGAFQuestion1);
					//Change the sequence then Swap the records but first 
					voGAFQuestion.setSequence(new Integer(questionIndex1));
					voGAFQuestion1.setSequence(new Integer(questionIndex));
					voGAFinding.getFindingStage().get(0).getAssociatedQuestions().set(questionIndex, voGAFQuestion1);
					voGAFinding.getFindingStage().get(0).getAssociatedQuestions().set(questionIndex1, voGAFQuestion);
				}
			}
		}
	}
	private boolean isNewRecord()
	{
		return form.getLocalContext().getGraphicAssessmentVoIsNotNull() && form.getLocalContext().getGraphicAssessmentVo().getID_GraphicAssessment() == null;
	}
	
	private void removePreactiveOrActiveLookup()
	{
		PreActiveActiveInactiveStatus status = form.cmbActiveStatus().getValue(); 
		form.cmbActiveStatus().clear();
		PreActiveActiveInactiveStatusCollection  lookupColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for(int i=0; lookupColl  != null && i<lookupColl.size(); i++)
		{
			if(isStatusActive() && lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE))
				continue;
			if(isStatusInactive() && (lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE) || lookupColl.get(i).equals(PreActiveActiveInactiveStatus.ACTIVE)))
				continue;

			form.cmbActiveStatus().newRow(lookupColl.get(i), lookupColl.get(i).toString(), lookupColl.get(i).getImage(), lookupColl.get(i).getColor());
		}
		form.cmbActiveStatus().setValue(status);
	}
	
	private boolean isStatusInactive()
	{
		GraphicAssessmentVo voGraphicAssessment = form.getLocalContext().getGraphicAssessmentVo();
		if(voGraphicAssessment != null)
		{
			PreActiveActiveInactiveStatus status = voGraphicAssessment.getActiveStatus();
			if(status != null && (status.equals(PreActiveActiveInactiveStatus.INACTIVE)))
				return true;
		}
		return false;
	}

	private boolean isStatusActive()
	{
		GraphicAssessmentVo voGraphicAssessment = form.getLocalContext().getGraphicAssessmentVo();
		if(voGraphicAssessment != null)
		{
			PreActiveActiveInactiveStatus status = voGraphicAssessment.getActiveStatus();
			if(status != null && (status.equals(PreActiveActiveInactiveStatus.ACTIVE)))
				return true;
		}
		return false;
	}

	private boolean isStatusActiveOrInactive()
	{
		GraphicAssessmentVo voGraphicAssessment = form.getLocalContext().getGraphicAssessmentVo();
		if(voGraphicAssessment != null)
		{
			PreActiveActiveInactiveStatus status = voGraphicAssessment.getActiveStatus();
			if(status != null && (status.equals(PreActiveActiveInactiveStatus.ACTIVE) || status.equals(PreActiveActiveInactiveStatus.INACTIVE)))
				return true;
		}
		
		return false;
	}
	private boolean isGraphicAssessmentCopyMode()
	{
		Boolean value = form.getGlobalContext().Core.getGraphicAssessmentCopy();
		if(value != null && value.booleanValue())
			return true;
		
		return false;
	}
	// ------------- End Private Methods -----------------------

	protected void onGrdStagesSelectionChanged() throws PresentationLogicException
	{
		updateContextMenuStages();
		setPanelStatus();
		displayStageRecord(form.lyrDetails().tabStages().grdStages().getValue());
	}

	private void displayStageRecord(GraphicAssessmentStageVo stage)
	{
		clearStagePanel();
		
		if(stage == null)
			return;
		
		form.lyrDetails().tabStages().ctnStageDetails().txtStageName().setValue(stage.getStageName());
		form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().setValue(stage.getIsAnnotatedIsNotNull() ? stage.getIsAnnotated().booleanValue() : false);
		
		if(stage.getEquivalentStageIsNotNull() && form.lyrDetails().tabStages().ctnStageDetails().cmbStage().getValues() != null && form.lyrDetails().tabStages().ctnStageDetails().cmbStage().getValues().contains(stage.getEquivalentStage()) == false)
		{
			form.lyrDetails().tabStages().ctnStageDetails().cmbStage().newRow(stage.getEquivalentStage(), stage.getEquivalentStage().getStageName());
		}
		form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setValue(stage.getEquivalentStage());
		if(form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().getValue() && form.getLocalContext().getStageBeingEditedIsNotNull() && form.getLocalContext().getStageBeingEdited().booleanValue())
			form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setEnabled(form.getMode().equals(FormMode.EDIT));
	}

	private void clearStagePanel()
	{
		form.lyrDetails().tabStages().ctnStageDetails().txtStageName().setValue(null);
		form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().setValue(false);
		form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setValue(null);
		form.lyrDetails().tabStages().ctnStageDetails().cmbStage().clear();
	}

	private void updateContextMenuStages()
	{
		form.getContextMenus().hideAllStagesMenuItems();
		form.getContextMenus().hideAllFindingWithStagesMenuMenuItems();
		form.getContextMenus().hideAllQuestionsMenuItems();
		
		boolean editMode = form.getMode().equals(FormMode.EDIT);
		if(editMode)
		{
			//stages grid context menu
			if(form.lyrDetails().tabStages().grdStages().isEnabled() == true)
			{
				form.getContextMenus().getStagesADD_STAGEItem().setVisible(true);
				
				if(form.lyrDetails().tabStages().grdStages().getValue() != null)
				{
					form.getContextMenus().getStagesREMOVE_STAGEItem().setVisible(true);
					form.getContextMenus().getStagesEDIT_STAGEItem().setVisible(true);
				}
			}

			//findings grid context menu
			form.getContextMenus().getFindingWithStagesMenuADDItem().setVisible(true);
			if(form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getValue() instanceof GraphicAssessmentFindingVo)
			{
					form.getContextMenus().getFindingWithStagesMenuREMOVEItem().setVisible(true);
			}
			
			if(form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getValue() instanceof FindingStageQuestionsVo && form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().size() > 0)
			{
				form.getContextMenus().getFindingWithStagesMenuCOPYItem().setVisible(true);
			}
			
			if(form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getValue() instanceof FindingStageQuestionsVo && form.getLocalContext().getClipboardQuestionsIsNotNull())
			{
				form.getContextMenus().getFindingWithStagesMenuPASTEItem().setVisible(true);
			}
		
			//questions grid context menu
			if(form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getValue() instanceof FindingStageQuestionsVo)
			{
				grdFindingQuestionsWithStageRow selectedRow = form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getSelectedRow();			
				form.getContextMenus().getQuestionsAddItem().setVisible(true);
				
				if(selectedRow != null && selectedRow.getValue() != null)
				{
					//form.getContextMenus().getQuestionsEditItem().setVisible(true);
					form.getContextMenus().getQuestionsRemoveItem().setVisible(true);
				}
				
				form.getContextMenus().getQuestionsMoveDownItem().setVisible(editMode && form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().canMoveCurrentDown());
				form.getContextMenus().getQuestionsMoveUpItem().setVisible(editMode && form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().canMoveCurrentUp());
			}
		}
	}

	
	protected void onDyngrdFindingWithStageRowSelectionChanged(DynamicGridRow row)
	{
		dyngrdFindingWithStageRowSelectionChanged();
		updateContextMenuStages();
	}

	private void dyngrdFindingWithStageRowSelectionChanged()
	{
		form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().clear();

		Object value = form.lyrDetails().tabFindingsWithStages().dyngrdFindingWithStage().getValue();
		if(value instanceof FindingStageQuestionsVo)
		{
			FindingStageQuestionsVo fsq = (FindingStageQuestionsVo) value;
			for (int i = 0; fsq.getAssociatedQuestionsIsNotNull() && i < fsq.getAssociatedQuestions().size(); i++)
			{
				grdFindingQuestionsWithStageRow questionRow = form.lyrDetails().tabFindingsWithStages().grdFindingQuestionsWithStage().getRows().newRow();

				displayQuestionWithStagesRow(questionRow, fsq.getAssociatedQuestions().get(i));
			}
		}
	}

	private void setPanelStatus()
	{
		/*
		if(form.lyrDetails().tabStages().grdStages().getValue() != null)
		{
			form.lyrDetails().tabStages().ctnStageDetails().setCollapsed(false);
		}
		else
		{
			form.lyrDetails().tabStages().ctnStageDetails().setCollapsed(true);
		}
		*/
		
		if(form.getLocalContext().getStageBeingEditedIsNotNull() && form.getLocalContext().getStageBeingEdited().booleanValue())
		{
			form.lyrDetails().tabStages().ctnStageDetails().txtStageName().setEnabled(FormMode.EDIT.equals(form.getMode()));
			form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().setEnabled(FormMode.EDIT.equals(form.getMode()));
			form.lyrDetails().tabStages().ctnStageDetails().btnAddStage().setEnabled(FormMode.EDIT.equals(form.getMode()));
			form.lyrDetails().tabStages().ctnStageDetails().btnCancelStage().setEnabled(FormMode.EDIT.equals(form.getMode()));
			form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setEnabled(FormMode.EDIT.equals(form.getMode()));
		}
		else
		{
			disableStageDetailControls();
		}
	}

	protected void onGrdFindingQuestionsWithStageSelectionChanged() throws PresentationLogicException
	{
		updateContextMenuStages();
	}

	protected void onBtnAddStageClick() throws PresentationLogicException
	{
		if(form.lyrDetails().tabStages().ctnStageDetails().txtStageName().getValue() == null || form.lyrDetails().tabStages().ctnStageDetails().txtStageName().getValue().trim().length() == 0)
		{
			engine.showMessage("Please enter a stage name.");
			return;
		}
		/*
		if(form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().getValue() && form.lyrDetails().tabStages().ctnStageDetails().cmbStage().getValue() == null)
		{
			engine.showMessage("Please select an equivalent stage.");
			return;
		}
		*/

		GraphicAssessmentStageVo stage = form.getLocalContext().getCurrentStage();

		for (int i = 0; i < form.lyrDetails().tabStages().grdStages().getRows().size(); i++)
		{
			grdStagesRow row = form.lyrDetails().tabStages().grdStages().getRows().get(i);

			if(stage != null && row.getValue().equals(form.lyrDetails().tabStages().grdStages().getValue()))
				continue;
			
			if(row.getColName().equalsIgnoreCase(form.lyrDetails().tabStages().ctnStageDetails().txtStageName().getValue()))
			{
				engine.showMessage("A stage having this name already exists !");
				return;
			}
		}
		
		if(stage == null)
		{
			stage = new GraphicAssessmentStageVo();
			stage.setIsActive(Boolean.TRUE);
		}
		
		stage.setStageName(form.lyrDetails().tabStages().ctnStageDetails().txtStageName().getValue());
		stage.setIsAnnotated(new Boolean(form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().getValue()));
		stage.setEquivalentStage(form.lyrDetails().tabStages().ctnStageDetails().cmbStage().getValue());

		if(form.getLocalContext().getCurrentStage() == null)
		{
			addStageRow(stage);
			form.lyrDetails().tabStages().grdStages().setValue(stage);
		}
		else
		{
			applyStageRow(form.lyrDetails().tabStages().grdStages().getSelectedRow(), stage);
		}
		
		form.getLocalContext().setStageBeingEdited(Boolean.FALSE);
		
		GraphicAssessmentStageVoCollection stageColl = form.getLocalContext().getStages();
		
		if(stageColl == null)
			stageColl = new GraphicAssessmentStageVoCollection();
		
		stageColl.add(stage);
		
		form.getLocalContext().setCurrentStage(stage);
		form.getLocalContext().setStages(stageColl);
		
		updateContextMenuStages();
		setPanelStatus();
		updateFindingStagesOnScreen(stage, true);
		form.lyrDetails().tabStages().grdStages().setEnabled(true);
		updateContextMenuStages();
		form.lyrDetails().tabStages().ctnStageDetails().btnAddStage().setEnabled(false);
		form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().setEnabled(false);
		form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setEnabled(false);
		form.lyrDetails().tabStages().ctnStageDetails().txtStageName().setEnabled(false);
	}

	protected void onBtnCancelStageClick() throws PresentationLogicException
	{
		form.getLocalContext().setStageBeingEdited(Boolean.FALSE);
		
		setPanelStatus();
		form.lyrDetails().tabStages().grdStages().setEnabled(true);
		form.lyrDetails().tabStages().grdStages().setValue(form.getLocalContext().getCurrentStage());
		
		displayStageRecord(form.getLocalContext().getCurrentStage());
		
		updateContextMenuStages();
	}

	private void addStageRow(GraphicAssessmentStageVo stage)
	{
		grdStagesRow row = form.lyrDetails().tabStages().grdStages().getRows().newRow();
		
		row.setColName(stage.getStageName());
		row.setColAnnotated(stage.getIsAnnotatedIsNotNull() ? stage.getIsAnnotated().booleanValue() : false);
		row.setColEquivalentStage(stage.getEquivalentStageIsNotNull() ? stage.getEquivalentStage().getStageName() : "");
		row.setValue(stage);
		
		if(stage.getID_GraphicAssessmentStage() == null)
		{
			//uncomitted record
			row.setTextColor(Color.Red);
		}
	}

	private void applyStageRow(grdStagesRow row, GraphicAssessmentStageVo stage)
	{
		row.setColName(stage.getStageName());
		row.setColAnnotated(stage.getIsAnnotatedIsNotNull() ? stage.getIsAnnotated().booleanValue() : false);
		row.setColEquivalentStage(stage.getEquivalentStageIsNotNull() ? stage.getEquivalentStage().getStageName() : "");
		row.setValue(stage);
		
		if(stage.getID_GraphicAssessmentStage() == null)
		{
			//uncomitted record
			row.setTextColor(Color.Red);
		}
	}
	
	protected void onChkAnnotatedValueChanged() throws PresentationLogicException
	{
		handleChkAnnotated();
	}

	private void handleChkAnnotated()
	{
		if(form.lyrDetails().tabStages().ctnStageDetails().chkAnnotated().getValue())
		{
			form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setEnabled(true);
		}
		else
		{
			form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setEnabled(false);
			form.lyrDetails().tabStages().ctnStageDetails().cmbStage().setValue(null);
		}
	}
	
	private void populateStageCombo()
	{
		form.lyrDetails().tabStages().ctnStageDetails().cmbStage().clear();
		
		if(form.getLocalContext().getStages() == null)
			return;
		
		for (int i = 0; i < form.getLocalContext().getStages().size(); i++)
		{
			if(!form.getLocalContext().getStages().get(i).equals(form.getLocalContext().getCurrentStage()))
			{
				form.lyrDetails().tabStages().ctnStageDetails().cmbStage().newRow(form.getLocalContext().getStages().get(i), form.getLocalContext().getStages().get(i).getStageName());
			}
		}
	}
	
	private GraphicAssessmentStageVo getAnnotatedStage()
	{
		if(form.getLocalContext().getStages() != null && form.getLocalContext().getStages().size() > 0)
		{
			for (int i = 0; i < form.getLocalContext().getStages().size(); i++)
			{
				if(form.getLocalContext().getStages().get(i).getIsAnnotatedIsNotNull() && form.getLocalContext().getStages().get(i).getIsAnnotated().booleanValue())
					return form.getLocalContext().getStages().get(i);
			}
		}
		
		return null;
	}

	protected void onGrdFindingQuestionsWithStageGridComboBoxSelectionChanged(int column, grdFindingQuestionsWithStageRow row, Object value) throws PresentationLogicException
	{
		updateRowObject(row);
	}

	protected void onGrdFindingQuestionsWithStageGridCheckBoxClicked(int column, grdFindingQuestionsWithStageRow row, boolean isChecked) throws PresentationLogicException
	{
		updateRowObject(row);
	}

	private void updateRowObject(grdFindingQuestionsWithStageRow row)
	{
		if(row == null)
			return;
		
		GraphicAssessmentFindingQuestionVo val = row.getValue();
		
		if(val != null)
		{
			val.setIsMandatory(new Boolean(row.getcolMandatory()));
			val.setAllowsMultipleAnswers(new Boolean(row.getcolAllowMultipleAnswers()));
			val.setActiveStatus(row.getcolStatus());
		}
	}

	private boolean isMedicalNotingAssessment()
	{
		GraphicAssessmentShortVo voGraphicAssessment = form.getGlobalContext().Core.getGraphicAssessmentShortVo();
		
		if(voGraphicAssessment == null)
			return false;
		
		return UserDefinedAssessmentType.MEDICALNOTING.equals(voGraphicAssessment.getAssessmentType());
	}
	
	private boolean isSkinAssessment()
	{
		GraphicAssessmentShortVo voGraphicAssessment = form.getGlobalContext().Core.getGraphicAssessmentShortVo();
		
		if(voGraphicAssessment == null)
			return false;
		
		return UserDefinedAssessmentType.SKINASSESSMENT.equals(voGraphicAssessment.getAssessmentType());
	}
	
	private boolean isPainAssessment()
	{
		GraphicAssessmentShortVo voGraphicAssessment = form.getGlobalContext().Core.getGraphicAssessmentShortVo();
		
		if(voGraphicAssessment == null)
			return false;
		
		return UserDefinedAssessmentType.PAINASSESSMENT.equals(voGraphicAssessment.getAssessmentType());
	}

	protected void onImbUrlClick() throws PresentationLogicException
	{
		String url = form.txtUrl().getValue();
		if(url != null && url.length() > 0)
			engine.openUrl(url);
	}

	protected void onBtnPreviewClick() throws PresentationLogicException
	{
		form.getGlobalContext().Assessment.setIsDynamicAssessmentOpenedForPreview(Boolean.TRUE);
		engine.open(form.getForms().Assessment.DynamicAssessmentsDialog, new Object[] {form.getLocalContext().getGraphicAssessmentVo()});
	}

	@Override
	protected void onGrdSpecialitiesSelectionChanged() throws PresentationLogicException {
		updateContextMenuSpecialities(FormMode.EDIT.equals(form.getMode()));
		
	}

	@Override
	protected void onGrdSpecialitiesSelectionCleared() throws PresentationLogicException {
		updateContextMenuSpecialities(FormMode.EDIT.equals(form.getMode()));
		
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
			if (result.equals(DialogResult.YES))
			{
				performSave();
			}
		
	}
}
