//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2389.16953)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.graphicassessments;
import ims.assessment.forms.graphicassessments.GenForm.GroupCriteriaEnumeration;
import ims.assessment.forms.graphicassessments.GenForm.grdDetailsRow;
import ims.assessment.vo.GraphicAssessmentFilterVo;
import ims.assessment.vo.GraphicAssessmentShortVo;
import ims.assessment.vo.GraphicAssessmentShortVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.core.vo.lookups.UserDefinedAssessmentTypeCollection;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtName().setValue("");
		form.cmbStatus().setValue(null);
		form.cmbType().setValue(null);
		clearGrid();
		enableContextMenu();
		clearGraphicAssessmentSearchFilter();
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}

	protected void onGrdDetailsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		enableContextMenu();
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GraphicAssessment.AddAnnotatedImage:
				addAnnotatedImage();
				break;

			case GenForm.ContextMenus.GraphicAssessment.AddAnnotatedImageWithQuestions:
				addAnnotatedImageWithQuestions();
				break;
			
			case GenForm.ContextMenus.GraphicAssessment.AddGraphicaAssessmentWithStages:
				addPainAssessment();
				break;

			case GenForm.ContextMenus.GraphicAssessment.AddGraphicalAssessmentWithStages:
				addAnnotatedImageWithStages();
				break;
				
			case GenForm.ContextMenus.GraphicAssessment.AddSkinAssessment:
				addSkinAssessment();
				break;

			case GenForm.ContextMenus.GraphicAssessment.AddMedicalNoting:
				addMedicalNotingAssessment();
				break;
				
			case GenForm.ContextMenus.GraphicAssessment.AddGraphicAssessmentBasedOn:
				addNewGraphicAssessmentBasedOn();
				break;
				
			case GenForm.ContextMenus.GraphicAssessment.UpdateGraphicAssessment:
				updateGraphicAssessement();
				break;
			
			case GenForm.ContextMenus.GraphicAssessment.ViewGraphicAssessment:
				viewGraphicAssessment();
				break;
				
			case GenForm.ContextMenus.GraphicAssessment.Preview:
				previewGraphicAssessment();
				break;
		}
	}

	// ---------- Private Methods -------------------
	private void open()
	{
		loadTypeCombo();
		initialiseScreen();
		setContextMenu();
		enableContextMenu();
	}
	
	private void search()
	{
		clearGrid();
		doSearch();
		setGraphicAssessmentSearchFilter();
		enableContextMenu();
	}
	
	private void initialiseScreen()
	{
		if(form.getGlobalContext().Core.getGraphicAssessmentSearchFilterIsNotNull())
		{
			GraphicAssessmentFilterVo voGraphicAssessmentFilter = form.getGlobalContext().Core.getGraphicAssessmentSearchFilter();
			if(voGraphicAssessmentFilter != null)
			{
				form.txtName().setValue(voGraphicAssessmentFilter.getName());
				form.cmbStatus().setValue(voGraphicAssessmentFilter.getStatus());
				form.cmbType().setValue(voGraphicAssessmentFilter.getType());
				form.GroupCriteria().setValue(getGroupCriteria(voGraphicAssessmentFilter));
				search();
			}
		}
		else
		{
			GraphicAssessmentShortVo voGraphicAssessmentShort = form.getGlobalContext().Core.getGraphicAssessmentShortVo();
			if(voGraphicAssessmentShort != null && voGraphicAssessmentShort.getID_GraphicAssessmentIsNotNull())
			{
				clearGrid();
				GraphicAssessmentShortVoCollection voColl = new GraphicAssessmentShortVoCollection();
				voColl.add(voGraphicAssessmentShort);
				displayCollection(voColl);
			}
			setDefaultData();
		}
	}

	private GroupCriteriaEnumeration getGroupCriteria(GraphicAssessmentFilterVo voGraphicAssessmentFilter)
	{
		if(voGraphicAssessmentFilter != null)
		{
			if(voGraphicAssessmentFilter.getBeginsWithIsNotNull() && voGraphicAssessmentFilter.getBeginsWith().booleanValue())
				return GroupCriteriaEnumeration.rdoBegins;
			if(voGraphicAssessmentFilter.getContainsIsNotNull() && voGraphicAssessmentFilter.getContains().booleanValue())
				return GroupCriteriaEnumeration.rdoContains;
			if(voGraphicAssessmentFilter.getExactTextIsNotNull() && voGraphicAssessmentFilter.getExactText().booleanValue())
				return GroupCriteriaEnumeration.rdoContains;
		}
		return GroupCriteriaEnumeration.None;
	}

	private void setDefaultData()
	{
		form.GroupCriteria().setValue(GroupCriteriaEnumeration.rdoBegins);
		form.txtName().setFocus();
	}

	private void clearGrid()
	{
		form.grdDetails().getRows().clear();
	}

	private void setContextMenu()
	{
		/*form.getContextMenus().getGenericGridAddItem().setText("Add Annotated Image");
		form.getContextMenus().getGenericGridRemoveItem().setText("Add Annotated Image With Questions");
		form.getContextMenus().getGenericGridMoveUpItem().setText("Add Graphic Assessment Based on");
		form.getContextMenus().getGenericGridUpdateItem().setText("Update Graphic Assessment");
		form.getContextMenus().getGenericGridViewItem().setText("View Graphic Assessment");*/	
	}

	private void enableContextMenu()
	{
		form.getContextMenus().hideAllGraphicAssessmentMenuItems();

		boolean rowSelected = form.grdDetails().getSelectedRowIndex() >= 0;
		form.getContextMenus().getGraphicAssessmentAddAnnotatedImageItem().setVisible(true);
		form.getContextMenus().getGraphicAssessmentAddAnnotatedImageWithQuestionsItem().setVisible(true);
		
		//graphical assessment with stages
		form.getContextMenus().getGraphicAssessmentAddGraphicalAssessmentWithStagesItem().setVisible(true);
		//pain assessment
		form.getContextMenus().getGraphicAssessmentAddGraphicaAssessmentWithStagesItem().setVisible(true);
		//skin assessment
		form.getContextMenus().getGraphicAssessmentAddSkinAssessmentItem().setVisible(true);
		//Medical Noting assessment
		form.getContextMenus().getGraphicAssessmentAddMedicalNotingItem().setVisible(true);
		
		form.getContextMenus().getGraphicAssessmentUpdateGraphicAssessmentItem().setVisible(rowSelected);
		form.getContextMenus().getGraphicAssessmentViewGraphicAssessmentItem().setVisible(rowSelected);
		form.getContextMenus().getGraphicAssessmentAddGraphicAssessmentBasedOnItem().setVisible(rowSelected);
		form.getContextMenus().getGraphicAssessmentPreviewItem().setVisible(rowSelected);
		if(rowSelected)
			form.getContextMenus().getGraphicAssessmentAddGraphicAssessmentBasedOnItem().setText(getCopyAssessmentText());
	}

	private String getCopyAssessmentText()
	{
		String textMenu = "Add Graphical Assessment";
		
		GraphicAssessmentShortVo voGraphicAssessmentShort = form.grdDetails().getValue();
		if(voGraphicAssessmentShort != null)
		{
			if(voGraphicAssessmentShort.getAssessmentType().equals(UserDefinedAssessmentType.ANNOTATEDIMAGEWITHQUESTIONS))
				textMenu += " with Questions";
			textMenu += " based on '" + voGraphicAssessmentShort.getName() + "'"; 
		}
		
		return textMenu;
	}

	private void updateGraphicAssessement()
	{
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(form.grdDetails().getValue());
		form.getGlobalContext().Core.setGraphicAssessmentFormMode(FormMode.EDIT);
		engine.open(form.getForms().Assessment.GraphicAssessmentNew);
	}

	private void addAnnotatedImage()
	{
		GraphicAssessmentShortVo voGraphicAssessment = new GraphicAssessmentShortVo();
		voGraphicAssessment.setName(form.txtName().getValue());
		voGraphicAssessment.setActiveStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		voGraphicAssessment.setAssessmentType(UserDefinedAssessmentType.ANNOTATEDIMAGE);
		
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(voGraphicAssessment);
		form.getGlobalContext().Core.setGraphicAssessmentFormMode(FormMode.EDIT);
		clearGraphicAssessmentSearchFilter();
		engine.open(form.getForms().Assessment.GraphicAssessmentNew);
	}
	
	private void addAnnotatedImageWithStages()
	{
		GraphicAssessmentShortVo voGraphicAssessment = new GraphicAssessmentShortVo();
		voGraphicAssessment.setName(form.txtName().getValue());
		voGraphicAssessment.setActiveStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		voGraphicAssessment.setAssessmentType(UserDefinedAssessmentType.ANNOTATEDIMAGEWITHREVIEWS);
		
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(voGraphicAssessment);
		form.getGlobalContext().Core.setGraphicAssessmentFormMode(FormMode.EDIT);
		clearGraphicAssessmentSearchFilter();
		engine.open(form.getForms().Assessment.GraphicAssessmentNew);
	}
	
	private void addSkinAssessment()
	{
		GraphicAssessmentShortVo voGraphicAssessment = new GraphicAssessmentShortVo();
		voGraphicAssessment.setName(form.txtName().getValue());
		voGraphicAssessment.setActiveStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		voGraphicAssessment.setAssessmentType(UserDefinedAssessmentType.SKINASSESSMENT);
		
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(voGraphicAssessment);
		form.getGlobalContext().Core.setGraphicAssessmentFormMode(FormMode.EDIT);
		clearGraphicAssessmentSearchFilter();
		engine.open(form.getForms().Assessment.GraphicAssessmentNew);
	}

	private void addMedicalNotingAssessment()
	{
		GraphicAssessmentShortVo voGraphicAssessment = new GraphicAssessmentShortVo();
		voGraphicAssessment.setName(form.txtName().getValue());
		voGraphicAssessment.setActiveStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		voGraphicAssessment.setAssessmentType(UserDefinedAssessmentType.MEDICALNOTING);
		
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(voGraphicAssessment);
		form.getGlobalContext().Core.setGraphicAssessmentFormMode(FormMode.EDIT);
		clearGraphicAssessmentSearchFilter();
		engine.open(form.getForms().Assessment.GraphicAssessmentNew);
	}
	
	private void addPainAssessment()
	{
		/*
		GraphicAssessmentShortVo voGraphicAssessment = new GraphicAssessmentShortVo();
		voGraphicAssessment.setName(form.txtName().getValue());
		voGraphicAssessment.setActiveStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		voGraphicAssessment.setAssessmentType(UserDefinedAssessmentType.PAINASSESSMENT);
		
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(voGraphicAssessment);
		form.getGlobalContext().Core.setGraphicAssessmentFormMode(FormMode.EDIT);
		clearGraphicAssessmentSearchFilter();
		engine.open(form.getForms().Assessment.GraphicAssessmentNew);
		*/
		
		
		GraphicAssessmentShortVo voGraphicAssessment = new GraphicAssessmentShortVo();
		voGraphicAssessment.setName(form.txtName().getValue());
		voGraphicAssessment.setActiveStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		voGraphicAssessment.setAssessmentType(UserDefinedAssessmentType.PAINASSESSMENT);
		
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(voGraphicAssessment);
		form.getGlobalContext().Core.setGraphicAssessmentFormMode(FormMode.EDIT);
		clearGraphicAssessmentSearchFilter();
		engine.open(form.getForms().Assessment.GraphicAssessmentNew);			
		
	}
	
	private void addAnnotatedImageWithQuestions()
	{
		GraphicAssessmentShortVo voGraphicAssessment = new GraphicAssessmentShortVo();
		voGraphicAssessment.setName(form.txtName().getValue());
		voGraphicAssessment.setActiveStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		voGraphicAssessment.setAssessmentType(UserDefinedAssessmentType.ANNOTATEDIMAGEWITHQUESTIONS);
		
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(voGraphicAssessment);
		form.getGlobalContext().Core.setGraphicAssessmentFormMode(FormMode.EDIT);
		clearGraphicAssessmentSearchFilter();
		engine.open(form.getForms().Assessment.GraphicAssessmentNew);			
	}
	
	private void viewGraphicAssessment()
	{
		form.getGlobalContext().Core.setGraphicAssessmentShortVo(form.grdDetails().getValue());
		form.getGlobalContext().Core.setGraphicAssessmentFormMode(FormMode.VIEW);
		engine.open(form.getForms().Assessment.GraphicAssessmentNew);
	}

	private void doSearch()
	{
		doSearch(false);
	}
	private void doSearch(boolean checkMandatory)
	{
		String name = form.txtName().getValue();
		PreActiveActiveInactiveStatus status = form.cmbStatus().getValue();
		
		if (name != null)
			name = name.trim();
		if(checkMandatory)
		{
			if ((name == null || name.length() == 0) && status == null)
			{
				engine.showMessage("Please enter a name");
				form.txtName().setFocus();
				return;
			}
		}

		GroupCriteriaEnumeration groupCriteria = form.GroupCriteria().getValue();
		if (name != null && groupCriteria != null)
		{
			if (groupCriteria.equals(GroupCriteriaEnumeration.rdoBegins))
			{
				name = name + "%";
			}
			if (groupCriteria.equals(GroupCriteriaEnumeration.rdoContains))
			{
				name = "%" + name + "%";
			}
		}
		
		GraphicAssessmentShortVoCollection voColl = domain.listAssessments(name, status, getUserDefinedTypes(form.cmbType().getValue()));
		if(voColl == null || voColl.size() == 0)
		{
			engine.showMessage("No Graphic Assessments found for the Search Criteria Provided");
			return;
		}
		displayCollection(voColl);
	}

	private void displayCollection(GraphicAssessmentShortVoCollection voColl)
	{
		if (voColl != null)
		{
			GraphicAssessmentShortVo voGraphicAssessmentShort = null;
			for (int i = 0; i < voColl.size(); i++)
			{
				voGraphicAssessmentShort = voColl.get(i);
				displayRow(form.grdDetails().getRows().newRow(), voGraphicAssessmentShort);
			}
		}
	}

	private void displayRow(grdDetailsRow row, GraphicAssessmentShortVo voGraphicAssessmentShort)
	{
		row.setColumnName(voGraphicAssessmentShort.getName());
		row.setColumnStatus(voGraphicAssessmentShort.getActiveStatusIsNotNull() ? voGraphicAssessmentShort.getActiveStatus().toString() : "");
		row.setColumnType(voGraphicAssessmentShort.getAssessmentTypeIsNotNull() ? voGraphicAssessmentShort.getAssessmentType().toString() : "");
		row.setValue(voGraphicAssessmentShort);
	}
	
	private void clearGraphicAssessmentSearchFilter()
	{
		form.getGlobalContext().Core.setGraphicAssessmentSearchFilter(null);
	}
	private void setGraphicAssessmentSearchFilter()
	{
		GraphicAssessmentFilterVo voGraphicAssFilter = new GraphicAssessmentFilterVo();
		voGraphicAssFilter.setName(form.txtName().getValue());
		voGraphicAssFilter.setStatus(form.cmbStatus().getValue());
		voGraphicAssFilter.setType(form.cmbType().getValue());
		GroupCriteriaEnumeration criteria = form.GroupCriteria().getValue();
		voGraphicAssFilter.setBeginsWith(new Boolean(criteria.equals(GroupCriteriaEnumeration.rdoBegins)));
		voGraphicAssFilter.setContains(new Boolean(criteria.equals(GroupCriteriaEnumeration.rdoContains)));
		voGraphicAssFilter.setExactText(new Boolean(criteria.equals(GroupCriteriaEnumeration.rdoExactText)));
		form.getGlobalContext().Core.setGraphicAssessmentSearchFilter(voGraphicAssFilter);
	}
	private void addNewGraphicAssessmentBasedOn()
	{
		form.getGlobalContext().Core.setGraphicAssessmentCopy(new Boolean(true));
		updateGraphicAssessement();
	}

	private void loadTypeCombo()
	{
		form.cmbType().newRow(UserDefinedAssessmentType.ANNOTATEDIMAGE, UserDefinedAssessmentType.ANNOTATEDIMAGE.toString());
		form.cmbType().newRow(UserDefinedAssessmentType.ANNOTATEDIMAGEWITHQUESTIONS, UserDefinedAssessmentType.ANNOTATEDIMAGEWITHQUESTIONS.toString());
		form.cmbType().newRow(UserDefinedAssessmentType.ANNOTATEDIMAGEWITHREVIEWS, UserDefinedAssessmentType.ANNOTATEDIMAGEWITHREVIEWS.toString());
		form.cmbType().newRow(UserDefinedAssessmentType.SKINASSESSMENT, UserDefinedAssessmentType.SKINASSESSMENT.toString());
		form.cmbType().newRow(UserDefinedAssessmentType.PAINASSESSMENT, UserDefinedAssessmentType.PAINASSESSMENT.toString());
		form.cmbType().newRow(UserDefinedAssessmentType.MEDICALNOTING, UserDefinedAssessmentType.MEDICALNOTING.toString());
	}
	
	private UserDefinedAssessmentTypeCollection getUserDefinedTypes(UserDefinedAssessmentType type)
	{
		UserDefinedAssessmentTypeCollection assTypeColl = new UserDefinedAssessmentTypeCollection();
		if(type != null)
		{
			assTypeColl.add(type);
			
			UserDefinedAssessmentTypeCollection udfColl = LookupHelper.getUserDefinedAssessmentType(domain.getLookupService());
			
			for (int i = 0; i < udfColl.size(); i++)
			{
				UserDefinedAssessmentType lkpType = udfColl.get(i);
				if(type.equals(lkpType))
				{
					//Add the children (if any) to the collection
					for (int j = 0; lkpType.getChildInstances() != null && j < lkpType.getChildInstances().size(); j++)
					{
						assTypeColl.add((UserDefinedAssessmentType)lkpType.getChildInstances().get(j));
					}
				}
			}
		}
	
		return assTypeColl;
	}
	
	private void previewGraphicAssessment()
	{
		form.getGlobalContext().Assessment.setIsDynamicAssessmentOpenedForPreview(Boolean.TRUE);
		engine.open(form.getForms().Assessment.DynamicAssessmentsDialog, new Object[] {form.grdDetails().getValue()});
	}
	// ---------- End Private Methods ---------------
}
