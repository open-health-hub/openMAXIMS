//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2434.20780)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.graphicassessmentcomponent;

import ims.assessment.helper.UserAssessmentInstHelper;
import ims.assessment.vo.FindingStageQuestionsVo;
import ims.assessment.vo.GraphicAssessmentFindingQuestionVoCollection;
import ims.assessment.vo.GraphicAssessmentFindingVo;
import ims.assessment.vo.GraphicAssessmentFindingVoCollection;
import ims.assessment.vo.GraphicAssessmentStageVo;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentAnswerVo;
import ims.assessment.vo.PatientAssessmentAnswerVoCollection;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingQuestionAnswerVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingQuestionAnswerVoCollection;
import ims.assessment.vo.PatientGraphicAssessmentFindingVo;
import ims.assessment.vo.PatientGraphicAssessmentFindingVoCollection;
import ims.assessment.vo.PatientGraphicAssessmentVo;
import ims.assessment.vo.PatientGraphicAssessmentVoCollection;
import ims.assessment.vo.PatientGraphicalAssessmentStageVo;
import ims.assessment.vo.PatientGraphicalAssessmentStageVoCollection;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.DrawingGraphicFindingVo;
import ims.core.vo.DrawingGraphicImageVo;
import ims.core.vo.GraphicAreaVo;
import ims.core.vo.GraphicGroupVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.framework.controls.DrawingControlArea;
import ims.framework.controls.DrawingControlAreaCollection;
import ims.framework.controls.DrawingControlGroup;
import ims.framework.controls.DrawingControlShape;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private int	savedTargetID	= -1;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialiseScreen();
	}
	private void initialiseScreen()
	{
		initDrawingControl();		
	}
	private void initDrawingControl()
	{
		form.drawingBodyChart().clearBrushes();
		form.drawingBodyChart().clearShapes();

		form.drawingBodyChart().setImage(form.getImages().GeneralMedical.Blank);
		form.drawingBodyChart().addBrush(-1, "", Color.White);
		form.drawingBodyChart().setAreas(new DrawingControlGroup(-1, " "));
	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (result.equals(DialogResult.OK))
		{
			if (formName.equals(form.getForms().Assessment.GraphicAssessmentInstantiationFinding))
			{
				PatientAssessmentDataVo voPatAssessmentData = form.getLocalContext().getCurrentPatientAssessmentData();
				PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = form.getGlobalContext().Core.getPatientGraphicAssessmentFinding();
				DrawingGraphicImageVo voDrawingGraphicImage = getCurrentImage();
				if (voPatAssessmentData != null && voPatAssessmentData.getGraphicFindingsIsNotNull())
				{
					for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
					{
						//Check to be in the context of the same Patient Graphic Assessment
						PatientGraphicAssessmentVo voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
						if (voPatientGraphicAssessment.getGraphicImageIsNotNull() && voPatientGraphicAssessment.getGraphicImage().equals(voDrawingGraphicImage))
						{
							int index = voPatientGraphicAssessment.getPatientGraphicFinding().indexOf(voPatientGraphicAssessmentFinding);
							if (index >= 0)
								voPatAssessmentData.getGraphicFindings().get(i).getPatientGraphicFinding().set(index, voPatientGraphicAssessmentFinding);
							else
								voPatAssessmentData.getGraphicFindings().get(i).getPatientGraphicFinding().add(voPatientGraphicAssessmentFinding);

							form.getLocalContext().setCurrentPatientAssessmentData(voPatAssessmentData);
							break;
						}
					}
					
					if(voPatientGraphicAssessmentFinding.getStageIsNotNull())
					{
						PatientGraphicalAssessmentStageVo annotatedPGAStage = null;
						PatientGraphicalAssessmentStageVo equivalentPGAStage = null;
						for (int i = 0; i < voPatientGraphicAssessmentFinding.getStage().size(); i++)
						{
							if(voPatientGraphicAssessmentFinding.getStage().get(i).getStage().getAssessmentStage().getIsAnnotatedIsNotNull() 
									&& voPatientGraphicAssessmentFinding.getStage().get(i).getStage().getAssessmentStage().getIsAnnotated().booleanValue() == true)
							{
								annotatedPGAStage = voPatientGraphicAssessmentFinding.getStage().get(i);
								break;
							}
						}
						
						if(annotatedPGAStage != null)
						{
							GraphicAssessmentStageVo equivalentStage = annotatedPGAStage.getStage().getAssessmentStage().getEquivalentStage();
							
							for (int i = 0; i < voPatientGraphicAssessmentFinding.getStage().size(); i++)
							{
								if(voPatientGraphicAssessmentFinding.getStage().get(i).getStage().getAssessmentStage().equals(equivalentStage))
								{
									equivalentPGAStage = voPatientGraphicAssessmentFinding.getStage().get(i);
									break;
								}
							}
							
							if(equivalentPGAStage == null && annotatedPGAStage.getStage().getAssessmentStage().getEquivalentStageIsNotNull())
							{
								//we have to create a PatientGraphicalAssessmentStageVo record for the equivalent stage
								equivalentPGAStage = new PatientGraphicalAssessmentStageVo();
								
								equivalentPGAStage.setStage(getEquivalentStage());
								
								if(equivalentPGAStage.getStageIsNotNull())
								{
									equivalentPGAStage.setFindingQuestion(getFindingQuestion(voPatientGraphicAssessmentFinding.getGraphicFinding().getID_DrawingGraphicFinding().intValue(), equivalentPGAStage.getStage().getAssessmentStage()));
								}
								
								equivalentPGAStage.setAuthoringInformation(new AuthoringInformationVo());
								if(voPatientGraphicAssessmentFinding.getAuthoringInformationIsNotNull())
								{
									equivalentPGAStage.getAuthoringInformation().setAuthoringDateTime(voPatientGraphicAssessmentFinding.getAuthoringInformation().getAuthoringDateTime());
									equivalentPGAStage.getAuthoringInformation().setAuthoringHcp(voPatientGraphicAssessmentFinding.getAuthoringInformation().getAuthoringHcp());
								}
								else
								{
									equivalentPGAStage.getAuthoringInformation().setAuthoringDateTime(new DateTime());
									equivalentPGAStage.getAuthoringInformation().setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
								}
								
								
								voPatientGraphicAssessmentFinding.getStage().add(equivalentPGAStage);
								
								if(equivalentPGAStage.getFindingQuestionIsNotNull())
								{
									for (int i = 0; i < equivalentPGAStage.getFindingQuestion().size(); i++)
									{
										PatientGraphicAssessmentFindingQuestionAnswerVo pgaFindingQuestionAnswerVo = equivalentPGAStage.getFindingQuestion().get(i);
										
										if(pgaFindingQuestionAnswerVo.getGraphicFindingQuestionIsNotNull())
										{
											if(pgaFindingQuestionAnswerVo.getGraphicFindingQuestion().getQuestionIsNotNull())
											{
												//try to match the questions against annotated stage and copy answers
												if(annotatedPGAStage.getFindingQuestionIsNotNull())
												{
													for (int j = 0; j < annotatedPGAStage.getFindingQuestion().size(); j++)
													{
														PatientGraphicAssessmentFindingQuestionAnswerVo pgaAnnotatedFindingQuestionAnswerVo = annotatedPGAStage.getFindingQuestion().get(j);
														
														if(annotatedPGAStage.getFindingQuestion().get(j).getGraphicFindingQuestionIsNotNull() 
																&& annotatedPGAStage.getFindingQuestion().get(j).getGraphicFindingQuestion().getQuestion().equals(pgaFindingQuestionAnswerVo.getGraphicFindingQuestion().getQuestion()))
														{
															pgaFindingQuestionAnswerVo.setIsAnswered(pgaAnnotatedFindingQuestionAnswerVo.getIsAnswered());
															pgaFindingQuestionAnswerVo.setIsMandatory(pgaAnnotatedFindingQuestionAnswerVo.getIsMandatory());
															
															if(pgaFindingQuestionAnswerVo.getPatientAnswersIsNotNull())
																pgaFindingQuestionAnswerVo.getPatientAnswers().clear();
															else
																pgaFindingQuestionAnswerVo.setPatientAnswers(new PatientAssessmentAnswerVoCollection());
															
															if(pgaAnnotatedFindingQuestionAnswerVo.getPatientAnswersIsNotNull())
															{
																for (int k = 0; k < pgaAnnotatedFindingQuestionAnswerVo.getPatientAnswers().size(); k++)
																{
																	PatientAssessmentAnswerVo paaVo = clonePatientAssessmentAnswerVo(pgaAnnotatedFindingQuestionAnswerVo.getPatientAnswers().get(k));
																	
																	pgaFindingQuestionAnswerVo.getPatientAnswers().add(paaVo);
																}
																
															}
														}
													}
												}
											}
										}
									}
								}								
							}
						}
					}
				}
				
				if(voPatientGraphicAssessmentFinding.getGraphicFindingIsNotNull() && voPatientGraphicAssessmentFinding.getGraphicFinding().getID_DrawingGraphicFindingIsNotNull())
				{
					String tooltip = UserAssessmentInstHelper.getGraphicAssessmentFindingTooltip(voPatientGraphicAssessmentFinding);
					
					for (int i = 0; i < form.drawingBodyChart().getShapes().size(); i++)
					{
						Object shapeObj = form.drawingBodyChart().getShapes().get(i);
						if (shapeObj instanceof DrawingControlShape)
						{
							if (((DrawingControlShape) shapeObj).getBrushID() == voPatientGraphicAssessmentFinding.getGraphicFinding().getID_DrawingGraphicFinding().intValue())
							{
								((DrawingControlShape) shapeObj).setTooltip(tooltip);
								break;
							}
						}
					}
				}
			}
		}
	}
	
	PatientAssessmentAnswerVo clonePatientAssessmentAnswerVo(PatientAssessmentAnswerVo ref)
	{
		PatientAssessmentAnswerVo retVal = (PatientAssessmentAnswerVo) ref.clone();
		
		retVal.setID_PatientAssessmentAnswer(null);
		
		if(retVal.getAnswerDetailsIsNotNull())
		{
			for (int i = 0; i < retVal.getAnswerDetails().size(); i++)
			{
				retVal.getAnswerDetails().get(i).setID_PatientAnswerDetails(null);
			}
		}
		
		return retVal;
	}
	private DrawingGraphicImageVo getCurrentImage()
	{
		PatientAssessmentVo patientAssessment = form.getLocalContext().getPatientAssessment();
		
		if(patientAssessment == null || patientAssessment.getAssessmentData() == null || patientAssessment.getAssessmentData().getGraphicFindings() == null || patientAssessment.getAssessmentData().getGraphicFindings().size() == 0)
			return null;
		
		return patientAssessment.getAssessmentData().getGraphicFindings().get(0).getGraphicImage();
	}
	protected void onFormModeChanged()
	{
		// TODO Add your code here.
	}
	protected void onDrawingBodyChartEdited(int index) throws ims.framework.exceptions.PresentationLogicException
	{
		DrawingControlShape shape = getEditedShape(index);

		if (shape == null)
			throw new CodingRuntimeException("Cannot edit a null shape");
		
		drawingImageNote(shape, false);
		
	}
	private DrawingControlShape getEditedShape(int index)
	{
		for (int i = 0; i < form.drawingBodyChart().getShapes().size(); i++)
		{
			Object shapeObj = form.drawingBodyChart().getShapes().get(i);
			if (shapeObj instanceof DrawingControlShape)
			{
				if (((DrawingControlShape) shapeObj).getIndex() == index)
					return ((DrawingControlShape) shapeObj);
			}
		}

		return null;
	}
	protected void onDrawingBodyChartRemoved(int index) throws ims.framework.exceptions.PresentationLogicException
	{
		removeGraphicFinding(index);
	}
	
	private void removeGraphicFinding(int index)
	{
		PatientAssessmentDataVo voPatAssessmentData = form.getLocalContext().getCurrentPatientAssessmentData();
		DrawingGraphicImageVo voDrawingGraphicImage = getCurrentImage();

		if (voDrawingGraphicImage == null)
		{
			engine.showMessage("Please select an Image");
			return;
		}

		if (voPatAssessmentData != null && voPatAssessmentData.getGraphicFindingsIsNotNull())
		{
			for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
			{
				//Check to be in the context of the same Patient Graphic Assessment
				PatientGraphicAssessmentVo voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
				if (voPatientGraphicAssessment.getGraphicImage().equals(voDrawingGraphicImage))
				{
					for (int j = 0; j < voPatientGraphicAssessment.getPatientGraphicFinding().size(); j++)
					{
						Integer patGraphAssFindId = voPatientGraphicAssessment.getPatientGraphicFinding().get(j).getDrawingId();
						if (patGraphAssFindId != null && patGraphAssFindId.intValue() == index)
						{
							//Remove it from vo
							voPatientGraphicAssessment.getPatientGraphicFinding().remove(j);
							voPatAssessmentData.getGraphicFindings().set(i, voPatientGraphicAssessment);
							form.getLocalContext().setCurrentPatientAssessmentData(voPatAssessmentData);
							//wdev-10823
							PatientAssessmentVo tempvo = form.getLocalContext().getPatientAssessment();
							if(tempvo != null)
							{
								tempvo.setAssessmentData(voPatAssessmentData);
								form.getLocalContext().setPatientAssessment(tempvo);
							}

							//----------
							break;
						}
					}
					break;
				}
			}
		}
	}
	protected void onDrawingBodyChartNote(ims.framework.controls.DrawingControlShape shape) throws ims.framework.exceptions.PresentationLogicException
	{
		drawingImageNote(shape, true);
	}
	private void drawingImageNote(DrawingControlShape shape, boolean popupDialog)
	{
		PatientAssessmentDataVo voPatAssessmentData = form.getLocalContext().getPatientAssessment().getAssessmentData();
		PatientGraphicAssessmentVo voPatientGraphicAssessment = null;
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = null;
		DrawingGraphicImageVo voPatientGraphicAssessmentVo = null;

		if(voPatAssessmentData.getGraphicFindingsIsNotNull() && voPatAssessmentData.getGraphicFindings().size() > 0)
			voPatientGraphicAssessmentVo = voPatAssessmentData.getGraphicFindings().get(0).getGraphicImage(); 
		
		if (voPatientGraphicAssessmentVo == null)
		{
			engine.showMessage("There is no Image associated with the Graphic assessment !");
			return;
		}

		if (voPatAssessmentData == null)
			return;

		boolean updateDraw = false;
		for (int i = 0; i < voPatAssessmentData.getGraphicFindings().size(); i++)
		{
			//Check to be in the context of the same Patient Graphic Assessment
			if (voPatAssessmentData.getGraphicFindings().get(i).getGraphicImageIsNotNull() && voPatAssessmentData.getGraphicFindings().get(i).getGraphicImage().equals(voPatientGraphicAssessmentVo))
			{
				voPatientGraphicAssessment = voPatAssessmentData.getGraphicFindings().get(i);
				
				if(voPatientGraphicAssessment.getPatientGraphicFindingIsNotNull())
				{
					for (int j = 0; j < voPatientGraphicAssessment.getPatientGraphicFinding().size(); j++)
					{
						Integer patGraphAssFindId = voPatientGraphicAssessment.getPatientGraphicFinding().get(j).getDrawingId();
						if (patGraphAssFindId != null && patGraphAssFindId.intValue() == shape.getIndex())
						{
							if (shape.getTargetID() == savedTargetID)
							{
								voPatientGraphicAssessmentFinding = voPatientGraphicAssessment.getPatientGraphicFinding().get(j);
								voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
								voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
								//Set it back to the collection
								voPatientGraphicAssessment.getPatientGraphicFinding().set(j, voPatientGraphicAssessmentFinding);
							}
							else
							{
								voPatientGraphicAssessmentFinding = voPatientGraphicAssessment.getPatientGraphicFinding().get(j);
								voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
								voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
								//Set it back to the collection
								voPatientGraphicAssessment.getPatientGraphicFinding().set(j, voPatientGraphicAssessmentFinding);
								updateDraw = true;
								break;
							}
						}
					}
	
					//Set the record back to the collection
					voPatAssessmentData.getGraphicFindings().set(i, voPatientGraphicAssessment);
					break;
				}
			}
		}

		//New Drawing 
		if (updateDraw == false)
		{
			if (voPatAssessmentData.getGraphicFindings() == null)
				voPatAssessmentData.setGraphicFindings(new PatientGraphicAssessmentVoCollection());

			//Create new PatientGraphicAssessmentVo
			if (voPatientGraphicAssessment == null)
			{
				voPatientGraphicAssessment = new PatientGraphicAssessmentVo();
				voPatientGraphicAssessment.setGraphicImage(voPatientGraphicAssessmentVo);
				voPatientGraphicAssessment.setPatientGraphicFinding(new PatientGraphicAssessmentFindingVoCollection());
			}

			if (voPatientGraphicAssessment.getPatientGraphicFinding() == null)
				voPatientGraphicAssessment.setPatientGraphicFinding(new PatientGraphicAssessmentFindingVoCollection());

			voPatientGraphicAssessmentFinding = getNewGraphicFindingAssessment(shape);
			voPatientGraphicAssessment.getPatientGraphicFinding().add(voPatientGraphicAssessmentFinding);
			voPatAssessmentData.getGraphicFindings().add(voPatientGraphicAssessment);
		}

		if (voPatientGraphicAssessmentFinding != null)
		{
			form.getGlobalContext().Core.setPatientGraphicAssessmentFinding(voPatientGraphicAssessmentFinding);
			form.getLocalContext().setCurrentPatientAssessmentData(voPatAssessmentData);
			PatientAssessmentVo voPatAssessment = form.getLocalContext().getPatientAssessment();
			voPatAssessment.setAssessmentData(voPatAssessmentData);
			form.getGlobalContext().Core.setPatientAssessmentFull(voPatAssessment);
			if(popupDialog)
				form.getGlobalContext().Assessment.setAutoSubmit(null);
			else
				form.getGlobalContext().Assessment.setAutoSubmit(Boolean.TRUE);
				
			engine.open(form.getForms().Assessment.GraphicAssessmentInstantiationFinding);
		}
	}
	private PatientGraphicAssessmentFindingVo getNewGraphicFindingAssessment(DrawingControlShape shape)
	{
		PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = new PatientGraphicAssessmentFindingVo();
		voPatientGraphicAssessmentFinding.setDrawingId(new Integer(shape.getIndex()));
		voPatientGraphicAssessmentFinding.setAreaDrawn(shape.getVML());
		voPatientGraphicAssessmentFinding.setAreaName(getAreaName(shape.getTargetID()));
		//TODO to implement 1:N ?
		voPatientGraphicAssessmentFinding.setStage(new PatientGraphicalAssessmentStageVoCollection());
		voPatientGraphicAssessmentFinding.getStage().add(new PatientGraphicalAssessmentStageVo());
		voPatientGraphicAssessmentFinding.getStage().get(0).setStage(getAnnotatedStage());
		voPatientGraphicAssessmentFinding.getStage().get(0).setFindingQuestion(getFindingQuestion(shape.getBrushID(), voPatientGraphicAssessmentFinding.getStage().get(0).getStage().getAssessmentStage()));

		voPatientGraphicAssessmentFinding.setGraphicFinding(getGraphicFinding(shape.getBrushID()));
		return voPatientGraphicAssessmentFinding;
	}
	
	private FindingStageQuestionsVo getAnnotatedStage()
	{
		PatientAssessmentVo patientAssessmentVo = form.getLocalContext().getPatientAssessment();
		
		if(patientAssessmentVo == null || patientAssessmentVo.getAssessmentData() == null || patientAssessmentVo.getAssessmentData().getGraphic() == null)
			return null;
		
		GraphicAssessmentVo graphicAssessment = patientAssessmentVo.getAssessmentData().getGraphic();
		
		if(graphicAssessment.getFindingsAndQuestionsIsNotNull())
		{
			for (int i = 0; i < graphicAssessment.getFindingsAndQuestions().size(); i++)
			{
				GraphicAssessmentFindingVo gaf = graphicAssessment.getFindingsAndQuestions().get(i);
				
				if(gaf.getFindingStageIsNotNull())
				{
					for (int j = 0; j < gaf.getFindingStage().size(); j++)
					{
						if(gaf.getFindingStage().get(j).getAssessmentStageIsNotNull() && gaf.getFindingStage().get(j).getAssessmentStage().getIsAnnotatedIsNotNull() && gaf.getFindingStage().get(j).getAssessmentStage().getIsAnnotated().booleanValue())
							return gaf.getFindingStage().get(j);
					}
				}
			}
		}
		
		return null;
	}
	
	private FindingStageQuestionsVo getEquivalentStage()
	{
		PatientAssessmentVo patientAssessmentVo = form.getLocalContext().getPatientAssessment();
		
		if(patientAssessmentVo == null || patientAssessmentVo.getAssessmentData() == null || patientAssessmentVo.getAssessmentData().getGraphic() == null)
			return null;
		
		GraphicAssessmentVo graphicAssessment = patientAssessmentVo.getAssessmentData().getGraphic();
		
		if(graphicAssessment.getFindingsAndQuestionsIsNotNull())
		{
			GraphicAssessmentStageVo annotatedStage = null;
			for (int i = 0; i < graphicAssessment.getFindingsAndQuestions().size(); i++)
			{
				GraphicAssessmentFindingVo gaf = graphicAssessment.getFindingsAndQuestions().get(i);
				
				if(gaf.getFindingStageIsNotNull())
				{
					for (int j = 0; j < gaf.getFindingStage().size(); j++)
					{
						if(gaf.getFindingStage().get(j).getAssessmentStageIsNotNull() && gaf.getFindingStage().get(j).getAssessmentStage().getIsAnnotatedIsNotNull() && gaf.getFindingStage().get(j).getAssessmentStage().getIsAnnotated().booleanValue())
						{
							annotatedStage = gaf.getFindingStage().get(j).getAssessmentStage();
							break;
						}
					}
				}
				
				if(annotatedStage != null)
					break;
			}
			
			if(annotatedStage != null) 
			{
				for (int i = 0; i < graphicAssessment.getFindingsAndQuestions().size(); i++)
				{
					GraphicAssessmentFindingVo gaf = graphicAssessment.getFindingsAndQuestions().get(i);
					
					if(gaf.getFindingStageIsNotNull())
					{
						for (int j = 0; j < gaf.getFindingStage().size(); j++)
						{
							if(gaf.getFindingStage().get(j).getAssessmentStageIsNotNull() 
									&& gaf.getFindingStage().get(j).getAssessmentStage().equals(annotatedStage.getEquivalentStage()))
							{
								return gaf.getFindingStage().get(j);
							}
						}
					}
				}
			}
		}
		
		return null;
	}
	
	private DrawingGraphicFindingVo getGraphicFinding(int brushId)
	{
		PatientAssessmentVo patientAssessmentVo = form.getLocalContext().getPatientAssessment();
		
		if(patientAssessmentVo == null || patientAssessmentVo.getAssessmentData() == null)
			return null;
		
		PatientAssessmentDataVo voPatAssessmentData = patientAssessmentVo.getAssessmentData();
		
		GraphicAssessmentFindingVoCollection findingColl = voPatAssessmentData.getGraphic().getFindingsAndQuestions();

		if (findingColl != null)
		{
			for (int i = 0; i < findingColl.size(); i++)
			{
				if (findingColl.get(i).getFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFinding().intValue() == brushId)
				{
					return findingColl.get(i).getFinding();
				}
			}
		}

		return null;
	}
	
	private PatientGraphicAssessmentFindingQuestionAnswerVoCollection getFindingQuestion(int brushId, GraphicAssessmentStageVo stageVo)
	{
		PatientAssessmentDataVo voPatAssessmentData = form.getLocalContext().getPatientAssessment().getAssessmentData();

		GraphicAssessmentFindingVoCollection findingColl = voPatAssessmentData.getGraphic().getFindingsAndQuestions();
		GraphicAssessmentFindingQuestionVoCollection questions = null;
		PatientGraphicAssessmentFindingQuestionAnswerVoCollection findingQuestions = new PatientGraphicAssessmentFindingQuestionAnswerVoCollection();
		if (findingColl != null)
		{
			for (int i = 0; i < findingColl.size(); i++)
			{
				if (findingColl.get(i).getFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFindingIsNotNull() && findingColl.get(i).getFinding().getID_DrawingGraphicFinding().intValue() == brushId)
				{
					//TODO - this works for Graphical Assessment and Graphical Assessment with questions where we have
					// 1:1 relationship between GraphicAssessmentFinding and FindingStageQuestions
					// need to review for the third type of assessment
					if(findingColl.get(i).getFindingStageIsNotNull() && findingColl.get(i).getFindingStage().size() > 0)
					{
						for (int j = 0; j < findingColl.get(i).getFindingStage().size(); j++)
						{
							if(findingColl.get(i).getFindingStage().get(j).getAssessmentStageIsNotNull() && findingColl.get(i).getFindingStage().get(j).getAssessmentStage().equals(stageVo))
							{
								questions = findingColl.get(i).getFindingStage().get(j).getAssociatedQuestions();
								break;
							}
						}
					}
					
				}
			}
		}

		if (questions != null)
		{
			for (int i = 0; i < questions.size(); i++)
			{
				ims.assessment.vo.GraphicAssessmentFindingQuestionVo voFindingQuestion = questions.get(i);
				PreActiveActiveInactiveStatus findingStatus = voFindingQuestion.getActiveStatus();
				//WDEV-1211 - Go back to configurtation for every new findings 
				if (findingStatus != null && findingStatus.equals(PreActiveActiveInactiveStatus.ACTIVE))
				{
					PatientGraphicAssessmentFindingQuestionAnswerVo voPGAFQuestion = new PatientGraphicAssessmentFindingQuestionAnswerVo();
					voPGAFQuestion.setGraphicFindingQuestion(voFindingQuestion);
					voPGAFQuestion.setIsAnswered(new Boolean(false));
					voPGAFQuestion.setIsMandatory(voFindingQuestion.getIsMandatory());
					findingQuestions.add(voPGAFQuestion);
				}
			}
		}

		return findingQuestions;
	}

	private String getAreaName(int targetId)
	{
		String areaName = form.drawingBodyChart().getGroupOrAreaName(targetId);
		if (areaName == null || areaName.equals(""))
		{
			DrawingControlGroup areaGroup = form.drawingBodyChart().getAreas();

			if (areaGroup != null)
			{
				DrawingControlAreaCollection coll = areaGroup.getAllAreas();
				for (int i = 0; i < coll.size(); i++)
				{
					if (coll.get(i).getID() == targetId)
					{
						areaName = coll.get(i).getName();
						break;
					}
				}
			}
		}

		return areaName;
	}
	public void setPatientAssessment(PatientAssessmentVo patientAssessment)
	{
		if(patientAssessment == null 
				|| patientAssessment.getAssessmentData() == null 
				|| patientAssessment.getAssessmentData().getGraphicFindings() == null
				|| patientAssessment.getAssessmentData().getGraphicFindings().size() == 0)
			return;
		
		form.drawingBodyChart().clearBrushes();
		form.drawingBodyChart().clearShapes();
		form.drawingBodyChart().setPrintSubTitle("Graphic Image");

		DrawingGraphicImageVo drawingGraphicImageVo = patientAssessment.getAssessmentData().getGraphicFindings().get(0).getGraphicImage();
		// IMAGE
		Image img = null;
		if (drawingGraphicImageVo != null && drawingGraphicImageVo.getImageIsNotNull())
			img = engine.getRegisteredImage(drawingGraphicImageVo.getImage().getID_AppImage().intValue());
		else
			img = form.getImages().GeneralMedical.Blank;

		form.drawingBodyChart().setImage(img);

		//Brushes
		setBrushes(patientAssessment.getAssessmentData().getGraphic().getFindingsAndQuestions());

		//Areas
		DrawingControlGroup root = null;
		if (drawingGraphicImageVo != null && drawingGraphicImageVo.getRootGroupIsNotNull())
		{
			root = new DrawingControlGroup(drawingGraphicImageVo.getRootGroup().getGroupID().intValue(), drawingGraphicImageVo.getRootGroup().getGroupName());
			convertAllAreasToNode(drawingGraphicImageVo.getRootGroup(), root);
		}
		else
		{
			root = new DrawingControlGroup(-1, " ");
		}

		form.drawingBodyChart().setAreas(root);

		PatientGraphicAssessmentVo voPatientGraphicAssessment = null;
		
		if(patientAssessment.getAssessmentData().getGraphicFindingsIsNotNull() && patientAssessment.getAssessmentData().getGraphicFindings().size() > 0)
			voPatientGraphicAssessment = patientAssessment.getAssessmentData().getGraphicFindings().get(0);
		
		//Shapes
		if (voPatientGraphicAssessment != null && voPatientGraphicAssessment.getPatientGraphicFindingIsNotNull())
		{
			for (int i = 0; i < voPatientGraphicAssessment.getPatientGraphicFinding().size(); i++)
			{
				PatientGraphicAssessmentFindingVo voPatientGraphicAssessmentFinding = voPatientGraphicAssessment.getPatientGraphicFinding().get(i);
				DrawingGraphicFindingVo voDrawingGraphicFinding = voPatientGraphicAssessmentFinding.getGraphicFinding();

				String vmlData = voPatientGraphicAssessmentFinding.getAreaDrawn();
				//Findings
				if (voDrawingGraphicFinding != null && vmlData != null)
				{
					if(voPatientGraphicAssessmentFinding.getDrawingId() == null)
						voPatientGraphicAssessmentFinding.setDrawingId(voPatientGraphicAssessmentFinding.getID_PatientGraphicAssessmentFinding());
					
					int shapeId = voPatientGraphicAssessmentFinding.getDrawingId().intValue();
					int brush_id = voDrawingGraphicFinding.getID_DrawingGraphicFinding().intValue();
					String tooltip = UserAssessmentInstHelper.getGraphicAssessmentFindingTooltip(voPatientGraphicAssessmentFinding);

					DrawingControlShape shape = new DrawingControlShape(shapeId, savedTargetID, vmlData, brush_id, false, tooltip);
					form.drawingBodyChart().addShape(shape);
				}
			}
		}
		
		form.getLocalContext().setPatientAssessment(patientAssessment);
		//wdev-10823
		if(form.getLocalContext().getPatientAssessmentIsNotNull())
		{
			form.getLocalContext().setCurrentPatientAssessmentData(form.getLocalContext().getPatientAssessment().getAssessmentData());
		}
		//-----------
	}
	
	private void setBrushes(GraphicAssessmentFindingVoCollection findingColl)
	{
		if (findingColl != null)
		{
			findingColl.sort();
			for (int i = 0; i < findingColl.size(); i++)
			{
				DrawingGraphicFindingVo voDrawingGraphicFinding = findingColl.get(i).getFinding();
				//Findings
				Integer id = voDrawingGraphicFinding.getID_DrawingGraphicFinding();
				String text = voDrawingGraphicFinding.getDisplayText();
				String tooltip = voDrawingGraphicFinding.getDescription();
				Image img = voDrawingGraphicFinding.getImageIsNotNull() ? engine.getRegisteredImage(voDrawingGraphicFinding.getImage().getID_AppImage().intValue()) : null;
				Color colour = voDrawingGraphicFinding.getColourIsNotNull() ? voDrawingGraphicFinding.getColour() : null;
				boolean multipleMarkings = voDrawingGraphicFinding.getIsSingleMarkIsNotNull() && voDrawingGraphicFinding.getIsSingleMark().booleanValue() ? false : true;

				if (img != null)
				{
					form.drawingBodyChart().addBrush(id.intValue(), text, img, multipleMarkings, tooltip);
				}

				if (colour != null)
				{
					form.drawingBodyChart().addBrush(id.intValue(), text, colour, multipleMarkings, tooltip);
				}
			}
		}
		else
		{
			//Set default brush
			form.drawingBodyChart().addBrush(-1, "", Color.White);
		}
	}
	
	private void convertAllAreasToNode(GraphicGroupVo voGroup, DrawingControlGroup node)
	{
		node.setName(voGroup.getGroupName());
		// convert all areas to controlgroup
		int i;
		for (i = 0; i < voGroup.getAreaCollection().size(); i++)
		{
			node.add(createDrawingControlArea(voGroup.getAreaCollection().get(i)));
		}

		for (int j = 0; j < voGroup.getChildGroups().size(); j++)
		{
			GraphicGroupVo childGroup = voGroup.getChildGroups().get(j);
			node.add(createDrawingControlGroup(childGroup));
			convertAllAreasToNode(childGroup, node.getGroup(i + j));
		}
	}
	
	private DrawingControlArea createDrawingControlArea(GraphicAreaVo voArea)
	{
		DrawingControlArea area = new DrawingControlArea(voArea.getAreaID().intValue(), voArea.getAreaName(), voArea.getAreaVectors());
		return area;
	}
	
	private DrawingControlGroup createDrawingControlGroup(GraphicGroupVo voGroup)
	{
		DrawingControlGroup group = new DrawingControlGroup(voGroup.getGroupID().intValue(), voGroup.getGroupName());
		return group;
	}
	
	public void setReadOnly(Boolean readOnly)
	{
		form.drawingBodyChart().setReadOnly(readOnly.booleanValue());
	}
	public void setEnabled(Boolean enabled)
	{
		form.drawingBodyChart().setEnabled(enabled.booleanValue());
	}
	public PatientAssessmentVo getPatientAssessment()
	{
		return form.getLocalContext().getPatientAssessment();
	}
	public void clearScreen()
	{
		initDrawingControl();
	}
}
