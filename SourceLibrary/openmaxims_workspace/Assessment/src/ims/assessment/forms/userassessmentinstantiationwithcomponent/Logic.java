//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.51 build 2463.27097)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.userassessmentinstantiationwithcomponent;

import ims.assessment.configuration.vo.UserDefinedObjectComponentRefVo;
import ims.assessment.helper.DynamicAssessmentHelper;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentVo;
import ims.assessment.vo.UserDefinedObjectComponentVo;
import ims.assessment.vo.UserDefinedObjectVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PatientAssessmentStatusReasonCollection;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.core.vo.lookups.UserDefinedObjectType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	protected void onFormModeChanged()
	{
		updateControlsState();		
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		open();
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			form.setMode(FormMode.VIEW);
			open();
		}
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(isNewComponent() && isNursingDischarge() == false)
			returnToParent();
		else
		{
			form.setMode(FormMode.VIEW);
			open();
			
			if(isNursingDischarge())
			{
				PatientAssessmentVo patientAssessment = form.getLocalContext().getCurrentAssessment();
				
				enableNewUpdateButtonsForNursingDischarge(patientAssessment);
			}
		}
	}
	private boolean isNursingDischarge()
	{
		return (form.getForms().Assessment.UserAssessmentInstantiationDischarge.equals(engine.getFormName())
				|| form.getForms().Assessment.UserAssessmentInstantiationDischargePlanning.equals(engine.getFormName()));
	}
	
	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		returnToParent();
	}
	
	public void initialize() throws PresentationLogicException
	{
		loadStatusCombo(false);
		setInitialAssessment();
		setInitialFormMode();
		setInitialComponentsSettings();
	}

	public void open()
	{				
		PatientAssessmentVo patientAssessment = form.getLocalContext().getCurrentAssessment();
		populateCombos(patientAssessment);
		populateAuthoring(patientAssessment);
		populateCompletedHCPCustomControl(patientAssessment);
		
		form.customControlUAI().clearComponent();
		form.customControlUAI().setPatientAssessment(patientAssessment,false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
				
		if(form.btnNew().isVisible() && form.getMode().equals(FormMode.EDIT))
		{
			form.cmbStatus().setValue(null);
			form.customControlAuthoring().setValue(null);
		}
	}
	private void populateCompletedHCPCustomControl(PatientAssessmentVo patientAssessment)
	{
		if(patientAssessment == null)
			return;
		
		AuthoringInformationVo completedData = new AuthoringInformationVo();
		completedData.setAuthoringHcp(patientAssessment.getCompletedHCP());
		completedData.setAuthoringDateTime(patientAssessment.getCompletedDateTime());
		form.customControlCompleted().setValue(completedData);
	}
	private void populateAuthoring(PatientAssessmentVo patientAssessment)
	{
		AuthoringInformationVo voAuthoringInfo = null;
		if(patientAssessment != null)
			voAuthoringInfo = patientAssessment.getAuthoringInformation();
		
		if(voAuthoringInfo != null)
			form.customControlAuthoring().setValue(voAuthoringInfo);
		else
			form.customControlAuthoring().initializeComponent();
	}
	private boolean isAnswered(PatientAssessmentDataVo data)
	{
		return data != null && data.getAnswerGroupsIsNotNull() && data.getAnswerGroups().size() > 0;
	}
	private void makeScreenReadOnly(boolean value)
	{
		form.cmbStatus().setEnabled(!value);
		form.cmbReason().setEnabled(!value);
		form.customControlUAI().setReadOnly(new Boolean(value));
		form.btnSave().setEnabled(!value);
		form.btnSave().setVisible(!value);
		
		// WDEV-12644
		form.setcustomControlAuthoringEnabled(!value && isStatusCommenced() && Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));
	}
	
	private boolean isStatusCommenced()
	{
		PatientAssessmentVo patientAssessment = form.getLocalContext().getCurrentAssessment();
		if(patientAssessment == null)
			return false;
		
		return patientAssessment.getStatusIsNotNull() && patientAssessment.getStatus().equals(PatientAssessmentStatusReason.NOTCOMMENCED);
	}
	private PatientAssessmentDataVo getData()
	{
		PatientAssessmentVo patientAssessment = form.getLocalContext().getCurrentAssessment();
		if(patientAssessment == null)
			return null;
		
		return patientAssessment.getAssessmentData();
	}	
	
	private void updateControlsState()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			PatientAssessmentVo data = form.getLocalContext().getCurrentAssessment();
			if(data != null && data.getStatusIsNotNull() && data.getStatus().equals(PatientAssessmentStatusReason.COMPLETED))
				makeScreenReadOnly(true);
			else
				makeScreenReadOnly(false);
		}
		else		
		if(form.getMode() == FormMode.VIEW)
		{
			form.btnUpdate().setVisible(form.cmbStatus().getValue() != null && form.cmbStatus().getValue().equals(PatientAssessmentStatusReason.COMPLETED) ? false : true);
			form.customControlUAI().setReadOnly(Boolean.TRUE);
			
			if(isNursingDischarge())
			{
				form.lnkReturnToList().setVisible(false);
				
				enableNewUpdateButtonsForNursingDischarge(form.getLocalContext().getCurrentAssessment());
			}
			else
			{
				if(isAssessmentStatusCompleted(form.getLocalContext().getCurrentAssessment()))
				{
					form.btnNew().setVisible(false);
					form.btnUpdate().setVisible(false);
				}
			}
			
			boolean showReturnToList = isFormOpenedFromClinicalNoteDrawing() || isFormOpenedFromPatientAssessment();
			form.lnkReturnToList().setVisible(showReturnToList);
		}
	}
	private void enableNewUpdateButtonsForNursingDischarge(PatientAssessmentVo patientAssessment)
	{
		if(patientAssessment == null || patientAssessment.getID_PatientAssessment() == null)
		{
			form.btnNew().setVisible(true);
			form.btnUpdate().setVisible(false);
		}
		else
		{
			boolean isCompleted = isAssessmentStatusCompleted(patientAssessment);
			form.btnNew().setVisible(false);
			form.btnUpdate().setVisible(true && (isCompleted == false));
		}
	}
	private boolean isAssessmentStatusCompleted(PatientAssessmentVo patientAssessment)
	{
		return patientAssessment.getStatus() != null && patientAssessment.getStatus().equals(PatientAssessmentStatusReason.COMPLETED);
	}
	
	private boolean isFormOpenedFromPatientAssessment()
	{
		FormName formName = form.getGlobalContext().Clinical.getReturnToFormName();
		return formName != null && formName.equals(form.getForms().Assessment.PatientAssessment);
	}
	
	private boolean isFormOpenedFromClinicalNoteDrawing()
	{
		FormName previousForm = engine.getPreviousNonDialogFormName();
		return  previousForm != null 
				&& ( (previousForm.equals(form.getForms().Clinical.ClinicalNoteDrawing)));
	}

	private boolean save()
	{	
		if(uiErrors())
			return false;
		
		if(form.cmbStatus().getValue().equals(PatientAssessmentStatusReason.COMPLETED))
		{
			String[] herrors = form.customControlUAI().validateData();
			if(herrors != null && herrors.length > 0)
			{
				engine.showErrors("Validation error(s)", herrors);
				return false;
			}
		}
		PatientAssessmentVo initialAssessment = form.getLocalContext().getCurrentAssessmentIsNotNull()?(PatientAssessmentVo)form.getLocalContext().getCurrentAssessment().clone():null;
		
		setAnswers();			
		
		PatientAssessmentVo currentAssessment = form.getLocalContext().getCurrentAssessment();
		
		currentAssessment = DynamicAssessmentHelper.populateHCPDataForAnswers(initialAssessment, currentAssessment, (HcpLiteVo)domain.getHcpLiteUser(), new DateTime());
		
		String[] errors = currentAssessment.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors("Validation error(s)", errors);
			return false;
		}
		
		try
		{
			currentAssessment = domain.save(currentAssessment);			
		}
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.setMode(FormMode.VIEW);
			open();
			return false;
		}		
		
		form.getLocalContext().setCurrentAssessment(currentAssessment);
		return true;
	}
	
	private boolean uiErrors()
	{
		ArrayList uiErrors = new ArrayList();
		if(form.cmbStatus().getValue() == null)
		{
			uiErrors.add("Status is mandatory");
		}

		String authErrors = form.customControlAuthoring().getErrors();
		if(authErrors != null)
			uiErrors.add(authErrors);
		
		if(form.cmbReason().getValue() != null && form.cmbReason().getValue().equals(PatientAssessmentStatusReason.COMPLETED))
		{
			String completedErrors = form.customControlCompleted().getErrors();
			if(completedErrors != null)
				uiErrors.add(completedErrors);
		}
			
		if(uiErrors.size() > 0)
		{
			String[] errors = new String[uiErrors.size()];
			uiErrors.toArray(errors);
			engine.showErrors(errors);
			return true;
		}
		
		return false;
	}
	private void setAnswers()
	{
		PatientAssessmentVo currentAssessment = form.customControlUAI().getPatientAssessment();
		
		currentAssessment.setStatus(form.cmbStatus().getValue());
		currentAssessment.setStatusReason(form.cmbReason().getValue());
		
		currentAssessment.setAuthoringInformation(form.customControlAuthoring().getValue());
		setCompletedInformation(currentAssessment);
		
		form.getLocalContext().setCurrentAssessment(currentAssessment);
	}
	
	private void setCompletedInformation(PatientAssessmentVo currentAssessment)
	{
		//Completed Assessment
		boolean isAssessmentCompleted = form.cmbStatus().getValue() != null && form.cmbStatus().getValue().equals(PatientAssessmentStatusReason.COMPLETED);
		if(isAssessmentCompleted)
		{
			AuthoringInformationVo completedData = form.customControlCompleted().getValue();
			if(completedData != null)
			{
				currentAssessment.setCompletedDateTime(completedData.getAuthoringDateTime());
				currentAssessment.setCompletedHCP(completedData.getAuthoringHcp());
			}
		}
	}
	private boolean isNewComponent()
	{
		return !isAnswered(getData());
	}
	
	private void returnToParent()
	{
		if (form.getGlobalContext().Clinical.getReturnToFormNameIsNotNull())
			engine.open(form.getGlobalContext().Clinical.getReturnToFormName());		
		else
			engine.open(form.getForms().Assessment.PatientAssessment);		
	}
	
	protected void onCmbStatusValueChanged() throws PresentationLogicException
	{
		cmbStatusValueChanged();
	}
	
	private void cmbStatusValueChanged()
	{
		form.cmbReason().clear();
		loadReasonCombo();	
		
		enableConfirmingHCPComponent();
	}
		
	private void setInitialAssessment() throws PresentationLogicException
	{
		if(form.getForms().Assessment.UserAssessmentInstantiationDischarge.equals(engine.getFormName()))
		{
			prepareAssessment(UserDefinedAssessmentType.DISCHARGE);
		}
		else if(form.getForms().Assessment.UserAssessmentInstantiationDischargePlanning.equals(engine.getFormName()))
		{
			prepareAssessment(UserDefinedAssessmentType.DISCHARGE_PLANNING);
		}
		else
			if(form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment() != null)
				form.getLocalContext().setCurrentAssessment(domain.get(form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment()));
			else
				throw new PresentationLogicException("Please select an assessment !");
					
	}
	private void prepareAssessment(UserDefinedAssessmentType type) throws PresentationLogicException
	{
		//WDEV-11526, WDEV-11721
		PatientAssessmentVo patientAssessment = domain.getNursingAssessment(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort(), form.getGlobalContext().Core.getCurrentCareContext(), type);
		UserDefinedObjectVo udfVo = domain.getUDF(UserDefinedObjectType.DISCHARGE_PLANNING, PreActiveActiveInactiveStatus.ACTIVE);
		
		if(patientAssessment != null)
		{
			UserDefinedObjectComponentRefVo editedComponent = null;

			form.getLocalContext().setCurrentAssessment(patientAssessment);
			form.getGlobalContext().Clinical.PatientAssessment.setEditComponent(Boolean.TRUE);
			
			if(udfVo != null && udfVo.getComponentsIsNotNull())
			{
				for (int i = 0; i < udfVo.getComponents().size(); i++)
				{
					if(patientAssessment.getAssessmentDataIsNotNull() 
							&& patientAssessment.getAssessmentData().getUserAssessmentIsNotNull() 
							&& patientAssessment.getAssessmentData().getUserAssessment().equals(udfVo.getComponents().get(i).getUserAssessment()))
							{
								editedComponent = udfVo.getComponents().get(i);
								break;
							}
				}
			}
				
			form.getGlobalContext().Clinical.PatientAssessment.setEditedComponent(editedComponent);
		}
		else
		{
			if(udfVo == null || !udfVo.getComponentsIsNotNull())
				throw new PresentationLogicException("Please configure an assessment of this type !");
			
			UserAssessmentVo userAssessment = null;
			UserDefinedObjectComponentVo udfComp = null;
			for (int i = 0; i < udfVo.getComponents().size(); i++)
			{
				if(udfVo.getComponents().get(i).getUserAssessmentIsNotNull() && type.equals(udfVo.getComponents().get(i).getUserAssessment().getAssessmentType()))
				{
					userAssessment = udfVo.getComponents().get(i).getUserAssessment();
					udfComp = udfVo.getComponents().get(i);
					break;
				}
			}
			
			if(userAssessment == null)
				throw new PresentationLogicException("Please configure an assessment of this type !");
			
			
			patientAssessment = new PatientAssessmentVo();
			
			//WDEV-11721
			patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
			
			//WDEV-11526
			patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			patientAssessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			patientAssessment.setStatus(PatientAssessmentStatusReason.NOTCOMMENCED);
			
			//Patient Assessment Data
			PatientAssessmentDataVo voPatientAssessmentData = new PatientAssessmentDataVo();
			voPatientAssessmentData.setUserAssessment(userAssessment);
			patientAssessment.setAssessmentData(voPatientAssessmentData);
			
			/*
			String[] errors = patientAssessment.validate();
			if(errors != null && errors.length > 0)
			{
				//we should not get here
				engine.showErrors("Validation error(s)", errors);
				throw new PresentationLogicException("Validation errors");
			}
			
			try
			{
				patientAssessment = domain.save(patientAssessment);
			}
			catch (StaleObjectException e) 
			{			
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.setMode(FormMode.VIEW);
			}
			*/		
			
			form.getLocalContext().setCurrentAssessment(patientAssessment);
			form.getGlobalContext().Clinical.PatientAssessment.setEditComponent(Boolean.TRUE);
			form.getGlobalContext().Clinical.PatientAssessment.setEditedComponent(udfComp);
		}
	}
	
	private void setInitialFormMode()
	{
		if(isNursingDischarge())
		{
			form.setMode(FormMode.VIEW);
			
			if(isNursingDischarge())
			{
				PatientAssessmentVo patientAssessment = form.getLocalContext().getCurrentAssessment();
				
				enableNewUpdateButtonsForNursingDischarge(patientAssessment);
			}
			
		}
		else
		{
			if(form.getGlobalContext().Clinical.PatientAssessment.getEditComponentIsNotNull() && form.getGlobalContext().Clinical.PatientAssessment.getEditComponent().booleanValue()) 
				form.setMode(FormMode.EDIT);
			else
				form.setMode(FormMode.VIEW);
		}
	}
	
	private void loadStatusCombo(boolean removeNonCommenced)
	{
		//Status - has to load only parents
		form.cmbStatus().clear();
		PatientAssessmentStatusReasonCollection voColl = LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for(int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if(voColl.get(i).getParent() == null)
			{
				if(removeNonCommenced && voColl.get(i).equals(PatientAssessmentStatusReason.NOTCOMMENCED))
					continue;
				
				form.cmbStatus().newRow(voColl.get(i), voColl.get(i).toString());
			}
		}
	}
	
	private void populateCombos(PatientAssessmentVo patientAssessment)
	{
		if(patientAssessment == null)
			return;
		
		PatientAssessmentStatusReason status = patientAssessment.getStatus();
		boolean isEditMode = form.getMode().equals(FormMode.EDIT);
		if (isEditMode)
		{
			loadStatusCombo(true);
			if(status != null && status.equals(PatientAssessmentStatusReason.NOTCOMMENCED))
				status = PatientAssessmentStatusReason.INPROGRESS;
		}
		form.cmbStatus().setValue(status);
		cmbStatusValueChanged();
		form.cmbReason().setValue(patientAssessment.getStatusReason());
	}
	protected void onBtnNewClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		open();
	}
	
	private void setInitialComponentsSettings()
	{
		form.customControlAuthoring().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.customControlCompleted().setIsRequiredPropertyToControls(Boolean.TRUE);
		form.customControlCompleted().setLabels(AuthoringLabelType.COMPLETING_COMPLETED);
	}
	
	private void enableConfirmingHCPComponent()
	{
		PatientAssessmentStatusReason parentLkp = form.cmbStatus().getValue();
		if(parentLkp != null && parentLkp.equals(PatientAssessmentStatusReason.COMPLETED))
		{
			boolean editMode = form.getMode().equals(FormMode.EDIT);
			if(editMode)
			{
				form.customControlCompleted().initializeComponent();
				// WDEV-12644
				form.setcustomControlCompletedEnabled(Boolean.FALSE.equals(ConfigFlag.UI.ASSESSMENTS_SET_AUTHORING_AND_COMPLETING_DETAILS_AS_READ_ONLY.getValue()));	
			}
		}
		else
		{
			boolean editMode = form.getMode().equals(FormMode.EDIT);
			if(editMode)
			{
				form.customControlCompleted().setValue(null);
				form.setcustomControlCompletedEnabled(false);
			}
		}
	}
	
	private void loadReasonCombo()
	{
		PatientAssessmentStatusReason parentLkp = form.cmbStatus().getValue();
		PatientAssessmentStatusReasonCollection voColl = LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for(int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if(voColl.get(i).getParent() != null && voColl.get(i).getParent().equals(parentLkp))
				form.cmbReason().newRow(voColl.get(i), voColl.get(i).toString());
		}
	}	
}
