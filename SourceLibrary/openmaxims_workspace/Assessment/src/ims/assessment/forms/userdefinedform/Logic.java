//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2389.16953)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.userdefinedform;

//This code was generated by Alexie Ursache using IMS Development Environment (version 1.42 build 2196.26417)
//Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

import ims.assessment.forms.userdefinedform.GenForm.lyrTabsLayer.tabPageSearchContainer.GroupCriteriaEnumeration;
import ims.assessment.forms.userdefinedform.GenForm.lyrTabsLayer.tabPageSelectContainer.GroupCriteriaSelectEnumeration;
import ims.assessment.forms.userdefinedform.GenForm.lyrTabsLayer.tabPageSelectContainer.grdUserObjectsSelectRow;
import ims.assessment.vo.UserAssessmentFavouritesShortVo;
import ims.assessment.vo.UserDefinedObjectFilterVo;
import ims.assessment.vo.UserDefinedObjectShortVo;
import ims.assessment.vo.UserDefinedObjectShortVoCollection;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.AssessmentFolderShortVo;
import ims.core.vo.AssessmentFolderShortVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserDefinedObjectType;
import ims.core.vo.lookups.UserDefinedObjectTypeCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.LayerBridge;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final String	ROOT_FOLDER	= "Root";

	protected void onFormOpen() throws FormOpenException
	{
		initialize();
		open();
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
	}

	private void doSearch()
	{
		clearSelectedUserDefinedObjectShort();
		search();
		enableContextMenu();
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doClear();
	}

	private void doClear()
	{
		clearUserObjectsControls();
		clearUserDefinedObjectFilter();
		clearSelectedUserDefinedObjectShort();
		enableContextMenu();
	}

	private void clearUserObjectsControls()
	{
		if(isDialog())
		{
			form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().clear();
			form.lyrTabs().tabPageSelect().txtNameSelect().setValue("");
			form.lyrTabs().tabPageSelect().cmbCategorySelect().setValue(null);
		}
		else
		{
			form.lyrTabs().tabPageSearch().grdUserObjects().getRows().clear();
			form.lyrTabs().tabPageSearch().txtName().setValue("");
			form.lyrTabs().tabPageSearch().cmbCategory().setValue(null);
		}
	}
	
	private void clearUserObjectsGrid()
	{
		if(isDialog())
			form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().clear();
		else
			form.lyrTabs().tabPageSearch().grdUserObjects().getRows().clear();
	}

	protected void onGrdUserObjectsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		enableContextMenu();
	}
	
	protected void onGrdUserObjectsSelectGridCheckBoxClicked(int column, grdUserObjectsSelectRow row, boolean isChecked) throws PresentationLogicException
	{
		if(isChecked)
		{
			//clear the rest of the checks
			for(int i = 0; i < form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().size(); i++)
			{
				UserDefinedObjectShortVo voUserDefinedObjectShort = form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().get(i).getValue();
				if(voUserDefinedObjectShort != null && voUserDefinedObjectShort.equals(row.getValue()))
					continue;
				form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().get(i).setcolSelect(false);				
			}
		}
		
		enableSelectBtn();
		enableFavouritesContextMenu(isChecked, false);
	}
	
	protected void onBtnSelectClick() throws PresentationLogicException
	{
		UserDefinedObjectShortVo voUserDefinedObjectShort = getSelectedRecord();
		if(voUserDefinedObjectShort != null)
		{
			form.getGlobalContext().Core.setUserDefinedObjectSelected(domain.getUserDefinedObject(voUserDefinedObjectShort.getID_UserDefinedObject()));
			engine.close(ims.framework.enumerations.DialogResult.OK);
		}
	}
	
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			form.setMode(FormMode.VIEW);
		}
		else
		{
			engine.close(ims.framework.enumerations.DialogResult.CANCEL);
		}
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
				addUserObject();
			break;
			
			case GenForm.ContextMenus.GenericGrid.Update :
				editUserObject(FormMode.EDIT);
			break;
			
			case GenForm.ContextMenus.GenericGrid.View:
				editUserObject(FormMode.VIEW);
			break;
			
			case GenForm.ContextMenus.Favourites.Add:
				addToFavorites();
			break;
			
			case GenForm.ContextMenus.Favourites.AddNewFolder:
				addNewFolder();
			break;
			
			case GenForm.ContextMenus.Favourites.EditFolder:
				editFolder();
			break;
			
			case GenForm.ContextMenus.Favourites.RemoveFolder:
				removeFolder();
			break;
		}
	}

	// ------ Private methods -------
	private void open()
	{
		setContextMenu();
		
		ims.framework.FormName previousNonDialogFormName = engine.getPreviousNonDialogFormName();
		if (previousNonDialogFormName != null && previousNonDialogFormName.equals(form.getForms().Assessment.UserDefinedFormNew))
		{
			UserDefinedObjectFilterVo voUserDefinedObjFilter = form.getGlobalContext().Core.getUserDefinedObjectSearchFilter();
			if(voUserDefinedObjFilter != null)
			{
				form.lyrTabs().tabPageSearch().txtName().setValue(voUserDefinedObjFilter.getName());
				form.lyrTabs().tabPageSearch().cmbCategory().setValue(voUserDefinedObjFilter.getCategory());
				form.lyrTabs().tabPageSearch().GroupCriteria().setValue(getGroupCriteria(voUserDefinedObjFilter));
				search();
				
				UserDefinedObjectShortVo voUserDefinedObjectShort = form.getGlobalContext().Core.getUserDefinedObjectShort();
				if(voUserDefinedObjectShort != null)
					form.lyrTabs().tabPageSearch().grdUserObjects().setValue(voUserDefinedObjectShort);
			}
			else
			{
				UserDefinedObjectShortVo voUserDefinedObjectShort = form.getGlobalContext().Core.getUserDefinedObjectShort();
				if(voUserDefinedObjectShort != null && voUserDefinedObjectShort.getID_UserDefinedObjectIsNotNull())
				{
					clearUserObjectsGrid();
					UserDefinedObjectShortVoCollection voColl = new UserDefinedObjectShortVoCollection();
					voColl.add(voUserDefinedObjectShort);
					populateUserDefinedObjectsGrid(voColl);
					form.lyrTabs().tabPageSearch().grdUserObjects().setValue(voUserDefinedObjectShort);
					setDefaultScreenData();
				}
				else
				{
					setDefaultScreenData();
				}
			}
		}
		else
		{
			setDefaultScreenData();
		}
		
		enableContextMenu();
	}

	private GroupCriteriaEnumeration getGroupCriteria(UserDefinedObjectFilterVo voUserDefinedObjFilter)
	{
		if(voUserDefinedObjFilter != null)
		{
			if(voUserDefinedObjFilter.getBeginsWithIsNotNull() && voUserDefinedObjFilter.getBeginsWith().booleanValue())
				return GroupCriteriaEnumeration.rdoBeginsWith;
			
			if(voUserDefinedObjFilter.getContainsIsNotNull() && voUserDefinedObjFilter.getContains().booleanValue())
				return GroupCriteriaEnumeration.rdoContains;
			
			if(voUserDefinedObjFilter.getExactTextIsNotNull() && voUserDefinedObjFilter.getExactText().booleanValue())
				return GroupCriteriaEnumeration.rdoExactText;
		}
		return GroupCriteriaEnumeration.None;
	}

	private UserDefinedObjectShortVoCollection listUserDefinedObjects()
	{
		String name = isDialog()?form.lyrTabs().tabPageSelect().txtNameSelect().getValue():form.lyrTabs().tabPageSearch().txtName().getValue();
		if (name != null)
			name = name.trim();

		if (name != null)
		{
			if(isDialog())
			{
				GroupCriteriaSelectEnumeration groupEnum = form.lyrTabs().tabPageSelect().GroupCriteriaSelect().getValue();
				if (groupEnum != null)
				{
					if (groupEnum.equals(GroupCriteriaSelectEnumeration.rdoBeginsWithSelect))
						name += '%';
					if (groupEnum.equals(GroupCriteriaSelectEnumeration.rdoContainsSelect))
						name =  '%' + name + '%';
				}
			}
			else
			{
				GroupCriteriaEnumeration groupEnum = form.lyrTabs().tabPageSearch().GroupCriteria().getValue();
				if (groupEnum != null)
				{
					if (groupEnum.equals(GroupCriteriaEnumeration.rdoBeginsWith))
						name += '%';
					if (groupEnum.equals(GroupCriteriaEnumeration.rdoContains))
						name =  '%' + name + '%';
				}
			}
		}
		
		UserDefinedObjectType category = isDialog()?form.lyrTabs().tabPageSelect().cmbCategorySelect().getValue():form.lyrTabs().tabPageSearch().cmbCategory().getValue();
		PreActiveActiveInactiveStatus status = isDialog()?PreActiveActiveInactiveStatus.ACTIVE:null;
		
		UserDefinedObjectShortVoCollection voColl = domain.listUserDefinedObjects(name, category, status);
		
		if (voColl == null || voColl.size() == 0)
		{
			engine.showMessage("No User Defined Forms found for the Search Criteria Provided");
			return null;
		}
		
		return voColl;
	}

	private void populateUserDefinedObjectsGrid(UserDefinedObjectShortVoCollection voColl)
	{
		UserDefinedObjectShortVo voUserDefinedObject = null;
		GenForm.lyrTabsLayer.tabPageSearchContainer.grdUserObjectsRow 		rowSearch = null;
		GenForm.lyrTabsLayer.tabPageSelectContainer.grdUserObjectsSelectRow rowSelect = null; 
		
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			voUserDefinedObject = voColl.get(i);
			if(isDialog())
			{
				//WDEV-1228 
				if(voUserDefinedObject.getActiveStatusIsNotNull() && voUserDefinedObject.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
				{
					rowSelect = form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().newRow();
					rowSelect.setcolName(voUserDefinedObject.getName());
					rowSelect.setcolType(voUserDefinedObject.getObjectTypeIsNotNull() ? voUserDefinedObject.getObjectType().toString() : "");
					rowSelect.setValue(voUserDefinedObject);
				}
			}
			else
			{
				rowSearch = form.lyrTabs().tabPageSearch().grdUserObjects().getRows().newRow();
				rowSearch.setcolName(voUserDefinedObject.getName());
				rowSearch.setcolType(voUserDefinedObject.getObjectTypeIsNotNull() ? voUserDefinedObject.getObjectType().toString() : "");
				rowSearch.setcolStatus(voUserDefinedObject.getActiveStatusIsNotNull()?voUserDefinedObject.getActiveStatus().toString():"");
				rowSearch.setValue(voUserDefinedObject);
			}
		}
	}

	private void search()
	{
		clearUserObjectsGrid();
		UserDefinedObjectShortVoCollection voColl = listUserDefinedObjects();
		populateUserDefinedObjectsGrid(voColl);
		setSearchCriteriaFilter();
	}

	private void editUserObject(FormMode formMode)
	{
		UserDefinedObjectShortVo voUDObjectShort = form.lyrTabs().tabPageSearch().grdUserObjects().getValue();
		form.getGlobalContext().Core.setUserDefinedObjectShort(voUDObjectShort);
		form.getGlobalContext().Core.setUserDefinedFormMode(formMode);
		engine.open(form.getForms().Assessment.UserDefinedFormNew);
	}

	private void addUserObject()
	{
		UserDefinedObjectShortVo voUserDefinedObjectShort = new UserDefinedObjectShortVo();
		voUserDefinedObjectShort.setName(form.lyrTabs().tabPageSearch().txtName().getValue());
		
		form.getGlobalContext().Core.setUserDefinedObjectShort(voUserDefinedObjectShort);
		form.getGlobalContext().Core.setUserDefinedFormMode(FormMode.EDIT);
		clearUserDefinedObjectFilter();
		
		engine.open(form.getForms().Assessment.UserDefinedFormNew);
	}

	private void setContextMenu()
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add User Defined Form");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit User Defined Form");
		form.getContextMenus().getGenericGridViewItem().setText("View User Defined Form");
	}

	private void enableContextMenu()
	{
		boolean objSelected = form.lyrTabs().tabPageSearch().grdUserObjects().getSelectedRowIndex() >= 0;
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(objSelected);
		form.getContextMenus().getGenericGridViewItem().setVisible(objSelected);
	}

	private void setDefaultScreenData()
	{
		if(isDialog())
		{
			form.lyrTabs().tabPageSelect().GroupCriteriaSelect().setValue(GroupCriteriaSelectEnumeration.rdoBeginsWithSelect);
			form.lyrTabs().tabPageSelect().txtNameSelect().setFocus();
		}
		else
		{
			form.lyrTabs().tabPageSearch().GroupCriteria().setValue(GroupCriteriaEnumeration.rdoBeginsWith);
			form.lyrTabs().tabPageSearch().txtName().setFocus();
		}
	}

	private void setSearchCriteriaFilter()
	{
		UserDefinedObjectFilterVo voUserDefinedObjFilter = new UserDefinedObjectFilterVo();
		if(isDialog())
		{
			voUserDefinedObjFilter.setName(form.lyrTabs().tabPageSelect().txtNameSelect().getValue());
			GroupCriteriaSelectEnumeration criteria = form.lyrTabs().tabPageSelect().GroupCriteriaSelect().getValue();
			voUserDefinedObjFilter.setBeginsWith(new Boolean(criteria.equals(GroupCriteriaSelectEnumeration.rdoBeginsWithSelect)));
			voUserDefinedObjFilter.setContains(new Boolean(criteria.equals(GroupCriteriaSelectEnumeration.rdoContainsSelect)));
			voUserDefinedObjFilter.setExactText(new Boolean(criteria.equals(GroupCriteriaSelectEnumeration.rdoExactTextSelect)));
			voUserDefinedObjFilter.setCategory(form.lyrTabs().tabPageSelect().cmbCategorySelect().getValue());
		}
		else
		{
			voUserDefinedObjFilter.setName(form.lyrTabs().tabPageSearch().txtName().getValue());
			GroupCriteriaEnumeration criteria = form.lyrTabs().tabPageSearch().GroupCriteria().getValue();
			voUserDefinedObjFilter.setBeginsWith(new Boolean(criteria.equals(GroupCriteriaEnumeration.rdoBeginsWith)));
			voUserDefinedObjFilter.setContains(new Boolean(criteria.equals(GroupCriteriaEnumeration.rdoContains)));
			voUserDefinedObjFilter.setExactText(new Boolean(criteria.equals(GroupCriteriaEnumeration.rdoExactText)));
			voUserDefinedObjFilter.setCategory(form.lyrTabs().tabPageSearch().cmbCategory().getValue());
		}
		
		form.getGlobalContext().Core.setUserDefinedObjectSearchFilter(voUserDefinedObjFilter);
	}
	
	private void clearUserDefinedObjectFilter()
	{
		form.getGlobalContext().Core.setUserDefinedObjectSearchFilter(null);
	}
	
	private void clearSelectedUserDefinedObjectShort()
	{
		form.getGlobalContext().Core.setUserDefinedObjectShort(null);
	}
	private void initialize()
	{
		//form.lyrTabs().hide();
		if(isDialog())
		{
			form.lyrTabs().tabPageSelect().setHeaderVisible(true);
			form.lyrTabs().tabPageFavourites().setHeaderVisible(true);
			form.lyrTabs().tabPageSearch().setHeaderVisible(false);
			if(populateFavorites())
			{
				form.lyrTabs().showtabPageFavourites();
				form.lyrTabs().tabPageFavourites().btnSelectFavourite().setAsDefaultButton();
			}
			else
			{
				form.lyrTabs().showtabPageSelect();
				form.lyrTabs().tabPageSelect().imbSeachSelect().setAsDefaultButton();
			}
			enableSelectBtn();
			//WDEV-18106
			enableFavouritesContextMenu(false, form.lyrTabs().tabPageFavourites().isVisible());
			populateCategoryCombo(true);
			form.setMode(FormMode.VIEW);
		}
		else
		{
			populateCategoryCombo(false);
			form.lyrTabs().tabPageSearch().setHeaderVisible(true);
			form.lyrTabs().showtabPageSearch();
			form.lyrTabs().tabPageSearch().imbSearch().setAsDefaultButton();
			form.lyrTabs().tabPageSelect().setHeaderVisible(false);
			form.lyrTabs().tabPageFavourites().setHeaderVisible(false);
		}
	}

	private void enableSelectBtn()
	{
		boolean enable = false;
		for(int i = 0; i < form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().size(); i++)
		{
			if(form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().get(i).getcolSelect())
			{
				enable = true;
				break;
			}
		}
		form.lyrTabs().tabPageSelect().btnSelect().setVisible(enable);
		form.lyrTabs().tabPageSelect().btnSelect().setEnabled(enable);
	}
	
	private boolean isDialog()
	{
		return engine.isDialog();
	}

	private UserDefinedObjectShortVo getSelectedRecord()
	{
		for(int i = 0; i < form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().size(); i++)
		{
			if(form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().get(i).getcolSelect())
				return form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().get(i).getValue();
		}
		
		return null;
	}
	
	private boolean addToFavorites()
	{
		UserDefinedObjectShortVo voUserDefinedObjectShort = getSelectedUserDefinedObject();
		
		//Check if not exits to favourites (list context)
		UserAssessmentFavouritesShortVo favoriteShortVo = getCurrentUserAssessmentFavourite();
		String existingFolder = getAleradyInFavorites(favoriteShortVo, voUserDefinedObjectShort);
		if(existingFolder != null)
		{
			if(existingFolder.equals(ROOT_FOLDER))
				existingFolder = " ";
			else
				existingFolder = "' " + existingFolder + " '";
			engine.showMessage("'" + voUserDefinedObjectShort.getName() + "'" + " is already added to your" + existingFolder + "favourites folder");
			return false;
		}
		AssessmentFolderShortVo voFolder = getFolder(favoriteShortVo, ROOT_FOLDER);
		if(voFolder == null)
		{
			voFolder = new AssessmentFolderShortVo();
			voFolder.setFolder(ROOT_FOLDER);
			voFolder.setUserDefinedForms(new UserDefinedObjectShortVoCollection());
		}
		voFolder.getUserDefinedForms().add(voUserDefinedObjectShort);
		
		if(favoriteShortVo.getAssessmentFolder() == null)
			favoriteShortVo.setAssessmentFolder(new AssessmentFolderShortVoCollection());
		int index = favoriteShortVo.getAssessmentFolder().indexOf(voFolder);
		if(index >= 0)
			favoriteShortVo.getAssessmentFolder().set(index, voFolder);
		else
			favoriteShortVo.getAssessmentFolder().add(voFolder);
		
		if(saveFavorites(favoriteShortVo) == false)
			return false;
		
		form.lyrTabs().tabPageSelect().setHeaderEnabled(true);
		return true;
	}
	
	private boolean saveFavorites(UserAssessmentFavouritesShortVo favoriteShortVo)
	{
		String[] errors = favoriteShortVo.validate();
		if(errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			favoriteShortVo = domain.saveFavourite(favoriteShortVo);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		
		form.getLocalContext().setFavouriteRecord(favoriteShortVo);
		
		return true;
	}

	private UserDefinedObjectShortVo getSelectedUserDefinedObject()
	{
		UserDefinedObjectShortVo voUserDefinedObjectShort = null;
		for(int i = 0; i < form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().size(); i++)
		{
			if(form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().get(i).getcolSelect())
			{
				voUserDefinedObjectShort = form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().get(i).getValue();
				break;
			}
		}
		return voUserDefinedObjectShort;
	}
	
	private AssessmentFolderShortVo getFolder(UserAssessmentFavouritesShortVo favoriteShortVo, String rootFolder)
	{
		if(favoriteShortVo == null || favoriteShortVo.getAssessmentFolder() == null)
			return null;
		
		for (int i = 0; i < favoriteShortVo.getAssessmentFolder().size(); i++)
		{
			if(favoriteShortVo.getAssessmentFolder().get(i).getFolder() != null && favoriteShortVo.getAssessmentFolder().get(i).getFolder().equals(rootFolder))
				return favoriteShortVo.getAssessmentFolder().get(i);
		}
		return null;
	}

	private boolean populateFavorites()
	{
		boolean hasFavourites = false;
		Integer hcpId = getCurrentHcpId();
		if(hcpId != null)
		{
			UserAssessmentFavouritesShortVo voFavourites = domain.getFavourite(hcpId);
			form.getLocalContext().setFavouriteRecord(voFavourites);
			form.lyrTabs().tabPageFavourites().treFavourites().clear();
			if(voFavourites != null && voFavourites.getAssessmentFolderIsNotNull())
			{
				voFavourites.getAssessmentFolder().sort();
				hasFavourites = voFavourites.getAssessmentFolder().size() > 0;
				//Create the map with the folders
				for (int i = 0; i < voFavourites.getAssessmentFolder().size(); i++)
				{
					String folder = voFavourites.getAssessmentFolder().get(i).getFolder();
					if(folder != null && !folder.equals(ROOT_FOLDER)) //WDEV-7168 
					{
						form.lyrTabs().tabPageFavourites().treFavourites().getNodes().add(null, folder, 2);
					}
				}
	
				//Add Nodes
				for (int i = 0; i < voFavourites.getAssessmentFolder().size(); i++)
				{
					AssessmentFolderShortVo assessmentFolderShortVo = voFavourites.getAssessmentFolder().get(i);
					TreeNode node = getFolderRootRow(assessmentFolderShortVo.getFolder());				
					if(node == null)
					{
						for (int j = 0; j < assessmentFolderShortVo.getUserDefinedForms().size(); j++)
						{
							String nodeText = assessmentFolderShortVo.getUserDefinedForms().get(j).getName();
							form.lyrTabs().tabPageFavourites().treFavourites().getNodes().add(assessmentFolderShortVo.getUserDefinedForms().get(j), nodeText, 1, new int[]{0, 2});
						}
					}
				}
				
				//Add Nodes
				for (int i = 0; i < voFavourites.getAssessmentFolder().size(); i++)
				{
					AssessmentFolderShortVo assessmentFolderShortVo = voFavourites.getAssessmentFolder().get(i);
					TreeNode node = getFolderRootRow(assessmentFolderShortVo.getFolder());				
					if(node != null)
					{
						node.setExpanded(true);
						node.setCheckBoxVisible(false);
						node.setCollapsedImage(form.getImages().Core.CollapseAll);
						node.setExpandedImage(form.getImages().Core.ExpandAll);
						assessmentFolderShortVo.getUserDefinedForms().sort();
						for (int j = 0; j < assessmentFolderShortVo.getUserDefinedForms().size(); j++)
						{
							String nodeText = assessmentFolderShortVo.getUserDefinedForms().get(j).getName();
							node.getNodes().add(assessmentFolderShortVo.getUserDefinedForms().get(j), nodeText, 3, new int[]{0,2});
						}
					}
				}
			}
		}
		
		enableFavouritesContextMenu(false, form.lyrTabs().tabPageFavourites().isHeaderVisible());
		
		return hasFavourites;
	}
	
	private TreeNode getFolderRootRow(String folder)
	{
		if(folder == null)
			return null;
		
		for (int i = 0; i < form.lyrTabs().tabPageFavourites().treFavourites().getNodes().size(); i++)
		{
			TreeNode node   = form.lyrTabs().tabPageFavourites().treFavourites().getNodes().get(i);
			String nodeText = node.getText();
			if(nodeText != null && nodeText.startsWith(folder))
				return node; 
		}
		return null;
	}

	private UserAssessmentFavouritesShortVo getCurrentUserAssessmentFavourite()
	{
		UserAssessmentFavouritesShortVo voFavourites = form.getLocalContext().getFavouriteRecord();
		if(voFavourites == null)
			voFavourites = new UserAssessmentFavouritesShortVo();
		
		Object hcp = domain.getHcpUser();
		if(hcp instanceof HcpRefVo)
			voFavourites.setAuthoringHCP((HcpRefVo)hcp);
		
		return voFavourites;
	}
	
	private String getAleradyInFavorites(UserAssessmentFavouritesShortVo favoriteShortVo, UserDefinedObjectShortVo voUserDefinedObjectShort)
	{
		if(favoriteShortVo != null && voUserDefinedObjectShort != null && favoriteShortVo.getAssessmentFolderIsNotNull())
		{
			for(int i=0; i<favoriteShortVo.getAssessmentFolder().size(); i++)
			{
				AssessmentFolderShortVo voAssessmentFolder = favoriteShortVo.getAssessmentFolder().get(i);
				if(voAssessmentFolder.getUserDefinedFormsIsNotNull() && voAssessmentFolder.getUserDefinedForms().indexOf(voUserDefinedObjectShort) >= 0)
					return voAssessmentFolder.getFolder();
			}
		}
		return null;
	}
	private Integer getCurrentHcpId()
	{
		Object hcp = domain.getHcpUser();
		return hcp instanceof HcpRefVo?((HcpRefVo)hcp).getID_Hcp():null;
	}
	
	private void addNewFolder()
	{
		String folderName = getFavouriteFolderName();
		if(folderName != null && folderName.length() > 0)
		{
			TreeNode node = null;
			node = form.lyrTabs().tabPageFavourites().treFavourites().getNodes().add(null, folderName, true, 2);
			node.setCollapsedImage(form.getImages().Core.CollapseAll);
			node.setExpandedImage(form.getImages().Core.ExpandAll);
			form.lyrTabs().tabPageFavourites().treFavourites().beginEditSelectedNode();
			enableFavouritesContextMenu(false, form.lyrTabs().tabPageFavourites().isHeaderVisible());

			if(node != null)
				node.setCheckBoxVisible(false);
			if(form.getMode().equals(FormMode.VIEW))
				form.setMode(FormMode.EDIT);
		}
	}
	
	private void editFolder()
	{
		TreeNode folderNode = form.lyrTabs().tabPageFavourites().treFavourites().getSelectedNode();
		if(folderNode == null)// && folderNode.getParent() != null) ????????
		{
			engine.showMessage("Please select a Folder");
			return;
		}
		
		form.lyrTabs().tabPageFavourites().treFavourites().beginEditSelectedNode();
		
		if(form.getMode().equals(FormMode.VIEW))
			form.setMode(FormMode.EDIT);
	}
	
	private void removeFolder()
	{
		form.lyrTabs().tabPageFavourites().treFavourites().getNodes().remove(form.lyrTabs().tabPageFavourites().treFavourites().getSelectedNode());
		enableFavouritesContextMenu(false, form.lyrTabs().tabPageFavourites().isHeaderVisible());
		if(form.getMode().equals(FormMode.VIEW))
			form.setMode(FormMode.EDIT);
	}
	
	protected void onlyrTabsTabChanged(LayerBridge tab)
	{
		boolean isFavouriteTab = tab.equals(form.lyrTabs().tabPageFavourites());
		if(isFavouriteTab)
		{
			populateFavorites();
			form.lyrTabs().tabPageFavourites().btnSelectFavourite().setAsDefaultButton();
		}
		
		if(tab.equals(form.lyrTabs().tabPageSearch()))
		{
			form.lyrTabs().tabPageSearch().imbSearch().setAsDefaultButton();
		}
		
		if(tab.equals(form.lyrTabs().tabPageSelect()))
		{
			form.lyrTabs().tabPageSelect().imbSeachSelect().setAsDefaultButton();
		}

		enableFavouritesContextMenu(isRecordChecked(), isFavouriteTab);

	}
	// ------- End Private methods	
	
	private void enableFavouritesContextMenu(boolean isChecked, boolean isTabFavourite)
	{
		if(getCurrentHcpId() == null)
		{
			form.getContextMenus().hideAllFavouritesMenuItems();
		}
		else
		{
			form.getContextMenus().getFavouritesAddNewFolderItem().setVisible(isTabFavourite);
			form.getContextMenus().getFavouritesAddItem().setVisible(isChecked && !isTabFavourite);
			TreeNode node = form.lyrTabs().tabPageFavourites().treFavourites().getSelectedNode();
			boolean isNodeRemovable = node != null && node.getNodes().size() == 0;
			boolean isFolderNodeEditable = node != null && node.getValue() == null;
			form.getContextMenus().getFavouritesRemoveFolderItem().setVisible(isTabFavourite && isNodeRemovable);
			form.getContextMenus().getFavouritesEditFolderItem().setVisible(isTabFavourite && isFolderNodeEditable);
		}
	}
	private boolean isRecordChecked()
	{
		for (int i = 0; i < form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().size(); i++)
		{
			if(form.lyrTabs().tabPageSelect().grdUserObjectsSelect().getRows().get(i).getcolSelect())
			{
				return true;
			}
		}
		
		return false;
	}
	
	protected void onBtnSaveFavouriteClick() throws PresentationLogicException
	{
		if(save())
		{
			populateFavorites();
			form.setMode(FormMode.VIEW);			
		}
	}

	private boolean save()
	{
		UserAssessmentFavouritesShortVo voFavourite = form.getLocalContext().getFavouriteRecord();
		if(voFavourite == null)
		{
			voFavourite = new UserAssessmentFavouritesShortVo();
			Object hcp = domain.getHcpUser();
			if(hcp instanceof HcpRefVo)
				voFavourite.setAuthoringHCP((HcpRefVo)hcp);
		}
		TreeNode[] parentNodes = getParentTreeNodes();
		voFavourite.setAssessmentFolder(new AssessmentFolderShortVoCollection());
		//add nodes
		for (int i = 0; i < parentNodes.length; i++)
		{
			TreeNode parentNode = parentNodes[i];
			int nodesCount = parentNode.getNodes().size();
			String folderName = nodesCount == 0 && parentNode.getValue() != null?ROOT_FOLDER:parentNode.getText();
			AssessmentFolderShortVo assessmentFolder = getAssessmentFolder(voFavourite, folderName);
			if(nodesCount == 0)
			{
				Object value = parentNode.getValue();
				if(value instanceof UserDefinedObjectShortVo)
					assessmentFolder.getUserDefinedForms().add((UserDefinedObjectShortVo)value);
			}
			else
			{
				for (int j = 0; j < nodesCount; j++)
				{
					TreeNode childNode = parentNode.getNodes().get(j);
					Object value = childNode.getValue();
						if(value instanceof UserDefinedObjectShortVo)
							assessmentFolder.getUserDefinedForms().add((UserDefinedObjectShortVo)value);
				}
			}
			
			int indexFolder = voFavourite.getAssessmentFolder().indexOf(assessmentFolder);
			if(indexFolder >= 0)
				voFavourite.getAssessmentFolder().set(indexFolder, assessmentFolder);
			else
				voFavourite.getAssessmentFolder().add(assessmentFolder);
		}
		
		if(saveFavorites(voFavourite) == false)
			return false;
		
		return true;
	}

	private AssessmentFolderShortVo getAssessmentFolder(UserAssessmentFavouritesShortVo voFavourite, String folderName)
	{
		if(voFavourite != null && voFavourite.getAssessmentFolderIsNotNull())
		{
			for (int i = 0; i < voFavourite.getAssessmentFolder().size(); i++)
			{
				String currentFolder = voFavourite.getAssessmentFolder().get(i).getFolder();
				if(currentFolder != null && currentFolder.equals(folderName))
					return voFavourite.getAssessmentFolder().get(i);
			}
		}
		AssessmentFolderShortVo voFolder = new AssessmentFolderShortVo();
		voFolder.setFolder(folderName);
		voFolder.setUserDefinedForms(new UserDefinedObjectShortVoCollection());
		
		return voFolder;
	}

	/*private boolean checkParentNodesHasChildren(TreeNode[] parentNodes)
	{
		for (int i = 0; i < parentNodes.length; i++)
		{
			TreeNode node = parentNodes[i];
			if(node.getValue() == null && node.getNodes().size() == 0)
			{
				engine.showMessage("Please add at least one favourite entry to the '" + node.getText() + "' node");
				return false;
			}
		}
		
		return true;
	}*/

	private TreeNode[] getParentTreeNodes()
	{
		int size = form.lyrTabs().tabPageFavourites().treFavourites().getNodes().size();
		TreeNode[] nodes = new TreeNode[size];
		for (int i = 0; i < size; i++)
		{
			nodes[i] = form.lyrTabs().tabPageFavourites().treFavourites().getNodes().get(i);
		}
		
		return nodes;
	}

	protected void onBtnCancelFavouriteClick() throws PresentationLogicException
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			populateFavorites();
			form.setMode(FormMode.VIEW);
		}
		else
		{
			engine.close(ims.framework.enumerations.DialogResult.CANCEL);
		}
	}

	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.lyrTabs().tabPageFavourites().btnSelectFavourite().setVisible(getCheckedRecord() != null);
			form.lyrTabs().tabPageSelect().setHeaderEnabled(true);
		}
		else
		{
			form.lyrTabs().tabPageSelect().setHeaderEnabled(false);
		}
	}

	protected void onBtnSelectFavouriteClick() throws PresentationLogicException
	{
		UserDefinedObjectShortVo voUserDefinedObjectShort = getCheckedRecord();
		if(voUserDefinedObjectShort != null)
		{
			form.getGlobalContext().Core.setUserDefinedObjectSelected(domain.getUserDefinedObject(voUserDefinedObjectShort.getID_UserDefinedObject()));
			engine.close(ims.framework.enumerations.DialogResult.OK);
		}
		else
		{
			engine.showMessage("Please select a record");
		}		
	}

	protected void onTreFavouritesTreeViewCheck(TreeNode node) throws PresentationLogicException
	{
		if(node.isChecked())
			clearCheckedNodes(node);
		
		if(form.getMode().equals(FormMode.VIEW))
			form.lyrTabs().tabPageFavourites().btnSelectFavourite().setVisible(node.isChecked());
		form.getContextMenus().getFavouritesAddNewFolderItem().setVisible(node.isChecked());
	}
	
	protected void onTreFavouritesTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		enableFavouritesContextMenu(false, form.lyrTabs().tabPageFavourites().isHeaderVisible());
	}

	//Clear other check except the current one
	private void clearCheckedNodes(TreeNode node)
	{
		for (int i = 0; i < form.lyrTabs().tabPageFavourites().treFavourites().getNodes().size(); i++)
		{
			TreeNode nodeParent = form.lyrTabs().tabPageFavourites().treFavourites().getNodes().get(i);
			if(isNodeChecked(nodeParent, node))
			{
				nodeParent.setChecked(false);
				break;
			}
			
			for (int j = 0; j < nodeParent.getNodes().size(); j++)
			{
				TreeNode childNode = nodeParent.getNodes().get(j);
				if(isNodeChecked(childNode, node))
				{
					childNode.setChecked(false);
					break;
				}
			}
		}
	}

	//Check if the the node is checked but skip the currentNode
	private boolean isNodeChecked(TreeNode nodeParent, TreeNode currenNode)
	{
		if(currenNode == null || currenNode == null)
			return false;
		
		if(nodeParent.isChecked())
		{
			Object value = nodeParent.getValue();
			if(value != null && !value.equals(currenNode.getValue()))
				return true;
		}
		
		return false;
	}

	private UserDefinedObjectShortVo getCheckedRecord()
	{
		Object value = null;
		for (int i = 0; i < form.lyrTabs().tabPageFavourites().treFavourites().getNodes().size(); i++)
		{
			TreeNode node = form.lyrTabs().tabPageFavourites().treFavourites().getNodes().get(i);
			
			if(node != null && node.isChecked())
			{
				value = node.getValue();
				break;
			}
			
			for (int j = 0; j < node.getNodes().size(); j++)
			{
				if(node.getNodes().get(j).isChecked())
				{
					value = node.getNodes().get(j).getValue();
					break;
				}
			}
			if(value != null)
				break;
		}
		
		if(value instanceof UserDefinedObjectShortVo)
			return (UserDefinedObjectShortVo)value;
		
		return null;
	}

	protected void onImbClearSelectClick() throws PresentationLogicException
	{
		doClear();
		enableSelectBtn();
		enableFavouritesContextMenu(false, false);
	}

	protected void onImbSeachSelectClick() throws PresentationLogicException
	{
		doSearch();
		//WDEV-16542
		enableSelectBtn();
		//WDEV-18106 
		enableFavouritesContextMenu(false, form.lyrTabs().tabPageFavourites().isVisible());
		
	}
	
	private String getFavouriteFolderName()
	{
		String name = "Favourite";
		int newIndex = 0;
		for (int i = 0; i < form.lyrTabs().tabPageFavourites().treFavourites().getNodes().size(); i++)
		{
			TreeNode node = form.lyrTabs().tabPageFavourites().treFavourites().getNodes().get(i);
			if(node.getValue() == null && node.getText() != null)
			{
				int textLength = node.getText().length();
				if(textLength > 0)
				{
					char chIndex = node.getText().charAt(textLength - 1);
					if(Character.isDigit(chIndex))
					{
						int currentIndex = Integer.valueOf(Character.toString(chIndex)).intValue();
						if(currentIndex > newIndex)
							newIndex = currentIndex;
					}
				}
			}
		}		
		name = name + (newIndex + 1);
		return name;
	}
	
	//WDEV-1112 
	public void clearContextInformation()
	{
		//No IClearInfo
		if(engine.getFormName().equals(form.getForms().Assessment.UserDefinedFormSelect))
			return;
		
		super.clearContextInformation();
	}

	protected void onTreFavouritesTreeViewNodeDropped(TreeNode node, TreeNode previousParentNode) throws PresentationLogicException
	{
		if(form.getMode().equals(FormMode.VIEW))
			form.setMode(FormMode.EDIT);
		
		TreeNode 
		parent = node.getParent();
		if(parent != null)
		{
			parent.setCollapsedImage(form.getImages().Core.CollapseAll);
			parent.setExpandedImage(form.getImages().Core.ExpandAll);
		}
		
	}
	
	private void populateCategoryCombo(boolean excludeNegative)
	{
		// Exclude the negative code - Request from Analyst - JNS
		UserDefinedObjectTypeCollection voColl = LookupHelper.getUserDefinedObjectType(domain.getLookupService());
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if (excludeNegative && voColl.get(i).getId() < 0)
				continue;
			form.lyrTabs().tabPageSelect().cmbCategorySelect().newRow(voColl.get(i), voColl.get(i).toString());
		}
	}
}
