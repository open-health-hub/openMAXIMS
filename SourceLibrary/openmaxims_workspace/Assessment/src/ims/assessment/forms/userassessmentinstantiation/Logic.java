//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2277.20721)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.userassessmentinstantiation;
import ims.assessment.helper.UserAssessmentInstHelper;
import ims.core.vo.AuthoringInformationVo;
import ims.assessment.configuration.vo.UserDefinedObjectComponentRefVo;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentGroupVoCollection;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserDefinedObjectComponentVo;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PatientAssessmentStatusReasonCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	protected void onFormModeChanged()
	{
		updateControlsState();		
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		open();
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			form.setMode(FormMode.VIEW);
			open();
		}
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(isNewComponent())
			returnToParent();
		else
		{
			form.setMode(FormMode.VIEW);
			open();
		}
	}
	
	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		returnToParent();
	}
	protected void onDyngrdAnswersCellButtonClicked(ims.framework.controls.DynamicGridCell cell)
	{
		getHelper().addOrRemoveAnswer(cell);
	}
	
	public void initialize()
	{
		loadLookups();
		setInitialAssessment();
		setInitialFormMode();
	}

	public void open() throws PresentationLogicException
	{				
		PatientAssessmentVo patientAssessment = form.getLocalContext().getCurrentAssessment();
		PatientAssessmentDataVo data = getData();
		populateCombos(patientAssessment);
		populateAuthoring(patientAssessment);
		if(isAnswered(data))
		{
			UserAssessmentInstHelper helper = getHelper(form.getMode().equals(FormMode.VIEW));
			helper.populate(data, patientAssessment != null ? patientAssessment.getStatus() : null);
		}
		else
		{
			UserDefinedObjectComponentRefVo refComponent = form.getGlobalContext().Clinical.PatientAssessment.getEditedComponent();			
			UserDefinedObjectComponentVo component = domain.getComponent(refComponent);
			if(component == null)
				throw new RuntimeException("User defined object component not found");
			
			UserAssessmentInstHelper helper = getHelper();
			helper.populate(component.getUserAssessment());
		}
	}
	private void populateAuthoring(PatientAssessmentVo patientAssessment)
	{
		AuthoringInformationVo voAuthoringInfo = null;
		if(patientAssessment != null)
			voAuthoringInfo = patientAssessment.getAuthoringInformation();
		form.customControlAuthoring().setValue(voAuthoringInfo);
	}
	private boolean isAnswered(PatientAssessmentDataVo data)
	{
		return data != null && data.getAnswerGroupsIsNotNull() && data.getAnswerGroups().size() > 0;
	}
	private void makeScreenReadOnly(boolean value)
	{
		form.cmbStatus().setEnabled(!value);
		form.cmbReason().setEnabled(!value);
		form.dyngrdAnswers().setReadOnly(value);
		form.btnSave().setEnabled(!value);
		form.btnSave().setVisible(!value);
		boolean isAuthoringInfoSaved = isAuthoringInfoSaved();

		form.setcustomControlAuthoringEnabled(!value && !isAuthoringInfoSaved);
	}
	private boolean isAuthoringInfoSaved()
	{
		PatientAssessmentVo data = form.getLocalContext().getCurrentAssessment();
		return data != null && data.getAuthoringInformationIsNotNull();
	}
	private UserAssessmentInstHelper getHelper()
	{
		return getHelper(false);
	}
	private UserAssessmentInstHelper getHelper(boolean displayAnsweredOnly)
	{
		UserAssessmentInstHelper helper = new UserAssessmentInstHelper(form.dyngrdAnswers(), form.getImages().Core.QuestionSmall, form.getImages().Core.TextBox, form.getImages().Core.SmallNew, form.getImages().Core.SmallCancel, form.getImages().Core.MandatoryQuestion, false, displayAnsweredOnly);
		return helper;
	}
	private PatientAssessmentDataVo getData()
	{
		PatientAssessmentVo patientAssessment = form.getLocalContext().getCurrentAssessment();
		if(patientAssessment == null)
			return null;
		
		return patientAssessment.getAssessmentData();
	}	
	
	private void updateControlsState()
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			PatientAssessmentVo data = form.getLocalContext().getCurrentAssessment();
			if(data != null && data.getStatusIsNotNull() && data.getStatus().equals(PatientAssessmentStatusReason.COMPLETED))
				makeScreenReadOnly(true);
			else
				makeScreenReadOnly(false);
		}
				
		if(form.getMode() == FormMode.VIEW)
			form.btnUpdate().setVisible(form.cmbStatus().getValue() != null && form.cmbStatus().getValue().equals(PatientAssessmentStatusReason.COMPLETED) ? false : true);
	}

	private boolean save() throws PresentationLogicException
	{	
		if(uiErrors())
			return false;
		
		UserAssessmentInstHelper helper = getHelper();
		
		if(form.cmbStatus().getValue().equals(PatientAssessmentStatusReason.COMPLETED))
		{
			String[] herrors = helper.validateData();
			if(herrors != null && herrors.length > 0)
			{
				engine.showErrors("Validation error(s)", herrors);
				return false;
			}
		}
		
		setAnswers();			
		
		PatientAssessmentVo currentAssessment = form.getLocalContext().getCurrentAssessment();
		String[] errors = currentAssessment.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors("Validation error(s)", errors);
			return false;
		}
		
		try
		{
			currentAssessment = domain.save(currentAssessment);			
		}
		catch (StaleObjectException e) 
		{			
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.setMode(FormMode.VIEW);
			open();
			return false;
		}		
		
		form.getLocalContext().setCurrentAssessment(currentAssessment);
		return true;
	}
	
	private boolean uiErrors()
	{
		ArrayList uiErrors = new ArrayList();
		if(form.cmbStatus().getValue() == null)
		{
			uiErrors.add("Status is mandatory");
		}

		AuthoringInformationVo voAuthoring = form.customControlAuthoring().getValue();
		
		if(voAuthoring != null)
		{
			if(voAuthoring.getAuthoringDateTime() == null)
			{
				uiErrors.add("Authoring Date/Time is mandatory");
			}
			
			if(voAuthoring.getAuthoringHcp() == null)
			{
				uiErrors.add("Authoring HCP is mandatory");
			}
		}
		
		if(uiErrors.size() > 0)
		{
			String[] errors = new String[uiErrors.size()];
			uiErrors.toArray(errors);
			engine.showErrors(errors);
			return true;
		}
		
		return false;
	}
	private void setAnswers()
	{
		PatientAssessmentVo currentAssessment = form.getLocalContext().getCurrentAssessment();
		PatientAssessmentDataVo assessmentData = currentAssessment.getAssessmentData();
		UserAssessmentInstHelper helper = getHelper();
		PatientAssessmentGroupVoCollection currentAnswer = helper.getAnswers(assessmentData.getAnswerGroups());
		assessmentData.setAnswerGroups(currentAnswer);
		
		currentAssessment.setStatus(form.cmbStatus().getValue());
		currentAssessment.setStatusReason(form.cmbReason().getValue());
		
		currentAssessment.setAuthoringInformation(form.customControlAuthoring().getValue());
		
		form.getLocalContext().setCurrentAssessment(currentAssessment);
	}
	private boolean isNewComponent()
	{
		return !isAnswered(getData());
	}
	
	private void returnToParent()
	{
		engine.open(form.getForms().Assessment.PatientAssessment);		
	}
	
	protected void onCmbStatusValueChanged() throws PresentationLogicException
	{
		cmbStatusValueChanged();
	}
	
	private void cmbStatusValueChanged()
	{
		form.cmbReason().clear();
		PatientAssessmentStatusReason parentLkp = form.cmbStatus().getValue();
		PatientAssessmentStatusReasonCollection voColl = LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for(int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if(voColl.get(i).getParent() != null && voColl.get(i).getParent().equals(parentLkp))
				form.cmbReason().newRow(voColl.get(i), voColl.get(i).toString());
		}	
	}
	
	private void setInitialAssessment()
	{
		form.getLocalContext().setCurrentAssessment(domain.get(form.getGlobalContext().Clinical.PatientAssessment.getSelectedAssessment()));		
	}
	
	private void setInitialFormMode()
	{
		if(form.getGlobalContext().Clinical.PatientAssessment.getEditComponentIsNotNull() && form.getGlobalContext().Clinical.PatientAssessment.getEditComponent().booleanValue()) 
			form.setMode(FormMode.EDIT);
		else
			form.setMode(FormMode.VIEW);
	}
	
	private void loadLookups()
	{
		//Status - has to load only parents
		form.cmbStatus().clear();
		PatientAssessmentStatusReasonCollection voColl = LookupHelper.getPatientAssessmentStatusReason(domain.getLookupService());
		for(int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if(voColl.get(i).getParent() == null)
				form.cmbStatus().newRow(voColl.get(i), voColl.get(i).toString());
		}
	}
	
	private void populateCombos(PatientAssessmentVo patientAssessment)
	{
		if(patientAssessment == null)
			return;
		
		form.cmbStatus().setValue(patientAssessment.getStatus());
		if(form.cmbStatus().getValue() != null && form.cmbStatus().getValue().equals(PatientAssessmentStatusReason.NOTCOMMENCED))
			form.cmbStatus().setValue(PatientAssessmentStatusReason.INPROGRESS);
		cmbStatusValueChanged();
		form.cmbReason().setValue(patientAssessment.getStatusReason());
	}
}
