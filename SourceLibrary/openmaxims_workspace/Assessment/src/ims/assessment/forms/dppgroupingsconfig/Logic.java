//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.45 build 2426.24615)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.assessment.forms.dppgroupingsconfig;

import ims.assessment.helper.StructuredAssessmentsHelper;
import ims.assessment.vo.DPPQuestionGroupVoCollection;
import ims.assessment.vo.UserAssessmentLiteVo;
import ims.assessment.vo.UserAssessmentLiteVoCollection;
import ims.assessment.vo.UserAssessmentVo;
import ims.clinical.vo.lookups.PlanOfCareGroupingsCollection;
import ims.core.vo.AssessmentQuestionGroupVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.core.vo.lookups.UserDefinedAssessmentTypeCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGrid;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.Image;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	protected void onRecbrAssessmentsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		assessmentValueChanged();
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			assessmentValueChanged();
			form.setMode(FormMode.VIEW);
		}
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setUserAssessmentVo(null);
		form.getLocalContext().setDPPQuestionGroups(null);
				
		if(form.recbrAssessments().getValue() != null)
			assessmentValueChanged();
		
		form.setMode(FormMode.VIEW);
	}
	protected void onFormModeChanged()
	{
		enableNewUpdateButtons();
	}

	/*protected void onGrdDetailsCellValueChanged(DynamicGridCell cell)
	{
		StructuredAssessmentsHelper helper = getHelper(form.grdDetails(), form.getLocalContext().getUserAssessmentVo());
		DPPQuestionGroupVoCollection questionGroups = form.getLocalContext().getDPPQuestionGroups();
		DPPQuestionGroupVoCollection voCollection = helper.addOrRemoveQuestionFromGroup(cell, form.getLocalContext().getUserAssessmentVo(), questionGroups);
		form.getLocalContext().setDPPQuestionGroups(voCollection);
	}*/
	
	//----------------- Private Methods ------------------------------
	private void initialize()
	{
		UserAssessmentLiteVoCollection voColl = listUserAssessments();
		populateUserAssessments(voColl);
	}

	private UserAssessmentLiteVoCollection listUserAssessments()
	{
		UserDefinedAssessmentTypeCollection coll = new UserDefinedAssessmentTypeCollection();
		coll.add(UserDefinedAssessmentType.DPP);
		//coll.add(UserDefinedAssessmentType.ADDITIONALDPP);
		return domain.listUserAssessments(coll);	
	}
	
	private void populateUserAssessments(UserAssessmentLiteVoCollection voColl)
	{
		form.recbrAssessments().clear();
		for (int i = 0; i < voColl.size(); i++)
		{
			UserAssessmentLiteVo vo = voColl.get(i);
			if(vo.getActiveStatusIsNotNull() && vo.getActiveStatus().equals(PreActiveActiveInactiveStatus.INACTIVE))
				continue;
			
			form.recbrAssessments().newRow(voColl.get(i), getUserAssessmentName(vo));
		}
		if (form.recbrAssessments().getSelectedIndex() >= 0)
			assessmentValueChanged();
	}
	
	private String getUserAssessmentName(UserAssessmentLiteVo vo)
	{
		StringBuffer sb = new StringBuffer();
		if(vo != null)
		{
			if(vo.getNameIsNotNull())
			{
				sb.append(vo.getName());
			}
			
			if(vo.getActiveStatusIsNotNull())
			{
				if(sb.length() > 0)
					sb.append(",  Status: ");
				sb.append(vo.getActiveStatus());
			}
			
			if(vo.getSystemInfoIsNotNull())
			{
				if(sb.length() > 0)
					sb.append(",  Creating User: ");
				
				if(vo.getSystemInfo().getCreationUser() != null)
				{
					sb.append(vo.getSystemInfo().getCreationUser());
					
				}
				
				if(vo.getSystemInfo().getCreationDateTime() != null)
				{
					if(sb.length() > 0)
						sb.append(", ");
					sb.append(vo.getSystemInfo().getCreationDateTime());
				}
				
			}
		}
		
		return sb.toString();
	}
	private void populateGridFromData(UserAssessmentLiteVo value)
	{
		if(value != null)
		{
			UserAssessmentVo voUserAssessment = domain.getUserAssessment(value);
			populateDetailsGrid(voUserAssessment);
			form.getLocalContext().setUserAssessmentVo(voUserAssessment);
			//Refresh the value from the navigator - to avoid Stale Object Exceptions
			form.recbrAssessments().setValue(voUserAssessment);
		}
		
		enableNewUpdateButtons();
	}

	private void populateDetailsGrid(UserAssessmentVo voUserAssessment)
	{
		StructuredAssessmentsHelper helper = getHelper(form.grdDetails(), voUserAssessment);
		//resetHiddenGroups();
		
		helper.createDynamicGridColumns();
		/*boolean createHiddenColumns = helper.createDynamicGridColumns();
		if(createHiddenColumns)
			createHiddenGroupsIfDontExistAlready();*/
		DPPQuestionGroupVoCollection voColl = domain.listDPPGroupings(voUserAssessment);
		form.getLocalContext().setDPPQuestionGroups(voColl);
		helper.populateGrid(voUserAssessment, voColl);
	}
	private StructuredAssessmentsHelper getHelper(DynamicGrid dynGrid, UserAssessmentVo voUserAssessment)
	{
		int  gridType = StructuredAssessmentsHelper.DPP_GRID;
		int	viewMode 		= getViewMode(voUserAssessment);
		Image imageQuestion = form.getImages().Core.QuestionSmall;
		PreActiveActiveInactiveStatusCollection activeColl  = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		PlanOfCareGroupingsCollection groupColl = ims.clinical.vo.lookups.LookupHelper.getPlanOfCareGroupings(domain.getLookupService());
		boolean displayActive = false;//form.chkDisplayActive().getValue();
		AssessmentQuestionGroupVoCollection contextHiddenGroups = null;//form.getLocalContext().getHiddenGroups();
		
		return new StructuredAssessmentsHelper(dynGrid, engine, viewMode, gridType, imageQuestion, activeColl, groupColl, displayActive, contextHiddenGroups);
	}
	
	private int getViewMode(UserAssessmentVo voUserAssessment)
	{
		int defaultMode = StructuredAssessmentsHelper.MULTIPLE_GROUP_FLAT;
		if(voUserAssessment == null)
			return defaultMode;
		
		boolean multiGroup = voUserAssessment.getIsMultipleGroupIsNotNull() && voUserAssessment.getIsMultipleGroup().booleanValue()?true:false;
		boolean flatView   = voUserAssessment.getIsFlatViewIsNotNull() && voUserAssessment.getIsFlatView().booleanValue()?true:false;
		
		if(multiGroup == false && flatView == false)
			return StructuredAssessmentsHelper.SINGLE_GROUP_NO_FLAT; 
		else if(multiGroup == false && flatView == true)
			return StructuredAssessmentsHelper.SINGLE_GROUP_FLAT;
		else if(multiGroup == true && flatView == false)
			return StructuredAssessmentsHelper.MULTIPLE_GROUP_NO_FLAT;
		else
			return defaultMode;
	}
	
	private boolean save()
	{
		DPPQuestionGroupVoCollection voDPPQuestionsGroupColl = form.getLocalContext().getDPPQuestionGroups();
		voDPPQuestionsGroupColl = populateDataFromScreen(voDPPQuestionsGroupColl);		
		
		if(voDPPQuestionsGroupColl != null && voDPPQuestionsGroupColl.size() > 0)
		{
			String[] errors = voDPPQuestionsGroupColl.validate();
			if(errors != null)
			{
				engine.showErrors(errors);
				return false;
			}
			
			try
			{
				domain.saveDPPQuestionGroupVoCollection(voDPPQuestionsGroupColl);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
		}
		else
		{
			engine.showErrors(new String[]{"Assessment Questions are mandatory"});
			return false;
		}
		
		return true;
	}
	
	private void assessmentValueChanged()
	{
		UserAssessmentLiteVo value = form.recbrAssessments().getValue();
		if(value != null)
			populateGridFromData(value);
		else
			engine.showMessage("Please select an User Assessment");
	}
	private void enableNewUpdateButtons()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			boolean hasDPP = form.getLocalContext().getDPPQuestionGroupsIsNotNull() && form.getLocalContext().getDPPQuestionGroups().size() > 0;
			boolean enableNew = form.recbrAssessments().getValue() != null && !hasDPP;
			boolean enableUpdate = form.recbrAssessments().getValue() != null && hasDPP;
			form.btnNew().setVisible(enableNew);
			form.btnUpdate().setVisible(enableUpdate);
		}
	}

	private DPPQuestionGroupVoCollection populateDataFromScreen(DPPQuestionGroupVoCollection voDPPQuestionsGroupColl)
	{
		StructuredAssessmentsHelper helper = getHelper(form.grdDetails(), form.getLocalContext().getUserAssessmentVo());
		return helper.getDataFromGrid(voDPPQuestionsGroupColl, form.getLocalContext().getUserAssessmentVo());
	}
	//----------------------------------------------------------------
}
