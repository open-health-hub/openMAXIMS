//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.domain.base.impl;

import ims.domain.impl.DomainImpl;

public abstract class BaseEventConfigurationImpl extends DomainImpl implements ims.pathways.domain.EventConfiguration, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unused")
	public void validatelistExternalEventMappingsByCriteria(ims.pathways.vo.ExternalEventMappingVo filter)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistRTTEvents(ims.pathways.vo.RTTEventVo rttEventVo)
	{
	}

	@SuppressWarnings("unused")
	public void validatesave(ims.pathways.vo.EventVo record, ims.pathways.vo.EventTargetVoCollection eventTargets, ims.pathways.vo.EventExternalEventMappingVoCollection externalToBeAdded, ims.pathways.vo.EventExternalEventMappingVoCollection externalToBeDeleted, ims.pathways.vo.EventRTTEventVoCollection rttToBeAdded, ims.pathways.vo.EventRTTEventVoCollection rttToBeDeleted)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistTargetByCriteria(ims.pathways.vo.TargetConfigurationShortVo filter)
	{
	}

	@SuppressWarnings("unused")
	public void validategetNameByProviderSystems(ims.core.admin.vo.ProviderSystemRefVo rttEventRefVo)
	{
	}

	@SuppressWarnings("unused")
	public void validategetEvent(ims.pathways.configuration.vo.EventRefVo voRef)
	{
	}

	@SuppressWarnings("unused")
	public void validatelist16x16Icons(String name)
	{
	}

	@SuppressWarnings("unused")
	public void validategetRTTEventByPASCode(String code)
	{
	}

	@SuppressWarnings("unused")
	public void validategetEventTargetsByEvent(ims.pathways.configuration.vo.EventRefVo voRef)
	{
	}

	@SuppressWarnings("unused")
	public void validategetEventMappingsByEventAndStatus(ims.pathways.configuration.vo.EventRefVo voRef, ims.core.vo.lookups.PreActiveActiveInactiveStatus status)
	{
	}

	@SuppressWarnings("unused")
	public void validategetRTTByEventAndStatus(ims.pathways.configuration.vo.EventRefVo voRef, ims.core.vo.lookups.PreActiveActiveInactiveStatus status)
	{
	}

	@SuppressWarnings("unused")
	public void validategetEventRTTEvent(ims.pathways.configuration.vo.EventRefVo voRef, ims.core.vo.lookups.PreActiveActiveInactiveStatus status)
	{
		if(voRef == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'voRef' of type 'ims.pathways.configuration.vo.EventRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetEventExternalEventMapping(ims.pathways.configuration.vo.EventRefVo voRef, ims.core.vo.lookups.PreActiveActiveInactiveStatus status)
	{
		if(voRef == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'voRef' of type 'ims.pathways.configuration.vo.EventRefVo' cannot be null.");
	}
}
