//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.forms.externaleventmappingsconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabEventMappingDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDetailComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.pathways.vo.lookups.PathwaysDetail value)
				{
					return super.control.removeRow(value);
				}
				public ims.pathways.vo.lookups.PathwaysDetail getValue()
				{
					return (ims.pathways.vo.lookups.PathwaysDetail)super.control.getValue();
				}
				public void setValue(ims.pathways.vo.lookups.PathwaysDetail value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbGroupComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.pathways.vo.lookups.PathwaysGroup value)
				{
					return super.control.removeRow(value);
				}
				public ims.pathways.vo.lookups.PathwaysGroup getValue()
				{
					return (ims.pathways.vo.lookups.PathwaysGroup)super.control.getValue();
				}
				public void setValue(ims.pathways.vo.lookups.PathwaysGroup value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbProviderComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.ProviderSystemVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.ProviderSystemVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.ProviderSystemVo getValue()
				{
					return (ims.ocrr.vo.ProviderSystemVo)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.ProviderSystemVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 424, 16, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 96, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Detail :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Group :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Provider :", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 360, 96, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 360, 56, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 424, 40, 368, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 88, 96, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbDetailTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbDetailTemp);
				cmbDetailComboBox cmbDetail = (cmbDetailComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDetailComboBox.class, m_cmbDetailTemp);
				super.addComboBox(cmbDetail);
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 88, 56, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbGroupTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbGroupTemp);
				cmbGroupComboBox cmbGroup = (cmbGroupComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGroupComboBox.class, m_cmbGroupTemp);
				super.addComboBox(cmbGroup);
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 88, 16, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbProviderTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbProviderTemp);
				cmbProviderComboBox cmbProvider = (cmbProviderComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProviderComboBox.class, m_cmbProviderTemp);
				super.addComboBox(cmbProvider);
			}

			public TextBox txtDetail()
			{
				return (TextBox)super.getControl(4);
			}
			public TextBox txtGroup()
			{
				return (TextBox)super.getControl(5);
			}
			public TextBox txtDescription()
			{
				return (TextBox)super.getControl(6);
			}
			public cmbDetailComboBox cmbDetail()
			{
				return (cmbDetailComboBox)super.getComboBox(0);
			}
			public cmbGroupComboBox cmbGroup()
			{
				return (cmbGroupComboBox)super.getComboBox(1);
			}
			public cmbProviderComboBox cmbProvider()
			{
				return (cmbProviderComboBox)super.getComboBox(2);
			}
		}
		public static class tabEventMappingSpecialtyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.Specialty value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.Specialty value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.Specialty getValue()
				{
					return (ims.core.vo.lookups.Specialty)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.Specialty value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdSpecialtyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSpecialtyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setCoImgReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isCoImgReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showCoImgOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getCoImg()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setCoImg(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellCoImgTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColConsultantReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColConsultantReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColConsultantOpened()
				{
					super.row.showOpened(1);
				}
				public ims.framework.controls.GridMutableComboBox getColConsultant()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 1);
				}
				public void setCellColConsultantTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColClinicCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColClinicCodeReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColClinicCodeOpened()
				{
					super.row.showOpened(2);
				}
				public String getColClinicCode()
				{
					return (String)super.row.get(2);
				}
				public void setColClinicCode(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColClinicCodeTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.pathways.vo.ExternalEventMappingVo getValue()
				{
					return (ims.pathways.vo.ExternalEventMappingVo)super.row.getValue();
				}
				public void setValue(ims.pathways.vo.ExternalEventMappingVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSpecialtyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSpecialtyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSpecialtyRow get(int index)
				{
					return new grdSpecialtyRow(super.collection.get(index));
				}
				public grdSpecialtyRow newRow()
				{
					return new grdSpecialtyRow(super.collection.newRow());
				}
				public grdSpecialtyRow newRow(boolean autoSelect)
				{
					return new grdSpecialtyRow(super.collection.newRow(autoSelect));
				}
				public grdSpecialtyRow newRowAt(int index)
				{
					return new grdSpecialtyRow(super.collection.newRowAt(index));
				}
				public grdSpecialtyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSpecialtyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSpecialtyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.pathways.vo.ExternalEventMappingVoCollection getValues()
				{
					ims.pathways.vo.ExternalEventMappingVoCollection listOfValues = new ims.pathways.vo.ExternalEventMappingVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.pathways.vo.ExternalEventMappingVo getValue()
				{
					return (ims.pathways.vo.ExternalEventMappingVo)super.grid.getValue();
				}
				public void setValue(ims.pathways.vo.ExternalEventMappingVo value)
				{
					super.grid.setValue(value);
				}
				public grdSpecialtyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSpecialtyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSpecialtyRowCollection getRows()
				{
					return new grdSpecialtyRowCollection(super.grid.getRows());
				}
				public grdSpecialtyRow getRowByValue(ims.pathways.vo.ExternalEventMappingVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSpecialtyRow(row);
				}
				public void setCoImgHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getCoImgHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColConsultantHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColConsultantHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColClinicCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColClinicCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty :", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 88, 16, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbSpecialtyTemp);
				cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
				super.addComboBox(cmbSpecialty);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 384, 120, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSpecialtyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Pathways.contextMenuExternalEventMappingsSpecialty, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSpecialtyTemp);
				grdSpecialtyGrid grdSpecialty = (grdSpecialtyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecialtyGrid.class, m_grdSpecialtyTemp);
				grdSpecialty.addImageColumn(" ", 0, 0, 20, true, 0);
				grdSpecialty.addMutableComboBoxColumn("Consultant", 0, 0, 250, false, true, true, false, true, true, -1);
				grdSpecialty.addStringColumn("Clinic Code", 0, 0, -1, false, false, 0, 10, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSpecialty);
			}

			public cmbSpecialtyComboBox cmbSpecialty()
			{
				return (cmbSpecialtyComboBox)super.getComboBox(0);
			}
			public grdSpecialtyGrid grdSpecialty()
			{
				return (grdSpecialtyGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 376, 816, 200, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabEventMappingDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Event Mapping Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabEventMappingDetailsContainer m_tabEventMappingDetailsContainer = (tabEventMappingDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEventMappingDetailsContainer.class, m_tabEventMappingDetails, factory);
			super.addContainer(m_tabEventMappingDetails, m_tabEventMappingDetailsContainer);
			ims.framework.utils.SizeInfo m_tabEventMappingDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 200);
			ims.framework.utils.SizeInfo m_tabEventMappingDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
			m_tabEventMappingDetailsContainer.setContext(form, appForm, m_tabEventMappingDetails, loader, form_images_local, contextMenus, startControlID, m_tabEventMappingDetailsDesignSize, m_tabEventMappingDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 376, 816, 200, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabEventMappingSpecialty = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Event Mapping Specialty", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabEventMappingSpecialtyContainer m_tabEventMappingSpecialtyContainer = (tabEventMappingSpecialtyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEventMappingSpecialtyContainer.class, m_tabEventMappingSpecialty, factory);
			super.addContainer(m_tabEventMappingSpecialty, m_tabEventMappingSpecialtyContainer);
			ims.framework.utils.SizeInfo m_tabEventMappingSpecialtyDesignSize = new ims.framework.utils.SizeInfo(816, 200);
			ims.framework.utils.SizeInfo m_tabEventMappingSpecialtyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
			m_tabEventMappingSpecialtyContainer.setContext(form, appForm, m_tabEventMappingSpecialty, loader, form_images_local, contextMenus, startControlID, m_tabEventMappingSpecialtyDesignSize, m_tabEventMappingSpecialtyRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabEventMappingDetails().setVisible(false);
			tabEventMappingSpecialty().setVisible(false);
		}
		public void settabEventMappingDetailsEnabled(boolean value)
		{
			tabEventMappingDetails().setEnabled(value);
		}
		public void settabEventMappingSpecialtyEnabled(boolean value)
		{
			tabEventMappingSpecialty().setEnabled(value);
		}
		public void showtabEventMappingDetails()
		{
			tabEventMappingSpecialty().setVisible(false);
			tabEventMappingDetails().setVisible(true);
		}
		public void showtabEventMappingSpecialty()
		{
			tabEventMappingDetails().setVisible(false);
			tabEventMappingSpecialty().setVisible(true);
		}

		public tabEventMappingDetailsContainer tabEventMappingDetails()
		{
			return (tabEventMappingDetailsContainer)super.layers.get(0);
		}
		public tabEventMappingSpecialtyContainer tabEventMappingSpecialty()
		{
			return (tabEventMappingSpecialtyContainer)super.layers.get(1);
		}
	}
	public static class cmbSearchProviderComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ocrr.vo.ProviderSystemVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ocrr.vo.ProviderSystemVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.ocrr.vo.ProviderSystemVo getValue()
		{
			return (ims.ocrr.vo.ProviderSystemVo)super.control.getValue();
		}
		public void setValue(ims.ocrr.vo.ProviderSystemVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSearchSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSearchDetailComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.pathways.vo.lookups.PathwaysDetail value)
		{
			return super.control.removeRow(value);
		}
		public ims.pathways.vo.lookups.PathwaysDetail getValue()
		{
			return (ims.pathways.vo.lookups.PathwaysDetail)super.control.getValue();
		}
		public void setValue(ims.pathways.vo.lookups.PathwaysDetail value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSearchGroupComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.pathways.vo.lookups.PathwaysGroup value)
		{
			return super.control.removeRow(value);
		}
		public ims.pathways.vo.lookups.PathwaysGroup getValue()
		{
			return (ims.pathways.vo.lookups.PathwaysGroup)super.control.getValue();
		}
		public void setValue(ims.pathways.vo.lookups.PathwaysGroup value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbSearchConsultantComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.MedicLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.MedicLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(95);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Pathways.contextMenuExternalEventMappingsSpecialty = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Pathways.contextMenuExternalEventMappingsSpecialtyAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Pathways.contextMenuExternalEventMappingsSpecialty.add(contextMenus.Pathways.contextMenuExternalEventMappingsSpecialtyAddItem);
		contextMenus.Pathways.contextMenuExternalEventMappingsSpecialtyRemoveItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Pathways.contextMenuExternalEventMappingsSpecialty.add(contextMenus.Pathways.contextMenuExternalEventMappingsSpecialtyRemoveItem);
		form.registerMenu(contextMenus.Pathways.contextMenuExternalEventMappingsSpecialty);
		contextMenus.Pathways.contextMenuExternalEventMappings = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Pathways.contextMenuExternalEventMappingsNewItem = factory.createMenuItem(startControlID.intValue() + 3, "New Provider", true, false, new Integer(102179), true, false);
		contextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsNewItem);
		contextMenus.Pathways.contextMenuExternalEventMappingsEditItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit Provider", true, false, new Integer(102150), true, false);
		contextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsEditItem);
		contextMenus.Pathways.contextMenuExternalEventMappingsAddItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Specialty", true, false, new Integer(103110), true, false);
		contextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsAddItem);
		contextMenus.Pathways.contextMenuExternalEventMappingsEditSpecialtyItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit Specialty", true, false, new Integer(102150), true, false);
		contextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsEditSpecialtyItem);
		contextMenus.Pathways.contextMenuExternalEventMappingsAddConsultantItem = factory.createMenuItem(startControlID.intValue() + 7, "Add Consultant", true, false, new Integer(103140), true, false);
		contextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsAddConsultantItem);
		contextMenus.Pathways.contextMenuExternalEventMappingsEditConsultantItem = factory.createMenuItem(startControlID.intValue() + 8, "Edit Consultant", true, false, new Integer(102150), true, false);
		contextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsEditConsultantItem);
		form.registerMenu(contextMenus.Pathways.contextMenuExternalEventMappings);


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 392, 64, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Provider System:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Detail:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 392, 40, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 392, 16, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic Code:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Group:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 496, 16, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(10), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 496, 64, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSearchProviderTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSearchProviderTemp);
		cmbSearchProviderComboBox cmbSearchProvider = (cmbSearchProviderComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSearchProviderComboBox.class, m_cmbSearchProviderTemp);
		super.addComboBox(cmbSearchProvider);
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 88, 64, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSearchSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSearchSpecialtyTemp);
		cmbSearchSpecialtyComboBox cmbSearchSpecialty = (cmbSearchSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSearchSpecialtyComboBox.class, m_cmbSearchSpecialtyTemp);
		super.addComboBox(cmbSearchSpecialty);
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 88, 40, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSearchDetailTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSearchDetailTemp);
		cmbSearchDetailComboBox cmbSearchDetail = (cmbSearchDetailComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSearchDetailComboBox.class, m_cmbSearchDetailTemp);
		super.addComboBox(cmbSearchDetail);
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 88, 16, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSearchGroupTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSearchGroupTemp);
		cmbSearchGroupComboBox cmbSearchGroup = (cmbSearchGroupComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSearchGroupComboBox.class, m_cmbSearchGroupTemp);
		super.addComboBox(cmbSearchGroup);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 496, 40, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbSearchConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbSearchConsultantTemp);
		qmbSearchConsultantComboBox qmbSearchConsultant = (qmbSearchConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbSearchConsultantComboBox.class, m_qmbSearchConsultantTemp);
		super.addComboBox(qmbSearchConsultant);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 104, 816, 256, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.EDITABLE, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Pathways.contextMenuExternalEventMappings, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 802, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 768, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(8);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(9);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(10);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(11);
	}
	public TextBox txtSearchClinicCode()
	{
		return (TextBox)super.getControl(12);
	}
	public cmbSearchProviderComboBox cmbSearchProvider()
	{
		return (cmbSearchProviderComboBox)super.getComboBox(0);
	}
	public cmbSearchSpecialtyComboBox cmbSearchSpecialty()
	{
		return (cmbSearchSpecialtyComboBox)super.getComboBox(1);
	}
	public cmbSearchDetailComboBox cmbSearchDetail()
	{
		return (cmbSearchDetailComboBox)super.getComboBox(2);
	}
	public cmbSearchGroupComboBox cmbSearchGroup()
	{
		return (cmbSearchGroupComboBox)super.getComboBox(3);
	}
	public qmbSearchConsultantComboBox qmbSearchConsultant()
	{
		return (qmbSearchConsultantComboBox)super.getComboBox(4);
	}
	public DynamicGrid dyngrdList()
	{
		return (DynamicGrid)super.getControl(18);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(19);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(20);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				Person = new ImageHelper(102200, "Images/Core/User-Properties-4.gif", new Integer(16), new Integer(16));
				TreeView = new ImageHelper(102206, "Images/Core/Tree View.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image Person;
			public final ims.framework.utils.Image TreeView;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Provider = new ImageHelper(116115, "Images/OCRR/system_provider.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Provider;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				MemberOfStaff = new ImageHelper(103133, "Images/Admin/User-Offline.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image MemberOfStaff;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
		public final AdminImages Admin;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_EditedRecord = new ims.framework.ContextVariable("EditedRecord", prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier + "");
			cxl_EditedRecords = new ims.framework.ContextVariable("EditedRecords", prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecords_" + componentIdentifier + "");
			cxl_ProviderVoColl = new ims.framework.ContextVariable("ProviderVoColl", prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__ProviderVoColl_" + componentIdentifier + "");
			cxl_ParentRow = new ims.framework.ContextVariable("ParentRow", prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__ParentRow_" + componentIdentifier + "");
			cxl_SelectedContextMenu = new ims.framework.ContextVariable("SelectedContextMenu", prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__SelectedContextMenu_" + componentIdentifier + "");
			cxl_ToBeRemoveColl = new ims.framework.ContextVariable("ToBeRemoveColl", prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__ToBeRemoveColl_" + componentIdentifier + "");
		}
		
		public boolean getEditedRecordIsNotNull()
		{
			return !cxl_EditedRecord.getValueIsNull(context);
		}
		public ims.pathways.vo.ExternalEventMappingVo getEditedRecord()
		{
			return (ims.pathways.vo.ExternalEventMappingVo)cxl_EditedRecord.getValue(context);
		}
		public void setEditedRecord(ims.pathways.vo.ExternalEventMappingVo value)
		{
			cxl_EditedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditedRecord = null;
		public boolean getEditedRecordsIsNotNull()
		{
			return !cxl_EditedRecords.getValueIsNull(context);
		}
		public ims.pathways.vo.ExternalEventMappingVoCollection getEditedRecords()
		{
			return (ims.pathways.vo.ExternalEventMappingVoCollection)cxl_EditedRecords.getValue(context);
		}
		public void setEditedRecords(ims.pathways.vo.ExternalEventMappingVoCollection value)
		{
			cxl_EditedRecords.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditedRecords = null;
		public boolean getProviderVoCollIsNotNull()
		{
			return !cxl_ProviderVoColl.getValueIsNull(context);
		}
		public ims.ocrr.vo.ProviderSystemVoCollection getProviderVoColl()
		{
			return (ims.ocrr.vo.ProviderSystemVoCollection)cxl_ProviderVoColl.getValue(context);
		}
		public void setProviderVoColl(ims.ocrr.vo.ProviderSystemVoCollection value)
		{
			cxl_ProviderVoColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ProviderVoColl = null;
		public boolean getParentRowIsNotNull()
		{
			return !cxl_ParentRow.getValueIsNull(context);
		}
		public DynamicGridRow getParentRow()
		{
			return (DynamicGridRow)cxl_ParentRow.getValue(context);
		}
		public void setParentRow(DynamicGridRow value)
		{
			cxl_ParentRow.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ParentRow = null;
		public boolean getSelectedContextMenuIsNotNull()
		{
			return !cxl_SelectedContextMenu.getValueIsNull(context);
		}
		public ims.pathways.vo.enums.ExternalEventMappings getSelectedContextMenu()
		{
			return (ims.pathways.vo.enums.ExternalEventMappings)cxl_SelectedContextMenu.getValue(context);
		}
		public void setSelectedContextMenu(ims.pathways.vo.enums.ExternalEventMappings value)
		{
			cxl_SelectedContextMenu.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedContextMenu = null;
		public boolean getToBeRemoveCollIsNotNull()
		{
			return !cxl_ToBeRemoveColl.getValueIsNull(context);
		}
		public ims.pathways.vo.ExternalEventMappingVoCollection getToBeRemoveColl()
		{
			return (ims.pathways.vo.ExternalEventMappingVoCollection)cxl_ToBeRemoveColl.getValue(context);
		}
		public void setToBeRemoveColl(ims.pathways.vo.ExternalEventMappingVoCollection value)
		{
			cxl_ToBeRemoveColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ToBeRemoveColl = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public PathwaysNamespace Pathways = new PathwaysNamespace();
		public final class PathwaysNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ExternalEventMappingsSpecialty implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 1;
				public static final int Remove = 2;
			}
			public void disableAllExternalEventMappingsSpecialtyMenuItems()
			{
				this.contextMenuExternalEventMappingsSpecialtyAddItem.setEnabled(false);
				this.contextMenuExternalEventMappingsSpecialtyRemoveItem.setEnabled(false);
			}
			public void hideAllExternalEventMappingsSpecialtyMenuItems()
			{
				this.contextMenuExternalEventMappingsSpecialtyAddItem.setVisible(false);
				this.contextMenuExternalEventMappingsSpecialtyRemoveItem.setVisible(false);
			}
			private Menu contextMenuExternalEventMappingsSpecialty;
			public ReadOnlyMenuItem getExternalEventMappingsSpecialtyAddItem()
			{
				return this.contextMenuExternalEventMappingsSpecialtyAddItem;
			}
			private MenuItem contextMenuExternalEventMappingsSpecialtyAddItem;
			public ReadOnlyMenuItem getExternalEventMappingsSpecialtyRemoveItem()
			{
				return this.contextMenuExternalEventMappingsSpecialtyRemoveItem;
			}
			private MenuItem contextMenuExternalEventMappingsSpecialtyRemoveItem;
			public final class ExternalEventMappings implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int New = 3;
				public static final int Edit = 4;
				public static final int Add = 5;
				public static final int EditSpecialty = 6;
				public static final int AddConsultant = 7;
				public static final int EditConsultant = 8;
			}
			public void disableAllExternalEventMappingsMenuItems()
			{
				this.contextMenuExternalEventMappingsNewItem.setEnabled(false);
				this.contextMenuExternalEventMappingsEditItem.setEnabled(false);
				this.contextMenuExternalEventMappingsAddItem.setEnabled(false);
				this.contextMenuExternalEventMappingsEditSpecialtyItem.setEnabled(false);
				this.contextMenuExternalEventMappingsAddConsultantItem.setEnabled(false);
				this.contextMenuExternalEventMappingsEditConsultantItem.setEnabled(false);
			}
			public void hideAllExternalEventMappingsMenuItems()
			{
				this.contextMenuExternalEventMappingsNewItem.setVisible(false);
				this.contextMenuExternalEventMappingsEditItem.setVisible(false);
				this.contextMenuExternalEventMappingsAddItem.setVisible(false);
				this.contextMenuExternalEventMappingsEditSpecialtyItem.setVisible(false);
				this.contextMenuExternalEventMappingsAddConsultantItem.setVisible(false);
				this.contextMenuExternalEventMappingsEditConsultantItem.setVisible(false);
			}
			private Menu contextMenuExternalEventMappings;
			public ReadOnlyMenuItem getExternalEventMappingsNewItem()
			{
				return this.contextMenuExternalEventMappingsNewItem;
			}
			private MenuItem contextMenuExternalEventMappingsNewItem;
			public ReadOnlyMenuItem getExternalEventMappingsEditItem()
			{
				return this.contextMenuExternalEventMappingsEditItem;
			}
			private MenuItem contextMenuExternalEventMappingsEditItem;
			public ReadOnlyMenuItem getExternalEventMappingsAddItem()
			{
				return this.contextMenuExternalEventMappingsAddItem;
			}
			private MenuItem contextMenuExternalEventMappingsAddItem;
			public ReadOnlyMenuItem getExternalEventMappingsEditSpecialtyItem()
			{
				return this.contextMenuExternalEventMappingsEditSpecialtyItem;
			}
			private MenuItem contextMenuExternalEventMappingsEditSpecialtyItem;
			public ReadOnlyMenuItem getExternalEventMappingsAddConsultantItem()
			{
				return this.contextMenuExternalEventMappingsAddConsultantItem;
			}
			private MenuItem contextMenuExternalEventMappingsAddConsultantItem;
			public ReadOnlyMenuItem getExternalEventMappingsEditConsultantItem()
			{
				return this.contextMenuExternalEventMappingsEditConsultantItem;
			}
			private MenuItem contextMenuExternalEventMappingsEditConsultantItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[77];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100004-ID", "ID_ExternalEventMapping");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100004-GROUP", "Group");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100004-DETAIL", "Detail");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100004-SPECIALTY", "Specialty");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100004-CLINICCODE", "ClinicCode");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100004-DESCRIPTION", "Description");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
