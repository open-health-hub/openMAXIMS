//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.forms.rttstatuspointsconfig;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdChildRTTsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdChildRTTsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNatCodeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNatCodeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNatCodeOpened()
		{
			super.row.showOpened(0);
		}
		public Integer getcolNatCode()
		{
			return (Integer)super.row.get(0);
		}
		public void setcolNatCode(Integer value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNatCodeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolDescReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolDescReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolDescOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolDesc()
		{
			return (String)super.row.get(1);
		}
		public void setcolDesc(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolDescTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolLocCodeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolLocCodeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolLocCodeOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolLocCode()
		{
			return (String)super.row.get(2);
		}
		public void setcolLocCode(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolLocCodeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.pathways.vo.RTTStatusPointVo getValue()
		{
			return (ims.pathways.vo.RTTStatusPointVo)super.row.getValue();
		}
		public void setValue(ims.pathways.vo.RTTStatusPointVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdChildRTTsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdChildRTTsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdChildRTTsRow get(int index)
		{
			return new grdChildRTTsRow(super.collection.get(index));
		}
		public grdChildRTTsRow newRow()
		{
			return new grdChildRTTsRow(super.collection.newRow());
		}
		public grdChildRTTsRow newRow(boolean autoSelect)
		{
			return new grdChildRTTsRow(super.collection.newRow(autoSelect));
		}
		public grdChildRTTsRow newRowAt(int index)
		{
			return new grdChildRTTsRow(super.collection.newRowAt(index));
		}
		public grdChildRTTsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdChildRTTsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdChildRTTsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.pathways.vo.RTTStatusPointVoCollection getValues()
		{
			ims.pathways.vo.RTTStatusPointVoCollection listOfValues = new ims.pathways.vo.RTTStatusPointVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.pathways.vo.RTTStatusPointVo getValue()
		{
			return (ims.pathways.vo.RTTStatusPointVo)super.grid.getValue();
		}
		public void setValue(ims.pathways.vo.RTTStatusPointVo value)
		{
			super.grid.setValue(value);
		}
		public grdChildRTTsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdChildRTTsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdChildRTTsRowCollection getRows()
		{
			return new grdChildRTTsRowCollection(super.grid.getRows());
		}
		public grdChildRTTsRow getRowByValue(ims.pathways.vo.RTTStatusPointVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdChildRTTsRow(row);
		}
		public void setcolNatCodeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNatCodeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolDescHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolDescHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolLocCodeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolLocCodeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdRTTStatusPointsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdRTTStatusPointsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNatCodeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNatCodeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNatCodeOpened()
		{
			super.row.showOpened(0);
		}
		public Integer getcolNatCode()
		{
			return (Integer)super.row.get(0);
		}
		public void setcolNatCode(Integer value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNatCodeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolDescriptionReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolDescriptionOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolDescription()
		{
			return (String)super.row.get(1);
		}
		public void setcolDescription(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolDescriptionTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolLocalCodeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolLocalCodeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolLocalCodeOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolLocalCode()
		{
			return (String)super.row.get(2);
		}
		public void setcolLocalCode(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolLocalCodeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.pathways.vo.RTTStatusPointVo getValue()
		{
			return (ims.pathways.vo.RTTStatusPointVo)super.row.getValue();
		}
		public void setValue(ims.pathways.vo.RTTStatusPointVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdRTTStatusPointsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdRTTStatusPointsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdRTTStatusPointsRow get(int index)
		{
			return new grdRTTStatusPointsRow(super.collection.get(index));
		}
		public grdRTTStatusPointsRow newRow()
		{
			return new grdRTTStatusPointsRow(super.collection.newRow());
		}
		public grdRTTStatusPointsRow newRow(boolean autoSelect)
		{
			return new grdRTTStatusPointsRow(super.collection.newRow(autoSelect));
		}
		public grdRTTStatusPointsRow newRowAt(int index)
		{
			return new grdRTTStatusPointsRow(super.collection.newRowAt(index));
		}
		public grdRTTStatusPointsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdRTTStatusPointsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdRTTStatusPointsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.pathways.vo.RTTStatusPointVoCollection getValues()
		{
			ims.pathways.vo.RTTStatusPointVoCollection listOfValues = new ims.pathways.vo.RTTStatusPointVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.pathways.vo.RTTStatusPointVo getValue()
		{
			return (ims.pathways.vo.RTTStatusPointVo)super.grid.getValue();
		}
		public void setValue(ims.pathways.vo.RTTStatusPointVo value)
		{
			super.grid.setValue(value);
		}
		public grdRTTStatusPointsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdRTTStatusPointsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdRTTStatusPointsRowCollection getRows()
		{
			return new grdRTTStatusPointsRowCollection(super.grid.getRows());
		}
		public grdRTTStatusPointsRow getRowByValue(ims.pathways.vo.RTTStatusPointVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdRTTStatusPointsRow(row);
		}
		public void setcolNatCodeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNatCodeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolLocalCodeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolLocalCodeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Pathways.contextMenuRTTStatusPointConfigChildSelect = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Pathways.contextMenuRTTStatusPointConfigChildSelectNEWItem = factory.createMenuItem(startControlID.intValue() + 1, "Add/Edit Child Records", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5430001)))
			contextMenus.Pathways.contextMenuRTTStatusPointConfigChildSelect.add(contextMenus.Pathways.contextMenuRTTStatusPointConfigChildSelectNEWItem);
		contextMenus.Pathways.contextMenuRTTStatusPointConfigChildSelectREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5430002)))
			contextMenus.Pathways.contextMenuRTTStatusPointConfigChildSelect.add(contextMenus.Pathways.contextMenuRTTStatusPointConfigChildSelectREMOVEItem);
		form.registerMenu(contextMenus.Pathways.contextMenuRTTStatusPointConfigChildSelect);
		contextMenus.Pathways.contextMenuRTTSatusPointsConfig = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Pathways.contextMenuRTTSatusPointsConfigADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5380001)))
			contextMenus.Pathways.contextMenuRTTSatusPointsConfig.add(contextMenus.Pathways.contextMenuRTTSatusPointsConfigADDItem);
		contextMenus.Pathways.contextMenuRTTSatusPointsConfigEDITItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit RTT Status Point", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5380002)))
			contextMenus.Pathways.contextMenuRTTSatusPointsConfig.add(contextMenus.Pathways.contextMenuRTTSatusPointsConfigEDITItem);
		form.registerMenu(contextMenus.Pathways.contextMenuRTTSatusPointsConfig);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 352, 832, 240, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"RTT Status Point Details", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 24, 448, 180, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Subsequent RTT Status Points:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 417, 70, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Local Code:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 192, 382, 73, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Description:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 382, 88, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "National Code:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 765, 597, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 687, 597, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 597, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 112, 416, 64, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(10), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 272, 380, 560, 53, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 464, 808, 120, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdChildRTTsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Pathways.contextMenuRTTStatusPointConfigChildSelect, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdChildRTTsTemp);
		grdChildRTTsGrid grdChildRTTs = (grdChildRTTsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdChildRTTsGrid.class, m_grdChildRTTsTemp);
		grdChildRTTs.addIntColumn("National Code", 0, 0, 90, true, true, null, false, 0, true);
		grdChildRTTs.addStringColumn("Description", 0, 0, 625, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdChildRTTs.addStringColumn("Local Code", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdChildRTTs);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 338, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdRTTStatusPointsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Pathways.contextMenuRTTSatusPointsConfig, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdRTTStatusPointsTemp);
		grdRTTStatusPointsGrid grdRTTStatusPoints = (grdRTTStatusPointsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRTTStatusPointsGrid.class, m_grdRTTStatusPointsTemp);
		grdRTTStatusPoints.addIntColumn("National Code", 0, 0, 90, true, true, null, false, 0, true);
		grdRTTStatusPoints.addStringColumn("Description", 0, 0, 650, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdRTTStatusPoints.addStringColumn("Local Code", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdRTTStatusPoints);

		// IntBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 112, 380, 64, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(7);
	}
	public TextBox txtLocalCode()
	{
		return (TextBox)super.getControl(8);
	}
	public TextBox txtDescription()
	{
		return (TextBox)super.getControl(9);
	}
	public grdChildRTTsGrid grdChildRTTs()
	{
		return (grdChildRTTsGrid)super.getGrid(0);
	}
	public grdRTTStatusPointsGrid grdRTTStatusPoints()
	{
		return (grdRTTStatusPointsGrid)super.getGrid(1);
	}
	public IntBox intNatCode()
	{
		return (IntBox)super.getControl(12);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Pathways = new PathwaysForms();
		}
		public final class PathwaysForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private PathwaysForms()
			{
				RTTStatusPointSelectDialog = new LocalFormName(132122);
			}
			public final FormName RTTStatusPointSelectDialog;
		}

		public PathwaysForms Pathways;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_selectedRecord = new ims.framework.ContextVariable("selectedRecord", prefix + "_lv_Pathways.RTTStatusPointsConfig.__internal_x_context__selectedRecord_" + componentIdentifier + "");
		}
		
		public boolean getselectedRecordIsNotNull()
		{
			return !cxl_selectedRecord.getValueIsNull(context);
		}
		public ims.pathways.vo.RTTStatusPointVo getselectedRecord()
		{
			return (ims.pathways.vo.RTTStatusPointVo)cxl_selectedRecord.getValue(context);
		}
		public void setselectedRecord(ims.pathways.vo.RTTStatusPointVo value)
		{
			cxl_selectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_selectedRecord = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public PathwaysNamespace Pathways = new PathwaysNamespace();
		public final class PathwaysNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class RTTStatusPointConfigChildSelect implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 1;
				public static final int REMOVE = 2;
			}
			public void disableAllRTTStatusPointConfigChildSelectMenuItems()
			{
				this.contextMenuRTTStatusPointConfigChildSelectNEWItem.setEnabled(false);
				this.contextMenuRTTStatusPointConfigChildSelectREMOVEItem.setEnabled(false);
			}
			public void hideAllRTTStatusPointConfigChildSelectMenuItems()
			{
				this.contextMenuRTTStatusPointConfigChildSelectNEWItem.setVisible(false);
				this.contextMenuRTTStatusPointConfigChildSelectREMOVEItem.setVisible(false);
			}
			private Menu contextMenuRTTStatusPointConfigChildSelect;
			public ReadOnlyMenuItem getRTTStatusPointConfigChildSelectNEWItem()
			{
				return this.contextMenuRTTStatusPointConfigChildSelectNEWItem;
			}
			private MenuItem contextMenuRTTStatusPointConfigChildSelectNEWItem;
			public ReadOnlyMenuItem getRTTStatusPointConfigChildSelectREMOVEItem()
			{
				return this.contextMenuRTTStatusPointConfigChildSelectREMOVEItem;
			}
			private MenuItem contextMenuRTTStatusPointConfigChildSelectREMOVEItem;
			public final class RTTSatusPointsConfig implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 3;
				public static final int EDIT = 4;
			}
			public void disableAllRTTSatusPointsConfigMenuItems()
			{
				this.contextMenuRTTSatusPointsConfigADDItem.setEnabled(false);
				this.contextMenuRTTSatusPointsConfigEDITItem.setEnabled(false);
			}
			public void hideAllRTTSatusPointsConfigMenuItems()
			{
				this.contextMenuRTTSatusPointsConfigADDItem.setVisible(false);
				this.contextMenuRTTSatusPointsConfigEDITItem.setVisible(false);
			}
			private Menu contextMenuRTTSatusPointsConfig;
			public ReadOnlyMenuItem getRTTSatusPointsConfigADDItem()
			{
				return this.contextMenuRTTSatusPointsConfigADDItem;
			}
			private MenuItem contextMenuRTTSatusPointsConfigADDItem;
			public ReadOnlyMenuItem getRTTSatusPointsConfigEDITItem()
			{
				return this.contextMenuRTTSatusPointsConfigEDITItem;
			}
			private MenuItem contextMenuRTTSatusPointsConfigEDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[75];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.RTTStatusPointsConfig.__internal_x_context__selectedRecord_" + componentIdentifier, "BO-1089100012-ID", "ID_RTTStatusPoint");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.RTTStatusPointsConfig.__internal_x_context__selectedRecord_" + componentIdentifier, "BO-1089100012-NATIONALCODE", "NationalCode");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.RTTStatusPointsConfig.__internal_x_context__selectedRecord_" + componentIdentifier, "BO-1089100012-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.RTTStatusPointsConfig.__internal_x_context__selectedRecord_" + componentIdentifier, "BO-1089100012-LOCALCODE", "LocalCode");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
