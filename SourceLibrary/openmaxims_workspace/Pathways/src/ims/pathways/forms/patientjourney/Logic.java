//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.60 build 2838.16667)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.pathways.forms.patientjourney;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ReferralLiteVo;
import ims.core.vo.ReferralLiteVoCollection;
import ims.core.vo.enums.PatientJourneyAction;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.pathways.configuration.vo.PathwayRefVo;
import ims.pathways.vo.PathwayHistoryVoCollection;
import ims.pathways.vo.PathwayLiteVo;
import ims.pathways.vo.PathwayRTTCurrentStatusVo;
import ims.pathways.vo.PathwayRTTCurrentStatusVoCollection;
import ims.pathways.vo.PatientJourneyCommentsVo;
import ims.pathways.vo.PatientJourneyDummyVo;
import ims.pathways.vo.PatientJourneyEventInterfaceVo;
import ims.pathways.vo.PatientJourneyEventInterfaceVoCollection;
import ims.pathways.vo.PatientJourneyInterfaceVo;
import ims.pathways.vo.PatientJourneyJourneyTargetInterfaceVo;
import ims.pathways.vo.PatientJourneyShortVo;
import ims.pathways.vo.PatientJourneyShortVoCollection;
import ims.pathways.vo.PatientJourneyTargetInterfaceVo;
import ims.pathways.vo.PatientPathwayJourneyRefVo;
import ims.pathways.vo.PatwayHistoryDummyVo;
import ims.pathways.vo.TargetReadjustmentVoCollection;
import ims.pathways.vo.enums.TargetReadjustmentsAction;
import ims.pathways.vo.lookups.EventStatus;
import ims.vo.interfaces.IPatientJourneyEvent;
import ims.vo.interfaces.IPatientJourneyTarget;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{		
		//return to worklist?
		form.lnkReturn().setVisible(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourneyIsNotNull());
		
		//launched from worklist
		if(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourneyIsNotNull())
		{	
			displayJourney();	
		}
		else
			open();
		
		form.imbComments().setEnabled(false);
		form.imbComments().setTooltip(null);
	}
	
	private void displayJourney() throws PresentationLogicException
	{
		if(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourneyIsNotNull())
		{
			loadReferrals(false);
			ReferralLiteVo voReferral =  domain.getReferralByJourney(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney());
			form.cmbReferrals().setValue(voReferral);
			cmbReferralValueChanged();
			
			for(int i=0;i<form.cmbPatientJourney().getValues().size();i++)
			{
				if(form.cmbPatientJourney().getValues().get(i) instanceof PatientJourneyDummyVo)
				{
					if( ((PatientJourneyDummyVo)form.cmbPatientJourney().getValues().get(i)).getPatientJourneyID().equals(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney().getID_PatientPathwayJourney()))
					{
						form.cmbPatientJourney().setValue(form.cmbPatientJourney().getValues().get(i));
						break;
					}
				}
				else if(form.cmbPatientJourney().getValues().get(i) instanceof PatwayHistoryDummyVo)
				{
					if( ((PatwayHistoryDummyVo)form.cmbPatientJourney().getValues().get(i)).getPatientJourneyID().equals(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney().getID_PatientPathwayJourney()))
					{
						form.cmbPatientJourney().setValue(form.cmbPatientJourney().getValues().get(i));
						break;
					}
				}
			}
			viewSelectedJourney();
		}
		
	}
	
	@Override
	protected void onBtnViewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		viewSelectedJourney();
	}
	
	protected void onBtnSetCancerPathwayClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Load Dialog to get the CancerPathwayDate
		engine.open(form.getForms().Core.DateEntryDialog);
	}
	
	@Override
	protected void onCmbPatientJourneyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{		
		updateControlsState();
		
		//WDEV-18135
		if (form.cmbPatientJourney().getValue() == null)
		{
			form.patientJourney().clear();
		}
	}
	@Override
	protected void onCmbReferralsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		cmbReferralValueChanged();
		
		if (form.cmbReferrals().getValue() == null)
		{
			form.patientJourney().clear();
		}
	}

	private void cmbReferralValueChanged() throws PresentationLogicException
	{
		if(form.cmbReferrals().getValue() != null)
		{
			populateRTTStatus(form.cmbReferrals().getValue().getID_Referral());
			loadPatientJouneys();
		}
		else
		{
			form.getLocalContext().setbDisplayRttStatusDetailsField(false);
			updateControlsState();
		}
	}
	

	private void populateRTTStatus(Integer id_Referral)
	{
		form.txtRttCurrentStatus().setValue(null);
		form.txtRttCurrentStatus().setTooltip(" ");
		form.getLocalContext().setbDisplayRttStatusDetailsField(false);
		
		PathwayRTTCurrentStatusVoCollection rttHistory = domain.listRTTStatusHistory(id_Referral);
		
		if (Boolean.TRUE.equals(ConfigFlag.DOM.RTT_STATUS_POINT_FUNCTIONALITY.getValue()) && rttHistory != null && rttHistory.size() > 0)
		{
			if (rttHistory.get(0) != null)
				form.txtRttCurrentStatus().setValue(rttHistory.get(0).getRTTStatus().getNationalCodeIsNotNull() ?  rttHistory.get(0).getRTTStatus().getNationalCode().toString() + ". " + rttHistory.get(0).getRTTStatus().getDescription() : rttHistory.get(0).getRTTStatus().getDescription());
			String rttHistoryTooltip = formatRTTStatusHistoryTooltip(true, rttHistory.get(0));
			
    		if ( rttHistory.size() > 1)
    		{
    			rttHistoryTooltip += "RTT Status History: <br>";
    			for (int i = 1; i < rttHistory.size(); i++)
    			{    				
    				rttHistoryTooltip += formatRTTStatusHistoryTooltip(false, rttHistory.get(i));
    			}					
    		}
    		
    		form.txtRttCurrentStatus().setTooltip(rttHistoryTooltip);
    		form.getLocalContext().setbDisplayRttStatusDetailsField(true);
		}		
	}

	private String formatRTTStatusHistoryTooltip(boolean currentStatus, PathwayRTTCurrentStatusVo statusDetails)
	{	
		String tooltip = "";
		if (statusDetails != null)
		{	
    		if (Boolean.TRUE.equals(currentStatus))
    			tooltip = "RTT Current Status: <br>";
    		
    		String hcpName = statusDetails.getStatusByIsNotNull() && statusDetails.getStatusBy().getNameIsNotNull() ? statusDetails.getStatusBy().getName().toString() : "";
    		
    		String rttStatusDetails = "";
    		if (statusDetails.getRTTStatusIsNotNull())
    			rttStatusDetails = statusDetails.getRTTStatus().getNationalCodeIsNotNull() ?  statusDetails.getRTTStatus().getNationalCode().toString() + ". " + statusDetails.getRTTStatus().getDescription() : statusDetails.getRTTStatus().getDescription();
    			
    		tooltip += statusDetails.getStatusDateTime()+ " - " + hcpName + " - " + rttStatusDetails + "<br>";  
		}
  		return tooltip;
	}

	private void open() throws PresentationLogicException 
	{
		loadReferrals(true);
	}		
	private void loadReferrals(boolean searchAfterCatsReferral) throws PresentationLogicException
	{
		form.cmbReferrals().clear();
		updateControlsState();
		
		//ReferralLiteVoCollection referrals = domain.listReferrals(form.getGlobalContext().Core.getPatientShort());
		ReferralLiteVoCollection referrals = domain.listReferralWithPathways(form.getGlobalContext().Core.getPatientShort()); //wdev-14124
		if(referrals != null)
		{
			for(int x = 0; x < referrals.size(); x++)
			{
				form.cmbReferrals().newRow(referrals.get(x), referrals.get(x).toString());
			}
			
			// wdev-7327 default referral into combo if only 1
			if (referrals.size() == 1)
			{
				form.cmbReferrals().setValue(referrals.get(0));
				cmbReferralValueChanged();
			}
			
			if (Boolean.TRUE.equals(searchAfterCatsReferral) && referrals.size() > 1 && form.getGlobalContext().RefMan.getCatsReferralIsNotNull() )
			{
				form.cmbReferrals().setValue(domain.getReferralFromSelectedCatsReferral(form.getGlobalContext().RefMan.getCatsReferral().getID_CatsReferral()));
				cmbReferralValueChanged();
			}
		}
	}
	private void loadPatientJouneys() throws PresentationLogicException
	{
		form.cmbPatientJourney().clear();
		updateControlsState();
		
		PatientJourneyShortVoCollection journeys = domain.listPatientJourneyShortByReferral(form.cmbReferrals().getValue());
		
		if(journeys != null)
		{
			PatientJourneyDummyVo firstDummy=null;
			ArrayList<String> listOfPreviousPathways = new ArrayList<String>();
			
			for(int x = 0; x < journeys.size(); x++)
			{
				PatientJourneyDummyVo voDummy = new PatientJourneyDummyVo();
				if (x == 0)
					firstDummy = voDummy;
				voDummy.setPatientJourneyID(journeys.get(x).getID_PatientPathwayJourney());
				form.cmbPatientJourney().newRow(voDummy, journeys.get(x).toString());
		
				PathwayHistoryVoCollection voHistory = journeys.get(x).getPathwayHistory();
				
				for (int i = voHistory.size()-1 ; i >= 0 ; i--)
				//for (int i = 0; i < voHistory.size() ; i++)
				{
					PatwayHistoryDummyVo voPathwayDummy = new PatwayHistoryDummyVo();
					voPathwayDummy.setPatientJourneyID(voDummy.getPatientJourneyID());
					voPathwayDummy.setPathwayHistoryID(voHistory.get(i).getPathway().getID_Pathway());
					voPathwayDummy.setIterator(i);
					
					//WDEV-14576
					StringBuffer text = new StringBuffer("    ");
					text.append(voHistory.get(i).getPathway().toString());		
					text.append(voHistory.get(i).getPathway().getSysInfo().getLastupdateUser()!=null ? " - "+voHistory.get(i).getPathway().getSysInfo().getLastupdateUser():"");
					text.append(voHistory.get(i).getPathway().getSysInfo().getLastupdateDateTime()!=null? ", "+voHistory.get(i).getPathway().getSysInfo().getLastupdateDateTime():"");			
					form.cmbPatientJourney().newRow(voPathwayDummy,text.toString(),Color.Red);
					listOfPreviousPathways.add(text.toString());
				}		
			}
			
			//WDEV-17914
			if (listOfPreviousPathways.size() > 0)
			{
				String result = "";

				for (int a = 0; a < listOfPreviousPathways.size(); a++)
					result = result + listOfPreviousPathways.get(a) + "<br>";

				form.cmbPatientJourney().setTooltip(result.toString());
			}
			
			// wdev-7327 - default journey into combo if only 1
			if (journeys.size()== 1 && firstDummy != null)
			{
				form.cmbPatientJourney().setValue(firstDummy);
				onCmbPatientJourneyValueChanged();
			}
			
		}
	}
	
	private void updateControlsState()
	{
		boolean referralSelected = form.cmbReferrals().getValue() != null;
		if(!referralSelected)
			form.cmbPatientJourney().clear();
		
		boolean journeySelected = form.cmbPatientJourney().getValue() != null;
		
		form.cmbPatientJourney().setEnabled(referralSelected);		
		form.btnView().setEnabled(journeySelected);
		form.imbComments().setEnabled(journeySelected);
		if (!journeySelected) 
		{ 
			form.imbComments().setTooltip(null);
			form.btnSetCancerPathway().setEnabled(false);
			form.btnSetCancerPathway().setText("Set Cancer Pathway");
		}
		
		if (referralSelected && journeySelected)
		{
			form.imbComments().setEnabled(true);
			PatientJourneyDummyVo value = (PatientJourneyDummyVo) form.cmbPatientJourney().getValue();
			
			if (value != null &&
					value.getPatientJourneyIDIsNotNull())
			{			
				PatientPathwayJourneyRefVo refVo = new PatientPathwayJourneyRefVo();
				refVo.setID_PatientPathwayJourney(value.getPatientJourneyID());
				PatientJourneyCommentsVo vo = domain.getPatientPathwayJourney(refVo);
				form.getGlobalContext().Pathways.setPatientJourneyComments(vo);
			
				if (vo != null && vo.getCommentsIsNotNull())
				{
					String comments = "";
					String[] s = vo.getComments().split("\n");
					
					for (int i = 0; i < s.length; i++) 
					{
						comments += "<li type=square>" +  s[i] +"     <br>";
					}					
					
					form.imbComments().setTooltip("<b>Comments: </b><br><br>" + comments);
					form.imbComments().setEnabledImage(form.getImages().Correspondence.CommentEnabled24);
				}
				else 
				{
					form.imbComments().setTooltip("<b>No Comments recorded</b>");
					form.imbComments().setEnabledImage(form.getImages().Correspondence.NoCommentEnabled24);
				}
				
				// WDEV-18474 set the CancerPathway button disabled if already set and set tooltip
				if (vo != null && vo.getIsCancerPathwayIsNotNull() && vo.getIsCancerPathway())
				{
					form.btnSetCancerPathway().setEnabled(false);
					form.btnSetCancerPathway().setTooltip("Cancer Pathway Date " + vo.getCancerPathwayDate());
					form.btnSetCancerPathway().setText("Cancer Pathway " + vo.getCancerPathwayDate());
				}
				else if (vo != null)
				{
					form.btnSetCancerPathway().setEnabled(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney() != null); //WDEV-18520
				}
			}			
		}	
		
		
		// WDEV-18387 
		form.txtRttCurrentStatus().setEnabled(false);
		if (form.getLocalContext().getbDisplayRttStatusDetailsFieldIsNotNull() && 
			form.getLocalContext().getbDisplayRttStatusDetailsField())
		{		
			form.txtRttCurrentStatus().setVisible(true);
			form.lblRTTCurrentStatus().setVisible(true);	
		}
		else
		{
			form.txtRttCurrentStatus().setVisible(false);
			form.lblRTTCurrentStatus().setVisible(false);
		}
			
	}
	
	private void viewSelectedJourney()
	{		

		Object value = form.cmbPatientJourney().getValue();
		
		if(value == null)
			throw new CodingRuntimeException("No Journey Selected");
		
		PatientJourneyInterfaceVo patJourney = null;
		
		if (value instanceof PatwayHistoryDummyVo)
		{
			PatientPathwayJourneyRefVo vo = new PatientPathwayJourneyRefVo();
			PathwayLiteVo voPathway = new PathwayLiteVo();
			voPathway.setID_Pathway(((PatwayHistoryDummyVo)value).getPathwayHistoryID());
			vo.setID_PatientPathwayJourney(((PatientJourneyDummyVo)value).getPatientJourneyID());
			patJourney = domain.getPatientJourney(vo,voPathway);
		}
		else if (value instanceof PatientJourneyDummyVo)
		{
			PatientPathwayJourneyRefVo vo = new PatientPathwayJourneyRefVo();
			vo.setID_PatientPathwayJourney(((PatientJourneyDummyVo)value).getPatientJourneyID());
			patJourney = domain.getPatientJourney(vo, null);
		}
		PatientJourneyEventInterfaceVoCollection events = new PatientJourneyEventInterfaceVoCollection();		
		PatientJourneyEventInterfaceVoCollection allEvents = (PatientJourneyEventInterfaceVoCollection) patJourney.getJourneyEvents().clone();
		
		//Manage virtual events
		if (patJourney.getJourneyEventsIsNotNull())
		{
			for (int i = 0; i < allEvents.size(); i++)
			{
				PatientJourneyEventInterfaceVo event = allEvents.get(i);
				event.setClinicName(domain.getClinicName(event.getClinicCode()));
				if (event != null &&
						event.getIPatientJourneyEventStatus() != null &&
							event.getIPatientJourneyEventStatus().equals(EventStatus.ACTIVE) &&
								event.getIPatientJourneyEventScheduledDateTime() != null &&
									!event.getIPatientJourneyEventScheduledDateTime().equals(event.getIPatientJourneyEventDateTime()))
				{			
					PatientJourneyEventInterfaceVo virtual = (PatientJourneyEventInterfaceVo) event.clone();
					virtual.setID_PatientEvent(null);
					virtual.setEventDateTime(event.getScheduledDate());
					virtual.setScheduledDate(event.getEventDateTime());
					virtual.setIsVirtual(Boolean.TRUE);
					virtual.setClinicName(event.getClinicName());					
					events.add(virtual);
					
					if(ConfigFlag.GEN.SHOW_VIRTUAL_EVENT_ONLY.getValue()) {
						patJourney.getJourneyEvents().remove(event);
					}
					
					event.setIsVirtual(Boolean.FALSE);
				}
				else
				{
					event.setIsVirtual(Boolean.FALSE);
				}								
			}
			
			for (int i = 0; i < events.size(); i++) 
			{
				patJourney.getJourneyEvents().add(events.get(i));
			}			
		}
				
		form.patientJourney().setValue(patJourney);		
		form.getGlobalContext().Pathways.setSelectedPatientPathwayJourney(patJourney);
		form.getGlobalContext().Pathways.setSelectedPathway((PathwayRefVo)patJourney.getPathway());
		form.getGlobalContext().Pathways.setSelectedPatientJourneyTargets(patJourney.getPathwayTargets());
		updateControlsState();
	}
	
	public class AchievedDateComparator implements Comparator<Object>
	{
		public int compare(Object o1, Object o2)
		{
			DateTime achievedDate1 = null;
			DateTime achievedDate2 = null;
			
			if(o1 instanceof IPatientJourneyTarget)
			{
				IPatientJourneyTarget obj1 = ((IPatientJourneyTarget)o1);
				achievedDate1 = obj1.getIPatientJourneyTargetAchievedDate() != null ? obj1.getIPatientJourneyTargetAchievedDate() : null;
				IPatientJourneyTarget obj2 = ((IPatientJourneyTarget)o2);
				achievedDate2 = obj2.getIPatientJourneyTargetAchievedDate() != null ? obj2.getIPatientJourneyTargetAchievedDate() : null;
			}
			
			if(o1 instanceof IPatientJourneyEvent)
			{
				IPatientJourneyEvent obj1 = ((IPatientJourneyEvent)o1);			
				achievedDate1 = obj1.getIPatientJourneyEventDateTime() != null ? obj1.getIPatientJourneyEventDateTime() : null;
				IPatientJourneyEvent obj2 = ((IPatientJourneyEvent)o2);
				achievedDate2 = obj2.getIPatientJourneyEventDateTime() != null ? obj2.getIPatientJourneyEventDateTime() : null;
			}			
			
			if(achievedDate1 != null)
				return achievedDate1.compareTo(achievedDate2);
			 
			if(achievedDate2 != null)
				return achievedDate2.compareTo(achievedDate1);
						
			return 0;
		}
	}
	
	@Override
	protected void onPatientJourneyValueChanged() throws PresentationLogicException 
	{
		if (form.patientJourney().getLastAction() == null)
			return;
		if (form.patientJourney().getLastAction().equals(PatientJourneyAction.ADDEVENTTOTARGET))
		{
			//create new event form requires patientjourneytargetvo
			if(form.patientJourney().getSelectedJourneyTarget() instanceof PatientJourneyTargetInterfaceVo)
				form.getGlobalContext().Pathways.setSelectedPatientJourneyTarget(domain.getPatientJourneyTarget((PatientJourneyTargetInterfaceVo) form.patientJourney().getSelectedJourneyTarget()));
			
			engine.open(form.getForms().Pathways.CreateNewEvent);
		}
		else if (form.patientJourney().getLastAction().equals(PatientJourneyAction.CREATENEWEVENT))
		{
			//make sure following is set and clear setSelectedPatientJourneyTarget gc
		/*	form.getGlobalContext().Pathways.getPatientJourneySelectedPathwayPathway()*/

			PatientPathwayJourneyRefVo vo = new PatientJourneyShortVo();
			if (form.cmbPatientJourney().getValue() instanceof PatientJourneyDummyVo)
			{
				vo.setID_PatientPathwayJourney(((PatientJourneyDummyVo)form.cmbPatientJourney().getValue()).getPatientJourneyID());
			}
			else if (form.cmbPatientJourney().getValue() instanceof PatwayHistoryDummyVo)
			{
				vo.setID_PatientPathwayJourney(((PatwayHistoryDummyVo)form.cmbPatientJourney().getValue()).getPatientJourneyID());
			}
			
			form.getGlobalContext().Pathways.setSelectedPatientPathwayJourney(vo);
			form.getGlobalContext().Pathways.setSelectedPatientJourneyTarget(null);
			engine.open(form.getForms().Pathways.CreateNewEvent);
			
		}
		else if (form.patientJourney().getLastAction().equals(PatientJourneyAction.CREATENEWPATHWAY))
		{
			PatientPathwayJourneyRefVo vo = new PatientJourneyShortVo();
			if (form.cmbPatientJourney().getValue() instanceof PatientJourneyDummyVo)
			{
				vo.setID_PatientPathwayJourney(((PatientJourneyDummyVo)form.cmbPatientJourney().getValue()).getPatientJourneyID());
			}
			else if (form.cmbPatientJourney().getValue() instanceof PatwayHistoryDummyVo)
			{
				vo.setID_PatientPathwayJourney(((PatwayHistoryDummyVo)form.cmbPatientJourney().getValue()).getPatientJourneyID());
			}
			
			form.getGlobalContext().Pathways.setSelectedPatientPathwayJourney(vo);
			
			engine.open(form.getForms().Pathways.CreateNewPathway);
			
		}
		else if (form.patientJourney().getLastAction().equals(PatientJourneyAction.VIEWCLOCKHISTORY))
		{
			PatientPathwayJourneyRefVo vo = new PatientJourneyShortVo();
			if (form.cmbPatientJourney().getValue() instanceof PatientJourneyDummyVo)
			{
				vo.setID_PatientPathwayJourney(((PatientJourneyDummyVo)form.cmbPatientJourney().getValue()).getPatientJourneyID());
			}
			else if (form.cmbPatientJourney().getValue() instanceof PatwayHistoryDummyVo)
			{
				vo.setID_PatientPathwayJourney(((PatwayHistoryDummyVo)form.cmbPatientJourney().getValue()).getPatientJourneyID());
			}
			
			form.getGlobalContext().Pathways.setSelectedPatientPathwayJourney(vo);
			engine.open(form.getForms().Pathways.PatientJourneyClock);
		}
		else if (form.patientJourney().getLastAction().equals(PatientJourneyAction.ADDREADJUSTMENT))
		{			
			PatientJourneyJourneyTargetInterfaceVo a = (PatientJourneyJourneyTargetInterfaceVo) form.patientJourney().getSelectedPatientJourneyEventTarget();
 			form.getLocalContext().setPatientJourneyTargetInterface(a);
			TargetReadjustmentVoCollection targetReadjustments = null;
			if (a != null)
				targetReadjustments = a.getReadjustments();			
			form.getGlobalContext().Pathways.setTargetReadjustments(targetReadjustments);
			form.getGlobalContext().Pathways.setTargetReadjustmentsAction(TargetReadjustmentsAction.ADDREADJUSTMENT);
			engine.open(form.getForms().Pathways.TargetReadjustment, true, true);			
		}
		else if (form.patientJourney().getLastAction().equals(PatientJourneyAction.EDITREADJUSTMENT))
		{			
			PatientJourneyJourneyTargetInterfaceVo a = (PatientJourneyJourneyTargetInterfaceVo) form.patientJourney().getSelectedPatientJourneyEventTarget();
			form.getLocalContext().setPatientJourneyTargetInterface(a);
			TargetReadjustmentVoCollection targetReadjustments = null;
			if (a != null)
				targetReadjustments = a.getReadjustments();
			form.getGlobalContext().Pathways.setTargetReadjustments(targetReadjustments);			
			form.getGlobalContext().Pathways.setTargetReadjustmentsAction(TargetReadjustmentsAction.EDITREADJUSTMENT);
			engine.open(form.getForms().Pathways.TargetReadjustment, true, true);			
		}		
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if ((formName.equals(form.getForms().Pathways.CreateNewPathway)) && (result.equals(DialogResult.OK)))
		{
			cmbReferralValueChanged();
			PatientJourneyDummyVo voDummy = new PatientJourneyDummyVo();
			PatientPathwayJourneyRefVo current = form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney();
			voDummy.setPatientJourneyID(current.getID_PatientPathwayJourney());
			form.cmbPatientJourney().setValue(voDummy);
			onBtnViewClick();
		}
		// WDEV-18474
		if ((formName.equals(form.getForms().Core.DateEntryDialog)) && (result.equals(DialogResult.OK)))
		{
			// Get the date that was recorded
			try 
			{
				domain.saveCancerPathway(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney(), form.getGlobalContext().Core.getGenericDate());
			} 
			catch (StaleObjectException e) 
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			form.btnSetCancerPathway().setEnabled(false);
			form.btnSetCancerPathway().setTooltip("Cancer Pathway - " + form.getGlobalContext().Core.getGenericDate());
			form.btnSetCancerPathway().setText("Cancer Pathway " + form.getGlobalContext().Core.getGenericDate());
		}
		if ((formName.equals(form.getForms().Pathways.CreateNewEvent)) && (result.equals(DialogResult.OK)))
		{
			cmbReferralValueChanged();
			PatientJourneyDummyVo voDummy = new PatientJourneyDummyVo();
			PatientPathwayJourneyRefVo current = form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney();
			voDummy.setPatientJourneyID(current.getID_PatientPathwayJourney());
			form.cmbPatientJourney().setValue(voDummy);
			onBtnViewClick();
		}
		if ((formName.equals(form.getForms().Pathways.TargetReadjustment)) && (result.equals(DialogResult.OK)))
		{
			TargetReadjustmentVoCollection targetReadjustments = form.getGlobalContext().Pathways.getTargetReadjustments();
			PatientJourneyJourneyTargetInterfaceVo patientJourneyTarget = form.getLocalContext().getPatientJourneyTargetInterface();
			
			if (patientJourneyTarget == null)
				return;
			
			patientJourneyTarget.setReadjustments(targetReadjustments);
			patientJourneyTarget.setHasReadjustments(Boolean.TRUE);
			String[] errors = patientJourneyTarget.validate();
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);	
				return;
			}
			
			try 
			{				
				domain.save(patientJourneyTarget);
			} 
			catch (StaleObjectException e) 
			{			
				e.printStackTrace();				
			}
		}
		
		updateControlsState();
		onBtnViewClick();
	}

	protected void onLnkReturnClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Pathways.Worklist);
	}

	protected void onImbCommentsClick() throws PresentationLogicException 
	{
 		engine.open(form.getForms().Pathways.PatientJourneyComments);
	}	
}
