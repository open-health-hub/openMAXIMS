//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Neil McAnaspie using IMS Development Environment (version 1.60 build 2876.30621)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.pathways.forms.patientjourneyclock;

import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.enumerations.DialogResult;
import ims.pathways.forms.patientjourneyclock.GenForm.grdClockHistoryRow;
import ims.pathways.vo.PathwayClockVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			populateListControl(domain.listPatientJourneyClockHistory(form.getGlobalContext().Pathways.getSelectedPatientPathwayJourney()));
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
	}
	private void populateListControl(PathwayClockVoCollection voClockColl)
	{
		form.grdClockHistory().getRows().clear();
		if (voClockColl != null)
		{
			for (int i = 0 ; i < voClockColl.size() ; i++)
			{
				grdClockHistoryRow row = form.grdClockHistory().getRows().newRow();
				row.setColExtClock(voClockColl.get(i).getExtClockNameIsNotNull() ? voClockColl.get(i).getExtClockName() : "");
				row.setColStartDate(voClockColl.get(i).getStartDateIsNotNull() ? voClockColl.get(i).getStartDate().toString() : "");
				row.setColEndDate(voClockColl.get(i).getStopDateIsNotNull() ? voClockColl.get(i).getStopDate().toString() : "");
			}
		}
		
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
