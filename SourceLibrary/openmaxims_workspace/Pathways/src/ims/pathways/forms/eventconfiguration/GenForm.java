//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.forms.eventconfiguration;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrTargetsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabExternalMappingsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdExternalEventMappingsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdExternalEventMappingsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColImageReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColImageReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColImageOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColImage(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.framework.utils.Image getColImage()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setColImage(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellColImageTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColProviderSystemReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColProviderSystemReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColProviderSystemOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColProviderSystem(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColProviderSystem()
				{
					return (String)super.row.get(1);
				}
				public void setColProviderSystem(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColProviderSystemTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColGroupReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColGroupReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColGroupOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColGroup(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColGroup()
				{
					return (String)super.row.get(2);
				}
				public void setColGroup(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColGroupTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColDetailReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColDetailReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColDetailOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColDetail(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColDetail()
				{
					return (String)super.row.get(3);
				}
				public void setColDetail(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColDetailTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColSpecialtyReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColSpecialtyReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColSpecialtyOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColSpecialty(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColSpecialty()
				{
					return (String)super.row.get(4);
				}
				public void setColSpecialty(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColSpecialtyTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColConsultantReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColConsultantReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColConsultantOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColConsultant(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColConsultant()
				{
					return (String)super.row.get(5);
				}
				public void setColConsultant(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColConsultantTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColClinicCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColClinicCodeReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColClinicCodeOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColClinicCode(String value)
				{
					super.row.setTooltip(6, value);
				}
				public String getColClinicCode()
				{
					return (String)super.row.get(6);
				}
				public void setColClinicCode(String value)
				{
					super.row.set(6, value);
				}
				public void setCellColClinicCodeTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public void setColDescriptionReadOnly(boolean value)
				{
					super.row.setReadOnly(7, value);
				}
				public boolean isColDescriptionReadOnly()
				{
					return super.row.isReadOnly(7);
				}
				public void showColDescriptionOpened()
				{
					super.row.showOpened(7);
				}
				public void setTooltipForColDescription(String value)
				{
					super.row.setTooltip(7, value);
				}
				public String getColDescription()
				{
					return (String)super.row.get(7);
				}
				public void setColDescription(String value)
				{
					super.row.set(7, value);
				}
				public void setCellColDescriptionTooltip(String value)
				{
					super.row.setTooltip(7, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(8, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(8);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(8);
				}
				public void setTooltipForColStatus(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getColStatus()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.row.get(8);
				}
				public void setColStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.row.set(8, value, true);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(8, value);
				}
				public ims.pathways.vo.EventExternalEventMappingVo getValue()
				{
					return (ims.pathways.vo.EventExternalEventMappingVo)super.row.getValue();
				}
				public void setValue(ims.pathways.vo.EventExternalEventMappingVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdExternalEventMappingsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdExternalEventMappingsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdExternalEventMappingsRow get(int index)
				{
					return new grdExternalEventMappingsRow(super.collection.get(index));
				}
				public grdExternalEventMappingsRow newRow()
				{
					return new grdExternalEventMappingsRow(super.collection.newRow());
				}
				public grdExternalEventMappingsRow newRow(boolean autoSelect)
				{
					return new grdExternalEventMappingsRow(super.collection.newRow(autoSelect));
				}
				public grdExternalEventMappingsRow newRowAt(int index)
				{
					return new grdExternalEventMappingsRow(super.collection.newRowAt(index));
				}
				public grdExternalEventMappingsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdExternalEventMappingsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdExternalEventMappingsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.pathways.vo.EventExternalEventMappingVoCollection getValues()
				{
					ims.pathways.vo.EventExternalEventMappingVoCollection listOfValues = new ims.pathways.vo.EventExternalEventMappingVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.pathways.vo.EventExternalEventMappingVo getValue()
				{
					return (ims.pathways.vo.EventExternalEventMappingVo)super.grid.getValue();
				}
				public void setValue(ims.pathways.vo.EventExternalEventMappingVo value)
				{
					super.grid.setValue(value);
				}
				public grdExternalEventMappingsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdExternalEventMappingsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdExternalEventMappingsRowCollection getRows()
				{
					return new grdExternalEventMappingsRowCollection(super.grid.getRows());
				}
				public grdExternalEventMappingsRow getRowByValue(ims.pathways.vo.EventExternalEventMappingVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdExternalEventMappingsRow(row);
				}
				public void setColImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColProviderSystemHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColProviderSystemHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColGroupHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColGroupHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColDetailHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColDetailHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColSpecialtyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColSpecialtyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColConsultantHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColConsultantHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public void setColClinicCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColClinicCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public void setColDescriptionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(7, value);
				}
				public String getColDescriptionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(7);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(8, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(8);
				}
				public GridComboBox ColStatusComboBox()
				{
					return new GridComboBox(super.grid, 8);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 320, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdExternalEventMappingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Pathways.contextMenuEventConfigExternalSystemEvent, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdExternalEventMappingsTemp);
				grdExternalEventMappingsGrid grdExternalEventMappings = (grdExternalEventMappingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdExternalEventMappingsGrid.class, m_grdExternalEventMappingsTemp);
				grdExternalEventMappings.addImageColumn(" ", 0, 0, 20, true, 0);
				grdExternalEventMappings.addStringColumn("External System", 0, 0, 155, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdExternalEventMappings.addStringColumn("Group", 0, 0, 105, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdExternalEventMappings.addStringColumn("Detail", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdExternalEventMappings.addStringColumn("Specialty", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdExternalEventMappings.addStringColumn("Consultant", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdExternalEventMappings.addStringColumn("Clinic Code", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdExternalEventMappings.addStringColumn("Description", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdExternalEventMappings.addComboBoxColumn("Status", 0, 0, -1, false, true, true, false, true, -1);
				super.addGrid(grdExternalEventMappings);
			}

			public grdExternalEventMappingsGrid grdExternalEventMappings()
			{
				return (grdExternalEventMappingsGrid)super.getGrid(0);
			}
		}
		public static class tabRTTContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdRTTRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdRTTRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColImageReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColImageReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColImageOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColImage(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.framework.utils.Image getColImage()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setColImage(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellColImageTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColProviderSystemReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColProviderSystemReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColProviderSystemOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColProviderSystem(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.framework.controls.GridMutableComboBox getColProviderSystem()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 1);
				}
				public void setCellColProviderSystemTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColNameReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColNameReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColNameOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColName(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.framework.controls.GridMutableComboBox getColName()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 2);
				}
				public void setCellColNameTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColNatCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColNatCodeReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColNatCodeOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColNatCode(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColNatCode()
				{
					return (String)super.row.get(3);
				}
				public void setColNatCode(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColNatCodeTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColExtCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColExtCodeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColExtCodeOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColExtCode(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColExtCode()
				{
					return (String)super.row.get(4);
				}
				public void setColExtCode(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColExtCodeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColActionReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColActionReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColActionOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColAction(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.pathways.vo.lookups.RTTAction getColAction()
				{
					return (ims.pathways.vo.lookups.RTTAction)super.row.get(5);
				}
				public void setColAction(ims.pathways.vo.lookups.RTTAction value)
				{
					super.row.set(5, value, true);
				}
				public void setCellColActionTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(6, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(6);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(6);
				}
				public void setTooltipForColStatus(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getColStatus()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.row.get(6);
				}
				public void setColStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.row.set(6, value, true);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(6, value);
				}
				public ims.pathways.vo.EventRTTEventVo getValue()
				{
					return (ims.pathways.vo.EventRTTEventVo)super.row.getValue();
				}
				public void setValue(ims.pathways.vo.EventRTTEventVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdRTTRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdRTTRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdRTTRow get(int index)
				{
					return new grdRTTRow(super.collection.get(index));
				}
				public grdRTTRow newRow()
				{
					return new grdRTTRow(super.collection.newRow());
				}
				public grdRTTRow newRow(boolean autoSelect)
				{
					return new grdRTTRow(super.collection.newRow(autoSelect));
				}
				public grdRTTRow newRowAt(int index)
				{
					return new grdRTTRow(super.collection.newRowAt(index));
				}
				public grdRTTRow newRowAt(int index, boolean autoSelect)
				{
					return new grdRTTRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdRTTGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.pathways.vo.EventRTTEventVoCollection getValues()
				{
					ims.pathways.vo.EventRTTEventVoCollection listOfValues = new ims.pathways.vo.EventRTTEventVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.pathways.vo.EventRTTEventVo getValue()
				{
					return (ims.pathways.vo.EventRTTEventVo)super.grid.getValue();
				}
				public void setValue(ims.pathways.vo.EventRTTEventVo value)
				{
					super.grid.setValue(value);
				}
				public grdRTTRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdRTTRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdRTTRowCollection getRows()
				{
					return new grdRTTRowCollection(super.grid.getRows());
				}
				public grdRTTRow getRowByValue(ims.pathways.vo.EventRTTEventVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdRTTRow(row);
				}
				public void setColImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColProviderSystemHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColProviderSystemHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColNatCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColNatCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColExtCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColExtCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColActionHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColActionHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
				public GridComboBox ColActionComboBox()
				{
					return new GridComboBox(super.grid, 5);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(6, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(6);
				}
				public GridComboBox ColStatusComboBox()
				{
					return new GridComboBox(super.grid, 6);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 800, 320, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdRTTTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Pathways.contextMenuEventConfigExternalSystemRTT, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdRTTTemp);
				grdRTTGrid grdRTT = (grdRTTGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRTTGrid.class, m_grdRTTTemp);
				grdRTT.addImageColumn(" ", 0, 1, 20, true, 0);
				grdRTT.addMutableComboBoxColumn("External System", 0, 0, 190, false, true, true, false, false, true, -1);
				grdRTT.addMutableComboBoxColumn("Name", 0, 0, 190, false, true, true, false, false, true, -1);
				grdRTT.addStringColumn("National Code", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdRTT.addStringColumn("External System Code", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdRTT.addComboBoxColumn("Action", 0, 0, 100, true, true, false, false, true, -1);
				grdRTT.addComboBoxColumn("Status", 0, 0, -1, false, true, true, false, true, -1);
				super.addGrid(grdRTT);
			}

			public grdRTTGrid grdRTT()
			{
				return (grdRTTGrid)super.getGrid(0);
			}
		}
		public static class tabEventTargetsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 800, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Pathways.contextMenuEventTargetManagement, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdEventTargetManagement()
			{
				return (DynamicGrid)super.getControl(0);
			}
		}
		public static class tabActioningRolesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdRolesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdRolesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColImageReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColImageReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColImageOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getColImage()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setColImage(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellColImageTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColRoleReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColRoleReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColRoleOpened()
				{
					super.row.showOpened(1);
				}
				public String getColRole()
				{
					return (String)super.row.get(1);
				}
				public void setColRole(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColRoleTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.admin.vo.AppRoleShortVo getValue()
				{
					return (ims.admin.vo.AppRoleShortVo)super.row.getValue();
				}
				public void setValue(ims.admin.vo.AppRoleShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdRolesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdRolesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdRolesRow get(int index)
				{
					return new grdRolesRow(super.collection.get(index));
				}
				public grdRolesRow newRow()
				{
					return new grdRolesRow(super.collection.newRow());
				}
				public grdRolesRow newRow(boolean autoSelect)
				{
					return new grdRolesRow(super.collection.newRow(autoSelect));
				}
				public grdRolesRow newRowAt(int index)
				{
					return new grdRolesRow(super.collection.newRowAt(index));
				}
				public grdRolesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdRolesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdRolesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.admin.vo.AppRoleShortVoCollection getValues()
				{
					ims.admin.vo.AppRoleShortVoCollection listOfValues = new ims.admin.vo.AppRoleShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.admin.vo.AppRoleShortVo getValue()
				{
					return (ims.admin.vo.AppRoleShortVo)super.grid.getValue();
				}
				public void setValue(ims.admin.vo.AppRoleShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdRolesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdRolesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdRolesRowCollection getRows()
				{
					return new grdRolesRowCollection(super.grid.getRows());
				}
				public grdRolesRow getRowByValue(ims.admin.vo.AppRoleShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdRolesRow(row);
				}
				public void setColImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColRoleHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColRoleHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 464, 320, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdRolesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdRolesTemp);
				grdRolesGrid grdRoles = (grdRolesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRolesGrid.class, m_grdRolesTemp);
				grdRoles.addImageColumn(" ", 0, 0, 20, true, 0);
				grdRoles.addStringColumn("Role", 0, 0, 380, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdRoles.addBoolColumn("Select", 0, 0, -1, false, false, 0, true);
				super.addGrid(grdRoles);
			}

			public grdRolesGrid grdRoles()
			{
				return (grdRolesGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 208, 824, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabExternalMappings = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Mappings external system events", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabExternalMappingsContainer m_tabExternalMappingsContainer = (tabExternalMappingsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabExternalMappingsContainer.class, m_tabExternalMappings, factory);
			super.addContainer(m_tabExternalMappings, m_tabExternalMappingsContainer);
			ims.framework.utils.SizeInfo m_tabExternalMappingsDesignSize = new ims.framework.utils.SizeInfo(824, 376);
			ims.framework.utils.SizeInfo m_tabExternalMappingsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper5.getWidth(), anchoringHelper5.getHeight());
			m_tabExternalMappingsContainer.setContext(form, appForm, m_tabExternalMappings, loader, form_images_local, contextMenus, startControlID, m_tabExternalMappingsDesignSize, m_tabExternalMappingsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 208, 824, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabRTT = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Mappings external system RTT status events", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabRTTContainer m_tabRTTContainer = (tabRTTContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRTTContainer.class, m_tabRTT, factory);
			super.addContainer(m_tabRTT, m_tabRTTContainer);
			ims.framework.utils.SizeInfo m_tabRTTDesignSize = new ims.framework.utils.SizeInfo(824, 376);
			ims.framework.utils.SizeInfo m_tabRTTRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper6.getWidth(), anchoringHelper6.getHeight());
			m_tabRTTContainer.setContext(form, appForm, m_tabRTT, loader, form_images_local, contextMenus, startControlID, m_tabRTTDesignSize, m_tabRTTRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 208, 824, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabEventTargets = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Event Target Management", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabEventTargetsContainer m_tabEventTargetsContainer = (tabEventTargetsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEventTargetsContainer.class, m_tabEventTargets, factory);
			super.addContainer(m_tabEventTargets, m_tabEventTargetsContainer);
			ims.framework.utils.SizeInfo m_tabEventTargetsDesignSize = new ims.framework.utils.SizeInfo(824, 376);
			ims.framework.utils.SizeInfo m_tabEventTargetsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper7.getWidth(), anchoringHelper7.getHeight());
			m_tabEventTargetsContainer.setContext(form, appForm, m_tabEventTargets, loader, form_images_local, contextMenus, startControlID, m_tabEventTargetsDesignSize, m_tabEventTargetsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 208, 824, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabActioningRoles = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Actioning Roles", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabActioningRolesContainer m_tabActioningRolesContainer = (tabActioningRolesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabActioningRolesContainer.class, m_tabActioningRoles, factory);
			super.addContainer(m_tabActioningRoles, m_tabActioningRolesContainer);
			ims.framework.utils.SizeInfo m_tabActioningRolesDesignSize = new ims.framework.utils.SizeInfo(824, 376);
			ims.framework.utils.SizeInfo m_tabActioningRolesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper8.getWidth(), anchoringHelper8.getHeight());
			m_tabActioningRolesContainer.setContext(form, appForm, m_tabActioningRoles, loader, form_images_local, contextMenus, startControlID, m_tabActioningRolesDesignSize, m_tabActioningRolesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabExternalMappings().setVisible(false);
			tabRTT().setVisible(false);
			tabEventTargets().setVisible(false);
			tabActioningRoles().setVisible(false);
		}
		public void settabExternalMappingsEnabled(boolean value)
		{
			tabExternalMappings().setEnabled(value);
		}
		public void settabRTTEnabled(boolean value)
		{
			tabRTT().setEnabled(value);
		}
		public void settabEventTargetsEnabled(boolean value)
		{
			tabEventTargets().setEnabled(value);
		}
		public void settabActioningRolesEnabled(boolean value)
		{
			tabActioningRoles().setEnabled(value);
		}
		public void showtabExternalMappings()
		{
			tabRTT().setVisible(false);
			tabEventTargets().setVisible(false);
			tabActioningRoles().setVisible(false);
			tabExternalMappings().setVisible(true);
		}
		public void showtabRTT()
		{
			tabExternalMappings().setVisible(false);
			tabEventTargets().setVisible(false);
			tabActioningRoles().setVisible(false);
			tabRTT().setVisible(true);
		}
		public void showtabEventTargets()
		{
			tabExternalMappings().setVisible(false);
			tabRTT().setVisible(false);
			tabActioningRoles().setVisible(false);
			tabEventTargets().setVisible(true);
		}
		public void showtabActioningRoles()
		{
			tabExternalMappings().setVisible(false);
			tabRTT().setVisible(false);
			tabEventTargets().setVisible(false);
			tabActioningRoles().setVisible(true);
		}

		public tabExternalMappingsContainer tabExternalMappings()
		{
			return (tabExternalMappingsContainer)super.layers.get(0);
		}
		public tabRTTContainer tabRTT()
		{
			return (tabRTTContainer)super.layers.get(1);
		}
		public tabEventTargetsContainer tabEventTargets()
		{
			return (tabEventTargetsContainer)super.layers.get(2);
		}
		public tabActioningRolesContainer tabActioningRoles()
		{
			return (tabActioningRolesContainer)super.layers.get(3);
		}
	}
	public static class cmbEventTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.pathways.vo.lookups.EventCreationType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.pathways.vo.lookups.EventCreationType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.pathways.vo.lookups.EventCreationType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.pathways.vo.lookups.EventCreationType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.pathways.vo.lookups.EventCreationType value)
		{
			return super.control.removeRow(value);
		}
		public ims.pathways.vo.lookups.EventCreationType getValue()
		{
			return (ims.pathways.vo.lookups.EventCreationType)super.control.getValue();
		}
		public void setValue(ims.pathways.vo.lookups.EventCreationType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbImageComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.admin.vo.AppImageVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.admin.vo.AppImageVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.admin.vo.AppImageVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.admin.vo.AppImageVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.admin.vo.AppImageVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.admin.vo.AppImageVo getValue()
		{
			return (ims.admin.vo.AppImageVo)super.control.getValue();
		}
		public void setValue(ims.admin.vo.AppImageVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Pathways.contextMenuEventConfigExternalSystemEvent = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemEventAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemEvent.add(contextMenus.Pathways.contextMenuEventConfigExternalSystemEventAddItem);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemEventRemoveItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemEvent.add(contextMenus.Pathways.contextMenuEventConfigExternalSystemEventRemoveItem);
		form.registerMenu(contextMenus.Pathways.contextMenuEventConfigExternalSystemEvent);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemRTT = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemRTTAddItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemRTT.add(contextMenus.Pathways.contextMenuEventConfigExternalSystemRTTAddItem);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemRTTRemoveItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemRTT.add(contextMenus.Pathways.contextMenuEventConfigExternalSystemRTTRemoveItem);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemRTTEditItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Pathways.contextMenuEventConfigExternalSystemRTT.add(contextMenus.Pathways.contextMenuEventConfigExternalSystemRTTEditItem);
		form.registerMenu(contextMenus.Pathways.contextMenuEventConfigExternalSystemRTT);
		contextMenus.Pathways.contextMenuEventTargetManagement = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Pathways.contextMenuEventTargetManagementAddTargetItem = factory.createMenuItem(startControlID.intValue() + 6, "Add Target", true, false, new Integer(102179), true, false);
		contextMenus.Pathways.contextMenuEventTargetManagement.add(contextMenus.Pathways.contextMenuEventTargetManagementAddTargetItem);
		contextMenus.Pathways.contextMenuEventTargetManagementAddActivateTargetItem = factory.createMenuItem(startControlID.intValue() + 7, "Add Targets in Scope", true, false, new Integer(131100), true, false);
		contextMenus.Pathways.contextMenuEventTargetManagement.add(contextMenus.Pathways.contextMenuEventTargetManagementAddActivateTargetItem);
		contextMenus.Pathways.contextMenuEventTargetManagementRemoveItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Pathways.contextMenuEventTargetManagement.add(contextMenus.Pathways.contextMenuEventTargetManagementRemoveItem);
		contextMenus.Pathways.contextMenuEventTargetManagementEditItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Pathways.contextMenuEventTargetManagement.add(contextMenus.Pathways.contextMenuEventTargetManagementEditItem);
		form.registerMenu(contextMenus.Pathways.contextMenuEventTargetManagement);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 464, 32, 376, 124, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_customControlMappingsForm = loader.loadComponent(104124, appForm, startControlID * 10 + 1000, anchoringHelper9.getSize(), instance1, startTabIndex.intValue() + 14, skipContextValidation);
		//ims.framework.Control m_customControlMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(464), new Integer(32), new Integer(376), new Integer(124), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 14), m_customControlMappingsForm, instance1 } );
		ims.framework.Control m_customControlMappingsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 14), m_customControlMappingsForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlMappingsControl);
		Menu[] menus1 = m_customControlMappingsForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Layer Clasess
		lyrTargetsLayer m_lyrTargetsLayer = (lyrTargetsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrTargetsLayer.class, this, factory);
		super.addLayer(m_lyrTargetsLayer);
		m_lyrTargetsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 136, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Event Type", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 112, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 43, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Icon - Image:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 104, 40, 344, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 104, 16, 344, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 104, 136, 344, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbEventTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbEventTypeTemp);
		cmbEventTypeComboBox cmbEventType = (cmbEventTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEventTypeComboBox.class, m_cmbEventTypeTemp);
		super.addComboBox(cmbEventType);
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 104, 112, 344, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 104, 88, 344, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbImageTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbImageTemp);
		qmbImageComboBox qmbImage = (qmbImageComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbImageComboBox.class, m_qmbImageTemp);
		super.addComboBox(qmbImage);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 192, 184, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Schedule Event", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 360, 168, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Ends Pathway", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 264, 168, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Stop Clocks", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 168, 168, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Starts Clock", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 168, 184, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Display in Patient Diary", Boolean.FALSE, null}));

		// Link Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 656, 16, 160, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to Event Search form", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.admin.forms.taxonomymappings.IComponent customControlMappings()
	{
		return (ims.admin.forms.taxonomymappings.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlMappingsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlMappingsVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlMappingsVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlMappingsEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlMappingsEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public lyrTargetsLayer lyrTargets()
	{
		return (lyrTargetsLayer)super.getLayer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(10);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(11);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(12);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(13);
	}
	public TextBox txtDesc()
	{
		return (TextBox)super.getControl(14);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(15);
	}
	public cmbEventTypeComboBox cmbEventType()
	{
		return (cmbEventTypeComboBox)super.getComboBox(0);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(1);
	}
	public qmbImageComboBox qmbImage()
	{
		return (qmbImageComboBox)super.getComboBox(2);
	}
	public CheckBox chkScheduleEvent()
	{
		return (CheckBox)super.getControl(19);
	}
	public CheckBox chkEndsPathway()
	{
		return (CheckBox)super.getControl(20);
	}
	public CheckBox chkStopClocks()
	{
		return (CheckBox)super.getControl(21);
	}
	public CheckBox chkStartsClock()
	{
		return (CheckBox)super.getControl(22);
	}
	public CheckBox chkDisplayInPatientDiary()
	{
		return (CheckBox)super.getControl(23);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(24);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Pathways = new PathwaysForms();
		}
		public final class PathwaysForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private PathwaysForms()
			{
				ExternalEventsSearchAndSelect = new LocalFormName(132109);
				EventSearchAndSelect = new LocalFormName(132103);
			}
			public final FormName ExternalEventsSearchAndSelect;
			public final FormName EventSearchAndSelect;
		}

		public PathwaysForms Pathways;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			OCRR = new OCRRImages();
			ICP = new ICPImages();
			Blackpool = new BlackpoolImages();
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Role = new ImageHelper(116114, "Images/OCRR/User-Properties.gif", new Integer(16), new Integer(16));
				Sent = new ImageHelper(116136, "Images/OCRR/Sent.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Role;
			public final ims.framework.utils.Image Sent;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				Stage = new ImageHelper(118103, "Images/ICP/VSObject_Delegate.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Stage;
		}
		public final class BlackpoolImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private BlackpoolImages()
			{
				Target = new ImageHelper(131100, "Images/Blackpool/target.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Target;
		}
		public final OCRRImages OCRR;
		public final ICPImages ICP;
		public final BlackpoolImages Blackpool;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_EditedRecord = new ims.framework.ContextVariable("EditedRecord", prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier + "");
			cxl_TargetConfigurationVoCollection = new ims.framework.ContextVariable("TargetConfigurationVoCollection", prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__TargetConfigurationVoCollection_" + componentIdentifier + "");
			cxl_EventTargetEditedRecord = new ims.framework.ContextVariable("EventTargetEditedRecord", prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EventTargetEditedRecord_" + componentIdentifier + "");
			cxl_IdTarget = new ims.framework.ContextVariable("IdTarget", prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__IdTarget_" + componentIdentifier + "");
			cxl_EventExternalEventMappingCollection = new ims.framework.ContextVariable("EventExternalEventMappingCollection", prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EventExternalEventMappingCollection_" + componentIdentifier + "");
			cxl_EventRTTEventCollection = new ims.framework.ContextVariable("EventRTTEventCollection", prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EventRTTEventCollection_" + componentIdentifier + "");
			cxl_EventExternalEventMappingOriginalCollection = new ims.framework.ContextVariable("EventExternalEventMappingOriginalCollection", prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EventExternalEventMappingOriginalCollection_" + componentIdentifier + "");
			cxl_EventRTTEventOriginalCollection = new ims.framework.ContextVariable("EventRTTEventOriginalCollection", prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EventRTTEventOriginalCollection_" + componentIdentifier + "");
		}
		
		public boolean getEditedRecordIsNotNull()
		{
			return !cxl_EditedRecord.getValueIsNull(context);
		}
		public ims.pathways.vo.EventVo getEditedRecord()
		{
			return (ims.pathways.vo.EventVo)cxl_EditedRecord.getValue(context);
		}
		public void setEditedRecord(ims.pathways.vo.EventVo value)
		{
			cxl_EditedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditedRecord = null;
		public boolean getTargetConfigurationVoCollectionIsNotNull()
		{
			return !cxl_TargetConfigurationVoCollection.getValueIsNull(context);
		}
		public ims.pathways.vo.TargetConfigurationShortVoCollection getTargetConfigurationVoCollection()
		{
			return (ims.pathways.vo.TargetConfigurationShortVoCollection)cxl_TargetConfigurationVoCollection.getValue(context);
		}
		public void setTargetConfigurationVoCollection(ims.pathways.vo.TargetConfigurationShortVoCollection value)
		{
			cxl_TargetConfigurationVoCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TargetConfigurationVoCollection = null;
		public boolean getEventTargetEditedRecordIsNotNull()
		{
			return !cxl_EventTargetEditedRecord.getValueIsNull(context);
		}
		public ims.pathways.vo.EventTargetVo getEventTargetEditedRecord()
		{
			return (ims.pathways.vo.EventTargetVo)cxl_EventTargetEditedRecord.getValue(context);
		}
		public void setEventTargetEditedRecord(ims.pathways.vo.EventTargetVo value)
		{
			cxl_EventTargetEditedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EventTargetEditedRecord = null;
		public boolean getIdTargetIsNotNull()
		{
			return !cxl_IdTarget.getValueIsNull(context);
		}
		public Integer getIdTarget()
		{
			return (Integer)cxl_IdTarget.getValue(context);
		}
		public void setIdTarget(Integer value)
		{
			cxl_IdTarget.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IdTarget = null;
		public boolean getEventExternalEventMappingCollectionIsNotNull()
		{
			return !cxl_EventExternalEventMappingCollection.getValueIsNull(context);
		}
		public ims.pathways.vo.EventExternalEventMappingVoCollection getEventExternalEventMappingCollection()
		{
			return (ims.pathways.vo.EventExternalEventMappingVoCollection)cxl_EventExternalEventMappingCollection.getValue(context);
		}
		public void setEventExternalEventMappingCollection(ims.pathways.vo.EventExternalEventMappingVoCollection value)
		{
			cxl_EventExternalEventMappingCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EventExternalEventMappingCollection = null;
		public boolean getEventRTTEventCollectionIsNotNull()
		{
			return !cxl_EventRTTEventCollection.getValueIsNull(context);
		}
		public ims.pathways.vo.EventRTTEventVoCollection getEventRTTEventCollection()
		{
			return (ims.pathways.vo.EventRTTEventVoCollection)cxl_EventRTTEventCollection.getValue(context);
		}
		public void setEventRTTEventCollection(ims.pathways.vo.EventRTTEventVoCollection value)
		{
			cxl_EventRTTEventCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EventRTTEventCollection = null;
		public boolean getEventExternalEventMappingOriginalCollectionIsNotNull()
		{
			return !cxl_EventExternalEventMappingOriginalCollection.getValueIsNull(context);
		}
		public ims.pathways.vo.EventExternalEventMappingVoCollection getEventExternalEventMappingOriginalCollection()
		{
			return (ims.pathways.vo.EventExternalEventMappingVoCollection)cxl_EventExternalEventMappingOriginalCollection.getValue(context);
		}
		public void setEventExternalEventMappingOriginalCollection(ims.pathways.vo.EventExternalEventMappingVoCollection value)
		{
			cxl_EventExternalEventMappingOriginalCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EventExternalEventMappingOriginalCollection = null;
		public boolean getEventRTTEventOriginalCollectionIsNotNull()
		{
			return !cxl_EventRTTEventOriginalCollection.getValueIsNull(context);
		}
		public ims.pathways.vo.EventRTTEventVoCollection getEventRTTEventOriginalCollection()
		{
			return (ims.pathways.vo.EventRTTEventVoCollection)cxl_EventRTTEventOriginalCollection.getValue(context);
		}
		public void setEventRTTEventOriginalCollection(ims.pathways.vo.EventRTTEventVoCollection value)
		{
			cxl_EventRTTEventOriginalCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EventRTTEventOriginalCollection = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public PathwaysNamespace Pathways = new PathwaysNamespace();
		public final class PathwaysNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class EventConfigExternalSystemEvent implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 1;
				public static final int Remove = 2;
			}
			public void disableAllEventConfigExternalSystemEventMenuItems()
			{
				this.contextMenuEventConfigExternalSystemEventAddItem.setEnabled(false);
				this.contextMenuEventConfigExternalSystemEventRemoveItem.setEnabled(false);
			}
			public void hideAllEventConfigExternalSystemEventMenuItems()
			{
				this.contextMenuEventConfigExternalSystemEventAddItem.setVisible(false);
				this.contextMenuEventConfigExternalSystemEventRemoveItem.setVisible(false);
			}
			private Menu contextMenuEventConfigExternalSystemEvent;
			public ReadOnlyMenuItem getEventConfigExternalSystemEventAddItem()
			{
				return this.contextMenuEventConfigExternalSystemEventAddItem;
			}
			private MenuItem contextMenuEventConfigExternalSystemEventAddItem;
			public ReadOnlyMenuItem getEventConfigExternalSystemEventRemoveItem()
			{
				return this.contextMenuEventConfigExternalSystemEventRemoveItem;
			}
			private MenuItem contextMenuEventConfigExternalSystemEventRemoveItem;
			public final class EventConfigExternalSystemRTT implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 3;
				public static final int Remove = 4;
				public static final int Edit = 5;
			}
			public void disableAllEventConfigExternalSystemRTTMenuItems()
			{
				this.contextMenuEventConfigExternalSystemRTTAddItem.setEnabled(false);
				this.contextMenuEventConfigExternalSystemRTTRemoveItem.setEnabled(false);
				this.contextMenuEventConfigExternalSystemRTTEditItem.setEnabled(false);
			}
			public void hideAllEventConfigExternalSystemRTTMenuItems()
			{
				this.contextMenuEventConfigExternalSystemRTTAddItem.setVisible(false);
				this.contextMenuEventConfigExternalSystemRTTRemoveItem.setVisible(false);
				this.contextMenuEventConfigExternalSystemRTTEditItem.setVisible(false);
			}
			private Menu contextMenuEventConfigExternalSystemRTT;
			public ReadOnlyMenuItem getEventConfigExternalSystemRTTAddItem()
			{
				return this.contextMenuEventConfigExternalSystemRTTAddItem;
			}
			private MenuItem contextMenuEventConfigExternalSystemRTTAddItem;
			public ReadOnlyMenuItem getEventConfigExternalSystemRTTRemoveItem()
			{
				return this.contextMenuEventConfigExternalSystemRTTRemoveItem;
			}
			private MenuItem contextMenuEventConfigExternalSystemRTTRemoveItem;
			public ReadOnlyMenuItem getEventConfigExternalSystemRTTEditItem()
			{
				return this.contextMenuEventConfigExternalSystemRTTEditItem;
			}
			private MenuItem contextMenuEventConfigExternalSystemRTTEditItem;
			public final class EventTargetManagement implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddTarget = 6;
				public static final int AddActivateTarget = 7;
				public static final int Remove = 8;
				public static final int Edit = 9;
			}
			public void disableAllEventTargetManagementMenuItems()
			{
				this.contextMenuEventTargetManagementAddTargetItem.setEnabled(false);
				this.contextMenuEventTargetManagementAddActivateTargetItem.setEnabled(false);
				this.contextMenuEventTargetManagementRemoveItem.setEnabled(false);
				this.contextMenuEventTargetManagementEditItem.setEnabled(false);
			}
			public void hideAllEventTargetManagementMenuItems()
			{
				this.contextMenuEventTargetManagementAddTargetItem.setVisible(false);
				this.contextMenuEventTargetManagementAddActivateTargetItem.setVisible(false);
				this.contextMenuEventTargetManagementRemoveItem.setVisible(false);
				this.contextMenuEventTargetManagementEditItem.setVisible(false);
			}
			private Menu contextMenuEventTargetManagement;
			public ReadOnlyMenuItem getEventTargetManagementAddTargetItem()
			{
				return this.contextMenuEventTargetManagementAddTargetItem;
			}
			private MenuItem contextMenuEventTargetManagementAddTargetItem;
			public ReadOnlyMenuItem getEventTargetManagementAddActivateTargetItem()
			{
				return this.contextMenuEventTargetManagementAddActivateTargetItem;
			}
			private MenuItem contextMenuEventTargetManagementAddActivateTargetItem;
			public ReadOnlyMenuItem getEventTargetManagementRemoveItem()
			{
				return this.contextMenuEventTargetManagementRemoveItem;
			}
			private MenuItem contextMenuEventTargetManagementRemoveItem;
			public ReadOnlyMenuItem getEventTargetManagementEditItem()
			{
				return this.contextMenuEventTargetManagementEditItem;
			}
			private MenuItem contextMenuEventTargetManagementEditItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[106];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-ID", "ID_Event");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-STATUS", "Status");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-PATIENTDIARYIMPACT", "PatientDiaryImpact");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-EVENTTYPE", "EventType");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-STARTSCLOCK", "StartsClock");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-STOPSCLOCK", "StopsClock");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-ENDSPATHWAY", "EndsPathway");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Pathway.SelectedEventLiteVo", "BO-1089100000-ISMANUALSCHEDULEDEVENT", "IsManualScheduledEvent");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Pathways.EventSearchAndSelectFilter", "BO-1089100000-ID", "ID_Event");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Pathways.EventSearchAndSelectFilter", "BO-1089100000-NAME", "Name");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Pathways.EventSearchAndSelectFilter", "BO-1089100000-DESCRIPTION", "Description");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Pathways.EventSearchAndSelectFilter", "BO-1089100000-STATUS", "Status");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Pathways.EventSearchAndSelectFilter", "BO-1089100000-PATIENTDIARYIMPACT", "PatientDiaryImpact");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Pathways.EventSearchAndSelectFilter", "BO-1089100000-EVENTTYPE", "EventType");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Pathways.EventSearchAndSelectFilter", "BO-1089100000-STARTSCLOCK", "StartsClock");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Pathways.EventSearchAndSelectFilter", "BO-1089100000-STOPSCLOCK", "StopsClock");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Pathways.EventSearchAndSelectFilter", "BO-1089100000-ENDSPATHWAY", "EndsPathway");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Pathways.EventSearchAndSelectFilter", "BO-1089100000-ISMANUALSCHEDULEDEVENT", "IsManualScheduledEvent");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100000-ID", "ID_Event");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100000-NAME", "Name");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100000-DESCRIPTION", "Description");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100000-STATUS", "Status");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100000-PATIENTDIARYIMPACT", "PatientDiaryImpact");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100000-EVENTTYPE", "EventType");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100000-STARTSCLOCK", "StartsClock");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100000-STOPSCLOCK", "StopsClock");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100000-ENDSPATHWAY", "EndsPathway");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EditedRecord_" + componentIdentifier, "BO-1089100000-ISMANUALSCHEDULEDEVENT", "IsManualScheduledEvent");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EventTargetEditedRecord_" + componentIdentifier, "BO-1089100006-ID", "ID_EventTarget");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EventTargetEditedRecord_" + componentIdentifier, "BO-1089100006-EVENT", "Event");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EventTargetEditedRecord_" + componentIdentifier, "BO-1089100006-STATUS", "Status");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EventTargetEditedRecord_" + componentIdentifier, "BO-1089100006-SETJOURNEYTARGETSTATUSTO", "SetJourneyTargetStatusTo");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Pathways.EventConfiguration.__internal_x_context__EventTargetEditedRecord_" + componentIdentifier, "BO-1089100006-SETTOINSCOPE", "SetToInScope");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
