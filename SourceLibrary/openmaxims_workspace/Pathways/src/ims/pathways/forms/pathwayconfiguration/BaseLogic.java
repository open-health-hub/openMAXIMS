//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.forms.pathwayconfiguration;

public abstract class BaseLogic extends Handlers
{
	private java.util.ArrayList lookupUsageErrors;

	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.pathways.domain.PathwayConfiguration.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.pathways.domain.PathwayConfiguration domain)
	{
		setContext(engine, form);
		this.domain = domain;
		if(domain.getLookupService().countLookupInstances(ims.pathways.vo.lookups.JourneyCountTypeCollection.class, ims.pathways.vo.lookups.JourneyCountType.class, 1321011, true) == 0)
		{
			if(lookupUsageErrors == null)
				lookupUsageErrors = new java.util.ArrayList();
			lookupUsageErrors.add("The lookup type 'JourneyCountType' (ID: 1321011) must have at least one active instance configured.");
		}
	}
	public final String[] getLookupUsageErrors()
	{
		if(lookupUsageErrors == null)
			return null;
		String[] errors = new String[lookupUsageErrors.size()];
		for(int x = 0; x < lookupUsageErrors.size(); x++)
		{
			errors[x] = (String)lookupUsageErrors.get(x);
		}
		return errors;
	}
	public void clearContextInformation()
	{
		engine.clearPatientContextInformation();
	}
	protected final void oncmbJourneyCountTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbJourneyCountType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.pathways.vo.lookups.JourneyCountType existingInstance = (ims.pathways.vo.lookups.JourneyCountType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbJourneyCountTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.pathways.vo.lookups.JourneyCountType)
		{
			ims.pathways.vo.lookups.JourneyCountType instance = (ims.pathways.vo.lookups.JourneyCountType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbJourneyCountTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.pathways.vo.lookups.JourneyCountType existingInstance = (ims.pathways.vo.lookups.JourneyCountType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbJourneyCountType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbJourneyCountTypeLookup()
	{
		this.form.cmbJourneyCountType().clear();
		ims.pathways.vo.lookups.JourneyCountTypeCollection lookupCollection = ims.pathways.vo.lookups.LookupHelper.getJourneyCountType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbJourneyCountType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbJourneyCountTypeLookupValue(int id)
	{
		ims.pathways.vo.lookups.JourneyCountType instance = ims.pathways.vo.lookups.LookupHelper.getJourneyCountTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbJourneyCountType().setValue(instance);
	}
	protected final void defaultcmbJourneyCountTypeLookupValue()
	{
		this.form.cmbJourneyCountType().setValue((ims.pathways.vo.lookups.JourneyCountType)domain.getLookupService().getDefaultInstance(ims.pathways.vo.lookups.JourneyCountType.class, engine.getFormName().getID(), ims.pathways.vo.lookups.JourneyCountType.TYPE_ID));
	}
	protected final void oncmbStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PreActiveActiveInactiveStatus)
		{
			ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PreActiveActiveInactiveStatus existingInstance = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbStatusLookup()
	{
		this.form.cmbStatus().clear();
		ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PreActiveActiveInactiveStatus instance = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbStatus().setValue(instance);
	}
	protected final void defaultcmbStatusLookupValue()
	{
		this.form.cmbStatus().setValue((ims.core.vo.lookups.PreActiveActiveInactiveStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PreActiveActiveInactiveStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PreActiveActiveInactiveStatus.TYPE_ID));
	}
	protected final void oncmbSpecialtyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbSpecialty().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSpecialtyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Specialty)
		{
			ims.core.vo.lookups.Specialty instance = (ims.core.vo.lookups.Specialty)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSpecialtyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbSpecialty().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSpecialtyLookup()
	{
		this.form.cmbSpecialty().clear();
		ims.core.vo.lookups.SpecialtyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSpecialty(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbSpecialty().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSpecialtyLookupValue(int id)
	{
		ims.core.vo.lookups.Specialty instance = ims.core.vo.lookups.LookupHelper.getSpecialtyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbSpecialty().setValue(instance);
	}
	protected final void defaultcmbSpecialtyLookupValue()
	{
		this.form.cmbSpecialty().setValue((ims.core.vo.lookups.Specialty)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Specialty.class, engine.getFormName().getID(), ims.core.vo.lookups.Specialty.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.cmbJourneyCountType().setValue(null);
		this.form.chkIsDefault().setValue(false);
		this.form.txtDescription().setValue("");
		this.form.intNumWeeks().setValue(null);
		this.form.cmbStatus().setValue(null);
		this.form.cmbSpecialty().setValue(null);
		this.form.txtName().setValue("");
	}
	protected void populateScreenFromData(ims.pathways.vo.PathwayVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.cmbJourneyCountType().setValue(value.getJourneyCountTypeIsNotNull() ? value.getJourneyCountType() : null);
		if(value.getIsDefaultIsNotNull())
			this.form.chkIsDefault().setValue(value.getIsDefault().booleanValue());
		this.form.txtDescription().setValue(value.getDescriptionIsNotNull() ? value.getDescription(): null);
		this.form.intNumWeeks().setValue(value.getNumWeeksIsNotNull() ? value.getNumWeeks() : null);
		this.form.cmbStatus().setValue(value.getStatusIsNotNull() ? value.getStatus() : null);
		this.form.cmbSpecialty().setValue(value.getSpecialtyIsNotNull() ? value.getSpecialty() : null);
		this.form.txtName().setValue(value.getNameIsNotNull() ? value.getName(): null);
	}
	protected ims.pathways.vo.PathwayVo populateDataFromScreen(ims.pathways.vo.PathwayVo value)
	{
		if(value == null)
			value = new ims.pathways.vo.PathwayVo();

		value.setJourneyCountType(this.form.cmbJourneyCountType().getValue());
		value.setIsDefault(new Boolean(this.form.chkIsDefault().getValue()));
		value.setDescription(this.form.txtDescription().getValue());
		value.setNumWeeks(this.form.intNumWeeks().getValue());
		value.setStatus(this.form.cmbStatus().getValue());
		value.setSpecialty(this.form.cmbSpecialty().getValue());
		value.setName(this.form.txtName().getValue());

		return value;
	}
	protected ims.pathways.vo.PathwayVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.pathways.vo.PathwayVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.pathways.domain.PathwayConfiguration domain;
}
