//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.forms.pathwayconfiguration;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Pathways = new PathwaysContext(context);
	}
	public final class PathwaysContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private PathwaysContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getPathwayToCopyIsNotNull()
		{
			return !cx_PathwaysPathwayToCopy.getValueIsNull(context);
		}
		public ims.pathways.configuration.vo.PathwayRefVo getPathwayToCopy()
		{
			return (ims.pathways.configuration.vo.PathwayRefVo)cx_PathwaysPathwayToCopy.getValue(context);
		}
		public void setPathwayToCopy(ims.pathways.configuration.vo.PathwayRefVo value)
		{
			cx_PathwaysPathwayToCopy.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysPathwayToCopy = new ims.framework.ContextVariable("Pathways.PathwayToCopy", "_cv_Pathways.PathwayToCopy");
		public boolean getSelectedPathwayTargetExternalMappingsIsNotNull()
		{
			return !cx_PathwaysSelectedPathwayTargetExternalMappings.getValueIsNull(context);
		}
		public ims.pathways.vo.PathwayTargetExternalEventMappingVoCollection getSelectedPathwayTargetExternalMappings()
		{
			return (ims.pathways.vo.PathwayTargetExternalEventMappingVoCollection)cx_PathwaysSelectedPathwayTargetExternalMappings.getValue(context);
		}
		public void setSelectedPathwayTargetExternalMappings(ims.pathways.vo.PathwayTargetExternalEventMappingVoCollection value)
		{
			cx_PathwaysSelectedPathwayTargetExternalMappings.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedPathwayTargetExternalMappings = new ims.framework.ContextVariable("Pathways.SelectedPathwayTargetExternalMappings", "_cv_Pathways.SelectedPathwayTargetExternalMappings");
		public boolean getSelectedPathwayStatusIsNotNull()
		{
			return !cx_PathwaysSelectedPathwayStatus.getValueIsNull(context);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getSelectedPathwayStatus()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)cx_PathwaysSelectedPathwayStatus.getValue(context);
		}
		public void setSelectedPathwayStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			cx_PathwaysSelectedPathwayStatus.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedPathwayStatus = new ims.framework.ContextVariable("Pathways.SelectedPathwayStatus", "_cv_Pathways.SelectedPathwayStatus");
		public boolean getSelectedPathwayTargetsExternalMappingsIsNotNull()
		{
			return !cx_PathwaysSelectedPathwayTargetsExternalMappings.getValueIsNull(context);
		}
		public ims.pathways.vo.PathwayTargetExternalEventMappingVoCollection getSelectedPathwayTargetsExternalMappings()
		{
			return (ims.pathways.vo.PathwayTargetExternalEventMappingVoCollection)cx_PathwaysSelectedPathwayTargetsExternalMappings.getValue(context);
		}
		public void setSelectedPathwayTargetsExternalMappings(ims.pathways.vo.PathwayTargetExternalEventMappingVoCollection value)
		{
			cx_PathwaysSelectedPathwayTargetsExternalMappings.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedPathwayTargetsExternalMappings = new ims.framework.ContextVariable("Pathways.SelectedPathwayTargetsExternalMappings", "_cv_Pathways.SelectedPathwayTargetsExternalMappings");
		public boolean getSelectedPathwayTargetsRTTEventsIsNotNull()
		{
			return !cx_PathwaysSelectedPathwayTargetsRTTEvents.getValueIsNull(context);
		}
		public ims.pathways.vo.PathwayTargetRTTEventVoCollection getSelectedPathwayTargetsRTTEvents()
		{
			return (ims.pathways.vo.PathwayTargetRTTEventVoCollection)cx_PathwaysSelectedPathwayTargetsRTTEvents.getValue(context);
		}
		public void setSelectedPathwayTargetsRTTEvents(ims.pathways.vo.PathwayTargetRTTEventVoCollection value)
		{
			cx_PathwaysSelectedPathwayTargetsRTTEvents.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedPathwayTargetsRTTEvents = new ims.framework.ContextVariable("Pathways.SelectedPathwayTargetsRTTEvents", "_cv_Pathways.SelectedPathwayTargetsRTTEvents");
		public boolean getSelectedPathwaySpecialtyIsNotNull()
		{
			return !cx_PathwaysSelectedPathwaySpecialty.getValueIsNull(context);
		}
		public ims.core.vo.lookups.Specialty getSelectedPathwaySpecialty()
		{
			return (ims.core.vo.lookups.Specialty)cx_PathwaysSelectedPathwaySpecialty.getValue(context);
		}
		public void setSelectedPathwaySpecialty(ims.core.vo.lookups.Specialty value)
		{
			cx_PathwaysSelectedPathwaySpecialty.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedPathwaySpecialty = new ims.framework.ContextVariable("Pathways.SelectedPathwaySpecialty", "_cv_Pathways.SelectedPathwaySpecialty");
		public boolean getSelectedPathwayIsNotNull()
		{
			return !cx_PathwaysSelectedPathway.getValueIsNull(context);
		}
		public ims.pathways.configuration.vo.PathwayRefVo getSelectedPathway()
		{
			return (ims.pathways.configuration.vo.PathwayRefVo)cx_PathwaysSelectedPathway.getValue(context);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedPathway = new ims.framework.ContextVariable("Pathways.SelectedPathway", "_cv_Pathways.SelectedPathway");
		public boolean getSelectedPathwayTargetRTTEventsIsNotNull()
		{
			return !cx_PathwaysSelectedPathwayTargetRTTEvents.getValueIsNull(context);
		}
		public ims.pathways.vo.PathwayTargetRTTEventVoCollection getSelectedPathwayTargetRTTEvents()
		{
			return (ims.pathways.vo.PathwayTargetRTTEventVoCollection)cx_PathwaysSelectedPathwayTargetRTTEvents.getValue(context);
		}
		public void setSelectedPathwayTargetRTTEvents(ims.pathways.vo.PathwayTargetRTTEventVoCollection value)
		{
			cx_PathwaysSelectedPathwayTargetRTTEvents.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedPathwayTargetRTTEvents = new ims.framework.ContextVariable("Pathways.SelectedPathwayTargetRTTEvents", "_cv_Pathways.SelectedPathwayTargetRTTEvents");
		public boolean getSelectedTargetIsNotNull()
		{
			return !cx_PathwaysSelectedTarget.getValueIsNull(context);
		}
		public ims.pathways.vo.TargetShortVo getSelectedTarget()
		{
			return (ims.pathways.vo.TargetShortVo)cx_PathwaysSelectedTarget.getValue(context);
		}
		public void setSelectedTarget(ims.pathways.vo.TargetShortVo value)
		{
			cx_PathwaysSelectedTarget.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedTarget = new ims.framework.ContextVariable("Pathways.SelectedTarget", "_cv_Pathways.SelectedTarget");
		public boolean getSelectedTargetsIsNotNull()
		{
			return !cx_PathwaysSelectedTargets.getValueIsNull(context);
		}
		public ims.pathways.configuration.vo.TargetRefVoCollection getSelectedTargets()
		{
			return (ims.pathways.configuration.vo.TargetRefVoCollection)cx_PathwaysSelectedTargets.getValue(context);
		}
		public void setSelectedTargets(ims.pathways.configuration.vo.TargetRefVoCollection value)
		{
			cx_PathwaysSelectedTargets.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_PathwaysSelectedTargets = new ims.framework.ContextVariable("Pathways.SelectedTargets", "_cv_Pathways.SelectedTargets");

		private ims.framework.Context context;
	}

	public PathwaysContext Pathways;
}
