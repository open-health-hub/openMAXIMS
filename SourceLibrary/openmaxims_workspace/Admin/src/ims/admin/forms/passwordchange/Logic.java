//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.55 build 2757.21182)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.passwordchange;

import ims.configuration.gen.ConfigFlag;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.EngineException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.lblUser().setValue(engine.getLoggedInUser().getUsername() + (engine.getLoggedInUser().getUserRealName() == null ? "" : " (" + engine.getLoggedInUser().getUserRealName() + ")"));
		form.txtCurrentPassword().setFocus();
	}
	@Override
	protected void onBtnChangeClick()
	{
		if(form.txtCurrentPassword().getValue() == null || engine.getLoggedInUser().getClearPassword() != null && !engine.getLoggedInUser().getClearPassword().equals(form.txtCurrentPassword().getValue()))
		{
			engine.showMessage("Current password verification failed.");
			form.txtCurrentPassword().setFocus();
			return;
		}
		
		if(form.txtNewPassword().getValue() == null || form.txtNewPassword().getValue().trim().length() == 0)
		{
			form.txtNewPassword().setFocus();
			engine.showMessage("New password cannot be empty.");
			return;
		}
		
		if(!form.txtNewPassword().getValue().equals(form.txtNewPasswordVerify().getValue()))
		{
			form.txtNewPasswordVerify().setFocus();
			engine.showMessage("New password verification failed.");
			return;
		}
		int minLen = ConfigFlag.FW.PASSWD_MIN_LEN.getValue();
		
		if(minLen > 0 && form.txtNewPassword().getValue().length() < minLen)
		{
			engine.showMessage("Password Minimum length is " + minLen);
			return;
		}
		
		// WDEV-15903
		int maxLen = ConfigFlag.FW.PASSWD_MAX_LEN.getValue();
		if(maxLen > 0 && form.txtNewPassword().getValue().length() > maxLen)
		{
			engine.showMessage("Password Maximum length is " + maxLen);
			return;
		}
		
		try 
		{
			engine.changeUserPassword(engine.getLoggedInUser(), form.txtCurrentPassword().getValue(), form.txtNewPassword().getValue());
		} 
		catch (EngineException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		engine.showMessage("Password changed successfully.");
		
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		engine.close(DialogResult.CANCEL);
	}
}
