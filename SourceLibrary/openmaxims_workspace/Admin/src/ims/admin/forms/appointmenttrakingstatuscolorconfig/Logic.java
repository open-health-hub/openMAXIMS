//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4035.27320)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.admin.forms.appointmenttrakingstatuscolorconfig;

import ims.admin.vo.AppointmentTrackingstatusColourConfigVo;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.scheduling.vo.lookups.AppointmentTrackingStatus;
import ims.vo.LookupInstVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		form.setMode(FormMode.VIEW);
		
		if(form.ccTrackingLookup().getValue() != null)
			form.getLocalContext().setCurrentRecord(domain.getColorConfig(form.ccTrackingLookup().getValue()));
		
		if(form.getLocalContext().getCurrentRecordIsNotNull())
		{
			populateScreenFromColorConfig(form.getLocalContext().getCurrentRecord());
		}
		else
		{
			populateScreenFromLookupInstVo(form.ccTrackingLookup().getValue());
		}
	}
	
	private void initialize() 
	{
		form.ccTrackingLookup().initialize(AppointmentTrackingStatus.TYPE_ID, true, true);
		
		populateColorCombo();
		populateIdleColorCombo();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	
	private boolean save() 
	{
		AppointmentTrackingstatusColourConfigVo colorConfig = populateDataFromScreen(form.getLocalContext().getCurrentRecord());
		
		String[] errors = colorConfig.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setCurrentRecord(domain.saveColorConfig(colorConfig));
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}

	private AppointmentTrackingstatusColourConfigVo populateDataFromScreen(AppointmentTrackingstatusColourConfigVo currentRecord) 
	{
		if(currentRecord == null)
			currentRecord = new AppointmentTrackingstatusColourConfigVo();
		
		currentRecord.setTrackingStatus((AppointmentTrackingStatus) form.ccTrackingLookup().getValue());
		currentRecord.setColour(form.cmbColor().getValue());
		currentRecord.setIdleTimeInMins(form.intIdleMinutes().getValue());
		
		currentRecord.setIdleColour(form.cmbIdleColour().getValue());
		
		if (currentRecord.getIdleTimeInMinsIsNotNull() && !currentRecord.getIdleColourIsNotNull())
			currentRecord.setIdleColour(Color.Red);
		
		return currentRecord;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnSetColorClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	private void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onCcTrackingLookupValueChanged()	throws PresentationLogicException 
	{
		if(form.ccTrackingLookup().getValue() == null)
			return;
		
		AppointmentTrackingstatusColourConfigVo colorConfig = domain.getColorConfig(form.ccTrackingLookup().getValue());
		
		form.getLocalContext().setCurrentRecord(colorConfig);
		
		if(colorConfig == null)
			populateScreenFromLookupInstVo(form.ccTrackingLookup().getValue());
		else
			populateScreenFromColorConfig(colorConfig);
		updateControlsState();
	}

	private void populateScreenFromLookupInstVo(LookupInstVo value) 
	{
		if(value == null)
			return;
		
		form.intId().setValue(value.getID());
		form.txtName().setValue(value.getText());
		
		form.cmbColor().setValue(value.getColor());
		form.intIdleMinutes().setValue(null);
		form.cmbIdleColour().setValue(Color.Red);
	}

	private void updateControlsState() 
	{
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnSetColor().setVisible(form.ccTrackingLookup().getValue() instanceof LookupInstVo);
		}
	}

	private void populateScreenFromColorConfig(AppointmentTrackingstatusColourConfigVo colorConfig) 
	{
		if(colorConfig == null || colorConfig.getTrackingStatus() == null)
			return;
		
		form.intId().setValue(colorConfig.getTrackingStatus().getID());
		form.txtName().setValue(colorConfig.getTrackingStatus().getText());
		
		form.cmbColor().setValue(colorConfig.getColour());
		form.intIdleMinutes().setValue(colorConfig.getIdleTimeInMins());
		form.cmbIdleColour().setValue(colorConfig.getIdleColour());
	}
	
	private void populateColorCombo()
	{
		Color[] colors = Color.getAllColors();
		
		form.cmbColor().clear();
		for (int i = 0; i < colors.length; i++)
		{
			form.cmbColor().newRow(colors[i], colors[i].getName(), colors[i].getImage());
		}
	}
	
	private void populateIdleColorCombo()
	{
		Color[] colors = Color.getAllColors();
		
		form.cmbIdleColour().clear();
		for (int i = 0; i < colors.length; i++)
		{
			form.cmbIdleColour().newRow(colors[i], colors[i].getName(), colors[i].getImage());
		}
	}



	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}
}
