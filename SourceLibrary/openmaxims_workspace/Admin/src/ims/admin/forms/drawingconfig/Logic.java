//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.20 build 40903.1400)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.drawingconfig;

import ims.admin.forms.drawingconfig.GenForm.lyrDrawingLayer.tabImageSearchContainer.GroupSearchCriteriaEnumeration;
import ims.admin.vo.AppImageVo;
import ims.core.vo.DrawingGraphicImageShortVo;
import ims.core.vo.GraphicAreaVo;
import ims.core.vo.GraphicAreaVoCollection;
import ims.core.vo.GraphicGroupVo;
import ims.core.vo.GraphicGroupVoCollection;
import ims.core.vo.DrawingGraphicImageVo;
import ims.core.vo.DrawingGraphicImageVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.controls.DrawingControlArea;
import ims.framework.controls.DrawingControlAreaCollection;
import ims.framework.controls.DrawingControlGroup;
import ims.framework.controls.DrawingControlGroupCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Image;
import ims.utils.textile.Textile;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
	}

	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (isDialog())
			{
				form.btnSelect().setVisible(form.lyrDrawing().tabImageSearch().grdImagesSearch().getSelectedRowIndex() >= 0);
				form.btnSave().setVisible(false);
			}
			else
			{
				removePreactiveOrActiveLookup();
				form.btnSave().setVisible(true);
				enableSelectImageBtn();
				enableControls();
			}
		}
		else if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnUpdate().setVisible(true);
			form.getLocalContext().setIsCopyDrawingMode(new Boolean(false));
			form.lnkReturnToList().setVisible(!isDialog());
		}

		if (isDialog() == false)
			enbleRegionConfigTab(true);
	}

	protected void onlyrDrawingTabChanged(LayerBridge tab)
	{
		if (tab.equals(form.lyrDrawing().tabRegionConfig()))
		{
			DrawingGraphicImageVo voDrawingGraphicImage = form.getLocalContext().getImageRecord();
			// Set the Image name - as it should be displayed as a root for the
			// DrawingConfing control
			setImageName(voDrawingGraphicImage);
		}
	}

	private void setImageName(DrawingGraphicImageVo voDrawingGraphicImage) {
		if (voDrawingGraphicImage.getID_DrawingGraphicImage() == null)
		{
			String imageName = form.lyrDrawing().tabImageSelect().txtImageName().getValue();
			if (imageName == null || imageName.equals(""))
			{
				engine.showMessage("Please enter an Image Name");
				form.lyrDrawing().tabImageSelect().txtImageName().setFocus();
				form.lyrDrawing().tabImageSelect().setEnabled(true);
				form.lyrDrawing().showtabImageSelect();
				return;
			}

			DrawingControlGroup group = form.lyrDrawing().tabRegionConfig().drawingConfig().getAreas();
			group.setName(imageName);
			form.lyrDrawing().tabRegionConfig().drawingConfig().setAreas(group);
		}
	}

	private void initialize()
	{
		this.clearScreen();

		if (isDialog())
		{
			form.lyrDrawing().showtabImageSearch();
			form.lyrDrawing().tabImageSearch().setHeaderVisible(true);
			form.lyrDrawing().tabImageSelect().setHeaderVisible(false);
			form.lyrDrawing().tabRegionConfig().setHeaderVisible(false);
			form.lyrDrawing().tabImageSearch().txtImageNameSearch().setFocus();
			form.lyrDrawing().tabImageSearch().GroupSearchCriteria().setValue(GroupSearchCriteriaEnumeration.rdoBeginsWith);
			setDefaultImage(null, true);
			setDefaultImage(null);
			form.setMode(FormMode.EDIT);
		}
		else
		{
			form.lyrDrawing().showtabImageSelect();
			form.lyrDrawing().tabImageSearch().setHeaderVisible(false);

			DrawingGraphicImageVo voGraphic = getDrawingGraphicImageVo();
			form.getLocalContext().setImageRecord(voGraphic);
			setDefaultImage(null, true);
			setDefaultImage(voGraphic);
			populateScreenFromData(voGraphic);
			enbleRegionConfigTab(false);

			if (isNewRecord())
				form.lyrDrawing().tabImageSelect().txtImageName().setFocus();

			if (form.getGlobalContext().Admin.getDrawingConfigFormMode() == null)
				copyDrawingDetails();
			else
				form.setMode(form.getGlobalContext().Admin.getDrawingConfigFormMode());
		}
	}

	private void open()
	{
		this.clearScreen();

		DrawingGraphicImageVo voGraphicImage = domain.getDrawingGraphicImage(form.getLocalContext().getImageRecord()); //WDEV-15246
		populateScreenFromData(voGraphicImage);
		form.setMode(FormMode.VIEW);
	}

	private DrawingGraphicImageVo getDrawingGraphicImageVo()
	{
		DrawingGraphicImageShortVo voDrawingGraphicImageShort = form.getGlobalContext().Admin.getDrawingGraphicImageShortVo();
		if (voDrawingGraphicImageShort != null && voDrawingGraphicImageShort.getID_DrawingGraphicImageIsNotNull())
		{
			return domain.getDrawingGraphicImage(voDrawingGraphicImageShort);
		}

		DrawingGraphicImageVo voDrawingGraphicImage = new DrawingGraphicImageVo();
		voDrawingGraphicImage.setImageStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		return voDrawingGraphicImage;
	}

	void convertAllAreasToNode(GraphicGroupVo voGroup, DrawingControlGroup node)
	{
		node.setName(voGroup.getGroupName());
		// convert all areas to controlgroup
		int i;
		for (i = 0; voGroup.getAreaCollectionIsNotNull() && i < voGroup.getAreaCollection().size(); i++)
		{
			node.add(createDrawingControlArea(voGroup.getAreaCollection().get(i)));
		}

		for (int j = 0; voGroup.getChildGroupsIsNotNull() && j < voGroup.getChildGroups().size(); j++)
		{
			GraphicGroupVo childGroup = voGroup.getChildGroups().get(j);
			node.add(createDrawingControlGroup(childGroup));
			convertAllAreasToNode(childGroup, node.getGroup(i + j));
		}
	}

	private DrawingControlGroup createDrawingControlGroup(GraphicGroupVo voGroup)
	{
		DrawingControlGroup group = new DrawingControlGroup(voGroup.getGroupID().intValue(), voGroup.getGroupName());
		return group;
	}

	private DrawingControlArea createDrawingControlArea(GraphicAreaVo voArea)
	{
		DrawingControlArea area = new DrawingControlArea(voArea.getAreaID().intValue(), voArea.getAreaName(), voArea.getAreaVectors());
		return area;
	}

	void convertAllAreasToVO(DrawingControlGroup node, GraphicGroupVo voGroup)
	{
		voGroup.setAreaCollection(new GraphicAreaVoCollection());
		voGroup.setChildGroups(new GraphicGroupVoCollection());
		voGroup.setGroupName(node.getName());
		voGroup.setGroupID(new Integer(node.getID()));

		DrawingControlAreaCollection areas = node.getAreas();
		for (int i = 0; i < areas.size(); i++)
		{
			DrawingControlArea area = areas.get(i);
			voGroup.getAreaCollection().add(createVoArea(area));
		}

		DrawingControlGroupCollection groups = node.getGroups();
		for (int i = 0; i < groups.size(); i++)
		{
			DrawingControlGroup group = groups.get(i);
			voGroup.getChildGroups().add(createVoGroup(group));
			convertAllAreasToVO(group, voGroup.getChildGroups().get(i));
		}
	}

	private GraphicGroupVo createVoGroup(DrawingControlGroup group)
	{
		GraphicGroupVo voGroup = new GraphicGroupVo();
		voGroup.setGroupName(group.getName());
		voGroup.setGroupID(new Integer(group.getID()));

		return voGroup;
	}

	private GraphicAreaVo createVoArea(DrawingControlArea area)
	{
		GraphicAreaVo voArea = new GraphicAreaVo();
		voArea.setAreaName(area.getName());
		voArea.setAreaVectors(area.getPath());
		voArea.setAreaID(new Integer(area.getID()));

		return voArea;
	}

	protected DrawingGraphicImageVo populateDataFromScreen()
	{
		DrawingGraphicImageVo voDrawingImage = form.getLocalContext().getImageRecord();

		// create new group record each time the image is updated
		if (voDrawingImage != null && voDrawingImage.getRootGroupIsNotNull())
		{
			//WDEV-15224
			if (voDrawingImage.getID_DrawingGraphicImage() == null)
			{
				String imageName = form.lyrDrawing().tabImageSelect().txtImageName().getValue();
				if (imageName != null)
				{
					DrawingControlGroup group = form.lyrDrawing().tabRegionConfig().drawingConfig().getAreas();
					group.setName(imageName);
					form.lyrDrawing().tabRegionConfig().drawingConfig().setAreas(group);
				}
			}
			// Obsolete thing...
			/*
			 * if(voDrawingImage.getID_DrawingGraphicImageIsNotNull())
			 * voDrawingImage.setRootGroup(new GraphicGroupVo());
			 */

			convertAllAreasToVO(form.lyrDrawing().tabRegionConfig().drawingConfig().getAreas(), voDrawingImage.getRootGroup());
		}
		// Populate binded controls
		voDrawingImage = super.populateDataFromScreen(voDrawingImage);
		return voDrawingImage;
	}

	protected void clearScreen()
	{
		form.lyrDrawing().tabImageSelect().txtImagePath().setValue("");
		form.lyrDrawing().tabImageSelect().imgPreview().setValue(form.getImages().GeneralMedical.Blank);
		super.clearScreen();
	}

	protected void onGrdImagesSearchSelectionChanged() throws PresentationLogicException
	{
		setDefaultImage(form.lyrDrawing().tabImageSearch().grdImagesSearch().getValue(), true);
		if (form.getMode().equals(FormMode.EDIT))
			form.btnSelect().setVisible(true);
	}

	/*
	 * protected void onBtnNewImageClick() throws PresentationLogicException {
	 * clearScreen();
	 * form.lyrDrawing().tabImageSelect().txtImageName().setFocus();
	 * form.lyrDrawing().tabImageSelect().cmbImageStatus().setValue(PreActiveActiveInactiveStatus.PREACTIVE);
	 * form.getLocalContext().setImageRecord(new DrawingGraphicImageVo());
	 * 
	 * if (form.lyrDrawing().tabRegionConfig().isVisible())
	 * form.lyrDrawing().showtabImageSelect();
	 * form.lyrDrawing().showtabImageSelect(); enbleRegionConfigTab(false);
	 * 
	 * form.setMode(FormMode.EDIT); }
	 */

	protected void onBtnUpdateImageClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	protected void onBtnSaveImageClick() throws PresentationLogicException
	{
		if (doSave() == false)
			return;
		open();
	}

	private boolean doSave()
	{
		DrawingGraphicImageVo voGraphicImage = populateDataFromScreen();

		String[] errors = voGraphicImage.validate();
		if (errors != null)
		{
			engine.showErrors("Validation Errors", errors);
			return false;
		}
		try
		{
			voGraphicImage = domain.saveGraphicImage(voGraphicImage);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		form.getLocalContext().setImageRecord(voGraphicImage);

		// Set the GraphicImageVo back in the context
		form.getGlobalContext().Core.setDrawingGraphicImageVo(voGraphicImage);

		return true;
	}

	protected void onBtnCancelImageClick() throws PresentationLogicException
	{
		if (isDialog())
		{
			engine.close(DialogResult.CANCEL);
		}
		else
		{
			if(isNewRecord())
			{
				form.getGlobalContext().Admin.setDrawingGraphicImageShortVo(null);
				engine.open(form.getForms().Admin.DrawingConfigList);
			}
			else
			{
				open();
			}
		}
	}

	protected void onBtnSelectClick() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setDrawingGraphicImageVo(form.lyrDrawing().tabImageSearch().grdImagesSearch().getValue());
		engine.close(DialogResult.OK);
	}

	protected void onLnkReturnToListClick() throws PresentationLogicException
	{
		form.getGlobalContext().Admin.setDrawingGraphicImageShortVo(form.getLocalContext().getImageRecord());
		engine.open(form.getForms().Admin.DrawingConfigList);
	}

	protected void onLnkImageClick()
	{
		form.lyrDrawing().showtabImageSelect();
	}

	protected void onLnkRegionClick()
	{
		form.lyrDrawing().showtabRegionConfig();
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Admin.ImageSelectDialog))
		{
			AppImageVo voAppImage = form.getGlobalContext().Admin.getSelectedImage();
			if (voAppImage != null)
			{
				Image image = engine.getRegisteredImage(voAppImage.getID_AppImage().intValue());
				form.lyrDrawing().tabImageSelect().txtImagePath().setValue(voAppImage.getImagePath());
				form.lyrDrawing().tabImageSelect().imgPreview().setValue(image);

				DrawingGraphicImageVo voGraphicImage = form.getLocalContext().getImageRecord();
				if (voGraphicImage != null)
				{
					// Set the selected image
					voGraphicImage.setImage(voAppImage);

					// Set the Default Root Group
					if (voGraphicImage != null && voGraphicImage.getRootGroup() == null)
					{
						GraphicGroupVo voGraphicGroup = new GraphicGroupVo();
						voGraphicGroup.setGroupName(voGraphicImage.getImageName());
						voGraphicImage.setRootGroup(voGraphicGroup);
					}
					setDefaultImage(voGraphicImage);

					form.getLocalContext().setImageRecord(voGraphicImage);
					enbleRegionConfigTab(true);
				}
			}
		}
	}

	protected void onImbSelectImageClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Admin.ImageSelectDialog);
	}

	private void setDefaultImage(DrawingGraphicImageVo voGraphicImage)
	{
		setDefaultImage(voGraphicImage, false);
	}

	// Associate an image to the Drawing Config control - avoids crashing
	private void setDefaultImage(DrawingGraphicImageVo voGraphicImage, boolean previewControl)
	{
		// IMAGE
		Image img = null;
		if (voGraphicImage != null && voGraphicImage.getImageIsNotNull())
			img = engine.getRegisteredImage(voGraphicImage.getImage().getID_AppImage().intValue());
		else
			img = form.getImages().GeneralMedical.Blank;

		if (previewControl)
			form.lyrDrawing().tabImageSearch().drawingConfigPreview().setImage(img);
		else
			form.lyrDrawing().tabRegionConfig().drawingConfig().setImage(img);

		// AREAS
		DrawingControlGroup root = null;
		if (voGraphicImage != null && voGraphicImage.getRootGroupIsNotNull())
		{
			int groupId = voGraphicImage.getRootGroup().getGroupIDIsNotNull() ? voGraphicImage.getRootGroup().getGroupID().intValue() : -1;
			root = new DrawingControlGroup(groupId, voGraphicImage.getRootGroup().getGroupName());
			convertAllAreasToNode(voGraphicImage.getRootGroup(), root);
		}
		else
		{
			String defaultImageName = form.lyrDrawing().tabImageSelect().txtImageName().getValue();
			if (defaultImageName == null || defaultImageName.equals(""))
			{
				defaultImageName = isDialog() ? "" : "root";
			}

			root = new DrawingControlGroup(-1, voGraphicImage != null ? voGraphicImage.getImageName() : defaultImageName);
		}

		if (previewControl)
			form.lyrDrawing().tabImageSearch().drawingConfigPreview().setAreas(root);
		else
			form.lyrDrawing().tabRegionConfig().drawingConfig().setAreas(root);
	}

	private void enbleRegionConfigTab(boolean value)
	{
		form.lyrDrawing().tabRegionConfig().setHeaderEnabled(value);
	}

	protected void onImbClearClick() throws PresentationLogicException
	{
		clearSearchGrid();
		form.lyrDrawing().tabImageSearch().txtImageNameSearch().setValue("");
		setDefaultImage(null, true);
	}

	protected void onImbSearchClick() throws PresentationLogicException
	{
		clearSearchGrid();
		setDefaultImage(null, true);
		String name = form.lyrDrawing().tabImageSearch().txtImageNameSearch().getValue();

		if (name != null)
			name = name.trim();

		//WDEV-1736 - users should be able to search without entering any search criteria
		/*if (name == null || name.equals(""))
		{
			engine.showMessage("Please enter an Image Name");
			form.lyrDrawing().tabImageSearch().txtImageNameSearch().setFocus();
			return;
		}*/

		if (name != null && name.length() > 0)
		{
			GroupSearchCriteriaEnumeration criteria = form.lyrDrawing().tabImageSearch().GroupSearchCriteria().getValue();
			if (criteria != null)
			{
				if (criteria.equals(GroupSearchCriteriaEnumeration.rdoBeginsWith))
				{
					name += "%";
				}
				if (criteria.equals(GroupSearchCriteriaEnumeration.rdoContains))
				{
					name = "%" + name + "%";
				}
			}
		}

		DrawingGraphicImageVoCollection voColl = domain.listGraphicImages(name, PreActiveActiveInactiveStatus.ACTIVE);
		if (voColl == null || voColl.size() == 0)
			engine.showMessage("No Drawing Configurations found for the Search Criteria Provided");

		displayListImages(voColl);
	}

	private void displayListImages(DrawingGraphicImageVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			DrawingGraphicImageVo voDGImage = voColl.get(i);
			GenForm.lyrDrawingLayer.tabImageSearchContainer.grdImagesSearchRow row = form.lyrDrawing().tabImageSearch().grdImagesSearch().getRows().newRow();
			row.setcolImageName(voDGImage.getImageName());
			row.setcolStatus(voDGImage.getImageStatusIsNotNull() ? voDGImage.getImageStatus().toString() : "");
			row.setcolVersionNo(voDGImage.getVersionNumberIsNotNull() ? voDGImage.getVersionNumber().toString() : "");
			row.setTooltip(getTooltip(voDGImage));
			row.setValue(voDGImage);
		}
	}

	private void clearSearchGrid()
	{
		form.lyrDrawing().tabImageSearch().grdImagesSearch().getRows().clear();
		if (form.getMode().equals(FormMode.EDIT))
			form.btnSelect().setVisible(false);
	}

	private String getTooltip(DrawingGraphicImageVo voDGImage)
	{
		if (voDGImage != null)
		{
			StringBuffer tooltip = new StringBuffer();
			if (voDGImage.getImageIsNotNull() && voDGImage.getImage().getImagePathIsNotNull())
			{
				tooltip.append("*Image Path: *");
				tooltip.append(voDGImage.getImage().getImagePath());
				tooltip.append(CR);
			}
			if (voDGImage.getImageDescriptionIsNotNull())
			{
				tooltip.append("*Description: *");
				tooltip.append(voDGImage.getImageDescription());
				tooltip.append(CR);
			}

			return new Textile().process(tooltip.toString());
		}

		return "";
	}

	protected void populateScreenFromData(DrawingGraphicImageVo voGraphicImage)
	{
		form.getLocalContext().setImageRecord(voGraphicImage);
		this.clearScreen();
		super.populateScreenFromData(voGraphicImage);
		// Populate the unbinded controls
		if (voGraphicImage != null && voGraphicImage.getImageIsNotNull() && voGraphicImage.getImage().getID_AppImageIsNotNull())
		{
			Image repImage = engine.getRegisteredImage(voGraphicImage.getImage().getID_AppImage().intValue());
			if(repImage != null)
			{
				form.lyrDrawing().tabImageSelect().imgPreview().setValue(repImage);
				form.lyrDrawing().tabImageSelect().txtImagePath().setValue(repImage.getImagePath());
			}
		}
		// Populate the drawing Image
		setDefaultImage(voGraphicImage);

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnUpdate().setVisible(true);
		}
		enbleRegionConfigTab(true);
	}

	private void copyDrawingDetails()
	{
		if (form.getGlobalContext().Admin.getDrawingGraphicImageShortVo() != null && form.getGlobalContext().Admin.getDrawingGraphicImageShortVo().getID_DrawingGraphicImageIsNotNull())
		{
			form.getLocalContext().setIsCopyDrawingMode(new Boolean(true));
			DrawingGraphicImageVo voDrawing = domain.getDrawingGraphicImage(form.getGlobalContext().Admin.getDrawingGraphicImageShortVo());
			if (voDrawing == null)
			{
				engine.showMessage("Please select a record");
				return;
			}
	
			voDrawing = setCopiedDrawingVo(voDrawing);
			populateScreenFromData(voDrawing);
			form.setMode(FormMode.EDIT);
		}
	}

	private DrawingGraphicImageVo setCopiedDrawingVo(DrawingGraphicImageVo voDrawing)
	{
		if (voDrawing == null)
			return null;
		voDrawing.setID_DrawingGraphicImage(null);
		voDrawing.setImageStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		voDrawing.setVersionNumber(getIncrementedVersionNo(voDrawing));
		// Clear Ids for composite relationship
		if (voDrawing.getRootGroupIsNotNull())
		{
			// Clear the ids for Root Group
			voDrawing.getRootGroup().setID_DrawingGraphicGroup(null);
			// Clear ids of area collection
			if (voDrawing.getRootGroup().getAreaCollectionIsNotNull())
			{
				for (int i = 0; i < voDrawing.getRootGroup().getAreaCollection().size(); i++)
				{
					voDrawing.getRootGroup().getAreaCollection().get(i).setID_DrawingGraphicArea(null);
				}
			}
			// Child ids of Child Group
			if (voDrawing.getRootGroup().getChildGroupsIsNotNull())
			{
				for (int i = 0; i < voDrawing.getRootGroup().getChildGroups().size(); i++)
				{
					voDrawing.getRootGroup().getChildGroups().get(i).setID_DrawingGraphicGroup(null);
				}
			}
		}

		return voDrawing;
	}
	
	private void enableSelectImageBtn()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			DrawingGraphicImageVo voDrawingGraphicImage = form.getLocalContext().getImageRecord();
			// No Image or no group
			boolean bEnable = voDrawingGraphicImage != null && voDrawingGraphicImage.getImage() == null || voDrawingGraphicImage.getRootGroup() == null;
			form.lyrDrawing().tabImageSelect().imbImage().setEnabled(bEnable);
		}
	}

	private Integer getIncrementedVersionNo(DrawingGraphicImageVo voDrawing)
	{
		int newVerNo = 1;

		if (voDrawing != null)
		{
			Integer verNo = voDrawing.getVersionNumber();
			newVerNo += verNo != null ? verNo.intValue() : 0;
		}

		return new Integer(newVerNo);
	}

	private boolean isCopyDrawingMode()
	{
		return form.getLocalContext().getIsCopyDrawingModeIsNotNull() && form.getLocalContext().getIsCopyDrawingMode().booleanValue();
	}

	private boolean isNewRecord()
	{
		return form.getLocalContext().getImageRecord() == null || form.getLocalContext().getImageRecord().getID_DrawingGraphicImage() == null;
	}

	private boolean isStatusActive()
	{
		DrawingGraphicImageVo voDrawingImage = form.getLocalContext().getImageRecord();
		return voDrawingImage != null && voDrawingImage.getImageStatusIsNotNull() && voDrawingImage.getImageStatus().equals(PreActiveActiveInactiveStatus.ACTIVE);
	}

	private boolean isStatusInactive()
	{
		DrawingGraphicImageVo voDrawingImage = form.getLocalContext().getImageRecord();
		return voDrawingImage != null && voDrawingImage.getImageStatusIsNotNull() && voDrawingImage.getImageStatus().equals(PreActiveActiveInactiveStatus.INACTIVE);
	}

	private void removePreactiveOrActiveLookup()
	{
		PreActiveActiveInactiveStatus status = form.lyrDrawing().tabImageSelect().cmbImageStatus().getValue();
		form.lyrDrawing().tabImageSelect().cmbImageStatus().clear();
		PreActiveActiveInactiveStatusCollection lookupColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for (int i = 0; lookupColl != null && i < lookupColl.size(); i++)
		{
			if (isStatusActive() && lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE))
				continue;
			if (isStatusInactive() && (lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE) || lookupColl.get(i).equals(PreActiveActiveInactiveStatus.ACTIVE)))
				continue;

			form.lyrDrawing().tabImageSelect().cmbImageStatus().newRow(lookupColl.get(i), lookupColl.get(i).toString(), lookupColl.get(i).getImage(), lookupColl.get(i).getColor());
		}
		form.lyrDrawing().tabImageSelect().cmbImageStatus().setValue(status);
	}

	private void enableControls()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (isStatusInactive())
			{
				form.lyrDrawing().tabImageSelect().txtImageName().setEnabled(false);
				form.lyrDrawing().tabImageSelect().cmbImageStatus().setEnabled(true);
				form.lyrDrawing().tabImageSelect().txtDescription().setEnabled(false);
				form.lyrDrawing().tabImageSelect().intVersionNumber().setEnabled(false);
				form.lyrDrawing().tabRegionConfig().drawingConfig().setReadOnly(true);
			}
			else if (isStatusActive())
			{
				form.lyrDrawing().tabImageSelect().txtImageName().setEnabled(false);
				form.lyrDrawing().tabImageSelect().cmbImageStatus().setEnabled(true);
				form.lyrDrawing().tabImageSelect().txtDescription().setEnabled(true);
				form.lyrDrawing().tabImageSelect().intVersionNumber().setEnabled(false);
				form.lyrDrawing().tabRegionConfig().drawingConfig().setReadOnly(true);
			}
			else
			{
				form.lyrDrawing().tabImageSelect().txtImageName().setEnabled(true);
				form.lyrDrawing().tabImageSelect().cmbImageStatus().setEnabled(true);
				form.lyrDrawing().tabImageSelect().txtDescription().setEnabled(true);
				form.lyrDrawing().tabImageSelect().intVersionNumber().setEnabled(true);
				form.lyrDrawing().tabRegionConfig().drawingConfig().setEnabled(true);
			}

			if (isCopyDrawingMode())
			{
				form.lyrDrawing().tabImageSelect().txtImageName().setEnabled(true);
				form.lyrDrawing().tabImageSelect().cmbImageStatus().setEnabled(true);
				form.lyrDrawing().tabImageSelect().txtDescription().setEnabled(true);
				form.lyrDrawing().tabImageSelect().intVersionNumber().setEnabled(false);
				form.lyrDrawing().tabRegionConfig().drawingConfig().setEnabled(true);
			}
		}
	}
		
	private boolean isDialog()
	{
		return engine.isDialog();
	}

	public static final String	CR	= "\n";
}
