//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.edconfig;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrEDLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageAttendanceDetConfigContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrAttendanceDetailsLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabPageAttendanceDetalisContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdAttendanceDetailsControlConfigRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdAttendanceDetailsControlConfigRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColumnScreenControlReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColumnScreenControlReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColumnScreenControlOpened()
						{
							super.row.showOpened(0);
						}
						public String getColumnScreenControl()
						{
							return (String)super.row.get(0);
						}
						public void setColumnScreenControl(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColumnScreenControlTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColumnVisibleReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColumnVisibleReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColumnVisibleOpened()
						{
							super.row.showOpened(1);
						}
						public boolean getColumnVisible()
						{
							return ((Boolean)super.row.get(1)).booleanValue();
						}
						public void setColumnVisible(boolean value)
						{
							super.row.set(1, new Boolean(value));
						}
						public void setCellColumnVisibleTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setColumnEditableReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isColumnEditableReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showColumnEditableOpened()
						{
							super.row.showOpened(2);
						}
						public boolean getColumnEditable()
						{
							return ((Boolean)super.row.get(2)).booleanValue();
						}
						public void setColumnEditable(boolean value)
						{
							super.row.set(2, new Boolean(value));
						}
						public void setCellColumnEditableTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public void setColumnRequiredReadOnly(boolean value)
						{
							super.row.setReadOnly(3, value);
						}
						public boolean isColumnRequiredReadOnly()
						{
							return super.row.isReadOnly(3);
						}
						public void showColumnRequiredOpened()
						{
							super.row.showOpened(3);
						}
						public boolean getColumnRequired()
						{
							return ((Boolean)super.row.get(3)).booleanValue();
						}
						public void setColumnRequired(boolean value)
						{
							super.row.set(3, new Boolean(value));
						}
						public void setCellColumnRequiredTooltip(String value)
						{
							super.row.setTooltip(3, value);
						}
						public ims.admin.vo.EDAttendanceControlsConfigVo getValue()
						{
							return (ims.admin.vo.EDAttendanceControlsConfigVo)super.row.getValue();
						}
						public void setValue(ims.admin.vo.EDAttendanceControlsConfigVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdAttendanceDetailsControlConfigRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdAttendanceDetailsControlConfigRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdAttendanceDetailsControlConfigRow get(int index)
						{
							return new grdAttendanceDetailsControlConfigRow(super.collection.get(index));
						}
						public grdAttendanceDetailsControlConfigRow newRow()
						{
							return new grdAttendanceDetailsControlConfigRow(super.collection.newRow());
						}
						public grdAttendanceDetailsControlConfigRow newRow(boolean autoSelect)
						{
							return new grdAttendanceDetailsControlConfigRow(super.collection.newRow(autoSelect));
						}
						public grdAttendanceDetailsControlConfigRow newRowAt(int index)
						{
							return new grdAttendanceDetailsControlConfigRow(super.collection.newRowAt(index));
						}
						public grdAttendanceDetailsControlConfigRow newRowAt(int index, boolean autoSelect)
						{
							return new grdAttendanceDetailsControlConfigRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdAttendanceDetailsControlConfigGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
						{
							super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
						}
						public ims.admin.vo.EDAttendanceControlsConfigVoCollection getValues()
						{
							ims.admin.vo.EDAttendanceControlsConfigVoCollection listOfValues = new ims.admin.vo.EDAttendanceControlsConfigVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.admin.vo.EDAttendanceControlsConfigVo getValue()
						{
							return (ims.admin.vo.EDAttendanceControlsConfigVo)super.grid.getValue();
						}
						public void setValue(ims.admin.vo.EDAttendanceControlsConfigVo value)
						{
							super.grid.setValue(value);
						}
						public grdAttendanceDetailsControlConfigRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdAttendanceDetailsControlConfigRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdAttendanceDetailsControlConfigRowCollection getRows()
						{
							return new grdAttendanceDetailsControlConfigRowCollection(super.grid.getRows());
						}
						public grdAttendanceDetailsControlConfigRow getRowByValue(ims.admin.vo.EDAttendanceControlsConfigVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdAttendanceDetailsControlConfigRow(row);
						}
						public void setColumnScreenControlHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColumnScreenControlHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColumnVisibleHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColumnVisibleHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setColumnEditableHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getColumnEditableHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
						public void setColumnRequiredHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(3, value);
						}
						public String getColumnRequiredHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(3);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 784, 464, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdAttendanceDetailsControlConfigTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdAttendanceDetailsControlConfigTemp);
						grdAttendanceDetailsControlConfigGrid grdAttendanceDetailsControlConfig = (grdAttendanceDetailsControlConfigGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAttendanceDetailsControlConfigGrid.class, m_grdAttendanceDetailsControlConfigTemp);
						grdAttendanceDetailsControlConfig.addStringColumn("Screen Control", 0, 0, 500, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdAttendanceDetailsControlConfig.addBoolColumn("Visible", 0, 0, 100, false, true, 0, true);
						grdAttendanceDetailsControlConfig.addBoolColumn("Editable", 0, 0, 100, false, false, 0, true);
						grdAttendanceDetailsControlConfig.addBoolColumn("Required", 0, 0, -1, false, false, 0, true);
						super.addGrid(grdAttendanceDetailsControlConfig);
					}
		
					public grdAttendanceDetailsControlConfigGrid grdAttendanceDetailsControlConfig()
					{
						return (grdAttendanceDetailsControlConfigGrid)super.getGrid(0);
					}
				}
				public static class tabPageChartRequestedContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdChartRequestRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdChartRequestRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColumnScreenControlReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColumnScreenControlReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColumnScreenControlOpened()
						{
							super.row.showOpened(0);
						}
						public String getColumnScreenControl()
						{
							return (String)super.row.get(0);
						}
						public void setColumnScreenControl(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColumnScreenControlTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColumnVisibleReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColumnVisibleReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColumnVisibleOpened()
						{
							super.row.showOpened(1);
						}
						public boolean getColumnVisible()
						{
							return ((Boolean)super.row.get(1)).booleanValue();
						}
						public void setColumnVisible(boolean value)
						{
							super.row.set(1, new Boolean(value));
						}
						public void setCellColumnVisibleTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setColumnEditableReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isColumnEditableReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showColumnEditableOpened()
						{
							super.row.showOpened(2);
						}
						public boolean getColumnEditable()
						{
							return ((Boolean)super.row.get(2)).booleanValue();
						}
						public void setColumnEditable(boolean value)
						{
							super.row.set(2, new Boolean(value));
						}
						public void setCellColumnEditableTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public void setColumnRequiredReadOnly(boolean value)
						{
							super.row.setReadOnly(3, value);
						}
						public boolean isColumnRequiredReadOnly()
						{
							return super.row.isReadOnly(3);
						}
						public void showColumnRequiredOpened()
						{
							super.row.showOpened(3);
						}
						public boolean getColumnRequired()
						{
							return ((Boolean)super.row.get(3)).booleanValue();
						}
						public void setColumnRequired(boolean value)
						{
							super.row.set(3, new Boolean(value));
						}
						public void setCellColumnRequiredTooltip(String value)
						{
							super.row.setTooltip(3, value);
						}
						public ims.admin.vo.EDAttendanceControlsConfigVo getValue()
						{
							return (ims.admin.vo.EDAttendanceControlsConfigVo)super.row.getValue();
						}
						public void setValue(ims.admin.vo.EDAttendanceControlsConfigVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdChartRequestRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdChartRequestRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdChartRequestRow get(int index)
						{
							return new grdChartRequestRow(super.collection.get(index));
						}
						public grdChartRequestRow newRow()
						{
							return new grdChartRequestRow(super.collection.newRow());
						}
						public grdChartRequestRow newRow(boolean autoSelect)
						{
							return new grdChartRequestRow(super.collection.newRow(autoSelect));
						}
						public grdChartRequestRow newRowAt(int index)
						{
							return new grdChartRequestRow(super.collection.newRowAt(index));
						}
						public grdChartRequestRow newRowAt(int index, boolean autoSelect)
						{
							return new grdChartRequestRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdChartRequestGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
						{
							super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
						}
						public ims.admin.vo.EDAttendanceControlsConfigVoCollection getValues()
						{
							ims.admin.vo.EDAttendanceControlsConfigVoCollection listOfValues = new ims.admin.vo.EDAttendanceControlsConfigVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.admin.vo.EDAttendanceControlsConfigVo getValue()
						{
							return (ims.admin.vo.EDAttendanceControlsConfigVo)super.grid.getValue();
						}
						public void setValue(ims.admin.vo.EDAttendanceControlsConfigVo value)
						{
							super.grid.setValue(value);
						}
						public grdChartRequestRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdChartRequestRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdChartRequestRowCollection getRows()
						{
							return new grdChartRequestRowCollection(super.grid.getRows());
						}
						public grdChartRequestRow getRowByValue(ims.admin.vo.EDAttendanceControlsConfigVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdChartRequestRow(row);
						}
						public void setColumnScreenControlHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColumnScreenControlHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColumnVisibleHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColumnVisibleHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setColumnEditableHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getColumnEditableHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
						public void setColumnRequiredHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(3, value);
						}
						public String getColumnRequiredHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(3);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 784, 464, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdChartRequestTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdChartRequestTemp);
						grdChartRequestGrid grdChartRequest = (grdChartRequestGrid)GridFlyweightFactory.getInstance().createGridBridge(grdChartRequestGrid.class, m_grdChartRequestTemp);
						grdChartRequest.addStringColumn("Screen control", 0, 0, 500, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdChartRequest.addBoolColumn("Visible", 0, 0, 100, false, true, 0, true);
						grdChartRequest.addBoolColumn("Editable", 0, 0, 100, false, false, 0, true);
						grdChartRequest.addBoolColumn("Required", 0, 0, -1, false, false, 0, true);
						super.addGrid(grdChartRequest);
					}
		
					public grdChartRequestGrid grdChartRequest()
					{
						return (grdChartRequestGrid)super.getGrid(0);
					}
				}
				public static class tabPageInvoicesBillingContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdInvoicesBillRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdInvoicesBillRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColumnScreenControlReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColumnScreenControlReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColumnScreenControlOpened()
						{
							super.row.showOpened(0);
						}
						public String getColumnScreenControl()
						{
							return (String)super.row.get(0);
						}
						public void setColumnScreenControl(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColumnScreenControlTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColumnVisibleReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColumnVisibleReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColumnVisibleOpened()
						{
							super.row.showOpened(1);
						}
						public boolean getColumnVisible()
						{
							return ((Boolean)super.row.get(1)).booleanValue();
						}
						public void setColumnVisible(boolean value)
						{
							super.row.set(1, new Boolean(value));
						}
						public void setCellColumnVisibleTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setColumnEditableReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isColumnEditableReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showColumnEditableOpened()
						{
							super.row.showOpened(2);
						}
						public boolean getColumnEditable()
						{
							return ((Boolean)super.row.get(2)).booleanValue();
						}
						public void setColumnEditable(boolean value)
						{
							super.row.set(2, new Boolean(value));
						}
						public void setCellColumnEditableTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public void setColumnRequiredReadOnly(boolean value)
						{
							super.row.setReadOnly(3, value);
						}
						public boolean isColumnRequiredReadOnly()
						{
							return super.row.isReadOnly(3);
						}
						public void showColumnRequiredOpened()
						{
							super.row.showOpened(3);
						}
						public boolean getColumnRequired()
						{
							return ((Boolean)super.row.get(3)).booleanValue();
						}
						public void setColumnRequired(boolean value)
						{
							super.row.set(3, new Boolean(value));
						}
						public void setCellColumnRequiredTooltip(String value)
						{
							super.row.setTooltip(3, value);
						}
						public ims.admin.vo.EDAttendanceControlsConfigVo getValue()
						{
							return (ims.admin.vo.EDAttendanceControlsConfigVo)super.row.getValue();
						}
						public void setValue(ims.admin.vo.EDAttendanceControlsConfigVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdInvoicesBillRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdInvoicesBillRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdInvoicesBillRow get(int index)
						{
							return new grdInvoicesBillRow(super.collection.get(index));
						}
						public grdInvoicesBillRow newRow()
						{
							return new grdInvoicesBillRow(super.collection.newRow());
						}
						public grdInvoicesBillRow newRow(boolean autoSelect)
						{
							return new grdInvoicesBillRow(super.collection.newRow(autoSelect));
						}
						public grdInvoicesBillRow newRowAt(int index)
						{
							return new grdInvoicesBillRow(super.collection.newRowAt(index));
						}
						public grdInvoicesBillRow newRowAt(int index, boolean autoSelect)
						{
							return new grdInvoicesBillRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdInvoicesBillGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
						{
							super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
						}
						public ims.admin.vo.EDAttendanceControlsConfigVoCollection getValues()
						{
							ims.admin.vo.EDAttendanceControlsConfigVoCollection listOfValues = new ims.admin.vo.EDAttendanceControlsConfigVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.admin.vo.EDAttendanceControlsConfigVo getValue()
						{
							return (ims.admin.vo.EDAttendanceControlsConfigVo)super.grid.getValue();
						}
						public void setValue(ims.admin.vo.EDAttendanceControlsConfigVo value)
						{
							super.grid.setValue(value);
						}
						public grdInvoicesBillRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdInvoicesBillRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdInvoicesBillRowCollection getRows()
						{
							return new grdInvoicesBillRowCollection(super.grid.getRows());
						}
						public grdInvoicesBillRow getRowByValue(ims.admin.vo.EDAttendanceControlsConfigVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdInvoicesBillRow(row);
						}
						public void setColumnScreenControlHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColumnScreenControlHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColumnVisibleHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColumnVisibleHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setColumnEditableHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getColumnEditableHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
						public void setColumnRequiredHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(3, value);
						}
						public String getColumnRequiredHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(3);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 784, 464, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdInvoicesBillTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdInvoicesBillTemp);
						grdInvoicesBillGrid grdInvoicesBill = (grdInvoicesBillGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInvoicesBillGrid.class, m_grdInvoicesBillTemp);
						grdInvoicesBill.addStringColumn("Screen control", 0, 0, 500, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdInvoicesBill.addBoolColumn("Visible", 0, 0, 100, false, true, 0, true);
						grdInvoicesBill.addBoolColumn("Editable", 0, 0, 100, false, false, 0, true);
						grdInvoicesBill.addBoolColumn("Required", 0, 0, -1, false, false, 0, true);
						super.addGrid(grdInvoicesBill);
					}
		
					public grdInvoicesBillGrid grdInvoicesBill()
					{
						return (grdInvoicesBillGrid)super.getGrid(0);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 808, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageAttendanceDetalis = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Attendance Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageAttendanceDetalisContainer m_tabPageAttendanceDetalisContainer = (tabPageAttendanceDetalisContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageAttendanceDetalisContainer.class, m_tabPageAttendanceDetalis, factory);
					super.addContainer(m_tabPageAttendanceDetalis, m_tabPageAttendanceDetalisContainer);
					ims.framework.utils.SizeInfo m_tabPageAttendanceDetalisDesignSize = new ims.framework.utils.SizeInfo(808, 504);
					ims.framework.utils.SizeInfo m_tabPageAttendanceDetalisRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper4.getWidth(), anchoringHelper4.getHeight());
					m_tabPageAttendanceDetalisContainer.setContext(form, appForm, m_tabPageAttendanceDetalis, loader, startControlID, m_tabPageAttendanceDetalisDesignSize, m_tabPageAttendanceDetalisRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 808, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageChartRequested = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Chart requested", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageChartRequestedContainer m_tabPageChartRequestedContainer = (tabPageChartRequestedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageChartRequestedContainer.class, m_tabPageChartRequested, factory);
					super.addContainer(m_tabPageChartRequested, m_tabPageChartRequestedContainer);
					ims.framework.utils.SizeInfo m_tabPageChartRequestedDesignSize = new ims.framework.utils.SizeInfo(808, 504);
					ims.framework.utils.SizeInfo m_tabPageChartRequestedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper5.getWidth(), anchoringHelper5.getHeight());
					m_tabPageChartRequestedContainer.setContext(form, appForm, m_tabPageChartRequested, loader, startControlID, m_tabPageChartRequestedDesignSize, m_tabPageChartRequestedRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 808, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageInvoicesBilling = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Invoices/Billing", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageInvoicesBillingContainer m_tabPageInvoicesBillingContainer = (tabPageInvoicesBillingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageInvoicesBillingContainer.class, m_tabPageInvoicesBilling, factory);
					super.addContainer(m_tabPageInvoicesBilling, m_tabPageInvoicesBillingContainer);
					ims.framework.utils.SizeInfo m_tabPageInvoicesBillingDesignSize = new ims.framework.utils.SizeInfo(808, 504);
					ims.framework.utils.SizeInfo m_tabPageInvoicesBillingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper6.getWidth(), anchoringHelper6.getHeight());
					m_tabPageInvoicesBillingContainer.setContext(form, appForm, m_tabPageInvoicesBilling, loader, startControlID, m_tabPageInvoicesBillingDesignSize, m_tabPageInvoicesBillingRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabPageAttendanceDetalis().setVisible(false);
					tabPageChartRequested().setVisible(false);
					tabPageInvoicesBilling().setVisible(false);
				}
				public void settabPageAttendanceDetalisEnabled(boolean value)
				{
					tabPageAttendanceDetalis().setEnabled(value);
				}
				public void settabPageChartRequestedEnabled(boolean value)
				{
					tabPageChartRequested().setEnabled(value);
				}
				public void settabPageInvoicesBillingEnabled(boolean value)
				{
					tabPageInvoicesBilling().setEnabled(value);
				}
				public void showtabPageAttendanceDetalis()
				{
					tabPageChartRequested().setVisible(false);
					tabPageInvoicesBilling().setVisible(false);
					tabPageAttendanceDetalis().setVisible(true);
				}
				public void showtabPageChartRequested()
				{
					tabPageAttendanceDetalis().setVisible(false);
					tabPageInvoicesBilling().setVisible(false);
					tabPageChartRequested().setVisible(true);
				}
				public void showtabPageInvoicesBilling()
				{
					tabPageAttendanceDetalis().setVisible(false);
					tabPageChartRequested().setVisible(false);
					tabPageInvoicesBilling().setVisible(true);
				}
		
				public tabPageAttendanceDetalisContainer tabPageAttendanceDetalis()
				{
					return (tabPageAttendanceDetalisContainer)super.layers.get(0);
				}
				public tabPageChartRequestedContainer tabPageChartRequested()
				{
					return (tabPageChartRequestedContainer)super.layers.get(1);
				}
				public tabPageInvoicesBillingContainer tabPageInvoicesBilling()
				{
					return (tabPageInvoicesBillingContainer)super.layers.get(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrAttendanceDetailsLayer m_lyrAttendanceDetailsLayer = (lyrAttendanceDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrAttendanceDetailsLayer.class, this, factory);
				super.addLayer(m_lyrAttendanceDetailsLayer);
				m_lyrAttendanceDetailsLayer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 392, 16, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Invoices /  Billing", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 232, 16, 132, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Chart requested and / or ", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 209, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "This site will use Attendance details plus ", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 741, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 663, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 560, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 368, 16, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 208, 16, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
			}

			public lyrAttendanceDetailsLayer lyrAttendanceDetails()
			{
				return (lyrAttendanceDetailsLayer)super.getLayer(0);
			}
			public Button btnCancel()
			{
				return (Button)super.getControl(6);
			}
			public Button btnSave()
			{
				return (Button)super.getControl(7);
			}
			public Button btnEdit()
			{
				return (Button)super.getControl(8);
			}
			public CheckBox chkInvoiceBill()
			{
				return (CheckBox)super.getControl(9);
			}
			public CheckBox chkChartRequest()
			{
				return (CheckBox)super.getControl(10);
			}
		}
		public static class tabPageOtherContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
			}

		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageAttendanceDetConfig = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Attendance Details Config", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageAttendanceDetConfigContainer m_tabPageAttendanceDetConfigContainer = (tabPageAttendanceDetConfigContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageAttendanceDetConfigContainer.class, m_tabPageAttendanceDetConfig, factory);
			super.addContainer(m_tabPageAttendanceDetConfig, m_tabPageAttendanceDetConfigContainer);
			ims.framework.utils.SizeInfo m_tabPageAttendanceDetConfigDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabPageAttendanceDetConfigRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
			m_tabPageAttendanceDetConfigContainer.setContext(form, appForm, m_tabPageAttendanceDetConfig, loader, startControlID, m_tabPageAttendanceDetConfigDesignSize, m_tabPageAttendanceDetConfigRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 616, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageOther = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Other", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageOtherContainer m_tabPageOtherContainer = (tabPageOtherContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageOtherContainer.class, m_tabPageOther, factory);
			super.addContainer(m_tabPageOther, m_tabPageOtherContainer);
			ims.framework.utils.SizeInfo m_tabPageOtherDesignSize = new ims.framework.utils.SizeInfo(832, 616);
			ims.framework.utils.SizeInfo m_tabPageOtherRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
			m_tabPageOtherContainer.setContext(form, appForm, m_tabPageOther, loader, startControlID, m_tabPageOtherDesignSize, m_tabPageOtherRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageAttendanceDetConfig().setVisible(false);
			tabPageOther().setVisible(false);
		}
		public void settabPageAttendanceDetConfigEnabled(boolean value)
		{
			tabPageAttendanceDetConfig().setEnabled(value);
		}
		public void settabPageOtherEnabled(boolean value)
		{
			tabPageOther().setEnabled(value);
		}
		public void showtabPageAttendanceDetConfig()
		{
			tabPageOther().setVisible(false);
			tabPageAttendanceDetConfig().setVisible(true);
		}
		public void showtabPageOther()
		{
			tabPageAttendanceDetConfig().setVisible(false);
			tabPageOther().setVisible(true);
		}

		public tabPageAttendanceDetConfigContainer tabPageAttendanceDetConfig()
		{
			return (tabPageAttendanceDetConfigContainer)super.layers.get(0);
		}
		public tabPageOtherContainer tabPageOther()
		{
			return (tabPageOtherContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrEDLayer m_lyrEDLayer = (lyrEDLayer)LayerFlyweightFactory.getInstance().createLayer(lyrEDLayer.class, this, factory);
		super.addLayer(m_lyrEDLayer);
		m_lyrEDLayer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}


	public lyrEDLayer lyrED()
	{
		return (lyrEDLayer)super.getLayer(0);
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ShowHideEditButton = new ims.framework.ContextVariable("ShowHideEditButton", prefix + "_lv_Admin.EDConfig.__internal_x_context__ShowHideEditButton_" + componentIdentifier + "");
			cxl_CurrentEDAttendanceformsConfig = new ims.framework.ContextVariable("CurrentEDAttendanceformsConfig", prefix + "_lv_Admin.EDConfig.__internal_x_context__CurrentEDAttendanceformsConfig_" + componentIdentifier + "");
		}
		
		public boolean getShowHideEditButtonIsNotNull()
		{
			return !cxl_ShowHideEditButton.getValueIsNull(context);
		}
		public Boolean getShowHideEditButton()
		{
			return (Boolean)cxl_ShowHideEditButton.getValue(context);
		}
		public void setShowHideEditButton(Boolean value)
		{
			cxl_ShowHideEditButton.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowHideEditButton = null;
		public boolean getCurrentEDAttendanceformsConfigIsNotNull()
		{
			return !cxl_CurrentEDAttendanceformsConfig.getValueIsNull(context);
		}
		public ims.core.vo.EDAttendanceformsConfigVo getCurrentEDAttendanceformsConfig()
		{
			return (ims.core.vo.EDAttendanceformsConfigVo)cxl_CurrentEDAttendanceformsConfig.getValue(context);
		}
		public void setCurrentEDAttendanceformsConfig(ims.core.vo.EDAttendanceformsConfigVo value)
		{
			cxl_CurrentEDAttendanceformsConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentEDAttendanceformsConfig = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[74];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.EDConfig.__internal_x_context__CurrentEDAttendanceformsConfig_" + componentIdentifier, "BO-1004100061-ID", "ID_EDAttendenceformsConfig");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.EDConfig.__internal_x_context__CurrentEDAttendanceformsConfig_" + componentIdentifier, "BO-1004100061-CHARTREQUESTEDTABVISIBLE", "ChartRequestedTabVisible");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.EDConfig.__internal_x_context__CurrentEDAttendanceformsConfig_" + componentIdentifier, "BO-1004100061-INVOICESBILLINGTABVISIBLE", "InvoicesBillingTabVisible");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
