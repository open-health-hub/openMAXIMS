//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.batchprinting;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrScheduleLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageDailyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 112, 40, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "day(s)", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 6, 40, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Every", new Integer(0), null, new Integer(0)}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 40, 38, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(9)}));
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 5, 5, 505, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public IntBox intDays()
			{
				return (IntBox)super.getControl(2);
			}
			public HTMLViewer htmLegendDaily()
			{
				return (HTMLViewer)super.getControl(3);
			}
		}
		public static class tabPageWeeklyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 41, 23, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "On:", new Integer(0), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 368, 39, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 320, 41, 45, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Sun", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 272, 41, 45, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Sat", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 224, 41, 45, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Fri", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 176, 41, 45, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Thu", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 128, 41, 45, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Wed", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 80, 41, 45, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Tue", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 32, 41, 45, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Mon", Boolean.TRUE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 408, 40, 100, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 5, 4, 505, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public TextBox txtWeeklyRequired()
			{
				return (TextBox)super.getControl(1);
			}
			public CheckBox chkSun()
			{
				return (CheckBox)super.getControl(2);
			}
			public CheckBox chkSat()
			{
				return (CheckBox)super.getControl(3);
			}
			public CheckBox chkFri()
			{
				return (CheckBox)super.getControl(4);
			}
			public CheckBox chkThu()
			{
				return (CheckBox)super.getControl(5);
			}
			public CheckBox chkWed()
			{
				return (CheckBox)super.getControl(6);
			}
			public CheckBox chkTue()
			{
				return (CheckBox)super.getControl(7);
			}
			public CheckBox chkMon()
			{
				return (CheckBox)super.getControl(8);
			}
			public IntBox intWeeks()
			{
				return (IntBox)super.getControl(9);
			}
			public HTMLViewer htmLegendWeekly()
			{
				return (HTMLViewer)super.getControl(10);
			}
		}
		public static class tabPageMonthlyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 184, 48, 14, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "at", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 130, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "On this day of the month", new Integer(0), null, new Integer(0)}));
		
				// Time Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 200, 46, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, null, Boolean.TRUE, ""}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 136, 46, 32, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(9)}));
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 5, 4, 505, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public TimeControl timMonthlyTime()
			{
				return (TimeControl)super.getControl(2);
			}
			public IntBox intDayOfMonth()
			{
				return (IntBox)super.getControl(3);
			}
			public HTMLViewer htmLegendMonthly()
			{
				return (HTMLViewer)super.getControl(4);
			}
		}
		public static class tabPageFrequencyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 116, 34, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "min(s)", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 34, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Every", new Integer(0), null, new Integer(0)}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 48, 32, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(2)}));
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 5, 5, 505, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public IntBox intFreqMins()
			{
				return (IntBox)super.getControl(2);
			}
			public HTMLViewer htmlLegendFrequency()
			{
				return (HTMLViewer)super.getControl(3);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 288, 475, 536, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabPageDaily = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Daily", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageDailyContainer m_tabPageDailyContainer = (tabPageDailyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageDailyContainer.class, m_tabPageDaily, factory);
			super.addContainer(m_tabPageDaily, m_tabPageDailyContainer);
			ims.framework.utils.SizeInfo m_tabPageDailyDesignSize = new ims.framework.utils.SizeInfo(536, 112);
			ims.framework.utils.SizeInfo m_tabPageDailyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper25.getWidth(), anchoringHelper25.getHeight());
			m_tabPageDailyContainer.setContext(form, appForm, m_tabPageDaily, loader, form_images_local, startControlID, m_tabPageDailyDesignSize, m_tabPageDailyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 288, 475, 536, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabPageWeekly = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Weekly", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageWeeklyContainer m_tabPageWeeklyContainer = (tabPageWeeklyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageWeeklyContainer.class, m_tabPageWeekly, factory);
			super.addContainer(m_tabPageWeekly, m_tabPageWeeklyContainer);
			ims.framework.utils.SizeInfo m_tabPageWeeklyDesignSize = new ims.framework.utils.SizeInfo(536, 112);
			ims.framework.utils.SizeInfo m_tabPageWeeklyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper26.getWidth(), anchoringHelper26.getHeight());
			m_tabPageWeeklyContainer.setContext(form, appForm, m_tabPageWeekly, loader, form_images_local, startControlID, m_tabPageWeeklyDesignSize, m_tabPageWeeklyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 288, 475, 536, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabPageMonthly = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Monthly", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageMonthlyContainer m_tabPageMonthlyContainer = (tabPageMonthlyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageMonthlyContainer.class, m_tabPageMonthly, factory);
			super.addContainer(m_tabPageMonthly, m_tabPageMonthlyContainer);
			ims.framework.utils.SizeInfo m_tabPageMonthlyDesignSize = new ims.framework.utils.SizeInfo(536, 112);
			ims.framework.utils.SizeInfo m_tabPageMonthlyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper27.getWidth(), anchoringHelper27.getHeight());
			m_tabPageMonthlyContainer.setContext(form, appForm, m_tabPageMonthly, loader, form_images_local, startControlID, m_tabPageMonthlyDesignSize, m_tabPageMonthlyRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 288, 475, 536, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabPageFrequency = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Periodically", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPageFrequencyContainer m_tabPageFrequencyContainer = (tabPageFrequencyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageFrequencyContainer.class, m_tabPageFrequency, factory);
			super.addContainer(m_tabPageFrequency, m_tabPageFrequencyContainer);
			ims.framework.utils.SizeInfo m_tabPageFrequencyDesignSize = new ims.framework.utils.SizeInfo(536, 112);
			ims.framework.utils.SizeInfo m_tabPageFrequencyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper28.getWidth(), anchoringHelper28.getHeight());
			m_tabPageFrequencyContainer.setContext(form, appForm, m_tabPageFrequency, loader, form_images_local, startControlID, m_tabPageFrequencyDesignSize, m_tabPageFrequencyRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageDaily().setVisible(false);
			tabPageWeekly().setVisible(false);
			tabPageMonthly().setVisible(false);
			tabPageFrequency().setVisible(false);
		}
		public void showtabPageDaily()
		{
			tabPageWeekly().setVisible(false);
			tabPageMonthly().setVisible(false);
			tabPageFrequency().setVisible(false);
			tabPageDaily().setVisible(true);
		}
		public void showtabPageWeekly()
		{
			tabPageDaily().setVisible(false);
			tabPageMonthly().setVisible(false);
			tabPageFrequency().setVisible(false);
			tabPageWeekly().setVisible(true);
		}
		public void showtabPageMonthly()
		{
			tabPageDaily().setVisible(false);
			tabPageWeekly().setVisible(false);
			tabPageFrequency().setVisible(false);
			tabPageMonthly().setVisible(true);
		}
		public void showtabPageFrequency()
		{
			tabPageDaily().setVisible(false);
			tabPageWeekly().setVisible(false);
			tabPageMonthly().setVisible(false);
			tabPageFrequency().setVisible(true);
		}

		public tabPageDailyContainer tabPageDaily()
		{
			return (tabPageDailyContainer)super.layers.get(0);
		}
		public tabPageWeeklyContainer tabPageWeekly()
		{
			return (tabPageWeeklyContainer)super.layers.get(1);
		}
		public tabPageMonthlyContainer tabPageMonthly()
		{
			return (tabPageMonthlyContainer)super.layers.get(2);
		}
		public tabPageFrequencyContainer tabPageFrequency()
		{
			return (tabPageFrequencyContainer)super.layers.get(3);
		}
	}
	public static class cmbTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ntpf.vo.lookups.JobType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ntpf.vo.lookups.JobType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ntpf.vo.lookups.JobType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ntpf.vo.lookups.JobType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ntpf.vo.lookups.JobType value)
		{
			return super.control.removeRow(value);
		}
		public ims.ntpf.vo.lookups.JobType getValue()
		{
			return (ims.ntpf.vo.lookups.JobType)super.control.getValue();
		}
		public void setValue(ims.ntpf.vo.lookups.JobType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbFrequencyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(String value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(String value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(String value)
		{
			return super.control.removeRow(value);
		}
		public String getValue()
		{
			return (String)super.control.getValue();
		}
		public void setValue(String value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocSiteLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocSiteLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocSiteLiteVo getValue()
		{
			return (ims.core.vo.LocSiteLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocSiteLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdJobsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdJobsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnDescriptionReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnDescriptionReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnDescriptionOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColumnDescription(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColumnDescription()
		{
			return (String)super.row.get(0);
		}
		public void setColumnDescription(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnDescriptionTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnDateOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColumnDate(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColumnDate()
		{
			return (String)super.row.get(1);
		}
		public void setColumnDate(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnClockReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnClockReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnClockOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColumnClock(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.framework.utils.Image getColumnClock()
		{
			return (ims.framework.utils.Image)super.row.get(2);
		}
		public void setColumnClock(ims.framework.utils.Image value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnClockTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColumnTriggerReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColumnTriggerReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColumnTriggerOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColumnTrigger(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColumnTrigger()
		{
			return (String)super.row.get(3);
		}
		public void setColumnTrigger(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColumnTriggerTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColumnLastRunReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColumnLastRunReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColumnLastRunOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColumnLastRun(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColumnLastRun()
		{
			return (String)super.row.get(4);
		}
		public void setColumnLastRun(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColumnLastRunTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColumnLastSuccessfulRunReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColumnLastSuccessfulRunReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColumnLastSuccessfulRunOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColumnLastSuccessfulRun(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColumnLastSuccessfulRun()
		{
			return (String)super.row.get(5);
		}
		public void setColumnLastSuccessfulRun(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColumnLastSuccessfulRunTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColumnAppointmentsUpdatedReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColumnAppointmentsUpdatedReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColumnAppointmentsUpdatedOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColumnAppointmentsUpdated(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getColumnAppointmentsUpdated()
		{
			return (String)super.row.get(6);
		}
		public void setColumnAppointmentsUpdated(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColumnAppointmentsUpdatedTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.admin.vo.PrintAgentVo getValue()
		{
			return (ims.admin.vo.PrintAgentVo)super.row.getValue();
		}
		public void setValue(ims.admin.vo.PrintAgentVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdJobsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdJobsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdJobsRow get(int index)
		{
			return new grdJobsRow(super.collection.get(index));
		}
		public grdJobsRow newRow()
		{
			return new grdJobsRow(super.collection.newRow());
		}
		public grdJobsRow newRow(boolean autoSelect)
		{
			return new grdJobsRow(super.collection.newRow(autoSelect));
		}
		public grdJobsRow newRowAt(int index)
		{
			return new grdJobsRow(super.collection.newRowAt(index));
		}
		public grdJobsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdJobsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdJobsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.admin.vo.PrintAgentVoCollection getValues()
		{
			ims.admin.vo.PrintAgentVoCollection listOfValues = new ims.admin.vo.PrintAgentVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.admin.vo.PrintAgentVo getValue()
		{
			return (ims.admin.vo.PrintAgentVo)super.grid.getValue();
		}
		public void setValue(ims.admin.vo.PrintAgentVo value)
		{
			super.grid.setValue(value);
		}
		public grdJobsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdJobsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdJobsRowCollection getRows()
		{
			return new grdJobsRowCollection(super.grid.getRows());
		}
		public grdJobsRow getRowByValue(ims.admin.vo.PrintAgentVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdJobsRow(row);
		}
		public void setColumnDescriptionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnDescriptionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnClockHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnClockHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColumnTriggerHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColumnTriggerHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColumnLastRunHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColumnLastRunHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColumnLastSuccessfulRunHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColumnLastSuccessfulRunHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColumnAppointmentsUpdatedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColumnAppointmentsUpdatedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
	}
	public static class grdReportsToPrintRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdReportsToPrintRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColumnReportReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnReportReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnReportOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnReport()
		{
			return (String)super.row.get(0);
		}
		public void setColumnReport(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnReportTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnPrintToReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnPrintToReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnPrintToOpened()
		{
			super.row.showOpened(1);
		}
		public Object getColumnPrintTo()
		{
			return super.row.get(1);
		}
		public void setColumnPrintTo(Object value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnPrintToTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public java.lang.Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.row.setValue(value);
		}
		public grdReportsToPrintRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdReportsToPrintRow(super.row.getParent());
		}
		public grdReportsToPrintRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdReportsToPrintRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdReportsToPrintRowCollection collection;
	}
	public static class grdReportsToPrintRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdReportsToPrintRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdReportsToPrintRow get(int index)
		{
			return new grdReportsToPrintRow(super.collection.get(index));
		}
		public grdReportsToPrintRow newRow()
		{
			return new grdReportsToPrintRow(super.collection.newRow());
		}
		public grdReportsToPrintRow newRow(boolean autoSelect)
		{
			return new grdReportsToPrintRow(super.collection.newRow(autoSelect));
		}
		public grdReportsToPrintRow newRowAt(int index)
		{
			return new grdReportsToPrintRow(super.collection.newRowAt(index));
		}
		public grdReportsToPrintRow newRowAt(int index, boolean autoSelect)
		{
			return new grdReportsToPrintRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdReportsToPrintGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdReportsToPrintRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdReportsToPrintRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdReportsToPrintRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdReportsToPrintRow[] result = new GenForm.grdReportsToPrintRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdReportsToPrintRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdReportsToPrintRow[] getAllRows(GenForm.grdReportsToPrintRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdReportsToPrintRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdReportsToPrintRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdReportsToPrintRow[] result = new GenForm.grdReportsToPrintRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdReportsToPrintRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdReportsToPrintRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdReportsToPrintRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdReportsToPrintRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public java.lang.Object[] getValues()
		{
			java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public java.lang.Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.grid.setValue(value);
		}
		public grdReportsToPrintRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdReportsToPrintRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdReportsToPrintRowCollection getRows()
		{
			return new grdReportsToPrintRowCollection(super.grid.getRows());
		}
		public grdReportsToPrintRow getRowByValue(java.lang.Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdReportsToPrintRow(row);
		}
		public void setColumnReportHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnReportHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnPrintToHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnPrintToHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox ColumnPrintToComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
	}
	public static class grdReportsAvailableRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdReportsAvailableRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColumnReportReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnReportReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnReportOpened()
		{
			super.row.showOpened(0);
		}
		public String getColumnReport()
		{
			return (String)super.row.get(0);
		}
		public void setColumnReport(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnReportTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public java.lang.Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.row.setValue(value);
		}
		public grdReportsAvailableRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdReportsAvailableRow(super.row.getParent());
		}
		public grdReportsAvailableRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdReportsAvailableRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdReportsAvailableRowCollection collection;
	}
	public static class grdReportsAvailableRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdReportsAvailableRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdReportsAvailableRow get(int index)
		{
			return new grdReportsAvailableRow(super.collection.get(index));
		}
		public grdReportsAvailableRow newRow()
		{
			return new grdReportsAvailableRow(super.collection.newRow());
		}
		public grdReportsAvailableRow newRow(boolean autoSelect)
		{
			return new grdReportsAvailableRow(super.collection.newRow(autoSelect));
		}
		public grdReportsAvailableRow newRowAt(int index)
		{
			return new grdReportsAvailableRow(super.collection.newRowAt(index));
		}
		public grdReportsAvailableRow newRowAt(int index, boolean autoSelect)
		{
			return new grdReportsAvailableRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdReportsAvailableGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdReportsAvailableRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdReportsAvailableRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdReportsAvailableRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdReportsAvailableRow[] result = new GenForm.grdReportsAvailableRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdReportsAvailableRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdReportsAvailableRow[] getAllRows(GenForm.grdReportsAvailableRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdReportsAvailableRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdReportsAvailableRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdReportsAvailableRow[] result = new GenForm.grdReportsAvailableRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdReportsAvailableRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdReportsAvailableRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdReportsAvailableRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdReportsAvailableRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		public java.lang.Object[] getValues()
		{
			java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public java.lang.Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.grid.setValue(value);
		}
		public grdReportsAvailableRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdReportsAvailableRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdReportsAvailableRowCollection getRows()
		{
			return new grdReportsAvailableRowCollection(super.grid.getRows());
		}
		public grdReportsAvailableRow getRowByValue(java.lang.Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdReportsAvailableRow(row);
		}
		public void setColumnReportHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnReportHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 176, 816, 416, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Job Details", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 26, 475, 254, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,"Schedule task", new Integer(2), ""}));

		// Layer Clasess
		lyrScheduleLayer m_lyrScheduleLayer = (lyrScheduleLayer)LayerFlyweightFactory.getInstance().createLayer(lyrScheduleLayer.class, this, factory);
		super.addLayer(m_lyrScheduleLayer);
		m_lyrScheduleLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 456, 240, 126, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Reports to be printed", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 26, 240, 104, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Reports Available", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 530, 210, 57, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Location:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 280, 209, 59, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Job Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 26, 210, 96, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Job Description:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 243, 557, 20, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "hrs", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 42, 557, 87, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Appts within last", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 42, 533, 87, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Start date / time", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 42, 509, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Run this task", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 280, 598, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Re-Print", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 16, 598, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 192, 598, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Run Job", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 668, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 757, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 104, 598, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 401, 400, 40, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<<", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 401, 368, 40, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 401, 336, 40, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, ">", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 120, 208, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 264, 555, 0, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 133, 531, 131, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 341, 207, 171, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ComboBox m_cmbTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTypeTemp);
		cmbTypeComboBox cmbType = (cmbTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTypeComboBox.class, m_cmbTypeTemp);
		super.addComboBox(cmbType);
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 133, 507, 131, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbFrequencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbFrequencyTemp);
		cmbFrequencyComboBox cmbFrequency = (cmbFrequencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFrequencyComboBox.class, m_cmbFrequencyTemp);
		super.addComboBox(cmbFrequency);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 586, 208, 160, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		ComboBox m_qmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbLocationTemp);
		qmbLocationComboBox qmbLocation = (qmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbLocationComboBox.class, m_qmbLocationTemp);
		super.addComboBox(qmbLocation);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 768, 210, 50, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Active", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 816, 152, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdJobsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdJobsTemp);
		grdJobsGrid grdJobs = (grdJobsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdJobsGrid.class, m_grdJobsTemp);
		grdJobs.addStringColumn("Job description", 0, 0, 160, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdJobs.addStringColumn("Created on", 0, 0, 100, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdJobs.addImageColumn(" ", 0, 0, 25, true, 0);
		grdJobs.addStringColumn("Trigger", 0, 0, 220, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdJobs.addStringColumn("Last run", 0, 0, 100, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdJobs.addStringColumn("Last successful run", 0, 0, 120, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdJobs.addStringColumn("Appts. Updated", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdJobs);
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 456, 256, 368, 208, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdReportsToPrintTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdReportsToPrintTemp);
		grdReportsToPrintGrid grdReportsToPrint = (grdReportsToPrintGrid)GridFlyweightFactory.getInstance().createGridBridge(grdReportsToPrintGrid.class, m_grdReportsToPrintTemp);
		grdReportsToPrint.addTreeColumn("Report / Template name", 0, 200, false, true);
		grdReportsToPrint.addComboBoxColumn("Print to", 0, 0, -1, false, true, true, false, true, -1);
		super.addGrid(grdReportsToPrint);
		RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 26, 256, 360, 208, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		Grid m_grdReportsAvailableTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdReportsAvailableTemp);
		grdReportsAvailableGrid grdReportsAvailable = (grdReportsAvailableGrid)GridFlyweightFactory.getInstance().createGridBridge(grdReportsAvailableGrid.class, m_grdReportsAvailableTemp);
		grdReportsAvailable.addTreeColumn("Report / Template name", 0, -1, false, true);
		super.addGrid(grdReportsAvailable);

		// IntBox Controls
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 133, 555, 101, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrScheduleLayer lyrSchedule()
	{
		return (lyrScheduleLayer)super.getLayer(0);
	}
	public Label lblLocation()
	{
		return (Label)super.getControl(8);
	}
	public Label lblHrs2()
	{
		return (Label)super.getControl(11);
	}
	public Label lblHrs1()
	{
		return (Label)super.getControl(12);
	}
	public Label lblStartDateTime()
	{
		return (Label)super.getControl(13);
	}
	public Button btnRePrint()
	{
		return (Button)super.getControl(15);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(16);
	}
	public Button btnPrintNow()
	{
		return (Button)super.getControl(17);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(18);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(19);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(20);
	}
	public Button btnRemoveAll()
	{
		return (Button)super.getControl(21);
	}
	public Button btnRemoveReport()
	{
		return (Button)super.getControl(22);
	}
	public Button btnAddReport()
	{
		return (Button)super.getControl(23);
	}
	public TextBox txtDescription()
	{
		return (TextBox)super.getControl(24);
	}
	public TextBox txtHrsRequired()
	{
		return (TextBox)super.getControl(25);
	}
	public DateTimeControl dtimStart()
	{
		return (DateTimeControl)super.getControl(26);
	}
	public cmbTypeComboBox cmbType()
	{
		return (cmbTypeComboBox)super.getComboBox(0);
	}
	public cmbFrequencyComboBox cmbFrequency()
	{
		return (cmbFrequencyComboBox)super.getComboBox(1);
	}
	public qmbLocationComboBox qmbLocation()
	{
		return (qmbLocationComboBox)super.getComboBox(2);
	}
	public CheckBox chkActive()
	{
		return (CheckBox)super.getControl(30);
	}
	public grdJobsGrid grdJobs()
	{
		return (grdJobsGrid)super.getGrid(0);
	}
	public grdReportsToPrintGrid grdReportsToPrint()
	{
		return (grdReportsToPrintGrid)super.getGrid(1);
	}
	public grdReportsAvailableGrid grdReportsAvailable()
	{
		return (grdReportsAvailableGrid)super.getGrid(2);
	}
	public IntBox intHrs()
	{
		return (IntBox)super.getControl(34);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				BatchPrintingHistory = new LocalFormName(103103);
			}
			public final FormName BatchPrintingHistory;
		}

		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Calendar_Select_Day = new ImageHelper(103137, "Images/Admin/calendar_select_day.png", new Integer(16), new Integer(16));
				Calendar_Select_Week = new ImageHelper(103138, "Images/Admin/Calendar-Select Week.gif", new Integer(16), new Integer(16));
				Calendar_Select_Month = new ImageHelper(103159, "Images/Admin/Calendar-Select Month.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Calendar_Select_Day;
			public final ims.framework.utils.Image Calendar_Select_Week;
			public final ims.framework.utils.Image Calendar_Select_Month;
		}
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_JobSettings = new ims.framework.ContextVariable("JobSettings", prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier + "");
			cxl_ReportsAvailable = new ims.framework.ContextVariable("ReportsAvailable", prefix + "_lv_Admin.BatchPrinting.__internal_x_context__ReportsAvailable_" + componentIdentifier + "");
			cxl_LastId = new ims.framework.ContextVariable("LastId", prefix + "_lv_Admin.BatchPrinting.__internal_x_context__LastId_" + componentIdentifier + "");
			cxl_AvailablePrinters = new ims.framework.ContextVariable("AvailablePrinters", prefix + "_lv_Admin.BatchPrinting.__internal_x_context__AvailablePrinters_" + componentIdentifier + "");
			cxl_SortColCreatedOn = new ims.framework.ContextVariable("SortColCreatedOn", prefix + "_lv_Admin.BatchPrinting.__internal_x_context__SortColCreatedOn_" + componentIdentifier + "");
			cxl_SortColLastRun = new ims.framework.ContextVariable("SortColLastRun", prefix + "_lv_Admin.BatchPrinting.__internal_x_context__SortColLastRun_" + componentIdentifier + "");
			cxl_SortColSuccessRun = new ims.framework.ContextVariable("SortColSuccessRun", prefix + "_lv_Admin.BatchPrinting.__internal_x_context__SortColSuccessRun_" + componentIdentifier + "");
		}
		
		public boolean getJobSettingsIsNotNull()
		{
			return !cxl_JobSettings.getValueIsNull(context);
		}
		public ims.admin.vo.PrintAgentVo getJobSettings()
		{
			return (ims.admin.vo.PrintAgentVo)cxl_JobSettings.getValue(context);
		}
		public void setJobSettings(ims.admin.vo.PrintAgentVo value)
		{
			cxl_JobSettings.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_JobSettings = null;
		public boolean getReportsAvailableIsNotNull()
		{
			return !cxl_ReportsAvailable.getValueIsNull(context);
		}
		public ims.admin.vo.ReportVoCollection getReportsAvailable()
		{
			return (ims.admin.vo.ReportVoCollection)cxl_ReportsAvailable.getValue(context);
		}
		public void setReportsAvailable(ims.admin.vo.ReportVoCollection value)
		{
			cxl_ReportsAvailable.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReportsAvailable = null;
		public boolean getLastIdIsNotNull()
		{
			return !cxl_LastId.getValueIsNull(context);
		}
		public Integer getLastId()
		{
			return (Integer)cxl_LastId.getValue(context);
		}
		public void setLastId(Integer value)
		{
			cxl_LastId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastId = null;
		public boolean getAvailablePrintersIsNotNull()
		{
			return !cxl_AvailablePrinters.getValueIsNull(context);
		}
		public String[] getAvailablePrinters()
		{
			return (String[])cxl_AvailablePrinters.getValue(context);
		}
		public void setAvailablePrinters(String[] value)
		{
			cxl_AvailablePrinters.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AvailablePrinters = null;
		public boolean getSortColCreatedOnIsNotNull()
		{
			return !cxl_SortColCreatedOn.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortColCreatedOn()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortColCreatedOn.getValue(context);
		}
		public void setSortColCreatedOn(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortColCreatedOn.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortColCreatedOn = null;
		public boolean getSortColLastRunIsNotNull()
		{
			return !cxl_SortColLastRun.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortColLastRun()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortColLastRun.getValue(context);
		}
		public void setSortColLastRun(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortColLastRun.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortColLastRun = null;
		public boolean getSortColSuccessRunIsNotNull()
		{
			return !cxl_SortColSuccessRun.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSortColSuccessRun()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SortColSuccessRun.getValue(context);
		}
		public void setSortColSuccessRun(ims.framework.enumerations.SortOrder value)
		{
			cxl_SortColSuccessRun.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SortColSuccessRun = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[82];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-ID", "ID_PrintAgent");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-QUERYSERVERURL", "QueryServerUrl");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-REPORTSERVERURL", "ReportServerUrl");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-DESCRIPTION", "Description");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-TRIGGER", "Trigger");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-LASTSUCCESSFULRUNDATETIME", "LastSuccessfulRunDateTime");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-LASTRUNDATETIME", "LastRunDateTime");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-JOBTYPE", "JobType");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-ISACTIVE", "IsActive");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-DNAAPPTSINLASTXHRS", "DNAApptsInLastXhrs");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.BatchPrinting.__internal_x_context__JobSettings_" + componentIdentifier, "BO-1004100014-NOOFRECORDSUPDATED", "NoOfRecordsUpdated");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
