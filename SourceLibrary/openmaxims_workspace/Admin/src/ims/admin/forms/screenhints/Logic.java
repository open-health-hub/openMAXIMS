//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3947.16317)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.admin.forms.screenhints;

import ims.admin.forms.screenhints.GenForm.grdFormHintsRow;
import ims.admin.forms.screenhints.GenForm.grdHintFormsRow;
import ims.admin.vo.AppFormVoCollection;
import ims.configuration.Configuration;
import ims.core.vo.ScreenHintVo;
import ims.core.vo.ScreenHintVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppForm;

import java.util.Collection;
import java.util.Iterator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		
		open();
	}
	
	private void open() 
	{
		clearScreen();
		getScreenHintForms();
	}

	private void clearScreen()
	{
		form.grdFormHints().getRows().clear();
		form.grdHintForms().getRows().clear();
		form.richTextHintDesc().setValue(null);
	}

	private AppFormVoCollection getScreenHintForms()
	{
		// get nav forms from registered forms rather than domain.list
		Collection<IAppForm> forms = null;
		try
		{
			forms = Configuration.loadConfiguration().getRegisteredForms().values();
		}
		catch (ClassCastException e)
		{
			e.printStackTrace();
		}
		catch (NullPointerException e)
		{}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		if (forms == null)
		{
			return null;
		}
		
		ScreenHintVoCollection collScreenHintVo = domain.listScreenHints();
		
		form.getLocalContext().setScreenHints(collScreenHintVo);
		
		AppFormVoCollection collectionForm = new AppFormVoCollection();
		Iterator<IAppForm> iter = forms.iterator();
		boolean bFound = false;
		while (iter.hasNext())
		{
			IAppForm curr = iter.next();

			collScreenHintVo.sort();
			for(int i = 0 ; collScreenHintVo != null && i < collScreenHintVo.size() ; i++)
			{
				if (collScreenHintVo.get(i).getFormIdIsNotNull()
					&& collScreenHintVo.get(i).getFormId().equals(curr.getFormId()))
				{
					grdHintFormsRow row = form.grdHintForms().getRows().newRow();
					if (curr.getImage() != null)
						row.setTypeIcon(curr.getImage());
					else
						row.setTypeIcon(form.getImages().Admin.Form48);
					row.setName(curr.getDescription());
					row.setValue(collScreenHintVo.get(i));
					
					if (form.getLocalContext().getSelectedRecordIsNotNull()
						&& form.getLocalContext().getSelectedRecord().getFormId().equals(collScreenHintVo.get(i).getFormId()))
						bFound = true;
					
					break;
				}
			}
		}
		if (form.getLocalContext().getSelectedRecordIsNotNull()
			&& bFound)
		{
			
			for (int i = 0 ; i < form.grdHintForms().getRows().size() ; i ++)
			{
				if (form.grdHintForms().getRows().get(i).getValue().getFormId().equals(form.getLocalContext().getSelectedRecord().getFormId()))
					form.grdHintForms().setValue(form.grdHintForms().getRows().get(i).getValue());
			}
			hintFormsSelectionChanged();

			form.grdFormHints().setValue(form.getLocalContext().getSelectedRecord());
			formHintSelectionChanged();
		}

		return collectionForm;
	}
	
	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.VIEW);
		open();
	}
	
	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		ScreenHintVo voHint = form.getLocalContext().getSelectedRecord();
		voHint.setUserHintText(form.richTextHintDesc().getValue());
		
		String[] str = voHint.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return;
		}

		try 
		{
			voHint = domain.saveHint(voHint);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(e.getMessage());
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
		}

		form.getLocalContext().setSelectedRecord(voHint);
		form.setMode(FormMode.VIEW);
		open();
	}

	@Override
	protected void onGrdFormHintsSelectionChanged() throws PresentationLogicException 
	{
		formHintSelectionChanged();
	}

	private void formHintSelectionChanged()
	{
		updateContextMenu();
		form.richTextHintDesc().setValue(form.grdFormHints().getSelectedRow().getValue().getUserHintText());
	}

	private void updateContextMenu() 
	{
		form.getContextMenus().disableAllLIPMenuItems();
		form.getContextMenus().getLIPUpdateItem().setVisible(form.getMode().equals(FormMode.VIEW) 
				&& form.grdFormHints().getSelectedRow() != null);
		form.getContextMenus().getLIPUpdateItem().setEnabled(form.getMode().equals(FormMode.VIEW) 
				&& form.grdFormHints().getSelectedRow() != null);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.LIP.Update:
				editHint();
				break;
		}
		updateContextMenu();
	}

	private void editHint() 
	{
		form.setMode(FormMode.EDIT);
		ScreenHintVo voHint = domain.getScreenHint(form.grdFormHints().getSelectedRow().getValue());
		form.getLocalContext().setSelectedRecord(voHint);
		form.richTextHintDesc().setValue(voHint.getUserHintText());
	}

	@Override
	protected void onGrdHintFormsSelectionChanged() throws PresentationLogicException 
	{
		hintFormsSelectionChanged();
	}

	private void hintFormsSelectionChanged() 
	{
		ScreenHintVoCollection collScreenHintVo = form.getLocalContext().getScreenHints();
		
		form.grdFormHints().getRows().clear();
		form.richTextHintDesc().setValue(null);
		for(int i = 0 ; collScreenHintVo != null && i < collScreenHintVo.size() ; i++)
		{
			if (collScreenHintVo.get(i).getFormIdIsNotNull()
				&& collScreenHintVo.get(i).getFormId().equals(form.grdHintForms().getValue().getFormId()))
			{
				grdFormHintsRow row = form.grdFormHints().getRows().newRow();
				row.setcolHint(collScreenHintVo.get(i).getUsageDescription());
				row.setcolHintDescription(collScreenHintVo.get(i).getUserHintTextIsNotNull() ? form.getImages().Core.HintIcon : null);
				row.setValue(collScreenHintVo.get(i));
			}
		}
		updateContextMenu();
	}
}
