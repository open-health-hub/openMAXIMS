//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.locationservice;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class DetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 384, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Active Prices Only", Boolean.TRUE, null}));
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 488, 488, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public CheckBox chkHTMLActiveOnly()
			{
				return (CheckBox)super.getControl(0);
			}
			public HTMLViewer htmDetails()
			{
				return (HTMLViewer)super.getControl(1);
			}
		}
		public static class EditContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrLocationDetailLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabPageContactContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbTitleComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.core.vo.lookups.PersonTitle value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.core.vo.lookups.PersonTitle value)
						{
							return super.control.removeRow(value);
						}
						public ims.core.vo.lookups.PersonTitle getValue()
						{
							return (ims.core.vo.lookups.PersonTitle)super.control.getValue();
						}
						public void setValue(ims.core.vo.lookups.PersonTitle value)
						{
							super.control.setValue(value);
						}
					}
					public static class qmbPrinterComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(String value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(String value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(String value)
						{
							return super.control.removeRow(value);
						}
						public String getValue()
						{
							return (String)super.control.getValue();
						}
						public void setValue(String value)
						{
							super.control.setValue(value);
						}
						public void setEditedText(String text)
						{
							super.control.setEditedText(text);
						}
						public String getEditedText()
						{
							return super.control.getEditedText();
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 64, 218, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default Printer", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 64, 104, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Middle Name", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 64, 40, 26, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 64, 136, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Surname", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 64, 168, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Contact Number", new Integer(0), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 64, 72, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forename", new Integer(0), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 168, 168, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 168, 104, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 168, 136, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 168, 72, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 168, 40, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbTitleTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbTitleTemp);
						cmbTitleComboBox cmbTitle = (cmbTitleComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTitleComboBox.class, m_cmbTitleTemp);
						super.addComboBox(cmbTitle);
				
						// Query ComboBox Controls
						RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 168, 216, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						ComboBox m_qmbPrinterTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
						addControl(m_qmbPrinterTemp);
						qmbPrinterComboBox qmbPrinter = (qmbPrinterComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbPrinterComboBox.class, m_qmbPrinterTemp);
						super.addComboBox(qmbPrinter);
					}
		
					public TextBox txtContactNumber()
					{
						return (TextBox)super.getControl(6);
					}
					public TextBox txtMiddleName()
					{
						return (TextBox)super.getControl(7);
					}
					public TextBox txtSurname()
					{
						return (TextBox)super.getControl(8);
					}
					public TextBox txtForename()
					{
						return (TextBox)super.getControl(9);
					}
					public cmbTitleComboBox cmbTitle()
					{
						return (cmbTitleComboBox)super.getComboBox(0);
					}
					public qmbPrinterComboBox qmbPrinter()
					{
						return (qmbPrinterComboBox)super.getComboBox(1);
					}
				}
				public static class tabPageFunctionContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdServiceFunctionRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdServiceFunctionRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setservicefunctionIdReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isservicefunctionIdReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showservicefunctionIdOpened()
						{
							super.row.showOpened(0);
						}
						public Integer getservicefunctionId()
						{
							return (Integer)super.row.get(0);
						}
						public void setservicefunctionId(Integer value)
						{
							super.row.set(0, value);
						}
						public void setCellservicefunctionIdTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setFunctionReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isFunctionReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showFunctionOpened()
						{
							super.row.showOpened(1);
						}
						public String getFunction()
						{
							return (String)super.row.get(1);
						}
						public void setFunction(String value)
						{
							super.row.set(1, value);
						}
						public void setCellFunctionTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setActiveReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isActiveReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showActiveOpened()
						{
							super.row.showOpened(2);
						}
						public boolean getActive()
						{
							return ((Boolean)super.row.get(2)).booleanValue();
						}
						public void setActive(boolean value)
						{
							super.row.set(2, new Boolean(value));
						}
						public void setCellActiveTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public void setSelectReadOnly(boolean value)
						{
							super.row.setReadOnly(3, value);
						}
						public boolean isSelectReadOnly()
						{
							return super.row.isReadOnly(3);
						}
						public void setSelectBackColor(ims.framework.utils.Color value)
						{
							super.row.setBackColor(3, value);
						}
						public void setSelectTextColor(ims.framework.utils.Color value)
						{
							super.row.setTextColor(3, value);
						}
						public void showSelectOpened()
						{
							super.row.showOpened(3);
						}
						public boolean getSelect()
						{
							return ((Boolean)super.row.get(3)).booleanValue();
						}
						public void setSelect(boolean value)
						{
							super.row.set(3, new Boolean(value));
						}
						public void setCellSelectTooltip(String value)
						{
							super.row.setTooltip(3, value);
						}
						public ims.core.vo.ServiceFunctionVo getValue()
						{
							return (ims.core.vo.ServiceFunctionVo)super.row.getValue();
						}
						public void setValue(ims.core.vo.ServiceFunctionVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdServiceFunctionRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdServiceFunctionRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdServiceFunctionRow get(int index)
						{
							return new grdServiceFunctionRow(super.collection.get(index));
						}
						public grdServiceFunctionRow newRow()
						{
							return new grdServiceFunctionRow(super.collection.newRow());
						}
						public grdServiceFunctionRow newRow(boolean autoSelect)
						{
							return new grdServiceFunctionRow(super.collection.newRow(autoSelect));
						}
						public grdServiceFunctionRow newRowAt(int index)
						{
							return new grdServiceFunctionRow(super.collection.newRowAt(index));
						}
						public grdServiceFunctionRow newRowAt(int index, boolean autoSelect)
						{
							return new grdServiceFunctionRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdServiceFunctionGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
						{
							super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
						}
						public void setFunctionCaption(String value)
						{
							this.grid.setColumnCaption(1, value);
						}
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
						{
							super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
						}
						public ims.core.vo.ServiceFunctionVoCollection getValues()
						{
							ims.core.vo.ServiceFunctionVoCollection listOfValues = new ims.core.vo.ServiceFunctionVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.core.vo.ServiceFunctionVo getValue()
						{
							return (ims.core.vo.ServiceFunctionVo)super.grid.getValue();
						}
						public void setValue(ims.core.vo.ServiceFunctionVo value)
						{
							super.grid.setValue(value);
						}
						public grdServiceFunctionRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdServiceFunctionRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdServiceFunctionRowCollection getRows()
						{
							return new grdServiceFunctionRowCollection(super.grid.getRows());
						}
						public grdServiceFunctionRow getRowByValue(ims.core.vo.ServiceFunctionVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdServiceFunctionRow(row);
						}
						public void setservicefunctionIdHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getservicefunctionIdHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setFunctionHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getFunctionHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setActiveHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getActiveHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
						public void setSelectHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(3, value);
						}
						public String getSelectHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(3);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 464, 232, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdServiceFunctionTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdServiceFunctionTemp);
						grdServiceFunctionGrid grdServiceFunction = (grdServiceFunctionGrid)GridFlyweightFactory.getInstance().createGridBridge(grdServiceFunctionGrid.class, m_grdServiceFunctionTemp);
						grdServiceFunction.addIntColumn("servicefunctionId", 0, 0, 0, true, true, null, false, 0, true);
						grdServiceFunction.addStringColumn("Function", 0, 0, 355, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdServiceFunction.addBoolColumn("Active", 0, 0, 50, false, true, 0, true);
						grdServiceFunction.addBoolColumn("Select", 0, 0, -1, false, true, 0, true);
						super.addGrid(grdServiceFunction);
					}
		
					public grdServiceFunctionGrid grdServiceFunction()
					{
						return (grdServiceFunctionGrid)super.getGrid(0);
					}
				}
				public static class tabPageActivityContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class grdActivityRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdActivityRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setserviceActivityIdReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isserviceActivityIdReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showserviceActivityIdOpened()
						{
							super.row.showOpened(0);
						}
						public void setTooltipForserviceActivityId(String value)
						{
							super.row.setTooltip(0, value);
						}
						public Integer getserviceActivityId()
						{
							return (Integer)super.row.get(0);
						}
						public void setserviceActivityId(Integer value)
						{
							super.row.set(0, value);
						}
						public void setCellserviceActivityIdTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setActivityReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isActivityReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showActivityOpened()
						{
							super.row.showOpened(1);
						}
						public void setTooltipForActivity(String value)
						{
							super.row.setTooltip(1, value);
						}
						public String getActivity()
						{
							return (String)super.row.get(1);
						}
						public void setActivity(String value)
						{
							super.row.set(1, value);
						}
						public void setCellActivityTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setActiveReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isActiveReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showActiveOpened()
						{
							super.row.showOpened(2);
						}
						public void setTooltipForActive(String value)
						{
							super.row.setTooltip(2, value);
						}
						public boolean getActive()
						{
							return ((Boolean)super.row.get(2)).booleanValue();
						}
						public void setActive(boolean value)
						{
							super.row.set(2, new Boolean(value));
						}
						public void setCellActiveTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public void setSelectReadOnly(boolean value)
						{
							super.row.setReadOnly(3, value);
						}
						public boolean isSelectReadOnly()
						{
							return super.row.isReadOnly(3);
						}
						public void setSelectBackColor(ims.framework.utils.Color value)
						{
							super.row.setBackColor(3, value);
						}
						public void setSelectTextColor(ims.framework.utils.Color value)
						{
							super.row.setTextColor(3, value);
						}
						public void showSelectOpened()
						{
							super.row.showOpened(3);
						}
						public void setTooltipForSelect(String value)
						{
							super.row.setTooltip(3, value);
						}
						public boolean getSelect()
						{
							return ((Boolean)super.row.get(3)).booleanValue();
						}
						public void setSelect(boolean value)
						{
							super.row.set(3, new Boolean(value));
						}
						public void setCellSelectTooltip(String value)
						{
							super.row.setTooltip(3, value);
						}
						public ims.core.vo.ServiceActivityVo getValue()
						{
							return (ims.core.vo.ServiceActivityVo)super.row.getValue();
						}
						public void setValue(ims.core.vo.ServiceActivityVo value)
						{
							super.row.setValue(value);
						}
					}
					public static class grdActivityRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdActivityRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdActivityRow get(int index)
						{
							return new grdActivityRow(super.collection.get(index));
						}
						public grdActivityRow newRow()
						{
							return new grdActivityRow(super.collection.newRow());
						}
						public grdActivityRow newRow(boolean autoSelect)
						{
							return new grdActivityRow(super.collection.newRow(autoSelect));
						}
						public grdActivityRow newRowAt(int index)
						{
							return new grdActivityRow(super.collection.newRowAt(index));
						}
						public grdActivityRow newRowAt(int index, boolean autoSelect)
						{
							return new grdActivityRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdActivityGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
						{
							super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
						}
						public void setActivityCaption(String value)
						{
							this.grid.setColumnCaption(1, value);
						}
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
						{
							super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
						}
						public ims.core.vo.ServiceActivityVoCollection getValues()
						{
							ims.core.vo.ServiceActivityVoCollection listOfValues = new ims.core.vo.ServiceActivityVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.core.vo.ServiceActivityVo getValue()
						{
							return (ims.core.vo.ServiceActivityVo)super.grid.getValue();
						}
						public void setValue(ims.core.vo.ServiceActivityVo value)
						{
							super.grid.setValue(value);
						}
						public grdActivityRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdActivityRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdActivityRowCollection getRows()
						{
							return new grdActivityRowCollection(super.grid.getRows());
						}
						public grdActivityRow getRowByValue(ims.core.vo.ServiceActivityVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdActivityRow(row);
						}
						public void setserviceActivityIdHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getserviceActivityIdHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setActivityHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getActivityHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setActiveHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getActiveHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
						public void setSelectHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(3, value);
						}
						public String getSelectHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(3);
						}
					}
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 7, 12, 472, 224, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdActivityTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdActivityTemp);
						grdActivityGrid grdActivity = (grdActivityGrid)GridFlyweightFactory.getInstance().createGridBridge(grdActivityGrid.class, m_grdActivityTemp);
						grdActivity.addIntColumn("serviceActivityId", 0, 0, 0, true, true, null, false, 0, true);
						grdActivity.addStringColumn("Activity", 0, 0, 360, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdActivity.addBoolColumn("Active", 0, 0, 50, false, true, 0, true);
						grdActivity.addBoolColumn("Select", 0, 0, -1, false, true, 0, true);
						super.addGrid(grdActivity);
					}
		
					public grdActivityGrid grdActivity()
					{
						return (grdActivityGrid)super.getGrid(0);
					}
				}
				public static class tabPagePricingContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// CheckBox Controls
						RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 312, 8, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.HIDDEN, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Active Pricing Contexts only", Boolean.TRUE, null}));
				
						// Tree Controls
						RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 472, 216, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, contextMenus.contextMenuLocationServiceActivityGrid, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
					}
		
					public CheckBox chkActivePricing()
					{
						return (CheckBox)super.getControl(0);
					}
					public TreeView trePricing()
					{
						return (TreeView)super.getControl(1);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 488, 272, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageContact = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Location Contact", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageContactContainer m_tabPageContactContainer = (tabPageContactContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageContactContainer.class, m_tabPageContact, factory);
					super.addContainer(m_tabPageContact, m_tabPageContactContainer);
					ims.framework.utils.SizeInfo m_tabPageContactDesignSize = new ims.framework.utils.SizeInfo(488, 272);
					ims.framework.utils.SizeInfo m_tabPageContactRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
					m_tabPageContactContainer.setContext(form, appForm, m_tabPageContact, loader, form_images_local, contextMenus, startControlID, m_tabPageContactDesignSize, m_tabPageContactRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 488, 272, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageFunction = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Location Function", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageFunctionContainer m_tabPageFunctionContainer = (tabPageFunctionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageFunctionContainer.class, m_tabPageFunction, factory);
					super.addContainer(m_tabPageFunction, m_tabPageFunctionContainer);
					ims.framework.utils.SizeInfo m_tabPageFunctionDesignSize = new ims.framework.utils.SizeInfo(488, 272);
					ims.framework.utils.SizeInfo m_tabPageFunctionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
					m_tabPageFunctionContainer.setContext(form, appForm, m_tabPageFunction, loader, form_images_local, contextMenus, startControlID, m_tabPageFunctionDesignSize, m_tabPageFunctionRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 488, 272, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPageActivity = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Location Activity", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPageActivityContainer m_tabPageActivityContainer = (tabPageActivityContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageActivityContainer.class, m_tabPageActivity, factory);
					super.addContainer(m_tabPageActivity, m_tabPageActivityContainer);
					ims.framework.utils.SizeInfo m_tabPageActivityDesignSize = new ims.framework.utils.SizeInfo(488, 272);
					ims.framework.utils.SizeInfo m_tabPageActivityRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
					m_tabPageActivityContainer.setContext(form, appForm, m_tabPageActivity, loader, form_images_local, contextMenus, startControlID, m_tabPageActivityDesignSize, m_tabPageActivityRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 488, 272, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPagePricing = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pricing", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPagePricingContainer m_tabPagePricingContainer = (tabPagePricingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPagePricingContainer.class, m_tabPagePricing, factory);
					super.addContainer(m_tabPagePricing, m_tabPagePricingContainer);
					ims.framework.utils.SizeInfo m_tabPagePricingDesignSize = new ims.framework.utils.SizeInfo(488, 272);
					ims.framework.utils.SizeInfo m_tabPagePricingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
					m_tabPagePricingContainer.setContext(form, appForm, m_tabPagePricing, loader, form_images_local, contextMenus, startControlID, m_tabPagePricingDesignSize, m_tabPagePricingRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabPageContact().setVisible(false);
					tabPageFunction().setVisible(false);
					tabPageActivity().setVisible(false);
					tabPagePricing().setVisible(false);
				}
				public void settabPageContactEnabled(boolean value)
				{
					tabPageContact().setEnabled(value);
				}
				public void settabPageFunctionEnabled(boolean value)
				{
					tabPageFunction().setEnabled(value);
				}
				public void settabPageActivityEnabled(boolean value)
				{
					tabPageActivity().setEnabled(value);
				}
				public void settabPagePricingEnabled(boolean value)
				{
					tabPagePricing().setEnabled(value);
				}
				public void showtabPageContact()
				{
					tabPageFunction().setVisible(false);
					tabPageActivity().setVisible(false);
					tabPagePricing().setVisible(false);
					tabPageContact().setVisible(true);
				}
				public void showtabPageFunction()
				{
					tabPageContact().setVisible(false);
					tabPageActivity().setVisible(false);
					tabPagePricing().setVisible(false);
					tabPageFunction().setVisible(true);
				}
				public void showtabPageActivity()
				{
					tabPageContact().setVisible(false);
					tabPageFunction().setVisible(false);
					tabPagePricing().setVisible(false);
					tabPageActivity().setVisible(true);
				}
				public void showtabPagePricing()
				{
					tabPageContact().setVisible(false);
					tabPageFunction().setVisible(false);
					tabPageActivity().setVisible(false);
					tabPagePricing().setVisible(true);
				}
		
				public tabPageContactContainer tabPageContact()
				{
					return (tabPageContactContainer)super.layers.get(0);
				}
				public tabPageFunctionContainer tabPageFunction()
				{
					return (tabPageFunctionContainer)super.layers.get(1);
				}
				public tabPageActivityContainer tabPageActivity()
				{
					return (tabPageActivityContainer)super.layers.get(2);
				}
				public tabPagePricingContainer tabPagePricing()
				{
					return (tabPagePricingContainer)super.layers.get(3);
				}
			}
			public static class grdServiceRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdServiceRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isServiceReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showServiceOpened()
				{
					super.row.showOpened(0);
				}
				public String getService()
				{
					return (String)super.row.get(0);
				}
				public void setService(String value)
				{
					super.row.set(0, value);
				}
				public void setCellServiceTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isActiveReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showActiveOpened()
				{
					super.row.showOpened(1);
				}
				public boolean getActive()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setActive(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellActiveTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isSelectReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showSelectOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getSelect()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setSelect(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellSelectTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.core.vo.ServiceShortVo getValue()
				{
					return (ims.core.vo.ServiceShortVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.ServiceShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdServiceRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdServiceRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdServiceRow get(int index)
				{
					return new grdServiceRow(super.collection.get(index));
				}
				public grdServiceRow newRow()
				{
					return new grdServiceRow(super.collection.newRow());
				}
				public grdServiceRow newRow(boolean autoSelect)
				{
					return new grdServiceRow(super.collection.newRow(autoSelect));
				}
				public grdServiceRow newRowAt(int index)
				{
					return new grdServiceRow(super.collection.newRowAt(index));
				}
				public grdServiceRow newRowAt(int index, boolean autoSelect)
				{
					return new grdServiceRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdServiceGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void setServiceCaption(String value)
				{
					this.grid.setColumnCaption(0, value);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.ServiceShortVoCollection getValues()
				{
					ims.core.vo.ServiceShortVoCollection listOfValues = new ims.core.vo.ServiceShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.ServiceShortVo getValue()
				{
					return (ims.core.vo.ServiceShortVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.ServiceShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdServiceRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdServiceRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdServiceRowCollection getRows()
				{
					return new grdServiceRowCollection(super.grid.getRows());
				}
				public grdServiceRow getRowByValue(ims.core.vo.ServiceShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdServiceRow(row);
				}
				public void setServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 488, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Service List", new Integer(2), ""}));
		
				// Layer Clasess
				lyrLocationDetailLayer m_lyrLocationDetailLayer = (lyrLocationDetailLayer)LayerFlyweightFactory.getInstance().createLayer(lyrLocationDetailLayer.class, this, factory);
				super.addLayer(m_lyrLocationDetailLayer);
				m_lyrLocationDetailLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Button Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 416, 32, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Search", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 384, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 472, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdServiceTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdServiceTemp);
				grdServiceGrid grdService = (grdServiceGrid)GridFlyweightFactory.getInstance().createGridBridge(grdServiceGrid.class, m_grdServiceTemp);
				grdService.addStringColumn("Service", 0, 0, 350, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdService.addBoolColumn("Active", 0, 1, 50, false, false, 0, true);
				grdService.addBoolColumn("Add", 0, 1, -1, false, true, 0, true);
				super.addGrid(grdService);
			}

			public Panel pnlServiceList()
			{
				return (Panel)super.getControl(0);
			}
			public lyrLocationDetailLayer lyrLocationDetail()
			{
				return (lyrLocationDetailLayer)super.getLayer(0);
			}
			public Button btnSearch()
			{
				return (Button)super.getControl(5);
			}
			public TextBox txtServiceName()
			{
				return (TextBox)super.getControl(6);
			}
			public grdServiceGrid grdService()
			{
				return (grdServiceGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 320, 48, 512, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_Details = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			DetailsContainer m_DetailsContainer = (DetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(DetailsContainer.class, m_Details, factory);
			super.addContainer(m_Details, m_DetailsContainer);
			ims.framework.utils.SizeInfo m_DetailsDesignSize = new ims.framework.utils.SizeInfo(512, 544);
			ims.framework.utils.SizeInfo m_DetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper27.getWidth(), anchoringHelper27.getHeight());
			m_DetailsContainer.setContext(form, appForm, m_Details, loader, form_images_local, contextMenus, startControlID, m_DetailsDesignSize, m_DetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 320, 48, 512, 544, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_Edit = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Edit Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			EditContainer m_EditContainer = (EditContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(EditContainer.class, m_Edit, factory);
			super.addContainer(m_Edit, m_EditContainer);
			ims.framework.utils.SizeInfo m_EditDesignSize = new ims.framework.utils.SizeInfo(512, 544);
			ims.framework.utils.SizeInfo m_EditRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper28.getWidth(), anchoringHelper28.getHeight());
			m_EditContainer.setContext(form, appForm, m_Edit, loader, form_images_local, contextMenus, startControlID, m_EditDesignSize, m_EditRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			Details().setVisible(false);
			Edit().setVisible(false);
		}
		public void showDetails()
		{
			Edit().setVisible(false);
			Details().setVisible(true);
		}
		public void showEdit()
		{
			Details().setVisible(false);
			Edit().setVisible(true);
		}

		public DetailsContainer Details()
		{
			return (DetailsContainer)super.layers.get(0);
		}
		public EditContainer Edit()
		{
			return (EditContainer)super.layers.get(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuLocationServiceActivityGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuLocationServiceActivityGridNEW_PRICEItem = factory.createMenuItem(startControlID.intValue() + 1, "New Pricing", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuLocationServiceActivityGrid.add(contextMenus.contextMenuLocationServiceActivityGridNEW_PRICEItem);
		contextMenus.contextMenuLocationServiceActivityGridUPDATE_PRICINGItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Pricing", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuLocationServiceActivityGrid.add(contextMenus.contextMenuLocationServiceActivityGridUPDATE_PRICINGItem);
		contextMenus.contextMenuLocationServiceActivityGridVIEW_PRICINGItem = factory.createMenuItem(startControlID.intValue() + 3, "View Pricing", true, false, new Integer(102120), true, false);
		contextMenus.contextMenuLocationServiceActivityGrid.add(contextMenus.contextMenuLocationServiceActivityGridVIEW_PRICINGItem);
		contextMenus.contextMenuLocationServiceActivityGridNEW_ACTIVITYItem = factory.createMenuItem(startControlID.intValue() + 4, "New Procedure", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuLocationServiceActivityGrid.add(contextMenus.contextMenuLocationServiceActivityGridNEW_ACTIVITYItem);
		contextMenus.contextMenuLocationServiceActivityGridUPDATE_ACTIVITYItem = factory.createMenuItem(startControlID.intValue() + 5, "Update", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuLocationServiceActivityGrid.add(contextMenus.contextMenuLocationServiceActivityGridUPDATE_ACTIVITYItem);
		form.registerMenu(contextMenus.contextMenuLocationServiceActivityGrid);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 6, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 7, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 9, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 10, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 11, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 12, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 13, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 14, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Panel Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Location Service Configuration", new Integer(1), ""}));

		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 48, 600, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Organisation", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 160, 600, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Location Site", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 266, 600, 46, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Location", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 672, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 752, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Tree Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 296, 544, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));

		// Picture Controls
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 16, 598, 23, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 128, 598, 23, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 232, 598, 23, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlLocationService()
	{
		return (Panel)super.getControl(0);
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}
	public TreeView treHeader()
	{
		return (TreeView)super.getControl(8);
	}
	public Picture imgOrganisation()
	{
		return (Picture)super.getControl(9);
	}
	public Picture imgLocSite()
	{
		return (Picture)super.getControl(10);
	}
	public Picture imgLocation()
	{
		return (Picture)super.getControl(11);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
			Core = new CoreForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				ActivityContextPricingDetails = new LocalFormName(103124);
				ProcedurePriceIncrease = new LocalFormName(103181);
				NTPFBatchPriceSelectionDialog = new LocalFormName(103185);
			}
			public final FormName ActivityContextPricingDetails;
			public final FormName ProcedurePriceIncrease;
			public final FormName NTPFBatchPriceSelectionDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				NewPriceBatchDialog = new LocalFormName(103186);
			}
			public final FormName NewPriceBatchDialog;
		}

		public AdminForms Admin;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Location = new ImageHelper(103104, "Images/Admin/location.png", new Integer(16), new Integer(16));
				LocationSite = new ImageHelper(103100, "Images/Admin/location_site.png", new Integer(16), new Integer(16));
				Organisation = new ImageHelper(103103, "Images/Admin/organisation.png", new Integer(16), new Integer(16));
				Service = new ImageHelper(103110, "Images/Admin/clinical_service.png", new Integer(16), new Integer(16));
				Function = new ImageHelper(103109, "Images/Admin/Function.gif", new Integer(16), new Integer(16));
				Activity = new ImageHelper(103111, "Images/Admin/VSObject_Structure.gif", new Integer(16), new Integer(16));
				ServiceInactive = new ImageHelper(103149, "Images/Admin/clinical_service_inactive.png", new Integer(16), new Integer(16));
				ActivityInactive = new ImageHelper(103147, "Images/Admin/ActivityInActive.gif", new Integer(16), new Integer(16));
				FunctionInActive = new ImageHelper(103148, "Images/Admin/FunctionInActive.gif", new Integer(16), new Integer(16));
				PricingEuro = new ImageHelper(103112, "Images/Admin/euro16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Location;
			public final ims.framework.utils.Image LocationSite;
			public final ims.framework.utils.Image Organisation;
			public final ims.framework.utils.Image Service;
			public final ims.framework.utils.Image Function;
			public final ims.framework.utils.Image Activity;
			public final ims.framework.utils.Image ServiceInactive;
			public final ims.framework.utils.Image ActivityInactive;
			public final ims.framework.utils.Image FunctionInActive;
			public final ims.framework.utils.Image PricingEuro;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				help1 = new ImageHelper(102204, "Images/Core/help.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image help1;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecordOrganisation = new ims.framework.ContextVariable("SelectedRecordOrganisation", prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordOrganisation_" + componentIdentifier + "");
			cxl_treMessage = new ims.framework.ContextVariable("treMessage", prefix + "_lv_Admin.LocationService.__internal_x_context__treMessage_" + componentIdentifier + "");
			cxl_SelectedRecordLocation = new ims.framework.ContextVariable("SelectedRecordLocation", prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocation_" + componentIdentifier + "");
			cxl_SelectedRecordLocationService = new ims.framework.ContextVariable("SelectedRecordLocationService", prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocationService_" + componentIdentifier + "");
			cxl_SelectedRecordServiceId = new ims.framework.ContextVariable("SelectedRecordServiceId", prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordServiceId_" + componentIdentifier + "");
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_SelectedRecordLocSerFunc = new ims.framework.ContextVariable("SelectedRecordLocSerFunc", prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocSerFunc_" + componentIdentifier + "");
			cxl_SelectedRecordLocSerAct = new ims.framework.ContextVariable("SelectedRecordLocSerAct", prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocSerAct_" + componentIdentifier + "");
			cxl_SelectedLocationServiceActivity = new ims.framework.ContextVariable("SelectedLocationServiceActivity", prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedLocationServiceActivity_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordOrganisationIsNotNull()
		{
			return !cxl_SelectedRecordOrganisation.getValueIsNull(context);
		}
		public ims.core.vo.OrganisationVo getSelectedRecordOrganisation()
		{
			return (ims.core.vo.OrganisationVo)cxl_SelectedRecordOrganisation.getValue(context);
		}
		public void setSelectedRecordOrganisation(ims.core.vo.OrganisationVo value)
		{
			cxl_SelectedRecordOrganisation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecordOrganisation = null;
		public boolean gettreMessageIsNotNull()
		{
			return !cxl_treMessage.getValueIsNull(context);
		}
		public String gettreMessage()
		{
			return (String)cxl_treMessage.getValue(context);
		}
		public void settreMessage(String value)
		{
			cxl_treMessage.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_treMessage = null;
		public boolean getSelectedRecordLocationIsNotNull()
		{
			return !cxl_SelectedRecordLocation.getValueIsNull(context);
		}
		public ims.core.vo.LocShortVo getSelectedRecordLocation()
		{
			return (ims.core.vo.LocShortVo)cxl_SelectedRecordLocation.getValue(context);
		}
		public void setSelectedRecordLocation(ims.core.vo.LocShortVo value)
		{
			cxl_SelectedRecordLocation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecordLocation = null;
		public boolean getSelectedRecordLocationServiceIsNotNull()
		{
			return !cxl_SelectedRecordLocationService.getValueIsNull(context);
		}
		public ims.core.vo.LocationServiceVo getSelectedRecordLocationService()
		{
			return (ims.core.vo.LocationServiceVo)cxl_SelectedRecordLocationService.getValue(context);
		}
		public void setSelectedRecordLocationService(ims.core.vo.LocationServiceVo value)
		{
			cxl_SelectedRecordLocationService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecordLocationService = null;
		public boolean getSelectedRecordServiceIdIsNotNull()
		{
			return !cxl_SelectedRecordServiceId.getValueIsNull(context);
		}
		public Integer getSelectedRecordServiceId()
		{
			return (Integer)cxl_SelectedRecordServiceId.getValue(context);
		}
		public void setSelectedRecordServiceId(Integer value)
		{
			cxl_SelectedRecordServiceId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecordServiceId = null;
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.vo.ValueObject getSelectedRecord()
		{
			return (ims.vo.ValueObject)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.vo.ValueObject value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getSelectedRecordLocSerFuncIsNotNull()
		{
			return !cxl_SelectedRecordLocSerFunc.getValueIsNull(context);
		}
		public ims.core.vo.LocationServiceFunctionsVo getSelectedRecordLocSerFunc()
		{
			return (ims.core.vo.LocationServiceFunctionsVo)cxl_SelectedRecordLocSerFunc.getValue(context);
		}
		public void setSelectedRecordLocSerFunc(ims.core.vo.LocationServiceFunctionsVo value)
		{
			cxl_SelectedRecordLocSerFunc.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecordLocSerFunc = null;
		public boolean getSelectedRecordLocSerActIsNotNull()
		{
			return !cxl_SelectedRecordLocSerAct.getValueIsNull(context);
		}
		public ims.core.vo.LocationServiceActivityVo getSelectedRecordLocSerAct()
		{
			return (ims.core.vo.LocationServiceActivityVo)cxl_SelectedRecordLocSerAct.getValue(context);
		}
		public void setSelectedRecordLocSerAct(ims.core.vo.LocationServiceActivityVo value)
		{
			cxl_SelectedRecordLocSerAct.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecordLocSerAct = null;
		public boolean getSelectedLocationServiceActivityIsNotNull()
		{
			return !cxl_SelectedLocationServiceActivity.getValueIsNull(context);
		}
		public ims.core.vo.LocationServiceActivityVo getSelectedLocationServiceActivity()
		{
			return (ims.core.vo.LocationServiceActivityVo)cxl_SelectedLocationServiceActivity.getValue(context);
		}
		public void setSelectedLocationServiceActivity(ims.core.vo.LocationServiceActivityVo value)
		{
			cxl_SelectedLocationServiceActivity.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedLocationServiceActivity = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class LocationServiceActivityGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int NEW_PRICE = 1;
			public static final int UPDATE_PRICING = 2;
			public static final int VIEW_PRICING = 3;
			public static final int NEW_ACTIVITY = 4;
			public static final int UPDATE_ACTIVITY = 5;
		}
		public void disableAllLocationServiceActivityGridMenuItems()
		{
			this.contextMenuLocationServiceActivityGridNEW_PRICEItem.setEnabled(false);
			this.contextMenuLocationServiceActivityGridUPDATE_PRICINGItem.setEnabled(false);
			this.contextMenuLocationServiceActivityGridVIEW_PRICINGItem.setEnabled(false);
			this.contextMenuLocationServiceActivityGridNEW_ACTIVITYItem.setEnabled(false);
			this.contextMenuLocationServiceActivityGridUPDATE_ACTIVITYItem.setEnabled(false);
		}
		public void hideAllLocationServiceActivityGridMenuItems()
		{
			this.contextMenuLocationServiceActivityGridNEW_PRICEItem.setVisible(false);
			this.contextMenuLocationServiceActivityGridUPDATE_PRICINGItem.setVisible(false);
			this.contextMenuLocationServiceActivityGridVIEW_PRICINGItem.setVisible(false);
			this.contextMenuLocationServiceActivityGridNEW_ACTIVITYItem.setVisible(false);
			this.contextMenuLocationServiceActivityGridUPDATE_ACTIVITYItem.setVisible(false);
		}
		private Menu contextMenuLocationServiceActivityGrid;
		public MenuItem getLocationServiceActivityGridNEW_PRICEItem()
		{
			return this.contextMenuLocationServiceActivityGridNEW_PRICEItem;
		}
		private MenuItem contextMenuLocationServiceActivityGridNEW_PRICEItem;
		public MenuItem getLocationServiceActivityGridUPDATE_PRICINGItem()
		{
			return this.contextMenuLocationServiceActivityGridUPDATE_PRICINGItem;
		}
		private MenuItem contextMenuLocationServiceActivityGridUPDATE_PRICINGItem;
		public MenuItem getLocationServiceActivityGridVIEW_PRICINGItem()
		{
			return this.contextMenuLocationServiceActivityGridVIEW_PRICINGItem;
		}
		private MenuItem contextMenuLocationServiceActivityGridVIEW_PRICINGItem;
		public MenuItem getLocationServiceActivityGridNEW_ACTIVITYItem()
		{
			return this.contextMenuLocationServiceActivityGridNEW_ACTIVITYItem;
		}
		private MenuItem contextMenuLocationServiceActivityGridNEW_ACTIVITYItem;
		public MenuItem getLocationServiceActivityGridUPDATE_ACTIVITYItem()
		{
			return this.contextMenuLocationServiceActivityGridUPDATE_ACTIVITYItem;
		}
		private MenuItem contextMenuLocationServiceActivityGridUPDATE_ACTIVITYItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 6;
			public static final int Update = 7;
			public static final int Remove = 8;
			public static final int View = 9;
			public static final int MoveUp = 10;
			public static final int MoveDown = 11;
			public static final int Replace = 12;
			public static final int Confirm = 13;
			public static final int EDIT_VIEW_ICP_ACTIONS = 14;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[118];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedLocShortVo", "BO-1007100007-ID", "ID_Location");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedLocShortVo", "BO-1007100007-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedLocShortVo", "BO-1007100007-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedLocShortVo", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedLocShortVo", "BO-1007100007-TYPE", "Type");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedLocShortVo", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedLocShortVo", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedLocShortVo", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedLocShortVo", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-ID", "ID_ActivityContextPricingDetails");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-CONTEXT", "Context");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-PRICE", "Price");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-CURRENCY", "Currency");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-NORMLENGTHSTAY", "NormLengthStay");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-EFFECTIVEFROM", "EffectiveFrom");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-EFFECTIVETO", "EffectiveTo");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-ISACTIVE", "IsActive");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-PRICECATEGORY", "PriceCategory");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-ISPREACTIVE", "IsPreActive");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-EFFECTIVETOSET", "EffectiveToSet");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-EFFECTIVEFROMSET", "EffectiveFromSet");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Admin.ActivityContextPricingDetail", "BO-1007100004-ACTIVEPRICING", "ActivePricing");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordOrganisation_" + componentIdentifier, "BO-1007100003-ID", "ID_Organisation");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordOrganisation_" + componentIdentifier, "BO-1007100003-NAME", "Name");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordOrganisation_" + componentIdentifier, "BO-1007100003-TYPE", "Type");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordOrganisation_" + componentIdentifier, "BO-1007100003-ISACTIVE", "IsActive");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordOrganisation_" + componentIdentifier, "BO-1007100003-COMMENT", "Comment");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordOrganisation_" + componentIdentifier, "BO-1007100003-PCTCODE", "PctCode");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocation_" + componentIdentifier, "BO-1007100007-ID", "ID_Location");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocation_" + componentIdentifier, "BO-1007100007-NAME", "Name");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocation_" + componentIdentifier, "BO-1007100007-ISACTIVE", "IsActive");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocation_" + componentIdentifier, "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocation_" + componentIdentifier, "BO-1007100007-TYPE", "Type");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocation_" + componentIdentifier, "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocation_" + componentIdentifier, "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocation_" + componentIdentifier, "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocation_" + componentIdentifier, "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocationService_" + componentIdentifier, "BO-1007100000-ID", "ID_LocationService");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocationService_" + componentIdentifier, "BO-1007100000-ISACTIVE", "IsActive");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocationService_" + componentIdentifier, "BO-1007100000-EFFECTIVETO", "EffectiveTo");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocationService_" + componentIdentifier, "BO-1007100000-DEFAULTPRINTER", "DefaultPrinter");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocSerFunc_" + componentIdentifier, "BO-1007100006-ID", "ID_LocationServiceFunction");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocSerFunc_" + componentIdentifier, "BO-1007100006-ISACTIVE", "IsActive");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocSerAct_" + componentIdentifier, "BO-1007100001-ID", "ID_LocationServiceActivity");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedRecordLocSerAct_" + componentIdentifier, "BO-1007100001-ISACTIVE", "IsActive");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedLocationServiceActivity_" + componentIdentifier, "BO-1007100001-ID", "ID_LocationServiceActivity");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LocationService.__internal_x_context__SelectedLocationServiceActivity_" + componentIdentifier, "BO-1007100001-ISACTIVE", "IsActive");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
