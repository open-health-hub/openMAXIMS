//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.70 build 3300.22643)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.appsiteconfig;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AppSiteVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	private void open()
	{
		form.setMode(FormMode.VIEW);
		
		AppSiteVo appSite = null;
		
		try
		{
			appSite = domain.getSite();
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.toString());
			form.setMode(FormMode.VIEW);
		}

		form.btnNew().setVisible(appSite == null);
		form.btnEdit().setVisible(!(appSite == null));
		
		if(appSite != null)
		{
			form.cmbSite().setValue(appSite.getSite());
			
			form.getLocalContext().setAppSite(appSite);
		}
	}
	
	private boolean save()
	{
		if(form.cmbSite().getValue() == null)
		{
			engine.showMessage("Please select the site !");
			return false;
		}
		
		AppSiteVo appSite = form.getLocalContext().getAppSite();
		
		if(appSite == null)
			appSite = new AppSiteVo();
		
		appSite.setSite(form.cmbSite().getValue());
		
		String[] arrErrors = appSite.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			domain.saveSite(appSite);
		}
		catch (DomainInterfaceException e)
		{
			e.printStackTrace();
			engine.showMessage("Error saving AppSite: " + e.toString());
			return false;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
	
}
