//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.service;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.admin.domain.Service.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.admin.domain.Service domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	public void clearContextInformation()
	{
		engine.clearPatientContextInformation();
	}
	protected final void oncmbTurnAroundMeasureValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().Edit().cmbTurnAroundMeasure().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.MinReorderPeriod existingInstance = (ims.ocrr.vo.lookups.MinReorderPeriod)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTurnAroundMeasureLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.ocrr.vo.lookups.MinReorderPeriod)
		{
			ims.ocrr.vo.lookups.MinReorderPeriod instance = (ims.ocrr.vo.lookups.MinReorderPeriod)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTurnAroundMeasureLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.ocrr.vo.lookups.MinReorderPeriod existingInstance = (ims.ocrr.vo.lookups.MinReorderPeriod)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().Edit().cmbTurnAroundMeasure().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTurnAroundMeasureLookup()
	{
		this.form.lyr1().Edit().cmbTurnAroundMeasure().clear();
		ims.ocrr.vo.lookups.MinReorderPeriodCollection lookupCollection = ims.ocrr.vo.lookups.LookupHelper.getMinReorderPeriod(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().Edit().cmbTurnAroundMeasure().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTurnAroundMeasureLookupValue(int id)
	{
		ims.ocrr.vo.lookups.MinReorderPeriod instance = ims.ocrr.vo.lookups.LookupHelper.getMinReorderPeriodInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().Edit().cmbTurnAroundMeasure().setValue(instance);
	}
	protected final void defaultcmbTurnAroundMeasureLookupValue()
	{
		this.form.lyr1().Edit().cmbTurnAroundMeasure().setValue((ims.ocrr.vo.lookups.MinReorderPeriod)domain.getLookupService().getDefaultInstance(ims.ocrr.vo.lookups.MinReorderPeriod.class, engine.getFormName().getID(), ims.ocrr.vo.lookups.MinReorderPeriod.TYPE_ID));
	}
	protected final void oncmbSpecialtyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().Edit().cmbSpecialty().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSpecialtyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.Specialty)
		{
			ims.core.vo.lookups.Specialty instance = (ims.core.vo.lookups.Specialty)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSpecialtyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.Specialty existingInstance = (ims.core.vo.lookups.Specialty)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().Edit().cmbSpecialty().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSpecialtyLookup()
	{
		this.form.lyr1().Edit().cmbSpecialty().clear();
		ims.core.vo.lookups.SpecialtyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSpecialty(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().Edit().cmbSpecialty().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSpecialtyLookupValue(int id)
	{
		ims.core.vo.lookups.Specialty instance = ims.core.vo.lookups.LookupHelper.getSpecialtyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().Edit().cmbSpecialty().setValue(instance);
	}
	protected final void defaultcmbSpecialtyLookupValue()
	{
		this.form.lyr1().Edit().cmbSpecialty().setValue((ims.core.vo.lookups.Specialty)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.Specialty.class, engine.getFormName().getID(), ims.core.vo.lookups.Specialty.TYPE_ID));
	}
	protected final void oncmbCategoryValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().Edit().cmbCategory().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ServiceCategory existingInstance = (ims.core.vo.lookups.ServiceCategory)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbCategoryLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ServiceCategory)
		{
			ims.core.vo.lookups.ServiceCategory instance = (ims.core.vo.lookups.ServiceCategory)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbCategoryLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ServiceCategory existingInstance = (ims.core.vo.lookups.ServiceCategory)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().Edit().cmbCategory().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbCategoryLookup()
	{
		this.form.lyr1().Edit().cmbCategory().clear();
		ims.core.vo.lookups.ServiceCategoryCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getServiceCategory(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().Edit().cmbCategory().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbCategoryLookupValue(int id)
	{
		ims.core.vo.lookups.ServiceCategory instance = ims.core.vo.lookups.LookupHelper.getServiceCategoryInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().Edit().cmbCategory().setValue(instance);
	}
	protected final void defaultcmbCategoryLookupValue()
	{
		this.form.lyr1().Edit().cmbCategory().setValue((ims.core.vo.lookups.ServiceCategory)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ServiceCategory.class, engine.getFormName().getID(), ims.core.vo.lookups.ServiceCategory.TYPE_ID));
	}
	protected final void bindgrdTaxonomycolExtCodeTypeLookup()
	{
		this.form.lyr1().Edit().grdTaxonomy().colExtCodeTypeComboBox().clear();
		ims.core.vo.lookups.TaxonomyTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getTaxonomyType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().Edit().grdTaxonomy().colExtCodeTypeComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void oncmbActivityTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ActivityType existingInstance = (ims.core.vo.lookups.ActivityType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbActivityTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ActivityType)
		{
			ims.core.vo.lookups.ActivityType instance = (ims.core.vo.lookups.ActivityType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbActivityTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ActivityType existingInstance = (ims.core.vo.lookups.ActivityType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbActivityTypeLookup()
	{
		this.form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().clear();
		ims.core.vo.lookups.ActivityTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getActivityType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbActivityTypeLookupValue(int id)
	{
		ims.core.vo.lookups.ActivityType instance = ims.core.vo.lookups.LookupHelper.getActivityTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().setValue(instance);
	}
	protected final void defaultcmbActivityTypeLookupValue()
	{
		this.form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().setValue((ims.core.vo.lookups.ActivityType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ActivityType.class, engine.getFormName().getID(), ims.core.vo.lookups.ActivityType.TYPE_ID));
	}
	protected final void bindgrdActivityTaxonomycolExtCodeTypeLookup()
	{
		this.form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().colExtCodeTypeComboBox().clear();
		ims.core.vo.lookups.TaxonomyTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getTaxonomyType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().colExtCodeTypeComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdFunctionTaxonomycolExtCodeTypeLookup()
	{
		this.form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().colExtCodeTypeComboBox().clear();
		ims.core.vo.lookups.TaxonomyTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getTaxonomyType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().colExtCodeTypeComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected void clearScreen()
	{
		this.form.lyr1().Edit().chkMaternityIndicator().setValue(false);
		this.form.lyr1().Edit().intExpectedTurnAround().setValue(null);
		this.form.lyr1().Edit().cmbTurnAroundMeasure().setValue(null);
		this.form.lyr1().Edit().chkCanSchedule().setValue(false);
		this.form.lyr1().Edit().txtAlternateCode().setValue("");
		this.form.lyr1().Edit().cmbSpecialty().setValue(null);
		this.form.lyr1().Edit().chkActive().setValue(false);
		this.form.lyr1().Edit().cmbCategory().setValue(null);
		this.form.lyr1().Edit().txtName().setValue("");
		this.form.lyr1().Edit().txtDescription().setValue("");
		this.form.lyr1().Edit().grdTaxonomy().getRows().clear();
	}
	protected void populateScreenFromData(ims.core.vo.ServiceVo value)
	{
		clearScreen();
		if(value == null)
			return;

		if(value.getMaternityIndicatorIsNotNull())
			this.form.lyr1().Edit().chkMaternityIndicator().setValue(value.getMaternityIndicator().booleanValue());
		this.form.lyr1().Edit().intExpectedTurnAround().setValue(value.getExpectedTurnaroundIsNotNull() ? value.getExpectedTurnaround() : null);
		this.form.lyr1().Edit().cmbTurnAroundMeasure().setValue(value.getTurnaroundMeasureIsNotNull() ? value.getTurnaroundMeasure() : null);
		if(value.getCanBeScheduledIsNotNull())
			this.form.lyr1().Edit().chkCanSchedule().setValue(value.getCanBeScheduled().booleanValue());
		this.form.lyr1().Edit().txtAlternateCode().setValue(value.getAlternateServiceCodeIsNotNull() ? value.getAlternateServiceCode(): null);
		this.form.lyr1().Edit().cmbSpecialty().setValue(value.getSpecialtyIsNotNull() ? value.getSpecialty() : null);
		if(value.getIsActiveIsNotNull())
			this.form.lyr1().Edit().chkActive().setValue(value.getIsActive().booleanValue());
		this.form.lyr1().Edit().cmbCategory().setValue(value.getServiceCategoryIsNotNull() ? value.getServiceCategory() : null);
		this.form.lyr1().Edit().txtName().setValue(value.getServiceNameIsNotNull() ? value.getServiceName(): null);
		this.form.lyr1().Edit().txtDescription().setValue(value.getServiceDescriptionIsNotNull() ? value.getServiceDescription(): null);
		// ----- Start of grdTaxonomy Grid --------------------------
		ims.core.vo.TaxonomyMapCollection fieldgrdTaxonomy = value.getTaxonomyMapIsNotNull() ? value.getTaxonomyMap() : null;
		if(fieldgrdTaxonomy != null)
		{
			GenForm.lyr1Layer.EditContainer.grdTaxonomyRow rowgrdTaxonomy;
			for(int x = 0; x < fieldgrdTaxonomy.size(); x++)
			{
				if(fieldgrdTaxonomy.get(x) != null)
				{
					rowgrdTaxonomy = this.form.lyr1().Edit().grdTaxonomy().getRows().newRow();

					rowgrdTaxonomy.setcolExtCodeType(fieldgrdTaxonomy.get(x).getTaxonomyName());
					rowgrdTaxonomy.setcolCode(fieldgrdTaxonomy.get(x).getTaxonomyCode());

					rowgrdTaxonomy.setValue(fieldgrdTaxonomy.get(x));
				}
			}
		}
		// ----- End of grdTaxonomy Grid ----------------------------
	}
	protected ims.core.vo.ServiceVo populateDataFromScreen(ims.core.vo.ServiceVo value)
	{
		if(value == null)
			value = new ims.core.vo.ServiceVo();

		value.setMaternityIndicator(new Boolean(this.form.lyr1().Edit().chkMaternityIndicator().getValue()));
		value.setExpectedTurnaround(this.form.lyr1().Edit().intExpectedTurnAround().getValue());
		value.setTurnaroundMeasure(this.form.lyr1().Edit().cmbTurnAroundMeasure().getValue());
		value.setCanBeScheduled(new Boolean(this.form.lyr1().Edit().chkCanSchedule().getValue()));
		value.setAlternateServiceCode(this.form.lyr1().Edit().txtAlternateCode().getValue());
		value.setSpecialty(this.form.lyr1().Edit().cmbSpecialty().getValue());
		value.setIsActive(new Boolean(this.form.lyr1().Edit().chkActive().getValue()));
		value.setServiceCategory(this.form.lyr1().Edit().cmbCategory().getValue());
		value.setServiceName(this.form.lyr1().Edit().txtName().getValue());
		value.setServiceDescription(this.form.lyr1().Edit().txtDescription().getValue());
		// ----- Start of grdTaxonomy Grid --------------------------
		value.setTaxonomyMap(new ims.core.vo.TaxonomyMapCollection());
		for(int x = 0; x < this.form.lyr1().Edit().grdTaxonomy().getRows().size(); x++)
		{
			ims.core.vo.TaxonomyMap rowValue = this.form.lyr1().Edit().grdTaxonomy().getRows().get(x).getValue();
			if(rowValue == null)
				rowValue = new ims.core.vo.TaxonomyMap();

			rowValue.setTaxonomyName(this.form.lyr1().Edit().grdTaxonomy().getRows().get(x).getcolExtCodeType());
			rowValue.setTaxonomyCode(this.form.lyr1().Edit().grdTaxonomy().getRows().get(x).getcolCode());

			if(value.getTaxonomyMapIsNotNull())
				value.getTaxonomyMap().add(rowValue);
		}
		// ----- End of grdTaxonomy Grid ----------------------------

		return value;
	}
	protected ims.core.vo.ServiceVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.core.vo.ServiceVo());
	}
	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
	}
	public boolean allowNew()
	{
		return form.getMode() == ims.framework.enumerations.FormMode.VIEW && !form.isReadOnly();
	}
	public boolean allowUpdate()
	{
		return form.getMode() == ims.framework.enumerations.FormMode.VIEW && !form.isReadOnly();
	}
	public String[] validateUIRules()
	{
		return null;
	}
	public void clear()
	{
	}
	public void search()
	{
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.admin.domain.Service domain;
}
