//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH

// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.43 build 2232.25589)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.service;

import ims.admin.forms.service.GenForm.lyr1Layer.EditContainer.lyrActivityFunctionLayer.tabPageActivityContainer.grdActivityRow;
import ims.admin.forms.service.GenForm.lyr1Layer.EditContainer.lyrActivityFunctionLayer.tabPageActivityContainer.grdActivityTaxonomyRow;
import ims.admin.forms.service.GenForm.lyr1Layer.EditContainer.lyrActivityFunctionLayer.tabPageFunctionContainer.grdFunctionRow;
import ims.admin.forms.service.GenForm.lyr1Layer.EditContainer.lyrActivityFunctionLayer.tabPageFunctionContainer.grdFunctionTaxonomyRow;
import ims.admin.helper.NTPFExchequerCodingChecks;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.place.vo.ActivityRefVo;
import ims.core.vo.ActivityVo;
import ims.core.vo.ActivityVoCollection;
import ims.core.vo.ProcedureVo;
import ims.core.vo.ServiceActivityVo;
import ims.core.vo.ServiceActivityVoCollection;
import ims.core.vo.ServiceFunctionVo;
import ims.core.vo.ServiceFunctionVoCollection;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceVo;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.ActivityType;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.ServiceFunction;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.TextileString;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initalize();
		// Screen called from WorkQueue - display Patient and Case
		if (form.getGlobalContext().NTPF.getTargetObjectIdIsNotNull())
		{
			clearInstanceControls();

			ServiceVo voService = new ServiceVo();
			voService.setID_Service(form.getGlobalContext().NTPF.getTargetObjectId());
			form.getLocalContext().setSelectedRecord(domain.getServiceById(voService));

			if (form.getLocalContext().getSelectedRecordIsNotNull())
			{
				ServiceVoCollection voColl = new ServiceVoCollection();
				voColl.add(form.getLocalContext().getSelectedRecord());
				populateListControl(voColl);
				form.treService().setValue(form.getLocalContext().getSelectedRecord());

				selectionChange(form.treService().getSelectedNode());

				form.treService().getSelectedNode().setExpanded(true);

				treeExpandCollapse(form.treService().getSelectedNode());

			}

			form.getGlobalContext().NTPF.setTargetObjectId(null);

			form.lnkBack().setVisible(true);
			form.getLocalContext().setPreviousForm(getPrevForm());

			return;
		}
		else
			form.lnkBack().setVisible(false);

		open();
	}

	private FormName getPrevForm()
	{
		if (engine.getPreviousNonDialogFormName().equals(form.getForms().NTPF.WorkQueue))
			return form.getForms().NTPF.WorkQueue;
		else if (engine.getPreviousNonDialogFormName().equals(form.getForms().NTPF.WorkQueue2))
			return form.getForms().NTPF.WorkQueue2;

		return null;
	}

	public void initalize()
	{
		form.pnlSearch().setValue(ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(true) + " List");

		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().setCaption(ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(false) + " " + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(false));
		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().setCaption(ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(false) + " " + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(false));

		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().lblActTaxonomy().setValue(ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true) + " Taxonomy");
		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().lblFunctionTaxonomy().setValue(ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(true) + " Taxonomy");

		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().pnlActSearch().setValue(ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true) + " Search");

		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().imbAddList().setTooltip("Add selected " + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(false) + " to List");

		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().setActivityCaption(ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true));
		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().setFunctionCaption(ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(true));

		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().setTooltip("Select " + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true) + " Type");
		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().setTooltip("Please enter text to search for " + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true));

		form.chkActiveService().setValue(true);
		form.lyr1().Edit().cmbSpecialty().setEnabled(false);

		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().lblActTaxonomy().setValue(ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(false) + " " + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(false) + " Taxonomy");
		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().lblFunctionTaxonomy().setValue(ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(false) + " " + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(false) + " Taxonomy");

		populateFunctiongrid();

		showActivityFunctionTabs();
	}

	private void searchService(String searchText, boolean activeOnly)
	{
		ServiceShortVo voServiceFilter = new ServiceShortVo();
		voServiceFilter.setServiceName(searchText);
		if (activeOnly)
			voServiceFilter.setIsActive(Boolean.TRUE);
		else
			voServiceFilter.setIsActive(null);
		populateListControl(domain.listService(voServiceFilter));
	}

	/**
	 * @param selected
	 *            node
	 */
	private void populateServiceFunctionAndActivity(TreeNode parentNode)
	{
		if (parentNode != null)
		{
			form.getLocalContext().setserviceActivities(domain.listServiceActivity((ServiceVo) parentNode.getValue()));
			form.getLocalContext().setserviceFunctions(domain.listServiceFunction((ServiceVo) parentNode.getValue()));
			parentNode.getNodes().clear();

			if (form.getLocalContext().getserviceActivitiesIsNotNull() && form.getLocalContext().getserviceActivities().size() > 0)
			{
				// show service activities
				for (int i = 0; i < form.getLocalContext().getserviceActivities().size(); i++)
				{
					ServiceActivityVo voServActivity = form.getLocalContext().getserviceActivities().get(i);
					if (voServActivity.getActivityIsNotNull() && voServActivity.getActivity().getNameIsNotNull())
					{
						if ((voServActivity.getIsActiveIsNotNull() && voServActivity.getIsActive().booleanValue()) || (!form.chkActiveService().getValue() && voServActivity.getIsActiveIsNotNull() && !voServActivity.getIsActive().booleanValue()))
						{
							TreeNode newNode = parentNode.getNodes().add(voServActivity, voServActivity.getActivity().getName());
							newNode.setExpandedImage((voServActivity.getIsActiveIsNotNull() ? (voServActivity.getIsActive().booleanValue() ? form.getImages().Admin.Activity : form.getImages().Admin.ActivityInactive) : form.getImages().Admin.Activity));
							newNode.setCollapsedImage((voServActivity.getIsActiveIsNotNull() ? (voServActivity.getIsActive().booleanValue() ? form.getImages().Admin.Activity : form.getImages().Admin.ActivityInactive) : form.getImages().Admin.Activity));
							newNode.setSelectedImage((voServActivity.getIsActiveIsNotNull() ? (voServActivity.getIsActive().booleanValue() ? form.getImages().Admin.Activity : form.getImages().Admin.ActivityInactive) : form.getImages().Admin.Activity));
							newNode.setTextColor((voServActivity.getIsActiveIsNotNull() ? (voServActivity.getIsActive().booleanValue() ? Color.Black : Color.Red) : Color.Black));
							newNode.setTooltip(formatServiceActivityTooltip(voServActivity));
							newNode.setValue(voServActivity);
						}
					}
				}
			}

			if (form.getLocalContext().getserviceFunctionsIsNotNull() && form.getLocalContext().getserviceFunctions().size() > 0)
			{
				// show service functions
				for (int i = 0; i < form.getLocalContext().getserviceFunctions().size(); i++)
				{
					ServiceFunctionVo voServFunction = form.getLocalContext().getserviceFunctions().get(i);
					TreeNode newNode = parentNode.getNodes().add(voServFunction, voServFunction.getFunction().getText());
					newNode.setExpandedImage((voServFunction.getIsActiveIsNotNull() ? (voServFunction.getIsActive().booleanValue() ? form.getImages().Admin.Function : form.getImages().Admin.FunctionInActive) : form.getImages().Admin.Function));
					newNode.setCollapsedImage((voServFunction.getIsActiveIsNotNull() ? (voServFunction.getIsActive().booleanValue() ? form.getImages().Admin.Function : form.getImages().Admin.FunctionInActive) : form.getImages().Admin.Function));
					newNode.setSelectedImage((voServFunction.getIsActiveIsNotNull() ? (voServFunction.getIsActive().booleanValue() ? form.getImages().Admin.Function : form.getImages().Admin.FunctionInActive) : form.getImages().Admin.Function));
					newNode.setTextColor((voServFunction.getIsActiveIsNotNull() ? (voServFunction.getIsActive().booleanValue() ? Color.Black : Color.Red) : Color.Black));
					newNode.setTooltip(formatServiceFunctionTooltip(voServFunction));
					newNode.setValue(voServFunction);
				}
			}

			if (!ConfigFlag.UI.SERVICE_TABS.getValue(false).equalsIgnoreCase("NONE"))
			{
				if ((parentNode.getNodes() != null) && (parentNode.getNodes().size() == 0))
				{
					parentNode.getNodes().add(null, form.getLocalContext().gettreMessage());
				}
			}
			populateScreenFromData(form.getLocalContext().getSelectedRecord(), parentNode);

			form.treService().setValue(form.getLocalContext().getSelectedRecord());
			selectionChange(form.treService().getSelectedNode());

		}
	}

	public void open()
	{
		form.txtServiceName().setFocus();
		form.setMode(FormMode.VIEW);

		if (form.txtServiceName().getValue() == null)
		{
			clear();
			searchService(null, form.chkActiveService().getValue());
		}
		else if (!form.txtServiceName().getValue().equals(""))
		{
			clear();
			searchService(form.txtServiceName().getValue(), form.chkActiveService().getValue());
		}
		else if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			clear();
			searchService((form.getLocalContext().getSelectedRecord().getServiceNameIsNotNull() ? form.getLocalContext().getSelectedRecord().getServiceName() : ""), (form.getLocalContext().getSelectedRecord().getIsActiveIsNotNull() ? form.getLocalContext().getSelectedRecord().getIsActive().booleanValue() : form.chkActiveService().getValue()));
		}

		form.treService().setValue(null);
		form.getLocalContext().setSelectedRecord(null);
		form.getLocalContext().setserviceActivities(null);
		form.getLocalContext().setserviceFunctions(null);

	}

	protected void onFormModeChanged()
	{
		updateControlsState();
		form.getLocalContext().setSelectedActivity(null);

	}

	/**
	 * populates the screen detail from data from specified Vo Collection
	 * 
	 * @param ServiceVoCollection
	 * @return void
	 */
	public void populateInstanceControl(ims.core.vo.ServiceVo value, TreeNode node)
	{
		form.getLocalContext().setSelectedRecord(value);
		populateScreenFromData(form.getLocalContext().getSelectedRecord(), node);
	}

	public void populateScreenFromData(ServiceVo voService, TreeNode node)
	{
		// clear out instance data for next edit
		clearInstanceControls();

		super.populateScreenFromData(voService); // do this anyway for
													// ServiceVo info
		cmbCategoryValueChanged();				//wdev-16371

		// additional info for ServiceFunction and ServiceActivity
		// set local context function and activity collections for current
		// service selection
		populateScreenFromDataActivityFunction(node);

		populateScreenFromDataServiceInfo();
	}

	private void populateScreenFromDataServiceInfo()
	{
		form.lyr1().View().htmDetails().setHTML(formatServiceDetail());
	}

	private String formatServiceDetail()
	{
		String out = makeTextile("<CENTER>*" + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(true) + "*</CENTER>", "SlateBlue", "tahoma", "14");
		if (form.getLocalContext().getSelectedRecord().getServiceNameIsNotNull())
		{
			out += makeNewLine(new Integer(1));
			out += makeTextile("*" + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(false) + ": *", "DarkRed", "tahoma", "12");
			out += makeTextile(getSelectedServiceName(), "black", "tahoma", "12");
			if (form.getLocalContext().getSelectedRecord().getServiceDescriptionIsNotNull())
			{
				out += makeNewLine(new Integer(2));
				out += makeTextile("*Description: *", "SlateBlue", "tahoma", "12");
				out += makeTextile(getSelectedServiceDescription(), "black", "tahoma", "12");
			}
			else
				out += makeNewLine(new Integer(1));

			if (form.getLocalContext().getSelectedRecord().getIsActiveIsNotNull())
			{
				out += makeNewLine(new Integer(1));
				out += makeTextile("*Active: *", "SlateBlue", "tahoma", "12");
				out += makeTextile(form.getLocalContext().getSelectedRecord().getIsActive().toString(), "black", "tahoma", "12");
			}

			// category
			if (form.getLocalContext().getSelectedRecord().getServiceCategoryIsNotNull())
			{
				out += makeNewLine(new Integer(1));
				out += makeTextile("*Category: *", "SlateBlue", "tahoma", "12");
				out += makeTextile(ims.core.vo.lookups.LookupHelper.getServiceCategoryInstance(this.domain.getLookupService(), form.getLocalContext().getSelectedRecord().getServiceCategory().getId()).toString(), "black", "tahoma", "12");
			}
			// specialty
			if (form.getLocalContext().getSelectedRecord().getSpecialtyIsNotNull())
			{
				out += makeNewLine(new Integer(1));
				out += makeTextile("*Specialty: *", "SlateBlue", "tahoma", "12");
				out += makeTextile(ims.core.vo.lookups.LookupHelper.getSpecialtyInstance(this.domain.getLookupService(), form.getLocalContext().getSelectedRecord().getSpecialty().getId()).toString(), "black", "tahoma", "12");
			}

			// Alternate Service Code
			if (form.getLocalContext().getSelectedRecord().getAlternateServiceCodeIsNotNull())
			{
				out += makeNewLine(new Integer(1));
				out += makeTextile("*Alternate Service Code: *", "SlateBlue", "tahoma", "12");
				out += makeTextile(form.getLocalContext().getSelectedRecord().getAlternateServiceCode(), "black", "tahoma", "12");
			}

			// taxonomy
			out += makeNewLine(new Integer(1));
			out += formatTaxonomy(form.getLocalContext().getSelectedRecord().getTaxonomyMap());

			if (form.getLocalContext().getserviceActivitiesIsNotNull())
			{
				out += makeNewLine(new Integer(2));
				out += formatActivityDetail(form.getLocalContext().getserviceActivities());
			}

			if (form.getLocalContext().getserviceFunctionsIsNotNull())
			{
				out += makeNewLine(new Integer(2));
				out += formatFunctionDetail(form.getLocalContext().getserviceFunctions());
			}
		}
		return new TextileString(out).toString();
	}

	private String getSelectedServiceDescription()
	{
		return (form.getLocalContext().getSelectedRecord().getServiceDescriptionIsNotNull() ? form.getLocalContext().getSelectedRecord().getServiceDescription() : "");
	}

	private String getSelectedServiceName()
	{
		return (form.getLocalContext().getSelectedRecord().getServiceNameIsNotNull() ? form.getLocalContext().getSelectedRecord().getServiceName() : "");
	}

	private String formatTaxonomy(ims.core.vo.TaxonomyMapCollection tm)
	{
		String out = "";
		if ((tm != null) && (tm.size() > 0))
		{
			if (tm.size() > 1)
				out += makeNewLine(new Integer(1));

			for (int i = 0; i < tm.size(); i++)
			{
				out += makeTextile("* Taxonomy: *", "SlateBlue", "tahoma", "12");
				out += makeTextile(tm.get(i).getTaxonomyNameIsNotNull() ? tm.get(i).getTaxonomyName().toString() : "", "black", "tahoma", "12");
				out += makeTextile("* Code: *", "SlateBlue", "tahoma", "12");
				out += makeTextile((tm.get(i).getTaxonomyCodeIsNotNull() ? tm.get(i).getTaxonomyCode().toString() : ""), "black", "tahoma", "12");
				out += makeNewLine(new Integer(1));
			}
		}
		return out;
	}

	private String formatFunctionDetail(ServiceFunctionVoCollection voColl)
	{
		String out = "";

		if (voColl != null && voColl.size() > 0)
		{
			out += makeTextile("<CENTER>*" + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(true) + "*</CENTER>", "SlateBlue", "tahoma", "14");
			for (int i = 0; i < voColl.size(); i++)
			{
				out += makeTextileItem((voColl.get(i).getFunctionIsNotNull() ? voColl.get(i).getFunction().toString() : "") + formatTaxonomy(voColl.get(i).getTaxonomyMap()), (voColl.get(i).getIsActiveIsNotNull() ? (voColl.get(i).getIsActive().booleanValue() ? "black" : "red") : "black"), "tahoma", "12");
			}
		}

		return out;
	}

	private String formatActivityDetail(ServiceActivityVoCollection voColl)
	{
		String out = "";

		if (voColl != null && voColl.size() > 0)
		{
			out += makeTextile("<CENTER>*" + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true) + "*</CENTER>", "SlateBlue", "tahoma", "14");
			for (int i = 0; i < voColl.size(); i++)
			{
				if ((voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive().booleanValue()) || (!form.chkActiveService().getValue() && voColl.get(i).getIsActiveIsNotNull() && !voColl.get(i).getIsActive().booleanValue()))
					out += makeTextileItem((voColl.get(i).getActivityIsNotNull() ? voColl.get(i).getActivity().toString() : "") + formatTaxonomy(voColl.get(i).getTaxonomyMap()), (voColl.get(i).getIsActiveIsNotNull() ? (voColl.get(i).getIsActive().booleanValue() ? "black" : "red") : "black"), "tahoma", "12");
			}
		}

		return out;
	}

	private void populateScreenFromDataActivityFunction(TreeNode node)
	{
		if (node.getNodes() != null)
		{
			form.getLocalContext().setserviceActivities(null);
			form.getLocalContext().setserviceFunctions(null);

			// clear activities
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().clear();
			// clear taxonomy grids
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().clear();
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().clear();
			// initalise menu items
			
			//WDEV-16672
			updateDetailsTabContextMenusState();

			if ((node.getNodes() != null) && (node.getNodes().size() > 0) && (node.getNodes().get(0).getValue() != null))
			{
				ServiceFunctionVoCollection voSerFuncColl = new ServiceFunctionVoCollection();
				ServiceActivityVoCollection voSerActColl = new ServiceActivityVoCollection();
				ServiceFunctionVo voSerFunc = null;
				ServiceActivityVo voSerAct = null;
				grdFunctionRow rowFunc;
				grdActivityRow rowActivity;
				for (int i = 0; i < node.getNodes().size(); i++)
				{
					if (node.getNodes().get(i).getValue() instanceof ServiceFunctionVo)
					{
						voSerFunc = (ServiceFunctionVo) node.getNodes().get(i).getValue();
						voSerFuncColl.add(voSerFunc);
						rowFunc = form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getRowByValue(voSerFunc.getFunction());
						if (rowFunc != null)
						{
							rowFunc.setAdd(true);
							rowFunc.setAddReadOnly(true); // don't allow edit
															// if already saved
							rowFunc.setAddBackColor(Color.LightGray);
							rowFunc.setActive(voSerFunc.getIsActiveIsNotNull() ? voSerFunc.getIsActive().booleanValue() : true);
							rowFunc.setTextColor(rowFunc.getActive() ? Color.Black : Color.Red);
						}
					}
					if (node.getNodes().get(i).getValue() instanceof ServiceActivityVo)
					{
						voSerAct = (ServiceActivityVo) node.getNodes().get(i).getValue();
						voSerActColl.add(voSerAct);
						if ((voSerAct.getIsActiveIsNotNull() && voSerAct.getIsActive().booleanValue()) || (!form.chkActiveService().getValue() && voSerAct.getIsActiveIsNotNull() && !voSerAct.getIsActive().booleanValue()))
						{
							rowActivity = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().newRow();
							rowActivity.setValue(voSerAct.getActivity());
							rowActivity.setActivity(voSerAct.getActivity().toString());
							rowActivity.setAdd(true);
							rowActivity.setAddReadOnly(true); // don't allow
																// edit if
																// already saved
							rowActivity.setAddBackColor(Color.LightGray);
							rowActivity.setActive(voSerAct.getIsActiveIsNotNull() ? voSerAct.getIsActive().booleanValue() : true);
							rowActivity.setTextColor(rowActivity.getActive() ? Color.Black : Color.Red);
						}
					}
				}
				form.getLocalContext().setserviceFunctions(voSerFuncColl);
				form.getLocalContext().setserviceActivities(voSerActColl);
			}
		}
	}

	/**
	 * populates the screen from data from specified Vo Collection
	 * 
	 * @param ServiceVoCollection
	 * @return void
	 */
	public void populateListControl(ServiceVoCollection voColl)
	{
		clear();

		if (voColl == null || voColl.size() == 0)
		{
			engine.showMessage("No results found.");
			return;
		}

		for (int i = 0; i < voColl.size(); i++)
		{
			ServiceVo voService = voColl.get(i);
			if (voService.getServiceNameIsNotNull())
			{
				TreeNode newNode = form.treService().getNodes().add(voService, (voService.getServiceNameIsNotNull() ? voService.getServiceName() : ""));
				newNode.setTooltip(formatServicevoTooltip(voService));
				newNode.setExpandedImage(form.getImages().Admin.Service);
				newNode.setCollapsedImage(form.getImages().Admin.Service);
				newNode.setSelectedImage(form.getImages().Admin.Service);
				if (voService.getIsActiveIsNotNull() && !voService.getIsActive().booleanValue())
					newNode.setTextColor(Color.Red);

				if (!ConfigFlag.UI.SERVICE_TABS.getValue(false).equalsIgnoreCase("NONE"))
					newNode.getNodes().add(null, "Loading Please wait...");
			}
		}
	}

	private String formatServiceFunctionTooltip(ServiceFunctionVo voServiceFunction)
	{
		String out = formatServicevoTooltip(voServiceFunction.getService());
		out += makeTextile("*" + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(true) + ": *", "DarkRed", "tahoma", "14");
		out += makeTextile(voServiceFunction.getFunctionIsNotNull() ? voServiceFunction.getFunction().getText() : "", (voServiceFunction.getIsActiveIsNotNull() ? (voServiceFunction.getIsActive().booleanValue() ? "black" : "red") : "black"), "tahoma", "12");
		return new TextileString(out).toString();
	}

	private String formatServiceActivityTooltip(ServiceActivityVo voServiceActivity)
	{
		String out = formatServicevoTooltip(voServiceActivity.getService());
		out += makeTextile("*" + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true) + ": *", "DarkRed", "tahoma", "14");
		out += makeTextile(voServiceActivity.getActivityIsNotNull() ? voServiceActivity.getActivity().getName() : "", (voServiceActivity.getIsActive().booleanValue() ? "black" : "red"), "tahoma", "12");

		return new TextileString(out).toString();
	}

	private String formatServicevoTooltip(ServiceVo voService)
	{
		String out = makeTextile("*" + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(true) + ": *", "DarkRed", "tahoma", "14");
		out += makeTextile(voService.getServiceNameIsNotNull() ? voService.getServiceName() : "", "black", "tahoma", "12");
		out += makeNewLine(new Integer(1));
		if (voService.getServiceDescriptionIsNotNull())
		{
			out += makeNewLine(new Integer(1));
			out += makeTextile("*Description: *", "DarkRed", "tahoma", "12");
			out += makeTextile(voService.getServiceDescription(), "black", "tahoma", "12");
		}
		if (voService.getIsActiveIsNotNull())
		{
			out += makeNewLine(new Integer(1));
			out += makeTextile("*Active: *", "DarkRed", "tahoma", "12");
			out += makeTextile(voService.getIsActive().toString(), "black", "tahoma", "12");
		}
		return new TextileString(out).toString();
	}

	private String formatServicevoTooltip(ServiceShortVo voService)
	{
		String out = makeTextile("*" + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(true) + ": *", "DarkRed", "tahoma", "14");
		out += makeTextile(voService.getServiceNameIsNotNull() ? voService.getServiceName() : "", "black", "tahoma", "12");
		if (voService.getServiceDescriptionIsNotNull())
		{
			out += makeNewLine(new Integer(1));
			out += makeTextile("*Description: *", "DarkRed", "tahoma", "12");
			out += makeTextile(voService.getServiceDescription(), "black", "tahoma", "12");
		}
		if (voService.getIsActiveIsNotNull())
		{
			out += makeNewLine(new Integer(1));
			out += makeTextile("*Active: *", "DarkRed", "tahoma", "12");
			out += makeTextile(voService.getIsActive().toString(), "black", "tahoma", "12");
		}
		return new TextileString(out).toString();
	}

	private String makeTextile(String stringin, String colour, String font, String fontsize)
	{
		StringBuffer sb = new StringBuffer();
		sb.append("<span style=\"color:");
		sb.append(colour);
		sb.append(";font-family:");
		sb.append(font);
		sb.append(";font-size:");
		sb.append(fontsize);
		sb.append(";\">");
		sb.append(stringin);
		sb.append("</span>");
		return sb.toString();
	}

	private String makeTextileItem(String stringin, String colour, String font, String fontsize)
	{
		StringBuffer sb = new StringBuffer();
		sb.append("<span style=\"color:");
		sb.append(colour);
		sb.append(";font-family:");
		sb.append(font);
		sb.append(";font-size:");
		sb.append(fontsize);
		sb.append(";\"><li>");
		sb.append(stringin);
		sb.append("</li></span>");
		return sb.toString();
	}

	private String makeNewLine(Integer numLines)
	{
		StringBuffer ret = new StringBuffer();
		ret.append("");

		for (int i = 0; i < numLines.intValue(); i++)
		{
			ret.append("<br>");
		}
		return ret.toString();
	}

	public void clearInstanceControls()
	{
		form.lyr1().Edit().txtName().setValue(null);
		form.lyr1().Edit().txtDescription().setValue(null);
		form.lyr1().Edit().txtAlternateCode().setValue(null);
		form.lyr1().Edit().grdTaxonomy().getRows().clear();
		form.lyr1().Edit().cmbCategory().setValue(null);
		form.lyr1().Edit().cmbSpecialty().setValue(null);
		form.lyr1().Edit().chkCanSchedule().setValue(false);
		form.lyr1().Edit().chkMaternityIndicator().setValue(false);	//wdev-18232
		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().setValue(null);
		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().clear();
		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().clear();
		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().clear();
		
		// WDEV - 6943 (Clear the active and add grid cells)
		for (int i = 0; i < form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getRows().size(); i++)
		{
			grdFunctionRow row = form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getRows().get(i);
			
			row.setActive(false);
			
			row.setAdd(false);
			row.setAddReadOnly(false);
			row.setAddBackColor(null);
		}
		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().setEnabled(true);
		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().setReadOnly(false);
		form.lyr1().View().htmDetails().setHTML("");
	}

	public void clear()
	{
		form.treService().clear();
		clearInstanceControls();
	}

	private void newTaxonomy()
	{
		form.lyr1().Edit().grdTaxonomy().getRows().newRow();
	}

	private void newActivityTaxonomy()
	{
		// check that an Activity is selected		
		if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getSelectedRow() != null)
		{
			grdActivityTaxonomyRow row;
			row = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().newRow();	
			TaxonomyMap tmap = new TaxonomyMap();
			tmap.setTaxonomyName(row.getcolExtCodeType());
			tmap.setTaxonomyCode(row.getcolCode());
			row.setValue(tmap);
		}
		else if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().size() == 0)
		{
			engine.showMessage("An Activity must be added to the Activities List above");

		}
	}

	private void newFunctionTaxonomy()
	{
		// check that an Function is selected
		if (form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getSelectedRow() != null)
		{
			grdFunctionTaxonomyRow row;
			row = form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().newRow();
			TaxonomyMap tmap = new TaxonomyMap();
			tmap.setTaxonomyName(row.getcolExtCodeType());
			tmap.setTaxonomyCode(row.getcolCode());
			row.setValue(tmap);
		}
	}

	private void updateTaxonomy()
	{
		if (form.lyr1().Edit().grdTaxonomy().getSelectedRowIndex() < 0)
		{
			engine.showMessage("Must select a row first");
			return;
		}
		form.lyr1().Edit().grdTaxonomy().getRows().remove(form.lyr1().Edit().grdTaxonomy().getSelectedRowIndex());

		
	}

	private void updateActivityTaxonomy()
	{
		if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getSelectedRowIndex() < 0)
		{
			engine.showMessage("Must select a row first");
			return;
		}
		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().remove(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getSelectedRowIndex());
		
		
	}

	private void updateFunctionTaxonomy()
	{
		if (form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getSelectedRowIndex() < 0)
		{
			engine.showMessage("Must select a row first");
			return;
		}
		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().remove(form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getSelectedRowIndex());

			}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
				
		clearInstanceControls();
		//WDEV-16672
		updateDetailsTabContextMenusState();

		form.lyr1().showEdit();
		// default to active for new records
		form.lyr1().Edit().chkActive().setValue(true);

		form.lyr1().Edit().txtName().setFocus();

		form.treService().setValue(null);
		form.getLocalContext().setSelectedRecord(null);
		form.getLocalContext().setserviceActivities(null);
		form.getLocalContext().setserviceFunctions(null);

		form.getLocalContext().setSelectedRecordActivity(null);// wdev-3264

		cmbCategoryValueChanged();		//wdev-13671
		form.setMode(FormMode.EDIT);
	}

	public boolean populateActivityFunctionDataFromScreen(ServiceVo voService) throws UniqueKeyViolationException
	{
		boolean ret = false;
		if (checkForErrorsOnActivityFunction())
		{
			// update taxonomy contexts for last selected function and activity
			saveServiceActivityTaxonomy(voService);
			saveServiceFunctionTaxonomy(voService);

			// add/remove activities
			ret = saveServiceActivity();
			if (!ret)
				return ret;

			ret = saveServiceFunction();

			return ret;
		}

		return false;
	}

	private boolean checkForErrorsOnActivityFunction()
	{
		if (ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
		{
			for (int i = 0; i < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().size(); i++)
			{
				if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolExtCodeType() != null && form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolExtCodeType().equals(TaxonomyType.EXCH))
				{
					if (!NTPFExchequerCodingChecks.checkCodeIs60NNNNNorNNNN(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolCode()))
					{
						engine.showMessage("GL code must be 7 digits starting with 60 and the last digits of the GL code must be the same as the procedures exchequer code.");
						return false;
					}
				}
			}
		}
		return true;
	}

	private boolean testServiceActivityUnq(ServiceVo voService) throws PresentationLogicException
	{
		String result = "";
		grdActivityRow rowAct;

		for (int i = 0; i < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().size(); i++)
		{
			rowAct = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().get(i);

			if (rowAct.getValue().getID_Activity() != null && (rowAct.getActive() || rowAct.getAdd()))
			{

				if (form.getLocalContext().getSelectedRecordIsNotNull())
				{
					ActivityRefVo voAct = new ActivityRefVo();
					voAct.setID_Activity(rowAct.getValue().getID_Activity());
					ProcedureVo voProc = null;
					try
					{
						voProc = domain.getProcedureForActivity(voAct);
					}
					catch (DomainRuntimeException e)
					{
						engine.showMessage(e.getMessage());
						return false;
					}

					if ((voProc != null) && (voProc.getTaxonomyMapIsNotNull()))
					{
						String serviceActivityUnique = domain.isServiceActivityUnique(voService.getTaxonomyMap(), voService);
						result += serviceActivityUnique;
						if (i < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().size() - 1 && serviceActivityUnique.length() != 0)
							result += " ";
					}
				}
				else
				{
					// force onGrdActivitySelectionChanged
					onGrdActivitySelectionChanged();
					String serviceActivityUnique = domain.isServiceActivityUnique(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getValues(), voService);
					result += serviceActivityUnique;
					if (i < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().size() - 1 && serviceActivityUnique.length() != 0)
						result += " ";
				}
			}
		}

		if (result.length() != 0)
		{
			engine.showMessage(result + " is already linked to a " + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(false));
			return false;
		}

		return true;
	}

	private boolean saveServiceActivity() throws UniqueKeyViolationException
	{
		ServiceActivityVoCollection voCollActivity = null;
		ServiceActivityVoCollection voCollActivityDelete = new ServiceActivityVoCollection();

		if (form.getLocalContext().getserviceActivitiesIsNotNull())
			voCollActivity = form.getLocalContext().getserviceActivities();
		else
			voCollActivity = new ServiceActivityVoCollection();

		grdActivityRow row;
		ServiceActivityVo voServiceAct = null;

		StringBuffer sb = new StringBuffer();

		for (int j = 0; j < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().size(); j++)
		{
			row = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().get(j);
			voServiceAct = inActivityList(row.getValue(), voCollActivity);

			// Relaxing the need for every procedure to have amn EXCH code
			// need to validate the Taxonomy code is of type NNNN or 9NNNN
			// only check the link if the active flag has been set to Active
			// from inActive
			if (ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
			{
				// if now active and was inactive
				if (row.getActive() && wasInactive(row.getValue(), voCollActivity))
				{
					if (!checkMandatorySpecProcEXCHCode(voServiceAct))
					{
						sb.append("\n\n");
						sb.append(voServiceAct.getActivity().getName());
					}

					checkMultipleSpecProcEXCHCode(voServiceAct);
				}

				if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getSelectedRow() != null && row.getActive() && hadAnExchequer(row.getValue(), voCollActivity) && hasNoExchequerNow())
				{
					engine.showMessage("The currently selected Procedure has no Exchequer code and did have one previously. Please re-enter it before saving.");
					return false;
				}

			}
		}
		if (sb.length() > 0)
		{
			engine.showMessage("No Exchequer code(s) found for : " + sb.toString());
			return false;
		}

		// remove unselected from activity list and add service
		for (int i = 0; i < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().size(); i++)
		{
			row = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().get(i);
			voServiceAct = inActivityList(row.getValue(), voCollActivity);

			if ((!row.getAdd()) && (voServiceAct != null))
			{
				if (voServiceAct.getID_ServiceActivityIsNotNull())
					voCollActivityDelete.add(voServiceAct);
				voCollActivity.remove(voServiceAct);
			}
			else
			{
				if (voServiceAct != null)
				{
					voServiceAct.setService(form.getLocalContext().getSelectedRecord());

					voServiceAct.setIsActive(new Boolean(row.getActive()));
					updateActivityList(voServiceAct);
				}
			}
		}

		if ((voCollActivity.size() > 0) || (voCollActivityDelete.size() > 0))
		{
			try
			{
				String[] arrErrors;
				if (voCollActivity != null)
				{
					arrErrors = voCollActivity.validate();
					if (arrErrors != null)
					{
						engine.showErrors("Validation Errors", arrErrors);
						return false;
					}
				}
				if (voCollActivityDelete != null)
				{
					arrErrors = voCollActivityDelete.validate();
					if (arrErrors != null)
					{
						engine.showErrors("Validation Errors", arrErrors);
						return false;
					}
				}

				try
				{
					form.getLocalContext().setserviceActivities(domain.saveServiceActivity(voCollActivity, voCollActivityDelete));
				}
				catch (ForeignKeyViolationException e)
				{
					engine.showMessage(e.getMessage());
					open();
				}
				catch (DomainInterfaceException de)
				{
					engine.showMessage(de.getMessage());
					open();
				}
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return false;
			}
		}

		return true;

	}

	private boolean wasInactive(ActivityVo value, ServiceActivityVoCollection voCollActivity)
	{
		if (voCollActivity != null && voCollActivity.size() > 0)
		{
			for (int i = 0; i < voCollActivity.size(); i++)
			{
				if (voCollActivity.get(i).getActivityIsNotNull() && voCollActivity.get(i).getActivity().equals(value) && voCollActivity.get(i).getIsActiveIsNotNull() && voCollActivity.get(i).getIsActive() == false)
					return true;
			}
		}
		return false;
	}

	private boolean hadAnExchequer(ActivityVo value, ServiceActivityVoCollection voCollActivity)
	{
		if (voCollActivity != null && voCollActivity.size() > 0)
		{
			for (int i = 0; i < voCollActivity.size(); i++)
			{
				if (voCollActivity.get(i).getActivityIsNotNull() && voCollActivity.get(i).getActivity().equals(value))
				{
					if (voCollActivity.get(i).getTaxonomyMapIsNotNull())
					{
						for (int j = 0; j < voCollActivity.get(i).getTaxonomyMap().size(); j++)
						{
							if (voCollActivity.get(i).getTaxonomyMap().get(j).getTaxonomyNameIsNotNull() && voCollActivity.get(i).getTaxonomyMap().get(j).getTaxonomyName().equals(TaxonomyType.EXCH))
							{
								for (int k = 0; k < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().size(); k++)
								{
									TaxonomyMap mp = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(k).getValue();
									if (mp != null && mp.getTaxonomyName() != null && mp.getTaxonomyName().equals(TaxonomyType.EXCH))
										return false;
								}
								return true;
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean hasNoExchequerNow()
	{
		for (int k = 0; k < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().size(); k++)
		{
			TaxonomyMap mp = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(k).getValue();
			if (mp != null && mp.getTaxonomyName() != null && mp.getTaxonomyName().equals(TaxonomyType.EXCH))
				return false;
		}

		return true;
	}

	private boolean checkMandatorySpecProcEXCHCode(ServiceActivityVo voServiceAct)
	{
		if (voServiceAct.getTaxonomyMapIsNotNull())
		{
			for (int j = 0; j < voServiceAct.getTaxonomyMap().size(); j++)
			{
				if (voServiceAct.getTaxonomyMap().get(j).getTaxonomyNameIsNotNull() && voServiceAct.getTaxonomyMap().get(j).getTaxonomyName().equals(TaxonomyType.EXCH))
				{
					return true;
				}
			}
		}
		return false;
	}

	private boolean checkMultipleSpecProcEXCHCode(ServiceActivityVo voServiceAct)
	{
		if (voServiceAct.getTaxonomyMapIsNotNull())
		{
			int nCount = 0;
			Boolean bFound = false;
			for (int j = 0; j < voServiceAct.getTaxonomyMap().size(); j++)
			{
				if (voServiceAct.getTaxonomyMap().get(j).getTaxonomyNameIsNotNull() && voServiceAct.getTaxonomyMap().get(j).getTaxonomyName().equals(TaxonomyType.EXCH))
				{
					nCount++;
					bFound = true;
				}
			}
			if (nCount > 1)
			{
				engine.showMessage("There are more then one Procedure Exchequer codes configured. Please remove one.");
				return false;
			}

			return bFound;
		}
		return false;
	}

	private boolean saveServiceFunction()
	{
		ServiceFunctionVoCollection voCollFunction = null;
		ServiceFunctionVoCollection voCollFunctionDelete = new ServiceFunctionVoCollection();

		if (form.getLocalContext().getserviceFunctionsIsNotNull())
			voCollFunction = form.getLocalContext().getserviceFunctions();
		else
			voCollFunction = new ServiceFunctionVoCollection();

		grdFunctionRow row;
		ServiceFunctionVo vo = null;
		// remove unselected from function list and service for each entry
		for (int i = 0; i < form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getRows().size(); i++)
		{
			row = form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getRows().get(i);
			vo = inFunctionList(row.getValue(), voCollFunction);
			
			if ((!row.getAdd()) && (vo != null))
			{
				vo.setService(form.getLocalContext().getSelectedRecord());
				if (vo.getID_ServiceFunctionIsNotNull())
					voCollFunctionDelete.add(vo);
				voCollFunction.remove(vo);
			}
			else
			{
				if (vo != null)
				{
					
					vo.setService(form.getLocalContext().getSelectedRecord());
					vo.setIsActive(new Boolean(row.getActive()));
					updateFunctionList(vo);
				}
			}
		}

		try
		{
			String[] arrErrors;
			if (voCollFunction != null)
			{
				arrErrors = voCollFunction.validate();
				if (arrErrors != null)
				{
					engine.showErrors("Validation Errors", arrErrors);
					return false;
				}
			}
			if (voCollFunctionDelete != null)
			{
				arrErrors = voCollFunctionDelete.validate();
				if (arrErrors != null)
				{
					engine.showErrors("Validation Errors", arrErrors);
					return false;
				}
			}

			try
			{
				try
				{
					voCollFunction = domain.saveServiceFunction(voCollFunction, voCollFunctionDelete);
				}
				catch (UniqueKeyViolationException ue)
				{
					engine.showMessage(ue.getMessage());
					populateServiceFunctionAndActivity(form.treService().getSelectedNode());
					return false;
				}
			}
			catch (ForeignKeyViolationException e)
			{
				engine.showMessage("The " + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(true) + " : " + e.getMessage() + " is currently being used and cannot be deleted.");
				open();
			}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		form.getLocalContext().setserviceFunctions(voCollFunction);

		return true;
	}

	private ServiceActivityVo inActivityList(ActivityVo value, ServiceActivityVoCollection voVollActivity)
	{
		if (voVollActivity != null && voVollActivity.size() > 0)
		{
			for (int i = 0; i < voVollActivity.size(); i++)
			{
				if (voVollActivity.get(i).getActivityIsNotNull() && voVollActivity.get(i).getActivity().equals(value))
					return voVollActivity.get(i);
			}
		}
		return null;
	}

	private ServiceFunctionVo inFunctionList(ServiceFunction value, ServiceFunctionVoCollection voVollFunc)
	{
		if (voVollFunc != null && voVollFunc.size() > 0)
		{
			for (int i = 0; i < voVollFunc.size(); i++)
			{
				if (voVollFunc.get(i).getFunctionIsNotNull() && voVollFunc.get(i).getFunction().equals(value))
					return voVollFunc.get(i);
			}
		}
		return null;
	}

	private void updateFunctionList(ServiceFunctionVo value)
	{
		boolean found = false;

		ServiceFunctionVoCollection voVollFunc = form.getLocalContext().getserviceFunctions();

		if (voVollFunc == null)
			voVollFunc = new ServiceFunctionVoCollection();

		if (voVollFunc.size() > 0)
		{
			for (int i = 0; i < voVollFunc.size(); i++)
			{
				if (voVollFunc.get(i).getFunctionIsNotNull() && voVollFunc.get(i).getFunction().equals(value))
				{
					voVollFunc.set(i, value);
					found = true;
					break;
				}
			}
			if (!found)
				voVollFunc.add(value);
		}
		else
			voVollFunc.add(value);

		form.getLocalContext().setserviceFunctions(voVollFunc);
	}

	private void updateActivityList(ServiceActivityVo value)
	{
		boolean found = false;

		ServiceActivityVoCollection voVollActivity = form.getLocalContext().getserviceActivities();

		if (voVollActivity == null)
			voVollActivity = new ServiceActivityVoCollection();

		if (voVollActivity != null && voVollActivity.size() > 0)
		{
			for (int i = 0; i < voVollActivity.size(); i++)
			{
				if (voVollActivity.get(i).getActivityIsNotNull() && voVollActivity.get(i).getActivity().equals(value.getActivity()))
				{
					voVollActivity.set(i, value);
					found = true;
					break;
				}
			}
			if (!found)
				voVollActivity.add(value);
		}
		else
			voVollActivity.add(value);

		form.getLocalContext().setserviceActivities(voVollActivity);
	}

	/**
	 * check UI business logic rules and returns errors as String[]
	 * 
	 * @param arrErrorsUI
	 * @return String[]
	 */
	public String[] validateUIRules()
	{
		java.util.ArrayList listOfErrors = new java.util.ArrayList();

		if ((form.lyr1().Edit().cmbCategory().getValue() != null) && (form.lyr1().Edit().cmbCategory().getValue().equals(ServiceCategory.CLINICAL)))
		{
			if (form.lyr1().Edit().cmbSpecialty().getValue() == null)
				listOfErrors.add("Specialty is mandatory");
		}
		
		if(ConfigFlag.UI.BOOKAPPT_UI_TYPE.getValue().equals("CARE_UK"))
		{
			if ((form.lyr1().Edit().cmbCategory().getValue() != null) && (form.lyr1().Edit().cmbCategory().getValue().equals(ServiceCategory.PATHOLOGY_DISCIPLINE)))
			{
				if (form.lyr1().Edit().chkCanSchedule().getValue() == true)
					listOfErrors.add("'Can be Scheduled' cannot be 'checked' for the Service when the 'Category' value is 'Pathology Discipline'");
			}
		}
		
		//wdev-16371
		if( form.lyr1().Edit().cmbTurnAroundMeasure().getValue() != null )
		{
			if( form.lyr1().Edit().intExpectedTurnAround().getValue() == null )
			{
				listOfErrors.add("Please enter a value for Expected Turn Around. ");
			}
		}
		else if(form.lyr1().Edit().intExpectedTurnAround().getValue() != null )
		{
			listOfErrors.add("Please select a value for Turn Around Measure. ");
		}
			
		//---------------
		
		int errorCount = listOfErrors.size();
		if (errorCount == 0)
		{
			return null;
		}
		String[] result = new String[errorCount];
		listOfErrors.toArray(result);

		return result;
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		// update Service
		ServiceVo voService = form.getLocalContext().getSelectedRecord();
		// need to validate the Taxonomy code is of type NNNN or 9NNNN

		if (ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
		{
			if (!checkMandatorySpecEXCHCode())
				return false;

			if (!checkExchequerCodeAndTypeUnchangedAndStillValid())
				return false;
		}

		voService = super.populateDataFromScreen(voService);
		try
		{
			try
			{
				String[] arrErrors;
				arrErrors = voService.validate(validateUIRules());
				if (arrErrors != null)
				{
					engine.showErrors("Validation Errors", arrErrors);
					return false;
				}

				if (form.getLocalContext().getSelectedRecordIsNotNull() && form.getLocalContext().getSelectedRecord().getID_ServiceIsNotNull())
				{

					// unq test for service activity
					if (!testServiceActivityUnq(voService))
						return false;
					// this is an update
					form.getLocalContext().setSelectedRecord(domain.saveService(voService));
					if (form.treService().getSelectedNode() != null && form.treService().getSelectedNode().getNodes() != null)
						form.treService().getSelectedNode().getNodes().clear();
					form.treService().getSelectedNode().setValue(form.getLocalContext().getSelectedRecord());
					form.treService().getSelectedNode().setText(form.getLocalContext().getSelectedRecord().getServiceName());
					if (form.getLocalContext().getSelectedRecord().getIsActiveIsNotNull())
					{
						if (!form.getLocalContext().getSelectedRecord().getIsActive().booleanValue())
						{
							if (form.chkActiveService().getValue())
							{
								// viewing active only so remove from the list
								// as it is now inactive
								form.treService().getNodes().remove(form.treService().getSelectedNode());
								clearInstanceControls();
							}
							else
							{
								// inactive color it red
								form.treService().getSelectedNode().setTextColor(Color.Red);
							}
						}
						else
							form.treService().getSelectedNode().setTextColor(Color.Black);
					}
				}
				else
				{
					// unq test for service activity
					if (!testServiceActivityUnq(voService))
						return false;

					form.getLocalContext().setSelectedRecord(domain.saveService(voService));
					TreeNode newNode = form.treService().getNodes().add(form.getLocalContext().getSelectedRecord(), getSelectedServiceName());
					newNode.setTooltip(formatServicevoTooltip(voService));
					newNode.setExpandedImage(form.getImages().Admin.Service);
					newNode.setCollapsedImage(form.getImages().Admin.Service);
					newNode.setSelectedImage(form.getImages().Admin.Service);
					
					form.treService().setValue(form.getLocalContext().getSelectedRecord());	//WDEV-12704

					if (!ConfigFlag.UI.SERVICE_TABS.getValue(false).equalsIgnoreCase("NONE"))
						newNode.getNodes().add(null, "Loading Please wait...");

				}

				// save functions and activities with saved service
				if (populateActivityFunctionDataFromScreen(form.getLocalContext().getSelectedRecord()))
					updateServiceEntry(form.treService().getSelectedNode());
				else
					return false;

			} 
			catch (UniqueKeyViolationException ue)
			{
				engine.showMessage(ue.getMessage());
				// open();
				return false;
			}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			form.lyr1().showView();
			form.treService().setValue(form.getLocalContext().getSelectedRecord());
			updateControlsState();
			return false;
		}

		return true;
	}

	private boolean checkMandatorySpecEXCHCode()
	{
		if (this.form.lyr1().Edit().grdTaxonomy().getRows().size() == 0)
		{
			engine.showMessage("No Taxonomy codes entered for Specialty.");
			return false;
		}

		boolean bFound = false;
		Boolean bReturn = false;
		int nCount = 0;
		for (int x = 0; x < this.form.lyr1().Edit().grdTaxonomy().getRows().size(); x++)
		{
			if (this.form.lyr1().Edit().grdTaxonomy().getRows().get(x).getcolExtCodeType() != null && this.form.lyr1().Edit().grdTaxonomy().getRows().get(x).getcolExtCodeType().equals(TaxonomyType.EXCH))
			{
				bFound = true;

				if (!NTPFExchequerCodingChecks.checkCodeIsA6NNN(this.form.lyr1().Edit().grdTaxonomy().getRows().get(x).getcolCode()))
				{
					engine.showMessage("The Specialty Exchequer code is not of the format 6NNN.");
					return false;
				}
				nCount++;
				bReturn = true;
			}
		}
		if (nCount > 1)
		{
			engine.showMessage("There are more then one Specialty Exchequer codes configured. Please remove one.");
			return false;
		}

		if (bReturn)
			return true;

		if (!bFound)
			engine.showMessage("No Exchequer Taxonomy code entered.");

		return false;
	}

	private boolean checkExchequerCodeAndTypeUnchangedAndStillValid()
	{
		if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().size() > 0)
		{
			for (int i = 0; i < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().size(); i++)
			{
				TaxonomyMap mp = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getValue();
				if (mp != null && mp.getTaxonomyName() != null && mp.getTaxonomyName().equals(TaxonomyType.EXCH))
				{
					if (!NTPFExchequerCodingChecks.checkCodeIs60NNNNNorNNNN(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolCode()))
					{
						engine.showMessage("GL code must be 7 digits starting with 60 and the last digits of the GL code must be the same as the procedures exchequer code.");
						return false;
					}
					// WDEV-4194
					TaxonomyType codeType = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolExtCodeType();
					if (!codeType.equals(mp.getTaxonomyName()))
					{
						engine.showMessage("An External Code Type has been changed from Exchequer to " + codeType.getText() + ". Please change and save again.");
						return false;
					}

					int indexExch = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolCode().indexOf(mp.getTaxonomyCode());

					if (indexExch >= 0)
					{
						int lenStr = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolCode().length();
						int lenExchCode = mp.getTaxonomyCode().length();
						if (indexExch + lenExchCode == lenStr)
							return true;
						else
						{
							engine.showMessage("The Exchequer code saved does not have the original configured code at the end of the edited code.");
							return false;
						}
					}
					else
					{
						engine.showMessage("The Exchequer code saved does not match the Exchequer code for the configured Procedure or" + " it does not have the original configured code at the end of the edited code.");

						return false;
					}
				}
			}
		}
		return true;
	}

	public void updateControlsState()
	{
		// user can always enter a new service
		form.getContextMenus().getServiceActivityNEWSERVICEItem().setVisible(true);
		form.getContextMenus().getServiceActivityNEWSERVICEItem().setText("New " + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(false));
		
		// WDEV-13364
		// Service Speciality marked as mandatory only for Clinical service
		form.lyr1().Edit().cmbSpecialty().setRequired(ServiceCategory.CLINICAL.equals(form.lyr1().Edit().cmbCategory().getValue()));

		// WDEV-5185
		form.btnUpdate().setVisible(form.getMode().equals(FormMode.VIEW) && form.treService().getValue() instanceof ServiceVo);
		form.btnUpdate().setEnabled(form.getMode().equals(FormMode.VIEW) && form.treService().getValue() instanceof ServiceVo);

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnSearch().setEnabled(true);
			form.txtServiceName().setEnabled(true);
			form.chkActiveService().setEnabled(true);
			form.treService().setEnabled(true);

			form.lyr1().Edit().lbl1().setVisible(false);
			form.lyr1().Edit().lbl2().setVisible(false);
			form.lyr1().Edit().lbl3().setVisible(false);
			form.lyr1().Edit().lbl4().setVisible(false);
			form.lyr1().Edit().lblMaternityIndicator().setVisible(false);	//wdev-18232
			form.lyr1().Edit().lbl5().setVisible(false);
			form.lyr1().Edit().lbl7().setVisible(false);
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().lblActTaxonomy().setVisible(false);
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().lblFunctionTaxonomy().setVisible(false);
			form.lyr1().Edit().chkActive().setVisible(false);
			form.lyr1().Edit().chkCanSchedule().setVisible(false);
			form.lyr1().Edit().chkMaternityIndicator().setVisible(false);	//wdev-18232
			form.lyr1().View().htmDetails().setVisible(true);
			form.lyr1().Edit().txtDescription().setVisible(false);
			form.lyr1().Edit().txtName().setVisible(false);
			form.lyr1().Edit().cmbCategory().setVisible(false);
			form.lyr1().Edit().cmbSpecialty().setVisible(false);
			form.lyr1().Edit().grdTaxonomy().setVisible(false);
			form.lyr1().Edit().lyrActivityFunction().hide();
			form.getContextMenus().getServiceActivityNEWSERVICEItem().setVisible(true);
		
		}
		else
		{
			form.btnSearch().setEnabled(false);
			form.lyr1().View().htmDetails().setVisible(false);
			form.txtServiceName().setEnabled(false);
			form.chkActiveService().setEnabled(false);
			form.treService().setEnabled(false);

			form.lyr1().Edit().lbl1().setVisible(true);
			form.lyr1().Edit().lbl2().setVisible(true);
			form.lyr1().Edit().lbl3().setVisible(true);
			form.lyr1().Edit().lbl4().setVisible(true);
			form.lyr1().Edit().lblMaternityIndicator().setVisible(true);		//wdev-18232
			form.lyr1().Edit().lbl5().setVisible(true);
			form.lyr1().Edit().lbl7().setVisible(true);
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().lblActTaxonomy().setVisible(true);
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().lblFunctionTaxonomy().setVisible(true);
			form.lyr1().Edit().chkActive().setVisible(true);
			form.lyr1().Edit().chkCanSchedule().setVisible(true);
			form.lyr1().Edit().chkMaternityIndicator().setVisible(true);	//wdev-18232
			form.lyr1().View().htmDetails().setVisible(false);
			form.lyr1().Edit().txtDescription().setVisible(true);
			form.lyr1().Edit().txtName().setVisible(true);
			form.lyr1().Edit().cmbCategory().setVisible(true);
			form.lyr1().Edit().cmbSpecialty().setVisible(true);
			
			form.lyr1().Edit().cmbSpecialty().setEnabled(ServiceCategory.CLINICAL.equals(form.lyr1().Edit().cmbCategory().getValue()));//WDEV-16221
			
			form.lyr1().Edit().grdTaxonomy().setVisible(true);
			form.lyr1().Edit().grdTaxonomy().setEnabled(true);
			form.lyr1().Edit().grdTaxonomy().setReadOnly(false);

			form.lyr1().Edit().lyrActivityFunction().settabPageFunctionEnabled(true);
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().setEnabled(true);
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().setEnabled(false);
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().setReadOnly(false);
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().setReadOnly(true);

			form.lyr1().Edit().lyrActivityFunction().settabPageActivityEnabled(true);

			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().setEnabled(true);
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().setEnabled(false);
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().setReadOnly(false);
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().setReadOnly(true);
			
			showActivityFunctionTabs();
		
		}
		//WDEV-16672
		updateDetailsTabContextMenusState();
		form.getContextMenus().getGenericGridAddItem().setText("Add");
		form.getContextMenus().Admin.getTaxonomyGridAddTaxonomyItem().setText("Add");//WDEV-12820
		form.getContextMenus().getAddRemoveItemsADDItem().setText("Add");//WDEV-12820
		
	}
	//WDEV-16672
	private void updateDetailsTabContextMenusState()
	{
						
		form.getContextMenus().getAddRemoveItemsADDItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().getAddRemoveItemsREMOVEITEMItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyr1().Edit().grdTaxonomy().getSelectedRowIndex()>= 0);
				
		form.getContextMenus().getGenericGridAddItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getSelectedRowIndex() == -1);
		form.getContextMenus().getGenericGridMoveDownItem().setVisible(false);
		form.getContextMenus().getGenericGridMoveUpItem().setVisible(false);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getSelectedRowIndex() >=0 && form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getValue() !=null);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getSelectedRowIndex() >=0 );
		form.getContextMenus().getGenericGridViewItem().setVisible(false);
				
		form.getContextMenus().Admin.getTaxonomyGridAddTaxonomyItem().setVisible(form.getMode().equals(FormMode.EDIT) &&  form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getSelectedRow() != null);
		form.getContextMenus().Admin.getTaxonomyGridUpdateTaxonomyItem().setVisible(form.getMode().equals(FormMode.EDIT)&& form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getSelectedRow() != null && form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getValues().size()>=0);
		form.getContextMenus().Admin.getTaxonomyGridRemoveTaxonomyItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getSelectedRow() != null);
		
	}

	private void showActivityFunctionTabs()
	{

		if (ConfigFlag.UI.SERVICE_TABS.getValue().equals("ACT"))
		{
			form.getLocalContext().settreMessage("No " + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true));
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().setHeaderVisible(false);
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().setHeaderVisible(true);
			form.lyr1().Edit().lyrActivityFunction().showtabPageActivity();
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().setValue(ActivityType.PROCEDURE);
		}
		else if (ConfigFlag.UI.SERVICE_TABS.getValue().equals("FUNC"))
		{
			form.getLocalContext().settreMessage("No " + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(true));
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().setHeaderVisible(true);
			form.lyr1().Edit().lyrActivityFunction().showtabPageFunction();
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().setHeaderVisible(false);
		}
		else if (ConfigFlag.UI.SERVICE_TABS.getValue().equals("ALL"))
		{
			form.getLocalContext().settreMessage("No " + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true) + " / " + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(true) + " found.");
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().setHeaderVisible(true);
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().setHeaderVisible(true);
			form.lyr1().Edit().lyrActivityFunction().showtabPageActivity();
		}
		else if (ConfigFlag.UI.SERVICE_TABS.getValue().equals("NONE"))
		{
			form.getLocalContext().settreMessage("");
			form.lyr1().Edit().lyrActivityFunction().tabPageFunction().setHeaderVisible(false);
			form.lyr1().Edit().lyrActivityFunction().settabPageFunctionEnabled(false);
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().setHeaderVisible(false);
			form.lyr1().Edit().lyrActivityFunction().settabPageActivityEnabled(false);
			form.lyr1().Edit().lyrActivityFunction().hide();
		}
	}

	private void setScreenViewMode()
	{
		form.setMode(FormMode.VIEW);
		if ((form.treService().getSelectedNode() != null) && (form.treService().getValue() instanceof ServiceVo))
			populateScreenFromData((ServiceVo) form.treService().getValue(), form.treService().getSelectedNode());

	}

	private void updateServiceEntry(TreeNode node)
	{
		populateServiceFunctionAndActivity(node);
		form.setMode(FormMode.VIEW);
	}

	public void updateInstance()
	{
		if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			form.lyr1().showEdit();
			form.setMode(FormMode.EDIT);
		}
		else
			engine.showMessage("Please select a " + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(true) + " to Update");
	}

	protected final void populateFunctiongrid()
	{
		this.form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getRows().clear();
		ims.core.vo.lookups.ServiceFunctionCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getServiceFunction(this.domain.getLookupService());
		grdFunctionRow row;
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			row = this.form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getRows().newRow();
			row.setValue(lookupCollection.get(x));
			row.setFunction(lookupCollection.get(x).getText());
		}
	}

	protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		searchService();
	}

	private void searchService()
	{
		clear();
		form.getLocalContext().setSelectedRecord(null);
		form.getLocalContext().setserviceActivities(null);
		form.getLocalContext().setserviceFunctions(null);
		searchService(form.txtServiceName().getValue(), form.chkActiveService().getValue());
		updateControlsState();
	}

	protected void onTreServiceTreeViewNodeExpandCollapse(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		treeExpandCollapse(node);

	}

	private void treeExpandCollapse(TreeNode node)
	{
		if (node.isExpanded())
		{
			if (node.getNodes().size() > 0 && node.getNodes().get(0).getValue() == null)
			{
				if (node.getValue() instanceof ServiceVo)
					form.getLocalContext().setSelectedRecord((ServiceVo) node.getValue());
				populateServiceFunctionAndActivity(node);
			}
		}
		else
		{
			if (!ConfigFlag.UI.SERVICE_TABS.getValue(false).equalsIgnoreCase("NONE"))
			{
				if (node.getNodes().get(0).getText() == form.getLocalContext().gettreMessage())
				{
					node.getNodes().get(0).setText("Loading Please wait...");
				}
			}
		}
	}

	protected void onTreServiceTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
		if (form.treService().isEnabled())
			selectionChange(node);
	}

	private void selectionChange(ims.framework.controls.TreeNode node)
	{
		if ((node != null))
		{
			form.getContextMenus().getServiceActivityNEWFUNCTIONItem().setText("New " + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(false));
			form.getContextMenus().getServiceActivityNEWSERVICEItem().setText("New " + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(false));
			form.getContextMenus().getServiceActivityNEWACTIVITYItem().setText("New " + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY);

			form.getContextMenus().getServiceActivityUPDATEACTIVITYItem().setText("Remove " + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(false));
			form.getContextMenus().getServiceActivityUPDATEFUNCTIONItem().setText("Remove " + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(false));
			form.getContextMenus().getServiceActivityUPDATEItem().setText("Edit " + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(false));

			if ((node.getValue() != null) && (node.getValue() instanceof ServiceVo))
			{
				form.getContextMenus().getServiceActivityLINKLOCItem().setVisible(false);
				form.getContextMenus().getServiceActivityNEWACTIVITYItem().setVisible(false);
				form.getContextMenus().getServiceActivityNEWFUNCTIONItem().setVisible(false);
				form.getContextMenus().getServiceActivityUPDATEACTIVITYItem().setVisible(false);
				form.getContextMenus().getServiceActivityUPDATEFUNCTIONItem().setVisible(false);
				form.getLocalContext().setSelectedRecordFunction(null);
				form.getLocalContext().setSelectedRecordActivity(null);
				populateInstanceControl((ServiceVo) node.getValue(), node);
				form.getContextMenus().getServiceActivityUPDATEItem().setVisible(true);//WDEV-16508
			}
			else if (node.getValue() instanceof ServiceActivityVo)
			{
				form.getContextMenus().getServiceActivityLINKLOCItem().setVisible(false);
				form.getContextMenus().getServiceActivityNEWACTIVITYItem().setVisible(false);
				form.getContextMenus().getServiceActivityNEWFUNCTIONItem().setVisible(false);
				// TODO with UI flag
				// form.getContextMenus().getServiceActivityUPDATEACTIVITYItem().setVisible(true);
				form.getContextMenus().getServiceActivityUPDATEACTIVITYItem().setVisible(false);
				form.getContextMenus().getServiceActivityUPDATEFUNCTIONItem().setVisible(false);
				form.getContextMenus().getServiceActivityUPDATEItem().setVisible(false);
				form.getLocalContext().setSelectedRecordFunction(null);
				form.getLocalContext().setSelectedRecordActivity((ServiceActivityVo) node.getValue());
				populateInstanceControl((ServiceVo) node.getParent().getValue(), node.getParent());
			}
			else if (node.getValue() instanceof ServiceFunctionVo)
			{
				form.getContextMenus().getServiceActivityLINKLOCItem().setVisible(false);
				form.getContextMenus().getServiceActivityNEWACTIVITYItem().setVisible(false);
				form.getContextMenus().getServiceActivityNEWFUNCTIONItem().setVisible(false);
				form.getContextMenus().getServiceActivityUPDATEACTIVITYItem().setVisible(false);
				// TODO with UI flag
				// form.getContextMenus().getServiceActivityUPDATEFUNCTIONItem().setVisible(true);
				form.getContextMenus().getServiceActivityUPDATEFUNCTIONItem().setVisible(false);
				form.getContextMenus().getServiceActivityUPDATEItem().setVisible(false);
				form.getLocalContext().setSelectedRecordFunction((ServiceFunctionVo) node.getValue());
				form.getLocalContext().setSelectedRecordActivity(null);
				populateInstanceControl((ServiceVo) node.getParent().getValue(), node.getParent());
			}
			else
			{
				form.getContextMenus().getServiceActivityLINKLOCItem().setVisible(false);
				form.getContextMenus().getServiceActivityNEWACTIVITYItem().setVisible(false);
				form.getContextMenus().getServiceActivityNEWFUNCTIONItem().setVisible(false);
				form.getContextMenus().getServiceActivityUPDATEACTIVITYItem().setVisible(false);
				form.getContextMenus().getServiceActivityUPDATEFUNCTIONItem().setVisible(false);
				form.getContextMenus().getServiceActivityUPDATEItem().setVisible(false);
				form.getLocalContext().setSelectedRecordFunction(null);
				form.getLocalContext().setSelectedRecordActivity(null);
				populateInstanceControl((ServiceVo) node.getParent().getValue(), node);
			}
		}
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save()) // have to do special processing based on errors in the save
		{
			form.lyr1().showView();
			form.treService().setValue(form.getLocalContext().getSelectedRecord());
			updateControlsState();
			selectionChange(form.treService().getSelectedNode());
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.txtServiceName().setFocus();
		form.setMode(FormMode.VIEW);
		form.lyr1().showView();
		clear();
		searchService(form.txtServiceName().getValue(), form.chkActiveService().getValue());

		form.treService().setValue(null);
		updateControlsState();
		form.getLocalContext().setSelectedRecord(null);
		form.getLocalContext().setserviceActivities(null);
		form.getLocalContext().setserviceFunctions(null);
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		if (sender.equals(form.treService()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.ServiceActivity.NEWSERVICE :
					newInstance();
				break;
				case GenForm.ContextMenus.ServiceActivity.UPDATE :
					updateInstance();
				break;
				case GenForm.ContextMenus.ServiceActivity.UPDATEACTIVITY :
					removeActivity();
				break;
				case GenForm.ContextMenus.ServiceActivity.UPDATEFUNCTION :
					removeFunction();
				break;
				default :
				break;
			}
		}
		else if (sender.equals(form.lyr1().Edit().grdTaxonomy()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.AddRemoveItems.ADD ://WDEV-12820
					newTaxonomy();
				break;
				case GenForm.ContextMenus.AddRemoveItems.REMOVEITEM ://WDEV-12820
					updateTaxonomy();
				break;
				default :
				break;
			}
		}
		else if (sender.equals(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity()))
		{

			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Update :
					setupdateActivityTaxonomy();
				break;

				case GenForm.ContextMenus.GenericGrid.Add :
					onImbAddListClick();

				break;
				case GenForm.ContextMenus.GenericGrid.Remove :

					if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().size() == 0)
					{

						engine.showMessage("Must select a row first");

					}

				default :
				break;
			}
		}
		else if (sender.equals(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.AdminNamespace.TaxonomyGrid.UpdateTaxonomy : //WDEV-12820		
					
					setupdateActivityTaxonomy();
										
				break;
				case GenForm.ContextMenus.AdminNamespace.TaxonomyGrid.AddTaxonomy://WDEV-12820	
					newActivityTaxonomy();
					
				break;
				case GenForm.ContextMenus.AdminNamespace.TaxonomyGrid.RemoveTaxonomy://WDEV-12820	
					updateActivityTaxonomy();
				break;
				default :
				break;
			}
		}
		else if (sender.equals(form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add :
					newFunctionTaxonomy();
				break;
				case GenForm.ContextMenus.GenericGrid.Remove :
					updateFunctionTaxonomy();
				break;
				default :
				break;
			}
		}
		//WDEV-16672
		updateDetailsTabContextMenusState();
	
	}

	private void setupdateActivityTaxonomy()
	{
		boolean bFound = false;

		if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows() != null)
		{
			for (int i = 0; i < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().size(); i++)
			{
				form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).setReadOnly(false);
				TaxonomyMap mp = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getValue();
				if (mp != null && mp.getTaxonomyName() != null && mp.getTaxonomyName().equals(TaxonomyType.EXCH))
					bFound = true;
			}
		}
		form.getContextMenus().Admin.getTaxonomyGridAddTaxonomyItem().setText("Add a new Taxonomy code");
						
		grdActivityRow row;

		row = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getSelectedRow();
		
		ServiceActivityVo vo = inActivityList(row.getValue(), form.getLocalContext().getserviceActivities());

		form.getLocalContext().setSelectedRecordActivity(vo);
		if (!bFound)
			getActivityTaxonomy(vo, true);
		else
			getActivityTaxonomy(vo, false);
	}

	private void removeActivity()
	{
		if (form.getLocalContext().getSelectedRecordIsNotNull() && form.getLocalContext().getSelectedRecordActivityIsNotNull())
		{
			try
			{
				try
				{
					try
					{
						domain.removeServiceActivity(form.getLocalContext().getSelectedRecordActivity());
						updateServiceEntry(form.treService().getSelectedNode().getParent());
						form.treService().setValue(null);
					}
					catch (UniqueKeyViolationException de)
					{
						if (form.getLocalContext().getSelectedRecordActivity().getActivityIsNotNull())
							engine.showMessage(domain.checkLSALinks(form.getLocalContext().getSelectedRecordActivity()));
						else
							engine.showMessage("Cannot remove this" + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true) + " as it is already used in a location.");
						setScreenViewMode();
					}
				}
				catch (StaleObjectException se)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					open();
				}
				catch (DomainInterfaceException de)
				{
					engine.showMessage(de.getMessage());
					open();
				}
			}
			catch (ForeignKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				setScreenViewMode();
			}
		}
	}

	private void removeFunction()
	{
		if (form.getLocalContext().getSelectedRecordIsNotNull() && form.getLocalContext().getSelectedRecordFunctionIsNotNull())
		{
			try
			{
				try
				{
					try
					{
						domain.removeServiceFunction(form.getLocalContext().getSelectedRecordFunction());
						updateServiceEntry(form.treService().getSelectedNode().getParent());
						form.treService().setValue(null);
					}
					catch (UniqueKeyViolationException de)
					{
						if (form.getLocalContext().getSelectedRecordFunction().getFunctionIsNotNull())
							engine.showMessage("Cannot remove " + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(true) + " : " + (form.getLocalContext().getSelectedRecordFunction().getFunctionIsNotNull() ? form.getLocalContext().getSelectedRecordFunction().getFunction().toString() : "") + ". It is already used in a Location.");
						else
							engine.showMessage("Cannot remove this" + ConfigFlag.UI.DISPLAY_NAME_FUNCTION.getValue(true) + " as it is already used in a location.");
						setScreenViewMode();
					}
				}
				catch (StaleObjectException se)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					open();
				}
			}
			catch (ForeignKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				setScreenViewMode();
			}
		}
	}

	protected void onCmbCategoryValueChanged() throws PresentationLogicException
	{
		form.lyr1().Edit().cmbSpecialty().setValue(null); //WDEV-16221
		cmbCategoryValueChanged();
	}
	//wdev-16371
	private void cmbCategoryValueChanged()
	{
		if (form.lyr1().Edit().cmbCategory().getValue() == null)
		{
			if (form.lyr1().Edit().cmbSpecialty().getValue() == null)
				form.lyr1().Edit().cmbSpecialty().setEnabled(false);
			
			//wdev-16371
			showhideTurnAround(false);
			form.lyr1().Edit().cmbTurnAroundMeasure().setValue(null);
			form.lyr1().Edit().intExpectedTurnAround().setValue(null);
		}
		else
		{
			if (form.lyr1().Edit().cmbCategory().getValue().equals(ServiceCategory.CLINICAL))
			{
				form.lyr1().Edit().cmbSpecialty().setEnabled(true);
				//wdev-16371
				showhideTurnAround(false);
				form.lyr1().Edit().cmbTurnAroundMeasure().setValue(null);
				form.lyr1().Edit().intExpectedTurnAround().setValue(null);
			}
			else if(form.lyr1().Edit().cmbCategory().getValue().equals(ServiceCategory.RADIOLOGY_MODALITY))
			{
				form.lyr1().Edit().cmbSpecialty().setEnabled(true);
				showhideTurnAround(true);			//wdev-16371
			}
			else if(form.lyr1().Edit().cmbCategory().getValue().equals(ServiceCategory.PATHOLOGY_DISCIPLINE)) //wdev-16371
			{
				showhideTurnAround(true);
			}
			else if (form.lyr1().Edit().cmbSpecialty().getValue() == null)
			{
				form.lyr1().Edit().cmbSpecialty().setEnabled(false);
				
				//wdev-16371
				showhideTurnAround(false);
				form.lyr1().Edit().cmbTurnAroundMeasure().setValue(null);
				form.lyr1().Edit().intExpectedTurnAround().setValue(null);
			
			}
			
		}
		
		updateControlsState();
	}
	private void showhideTurnAround(boolean showhide)
	{
		form.lyr1().Edit().lblTurnAroundMeasure().setVisible(showhide);
		form.lyr1().Edit().cmbTurnAroundMeasure().setVisible(showhide);
		form.lyr1().Edit().lblExpectedTurnAround().setVisible(showhide);
		form.lyr1().Edit().intExpectedTurnAround().setVisible(showhide);
	}

	protected void onCmbActivityTypeValueChanged() throws PresentationLogicException
	{
	}

	protected void onQmbActivityTextSubmited(String value) throws PresentationLogicException
	{
		// search for activity based on text submitted and optionally activity
		// type.
		ActivityVoCollection voCollActivity = null;
		try
		{
			voCollActivity = domain.listActivity(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().getEditedText(), form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().getValue(), new Boolean(true));
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().clear();

		if (voCollActivity != null && voCollActivity.size() > 0)
		{
			for (int i = 0; i < voCollActivity.size(); i++)
			{
				form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().newRow(voCollActivity.get(i), voCollActivity.get(i).getName());
			}
			if (voCollActivity.size() == 1)
				form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().setValue(voCollActivity.get(0));
			else if (voCollActivity.size() > 1)
				form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().showOpened();
		}

	}

	protected void onImbAddListClick() throws PresentationLogicException
	{
		if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().getValue() != null)
		{
			// check activity is not already added
			if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().size() > 0)
			{
				for (int i = 0; i < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().size(); i++)
				{
					if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().get(i).getValue().equals(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().getValue()))
					{
						engine.showMessage(ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(true) + ":" + form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().getValue().getName() + " already in list");
						return;
					}
				}
			}
			grdActivityRow row;

			row = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getRows().newRow();
			row.setValue(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().getValue());
			row.setActivity(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().qmbActivity().getValue().getName());
			row.setActive(true);
			row.setAdd(true);

			// add it to the local context service activity list
			ServiceActivityVo vo = null;
			vo = new ServiceActivityVo();
			vo.setActivity(row.getValue());

			updateActivityList(vo);

			// force selection
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().setValue(row.getValue());
			onGrdActivitySelectionChanged();

			if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().getValue() != null && form.lyr1().Edit().lyrActivityFunction().tabPageActivity().cmbActivityType().getValue().equals(ActivityType.PROCEDURE))
				// WDEV-2538
				populateActivityTaxonomyWithPossibleExchequerCode(row, true);

			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().moveTo(0);
		}
		else
		{
			engine.showMessage("There is no activity of this type to add.");
		}

	}

	private void populateActivityTaxonomyWithPossibleExchequerCode(grdActivityRow row, boolean isReadOnly)
	{
		if (row.getValue().getID_Activity() != null)
		{
			ActivityRefVo voAct = new ActivityRefVo();
			voAct.setID_Activity(row.getValue().getID_Activity());
			ProcedureVo voProc = null;
			try
			{
				voProc = domain.getProcedureForActivity(voAct);
			}
			catch (DomainRuntimeException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
			if ((voProc != null) && (voProc.getTaxonomyMapIsNotNull()))
			{
				grdActivityTaxonomyRow rowActTaxonomy;

				// WDEV-2538
				form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().clear();

				for (int i = 0; i < voProc.getTaxonomyMap().size(); i++)
				{
					if (ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue() && voProc.getTaxonomyMap().get(i).getTaxonomyName().equals(TaxonomyType.EXCH))
					{
						rowActTaxonomy = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().newRow();
						rowActTaxonomy.setValue(voProc.getTaxonomyMap().get(i));
						rowActTaxonomy.setcolCode(voProc.getTaxonomyMap().get(i).getTaxonomyCodeIsNotNull() ? voProc.getTaxonomyMap().get(i).getTaxonomyCode() : null);
						rowActTaxonomy.setcolExtCodeType(voProc.getTaxonomyMap().get(i).getTaxonomyNameIsNotNull() ? voProc.getTaxonomyMap().get(i).getTaxonomyName() : null);

						rowActTaxonomy.setReadOnly(false);
					}
					else if (!ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
					{
						rowActTaxonomy = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().newRow();
						rowActTaxonomy.setValue(voProc.getTaxonomyMap().get(i));
						rowActTaxonomy.setcolCode(voProc.getTaxonomyMap().get(i).getTaxonomyCodeIsNotNull() ? voProc.getTaxonomyMap().get(i).getTaxonomyCode() : null);
						rowActTaxonomy.setcolExtCodeType(voProc.getTaxonomyMap().get(i).getTaxonomyNameIsNotNull() ? voProc.getTaxonomyMap().get(i).getTaxonomyName() : null);

						rowActTaxonomy.setReadOnly(false);
					}
				}
			}
		}
		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().setReadOnly(isReadOnly);
	}

	protected void onGrdActivitySelectionChanged() throws PresentationLogicException
	{	
		
		if (form.getLocalContext().getSelectedActivityIsNotNull() && ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
		{
			if (didPreviousDisplayedActivityTaxonomyHaveEXCH(form.getLocalContext().getSelectedActivity()))
			{
				form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().setValue(form.getLocalContext().getSelectedActivity());
				return;
			}
		}
		grdActivityRow row;
		row = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().getSelectedRow();
		
		form.getLocalContext().setSelectedActivity(row.getValue());

		if (form.getLocalContext().getSelectedRecordIsNotNull())
			saveServiceActivityTaxonomy(form.getLocalContext().getSelectedRecord());
		else
			saveServiceActivityTaxonomy(populateDataFromScreen(new ServiceVo()));

		//WDEV-16672
		updateDetailsTabContextMenusState();
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit " + ConfigFlag.UI.DISPLAY_NAME_ACTIVITY.getValue(false) + " Taxonomy");
	
		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().setEnabled(true);
		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().setReadOnly(false);

		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().clear();

		ServiceActivityVo vo = inActivityList(row.getValue(), form.getLocalContext().getserviceActivities());

		form.getLocalContext().setSelectedRecordActivity(vo);

		getActivityTaxonomy(vo, true);
	}

	private boolean didPreviousDisplayedActivityTaxonomyHaveEXCH(ActivityVo voPrevious)
	{

		if (ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
		{
			ServiceActivityVoCollection voCollActivity = null;

			if (form.getLocalContext().getserviceActivitiesIsNotNull())
				voCollActivity = form.getLocalContext().getserviceActivities();
			else
				voCollActivity = new ServiceActivityVoCollection();

			if (hadAnExchequer(voPrevious, voCollActivity))
			{
				engine.showMessage("The currently selected Procedure has no Exchequer code and did have one previously. Please re-enter it before saving.");
				return true;
			}
		}
		return false;
	}

	private void getActivityTaxonomy(ServiceActivityVo vo, boolean isReadOnly)
	{

		if ((vo != null) && (vo.getTaxonomyMapIsNotNull()) && vo.getTaxonomyMap().size() > 0)
		{
			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().clear();

			grdActivityTaxonomyRow rowActTaxonomy;
			for (int i = 0; i < vo.getTaxonomyMap().size(); i++)
			{
				rowActTaxonomy = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().newRow();
				rowActTaxonomy.setValue(vo.getTaxonomyMap().get(i));
				rowActTaxonomy.setcolCode(vo.getTaxonomyMap().get(i).getTaxonomyCodeIsNotNull() ? vo.getTaxonomyMap().get(i).getTaxonomyCode() : null);
				rowActTaxonomy.setcolExtCodeType(vo.getTaxonomyMap().get(i).getTaxonomyNameIsNotNull() ? vo.getTaxonomyMap().get(i).getTaxonomyName() : null);

				rowActTaxonomy.setReadOnly(isReadOnly);
			}

			form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().setReadOnly(isReadOnly);
		}
	}

	private void saveServiceActivityTaxonomy(ServiceVo voService)
	{
		if (voService != null)
		{
			ServiceActivityVo vo = form.getLocalContext().getSelectedRecordActivity();
			if (vo != null)
			{
				vo.setService(voService);
				vo.setTaxonomyMap(null);
				if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().size() > 0)
				{
					TaxonomyMapCollection voColl = new TaxonomyMapCollection();
					// update it's taxonmy
					for (int i = 0; i < form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().size(); i++)
					{
						if (form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolCode() != null || form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolExtCodeType() != null)
						{
							TaxonomyMap mp2 = new TaxonomyMap();
							TaxonomyMap mp = form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getValue();
							mp2 = (TaxonomyMap) mp.clone();
							mp2.setTaxonomyCode(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolCode());
							mp2.setTaxonomyName(form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivityTaxonomy().getRows().get(i).getcolExtCodeType());

							voColl.add(mp2);
						}
					}

					vo.setTaxonomyMap(voColl);
				}
				// update serviceVo
				updateActivityList(vo);
			}
		}
	}

	protected void onGrdFunctionSelectionChanged() throws PresentationLogicException
	{
		saveServiceFunctionTaxonomy(form.getLocalContext().getSelectedRecord());

		//WDEV-16672
		updateDetailsTabContextMenusState();
		form.getContextMenus().getGenericGridAddItem().setText("Add");
		
		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().setEnabled(true);
		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().setReadOnly(false);

		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().clear();

		grdFunctionRow row;

		row = form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().getSelectedRow();

		ServiceFunctionVo vo = inFunctionList(row.getValue(), form.getLocalContext().getserviceFunctions());

		form.getLocalContext().setSelectedRecordFunction(vo);

		if ((vo != null) && (vo.getTaxonomyMapIsNotNull()))
		{
			grdFunctionTaxonomyRow rowActTaxonomy;
			for (int i = 0; i < vo.getTaxonomyMap().size(); i++)
			{
				rowActTaxonomy = form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().newRow();
				rowActTaxonomy.setValue(vo.getTaxonomyMap().get(i));
				rowActTaxonomy.setcolCode(vo.getTaxonomyMap().get(i).getTaxonomyCodeIsNotNull() ? vo.getTaxonomyMap().get(i).getTaxonomyCode() : null);
				rowActTaxonomy.setcolExtCodeType(vo.getTaxonomyMap().get(i).getTaxonomyNameIsNotNull() ? vo.getTaxonomyMap().get(i).getTaxonomyName() : null);
			}
		}
	}

	private void saveServiceFunctionTaxonomy(ServiceVo voService)
	{
		if (voService != null)
		{
			ServiceFunctionVo vo = form.getLocalContext().getSelectedRecordFunction();
			if (vo != null)
			{
				vo.setService(voService);
				vo.setTaxonomyMap(null);
				if (form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().size() > 0)
				{
					TaxonomyMapCollection voColl = new TaxonomyMapCollection();
					// update it's taxonmy
					for (int i = 0; i < form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().size(); i++)
					{
						TaxonomyMap mp = form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().get(i).getValue();
						mp.setTaxonomyCode(form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().get(i).getcolCode());
						mp.setTaxonomyName(form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().get(i).getcolExtCodeType());
						form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().get(i).setValue(mp);
						voColl.add(form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunctionTaxonomy().getRows().get(i).getValue());
					}

					vo.setTaxonomyMap(voColl);

					// update serviceVo
					updateFunctionList(vo);
				}
			}
		}
	}

	protected void onGrdFunctionGridCheckBoxClicked(int column, grdFunctionRow row, boolean isChecked) throws PresentationLogicException
	{
		// update the list here
		row.setActive(isChecked);
		if (isChecked)
		{
			ServiceFunctionVo vo = inFunctionList(row.getValue(), form.getLocalContext().getserviceFunctions());
			if (vo == null)
			{
				// create new service function
				vo = new ServiceFunctionVo();
				vo.setFunction(row.getValue());
				vo.setIsActive(new Boolean(true));
				row.setActive(isChecked);
				// add it to the list
				updateFunctionList(vo);
			}
		}

		// force selection
		form.lyr1().Edit().lyrActivityFunction().tabPageFunction().grdFunction().setValue(row.getValue());
		onGrdFunctionSelectionChanged();
	}

	protected void onGrdActivityGridCheckBoxClicked(int column, grdActivityRow row, boolean isChecked) throws PresentationLogicException
	{
		// update the list here
		if (isChecked)
		{
			ServiceActivityVo vo = inActivityList(row.getValue(), form.getLocalContext().getserviceActivities());
			if (vo == null)
			{
				// create new service activity
				vo = new ServiceActivityVo();
				vo.setActivity(row.getValue());
				vo.setIsActive(new Boolean(true));

				// add it to the list
				updateActivityList(vo);
			}
		}

		// force selection
		form.lyr1().Edit().lyrActivityFunction().tabPageActivity().grdActivity().setValue(row.getValue());
		onGrdActivitySelectionChanged();
	}

	protected void onChkActiveServiceValueChanged() throws PresentationLogicException
	{
		searchService();
	}

	protected void onLnkBackClick() throws PresentationLogicException
	{
		goBack();
	}

	private void goBack()
	{
		form.getGlobalContext().NTPF.setTargetObjectId(null);
		if (form.getLocalContext().getPreviousFormIsNotNull())
			engine.open(form.getLocalContext().getPreviousForm());
	}

	@Override
	protected void onGrdTaxonomySelectionChanged() throws PresentationLogicException
	{
		//WDEV-16672
		updateDetailsTabContextMenusState();
	
	}
	

	@Override
	protected void onGrdActivityTaxonomySelectionChanged() throws PresentationLogicException
	{
		//WDEV-16672
		updateDetailsTabContextMenusState();
	
	
	}
}

