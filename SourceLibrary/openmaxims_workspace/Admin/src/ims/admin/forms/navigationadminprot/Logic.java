//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.70 build 3509.17128)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.admin.forms.navigationadminprot;

import ims.admin.forms.navigationadminprot.GenForm.grdListRow;
import ims.admin.forms.navigationadminprot.GenForm.lyrAddsLayer.tabAssesmentsContainer.grdNavAssesmentsRow;
import ims.admin.forms.navigationadminprot.GenForm.lyrAddsLayer.tabFormsContainer.grdNavFormsRow;
import ims.admin.forms.navigationadminprot.GenForm.lyrAddsLayer.tabReportsContainer.grdNavReportsRow;
import ims.admin.vo.AppFormVo;
import ims.admin.vo.AppNavAccessRightsVo;
import ims.admin.vo.AppNavFormVo;
import ims.admin.vo.AppNavFormVoCollection;
import ims.admin.vo.AppNavRootGroupVo;
import ims.admin.vo.AppNavRootGroupVoCollection;
import ims.admin.vo.AppNavSecondGroupVo;
import ims.admin.vo.AppNavSecondGroupVoCollection;
import ims.admin.vo.AppNavShortVoCollection;
import ims.admin.vo.AppNavigationVo;
import ims.admin.vo.ReportTemplateLiteVo;
import ims.admin.vo.ReportTemplateLiteVoCollection;
import ims.admin.vo.enums.NavigationNodeType;
import ims.admin.vo.lookups.FormReadWrite;
import ims.admin.vo.lookups.NavigationStyle;
import ims.assessment.vo.GraphicAssessmentShortVo;
import ims.assessment.vo.GraphicAssessmentShortVoCollection;
import ims.assessment.vo.UserAssessmentLiteVo;
import ims.assessment.vo.UserAssessmentLiteVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.Configuration;
import ims.configuration.InitConfig;
import ims.core.vo.GenericIdentifierVo;
import ims.core.vo.GenericIdentifierVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.TreeNode;
import ims.framework.controls.TreeNodeCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormAccess;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppForm;
import ims.framework.interfaces.INavForm;
import ims.framework.utils.Color;
import ims.framework.utils.Image;
import ims.vo.ValueObjectRef;
import ims.vo.interfaces.INavigationNode;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;

public class Logic extends BaseLogic
{

	private static final long serialVersionUID = 1L;
	private static final int ROOT_NODE = 1;
	private static final int SECOND_NODE = 2;
	private static final int FORM_NODE = 3;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onGrdListSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedNav(domain.getNavigation(form.grdList().getSelectedRow().getValue()));

		populateScreenFromData(form.getLocalContext().getSelectedNav());
		updateControlsState();

	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedAssesments(null);
		form.getLocalContext().setSelectedForms(null);
		form.getLocalContext().setSelectedReports(null);
		form.getLocalContext().setAllForms(null);
		form.lyrAdds().tabForms().grdNavForms().getRows().clear();
		form.lyrAdds().tabAssesments().grdNavAssesments().getRows().clear();
		form.lyrAdds().tabReports().grdNavReports().getRows().clear();

		clearSearchFields();
		open();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String selectedMessage = areItemsSelected();
		if (selectedMessage == null)
		{
			if (save())
				open();
			return;
		}
		engine.showMessage(selectedMessage, "Do you want to continue ?", MessageButtons.YESNO, MessageIcon.QUESTION);
	}

	protected void onTreNavTreeViewNodeDropped(ims.framework.controls.TreeNode node, ims.framework.controls.TreeNode previousParentNode) throws ims.framework.exceptions.PresentationLogicException
	{
		if (!(node.getValue() instanceof INavigationNode))
			return;
		INavigationNode navNode = (INavigationNode) node.getValue();

		if (NavigationNodeType.ROOTGROUP.equals(navNode.getTypeNode()))
		{
			AppNavigationVo nav = form.getLocalContext().getSelectedNav();
			AppNavRootGroupVo rootGrp = (AppNavRootGroupVo) node.getValue();
			nav.getRootGroups().remove(rootGrp);
			int index = form.treNav().getNodes().indexOf(node);
			nav.getRootGroups().add(index, rootGrp);
			return;
		}
		if (node.getParent().equals(previousParentNode))
		{
			// Just an ordering move
			setPosIndexes(node.getParent());
			return;
		}
		if (NavigationNodeType.FORM.equals(navNode.getTypeNode()))
		{
			AppNavFormVo form = getClone((AppNavFormVo) navNode);
			TreeNode curParent = node.getParent();
			((INavigationNode) curParent.getValue()).getFormChildsNode().add(form);
			((INavigationNode) previousParentNode.getValue()).getFormChildsNode().remove((AppNavFormVo) node.getValue());
			node.setValue(form);
			setPosIndexes(curParent);

		}
		else if (NavigationNodeType.SECONDGROUP.equals(navNode.getTypeNode()))
		{
			AppNavSecondGroupVo group = getClone((AppNavSecondGroupVo) node.getValue());
			((AppNavRootGroupVo) node.getParent().getValue()).getGroups().add(group);
			((AppNavRootGroupVo) previousParentNode.getValue()).getGroups().remove((AppNavSecondGroupVo) node.getValue());

			node.setValue(group);
			setPosIndexes(node.getParent());
		}
		else
		{
			throw new CodingRuntimeException("Unknown node type dragged and dropped");
		}
		setPosIndexes(previousParentNode);

	}

	@Override
	protected void onTreNavTreeViewNodeEdited(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		// As there is no way to limit the text in the ui node we do a trim
		if (node.getText().length() > 50)
		{
			node.setText(node.getText().substring(0, 50));

		}

		((INavigationNode) node.getValue()).setTextNode(node.getText());

		setContextMenuItems(form.getMode());
	}

	@Override
	protected void onTreNavTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{

		if (form.getMode().equals(FormMode.EDIT))
		{
			if (node != null)
			{
				form.getLocalContext().setSelectedTreeValue(node.getValue());
			}

			updateControlsState();
		}
	}

	@Override
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		updateInstance();
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onGrdNavFormsGridCheckBoxClicked(int column, grdNavFormsRow row, boolean isChecked) throws PresentationLogicException
	{
		row.setBackColor(isChecked ? Color.Beige : Color.White);
		ArrayList<IAppForm> selForms = form.getLocalContext().getSelectedForms();
		if (isChecked)
		{
			if (selForms == null)
			{
				selForms = new ArrayList<IAppForm>();
			}

			selForms.add(row.getValue());

		}
		else
		{
			if (selForms == null)
			{
				// error
				return;
			}
			selForms.remove(row.getValue());
		}
		form.getLocalContext().setSelectedForms(selForms);
		updateControlsState();

	}

	protected void onBtnSearchAssesmentsClick() throws PresentationLogicException
	{
		searchandPopulateAssesments();

	}

	protected void onBtnSearchFormsClick() throws PresentationLogicException
	{
		searchandPopulateForms();

	}

	protected void onBtnSearchReportsClick() throws PresentationLogicException
	{
		searchPopulateReports();

	}

	protected void onBtnAddReportsClick() throws PresentationLogicException
	{
		addReportsToTree();
		updateControlsState();

	}

	protected void onGrdNavReportsGridCheckBoxClicked(int column, grdNavReportsRow row, boolean isChecked) throws PresentationLogicException
	{
		row.setBackColor(isChecked ? Color.Beige : Color.White);
		ReportTemplateLiteVoCollection selReports = form.getLocalContext().getSelectedReports();
		if (isChecked)
		{
			if (selReports == null)
			{
				selReports = new ReportTemplateLiteVoCollection();
			}

			selReports.add(row.getValue());

		}
		else
		{
			if (selReports == null)
			{
				// error
				return;
			}
			selReports.remove(row.getValue());
		}
		form.getLocalContext().setSelectedReports(selReports);
		updateControlsState();
	}

	@Override
	protected void onBtnAddAssesmentsClick() throws PresentationLogicException
	{
		addAssesmentsToTree();
		updateControlsState();

	}

	@Override
	protected void onGrdNavAssesmentsGridCheckBoxClicked(int column, grdNavAssesmentsRow row, boolean isChecked) throws PresentationLogicException
	{
		row.setBackColor(isChecked ? Color.Beige : Color.White);
		ArrayList<ValueObjectRef> selAssesments = form.getLocalContext().getSelectedAssesments();
		if (isChecked)
		{
			if (selAssesments == null)
			{
				selAssesments = new ArrayList<ValueObjectRef>();
			}

			selAssesments.add(row.getValue());

		}
		else
		{
			if (selAssesments == null)
			{
				// error
				return;
			}
			selAssesments.remove(row.getValue());
		}
		form.getLocalContext().setSelectedAssesments(selAssesments);
		updateControlsState();
	}

	@Override
	protected void onBtnAddFormsClick() throws PresentationLogicException
	{
		addFormsToTree();
		updateControlsState();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (DialogResult.YES.equals(result))
		{
			if (save())
				open();
		}
	}

	@Override
	protected void onQmbNavSearchFormTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbNavSearchForm().clear();
		form.qmbNavSearchForm().getValues().clear();
		if (value == null || value.length() < 2)
			return;
		AppNavFormVoCollection availableForms = getAllFormsWithName(value);
		if (availableForms == null || availableForms.size() == 0)
		{
			String message = null;
			if (value.replace("%", "").trim().length() == 0)
			{
				message = "Navigation doesn't contain\nany valid forms.\nPlease add some";
			}
			else
			{
				message = "No form in the navigation\nmeets your criteria";
			}

			form.qmbNavSearchForm().newRow(null, message);

		}
		else
		{
			for (int i = 0; i < availableForms.size(); i++)
			{
				AppFormVo newForm = availableForms.get(i).getForm();
				form.qmbNavSearchForm().newRow(newForm, newForm.isAlias() ? newForm.getAliasName() : newForm.getName());
			}
		}
		form.qmbNavSearchForm().showOpened();
	}

	@Override
	protected void onQmbNavSearchFormValueChanged() throws PresentationLogicException
	{
		if (form.qmbNavSearchForm().getValue() != null)
		{
			form.getLocalContext().getSelectedNav().setPatientSearchForm(form.qmbNavSearchForm().getValue());
			populateScreenFromData(form.getLocalContext().getSelectedNav());
		}
		else
		{
			form.qmbNavSearchForm().clear();
		}

	}

	@Override
	protected void onQmbNavStartFormTextSubmited(String value) throws PresentationLogicException
	{

		form.qmbNavStartForm().clear();
		form.qmbNavStartForm().getValues().clear();
		if (value == null || value.length() < 2)
			return;
		AppNavFormVoCollection availableForms = getAllFormsWithName(value);
		if (availableForms == null || availableForms.size() == 0)
		{
			String message = null;
			if (value.replace("%", "").trim().length() == 0)
			{
				message = "Navigation doesn't contain\nany valid forms.\nPlease add some";
			}
			else
			{
				message = "No form in the navigation\nmeets your criteria";
			}

			form.qmbNavStartForm().newRow(null, message);

		}
		else
		{
			for (int i = 0; i < availableForms.size(); i++)
			{
				AppFormVo newForm = availableForms.get(i).getForm();
				form.qmbNavStartForm().newRow(newForm, newForm.isAlias() ? newForm.getAliasName() : newForm.getName());
			}
		}
		form.qmbNavStartForm().showOpened();

	}

	@Override
	protected void onQmbNavStartFormValueChanged() throws PresentationLogicException
	{
		if (form.qmbNavStartForm().getValue() != null)
		{
			form.getLocalContext().getSelectedNav().setStartForm(form.qmbNavStartForm().getValue());
			populateScreenFromData(form.getLocalContext().getSelectedNav());
		}
		else
		{
			form.qmbNavStartForm().clear();
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		AppNavFormVo appform;
		switch (menuItemID)
		{
			case GenForm.ContextMenus.NavAdmin.ChangePicture:
				form.treNav().collapseAll();
				break;
			case GenForm.ContextMenus.NavAdmin.EditText:
				editNode();

				break;
			case GenForm.ContextMenus.NavAdmin.AddRootGroup:
				addNewRootGroup();
				break;
			case GenForm.ContextMenus.NavAdmin.AddSecGroup:
				addNewSecondGroup();
				break;
			case GenForm.ContextMenus.NavAdmin.Remove:

				removeSelectedNode();

				break;
			case GenForm.ContextMenus.NavAdmin.SetSearchForm:
				appform = (AppNavFormVo) form.treNav().getValue();
				setNavSearchForm(appform);
				break;
			case GenForm.ContextMenus.NavAdmin.SetStartForm:
				appform = (AppNavFormVo) form.treNav().getValue();
				setNavStartForm(appform);
				break;

			case GenForm.ContextMenus.NavAdmin.SetReadOnly:
				setReadOnly();
				break;
			case GenForm.ContextMenus.NavAdmin.SetReadWrite:
				setReadWrite();
				break;
			case GenForm.ContextMenus.NavAdmin.InaccessibleForRip:
				setInaccessibleForRIP();
				break;
			case GenForm.ContextMenus.NavAdmin.InaccessibleForEpisEnd:
				setInaccessibleForEpisEnd();
				break;
			case GenForm.ContextMenus.NavAdmin.ReadOnlyForRip:
				setReadOnlyForRIP();
				break;
			case GenForm.ContextMenus.NavAdmin.ReadWriteForRip:
				/*
				 * This is only used when operating on group menus. For leaf
				 * items the ReadOnlyForRip menu options is reused
				 */

				setReadWriteForRIP();
				break;
			case GenForm.ContextMenus.NavAdmin.ReadOnlyForEpisEnd:
				setReadOnlyForEpisEnd();

				break;
			case GenForm.ContextMenus.NavAdmin.ReadWriteforEpisEnd:
				/*
				 * This is only used when operating on group menus. For leaf
				 * items the ReadOnlyForRip menu options is reused
				 */

				setReadWriteForEpisEnd();
				break;
			case GenForm.ContextMenus.GenericGrid.Add:
				newInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateInstance();
				break;
			case GenForm.ContextMenus.GenericGrid.Replace:
				AppNavigationVo appNav = getClone(domain.getNavigation(form.grdList().getSelectedRow().getValue()));
				form.getLocalContext().setSelectedNav(appNav);
				populateScreenFromData(form.getLocalContext().getSelectedNav());
				updateInstance();
				break;

		}
		updateControlsState();
	}

	private void editNode()
	{
		INavigationNode currNode = (INavigationNode) form.treNav().getSelectedNode().getValue();
		if (NavigationNodeType.FORM.equals(currNode.getTypeNode()))
		{
			form.treNav().beginEditSelectedNode();
		}
		else
		{
			form.getGlobalContext().Admin.setNavigationEditedGroup(currNode);
			engine.open(form.getForms().Admin.NavigationImageSelectDialog);
		}
	}

	private void setReadWriteForEpisEnd()
	{

		INavigationNode val = (INavigationNode) form.treNav().getValue();
		AppNavAccessRightsVo rights = new AppNavAccessRightsVo();
		rights.setAccessForEPISE(FormReadWrite.WRITE);
		val.setAccessRightsNode(rights);
		populateTree(form.getLocalContext().getSelectedNav());

	}

	private void setReadOnlyForEpisEnd()
	{
		INavigationNode val = (INavigationNode) form.treNav().getValue();
		AppNavAccessRightsVo rights = new AppNavAccessRightsVo();
		if (val.getAccessRightsNode() == null)
			rights.setAccessForEPISE(FormReadWrite.READ);
		else if (val.getAccessRightsNode().getAccessForEPISE().equals(FormReadWrite.READ))
			rights.setAccessForEPISE(FormReadWrite.WRITE);
		else
			rights.setAccessForEPISE(FormReadWrite.READ);
		val.setAccessRightsNode(rights);
		populateTree(form.getLocalContext().getSelectedNav());

	}

	/**
	 * 
	 */
	private void setReadWriteForRIP()
	{
		INavigationNode val = (INavigationNode) form.treNav().getValue();
		AppNavAccessRightsVo rights = new AppNavAccessRightsVo();
		rights.setAccessForRIP(FormReadWrite.WRITE);
		val.setAccessRightsNode(rights);
		populateTree(form.getLocalContext().getSelectedNav());
	}

	private void setReadOnlyForRIP()
	{
		INavigationNode val = (INavigationNode) form.treNav().getValue();
		AppNavAccessRightsVo rights = new AppNavAccessRightsVo();
		if (val.getAccessRightsNode() == null)
			rights.setAccessForRIP(FormReadWrite.READ);
		else if (val.getAccessRightsNode().getAccessForRIP().equals(FormReadWrite.READ))
			rights.setAccessForRIP(FormReadWrite.WRITE);
		else
			rights.setAccessForRIP(FormReadWrite.READ);
		val.setAccessRightsNode(rights);
		populateTree(form.getLocalContext().getSelectedNav());

	}

	private void setInaccessibleForEpisEnd()
	{
		AppNavFormVo navForm = (AppNavFormVo) form.treNav().getValue();
		if (navForm.getFormAccessForEpisEnd().equals(FormAccess.NO_ACCESS))
			navForm.setAccessForEpisEnd(FormReadWrite.WRITE);
		else
			navForm.setAccessForEpisEnd(FormReadWrite.DENIED);
		populateScreenFromData(form.getLocalContext().getSelectedNav());
	}

	private void setInaccessibleForRIP()
	{
		AppNavFormVo navForm = (AppNavFormVo) form.treNav().getValue();
		if (navForm.getFormAccessForRip().equals(FormAccess.NO_ACCESS))
			navForm.setAccessForRip(FormReadWrite.WRITE);
		else
			navForm.setAccessForRip(FormReadWrite.DENIED);
		populateScreenFromData(form.getLocalContext().getSelectedNav());
	}

	private void setReadWrite()
	{
		/*
		 * This is only used when operating on group menus. For leaf items the
		 * SetReadOnly menu options is reused
		 */
		INavigationNode val = (INavigationNode) form.treNav().getValue();
		AppNavAccessRightsVo rights = new AppNavAccessRightsVo();
		rights.setReadOnly(false);
		val.setAccessRightsNode(rights);
		populateTree(form.getLocalContext().getSelectedNav());

	}

	private void setReadOnly()
	{

		INavigationNode val = (INavigationNode) form.treNav().getValue();
		AppNavAccessRightsVo rights = new AppNavAccessRightsVo();
		rights.setReadOnly(true);
		val.setAccessRightsNode(rights);
		populateTree(form.getLocalContext().getSelectedNav());

	}

	private void addNewRootGroup()
	{
		String rootText = "New Top Group " + (form.treNav().getNodes().size() + 1);
		form.chkShowImages().setValue(Boolean.TRUE);
		AppNavRootGroupVo rootGrp = new AppNavRootGroupVo();

		rootGrp.setGroupName(rootText);
		rootGrp.setGroups(new AppNavSecondGroupVoCollection());
		rootGrp.setForms(new AppNavFormVoCollection());

		form.getGlobalContext().Admin.setNavigationEditedGroup(rootGrp);

		engine.open(form.getForms().Admin.NavigationImageSelectDialog);

	}

	private void addNewSecondGroup()
	{

		TreeNode rootNode = form.treNav().getSelectedNode();
		form.chkShowImages().setValue(Boolean.TRUE);
		String secText = "New Second Group " + String.valueOf(rootNode.getNodes().size() + 1);
		AppNavSecondGroupVo secGrp = new AppNavSecondGroupVo();
		secGrp.setTextNode(secText);
		secGrp.setForms(new AppNavFormVoCollection());
		secGrp.setPosIndex(new Integer(form.treNav().getSelectedNode().getNodes().size()));
		form.getGlobalContext().Admin.setNavigationEditedGroup(secGrp);
		engine.open(form.getForms().Admin.NavigationImageSelectDialog);

	}

	private void removeSelectedNode()
	{
		AppNavRootGroupVo rootGrp;
		TreeNode rootNode = null;
		Object val = form.treNav().getValue();
		form.getLocalContext().setSelectedTreeValue(null);
		if (val instanceof AppNavRootGroupVo)
		{
			form.getLocalContext().getSelectedNav().getRootGroups().remove((AppNavRootGroupVo) val);
		}
		else if (val instanceof AppNavSecondGroupVo)
		{
			rootNode = form.treNav().getSelectedNode().getParent();
			rootGrp = (AppNavRootGroupVo) rootNode.getValue();

			rootGrp.getGroups().remove((AppNavSecondGroupVo) val);
			form.getLocalContext().setSelectedTreeValue(rootNode.getValue());
		}
		else if (val instanceof AppNavFormVo)
		{
			if (!form.getLocalContext().getAllFormsIsNotNull())
			{
				form.getLocalContext().setAllForms(getNavigableForms());
			}
			form.getLocalContext().getAllForms().add(((AppNavFormVo) val).getAppForm());
			rootNode = form.treNav().getSelectedNode().getParent();
			form.getLocalContext().setSelectedTreeValue(rootNode.getValue());
			Object parentVal = rootNode.getValue();
			if (parentVal instanceof AppNavRootGroupVo)
			{
				((AppNavRootGroupVo) parentVal).getForms().remove((AppNavFormVo) val);
			}
			else if (parentVal instanceof AppNavSecondGroupVo)
			{
				((AppNavSecondGroupVo) parentVal).getForms().remove((AppNavFormVo) val);
			}
		}
		form.treNav().getSelectedNode().setParent(null);
		if (rootNode != null)
			setPosIndexes(rootNode);
		populateTree(form.getLocalContext().getSelectedNav());
		verifyQmbSearch();
		verifyQmbStart();

	}

	private void verifyQmbStart()
	{
		AppFormVo start = form.qmbNavStartForm().getValue();
		if (start == null)
			return;
		if (formIsInTree(start, form.treNav().getNodes()))
			return;
		form.getLocalContext().getSelectedNav().setStartForm(null);
		form.qmbNavStartForm().getValues().clear();
		form.qmbNavStartForm().clear();

	}

	private void verifyQmbSearch()
	{
		AppFormVo search = form.qmbNavSearchForm().getValue();
		if (search == null)
			return;
		if (formIsInTree(search, form.treNav().getNodes()))
			return;
		form.getLocalContext().getSelectedNav().setPatientSearchForm(null);
		form.qmbNavSearchForm().getValues().clear();
		form.qmbNavSearchForm().clear();

	}

	private boolean formIsInTree(AppFormVo form, TreeNodeCollection tree)
	{
		BooleanWraper result = new BooleanWraper(false);
		verifyFormInTree(form, tree, result);
		if (result.isValue())
		{
			return true;
		}
		return false;
	}

	private void verifyFormInTree(AppFormVo form, TreeNodeCollection tree, BooleanWraper result)
	{
		if (result.isValue() && tree == null)
			return;
		for (int i = 0; i < tree.size(); i++)
		{
			if (tree.get(i).getValue() instanceof AppNavFormVo)
			{
				if (((AppNavFormVo) tree.get(i).getValue()).getForm().getFormId() == form.getFormId())
				{
					result.setValue(true);
					return;
				}
			}
			else
			{
				verifyFormInTree(form, tree.get(i).getNodes(), result);
			}
		}

	}

	private boolean formNameIsInTree(String name, TreeNodeCollection tree)
	{
		BooleanWraper result = new BooleanWraper(false);
		verifyFormNameInTree(name, tree, result);
		if (result.isValue())
		{
			return true;
		}
		return false;
	}

	private void verifyFormNameInTree(String name, TreeNodeCollection tree, BooleanWraper result)
	{
		if (result.isValue() && tree == null)
			return;
		for (int i = 0; i < tree.size(); i++)
		{
			if (tree.get(i).getValue() instanceof AppNavFormVo)
			{
				if (((AppNavFormVo) tree.get(i).getValue()).getForm().getName().toLowerCase().equals(name.toLowerCase()))
				{
					result.setValue(true);
					return;
				}
			}
			else
			{
				verifyFormNameInTree(name, tree.get(i).getNodes(), result);
			}
		}

	}
	
	@Override
	protected void onTreNavTreeViewSelectionCleared() throws PresentationLogicException
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			updateControlsState();
		}

	}

	@Override
	protected void onChkActiveOnlyValueChanged() throws PresentationLogicException
	{
		open();

	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{

		clearScreen();
		populateNavigationsList(domain.listNavigations(form.chkActiveOnly().getValue()));

		if (form.getLocalContext().getSelectedNavIsNotNull())
		{

			form.grdList().setValue(form.getLocalContext().getSelectedNav());
			form.getLocalContext().setSelectedNav(null);

			if (form.grdList().getSelectedRow() != null)
			{
				form.getLocalContext().setSelectedNav(domain.getNavigation(form.grdList().getSelectedRow().getValue()));

				populateScreenFromData(form.getLocalContext().getSelectedNav());
			}
		}

		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void clearScreen()
	{
		form.qmbNavSearchForm().clear();
		form.qmbNavStartForm().clear();
		form.qmbNavSearchForm().getValues().clear();
		form.qmbNavStartForm().getValues().clear();
		form.qmbNavSearchForm().setValue(null);
		form.qmbNavStartForm().setValue(null);
		form.txtNavName().setValue("");
		form.cmbStyle().setValue(null);
		form.treNav().clear();
	}

	@Override
	public void initialize() throws FormOpenException
	{
		super.initialize();
		form.chkActiveOnly().setValue(true);
		form.chkShowImages().setValue(true);
		form.getContextMenus().getGenericGridAddItem().setText("Create new Navigation Tree");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit selected Navigation Tree");
		form.getContextMenus().getGenericGridReplaceItem().setText("Replicate selected Navigation Tree");

	}

	public void clearInstanceControls()
	{
		clearScreen();
		form.treNav().clear();
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		clearInstanceControls();
		form.getLocalContext().setAllForms(null);
		form.cmbStyle().setValue(NavigationStyle.IMAGE);
		form.getLocalContext().setSelectedNav(null);
		form.setMode(FormMode.EDIT);

	}

	private String[] validateUiRules()
	{
		if (form.cmbStyle().getValue() == null)
			return new String[] { "Style is mandatory" };
		return null;

	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{

		AppNavigationVo tempVo = populateDataFromScreen(form.getLocalContext().getSelectedNav());
		if (tempVo == null)
			return false;
		String[] err = tempVo.validate(validateUiRules());
		if (err != null && err.length > 0)
		{
			engine.showErrors(err);
			return false;
		}
		try
		{
			domain.save(tempVo);
		}

		catch (StaleObjectException e)
		{
			engine.showErrors(new String[] { ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue() });
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showErrors(new String[] { "A Navigation with the same name already exists." });
			return false;
		}

		catch (UnqViolationUncheckedException e)
		{
			engine.showErrors(new String[] { "A Navigation with the same name already exists." });
			return false;
		}
		form.getLocalContext().setSelectedAssesments(null);
		form.getLocalContext().setSelectedForms(null);
		form.getLocalContext().setSelectedReports(null);
		form.getLocalContext().setAllForms(null);
		form.lyrAdds().tabForms().grdNavForms().getRows().clear();
		form.lyrAdds().tabAssesments().grdNavAssesments().getRows().clear();
		form.lyrAdds().tabReports().grdNavReports().getRows().clear();
		clearSearchFields();
		return true;
	}

	private String areItemsSelected()
	{
		String message = "You have ";
		String postMessage = " selected to add to the tree.\nSaving will clear your selection.\nDo you want to continue?";
		if (form.getLocalContext().getSelectedAssesmentsIsNotNull() && form.getLocalContext().getSelectedAssesments().size() > 0)
		{
			form.lyrAdds().showtabAssesments();
			return message + "assesments" + postMessage;
		}
		if (form.getLocalContext().getSelectedFormsIsNotNull() && form.getLocalContext().getSelectedForms().size() > 0)
		{
			form.lyrAdds().showtabForms();
			return message + "forms" + postMessage;
		}
		if (form.getLocalContext().getSelectedReportsIsNotNull() && form.getLocalContext().getSelectedReports().size() > 0)
		{
			form.lyrAdds().showtabReports();
			return message + "reports" + postMessage;
		}
		return null;

	}

	private void clearSearchFields()
	{
		form.lyrAdds().tabAssesments().txtSearchAssesments().setValue(null);
		form.lyrAdds().tabForms().txtForms().setValue(null);
		form.lyrAdds().tabReports().txtReports().setValue(null);
	}

	public void updateControlsState()
	{
		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		form.treNav().setAllowDragDrop(!viewMode);
		// WorkAround 1
		TreeNode node = form.treNav().getNodes().add(null, "asa");
		form.treNav().getNodes().remove(node);
		// end WorkAround
		
		if (viewMode)
		{
			form.btnUpdate().setVisible(form.getLocalContext().getSelectedNavIsNotNull());
			form.btnUpdate().setEnabled(true);
			
			//WDEV-14561
			form.lyrAdds().tabAssesments().btnAddAssesments().setEnabled(false);
			form.lyrAdds().tabForms().btnSearchForms().setEnabled(false);
			form.lyrAdds().tabForms().txtForms().setEnabled(false);
			form.lyrAdds().tabForms().grdNavForms().setReadOnly(true);
			
		
			form.lyrAdds().tabAssesments().btnSearchAssesments().setEnabled(false);
			form.lyrAdds().tabAssesments().txtSearchAssesments().setEnabled(false);
			form.lyrAdds().tabAssesments().grdNavAssesments().setReadOnly(true);
			
			form.lyrAdds().tabReports().btnSearchReports().setEnabled(false);
			form.lyrAdds().tabReports().txtReports().setEnabled(false);
			form.lyrAdds().tabReports().grdNavReports().setReadOnly(true);
			
			

		}
		else
		{
			form.lyrAdds().tabForms().btnAddForms().setEnabled(form.getLocalContext().getSelectedFormsIsNotNull() && form.getLocalContext().getSelectedForms().size() > 0);
			form.lyrAdds().tabAssesments().btnAddAssesments().setEnabled(form.getLocalContext().getSelectedAssesmentsIsNotNull() && form.getLocalContext().getSelectedAssesments().size() > 0);
			form.lyrAdds().tabForms().btnAddForms().setVisible(true);
			form.lyrAdds().tabAssesments().btnAddAssesments().setVisible(true);
			form.lyrAdds().tabReports().btnAddReports().setVisible(true);
			form.lyrAdds().tabReports().btnAddReports().setEnabled(form.getLocalContext().getSelectedReportsIsNotNull() && form.getLocalContext().getSelectedReports().size() > 0);
			
			
			//wdev-13287
			form.lyrAdds().tabForms().btnSearchForms().setEnabled(form.treNav().getSelectedNode() != null);
			form.lyrAdds().tabForms().txtForms().setEnabled(form.treNav().getSelectedNode() != null);
			form.lyrAdds().tabForms().grdNavForms().setReadOnly(!(form.treNav().getSelectedNode() != null));//WDEV-14561
			
		
			form.lyrAdds().tabAssesments().btnSearchAssesments().setEnabled(form.treNav().getSelectedNode() != null && ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue());
			form.lyrAdds().tabAssesments().txtSearchAssesments().setEnabled(form.treNav().getSelectedNode() != null && ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue());
			form.lyrAdds().tabAssesments().grdNavAssesments().setReadOnly(!(form.treNav().getSelectedNode() != null && ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue()));//WDEV-14561
			
			form.lyrAdds().tabReports().btnSearchReports().setEnabled(form.treNav().getSelectedNode() != null);
			form.lyrAdds().tabReports().txtReports().setEnabled(form.treNav().getSelectedNode() != null);
			form.lyrAdds().tabReports().grdNavReports().setReadOnly(!(form.treNav().getSelectedNode() != null));//WDEV-14561
			
			
			//----------

		}
		form.lyrAdds().tabAssesments().setEnabled(form.treNav().getSelectedNode() != null && ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue());
		form.lyrAdds().tabForms().setEnabled(form.treNav().getSelectedNode() != null);
		
		form.lyrAdds().tabReports().setEnabled(form.treNav().getSelectedNode() != null);
		setContextMenuItems(form.getMode());
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setAllForms(null);
	}

	private void populateNavigationsList(AppNavShortVoCollection navigations)
	{
		form.grdList().getRows().clear();
		if (navigations == null)
		{
			return;
		}
		for (int i = 0; i < navigations.size(); i++)
		{
			grdListRow nRow = form.grdList().getRows().newRow();
			nRow.setName(navigations.get(i).getNavigationName());
			nRow.setActive(navigations.get(i).getIsActive());
			nRow.setValue(navigations.get(i));
		}
	}

	protected void populateScreenFromData(AppNavigationVo value)
	{
		clearInstanceControls();
		super.populateScreenFromData(value);

		if (value == null)
			return;

		if (!value.getStyleIsNotNull())
		{
			form.cmbStyle().setValue(NavigationStyle.IMAGE);
		}
		if (value.getPatientSearchFormIsNotNull())
		{
			AppFormVo patientSearchForm = value.getPatientSearchForm();
			form.qmbNavSearchForm().newRow(patientSearchForm, patientSearchForm.isAlias() ? patientSearchForm.getAliasName() : patientSearchForm.getName());
			form.qmbNavSearchForm().setValue(patientSearchForm);
		}
		if (value.getStartFormIsNotNull())
		{
			AppFormVo startForm = value.getStartForm();
			form.qmbNavStartForm().newRow(startForm, startForm.isAlias() ? startForm.getAliasName() : startForm.getName());
			form.qmbNavStartForm().setValue(startForm);
		}

		populateTree(value);

	}

	private void populateTree(AppNavigationVo value)
	{

		form.treNav().clear();
		if (value == null)
			return;
		AppNavRootGroupVoCollection rootGroups = value.getRootGroups();
		if (rootGroups == null)
		{
			return;
		}
		for (int i = 0; i < rootGroups.size(); i++)
		{
			createTree(rootGroups.get(i), null);

		}
		form.treNav().collapseAll();
		form.treNav().setValue(form.getLocalContext().getSelectedTreeValue());
		if (form.treNav().getSelectedNode() != null)
			form.treNav().getSelectedNode().setExpanded(true);

	}

	@SuppressWarnings("unchecked")
	private ArrayList<IAppForm> getNavigableForms()
	{
		// get nav forms from registered forms rather than domain.list
		Collection<IAppForm> forms = null;
		try
		{
			forms = Configuration.loadConfiguration().getRegisteredForms().values();
		}
		catch (ClassCastException e)
		{
			e.printStackTrace();
		}
		catch (NullPointerException e)
		{}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		if (forms == null)
			return null;

		ArrayList<IAppForm> result = new ArrayList<IAppForm>();
		ArrayList<IAppForm> formsInNavigation = getFormsInNavigation();

		Iterator<IAppForm> iterator = forms.iterator();
		while (iterator.hasNext())
		{
			IAppForm next = iterator.next();
			if (next.canBeInNavigation() && !next.isComponent() && !next.isDialog() && !formsInNavigation.contains(next))
			{
				result.add(next);
			}
		}

		return result;

	}

	private ArrayList<IAppForm> getFormsInNavigation()
	{
		ArrayList<IAppForm> result = new ArrayList<IAppForm>();
		INavForm[] allForms = form.getLocalContext().getSelectedNavIsNotNull() ? form.getLocalContext().getSelectedNav().getAllForms() : null; //wdev-13287
		for (int i = 0; allForms != null && i < allForms.length; i++)	//wdev-13287
		{
			result.add(allForms[i].getAppForm());
		}
		return result;
	}

	private void populateGridReportsControls(ReportTemplateLiteVoCollection reportTemplateLiteVoCollection)
	{
		form.lyrAdds().tabReports().grdNavReports().getRows().clear();
		if (reportTemplateLiteVoCollection == null)
			return;

		for (int i = 0; i < reportTemplateLiteVoCollection.size(); i++)
		{
			grdNavReportsRow nReport = form.lyrAdds().tabReports().grdNavReports().getRows().newRow();
			nReport.setTypeIcon(form.getImages().Core.Report48);
			nReport.setName("<b>" + reportTemplateLiteVoCollection.get(i).getName() + "</b>" + "<br />" + reportTemplateLiteVoCollection.get(i).getDescription());
			nReport.setValue(reportTemplateLiteVoCollection.get(i));
			if (form.getLocalContext().getSelectedReportsIsNotNull() && form.getLocalContext().getSelectedReports().contains(reportTemplateLiteVoCollection.get(i)))
			{
				nReport.setBackColor(Color.Beige);
				nReport.setSelect(true);
			}
		}
	}

	private void searchandPopulateForms()
	{
		ArrayList<IAppForm> collectionForm = new ArrayList<IAppForm>();
		String fForm = form.lyrAdds().tabForms().txtForms().getValue();

		if (fForm == null)
		{
			fForm = "";
		}

		String filterForm = fForm.replaceAll("%", "");

		if (!form.getLocalContext().getAllFormsIsNotNull())
		{
			form.getLocalContext().setAllForms(getNavigableForms());
		} else {
			if (formNameIsInTree(filterForm, form.treNav().getNodes()))
			{
				engine.showMessage("This form is already added in the navigation.","Info", MessageButtons.OK);
			}
		}
		
		for (int i = 0; i < form.getLocalContext().getAllForms().size(); i++)
		{
			IAppForm appFormVo = form.getLocalContext().getAllForms().get(i);

			if (appFormVo == null)
				continue;

			if (appFormVo.isAlias())
			{
				if (appFormVo.getAliasName().equalsIgnoreCase(filterForm) || appFormVo.getAliasName().toUpperCase().contains(filterForm.toUpperCase()))
				{
					collectionForm.add(appFormVo);
				}
				continue;
			}

			if (appFormVo.getName().equalsIgnoreCase(filterForm) || appFormVo.getName().toUpperCase().contains(filterForm.toUpperCase()))
			{
				collectionForm.add(appFormVo);
			}
		}

		populateGridForms(collectionForm);

	}

	private void searchandPopulateAssesments()
	{	
		String filterForm = form.lyrAdds().tabAssesments().txtSearchAssesments().getValue();

		populateGridAssesments(domain.listUserAssesments(filterForm), domain.listGraphicalAssesments(filterForm));
	}

	private void searchPopulateReports()
	{
		form.lyrAdds().tabReports().grdNavReports().getRows().clear();

		String filterForm = form.lyrAdds().tabReports().txtReports().getValue();

		populateGridReportsControls(domain.listReports(filterForm));

	}

	private void populateGridForms(ArrayList<IAppForm> collectionForm)
	{
		form.lyrAdds().tabForms().grdNavForms().getRows().clear();
		if (collectionForm != null)
		{
			Collections.sort(collectionForm, new Comparator<IAppForm>()
			{

				public int compare(IAppForm arg0, IAppForm arg1)
				{
					return (arg0.isAlias() ? arg0.getAliasName() : arg0.getName()).compareTo((arg1.isAlias() ? arg1.getAliasName() : arg1.getName()));

				}
			});
			for (int i = 0; i < collectionForm.size(); i++)
			{

				grdNavFormsRow row = form.lyrAdds().tabForms().grdNavForms().getRows().newRow();
				IAppForm formVo = collectionForm.get(i);
				row.setName("<p><b>" + (formVo.isAlias() ? formVo.getAliasName() : formVo.getName()) + "</b></p>" + "<br />" + formVo.getDescription());
				if (formVo.getImage() != null)
				{
					row.setTypeIcon(formVo.getImage());
				}
				else
				{
					row.setTypeIcon(form.getImages().Admin.Form48);
				}

				row.setValue(formVo);
				if (form.getLocalContext().getSelectedFormsIsNotNull())
				{
					if (form.getLocalContext().getSelectedForms().contains(formVo))
					{
						row.setSelect(true);
						row.setBackColor(Color.Beige);
					}
				}

			}

		}

	}

	private void populateGridAssesments(UserAssessmentLiteVoCollection collectionUser, GraphicAssessmentShortVoCollection collectionGraphic)
	{
		form.lyrAdds().tabAssesments().grdNavAssesments().getRows().clear();
		if (collectionUser != null)
		{

			for (int i = 0; i < collectionUser.size(); i++)
			{
				grdNavAssesmentsRow row = form.lyrAdds().tabAssesments().grdNavAssesments().getRows().newRow();

				UserAssessmentLiteVo userVo = collectionUser.get(i);
				row.setName("<b>" + userVo.getName() + "</b>");
				row.setTypeIcon(form.getImages().Assessment.Assessment48);
				row.setValue(userVo);
				
				// WDEV-11716
				if (form.getLocalContext().getSelectedAssesmentsIsNotNull())
				{
					if (form.getLocalContext().getSelectedAssesments().contains(userVo))
					{
						row.setSelect(true);
						row.setBackColor(Color.Beige);
					}
				}
			}
		}
		if (collectionGraphic != null)
		{
			for (int i = 0; i < collectionGraphic.size(); i++)
			{

				grdNavAssesmentsRow row = form.lyrAdds().tabAssesments().grdNavAssesments().getRows().newRow();

				GraphicAssessmentShortVo grpgVo = collectionGraphic.get(i);
				row.setName(grpgVo.getName());
				row.setTypeIcon(form.getImages().Assessment.GraphicAssessment48);
				row.setValue(grpgVo);
				
				// WDEV-11716
				if (form.getLocalContext().getSelectedAssesmentsIsNotNull())
				{
					if (form.getLocalContext().getSelectedAssesments().contains(grpgVo))
					{
						row.setSelect(true);
						row.setBackColor(Color.Beige);
					}
				}

			}
		}

	}

	protected void addFormsToTree() throws PresentationLogicException
	{
		TreeNode toNode = getNodeToAddTo();
		if (toNode == null)
		{
			engine.showMessage("Please select a node to add to in the navigation tree", "No Valid Tree Node Selected", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}
		AppNavFormVoCollection coll = ((INavigationNode) toNode.getValue()).getFormChildsNode();

		if (coll == null)
			coll = new AppNavFormVoCollection();
		ArrayList<IAppForm> formsToAdd = form.getLocalContext().getSelectedForms();
		if (formsToAdd == null || formsToAdd.size() == 0)
		{
			throw new PresentationLogicException("Some forms should be selected");
		}
		for (int i = 0; i < formsToAdd.size(); i++)
		{
			IAppForm iAppForm = formsToAdd.get(i);
			int pos = form.getLocalContext().getAllForms().indexOf(iAppForm);
			if (pos > -1)
			{
				form.getLocalContext().getAllForms().remove(pos);
			}

			AppFormVo currForm = null;

			// If what we have is instanceof AppFormVo don't do another get
			if (iAppForm instanceof AppFormVo)
			{
				currForm = (AppFormVo) iAppForm;
			}
			else
			{
				currForm = domain.getAppForm(iAppForm.getFormId());
			}

			AppNavFormVo currNavForm = new AppNavFormVo();
			currNavForm.setForm(currForm);
			currNavForm.setAccessForEpisEnd(FormReadWrite.WRITE);
			currNavForm.setAccessForRip(FormReadWrite.WRITE);
			currNavForm.setIsReadOnly(false);
			currNavForm.setNodeText(currForm.isAlias() ? currForm.getAliasName() : currForm.getName());
			currNavForm.setPosIndex(toNode.getNodes().size());
			TreeNode node = toNode.getNodes().add(currNavForm, currNavForm.getNodeText(), FORM_NODE, new int[] { SECOND_NODE, ROOT_NODE }, true);
			node.setCollapsedImage(form.chkShowImages().getValue() ? getImageForForm(currForm) : null);
			coll.add(currNavForm);

			

		}

		for (int i = form.lyrAdds().tabForms().grdNavForms().getRows().size() - 1; i >= 0; i--)
		{
			if (form.lyrAdds().tabForms().grdNavForms().getRows().get(i).getSelect())
			{
				form.lyrAdds().tabForms().grdNavForms().getRows().remove(i);
			}
		}

		((INavigationNode) toNode.getValue()).setFormChildsNode(coll);

		setPosIndexes(toNode);
		form.getLocalContext().setSelectedForms(null);
		form.treNav().getSelectedNode().setExpanded(true);

	}

	private Image getImageForForm(AppFormVo formVo)
	{
		return formVo.getImageIsNotNull() ? formVo.getImage() : form.getImages().Admin.Form48;
	}

	protected void addAssesmentsToTree()
	{
		TreeNode toNode = getNodeToAddTo();
		if (toNode == null)
		{
			engine.showMessage("Please select a node to add to in the navigation tree", "No Valid Tree Node Selected", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}
		AppNavFormVoCollection colle = ((INavigationNode) toNode.getValue()).getFormChildsNode();

		if (colle == null)
			colle = new AppNavFormVoCollection();

		ArrayList<ValueObjectRef> selAssesments = form.getLocalContext().getSelectedAssesments();

		if (selAssesments == null)
		{
			throw new CodingRuntimeException("Some assesments should be selected");
		}
		AppFormVo assesmentForm = domain.getAppForm(InitConfig.getAssessmentContainerFormId());
		if (assesmentForm == null)
		{
			engine.showErrors(new String[] { "No Assesment Viewer form configured" });
			return;
		}
		for (int i = 0; i < selAssesments.size(); i++)
		{

			AppNavFormVo newForm = createFormForAssessment(selAssesments.get(i), assesmentForm);
			TreeNode node = toNode.getNodes().add(newForm, newForm.getNodeText(), FORM_NODE, new int[] { SECOND_NODE, ROOT_NODE }, true);
			Image nodeImg = newForm.getImageNode();
			node.setCollapsedImage(form.chkShowImages().getValue() ? nodeImg : null);
			colle.add(newForm);

			grdNavAssesmentsRow rowByValue = form.lyrAdds().tabAssesments().grdNavAssesments().getRowByValue(selAssesments.get(i));
			rowByValue.setSelect(false);
			rowByValue.setBackColor(Color.Default);
		}

		((INavigationNode) toNode.getValue()).setFormChildsNode(colle);

		setPosIndexes(toNode);
		form.getLocalContext().setSelectedAssesments(null);
		form.treNav().getSelectedNode().setExpanded(true);

	}

	private AppNavFormVo createFormForAssessment(ValueObjectRef refVo, AppFormVo assesmentForm)
	{
		AppNavFormVo newForm = new AppNavFormVo();
		newForm.setForm(assesmentForm);
		GenericIdentifierVoCollection coll = new GenericIdentifierVoCollection();

		GenericIdentifierVo genVo = new GenericIdentifierVo();
		genVo.setInstanceId(refVo.getBoId());
		genVo.setClassName(refVo.getClass().getName());
		coll.add(genVo);
		newForm.setLinkedClasses(coll);

		newForm.setAccessForEpisEnd(FormReadWrite.WRITE);
		newForm.setAccessForRip(FormReadWrite.WRITE);
		newForm.setIsReadOnly(false);
		newForm.setNodeText((refVo instanceof GraphicAssessmentShortVo) ? ((GraphicAssessmentShortVo) refVo).getName() : (refVo instanceof UserAssessmentLiteVo) ? ((UserAssessmentLiteVo) refVo).getName() : null);
		return newForm;
	}

	protected void addReportsToTree() throws PresentationLogicException
	{
		TreeNode toNode = getNodeToAddTo();
		if (toNode == null)
		{
			engine.showMessage("Please select a node to add to in the navigation tree", "No Valid Tree Node Selected", MessageButtons.OK, MessageIcon.WARNING);
			return;
		}

		ReportTemplateLiteVoCollection reports = form.getLocalContext().getSelectedReports();
		if (reports == null)
		{
			throw new PresentationLogicException("Some reports should be selected");
		}

		AppNavFormVoCollection colle = ((INavigationNode) toNode.getValue()).getFormChildsNode();

		if (colle == null)
			colle = new AppNavFormVoCollection();
		AppFormVo reportForm = domain.getAppForm(InitConfig.getReportViewerFormId());
		if (reportForm == null)
		{
			engine.showErrors(new String[] { "No Report Viewer form configured" });
			return;
		}
		for (int i = 0; i < reports.size(); i++)
		{
			ReportTemplateLiteVo rep = reports.get(i);

			if (rep == null)
			{
				continue;
			}
			AppNavFormVo newForm = createFormForReport(rep, reportForm);

			colle.add(newForm);

			TreeNode node = toNode.getNodes().add(newForm, newForm.getNodeText(), FORM_NODE, new int[] { SECOND_NODE, ROOT_NODE }, true);
			Image nodeImg = newForm.getImageNode();
			node.setCollapsedImage(form.chkShowImages().getValue() ? nodeImg : null);

			grdNavReportsRow selRow = form.lyrAdds().tabReports().grdNavReports().getRowByValue(rep);
			selRow.setBackColor(Color.Default);
			selRow.setSelect(false);
		}

		((INavigationNode) toNode.getValue()).setFormChildsNode(colle);

		setPosIndexes(toNode);

		form.getLocalContext().setSelectedReports(null);
		form.treNav().getSelectedNode().setExpanded(true);

	}

	private AppNavFormVo createFormForReport(ReportTemplateLiteVo rep, AppFormVo reportForm)
	{

		AppNavFormVo newForm = new AppNavFormVo();
		newForm.setForm(reportForm);
		newForm.setLinkedClasses(null);
		GenericIdentifierVoCollection coll = new GenericIdentifierVoCollection();
		GenericIdentifierVo genVo = new GenericIdentifierVo();
		genVo.setInstanceId(rep.getBoId());
		genVo.setClassName(rep.getClass().getName());
		coll.add(genVo);
		newForm.setLinkedClasses(coll);
		newForm.setNodeText(rep.getName());

		newForm.setAccessForEpisEnd(FormReadWrite.WRITE);
		newForm.setAccessForRip(FormReadWrite.WRITE);
		newForm.setIsReadOnly(false);
		return newForm;
	}

	protected TreeNode getNodeToAddTo()
	{
		TreeNode toNode = form.treNav().getSelectedNode();
		if (toNode == null || toNode.getValue() == null)
			return null;
		if (toNode.getValue() instanceof AppNavRootGroupVo)
			return toNode;
		if (toNode.getValue() instanceof AppNavSecondGroupVo)
			return toNode;
		if (toNode.getValue() instanceof AppNavFormVo)
			return toNode.getParent();
		return null;
	}

	private AppNavFormVoCollection getAllFormsWithName(String name)
	{
		if (name == null || name.length() == 0)
			return null;
		name = name.replace("%", "");
		name = name.toLowerCase().trim();
		AppNavFormVoCollection result = new AppNavFormVoCollection();
		int ReportViewer = InitConfig.getReportViewerFormId();
		int AssesmentViewer = InitConfig.getAssessmentContainerFormId();
		for (int i = 0; i < form.treNav().getNodes().size(); i++)
		{
			for (int j = 0; j < form.treNav().getNodes().get(i).getNodes().size(); j++)
			{
				if (form.treNav().getNodes().get(i).getNodes().get(j).getValue() instanceof AppNavFormVo)
				{
					AppNavFormVo current = (AppNavFormVo) form.treNav().getNodes().get(i).getNodes().get(j).getValue();
					if (current.getForm().getFormId() != ReportViewer && current.getForm().getFormId() != AssesmentViewer && !current.getForm().isSystem())
					{
						String formName = current.getForm().isAlias() ? current.getForm().getAliasName() : current.getForm().getName();
						if (formName.trim().toLowerCase().contains(name))
							result.add(current);
					}
				}
				else
				{
					for (int k = 0; k < form.treNav().getNodes().get(i).getNodes().get(j).getNodes().size(); k++)
					{
						if (form.treNav().getNodes().get(i).getNodes().get(j).getNodes().get(k).getValue() instanceof AppNavFormVo)
						{
							AppNavFormVo current = (AppNavFormVo) form.treNav().getNodes().get(i).getNodes().get(j).getNodes().get(k).getValue();
							if (current.getForm().getFormId() != ReportViewer && current.getForm().getFormId() != AssesmentViewer && !current.getForm().isSystem())
							{
								String formName = current.getForm().isAlias() ? current.getForm().getAliasName() : current.getForm().getName();
								if (formName.trim().toLowerCase().contains(name))
									result.add(current);
							}
						}
					}
				}
			}
		}
		return result;
	}

	private AppNavFormVo getClone(AppNavFormVo appForm)
	{
		if (appForm == null)
			return null;
		AppNavFormVo result = (AppNavFormVo) appForm.clone();
		result.clearIDAndVersion();
		return result;
	}

	private AppNavSecondGroupVo getClone(AppNavSecondGroupVo appGroupVo)
	{
		if (appGroupVo == null)
			return null;
		AppNavSecondGroupVo result = (AppNavSecondGroupVo) appGroupVo.clone();
		result.clearIDAndVersion();
		AppNavFormVoCollection forms = appGroupVo.getForms();
		if (forms != null)
		{
			result.setForms(new AppNavFormVoCollection());
			for (int i = 0; i < forms.size(); i++)
			{
				result.getForms().add(getClone(forms.get(i)));
			}
		}
		return result;
	}

	private AppNavRootGroupVo getClone(AppNavRootGroupVo appNavRootGroupVo)
	{
		if (appNavRootGroupVo == null)
			return null;
		AppNavRootGroupVo result = (AppNavRootGroupVo) appNavRootGroupVo.clone();
		result.clearIDAndVersion();
		AppNavSecondGroupVoCollection secondGroupVoCollection = appNavRootGroupVo.getGroups();
		if (secondGroupVoCollection != null)
		{
			result.setGroups(new AppNavSecondGroupVoCollection());
			for (int i = 0; i < secondGroupVoCollection.size(); i++)
			{
				result.getGroups().add(getClone(secondGroupVoCollection.get(i)));
			}
		}
		AppNavFormVoCollection appNavFormVoCollection = appNavRootGroupVo.getForms();
		if (appNavFormVoCollection != null)
		{
			result.setForms(new AppNavFormVoCollection());
			for (int i = 0; i < appNavFormVoCollection.size(); i++)
			{
				result.getForms().add(getClone(appNavFormVoCollection.get(i)));
			}
		}

		return result;
	}

	private AppNavigationVo getClone(AppNavigationVo appNav)
	{
		if (appNav == null)
			return null;
		AppNavigationVo result = (AppNavigationVo) appNav.clone();
		result.clearIDAndVersion();
		result.setNavigationName("Copy of " + result.getNavigationName());
		result.setRootGroups(new AppNavRootGroupVoCollection());
		if (appNav.getRootGroupsIsNotNull())
		{
			for (int i = 0; i < appNav.getRootGroups().size(); i++)
			{
				result.getRootGroups().add(getClone(appNav.getRootGroups().get(i)));
			}
		}
		return result;
	}

	private void setPosIndexes(TreeNode rootNode)
	{
		INavigationNode val = (INavigationNode) rootNode.getValue();

		if (NavigationNodeType.FORM.equals(val.getTypeNode()))
		{
			return;
		}

		for (int i = 0; i < rootNode.getNodes().size(); i++)
		{

			val = (INavigationNode) rootNode.getNodes().get(i).getValue();
			val.setIndexPositionNode(new Integer(i));

		}
	}

	private void setNavSearchForm(AppNavFormVo navform)
	{
		AppNavigationVo nav = populateDataFromScreen(form.getLocalContext().getSelectedNav());
		if (nav == null)
			return;
		nav.setPatientSearchForm(navform.getForm());
		populateScreenFromData(nav);
	}

	private void setNavStartForm(AppNavFormVo navform)
	{
		AppNavigationVo nav = populateDataFromScreen(form.getLocalContext().getSelectedNav());
		if (nav == null)
			return;
		nav.setStartForm(navform.getForm());
		populateScreenFromData(nav);
	}

	private void setContextMenuItems(FormMode mode)
	{
		form.getContextMenus().getGenericGridAddItem().setVisible(mode.equals(FormMode.VIEW));
		form.getContextMenus().getGenericGridUpdateItem().setVisible(mode.equals(FormMode.VIEW) && form.grdList().getSelectedRow() != null);
		form.getContextMenus().getGenericGridReplaceItem().setVisible(mode.equals(FormMode.VIEW) && form.grdList().getSelectedRow() != null);
		form.getContextMenus().getNavAdminInaccessibleForRipItem().setVisible(false);
		form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setVisible(false);
		form.getContextMenus().getNavAdminReadOnlyForRipItem().setVisible(false);
		form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setVisible(false);
		form.getContextMenus().getNavAdminAddRootGroupItem().setVisible(false);
		form.getContextMenus().getNavAdminAddSecGroupItem().setVisible(false);
		form.getContextMenus().getNavAdminRemoveItem().setVisible(false);
		form.getContextMenus().getNavAdminSetSearchFormItem().setVisible(false);
		form.getContextMenus().getNavAdminSetStartFormItem().setVisible(false);
		form.getContextMenus().getNavAdminEditTextItem().setVisible(false);
		form.getContextMenus().getNavAdminSetReadOnlyItem().setVisible(false);
		form.getContextMenus().getNavAdminAddAssessmentItem().setVisible(false);
		form.getContextMenus().getNavAdminSetReadWriteItem().setVisible(false);
		form.getContextMenus().getNavAdminReadWriteForRipItem().setVisible(false);
		form.getContextMenus().getNavAdminReadWriteforEpisEndItem().setVisible(false);
		form.getContextMenus().getNavAdminAddReportItem().setVisible(false);
		form.getContextMenus().getNavAdminChangePictureItem().setVisible(form.treNav().getNodes() != null && form.treNav().getNodes().size() > 0);
		if (mode.equals(FormMode.EDIT))
		{
			form.getContextMenus().getNavAdminAddRootGroupItem().setVisible(true);
			Object val = null;
			if (form.treNav().getSelectedNode() != null)
			{
				val = form.treNav().getSelectedNode().getValue();
				if (!(val instanceof INavigationNode))
					return;
				INavigationNode node = (INavigationNode) val;
				form.getContextMenus().getNavAdminEditTextItem().setVisible(true);
				if (NavigationNodeType.FORM.equals(node.getTypeNode()))
				{
					form.getContextMenus().getNavAdminEditTextItem().setText("Edit Node Text");
				}
				else
				{
					form.getContextMenus().getNavAdminEditTextItem().setText("Edit Node Text & Picture");
				}
				val = form.treNav().getSelectedNode().getValue();
			}
			if (val instanceof AppNavFormVo)
			{
				AppNavFormVo vo = (AppNavFormVo) val;
				form.getContextMenus().getNavAdminInaccessibleForRipItem().setVisible(true);
				form.getContextMenus().getNavAdminInaccessibleForRipItem().setText("Set Inaccessible for Patient RIP");
				form.getContextMenus().getNavAdminInaccessibleForRipItem().setIcon(form.getImages().Core.Alert_RedTriangle1);

				if (ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue())
				{
					form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setVisible(true);
					form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setText("Set Inaccessible for Episode Ended");
					form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setIcon(form.getImages().Core.Alert_RedTriangle2);
				}

				form.getContextMenus().getNavAdminReadOnlyForRipItem().setVisible(true);
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setText("Set Read Only for Patient RIP");
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setIcon(form.getImages().Core.Alert_YellowTriangle1);

				if (ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue())
				{
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setVisible(true);
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setText("Set Read Only for Episode Ended");
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setIcon(form.getImages().Core.Alert_YellowTriangle2);
				}

				if (vo.getFormAccessForRip().equals(FormAccess.NO_ACCESS))
				{
					form.getContextMenus().getNavAdminInaccessibleForRipItem().setText("Set Read Write for Patient RIP");
					form.getContextMenus().getNavAdminInaccessibleForRipItem().setIcon(form.getImages().Core.Edit);
				}
				else if (vo.getFormAccessForRip().equals(FormAccess.READ_ONLY))
				{
					form.getContextMenus().getNavAdminReadOnlyForRipItem().setText("Set Read Write for Patient RIP");
					form.getContextMenus().getNavAdminReadOnlyForRipItem().setIcon(form.getImages().Core.Edit);
				}

				if (vo.getFormAccessForEpisEnd().equals(FormAccess.NO_ACCESS))
				{
					form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setText("Set Read Write for Episode Ended");
					form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setIcon(form.getImages().Core.Edit);
				}
				else if (vo.getFormAccessForEpisEnd().equals(FormAccess.READ_ONLY))
				{
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setText("Set Read Write for Episode Ended");
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setIcon(form.getImages().Core.Edit);
				}

				form.getContextMenus().getNavAdminRemoveItem().setVisible(true);
				form.getContextMenus().getNavAdminRemoveItem().setText("Remove this Form from the Navigation");

				// http://jira/browse/WDEV-2933
				if (vo.getForm().getIsSystem() != null && vo.getForm().getIsSystem().booleanValue() == false)
				{
					form.getContextMenus().getNavAdminSetSearchFormItem().setVisible(true);
					form.getContextMenus().getNavAdminSetStartFormItem().setVisible(true);
				}

				boolean readOnly = vo.isReadOnly();

				form.getContextMenus().getNavAdminSetReadOnlyItem().setVisible(!readOnly);
				form.getContextMenus().getNavAdminSetReadWriteItem().setVisible(readOnly);

			}
			else if (val instanceof AppNavSecondGroupVo)
			{
				form.getContextMenus().getNavAdminChangePictureItem().setVisible(false);
				form.getContextMenus().getNavAdminRemoveItem().setVisible(true);
				form.getContextMenus().getNavAdminRemoveItem().setText("Remove this Group from the Navigation");
				form.getContextMenus().getNavAdminSetReadOnlyItem().setIcon(form.getImages().Core.ViewDisabled);
				form.getContextMenus().getNavAdminSetReadOnlyItem().setText("Set as Read Only");
				form.getContextMenus().getNavAdminSetReadOnlyItem().setVisible(true);
				form.getContextMenus().getNavAdminSetReadWriteItem().setVisible(true);
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setVisible(true);
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setText("Set Read Only for Patient RIP");
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setIcon(form.getImages().Core.Alert_YellowTriangle1);
				form.getContextMenus().getNavAdminReadWriteForRipItem().setVisible(true);
				if (ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue())
				{
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setVisible(true);
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setText("Set Read Only for Episode Ended");
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setIcon(form.getImages().Core.Alert_YellowTriangle2);
					form.getContextMenus().getNavAdminReadWriteforEpisEndItem().setVisible(true);
				}
			}
			else if (val instanceof AppNavRootGroupVo)
			{
				form.getContextMenus().getNavAdminChangePictureItem().setVisible(false);
				form.getContextMenus().getNavAdminRemoveItem().setVisible(true);
				form.getContextMenus().getNavAdminRemoveItem().setText("Remove this Group from the Navigation");
				form.getContextMenus().getNavAdminAddSecGroupItem().setVisible(true);
				form.getContextMenus().getNavAdminSetReadOnlyItem().setIcon(form.getImages().Core.ViewDisabled);
				form.getContextMenus().getNavAdminSetReadOnlyItem().setText("Set as Read Only");
				form.getContextMenus().getNavAdminSetReadOnlyItem().setVisible(true);
				form.getContextMenus().getNavAdminSetReadWriteItem().setVisible(true);
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setVisible(true);
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setText("Set Read Only for Patient RIP");
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setIcon(form.getImages().Core.Alert_YellowTriangle1);
				form.getContextMenus().getNavAdminReadWriteForRipItem().setVisible(true);
				if (ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue())
				{
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setVisible(true);
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setText("Set Read Only for Episode Ended");
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setIcon(form.getImages().Core.Alert_YellowTriangle2);
					form.getContextMenus().getNavAdminReadWriteforEpisEndItem().setVisible(true);
				}

			}
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().Admin.NavigationImageSelectDialog.equals(formName) && DialogResult.OK.equals(result))
		{

			INavigationNode node = form.getGlobalContext().Admin.getNavigationEditedGroup();

			node.setTextNode(form.getGlobalContext().Admin.getNavigationEditedGroup().getTextNode());
			node.setImageNode(form.getGlobalContext().Admin.getNavigationEditedGroup().getImageNode());
			TreeNode editedNode = form.treNav().getSelectedNode();
			if (editedNode == null || !node.equals(editedNode.getValue()))
			{
				createNewTreeNode(node, editedNode);

			}
			else
			{
				editedNode.setCollapsedImage(node.getImageNode());
				editedNode.setText(node.getTextNode());
			}
			// if (editedNode == null)
			// return;

			Object savedValue = editedNode == null ? null : editedNode.getValue();
			populateTree(form.getLocalContext().getSelectedNav());
			form.treNav().setValue(savedValue);
			verifyQmbSearch();
			verifyQmbStart();
			updateControlsState();

		}

	}

	private TreeNode createNewTreeNode(INavigationNode node, TreeNode parent)
	{
		TreeNode newNode = null;
		Image nodeImage = node.getImageNode();
		if (NavigationNodeType.ROOTGROUP.equals(node.getTypeNode()))
		{
			newNode = form.treNav().getNodes().add(node, node.getTextNode(), true, ROOT_NODE, new int[] {}, true);
			newNode.setTextColor(Color.Blue);
			AppNavigationVo nav = form.getLocalContext().getSelectedNav();
			if (nav == null)
			{
				nav = new AppNavigationVo();
				form.getLocalContext().setSelectedNav(nav);
			}
			if (nav.getRootGroups() == null)
				nav.setRootGroups(new AppNavRootGroupVoCollection());
			form.getLocalContext().getSelectedNav().getRootGroups().add((AppNavRootGroupVo) node);
			if (nodeImage == null)
			{
				nodeImage = form.getImages().Admin.NavGrpDefault48;
			}

		}
		else
		{
			if (NavigationNodeType.SECONDGROUP.equals(node.getTypeNode()))
			{

				newNode = parent.getNodes().add(node, node.getTextNode(), true, SECOND_NODE, new int[] { ROOT_NODE }, true);
				INavigationNode rootGrp = (INavigationNode) parent.getValue();
				rootGrp.getGroupsChildsNode().add((AppNavSecondGroupVo) node);
				newNode.setTextColor(Color.Blue);
				if (nodeImage == null)
				{
					nodeImage = form.getImages().Admin.NavGrpDefault48;
				}

			}
			else
			{
				if (NavigationNodeType.FORM.equals(node.getTypeNode()))
				{
					newNode = parent.getNodes().add(node, node.getTextNode(), FORM_NODE, new int[] { SECOND_NODE, ROOT_NODE }, true);
					String textNode = node.getTextNode();
					newNode.setTextColor(Color.Black);
					AppFormVo theForm = ((AppNavFormVo) node).getForm();

					// String realFormName = theFormtheForm.getNamespace()
					if (textNode == null)
					{
						// textNode
						node.setTextNode(theForm.isAlias() ? theForm.getAliasName() : theForm.getName());
					}

					AppNavAccessRightsVo access = node.getAccessRightsNode();
					if (access != null)
					{
						newNode.setTooltip("<b>Form:</b> " + (theForm.isAlias() ? theForm.getAliasName() : theForm.getName()) + (theForm.getNamespaceIsNotNull() && theForm.getNamespace().getNameIsNotNull() ? "<br /><b>Namespace:</b> " + theForm.getNamespace().getName() : "") + "<br /><b>RIP:</b> " + access.getAccessForRIP().getText() + "<br /><b>EPIS:</b> " + access.getAccessForEPISE().getText());
						if (access.getReadOnlyIsNotNull() && access.getReadOnly())

						{
							nodeImage = form.getImages().Admin.FormReadOnly48;
						}

					}
					if (nodeImage == null)
					{
						nodeImage = form.getImages().Admin.Form48;
					}

				}

			}
		}
		if (form.chkShowImages().getValue())

			newNode.setCollapsedImage(nodeImage);
		newNode.setText(node.getTextNode());
		return newNode;
	}

	private void createTree(INavigationNode element, TreeNode parent)
	{
		TreeNode newNode = createNewTreeNode(element, parent);
		// we prepare the childs for the Navigation Node as we need to sort them
		ArrayList<INavigationNode> childs = new ArrayList<INavigationNode>();

		// first we take the second groups if any
		AppNavSecondGroupVoCollection secGroups = element.getGroupsChildsNode();

		if (secGroups != null)
		{
			childs.addAll(getAsList(secGroups));
		}

		// secondly we take the forms if any
		AppNavFormVoCollection forms = element.getFormChildsNode();
		if (forms != null)
		{
			childs.addAll(getAsList(forms));
		}

		if (childs.size() == 0)
			return;
		// now we sort the list using the Nav
		Collections.sort(childs, new NavPosIndexComparator());

		// after this we add recursively all childs

		for (int i = 0; i < childs.size(); i++)
		{
			createTree(childs.get(i), newNode);
		}
	}

	// As we need to sort all childs for a parent , first we need to put
	// all childs in a list.
	// As the Collection of vo doesn't extend any java.lang.Collection
	// This is what the 2 following functions do.
	private ArrayList<INavigationNode> getAsList(AppNavSecondGroupVoCollection group)
	{
		if (group == null)
			return null;

		ArrayList<INavigationNode> result = new ArrayList<INavigationNode>();

		for (int i = 0; i < group.size(); i++)
		{
			result.add(group.get(i));
		}
		return result;
	}

	private ArrayList<INavigationNode> getAsList(AppNavFormVoCollection group)
	{
		if (group == null)
			return null;

		ArrayList<INavigationNode> result = new ArrayList<INavigationNode>();

		for (int i = 0; i < group.size(); i++)
		{
			result.add(group.get(i));
		}
		return result;
	}

	@Override
	protected void onChkShowImagesValueChanged() throws PresentationLogicException
	{
		populateTree(form.getLocalContext().getSelectedNav());

	}

	// Utility
	class BooleanWraper
	{
		private boolean value = false;

		public BooleanWraper()
		{}

		public BooleanWraper(boolean value)
		{
			super();
			this.value = value;
		}

		public boolean isValue()
		{
			return value;
		}

		public void setValue(boolean value)
		{
			this.value = value;
		}
	}

	class PosIndexComparator implements Comparator<Object>
	{
		public int compare(Object o1, Object o2)
		{
			if (o1 == null || o2 == null)
				return 1;
			int indexO1 = 0;
			int indexO2 = 0;
			if (o1 instanceof AppNavSecondGroupVo)
			{
				indexO1 = ((AppNavSecondGroupVo) o1).getPosIndexIsNotNull() ? ((AppNavSecondGroupVo) o1).getPosIndex() : 0;
			}
			else
			{
				if (o1 instanceof AppNavFormVo)
				{
					indexO1 = ((AppNavFormVo) o1).getPosIndexIsNotNull() ? ((AppNavFormVo) o1).getPosIndex() : 0;
				}
				else
				{
					return 0;
				}
			}
			if (o2 instanceof AppNavSecondGroupVo)
			{
				indexO2 = ((AppNavSecondGroupVo) o2).getPosIndexIsNotNull() ? ((AppNavSecondGroupVo) o2).getPosIndex() : 0;
			}
			else
			{
				if (o2 instanceof AppNavFormVo)
				{
					indexO2 = ((AppNavFormVo) o2).getPosIndexIsNotNull() ? ((AppNavFormVo) o2).getPosIndex() : 0;
				}
				else
				{
					return 0;
				}
			}
			return indexO1 - indexO2;
		}
	}

	class NavPosIndexComparator implements Comparator<INavigationNode>
	{
		public int compare(INavigationNode o1, INavigationNode o2)
		{
			if (o1 == null || o2 == null)
				return 1;
			Integer indexO1 = o1.getIndexPositionNode();
			Integer indexO2 = o2.getIndexPositionNode();
			if (indexO1 == null || indexO2 == null)
				return 1;
			return indexO1 - indexO2;
		}
	}
}
