//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.appointmentoutcomeconfig;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class qmbFirstDefinitiveTreatmentComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.pathways.vo.EventLiteVo value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.pathways.vo.EventLiteVo value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.pathways.vo.EventLiteVo value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.pathways.vo.EventLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.pathways.vo.EventLiteVo value)
			{
				return super.control.removeRow(value);
			}
			public ims.pathways.vo.EventLiteVo getValue()
			{
				return (ims.pathways.vo.EventLiteVo)super.control.getValue();
			}
			public void setValue(ims.pathways.vo.EventLiteVo value)
			{
				super.control.setValue(value);
			}
			public void setEditedText(String text)
			{
				super.control.setEditedText(text);
			}
			public String getEditedText()
			{
				return super.control.getEditedText();
			}
		}
		public static class grdAppointmentOutcomeReasonsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdAppointmentOutcomeReasonsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColAppointmentOutcomeReasonReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColAppointmentOutcomeReasonReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColAppointmentOutcomeReasonOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForColAppointmentOutcomeReason(String value)
			{
				super.row.setTooltip(0, value);
			}
			public String getColAppointmentOutcomeReason()
			{
				return (String)super.row.get(0);
			}
			public void setColAppointmentOutcomeReason(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColAppointmentOutcomeReasonTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColActiveReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColActiveReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColActiveOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForColActive(String value)
			{
				super.row.setTooltip(1, value);
			}
			public boolean getColActive()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setColActive(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellColActiveTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColSelectReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void showColSelectOpened()
			{
				super.row.showOpened(2);
			}
			public void setTooltipForColSelect(String value)
			{
				super.row.setTooltip(2, value);
			}
			public boolean getColSelect()
			{
				return ((Boolean)super.row.get(2)).booleanValue();
			}
			public void setColSelect(boolean value)
			{
				super.row.set(2, new Boolean(value));
			}
			public void setCellColSelectTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public  ims.admin.vo.lookups.AppointmentOutcomeReason getValue()
			{
				return ( ims.admin.vo.lookups.AppointmentOutcomeReason)super.row.getValue();
			}
			public void setValue( ims.admin.vo.lookups.AppointmentOutcomeReason value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdAppointmentOutcomeReasonsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdAppointmentOutcomeReasonsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdAppointmentOutcomeReasonsRow get(int index)
			{
				return new grdAppointmentOutcomeReasonsRow(super.collection.get(index));
			}
			public grdAppointmentOutcomeReasonsRow newRow()
			{
				return new grdAppointmentOutcomeReasonsRow(super.collection.newRow());
			}
			public grdAppointmentOutcomeReasonsRow newRow(boolean autoSelect)
			{
				return new grdAppointmentOutcomeReasonsRow(super.collection.newRow(autoSelect));
			}
			public grdAppointmentOutcomeReasonsRow newRowAt(int index)
			{
				return new grdAppointmentOutcomeReasonsRow(super.collection.newRowAt(index));
			}
			public grdAppointmentOutcomeReasonsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdAppointmentOutcomeReasonsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdAppointmentOutcomeReasonsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public  ims.admin.vo.lookups.AppointmentOutcomeReason[] getValues()
			{
				 ims.admin.vo.lookups.AppointmentOutcomeReason[] listOfValues = new  ims.admin.vo.lookups.AppointmentOutcomeReason[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public  ims.admin.vo.lookups.AppointmentOutcomeReason getValue()
			{
				return ( ims.admin.vo.lookups.AppointmentOutcomeReason)super.grid.getValue();
			}
			public void setValue( ims.admin.vo.lookups.AppointmentOutcomeReason value)
			{
				super.grid.setValue(value);
			}
			public grdAppointmentOutcomeReasonsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdAppointmentOutcomeReasonsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdAppointmentOutcomeReasonsRowCollection getRows()
			{
				return new grdAppointmentOutcomeReasonsRowCollection(super.grid.getRows());
			}
			public grdAppointmentOutcomeReasonsRow getRowByValue( ims.admin.vo.lookups.AppointmentOutcomeReason value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdAppointmentOutcomeReasonsRow(row);
			}
			public void setColAppointmentOutcomeReasonHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColAppointmentOutcomeReasonHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColActiveHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColActiveHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 7, 137, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Appointment Outcome:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 496, 5, 112, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "First Definitive \nTreatment Event:", new Integer(1), null, new Integer(0)}));
	
			// Query ComboBox Controls
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 616, 5, 184, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			ComboBox m_qmbFirstDefinitiveTreatmentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
			addControl(m_qmbFirstDefinitiveTreatmentTemp);
			qmbFirstDefinitiveTreatmentComboBox qmbFirstDefinitiveTreatment = (qmbFirstDefinitiveTreatmentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbFirstDefinitiveTreatmentComboBox.class, m_qmbFirstDefinitiveTreatmentTemp);
			super.addComboBox(qmbFirstDefinitiveTreatment);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 616, 200, 200, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Can Transfer to another Provider", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 616, 176, 176, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Can make Onward Referral", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 616, 152, 176, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Can make Future Appointment", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 616, 128, 176, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Can Add to Planned List", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 616, 104, 176, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Can Add to Booked List", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 616, 80, 176, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Can Add to Waiting List", Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 616, 56, 184, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"First Definitive Treatment", Boolean.FALSE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 576, 180, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Grid m_grdAppointmentOutcomeReasonsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdAppointmentOutcomeReasonsTemp);
			grdAppointmentOutcomeReasonsGrid grdAppointmentOutcomeReasons = (grdAppointmentOutcomeReasonsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAppointmentOutcomeReasonsGrid.class, m_grdAppointmentOutcomeReasonsTemp);
			grdAppointmentOutcomeReasons.addStringColumn("Appointment Outcome Reason", 0, 0, 400, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdAppointmentOutcomeReasons.addBoolColumn("Active", 0, 0, 80, true, false, 0, true);
			grdAppointmentOutcomeReasons.addBoolColumn("Select", 0, 0, -1, false, true, 0, true);
			super.addGrid(grdAppointmentOutcomeReasons);
	
			// HTML Viewer Controls
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 152, 7, 304, 33, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public Label lbl1()
		{
			return (Label)super.getControl(1);
		}
		public qmbFirstDefinitiveTreatmentComboBox qmbFirstDefinitiveTreatment()
		{
			return (qmbFirstDefinitiveTreatmentComboBox)super.getComboBox(0);
		}
		public CheckBox chkTransfer()
		{
			return (CheckBox)super.getControl(3);
		}
		public CheckBox chkOnward()
		{
			return (CheckBox)super.getControl(4);
		}
		public CheckBox chkAppointment()
		{
			return (CheckBox)super.getControl(5);
		}
		public CheckBox chkPlanned()
		{
			return (CheckBox)super.getControl(6);
		}
		public CheckBox chkBooked()
		{
			return (CheckBox)super.getControl(7);
		}
		public CheckBox chkWaiting()
		{
			return (CheckBox)super.getControl(8);
		}
		public CheckBox chkFirst()
		{
			return (CheckBox)super.getControl(9);
		}
		public grdAppointmentOutcomeReasonsGrid grdAppointmentOutcomeReasons()
		{
			return (grdAppointmentOutcomeReasonsGrid)super.getGrid(0);
		}
		public HTMLViewer htmAppointmentOutcomeValue()
		{
			return (HTMLViewer)super.getControl(11);
		}
	}
	public static class grdAppOutcomeConfigRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAppOutcomeConfigRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColAppointmentOutcomeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColAppointmentOutcomeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColAppointmentOutcomeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColAppointmentOutcome(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColAppointmentOutcome()
		{
			return (String)super.row.get(0);
		}
		public void setColAppointmentOutcome(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColAppointmentOutcomeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColAppointmentOutcomeReasonReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColAppointmentOutcomeReasonReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColAppointmentOutcomeReasonOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColAppointmentOutcomeReason(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColAppointmentOutcomeReason()
		{
			return (String)super.row.get(1);
		}
		public void setColAppointmentOutcomeReason(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColAppointmentOutcomeReasonTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColFirstReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColFirstReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColFirstOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColFirst(String value)
		{
			super.row.setTooltip(2, value);
		}
		public boolean getColFirst()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setColFirst(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellColFirstTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColWaitingReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColWaitingReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColWaitingOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColWaiting(String value)
		{
			super.row.setTooltip(3, value);
		}
		public boolean getColWaiting()
		{
			return ((Boolean)super.row.get(3)).booleanValue();
		}
		public void setColWaiting(boolean value)
		{
			super.row.set(3, new Boolean(value));
		}
		public void setCellColWaitingTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColBookedReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColBookedReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColBookedOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColBooked(String value)
		{
			super.row.setTooltip(4, value);
		}
		public boolean getColBooked()
		{
			return ((Boolean)super.row.get(4)).booleanValue();
		}
		public void setColBooked(boolean value)
		{
			super.row.set(4, new Boolean(value));
		}
		public void setCellColBookedTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColPlannedReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColPlannedReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColPlannedOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColPlanned(String value)
		{
			super.row.setTooltip(5, value);
		}
		public boolean getColPlanned()
		{
			return ((Boolean)super.row.get(5)).booleanValue();
		}
		public void setColPlanned(boolean value)
		{
			super.row.set(5, new Boolean(value));
		}
		public void setCellColPlannedTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColAppointmentReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColAppointmentReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColAppointmentOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColAppointment(String value)
		{
			super.row.setTooltip(6, value);
		}
		public boolean getColAppointment()
		{
			return ((Boolean)super.row.get(6)).booleanValue();
		}
		public void setColAppointment(boolean value)
		{
			super.row.set(6, new Boolean(value));
		}
		public void setCellColAppointmentTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColOnwardReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColOnwardReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColOnwardOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForColOnward(String value)
		{
			super.row.setTooltip(7, value);
		}
		public boolean getColOnward()
		{
			return ((Boolean)super.row.get(7)).booleanValue();
		}
		public void setColOnward(boolean value)
		{
			super.row.set(7, new Boolean(value));
		}
		public void setCellColOnwardTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setColTransferReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean isColTransferReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showColTransferOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForColTransfer(String value)
		{
			super.row.setTooltip(8, value);
		}
		public boolean getColTransfer()
		{
			return ((Boolean)super.row.get(8)).booleanValue();
		}
		public void setColTransfer(boolean value)
		{
			super.row.set(8, new Boolean(value));
		}
		public void setCellColTransferTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public java.lang.Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAppOutcomeConfigRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAppOutcomeConfigRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAppOutcomeConfigRow get(int index)
		{
			return new grdAppOutcomeConfigRow(super.collection.get(index));
		}
		public grdAppOutcomeConfigRow newRow()
		{
			return new grdAppOutcomeConfigRow(super.collection.newRow());
		}
		public grdAppOutcomeConfigRow newRow(boolean autoSelect)
		{
			return new grdAppOutcomeConfigRow(super.collection.newRow(autoSelect));
		}
		public grdAppOutcomeConfigRow newRowAt(int index)
		{
			return new grdAppOutcomeConfigRow(super.collection.newRowAt(index));
		}
		public grdAppOutcomeConfigRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAppOutcomeConfigRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAppOutcomeConfigGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public java.lang.Object[] getValues()
		{
			java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public java.lang.Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.grid.setValue(value);
		}
		public grdAppOutcomeConfigRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAppOutcomeConfigRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAppOutcomeConfigRowCollection getRows()
		{
			return new grdAppOutcomeConfigRowCollection(super.grid.getRows());
		}
		public grdAppOutcomeConfigRow getRowByValue(java.lang.Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAppOutcomeConfigRow(row);
		}
		public void setColAppointmentOutcomeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColAppointmentOutcomeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColAppointmentOutcomeReasonHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColAppointmentOutcomeReasonHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColFirstHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColFirstHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColWaitingHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColWaitingHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColBookedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColBookedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColPlannedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColPlannedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColAppointmentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColAppointmentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColOnwardHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColOnwardHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setColTransferHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getColTransferHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
	}

	public static class GroupFilterRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 96, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper13.getX(), anchoringHelper13.getY(), anchoringHelper13.getWidth(), "All", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "Active", startTabIndex.intValue() + 1);
		}
		public void setText(GroupFilterEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupFilterEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupFilterEnumeration.None;
				case 0: return GroupFilterEnumeration.rdoAll;
				case 1: return GroupFilterEnumeration.rdoActive;
			}
			return null;
		}
		public void setValue(GroupFilterEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupFilterEnumeration.None.id);
		}
		public boolean isEnabled(GroupFilterEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupFilterEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupFilterEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupFilterEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupFilterEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupFilterEnumeration None = new GroupFilterEnumeration(-1);
		public static GroupFilterEnumeration rdoAll = new GroupFilterEnumeration(0);
		public static GroupFilterEnumeration rdoActive = new GroupFilterEnumeration(1);
		private GroupFilterEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupFilterEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Container Clasess
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 344, 832, 248, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 248);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 686, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 304, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdAppOutcomeConfigTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAppOutcomeConfigTemp);
		grdAppOutcomeConfigGrid grdAppOutcomeConfig = (grdAppOutcomeConfigGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAppOutcomeConfigGrid.class, m_grdAppOutcomeConfigTemp);
		grdAppOutcomeConfig.addStringColumn("Appointment Outcome", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppOutcomeConfig.addStringColumn("Appointment Outcome Reason", 0, 0, 210, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppOutcomeConfig.addBoolColumn("First", 0, 0, 50, true, false, 0, true);
		grdAppOutcomeConfig.addBoolColumn("Waiting", 0, 0, 70, true, false, 0, true);
		grdAppOutcomeConfig.addBoolColumn("Booked", 0, 0, 70, true, false, 0, true);
		grdAppOutcomeConfig.addBoolColumn("Planned", 0, 0, 70, true, false, 0, true);
		grdAppOutcomeConfig.addBoolColumn("Appointment", 0, 0, 90, true, false, 0, true);
		grdAppOutcomeConfig.addBoolColumn("Onward", 0, 0, 60, true, false, 0, true);
		grdAppOutcomeConfig.addBoolColumn("Transfer", 0, 0, -1, true, false, 0, true);
		super.addGrid(grdAppOutcomeConfig);

		// RadioButton Controls
		RadioButton tmpGroupFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupFilter);
		GroupFilterRadioButton GroupFilter = (GroupFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupFilterRadioButton.class, tmpGroupFilter);
		GroupFilter.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupFilter);
	}


	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(1);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(2);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(3);
	}
	public grdAppOutcomeConfigGrid grdAppOutcomeConfig()
	{
		return (grdAppOutcomeConfigGrid)super.getGrid(0);
	}
	public GroupFilterRadioButton GroupFilter()
	{
		return (GroupFilterRadioButton)super.getRadioButton(0);
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedLookup = new ims.framework.ContextVariable("SelectedLookup", prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedLookup_" + componentIdentifier + "");
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
		}
		
		public boolean getSelectedLookupIsNotNull()
		{
			return !cxl_SelectedLookup.getValueIsNull(context);
		}
		public ims.scheduling.vo.lookups.ApptOutcome getSelectedLookup()
		{
			return (ims.scheduling.vo.lookups.ApptOutcome)cxl_SelectedLookup.getValue(context);
		}
		public void setSelectedLookup(ims.scheduling.vo.lookups.ApptOutcome value)
		{
			cxl_SelectedLookup.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedLookup = null;
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.admin.vo.AppointmentOutcomeConfigVo getSelectedRecord()
		{
			return (ims.admin.vo.AppointmentOutcomeConfigVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.admin.vo.AppointmentOutcomeConfigVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[80];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100065-ID", "ID_AppointmentOutcomeConfig");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100065-SHOWFIRSTDEFINITIVETREATMENT", "ShowFirstDefinitiveTreatment");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100065-CANADDTOWAITINGLIST", "CanAddtoWaitingList");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100065-CANADDTOBOOKEDLIST", "CanAddtoBookedList");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100065-CANADDTOPLANNEDLIST", "CanAddtoPlannedList");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100065-CANMAKEAPPOINTMENT", "CanMakeAppointment");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100065-CANMAKEONWARDREFERRAL", "CanMakeOnwardReferral");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100065-CANTRANSFER", "CanTransfer");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.AppointmentOutcomeConfig.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1004100065-APPOINTMENTOUTCOME", "AppointmentOutcome");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
