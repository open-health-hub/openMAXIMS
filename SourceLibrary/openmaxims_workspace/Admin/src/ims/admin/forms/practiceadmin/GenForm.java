//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.practiceadmin;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbCountyComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.ntpf.vo.lookups.County value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.ntpf.vo.lookups.County value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.ntpf.vo.lookups.County value)
			{
				return super.control.removeRow(value);
			}
			public ims.ntpf.vo.lookups.County getValue()
			{
				return (ims.ntpf.vo.lookups.County)super.control.getValue();
			}
			public void setValue(ims.ntpf.vo.lookups.County value)
			{
				super.control.setValue(value);
			}
		}
		public static class grdCommChannelsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdCommChannelsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolTypeReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolTypeReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolTypeOpened()
			{
				super.row.showOpened(0);
			}
			public ims.core.vo.lookups.ChannelType getcolType()
			{
				return (ims.core.vo.lookups.ChannelType)super.row.get(0);
			}
			public void setcolType(ims.core.vo.lookups.ChannelType value)
			{
				super.row.set(0, value, true);
			}
			public void setCellcolTypeTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolContactValueReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolContactValueReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolContactValueOpened()
			{
				super.row.showOpened(1);
			}
			public String getcolContactValue()
			{
				return (String)super.row.get(1);
			}
			public void setcolContactValue(String value)
			{
				super.row.set(1, value);
			}
			public void setCellcolContactValueTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.core.vo.CommChannelVo getValue()
			{
				return (ims.core.vo.CommChannelVo)super.row.getValue();
			}
			public void setValue(ims.core.vo.CommChannelVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdCommChannelsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdCommChannelsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdCommChannelsRow get(int index)
			{
				return new grdCommChannelsRow(super.collection.get(index));
			}
			public grdCommChannelsRow newRow()
			{
				return new grdCommChannelsRow(super.collection.newRow());
			}
			public grdCommChannelsRow newRow(boolean autoSelect)
			{
				return new grdCommChannelsRow(super.collection.newRow(autoSelect));
			}
			public grdCommChannelsRow newRowAt(int index)
			{
				return new grdCommChannelsRow(super.collection.newRowAt(index));
			}
			public grdCommChannelsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdCommChannelsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdCommChannelsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.core.vo.CommChannelVoCollection getValues()
			{
				ims.core.vo.CommChannelVoCollection listOfValues = new ims.core.vo.CommChannelVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.core.vo.CommChannelVo getValue()
			{
				return (ims.core.vo.CommChannelVo)super.grid.getValue();
			}
			public void setValue(ims.core.vo.CommChannelVo value)
			{
				super.grid.setValue(value);
			}
			public grdCommChannelsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdCommChannelsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdCommChannelsRowCollection getRows()
			{
				return new grdCommChannelsRowCollection(super.grid.getRows());
			}
			public grdCommChannelsRow getRowByValue(ims.core.vo.CommChannelVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdCommChannelsRow(row);
			}
			public void setcolTypeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolTypeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public GridComboBox colTypeComboBox()
			{
				return new GridComboBox(super.grid, 0);
			}
			public void setcolContactValueHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolContactValueHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdDetailsMappingsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdDetailsMappingsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolExtCodeTypeReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolExtCodeTypeReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolExtCodeTypeOpened()
			{
				super.row.showOpened(0);
			}
			public void setTooltipForcolExtCodeType(String value)
			{
				super.row.setTooltip(0, value);
			}
			public ims.core.vo.lookups.TaxonomyType getcolExtCodeType()
			{
				return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
			}
			public void setcolExtCodeType(ims.core.vo.lookups.TaxonomyType value)
			{
				super.row.set(0, value, true);
			}
			public void setCellcolExtCodeTypeTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolCodeReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolCodeReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolCodeOpened()
			{
				super.row.showOpened(1);
			}
			public void setTooltipForcolCode(String value)
			{
				super.row.setTooltip(1, value);
			}
			public String getcolCode()
			{
				return (String)super.row.get(1);
			}
			public void setcolCode(String value)
			{
				super.row.set(1, value);
			}
			public void setCellcolCodeTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.core.vo.TaxonomyMap getValue()
			{
				return (ims.core.vo.TaxonomyMap)super.row.getValue();
			}
			public void setValue(ims.core.vo.TaxonomyMap value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdDetailsMappingsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdDetailsMappingsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdDetailsMappingsRow get(int index)
			{
				return new grdDetailsMappingsRow(super.collection.get(index));
			}
			public grdDetailsMappingsRow newRow()
			{
				return new grdDetailsMappingsRow(super.collection.newRow());
			}
			public grdDetailsMappingsRow newRow(boolean autoSelect)
			{
				return new grdDetailsMappingsRow(super.collection.newRow(autoSelect));
			}
			public grdDetailsMappingsRow newRowAt(int index)
			{
				return new grdDetailsMappingsRow(super.collection.newRowAt(index));
			}
			public grdDetailsMappingsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdDetailsMappingsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdDetailsMappingsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			public ims.core.vo.TaxonomyMapCollection getValues()
			{
				ims.core.vo.TaxonomyMapCollection listOfValues = new ims.core.vo.TaxonomyMapCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.core.vo.TaxonomyMap getValue()
			{
				return (ims.core.vo.TaxonomyMap)super.grid.getValue();
			}
			public void setValue(ims.core.vo.TaxonomyMap value)
			{
				super.grid.setValue(value);
			}
			public grdDetailsMappingsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdDetailsMappingsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdDetailsMappingsRowCollection getRows()
			{
				return new grdDetailsMappingsRowCollection(super.grid.getRows());
			}
			public grdDetailsMappingsRow getRowByValue(ims.core.vo.TaxonomyMap value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdDetailsMappingsRow(row);
			}
			public void setcolExtCodeTypeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolExtCodeTypeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public GridComboBox colExtCodeTypeComboBox()
			{
				return new GridComboBox(super.grid, 0);
			}
			public void setcolCodeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolCodeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 392, 40, 60, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Channels:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 392, 24, 93, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Communication", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 392, 122, 32, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "CCG:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 170, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "County", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 0, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(1)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 392, 144, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Mappings:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 170, 65, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Post Code:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 392, 98, 63, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comment:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 26, 41, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Name:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 50, 54, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Address:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 488, 120, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(25), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 72, 24, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(120), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 72, 48, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 72, 72, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 72, 96, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 72, 144, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 72, 168, 120, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(10), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 488, 96, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 72, 120, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 72, 168, 296, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			ComboBox m_cmbCountyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbCountyTemp);
			cmbCountyComboBox cmbCounty = (cmbCountyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCountyComboBox.class, m_cmbCountyTemp);
			super.addComboBox(cmbCounty);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 72, 200, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Set Active", Boolean.FALSE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 488, 24, 296, 68, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Grid m_grdCommChannelsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Admin.contextMenuPracticeCommChannels, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdCommChannelsTemp);
			grdCommChannelsGrid grdCommChannels = (grdCommChannelsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCommChannelsGrid.class, m_grdCommChannelsTemp);
			grdCommChannels.addComboBoxColumn("Contact Type", 0, 0, 150, false, true, false, false, true, -1);
			grdCommChannels.addStringColumn("Contact Value", 0, 0, -1, false, false, 0, 50, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdCommChannels);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 488, 144, 296, 77, ims.framework.enumerations.ControlAnchoring.ALL);
			Grid m_grdDetailsMappingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdDetailsMappingsTemp);
			grdDetailsMappingsGrid grdDetailsMappings = (grdDetailsMappingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDetailsMappingsGrid.class, m_grdDetailsMappingsTemp);
			grdDetailsMappings.addComboBoxColumn("External Code Type", 0, 0, 150, false, true, false, false, true, -1);
			grdDetailsMappings.addStringColumn("External Code", 0, 0, -1, false, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			super.addGrid(grdDetailsMappings);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public Label lbl3()
		{
			return (Label)super.getControl(0);
		}
		public Label lbl2()
		{
			return (Label)super.getControl(1);
		}
		public Label lblPCT()
		{
			return (Label)super.getControl(2);
		}
		public Label lblDetailsCounty()
		{
			return (Label)super.getControl(3);
		}
		public Label lblTitle()
		{
			return (Label)super.getControl(4);
		}
		public Label lblDetailsPostCode()
		{
			return (Label)super.getControl(6);
		}
		public Label lblDetailsComment()
		{
			return (Label)super.getControl(7);
		}
		public TextBox txtPCT()
		{
			return (TextBox)super.getControl(10);
		}
		public TextBox txtDetailsName()
		{
			return (TextBox)super.getControl(11);
		}
		public TextBox txtDetailsAddress1()
		{
			return (TextBox)super.getControl(12);
		}
		public TextBox txtDetailsAddress2()
		{
			return (TextBox)super.getControl(13);
		}
		public TextBox txtDetailsAddress3()
		{
			return (TextBox)super.getControl(14);
		}
		public TextBox txtDetailsAddress5()
		{
			return (TextBox)super.getControl(15);
		}
		public TextBox txtDetailsPostCode()
		{
			return (TextBox)super.getControl(16);
		}
		public TextBox txtDetailsComment()
		{
			return (TextBox)super.getControl(17);
		}
		public TextBox txtDetailsAddress4()
		{
			return (TextBox)super.getControl(18);
		}
		public cmbCountyComboBox cmbCounty()
		{
			return (cmbCountyComboBox)super.getComboBox(0);
		}
		public CheckBox chkDetailsActive()
		{
			return (CheckBox)super.getControl(20);
		}
		public grdCommChannelsGrid grdCommChannels()
		{
			return (grdCommChannelsGrid)super.getGrid(0);
		}
		public grdDetailsMappingsGrid grdDetailsMappings()
		{
			return (grdDetailsMappingsGrid)super.getGrid(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(72);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.Admin.contextMenuPracticeCommChannels = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Admin.contextMenuPracticeCommChannelsADDItem = factory.createMenuItem(startControlID.intValue() + 10, "Add", true, false, new Integer(102179), true, false);
		contextMenus.Admin.contextMenuPracticeCommChannels.add(contextMenus.Admin.contextMenuPracticeCommChannelsADDItem);
		contextMenus.Admin.contextMenuPracticeCommChannelsREMOVEItem = factory.createMenuItem(startControlID.intValue() + 11, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.Admin.contextMenuPracticeCommChannels.add(contextMenus.Admin.contextMenuPracticeCommChannelsREMOVEItem);
		form.registerMenu(contextMenus.Admin.contextMenuPracticeCommChannels);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 328, ims.framework.enumerations.ControlAnchoring.ALL);
		ims.framework.FormUiLogic m_customControlPracticeAdminForm = loader.loadComponent(103118, appForm, startControlID * 10 + 1000, anchoringHelper24.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
		//ims.framework.Control m_customControlPracticeAdminControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(8), new Integer(0), new Integer(832), new Integer(328), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_customControlPracticeAdminForm, instance1 } );
		ims.framework.Control m_customControlPracticeAdminControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1024),  new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_customControlPracticeAdminForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlPracticeAdminControl);
		Menu[] menus1 = m_customControlPracticeAdminForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Container Clasess
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 816, 248, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Practice Details", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 248);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper25.getWidth(), anchoringHelper25.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 387, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.admin.forms.practicesearch.IComponent customControlPracticeAdmin()
	{
		return (ims.admin.forms.practicesearch.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlPracticeAdminValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlPracticeAdminVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlPracticeAdminVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlPracticeAdminEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlPracticeAdminEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(2);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(3);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				PracticeAdminDialog = new LocalFormName(103150);
				GPPracticeSelect = new LocalFormName(103112);
			}
			public final FormName PracticeAdminDialog;
			public final FormName GPPracticeSelect;
		}

		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image Delete;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Organisation = new ImageHelper(103103, "Images/Admin/organisation.png", new Integer(16), new Integer(16));
				Location = new ImageHelper(103104, "Images/Admin/location.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Organisation;
			public final ims.framework.utils.Image Location;
		}
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_MenuOption = new ims.framework.ContextVariable("MenuOption", prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__MenuOption_" + componentIdentifier + "");
			cxl_Practice = new ims.framework.ContextVariable("Practice", prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Practice_" + componentIdentifier + "");
			cxl_Surgery = new ims.framework.ContextVariable("Surgery", prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier + "");
		}
		
		public boolean getMenuOptionIsNotNull()
		{
			return !cxl_MenuOption.getValueIsNull(context);
		}
		public ims.admin.vo.enums.PracticeSearch getMenuOption()
		{
			return (ims.admin.vo.enums.PracticeSearch)cxl_MenuOption.getValue(context);
		}
		public void setMenuOption(ims.admin.vo.enums.PracticeSearch value)
		{
			cxl_MenuOption.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MenuOption = null;
		public boolean getPracticeIsNotNull()
		{
			return !cxl_Practice.getValueIsNull(context);
		}
		public ims.core.vo.OrganisationVo getPractice()
		{
			return (ims.core.vo.OrganisationVo)cxl_Practice.getValue(context);
		}
		public void setPractice(ims.core.vo.OrganisationVo value)
		{
			cxl_Practice.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Practice = null;
		public boolean getSurgeryIsNotNull()
		{
			return !cxl_Surgery.getValueIsNull(context);
		}
		public ims.core.vo.LocSiteVo getSurgery()
		{
			return (ims.core.vo.LocSiteVo)cxl_Surgery.getValue(context);
		}
		public void setSurgery(ims.core.vo.LocSiteVo value)
		{
			cxl_Surgery.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Surgery = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public AdminNamespace Admin = new AdminNamespace();
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class AdminNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class PracticeCommChannels implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 10;
				public static final int REMOVE = 11;
			}
			public void disableAllPracticeCommChannelsMenuItems()
			{
				this.contextMenuPracticeCommChannelsADDItem.setEnabled(false);
				this.contextMenuPracticeCommChannelsREMOVEItem.setEnabled(false);
			}
			public void hideAllPracticeCommChannelsMenuItems()
			{
				this.contextMenuPracticeCommChannelsADDItem.setVisible(false);
				this.contextMenuPracticeCommChannelsREMOVEItem.setVisible(false);
			}
			private Menu contextMenuPracticeCommChannels;
			public ReadOnlyMenuItem getPracticeCommChannelsADDItem()
			{
				return this.contextMenuPracticeCommChannelsADDItem;
			}
			private MenuItem contextMenuPracticeCommChannelsADDItem;
			public ReadOnlyMenuItem getPracticeCommChannelsREMOVEItem()
			{
				return this.contextMenuPracticeCommChannelsREMOVEItem;
			}
			private MenuItem contextMenuPracticeCommChannelsREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[93];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-ID", "ID_Organisation");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-TYPE", "Type");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-ISACTIVE", "IsActive");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-COMMENT", "Comment");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Admin.Practice", "BO-1007100003-PCTCODE", "PctCode");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Practice_" + componentIdentifier, "BO-1007100003-ID", "ID_Organisation");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Practice_" + componentIdentifier, "BO-1007100003-NAME", "Name");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Practice_" + componentIdentifier, "BO-1007100003-TYPE", "Type");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Practice_" + componentIdentifier, "BO-1007100003-ISACTIVE", "IsActive");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Practice_" + componentIdentifier, "BO-1007100003-COMMENT", "Comment");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Practice_" + componentIdentifier, "BO-1007100003-PCTCODE", "PctCode");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier, "BO-1007100007-ID", "ID_Location");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier, "BO-1007100007-NAME", "Name");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier, "BO-1007100007-ISACTIVE", "IsActive");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier, "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier, "BO-1007100007-TYPE", "Type");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier, "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier, "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier, "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier, "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.PracticeAdmin.__internal_x_context__Surgery_" + componentIdentifier, "BO-1007100002-ALLSECUREACCOMMODATION", "AllSecureAccommodation");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
