//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.20 build 40819.1700)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.configflags;

import ims.admin.vo.FlagCategoryVo;
import ims.admin.vo.FlagCategoryVoCollection;
import ims.configuration.ConfigFlag.BooleanInternalFlag;
import ims.configuration.ConfigFlag.ColourInternalFlag;
import ims.configuration.ConfigFlag.DecimalInternalFlag;
import ims.configuration.ConfigFlag.FormInternalFlag;
import ims.configuration.ConfigFlag.IntInternalFlag;
import ims.configuration.ConfigFlag.StringInternalFlag;
import ims.configuration.EnvironmentConfig;
import ims.configuration.FlagType;
import ims.configuration.IFlag;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppForm;
import ims.framework.utils.Color;
import ims.framework.utils.Image;
public class Logic extends BaseLogic
{		
	private String SHOW_SQL = "ShowSQL";
	private String LOGGIN_LEVEL = "LogginLevel";
	private String HIBERNATE_USE_SQL_COMMENTS = "HibernateUseSqlComments";
	private String RESULT_TOP_MAX = "ResultSetTopMax";
	private String RESULT_SET_DEFAULT_MAX = "ResultSetDefaultMax";		
	private String[] collection = {SHOW_SQL, LOGGIN_LEVEL, HIBERNATE_USE_SQL_COMMENTS, RESULT_TOP_MAX, RESULT_SET_DEFAULT_MAX};
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		form.getLocalContext().setPasswordEntered(!ConfigFlag.GEN.RELEASE_MODE.getValue());
		open();
		populateColorCombo();	
	}
	
	private void initialize() 
	{		
		engine.setCaption("Configuration Flags (" + engine.getCurrentConfigFlagsGroup() + " Group)");		
	}

	private void populateColorCombo()
	{
		Color[] colors = Color.getColors();
		form.lyr1().Colour().cmbColours().clear();
		for (int i = 0; i < colors.length; i++)
		{
			form.lyr1().Colour().cmbColours().newRow(colors[i], colors[i].getName(), colors[i].getImage());
		}
	}

	private void open() 
	{
		setViewMode();
		clearFields();
		setupRootRows();
	//	setContextMenu(); WDEV-14214 
		form.txtFilter().setFocus();
	}

	private void setContextMenu() 
	{				
		form.getContextMenus().getConfigFlagImportItem().setVisible(true);
		form.getContextMenus().getConfigFlagExportItem().setVisible(true);		
	}

	private void setupRootRows() 
	{
		clearFields();
		form.treFlags().clear();	
		setChoices();
		FlagCategoryVoCollection coll = domain.listCategories();
		for (int i = 0; i < coll.size(); i++)
		{
			FlagCategoryVo cat = coll.get(i);
			addRootRow(cat);			
		}
		form.getContextMenus().getConfigFlagUpdateItem().setVisible(false);
		form.getContextMenus().getConfigFlagResetItem().setVisible(false);		
	}
	
	private void setChoices()
	{
		String dispChoice = ConfigFlag.DISPLAY_CHOICE.getValue();
		if ((dispChoice == null) || dispChoice.equals("NONE"))
		{
			form.chkData().setValue(false);
			form.chkDto().setValue(false);
			form.chkFw().setValue(false);
			form.chkGen().setValue(false);
			form.chkHl7().setValue(false);
			form.chkUi().setValue(false);
			form.chkEnviroment().setValue(false);
		}
		else if (dispChoice.equals("ALL"))
		{
			form.chkData().setValue(true);
			form.chkDto().setValue(true);
			form.chkFw().setValue(true);
			form.chkGen().setValue(true);
			form.chkHl7().setValue(true);
			form.chkUi().setValue(true);
			form.chkEnviroment().setValue(false);
		}
		else
		{
			if (dispChoice.indexOf("FW") != -1) form.chkFw().setValue(true);
			if (dispChoice.indexOf("UI") != -1) form.chkUi().setValue(true);
			if (dispChoice.indexOf("DOM") != -1) form.chkData().setValue(true);
			if (dispChoice.indexOf("GEN") != -1) form.chkGen().setValue(true);
			if (dispChoice.indexOf("DTO") != -1) form.chkDto().setValue(true);
			if (dispChoice.indexOf("HL7") != -1) form.chkHl7().setValue(true);			
		}
	}
	
	private void addRootRow(FlagCategoryVo cat) 
	{
		TreeNode node = form.treFlags().getNodes().add(cat, cat.getName());		
		node.setExpandedImage(form.getImages().Core.OpenFolder);
		node.setCollapsedImage(form.getImages().Core.ClosedFolder);		
	}

	private void setViewMode() 
	{
		form.setMode(FormMode.VIEW);
		//WDEV-8528
		//form.getContextMenus().getConfigFlagReloadItem().setVisible(true);
		form.lyr1().Lookups().cmbLookupInstance().setVisible(false);
		form.getContextMenus().getConfigFlagUpdateItem().setVisible(false);
		form.getContextMenus().getConfigFlagResetItem().setVisible(false);
		//form.lyr1().showNone();		
	}

	private void clearFields() 
	{
		form.txtComment().setValue(null);
		form.txtName().setValue(null);
		form.txtDefault().setValue(null);
		form.lyr1().showNone();		
	}

	private void populateGrid(TreeNode parentNode, IFlag[] flags) 
	{
		Image expImage = form.getImages().Core.YellowFlag;
		Image collImage = form.getImages().Core.YellowFlag;		
		
		TreeNode node = null;
		for (int i = 0; i < flags.length; i++)
		{
			IFlag flag = flags[i];
			node = parentNode.getNodes().add(flag, flag.getName());
			if (flag.isSystem())
			{
				node.setCollapsedImage(form.getImages().Core.RedFlag);
				node.setExpandedImage(form.getImages().Core.RedFlag);
			}
			else
			{
				node.setCollapsedImage(collImage);
				node.setExpandedImage(expImage);				
			}
			node.setTooltip(flag.getToolTip());
			node.setValue(flag);
		}		
	}
		
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		setViewMode();
		clearFields();
		form.treFlags().clearSelection();
	}
	
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.treFlags().getValue() != null)
		{
			if (form.treFlags().getValue() instanceof IFlag)
			{
				IFlag flag = (IFlag)form.treFlags().getValue();
				String msg;
				try
				{
					msg = domain.saveConfigFlag(flag, getEnteredValue(flag));
					if (flag!=null)
						engine.createSystemLogEntry(SystemLogType.CONFIGURATION_FLAG, SystemLogLevel.INFORMATION, "The config flag " + flag.getName() + " has been updated to the value: " + flag.getValAsString());
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return;
				}
				setViewMode();
				form.treFlags().getSelectedNode().setTooltip(flag.getToolTip());
				form.getContextMenus().getConfigFlagUpdateItem().setVisible(true);
				//form.getContextMenus().getConfigFlagResetItem().setVisible(true); WDEV-14214
				setFields(flag);
				if (msg != null && !msg.equals("") && !ConfigFlag.GEN.RELEASE_MODE.getValue())
				{
					engine.showMessage(msg);
				}
			}
			else
			{				
				if (form.treFlags().getSelectedNode().getText().equals(SHOW_SQL))
				{
					EnvironmentConfig.setShowSQL(form.lyr1().Boolean().chkVal().getValue());
				}
				else if (form.treFlags().getSelectedNode().getText().equals(LOGGIN_LEVEL))
				{	
					if (form.lyr1().Option().cmbFlagOptions().getValue() != null) {
						EnvironmentConfig.SetLoggingLevel(form.lyr1().Option().cmbFlagOptions().getValue());
					}
					else { 
						form.lyr1().Option().cmbFlagOptions().setValue(EnvironmentConfig.GetLoggingLevel());
					}
				}
				else if (form.treFlags().getSelectedNode().getText().equals(HIBERNATE_USE_SQL_COMMENTS))
				{
					EnvironmentConfig.setHibernateUseSQLComments(form.lyr1().Boolean().chkVal().getValue());
				}
				else if (form.treFlags().getSelectedNode().getText().equals(RESULT_TOP_MAX))
				{
					if (form.lyr1().Integer().intVal().getValue() != null) {
						EnvironmentConfig.setResultSetTopMax(form.lyr1().Integer().intVal().getValue());
					}
					else {
						form.lyr1().Integer().intVal().setValue(EnvironmentConfig.getResultSetTopMax());
					}
				}
				else if (form.treFlags().getSelectedNode().getText().equals(RESULT_SET_DEFAULT_MAX))
				{
					if (form.lyr1().Integer().intVal().getValue() != null) {
						EnvironmentConfig.setResultSetDefaultMax(form.lyr1().Integer().intVal().getValue());
					}
					else {
						form.lyr1().Integer().intVal().setValue(EnvironmentConfig.getResultSetDefaultMax());
					}
				}		
				
				setViewMode();				
				form.getContextMenus().getConfigFlagUpdateItem().setVisible(true);							
			}
		}
	}
	
	protected void onTreFlagsTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException 
	{
		form.getContextMenus().getConfigFlagUpdateItem().setVisible(false);	//wdev-15098	
		//form.getContextMenus().getConfigFlagResetItem().setVisible(true); WDEV-14214	
		
		if (node.getValue() != null && node.getValue() instanceof FlagCategoryVo)
		{
			form.getContextMenus().getConfigFlagUpdateItem().setVisible(false);
			form.getContextMenus().getConfigFlagResetItem().setVisible(false);
			if (node.getNodes().size() > 0) return;

			IFlag[] coll = domain.listFlags((FlagCategoryVo)node.getValue());
			populateGrid(node,coll);
			node.setExpanded(true);
		}
		else if (node.getValue() != null && node.getValue() instanceof IFlag)
		{			
			form.getContextMenus().getConfigFlagUpdateItem().setVisible(true);	
			//form.getContextMenus().getConfigFlagResetItem().setVisible(true); WDEV-14214 
			IFlag flag = (IFlag)node.getValue();
			form.getLocalContext().setisSystemFlag(flag.isSystem());
			setFields(flag);	
		}		
		else if (node.getValue() != null && node.getText().equals(SHOW_SQL))
		{
			resetContextMenu();						
			form.getLocalContext().setisSystemFlag(true);
			form.txtComment().setValue("Show SQL");
			form.txtName().setValue("SHOW_SQL");
			form.txtDefault().setValue("");
			form.lyr1().Lookups().cmbLookupInstance().setVisible(false);
			form.lyr1().Boolean().chkVal().setValue(EnvironmentConfig.getShowSQL());
			form.lyr1().showBoolean();		
		}
		else if (node.getValue() != null &&  node.getText().equals(LOGGIN_LEVEL))
		{			
			resetContextMenu();			
			form.getLocalContext().setisSystemFlag(true);
			form.txtComment().setValue("Accepted values:  FATAL, ERROR, WARN, INFO, DEBUG");
			form.txtName().setValue("LOGGING_LEVEL");
			form.txtDefault().setValue("");
			form.lyr1().Lookups().cmbLookupInstance().setVisible(false);			
			
			String[] allowedValues = {"FATAL", "ERROR", "WARN", "INFO", "DEBUG"};
			
			for (int i = 0; i < allowedValues.length; i++)
			{
				form.lyr1().Option().cmbFlagOptions().newRow(allowedValues[i], allowedValues[i]);
			}
			form.lyr1().Option().cmbFlagOptions().setValue(EnvironmentConfig.GetLoggingLevel());			
			form.lyr1().showOption();				
		}
		else if (node.getValue() != null && node.getText().equals(HIBERNATE_USE_SQL_COMMENTS))
		{
			resetContextMenu();			
			form.getLocalContext().setisSystemFlag(true);			
			form.txtComment().setValue("Hibernate use Sql comments");
			form.txtName().setValue("HIBERNATE_USE_SQL_COMMENTS");
			form.txtDefault().setValue("");
			form.lyr1().Lookups().cmbLookupInstance().setVisible(false);
			form.lyr1().Boolean().chkVal().setValue(EnvironmentConfig.getHibernateUseSQLComments());
			form.lyr1().showBoolean();					
		}
		else if (node.getValue() != null && node.getText().equals(RESULT_TOP_MAX))
		{
			resetContextMenu();			
			form.getLocalContext().setisSystemFlag(true);			
			form.txtComment().setValue("Result top max");
			form.txtName().setValue("RESULT_TOP_MAX");
			form.txtDefault().setValue("");
			form.lyr1().Lookups().cmbLookupInstance().setVisible(false);			
			form.lyr1().Integer().intVal().setValue(EnvironmentConfig.getResultSetTopMax());
 			form.lyr1().showInteger();		
		}
		else if (node.getValue() != null && node.getText().equals(RESULT_SET_DEFAULT_MAX))
		{
			resetContextMenu();			
			form.getLocalContext().setisSystemFlag(true);		
			form.txtComment().setValue("Result set default max");
			form.txtName().setValue("RESULT_SET_DEFAULT_MAX");
			form.txtDefault().setValue("");
			form.lyr1().Lookups().cmbLookupInstance().setVisible(false);			
			form.lyr1().Integer().intVal().setValue(EnvironmentConfig.getResultSetDefaultMax());
			form.lyr1().showInteger();	
		}										
	}

	private void resetContextMenu() {
		form.getContextMenus().hideAllConfigFlagMenuItems();
		form.getContextMenus().getConfigFlagUpdateItem().setVisible(true);			
		return;
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		form.getLocalContext().setLastMenuId(menuItemID);
		
		if (menuItemID == GenForm.ContextMenus.ConfigFlag.Update)
		{
			if(form.getLocalContext().getisSystemFlag() && !form.getLocalContext().getPasswordEntered())
			{
				form.getGlobalContext().Core.setYesNoDialogMessage("Incorrect use of System Flags can cause application failure. Please use with caution.");
				engine.open(form.getForms().Core.YesNoDialog);
			}
			else
			{
				editFlag();
			}
		
		}
		else if (menuItemID == GenForm.ContextMenus.ConfigFlag.Reload)
		{
			try
			{
				ConfigFlag.reloadFlags();
				setupRootRows();
			}
			catch (Exception e)
			{
				throw new RuntimeException(e);
			}
		}
		else if (menuItemID == GenForm.ContextMenus.ConfigFlag.Reset)
		{
			if(form.getLocalContext().getisSystemFlag() && !form.getLocalContext().getPasswordEntered())
			{
				form.getGlobalContext().Core.setYesNoDialogMessage("Incorrect use of System Flags can cause application failure. Please use with caution.");
				engine.open(form.getForms().Core.YesNoDialog);
			}
			else
			{
				resetFlag();
			}
		}
		else if (menuItemID == GenForm.ContextMenus.ConfigFlag.Import)
		{
			Object[] params = new Object[1]; 
			params[0] = ims.admin.vo.enums.ConfigFlags.IMPORT;
			engine.open(form.getForms().Admin.ConfigFlagsImportExport, params);
		}
	}

	private void resetFlag() 
	{
		IFlag flag = (IFlag)form.treFlags().getValue();
		//flag.setToDefault();
		form.getLocalContext().setisSystemFlag(flag.isSystem());
		setFields(flag);
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.YesNoDialog) && (result.equals(DialogResult.OK) ||result.equals(DialogResult.YES) ))
		{
			String password = form.getGlobalContext().getPasswordEntered();
			//********************************************************************
			//	IMPORTANT - YOU NEED TO ENTER A SECURE LOCAL PASSWORD BELOW
			//
			//	Replace the "xxxx" with a password that the system administrators
			//	will remember. The password is hard coded and so must be entered
			//	before the code is built. The password will give access to low-level
			//	system configuration parameters and incorrectly setting these
			//	could cause unexpected results or damage your data.
			//********************************************************************
			if (password == null || !password.equals("xxxx"))
			{
				engine.showMessage("Incorrect password entered");
				return;
			}
			form.getLocalContext().setPasswordEntered(Boolean.TRUE);
			
			if(form.getLocalContext().getLastMenuId() != null)
			{
				if(form.getLocalContext().getLastMenuId() == GenForm.ContextMenus.ConfigFlag.Update)
				{
					editFlag();
					//setupRootRows();
					//onBtnApplyClick();
				}
				else if(form.getLocalContext().getLastMenuId() == GenForm.ContextMenus.ConfigFlag.Reset)
				{
					resetFlag();
				}
			}
		}
		//WDEV-18126
		if (formName.equals(form.getForms().Admin.ConfigFlagsDiff))
		{
			engine.close(result);
		}
		
	}

	private void editFlag() 
	{
		form.setMode(FormMode.EDIT);
		hideContextMenus();
				
		
		if (form.treFlags().getValue() instanceof IFlag)
		{
			IFlag flag = (IFlag)form.treFlags().getValue();
			if (flag.hasOptions())			
			{
				form.lyr1().Option().cmbFlagOptions().clear();
				String[] opts = flag.getOptions();
				for (int i = 0; i < opts.length; i++)
				{
					form.lyr1().Option().cmbFlagOptions().newRow(opts[i], opts[i]);
				}
				form.lyr1().Option().cmbFlagOptions().setValue(((StringInternalFlag)flag).getValue());
			}
		}		
	}

	private void setFields(IFlag flag) 
	{
		form.txtComment().setValue(flag.getComment());
		form.txtName().setValue(flag.getName());
		form.txtDefault().setValue(flag.getDefaultValAsString());
		form.lyr1().Lookups().cmbLookupInstance().setVisible(false);
		setTypeSpecificValue(flag);		
	}

	private void setTypeSpecificValue(IFlag flag)
	{
		FlagType type = flag.getType();
		if (flag.hasOptions())
		{
			StringInternalFlag sf = (StringInternalFlag)flag;
			form.lyr1().Option().cmbFlagOptions().clear();
			form.lyr1().Option().cmbFlagOptions().newRow(sf.getValue(), sf.getValue());
			form.lyr1().showOption();
			form.lyr1().Option().cmbFlagOptions().setValue(sf.getValue());
		}		
		else if (type.equals(FlagType.BOOL))
		{
			BooleanInternalFlag bf = (BooleanInternalFlag)flag;
			form.lyr1().Boolean().chkVal().setValue(bf.getValue());
			form.lyr1().showBoolean();
		}
		else if (type.equals(FlagType.COLOUR))
		{
			ColourInternalFlag cf = (ColourInternalFlag)flag;
			form.lyr1().Colour().cmbColours().setValue(cf.getValue());
			form.lyr1().showColour();
		}
		else if (type.equals(FlagType.DECIMAL))
		{
			DecimalInternalFlag df = (DecimalInternalFlag)flag;
			form.lyr1().Decimal().decVal().setValue(new Float(df.getValue()));
			form.lyr1().showDecimal();
		}
		else if (type.equals(FlagType.FORM))
		{
			FormInternalFlag ff = (FormInternalFlag)flag;
			form.lyr1().Form().qmbForm().clear();
			IAppForm regForm = engine.getRegisteredForm(ff.getValue());
			if (regForm == null)
			{
				engine.showMessage("Form with ID = " + ff.getValue().getID() + " is not registered. It cannot be used.");
				form.lyr1().showForm();
				return;
			}
			form.lyr1().Form().qmbForm().newRow(ff.getValue(), regForm.getName());
			form.lyr1().Form().qmbForm().setValue(ff.getValue());
			form.lyr1().showForm();
		}
		else if (type.equals(FlagType.INT))
		{
			IntInternalFlag intf = (IntInternalFlag)flag;
			Integer i = Integer.valueOf(intf.getValue());
			form.lyr1().Integer().intVal().setValue(i);
			form.lyr1().showInteger();
		}
		else if (type.equals(FlagType.STRING))
		{
			StringInternalFlag sf = (StringInternalFlag)flag;
			form.lyr1().String().txtVal().setValue(sf.getValue());
			form.lyr1().showString();
		}		
//		else if (type.equals(FlagType.DATE))
//		{
//			Date d = (Date)val.getValue();
//			form.lyr1().Date().dteVal().setValue(d);
//			form.lyr1().showDate();
//		}
//		else if (type.equals(FlagType.DATETIME))
//		{
//			DateTime d = (DateTime)val.getValue();
//			form.lyr1().DateTime().dtimVal().setValue(d);
//			form.lyr1().showDateTime();
//		}
//		else if (type.equals(FlagType.IMAGE))
//		{
//			form.lyr1().Image().qmbImage().clear();
//			Image i = (Image)val.getValue();
//			//Can get it's actual imagePath rather than just it's id, by retrieving in from the engine's registered images.
//			i = engine.getRegisteredImage(i.getId());
//			if (i == null)
//			{
//				engine.showMessage("Image with ID = " + i.getId() + " is not registered. It cannot be used.");
//				form.lyr1().showNone();
//				return;
//			}
//			form.lyr1().Image().qmbImage().newRow(i, i.getImagePath());
//			form.lyr1().Image().qmbImage().setValue(i);
//			form.lyr1().Image().imgFlagVal().setValue(i);
//			form.lyr1().showImage();
//		}
//		else if (type.equals(FlagType.LKUP_TYPE))
//		{
//			LookupTypeVo lkt = (LookupTypeVo)val.getValue();
//			form.lyr1().Lookups().qmbLookupType().setValue(lkt);
//			form.lyr1().Lookups().cmbLookupInstance().setVisible(false);
//			form.lyr1().showLookups();
//		}
//		else if (type.equals(FlagType.LKUP_INST))
//		{
//			LookupInstVo lkp = (LookupInstVo)val.getValue();
//			LookupTypeVo lkt = domain.getLookupService().getLookupType(lkp.getTypeId());
//			form.lyr1().Lookups().qmbLookupType().setValue(lkt);
//			form.lyr1().Lookups().cmbLookupInstance().setValue(lkp);
//			form.lyr1().Lookups().cmbLookupInstance().setVisible(true);
//			form.lyr1().showLookups();
//		}
//		else if (type.equals(FlagType.TIME))
//		{
//			Time t = (Time)val.getValue();
//			form.lyr1().Time().timVal().setValue(t);
//			form.lyr1().showTime();
//		}		
	}

	private String getEnteredValue(IFlag flag)
	{
		FlagType type = flag.getType();
		if (flag.hasOptions())
		{
			if (form.lyr1().Option().cmbFlagOptions().getValue() == null)
			{
				return null;
			}
			else
			{
				return form.lyr1().Option().cmbFlagOptions().getValue();				
			}
		}		
		else if (type.equals(FlagType.BOOL))
		{
			return "" + form.lyr1().Boolean().chkVal().getValue();
		}
		else if (type.equals(FlagType.COLOUR))
		{
			return (form.lyr1().Colour().cmbColours().getValue() != null) ? form.lyr1().Colour().cmbColours().getValue().getName() : null;
		}
		else if (type.equals(FlagType.DATE))
		{
			return (form.lyr1().Date().dteVal().getValue() != null) ? form.lyr1().Date().dteVal().getValue().toString() : null;
		}
		else if (type.equals(FlagType.DATETIME))
		{
			return (form.lyr1().DateTime().dtimVal().getValue() != null) ? form.lyr1().DateTime().dtimVal().getValue().toString() : null;
		}
		else if (type.equals(FlagType.DECIMAL))
		{
			return (form.lyr1().Decimal().decVal().getValue() != null) ? form.lyr1().Decimal().decVal().getValue().toString() : null;
		}
		else if (type.equals(FlagType.FORM))
		{
			return (form.lyr1().Form().qmbForm().getValue() != null) ? form.lyr1().Form().qmbForm().getValue().toString() : null;
		}
		else if (type.equals(FlagType.IMAGE))
		{
			return (form.lyr1().Image().qmbImage().getValue() != null) ? form.lyr1().Image().qmbImage().getValue().toString() : null;
		}
		else if (type.equals(FlagType.INT))
		{
			return (form.lyr1().Integer().intVal().getValue() != null) ? form.lyr1().Integer().intVal().getValue().toString() : null;
		}
		else if (type.equals(FlagType.LKUP_TYPE))
		{
			return (form.lyr1().Lookups().qmbLookupType().getValue() != null) ? form.lyr1().Lookups().qmbLookupType().getValue().getId() + "" : null;
		}
		else if (type.equals(FlagType.LKUP_INST))
		{
			return (form.lyr1().Lookups().cmbLookupInstance().getValue() != null) ? form.lyr1().Lookups().cmbLookupInstance().getValue().getId() + "" : null;
		}
		else if (type.equals(FlagType.STRING))
		{
			return form.lyr1().String().txtVal().getValue();
		}		
		else if (type.equals(FlagType.TIME))
		{
			return (form.lyr1().Time().timVal().getValue() != null) ? form.lyr1().Time().timVal().getValue().toString() : null;
		}				
		return null;
	}

	protected void onQmbFormTextSubmited(String value) throws PresentationLogicException
	{
		form.lyr1().Form().qmbForm().clear();
		
		IAppForm[] regForms = engine.getRegisteredForms();
		for (int i = 0; i < regForms.length; i++)
		{
			IAppForm doForm = regForms[i];
			if (doForm.getName().toUpperCase().lastIndexOf(value.toUpperCase()) != -1)
			{
				class FlagFormName extends FormName
				{
					private static final long	serialVersionUID	= -7437284644756480494L;
					protected FlagFormName(int id, String name)
					{
						super(id, name);
					}
				}
				FlagFormName flagForm = new FlagFormName(doForm.getFormId(), doForm.getName());
				form.lyr1().Form().qmbForm().newRow(flagForm, flagForm.getName());
			}
		}
		if (form.lyr1().Form().qmbForm().getValues().size() == 1)
		{
			form.lyr1().Form().qmbForm().setValue((FormName)form.lyr1().Form().qmbForm().getValues().get(0));
		}
		else if (form.lyr1().Form().qmbForm().getValues().size() > 1)
		{
			form.lyr1().Form().qmbForm().showOpened();
		}
	}

	protected void onQmbImageValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	protected void onQmbImageTextSubmited(String value) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	protected void onQmbLookupTypeValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	protected void onQmbLookupTypeTextSubmited(String value) throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		
	}

	
	
	protected void onChkHl7ValueChanged() throws PresentationLogicException 
	{
		saveDisplayOptions();
	}

	protected void onChkDtoValueChanged() throws PresentationLogicException 
	{
		saveDisplayOptions();
	}

	protected void onChkGenValueChanged() throws PresentationLogicException 
	{
		saveDisplayOptions();
	}

	protected void onChkFwValueChanged() throws PresentationLogicException 
	{
		saveDisplayOptions();
	}

	protected void onChkDataValueChanged() throws PresentationLogicException 
	{
		saveDisplayOptions();
	}

	protected void onChkUiValueChanged() throws PresentationLogicException 
	{
		saveDisplayOptions();
	}

	private void saveDisplayOptions() 
	{
		StringBuffer val = new StringBuffer("");
		if (form.chkFw().getValue()) val.append("FW,");
		if (form.chkDto().getValue()) val.append("DTO,");
		if (form.chkGen().getValue()) val.append("GEN,");
		if (form.chkHl7().getValue()) val.append("HL7,");
		if (form.chkUi().getValue()) val.append("UI,");
		if (form.chkData().getValue()) val.append("DOM,");
		form.chkEnviroment().setValue(false);
		
		String full = val.toString();
		if (full.endsWith(",")) full = full.substring(0,full.length()-1);
		if (full.equals("")) full = "NONE";
		
		try
		{
			domain.saveConfigFlag(ConfigFlag.getConfigFlag(ConfigFlag.DISPLAY_CHOICE.getName()), full);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		setupRootRows();
	}

	protected void onBtnApplyClick() throws PresentationLogicException
	{
		String filter = form.txtFilter().getValue();
		if (filter == null || filter.equals(""))
			return;
		
		setupRootRows();
		for (int i = 0; i < form.treFlags().getNodes().size(); i++)
		{
			TreeNode rootNode = form.treFlags().getNodes().get(i);
			IFlag[] coll = domain.listFlags((FlagCategoryVo)rootNode.getValue(), filter);			
			populateGrid(rootNode,coll);
			rootNode.setExpanded(true);
		}
		form.txtFilter().setFocus();		
	}
	private void hideContextMenus()
	{
		form.getContextMenus().hideAllConfigFlagMenuItems();
	}
	
	//WDEV-18126 open Update Flags dialog with maximize feature
	@Override
	protected void onBtnDiffClick() throws PresentationLogicException
	{
	  engine.open(form.getForms().Admin.ConfigFlagsDiff, true, true);
		
	}

	@Override
	protected void onChkEnviromentValueChanged() throws PresentationLogicException 
	{
		if (form.chkEnviroment().getValue())
		{
			//WDEV-18126 
			TreeNode node = form.treFlags().getNodes().add("EnviromentConfig", "Environment Config");		
			node.setExpandedImage(form.getImages().Core.OpenFolder);
			node.setCollapsedImage(form.getImages().Core.ClosedFolder);	
			populateTreeWithEnviromentConfigs();
			//setContextMenu();	//WDEV-14788	
		}
		else
		{
			selectCheckBoxes(true);
			open();
			populateColorCombo();
		}
	}

	private void populateTreeWithEnviromentConfigs() 
	{			 		
		for (int i = 0; i < collection.length; i++) 
		{
			 TreeNode root = form.treFlags().getNodes().getNodeByValue("EnviromentConfig");
			 if (root != null)
		     {
				 TreeNode node = root.getNodes().add(collection[i], collection[i]);
		    	 node.setExpandedImage(form.getImages().Core.RedFlag);
		    	 node.setCollapsedImage(form.getImages().Core.RedFlag);
		     }
		}			
	}

	private void selectCheckBoxes(boolean select) 
	{
		form.chkData().setValue(select);
		form.chkDto().setValue(select);
		form.chkFw().setValue(select);
		form.chkGen().setValue(select);
		form.chkHl7().setValue(select);
		form.chkUi().setValue(select);		
	}


}
