//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Michael Noonan using IMS Development Environment (version 1.53 build 2620.27330)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.servicestats;

import ims.admin.forms.servicestats.GenForm.grdMonitorListRow;
import ims.admin.vo.ServiceMonitorVoCollection;
import ims.admin.vo.ServiceMonitorVo;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateGrid(domain.getServiceMonitors(null));
		form.txtSearch().setFocus();
	}
	protected void onBtnApplyClick() throws ims.framework.exceptions.PresentationLogicException
	{
		populateGrid(domain.getServiceMonitors(form.txtSearch().getValue()));
		form.txtSearch().setFocus();
	}
	protected void onBtnResetCounterClick() throws ims.framework.exceptions.PresentationLogicException
	{
		domain.resetMonitor();
		populateGrid(domain.getServiceMonitors(form.txtSearch().getValue()));
		form.txtSearch().setFocus();
	}
	
	private void populateGrid(ServiceMonitorVoCollection monitors)
	{
		form.grdMonitorList().getRows().clear();
		grdMonitorListRow row;
		ServiceMonitorVo vo = null;
		for(int i=0;i<monitors.size();i++)
		{
			vo = monitors.get(i);
			
			row = form.grdMonitorList().getRows().newRow();
			row.setServiceName(vo.getServiceName());
			row.setHits(vo.getHits());
			row.setAvg(vo.getAvg());
			row.setTotal(vo.getTotal());
			row.setStdDev(vo.getStdDev().toString());
			row.setLastValue(vo.getLast().toString());
			row.setMin(vo.getMin().toString());
			row.setMax(vo.getMax().toString());
			row.setActive(vo.getActive().toString());
			row.setAvgActive(vo.getAvgActive().toString());
			row.setMaxActive(vo.getMaxActive().toString());
			row.setFirstAccess(vo.getFirstAccess().toString());
			row.setLastAccess(vo.getLastAccess().toString());
		}

	}

}
