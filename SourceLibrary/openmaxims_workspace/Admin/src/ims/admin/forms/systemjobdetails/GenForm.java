//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.systemjobdetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrConfigurationLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabSchedulingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrCronLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabPreviewContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
					}
		
				}
				public static class tabDailyContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 160, 106, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "day(s) and/or", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 64, 106, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Every ", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 432, 106, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "minute(s)", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 296, 106, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "hour(s) and/or", new Integer(1), null, new Integer(0)}));
				
						// IntBox Controls
						RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 112, 104, 24, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(3)}));
						RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 392, 104, 24, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(2)}));
						RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 256, 104, 24, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(2)}));
					}
		
					public IntBox intDays()
					{
						return (IntBox)super.getControl(4);
					}
					public IntBox intMinutes()
					{
						return (IntBox)super.getControl(5);
					}
					public IntBox intHours()
					{
						return (IntBox)super.getControl(6);
					}
				}
				public static class tabWeeklyContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 88, 104, 24, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "On:", new Integer(1), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 456, 104, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// CheckBox Controls
						RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 400, 104, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Sun", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 352, 104, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Sat", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 312, 104, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Fri", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 264, 104, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Thu", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 216, 104, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Wed", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 168, 104, 40, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Tue", Boolean.TRUE, null}));
						RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 120, 104, 48, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Mon", Boolean.TRUE, null}));
				
						// IntBox Controls
						RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 440, 104, 8, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
					}
		
					public TextBox txt1()
					{
						return (TextBox)super.getControl(1);
					}
					public CheckBox chkSun()
					{
						return (CheckBox)super.getControl(2);
					}
					public CheckBox chkSat()
					{
						return (CheckBox)super.getControl(3);
					}
					public CheckBox chkFri()
					{
						return (CheckBox)super.getControl(4);
					}
					public CheckBox chkThu()
					{
						return (CheckBox)super.getControl(5);
					}
					public CheckBox chkWed()
					{
						return (CheckBox)super.getControl(6);
					}
					public CheckBox chkTue()
					{
						return (CheckBox)super.getControl(7);
					}
					public CheckBox chkMon()
					{
						return (CheckBox)super.getControl(8);
					}
					public IntBox intWeekly()
					{
						return (IntBox)super.getControl(9);
					}
				}
				public static class tabMonthlyContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 88, 104, 145, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "On this day of the month", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 296, 104, 14, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "at", new Integer(0), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 376, 102, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				
						// Time Controls
						RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 312, 102, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, null, Boolean.FALSE, ""}));
				
						// IntBox Controls
						RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 240, 102, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(9)}));
					}
		
					public TextBox txt2()
					{
						return (TextBox)super.getControl(2);
					}
					public TimeControl timMonthlyTime()
					{
						return (TimeControl)super.getControl(3);
					}
					public IntBox intDayOfMonth()
					{
						return (IntBox)super.getControl(4);
					}
				}
				public static class tabAdvancedContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 496, 104, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Year", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 408, 104, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Day of week	", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 352, 104, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Month", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 256, 104, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Day of month", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 200, 104, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hours", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 128, 104, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Minutes", new Integer(1), null, new Integer(0)}));
						RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 56, 104, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Seconds", new Integer(1), null, new Integer(0)}));
				
						// TextBox Controls
						RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 496, 120, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 424, 120, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 352, 120, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 272, 120, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 200, 120, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 128, 120, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
						RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 56, 120, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					}
		
					public TextBox txtYear()
					{
						return (TextBox)super.getControl(7);
					}
					public TextBox txtDayOfWeek()
					{
						return (TextBox)super.getControl(8);
					}
					public TextBox txtMonth()
					{
						return (TextBox)super.getControl(9);
					}
					public TextBox txtDayOfMonth()
					{
						return (TextBox)super.getControl(10);
					}
					public TextBox txtHours()
					{
						return (TextBox)super.getControl(11);
					}
					public TextBox txtMinutes()
					{
						return (TextBox)super.getControl(12);
					}
					public TextBox txtSeconds()
					{
						return (TextBox)super.getControl(13);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 592, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabPreview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabPreviewContainer m_tabPreviewContainer = (tabPreviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPreviewContainer.class, m_tabPreview, factory);
					super.addContainer(m_tabPreview, m_tabPreviewContainer);
					ims.framework.utils.SizeInfo m_tabPreviewDesignSize = new ims.framework.utils.SizeInfo(592, 272);
					ims.framework.utils.SizeInfo m_tabPreviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper37.getWidth(), anchoringHelper37.getHeight());
					m_tabPreviewContainer.setContext(form, appForm, m_tabPreview, loader, form_images_local, contextMenus, startControlID, m_tabPreviewDesignSize, m_tabPreviewRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 592, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabDaily = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Daily", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabDailyContainer m_tabDailyContainer = (tabDailyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDailyContainer.class, m_tabDaily, factory);
					super.addContainer(m_tabDaily, m_tabDailyContainer);
					ims.framework.utils.SizeInfo m_tabDailyDesignSize = new ims.framework.utils.SizeInfo(592, 272);
					ims.framework.utils.SizeInfo m_tabDailyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
					m_tabDailyContainer.setContext(form, appForm, m_tabDaily, loader, form_images_local, contextMenus, startControlID, m_tabDailyDesignSize, m_tabDailyRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 592, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabWeekly = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Weekly", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabWeeklyContainer m_tabWeeklyContainer = (tabWeeklyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabWeeklyContainer.class, m_tabWeekly, factory);
					super.addContainer(m_tabWeekly, m_tabWeeklyContainer);
					ims.framework.utils.SizeInfo m_tabWeeklyDesignSize = new ims.framework.utils.SizeInfo(592, 272);
					ims.framework.utils.SizeInfo m_tabWeeklyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper39.getWidth(), anchoringHelper39.getHeight());
					m_tabWeeklyContainer.setContext(form, appForm, m_tabWeekly, loader, form_images_local, contextMenus, startControlID, m_tabWeeklyDesignSize, m_tabWeeklyRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 592, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabMonthly = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Monthly", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabMonthlyContainer m_tabMonthlyContainer = (tabMonthlyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMonthlyContainer.class, m_tabMonthly, factory);
					super.addContainer(m_tabMonthly, m_tabMonthlyContainer);
					ims.framework.utils.SizeInfo m_tabMonthlyDesignSize = new ims.framework.utils.SizeInfo(592, 272);
					ims.framework.utils.SizeInfo m_tabMonthlyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
					m_tabMonthlyContainer.setContext(form, appForm, m_tabMonthly, loader, form_images_local, contextMenus, startControlID, m_tabMonthlyDesignSize, m_tabMonthlyRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 592, 272, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					Container m_tabAdvanced = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Advanced", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabAdvancedContainer m_tabAdvancedContainer = (tabAdvancedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAdvancedContainer.class, m_tabAdvanced, factory);
					super.addContainer(m_tabAdvanced, m_tabAdvancedContainer);
					ims.framework.utils.SizeInfo m_tabAdvancedDesignSize = new ims.framework.utils.SizeInfo(592, 272);
					ims.framework.utils.SizeInfo m_tabAdvancedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper41.getWidth(), anchoringHelper41.getHeight());
					m_tabAdvancedContainer.setContext(form, appForm, m_tabAdvanced, loader, form_images_local, contextMenus, startControlID, m_tabAdvancedDesignSize, m_tabAdvancedRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabPreview().setVisible(false);
					tabDaily().setVisible(false);
					tabWeekly().setVisible(false);
					tabMonthly().setVisible(false);
					tabAdvanced().setVisible(false);
				}
				public void settabPreviewEnabled(boolean value)
				{
					tabPreview().setEnabled(value);
				}
				public void settabDailyEnabled(boolean value)
				{
					tabDaily().setEnabled(value);
				}
				public void settabWeeklyEnabled(boolean value)
				{
					tabWeekly().setEnabled(value);
				}
				public void settabMonthlyEnabled(boolean value)
				{
					tabMonthly().setEnabled(value);
				}
				public void settabAdvancedEnabled(boolean value)
				{
					tabAdvanced().setEnabled(value);
				}
				public void showtabPreview()
				{
					tabDaily().setVisible(false);
					tabWeekly().setVisible(false);
					tabMonthly().setVisible(false);
					tabAdvanced().setVisible(false);
					tabPreview().setVisible(true);
				}
				public void showtabDaily()
				{
					tabPreview().setVisible(false);
					tabWeekly().setVisible(false);
					tabMonthly().setVisible(false);
					tabAdvanced().setVisible(false);
					tabDaily().setVisible(true);
				}
				public void showtabWeekly()
				{
					tabPreview().setVisible(false);
					tabDaily().setVisible(false);
					tabMonthly().setVisible(false);
					tabAdvanced().setVisible(false);
					tabWeekly().setVisible(true);
				}
				public void showtabMonthly()
				{
					tabPreview().setVisible(false);
					tabDaily().setVisible(false);
					tabWeekly().setVisible(false);
					tabAdvanced().setVisible(false);
					tabMonthly().setVisible(true);
				}
				public void showtabAdvanced()
				{
					tabPreview().setVisible(false);
					tabDaily().setVisible(false);
					tabWeekly().setVisible(false);
					tabMonthly().setVisible(false);
					tabAdvanced().setVisible(true);
				}
		
				public tabPreviewContainer tabPreview()
				{
					return (tabPreviewContainer)super.layers.get(0);
				}
				public tabDailyContainer tabDaily()
				{
					return (tabDailyContainer)super.layers.get(1);
				}
				public tabWeeklyContainer tabWeekly()
				{
					return (tabWeeklyContainer)super.layers.get(2);
				}
				public tabMonthlyContainer tabMonthly()
				{
					return (tabMonthlyContainer)super.layers.get(3);
				}
				public tabAdvancedContainer tabAdvanced()
				{
					return (tabAdvancedContainer)super.layers.get(4);
				}
			}
			public static class cmbFrequencyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.JobRunningFrequency value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.JobRunningFrequency value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.JobRunningFrequency value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.JobRunningFrequency value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.JobRunningFrequency value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.JobRunningFrequency getValue()
				{
					return (ims.core.vo.lookups.JobRunningFrequency)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.JobRunningFrequency value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrCronLayer m_lyrCronLayer = (lyrCronLayer)LayerFlyweightFactory.getInstance().createLayer(lyrCronLayer.class, this, factory);
				super.addLayer(m_lyrCronLayer);
				m_lyrCronLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 24, 14, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 24, 46, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start job at:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 24, 78, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "and run it", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 104, 12, 512, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(240), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 424, 44, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 104, 44, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, "Invalid Date Time", Boolean.TRUE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 104, 76, 512, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbFrequencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbFrequencyTemp);
				cmbFrequencyComboBox cmbFrequency = (cmbFrequencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFrequencyComboBox.class, m_cmbFrequencyTemp);
				super.addComboBox(cmbFrequency);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 352, 46, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"stop at:", Boolean.TRUE, null}));
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 24, 400, 592, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public lyrCronLayer lyrCron()
			{
				return (lyrCronLayer)super.getLayer(0);
			}
			public TextBox txtName()
			{
				return (TextBox)super.getControl(8);
			}
			public DateTimeControl dtimStop()
			{
				return (DateTimeControl)super.getControl(9);
			}
			public DateTimeControl dtimStartDate()
			{
				return (DateTimeControl)super.getControl(10);
			}
			public cmbFrequencyComboBox cmbFrequency()
			{
				return (cmbFrequencyComboBox)super.getComboBox(0);
			}
			public CheckBox chkStop()
			{
				return (CheckBox)super.getControl(12);
			}
			public HTMLViewer htmPreview()
			{
				return (HTMLViewer)super.getControl(13);
			}
		}
		public static class tabConfigurationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// DynamicForm Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 592, 424, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicForm.class, form, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL}));
			}

			public DynamicForm dynamicFormConfiguration()
			{
				return (DynamicForm)super.getControl(0);
			}
		}
		public static class tabNotificationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdFailedRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdFailedRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColUserReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColUserReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColUserOpened()
				{
					super.row.showOpened(0);
				}
				public String getColUser()
				{
					return (String)super.row.get(0);
				}
				public void setColUser(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColUserTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDeliveryReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDeliveryReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDeliveryOpened()
				{
					super.row.showOpened(1);
				}
				public String getColDelivery()
				{
					return (String)super.row.get(1);
				}
				public void setColDelivery(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColDeliveryTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.ConfiguredJobNotificationVo getValue()
				{
					return (ims.core.vo.ConfiguredJobNotificationVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.ConfiguredJobNotificationVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdFailedRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdFailedRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdFailedRow get(int index)
				{
					return new grdFailedRow(super.collection.get(index));
				}
				public grdFailedRow newRow()
				{
					return new grdFailedRow(super.collection.newRow());
				}
				public grdFailedRow newRow(boolean autoSelect)
				{
					return new grdFailedRow(super.collection.newRow(autoSelect));
				}
				public grdFailedRow newRowAt(int index)
				{
					return new grdFailedRow(super.collection.newRowAt(index));
				}
				public grdFailedRow newRowAt(int index, boolean autoSelect)
				{
					return new grdFailedRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdFailedGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addHtmlColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addHtmlColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, canGrow);
				}
				public ims.core.vo.ConfiguredJobNotificationVoCollection getValues()
				{
					ims.core.vo.ConfiguredJobNotificationVoCollection listOfValues = new ims.core.vo.ConfiguredJobNotificationVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.ConfiguredJobNotificationVo getValue()
				{
					return (ims.core.vo.ConfiguredJobNotificationVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.ConfiguredJobNotificationVo value)
				{
					super.grid.setValue(value);
				}
				public grdFailedRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdFailedRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdFailedRowCollection getRows()
				{
					return new grdFailedRowCollection(super.grid.getRows());
				}
				public grdFailedRow getRowByValue(ims.core.vo.ConfiguredJobNotificationVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdFailedRow(row);
				}
				public void setColUserHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColUserHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDeliveryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDeliveryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdSuccessfulyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSuccessfulyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColUserReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColUserReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColUserOpened()
				{
					super.row.showOpened(0);
				}
				public String getColUser()
				{
					return (String)super.row.get(0);
				}
				public void setColUser(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColUserTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDeliveryReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDeliveryReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDeliveryOpened()
				{
					super.row.showOpened(1);
				}
				public String getColDelivery()
				{
					return (String)super.row.get(1);
				}
				public void setColDelivery(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColDeliveryTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.ConfiguredJobNotificationVo getValue()
				{
					return (ims.core.vo.ConfiguredJobNotificationVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.ConfiguredJobNotificationVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSuccessfulyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSuccessfulyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSuccessfulyRow get(int index)
				{
					return new grdSuccessfulyRow(super.collection.get(index));
				}
				public grdSuccessfulyRow newRow()
				{
					return new grdSuccessfulyRow(super.collection.newRow());
				}
				public grdSuccessfulyRow newRow(boolean autoSelect)
				{
					return new grdSuccessfulyRow(super.collection.newRow(autoSelect));
				}
				public grdSuccessfulyRow newRowAt(int index)
				{
					return new grdSuccessfulyRow(super.collection.newRowAt(index));
				}
				public grdSuccessfulyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSuccessfulyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSuccessfulyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addHtmlColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addHtmlColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, canGrow);
				}
				public ims.core.vo.ConfiguredJobNotificationVoCollection getValues()
				{
					ims.core.vo.ConfiguredJobNotificationVoCollection listOfValues = new ims.core.vo.ConfiguredJobNotificationVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.ConfiguredJobNotificationVo getValue()
				{
					return (ims.core.vo.ConfiguredJobNotificationVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.ConfiguredJobNotificationVo value)
				{
					super.grid.setValue(value);
				}
				public grdSuccessfulyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSuccessfulyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSuccessfulyRowCollection getRows()
				{
					return new grdSuccessfulyRowCollection(super.grid.getRows());
				}
				public grdSuccessfulyRow getRowByValue(ims.core.vo.ConfiguredJobNotificationVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSuccessfulyRow(row);
				}
				public void setColUserHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColUserHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDeliveryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDeliveryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 194, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "When job execution failed notify:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 223, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "When job executed successfuly notify:", new Integer(1), null, new Integer(0)}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 256, 624, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdFailedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailed, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdFailedTemp);
				grdFailedGrid grdFailed = (grdFailedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFailedGrid.class, m_grdFailedTemp);
				grdFailed.addStringColumn("User", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFailed.addHtmlColumn("Delivery Mechanisms", 0, 0, -1, true, false, 0, true);
				super.addGrid(grdFailed);
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 624, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdSuccessfulyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Admin.contextMenuSystemJobDetailsNotification, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSuccessfulyTemp);
				grdSuccessfulyGrid grdSuccessfuly = (grdSuccessfulyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSuccessfulyGrid.class, m_grdSuccessfulyTemp);
				grdSuccessfuly.addStringColumn("User", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSuccessfuly.addHtmlColumn("Delivery Mechanisms", 0, 0, -1, true, false, 0, true);
				super.addGrid(grdSuccessfuly);
			}

			public grdFailedGrid grdFailed()
			{
				return (grdFailedGrid)super.getGrid(0);
			}
			public grdSuccessfulyGrid grdSuccessfuly()
			{
				return (grdSuccessfulyGrid)super.getGrid(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 648, 496, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabScheduling = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Scheduling", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSchedulingContainer m_tabSchedulingContainer = (tabSchedulingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSchedulingContainer.class, m_tabScheduling, factory);
			super.addContainer(m_tabScheduling, m_tabSchedulingContainer);
			ims.framework.utils.SizeInfo m_tabSchedulingDesignSize = new ims.framework.utils.SizeInfo(648, 496);
			ims.framework.utils.SizeInfo m_tabSchedulingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper56.getWidth(), anchoringHelper56.getHeight());
			m_tabSchedulingContainer.setContext(form, appForm, m_tabScheduling, loader, form_images_local, contextMenus, startControlID, m_tabSchedulingDesignSize, m_tabSchedulingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 648, 496, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabConfiguration = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Configuration", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabConfigurationContainer m_tabConfigurationContainer = (tabConfigurationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabConfigurationContainer.class, m_tabConfiguration, factory);
			super.addContainer(m_tabConfiguration, m_tabConfigurationContainer);
			ims.framework.utils.SizeInfo m_tabConfigurationDesignSize = new ims.framework.utils.SizeInfo(648, 496);
			ims.framework.utils.SizeInfo m_tabConfigurationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper57.getWidth(), anchoringHelper57.getHeight());
			m_tabConfigurationContainer.setContext(form, appForm, m_tabConfiguration, loader, form_images_local, contextMenus, startControlID, m_tabConfigurationDesignSize, m_tabConfigurationRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 648, 496, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Container m_tabNotification = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Notification", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabNotificationContainer m_tabNotificationContainer = (tabNotificationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNotificationContainer.class, m_tabNotification, factory);
			super.addContainer(m_tabNotification, m_tabNotificationContainer);
			ims.framework.utils.SizeInfo m_tabNotificationDesignSize = new ims.framework.utils.SizeInfo(648, 496);
			ims.framework.utils.SizeInfo m_tabNotificationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper58.getWidth(), anchoringHelper58.getHeight());
			m_tabNotificationContainer.setContext(form, appForm, m_tabNotification, loader, form_images_local, contextMenus, startControlID, m_tabNotificationDesignSize, m_tabNotificationRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabScheduling().setVisible(false);
			tabConfiguration().setVisible(false);
			tabNotification().setVisible(false);
		}
		public void settabSchedulingEnabled(boolean value)
		{
			tabScheduling().setEnabled(value);
		}
		public void settabConfigurationEnabled(boolean value)
		{
			tabConfiguration().setEnabled(value);
		}
		public void settabNotificationEnabled(boolean value)
		{
			tabNotification().setEnabled(value);
		}
		public void showtabScheduling()
		{
			tabConfiguration().setVisible(false);
			tabNotification().setVisible(false);
			tabScheduling().setVisible(true);
		}
		public void showtabConfiguration()
		{
			tabScheduling().setVisible(false);
			tabNotification().setVisible(false);
			tabConfiguration().setVisible(true);
		}
		public void showtabNotification()
		{
			tabScheduling().setVisible(false);
			tabConfiguration().setVisible(false);
			tabNotification().setVisible(true);
		}

		public tabSchedulingContainer tabScheduling()
		{
			return (tabSchedulingContainer)super.layers.get(0);
		}
		public tabConfigurationContainer tabConfiguration()
		{
			return (tabConfigurationContainer)super.layers.get(1);
		}
		public tabNotificationContainer tabNotification()
		{
			return (tabNotificationContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(664, 552);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailed = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailedNewItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3720001)))
			contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailed.add(contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailedNewItem);
		contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailedEditItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3720002)))
			contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailed.add(contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailedEditItem);
		contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailedRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3720003)))
			contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailed.add(contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailedRemoveItem);
		form.registerMenu(contextMenus.Admin.contextMenuSystemJobDetailsNotificationFailed);
		contextMenus.Admin.contextMenuSystemJobDetailsNotification = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Admin.contextMenuSystemJobDetailsNotificationNewItem = factory.createMenuItem(startControlID.intValue() + 4, "New", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3710001)))
			contextMenus.Admin.contextMenuSystemJobDetailsNotification.add(contextMenus.Admin.contextMenuSystemJobDetailsNotificationNewItem);
		contextMenus.Admin.contextMenuSystemJobDetailsNotificationEditItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3710002)))
			contextMenus.Admin.contextMenuSystemJobDetailsNotification.add(contextMenus.Admin.contextMenuSystemJobDetailsNotificationEditItem);
		contextMenus.Admin.contextMenuSystemJobDetailsNotificationRemoveItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3710003)))
			contextMenus.Admin.contextMenuSystemJobDetailsNotification.add(contextMenus.Admin.contextMenuSystemJobDetailsNotificationRemoveItem);
		form.registerMenu(contextMenus.Admin.contextMenuSystemJobDetailsNotification);


		// Layer Clasess
		lyrConfigurationLayer m_lyrConfigurationLayer = (lyrConfigurationLayer)LayerFlyweightFactory.getInstance().createLayer(lyrConfigurationLayer.class, this, factory);
		super.addLayer(m_lyrConfigurationLayer);
		m_lyrConfigurationLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 424, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "<< Previous", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 504, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next >>", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 504, 520, 73, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 584, 520, 73, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrConfigurationLayer lyrConfiguration()
	{
		return (lyrConfigurationLayer)super.getLayer(0);
	}
	public Button btnPrevious()
	{
		return (Button)super.getControl(3);
	}
	public Button btnNext()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				SystemJobNotificationDialog = new LocalFormName(103221);
			}
			public final FormName SystemJobNotificationDialog;
		}

		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
			Correspondence = new CorrespondenceImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				SystemJobConfigured32 = new ImageHelper(103435, "Images/Admin/SystemJob_ok_32.png", new Integer(32), new Integer(32));
				SystemJobUnconfigured32 = new ImageHelper(103436, "Images/Admin/SystemJob_remove_32.png", new Integer(32), new Integer(32));
				SystemJob32 = new ImageHelper(103434, "Images/Admin/SystemJob_32.png", new Integer(32), new Integer(32));
				ActivityInfo48 = new ImageHelper(103202, "Images/Admin/activity_info_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image SystemJobConfigured32;
			public final ims.framework.utils.Image SystemJobUnconfigured32;
			public final ims.framework.utils.Image SystemJob32;
			public final ims.framework.utils.Image ActivityInfo48;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Notifications48 = new ImageHelper(102531, "Images/Core/instant_message_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image Notifications48;
		}
		public final class CorrespondenceImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CorrespondenceImages()
			{
				MailSend16 = new ImageHelper(111155, "Images/Correspondence/mail_send_16x16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image MailSend16;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
		public final CorrespondenceImages Correspondence;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SystemJob = new ims.framework.ContextVariable("SystemJob", prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__SystemJob_" + componentIdentifier + "");
			cxl_ConfiguredJob = new ims.framework.ContextVariable("ConfiguredJob", prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier + "");
			cxl_CurrentSelectedTab = new ims.framework.ContextVariable("CurrentSelectedTab", prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__CurrentSelectedTab_" + componentIdentifier + "");
			cxl_PreviousSelectedTab = new ims.framework.ContextVariable("PreviousSelectedTab", prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__PreviousSelectedTab_" + componentIdentifier + "");
			cxl_NotificationJobStatus = new ims.framework.ContextVariable("NotificationJobStatus", prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__NotificationJobStatus_" + componentIdentifier + "");
			cxl_NotificationOnSuccess = new ims.framework.ContextVariable("NotificationOnSuccess", prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__NotificationOnSuccess_" + componentIdentifier + "");
			cxl_NotificationOnFailure = new ims.framework.ContextVariable("NotificationOnFailure", prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__NotificationOnFailure_" + componentIdentifier + "");
		}
		
		public boolean getSystemJobIsNotNull()
		{
			return !cxl_SystemJob.getValueIsNull(context);
		}
		public ims.admin.vo.SystemJobVo getSystemJob()
		{
			return (ims.admin.vo.SystemJobVo)cxl_SystemJob.getValue(context);
		}
		public void setSystemJob(ims.admin.vo.SystemJobVo value)
		{
			cxl_SystemJob.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SystemJob = null;
		public boolean getConfiguredJobIsNotNull()
		{
			return !cxl_ConfiguredJob.getValueIsNull(context);
		}
		public ims.admin.vo.ConfiguredJobVo getConfiguredJob()
		{
			return (ims.admin.vo.ConfiguredJobVo)cxl_ConfiguredJob.getValue(context);
		}
		public void setConfiguredJob(ims.admin.vo.ConfiguredJobVo value)
		{
			cxl_ConfiguredJob.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfiguredJob = null;
		public boolean getCurrentSelectedTabIsNotNull()
		{
			return !cxl_CurrentSelectedTab.getValueIsNull(context);
		}
		public Integer getCurrentSelectedTab()
		{
			return (Integer)cxl_CurrentSelectedTab.getValue(context);
		}
		public void setCurrentSelectedTab(Integer value)
		{
			cxl_CurrentSelectedTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentSelectedTab = null;
		public boolean getPreviousSelectedTabIsNotNull()
		{
			return !cxl_PreviousSelectedTab.getValueIsNull(context);
		}
		public Integer getPreviousSelectedTab()
		{
			return (Integer)cxl_PreviousSelectedTab.getValue(context);
		}
		public void setPreviousSelectedTab(Integer value)
		{
			cxl_PreviousSelectedTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousSelectedTab = null;
		public boolean getNotificationJobStatusIsNotNull()
		{
			return !cxl_NotificationJobStatus.getValueIsNull(context);
		}
		public Boolean getNotificationJobStatus()
		{
			return (Boolean)cxl_NotificationJobStatus.getValue(context);
		}
		public void setNotificationJobStatus(Boolean value)
		{
			cxl_NotificationJobStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NotificationJobStatus = null;
		public boolean getNotificationOnSuccessIsNotNull()
		{
			return !cxl_NotificationOnSuccess.getValueIsNull(context);
		}
		public ims.core.vo.ConfiguredJobNotificationVoCollection getNotificationOnSuccess()
		{
			return (ims.core.vo.ConfiguredJobNotificationVoCollection)cxl_NotificationOnSuccess.getValue(context);
		}
		public void setNotificationOnSuccess(ims.core.vo.ConfiguredJobNotificationVoCollection value)
		{
			cxl_NotificationOnSuccess.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NotificationOnSuccess = null;
		public boolean getNotificationOnFailureIsNotNull()
		{
			return !cxl_NotificationOnFailure.getValueIsNull(context);
		}
		public ims.core.vo.ConfiguredJobNotificationVoCollection getNotificationOnFailure()
		{
			return (ims.core.vo.ConfiguredJobNotificationVoCollection)cxl_NotificationOnFailure.getValue(context);
		}
		public void setNotificationOnFailure(ims.core.vo.ConfiguredJobNotificationVoCollection value)
		{
			cxl_NotificationOnFailure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NotificationOnFailure = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public AdminNamespace Admin = new AdminNamespace();
		public final class AdminNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class SystemJobDetailsNotificationFailed implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int New = 1;
				public static final int Edit = 2;
				public static final int Remove = 3;
			}
			public void disableAllSystemJobDetailsNotificationFailedMenuItems()
			{
				this.contextMenuSystemJobDetailsNotificationFailedNewItem.setEnabled(false);
				this.contextMenuSystemJobDetailsNotificationFailedEditItem.setEnabled(false);
				this.contextMenuSystemJobDetailsNotificationFailedRemoveItem.setEnabled(false);
			}
			public void hideAllSystemJobDetailsNotificationFailedMenuItems()
			{
				this.contextMenuSystemJobDetailsNotificationFailedNewItem.setVisible(false);
				this.contextMenuSystemJobDetailsNotificationFailedEditItem.setVisible(false);
				this.contextMenuSystemJobDetailsNotificationFailedRemoveItem.setVisible(false);
			}
			private Menu contextMenuSystemJobDetailsNotificationFailed;
			public ReadOnlyMenuItem getSystemJobDetailsNotificationFailedNewItem()
			{
				return this.contextMenuSystemJobDetailsNotificationFailedNewItem;
			}
			private MenuItem contextMenuSystemJobDetailsNotificationFailedNewItem;
			public ReadOnlyMenuItem getSystemJobDetailsNotificationFailedEditItem()
			{
				return this.contextMenuSystemJobDetailsNotificationFailedEditItem;
			}
			private MenuItem contextMenuSystemJobDetailsNotificationFailedEditItem;
			public ReadOnlyMenuItem getSystemJobDetailsNotificationFailedRemoveItem()
			{
				return this.contextMenuSystemJobDetailsNotificationFailedRemoveItem;
			}
			private MenuItem contextMenuSystemJobDetailsNotificationFailedRemoveItem;
			public final class SystemJobDetailsNotification implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int New = 4;
				public static final int Edit = 5;
				public static final int Remove = 6;
			}
			public void disableAllSystemJobDetailsNotificationMenuItems()
			{
				this.contextMenuSystemJobDetailsNotificationNewItem.setEnabled(false);
				this.contextMenuSystemJobDetailsNotificationEditItem.setEnabled(false);
				this.contextMenuSystemJobDetailsNotificationRemoveItem.setEnabled(false);
			}
			public void hideAllSystemJobDetailsNotificationMenuItems()
			{
				this.contextMenuSystemJobDetailsNotificationNewItem.setVisible(false);
				this.contextMenuSystemJobDetailsNotificationEditItem.setVisible(false);
				this.contextMenuSystemJobDetailsNotificationRemoveItem.setVisible(false);
			}
			private Menu contextMenuSystemJobDetailsNotification;
			public ReadOnlyMenuItem getSystemJobDetailsNotificationNewItem()
			{
				return this.contextMenuSystemJobDetailsNotificationNewItem;
			}
			private MenuItem contextMenuSystemJobDetailsNotificationNewItem;
			public ReadOnlyMenuItem getSystemJobDetailsNotificationEditItem()
			{
				return this.contextMenuSystemJobDetailsNotificationEditItem;
			}
			private MenuItem contextMenuSystemJobDetailsNotificationEditItem;
			public ReadOnlyMenuItem getSystemJobDetailsNotificationRemoveItem()
			{
				return this.contextMenuSystemJobDetailsNotificationRemoveItem;
			}
			private MenuItem contextMenuSystemJobDetailsNotificationRemoveItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[112];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Admin.SystemJob", "BO-1028100056-ID", "ID_SystemJob");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Admin.SystemJob", "BO-1028100056-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Admin.SystemJob", "BO-1028100056-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Admin.SystemJob", "BO-1028100056-IMPLNAME", "ImplName");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Admin.SystemJob", "BO-1028100056-ISACTIVE", "IsActive");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Admin.SystemJob", "BO-1028100056-IMSID", "ImsId");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Admin.SystemJob", "BO-1028100056-CONFIGFORMID", "ConfigFormId");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-ID", "ID_ConfiguredJob");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-STARTDATETIME", "StartDateTime");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-ENDDATETIME", "EndDateTime");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-ISCRONTRIGGER", "IsCronTrigger");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-CRONEXPRESSION", "CronExpression");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-LASTRUN", "LastRun");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-NEXTRUN", "NextRun");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-CRONEXPRESSIONDISPLAY", "CronExpressionDisplay");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-ISACTIVE", "IsActive");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-DESCRIPTION", "Description");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-FREQUENCY", "Frequency");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Admin.CurrentJobConfiguration", "BO-1028100057-NAME", "Name");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Admin.SystemJobNotification", "BO-1028100064-ID", "ID_ConfiguredJobNotification");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Admin.SystemJobNotification", "BO-1028100064-PRIORITY", "Priority");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Admin.SystemJobNotification", "BO-1028100064-USERMESSAGE", "UserMessage");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__SystemJob_" + componentIdentifier, "BO-1028100056-ID", "ID_SystemJob");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__SystemJob_" + componentIdentifier, "BO-1028100056-NAME", "Name");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__SystemJob_" + componentIdentifier, "BO-1028100056-DESCRIPTION", "Description");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__SystemJob_" + componentIdentifier, "BO-1028100056-IMPLNAME", "ImplName");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__SystemJob_" + componentIdentifier, "BO-1028100056-ISACTIVE", "IsActive");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__SystemJob_" + componentIdentifier, "BO-1028100056-IMSID", "ImsId");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__SystemJob_" + componentIdentifier, "BO-1028100056-CONFIGFORMID", "ConfigFormId");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-ID", "ID_ConfiguredJob");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-STARTDATETIME", "StartDateTime");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-ENDDATETIME", "EndDateTime");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-ISCRONTRIGGER", "IsCronTrigger");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-CRONEXPRESSION", "CronExpression");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-LASTRUN", "LastRun");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-NEXTRUN", "NextRun");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-CRONEXPRESSIONDISPLAY", "CronExpressionDisplay");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-ISACTIVE", "IsActive");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-DESCRIPTION", "Description");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-FREQUENCY", "Frequency");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.SystemJobDetails.__internal_x_context__ConfiguredJob_" + componentIdentifier, "BO-1028100057-NAME", "Name");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
