//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.53 build 2641.15357)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.readauditview;

import ims.admin.forms.readauditview.GenForm.grdAuditRow;
import ims.admin.vo.AppUserShortVo;
import ims.admin.vo.AppUserShortVoCollection;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientId;
import ims.core.vo.ReadAuditFilterVo;
import ims.core.vo.ReadAuditVo;
import ims.core.vo.ReadAuditVoCollection;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTimeFormat;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	public void initialize() throws PresentationLogicException
	{
		// Populate the action combo INSERT, UPDATE and DELETE
		form.cmbAction().clear();
		form.cmbAction().newRow("Patient Demographics", "Patient Demographics");
		form.cmbAction().newRow("Patient Clinical", "Patient Clinical");
		
		// The location query combo is only displayed when the location is available
		if (domain.getCurrentLocation() != null)
		{
			form.lblLocation().setVisible(true);
			form.qmbLocation().setVisible(true);
		}
		else
		{

			form.lblLocation().setVisible(false);
			form.qmbLocation().setVisible(false);
		}

	}
	
	public void open()
	{
		form.setMode(FormMode.VIEW);
	}
	
	@Override
	protected void onQmbUsersTextSubmited(String value) throws PresentationLogicException
	{
		populateUsers(domain.listAppUsers(value));
	}
	
	private void populateUsers(AppUserShortVoCollection users)
	{
		// Clear combobox
		form.qmbUsers().clear();
		
		// Terminate function if collection is null
		if (users == null)
		{
			form.qmbUsers().showOpened();
			return;
		}
			
		for (int i = 0; i < users.size(); i ++)
		{
			AppUserShortVo user = users.get(i);
			
			// Skip null users
			if (user == null)
				continue;
			
			form.qmbUsers().newRow(user, user.getUsername());
		}
		
		if (users.size() == 1)
		{
			form.qmbUsers().setValue(users.get(0));
		}
		else if (users.size() > 1)
		{
			form.qmbUsers().showOpened();
		}
	}

	protected void onQmbLocationTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbLocation().clear();
		
		if (value == null || value.equals(""))
		{
			engine.showMessage("Please enter at least one character to search on");
			return;
		}

		LocationLiteVoCollection voCollLocLite = domain.listActiveLocations(value);
		if (voCollLocLite != null && voCollLocLite.size() > 0)
		{
			for (int i = 0; i < voCollLocLite.size(); i++)
			{
				form.qmbLocation().newRow(voCollLocLite.get(i), voCollLocLite.get(i).getName().toString());
			}
			if (voCollLocLite.size() == 1)
				form.qmbLocation().setValue(voCollLocLite.get(0));
			else if (voCollLocLite.size() > 1)
				form.qmbLocation().showOpened();
		}
		else
			engine.showMessage("No matching records found");
	}
	
	
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clear();
	}
		
	private void clear() throws PresentationLogicException 
	{
		form.qmbUsers().setValue(null);
		form.qmbUsers().clear();

		form.qmbLocation().clear();
		form.txtHostName().setValue(null);
		form.cmbAction().setValue(null);
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.txtPatientValue().setValue(null);
		form.cmbPatientType().setValue(null);
		form.grdAudit().setValue(null);
		form.grdAudit().getRows().clear();
		form.lblTotal().setValue("Total: 0");
	}
	
	
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}
	
	private void search()
	{
		
		if (form.cmbPatientType().getValue() != null && form.txtPatientValue().getValue() == null)
		{
			engine.showMessage("Patient Value must be supplied with Patient Type for Search");
			return;
		}
		else if (form.cmbPatientType().getValue() == null && form.txtPatientValue().getValue() != null)
		{
			engine.showMessage("Patient Type must be supplied with Patient Value for Search");
			return;
		}

		
		//Clear down the two grids before the search
		form.grdAudit().setValue(null);
		form.grdAudit().getRows().clear();
		
		// Call the domain to list Audit Records based
		// on the selection criteria
		grdAuditRow row;
		form.grdAudit().getRows().clear();

		ReadAuditFilterVo filter =  this.populateDataFromScreen();
		filter.setAction(form.cmbAction().getValue());
		if (form.qmbUsers().getValue() != null)
			filter.setAuditUser(form.qmbUsers().getValue().getUsername());
		filter.setAuditLocation(form.qmbLocation().getValue());

		if (form.txtPatientValue().getValue() != null)
		{
			PatientId patId = new PatientId();
			patId.setValue(form.txtPatientValue().getValue());
			patId.setType(form.cmbPatientType().getValue());
			filter.setPatient(patId);
		}
		
		ReadAuditVoCollection coll = domain.listReadAuditRecords(filter);
		for (int i=0; i<coll.size(); i++)
		{
			ReadAuditVo audit = coll.get(i);
			row = form.grdAudit().getRows().newRow();
			row.setValue(audit);
			row.setcolAction(audit.getAction());
			row.setcolHost(audit.getHostName());
			row.setcolLocation(audit.getLocation());
			row.setcolPatientId(audit.getPatient().getID_Patient() + " - " + audit.getPatient().getName().getForename() + " " + audit.getPatient().getName().getSurname());
			row.setTooltip(audit.getPatient().getPatientInfo());
			if (audit.getAuditDateTime() != null)
			{
				row.setcolDateTime(audit.getAuditDateTime().toString(DateTimeFormat.STANDARD_SECS));
			}
			if (audit.getAuditUser() != null)
				row.setcolUser(audit.getAuditUser());
		}

	    form.lblTotal().setValue("Total: " + coll.size());

	    form.setMode(FormMode.VIEW);
	}
}
