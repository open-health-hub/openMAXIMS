//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.17 build 40519.1300)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.hcpadmin;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.Hcp;
import ims.core.vo.MedicVo;
import ims.core.vo.NurseVo;
import ims.core.vo.PersonName;
import ims.core.vo.TherapistVo;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.HcpDisTypeCollection;
import ims.core.vo.lookups.LookupHelper;
//import ims.core.vo.lookups.MedicStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onFormOpen()
	{		
		form.setMode(form.getGlobalContext().getMosFormMode());
		loadAllCombos();
		if (form.getGlobalContext().getHcp() != null)
		{
			if (form.getGlobalContext().getHcp() instanceof MedicVo)
				populateScreenFromDataVoSpecific((MedicVo) form.getGlobalContext().getHcp());
			else if (form.getGlobalContext().getHcp() instanceof NurseVo)
				populateScreenFromDataVoSpecific((NurseVo) form.getGlobalContext().getHcp());
			else if (form.getGlobalContext().getHcp() instanceof TherapistVo)
				populateScreenFromDataVoSpecific((TherapistVo) form.getGlobalContext().getHcp());
			else
				populateScreenFromDataVoSpecific(form.getGlobalContext().getHcp());	
		}
		fillNameDetails(form.getGlobalContext().getMosFullName());						
		
	}

	private void fillNameDetails(PersonName name) 
	{
		if (name == null) return;
		form.ctnDemog().cmbTitle().setValue(name.getTitle());
		form.ctnDemog().txtSurname().setValue(name.getSurname());
		form.ctnDemog().txtForename().setValue(name.getForename());
		form.ctnDemog().txtMidName().setValue(name.getMiddleName());
	}


	private void clearDetails(int tabToClear) 
	{
		switch(tabToClear)
		{
			case TABHCP:
			{
				form.lyrDetails().tabHcp().cmbHcpType().setValue(null);
				form.lyrDetails().tabHcp().chkIsOtherDisciplineResponsibleHCP().setValue(null);		// WDEV-13888
				break;
			}
			case TABNURSE:
			{				
				form.lyrDetails().tabNurse().cmbNurseType().setValue(null);
				form.lyrDetails().tabNurse().cmbNurseSpecialty().setValue(null);
				form.lyrDetails().tabNurse().chkIsNurseResponsibleHCP().setValue(null);				// WDEV-13888
				break;
			}
			case TABTHERAPIST:
			{
				form.lyrDetails().tabTherapist().cmbTherapistType().setValue(null);
				form.lyrDetails().tabTherapist().cmbTherapistSpecialty().setValue(null);	
				form.lyrDetails().tabTherapist().chkIsTherapistResponsibleHCP().setValue(null);		// WDEV-13888
				break;
			}
			case TABMEDIC:
			{
				form.lyrDetails().tabMedic().cmbMedicType().setValue(null);
				form.lyrDetails().tabMedic().cmbMedicGrade().setValue(null);
				form.lyrDetails().tabMedic().cmbMedicSpecialty().setValue(null);
				form.lyrDetails().tabMedic().chkIsMedicResponsibleHCP().setValue(null);				// WDEV-13888
				
				//WDEV-12587
				form.lyrDetails().tabMedic().chkCanReferPatient().setValue(null);
				
				//WDEV-15544
				form.lyrDetails().tabMedic().chkIsLocalConsultant().setValue(null);
				
				break;
			}
		}	
	}



	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);				
	}

	protected void onBtnSaveClick() throws PresentationLogicException 
	{								
		Hcp voHcp = new Hcp();		
		
		if (form.getLocalContext().getbHcpDisciplineChangedIsNotNull() && form.getLocalContext().getbHcpDisciplineChanged() == Boolean.TRUE)
		{
			deActivateGlobalContextHCP();
			// Swap in newly created Hcp to the global context.
			voHcp = form.getLocalContext().getHcpVo();
		}
		else
		{
			if (form.getGlobalContext().getHcpIsNotNull())
				voHcp = form.getGlobalContext().getHcp();
		}				
		
		if (voHcp instanceof MedicVo)
			populateDataFromScreenVoSpecific((MedicVo) voHcp);
		else if (voHcp instanceof NurseVo)
			populateDataFromScreenVoSpecific((NurseVo) voHcp);
		else if (voHcp instanceof TherapistVo)
			populateDataFromScreenVoSpecific((TherapistVo) voHcp);
		else
			populateDataFromScreenVoSpecific(voHcp);						
		
		
		form.getGlobalContext().setHcp(voHcp);	
		form.getGlobalContext().setMosFullName(getMosName());
		
		engine.close(DialogResult.OK);				
	}

	private PersonName getMosName() 
	{
		PersonName name = new PersonName();
		name.setTitle(form.ctnDemog().cmbTitle().getValue());
		name.setSurname(form.ctnDemog().txtSurname().getValue());
		name.setForename(form.ctnDemog().txtForename().getValue());
		name.setMiddleName(form.ctnDemog().txtMidName().getValue());
//		name.setUpperSurname(form.ctnDemog().txtSurname().getValue().toUpperCase());
//		name.setUpperForename(form.ctnDemog().txtForename().getValue().toUpperCase());
		
		return name;
	}

	/**
	 * 
	 */
	private boolean deActivateGlobalContextHCP() 
	{		
		Hcp voHcp = form.getGlobalContext().getHcpIsNotNull() ? form.getGlobalContext().getHcp() : null; 
		if (voHcp == null)
			return false;

		
		voHcp.setIsActive(Boolean.FALSE);
		voHcp.validate();
		
		try {
			domain.saveHCP(voHcp);
		} catch (StaleObjectException e) {
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
						
		return true;				
	}

	private void setEditMode() 
	{
		form.setMode(FormMode.EDIT);
	}

	protected void onBtnNewClick() 
	{
		form.lyrDetails().showtabSelectHcpType();
		form.lyrDetails().tabSelectHcpType().cmbSelectHcpType().setValue(null);
		form.lyrDetails().tabSelectHcpType().chkIsSelectResponsibleHCP().setValue(null);			// WDEV-13888
		
		setEditMode();	
	}
	
	private void loadAllCombos()
	{
		HcpDisTypeCollection coll = LookupHelper.getHcpDisType(domain.getLookupService());
		
		//Hcp Type Filter && Hcp Select Type
		TreeNode[] rootNodes = coll.getRootNodes();
		ArrayList<?> childColl;
		HcpDisType lookupInstance = null;

		for (int i = 0; i < rootNodes.length; i++)
		{
			HcpDisType lk = (HcpDisType)rootNodes[i];
			form.lyrDetails().tabSelectHcpType().cmbSelectHcpType().newRow(lk,lk.getText());

			if(lk.equals(HcpDisType.THERAPY))
			{
				childColl = lk.getChildInstances();
				for(int j=0;j<childColl.size();j++)
				{
					lookupInstance = (HcpDisType)childColl.get(j);
					form.lyrDetails().tabTherapist().cmbTherapistType().newRow(lookupInstance,lookupInstance.getText());
				}				
			}
			else if(lk.equals(HcpDisType.NURSING))
			{
				childColl = lk.getChildInstances();
				for(int j=0;j<childColl.size();j++)
				{
					lookupInstance = (HcpDisType)childColl.get(j);
					form.lyrDetails().tabNurse().cmbNurseType().newRow(lookupInstance,lookupInstance.getText());
				}				
			}
			else if(lk.equals(HcpDisType.MEDICAL))
			{
				childColl = lk.getChildInstances();
				for(int j=0;j<childColl.size();j++)
				{
					lookupInstance = (HcpDisType)childColl.get(j);
					form.lyrDetails().tabMedic().cmbMedicType().newRow(lookupInstance,lookupInstance.getText());
				}				
			}
			else if(lk.equals(HcpDisType.OTHER))
			{
				childColl = lk.getChildInstances();
				for(int j=0;j<childColl.size();j++)
				{
					lookupInstance = (HcpDisType)childColl.get(j);
					form.lyrDetails().tabHcp().cmbHcpType().newRow(lookupInstance,lookupInstance.getText());
				}				
			}			
		}	
				
	}	
	
	private void populateDataFromScreenVoSpecific(Hcp value)
	{
		if (value instanceof NurseVo)
		{
			populateDataFromScreenVoSpecific((NurseVo)value);
		}
		else if (value instanceof MedicVo)
		{
			populateDataFromScreenVoSpecific((MedicVo)value);
		}
		else if (value instanceof TherapistVo)
		{
			populateDataFromScreenVoSpecific((TherapistVo)value);
		}
		else 
		{	
			value.setHcpType(form.lyrDetails().tabHcp().cmbHcpType().getValue()!=null?form.lyrDetails().tabHcp().cmbHcpType().getValue():HcpDisType.OTHER);
			
			// WDEV-13888
			value.setIsHCPaResponsibleHCP(form.lyrDetails().tabHcp().chkIsOtherDisciplineResponsibleHCP().getValue());
		}
	}
	
	private void populateDataFromScreenVoSpecific(NurseVo value)
	{
		value.setHcpType(HcpDisType.NURSING);
		value.setNurseType(form.lyrDetails().tabNurse().cmbNurseType().getValue());
		value.setSpecialty(form.lyrDetails().tabNurse().cmbNurseSpecialty().getValue());
		
		// WDEV-13888
		value.setIsHCPaResponsibleHCP(form.lyrDetails().tabNurse().chkIsNurseResponsibleHCP().getValue());
		
		//WDEV-15899 
		value.setIsAResponsibleEDClinician(form.lyrDetails().tabNurse().chkEdResponsibleTabNurse().getValue());
	}
	
	private void populateDataFromScreenVoSpecific(MedicVo value)
	{
		value.setHcpType(HcpDisType.MEDICAL);
		value.setMedicType(form.lyrDetails().tabMedic().cmbMedicType().getValue());
		value.setSpecialty(form.lyrDetails().tabMedic().cmbMedicSpecialty().getValue());
		value.setGrade(form.lyrDetails().tabMedic().cmbMedicGrade().getValue());
		
		// WDEV-13888
		value.setIsHCPaResponsibleHCP(form.lyrDetails().tabMedic().chkIsMedicResponsibleHCP().getValue());
		
		//WDEV-15544
		value.setIsALocalConsultant(form.lyrDetails().tabMedic().chkIsLocalConsultant().getValue());
		
		//WDEV-15899 
		value.setIsAResponsibleEDClinician(form.lyrDetails().tabMedic().chkEdResponsibleTabMedic().getValue());
		
		//WDEV-12587
		if(value.getMosIsNotNull())
			value.getMos().setCanReferPatient(form.lyrDetails().tabMedic().chkCanReferPatient().getValue());
		else
			form.getGlobalContext().Admin.setCanReferPatient(form.lyrDetails().tabMedic().chkCanReferPatient().getValue());
	}

	private void populateDataFromScreenVoSpecific(TherapistVo value)
	{
		value.setHcpType(HcpDisType.THERAPY);
		value.setTherapistType(form.lyrDetails().tabTherapist().cmbTherapistType().getValue());
		value.setSpecialty(form.lyrDetails().tabTherapist().cmbTherapistSpecialty().getValue());
		
		// WDEV-13888
		value.setIsHCPaResponsibleHCP(form.lyrDetails().tabTherapist().chkIsTherapistResponsibleHCP().getValue());
		
		// WDEV-15899
		value.setIsAResponsibleEDClinician(form.lyrDetails().tabTherapist().chkEdResponsibleTabTherapist().getValue());
	}

	private void populateScreenFromDataVoSpecific(Hcp value)
	{
		form.lyrDetails().showtabHcp();		
		form.lyrDetails().tabHcp().cmbHcpType().setValue(value.getHcpType());
		form.lyrDetails().tabHcp().chkIsOtherDisciplineResponsibleHCP().setValue(value.getIsHCPaResponsibleHCP());
	}

	private void populateScreenFromDataVoSpecific(NurseVo value)
	{	
		form.lyrDetails().showtabNurse();		
		form.lyrDetails().tabNurse().cmbNurseType().setValue(value.getNurseType());
		form.lyrDetails().tabNurse().cmbNurseSpecialty().setValue(value.getSpecialty());
		
		// WDEV-13888
		form.lyrDetails().tabNurse().chkIsNurseResponsibleHCP().setValue(value.getIsHCPaResponsibleHCP());
		
		//WDEV-15899
		form.lyrDetails().tabNurse().chkEdResponsibleTabNurse().setValue(value.getIsAResponsibleEDClinician());
	}
	
	private void populateScreenFromDataVoSpecific(MedicVo value)
	{
		if(value == null)
			return;
		
		form.lyrDetails().showtabMedic();
		
		form.lyrDetails().tabMedic().cmbMedicType().setValue(value.getMedicType());
		form.lyrDetails().tabMedic().cmbMedicSpecialty().setValue(value.getSpecialty());
		form.lyrDetails().tabMedic().cmbMedicGrade().setValue(value.getGrade());

		// WDEV-13888
		form.lyrDetails().tabMedic().chkIsMedicResponsibleHCP().setValue(value.getIsHCPaResponsibleHCP());
		
		//WDEV-15544
		form.lyrDetails().tabMedic().chkIsLocalConsultant().setValue(value.getIsALocalConsultant());
		
		//WDEV-15899
		form.lyrDetails().tabMedic().chkEdResponsibleTabMedic().setValue(value.getIsAResponsibleEDClinician());
		
		//WDEV-12587
		if(value.getMosIsNotNull())
			form.lyrDetails().tabMedic().chkCanReferPatient().setValue(value.getMos().getCanReferPatient());
		else
			form.lyrDetails().tabMedic().chkCanReferPatient().setValue(form.getGlobalContext().Admin.getCanReferPatient());
	}
	
	private void populateScreenFromDataVoSpecific(TherapistVo value)
	{	
		form.lyrDetails().showtabTherapist();
				
		form.lyrDetails().tabTherapist().cmbTherapistType().setValue(value.getTherapistType());
		form.lyrDetails().tabTherapist().cmbTherapistSpecialty().setValue(value.getSpecialty());
		
		// WDEV-13888
		form.lyrDetails().tabTherapist().chkIsTherapistResponsibleHCP().setValue(value.getIsHCPaResponsibleHCP());
		
		//WDEV-15899
		form.lyrDetails().tabTherapist().chkEdResponsibleTabTherapist().setValue(value.getIsAResponsibleEDClinician());
	}	
	
	protected void onCmbSelectHcpTypeValueChanged() throws PresentationLogicException
	{
		if(form.lyrDetails().tabSelectHcpType().cmbSelectHcpType().getValue() != null)
		{
			if(form.lyrDetails().tabSelectHcpType().cmbSelectHcpType().getValue().equals(HcpDisType.NURSING))	
			{
				clearDetails(TABNURSE); 
				form.lyrDetails().showtabNurse();		
				form.getLocalContext().setHcpVo(new NurseVo());
				
				// WDEV-13888
				form.lyrDetails().tabNurse().chkIsNurseResponsibleHCP().setValue(form.lyrDetails().tabSelectHcpType().chkIsSelectResponsibleHCP().getValue());
			}
			else if(form.lyrDetails().tabSelectHcpType().cmbSelectHcpType().getValue().equals(HcpDisType.THERAPY))	
			{
				clearDetails(TABTHERAPIST); 
				form.lyrDetails().showtabTherapist();	
				form.getLocalContext().setHcpVo(new TherapistVo());
				
				// WDEV-13888
				form.lyrDetails().tabTherapist().chkIsTherapistResponsibleHCP().setValue(form.lyrDetails().tabSelectHcpType().chkIsSelectResponsibleHCP().getValue());
			}
			else if(form.lyrDetails().tabSelectHcpType().cmbSelectHcpType().getValue().equals(HcpDisType.MEDICAL))	
			{
				clearDetails(TABMEDIC); 
				form.lyrDetails().showtabMedic();
				form.getLocalContext().setHcpVo(new MedicVo());
				
				// WDEV-13888
				form.lyrDetails().tabMedic().chkIsMedicResponsibleHCP().setValue(form.lyrDetails().tabSelectHcpType().chkIsSelectResponsibleHCP().getValue());
			}	
			else if(form.lyrDetails().tabSelectHcpType().cmbSelectHcpType().getValue().equals(HcpDisType.OTHER)) 
			{
				clearDetails(TABHCP);
				form.lyrDetails().showtabHcp();
				form.getLocalContext().setHcpVo(new Hcp());
				
				// WDEV-13888
				form.lyrDetails().tabHcp().chkIsOtherDisciplineResponsibleHCP().setValue(form.lyrDetails().tabSelectHcpType().chkIsSelectResponsibleHCP().getValue());
			}	
		}	
	}

    protected void onFormModeChanged() 
    {
    }	
    
 	private final static int TABHCP = 1;
	private final static int TABMEDIC = 2;
	private final static int TABNURSE = 3;
	private final static int TABTHERAPIST = 4;
}
