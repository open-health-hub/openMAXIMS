//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.dmd;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdAMPRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAMPRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolName()
		{
			return (String)super.row.get(0);
		}
		public void setcolName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.vo.interfaces.IDMDValue getValue()
		{
			return (ims.vo.interfaces.IDMDValue)super.row.getValue();
		}
		public void setValue(ims.vo.interfaces.IDMDValue value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAMPRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAMPRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAMPRow get(int index)
		{
			return new grdAMPRow(super.collection.get(index));
		}
		public grdAMPRow newRow()
		{
			return new grdAMPRow(super.collection.newRow());
		}
		public grdAMPRow newRow(boolean autoSelect)
		{
			return new grdAMPRow(super.collection.newRow(autoSelect));
		}
		public grdAMPRow newRowAt(int index)
		{
			return new grdAMPRow(super.collection.newRowAt(index));
		}
		public grdAMPRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAMPRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAMPGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
		{
			super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
		}
		public ims.vo.interfaces.IDMDValue[] getValues()
		{
			ims.vo.interfaces.IDMDValue[] listOfValues = new ims.vo.interfaces.IDMDValue[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.interfaces.IDMDValue getValue()
		{
			return (ims.vo.interfaces.IDMDValue)super.grid.getValue();
		}
		public void setValue(ims.vo.interfaces.IDMDValue value)
		{
			super.grid.setValue(value);
		}
		public grdAMPRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAMPRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAMPRowCollection getRows()
		{
			return new grdAMPRowCollection(super.grid.getRows());
		}
		public grdAMPRow getRowByValue(ims.vo.interfaces.IDMDValue value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAMPRow(row);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdVMPRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdVMPRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolName()
		{
			return (String)super.row.get(0);
		}
		public void setcolName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.vo.interfaces.IDMDValue getValue()
		{
			return (ims.vo.interfaces.IDMDValue)super.row.getValue();
		}
		public void setValue(ims.vo.interfaces.IDMDValue value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdVMPRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdVMPRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdVMPRow get(int index)
		{
			return new grdVMPRow(super.collection.get(index));
		}
		public grdVMPRow newRow()
		{
			return new grdVMPRow(super.collection.newRow());
		}
		public grdVMPRow newRow(boolean autoSelect)
		{
			return new grdVMPRow(super.collection.newRow(autoSelect));
		}
		public grdVMPRow newRowAt(int index)
		{
			return new grdVMPRow(super.collection.newRowAt(index));
		}
		public grdVMPRow newRowAt(int index, boolean autoSelect)
		{
			return new grdVMPRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdVMPGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
		{
			super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
		}
		public ims.vo.interfaces.IDMDValue[] getValues()
		{
			ims.vo.interfaces.IDMDValue[] listOfValues = new ims.vo.interfaces.IDMDValue[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.interfaces.IDMDValue getValue()
		{
			return (ims.vo.interfaces.IDMDValue)super.grid.getValue();
		}
		public void setValue(ims.vo.interfaces.IDMDValue value)
		{
			super.grid.setValue(value);
		}
		public grdVMPRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdVMPRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdVMPRowCollection getRows()
		{
			return new grdVMPRowCollection(super.grid.getRows());
		}
		public grdVMPRow getRowByValue(ims.vo.interfaces.IDMDValue value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdVMPRow(row);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdVTMRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdVTMRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolName()
		{
			return (String)super.row.get(0);
		}
		public void setcolName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.vo.interfaces.IDMDValue getValue()
		{
			return (ims.vo.interfaces.IDMDValue)super.row.getValue();
		}
		public void setValue(ims.vo.interfaces.IDMDValue value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdVTMRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdVTMRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdVTMRow get(int index)
		{
			return new grdVTMRow(super.collection.get(index));
		}
		public grdVTMRow newRow()
		{
			return new grdVTMRow(super.collection.newRow());
		}
		public grdVTMRow newRow(boolean autoSelect)
		{
			return new grdVTMRow(super.collection.newRow(autoSelect));
		}
		public grdVTMRow newRowAt(int index)
		{
			return new grdVTMRow(super.collection.newRowAt(index));
		}
		public grdVTMRow newRowAt(int index, boolean autoSelect)
		{
			return new grdVTMRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdVTMGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
		{
			super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
		}
		public ims.vo.interfaces.IDMDValue[] getValues()
		{
			ims.vo.interfaces.IDMDValue[] listOfValues = new ims.vo.interfaces.IDMDValue[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.interfaces.IDMDValue getValue()
		{
			return (ims.vo.interfaces.IDMDValue)super.grid.getValue();
		}
		public void setValue(ims.vo.interfaces.IDMDValue value)
		{
			super.grid.setValue(value);
		}
		public grdVTMRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdVTMRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdVTMRowCollection getRows()
		{
			return new grdVTMRowCollection(super.grid.getRows());
		}
		public grdVTMRow getRowByValue(ims.vo.interfaces.IDMDValue value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdVTMRow(row);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(232, 360);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Admin.contextMenuDMD_VTM = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Admin.contextMenuDMD_VTMADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add to Hotlist", true, false, new Integer(102179), true, false);
		contextMenus.Admin.contextMenuDMD_VTM.add(contextMenus.Admin.contextMenuDMD_VTMADDItem);
		contextMenus.Admin.contextMenuDMD_VTMREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove from Hotlist", true, false, new Integer(102300), true, false);
		contextMenus.Admin.contextMenuDMD_VTM.add(contextMenus.Admin.contextMenuDMD_VTMREMOVEItem);
		form.registerMenu(contextMenus.Admin.contextMenuDMD_VTM);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 40, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "AMP", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 120, 40, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "VMP", new Integer(1), null, new Integer(1)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 39, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "VTM", new Integer(1), null, new Integer(1)}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 264, 216, 88, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdAMPTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(0), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAMPTemp);
		grdAMPGrid grdAMP = (grdAMPGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAMPGrid.class, m_grdAMPTemp);
		grdAMP.addWrapTextColumn("Name", 0, 0, -1, true, false, 0, true);
		super.addGrid(grdAMP);
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 144, 216, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdVMPTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(0), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdVMPTemp);
		grdVMPGrid grdVMP = (grdVMPGrid)GridFlyweightFactory.getInstance().createGridBridge(grdVMPGrid.class, m_grdVMPTemp);
		grdVMP.addWrapTextColumn("Name", 0, 0, -1, true, false, 0, true);
		super.addGrid(grdVMP);
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 216, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdVTMTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(0), Boolean.TRUE, contextMenus.Admin.contextMenuDMD_VTM, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdVTMTemp);
		grdVTMGrid grdVTM = (grdVTMGrid)GridFlyweightFactory.getInstance().createGridBridge(grdVTMGrid.class, m_grdVTMTemp);
		grdVTM.addWrapTextColumn("Name", 0, 0, -1, true, false, 0, true);
		super.addGrid(grdVTM);

		// Horizontal Line Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 56, 248, 168, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 56, 128, 168, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 56, 8, 168, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
	}


	public grdAMPGrid grdAMP()
	{
		return (grdAMPGrid)super.getGrid(0);
	}
	public grdVMPGrid grdVMP()
	{
		return (grdVMPGrid)super.getGrid(1);
	}
	public grdVTMGrid grdVTM()
	{
		return (grdVTMGrid)super.getGrid(2);
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectionLevel = new ims.framework.ContextVariable("SelectionLevel", prefix + "_lv_Admin.DMD.__internal_x_context__SelectionLevel_" + componentIdentifier + "");
			cxl_Specialty = new ims.framework.ContextVariable("Specialty", prefix + "_lv_Admin.DMD.__internal_x_context__Specialty_" + componentIdentifier + "");
			cxl_allowVTMSelection = new ims.framework.ContextVariable("allowVTMSelection", prefix + "_lv_Admin.DMD.__internal_x_context__allowVTMSelection_" + componentIdentifier + "");
		}
		
		public boolean getSelectionLevelIsNotNull()
		{
			return !cxl_SelectionLevel.getValueIsNull(context);
		}
		public ims.clinical.vo.enums.DMDType getSelectionLevel()
		{
			return (ims.clinical.vo.enums.DMDType)cxl_SelectionLevel.getValue(context);
		}
		public void setSelectionLevel(ims.clinical.vo.enums.DMDType value)
		{
			cxl_SelectionLevel.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectionLevel = null;
		public boolean getSpecialtyIsNotNull()
		{
			return !cxl_Specialty.getValueIsNull(context);
		}
		public ims.core.vo.lookups.Specialty getSpecialty()
		{
			return (ims.core.vo.lookups.Specialty)cxl_Specialty.getValue(context);
		}
		public void setSpecialty(ims.core.vo.lookups.Specialty value)
		{
			cxl_Specialty.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Specialty = null;
		public boolean getallowVTMSelectionIsNotNull()
		{
			return !cxl_allowVTMSelection.getValueIsNull(context);
		}
		public Boolean getallowVTMSelection()
		{
			return (Boolean)cxl_allowVTMSelection.getValue(context);
		}
		public void setallowVTMSelection(Boolean value)
		{
			cxl_allowVTMSelection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_allowVTMSelection = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public AdminNamespace Admin = new AdminNamespace();
		public final class AdminNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class DMD_VTM implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int REMOVE = 2;
			}
			public void disableAllDMD_VTMMenuItems()
			{
				this.contextMenuDMD_VTMADDItem.setEnabled(false);
				this.contextMenuDMD_VTMREMOVEItem.setEnabled(false);
			}
			public void hideAllDMD_VTMMenuItems()
			{
				this.contextMenuDMD_VTMADDItem.setVisible(false);
				this.contextMenuDMD_VTMREMOVEItem.setVisible(false);
			}
			private Menu contextMenuDMD_VTM;
			public ReadOnlyMenuItem getDMD_VTMADDItem()
			{
				return this.contextMenuDMD_VTMADDItem;
			}
			private MenuItem contextMenuDMD_VTMADDItem;
			public ReadOnlyMenuItem getDMD_VTMREMOVEItem()
			{
				return this.contextMenuDMD_VTMREMOVEItem;
			}
			private MenuItem contextMenuDMD_VTMREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
