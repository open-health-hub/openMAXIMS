//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.51 build 2469.26857)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.navigationadmin;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import ims.admin.forms.navigationadmin.GenForm.grdAssessmentsRow;
import ims.admin.forms.navigationadmin.GenForm.grdFormsRow;
import ims.admin.forms.navigationadmin.GenForm.grdListRow;
import ims.admin.vo.AppFormVo;
import ims.admin.vo.AppFormVoCollection;
import ims.admin.vo.AppNavFormVo;
import ims.admin.vo.AppNavFormVoCollection;
import ims.admin.vo.AppNavRootGroupVo;
import ims.admin.vo.AppNavRootGroupVoCollection;
import ims.admin.vo.AppNavSecondGroupVo;
import ims.admin.vo.AppNavSecondGroupVoCollection;
import ims.admin.vo.AppNavShortVo;
import ims.admin.vo.AppNavShortVoCollection;
import ims.admin.vo.AppNavigationVo;
import ims.admin.vo.lookups.FormReadWrite;
import ims.assessment.vo.GraphicAssessmentShortVo;
import ims.assessment.vo.GraphicAssessmentShortVoCollection;
import ims.assessment.vo.UserAssessmentLiteVo;
import ims.assessment.vo.UserAssessmentLiteVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.InitConfig;
import ims.core.vo.GenericIdentifierVo;
import ims.core.vo.GenericIdentifierVoCollection;
import ims.domain.GenericIdentifierFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.controls.TreeNodeCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormAccess;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.vo.ValueObject;
import ims.vo.ValueObjectRef;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int	ROOT = 0;
	private static final int	ROOT_NODE = 1;
	private static final int	SEC_NODE = 2;
	private static final int	FORM_NODE = 3;
	private static final String STRUCTURED_ASSESSMENT = "STRUCTURED_ASSESSMENT";
	private static final String GRAPHIC_ASSESSMENT = "GRAPHIC_ASSESSMENT";

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		form.chkActiveOnly().setValue(true);
		form.getContextMenus().getGenericGridAddItem().setText("Create new Navigation Tree");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit selected Navigation Tree");
		form.getContextMenus().getGenericGridReplaceItem().setText("Replicate selected Navigation Tree");
		open();
	}
	
	private void open()
	{
		AppNavShortVoCollection coll = domain.listNavigations();
		form.getLocalContext().setAllNavs(coll);
		AppFormVoCollection formColl = domain.listNavigableForms();
		form.getLocalContext().setAllForms(formColl);		
		
		populateNavGrid(coll);
		
		// populate the assessment grid based on flag value
		if( ! ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue())
		{
			form.lblAssessmentLabel().setVisible(false);
			form.grdAssessments().setVisible(false);
		}
		else
		{
			// It is possible that the ENABLE_ASSESSMENTS_IN_NAV_CFG config flag may be set wrong. 
			// This will cause a crash in the domain.listAssessments() function if UserAssessment 
			// is not mapped. Catch the exception and ask the user to correct the flag value. 
			try
			{
				populateAssessmentGrid();
			}
			catch ( DomainRuntimeException e )
			{
				engine.showMessage("Please ask an administrator to check the value of the ENABLE_ASSESSMENTS_IN_NAV_CFG flag. It should be false. ");
				setFormMode(FormMode.VIEW);
			}
		}
	}

	private void setFormMode(FormMode mode)
	{
		form.setMode(mode);
		setContextMenuItems(mode);
		if (mode.equals(FormMode.VIEW))
		{
			form.btnUpdate().setVisible(true);
			form.btnUpdate().setEnabled(form.grdList().getValue() != null);
			form.treNav().setAllowDragDrop(false);
			form.grdForms().setEnabled(false);
			form.grdAssessments().setEnabled(false);
		}	
		else
		{
			form.treNav().setAllowDragDrop(true);
			form.grdForms().setEnabled(form.treNav().getValue() != null && form.treNav().getValue() instanceof AppNavFormVo);
			form.grdAssessments().setEnabled(false);
		}
	}

	private void setContextMenuItems(FormMode mode)
	{
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.grdList().getValue() != null);
		form.getContextMenus().getGenericGridReplaceItem().setVisible(form.grdList().getValue() != null);
		
		form.getContextMenus().getNavAdminInaccessibleForRipItem().setVisible(false);
		form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setVisible(false);
		form.getContextMenus().getNavAdminReadOnlyForRipItem().setVisible(false);
		form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setVisible(false);
		form.getContextMenus().getNavAdminAddRootGroupItem().setVisible(false);
		form.getContextMenus().getNavAdminAddSecGroupItem().setVisible(false);
		form.getContextMenus().getNavAdminRemoveItem().setVisible(false);
		form.getContextMenus().getNavAdminSetSearchFormItem().setVisible(false);
		form.getContextMenus().getNavAdminSetStartFormItem().setVisible(false);
		form.getContextMenus().getNavAdminEditTextItem().setVisible(false);
		form.getContextMenus().getNavAdminSetReadOnlyItem().setVisible(false);
		form.getContextMenus().getNavAdminAddAssessmentItem().setVisible(false);
		form.getContextMenus().getNavAdminSetReadWriteItem().setVisible(false);
		form.getContextMenus().getNavAdminReadWriteForRipItem().setVisible(false);
		form.getContextMenus().getNavAdminReadWriteforEpisEndItem().setVisible(false);
		form.getContextMenus().getNavAdminAddReportItem().setVisible(false);

		//report viewer support WDEV-4218
		AppFormVo reportViewerFormVo = getReportViewerForm();
		
		if (mode.equals(FormMode.EDIT))
		{
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.getContextMenus().getGenericGridUpdateItem().setVisible(false);
			form.getContextMenus().getGenericGridReplaceItem().setVisible(false);
			
			form.getContextMenus().getNavAdminAddRootGroupItem().setVisible(true);
			Object val = null;
			if (form.treNav().getSelectedNode() != null)
			{
				form.getContextMenus().getNavAdminEditTextItem().setVisible(true);
				val = form.treNav().getSelectedNode().getValue();	
			}
			if (val instanceof AppNavFormVo)
			{
				AppNavFormVo vo = (AppNavFormVo)val;
				form.getContextMenus().getNavAdminInaccessibleForRipItem().setVisible(true);
				form.getContextMenus().getNavAdminInaccessibleForRipItem().setText("Set Inaccessible for Patient RIP");
				form.getContextMenus().getNavAdminInaccessibleForRipItem().setIcon(form.getImages().Core.Alert_RedTriangle1);
				
				if( ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue())
				{
					form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setVisible(true);
					form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setText("Set Inaccessible for Episode Ended");
					form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setIcon(form.getImages().Core.Alert_RedTriangle2);
				}
			
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setVisible(true);
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setText("Set Read Only for Patient RIP");
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setIcon(form.getImages().Core.Alert_YellowTriangle1);

				if( ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue())
				{
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setVisible(true);
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setText("Set Read Only for Episode Ended");
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setIcon(form.getImages().Core.Alert_YellowTriangle2);
				}	
				
				if (vo.getFormAccessForRip().equals(FormAccess.NO_ACCESS))
				{
					form.getContextMenus().getNavAdminInaccessibleForRipItem().setText("Set Read Write for Patient RIP");
					form.getContextMenus().getNavAdminInaccessibleForRipItem().setIcon(form.getImages().Core.Edit);
				}
				else if (vo.getFormAccessForRip().equals(FormAccess.READ_ONLY))
				{
					form.getContextMenus().getNavAdminReadOnlyForRipItem().setText("Set Read Write for Patient RIP");
					form.getContextMenus().getNavAdminReadOnlyForRipItem().setIcon(form.getImages().Core.Edit);					
				}

				if (vo.getFormAccessForEpisEnd().equals(FormAccess.NO_ACCESS))
				{
					form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setText("Set Read Write for Episode Ended");
					form.getContextMenus().getNavAdminInaccessibleForEpisEndItem().setIcon(form.getImages().Core.Edit);
				}
				else if (vo.getFormAccessForEpisEnd().equals(FormAccess.READ_ONLY))
				{
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setText("Set Read Write for Episode Ended");
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setIcon(form.getImages().Core.Edit);					
				}

				form.getContextMenus().getNavAdminRemoveItem().setVisible(true);
				form.getContextMenus().getNavAdminRemoveItem().setText("Remove this Form from the Navigation");

				//http://jira/browse/WDEV-2933
				if (vo.getForm().getIsSystem() != null && vo.getForm().getIsSystem().booleanValue() == false)
				{
					form.getContextMenus().getNavAdminSetSearchFormItem().setVisible(true);				
					form.getContextMenus().getNavAdminSetStartFormItem().setVisible(true);	
				}
				
				form.getContextMenus().getNavAdminSetReadOnlyItem().setVisible(true);
				if (vo.isReadOnly())
				{
					form.getContextMenus().getNavAdminSetReadOnlyItem().setIcon(form.getImages().Core.View);
					form.getContextMenus().getNavAdminSetReadOnlyItem().setText("Set as Read/Write");
				}
				else
				{
					form.getContextMenus().getNavAdminSetReadOnlyItem().setIcon(form.getImages().Core.ViewDisabled);					
					form.getContextMenus().getNavAdminSetReadOnlyItem().setText("Set as Read Only");
				}
			}
			else if (val instanceof AppNavSecondGroupVo)
			{
				form.getContextMenus().getNavAdminRemoveItem().setVisible(true);
				form.getContextMenus().getNavAdminRemoveItem().setText("Remove this Group from the Navigation");				
				form.getContextMenus().getGenericGridAddItem().setText("Add Form to selected Second Level Group");
				form.getContextMenus().getNavAdminAddAssessmentItem().setVisible(ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue());

				if(reportViewerFormVo != null && reportViewerFormVo.getID_AppFormIsNotNull() && reportViewerFormVo.getID_AppForm().intValue() > 0)
					form.getContextMenus().getNavAdminAddReportItem().setVisible(true);
				
				form.getContextMenus().getNavAdminSetReadOnlyItem().setIcon(form.getImages().Core.ViewDisabled);					
				form.getContextMenus().getNavAdminSetReadOnlyItem().setText("Set as Read Only");
				form.getContextMenus().getNavAdminSetReadOnlyItem().setVisible(true);
				form.getContextMenus().getNavAdminSetReadWriteItem().setVisible(true);
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setVisible(true);
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setText("Set Read Only for Patient RIP");
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setIcon(form.getImages().Core.Alert_YellowTriangle1);
				form.getContextMenus().getNavAdminReadWriteForRipItem().setVisible(true);
				if( ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue())
				{
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setVisible(true);
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setText("Set Read Only for Episode Ended");
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setIcon(form.getImages().Core.Alert_YellowTriangle2);
					form.getContextMenus().getNavAdminReadWriteforEpisEndItem().setVisible(true);
				}	
				

			}
			else if (val instanceof AppNavRootGroupVo)
			{
				form.getContextMenus().getNavAdminRemoveItem().setVisible(true);
				form.getContextMenus().getNavAdminRemoveItem().setText("Remove this Group from the Navigation");				
				form.getContextMenus().getNavAdminAddSecGroupItem().setVisible(true);
				form.getContextMenus().getGenericGridAddItem().setText("Add Form to selected Top Level Group");
				form.getContextMenus().getNavAdminAddAssessmentItem().setVisible(ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue());

				if(reportViewerFormVo != null && reportViewerFormVo.getID_AppFormIsNotNull() && reportViewerFormVo.getID_AppForm().intValue() > 0)
					form.getContextMenus().getNavAdminAddReportItem().setVisible(true);
				
				form.getContextMenus().getNavAdminSetReadOnlyItem().setIcon(form.getImages().Core.ViewDisabled);					
				form.getContextMenus().getNavAdminSetReadOnlyItem().setText("Set as Read Only");
				form.getContextMenus().getNavAdminSetReadOnlyItem().setVisible(true);
				form.getContextMenus().getNavAdminSetReadWriteItem().setVisible(true);				
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setVisible(true);
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setText("Set Read Only for Patient RIP");
				form.getContextMenus().getNavAdminReadOnlyForRipItem().setIcon(form.getImages().Core.Alert_YellowTriangle1);
				form.getContextMenus().getNavAdminReadWriteForRipItem().setVisible(true);
				if( ConfigFlag.GEN.ENABLE_ASSESSMENTS_IN_NAV_CFG.getValue())
				{
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setVisible(true);
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setText("Set Read Only for Episode Ended");
					form.getContextMenus().getNavAdminReadOnlyForEpisEndItem().setIcon(form.getImages().Core.Alert_YellowTriangle2);
					form.getContextMenus().getNavAdminReadWriteforEpisEndItem().setVisible(true);
				}	

			}
		}
	}

	private void populateAssessmentGrid()
	{
		form.grdAssessments().getRows().clear();
		
		UserAssessmentLiteVoCollection assColl = domain.listAssessments();
		GraphicAssessmentShortVoCollection grColl = domain.listGraphicAssessments();

		for (int i = 0; i < assColl.size(); i++)
		{
			UserAssessmentLiteVo assess = assColl.get(i);
			grdAssessmentsRow row = form.grdAssessments().getRows().newRow();
			row.setAssessmentName(assess.getName());
			row.setTypeIcon(form.getImages().Core.PasteEnabled);
			row.setValue(assess);
		}
		for (int i = 0; i < grColl.size(); i++)
		{
			GraphicAssessmentShortVo assess = grColl.get(i);
			grdAssessmentsRow row = form.grdAssessments().getRows().newRow();
			row.setAssessmentName(assess.getName());
			row.setTypeIcon(form.getImages().Admin.Color);
			row.setValue(assess);
		}
		setFormMode(FormMode.VIEW);
	}

	private void populateNavGrid(AppNavShortVoCollection coll)
	{
		form.grdList().getRows().clear();
		for (int i = 0; i < coll.size(); i++)
		{
			AppNavShortVo nav = coll.get(i);
			if (nav.getIsActive() != null && !nav.getIsActive().booleanValue() && form.chkActiveOnly().getValue())
				continue;
			grdListRow row = form.grdList().getRows().newRow();
			row.setValue(nav);
			row.setActive(nav.getIsActive().booleanValue());
			row.setName(nav.getNavigationName());
		}
		setFormMode(FormMode.VIEW);
	}
	
	private void populateFormGrid(AppFormVoCollection formColl)
	{
		
		
		
		form.grdForms().getRows().clear();
		formColl = sortFormGrid(formColl);
		for (int i = 0; i < formColl.size(); i++)
		{
			AppFormVo appform = formColl.get(i);
			grdFormsRow row = form.grdForms().getRows().newRow();
			row.setValue(appform);
			
			String namespaceName = "";
			if(appform.getNamespace() != null && appform.getNamespace().getName() != null)
				namespaceName = appform.getNamespace().getName() + ".";
			row.setFormName(namespaceName + appform.getName());
			if (appform.isAlias())
			{
				row.setTextColor(Color.Gray);
				row.setFormName(namespaceName + appform.getName() + " (" + appform.getAliasName() +")");
			}
			row.setTooltip(appform.getTooltip());
		
			if(form.treNav().getSelectedNode()!= null)
			{
				form.grdForms().setEnabled(true);
			}
			else form.grdForms().setEnabled(false);
		
		}	
	}

	private AppFormVoCollection sortFormGrid(AppFormVoCollection formColl)
	{
		boolean shouldStop = false;
		while(!shouldStop)
		{
			shouldStop = true;
			for(int i=0; i<formColl.size()-1; i++)
			{
				AppFormVo appformI = formColl.get(i);
				String namespaceNameI = "";
				String nameI = appformI.getName();
				if(appformI.getNamespace() != null && appformI.getNamespace().getName() != null)
					namespaceNameI = appformI.getNamespace().getName();
				
				AppFormVo appformS = formColl.get(i + 1);
				String namespaceNameS = "";
				String nameS = appformS.getName();
				if(appformS.getNamespace() != null && appformS.getNamespace().getName() != null)
					namespaceNameS = appformS.getNamespace().getName();
				
				if(namespaceNameI.compareTo(namespaceNameS) > 0)
				{
					formColl.set(i, appformS);
					formColl.set(i + 1,appformI);
					shouldStop = false;
				}
				else if(namespaceNameI.compareTo(namespaceNameS) == 0)
				{
					if(nameI.compareTo(nameS) > 0)
					{
						formColl.set(i, appformS);
						formColl.set(i + 1,appformI);
						shouldStop = false;
					}
				}
			}
		}
		return formColl;
	}

	private AppNavFormVo addAppNavFormVo(AppFormVo formVo, Object parentObject)
	{
		if (formVo == null)
			return null;
		
	
		
		AppNavFormVo navForm = new AppNavFormVo();
		navForm.setForm(formVo);
		navForm.setAccessForEpisEnd(FormReadWrite.WRITE);
		navForm.setAccessForRip(FormReadWrite.WRITE);
		navForm.setIsReadOnly(Boolean.FALSE);
		
		if(form.treNav().getSelectedNode()!= null && form.treNav().getSelectedNode().getNodes()!= null)
		{
		
			navForm.setPosIndex(new Integer(form.treNav().getSelectedNode().getNodes().size()));
	
		}
		else engine.showMessage("Please select a node to add your selected form to");
		
		if (formVo.isAlias())
			navForm.setNodeText(formVo.getAliasName());
		else
			navForm.setNodeText(formVo.getName());
		
		if (parentObject instanceof AppNavRootGroupVo)
		{
			AppNavRootGroupVo rootGrp = (AppNavRootGroupVo)parentObject;
			if (rootGrp.getForms() == null)
				rootGrp.setForms(new AppNavFormVoCollection());
			
			rootGrp.getForms().add(navForm);
		}
		else if (parentObject instanceof AppNavSecondGroupVo)
		{
			AppNavSecondGroupVo secGrp = (AppNavSecondGroupVo)parentObject;
			if (secGrp.getForms() == null)
				secGrp.setForms(new AppNavFormVoCollection());
			
			secGrp.getForms().add(navForm);				
		}
		return navForm;
	}

	protected void onGrdFormsSelectionChanged() 
	{
		Object val = form.treNav().getValue();	
		AppFormVo formVo = form.grdForms().getValue();
		addAppNavFormVo(formVo, val);
		populateNavigation(form.getLocalContext().getSelectedNav(), false);
		if (form.getLocalContext().getSelectedTreeValue() != null)
		{
			form.treNav().setValue(form.getLocalContext().getSelectedTreeValue());	
			
		}
	}
	
	/**
	 * There are 4 potential drop scenarios to be catered for
	 * 1. ROOT_GROUP dropped to root
	 * 2. SECOND_GROUP dropped on ROOT_GROUP
	 * 3. FORM dropped on ROOT_GROUP
	 * 4. FORM dropped on SECOND_GROUP
	 * 
	 * The way the tree was populated has dictated that no other unsupported drops can occur.
	 */
	protected void onTreNavTreeViewNodeDropped(TreeNode node, TreeNode oldParentNode) throws ims.framework.exceptions.PresentationLogicException
	{
		Object val = node.getValue();
		if (val instanceof AppNavSecondGroupVo)
		{
			
			AppNavRootGroupVo oldRootGrp = (AppNavRootGroupVo)oldParentNode.getValue();
			AppNavRootGroupVo newRootGrp = (AppNavRootGroupVo)node.getParent().getValue();
			
			if (!oldRootGrp.equals(newRootGrp))
			{				
				AppNavSecondGroupVo secGrp = (AppNavSecondGroupVo)val;
				oldRootGrp.getGroups().remove(secGrp);
				secGrp = this.getSecGrpClone(secGrp);
				newRootGrp.getGroups().add(secGrp);				
				this.setPosIndexes(oldParentNode);
			}
			this.setPosIndexes(node.getParent());				
		}
		else if (val instanceof AppNavFormVo)
		{
			Object oldParentObj = oldParentNode.getValue();
			Object newParent = node.getParent().getValue();
			if (oldParentObj instanceof AppNavRootGroupVo)
			{
				if (!oldParentObj.equals(newParent))
				{
					((AppNavRootGroupVo)oldParentObj).getForms().remove((AppNavFormVo)val);					
				}
				this.setPosIndexes(oldParentNode);
			}
			else if (oldParentObj instanceof AppNavSecondGroupVo)
			{
				((AppNavSecondGroupVo)oldParentObj).getForms().remove((AppNavFormVo)val);				
			}
			
			AppNavFormVo navForm = (AppNavFormVo)val;
			if (newParent instanceof AppNavRootGroupVo)
			{
				if(!oldParentObj.equals(newParent))
				{
					navForm = getNavFormClone(navForm);
					((AppNavRootGroupVo)newParent).getForms().add(navForm);
				}
				this.setPosIndexes(node.getParent());
			}
			else if (newParent instanceof AppNavSecondGroupVo)
			{
				if (oldParentObj.equals(newParent))
				{
					int index = node.getParent().getNodes().indexOf(node);
					((AppNavSecondGroupVo)oldParentObj).getForms().add(index,navForm);
				}
				else
				{
					navForm = getNavFormClone(navForm);
					((AppNavSecondGroupVo)newParent).getForms().add(navForm);									
				}
			}				
		}
		else if (val instanceof AppNavRootGroupVo)
		{
			AppNavigationVo nav = form.getLocalContext().getSelectedNav();
			nav.getRootGroups().remove((AppNavRootGroupVo)val);
			int index = form.treNav().getNodes().indexOf(node);
			nav.getRootGroups().add(index,(AppNavRootGroupVo)val);			
		}
		populateNavigation(form.getLocalContext().getSelectedNav());
	}
	
	private AppNavSecondGroupVo getSecGrpClone(AppNavSecondGroupVo secGrp)
	{
		AppNavSecondGroupVo ret = new AppNavSecondGroupVo();
		ret.setForms(new AppNavFormVoCollection());
		for (int i = 0; i < secGrp.getForms().size(); i++)
		{
			ret.getForms().add(this.getNavFormClone(secGrp.getForms().get(i)));
		}
		ret.setGroupName(secGrp.getGroupName());
		ret.setPosIndex(secGrp.getPosIndex());
		return ret;
	}

	private AppNavFormVo getNavFormClone(AppNavFormVo navForm)
	{
		AppNavFormVo ret = new AppNavFormVo();
		ret.setNodeText(navForm.getNodeText());
		ret.setAccessForEpisEnd(navForm.getAccessForEpisEnd());
		ret.setAccessForRip(navForm.getAccessForRip());
		ret.setForm(navForm.getForm());
		ret.setIsReadOnly(navForm.getIsReadOnly());
		ret.setPosIndex(navForm.getPosIndex());
		
		return ret;
	}

	protected void onTreNavTreeViewNodeEdited(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		Object val = node.getValue();
		if (val instanceof AppNavFormVo)
		{
			AppNavFormVo vo = (AppNavFormVo)val;
			vo.setNodeText(node.getText());
		}
		else if (val instanceof AppNavSecondGroupVo)
		{
			AppNavSecondGroupVo vo = (AppNavSecondGroupVo)val;
			vo.setGroupName(node.getText());
		}
		else if (val instanceof AppNavRootGroupVo)
		{
			AppNavRootGroupVo vo = (AppNavRootGroupVo)val;
			vo.setGroupName(node.getText());			
		}
		onTreNavTreeViewSelectionChanged(node);
	}
	protected void onTreNavTreeViewSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		setFormMode(form.getMode());
		//form.getLocalContext().setSelectedTreeNode(null);
	}
	protected void onTreNavTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		setFormMode(form.getMode());
		Object val = node.getValue();
		if (val instanceof AppNavFormVo)
		{
			form.grdForms().setEnabled(false);
			AppNavFormVo navForm = (AppNavFormVo)val;
			AppFormVo formVo = navForm.getForm();
			if (formVo.equals(this.getAssessmentForm()) && form.getMode().equals(FormMode.EDIT))
			{
				form.grdAssessments().setEnabled(true);
			}
		}
		else
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.grdForms().setEnabled(true);			
			}
		}
		form.getLocalContext().setSelectedTreeValue(node.getValue());
	}
	protected void onGrdListSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		AppNavShortVo nav = form.grdList().getValue();
		if (nav != null)
		{
			populateNavigation(nav);
		}
		setFormMode(FormMode.VIEW);
	}
	private void populateNavigation(AppNavShortVo nav)
	{
		AppNavigationVo fullNav = domain.getNavigation(nav);
		populateNavigation(fullNav);
	}
	private void populateNavigation(AppNavigationVo nav)
	{
		populateNavigation(nav, true);
	}
	@SuppressWarnings("unchecked")
	private void populateNavigation(AppNavigationVo nav, boolean repopulateFormList)
	{
		if(repopulateFormList)
		{
			form.grdForms().getRows().clear();
		}
		
		form.getLocalContext().setSelectedNav(nav);
		form.treNav().clear();
		
		if (nav == null)
		{
			form.txtNavName().setValue(null);
			form.chkIsActive().setValue(false);
			form.qmbNavStartForm().setValue(null);
			form.qmbNavStartForm().setEditedText(null);
			form.qmbNavSearchForm().setValue(null);
			form.qmbNavSearchForm().setEditedText(null);
			form.grdForms().setFooterValue("<b>Total : 0</b>");
			return;
		}
		
		if(repopulateFormList)
		{
			populateFormGrid(form.getLocalContext().getAllForms());
		}
		
		if (nav.getNavigationName() != null)
		{
			form.txtNavName().setValue(nav.getNavigationName());			
		}
		if (nav.getIsActive() != null)
		{
			form.chkIsActive().setValue(nav.getIsActive().booleanValue());			
		}
		else
		{
			form.chkIsActive().setValue(true);
		}

		if(nav.getStartForm()!=null)
		{
			
			if(nav.getStartForm().isAlias())
			{
				form.qmbNavStartForm().newRow(nav.getStartForm(),nav.getStartForm().getAliasName());
			}
			else
			{
				form.qmbNavStartForm().newRow(nav.getStartForm(),nav.getStartForm().getName());
			}
			form.qmbNavStartForm().setValue(nav.getStartForm());
		}
		if(nav.getPatientSearchForm()!=null)
		{
			
			if(nav.getPatientSearchForm().isAlias())
			{
				form.qmbNavSearchForm().newRow(nav.getPatientSearchForm(),nav.getPatientSearchForm().getAliasName());
			}
			else
			{
				form.qmbNavSearchForm().newRow(nav.getPatientSearchForm(),nav.getPatientSearchForm().getName());
			}
			form.qmbNavSearchForm().setValue(nav.getPatientSearchForm());
			
		}
		for (int i = 0; nav.getRootGroups() != null && i < nav.getRootGroups().size(); i++)
		{
			AppNavRootGroupVo rg = nav.getRootGroups().get(i);
			TreeNode rootNode = form.treNav().getNodes().add(rg, rg.getGroupName(), ROOT_NODE, new int[]{ROOT}, true);
			rootNode.setExpandedImage(form.getImages().Core.CareContext);
			rootNode.setCollapsedImage(form.getImages().Core.CareContext);
			rootNode.setSelectedImage(form.getImages().Core.CareContext);
					
			ArrayList children = new ArrayList();
			for (int j = 0; rg.getGroups() != null && j < rg.getGroups().size(); j++)
			{
				children.add(rg.getGroups().get(j));
			}
			for (int k = 0; rg.getForms() != null && k < rg.getForms().size(); k++)
			{
				children.add(rg.getForms().get(k));
			}
			Collections.sort(children, new NavComparator());
			
			for (int m = 0; m < children.size(); m++)
			{
				Object child = children.get(m);
				if (child instanceof AppNavSecondGroupVo)
				{
					addSecondGroup(rootNode, (AppNavSecondGroupVo)child, nav);
				}
				else
				{
					addNavForm(rootNode, (AppNavFormVo)child, nav);
				}
			}
		}
		
		form.treNav().expandAll();
		
		if(repopulateFormList)
		{
			form.grdForms().setFooterValue("<b>Total : " + form.grdForms().getRows().size() + "</b>");
		}
	}

	private void addSecondGroup(TreeNode rootNode, AppNavSecondGroupVo sg, AppNavigationVo nav)
	{
		TreeNode secNode = rootNode.getNodes().add(sg, sg.getGroupName(), SEC_NODE, new int[]{ROOT_NODE}, true);
		secNode.setExpandedImage(form.getImages().Core.CareSpell);
		secNode.setCollapsedImage(form.getImages().Core.CareSpell);
		secNode.setSelectedImage(form.getImages().Core.CareSpell);
			
		for (int k = 0; sg.getForms() != null && k < sg.getForms().size(); k++)
		{
			addNavForm(secNode, sg.getForms().get(k), nav);
		}
	}

	private void addNavForm(TreeNode parentNode, AppNavFormVo af, AppNavigationVo nav)
	{
		TreeNode formNode = parentNode.getNodes().add(af, af.getNodeText() , FORM_NODE, new int[]{ROOT_NODE, SEC_NODE}, true);
		String navFormTooltip = getNavFormTooltip(af);
		formNode.setTooltip(navFormTooltip);
		if (af.isReadOnly())
		{
			formNode.setExpandedImage(form.getImages().Core.ViewDisabled);
			formNode.setCollapsedImage(form.getImages().Core.ViewDisabled);
			formNode.setSelectedImage(form.getImages().Core.ViewDisabled);	
		}
		else
		{
			formNode.setExpandedImage(form.getImages().Core.View);
			formNode.setCollapsedImage(form.getImages().Core.View);
			formNode.setSelectedImage(form.getImages().Core.View);				
		}
		if (af.getForm().equals(nav.getStartForm()))
		{
			if (af.isReadOnly())
			{
				formNode.setExpandedImage(form.getImages().Core.HomeDisabled);
				formNode.setCollapsedImage(form.getImages().Core.HomeDisabled);
				formNode.setSelectedImage(form.getImages().Core.HomeDisabled);	
			}
			else
			{
				formNode.setExpandedImage(form.getImages().Core.Home);
				formNode.setCollapsedImage(form.getImages().Core.Home);
				formNode.setSelectedImage(form.getImages().Core.Home);	
			}
		}
		else if (af.getForm().equals(nav.getPatientSearchForm()))
		{
			if (af.isReadOnly())
			{
				formNode.setExpandedImage(form.getImages().Core.FindDisabled16);
				formNode.setCollapsedImage(form.getImages().Core.FindDisabled16);
				formNode.setSelectedImage(form.getImages().Core.FindDisabled16);				
			}
			else
			{
				formNode.setExpandedImage(form.getImages().Core.FindEnabled16);
				formNode.setCollapsedImage(form.getImages().Core.FindEnabled16);
				formNode.setSelectedImage(form.getImages().Core.FindEnabled16);				
			}
		}
		else if (af.getForm().equals(this.getAssessmentForm()))
		{			
			if (af.isReadOnly() || af.getLinkedClasses() == null || af.getLinkedClasses().size() == 0)
			{
				formNode.setExpandedImage(form.getImages().Core.PasteDisabled);
				formNode.setCollapsedImage(form.getImages().Core.PasteDisabled);
				formNode.setSelectedImage(form.getImages().Core.PasteDisabled);				
			}
			else
			{
				GenericIdentifierVo genId = af.getLinkedClasses().get(0);
				if (genId.getClassType().equals(STRUCTURED_ASSESSMENT))
				{
					formNode.setExpandedImage(form.getImages().Core.PasteEnabled);
					formNode.setCollapsedImage(form.getImages().Core.PasteEnabled);
					formNode.setSelectedImage(form.getImages().Core.PasteEnabled);									
				}
				else if (genId.getClassType().equals(GRAPHIC_ASSESSMENT))
				{
					formNode.setExpandedImage(form.getImages().Admin.Color);
					formNode.setCollapsedImage(form.getImages().Admin.Color);
					formNode.setSelectedImage(form.getImages().Admin.Color);				
				}
				else
				{
					formNode.setExpandedImage(form.getImages().Core.help1);
					formNode.setCollapsedImage(form.getImages().Core.help1);
					formNode.setSelectedImage(form.getImages().Core.help1);														
				}
			}			
		}
		else if (af.getForm().equals(this.getReportViewerForm()))
		{
			formNode.setExpandedImage(form.getImages().Core.ReportDesigner);
			formNode.setCollapsedImage(form.getImages().Core.ReportDesigner);
			formNode.setSelectedImage(form.getImages().Core.ReportDesigner);				
		}
		//form.grdForms().setValue(af.getForm());		
		//form.grdForms().removeSelectedRow();
	}
	
	private String getNavFormTooltip(AppNavFormVo af)
	{
		StringBuffer sb = new StringBuffer();
		
		if(af.getAppForm().isAlias())
		{
			sb.append("<b>Form : </b>"+af.getForm().getName()+" ("+af.getAppForm().getAliasName()+")");
		}
		else
		{
			sb.append("<b>Form : </b>" + af.getForm().getName());
		}
		sb.append("<br><b>RIP : </b>" + af.getFormAccessForRip().toString());
		sb.append("<br><b>EPIS : </b>" + af.getFormAccessForEpisEnd().toString());
		if (af.getLinkedClasses() != null && af.getLinkedClasses().size() > 0)
		{
			GenericIdentifierVo genId = af.getLinkedClasses().get(0);
			ValueObjectRef voRef = (ValueObjectRef)GenericIdentifierFactory.instantiate(genId);
			ValueObject assess = domain.getAssessment(voRef);
			if (assess instanceof UserAssessmentLiteVo)
			{
				genId.setClassType(STRUCTURED_ASSESSMENT);
				UserAssessmentLiteVo userAssess = (UserAssessmentLiteVo)assess;
				sb.append("<br><b>Structured Assessment : </b>" + userAssess.getName());				
			}
			else if (assess instanceof GraphicAssessmentShortVo)
			{
				genId.setClassType(GRAPHIC_ASSESSMENT);
				GraphicAssessmentShortVo graphicAssess = (GraphicAssessmentShortVo)assess;
				sb.append("<br><b>Graphic Assessment : </b>" + graphicAssess.getName());
			}
		}		
		return sb.toString();
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AppNavigationVo nav = new AppNavigationVo();
		form.txtNavName().setValue(null);
		form.qmbNavStartForm().setValue(null);
		form.qmbNavSearchForm().setValue(null);
		form.qmbNavStartForm().setEditedText(null);
		form.qmbNavSearchForm().setEditedText(null);
		nav.setRootGroups(new AppNavRootGroupVoCollection());
		form.getLocalContext().setSelectedNav(nav);
		populateNavigation(form.getLocalContext().getSelectedNav());
		setFormMode(FormMode.EDIT);
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		populateNavigation(form.getLocalContext().getSelectedNav());
		setFormMode(FormMode.EDIT);
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		AppNavigationVo nav = form.getLocalContext().getSelectedNav();
		nav.setIsActive(new Boolean(form.chkIsActive().getValue()));
		nav.setNavigationName(form.txtNavName().getValue());
		for (int i = 0; i < form.treNav().getNodes().size(); i++)
		{
			this.setPosIndexes(form.treNav().getNodes().get(i));
		}
		String[] errors = nav.validate(validateUIRules());
		if (errors != null)
		{
			engine.showErrors(errors);
			return;
		}
		try
		{
			domain.saveNavigation(nav);			
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());

			form.getLocalContext().setSelectedNav(null);
			form.grdList().setValue(null);
			populateNavigation(form.getLocalContext().getSelectedNav());
			setFormMode(FormMode.VIEW);
			return;
		}
		clearSearchCriteria();
		AppNavShortVoCollection coll = domain.listNavigations();
		form.getLocalContext().setAllNavs(coll);
		populateNavGrid(coll);
		form.getLocalContext().setSelectedNav(null);
		populateNavigation(form.getLocalContext().getSelectedNav());
	}
	private String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();
		if (form.qmbNavStartForm().getValue()!=null)
		{
			int startFormID = form.qmbNavStartForm().getValue().getFormId();
			TreeNodeCollection roots = form.treNav().getNodes();
			if (isFormInColl(roots, startFormID)==false)
				errors.add("Start Up form must be added to the Navigation Tree");
		}
		if (errors.size() == 0)
			return null;
		
		String[] result = new String[(errors.size())];
		errors.toArray(result);
		return result;
	}
	private boolean isFormInColl(TreeNodeCollection coll,final int formID)
	{
		if (coll == null)
			return false;
		boolean result = false;
		for (int i=0 ; i<coll.size() ; i++)
		{
			TreeNode node = coll.get(i);
			
			if (node == null || node.getValue() == null)
				break;
			if (node.getValue() instanceof AppNavFormVo)
			{
				if (((AppNavFormVo)node.getValue()).getAppForm().getFormId() == formID)
					return true;
			}
			else
			{
				 result = isFormInColl(node.getNodes(),formID);
				if (result == true)
					return true;
			}
		
			
		}
		return false;
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedNav(null);
		form.grdList().setValue(null);
		clearSearchCriteria();
		populateNavigation(form.getLocalContext().getSelectedNav());
		setFormMode(FormMode.VIEW);
	}
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		AppNavFormVo appform;
		switch (menuItemID)
		{
			case GenForm.ContextMenus.NavAdmin.EditText :
				form.treNav().beginEditSelectedNode();
			break;
			case GenForm.ContextMenus.NavAdmin.AddRootGroup :	
				String rootText = "New Top Group " + (form.treNav().getNodes().size() + 1);
				
				AppNavRootGroupVo rootGrp = new AppNavRootGroupVo();
				rootGrp.setGroupName(rootText);
				rootGrp.setGroups(new AppNavSecondGroupVoCollection());
				rootGrp.setForms(new AppNavFormVoCollection());
				form.getLocalContext().getSelectedNav().getRootGroups().add(rootGrp);

				TreeNode rootNode = form.treNav().getNodes().add(rootGrp, rootText , true, ROOT_NODE, new int[]{}, true);
				rootNode.setExpandedImage(form.getImages().Core.CareContext);
				rootNode.setCollapsedImage(form.getImages().Core.CareContext);
				rootNode.setSelectedImage(form.getImages().Core.CareContext);
				form.treNav().beginEditSelectedNode();
			break;
			case GenForm.ContextMenus.NavAdmin.AddSecGroup :
				rootNode = form.treNav().getSelectedNode();
				rootGrp = (AppNavRootGroupVo)rootNode.getValue();
				if (rootGrp.getGroups() == null)
				{
					rootGrp.setGroups(new AppNavSecondGroupVoCollection());
				}
				String secText = "New Second Group " + (rootGrp.getGroups().size() + 1);					
				AppNavSecondGroupVo secGrp = new AppNavSecondGroupVo();
				secGrp.setForms(new AppNavFormVoCollection());
				secGrp.setPosIndex(new Integer(form.treNav().getSelectedNode().getNodes().size()));
				rootGrp.getGroups().add(secGrp);
				setPosIndexes(rootNode);
				
				TreeNode secNode = rootNode.getNodes().add(secGrp, secText, true, SEC_NODE, new int[]{ROOT_NODE}, true);
				secNode.setExpandedImage(form.getImages().Core.CareSpell);
				secNode.setCollapsedImage(form.getImages().Core.CareSpell);
				secNode.setSelectedImage(form.getImages().Core.CareSpell);
				form.treNav().beginEditSelectedNode();
			break;
			case GenForm.ContextMenus.NavAdmin.Remove :				
				Object val = form.treNav().getValue();				
				if (val instanceof AppNavRootGroupVo)
				{
					form.getLocalContext().getSelectedNav().getRootGroups().remove((AppNavRootGroupVo)val);
				}
				else if (val instanceof AppNavSecondGroupVo)
				{
					rootGrp = (AppNavRootGroupVo)form.treNav().getSelectedNode().getParent().getValue();
					rootGrp.getGroups().remove((AppNavSecondGroupVo)val);
				}
				else if (val instanceof AppNavFormVo)
				{
					Object parentVal = form.treNav().getSelectedNode().getParent().getValue();
					if (parentVal instanceof AppNavRootGroupVo)
					{
						((AppNavRootGroupVo)parentVal).getForms().remove((AppNavFormVo)val);
					}
					else if (parentVal instanceof AppNavSecondGroupVo)
					{
						((AppNavSecondGroupVo)parentVal).getForms().remove((AppNavFormVo)val);						
					}					
				}
				populateNavigation(form.getLocalContext().getSelectedNav());
				break;
			case GenForm.ContextMenus.NavAdmin.SetSearchForm :
				appform = (AppNavFormVo)form.treNav().getValue();
				setNavSearchForm(appform);
				break;
			case GenForm.ContextMenus.NavAdmin.SetStartForm :
				appform = (AppNavFormVo)form.treNav().getValue();
				setNavStartForm(appform);				
				break;
			case GenForm.ContextMenus.GenericGrid.Add :
				this.onBtnNewClick();
				break;
			case GenForm.ContextMenus.GenericGrid.Update :
				this.onBtnUpdateClick();
				break;
			case GenForm.ContextMenus.GenericGrid.Replace :
				this.copySelectedNav();
				break;
			case GenForm.ContextMenus.NavAdmin.SetReadOnly :
				AppNavFormVo navForm;
				val = form.treNav().getValue();				
				if (val instanceof AppNavRootGroupVo)
				{
					for (int i=0;i<((AppNavRootGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavRootGroupVo)val).getForms().get(i);
						item.setIsReadOnly(Boolean.TRUE);
					}
					for (int i=0;i<((AppNavRootGroupVo)val).getGroups().size();i++)
					{
						AppNavSecondGroupVo group = ((AppNavRootGroupVo)val).getGroups().get(i);
						for (int k=0;k<group.getForms().size();k++)
						{
							AppNavFormVo item = group.getForms().get(k);
							item.setIsReadOnly(Boolean.TRUE);
						}
					}
					
				}
				else if (val instanceof AppNavSecondGroupVo)
				{
					for (int i=0;i<((AppNavSecondGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavSecondGroupVo)val).getForms().get(i);
						item.setIsReadOnly(Boolean.TRUE);
					}
				}
				else 
				{
					navForm = (AppNavFormVo)val;
					if (navForm.isReadOnly())
						navForm.setIsReadOnly(Boolean.FALSE);
					else
						navForm.setIsReadOnly(Boolean.TRUE);

				}
				populateNavigation(form.getLocalContext().getSelectedNav());	
				break;
			case GenForm.ContextMenus.NavAdmin.SetReadWrite :
				/*
				 * This is only used when operating on group menus. For leaf items the SetReadOnly menu options 
				 * is reused
				 */
				val = form.treNav().getValue();				
				if (val instanceof AppNavRootGroupVo)
				{
					for (int i=0;i<((AppNavRootGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavRootGroupVo)val).getForms().get(i);
						item.setIsReadOnly(Boolean.FALSE);
					}
					for (int i=0;i<((AppNavRootGroupVo)val).getGroups().size();i++)
					{
						AppNavSecondGroupVo group = ((AppNavRootGroupVo)val).getGroups().get(i);
						for (int k=0;k<group.getForms().size();k++)
						{
							AppNavFormVo item = group.getForms().get(k);
							item.setIsReadOnly(Boolean.FALSE);
						}
					}
					
				}
				else if (val instanceof AppNavSecondGroupVo)
				{
					for (int i=0;i<((AppNavSecondGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavSecondGroupVo)val).getForms().get(i);
						item.setIsReadOnly(Boolean.FALSE);
					}
				}
				populateNavigation(form.getLocalContext().getSelectedNav());	
				break;
				
			case GenForm.ContextMenus.NavAdmin.InaccessibleForRip :
				navForm = (AppNavFormVo)form.treNav().getValue();
				if (navForm.getFormAccessForRip().equals(FormAccess.NO_ACCESS))
					navForm.setAccessForRip(FormReadWrite.WRITE);
				else
					navForm.setAccessForRip(FormReadWrite.DENIED);
				populateNavigation(form.getLocalContext().getSelectedNav());	
				break;
			case GenForm.ContextMenus.NavAdmin.InaccessibleForEpisEnd :
				navForm = (AppNavFormVo)form.treNav().getValue();
				if (navForm.getFormAccessForEpisEnd().equals(FormAccess.NO_ACCESS))
					navForm.setAccessForEpisEnd(FormReadWrite.WRITE);
				else
					navForm.setAccessForEpisEnd(FormReadWrite.DENIED);
				populateNavigation(form.getLocalContext().getSelectedNav());	
				break;
			case GenForm.ContextMenus.NavAdmin.ReadOnlyForRip :
				val = form.treNav().getValue();				
				if (val instanceof AppNavRootGroupVo)
				{
					for (int i=0;i<((AppNavRootGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavRootGroupVo)val).getForms().get(i);
						item.setAccessForRip(FormReadWrite.READ);
					}
					for (int i=0;i<((AppNavRootGroupVo)val).getGroups().size();i++)
					{
						AppNavSecondGroupVo group = ((AppNavRootGroupVo)val).getGroups().get(i);
						for (int k=0;k<group.getForms().size();k++)
						{
							AppNavFormVo item = group.getForms().get(k);
							item.setAccessForRip(FormReadWrite.READ);
						}
					}
					
				}
				else if (val instanceof AppNavSecondGroupVo)
				{
					for (int i=0;i<((AppNavSecondGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavSecondGroupVo)val).getForms().get(i);
						item.setAccessForRip(FormReadWrite.READ);
					}
				}
				else
				{
					navForm = (AppNavFormVo)form.treNav().getValue();
					if (navForm.getFormAccessForRip().equals(FormAccess.READ_ONLY))
						navForm.setAccessForRip(FormReadWrite.WRITE);
					else
						navForm.setAccessForRip(FormReadWrite.READ);
				}

				populateNavigation(form.getLocalContext().getSelectedNav());	
				break;
			case GenForm.ContextMenus.NavAdmin.ReadWriteForRip :
				/*
				 * This is only used when operating on group menus. For leaf items the ReadOnlyForRip menu options 
				 * is reused
				 */

				val = form.treNav().getValue();				
				if (val instanceof AppNavRootGroupVo)
				{
					for (int i=0;i<((AppNavRootGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavRootGroupVo)val).getForms().get(i);
						item.setAccessForRip(FormReadWrite.WRITE);
					}
					for (int i=0;i<((AppNavRootGroupVo)val).getGroups().size();i++)
					{
						AppNavSecondGroupVo group = ((AppNavRootGroupVo)val).getGroups().get(i);
						for (int k=0;k<group.getForms().size();k++)
						{
							AppNavFormVo item = group.getForms().get(k);
							item.setAccessForRip(FormReadWrite.WRITE);
						}
					}
					
				}
				else if (val instanceof AppNavSecondGroupVo)
				{
					for (int i=0;i<((AppNavSecondGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavSecondGroupVo)val).getForms().get(i);
						item.setAccessForRip(FormReadWrite.WRITE);
					}
				}
				populateNavigation(form.getLocalContext().getSelectedNav());	
				break;

			case GenForm.ContextMenus.NavAdmin.ReadOnlyForEpisEnd :
				val = form.treNav().getValue();				
				if (val instanceof AppNavRootGroupVo)
				{
					for (int i=0;i<((AppNavRootGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavRootGroupVo)val).getForms().get(i);
						item.setAccessForEpisEnd(FormReadWrite.READ);
					}
					for (int i=0;i<((AppNavRootGroupVo)val).getGroups().size();i++)
					{
						AppNavSecondGroupVo group = ((AppNavRootGroupVo)val).getGroups().get(i);
						for (int k=0;k<group.getForms().size();k++)
						{
							AppNavFormVo item = group.getForms().get(k);
							item.setAccessForEpisEnd(FormReadWrite.READ);
						}
					}
					
				}
				else if (val instanceof AppNavSecondGroupVo)
				{
					for (int i=0;i<((AppNavSecondGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavSecondGroupVo)val).getForms().get(i);
						item.setAccessForEpisEnd(FormReadWrite.READ);
					}
				}
				else
				{
					navForm = (AppNavFormVo)form.treNav().getValue();
					if (navForm.getFormAccessForEpisEnd().equals(FormAccess.READ_ONLY))
						navForm.setAccessForEpisEnd(FormReadWrite.WRITE);
					else
						navForm.setAccessForEpisEnd(FormReadWrite.READ);
				}

				populateNavigation(form.getLocalContext().getSelectedNav());	
				break;

			case GenForm.ContextMenus.NavAdmin.ReadWriteforEpisEnd :
				/*
				 * This is only used when operating on group menus. For leaf items the ReadOnlyForRip menu options 
				 * is reused
				 */

				val = form.treNav().getValue();				
				if (val instanceof AppNavRootGroupVo)
				{
					for (int i=0;i<((AppNavRootGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavRootGroupVo)val).getForms().get(i);
						item.setAccessForEpisEnd(FormReadWrite.WRITE);
					}
					for (int i=0;i<((AppNavRootGroupVo)val).getGroups().size();i++)
					{
						AppNavSecondGroupVo group = ((AppNavRootGroupVo)val).getGroups().get(i);
						for (int k=0;k<group.getForms().size();k++)
						{
							AppNavFormVo item = group.getForms().get(k);
							item.setAccessForEpisEnd(FormReadWrite.WRITE);
						}
					}
					
				}
				else if (val instanceof AppNavSecondGroupVo)
				{
					for (int i=0;i<((AppNavSecondGroupVo)val).getForms().size();i++)
					{
						AppNavFormVo item = ((AppNavSecondGroupVo)val).getForms().get(i);
						item.setAccessForEpisEnd(FormReadWrite.WRITE);
					}
				}
				populateNavigation(form.getLocalContext().getSelectedNav());	
				break;
			case GenForm.ContextMenus.NavAdmin.AddAssessment :
				val = form.treNav().getValue();		
				navForm = addAppNavFormVo(getAssessmentForm(), val);
				if (navForm != null)
				{
					navForm.setNodeText("Please associate an assessment with this node.");
				}
				populateNavigation(form.getLocalContext().getSelectedNav());
				
				break;
			case GenForm.ContextMenus.NavAdmin.AddReport :
				engine.open(form.getForms().Core.ReportTemplate);
				break;
		}
		setFormMode(form.getMode());

	}
	private void copySelectedNav()
	{
		AppNavigationVo navVo = form.getLocalContext().getSelectedNav();
		AppNavigationVo newNavVo = new AppNavigationVo();
		newNavVo.setComment(navVo.getComment());
		newNavVo.setIsActive(Boolean.TRUE);
		newNavVo.setIsRIE(Boolean.FALSE);
		newNavVo.setNavigationName("Copy of " + navVo.getNavigationName());
		newNavVo.setPatientSearchForm(navVo.getPatientSearchForm());
		newNavVo.setStartForm(navVo.getStartForm());
		newNavVo.setRootGroups(copyRootGroupColl(navVo.getRootGroups()));
		
		form.getLocalContext().setSelectedNav(newNavVo);
		populateNavigation(form.getLocalContext().getSelectedNav());
		setFormMode(FormMode.EDIT);		
	}

	private AppNavRootGroupVoCollection copyRootGroupColl(AppNavRootGroupVoCollection coll)
	{
		if (coll == null)
			return null;
		
		AppNavRootGroupVoCollection ret = new AppNavRootGroupVoCollection();
		for (int i = 0; i < coll.size(); i++)
		{
			AppNavRootGroupVo src = coll.get(i);
			AppNavRootGroupVo dst = new AppNavRootGroupVo();
			dst.setGroupName(src.getGroupName());
			dst.setIsRIE(Boolean.FALSE);
			dst.setForms(copyAppNavFormVoCollection(src.getForms()));
			dst.setGroups(copyAppNavSecGrpVoCollection(src.getGroups()));
			ret.add(dst);
		}
		return ret;
	}

	private AppNavSecondGroupVoCollection copyAppNavSecGrpVoCollection(AppNavSecondGroupVoCollection coll)
	{
		if (coll == null)
			return null;
		
		AppNavSecondGroupVoCollection ret = new AppNavSecondGroupVoCollection();
		for (int i = 0; i < coll.size(); i++)
		{
			AppNavSecondGroupVo src = coll.get(i);
			AppNavSecondGroupVo dst = new AppNavSecondGroupVo();
			dst.setIsRIE(Boolean.FALSE);
			dst.setGroupName(src.getGroupName());
			dst.setPosIndex(src.getPosIndex());
			dst.setForms(copyAppNavFormVoCollection(src.getForms()));
			ret.add(dst);
		}
		return ret;
	}

	private AppNavFormVoCollection copyAppNavFormVoCollection(AppNavFormVoCollection coll)
	{
		if (coll == null)
			return null;
		
		AppNavFormVoCollection ret = new AppNavFormVoCollection();
		for (int i = 0; i < coll.size(); i++)
		{
			AppNavFormVo src = coll.get(i);
			AppNavFormVo dst = new AppNavFormVo();
			dst.setAccessForEpisEnd(src.getAccessForEpisEnd());
			dst.setAccessForRip(src.getAccessForRip());
			dst.setForm(src.getForm());
			dst.setIsReadOnly(src.getIsReadOnly());
			dst.setIsRIE(Boolean.FALSE);
			dst.setNodeText(src.getNodeText());
			dst.setPosIndex(src.getPosIndex());
			dst.setLinkedClasses(copyGenericVoCollection(src.getLinkedClasses()));			
			ret.add(dst);
		}
		return ret;
	}

	private GenericIdentifierVoCollection copyGenericVoCollection(GenericIdentifierVoCollection coll)
	{
		if (coll == null)
			return null;
		
		GenericIdentifierVoCollection ret = new GenericIdentifierVoCollection();
		for (int i = 0; i < coll.size(); i++)
		{
			GenericIdentifierVo src = coll.get(i);
			GenericIdentifierVo dst = new GenericIdentifierVo();
			dst.setClassName(src.getClassName());
			dst.setClassType(src.getClassType());
			dst.setInstanceId(src.getInstanceId());
			dst.setIsRIE(Boolean.FALSE);
			ret.add(dst);
		}
		return ret;
	}

	private AppFormVo getAssessmentForm()
	{
		if (form.getLocalContext().getAssessmentForm() == null)
		{
			AppFormVo formVo = domain.getAppForm(InitConfig.getAssessmentContainerFormId());
			form.getLocalContext().setAssessmentForm(formVo);
		}
		return form.getLocalContext().getAssessmentForm();
	}

	private AppFormVo getReportViewerForm()
	{
		if (form.getLocalContext().getReportViewerForm() == null)
		{
			AppFormVo formVo = domain.getAppForm(InitConfig.getReportViewerFormId());
			form.getLocalContext().setReportViewerForm(formVo);
		}
		return form.getLocalContext().getReportViewerForm();
	}
	
	private void setPosIndexes(TreeNode rootNode)
	{
		Object val = rootNode.getValue();
		if (!(val instanceof AppNavRootGroupVo))
			return;
		
		for (int i = 0; i < rootNode.getNodes().size(); i++)
		{
			val = rootNode.getNodes().get(i).getValue();
			if (val instanceof AppNavSecondGroupVo)
			{
				AppNavSecondGroupVo secGrp = (AppNavSecondGroupVo)val;
				secGrp.setPosIndex(new Integer(i));
			}
			else if (val instanceof AppNavFormVo)
			{
				AppNavFormVo navForm = (AppNavFormVo)val;				
				navForm.setPosIndex(new Integer(i));
			}
		}
	}

	private void setNavStartForm(AppNavFormVo navform)
	{
		AppNavigationVo nav = form.getLocalContext().getSelectedNav();
		if (nav == null)
			return;
		nav.setStartForm(navform.getForm());
		populateNavigation(nav);
	}

	private void setNavSearchForm(AppNavFormVo navform)
	{
		AppNavigationVo nav = form.getLocalContext().getSelectedNav();
		if (nav == null)
			return;
		nav.setPatientSearchForm(navform.getForm());
		populateNavigation(nav);		
	}
	

	protected void onChkActiveOnlyValueChanged() throws PresentationLogicException
	{
		populateNavGrid(form.getLocalContext().getAllNavs());		
	}
	
	private class NavComparator implements Comparator
	{
		public int compare(Object obj1, Object obj2)
		{
			int int1 = 0;
			int int2 = 0;
			if (obj1 instanceof AppNavSecondGroupVo)
				int1 = ((AppNavSecondGroupVo)obj1).getPositionIndex();
			else if (obj1 instanceof AppNavFormVo)
				int1 = ((AppNavFormVo)obj1).getPositionIndex();
			if (obj2 instanceof AppNavSecondGroupVo)
				int2 = ((AppNavSecondGroupVo)obj2).getPositionIndex();
			else if (obj2 instanceof AppNavFormVo)
				int2 = ((AppNavFormVo)obj2).getPositionIndex();
			
			if (int1 < int2)
				return -1;
			else if (int1 == int2)
				return 0;
			else
				return 1;
		}
	}

	protected void onGrdAssessmentsSelectionChanged() throws PresentationLogicException
	{
		Object val;
		if (form.treNav().getSelectedNode() != null)
		{
			val = form.treNav().getSelectedNode().getValue();
			if (val instanceof AppNavFormVo)
			{
				AppNavFormVo navForm = (AppNavFormVo)val;
				GenericIdentifierVoCollection coll = new GenericIdentifierVoCollection();
				ValueObjectRef refVo = form.grdAssessments().getValue();
				GenericIdentifierVo genVo = new GenericIdentifierVo();
				genVo.setInstanceId(refVo.getBoId());
				genVo.setClassName(refVo.getClass().getName());
				coll.add(genVo);
				navForm.setLinkedClasses(coll);
				navForm.setNodeText(form.grdAssessments().getSelectedRow().getAssessmentName());
				populateNavigation(form.getLocalContext().getSelectedNav());
			}
		}
		form.grdAssessments().setEnabled(false);
	}

	protected void onQmbNavSearchFormTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbNavSearchForm().clear();
		if (value != null)
		{
			AppFormVoCollection formColl = form.getLocalContext().getAllForms();
			for (int i = 0; i < formColl.size(); i++)
			{
				AppFormVo appform = formColl.get(i);
				if(appform.getName().indexOf(value) != -1)
				{
					if (appform.isAlias())
					{
						form.qmbNavSearchForm().newRow(appform,appform.getName() + " (" + appform.getAliasName() +")",Color.Gray);
					}
					else
					{
					form.qmbNavSearchForm().newRow(appform,appform.getName());
					}
				}
			}
			form.qmbNavSearchForm().showOpened();
				

		}
		
	}

	protected void onQmbNavStartFormTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbNavStartForm().clear();
		if (value != null)
		{
			AppFormVoCollection formColl = form.getLocalContext().getAllForms();
			for (int i = 0; i < formColl.size(); i++)
			{
				AppFormVo appform = formColl.get(i);
				if(appform.getName().indexOf(value) != -1)
				{
					if (appform.isAlias())
					{
						form.qmbNavStartForm().newRow(appform,appform.getName() + " (" + appform.getAliasName() +")",Color.Gray);
					}
					else
					{
					form.qmbNavStartForm().newRow(appform,appform.getName());
					}
				}
				form.qmbNavStartForm().showOpened();
			}		

		}
		
	}

	protected void onQmbNavSearchFormValueChanged() throws PresentationLogicException
	{
		AppFormVo appform = form.qmbNavSearchForm().getValue();
		AppNavigationVo nav = form.getLocalContext().getSelectedNav();
		if (nav == null)
			return;
		nav.setPatientSearchForm(appform);
		populateNavigation(nav);		

		
	}

	protected void onQmbNavStartFormValueChanged() throws PresentationLogicException
	{
		AppFormVo appform = form.qmbNavStartForm().getValue();
		AppNavigationVo nav = form.getLocalContext().getSelectedNav();
		if (nav == null)
			return;
		nav.setStartForm(appform);
		populateNavigation(nav);		

		
	}

	protected void onChkIsActiveValueChanged() throws PresentationLogicException
	{
		AppNavigationVo nav = form.getLocalContext().getSelectedNav();
		if (nav == null)
			return;
		
		nav.setIsActive(Boolean.valueOf(form.chkIsActive().getValue()));
		populateNavigation(nav);		
		
	}
	private void clearSearchCriteria() 
	{
		form.qmbNavSearchForm().clear();
		form.qmbNavSearchForm().setValue(null);
		form.qmbNavStartForm().clear();
		form.qmbNavStartForm().setValue(null);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.ReportTemplate) && result.equals(DialogResult.OK))
		{
			Object val = form.treNav().getValue();
			
			AppNavFormVo navForm = addAppNavFormVo(getReportViewerForm(), val);
			if (navForm != null)
			{
				GenericIdentifierVoCollection coll = new GenericIdentifierVoCollection();
				ValueObjectRef refVo = form.getGlobalContext().Core.getReportTemplateRef();
				GenericIdentifierVo genVo = new GenericIdentifierVo();
				genVo.setInstanceId(refVo.getBoId());
				genVo.setClassName(refVo.getClass().getName());
				coll.add(genVo);
				navForm.setLinkedClasses(coll);
				navForm.setNodeText(form.getGlobalContext().Core.getTemplate());
				populateNavigation(form.getLocalContext().getSelectedNav());
				
				navForm.setNodeText(form.getGlobalContext().Core.getTemplate());
			}
			populateNavigation(form.getLocalContext().getSelectedNav());
		}
	}
}
