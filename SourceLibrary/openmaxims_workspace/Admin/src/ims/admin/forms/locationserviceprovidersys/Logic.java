//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.44 build 2244.18931)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.locationserviceprovidersys;

import ims.admin.helper.OrgTreeHelper;
import ims.admin.vo.ConfigPropertyVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocMostVoCollection;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocSiteVo;
import ims.core.vo.LocationServiceVo;
import ims.core.vo.LocationServiceVoCollection;
import ims.core.vo.OrganisationVo;
import ims.core.vo.OrganisationVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.TextileString;
import ims.ocrr.vo.LocSvcProviderSysVo;
import ims.ocrr.vo.LocSvcProviderSysVoCollection;
import ims.ocrr.vo.ProviderSystemVo;
import ims.ocrr.vo.ProviderSystemVoCollection;

public class Logic extends BaseLogic
{
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void populateLocations(LocMostVoCollection voColl, TreeNode node)
	{
		TreeNode myNode = null;

		if (voColl == null)
			return;

		voColl.sort();
		for (int i = 0; i < voColl.size(); i++)
		{
			myNode = node.getNodes().add(voColl.get(i), voColl.get(i).getName());

			myNode.setCollapsedImage(form.getImages().Admin.Location);
			myNode.setExpandedImage(form.getImages().Admin.Location);

			populateLocations(voColl.get(i).getLocations(), myNode);
		}
	}

	private void initialise()
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add Provider System");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Provider System");
		form.getContextMenus().getGenericGridReplaceItem().setText("Replace Provider System");

		form.imgLocation().setValue(form.getImages().Admin.Location);
		form.imgLocSite().setValue(form.getImages().Admin.LocationSite);
		form.imgOrganisation().setValue(form.getImages().Admin.Organisation);
		form.imgProviderSystem().setValue(form.getImages().OCRR.Provider);

		form.cmbIdComp().clear();
		form.cmbIdComp().newRow(new Integer(4), "Component 4");
		form.cmbIdComp().newRow(new Integer(5), "Component 5");
		form.getGlobalContext().OCRR.setProviderSystemColl(null);
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save() == false)
			return;
		TreeNode node = form.treHeader().getSelectedNode();
		if (node != null)
		{
			Object value = node.getValue();

			// this came from an Add Provider User action
			if (value instanceof LocationServiceVo)
				addProviderSystem(node);

			treeViewSelectionChanged(node);
		}

		form.setMode(FormMode.VIEW);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		treeViewSelectionChanged(form.treHeader().getSelectedNode());
		form.setMode(FormMode.VIEW);
	}

	protected void onTreHeaderTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		treeViewSelectionChanged(node);
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
				newInstance();
			break;
			case GenForm.ContextMenus.GenericGrid.Update :
				updateInstance();				
			break;
			case GenForm.ContextMenus.GenericGrid.Replace :
				replaceInstance();				
			break;			
		}
	}

	public void replaceInstance()
	{
		LocSvcProviderSysVo voLocSvcProviderSys = getSelectedProvider();
		if (voLocSvcProviderSys == null)
		{
			engine.showMessage("Please select a provider");
			return;
		}

		form.getGlobalContext().OCRR.setProviderSystem(voLocSvcProviderSys.getProviderSystem());
		form.getGlobalContext().OCRR.setProviderSystemFormMode(FormMode.VIEW);
		engine.open(form.getForms().Admin.ProviderSystem);		
	}
	
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		if (getSelectedLocation() == null)
		{
			engine.showMessage("Please select a Location");
			return;
		}
		clearInstanceControls();

		form.getGlobalContext().OCRR.setProviderSystem(null);
		form.getGlobalContext().OCRR.setProviderSystemFormMode(FormMode.VIEW);
		engine.open(form.getForms().Admin.ProviderSystem);

		form.setMode(FormMode.EDIT);

	}

	public void clearInstanceControls()
	{
		form.getLocalContext().setSelectedRecordProviderSystem(null);
		form.txtIpAddressHost().setValue(null);
		form.cmbIdComp().setValue(null);
		form.htmProviderView().setHTML("");
		super.clearScreen();
	}

	public boolean save() throws PresentationLogicException
	{
		LocSvcProviderSysVo voLocSvcProviderSys = form.getLocalContext().getSelectedRecord();
		
		if (form.getGlobalContext().OCRR.getProviderSystemIsNotNull())
		{
			LocSvcProviderSysVoCollection coll = domain.listProviderSystemById(form.getGlobalContext().OCRR.getProviderSystem());
			
			//WDEV-2952 
			if (coll != null)
			{
				if (voLocSvcProviderSys == null)
					voLocSvcProviderSys = new LocSvcProviderSysVo();
				
				voLocSvcProviderSys.setProviderSystem(coll.get(0).getProviderSystem());
			}
		}
		
		if (voLocSvcProviderSys == null)
			voLocSvcProviderSys = new LocSvcProviderSysVo();
		
		if(checkIfProviderSystemExistInNode(voLocSvcProviderSys) == true)
		{
			engine.showErrors(new String[]{"You can not replace a provider with an existing provider."});
			return false;
		}

		populateDataFromScreen(voLocSvcProviderSys);

		String[] errors = voLocSvcProviderSys.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			voLocSvcProviderSys = domain.saveLocationServiceProvider(voLocSvcProviderSys);
			form.getLocalContext().setSelectedRecord(voLocSvcProviderSys);
			if (form.treHeader().getSelectedNode().getValue() instanceof LocationServiceVo)
				form.treHeader().getSelectedNode().setValue(voLocSvcProviderSys.getLocationService());
			else if (form.treHeader().getSelectedNode().getValue() instanceof LocSvcProviderSysVo)
				form.treHeader().getSelectedNode().getParent().setValue(voLocSvcProviderSys.getLocationService());

		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			setSelectedNodeData(voLocSvcProviderSys);
			treeViewSelectionChanged(form.treHeader().getSelectedNode());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		//wdev-11759
		catch(UnqViolationUncheckedException e)
		{
			engine.showMessage("This provider already exist.");
			setSelectedNodeData(voLocSvcProviderSys);
			treeViewSelectionChanged(form.treHeader().getSelectedNode());
			return false;
		}
		//-------------

		return true;
	}
	private Boolean checkIfProviderSystemExistInNode(LocSvcProviderSysVo voLocSvcProviderSys)
	{
		if(voLocSvcProviderSys == null || form.getGlobalContext().OCRR.getProviderSystemColl() == null)
			return false;
		else
		{
			if(form.getGlobalContext().OCRR.getProviderSystemCollIsNotNull())
			{
				ProviderSystemVoCollection tempColl = form.getGlobalContext().OCRR.getProviderSystemColl();
				for(int i = 0; i<tempColl.size();i++ )
				{
					if(voLocSvcProviderSys.getProviderSystem().getID_ProviderSystem().equals(tempColl.get(i).getID_ProviderSystem()))
					   return true;
				}
				return false;
			}
			else
				return false;
		}
	}
	public void updateControlsState()
	{
		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		boolean isLocationServiceVo = (form.treHeader().getSelectedNode() != null && form.treHeader().getSelectedNode().getValue()	instanceof LocationServiceVo);
		boolean service = false;
		
		if (isLocationServiceVo)
		{
			service = form.treHeader().getSelectedNode().getNodes().size() < 1;
		}
		
		form.getContextMenus().getGenericGridAddItem().setVisible(viewMode && isAddAllowed() && service);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(viewMode && isPoviderSelected());
		form.getContextMenus().getGenericGridReplaceItem().setVisible(viewMode && isPoviderSelected());
	}

	public void updateInstance()
	{
		LocSvcProviderSysVo voLocSvcProviderSys = getSelectedProvider();
		if (voLocSvcProviderSys == null)
		{
			engine.showMessage("Please select a provider");
			return;
		}

		form.getGlobalContext().OCRR.setProviderSystem(voLocSvcProviderSys.getProviderSystem());
		form.getGlobalContext().OCRR.setProviderSystemFormMode(FormMode.EDIT);
		engine.open(form.getForms().Admin.ProviderSystem);
	}

	public void open() throws PresentationLogicException
	{
		OrganisationVo voOrg = new OrganisationVo();
		clearInstanceControls();
		voOrg.setParentOrganisation(null);
		OrganisationVoCollection voColl = domain.listOrganisation(voOrg);
		new OrgTreeHelper(form.getImages().Admin.Organisation, form.getImages().Admin.Organisation, form.getImages().Admin.LocationSite, form.getImages().Admin.LocationSite, form.getImages().Admin.Location, form.getImages().Admin.Location).populateOrgTree(form.treHeader(), voColl, false, false, true);
		form.treHeader().expandAll();
		form.setMode(FormMode.VIEW);
	}
	
	// private methods -----------------
	/**
	 * @param node
	 */
	private void treeViewSelectionChanged(ims.framework.controls.TreeNode node)
	{
		clearInstanceControls();
		if (node == null)
			return;

		Object value = node.getValue();
		if (value instanceof LocSvcProviderSysVo)
		{
			LocSvcProviderSysVo voLocSvcProviderSys = (LocSvcProviderSysVo) value;
			populateScreenFromData(voLocSvcProviderSys.getProviderSystem());
			populateServiceProviders(node.getParent(), (LocationServiceVo) node.getParent().getValue());
			form.getLocalContext().setSelectedRecord((LocSvcProviderSysVo) value);
		}

		if (value instanceof LocShortVo)
		{
			populateLocationServices(node, (LocShortVo) node.getValue());
			if (value instanceof LocSiteVo)
			{
				LocSiteVo voLocSite = (LocSiteVo) node.getValue();
				populateLocations(voLocSite.getLocations(), node);
				node.setExpanded(true);
			}
		}

		if (value instanceof LocationServiceVo)
		{
			populateServiceProviders(node, (LocationServiceVo) node.getValue());
			form.getLocalContext().setSelectedRecord(null);
		}

		updateControlsState();
	}

	/**
	 * @param node
	 */
	private void addProviderSystem(TreeNode node)
	{
		Object value = node.getValue();
		if (value instanceof LocationServiceVo)
		{

			LocSvcProviderSysVoCollection voLocSvcProviderSys = null;
			if (node.getNodes().size() > 0)
			{
				node.getNodes().clear();
				// get list of locserviceproviders for this locationservice
				voLocSvcProviderSys = domain.listLocationServiceProvider(((LocationServiceVo) value).getID_LocationService());
				if (voLocSvcProviderSys != null)
				{
					for (int i = 0; i < voLocSvcProviderSys.size(); i++)
					{
						TreeNode providerNode = node.getNodes().add(voLocSvcProviderSys, getProviderSystemName(voLocSvcProviderSys.get(i)));
						providerNode.setExpandedImage(form.getImages().OCRR.Provider);
						providerNode.setCollapsedImage(form.getImages().OCRR.Provider);
					}
				}
			}
		}
	}

	/**
	 * @param voLocSvcProviderSys
	 * @return
	 */
	private String getProviderSystemName(LocSvcProviderSysVo voLocSvcProviderSys)
	{
		return voLocSvcProviderSys.getProviderSystemIsNotNull() ? voLocSvcProviderSys.getProviderSystem().getSystemName() : "";
	}

	private void setSelectedNodeData(LocSvcProviderSysVo voLocSvcProviderSys)
	{
		TreeNode node = form.treHeader().getSelectedNode();
		if (voLocSvcProviderSys != null && node != null)
		{
			Object value = node.getValue();
			if (value instanceof LocSvcProviderSysVo)
			{
				node.setValue(voLocSvcProviderSys);
				node.setText(getProviderSystemName(voLocSvcProviderSys));
			}
		}
	}

	private void populateDataFromScreen(LocSvcProviderSysVo voLocSvcProviderSys)
	{
		if (voLocSvcProviderSys == null)
			voLocSvcProviderSys = new LocSvcProviderSysVo();

		if (voLocSvcProviderSys.getID_LocSvcProviderSys() == null)
			voLocSvcProviderSys.setLocationService(getSelectedLocation());

		voLocSvcProviderSys.setProviderSystem(form.getGlobalContext().OCRR.getProviderSystem());
	}

	protected void populateScreenFromData(ProviderSystemVo voProviderSystem)
	{
		if (voProviderSystem == null)
			return;

		form.cmbIdComp().setValue(voProviderSystem.getIdtypeComponent());
		super.populateScreenFromData(voProviderSystem);
		
		// Populate Configuration Items
		if (voProviderSystem.getConfigItemsIsNotNull())
		{
			GenForm.grdConfigItemsRow row;
			form.grdConfigItems().getRows().clear();
			for (int i=0; i<voProviderSystem.getConfigItems().size(); i++)
			{
				ConfigPropertyVo vo = voProviderSystem.getConfigItems().get(i);
				row = form.grdConfigItems().getRows().newRow();
				row.setProperty(vo.getPropertyName());
				if (vo.getPropertyValueIsNotNull())
				{
					//TODO review
					row.setColValue(vo.getPropertyValue().equals("TRUE")?true:false);
				}
			}
		}
	}

	private LocationServiceVo getSelectedLocation()
	{
		TreeNode node = form.treHeader().getSelectedNode();
		if (node != null)
		{
			Object value = node.getValue();
			if (value instanceof LocationServiceVo)
				return (LocationServiceVo) value;
		}

		return null;
	}

	private LocSvcProviderSysVo getSelectedProvider()
	{
		TreeNode node = form.treHeader().getSelectedNode();
		if (node != null)
		{
			Object value = node.getValue();
			if (value instanceof LocSvcProviderSysVo)
				return (LocSvcProviderSysVo) value;
		}
		return null;
	}

	private boolean isPoviderSelected()
	{
		return getSelectedProvider() != null;
	}

	private boolean isAddAllowed()
	{
		//LocationServiceVo voLocationService = getSelectedLocation();

		TreeNode node = form.treHeader().getSelectedNode();
		if (node != null)
		{
			return true;
			//return node.getNodes().size() == 0 && voLocationService != null && voLocationService.getLocationIsNotNull() && voLocationService.getLocation().getTypeIsNotNull() && (voLocationService.getLocation().getType().equals(LocationType.PATHOLOGYLABORATORY) || voLocationService.getLocation().getType().equals(LocationType.CLINICALIMAGINGDEPARTMENT));
		}
		return false;
	}

	private void populateLocationServices(TreeNode node, LocShortVo voLocation)
	{
		LocationServiceVoCollection voLocationServices = domain.listLocationService(voLocation);
		TreeNode childServiceNode = null;
		String service = "";
		String HtmlOut = "";
		node.getNodes().clear();
		for (int i = 0; i < voLocationServices.size(); i++)
		{
			if (voLocationServices.get(i).getServiceIsNotNull() && voLocationServices.get(i).getService().getServiceNameIsNotNull())
			{
				childServiceNode = node.getNodes().add(voLocationServices.get(i), voLocationServices.get(i).getService().getServiceName());
				service = formatServiceVo(voLocationServices.get(i));
				HtmlOut += service;
				childServiceNode.setTooltip(service);
				childServiceNode.setExpandedImage(form.getImages().Admin.Service);
				childServiceNode.setCollapsedImage(form.getImages().Admin.Service);
				childServiceNode.setSelectedImage(form.getImages().Admin.Service);
			}
		}

		node.setExpanded(true);

		String out = "";
		if (voLocation.getNameIsNotNull() && voLocationServices.size() > 0)
		{
			out = makeTextile("<CENTER>*" + ConfigFlag.UI.DISPLAY_NAME_LOCATION.getValue(true) + ": " + voLocation.getName() + "*</CENTER>", "SlateBlue", "tahoma", "14");
			out += HtmlOut;
			form.htmProviderView().setHTML(new TextileString(out).toString());
		}
		else
			form.htmProviderView().setHTML("");

	}

	private void populateServiceProviders(TreeNode node, LocationServiceVo voLocService)
	{
		String out = "";
		TreeNode childNode = null;

		if ((node != null) && (voLocService != null) && (voLocService.getID_LocationServiceIsNotNull()))
		{
			node.getNodes().clear();
			LocSvcProviderSysVoCollection voLocSvcProviderSys = null;
			// get list of locserviceproviders for this location
			voLocSvcProviderSys = domain.listLocationServiceProvider(voLocService.getID_LocationService());
			form.getGlobalContext().OCRR.setProviderSystemColl(returnProviderSystem(voLocSvcProviderSys));
			out += formatServiceHeaderVo(voLocService);
			if ((voLocSvcProviderSys != null) && (voLocSvcProviderSys.size() > 0))
			{
				for (int i = 0; i < voLocSvcProviderSys.size(); i++)
				{
					// html output
					out += formatProviderVo(voLocSvcProviderSys.get(i).getProviderSystem());
					out += makeNewLine(new Integer(1));

					// add node
					childNode = node.getNodes().add(voLocSvcProviderSys.get(i), voLocSvcProviderSys.get(i).getProviderSystemIsNotNull() ? voLocSvcProviderSys.get(i).getProviderSystem().getSystemNameIsNotNull() ? voLocSvcProviderSys.get(i).getProviderSystem().getSystemName() : "" : "");
					childNode.setCollapsedImage(form.getImages().OCRR.Provider);
					childNode.setExpandedImage(form.getImages().OCRR.Provider);
				}
				node.setExpanded(true);
			}
			else
				out += makeTextile("<CENTER>*No provider system*</CENTER>", "SlateBlue", "tahoma", "14");
		}

		form.htmProviderView().setHTML(new TextileString(out).toString());
	}
	private ProviderSystemVoCollection returnProviderSystem(LocSvcProviderSysVoCollection voLocSvcProviderSys)
	{
		if(voLocSvcProviderSys == null || voLocSvcProviderSys.size()== 0)
			return null;
		else
		{
			ProviderSystemVoCollection temcoll = new ProviderSystemVoCollection();
			for(int i = 0; i<voLocSvcProviderSys.size();i++ )
			{
				temcoll.add(voLocSvcProviderSys.get(i).getProviderSystem());
			}
			if(temcoll.size() > 0)
				return temcoll;
			else
				return null;
		}
	}
	private String formatProviderVo(ProviderSystemVo voProviderSystem)
	{
		String out = makeTextile("<CENTER>*_____________________________________________________________*</CENTER>", "SlateBlue", "tahoma", "12");
		out += makeNewLine(new Integer(1));
		out += makeTextile("*System Name: *" + makeTextile((voProviderSystem.getSystemNameIsNotNull() ? voProviderSystem.getSystemName() : ""), "black", "tahoma", "12"), "DarkRed", "tahoma", "12");
		out += makeNewLine(new Integer(2));
		out += makeTextile("*Description: *", "SlateBlue", "tahoma", "12");
		out += voProviderSystem.getDescriptionIsNotNull() ? makeTextile(voProviderSystem.getDescription(), "black", "tahoma", "12") : "";
		out += makeNewLine(new Integer(2));
		out += makeTextile("*Category: *", "SlateBlue", "tahoma", "12");
		out += voProviderSystem.getCategoryIsNotNull() ? makeTextile(voProviderSystem.getCategory().getText(), "black", "tahoma", "12") : "";
		out += makeNewLine(new Integer(2));
		out += makeTextile("*IP Address/Host: *", "SlateBlue", "tahoma", "12");
		out += voProviderSystem.getIPAddressIsNotNull() ? makeTextile(voProviderSystem.getIPAddress(), "black", "tahoma", "12") : "";
		out += makeNewLine(new Integer(2));
		out += makeTextile("*IP Port: *", "SlateBlue", "tahoma", "12");
		out += voProviderSystem.getIPPortIsNotNull() ? makeTextile(voProviderSystem.getIPPort().toString(), "black", "tahoma", "12") : "";
		out += makeNewLine(new Integer(2));
		out += makeTextile("*Hl7 Application: *", "SlateBlue", "tahoma", "12");
		out += voProviderSystem.getHl7ApplicationIsNotNull() ? makeTextile(voProviderSystem.getHl7Application(), "black", "tahoma", "12") : "";
		out += makeNewLine(new Integer(2));
		out += makeTextile("*Code System: *", "SlateBlue", "tahoma", "12");
		out += voProviderSystem.getCodeSystemIsNotNull() ? makeTextile(LookupHelper.getTaxonomyTypeInstance(this.domain.getLookupService(), voProviderSystem.getCodeSystem().getId()).toString(), "black", "tahoma", "12") : "";
		out += makeNewLine(new Integer(2));
		out += makeTextile("*Id Type Component: *", "SlateBlue", "tahoma", "12");
		out += voProviderSystem.getIdtypeComponentIsNotNull() ? makeTextile(voProviderSystem.getIdtypeComponent().toString(), "black", "tahoma", "12") : "";
		out += makeNewLine(new Integer(2));
		out += makeTextile("*Primary Patient Id: *", "SlateBlue", "tahoma", "12");
		out += voProviderSystem.getPrimaryPatientIdIsNotNull() ? makeTextile(LookupHelper.getPatIdTypeInstance(this.domain.getLookupService(), voProviderSystem.getPrimaryPatientId().getId()).toString(), "black", "tahoma", "12") : "";
		
		// Output all configuration items
		if (voProviderSystem.getConfigItemsIsNotNull())
		{
			out += makeNewLine(new Integer(2));
			out += makeTextile("*Configuration Items: *", "SlateBlue", "tahoma", "12");
			for (int i=0; i<voProviderSystem.getConfigItems().size(); i++)
			{
				ConfigPropertyVo vo = voProviderSystem.getConfigItems().get(i);
				out += makeTextile(vo.getPropertyName() + " = " + vo.getPropertyValue(), "black", "tahoma", "12");
				out += makeNewLine(new Integer(2));
			}
		}

		return new TextileString(out).toString();
	}

	private String formatServiceVo(LocationServiceVo voLocService)
	{
		String out = makeTextile("*" + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(true) + ": *", "DarkRed", "tahoma", "12");
		out += makeTextile(voLocService.getService().getServiceName(), "black", "tahoma", "12");
		if (voLocService.getService().getServiceDescriptionIsNotNull())
		{
			out += makeNewLine(new Integer(2));
			out += makeTextile("*Description: *", "SlateBlue", "tahoma", "12");
			out += makeTextile(voLocService.getService().getServiceDescription(), "black", "tahoma", "12");
		}
		else
			out += makeNewLine(new Integer(1));

		if (voLocService.getContactIsNotNull())
		{
			out += makeNewLine(new Integer(1));
			out += makeTextile("*Contact Details: *", "SlateBlue", "tahoma", "12");
			out += makeTextile((voLocService.getContact().getNameIsNotNull()?voLocService.getContact().getName().toString():""), "black", "tahoma", "12");
			if (voLocService.getContact().getContactNumberIsNotNull())
			{
				out += makeNewLine(new Integer(1));
				out += makeTextile("*Contact Number: *", "SlateBlue", "tahoma", "12");
				out += makeTextile(voLocService.getContact().getContactNumber().toString(), "black", "tahoma", "12");
				out += makeNewLine(new Integer(1));
			}
			else
				out += makeNewLine(new Integer(1));
		}

		out += makeNewLine(new Integer(1));

		return new TextileString(out).toString();
	}

	private String formatServiceHeaderVo(LocationServiceVo voLocService)
	{
		if (voLocService != null && voLocService.getServiceIsNotNull() && voLocService.getLocationIsNotNull())
		{
			String out = makeTextile("<CENTER>*" + ConfigFlag.UI.DISPLAY_NAME_LOCATION.getValue(true) + ": *", "DarkRed", "tahoma", "14");
			out += makeTextile((voLocService.getLocation().getNameIsNotNull() ? voLocService.getLocation().getName() : "") + "</CENTER>", "black", "tahoma", "14");
			out += makeTextile("<CENTER>*" + ConfigFlag.UI.DISPLAY_NAME_SERVICE.getValue(true) + ": *", "DarkRed", "tahoma", "14");
			out += makeTextile((voLocService.getService().getServiceNameIsNotNull() ? voLocService.getService().getServiceName() : "") + "</CENTER>", "black", "tahoma", "14");
			if (voLocService.getService().getServiceDescriptionIsNotNull())
			{
				out += makeNewLine(new Integer(2));
				out += makeTextile("*Description: *", "SlateBlue", "tahoma", "12");
				out += makeTextile(voLocService.getService().getServiceDescription(), "black", "tahoma", "12");
			}
			else
				out += makeNewLine(new Integer(1));

			if (voLocService.getContactIsNotNull())
			{
				out += makeNewLine(new Integer(1));
				out += makeTextile("*Contact Details: *", "SlateBlue", "tahoma", "12");
				out += makeTextile(voLocService.getContact().getNameIsNotNull()?voLocService.getContact().getName().toString():"", "black", "tahoma", "12");
				if (voLocService.getContact().getContactNumberIsNotNull())
				{
					out += makeNewLine(new Integer(1));
					out += makeTextile("*Contact Number: *", "SlateBlue", "tahoma", "12");
					out += makeTextile(voLocService.getContact().getContactNumber().toString(), "black", "tahoma", "12");
					out += makeNewLine(new Integer(1));
				}
				else
					out += makeNewLine(new Integer(1));
			}

			out += makeNewLine(new Integer(1));

			return new TextileString(out).toString();
		}

		return "";
	}

	private String makeTextile(String stringin, String colour, String font, String fontsize)
	{
		// return "%{color:" + colour + ";font-family:" + font + ";font-size:" +
		// fontsize + "}"+ stringin + "%";

		StringBuffer sb = new StringBuffer();
		sb.append("<span style=\"color:");
		sb.append(colour);
		sb.append(";font-family:");
		sb.append(font);
		sb.append(";font-size:");
		sb.append(fontsize);
		sb.append(";\">");
		sb.append(stringin);
		sb.append("</span>");
		return sb.toString();
	}

	private String makeNewLine(Integer numLines)
	{
		StringBuffer ret = new StringBuffer();
		ret.append("");

		for (int i = 0; i < numLines.intValue(); i++)
		{
			ret.append("<br>");
		}
		return ret.toString();
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		
		if (formName.equals(form.getForms().Admin.ProviderSystem) && result.equals(DialogResult.YES))
		{
			//returning from an update
			if (form.getGlobalContext().OCRR.getProviderSystemIsNotNull())
			{
				populateScreenFromData(form.getGlobalContext().OCRR.getProviderSystem());
				TreeNode node = form.treHeader().getSelectedNode();
				onTreHeaderTreeViewSelectionChanged(node);
				form.getGlobalContext().OCRR.setProviderSystemFormMode(FormMode.VIEW);
				form.setMode(FormMode.VIEW);				
			}
				
		}
		else if (formName.equals(form.getForms().Admin.ProviderSystem) && result.equals(DialogResult.OK))
		{
			//returning from a selection for new
			if (form.getGlobalContext().OCRR.getProviderSystemIsNotNull())
			{
				if (form.getGlobalContext().OCRR.getProviderSystem().equals(form.getLocalContext().getSelectedRecordProviderSystem()))
					populateScreenFromData(form.getGlobalContext().OCRR.getProviderSystem());
				else
				{
					populateScreenFromData(form.getGlobalContext().OCRR.getProviderSystem());
					TreeNode node = form.treHeader().getSelectedNode();
					if (node.getValue() instanceof LocSvcProviderSysVo)
					{
						LocSvcProviderSysVo voLocProvSys = (LocSvcProviderSysVo)node.getValue();
						voLocProvSys.setProviderSystem(form.getGlobalContext().OCRR.getProviderSystem());
						node.setValue(voLocProvSys);
						onTreHeaderTreeViewSelectionChanged(node);
						form.getGlobalContext().OCRR.setProviderSystemFormMode(FormMode.VIEW);
						form.setMode(FormMode.EDIT);											
					}
				}
			}
		}
		//WDEV-2429 
		else
		{
			onBtnCancelClick();
		}
	}

	@Override
	protected void onFormClosing(CancelArgs args)throws PresentationLogicException 
	{
		form.getGlobalContext().OCRR.setProviderSystemColl(null);
		
	}

	// end private methods -------------
}
