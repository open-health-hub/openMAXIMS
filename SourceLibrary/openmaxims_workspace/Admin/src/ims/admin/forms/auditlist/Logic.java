//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.21 build 41008.1030)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.auditlist;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.Collator;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import ims.admin.vo.RecordedInErrorVo;
import ims.admin.vo.AppUserShortVo;
import ims.admin.vo.AppUserShortVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.EnvironmentConfig;
import ims.core.vo.AuditListFilterVo;
import ims.core.vo.AuditVo;
import ims.core.vo.AuditVoCollection;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTimeFormat;
import ims.vo.ValueObject;

public class Logic extends BaseLogic 
{
	protected void onFormOpen() throws PresentationLogicException
	{
		initialize();
		open();
	}


	protected void onQmbUsersTextSubmited(String value) throws PresentationLogicException
	{
		populateUsers(domain.listAppUsers(value));
	}


	private void populateUsers(AppUserShortVoCollection users)
	{
		// Clear combobox
		form.qmbUsers().clear();
		
		// Terminate function if collection is null
		if (users == null || users.size() == 0)
		{
			form.qmbUsers().showOpened();
			return;
		}
			
		for (int i = 0; i < users.size(); i ++)
		{
			AppUserShortVo user = users.get(i);
			
			// Skip null users
			if (user == null)
				continue;
			
			form.qmbUsers().newRow(user, user.getUsername());
		}
		
		if (users.size() == 1)
			form.qmbUsers().setValue(users.get(0));
		else
			form.qmbUsers().showOpened();
	}


	public void initialize() throws PresentationLogicException
	{
		// Populate the appUsers combo
		// Populate the action combo INSERT, UPDATE and DELETE
		form.cmbAction().clear();
		form.cmbAction().newRow("INSERT", "INSERT");
		form.cmbAction().newRow("UPDATE", "UPDATE");
		form.cmbAction().newRow("DELETE", "DELETE");
		form.cmbAction().newRow("RIE", "RIE");
		
		// WDEV-4570 - On the Audit List screen the Class Combo should be sorted
		// Load classnames for classname query combo
		form.getLocalContext().setClassNames(sortClasses(domain.listDomainClassNames()));
		
		// The location query combo is only displayed when the location is available
		if (domain.getCurrentLocation() != null)
		{
			form.lblLocation().setVisible(true);
			form.qmbLocation().setVisible(true);
		}
		else
		{

			form.lblLocation().setVisible(false);
			form.qmbLocation().setVisible(false);
		}
		
		// Check whether this form is a dialog.
		// If it is, we know it is called from the
		// top button.  We will then want to hide
		// the current patient and current contact,
		// and disable the className and classId
		if (engine.isDialog())
		{
			setForDialog();
			search();
			
		}
	}
	
	public void open()
	{
		form.setMode(FormMode.VIEW);
	}
	
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
	}
	
	private void search()
	{
		form.getContextMenus().hideAllRIEViewReasonMenuItems();
		
		//Clear down the two grids and the total label before the search
		form.grdAudit().setValue(null);
		form.grdAudit().getRows().clear();
		form.htmDifferences().setHTML("");
		form.lblTotal().setValue("Total: "); //WDEV-18081 
		
		// Call the domain to list Audit Records based
		// on the selection criteria
		GenForm.grdAuditRow row;
		form.grdAudit().getRows().clear();

		PatientShort patient=null;
		if (form.chkCurrentPatient().getValue())
		{
			patient = form.getGlobalContext().Core.getPatientShort();
			if (patient == null)
			{
				engine.showMessage("There is currently no selected patient for this session");
				form.chkCurrentPatient().setValue(false);
				return;
			}
		}
		
		ClinicalContactShortVo clinicalContactShortVo = null;
		if (form.chkCurrentEpisode().getValue())
		{
			clinicalContactShortVo = form.getGlobalContext().Core.getCurrentClinicalContact();
			if (clinicalContactShortVo == null)
			{
				engine.showMessage("There is currently no selected episode for this session");
				form.chkCurrentEpisode().setValue(false);
				return;
			}
			
			// If setting contact, we may as well set the patient
			// as we will have it anyway
			patient = form.getGlobalContext().Core.getPatientShort();
		}
		
		CareContextShortVo careContextShortVo = null;
		if (form.chkCurrentCareContext().getValue())
		{
			careContextShortVo = form.getGlobalContext().Core.getCurrentCareContext();
			if (careContextShortVo == null)
			{
				engine.showMessage("There is currently no selected care context for this session");
				form.chkCurrentCareContext().setValue(false);
				return;
			}
			// If setting careCpmtext, we may as well set the patient
			// as we will have it anyway
			patient = form.getGlobalContext().Core.getPatientShort();
		}
		
		if (form.intClassId().getValue() != null && form.qmbClass().getValue() == null)
		{
			engine.showMessage("ClassIdentifier should only be specified in accordance with a specifed class");
			form.intClassId().setValue(null);
			return;
		}
		
		if(form.dtimFrom().getValue() != null && form.dtimTo().getValue() != null && form.dtimFrom().getValue().isGreaterThan(form.dtimTo().getValue()))
		{
			engine.showMessage("Date To can not be set before Date From.");
			return;
		}

		AuditListFilterVo filter =  this.populateDataFromScreen();
		filter.setAction(form.cmbAction().getValue());
		filter.setClassName(form.qmbClass().getValue());
		if (!filter.getClassNameIsNotNull())
			filter.setClassName(form.qmbClass().getEditedText());
		if (form.qmbUsers().getValue() != null)
			filter.setUser(form.qmbUsers().getValue().getUsername());
		filter.setPatient(patient);
		filter.setClinicalContact(clinicalContactShortVo);
		filter.setCareContext(careContextShortVo);
		filter.setAuditLocation(form.qmbLocation().getValue());
		AuditVoCollection coll = domain.listAuditRecords(filter);
		for (int i=0; i<coll.size(); i++)
		{
			AuditVo audit = coll.get(i);
			row = form.grdAudit().getRows().newRow();
			row.setValue(audit);
			row.setcolAction(audit.getAction());
			row.setTooltipForcolAction(audit.getAction());
			
			row.setcolClass(audit.getClassName().substring(audit.getClassName().lastIndexOf(".")+1));
			row.setTooltipForcolClass(audit.getClassName().substring(audit.getClassName().lastIndexOf(".")+1));
			
			row.setcolClassId(audit.getClassIdentifier());
			row.setTooltipForcolClassId(audit.getClassIdentifier().toString());
			row.setcolHost(audit.getHostName());
			row.setTooltipForcolHost(audit.getHostName());
			if (audit.getAuditDateTime() != null)
			{
				row.setcolDateTime(audit.getAuditDateTime().toString(DateTimeFormat.STANDARD_SECS));
				row.setTooltipForcolDateTime(audit.getAuditDateTime().toString(DateTimeFormat.STANDARD_SECS));
			}
			if (audit.getAuditUser() != null){
				row.setcolUser(audit.getAuditUser());
				row.setTooltipForcolUser(audit.getAuditUser());
			}
		}

	    form.lblTotal().setValue("Total: " + coll.size());

	    if (form.cmbAction().getValue() != null && form.cmbAction().getValue().equals("INSERT"))
		{
			form.getContextMenus().getRIEViewReasonEXPORT_ALLItem().setVisible(true);
			form.getContextMenus().getRIEViewReasonEXPORT_ALLItem().setEnabled(true);
		}
	    
	    if(coll.size() == 0){
	    	form.getContextMenus().hideAllRIEViewReasonMenuItems();
	    	engine.showMessage("No results for search criteria");
	    }

	    form.setMode(FormMode.VIEW);
	}
	
	
	private void formatThis(String formattedString)
	{
		form.htmDifferences().setHTML(new ims.utils.textile.Textile().process(formattedString));
	}
	
	protected void onGrdAuditSelectionChanged() throws PresentationLogicException 
	{
		form.getContextMenus().hideAllRIEViewReasonMenuItems();
		// Populate the text box with the differences that occurred in the last update
		AuditVo audit =form.grdAudit().getValue();
		if (audit.getDiffFieldsIsNotNull())
		{
			formatThis(audit.getDiffFields());
		}
		else
			form.htmDifferences().setHTML("");
		
		if (audit.getAction().equals("RIE"))
		{
			form.getContextMenus().getRIEViewReasonVIEW_REASONItem().setVisible(true);
			form.getContextMenus().getRIEViewReasonVIEW_REASONItem().setEnabled(true);
		}
		if (!audit.getAction().equals("DELETE") && !audit.getAction().equals("RIE"))
		{
			form.getContextMenus().getRIEViewReasonEXPORT_TO_FILEItem().setVisible(true);
			form.getContextMenus().getRIEViewReasonEXPORT_TO_FILEItem().setEnabled(true);
		}
		if (form.cmbAction().getValue() != null && form.cmbAction().getValue().equals("INSERT"))
		{
			form.getContextMenus().getRIEViewReasonEXPORT_ALLItem().setVisible(true);
			form.getContextMenus().getRIEViewReasonEXPORT_ALLItem().setEnabled(true);			
		}
	}

	
	protected void onQmbClassTextSubmited(String value) 
	{
		populateQmbClass(value, true);
	}

	private void populateQmbClass(String value, boolean showOpened)
	{
		String[] classes = form.getLocalContext().getClassNames();
		form.qmbClass().clear();
		form.qmbClass().setValue(null);
		String locVal = value.substring(value.lastIndexOf(".") + 1).toUpperCase();
		if (classes != null)
		{ 
			for (int i = 0; i < classes.length; i++)
			{
				String cls = classes[i];
				String name = cls.substring(cls.lastIndexOf(".")+1);
				if (name.toUpperCase().lastIndexOf(locVal) != -1)
				{
					form.qmbClass().newRow(cls, name);				
				}
			}
			
			for (int i = 0; i < classes.length; i++)
			{
				String cls = classes[i];
				String name = cls.substring(cls.lastIndexOf(".")+1);
				if (name.toUpperCase().lastIndexOf(locVal) != -1)
				{
					form.qmbClass().newRow(cls, name);				
				}
			}
			if (form.qmbClass().getValues().size() == 1)
			{
				form.qmbClass().setValue((String)form.qmbClass().getValues().get(0));
			}
			else if (form.qmbClass().getValues().size() > 1 && showOpened)
			{
				form.qmbClass().showOpened();
			}
		}
	}
	
	/**
	 * Takes a string of complete class names and orders them based on only the final 
	 * part of their name (after the last full stop). 
	 * @param String[]
	 * @return String[]
	 */
	public static String[] sortClasses(String[] strArray) 
	{
		if (strArray.length <= 1) 
			return strArray;
		
		String tmp;
		String strA = "";
		String strB = "";
		Collator collator = Collator.getInstance();
		
		for (int i = 0; i < strArray.length; i++)
		{
			for (int j = i; j < strArray.length; j++)
			{
				strA = strArray[i].substring(strArray[i].lastIndexOf('.'), strArray[i].length() -1);
				strB = strArray[j].substring(strArray[j].lastIndexOf('.'), strArray[j].length() -1);
				
				if (collator.compare(strA, strB) > 0)
				{
					tmp = strArray[i];
			        strArray[i] = strArray[j];
			        strArray[j] = tmp;
				}
			}
		}
		
		return strArray;
	}


	protected void onImbClearClick() throws PresentationLogicException 
	{
		clear();
		form.getContextMenus().hideAllRIEViewReasonMenuItems();
	}
	
	private void clear() throws PresentationLogicException 
	{
		form.qmbClass().setValue(null);
		form.qmbUsers().clear();
		form.qmbClass().setValue(null);
		form.qmbClass().clear();
		form.qmbLocation().clear();
		form.intClassId().setValue(null);
		form.txtHostName().setValue(null);
		form.cmbAction().setValue(null);
		form.dtimFrom().setValue(null);
		form.dtimTo().setValue(null);
		form.chkCurrentPatient().setValue(false);
		form.chkCurrentEpisode().setValue(false);
		form.chkCurrentCareContext().setValue(false);
		form.grdAudit().setValue(null);
		form.grdAudit().getRows().clear();
		form.lblTotal().setValue("Total: 0");
		form.htmDifferences().setHTML("");
		
		if (engine.isDialog())
			setForDialog();
	}
	
	private void setForDialog() throws PresentationLogicException 
	{
		form.chkCurrentEpisode().setVisible(false);
		form.chkCurrentPatient().setVisible(false);
		form.qmbClass().setEnabled(false);
		form.intClassId().setEnabled(false);
		
		ValueObject vo = engine.getRecordedInErrorVo(engine.getPreviousNonDialogFormName());
		if (vo == null)
			throw new PresentationLogicException("No record has been marked for Audit View");
		String className = vo.getBoClassName();//.substring(vo.getBoClassName().lastIndexOf(".")+1);
		
		populateQmbClass(className, false);
		form.qmbClass().setValue(className);
		form.intClassId().setValue(vo.getBoId());
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if (sender == null)
			throw new CodingRuntimeException("sender is null : onContextMenuItemClick");

		if (sender.equals(form.grdAudit()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.RIEViewReason.VIEW_REASON:
					getRIEReason();
				break;
				case GenForm.ContextMenus.RIEViewReason.EXPORT_TO_FILE:
					showObjectXML();
				break;
				case GenForm.ContextMenus.RIEViewReason.EXPORT_ALL:
					showAllObjectXML();
				break;
				default :
				break;
			}
		}		
	}
	
	private void saveObjectXML(String xmlToSave)
	{
		String tempDir = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "/ObjectExports";
		File floc = new File(tempDir);
		if (!floc.exists())
			floc.mkdirs();

		AuditVo vo = form.grdAudit().getValue();
		String baseFileName;
		if (vo != null) {
			baseFileName = engine.getLoggedInUser().getUsername() + "_" + vo.getClassIdentifier() + "_" + vo.getClassName().substring(vo.getClassName().lastIndexOf(".")+1);
		}
		else {
			baseFileName = engine.getLoggedInUser().getUsername();
		}
			
		String fileName = baseFileName + ".xml";
		String zipFileName = baseFileName + ".zip";

		File f = new File(tempDir + "/" + fileName);
		FileInputStream xmlIn=null;
		ZipOutputStream zsOut=null;
		try
		{
			if (!f.exists())
				f.createNewFile();
			
			FileOutputStream fos = new FileOutputStream(f);			
			fos.write(xmlToSave.getBytes());
			fos.flush();
			fos.close();
			
			zsOut =new ZipOutputStream(new FileOutputStream(tempDir + "/" + zipFileName));
            xmlIn = new FileInputStream(f);
	    
	        // Add ZIP entry to output stream.
            zsOut.putNextEntry(new ZipEntry( fileName));
	    
	       // Transfer bytes from the file to the ZIP file
	       int len;
	       // Create a buffer for reading the files
	       byte[] buf = new byte[1024];

	       while ((len = xmlIn.read(buf)) > 0) 
	       {
	    	   zsOut.write(buf, 0, len);
	       }
	    
	       // Complete the entry
	       zsOut.closeEntry();
	       zsOut.close();
	       xmlIn.close();
	       
	       // Now delete the xml version as we don't need it anymore
	       f.delete();
	    
		}
		catch (FileNotFoundException e)
		{
			engine.showMessage("File cannot be created - " + tempDir + "/" + zipFileName);
			return;
		}
		catch (IOException e)
		{
			engine.showMessage("An IOException occurred saving xml " + e.getMessage());
			return;
		}
		
		form.getGlobalContext().Core.setYesNoDialogMessage(ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "/ObjectExports/" + zipFileName);
		engine.open(form.getForms().Admin.ExportFileDialog);
		
	}

	private void showAllObjectXML()
	{
		StringBuffer sb = new StringBuffer();
		sb.append("<contents>");
		for (int i = 0; i < form.grdAudit().getRows().size(); i++)
		{
			AuditVo vo = form.grdAudit().getRows().get(i).getValue();
			try
			{
				String xml = domain.getObjectXML(vo.getClassName(), vo.getClassIdentifier());
				sb.append(xml);

			}
			catch (StaleObjectException e)
			{
				engine.showMessage("StaleObjectException occurred saving export details - " + e.getMessage());
				return;
			}
		}		
		sb.append("</contents>");	
		
		saveObjectXML(sb.toString());
	}

	private void showObjectXML()
	{
		AuditVo vo = form.grdAudit().getValue();
		try
		{
			String xml = domain.getObjectXML(vo.getClassName(), vo.getClassIdentifier());
			saveObjectXML(xml);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage("StaleObjectException occurred saving export details - " + e.getMessage());
			return;
		}
		
		
	}

	private void getRIEReason()
	{
		// Get the current row, if action is RIE, then get the reason from
		// domain
		AuditVo vo = form.grdAudit().getValue();
		if (vo.getAction().equals("RIE"))
		{
			RecordedInErrorVo reason = domain.getRIEReason(vo.getClassIdentifier(), vo.getClassName());
			if (reason != null)
				formatThis(vo.getDiffFields() + "<BR>" + reason.getReason());
		}
		
	}

	protected void onQmbLocationTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbLocation().clear();
		
		if (value == null || value.equals(""))
		{
			engine.showMessage("Please enter at least one character to search on");
			return;
		}

		LocationLiteVoCollection voCollLocLite = domain.listActiveLocations(value);
		if (voCollLocLite != null && voCollLocLite.size() > 0)
		{
			for (int i = 0; i < voCollLocLite.size(); i++)
			{
				form.qmbLocation().newRow(voCollLocLite.get(i), voCollLocLite.get(i).getName().toString());
			}
			if (voCollLocLite.size() == 1)
				form.qmbLocation().setValue(voCollLocLite.get(0));
			else if (voCollLocLite.size() > 1)
				form.qmbLocation().showOpened();
		}
		else
			engine.showMessage("No matching records found");
		
	}
}
