//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.65 build 3195.17642)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.referralservices;

import ims.admin.forms.referralservices.GenForm.grdReferralServiceRow;
import ims.RefMan.vo.ReferralServiceVo;
import ims.core.clinical.vo.ServiceRefVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;

import java.util.Iterator;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;


	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
	
		open();
	
	}

	private void open()
	{
	
		form.getLocalContext().setReferralService(populateScreenFromData());
		form.setMode(FormMode.VIEW);
	
	}

	private ReferralServiceVo populateScreenFromData()
	{
	
		form.grdReferralService().getRows().clear();
		ServiceRefVoCollection refServices = new ServiceRefVoCollection();
		ServiceLiteVoCollection services = domain.getServices();
		if( services == null ||services.size()== 0 )
		{
			engine.showMessage("There are no services available");
			return null;
		}
		for (Iterator iterator = services.iterator(); iterator.hasNext();)
		{
			ServiceLiteVo service = (ServiceLiteVo) iterator.next();
			grdReferralServiceRow row = form.grdReferralService().getRows().newRow();
			row.setValue(service);
			row.setService(service.getServiceName());
		}
		
		ReferralServiceVo refService = domain.getReferralService();
		if (refService != null)
		{
			if (refService.getReferralServicesIsNotNull())
			{
				refServices = refService.getReferralServices();
			}
			for (int i = 0; i < form.grdReferralService().getRows().size(); i++)
			{
				if (refServices.contains(form.grdReferralService().getRows().get(i).getValue().toServiceRefVo()))
				{
					form.grdReferralService().getRows().get(i).setReferable(true);
				}
			}
			return refService;
		}
		return null;
	}

	protected void onBtnEditClicked() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnCancelClicked() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	protected void onBtnSaveClicked() throws ims.framework.exceptions.PresentationLogicException
	{
		ReferralServiceVo ref = null;
		if(form.getLocalContext().getReferralServiceIsNotNull())
		{
			ref = form.getLocalContext().getReferralService();
		}
		else
		{	
			ref = new ReferralServiceVo();
		}
		 ref.setReferralServices(populateDataFromScreen());
		String[] errors = ref.validate();
		if(errors != null)
		{
			engine.showErrors(errors);
			return ;
		}
		try
		{
			domain.save(ref);
			form.setMode(FormMode.VIEW);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage("Data has been changed, screen will be refreshed");
			open();
			return;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
	}

	private ServiceRefVoCollection populateDataFromScreen()
	{
		ServiceRefVoCollection serviceColl = new ServiceRefVoCollection();
		for (int index = 0; index < form.grdReferralService().getRows().size(); index++)
		{
			if(form.grdReferralService().getRows().get(index).getReferable())
			serviceColl.add(form.grdReferralService().getRows().get(index).getValue());
		}
		return serviceColl;
	}
}
