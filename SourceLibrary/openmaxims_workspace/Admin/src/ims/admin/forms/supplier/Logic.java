//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.25 build 1956.33196)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.supplier;

import ims.admin.forms.supplier.GenForm.lyr1Layer.tabOrgContainer.grdMappingsGrid;
import ims.admin.forms.supplier.GenForm.lyr1Layer.tabOrgContainer.grdMappingsRow;
import ims.admin.helper.NTPFExchequerCodingChecks;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.OrgShortVo;
import ims.core.vo.OrgShortVoCollection;
import ims.core.vo.PersonAddress;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.domain.OrgShortVoAssembler;
import ims.core.vo.lookups.OrganisationType;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.vo.ValueObjectRef;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{		
		open();
	}
		
	private void addSupplier() 
	{			
		form.setMode(FormMode.EDIT);
		form.btnSave().setEnabled(true);			
		form.treSuppliers().setEnabled(false);
		enableDetailsTab(true);
		showContextMenus(false);
		clearDetailsTab();
		OrgShortVo voOrg = new OrgShortVo();
		voOrg.setIsActive(Boolean.TRUE);
		form.getLocalContext().setSupplier(voOrg);		
		form.lyr1().tabOrg().txtOrgName().setFocus();	
		form.btnSave().setVisible(true);
		form.btnCancel().setVisible(true);
		form.getContextMenus().getGenericGridAddItem().setVisible(true);
	}

	private void clearDetailsTab() 
	{
		form.lyr1().tabOrg().txtOrgName().setValue(null);
		form.lyr1().tabOrg().txtOrgAdd1().setValue(null);
		form.lyr1().tabOrg().txtOrgAdd2().setValue(null);
		form.lyr1().tabOrg().txtOrgAdd3().setValue(null);
		form.lyr1().tabOrg().txtOrgAdd4().setValue(null);
		form.lyr1().tabOrg().txtOrgAdd5().setValue(null);
		form.lyr1().tabOrg().txtOrgPostCode().setValue(null);
		form.lyr1().tabOrg().cmbOrgCounty().setValue(null);
		form.lyr1().tabOrg().txtOrgPhone().setValue(null);
		form.lyr1().tabOrg().txtOrgFax().setValue(null);
		form.lyr1().tabOrg().grdMappings().getRows().clear();
		form.lyr1().tabOrg().txtOrgComment().setValue(null);
	}
	
	/**
	 * @param b
	 */
	private void enableDetailsTab(boolean b)
	{
		form.lyr1().tabOrg().txtOrgName().setEnabled(b);
		form.lyr1().tabOrg().txtOrgAdd1().setEnabled(b);
		form.lyr1().tabOrg().txtOrgAdd2().setEnabled(b);
		form.lyr1().tabOrg().txtOrgAdd3().setEnabled(b);
		form.lyr1().tabOrg().txtOrgAdd4().setEnabled(b);
		form.lyr1().tabOrg().txtOrgAdd5().setEnabled(b);
		form.lyr1().tabOrg().txtOrgPostCode().setEnabled(b);
		form.lyr1().tabOrg().cmbOrgCounty().setEnabled(b);
		form.lyr1().tabOrg().txtOrgPhone().setEnabled(b);
		form.lyr1().tabOrg().txtOrgFax().setEnabled(b);
		form.lyr1().tabOrg().grdMappings().setReadOnly(!b);
		form.lyr1().tabOrg().txtOrgComment().setEnabled(b);		
	}

	/**
	 * 
	 */
	private void hideAllContextMenus() 
	{
		form.getContextMenus().getSupplierTreeMenuADDSUPPLIERItem().setVisible(false);
		form.getContextMenus().getSupplierTreeMenuEDITSUPPLIERItem().setVisible(false);
        form.getContextMenus().getSupplierTreeMenuREMOVESUPPLIERItem().setVisible(false);
	    form.getContextMenus().getSupplierTreeMenuRESTORESUPPLIERItem().setVisible(false);		
	}
	
	
	
	private void displaySuppliers()
	{	
		populateSuppliersTree();				
		form.treSuppliers().expandAll();	
		form.getContextMenus().getGenericGridAddItem().setVisible(false);
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		enableDetailsTab(false);	
		clearDetailsTab();
		open();		
		form.getLocalContext().setbFullSaveRequired(Boolean.FALSE);
		//-----------------------------------------------------------
		form.getContextMenus().getGenericGridAddItem().setVisible(false);
		//-----------------------------------------------------------
		form.setMode(FormMode.VIEW);
		//---------------------------------
		
		updateContextMenu(null);
		if (form.getLocalContext().getSupplierIsNotNull())
		{
			onBtnSearchClick();
			form.treSuppliers().setValue(form.getLocalContext().getSupplier());
		}
		//--------------------------------
		if (form.treSuppliers().getSelectedNode() != null)
		{
			populateScreenFromData((OrgShortVo) form.treSuppliers().getSelectedNode().getValue());
			updateContextMenu(form.treSuppliers().getSelectedNode());
		}
		form.getLocalContext().setbUpdateSupplier(false);
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-2578 
		//need to validate the Taxonomy code is of type AAANNN
		if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
		{
			if ( ! checkMandatorySpecEXCHCode())
				return;
		}
		if(form.getLocalContext().getbUpdateSupplier() == false)
		{
			if(form.lyr1().tabOrg().txtOrgName().getValue() != null)
			{
				OrgShortVo orgVo = domain.getOrganisationShort(form.lyr1().tabOrg().txtOrgName().getValue());
				if(orgVo != null)
				{
					engine.showErrors(new String[]{"An active Provider with the same Name already exist, change the Name."});
					return;
				}
			}
		}
		else //wdev-11926
		{
			if(form.lyr1().tabOrg().txtOrgName().getValue() != null)
			{
				OrgShortVoCollection orgVocoll = domain.getOrganisationShortCollection(form.lyr1().tabOrg().txtOrgName().getValue());
				if(orgVocoll != null && form.getLocalContext().getSupplier() != null)
				{
					for(int i = 0; i < orgVocoll.size();i++ )
					{
						OrgShortVo orgVo = orgVocoll.get(i);
						if( orgVo != null )
						{
							if(!orgVo.getID_Organisation().equals( form.getLocalContext().getSupplier().getID_Organisation()))
							{
								engine.showErrors(new String[]{"An active Provider with the same Name already exist, change the Name."});
								return;
							}
						}
					}
				}
			}
		}
		if (form.getLocalContext().getbFullSaveRequiredIsNotNull() && form.getLocalContext().getbFullSaveRequired().equals(Boolean.TRUE))
		{
							
			if(!addToActiveCollection())
			{
				engine.showErrors(new String[]{"Name is mandatory"});
				return;
			}
				
		}
		else
		{
			OrgShortVo voOrg = form.getLocalContext().getSupplier();		 
			populateDataFromScreen(voOrg);	
			String dupExchequerMessage = checkExchequerCodeIsUnique(voOrg, voOrg.getCodeMappings());
			if (dupExchequerMessage != null)
			{
				engine.showMessage(dupExchequerMessage);
				return;
			}
			if(!saveSupplier(voOrg))
				return;
		}			
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setbFullSaveRequired(Boolean.FALSE);
		open();				
		if (form.getLocalContext().getSupplierIsNotNull())
		{
			onBtnSearchClick();
			populateScreenFromData(form.getLocalContext().getSupplier());
			form.treSuppliers().setValue(form.getLocalContext().getSupplier());
			if (form.treSuppliers().getSelectedNode() != null)
				updateContextMenu(form.treSuppliers().getSelectedNode());
			enableDetailsTab(false);	
		}
		form.getLocalContext().setbUpdateSupplier(false);
		
	}
	
	private String checkExchequerCodeIsUnique(ValueObjectRef voRef, TaxonomyMapCollection collTaxMap)
	{
		if(ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
		{
			if (voRef != null && collTaxMap != null)
			{
				for (int i = 0; i < collTaxMap.size(); i++)
				{
					if (collTaxMap.get(i) != null
						&& collTaxMap.get(i).getTaxonomyNameIsNotNull() 
						&& collTaxMap.get(i).getTaxonomyName().equals(TaxonomyType.EXCH))
					{
						String dupExchequer = domain.checkExchequerCodeIsUnique(collTaxMap.get(i).getTaxonomyCode(), voRef);
						
						if(dupExchequer != null)
							return dupExchequer;
					}
	
				}
					
			}
		}
		return null;
		
	}

	private boolean addToActiveCollection() 
	{
		OrgShortVoCollection voCollOrg = domain.listOrganisationForType(OrganisationType.SUPPLIER, null, Boolean.TRUE);
		
		if(voCollOrg != null)
		{
			OrgShortVoCollection voCollActiveOrgs = new OrgShortVoCollection();
			OrgShortVo voOrg = form.getLocalContext().getSupplier();		 
			voCollActiveOrgs.add(populateDataFromScreen(voOrg));
			if(voOrg == null || voOrg.getName() == null)
				return false;
			
			try 
			{	
				form.getLocalContext().setSupplier(domain.saveOrganisationShort(populateDataFromScreen(voOrg)));
			}
			catch (StaleObjectException e) 
			{
				e.printStackTrace();
			}
			catch (UniqueKeyViolationException e) 
			{
				e.printStackTrace();
			}
		}
		return true;
	}

	protected void onChkMyRecycleBinValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		displaySuppliers();
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{			
		
		hideAllContextMenus();
		
		if(sender.equals(form.treSuppliers()))
		{
			switch(menuItemID)
			{
				case GenForm.ContextMenus.SupplierTreeMenu.ADDSUPPLIER:
					form.getLocalContext().setbUpdateSupplier(false);
					addSupplier();
					break;
				case GenForm.ContextMenus.SupplierTreeMenu.EDITSUPPLIER:
					form.getLocalContext().setbUpdateSupplier(true);
					updateSupplier();
					break;
	            case GenForm.ContextMenus.SupplierTreeMenu.REMOVESUPPLIER:
	            	removeSupplier();            
	            	break;
	            case GenForm.ContextMenus.SupplierTreeMenu.RESTORESUPPLIER:
	            	restoreSupplier();
	            	break;
	            default:
			}

		}
		else if(sender.equals(form.lyr1().tabOrg().grdMappings()))
		{
			switch(menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Add:
					form.lyr1().tabOrg().grdMappings().getRows().newRow();
					updateContextMenu(null);
				break;
				case GenForm.ContextMenus.GenericGrid.Remove:
					if (form.lyr1().tabOrg().grdMappings().getSelectedRowIndex() >= 0)
						form.lyr1().tabOrg().grdMappings().getRows().remove(form.lyr1().tabOrg().grdMappings().getSelectedRowIndex());
					updateContextMenu(null);
				break;
				default:
			}
		}
	}
	
	
	
	protected void onFormModeChanged()
	{
		form.getContextMenus().getSupplierTreeMenuEDITSUPPLIERItem().setVisible(form.treSuppliers().getSelectedNode() != null ? (OrgShortVo) form.treSuppliers().getSelectedNode().getValue() != null : false);
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.btnSearch().setEnabled(false);
			form.chkMyRecycleBin().setEnabled(false);
		}
		else
		{
			form.btnSearch().setEnabled(true);
			form.chkMyRecycleBin().setEnabled(true);
		}
	}
	
	protected void onTreSuppliersTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException 
	{						
		if ((OrgShortVo) node.getValue() != null)
		{
			form.getLocalContext().setSupplier((OrgShortVo) node.getValue());
			populateScreenFromData((OrgShortVo) node.getValue());
			enableDetailsTab(false);		
		}
		else
			clearDetailsTab();
		
		updateContextMenu(node);
	}

	private void updateContextMenu(TreeNode node) 
	{	
		form.getContextMenus().getSupplierTreeMenuEDITSUPPLIERItem().setVisible(node != null && node.getValue() != null && node.getParent() == null);		
		form.getContextMenus().getSupplierTreeMenuADDSUPPLIERItem().setVisible(node != null && node.getParent() == null && node.getValue() != null);		
		form.getContextMenus().getSupplierTreeMenuRESTORESUPPLIERItem().setVisible(node != null && node.getParent() != null & node.getValue() != null);
		form.getContextMenus().getSupplierTreeMenuREMOVESUPPLIERItem().setVisible(node != null && node.getParent() == null & node.getValue() != null);
		//wdev-12371
		form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.lyr1().tabOrg().grdMappings().getSelectedRowIndex() >= 0);
		//-----------
	}
		
	private void open()
	{
		form.treSuppliers().setEnabled(true);
		form.getContextMenus().getSupplierTreeMenuADDSUPPLIERItem().setVisible(true);

		enableDetailsTab(false);
		form.btnSave().setVisible(false);
		form.btnCancel().setVisible(false);
		form.getLocalContext().setbUpdateSupplier(false);
	}
	
	
	protected ims.core.vo.OrgShortVo populateDataFromScreen(ims.core.vo.OrgShortVo value)
	{
		if(value == null)
			value = new ims.core.vo.OrgShortVo();

		PersonAddress voPersonAdress = new PersonAddress();
		voPersonAdress.setCounty(form.lyr1().tabOrg().cmbOrgCounty().getValue());
		voPersonAdress.setFax(form.lyr1().tabOrg().txtOrgFax().getValue());
		voPersonAdress.setLine1(form.lyr1().tabOrg().txtOrgAdd1().getValue());
		voPersonAdress.setLine2(form.lyr1().tabOrg().txtOrgAdd2().getValue());
		voPersonAdress.setLine3(form.lyr1().tabOrg().txtOrgAdd3().getValue());
		voPersonAdress.setLine4(form.lyr1().tabOrg().txtOrgAdd4().getValue());
		voPersonAdress.setLine5(form.lyr1().tabOrg().txtOrgAdd5().getValue());		
		voPersonAdress.setPhone(form.lyr1().tabOrg().txtOrgPhone().getValue());
		voPersonAdress.setPostCode(form.lyr1().tabOrg().txtOrgPostCode().getValue());

		value.setAddress(voPersonAdress);
		
		value.setCodeMappings(getCodeMappings(form.lyr1().tabOrg().grdMappings()));
		value.setComment(form.lyr1().tabOrg().txtOrgComment().getValue());
		value.setType(ims.core.vo.lookups.OrganisationType.SUPPLIER);
		value.setName(form.lyr1().tabOrg().txtOrgName().getValue());
		return value;
	}
	
	private TaxonomyMapCollection getCodeMappings(grdMappingsGrid grid)
	{
		TaxonomyMapCollection coll = new TaxonomyMapCollection();
		for (int i = 0; i < grid.getRows().size(); i++)
		{
			grdMappingsRow row = grid.getRows().get(i);
			if (row.getcolExtCodeType() != null && row.getcolCode() != null)
			{
				TaxonomyMap map = new TaxonomyMap();
				map.setTaxonomyName(row.getcolExtCodeType());
				map.setTaxonomyCode(row.getcolCode());
				coll.add(map);
			}
		}
		return coll;
	}

	
	protected void populateScreenFromData(ims.core.vo.OrgShortVo value)
	{
		clearDetailsTab();
		if(value == null)
			return;
		
		PersonAddress voPersonAdress = new PersonAddress();
		voPersonAdress = value.getAddressIsNotNull() ? value.getAddress() : null; 
		if (voPersonAdress != null)
		{
			form.lyr1().tabOrg().txtOrgAdd1().setValue(voPersonAdress.getLine1IsNotNull() ? voPersonAdress.getLine1() : null );
			form.lyr1().tabOrg().txtOrgAdd2().setValue(voPersonAdress.getLine2IsNotNull() ? voPersonAdress.getLine2() : null );
			form.lyr1().tabOrg().txtOrgAdd3().setValue(voPersonAdress.getLine3IsNotNull() ? voPersonAdress.getLine3() : null );
			form.lyr1().tabOrg().txtOrgAdd4().setValue(voPersonAdress.getLine4IsNotNull() ? voPersonAdress.getLine4() : null );
			form.lyr1().tabOrg().txtOrgAdd5().setValue(voPersonAdress.getLine5IsNotNull() ? voPersonAdress.getLine5() : null );			
			form.lyr1().tabOrg().txtOrgFax().setValue(voPersonAdress.getFaxIsNotNull()? voPersonAdress.getFax() : null );
			form.lyr1().tabOrg().txtOrgPhone().setValue(voPersonAdress.getPhoneIsNotNull() ? voPersonAdress.getPhone() : null );
			form.lyr1().tabOrg().txtOrgPostCode().setValue(voPersonAdress.getPostCodeIsNotNull() ? voPersonAdress.getPostCode() : null );
			form.lyr1().tabOrg().cmbOrgCounty().setValue(voPersonAdress.getCountyIsNotNull()? voPersonAdress.getCounty() : null);
		}		
		populateMappingsGrid(value.getCodeMappings());
		form.lyr1().tabOrg().txtOrgComment().setValue(value.getCommentIsNotNull() ? value.getComment(): null);
		form.lyr1().tabOrg().txtOrgName().setValue(value.getNameIsNotNull() ? value.getName(): null);		
		
	}
	
	private void populateMappingsGrid(TaxonomyMapCollection coll)
	{
		form.lyr1().tabOrg().grdMappings().getRows().clear();
		if (coll == null) return;
		
		for (int i = 0; i < coll.size(); i++)
		{
			TaxonomyMap map = coll.get(i);
			grdMappingsRow row = form.lyr1().tabOrg().grdMappings().getRows().newRow();
			row.setcolExtCodeType(map.getTaxonomyName());
			row.setcolCode(map.getTaxonomyCode());
			row.setTooltipForcolCode(map.getTaxonomyCode());
			row.setValue(map);
		}		
	}

	private void populateSuppliersTree() 
	{
		form.treSuppliers().clear();
		if (form.getLocalContext().getActiveSuppliersIsNotNull())
		{
			for(int i=0;i<form.getLocalContext().getActiveSuppliers().size();i++)
			{
				TreeNode newNode  = form.treSuppliers().getNodes().add(form.getLocalContext().getActiveSuppliers().get(i),
												   form.getLocalContext().getActiveSuppliers().get(i).toString());				
				newNode.setCollapsedImage(form.getImages().Admin.Supplier);
				newNode.setExpandedImage(form.getImages().Admin.Supplier);
			}
			updateContextMenu(null);
			form.getContextMenus().getSupplierTreeMenuADDSUPPLIERItem().setVisible(true);
		}				
				
		if (form.chkMyRecycleBin().getValue() == true)
		{
			if (form.getLocalContext().getInActiveSuppliersIsNotNull())
			{
				TreeNode rootNode = form.treSuppliers().getNodes().add(null,"Removed Suppliers");		
				form.getLocalContext().setInactiveRootNode(rootNode);
				
				for(int i=0;i<form.getLocalContext().getInActiveSuppliers().size();i++)
				{
					TreeNode newNode  = form.getLocalContext().getInactiveRootNode().getNodes().add(form.getLocalContext().getInActiveSuppliers().get(i),
							   								form.getLocalContext().getInActiveSuppliers().get(i).toString());				
					newNode.setCollapsedImage(form.getImages().Admin.Supplier);
					newNode.setExpandedImage(form.getImages().Admin.Supplier);
				}				
			}							
		}		
		form.treSuppliers().expandAll();
		clearDetailsTab();
	}

	/**
	 * @param b
	 */
	private void populateSupplierCollection(Boolean bActive) 
	{
		OrgShortVo voOrg = new OrgShortVo();
		
		voOrg.setName(form.txtSupplierName().getValue());
		
		OrgShortVoCollection voCollOrg = domain.listOrganisationForType(OrganisationType.SUPPLIER, voOrg, bActive);

		if(voCollOrg == null || voCollOrg.size() == 0)
		{
			engine.showMessage("No results found.");
		}

		OrgShortVoCollection voCollActiveOrgs = new OrgShortVoCollection();
		OrgShortVoCollection voCollInactiveOrgs = new OrgShortVoCollection();
		
		for(int i=0;i<voCollOrg.size();i++)
		{
			if(voCollOrg.get(i).getIsActiveIsNotNull() && voCollOrg.get(i).getIsActive().booleanValue())
				voCollActiveOrgs.add(voCollOrg.get(i));
			else
				voCollInactiveOrgs.add(voCollOrg.get(i));
		}
		
		form.getLocalContext().setActiveSuppliers(voCollActiveOrgs);
		form.getLocalContext().setInActiveSuppliers(voCollInactiveOrgs);	
	}

	/**
	 * @throws PresentationLogicException 
	 * 
	 */
	private void restoreSupplier() throws PresentationLogicException 
	{
		if (form.treSuppliers().getSelectedNode() == null)
			return;
		
		if (form.treSuppliers().getSelectedNode().getValue() instanceof OrgShortVo)
		{
			OrgShortVo voOrg = (OrgShortVo) form.treSuppliers().getSelectedNode().getValue();
			//---------------
			if(voOrg != null && voOrg.getNameIsNotNull())
			{
				OrgShortVo orgVo1 = domain.getOrganisationShort(voOrg.getName());
				if(orgVo1 != null)
				{
					engine.showErrors(new String[]{"An active Provider with the same Name already exist"});
					form.treSuppliers().setValue(null);
					form.getContextMenus().getSupplierTreeMenuADDSUPPLIERItem().setVisible(true);
					clearDetailsTab();
					return;
				}
			}
			//---------------
			form.getLocalContext().setbFullSaveRequired(Boolean.TRUE);
			form.btnSave().setEnabled(true);			
			
			voOrg.setIsActive(Boolean.TRUE);
			OrgShortVoCollection voCollActiveSuppliers = form.getLocalContext().getActiveSuppliers(); 
			voCollActiveSuppliers.add(voOrg);
 			form.getLocalContext().setActiveSuppliers(voCollActiveSuppliers);
			form.treSuppliers().getNodes().remove(form.treSuppliers().getSelectedNode());
			
			OrgShortVoCollection voCollInActiveSuppliers = form.getLocalContext().getInActiveSuppliers();
			for (int i = 0; i < voCollInActiveSuppliers.size(); i++) 
 			{
 				if (voCollInActiveSuppliers.get(i).equals(voOrg))
 				{
 					voCollInActiveSuppliers.remove(i);
 					saveSupplier(voOrg);
 					break;
 				} 				
			}
			form.getLocalContext().setInActiveSuppliers(voCollInActiveSuppliers);
			//populateSuppliersTree();
			onBtnSearchClick();
		}
	}

	
	/**
	 * @throws PresentationLogicException 
	 * 
	 */
	private void removeSupplier() throws PresentationLogicException 
	{
		if (form.treSuppliers().getSelectedNode() == null)
			return;
		
		if (form.treSuppliers().getSelectedNode().getValue() instanceof OrgShortVo)
		{
			form.getLocalContext().setbFullSaveRequired(Boolean.FALSE);
			form.btnSave().setEnabled(true);
			OrgShortVo voOrg = (OrgShortVo) form.treSuppliers().getSelectedNode().getValue(); 			
			voOrg.setIsActive(Boolean.FALSE);
			OrgShortVoCollection voCollInActiveSuppliers = form.getLocalContext().getInActiveSuppliers(); 
			voCollInActiveSuppliers.add(voOrg);
 			form.getLocalContext().setInActiveSuppliers(voCollInActiveSuppliers);
			form.treSuppliers().getNodes().remove(form.treSuppliers().getSelectedNode());
			
			OrgShortVoCollection voCollActiveSuppliers = form.getLocalContext().getActiveSuppliers();
			for (int i = 0; i < voCollActiveSuppliers.size(); i++) 
 			{
 				if (voCollActiveSuppliers.get(i).equals(voOrg))
 				{
 					voCollActiveSuppliers.remove(i);
 					saveSupplier(voOrg);
 					break;
 				} 				
			}
			
			form.getLocalContext().setActiveSuppliers(voCollActiveSuppliers);
			onBtnSearchClick();
			//populateSuppliersTree();
			form.getContextMenus().getSupplierTreeMenuADDSUPPLIERItem().setVisible(true);
		}
	}
	
	
	
	
	/**
	 * @param voOrg
	 */
	private boolean saveSupplier(OrgShortVo voOrg) 
	{
		String[] arrErrors = null;
		
		if(voOrg != null)
			arrErrors = voOrg.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		try {
				if(voOrg != null)
				{				
					form.getLocalContext().setSupplier(domain.saveOrganisationShort(voOrg));
				}
			}
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e1) 
		{
			engine.showMessage(e1.getMessage());
			return false;
		} 
		
		return true;
	}	

	private void showContextMenus(boolean b)
	{
		form.getContextMenus().getSupplierTreeMenuADDSUPPLIERItem().setVisible(b);
		form.getContextMenus().getSupplierTreeMenuEDITSUPPLIERItem().setVisible(b);
		form.getContextMenus().getSupplierTreeMenuREMOVESUPPLIERItem().setVisible(b);		
	}
	
	private void updateSupplier() 
	{ 			
		if (form.treSuppliers().getSelectedNode() != null)
		{
			form.setMode(FormMode.EDIT);
			form.getLocalContext().setSupplier((OrgShortVo) form.treSuppliers().getSelectedNode().getValue());
			populateScreenFromData((OrgShortVo) form.treSuppliers().getSelectedNode().getValue());
			form.btnSave().setEnabled(true);		
			form.treSuppliers().setEnabled(false);		
			enableDetailsTab(true);
			showContextMenus(false);			
			form.lyr1().tabOrg().txtOrgName().setFocus();	
			form.btnSave().setVisible(true);
			form.btnCancel().setVisible(true);
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
		}
	}

	protected void onBtnSearchClick() throws PresentationLogicException
	{
		populateSupplierCollection(null);
		displaySuppliers();		
	}
	
	//WDEV-2578 
	private boolean checkMandatorySpecEXCHCode()
	{
		if (form.lyr1().tabOrg().grdMappings().getRows().size() > 0)
		{			
			for(int x = 0; x < form.lyr1().tabOrg().grdMappings().getRows().size(); x++)
			{
				if (form.lyr1().tabOrg().grdMappings().getRows().get(x).getcolExtCodeType() != null &&
						form.lyr1().tabOrg().grdMappings().getRows().get(x).getcolExtCodeType().equals(TaxonomyType.EXCH))
				{		
					if ( ! NTPFExchequerCodingChecks.checkCodeIsAAANNN(form.lyr1().tabOrg().grdMappings().getRows().get(x).getcolCode()) )
					{
						engine.showMessage("The Supplier Exchequer code is not of the format AAANNN.");
						return false;
					}
					if (x == form.lyr1().tabOrg().grdMappings().getRows().size()-1)
						return true;
				}
			}
		}
		
		return true;
	}

	protected void onGrdMappingsSelectionChanged() throws PresentationLogicException 
	{
		if(form.getMode().equals(FormMode.EDIT))
			updateContextMenu(null);		
	}
	
}
