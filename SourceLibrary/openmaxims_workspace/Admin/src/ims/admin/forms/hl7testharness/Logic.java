//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.43 build 2230.19282)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.hl7testharness;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	protected void onFormOpen() 
	{
		form.txtHost().setValue(ConfigFlag.HOST_NAME.getValue());
		form.intPort().setValue(new Integer(ConfigFlag.HL7.HL7_PORT.getValue()));		
		setFormMode(FormMode.VIEW);
		String msgText = form.getGlobalContext().Admin.getHL7TestMessage();
		if(null!=msgText)
		{
			form.txtInput().setValue(msgText);
		}
		
	}
	
	private void setFormMode(FormMode mode)
	{
		form.setMode(mode);
		form.txtInput().setFocus();
	}
			
	protected void onBtnClearInputClick() 
	{
		form.txtInput().setValue(null);
		form.txtResponse().setValue(null);
		form.txtInput().setFocus();
		form.getGlobalContext().Admin.setHL7TestMessage(null);
	}
	
	protected void onBtnSendClick() 
	{
		if (form.txtInput().getValue() == null)
		{
			engine.showMessage("Input Message is empty. Cannot send");
			return;
		}
		
		//WDEV-9023
		Integer port = form.intPort().getValue();
		String host = form.txtHost().getValue();
		
		if (port == null || port <= 0 || host == null || host.equals(""))		
		{
			engine.showMessage("Please specify host and port");
			form.txtHost().setFocus();
			return;
		}
		
		try
		{
			String ret = domain.sendMessage(form.txtHost().getValue(), form.intPort().getValue(), form.txtInput().getValue());
			form.txtResponse().setValue(ret);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			form.txtResponse().setValue(e.getMessage());
			return;
		}		
	}
	
	protected void onBtnValidateClick() 
	{
		if (form.txtInput().getValue() == null)
		{
			engine.showMessage("Input Message is empty. Cannot validate");
			return;
		}
		try
		{
			String ret = domain.validateMessage(form.txtInput().getValue());
			form.txtResponse().setValue(ret);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			form.txtResponse().setValue(e.getMessage());
			return;
		}		
	}

	protected void onBtnTestClick() 
	{
		try
		{
			//WDEV-8522
			Integer port = form.intPort().getValue();
			String host = form.txtHost().getValue();
			
			if (port != null && port > -1 && host != null && !host.equals(""))
				domain.testConnection(form.txtHost().getValue(), form.intPort().getValue());
			else
			{
				engine.showMessage("Please specify host and port");
				form.txtHost().setFocus();
				return;
			}
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		engine.showMessage("Connection test succeeded.");		
	}

	@Override
	protected void onTxtInputValueChanged() throws PresentationLogicException {
		form.getGlobalContext().Admin.setHL7TestMessage(form.txtInput().getValue());
		
	}

	@Override
	protected void onBtnFormatClick() throws PresentationLogicException {
		String pattern= ConfigFlag.UI.HL7_FORMAT_EXPRESSION.getValue();
		String msg = form.txtInput().getValue();
		if (msg!=null&&pattern!=null)
		{
			msg=msg.replaceAll(pattern, "\n$0");
			form.txtInput().setValue(msg);
			form.getGlobalContext().Admin.setHL7TestMessage(form.txtInput().getValue());
		}
		
	}
}
