//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.53 build 2529.20504)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.locationstartupselection;

import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.OrgLiteVo;
import ims.core.vo.OrgLiteVoCollection;
import ims.framework.controls.TreeNode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppUser;
import ims.framework.interfaces.ILocation;
import ims.framework.interfaces.ILocationProvider;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		open();
	}

	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.treeLocation().getValue() instanceof ILocation)
		{
			engine.setCurrentLocation((ILocation) form.treeLocation().getValue());
			engine.openStartUpForm();
		}
	}

	protected void onTreeLocationTreeViewNodeExpandCollapse(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		if (node.isExpanded())
			processExpand(node);
	}

	protected void onTreeLocationTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		processSelection(node);
	}

	private void initialize()
	{
		form.btnOK().setVisible(true);
		form.btnOK().setEnabled(false);
	}

	private void open()
	{
		populateRootOrganizations(domain.listRootOrganizations());
	}

	private void populateRootOrganizations(OrgLiteVoCollection rootOrganizations)
	{
		form.treeLocation().getNodes().clear();

		if (rootOrganizations == null)
			return;

		for (int x = 0; x < rootOrganizations.size(); x++)
		{
			add(rootOrganizations.get(x));
		}
	}

	private TreeNode add(OrgLiteVo organization)
	{
		return add(null, organization);
	}

	private TreeNode add(TreeNode parentNode, OrgLiteVo organization)
	{
		if (organization == null || organization.getName() == null)
			return null;

		if (!hasAllowedLocations(organization, engine.getLoggedInUser()))
		{
			return null;
		}

		TreeNode node;

		if (parentNode == null)
			node = form.treeLocation().getNodes().add(organization, organization.getName());
		else
			node = parentNode.getNodes().add(organization, organization.getName());

		node.setExpandedImage(form.getImages().Admin.Organisation);
		node.setCollapsedImage(form.getImages().Admin.Organisation);
		addLoadingNode(node);
		node.setExpanded(false);
		return node;
	}

	private boolean hasAllowedLocations(OrgLiteVo organization, IAppUser user)
	{
		OrgLiteVoCollection organizationList = domain.listOrganizationsByOrganization(organization);
		LocSiteLiteVoCollection locationList = domain.listLocationSites(organization);

		ILocationProvider locationProvider = engine.getLocationProvider();

		if (locationProvider != null && !locationProvider.shouldSelectLocation(user))
			return true;

		// Test locations
		if (locationList != null)
		{
			for (int i = 0; i < locationList.size(); i++)
			{
				if (locationProvider != null && locationProvider.locationIsAllowed(locationList.get(i), user))
					return true;
				
				if (hasAllowedLocations(locationList.get(i), user))
					return true;
			}
		}

		// Test organizations
		if (organizationList != null)
		{
			for (int i = 0; i < organizationList.size(); i++)
			{
				if (hasAllowedLocations(organizationList.get(i), user))
					return true;
			}
		}

		return false;
	}

	private boolean hasAllowedLocations(LocSiteLiteVo location, IAppUser user)
	{
		LocationLiteVoCollection locationList = domain.listLocationsByLocationSite(location);
		
		ILocationProvider locationProvider = engine.getLocationProvider();
		
		if (locationProvider != null && !locationProvider.shouldSelectLocation(user))
			return true;

		// Test locations
		if (locationList != null)
		{
			for (int i = 0; i < locationList.size(); i++)
			{
				if (locationProvider != null && locationProvider.locationIsAllowed(locationList.get(i), user))
					return true;
				
				if (hasAllowedLocations(locationList.get(i), user))
					return true;
			}
		}
		
		return false;
	}

	private boolean hasAllowedLocations(LocationLiteVo location, IAppUser user)
	{
		LocationLiteVoCollection locationList = domain.listLocationsByLocation(location);
		
		ILocationProvider locationProvider = engine.getLocationProvider();
		
		if (locationProvider != null && !locationProvider.shouldSelectLocation(user))
			return true;
		
		// Test locations
		if (locationList != null)
		{
			for (int i = 0; i < locationList.size(); i++)
			{
				if (locationProvider != null && locationProvider.locationIsAllowed(locationList.get(i), user))
					return true;

				if (hasAllowedLocations(locationList.get(i), user))
					return true;
			}
		}
		
		return false;
	}

	private void processExpand(TreeNode node)
	{
		if (node == null)
			return;

		node.getNodes().clear();

		Object value = node.getValue();

		if (value instanceof OrgLiteVo)
		{
			loadData(node, (OrgLiteVo) value);
		}
		else if (value instanceof LocSiteLiteVo)
		{
			loadData(node, (LocSiteLiteVo) value);
		}
		else if (value instanceof LocationLiteVo)
		{
			loadData(node, (LocationLiteVo) value);
		}
	}

	private void loadData(TreeNode parentNode, LocationLiteVo location)
	{
		if (parentNode == null || location == null)
			return;

		LocationLiteVoCollection locations = domain.listLocationsByLocation(location);
		if (locations != null)
		{
			for (int x = 0; x < locations.size(); x++)
			{
				if (locations.get(x).getIsActive() == true)
					add(parentNode, locations.get(x));
			}
		}
	}

	private void loadData(TreeNode parentNode, LocSiteLiteVo locationSite)
	{
		if (parentNode == null || locationSite == null)
			return;

		LocationLiteVoCollection locations = domain.listLocationsByLocationSite(locationSite);
		if (locations != null)
		{
			for (int x = 0; x < locations.size(); x++)
			{
				// ----------------------------------------
				if (locations.get(x).getIsActive() == true)
					// ----------------------------------------
					add(parentNode, locations.get(x));
			}
		}
	}

	private TreeNode add(TreeNode parentNode, LocationLiteVo location)
	{
		if (parentNode == null || location == null || location.getName() == null)
			return null;

		if (engine.getLocationProvider() != null && !engine.getLocationProvider().locationIsAllowed(location, engine.getLoggedInUser()) && !hasAllowedLocations(location, engine.getLoggedInUser()))
			return null;

		TreeNode node = parentNode.getNodes().add(location, location.getName());
		node.setExpandedImage(form.getImages().Admin.Location);
		node.setCollapsedImage(form.getImages().Admin.Location);
		addLoadingNode(node);
		node.setExpanded(false);
		return node;
	}

	private void addLoadingNode(TreeNode parentNode)
	{
		TreeNode node = parentNode.getNodes().add(null, "Loading...");
		node.setCollapsedImage(form.getImages().Core.Time);
		node.setExpandedImage(form.getImages().Core.Time);
	}

	private void loadData(TreeNode parentNode, OrgLiteVo organization)
	{
		if (parentNode == null || organization == null)
			return;

		OrgLiteVoCollection organizations = domain.listOrganizationsByOrganization(organization);
		if (organization != null)
		{
			for (int x = 0; x < organizations.size(); x++)
			{
				add(parentNode, organizations.get(x));
			}
		}

		LocSiteLiteVoCollection locationSites = domain.listLocationSites(organization);
		if (locationSites != null)
		{
			for (int x = 0; x < locationSites.size(); x++)
			{
				// ----------------------------------------
				if (locationSites.get(x).getIsActive() == true)
					// ----------------------------------------
					add(parentNode, locationSites.get(x));
			}
		}
	}

	private TreeNode add(TreeNode parentNode, LocSiteLiteVo locationSite)
	{
		if (parentNode == null || locationSite == null || locationSite.getName() == null)
			return null;

		if (engine.getLocationProvider() != null && !engine.getLocationProvider().locationIsAllowed(locationSite, engine.getLoggedInUser()) && !hasAllowedLocations(locationSite, engine.getLoggedInUser()))
			return null;

		TreeNode node = parentNode.getNodes().add(locationSite, locationSite.getName());
		node.setExpandedImage(form.getImages().Admin.LocationSite);
		node.setCollapsedImage(form.getImages().Admin.LocationSite);
		addLoadingNode(node);
		node.setExpanded(false);
		return node;
	}

	private void processSelection(TreeNode node)
	{
		form.btnOK().setEnabled((node.getValue() instanceof ILocation) && (engine.getLocationProvider().locationIsAllowed((ILocation) node.getValue(), engine.getLoggedInUser())) );
	}
}
