//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.39 build 2166.24836)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.sessionadmin;

import java.util.ArrayList;
import java.util.Comparator;

import ims.admin.vo.AppSessionVo;
import ims.admin.vo.AppSessionVoCollection;
import ims.admin.vo.LogFileVo;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.EnvironmentConfig;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Time;

public class Logic extends BaseLogic
{
	private static final int COL_USERNAME = 2;
	private static final int COL_IDLETIME = 6;
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialiZe();
		refreshScreen();
	}
	
	private void initialiZe() 
	{
		form.lyr1().showtabSess();
		form.getLocalContext().setUserNameSortOrder(SortOrder.ASCENDING);
	}

	protected void onBtnRefreshClick() 
	{
		refreshScreen();		
	}

	private void refreshScreen() 
	{
		AppSessionVoCollection sessions = domain.listSessions();
		
		form.getLocalContext().setSessionCollection(sessions);
		
		populateSessionGrid(sessions, COL_USERNAME);
		
		setMenuItems(false);
		updateTotal();
		fillServerDetails();
	}
	
	private void populateSessionGrid(AppSessionVoCollection sessions, Integer column) 
	{
		if(sessions == null)
			return;
		
		form.lyr1().tabSess().grdSess().getRows().clear();
		
		if(column != null)
		{
			switch(column)
			{
				case COL_USERNAME:
					sessions.sort(new SessionComparatorByUserName(form.getLocalContext().getUserNameSortOrder()));
				break;
				
				case COL_IDLETIME:
					sessions.sort(new SessionComparatorByIdleTime(form.getLocalContext().getIdleTimeSortOrder()));
				break;
			}
		}

		
		ArrayList<AppSessionVo> timeoutSessions = new ArrayList<AppSessionVo>();
		
		for (int i = 0; i < sessions.size(); i++)
		{
			AppSessionVo vo = sessions.get(i);
			
			if (vo.getIdleTime() != null)
			{
				//Check if session timeout
				int minutes = (int) ((vo.getIdleTime() / (1000*60)) % 60);
				if (minutes >= ConfigFlag.GEN.SESSION_TIMEOUT.getValue())
				{
					timeoutSessions.add(vo);
					continue;
				}
			}
			
			GenForm.lyr1Layer.tabSessContainer.grdSessRow row = form.lyr1().tabSess().grdSess().getRows().newRow();
			if (vo.getIsLoggingEnabled().booleanValue())
			{
				row.setLogged(true);
			}
			else
			{
				row.setLogged(false);
			}
			row.setSessID(vo.getSessionId());
			row.setTooltipForSessID(vo.getSessionId());
			row.setUsername(vo.getUsername());
			row.setRealName(vo.getRealName());  
			row.setRole(vo.getRole());
			if (vo.getStartTime() != null)
			{
				row.setStartTime(vo.getStartTime().toString());				
			}
			if (vo.getIdleTime() != null)
			{
				row.setIdleTime(Time.getFormattedTime(vo.getIdleTime().longValue()));	
			}
			
			String host = vo.getRemoteHost();
			row.setRemoteHost(host);
			row.setTooltipForRemoteHost(host);
			row.setNodeName(vo.getNode());
			row.setTooltipForNodeName(vo.getNode());
			row.setValue(vo);
		}
		
		//Remove timeout sessions
		for (int i = 0; i < timeoutSessions.size(); i++) 
		{			
			try
			{
				domain.terminateSession(timeoutSessions.get(i));				
			}
			catch (DomainInterfaceException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
		}		
	}
	private void updateTotal()
	{
		StringBuffer total = new StringBuffer();
		total.append("<b>");
		total.append("Session Count: ");		
		total.append(form.lyr1().tabSess().grdSess().getRows().size());
		total.append("</b>");
		form.lyr1().tabSess().grdSess().setFooterValue(total.toString());		
	}

	private void fillServerDetails()
	{
		form.lyr1().tabSess().ctnServerDetails().txtStart().setValue(ConfigFlag.START_TIME.getValue());
		form.lyr1().tabSess().ctnServerDetails().txtHostname().setValue(ConfigFlag.HOST_NAME.getValue());
		form.lyr1().tabSess().ctnServerDetails().txtDeployDir().setValue(EnvironmentConfig.getBaseUri());
		form.lyr1().tabSess().ctnServerDetails().txtDbtype().setValue(ConfigFlag.DBTYPE.getValue());
		form.lyr1().tabSess().ctnServerDetails().txtDatasource().setValue(EnvironmentConfig.getMainDataSourceName());
		form.lyr1().tabSess().ctnServerDetails().txtCfgFile().setValue(ConfigFlag.getConfigFlagFullFilename());
		form.lyr1().tabSess().ctnServerDetails().txtServerType().setValue(EnvironmentConfig.getApplicationServerType());

		form.lyr1().tabSess().ctnServerDetails().txtCount().setValue("" + form.lyr1().tabSess().grdSess().getRows().size());
		form.lyr1().tabSess().ctnServerDetails().txtTimeOut().setValue("" + ConfigFlag.GEN.SESSION_TIMEOUT.getValue());
	}
	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		AppSessionVo vo = form.lyr1().tabSess().grdSess().getValue();
		
		if (vo == null) return;
		switch (menuItemID)
		{
			case GenForm.ContextMenus.AppSessionAdmin.LOGGING :
				try
				{
					AppSessionVo voRet = domain.toggleLogging(vo);
					GenForm.lyr1Layer.tabSessContainer.grdSessRow row = form.lyr1().tabSess().grdSess().getRowByValue(vo);
					row.setValue(voRet);					
					row.setLogged(voRet.getIsLoggingEnabled().booleanValue());
					if (voRet.getIsLoggingEnabled().booleanValue())
					{
						form.getContextMenus().getAppSessionAdminLOGGINGItem().setText("Disable Session Logging");			
					}
					else
					{
						form.getContextMenus().getAppSessionAdminLOGGINGItem().setText("Enable Session Logging");						
					}
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return;
				}
			break;
			case GenForm.ContextMenus.AppSessionAdmin.TERMINATE :
				try
				{
					domain.terminateSession(vo);
					form.lyr1().tabSess().grdSess().removeSelectedRow();
					updateTotal();
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return;
				}
			break;
			case GenForm.ContextMenus.AppSessionAdmin.VIEWLOG :
				LogFileVo log;
				try
				{
					form.lyr1().tabLog().intNumKb().setValue(new Integer(10));
					log = domain.getLogFile(vo, form.lyr1().tabLog().intNumKb().getValue());
					setLogDetails(log);
					form.lyr1().showtabLog();
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage(e.getMessage());
					return;
				}
			break;
		}
		
		setMenuItems(form.lyr1().tabSess().grdSess().getValue()!=null);//WDEV-17041
	}
	
	private void setMenuItems(boolean visible)
	{
		form.getContextMenus().getAppSessionAdminLOGGINGItem().setVisible(visible);
		form.getContextMenus().getAppSessionAdminTERMINATEItem().setVisible(visible);
		form.getContextMenus().getAppSessionAdminVIEWLOGItem().setVisible(visible);
	}
	protected void onLnkReturnClick() throws PresentationLogicException
	{
		form.lyr1().showtabSess();
		refreshScreen();	
	}
	protected void onBtnLogRefreshClick() throws PresentationLogicException
	{
		//WDEV-17041
		if (form.lyr1().tabLog().intNumKb().getValue()==null)
		{
			engine.showMessage("'Retrieve Last' field is mandatory");
			return;
		}
		
		AppSessionVo vo = form.lyr1().tabSess().grdSess().getValue();
		LogFileVo log;
		try
		{
			log = domain.getLogFile(vo, form.lyr1().tabLog().intNumKb().getValue());
			setLogDetails(log);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
	}
	protected void onGrdSessSelectionChanged() throws PresentationLogicException
	{
		AppSessionVo vo = form.lyr1().tabSess().grdSess().getValue();
		setMenuItems(true);
		if (vo.getIsLoggingEnabled().booleanValue())
		{
			form.getContextMenus().getAppSessionAdminLOGGINGItem().setText("Disable Session Logging");			
		}
		else
		{
			form.getContextMenus().getAppSessionAdminLOGGINGItem().setText("Enable Session Logging");						
		}		
	}
	
	private void setLogDetails(LogFileVo log)
	{
		form.lyr1().tabLog().txtLogContent().setValue(log.getLogContent());
		form.lyr1().tabLog().txtLogLocation().setValue(log.getLocation());
		form.lyr1().tabLog().txtlogName().setValue(log.getFileName());
		form.lyr1().tabLog().intLogSize().setValue(log.getSize());
	}
	
	private class SessionComparatorByUserName implements Comparator<AppSessionVo>
	{
		private int direction = 1;
		
		public SessionComparatorByUserName()
		{
			this(SortOrder.ASCENDING);
		}
		
		public SessionComparatorByUserName(SortOrder order)
		{
			if (SortOrder.DESCENDING.equals(order))
			{
				direction = -1;
			}
		}
		
		public int compare(AppSessionVo s1, AppSessionVo s2)
		{
			if (s1 != null && s2 != null && s1.getUsernameIsNotNull() && s2.getUsernameIsNotNull())
				return direction * s1.getUsername().compareToIgnoreCase(s2.getUsername());

			return 0;
		}
	}
	
	private class SessionComparatorByIdleTime implements Comparator<AppSessionVo>
	{
		private int direction = 1;
		
		public SessionComparatorByIdleTime()
		{
			this(SortOrder.ASCENDING);
		}
		
		public SessionComparatorByIdleTime(SortOrder order)
		{
			if (SortOrder.DESCENDING.equals(order))
			{
				direction = -1;
			}
		}
		
		public int compare(AppSessionVo s1, AppSessionVo s2)
		{
			if (s1 != null && s2 != null && s1.getIdleTimeIsNotNull() && s2.getIdleTimeIsNotNull())
				return direction * s1.getIdleTime().compareTo(s2.getIdleTime());

			return 0;
		}
	}

	@Override
	protected void onGrdSessGridHeaderClicked(int column) throws PresentationLogicException 
	{
		switch(column)
		{
			case COL_USERNAME:
				form.getLocalContext().setIdleTimeSortOrder(null);
				
				if(form.getLocalContext().getUserNameSortOrder() == null || SortOrder.DESCENDING.equals(form.getLocalContext().getUserNameSortOrder()))
					form.getLocalContext().setUserNameSortOrder(SortOrder.ASCENDING);
				else
					form.getLocalContext().setUserNameSortOrder(SortOrder.DESCENDING);
			break;
				
			case COL_IDLETIME:
				form.getLocalContext().setUserNameSortOrder(null);
				
				if(form.getLocalContext().getIdleTimeSortOrder() == null || SortOrder.DESCENDING.equals(form.getLocalContext().getIdleTimeSortOrder()))
					form.getLocalContext().setIdleTimeSortOrder(SortOrder.ASCENDING);
				else
					form.getLocalContext().setIdleTimeSortOrder(SortOrder.DESCENDING);
			break;
		}
		
		populateSessionGrid(form.getLocalContext().getSessionCollection(), column);
	}
}
