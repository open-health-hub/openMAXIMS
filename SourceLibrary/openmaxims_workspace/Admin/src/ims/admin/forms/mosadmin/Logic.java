//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.25 build 1941.24931)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.mosadmin;

import ims.admin.forms.mosadmin.GenForm.grdContactsRow;
import ims.admin.forms.mosadmin.GenForm.grdMappingsRow;
import ims.admin.helper.MosTreeDisplayHelper;
import ims.admin.helper.OrgTreeHelper;
import ims.admin.vo.enums.MOSSearchLastAction;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.HCPLocationLiteVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLocationVo;
import ims.core.vo.HcpLocationVoCollection;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocSiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.MemberOfStaffWithAppUserLiteVo;
import ims.core.vo.MosOrgLocVo;
import ims.core.vo.MosOrgLocVoCollection;
import ims.core.vo.NurseVo;
import ims.core.vo.OrganisationVoCollection;
import ims.core.vo.PersonName;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.TherapistVo;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.StaffType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Image;

import java.util.ArrayList;
public class Logic extends BaseLogic
{
	protected void onFormOpen()
	{
		initialize();
		open();

		form.getLocalContext().setShowLinkBack(Boolean.FALSE);
		try
		{
			selectMosFromGlobalContext();
		}
		catch (PresentationLogicException e)
		{
			engine.showMessage("Failed to select MOS from Global Context");
		}

		form.lnkBack().setVisible(form.getLocalContext().getShowLinkBackIsNotNull() && form.getLocalContext().getShowLinkBack().booleanValue());

		form.getGlobalContext().setMosFullName(null);
	}

	private void initialize()
	{
		form.imbHCPDlg().setVisible(false);
		form.GroupTreeFilter().setValue(GenForm.GroupTreeFilterEnumeration.rdoMemberOfStaff);
		form.lyrLHS().tabMos().customControlMosSearch().initializeComponent(Boolean.FALSE);
		loadHcpDisciplines();
	}

	private void loadHcpDisciplines()
	{
		form.cmbHcpDiciplineDetails().clear();
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(domain.getLookupService());
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).isActive() == true && lookupCollection.get(x).getParent() == null)
				form.cmbHcpDiciplineDetails().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		clearDetailControls();
		form.lyrLHS().tabMos().treMemberOfStaff().clearSelection();

		showMosView();// WDEV-1270
		form.GroupTreeFilter().setValue(GenForm.GroupTreeFilterEnumeration.rdoMemberOfStaff); //WDEV-15495

		// open();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!validateFields())
		{
			return;
		}
		if (!save())
		{
			return;
		}

		form.setMode(FormMode.VIEW);
		// You need to search again without clearing the context items
		// then set the tree value and populate.
		// 
		// ??? search();
		clearMenuItems();
		clearDetailControls();

		open();
	}

	private void search()
	{
		clearMenuItems();
		clearDetailControls();
		populateMosTree();
	}

	private void clearMenuItems()
	{
		form.getContextMenus().getMosOrganisationSETORGANISATIONSItem().setVisible(false);
		form.getContextMenus().getMosOrganisationADDItem().setVisible(false);
		form.getContextMenus().getMosOrganisationEDITItem().setVisible(false);
		form.getContextMenus().getMosOrganisationDEACTIVATEItem().setVisible(false);
		if (form.GroupTreeFilter().getValue().equals(GenForm.GroupTreeFilterEnumeration.rdoMemberOfStaff))
		{
			form.getContextMenus().getMosOrganisationADDItem().setVisible(true);
		}
	}

	protected void onCmbTypeValueChanged() throws PresentationLogicException
	{
		if (form.cmbType().getValue() != null)
		{
			form.cmbHcpDiciplineDetails().setEnabled(form.cmbType().getValue().equals(StaffType.HCP));
			form.imbHCPDlg().setEnabled(form.cmbType().getValue().equals(StaffType.HCP));

			if (form.cmbType().getValue().equals(StaffType.HCP) == false)
				synchroniseStaffTypeWithHcpType();
		}
		else
		{
			synchroniseStaffTypeWithHcpType();
			form.cmbHcpDiciplineDetails().setEnabled(false);
			form.imbHCPDlg().setEnabled(false);
		}
	}

	/**
	 * 
	 */
	private void synchroniseStaffTypeWithHcpType()
	{
		if (form.cmbHcpDiciplineDetails().getValue() != null)
		{
			if (form.getGlobalContext().Admin.getSelectedMos().getID_MemberOfStaffIsNotNull())
			{
				form.cmbType().setValue(StaffType.HCP);
				form.cmbHcpDiciplineDetails().setEnabled(true);
				form.imbHCPDlg().setEnabled(true);
			}
			else
			{
				form.cmbHcpDiciplineDetails().setValue(null);
				form.imbHCPDlg().setVisible(false);
				form.htmHcpDetails().setHTML("");
				form.getGlobalContext().setHcp(null);
			}
		}
	}

	private void clearDetailControls()
	{
		form.txtSurname().setValue(null);
		form.txtInitials().setValue(null);
		form.txtSignatureBlock().setValue(null);
		form.txtForeName().setValue(null);
		form.txtMiddleName().setValue(null);
		form.cmbTitle().setValue(null);
		form.cmbType().setValue(null);
		form.cmbHcpDiciplineDetails().setValue(null);
		form.pnlMosDetails().setValue("Details");
		form.imbHCPDlg().setVisible(false);
		form.htmHcpDetails().setHTML("");
		form.txtSDSRole().setValue(null);
		form.txtUserName().setValue(null);	//wdev-16588
		form.grdContacts().getRows().clear();
		form.grdMappings().getRows().clear();
	}

	private void displayContextMenus(boolean b)
	{
		form.getContextMenus().getMosOrganisationADDItem().setVisible(b);
		form.getContextMenus().getMosOrganisationEDITItem().setVisible(b);
		if (form.GroupTreeFilter().getValue().equals(GenForm.GroupTreeFilterEnumeration.rdoOrganisation))
			form.getContextMenus().getMosOrganisationADDItem().setVisible(false);
	}

	private void clearContextVariables()
	{
		form.getLocalContext().setbAdding(Boolean.FALSE);

		form.getGlobalContext().setHcp(null);
		form.getGlobalContext().setHcpType(null);
		form.getGlobalContext().setMosFormMode(FormMode.VIEW);
		form.getGlobalContext().setMosFullName(null);

		form.getGlobalContext().Admin.setMedicHcp(null);
		form.getGlobalContext().Admin.setNursingHcp(null);
		form.getGlobalContext().Admin.setSelectedMos(null);
		form.getGlobalContext().Admin.setTherapistHcp(null);

		form.getGlobalContext().NTPF.setTargetObjectId(null);
		
		//WDEV-12587
		form.getGlobalContext().Admin.setCanReferPatient(null);
	}

	private boolean save()
	{
		MemberOfStaffVo mosVo = form.getGlobalContext().Admin.getSelectedMos();
		populateMosVoFromScreen(mosVo);
		return save(mosVo);
	}

	private boolean save(MemberOfStaffVo mosVo)
	{
		String[] arrErrors = mosVo.validate();
		if (arrErrors != null)
		{
			engine.showErrors("Validation Errors", arrErrors);
			return false;
		}
		MemberOfStaffVo voSavedMos = null;
		try
		{
			voSavedMos = domain.saveMosVo(mosVo);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			form.grdMappings().setFocus();
			return false;
		}

		form.getGlobalContext().Admin.setSelectedMos(voSavedMos);
		return true;
	}

	private void open()
	{
		// set selection back
		if (form.getGlobalContext().Admin.getSelectedMosIsNotNull() && form.GroupTreeFilter().getValue().equals(GenForm.GroupTreeFilterEnumeration.rdoMemberOfStaff))//WDEV-15437
		{
			form.lyrLHS().tabMos().treMemberOfStaff().clear();
			MemberOfStaffVo MOS = form.getGlobalContext().Admin.getSelectedMos(); //WDEV-15658
			form.lyrLHS().tabMos().customControlMosSearch().setActionEvent(MOSSearchLastAction.CLEAR_CLICKED); //WDEV-15658
			form.lyrLHS().tabMos().customControlMosSearch().clear(); //WDEV-15658
			addMosNode(MOS);
			form.lyrLHS().tabMos().treMemberOfStaff().setValue(MOS);
			selectionChanged(form.lyrLHS().tabMos().treMemberOfStaff().getSelectedNode());
			return;
		}

		if (form.GroupTreeFilter().getValue().equals(GenForm.GroupTreeFilterEnumeration.rdoMemberOfStaff))
		{
			clearMosTree();
			showMosView();
		}
		else
		{
			populateOrganisationTree();
			showOrganisationView();
		}
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		MemberOfStaffShortVo voMos = null;
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
				
				if (sender.equals(form.grdMappings()))
				{
					grdMappingsRow row;
					row =	form.grdMappings().getRows().newRow();
				
					row.setValue(new TaxonomyMap());
				
					row.getValue();
				}
				
			break;

			case GenForm.ContextMenus.GenericGrid.Remove :
				if (sender.equals(form.grdMappings()))
				{
					if (form.grdMappings().getSelectedRowIndex() >= 0)
						form.grdMappings().getRows().remove(form.grdMappings().getSelectedRowIndex());
				}
			break;

			case GenForm.ContextMenus.ContactContextmenu.Add :
				if (sender.equals(form.grdContacts()))
					form.grdContacts().getRows().newRow();
			break;

			case GenForm.ContextMenus.ContactContextmenu.Remove :
				if (sender.equals(form.grdContacts()))
				{
					if (form.grdContacts().getSelectedRowIndex() >= 0)
						form.grdContacts().getRows().remove(form.grdContacts().getSelectedRowIndex());
				}
			break;

			case GenForm.ContextMenus.MosOrganisation.ADD :
			{
				if (sender.equals(form.lyrLHS().tabOrganisation().treOrganisation()))
				{
					form.getLocalContext().setbAdding(Boolean.TRUE);
					if (form.lyrLHS().tabOrganisation().treOrganisation().getSelectedNode() == null)
						addNewMos();
					else
					{
						populateMosDetailsForSelectedTreeNode();
					}
				}
				else if (sender.equals(form.lyrLHS().tabMos().treMemberOfStaff()))
				{
					addNewMos();
				}
				break;
			}

			case GenForm.ContextMenus.MosOrganisation.EDIT :
			{
				if (sender.equals(form.lyrLHS().tabOrganisation().treOrganisation()) && (form.lyrLHS().tabOrganisation().treOrganisation().getSelectedNode() != null))
					voMos = (MemberOfStaffShortVo) form.lyrLHS().tabOrganisation().treOrganisation().getSelectedNode().getValue();
				else if (sender.equals(form.lyrLHS().tabMos().treMemberOfStaff()) && (form.lyrLHS().tabMos().treMemberOfStaff().getSelectedNode() != null))
					voMos = (MemberOfStaffShortVo) form.lyrLHS().tabMos().treMemberOfStaff().getSelectedNode().getValue();

				if (voMos != null)
				{
					form.getLocalContext().setbAdding(Boolean.FALSE);
					form.setMode(FormMode.EDIT);
					form.cmbHcpDiciplineDetails().setEnabled(false);
					form.pnlMosDetails().setValue("Details for " + voMos.toString());
					populateScreenFromMosVo(voMos);
					setContextVariables(voMos);
					displayContextMenus(false);
					form.getContextMenus().getMosOrganisationDEACTIVATEItem().setVisible(false);
					form.getContextMenus().getMosOrganisationSETORGANISATIONSItem().setVisible(false);

					if (voMos.getHcpIsNotNull())
					{
						form.imbHCPDlg().setVisible(true);
						form.imbHCPDlg().setEnabled(true);
					}
				}
				break;
			}

			case GenForm.ContextMenus.MosOrganisation.SETORGANISATIONS :
			{
				if (sender.equals(form.lyrLHS().tabOrganisation().treOrganisation()) && (form.lyrLHS().tabOrganisation().treOrganisation().getSelectedNode() != null))
					voMos = (MemberOfStaffShortVo) form.lyrLHS().tabOrganisation().treOrganisation().getSelectedNode().getValue();
				else if (sender.equals(form.lyrLHS().tabMos().treMemberOfStaff()) && (form.lyrLHS().tabMos().treMemberOfStaff().getSelectedNode() != null))
					voMos = (MemberOfStaffShortVo) form.lyrLHS().tabMos().treMemberOfStaff().getSelectedNode().getValue();

				if (voMos != null)
				{
					form.getLocalContext().setbAdding(Boolean.FALSE);
					setContextVariables(voMos);
					form.getGlobalContext().Admin.setSelectedMos(domain.getMemberOfStaff(voMos));
					if (ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
						engine.open(form.getForms().Admin.MOSHospitalAccreditationDialog);
					else
						engine.open(form.getForms().Admin.MosOrganisationDlg);
				}
				break;
			}

			case GenForm.ContextMenus.MosOrganisation.DEACTIVATE :
			{
				if (sender.equals(form.lyrLHS().tabMos().treMemberOfStaff()) && (form.lyrLHS().tabMos().treMemberOfStaff().getSelectedNode() != null))
					voMos = (MemberOfStaffShortVo) form.lyrLHS().tabMos().treMemberOfStaff().getSelectedNode().getValue();

				if (voMos != null)
				{
					setContextVariables(voMos);
					try
					{
						if (voMos.getIsActiveIsNotNull())
						{
							voMos = domain.deactivateMos(voMos);
							
							form.lyrLHS().tabMos().customControlMosSearch().setActionEvent(MOSSearchLastAction.SEARCH_CLICKED); //WDEV-15925
							form.lyrLHS().tabMos().customControlMosSearch().refreshGrid();
							
						}
					}
					catch (StaleObjectException e)
					{
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					}
				}
				break;
			}
		}
		updateControlsState();
	}

	private void addNewMos()
	{
		clearContextVariables();
		MemberOfStaffVo mosVo = new MemberOfStaffVo();
		clearDetailControls();
		displayContextMenus(false);
		form.getGlobalContext().Admin.setSelectedMos(mosVo);
		form.setMode(FormMode.EDIT);
	}

	private MemberOfStaffShortVo setContextVariables(MemberOfStaffShortVo mosVo)
	{
		MemberOfStaffVo fullVo = domain.getMemberOfStaff(mosVo);
		form.getGlobalContext().Admin.setSelectedMos(fullVo);
		form.getGlobalContext().setHcp(fullVo.getHcp());
		// WDEV-2577
		if (form.lyrLHS().tabMos().treMemberOfStaff().getSelectedNode() != null)
			form.lyrLHS().tabMos().treMemberOfStaff().getSelectedNode().setValue(fullVo);

		return fullVo;
	}

	private void populateMosDetailsForSelectedTreeNode()
	{
		MemberOfStaffVo voMos = new MemberOfStaffVo();
		if (form.lyrLHS().tabOrganisation().isHeaderVisible())
		{
			if (form.lyrLHS().tabOrganisation().treOrganisation().getSelectedNode() != null)
			{
				if ((form.lyrLHS().tabOrganisation().treOrganisation().getSelectedNode().getValue() instanceof LocSiteVo) || (form.lyrLHS().tabOrganisation().treOrganisation().getSelectedNode().getValue() instanceof LocMostVo))
				{
					HcpLocationVo voHcpLocation = new HcpLocationVo();
					voHcpLocation.setLocation((LocMostVo) form.lyrLHS().tabOrganisation().treOrganisation().getSelectedNode().getValue());

					if (voMos.getLocationsIsNotNull())
					{
						voMos.getLocations().add(voHcpLocation);
					}
					else
					{
						HcpLocationVoCollection voCollLocations = new HcpLocationVoCollection();
						voCollLocations.add(voHcpLocation);
						voMos.setLocations(voCollLocations);
					}

					form.setMode(FormMode.EDIT);
					populateScreenFromMosVo(voMos);
					form.getGlobalContext().Admin.setSelectedMos(voMos);
					form.cmbType().setFocus();
				}
			}

		}
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Admin.HcpAdmin) && result.equals(DialogResult.OK))
		{
			fillNameDetails(form.getGlobalContext().getMosFullName());
			displayHCPDetails(form.getGlobalContext().getHcp());
			changeHcpDetails();
		}

		else if (formName.equals(form.getForms().Admin.HcpAdmin) && result.equals(DialogResult.CANCEL))
		{
			if (form.getGlobalContext().getMosFormMode() != null && form.getGlobalContext().getMosFormMode().equals(FormMode.EDIT))
			{
				if (form.getGlobalContext().getHcpIsNotNull() && form.getGlobalContext().getHcp().getID_Hcp() == null)
				{
					// The dialog was creating a new hcp and was cancelled.
					form.cmbHcpDiciplineDetails().setValue(null);
					form.imbHCPDlg().setVisible(false);
					form.getGlobalContext().setHcp(null);
					form.getGlobalContext().setMosFullName(null);

				}
			}
		}

		else if (formName.equals(form.getForms().Admin.MosOrganisationDlg) && result.equals(DialogResult.OK) || formName.equals(form.getForms().Admin.MOSHospitalAccreditationDialog) && result.equals(DialogResult.OK))
		{
			// Might be returning from ImageButton within mos edit, so don't save locations yet.
			if (form.getMode().equals(FormMode.EDIT))
			{

				// form.getGlobalContext().Admin.getSelectedMos().setLocations();

				return;
			}

			MemberOfStaffVo mosFull = form.getGlobalContext().Admin.getSelectedMos();
			if (save(mosFull))
			{
				MosOrgLocVoCollection voCollMosOrgLoc = domain.listOrganisationsForMos(form.getGlobalContext().Admin.getSelectedMos());
				// Refresh value in selected node
				TreeNode selectedNode = form.lyrLHS().tabMos().treMemberOfStaff().getSelectedNode();
				MemberOfStaffShortVo mosShort = form.getGlobalContext().Admin.getSelectedMos(); 
				selectedNode.setValue(mosShort);
				showOrgForMos(voCollMosOrgLoc, selectedNode);
				selectionChanged(selectedNode); //WDEV-16222
			}
		}
	}

	private void fillNameDetails(PersonName name)
	{
		if (name == null)
			return;
		form.cmbTitle().setValue(name.getTitle());
		form.txtSurname().setValue(name.getSurname());
		form.txtForeName().setValue(name.getForename());
		form.txtMiddleName().setValue(name.getMiddleName());
	}

	private boolean selectMosFromGlobalContext() throws PresentationLogicException
	{
		// if there is a MOS id in global context populated in WorkQueue
		// then we select it and display its details
		Integer targetId = form.getGlobalContext().NTPF.getTargetObjectId();
		if (targetId == null)
			return false;

		form.getLocalContext().setShowLinkBack(Boolean.TRUE);
		form.getLocalContext().setPreviousForm(getPreviousForm());
		// MemberOfStaffShortVo filterVo = new MemberOfStaffShortVo();
		// filterVo.setID_MemberOfStaff(targetId);
		populateMosTree();

		if (form.lyrLHS().tabMos().treMemberOfStaff().getNodes().size() == 1)
		{
			TreeNode mosNode = form.lyrLHS().tabMos().treMemberOfStaff().getNodes().get(0);
			MemberOfStaffShortVo voMosShort = (MemberOfStaffShortVo) form.lyrLHS().tabMos().treMemberOfStaff().getNodes().get(0).getValue();

			onTreMemberOfStaffTreeViewSelectionChanged(mosNode);
			form.lyrLHS().tabMos().treMemberOfStaff().setValue(voMosShort);
			onContextMenuItemClick(GenForm.ContextMenus.MosOrganisation.EDIT, form.lyrLHS().tabMos().treMemberOfStaff());
		}

		return false;
	}

	private FormName getPreviousForm()
	{
		if (engine.getPreviousNonDialogFormName().equals(form.getForms().NTPF.WorkQueue))
			return form.getForms().NTPF.WorkQueue;
		else if (engine.getPreviousNonDialogFormName().equals(form.getForms().NTPF.WorkQueue2))
			return form.getForms().NTPF.WorkQueue2;
		return null;
	}

	protected void onImbHCPDlgClick() throws PresentationLogicException
	{
		Hcp voHcp = new Hcp();
		if (form.getGlobalContext().getHcpIsNotNull())
		{
			voHcp = form.getGlobalContext().getHcp();
		}
		else
		{
			if (form.cmbHcpDiciplineDetails().getValue().equals(HcpDisType.MEDICAL))
				voHcp = new MedicVo();
			else if (form.cmbHcpDiciplineDetails().getValue().equals(HcpDisType.NURSING))
				voHcp = new NurseVo();
			else if (form.cmbHcpDiciplineDetails().getValue().equals(HcpDisType.THERAPY))
				voHcp = new TherapistVo();

			voHcp.setHcpType(form.cmbHcpDiciplineDetails().getValue());
		}

		form.getGlobalContext().setHcp(voHcp);
		form.getGlobalContext().setMosFormMode(form.getMode());
		form.getGlobalContext().setMosFullName(getMosNameFromScreen());
		engine.open(form.getForms().Admin.HcpAdmin);
	}

	private PersonName getMosNameFromScreen()
	{
		PersonName name = new PersonName();
		name.setTitle(form.cmbTitle().getValue());
		name.setSurname(form.txtSurname().getValue());
		name.setForename(form.txtForeName().getValue());
		name.setMiddleName(form.txtMiddleName().getValue());
		return name;
	}

	protected void onRadioButtonGroupTreeFilterValueChanged() throws PresentationLogicException
	{
		clearContextVariables();
		clearDetailControls(); //WDEV-13929 
		open();
	}

	private void clearMosTree()
	{
		form.lyrLHS().tabMos().treMemberOfStaff().clear();
	}

	private void populateOrganisationTree()
	{
		OrganisationVoCollection voColl = domain.listRootOrgs().sort();
		new OrgTreeHelper(form.getImages().Admin.Organisation, form.getImages().Admin.LocationSite, form.getImages().Admin.Location).populateOrgTree(form.lyrLHS().tabOrganisation().treOrganisation(), voColl);
		form.lyrLHS().tabOrganisation().treOrganisation().expandAll();
		// populateOrganisationTree(voColl);
	}

	private void populateMosForLocation(LocMostVo voLoc, TreeNode node)
	{
		clearMosNodes(node);
		MemberOfStaffShortVoCollection voCollMos = domain.listMosForLocation(voLoc);

		TreeNode newNode;
		for (int i = 0; i < voCollMos.size(); i++)
		{
			MemberOfStaffShortVo mosVo = voCollMos.get(i);
			newNode = node.getNodes().add(mosVo, mosVo.getName().toString());

			if (mosVo.getHcpIsNotNull() && mosVo.getHcp().getHcpTypeIsNotNull())
			{
				if (mosVo.getHcp().getHcpType().getParent() == null)
				{
					newNode.setCollapsedImage(mosVo.getHcp().getHcpType().getImage() == null ? form.getImages().Admin.StaffBlack : mosVo.getHcp().getHcpType().getImage());
					newNode.setExpandedImage(mosVo.getHcp().getHcpType().getImage() == null ? form.getImages().Admin.StaffBlack : mosVo.getHcp().getHcpType().getImage());
				}
				else
				{
					newNode.setCollapsedImage(mosVo.getHcp().getHcpType().getParent().getImage() == null ? form.getImages().Admin.StaffBlack : mosVo.getHcp().getHcpType().getParent().getImage());
					newNode.setExpandedImage(mosVo.getHcp().getHcpType().getParent().getImage() == null ? form.getImages().Admin.StaffBlack : mosVo.getHcp().getHcpType().getParent().getImage());
				}
			}
			else
			{
				newNode.setCollapsedImage(form.getImages().Admin.StaffBlack);
				newNode.setExpandedImage(form.getImages().Admin.StaffBlack);
			}
		}
	}

	private void clearMosNodes(TreeNode node)
	{
		TreeNode childNode;
		ArrayList l = new ArrayList();
		for (int i = 0; i < node.getNodes().size(); i++)
		{
			childNode = node.getNodes().get(i);
			if (childNode.getValue() instanceof MemberOfStaffShortVo)
			{
				l.add(childNode);
			}
		}
		for (int i = 0; i < l.size(); i++)
		{
			node.getNodes().remove((TreeNode) l.get(i));
		}
	}

	private void populateMosVoFromScreen(MemberOfStaffShortVo voMos)
	{
		if (voMos == null)
			return;

		voMos.setName(getMosNameFromScreen());
		voMos.getName().setUppers();
		voMos.setInitials(form.txtInitials().getValue());
		voMos.setSignatureBlock(form.txtSignatureBlock().getValue());
		voMos.setHcp(form.getGlobalContext().getHcp());
		voMos.setStaffType(form.cmbType().getValue());
		voMos.setSdsRoleId(form.txtSDSRole().getValue());
		String pasCode = voMos.getPasCode();
		voMos.setCodeMappings(getCodeMappings(voMos));
		if (!canUpdatePasId(voMos) && pasCode != null && !pasCode.equals(voMos.getPasCode()))
		{
			voMos.setPasCode(pasCode);
			engine.showMessage("The PAS Identifier for this Consultant cannot be updated as it has been got from the PAS. It will revert to the previous value.");
		}
		voMos.setCommChannels(getCommChannels());
		
		//WDEV-12587
		if(voMos.getID_MemberOfStaff() == null)
			voMos.setCanReferPatient(form.getGlobalContext().Admin.getCanReferPatient());
		else if(form.getGlobalContext().getHcp() != null && form.getGlobalContext().getHcp().getMosIsNotNull())
			voMos.setCanReferPatient(form.getGlobalContext().getHcp().getMos().getCanReferPatient());
	}

	private boolean canUpdatePasId(MemberOfStaffShortVo voMos)
	{
		if (!ConfigFlag.GEN.ALLOW_CONS_PAS_ID_UPDATE.getValue() && voMos.getHcpIsNotNull() && voMos.getHcp() instanceof MedicVo && ((MedicVo) voMos.getHcp()).getGradeIsNotNull() && ((MedicVo) voMos.getHcp()).getGrade().equals(MedicGrade.CONS))
		{
			return false;
		}
		return true;
	}

	private TaxonomyMapCollection getCodeMappings(MemberOfStaffShortVo voMos)
	{
		TaxonomyMapCollection coll = new TaxonomyMapCollection(); 
		for (int i = 0; i < form.grdMappings().getRows().size(); i++)
		{
			grdMappingsRow row = form.grdMappings().getRows().get(i);
			if (row.getcolExtCodeType() != null && row.getcolCode() != null)
			{
				TaxonomyMap map = row.getValue();
				map.setTaxonomyName(row.getcolExtCodeType());
				map.setTaxonomyCode(row.getcolCode());
				coll.add(map);

			}
		}
		return coll;
	}



	private CommChannelVoCollection getCommChannels()
	{
		CommChannelVoCollection coll = new CommChannelVoCollection();
		for (int i = 0; i < form.grdContacts().getRows().size(); i++)
		{
			grdContactsRow row = form.grdContacts().getRows().get(i);
			if (row.getcolType() != null && row.getcolContactValue() != null)
			{
				CommChannelVo comm = new CommChannelVo();
				comm.setChannelType(row.getcolType());
				comm.setCommValue(row.getcolContactValue());
				coll.add(comm);
			}
		}
		return coll;
	}

	private void populateMosTree()
	{
		MemberOfStaffShortVoCollection mosCollVo = form.lyrLHS().tabMos().customControlMosSearch().listMembersOfStaff();
		MosTreeDisplayHelper mosTreeDisplayHelper = new MosTreeDisplayHelper(form.lyrLHS().tabMos().treMemberOfStaff(), form.getImages().Admin.StaffBlack);

		if (mosCollVo == null || (mosCollVo != null && mosCollVo.size() == 0))// wdev-3074
			engine.showMessage("No matching Member of Staff records found.");

		if (mosTreeDisplayHelper != null)
			mosTreeDisplayHelper.populateMosTree(mosCollVo);
	}

	private void showOrgForMos(TreeNode mosNode)
	{
		MemberOfStaffShortVo mos = (MemberOfStaffShortVo) mosNode.getValue();
		MosOrgLocVoCollection voCollMosOrgLoc = domain.listOrganisationsForMos(mos);
		showOrgForMos(voCollMosOrgLoc, mosNode);
	}

	/**
	 * @param voCollMosOrgLoc
	 * @param newNode
	 */
	private void showOrgForMos(MosOrgLocVoCollection voCollMosOrgLoc, TreeNode mosNode)
	{
		mosNode.getNodes().clear();
		for (int i = 0; i < voCollMosOrgLoc.size(); i++)
		{
			MosOrgLocVo vo = voCollMosOrgLoc.get(i);
			TreeNode orgNode = mosNode.getNodes().add(vo.getOrganisation(), vo.getOrganisation().getName());
			orgNode.setCollapsedImage(form.getImages().Admin.Organisation);
			HCPLocationLiteVo.mixedSort(vo.getHCPLocations());
			for (int j = 0; j < vo.getHCPLocations().size(); j++)
			{
				HCPLocationLiteVo locVo = vo.getHCPLocations().get(j);

				StringBuffer sb = new StringBuffer();
				sb.append(locVo.getLocation().getName());
				sb.append(locVo.getAccreditationStatusIsNotNull() ? " ," + locVo.getAccreditationStatus().toString() : "");

				TreeNode locNode = orgNode.getNodes().add(locVo, sb.toString());
				if (j == 0)
					locNode.setExpanded(true);

				if (locVo.getLocation() instanceof LocSiteVo || locVo.getLocation() instanceof LocSiteShortVo)
				{
					locNode.setCollapsedImage(form.getImages().Admin.LocationSite);
					locNode.setExpandedImage(form.getImages().Admin.LocationSite);
				}
				else
				{
					locNode.setCollapsedImage(form.getImages().Admin.Location);
					locNode.setExpandedImage(form.getImages().Admin.Location);
				}
			}
		}

	}

	private void populateScreenFromMosVo(MemberOfStaffShortVo mosVo)
	{
		clearDetailControls();
		if (mosVo.getNameIsNotNull())
		{
			form.txtSurname().setValue(mosVo.getName().getSurname());
			form.txtForeName().setValue(mosVo.getName().getForename());
			form.txtMiddleName().setValue(mosVo.getName().getMiddleName());
			form.cmbTitle().setValue(mosVo.getName().getTitle());
		}
		form.txtInitials().setValue(mosVo.getInitials());
		form.txtSignatureBlock().setValue(mosVo.getSignatureBlock());
		form.cmbType().setValue(mosVo.getStaffType());
		form.txtSDSRole().setValue(mosVo.getSdsRoleId());
		//wdev-16588
		if( mosVo != null)
		{
			MemberOfStaffWithAppUserLiteVo tempVo = domain.getMemberOffStaffWithAppUserById(mosVo);
			form.txtUserName().setValue(tempVo != null && tempVo.getAppUserIsNotNull() ? tempVo.getAppUser().getUsername():"");
		}
		//------------
		if (mosVo.getHcpIsNotNull())
		{
			if (mosVo.getHcp().getHcpTypeIsNotNull())
			{
				form.getGlobalContext().setHcp(mosVo.getHcp());
				if (mosVo.getHcp().getHcpType().getParent() == null)
					form.cmbHcpDiciplineDetails().setValue(mosVo.getHcp().getHcpType());
				else
					form.cmbHcpDiciplineDetails().setValue(mosVo.getHcp().getHcpType().getParent());
			}
			displayHCPDetails();
		}
		
		populateMappingsGrid(mosVo.getCodeMappings());
		populateContactsGrid(mosVo.getCommChannels());
	}

	private void populateMappingsGrid(TaxonomyMapCollection coll)
	{
		form.grdMappings().getRows().clear();

		if (coll == null)
			return;

		for (int i = 0; i < coll.size(); i++)
		{
			TaxonomyMap map = coll.get(i);
			grdMappingsRow row = form.grdMappings().getRows().newRow();
			row.setcolExtCodeType(map.getTaxonomyName());
			row.setcolCode(map.getTaxonomyCode());
			row.setTooltipForcolCode(map.getTaxonomyCode());
			row.setValue(map);
		}
	}

	private void populateContactsGrid(CommChannelVoCollection coll)
	{
		form.grdContacts().getRows().clear();

		if (coll == null)
			return;

		for (int i = 0; i < coll.size(); i++)
		{
			CommChannelVo chan = coll.get(i);
			grdContactsRow row = form.grdContacts().getRows().newRow();
			row.setcolType(chan.getChannelType());
			row.setcolContactValue(chan.getCommValue());
			row.setTooltipForcolContactValue(chan.getCommValue());
			row.setValue(chan);
		}
	}

	private void showMosView()
	{
		form.getContextMenus().getMosOrganisationADDItem().setVisible(true);
		form.getContextMenus().getMosOrganisationSETORGANISATIONSItem().setVisible(false);
		form.getContextMenus().getMosOrganisationEDITItem().setVisible(false);
		form.getContextMenus().getMosOrganisationDEACTIVATEItem().setVisible(false);
		form.lyrLHS().showtabMos();
	}

	private void showOrganisationView()
	{
		form.getContextMenus().getMosOrganisationSETORGANISATIONSItem().setVisible(false);
		form.getContextMenus().getMosOrganisationADDItem().setVisible(false);
		form.getContextMenus().getMosOrganisationEDITItem().setVisible(false);
		form.getContextMenus().getMosOrganisationDEACTIVATEItem().setVisible(false);
		form.lyrLHS().showtabOrganisation();
	}

	protected void onTreMemberOfStaffTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		selectionChanged(node);
	}

	private void selectionChanged(TreeNode node)
	{
		if (node == null)
			return;
		MemberOfStaffShortVo voMos = null;
		boolean isMappedToUser = false;
		if (node.getValue() instanceof MemberOfStaffShortVo)
		{
			voMos = (MemberOfStaffShortVo) node.getValue();
			try
			{
				isMappedToUser = domain.isCurrentMosMappedToUser(voMos).booleanValue();
			}
			catch (DomainInterfaceException e)
			{
				throw new DomainRuntimeException(e);
			}
			
		}
		form.getContextMenus().getMosOrganisationEDITItem().setVisible(voMos != null);
		form.getContextMenus().getMosOrganisationSETORGANISATIONSItem().setVisible(voMos != null);
		form.getContextMenus().getMosOrganisationDEACTIVATEItem().setVisible(voMos != null && 
				(!isMappedToUser ||	!(voMos.getIsActiveIsNotNull() && voMos.getIsActive())));

		clearContextVariables();
		if (voMos != null)
		{
			if (voMos.getIsActiveIsNotNull() && voMos.getIsActive().booleanValue())
			{
				form.getContextMenus().getMosOrganisationDEACTIVATEItem().setText("Deactivate Member of Staff");
				form.getContextMenus().getMosOrganisationDEACTIVATEItem().setIcon(form.getImages().Admin.StaffRemove);
			}
			else
			{
				form.getContextMenus().getMosOrganisationDEACTIVATEItem().setText("Activate Member of Staff");
				form.getContextMenus().getMosOrganisationDEACTIVATEItem().setIcon(form.getImages().Admin.StaffActivate);
				
			}

			populateScreenFromMosVo(setContextVariables(voMos));
			showOrgForMos(node);

			if (voMos.getHcpIsNotNull())
			{
				if (form.cmbHcpDiciplineDetails().getValue() != null)
				{
					form.imbHCPDlg().setEnabledImage(form.cmbHcpDiciplineDetails().getValue().getCollapsedImage());
					form.imbHCPDlg().setDisabledImage(form.cmbHcpDiciplineDetails().getValue().getCollapsedImage());
				}
				form.imbHCPDlg().setVisible(true);
			}
			else
			{
				form.imbHCPDlg().setVisible(false);
			}
		}
		else
		{
			clearDetailControls();
		}

	}

	protected void onTreOrganisationSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		clearDetailControls();
		clearContextVariables();

		form.getContextMenus().getMosOrganisationEDITItem().setVisible(node.getValue() instanceof MemberOfStaffShortVo);

		if (node.getValue() instanceof LocSiteVo || node.getValue() instanceof LocMostVo)
		{
			populateMosForLocation((LocMostVo) node.getValue(), node);
		}

		else if (node.getValue() instanceof MemberOfStaffShortVo)
		{
			MemberOfStaffShortVo voMos = (MemberOfStaffShortVo) node.getValue();

			populateScreenFromMosVo(setContextVariables(voMos)); //WDEV-13921
			
			if (voMos.getHcpIsNotNull())
			{
				form.imbHCPDlg().setEnabledImage(form.cmbHcpDiciplineDetails().getValue().getCollapsedImage());
				form.imbHCPDlg().setDisabledImage(form.cmbHcpDiciplineDetails().getValue().getCollapsedImage());
				form.imbHCPDlg().setVisible(true);
			}
			else
			{
				form.imbHCPDlg().setVisible(false);
			}

		}
		else
		{
			form.getContextMenus().getMosOrganisationADDItem().setVisible(false);
		}

	}

	private void changeHcpDetails()
	{
		form.imbHCPDlg().setVisible(form.cmbHcpDiciplineDetails().getValue() != null);
		form.imbHCPDlg().setEnabled(form.cmbHcpDiciplineDetails().getValue() != null);
		if (form.cmbHcpDiciplineDetails().getValue() != null)
		{
			Image img = form.cmbHcpDiciplineDetails().getValue().getExpandedImage();
			form.imbHCPDlg().setEnabledImage(img);
			form.imbHCPDlg().setDisabledImage(img);
		}
	}

	protected void onCmbHcpDiciplineDetailsValueChanged() throws PresentationLogicException
	{
		changeHcpDetails();
		if (form.cmbHcpDiciplineDetails().getValue() != null)
		{
			onImbHCPDlgClick();
		}
	}

	private boolean validateFields()
	{

		if (form.txtSurname().getValue() == null)
		{
			engine.showMessage("Please enter a Surname for the member of staff.");
			return false;
		}

		if (form.cmbType().getValue() != null)
		{
			if (form.cmbType().getValue().equals(StaffType.HCP))
			{
				if (form.cmbHcpDiciplineDetails().getValue() == null)
				{
					engine.showMessage("Please enter HCP details or select another staff type.");
					return false;
				}
			}
		}

		return true;
	}

	private void displayHCPDetails()
	{
		if (form.getGlobalContext().Admin.getSelectedMosIsNotNull())
			form.htmHcpDetails().setHTML(form.getGlobalContext().Admin.getSelectedMos().getHcp().getHTMLString());
	}

	private void displayHCPDetails(Hcp hcp)
	{
		form.htmHcpDetails().setHTML(hcp.getHTMLString());
	}

	protected void onLnkBackClick() throws PresentationLogicException
	{
		form.getGlobalContext().NTPF.setTargetObjectId(null);

		if (form.getLocalContext().getPreviousFormIsNotNull())
			engine.open(form.getLocalContext().getPreviousForm());
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.lnkBack().setVisible(form.getLocalContext().getShowLinkBackIsNotNull() && form.getLocalContext().getShowLinkBack().booleanValue());
			form.lyrLHS().tabMos().setcustomControlMosSearchEnabled(true);
			form.getContextMenus().getGenericGridAddItem().setVisible(false);
			form.getContextMenus().getContactContextmenuAddItem().setVisible(false);
			form.getContextMenus().getGenericGridRemoveItem().setVisible(false);
			form.getContextMenus().getContactContextmenuRemoveItem().setVisible(false);
		}
		else
		{
			form.lyrLHS().tabMos().setcustomControlMosSearchEnabled(false);
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			form.getContextMenus().getContactContextmenuAddItem().setVisible(true);
			form.getContextMenus().getGenericGridRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdMappings().getSelectedRowIndex() >= 0);
			form.getContextMenus().getContactContextmenuRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdContacts().getSelectedRowIndex() >= 0);
		}
		
		form.cmbType().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.cmbType().getValue() == null); //WDEV-16261

	}

	protected void onImbSetLocsClick() throws PresentationLogicException
	{
		MemberOfStaffShortVo voMos = form.getGlobalContext().Admin.getSelectedMos();

		populateMosVoFromScreen(voMos);// Need to ensure StaffType is set wdev-3971

		if (voMos != null)
		{
			form.getLocalContext().setbAdding(Boolean.FALSE);
			if (voMos.getID_MemberOfStaffIsNotNull())
			{
				MemberOfStaffVo voCouldContainsUnsavedLocationAccreditationMos = form.getGlobalContext().Admin.getSelectedMos();
				//setContextVariables(voMos); WDEV-16222
				mergeSavedAccreditation(voCouldContainsUnsavedLocationAccreditationMos);
			}

			if (ConfigFlag.DOM.ENABLE_EXCHEQUER_CODES_VALIDATION.getValue())
				engine.open(form.getForms().Admin.MOSHospitalAccreditationDialog);
			else
				engine.open(form.getForms().Admin.MosOrganisationDlg, new Object[]{Boolean.FALSE});
		}
	}

	private void mergeSavedAccreditation(MemberOfStaffVo voCouldContainsUnsavedLocationAccreditationMos)
	{
		MemberOfStaffVo voMos = form.getGlobalContext().Admin.getSelectedMos();

		for (int j = 0; voCouldContainsUnsavedLocationAccreditationMos.getLocationsIsNotNull() && j < voCouldContainsUnsavedLocationAccreditationMos.getLocations().size(); j++)
		{
			HcpLocationVo voLoc = voCouldContainsUnsavedLocationAccreditationMos.getLocations().get(j);

			Boolean bFound = false;
			for (int i = 0; voMos.getLocationsIsNotNull() && i < voMos.getLocations().size(); i++)
			{
				if (voLoc.equals(voMos.getLocations().get(i)))
					bFound = true;
			}

			if (!bFound)
			{
				if (form.getGlobalContext().Admin.getSelectedMos().getLocations() == null)
					form.getGlobalContext().Admin.getSelectedMos().setLocations(new HcpLocationVoCollection());

				form.getGlobalContext().Admin.getSelectedMos().getLocations().add(voCouldContainsUnsavedLocationAccreditationMos.getLocations().get(j));
			}
		}

	}

	private void addMosNode(MemberOfStaffShortVo mosVo)
	{
		TreeNode newNode = form.lyrLHS().tabMos().treMemberOfStaff().getNodes().add(mosVo, mosVo.toString());
		if (mosVo.getHcpIsNotNull() && mosVo.getHcp().getHcpTypeIsNotNull())
		{
			if (mosVo.getHcp().getHcpType().getParent() == null)
			{
				newNode.setCollapsedImage(mosVo.getHcp().getHcpType().getImage() == null ? form.getImages().Admin.StaffBlack : mosVo.getHcp().getHcpType().getImage());
				newNode.setExpandedImage(mosVo.getHcp().getHcpType().getImage() == null ? form.getImages().Admin.StaffBlack : mosVo.getHcp().getHcpType().getImage());
			}
			else
			{
				newNode.setCollapsedImage(mosVo.getHcp().getHcpType().getParent().getImage() == null ? form.getImages().Admin.StaffBlack : mosVo.getHcp().getHcpType().getParent().getImage());
				newNode.setExpandedImage(mosVo.getHcp().getHcpType().getParent().getImage() == null ? form.getImages().Admin.StaffBlack : mosVo.getHcp().getHcpType().getParent().getImage());

			}
		}
		else
		{
			newNode.setCollapsedImage(form.getImages().Admin.StaffBlack);
			newNode.setExpandedImage(form.getImages().Admin.StaffBlack);
		}
		if ((mosVo.getIsActiveIsNotNull()) && (mosVo.getIsActive().booleanValue() == false))
			newNode.setTextColor(Color.Gray);
	}

	protected void onGrdMappingsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	protected void onGrdContactsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	protected void onCustomControlMosSearchValueChanged() throws PresentationLogicException
	{
		MOSSearchLastAction action = form.lyrLHS().tabMos().customControlMosSearch().getActionEvent();

		clearContextVariables();

		if (action != null)
		{
			if (action.equals(MOSSearchLastAction.CLEAR_CLICKED))
			{
				clearMenuItems();
				clearDetailControls();
				clearMosTree();
			}
			else if (action.equals(MOSSearchLastAction.SEARCH_CLICKED))
				search();
		}
	}

}
