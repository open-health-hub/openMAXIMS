//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.mosadmin;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrLHSLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabMosContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 368, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_customControlMosSearchForm = loader.loadComponent(103173, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 2, skipContextValidation);
				//ims.framework.Control m_customControlMosSearchControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(8), new Integer(368), new Integer(120), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2), m_customControlMosSearchForm, instance1 } );
				ims.framework.Control m_customControlMosSearchControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2), m_customControlMosSearchForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlMosSearchControl);
				Menu[] menus1 = m_customControlMosSearchForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 6, 138, 354, 375, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuMosOrganisation, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
			}

			public ims.admin.forms.mossearch.IComponent customControlMosSearch()
			{
				return (ims.admin.forms.mossearch.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlMosSearchValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlMosSearchVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlMosSearchVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlMosSearchEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlMosSearchEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public TreeView treMemberOfStaff()
			{
				return (TreeView)super.getControl(1);
			}
		}
		public static class tabOrganisationContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Tree Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 352, 504, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuMosOrganisation, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
			}

			public TreeView treOrganisation()
			{
				return (TreeView)super.getControl(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 376, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabMos = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Member of Staff List", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabMosContainer m_tabMosContainer = (tabMosContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabMosContainer.class, m_tabMos, factory);
			super.addContainer(m_tabMos, m_tabMosContainer);
			ims.framework.utils.SizeInfo m_tabMosDesignSize = new ims.framework.utils.SizeInfo(376, 552);
			ims.framework.utils.SizeInfo m_tabMosRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper4.getWidth(), anchoringHelper4.getHeight());
			m_tabMosContainer.setContext(form, appForm, m_tabMos, loader, form_images_local, contextMenus, startControlID, m_tabMosDesignSize, m_tabMosRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 376, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOrganisation = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Organisation/Location List", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabOrganisationContainer m_tabOrganisationContainer = (tabOrganisationContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOrganisationContainer.class, m_tabOrganisation, factory);
			super.addContainer(m_tabOrganisation, m_tabOrganisationContainer);
			ims.framework.utils.SizeInfo m_tabOrganisationDesignSize = new ims.framework.utils.SizeInfo(376, 552);
			ims.framework.utils.SizeInfo m_tabOrganisationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper5.getWidth(), anchoringHelper5.getHeight());
			m_tabOrganisationContainer.setContext(form, appForm, m_tabOrganisation, loader, form_images_local, contextMenus, startControlID, m_tabOrganisationDesignSize, m_tabOrganisationRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabMos().setVisible(false);
			tabOrganisation().setVisible(false);
		}
		public void showtabMos()
		{
			tabOrganisation().setVisible(false);
			tabMos().setVisible(true);
		}
		public void showtabOrganisation()
		{
			tabMos().setVisible(false);
			tabOrganisation().setVisible(true);
		}

		public tabMosContainer tabMos()
		{
			return (tabMosContainer)super.layers.get(0);
		}
		public tabOrganisationContainer tabOrganisation()
		{
			return (tabOrganisationContainer)super.layers.get(1);
		}
	}
	public static class cmbTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.StaffType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.StaffType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.StaffType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.StaffType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.StaffType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.StaffType getValue()
		{
			return (ims.core.vo.lookups.StaffType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.StaffType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTitleComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PersonTitle value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PersonTitle value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PersonTitle value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PersonTitle getValue()
		{
			return (ims.core.vo.lookups.PersonTitle)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PersonTitle value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHcpDiciplineDetailsComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.HcpDisType getValue()
		{
			return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.HcpDisType value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdContactsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdContactsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolTypeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolTypeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolType(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.lookups.ChannelType getcolType()
		{
			return (ims.core.vo.lookups.ChannelType)super.row.get(0);
		}
		public void setcolType(ims.core.vo.lookups.ChannelType value)
		{
			super.row.set(0, value, true);
		}
		public void setCellcolTypeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolContactValueReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolContactValueReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolContactValueOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolContactValue(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolContactValue()
		{
			return (String)super.row.get(1);
		}
		public void setcolContactValue(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolContactValueTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.CommChannelVo getValue()
		{
			return (ims.core.vo.CommChannelVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.CommChannelVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdContactsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdContactsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdContactsRow get(int index)
		{
			return new grdContactsRow(super.collection.get(index));
		}
		public grdContactsRow newRow()
		{
			return new grdContactsRow(super.collection.newRow());
		}
		public grdContactsRow newRow(boolean autoSelect)
		{
			return new grdContactsRow(super.collection.newRow(autoSelect));
		}
		public grdContactsRow newRowAt(int index)
		{
			return new grdContactsRow(super.collection.newRowAt(index));
		}
		public grdContactsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdContactsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdContactsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.CommChannelVoCollection getValues()
		{
			ims.core.vo.CommChannelVoCollection listOfValues = new ims.core.vo.CommChannelVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.CommChannelVo getValue()
		{
			return (ims.core.vo.CommChannelVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.CommChannelVo value)
		{
			super.grid.setValue(value);
		}
		public grdContactsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdContactsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdContactsRowCollection getRows()
		{
			return new grdContactsRowCollection(super.grid.getRows());
		}
		public grdContactsRow getRowByValue(ims.core.vo.CommChannelVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdContactsRow(row);
		}
		public void setcolTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox colTypeComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setcolContactValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolContactValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdMappingsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMappingsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolExtCodeTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolExtCodeTypeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolExtCodeTypeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolExtCodeType(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.lookups.TaxonomyType getcolExtCodeType()
		{
			return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
		}
		public void setcolExtCodeType(ims.core.vo.lookups.TaxonomyType value)
		{
			super.row.set(0, value, true);
		}
		public void setCellcolExtCodeTypeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolCodeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolCodeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolCodeOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolCode(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolCode()
		{
			return (String)super.row.get(1);
		}
		public void setcolCode(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolCodeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.TaxonomyMap getValue()
		{
			return (ims.core.vo.TaxonomyMap)super.row.getValue();
		}
		public void setValue(ims.core.vo.TaxonomyMap value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdMappingsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMappingsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMappingsRow get(int index)
		{
			return new grdMappingsRow(super.collection.get(index));
		}
		public grdMappingsRow newRow()
		{
			return new grdMappingsRow(super.collection.newRow());
		}
		public grdMappingsRow newRow(boolean autoSelect)
		{
			return new grdMappingsRow(super.collection.newRow(autoSelect));
		}
		public grdMappingsRow newRowAt(int index)
		{
			return new grdMappingsRow(super.collection.newRowAt(index));
		}
		public grdMappingsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMappingsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMappingsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.TaxonomyMap[] getValues()
		{
			ims.core.vo.TaxonomyMap[] listOfValues = new ims.core.vo.TaxonomyMap[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.TaxonomyMap getValue()
		{
			return (ims.core.vo.TaxonomyMap)super.grid.getValue();
		}
		public void setValue(ims.core.vo.TaxonomyMap value)
		{
			super.grid.setValue(value);
		}
		public grdMappingsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMappingsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMappingsRowCollection getRows()
		{
			return new grdMappingsRowCollection(super.grid.getRows());
		}
		public grdMappingsRow getRowByValue(ims.core.vo.TaxonomyMap value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMappingsRow(row);
		}
		public void setcolExtCodeTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolExtCodeTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox colExtCodeTypeComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setcolCodeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolCodeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}

	public static class GroupTreeFilterRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 184, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(0, anchoringHelper6.getX(), anchoringHelper6.getY(), anchoringHelper6.getWidth(), "View by Organisation/Location", startTabIndex.intValue() + 1005);
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 240, 592, 152, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(1, anchoringHelper7.getX(), anchoringHelper7.getY(), anchoringHelper7.getWidth(), "View by Member Of Staff", startTabIndex.intValue() + 1006);
		}
		public void setText(GroupTreeFilterEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupTreeFilterEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupTreeFilterEnumeration.None;
				case 0: return GroupTreeFilterEnumeration.rdoOrganisation;
				case 1: return GroupTreeFilterEnumeration.rdoMemberOfStaff;
			}
			return null;
		}
		public void setValue(GroupTreeFilterEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupTreeFilterEnumeration.None.id);
		}
		public boolean isEnabled(GroupTreeFilterEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupTreeFilterEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupTreeFilterEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupTreeFilterEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupTreeFilterEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupTreeFilterEnumeration None = new GroupTreeFilterEnumeration(-1);
		public static GroupTreeFilterEnumeration rdoOrganisation = new GroupTreeFilterEnumeration(0);
		public static GroupTreeFilterEnumeration rdoMemberOfStaff = new GroupTreeFilterEnumeration(1);
		private GroupTreeFilterEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupTreeFilterEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuContactContextmenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuContactContextmenuAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuContactContextmenu.add(contextMenus.contextMenuContactContextmenuAddItem);
		contextMenus.contextMenuContactContextmenuRemoveItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuContactContextmenu.add(contextMenus.contextMenuContactContextmenuRemoveItem);
		form.registerMenu(contextMenus.contextMenuContactContextmenu);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 3, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 5, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 6, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 7, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 8, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 9, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 10, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.contextMenuMosOrganisation = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuMosOrganisationADDItem = factory.createMenuItem(startControlID.intValue() + 12, "Add", true, false, new Integer(103128), true, false);
		contextMenus.contextMenuMosOrganisation.add(contextMenus.contextMenuMosOrganisationADDItem);
		contextMenus.contextMenuMosOrganisationEDITItem = factory.createMenuItem(startControlID.intValue() + 13, "Edit", true, false, new Integer(103128), true, false);
		contextMenus.contextMenuMosOrganisation.add(contextMenus.contextMenuMosOrganisationEDITItem);
		contextMenus.contextMenuMosOrganisationDEACTIVATEItem = factory.createMenuItem(startControlID.intValue() + 14, "Deactivate Member of Staff", true, false, new Integer(103130), true, true);
		contextMenus.contextMenuMosOrganisation.add(contextMenus.contextMenuMosOrganisationDEACTIVATEItem);
		contextMenus.contextMenuMosOrganisationSETORGANISATIONSItem = factory.createMenuItem(startControlID.intValue() + 15, "Set Locations", true, false, new Integer(103104), true, true);
		contextMenus.contextMenuMosOrganisation.add(contextMenus.contextMenuMosOrganisationSETORGANISATIONSItem);
		form.registerMenu(contextMenus.contextMenuMosOrganisation);


		// Panel Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 408, 32, 424, 568, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,"Details", new Integer(2), ""}));

		// Layer Clasess
		lyrLHSLayer m_lyrLHSLayer = (lyrLHSLayer)LayerFlyweightFactory.getInstance().createLayer(lyrLHSLayer.class, this, factory);
		super.addLayer(m_lyrLHSLayer);
		m_lyrLHSLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 424, 274, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "User Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 424, 226, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Signature Block:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 432, 464, 90, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "HCP Summary:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 424, 202, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Initials:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 424, 250, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "SDS Role ID:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 432, 386, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Contacts:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 424, 298, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Code Mappings:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 424, 106, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Title:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 424, 154, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Middle Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 424, 178, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Surname:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 424, 130, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "First Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 424, 58, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 424, 82, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "HCP Discipline:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 757, 605, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1028), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 678, 605, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 528, 272, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 528, 224, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 528, 200, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(5), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 528, 248, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 528, 152, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 528, 176, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 528, 128, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(40), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 528, 56, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTypeTemp);
		cmbTypeComboBox cmbType = (cmbTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTypeComboBox.class, m_cmbTypeTemp);
		super.addComboBox(cmbType);
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 528, 104, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbTitleTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTitleTemp);
		cmbTitleComboBox cmbTitle = (cmbTitleComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTitleComboBox.class, m_cmbTitleTemp);
		super.addComboBox(cmbTitle);
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 528, 80, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbHcpDiciplineDetailsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbHcpDiciplineDetailsTemp);
		cmbHcpDiciplineDetailsComboBox cmbHcpDiciplineDetails = (cmbHcpDiciplineDetailsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHcpDiciplineDetailsComboBox.class, m_cmbHcpDiciplineDetailsTemp);
		super.addComboBox(cmbHcpDiciplineDetails);

		// Grid Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 528, 386, 288, 69, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		Grid m_grdContactsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuContactContextmenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdContactsTemp);
		grdContactsGrid grdContacts = (grdContactsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdContactsGrid.class, m_grdContactsTemp);
		grdContacts.addComboBoxColumn("Contact Type", 0, 0, 170, false, true, false, false, false, -1);
		grdContacts.addStringColumn("Contact Value", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdContacts);
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 528, 298, 288, 80, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		Grid m_grdMappingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdMappingsTemp);
		grdMappingsGrid grdMappings = (grdMappingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMappingsGrid.class, m_grdMappingsTemp);
		grdMappings.addComboBoxColumn("External Code Type", 0, 0, 170, false, true, false, false, false, -1);
		grdMappings.addStringColumn("External Code", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdMappings);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 432, 428, 28, 28, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, this.getImages().Admin.HospitalEnabled24, this.getImages().Admin.HospitalDisabled24, "Assign Organisations/Locations", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 792, 80, 24, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Admin.StaffBlack, this.getImages().Admin.StaffBlack, "HCP Details", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupTreeFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE});
		super.addControl(tmpGroupTreeFilter);
		GroupTreeFilterRadioButton GroupTreeFilter = (GroupTreeFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupTreeFilterRadioButton.class, tmpGroupTreeFilter);
		GroupTreeFilter.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupTreeFilter);

		// Link Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 680, 8, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return To Work Queue", Boolean.FALSE, null}));

		// HTML Viewer Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 432, 480, 384, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlMosDetails()
	{
		return (Panel)super.getControl(0);
	}
	public lyrLHSLayer lyrLHS()
	{
		return (lyrLHSLayer)super.getLayer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(16);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(17);
	}
	public TextBox txtUserName()
	{
		return (TextBox)super.getControl(18);
	}
	public TextBox txtSignatureBlock()
	{
		return (TextBox)super.getControl(19);
	}
	public TextBox txtInitials()
	{
		return (TextBox)super.getControl(20);
	}
	public TextBox txtSDSRole()
	{
		return (TextBox)super.getControl(21);
	}
	public TextBox txtMiddleName()
	{
		return (TextBox)super.getControl(22);
	}
	public TextBox txtSurname()
	{
		return (TextBox)super.getControl(23);
	}
	public TextBox txtForeName()
	{
		return (TextBox)super.getControl(24);
	}
	public cmbTypeComboBox cmbType()
	{
		return (cmbTypeComboBox)super.getComboBox(0);
	}
	public cmbTitleComboBox cmbTitle()
	{
		return (cmbTitleComboBox)super.getComboBox(1);
	}
	public cmbHcpDiciplineDetailsComboBox cmbHcpDiciplineDetails()
	{
		return (cmbHcpDiciplineDetailsComboBox)super.getComboBox(2);
	}
	public grdContactsGrid grdContacts()
	{
		return (grdContactsGrid)super.getGrid(0);
	}
	public grdMappingsGrid grdMappings()
	{
		return (grdMappingsGrid)super.getGrid(1);
	}
	public ImageButton imbSetLocs()
	{
		return (ImageButton)super.getControl(30);
	}
	public ImageButton imbHCPDlg()
	{
		return (ImageButton)super.getControl(31);
	}
	public GroupTreeFilterRadioButton GroupTreeFilter()
	{
		return (GroupTreeFilterRadioButton)super.getRadioButton(0);
	}
	public Link lnkBack()
	{
		return (Link)super.getControl(33);
	}
	public HTMLViewer htmHcpDetails()
	{
		return (HTMLViewer)super.getControl(34);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Admin = new AdminForms();
			NTPF = new NTPFForms();
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				HcpAdmin = new LocalFormName(103101);
				MosOrganisationDlg = new LocalFormName(103148);
				MOSHospitalAccreditationDialog = new LocalFormName(103191);
			}
			public final FormName HcpAdmin;
			public final FormName MosOrganisationDlg;
			public final FormName MOSHospitalAccreditationDialog;
		}
		public final class NTPFForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NTPFForms()
			{
				WorkQueue = new LocalFormName(110109);
				WorkQueue2 = new LocalFormName(110131);
			}
			public final FormName WorkQueue;
			public final FormName WorkQueue2;
		}

		public AdminForms Admin;
		public NTPFForms NTPF;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				StaffRed = new ImageHelper(103125, "Images/Admin/user_red.png", new Integer(16), new Integer(16));
				Organisation = new ImageHelper(103103, "Images/Admin/organisation.png", new Integer(16), new Integer(16));
				Location = new ImageHelper(103104, "Images/Admin/location.png", new Integer(16), new Integer(16));
				LocationSite = new ImageHelper(103100, "Images/Admin/location_site.png", new Integer(16), new Integer(16));
				StaffBlack = new ImageHelper(103128, "Images/Admin/user_black.png", new Integer(16), new Integer(16));
				StaffActivate = new ImageHelper(103132, "Images/Admin/StaffActivate.gif", new Integer(16), new Integer(16));
				StaffRemove = new ImageHelper(103130, "Images/Admin/user_gray_remove.png", new Integer(16), new Integer(16));
				HospitalDisabled24 = new ImageHelper(103355, "Images/Admin/hospital_disabled_24.png", new Integer(24), new Integer(24));
				HospitalEnabled24 = new ImageHelper(103354, "Images/Admin/hospital_enabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image StaffRed;
			public final ims.framework.utils.Image Organisation;
			public final ims.framework.utils.Image Location;
			public final ims.framework.utils.Image LocationSite;
			public final ims.framework.utils.Image StaffBlack;
			public final ims.framework.utils.Image StaffActivate;
			public final ims.framework.utils.Image StaffRemove;
			public final ims.framework.utils.Image HospitalDisabled24;
			public final ims.framework.utils.Image HospitalEnabled24;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				RecycleBinDisabled = new ImageHelper(102185, "Images/Core/Recycle BinDis.gif", new Integer(16), new Integer(16));
				RecycleBinEnabled = new ImageHelper(102184, "Images/Core/Recycle Bin.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image RecycleBinDisabled;
			public final ims.framework.utils.Image RecycleBinEnabled;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_bAdding = new ims.framework.ContextVariable("bAdding", prefix + "_lv_Admin.MosAdmin.__internal_x_context__bAdding_" + componentIdentifier + "");
			cxl_ShowLinkBack = new ims.framework.ContextVariable("ShowLinkBack", prefix + "_lv_Admin.MosAdmin.__internal_x_context__ShowLinkBack_" + componentIdentifier + "");
			cxl_PreviousForm = new ims.framework.ContextVariable("PreviousForm", prefix + "_lv_Admin.MosAdmin.__internal_x_context__PreviousForm_" + componentIdentifier + "");
		}
		
		public boolean getbAddingIsNotNull()
		{
			return !cxl_bAdding.getValueIsNull(context);
		}
		public Boolean getbAdding()
		{
			return (Boolean)cxl_bAdding.getValue(context);
		}
		public void setbAdding(Boolean value)
		{
			cxl_bAdding.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bAdding = null;
		public boolean getShowLinkBackIsNotNull()
		{
			return !cxl_ShowLinkBack.getValueIsNull(context);
		}
		public Boolean getShowLinkBack()
		{
			return (Boolean)cxl_ShowLinkBack.getValue(context);
		}
		public void setShowLinkBack(Boolean value)
		{
			cxl_ShowLinkBack.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ShowLinkBack = null;
		public boolean getPreviousFormIsNotNull()
		{
			return !cxl_PreviousForm.getValueIsNull(context);
		}
		public ims.framework.FormName getPreviousForm()
		{
			return (ims.framework.FormName)cxl_PreviousForm.getValue(context);
		}
		public void setPreviousForm(ims.framework.FormName value)
		{
			cxl_PreviousForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousForm = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class ContactContextmenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Remove = 2;
		}
		public void disableAllContactContextmenuMenuItems()
		{
			this.contextMenuContactContextmenuAddItem.setEnabled(false);
			this.contextMenuContactContextmenuRemoveItem.setEnabled(false);
		}
		public void hideAllContactContextmenuMenuItems()
		{
			this.contextMenuContactContextmenuAddItem.setVisible(false);
			this.contextMenuContactContextmenuRemoveItem.setVisible(false);
		}
		private Menu contextMenuContactContextmenu;
		public MenuItem getContactContextmenuAddItem()
		{
			return this.contextMenuContactContextmenuAddItem;
		}
		private MenuItem contextMenuContactContextmenuAddItem;
		public MenuItem getContactContextmenuRemoveItem()
		{
			return this.contextMenuContactContextmenuRemoveItem;
		}
		private MenuItem contextMenuContactContextmenuRemoveItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 3;
			public static final int Update = 4;
			public static final int Remove = 5;
			public static final int View = 6;
			public static final int MoveUp = 7;
			public static final int MoveDown = 8;
			public static final int Replace = 9;
			public static final int Confirm = 10;
			public static final int EDIT_VIEW_ICP_ACTIONS = 11;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class MosOrganisation implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 12;
			public static final int EDIT = 13;
			public static final int DEACTIVATE = 14;
			public static final int SETORGANISATIONS = 15;
		}
		public void disableAllMosOrganisationMenuItems()
		{
			this.contextMenuMosOrganisationADDItem.setEnabled(false);
			this.contextMenuMosOrganisationEDITItem.setEnabled(false);
			this.contextMenuMosOrganisationDEACTIVATEItem.setEnabled(false);
			this.contextMenuMosOrganisationSETORGANISATIONSItem.setEnabled(false);
		}
		public void hideAllMosOrganisationMenuItems()
		{
			this.contextMenuMosOrganisationADDItem.setVisible(false);
			this.contextMenuMosOrganisationEDITItem.setVisible(false);
			this.contextMenuMosOrganisationDEACTIVATEItem.setVisible(false);
			this.contextMenuMosOrganisationSETORGANISATIONSItem.setVisible(false);
		}
		private Menu contextMenuMosOrganisation;
		public MenuItem getMosOrganisationADDItem()
		{
			return this.contextMenuMosOrganisationADDItem;
		}
		private MenuItem contextMenuMosOrganisationADDItem;
		public MenuItem getMosOrganisationEDITItem()
		{
			return this.contextMenuMosOrganisationEDITItem;
		}
		private MenuItem contextMenuMosOrganisationEDITItem;
		public MenuItem getMosOrganisationDEACTIVATEItem()
		{
			return this.contextMenuMosOrganisationDEACTIVATEItem;
		}
		private MenuItem contextMenuMosOrganisationDEACTIVATEItem;
		public MenuItem getMosOrganisationSETORGANISATIONSItem()
		{
			return this.contextMenuMosOrganisationSETORGANISATIONSItem;
		}
		private MenuItem contextMenuMosOrganisationSETORGANISATIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[120];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedMos", "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedMos", "BO-1006100006-INITIALS", "Initials");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedMos", "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedMos", "BO-1006100006-STAFFTYPE", "StaffType");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedMos", "BO-1006100006-ISACTIVE", "IsActive");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedMos", "BO-1006100006-SDSROLEID", "SdsRoleId");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Admin.SelectedMos", "BO-1006100006-CANREFERPATIENT", "CanReferPatient");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Admin.NursingHcp", "BO-1006100000-ID", "ID_Hcp");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Admin.NursingHcp", "BO-1006100000-HCPTYPE", "HcpType");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Admin.NursingHcp", "BO-1006100000-ISACTIVE", "IsActive");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Admin.NursingHcp", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Admin.NursingHcp", "BO-1006100000-ISALOCALCONSULTANT", "IsALocalConsultant");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Admin.NursingHcp", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Admin.NursingHcp", "BO-1006100007-NURSETYPE", "NurseType");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Admin.NursingHcp", "BO-1006100007-SPECIALTY", "Specialty");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100000-ID", "ID_Hcp");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100000-HCPTYPE", "HcpType");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100000-ISACTIVE", "IsActive");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100000-ISALOCALCONSULTANT", "IsALocalConsultant");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100004-MEDICTYPE", "MedicType");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100004-GRADE", "Grade");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100004-SPECIALTY", "Specialty");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100004-SECONDSPECIALTY", "SecondSpecialty");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100004-THIRDSPECIALTY", "ThirdSpecialty");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Admin.MedicHcp", "BO-1006100004-INPATIENTHANDLING", "InpatientHandling");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Admin.TherapistHcp", "BO-1006100000-ID", "ID_Hcp");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Admin.TherapistHcp", "BO-1006100000-HCPTYPE", "HcpType");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Admin.TherapistHcp", "BO-1006100000-ISACTIVE", "IsActive");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Admin.TherapistHcp", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Admin.TherapistHcp", "BO-1006100000-ISALOCALCONSULTANT", "IsALocalConsultant");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Admin.TherapistHcp", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Admin.TherapistHcp", "BO-1006100005-THERAPISTTYPE", "TherapistType");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Admin.TherapistHcp", "BO-1006100005-SPECIALTY", "Specialty");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Hcp", "BO-1006100000-ID", "ID_Hcp");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Hcp", "BO-1006100000-HCPTYPE", "HcpType");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Hcp", "BO-1006100000-ISACTIVE", "IsActive");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Hcp", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Hcp", "BO-1006100000-ISALOCALCONSULTANT", "IsALocalConsultant");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Hcp", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_MosFullName", "BO-1002100001-ID", "ID_PersonName");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_MosFullName", "BO-1002100001-NAMETYPE", "NameType");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_MosFullName", "BO-1002100001-SURNAME", "Surname");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_MosFullName", "BO-1002100001-FORENAME", "Forename");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_MosFullName", "BO-1002100001-MIDDLENAME", "MiddleName");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_MosFullName", "BO-1002100001-TITLE", "Title");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_MosFullName", "BO-1002100001-UPPERSURNAME", "UpperSurname");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_MosFullName", "BO-1002100001-UPPERFORENAME", "UpperForename");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
