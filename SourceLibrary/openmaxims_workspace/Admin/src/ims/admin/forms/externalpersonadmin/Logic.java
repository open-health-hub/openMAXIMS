//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.45 build 2369.23291)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.externalpersonadmin;

import ims.core.vo.CommChannelVo;
import ims.core.vo.CommChannelVoCollection;
import ims.core.vo.ExternalPersonShortVo;
import ims.core.vo.ExternalPersonVo;
import ims.core.vo.ExternalPersonVoCollection;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonName;
import ims.core.vo.lookups.NameType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{		
		open();
	}
	
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	protected void onChkActiveValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		searchPerson();
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
		form.cmbTitle().setFocus();
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		if (sender.equals(form.grdDetails()))
		{
			if (menuItemID == GenForm.ContextMenus.LIP.New)
				newInstance();
			else if (menuItemID == GenForm.ContextMenus.LIP.Update)
				updateInstance();
		}
		else if (sender.equals(form.grdContacts()))
		{
			if (menuItemID == GenForm.ContextMenus.GenericGrid.Add)
				newContactInstance();
			else if (menuItemID == GenForm.ContextMenus.GenericGrid.Remove)
				removeContactInstance();
		}
		
	}

	/**
	 * create a new Contact row 
	 * @return      void
	 */
	public void newContactInstance()
	{
		form.grdContacts().getRows().newRow();
	}
	
	/**
	 * remove a Contact row 
	 * @return      void
	 */
	public void removeContactInstance()
	{
		form.grdContacts().getRows().remove(form.grdContacts().getSelectedRowIndex());
	}
	public void clearInstanceControls() 
	{
		super.clearScreen();
		form.txtAddressLine1().setValue("");
		form.txtAddressLine2().setValue("");
		form.txtAddressLine3().setValue("");
		form.txtAddressLine4().setValue("");
		form.txtAddressLine5().setValue("");
		form.txtPostCode().setValue("");
		form.cmbCounty().setValue(null);
		form.grdContacts().getRows().clear();
		form.chkIsActive().setValue(false);
	}

	public void newInstance() throws PresentationLogicException 
	{
		if (allowNew())
		{
			// initalise the screen for a new record
			form.getLocalContext().setSelectedRecord(new ExternalPersonVo());
			form.grdDetails().setValue(null);
			clearInstanceControls();
			form.chkIsActive().setValue(true);
			
			//set the form mode
			form.setMode(FormMode.EDIT);
			//set any control status specific this form
		}	

		
	}
	public String[] validateUIRules()
	{
		java.util.ArrayList listOfErrors = new java.util.ArrayList();
		
		if(form.txtSurname().getValue() == null)
			listOfErrors.add("Surname is mandatory");
		
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			return null;
		}
		
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);

		return result;
	}

	public boolean save() throws PresentationLogicException 
	{
		ExternalPersonVo voExtPer = populateInstanceData();
						
		//validate Vo
		String[] arrErrors =  voExtPer.validate(validateUIRules());	
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedRecord(domain.saveExternalPerson(voExtPer));
			if (voExtPer.getID_ExternalPerson() == null && voExtPer.getNameIsNotNull())
			{
				form.txtSName().setValue(voExtPer.getName().getSurname());
				searchPerson();
			}
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}
	/**
	 * populates the data to be stored from the screen into specified FamilyHistoryVo 
	 * @return      void
	 */
	public ExternalPersonVo populateInstanceData()	
	{
		ExternalPersonVo voExtPer = form.getLocalContext().getSelectedRecord();
		
		if(null == voExtPer)
			voExtPer = new ExternalPersonVo();

		//name
		PersonName voPerName = new PersonName();
		voPerName.setForename(form.txtForeName().getValue());
		voPerName.setMiddleName(form.txtMiddleName().getValue());
		voPerName.setNameType(NameType.CURRENT);
		voPerName.setSurname(form.txtSurname().getValue());
		voPerName.setTitle(form.cmbTitle().getValue());
		voPerName.setUppers();
		voExtPer.setName(voPerName);
		voExtPer.setIsActive(new Boolean(form.chkIsActive().getValue()));
		
		
		//address
		PersonAddress voPerAddress = voExtPer.getAddress();		
		if (null == voPerAddress)
			voPerAddress = new PersonAddress();
		
		voPerAddress.setLine1(form.txtAddressLine1().getValue());
		voPerAddress.setLine2(form.txtAddressLine2().getValue());
		voPerAddress.setLine3(form.txtAddressLine3().getValue());
		voPerAddress.setLine4(form.txtAddressLine4().getValue());
		voPerAddress.setLine5(form.txtAddressLine5().getValue());
		voPerAddress.setCounty(form.cmbCounty().getValue());
		voPerAddress.setPostCode(form.txtPostCode().getValue());
		voExtPer.setAddress(voPerAddress);
				
		//Communication
		CommChannelVoCollection commVoColl = new CommChannelVoCollection();
		CommChannelVo voComCh = null;
		
		for(int i = 0; i<form.grdContacts().getRows().size();i++)
		{
			if (null == form.grdContacts().getRows().get(i).getValue())
			{
				//new comm chanel
				voComCh = new CommChannelVo();
			}
			else
				voComCh = form.grdContacts().getRows().get(i).getValue();
			
			voComCh.setChannelType(form.grdContacts().getRows().get(i).getcolType());
			voComCh.setCommValue(form.grdContacts().getRows().get(i).getcolContactValue());
			commVoColl.add(voComCh);

		}		
		
		if (commVoColl.size() == 0)
			voExtPer.setCommChannels(null);
		else
			voExtPer.setCommChannels(commVoColl);
		
		voExtPer.setCodeMappings(null); // no needed for External Person		
		
		return voExtPer;
	}

	public void updateControlsState() 
	{
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().hideAllLIPMenuItems();
		
		//TODO: will be set as default to New. remove the "New " when this is complete.
		form.getContextMenus().getLIPNewItem().setText("New");

		if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().getLIPNewItem().setVisible(false);
			form.getContextMenus().getLIPUpdateItem().setVisible(false);
			form.btnUpdate().setVisible(false);		
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			
			if (form.grdContacts().getSelectedRowIndex() >=0)
			{				
				form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
				form.getContextMenus().getGenericGridRemoveItem().setVisible(true);
			}
			
			form.getContextMenus().getGenericGridAddItem().setVisible(true);
			
		}
		else
		{
			if (form.grdDetails().getSelectedRowIndex()>=0)
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.getContextMenus().getLIPUpdateItem().setVisible(true);
				if (form.grdDetails().getSelectedRowIndex()>=0)
					form.btnUpdate().setVisible(true);
				else
					form.btnUpdate().setVisible(false);
			}
			else
			{
				form.getContextMenus().getLIPNewItem().setVisible(true);
				form.btnUpdate().setVisible(false);
			}			
		}		
	}

	public void updateInstance() 
	{
		if (allowUpdate())
		{
			form.setMode(FormMode.EDIT);
		}
	}

	/**
	 * called to populate the screen with List and Instance Data in the occurance of opening a form,canceling a new or update and staleobject exception.
	 * @return      void
	 */	
	public void open() throws PresentationLogicException	
	{
		//set selection back
		if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			//need to get timestamp from record retrieved from List call.
			GenForm.grdDetailsRow row = form.grdDetails().getRowByValue(form.getLocalContext().getSelectedRecord());			
			if (row != null && row.getValue() != null)
			{			
				row.setValue(domain.getExternalPerson(form.getLocalContext().getSelectedRecord()));
				form.getLocalContext().setSelectedRecord(row.getValue());
				form.grdDetails().setValue(form.getLocalContext().getSelectedRecord());
				populateInstanceControl(form.grdDetails().getValue());
			}
			else
				clearInstanceControls();
			updateControlsState();			
		}
		else
		{
			form.txtSName().setFocus();
			form.chkActive().setValue(true); //default
		}
			
		form.setMode(FormMode.VIEW);
	}	
	
	/**
	 * displays the Family History record specified by FamilyHistoryVo
	 * @param voFamHist
	 */
	public void populateInstanceControl(ExternalPersonVo extPerVo)
	{
		clearInstanceControls();
		
		if (null == extPerVo)
			return;
		
		populateScreenFromData(extPerVo.getName());
		
		//active
		form.chkIsActive().setValue(extPerVo.getIsActiveIsNotNull()?extPerVo.getIsActive().booleanValue():false);
		
		//address
		if (extPerVo.getAddressIsNotNull())
		{
			form.txtAddressLine1().setValue(extPerVo.getAddress().getLine1());
			form.txtAddressLine2().setValue(extPerVo.getAddress().getLine2());
			form.txtAddressLine3().setValue(extPerVo.getAddress().getLine3());
			form.txtAddressLine4().setValue(extPerVo.getAddress().getLine4());
			form.txtAddressLine5().setValue(extPerVo.getAddress().getLine5());
			form.txtPostCode().setValue(extPerVo.getAddress().getPostCode());
			form.cmbCounty().setValue(extPerVo.getAddress().getCounty());
		}
		
		//contacts
		form.grdContacts().getRows().clear();
		if (extPerVo.getCommChannelsIsNotNull())
		{
			if (extPerVo.getCommChannels().size() > 0)
			{
				for (int i = 0; i < extPerVo.getCommChannels().size(); i++)
				{
					GenForm.grdContactsRow row = form.grdContacts().getRows().newRow();
					row.setValue(extPerVo.getCommChannels().get(i));
					row.setcolContactValue(extPerVo.getCommChannels().get(i).getCommValue());
					row.setcolType(extPerVo.getCommChannels().get(i).getChannelType());
				}
			}
		}
		
			
	}

	protected void onGrdDetailsSelectionChanged() throws PresentationLogicException 
	{
		//Display Panel and detail
		form.getLocalContext().setSelectedRecord(form.grdDetails().getValue());
		populateInstanceControl(form.grdDetails().getValue());
		updateControlsState();
		
	}

	protected void onGrdContactsSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();	
	}

	@Override
	protected void onBtnClearClick() throws PresentationLogicException 
	{
		clearSearch();
	}

	private void clearSearch() 
	{
		form.txtSName().setValue("");
		clearInstanceControls();
		form.grdDetails().getRows().clear();
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().hideAllLIPMenuItems();
		updateControlsState();
	}

	@Override
	protected void onBtnSearchClick() throws PresentationLogicException 
	{
		searchPerson();
	}

	private void searchPerson() 
	{
		clearInstanceControls();
		form.getContextMenus().hideAllGenericGridMenuItems();
		form.getContextMenus().hideAllLIPMenuItems();
		form.getContextMenus().getLIPNewItem().setVisible(true);

		form.btnUpdate().setVisible(false);
		form.grdDetails().getRows().clear();
		
		ExternalPersonShortVo voExtPer = new ExternalPersonShortVo();
		PersonName voPerName = new PersonName();
		voPerName.setSurname(form.txtSName().getValue());
		voExtPer.setName(voPerName);
		voExtPer.setIsActive(new Boolean(form.chkActive().getValue()));
		ExternalPersonVoCollection voExtPerCol = domain.listExternalPerson(voExtPer);
		
		if ((null != voExtPerCol) && voExtPerCol.size() > 0)
		{
			for (int i = 0; i < voExtPerCol.size(); i++)
			{
				GenForm.grdDetailsRow row = form.grdDetails().getRows().newRow();
				row.setColImage(form.getImages().Core.User);
				row.setName(voExtPerCol.get(i).getName().toShortForm());
				row.setValue(voExtPerCol.get(i));
				if (!voExtPerCol.get(i).getIsActive().booleanValue())
					row.setBackColor(Color.Beige);
			}
		}
		else
			engine.showMessage("No External Person found matching this search criteria.");
	}
	
}
