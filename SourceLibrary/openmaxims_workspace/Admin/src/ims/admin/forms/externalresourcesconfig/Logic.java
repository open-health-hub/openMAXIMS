//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4738.16294)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.admin.forms.externalresourcesconfig;

import ims.admin.forms.externalresourcesconfig.GenForm.grdExternalResourceRow;
import ims.core.vo.ExternalResourceVo;
import ims.core.vo.ExternalResourceVoCollection;
import ims.core.vo.PersonAddress;
import ims.core.vo.lookups.ExternalResourceType;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	private void initialize()
	{
		form.cmbResourceType().removeRow(ExternalResourceType.ERT_HOMEADDRESS);
		form.cmbResourceType().removeRow(ExternalResourceType.ERT_OTHER);
		
		form.cmbExternalResourceTypeDetails().removeRow(ExternalResourceType.ERT_HOMEADDRESS);
		form.cmbExternalResourceTypeDetails().removeRow(ExternalResourceType.ERT_OTHER);
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
	
		form.getLocalContext().setSelectedExternalResource(form.grdExternalResource().getSelectedRow() != null ? form.grdExternalResource().getSelectedRow().getValue():null);
		form.setMode(FormMode.VIEW);
		grdExternalResourceSelectionChanged(); //wdev-16669
		
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save())
		{
			form.setMode(FormMode.VIEW);
			populateGidAfterSave(form.getLocalContext().getSelectedExternalResource());
			updateControlsState();		//wdev-16669
		}
	}
	private boolean save()
	{
		String[] arrErrors = validateUIRules();
		
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		ExternalResourceVo record = populateDataFromScreen(form.getLocalContext().getSelectedExternalResource());
		String[] arrErrors1 = record.validate();
		
		if (arrErrors1 != null)
		{
			engine.showErrors(arrErrors1);
			return false;
		}
		try
		{
			form.getLocalContext().setSelectedExternalResource(domain.saveExternalResource(record));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}
	public String[] validateUIRules()
	{
		java.util.ArrayList listOfErrors = new java.util.ArrayList();

		if( form.cmbExternalResourceTypeDetails().getValue() == null)
		{
			listOfErrors.add("External Resource Type is mandatory.");
		}
		else
		{
			if( form.cmbExternalResourceTypeDetails().getValue().equals(ExternalResourceType.ERT_HCP))
			{
				if( form.cmbHcpTypeDetails().getValue() == null)
				{
					listOfErrors.add("HCP Type is mandatory.");
				}
			}
		}
		if( form.txtNameDetails().getValue() == null || form.txtNameDetails().getValue() == "")
		{
			listOfErrors.add("Name is mandatory.");
		}
		if( form.txtAddress1().getValue() == null)
		{
			listOfErrors.add("Address is mandatory.");
		}
		
		if( form.cmbStatusDetails().getValue() == null)
		{
			listOfErrors.add("Status is mandatory.");
		}
		
		//---------------
		
		int errorCount = listOfErrors.size();
		if (errorCount == 0)
		{
			return null;
		}
		String[] result = new String[errorCount];
		listOfErrors.toArray(result);

		return result;
	}
	private ExternalResourceVo populateDataFromScreen(ExternalResourceVo record)
	{
		if( record == null )
			record = new ExternalResourceVo();
		
		record.setExternalResourceType(form.cmbExternalResourceTypeDetails().getValue());
		record.setResourcename(form.txtNameDetails().getValue());
		
		PersonAddress tempVo = new PersonAddress();
		tempVo.setLine1(form.txtAddress1().getValue());
		tempVo.setLine2(form.txtAddress2().getValue());
		tempVo.setLine3(form.txtAddress3().getValue());
		tempVo.setCounty(form.cmbCounty().getValue());
		tempVo.setPhone(form.txtPhone().getValue());
		record.setResourceAddress(tempVo);
		record.setHCPType(form.cmbHcpTypeDetails().getValue());
		record.setResourceStatus(form.cmbStatusDetails().getValue());
		
		return record;
		
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		
		editinstance();
	}
	private void editinstance()
	{
		form.getLocalContext().setSelectedExternalResource(form.grdExternalResource().getValue());
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newinstance();
	}
	private void newinstance()
	{
		clearDetailsFields();
		form.getLocalContext().setSelectedExternalResource(null);
		form.setMode(FormMode.EDIT);
	}
	
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}
	
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedExternalResource(null);
		search();
		if( form.grdExternalResource().getRows().size() == 0)
		{
			engine.showMessage("No records found !");
		}
	}
	
	private void search()
	{
		clearGridExternalResource();
		clearDetailsFields();
		ExternalResourceVoCollection externalVoCol = domain.getExternalResources(form.cmbResourceType().getValue(), form.txtName().getValue(), form.cmbHCPType().getValue(), form.cmbStatus().getValue());
		
		if( externalVoCol == null || externalVoCol.size() == 0)
		{
			
			return;
		}
		
		populateExternalResourceGrid(externalVoCol);
		if( form.getLocalContext().getSelectedExternalResourceIsNotNull())
		{
			form.grdExternalResource().setValue(form.getLocalContext().getSelectedExternalResource());
			grdExternalResourceSelectionChanged();
		}
		updateControlsState();
	}
	private void populateExternalResourceGrid(ExternalResourceVoCollection externalVoCol)
	{
		if( externalVoCol == null )
			return;
		
		for( int i = 0; i < externalVoCol.size();i++ )
		{
			ExternalResourceVo tempVo = externalVoCol.get(i);
			if( tempVo != null )
			{
				grdExternalResourceRow rowextres = form.grdExternalResource().getRows().newRow();
				rowextres.setColumnResourceType(tempVo.getExternalResourceTypeIsNotNull() ? tempVo.getExternalResourceType().getText():"");
				rowextres.setColumnHCPType(tempVo.getHCPTypeIsNotNull() ? tempVo.getHCPType().getText():null);
				rowextres.setColumnName(tempVo.getResourcename());
				rowextres.setColumnAddress(tempVo.getResourceAddress().getLine1()+ " " + (tempVo.getResourceAddress().getLine2IsNotNull() ? tempVo.getResourceAddress().getLine2():"")  + " " + (tempVo.getResourceAddress().getLine3IsNotNull() ? tempVo.getResourceAddress().getLine3():""));
				rowextres.setColumnCounty(tempVo.getResourceAddress().getCountyIsNotNull() ? tempVo.getResourceAddress().getCounty().getText():"");
				rowextres.setColumnWorkPhone(tempVo.getResourceAddress().getPhoneIsNotNull() ? tempVo.getResourceAddress().getPhone():"");
				rowextres.setColumnStatus(tempVo.getResourceStatusIsNotNull() ? tempVo.getResourceStatus().getText():"");
				rowextres.setValue(tempVo);
				
			}
		}
	}
	private void clearSearchCriteriaFields()
	{
		form.cmbResourceType().setValue(null);
		form.txtName().setValue(null);
		form.cmbHCPType().setValue(null);
		form.cmbStatus().setValue(null);
	}
	private void clearGridExternalResource()
	{
		form.grdExternalResource().getRows().clear();
	}
	
	private void clearDetailsFields()
	{
		
		form.cmbExternalResourceTypeDetails().setValue(null);
		form.txtNameDetails().setValue(null);
		form.txtAddress1().setValue(null);
		form.txtAddress2().setValue(null);
		form.txtAddress3().setValue(null);
		form.cmbCounty().setValue(null);
		form.cmbHcpTypeDetails().setValue(null);
		form.txtPhone().setValue(null);
		form.cmbStatusDetails().setValue(null);
	}
	private void clearScreen()
	{
		clearSearchCriteriaFields();
		clearGridExternalResource();
		clearDetailsFields();
	}

	
	protected void onGrdExternalResourceSelectionChanged() throws PresentationLogicException
	{
		grdExternalResourceSelectionChanged();
	}
	private void grdExternalResourceSelectionChanged()
	{
		clearDetailsFields();
		if( form.grdExternalResource().getSelectedRow() != null)
		{
			ExternalResourceVo tempVo  = domain.getExternalResourceById(form.grdExternalResource().getSelectedRow().getValue());
			populateDetailFields(tempVo);
		}
		updateControlsState();
	}
	private void populateDetailFields(ExternalResourceVo tempVo)
	{
		if( tempVo == null)
			return;
		
		form.cmbExternalResourceTypeDetails().setValue(tempVo.getExternalResourceType());
		form.txtNameDetails().setValue(tempVo.getResourcename());
		form.txtAddress1().setValue(tempVo.getResourceAddress().getLine1());
		form.txtAddress2().setValue(tempVo.getResourceAddress().getLine2());
		form.txtAddress3().setValue(tempVo.getResourceAddress().getLine3());
		form.cmbCounty().setValue(tempVo.getResourceAddress().getCounty());
		form.cmbHcpTypeDetails().setValue(tempVo.getHCPType());
		form.txtPhone().setValue(tempVo.getResourceAddress().getPhone());
		form.cmbStatusDetails().setValue(tempVo.getResourceStatus());
		cmbExternalResourceTypeDetailsValueChanged();
		
		
	}
	private void updateControlsState()
	{
		form.btnEdit().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdExternalResource().getSelectedRow() != null);
		form.cmbHcpTypeDetails().setRequired(true);
		if( form.cmbExternalResourceTypeDetails().getValue() != null && form.cmbExternalResourceTypeDetails().getValue().equals(ExternalResourceType.ERT_HCP))
		{
			if( form.getMode().equals(FormMode.EDIT))
			{
				form.cmbHcpTypeDetails().setEnabled(true);
				form.cmbHcpTypeDetails().setRequired(true);
			}
						
		}
		else
		{
			if( form.getMode().equals(FormMode.EDIT))
			{
				form.cmbHcpTypeDetails().setEnabled(false);
			}
		}
		
		if( form.cmbResourceType().getValue() != null && form.cmbResourceType().getValue().equals(ExternalResourceType.ERT_HCP))
		{
			if( form.getMode().equals(FormMode.VIEW))
			{
				form.cmbHCPType().setEnabled(true);
				
			}
						
		}
		else
		{
			if( form.getMode().equals(FormMode.VIEW))
			{
				form.cmbHCPType().setEnabled(false);
			}
		}
		
		updateContextMenus();
	}
	private void updateContextMenus()
	{
		form.getContextMenus().Admin.hideAllExternalResourceMenuItems();
		form.getContextMenus().Admin.getExternalResourceNewItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().Admin.getExternalResourceEditItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdExternalResource().getSelectedRow() != null);
	}

	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.AdminNamespace.ExternalResource.New:
				newinstance();
			break;
			case GenForm.ContextMenus.AdminNamespace.ExternalResource.Edit:
				editinstance();
			break;
		}
		
	}

	
	protected void onCmbExternalResourceTypeDetailsValueChanged() throws PresentationLogicException
	{
	
		cmbExternalResourceTypeDetailsValueChanged();
		
		
	}
	private void cmbExternalResourceTypeDetailsValueChanged()
	{
		if( form.cmbExternalResourceTypeDetails().getValue() == null || !form.cmbExternalResourceTypeDetails().getValue().equals(ExternalResourceType.ERT_HCP))
		{
			form.cmbHcpTypeDetails().setValue(null);
		}

		updateControlsState();
	}

	
	protected void onCmbResourceTypeValueChanged() throws PresentationLogicException
	{
		cmbResourceTypeValueChanged();
		
	}
	private void cmbResourceTypeValueChanged()
	{
		if( form.cmbResourceType().getValue() == null || !form.cmbResourceType().getValue().equals(ExternalResourceType.ERT_HCP))
		{
			form.cmbHCPType().setValue(null);
		}

		updateControlsState();
	}
	//wdev-wdev-16669
	private void populateGidAfterSave(ExternalResourceVo record)
	{
		if( record == null )
			return;
		clearGridExternalResource();
		
		grdExternalResourceRow rowextres = form.grdExternalResource().getRows().newRow(true);
		rowextres.setColumnResourceType(record.getExternalResourceTypeIsNotNull() ? record.getExternalResourceType().getText():"");
		rowextres.setColumnHCPType(record.getHCPTypeIsNotNull() ? record.getHCPType().getText():null);
		rowextres.setColumnName(record.getResourcename());
		rowextres.setColumnAddress(record.getResourceAddress().getLine1()+ " " + (record.getResourceAddress().getLine2IsNotNull() ? record.getResourceAddress().getLine2():"")  + " " + (record.getResourceAddress().getLine3IsNotNull() ? record.getResourceAddress().getLine3():""));
		rowextres.setColumnCounty(record.getResourceAddress().getCountyIsNotNull() ? record.getResourceAddress().getCounty().getText():"");
		rowextres.setColumnWorkPhone(record.getResourceAddress().getPhoneIsNotNull() ? record.getResourceAddress().getPhone():"");
		rowextres.setColumnStatus(record.getResourceStatusIsNotNull() ? record.getResourceStatus().getText():"");
		rowextres.setValue(record);
		
		
		
		
		
	}
	//---------------

}
