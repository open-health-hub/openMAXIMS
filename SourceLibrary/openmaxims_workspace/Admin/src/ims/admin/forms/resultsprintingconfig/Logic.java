//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4121.17238)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.admin.forms.resultsprintingconfig;

import ims.admin.forms.resultsprintingconfig.GenForm.grdDetailsRow;
import ims.admin.vo.PrintLocationConfigVo;
import ims.admin.vo.PrintLocationConfigVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void initialise()
	{
		form.getLocalContext().setHospitals(domain.listActiveHospitalsLite());
	}

	private void loadHospitals()
	{
		form.grdDetails().getRows().clear();

		LocationLiteVoCollection voCollHospitals = form.getLocalContext().getHospitals();
		if (voCollHospitals != null)
		{
			voCollHospitals.sort();
			for (LocationLiteVo voHospital : voCollHospitals)
			{
				grdDetailsRow row = form.grdDetails().getRows().newRow();
				row.setcolSite(voHospital);
			}
		}
	}

	private void open()
	{
		loadHospitals();

		boolean isAnotherSortRequired = false;

		PrintLocationConfigVoCollection voCollPrintLocationConf = domain.listPrintLocationConfig();
		if (voCollPrintLocationConf != null)
		{
			for (PrintLocationConfigVo voPrintLocConf : voCollPrintLocationConf)
			{
				// relevant site in hospitals found
				boolean isActiveHospitalFound = false;
				for (int i = 0; i < form.grdDetails().getRows().size(); i++)
				{
					// if we dont find a row maybe the hospital was deactivated
					// so we need to add anyway
					grdDetailsRow row = form.grdDetails().getRows().get(i);
					if (row.getcolSite() != null && voPrintLocConf.getSiteIsNotNull())
					{
						if (row.getcolSite().equals(voPrintLocConf.getSite()))
						{
							row.setcolPrintToOrderingLocation(voPrintLocConf.getPrintToOrderingLocation());
							row.setcolPrintCentral(voPrintLocConf.getPrintCentral());
							row.setValue(voPrintLocConf);
							isActiveHospitalFound = true;
						}
					}
				}

				if (!isActiveHospitalFound)
				{
					//only add in an inactive row if there are values set for it
					if(voPrintLocConf.getPrintCentralIsNotNull() || voPrintLocConf.getPrintToOrderingLocationIsNotNull())
					{
						isAnotherSortRequired = true;
						grdDetailsRow row = form.grdDetails().getRows().newRow();
					
						row.setcolSite(voPrintLocConf.getSite());
						row.setcolPrintToOrderingLocation(voPrintLocConf.getPrintToOrderingLocation());
						row.setcolPrintCentral(voPrintLocConf.getPrintCentral());
						row.setValue(voPrintLocConf);
					}
				}
			}
		}

		// inactive location records were reinstated after the initial grid load
		if (isAnotherSortRequired)
			form.grdDetails().sort(0);
		
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		PrintLocationConfigVoCollection voCollPrintLocConfig = new PrintLocationConfigVoCollection();
		// go through the grid instantiating a record for those
		for (int i = 0; i < form.grdDetails().getRows().size(); i++)
		{
			grdDetailsRow row = form.grdDetails().getRows().get(i);
			PrintLocationConfigVo voPrintLocConfig = row.getValue();

			if ((row.getcolPrintCentral() != null || row.getcolPrintToOrderingLocation() != null) || voPrintLocConfig != null)
			{
				if (voPrintLocConfig == null)
					voPrintLocConfig = new PrintLocationConfigVo();

				voPrintLocConfig.setPrintCentral(row.getcolPrintCentral());
				voPrintLocConfig.setPrintToOrderingLocation(row.getcolPrintToOrderingLocation());
				voPrintLocConfig.setSite(row.getcolSite());
			}

			if (voPrintLocConfig != null)
				voCollPrintLocConfig.add(voPrintLocConfig);
		}
		
		if (voCollPrintLocConfig.size() > 0)
		{
			try
			{
				domain.savePrintLocationConfigCollection(voCollPrintLocConfig);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				initialise(); // load hospitals from db again
				open();
				return;
			}
			
			open();
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();	
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		edit();
	}

	private void edit()
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		edit();
	}

	@Override
	protected void onFormModeChanged()
	{
		form.getContextMenus().Admin.getPrintLocationConfigEditItem().setVisible(form.getMode().equals(FormMode.VIEW));	
	}
}
