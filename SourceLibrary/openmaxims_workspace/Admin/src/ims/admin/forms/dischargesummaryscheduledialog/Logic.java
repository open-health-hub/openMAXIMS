//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3763.19232)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.admin.forms.dischargesummaryscheduledialog;

import ims.admin.forms.dischargesummaryscheduledialog.GenForm.grdListRow;
import ims.clinical.vo.DischargeSummaryScheduleVo;
import ims.clinical.vo.FailedEmailsDetailsVo;
import ims.clinical.vo.FailedEmailsDetailsVoCollection;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		if (args.length > 0)
		{
			populateGrid((DischargeSummaryScheduleVo)args[0]);					
		}		
	}
	
	private void populateGrid(DischargeSummaryScheduleVo dischargeSummary)
	{
		if (dischargeSummary == null)
			return;
		
		form.grdList().getRows().clear();
		FailedEmailsDetailsVoCollection failedEmails = dischargeSummary.getFailedEmails();
		
		for (int j = 0 ; failedEmails != null && j < failedEmails.size() ; j++)
		{
			FailedEmailsDetailsVo failedEmail = failedEmails.get(j);

			grdListRow row = form.grdList().getRows().newRow();
			row.setValue(failedEmail);
			
			if (failedEmail.getJobTypeIsNotNull())
				row.setColJobType(failedEmail.getJobType().getText());			
			if (failedEmail.getGPNameIsNotNull())
				row.setColGPName(failedEmail.getGPName());
			if (failedEmail.getEmailAddressIsNotNull())
				row.setColEmailAddress(failedEmail.getEmailAddress());
			if (failedEmail.getPatientNameIsNotNull())
				row.setColPatient(failedEmail.getPatientName());
			if (failedEmail.getInitialDateTimeIsNotNull())
				row.setColInitialDateTime(failedEmail.getInitialDateTime().toString());
			if (failedEmail.getFailedDateTimeIsNotNull())
				row.setColFailedDateTime(failedEmail.getFailedDateTime().toString());
			if (failedEmail.getSuccessfulDateTimeIsNotNull())
				row.setColSuccessfulSent(failedEmail.getSuccessfulDateTime().toString());
		}
	}

}
