//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.forms.lookuptree;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class TypeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 24, 328, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hierarchical", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 24, 280, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "System", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 200, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 144, 37, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 96, 18, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 112, 448, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 448, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 392, 448, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 312, 448, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 112, 192, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 112, 144, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 112, 328, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 112, 280, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 112, 96, 100, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
			}

			public Button btnUpdType()
			{
				return (Button)super.getControl(5);
			}
			public Button btnNewType()
			{
				return (Button)super.getControl(6);
			}
			public Button btnCancelType()
			{
				return (Button)super.getControl(7);
			}
			public Button btnSaveType()
			{
				return (Button)super.getControl(8);
			}
			public TextBox txtTypeDesc()
			{
				return (TextBox)super.getControl(9);
			}
			public TextBox txtTypeName()
			{
				return (TextBox)super.getControl(10);
			}
			public CheckBox chkTypeHier()
			{
				return (CheckBox)super.getControl(11);
			}
			public CheckBox chkTypeSystem()
			{
				return (CheckBox)super.getControl(12);
			}
			public IntBox intTypeId()
			{
				return (IntBox)super.getControl(13);
			}
		}
		public static class InstanceContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbColorComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.framework.utils.Color value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.framework.utils.Color value)
				{
					return super.control.removeRow(value);
				}
				public ims.framework.utils.Color getValue()
				{
					return (ims.framework.utils.Color)super.control.getValue();
				}
				public void setValue(ims.framework.utils.Color value)
				{
					// should add value if does not exist
					if(value != null && super.control.getValues() != null)
					{
						boolean exist = false;
						for(int x = 0; x < super.control.getValues().size(); x++)
						{
							ims.framework.utils.Color item = (ims.framework.utils.Color)super.control.getValues().get(x);
							if(item != null && item.equals(value))
							{
								exist = true;
								break;
							}
						}
						if(!exist)
						{
							newRow(value, value.getText(), value.getImage());
						}
					}
					super.control.setValue(value);
				}
			}
			public static class cmbParentComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.vo.LookupInstVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.vo.LookupInstVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.vo.LookupInstVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.vo.LookupInstVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.vo.LookupInstVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.vo.LookupInstVo getValue()
				{
					return (ims.vo.LookupInstVo)super.control.getValue();
				}
				public void setValue(ims.vo.LookupInstVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbImageComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.framework.utils.Image value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.framework.utils.Image value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.framework.utils.Image value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.framework.utils.Image value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.framework.utils.Image value)
				{
					return super.control.removeRow(value);
				}
				public ims.framework.utils.Image getValue()
				{
					return (ims.framework.utils.Image)super.control.getValue();
				}
				public void setValue(ims.framework.utils.Image value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdMappingsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdMappingsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setExtSystemReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isExtSystemReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showExtSystemOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForExtSystem(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.core.vo.lookups.TaxonomyType getExtSystem()
				{
					return (ims.core.vo.lookups.TaxonomyType)super.row.get(0);
				}
				public void setExtSystem(ims.core.vo.lookups.TaxonomyType value)
				{
					super.row.set(0, value, true);
				}
				public void setCellExtSystemTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setExtCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isExtCodeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showExtCodeOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForExtCode(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getExtCode()
				{
					return (String)super.row.get(1);
				}
				public void setExtCode(String value)
				{
					super.row.set(1, value);
				}
				public void setCellExtCodeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setSearchReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isSearchReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showSearchOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForSearch(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.framework.utils.Image getSearch()
				{
					return (ims.framework.utils.Image)super.row.get(2);
				}
				public void setSearch(ims.framework.utils.Image value)
				{
					super.row.set(2, value);
				}
				public void setCellSearchTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.vo.LookupMappingVo getValue()
				{
					return (ims.vo.LookupMappingVo)super.row.getValue();
				}
				public void setValue(ims.vo.LookupMappingVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdMappingsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdMappingsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdMappingsRow get(int index)
				{
					return new grdMappingsRow(super.collection.get(index));
				}
				public grdMappingsRow newRow()
				{
					return new grdMappingsRow(super.collection.newRow());
				}
				public grdMappingsRow newRow(boolean autoSelect)
				{
					return new grdMappingsRow(super.collection.newRow(autoSelect));
				}
				public grdMappingsRow newRowAt(int index)
				{
					return new grdMappingsRow(super.collection.newRowAt(index));
				}
				public grdMappingsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdMappingsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdMappingsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addButtonColumn(String caption, int captionAlignment, int alignment, int width, boolean bold, boolean canGrow)
				{
					super.grid.addButtonColumn(caption, captionAlignment, alignment, width, bold, canGrow);
				}
				public ims.vo.LookupMappingVo[] getValues()
				{
					ims.vo.LookupMappingVo[] listOfValues = new ims.vo.LookupMappingVo[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.vo.LookupMappingVo getValue()
				{
					return (ims.vo.LookupMappingVo)super.grid.getValue();
				}
				public void setValue(ims.vo.LookupMappingVo value)
				{
					super.grid.setValue(value);
				}
				public grdMappingsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdMappingsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdMappingsRowCollection getRows()
				{
					return new grdMappingsRowCollection(super.grid.getRows());
				}
				public grdMappingsRow getRowByValue(ims.vo.LookupMappingVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdMappingsRow(row);
				}
				public void setExtSystemHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getExtSystemHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public GridComboBox ExtSystemComboBox()
				{
					return new GridComboBox(super.grid, 0);
				}
				public void setExtCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getExtCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setSearchHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getSearchHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 456, 216, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Mappings", new Integer(2), ""}));
		
				// Label Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 186, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Parent", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 146, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Colour", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 16, 106, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Image", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 66, 29, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Text", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 26, 18, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ID", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 456, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 397, 456, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 312, 456, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 64, 64, 400, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 64, 144, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbColorTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbColorTemp);
				cmbColorComboBox cmbColor = (cmbColorComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbColorComboBox.class, m_cmbColorTemp);
				super.addComboBox(cmbColor);
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 64, 184, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbParentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbParentTemp);
				cmbParentComboBox cmbParent = (cmbParentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbParentComboBox.class, m_cmbParentTemp);
				super.addComboBox(cmbParent);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 64, 104, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbImageTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbImageTemp);
				qmbImageComboBox qmbImage = (qmbImageComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbImageComboBox.class, m_qmbImageTemp);
				super.addComboBox(qmbImage);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 32, 266, 424, 140, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdMappingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuMappingGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdMappingsTemp);
				grdMappingsGrid grdMappings = (grdMappingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMappingsGrid.class, m_grdMappingsTemp);
				grdMappings.addComboBoxColumn("External System", 0, 0, 195, false, true, false, false, true, -1);
				grdMappings.addStringColumn("External Code", 0, 0, 160, false, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMappings.addButtonColumn("Search", 0, 0, -1, false, true);
				grdMappings.setSearchHeaderTooltip("Search Taxonomy");
				super.addGrid(grdMappings);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 64, 24, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// Picture Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 328, 112, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE}));
			}

			public Label lblParent()
			{
				return (Label)super.getControl(1);
			}
			public Button btnNew()
			{
				return (Button)super.getControl(6);
			}
			public Button btnInstCancel()
			{
				return (Button)super.getControl(7);
			}
			public Button btnInstSave()
			{
				return (Button)super.getControl(8);
			}
			public TextBox txtInstText()
			{
				return (TextBox)super.getControl(9);
			}
			public cmbColorComboBox cmbColor()
			{
				return (cmbColorComboBox)super.getComboBox(0);
			}
			public cmbParentComboBox cmbParent()
			{
				return (cmbParentComboBox)super.getComboBox(1);
			}
			public qmbImageComboBox qmbImage()
			{
				return (qmbImageComboBox)super.getComboBox(2);
			}
			public grdMappingsGrid grdMappings()
			{
				return (grdMappingsGrid)super.getGrid(0);
			}
			public IntBox intInstId()
			{
				return (IntBox)super.getControl(14);
			}
			public Picture imgInst()
			{
				return (Picture)super.getControl(15);
			}
		}
		public static class FormsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDefInstComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.vo.LookupInstVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.vo.LookupInstVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.vo.LookupInstVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.vo.LookupInstVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.vo.LookupInstVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.vo.LookupInstVo getValue()
				{
					return (ims.vo.LookupInstVo)super.control.getValue();
				}
				public void setValue(ims.vo.LookupInstVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdFormsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdFormsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setFormNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isFormNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showFormNameOpened()
				{
					super.row.showOpened(0);
				}
				public String getFormName()
				{
					return (String)super.row.get(0);
				}
				public void setFormName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellFormNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.admin.vo.AppFormVo getValue()
				{
					return (ims.admin.vo.AppFormVo)super.row.getValue();
				}
				public void setValue(ims.admin.vo.AppFormVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdFormsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdFormsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdFormsRow get(int index)
				{
					return new grdFormsRow(super.collection.get(index));
				}
				public grdFormsRow newRow()
				{
					return new grdFormsRow(super.collection.newRow());
				}
				public grdFormsRow newRow(boolean autoSelect)
				{
					return new grdFormsRow(super.collection.newRow(autoSelect));
				}
				public grdFormsRow newRowAt(int index)
				{
					return new grdFormsRow(super.collection.newRowAt(index));
				}
				public grdFormsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdFormsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdFormsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.admin.vo.AppFormVoCollection getValues()
				{
					ims.admin.vo.AppFormVoCollection listOfValues = new ims.admin.vo.AppFormVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.admin.vo.AppFormVo getValue()
				{
					return (ims.admin.vo.AppFormVo)super.grid.getValue();
				}
				public void setValue(ims.admin.vo.AppFormVo value)
				{
					super.grid.setValue(value);
				}
				public grdFormsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdFormsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdFormsRowCollection getRows()
				{
					return new grdFormsRowCollection(super.grid.getRows());
				}
				public grdFormsRow getRowByValue(ims.admin.vo.AppFormVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdFormsRow(row);
				}
				public void setFormNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getFormNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public static class grdFormLookupsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdFormLookupsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setIdReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isIdReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showIdOpened()
				{
					super.row.showOpened(0);
				}
				public Integer getId()
				{
					return (Integer)super.row.get(0);
				}
				public void setId(Integer value)
				{
					super.row.set(0, value);
				}
				public void setCellIdTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setLookupReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isLookupReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showLookupOpened()
				{
					super.row.showOpened(1);
				}
				public String getLookup()
				{
					return (String)super.row.get(1);
				}
				public void setLookup(String value)
				{
					super.row.set(1, value);
				}
				public void setCellLookupTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.admin.vo.FormLookupVo getValue()
				{
					return (ims.admin.vo.FormLookupVo)super.row.getValue();
				}
				public void setValue(ims.admin.vo.FormLookupVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdFormLookupsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdFormLookupsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdFormLookupsRow get(int index)
				{
					return new grdFormLookupsRow(super.collection.get(index));
				}
				public grdFormLookupsRow newRow()
				{
					return new grdFormLookupsRow(super.collection.newRow());
				}
				public grdFormLookupsRow newRow(boolean autoSelect)
				{
					return new grdFormLookupsRow(super.collection.newRow(autoSelect));
				}
				public grdFormLookupsRow newRowAt(int index)
				{
					return new grdFormLookupsRow(super.collection.newRowAt(index));
				}
				public grdFormLookupsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdFormLookupsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdFormLookupsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.admin.vo.FormLookupVoCollection getValues()
				{
					ims.admin.vo.FormLookupVoCollection listOfValues = new ims.admin.vo.FormLookupVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.admin.vo.FormLookupVo getValue()
				{
					return (ims.admin.vo.FormLookupVo)super.grid.getValue();
				}
				public void setValue(ims.admin.vo.FormLookupVo value)
				{
					super.grid.setValue(value);
				}
				public grdFormLookupsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdFormLookupsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdFormLookupsRowCollection getRows()
				{
					return new grdFormLookupsRowCollection(super.grid.getRows());
				}
				public grdFormLookupsRow getRowByValue(ims.admin.vo.FormLookupVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdFormLookupsRow(row);
				}
				public void setIdHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getIdHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setLookupHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getLookupHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 256, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Lookup Types", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Forms", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 18, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Form Name Filter", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 16, 448, 296, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Default instance for selected form and Lookup type", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 392, 15, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Search", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 344, 463, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Save Default", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 120, 16, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 16, 464, 320, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbDefInstTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDefInstTemp);
				cmbDefInstComboBox cmbDefInst = (cmbDefInstComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDefInstComboBox.class, m_cmbDefInstTemp);
				super.addComboBox(cmbDefInst);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 456, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdFormsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdFormsTemp);
				grdFormsGrid grdForms = (grdFormsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFormsGrid.class, m_grdFormsTemp);
				grdForms.addStringColumn("Form Name", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdForms);
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 16, 272, 456, 168, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdFormLookupsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdFormLookupsTemp);
				grdFormLookupsGrid grdFormLookups = (grdFormLookupsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFormLookupsGrid.class, m_grdFormLookupsTemp);
				grdFormLookups.addIntColumn("ID", 0, 0, 60, true, true, null, false, 0, false);
				grdFormLookups.addStringColumn("Lookup Type Name", 0, 0, -1, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdFormLookups);
			}

			public Button btnFormFilter()
			{
				return (Button)super.getControl(4);
			}
			public Button btnSetDefault()
			{
				return (Button)super.getControl(5);
			}
			public TextBox txtFormFilter()
			{
				return (TextBox)super.getControl(6);
			}
			public cmbDefInstComboBox cmbDefInst()
			{
				return (cmbDefInstComboBox)super.getComboBox(0);
			}
			public grdFormsGrid grdForms()
			{
				return (grdFormsGrid)super.getGrid(0);
			}
			public grdFormLookupsGrid grdFormLookups()
			{
				return (grdFormLookupsGrid)super.getGrid(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 336, 48, 496, 520, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_Type = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Lookup Type", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			TypeContainer m_TypeContainer = (TypeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(TypeContainer.class, m_Type, factory);
			super.addContainer(m_Type, m_TypeContainer);
			ims.framework.utils.SizeInfo m_TypeDesignSize = new ims.framework.utils.SizeInfo(496, 520);
			ims.framework.utils.SizeInfo m_TypeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper41.getWidth(), anchoringHelper41.getHeight());
			m_TypeContainer.setContext(form, appForm, m_Type, loader, form_images_local, contextMenus, startControlID, m_TypeDesignSize, m_TypeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 336, 48, 496, 520, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_Instance = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Lookup Instance", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			InstanceContainer m_InstanceContainer = (InstanceContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(InstanceContainer.class, m_Instance, factory);
			super.addContainer(m_Instance, m_InstanceContainer);
			ims.framework.utils.SizeInfo m_InstanceDesignSize = new ims.framework.utils.SizeInfo(496, 520);
			ims.framework.utils.SizeInfo m_InstanceRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper42.getWidth(), anchoringHelper42.getHeight());
			m_InstanceContainer.setContext(form, appForm, m_Instance, loader, form_images_local, contextMenus, startControlID, m_InstanceDesignSize, m_InstanceRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 336, 48, 496, 520, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_Forms = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Form Lookup Mapping", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			FormsContainer m_FormsContainer = (FormsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(FormsContainer.class, m_Forms, factory);
			super.addContainer(m_Forms, m_FormsContainer);
			ims.framework.utils.SizeInfo m_FormsDesignSize = new ims.framework.utils.SizeInfo(496, 520);
			ims.framework.utils.SizeInfo m_FormsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper43.getWidth(), anchoringHelper43.getHeight());
			m_FormsContainer.setContext(form, appForm, m_Forms, loader, form_images_local, contextMenus, startControlID, m_FormsDesignSize, m_FormsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			Type().setVisible(false);
			Instance().setVisible(false);
			Forms().setVisible(false);
		}
		public void showType()
		{
			Instance().setVisible(false);
			Forms().setVisible(false);
			Type().setVisible(true);
		}
		public void showInstance()
		{
			Type().setVisible(false);
			Forms().setVisible(false);
			Instance().setVisible(true);
		}
		public void showForms()
		{
			Type().setVisible(false);
			Instance().setVisible(false);
			Forms().setVisible(true);
		}

		public TypeContainer Type()
		{
			return (TypeContainer)super.layers.get(0);
		}
		public InstanceContainer Instance()
		{
			return (InstanceContainer)super.layers.get(1);
		}
		public FormsContainer Forms()
		{
			return (FormsContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuMappingGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuMappingGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add New Mapping", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMappingGrid.add(contextMenus.contextMenuMappingGridAddItem);
		contextMenus.contextMenuMappingGridDeleteItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove Mapping", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMappingGrid.add(contextMenus.contextMenuMappingGridDeleteItem);
		form.registerMenu(contextMenus.contextMenuMappingGrid);
		contextMenus.contextMenuLookupAdmin = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuLookupAdminAddItem = factory.createMenuItem(startControlID.intValue() + 3, "New Instance", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuLookupAdmin.add(contextMenus.contextMenuLookupAdminAddItem);
		contextMenus.contextMenuLookupAdminUpdateItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit Instance", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuLookupAdmin.add(contextMenus.contextMenuLookupAdminUpdateItem);
		contextMenus.contextMenuLookupAdminEditItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit Text", true, false, new Integer(102142), true, false);
		contextMenus.contextMenuLookupAdmin.add(contextMenus.contextMenuLookupAdminEditItem);
		contextMenus.contextMenuLookupAdminDeactivateItem = factory.createMenuItem(startControlID.intValue() + 6, "Deactivate", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuLookupAdmin.add(contextMenus.contextMenuLookupAdminDeactivateItem);
		contextMenus.contextMenuLookupAdminSortItem = factory.createMenuItem(startControlID.intValue() + 7, "Sort and Save Order", true, false, new Integer(102243), true, true);
		contextMenus.contextMenuLookupAdmin.add(contextMenus.contextMenuLookupAdminSortItem);
		contextMenus.contextMenuLookupAdminSaveItem = factory.createMenuItem(startControlID.intValue() + 8, "Save Order", true, false, new Integer(102199), true, false);
		contextMenus.contextMenuLookupAdmin.add(contextMenus.contextMenuLookupAdminSaveItem);
		contextMenus.contextMenuLookupAdminViewItem = factory.createMenuItem(startControlID.intValue() + 9, "Flat View", true, false, new Integer(102206), false, true);
		contextMenus.contextMenuLookupAdmin.add(contextMenus.contextMenuLookupAdminViewItem);
		contextMenus.contextMenuLookupAdminExpandItem = factory.createMenuItem(startControlID.intValue() + 10, "Expand all", true, false, new Integer(102207), false, false);
		contextMenus.contextMenuLookupAdmin.add(contextMenus.contextMenuLookupAdminExpandItem);
		contextMenus.contextMenuLookupAdminCollapseItem = factory.createMenuItem(startControlID.intValue() + 11, "Collapse all", true, false, new Integer(102208), false, false);
		contextMenus.contextMenuLookupAdmin.add(contextMenus.contextMenuLookupAdminCollapseItem);
		contextMenus.contextMenuLookupAdminRefreshCacheItem = factory.createMenuItem(startControlID.intValue() + 12, "Refresh Cache", true, false, new Integer(102169), false, true);
		contextMenus.contextMenuLookupAdmin.add(contextMenus.contextMenuLookupAdminRefreshCacheItem);
		form.registerMenu(contextMenus.contextMenuLookupAdmin);


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 256, 600, 44, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Inactive", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 152, 600, 27, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "User", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 48, 600, 40, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "System", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 24, 576, 51, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Total : 0", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 248, 48, 80, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Search", Boolean.FALSE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 24, 48, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 120, 16, 128, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Include System Types", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 264, 16, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.HIDDEN, ControlState.HIDDEN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Local Types Only", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 24, 16, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Active Only", Boolean.TRUE, null}));

		// Tree Controls
		RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 24, 88, 304, 480, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuLookupAdmin, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));

		// Link Controls
		RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 704, 16, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"View Form Mapping", Boolean.FALSE, null}));

		// Picture Controls
		RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 232, 600, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 128, 600, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 24, 600, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Label lblTotal()
	{
		return (Label)super.getControl(6);
	}
	public Button btnSearch()
	{
		return (Button)super.getControl(7);
	}
	public TextBox txtFilter()
	{
		return (TextBox)super.getControl(8);
	}
	public CheckBox chkSystemTypes()
	{
		return (CheckBox)super.getControl(9);
	}
	public CheckBox chkUserTypes()
	{
		return (CheckBox)super.getControl(10);
	}
	public CheckBox chkActiveOnly()
	{
		return (CheckBox)super.getControl(11);
	}
	public TreeView treTypes()
	{
		return (TreeView)super.getControl(12);
	}
	public Link lnkForms()
	{
		return (Link)super.getControl(13);
	}
	public Picture imgInactive()
	{
		return (Picture)super.getControl(14);
	}
	public Picture imgUser()
	{
		return (Picture)super.getControl(15);
	}
	public Picture imgSystem()
	{
		return (Picture)super.getControl(16);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				YesNoDialog = new LocalFormName(102107);
				OkCancelDialog = new LocalFormName(102129);
				TaxonomySearch = new LocalFormName(104102);
			}
			public final FormName YesNoDialog;
			public final FormName OkCancelDialog;
			public final FormName TaxonomySearch;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ZoomInEnabled16 = new ImageHelper(102158, "Images/Core/zoom.png", new Integer(16), new Integer(16));
				ZoomInDisabled16 = new ImageHelper(102159, "Images/Core/zoom_disabled.png", new Integer(16), new Integer(16));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				DeleteDisabled = new ImageHelper(102177, "Images/Core/delete_dis.png", new Integer(16), new Integer(16));
				BlueSquare = new ImageHelper(102121, "Images/Core/circle_blue.png", new Integer(16), new Integer(16));
				RedSqaure = new ImageHelper(102122, "Images/Core/circle_red.png", new Integer(16), new Integer(16));
				YellowSquare = new ImageHelper(102123, "Images/Core/circle_yellow.png", new Integer(16), new Integer(16));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				ClosedFolder = new ImageHelper(102135, "Images/Core/closed_folder.png", new Integer(16), new Integer(16));
				Memo = new ImageHelper(102136, "Images/Core/memo.GIF", new Integer(17), new Integer(17));
				OpenFolder = new ImageHelper(102134, "Images/Core/open_folder_simple.png", new Integer(16), new Integer(16));
				SortAscending16 = new ImageHelper(102243, "Images/Core/SortAscending16.gif", new Integer(16), new Integer(16));
				SortDescending16 = new ImageHelper(102244, "Images/Core/SortDescending16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ZoomInEnabled16;
			public final ims.framework.utils.Image ZoomInDisabled16;
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image DeleteDisabled;
			public final ims.framework.utils.Image BlueSquare;
			public final ims.framework.utils.Image RedSqaure;
			public final ims.framework.utils.Image YellowSquare;
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image ClosedFolder;
			public final ims.framework.utils.Image Memo;
			public final ims.framework.utils.Image OpenFolder;
			public final ims.framework.utils.Image SortAscending16;
			public final ims.framework.utils.Image SortDescending16;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_LookupType = new ims.framework.ContextVariable("LookupType", prefix + "_lv_Admin.LookupTree.__internal_x_context__LookupType_" + componentIdentifier + "");
			cxl_LookupInstance = new ims.framework.ContextVariable("LookupInstance", prefix + "_lv_Admin.LookupTree.__internal_x_context__LookupInstance_" + componentIdentifier + "");
			cxl_typeColl = new ims.framework.ContextVariable("typeColl", prefix + "_lv_Admin.LookupTree.__internal_x_context__typeColl_" + componentIdentifier + "");
			cxl_FormLookup = new ims.framework.ContextVariable("FormLookup", prefix + "_lv_Admin.LookupTree.__internal_x_context__FormLookup_" + componentIdentifier + "");
			cxl_ChosenForm = new ims.framework.ContextVariable("ChosenForm", prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier + "");
		}
		
		public boolean getLookupTypeIsNotNull()
		{
			return !cxl_LookupType.getValueIsNull(context);
		}
		public ims.vo.LookupTypeVo getLookupType()
		{
			return (ims.vo.LookupTypeVo)cxl_LookupType.getValue(context);
		}
		public void setLookupType(ims.vo.LookupTypeVo value)
		{
			cxl_LookupType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LookupType = null;
		public boolean getLookupInstanceIsNotNull()
		{
			return !cxl_LookupInstance.getValueIsNull(context);
		}
		public ims.vo.LookupInstVo getLookupInstance()
		{
			return (ims.vo.LookupInstVo)cxl_LookupInstance.getValue(context);
		}
		public void setLookupInstance(ims.vo.LookupInstVo value)
		{
			cxl_LookupInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LookupInstance = null;
		public boolean gettypeCollIsNotNull()
		{
			return !cxl_typeColl.getValueIsNull(context);
		}
		public ims.vo.LookupTypeVoCollection gettypeColl()
		{
			return (ims.vo.LookupTypeVoCollection)cxl_typeColl.getValue(context);
		}
		public void settypeColl(ims.vo.LookupTypeVoCollection value)
		{
			cxl_typeColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_typeColl = null;
		public boolean getFormLookupIsNotNull()
		{
			return !cxl_FormLookup.getValueIsNull(context);
		}
		public ims.admin.vo.FormLookupVo getFormLookup()
		{
			return (ims.admin.vo.FormLookupVo)cxl_FormLookup.getValue(context);
		}
		public void setFormLookup(ims.admin.vo.FormLookupVo value)
		{
			cxl_FormLookup.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FormLookup = null;
		public boolean getChosenFormIsNotNull()
		{
			return !cxl_ChosenForm.getValueIsNull(context);
		}
		public ims.admin.vo.AppFormVo getChosenForm()
		{
			return (ims.admin.vo.AppFormVo)cxl_ChosenForm.getValue(context);
		}
		public void setChosenForm(ims.admin.vo.AppFormVo value)
		{
			cxl_ChosenForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ChosenForm = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class MappingGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Delete = 2;
		}
		public void disableAllMappingGridMenuItems()
		{
			this.contextMenuMappingGridAddItem.setEnabled(false);
			this.contextMenuMappingGridDeleteItem.setEnabled(false);
		}
		public void hideAllMappingGridMenuItems()
		{
			this.contextMenuMappingGridAddItem.setVisible(false);
			this.contextMenuMappingGridDeleteItem.setVisible(false);
		}
		private Menu contextMenuMappingGrid;
		public MenuItem getMappingGridAddItem()
		{
			return this.contextMenuMappingGridAddItem;
		}
		private MenuItem contextMenuMappingGridAddItem;
		public MenuItem getMappingGridDeleteItem()
		{
			return this.contextMenuMappingGridDeleteItem;
		}
		private MenuItem contextMenuMappingGridDeleteItem;
		public final class LookupAdmin implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 3;
			public static final int Update = 4;
			public static final int Edit = 5;
			public static final int Deactivate = 6;
			public static final int Sort = 7;
			public static final int Save = 8;
			public static final int View = 9;
			public static final int Expand = 10;
			public static final int Collapse = 11;
			public static final int RefreshCache = 12;
		}
		public void disableAllLookupAdminMenuItems()
		{
			this.contextMenuLookupAdminAddItem.setEnabled(false);
			this.contextMenuLookupAdminUpdateItem.setEnabled(false);
			this.contextMenuLookupAdminEditItem.setEnabled(false);
			this.contextMenuLookupAdminDeactivateItem.setEnabled(false);
			this.contextMenuLookupAdminSortItem.setEnabled(false);
			this.contextMenuLookupAdminSaveItem.setEnabled(false);
			this.contextMenuLookupAdminViewItem.setEnabled(false);
			this.contextMenuLookupAdminExpandItem.setEnabled(false);
			this.contextMenuLookupAdminCollapseItem.setEnabled(false);
			this.contextMenuLookupAdminRefreshCacheItem.setEnabled(false);
		}
		public void hideAllLookupAdminMenuItems()
		{
			this.contextMenuLookupAdminAddItem.setVisible(false);
			this.contextMenuLookupAdminUpdateItem.setVisible(false);
			this.contextMenuLookupAdminEditItem.setVisible(false);
			this.contextMenuLookupAdminDeactivateItem.setVisible(false);
			this.contextMenuLookupAdminSortItem.setVisible(false);
			this.contextMenuLookupAdminSaveItem.setVisible(false);
			this.contextMenuLookupAdminViewItem.setVisible(false);
			this.contextMenuLookupAdminExpandItem.setVisible(false);
			this.contextMenuLookupAdminCollapseItem.setVisible(false);
			this.contextMenuLookupAdminRefreshCacheItem.setVisible(false);
		}
		private Menu contextMenuLookupAdmin;
		public MenuItem getLookupAdminAddItem()
		{
			return this.contextMenuLookupAdminAddItem;
		}
		private MenuItem contextMenuLookupAdminAddItem;
		public MenuItem getLookupAdminUpdateItem()
		{
			return this.contextMenuLookupAdminUpdateItem;
		}
		private MenuItem contextMenuLookupAdminUpdateItem;
		public MenuItem getLookupAdminEditItem()
		{
			return this.contextMenuLookupAdminEditItem;
		}
		private MenuItem contextMenuLookupAdminEditItem;
		public MenuItem getLookupAdminDeactivateItem()
		{
			return this.contextMenuLookupAdminDeactivateItem;
		}
		private MenuItem contextMenuLookupAdminDeactivateItem;
		public MenuItem getLookupAdminSortItem()
		{
			return this.contextMenuLookupAdminSortItem;
		}
		private MenuItem contextMenuLookupAdminSortItem;
		public MenuItem getLookupAdminSaveItem()
		{
			return this.contextMenuLookupAdminSaveItem;
		}
		private MenuItem contextMenuLookupAdminSaveItem;
		public MenuItem getLookupAdminViewItem()
		{
			return this.contextMenuLookupAdminViewItem;
		}
		private MenuItem contextMenuLookupAdminViewItem;
		public MenuItem getLookupAdminExpandItem()
		{
			return this.contextMenuLookupAdminExpandItem;
		}
		private MenuItem contextMenuLookupAdminExpandItem;
		public MenuItem getLookupAdminCollapseItem()
		{
			return this.contextMenuLookupAdminCollapseItem;
		}
		private MenuItem contextMenuLookupAdminCollapseItem;
		public MenuItem getLookupAdminRefreshCacheItem()
		{
			return this.contextMenuLookupAdminRefreshCacheItem;
		}
		private MenuItem contextMenuLookupAdminRefreshCacheItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[94];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__FormLookup_" + componentIdentifier, "BO-1028100033-ID", "ID_AppFormLookup");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__FormLookup_" + componentIdentifier, "BO-1028100033-LOOKUPTYPE", "LookupType");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__FormLookup_" + componentIdentifier, "BO-1028100033-DEFAULTINSTANCE", "DefaultInstance");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-ID", "ID_AppForm");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-NAME", "Name");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-ALIASNAME", "AliasName");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-CAPTION", "Caption");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-ISDIALOG", "IsDialog");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-ISALIAS", "IsAlias");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-ISCOMPONENT", "IsComponent");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-DESCRIPTION", "Description");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-CANBEINNAVIGATION", "CanBeInNavigation");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-CANBEINTOPBUTTONS", "CanBeInTopButtons");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-LOGICCLASS", "LogicClass");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-ACCESSCLASS", "AccessClass");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-DOMAINCLASS", "DomainImpl");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-HELPLINK", "HelpLink");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-RIEBOCLASSNAME", "RieBoClassName");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-ISSYSTEM", "IsSystem");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Admin.LookupTree.__internal_x_context__ChosenForm_" + componentIdentifier, "BO-1021100001-INFORMATIONBARVISIBLE", "InformationBarVisible");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
