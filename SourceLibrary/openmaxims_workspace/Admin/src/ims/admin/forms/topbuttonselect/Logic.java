//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.21 build 41008.1030)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.admin.forms.topbuttonselect;

import ims.admin.vo.AppTopButtonVo;
import ims.admin.vo.AppTopButtonVoCollection;
import ims.admin.vo.enums.TopButtonSelectionType;
import ims.admin.vo.lookups.TopButtonAction;
import ims.domain.FormName;
import ims.framework.TopButton;
import ims.framework.TopButtonCollection;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppForm;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}	
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
	}	
	protected void onBtnOkClick() throws PresentationLogicException 
	{		
		if(save())
			engine.close(DialogResult.OK);
	}
	private void open()
	{
		selectAndLoadType();
	}	
	private void selectAndLoadType()
	{
		if(form.getGlobalContext().Admin.getTopButtonSelectionType() == TopButtonSelectionType.PREDEFINEDBUTTON)
		{
			form.lyrSelection().showtabPredefinedButtons();
			loadPredefinedButtons();			

			if(form.getGlobalContext().Admin.getTopButtonMaxSelectionCount() != null)
			{
				form.lyrSelection().tabPredefinedButtons().chklistPredefinedButtons().setMaxCheckedItems(form.getGlobalContext().Admin.getTopButtonMaxSelectionCount());
				if(form.getGlobalContext().Admin.getTopButtonMaxSelectionCount() == 1)
					form.lblNote().setValue("NOTE: Only one predefined button can be selected.");
				else
					form.lblNote().setValue("NOTE: A maximum of " + form.getGlobalContext().Admin.getTopButtonMaxSelectionCount() + " predefined buttons can be selected.");
			}
		}
		else if(form.getGlobalContext().Admin.getTopButtonSelectionType() == TopButtonSelectionType.FORM)
		{
			form.lyrSelection().showtabForms();
			loadAvailableForms();

			if(form.getGlobalContext().Admin.getTopButtonMaxSelectionCount() != null)
			{
				form.lyrSelection().tabForms().chkAvailableForms().setMaxCheckedItems(form.getGlobalContext().Admin.getTopButtonMaxSelectionCount());
				if(form.getGlobalContext().Admin.getTopButtonMaxSelectionCount() == 1)
					form.lblNote().setValue("NOTE: Only one form can be selected.");
				else
					form.lblNote().setValue("NOTE: A maximum of " + form.getGlobalContext().Admin.getTopButtonMaxSelectionCount() + " forms can be selected.");
			}
		}		
		else if(form.getGlobalContext().Admin.getTopButtonSelectionType() == TopButtonSelectionType.URL)
		{
			form.lyrSelection().showtabUrl();
			form.lyrSelection().tabUrl().txtUrlName().setFocus();
		}
	}
	private void loadPredefinedButtons()
	{
		TopButtonCollection excluded = form.getGlobalContext().Admin.getTopButtonExcludedButtons();

		for(int x = 0; x < engine.getBuiltInTopButtons().size(); x++)
		{
			if(excluded == null || !excluded.contains(engine.getBuiltInTopButtons().get(x)))
			{
				addPredefinedButton(engine.getBuiltInTopButtons().get(x));
			}
		}
	}
	private void addPredefinedButton(TopButton value) 
	{
		form.lyrSelection().tabPredefinedButtons().chklistPredefinedButtons().newRow(value, value.getText(), form.getImages().Core.HelpButton);
	}
	private void loadAvailableForms()
	{
		IAppForm[] forms = sort(engine.getRegisteredForms());
		for(int x = 0; x < forms.length; x++)
		{
			if(forms[x].canBeInTopButtons())
			{
				addForm(forms[x]);
			}
		}
	}
	private IAppForm[] sort(IAppForm[] registeredForms) 
	{		
		for(int x = 0; x < registeredForms.length; x++)
		{
			for(int y = 0; y < registeredForms.length; y++)
			{
				if(x != y)
				{
					if(registeredForms[x].getName().compareTo(registeredForms[y].getName()) < 0)
					{
						IAppForm save = registeredForms[x];
						registeredForms[x] = registeredForms[y];
						registeredForms[y] = save;
					}
				}
			}
		}

		return registeredForms;
	}
	private void addForm(IAppForm value) 
	{
		if(value.isComponent())
			return;

		String formName = value.getName();
		if(value.isAlias())
			formName += " (" + value.getAliasName() + ")";
		if(value.isDialog())
			formName += " - dialog";
		form.lyrSelection().tabForms().chkAvailableForms().newRow(value, formName, form.getImages().Core.Form);
	}	
	private boolean save()
	{
		if(form.getGlobalContext().Admin.getTopButtonSelectionType() == TopButtonSelectionType.PREDEFINEDBUTTON)
		{
			if(form.lyrSelection().tabPredefinedButtons().chklistPredefinedButtons().getValues() == null || form.lyrSelection().tabPredefinedButtons().chklistPredefinedButtons().getValues().length == 0)
			{
				engine.showMessage("No predefined button selected.");
				return false;
			}

			AppTopButtonVoCollection selection = new AppTopButtonVoCollection();			
			for(int x = 0; x < form.lyrSelection().tabPredefinedButtons().chklistPredefinedButtons().getValues().length; x++)
			{
				TopButton formSelection = form.lyrSelection().tabPredefinedButtons().chklistPredefinedButtons().getValues()[x];		                                                                                  

				AppTopButtonVo item = new AppTopButtonVo();
				item.setText(formSelection.getText());			
				item.setAction(TopButtonAction.BUILTIN);
				item.setBuildIn(new Integer(formSelection.getID()));

				selection.add(item);
			}

			form.getGlobalContext().Admin.setTopButtonSelection(selection);
		}
		else if(form.getGlobalContext().Admin.getTopButtonSelectionType() == TopButtonSelectionType.URL)
		{
			if(form.lyrSelection().tabUrl().txtUrlName().getValue() == null || form.lyrSelection().tabUrl().txtUrlName().getValue().trim().length() == 0)
			{
				engine.showMessage("URL Text is mandatory."); //WDEV-18196
				return false;
			}
			if(form.lyrSelection().tabUrl().txtUrl().getValue() == null || form.lyrSelection().tabUrl().txtUrl().getValue().trim().length() == 0)
			{
				engine.showMessage("URL is mandatory."); //WDEV-18196
				return false;
			}

			AppTopButtonVoCollection selection = new AppTopButtonVoCollection();

			AppTopButtonVo item = new AppTopButtonVo();

			item.setText(form.lyrSelection().tabUrl().txtUrlName().getValue());
			item.setURL(form.lyrSelection().tabUrl().txtUrl().getValue());
			item.setAction(TopButtonAction.URL);
			selection.add(item);

			form.getGlobalContext().Admin.setTopButtonSelection(selection);
		}
		else if(form.getGlobalContext().Admin.getTopButtonSelectionType() == TopButtonSelectionType.FORM)
		{
			if(form.lyrSelection().tabForms().chkAvailableForms().getValues() == null || form.lyrSelection().tabForms().chkAvailableForms().getValues().length == 0)			
			{
				engine.showMessage("No form selected.");
				return false;
			}

			AppTopButtonVoCollection selection = new AppTopButtonVoCollection();
			for(int x = 0; x < form.lyrSelection().tabForms().chkAvailableForms().getValues().length; x++)
			{
				IAppForm selectedForm = form.lyrSelection().tabForms().chkAvailableForms().getValues()[x];

				AppTopButtonVo item = new AppTopButtonVo();				
				item.setText(selectedForm.getName());
				item.setForm(new FormName(selectedForm.getFormId()));
				item.setAction(TopButtonAction.FORM);
				item.setAlwaysEnabled(new Boolean(selectedForm.isDialog()));

				selection.add(item);
			}

			form.getGlobalContext().Admin.setTopButtonSelection(selection);
		}

		return true;
	}	
}
