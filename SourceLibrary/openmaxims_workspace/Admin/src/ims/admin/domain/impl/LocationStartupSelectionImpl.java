//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.53 build 2530.20692)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.base.impl.BaseLocationStartupSelectionImpl;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.domain.objects.Location;
import ims.core.resource.place.domain.objects.Organisation;
import ims.core.resource.place.vo.OrganisationRefVo;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.OrgLiteVoCollection;
import ims.core.vo.domain.LocSiteLiteVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.OrgLiteVoAssembler;
import ims.core.vo.lookups.OrganisationType;
import ims.domain.DomainFactory;

public class LocationStartupSelectionImpl extends BaseLocationStartupSelectionImpl
{
	private static final long serialVersionUID = 1L;

	public ims.core.vo.OrgLiteVoCollection listRootOrganizations()
	{
		return listOrganizations(null);
	}	
	public ims.core.vo.OrgLiteVoCollection listOrganizationsByOrganization(OrganisationRefVo organization)
	{
		return listOrganizations(organization); 
	}
	public LocSiteLiteVoCollection listLocationSites(ims.core.resource.place.vo.OrganisationRefVo organization)
	{			
		Organisation doOrganisation = (Organisation) getDomainFactory().getDomainObject(organization);
		LocSiteLiteVoCollection result = LocSiteLiteVoAssembler.createLocSiteLiteVoCollectionFromLocSite(doOrganisation.getLocationSites());
		
		if(result == null)
			return null;
		
		LocSiteLiteVoCollection activeLocationSites = new LocSiteLiteVoCollection();
		
		for(int x = 0; x < result.size(); x++)
		{
			LocSiteLiteVo locationSite = result.get(x);
			if(locationSite != null 
				&& locationSite.getIsActive() != null && locationSite.getIsActive().booleanValue()
				&& locationSite.getIsVirtualIsNotNull() && ! locationSite.getIsVirtual().booleanValue())//wdev-2730
				activeLocationSites.add(locationSite);
		}
		
		return activeLocationSites.sort();
	}
	public ims.core.vo.LocationLiteVoCollection listLocationsByLocationSite(ims.core.resource.place.vo.LocSiteRefVo locationSite)
	{
		LocSite doLocationSite = (LocSite) getDomainFactory().getDomainObject(locationSite);
		LocationLiteVoCollection collLocs = LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(doLocationSite.getLocations());
		
//		wdev-2730
		LocationLiteVoCollection collLocsToRetrun = new LocationLiteVoCollection();
		for (int i = 0 ; i < collLocs.size() ; i++)
		{
			if (collLocs.get(i).getIsVirtualIsNotNull() && ! collLocs.get(i).getIsVirtual().booleanValue())
				collLocsToRetrun.add(collLocs.get(i));
		}
		return collLocsToRetrun.sort();	
	}
	public ims.core.vo.LocationLiteVoCollection listLocationsByLocation(ims.core.resource.place.vo.LocationRefVo location)
	{
		Location doLocation = (Location) getDomainFactory().getDomainObject(location);
		LocationLiteVoCollection result =  LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(doLocation.getLocations());
		
		if(result == null)
			return null;
		
		LocationLiteVoCollection activeLocations = new LocationLiteVoCollection();
		
		for(int x = 0; x < result.size(); x++)
		{
			LocationLiteVo selLocation = result.get(x);
			if(selLocation != null 
				&& selLocation.getIsActive() != null && selLocation.getIsActive().booleanValue()
				&& selLocation.getIsVirtualIsNotNull() && ! selLocation.getIsVirtual().booleanValue())//wdev-2730
				activeLocations.add(selLocation);
		}
		
		return activeLocations.sort();
	}
	@SuppressWarnings("unchecked")
	private ims.core.vo.OrgLiteVoCollection listOrganizations(OrganisationRefVo organization) 
	{
		DomainFactory factory = getDomainFactory();

		String hql = " from Organisation o ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		
		List orgs = null;

		condStr.append(andStr + " o.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		condStr.append(andStr + " (o.type != :GP or o.type.id is null)");
		markers.add("GP");
		values.add(getDomLookup(OrganisationType.GPP));
		andStr = " and ";
		
		condStr.append(andStr + " (o.type != :PCT or o.type.id is null)");
		markers.add("PCT");
		values.add(getDomLookup(OrganisationType.NHS_PCT));
		andStr = " and ";
		
		condStr.append(andStr + " (o.type != :SP or o.type.id is null)");
		markers.add("SP");
		values.add(getDomLookup(OrganisationType.SUPPLIER));
		andStr = " and ";
						
		if(organization == null)
		{
			condStr.append(andStr + " o.parentOrganisation is null");
			andStr = " and ";
		}
		else
		{
			condStr.append(andStr + " o.parentOrganisation.id = :parentOrg");
			markers.add("parentOrg");
			values.add(organization.getID_Organisation());
			andStr = " and ";
		}
		
		hql += " where ";
		hql += condStr.toString();

		orgs = factory.find(hql, markers, values);
		OrgLiteVoCollection result = OrgLiteVoAssembler.createOrgLiteVoCollectionFromOrganisation(orgs).sort();		
		return result;
	}
}
