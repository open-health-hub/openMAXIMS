//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Dara Hickey using IMS Development Environment (version 1.22 build 50228.901)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import ims.admin.domain.MosAdmin;
import ims.core.resource.place.domain.objects.Activity;
import ims.core.resource.place.domain.objects.CodingAlertConfiguration;
import ims.core.vo.ActivitySchedVo;
import ims.core.vo.ActivitySchedVoCollection;
import ims.core.vo.ActivityVo;
import ims.core.vo.ActivityVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.domain.ActivitySchedVoAssembler;
import ims.core.vo.domain.ActivityVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.domain.impl.DomainImpl;
import ims.ntpf.vo.CodingAlertConfigurationVo;
import ims.ntpf.vo.domain.CodingAlertConfigurationVoAssembler;
import ims.vo.LookupInstanceCollection;

import java.util.ArrayList;
import java.util.List;

public class ActivityImpl extends DomainImpl implements ims.admin.domain.Activity, ims.domain.impl.Transactional
{
  
	private static final long serialVersionUID = 1L;


	/**
	* Returns a list of all activities, or a list of active activities
	*/
	public ims.core.vo.ActivityVoCollection listActivities(Boolean bActive)
	{			   
	    DomainFactory factory = getDomainFactory();		
	    List activities = null;		
	    StringBuffer hql = new StringBuffer(" ");
		String query = "from Activity a ";

	    if (bActive.equals(Boolean.TRUE))
	    {
			ArrayList markers = new ArrayList();
			ArrayList values = new ArrayList();
	
			hql.append(" a.isActive = :isActive");
			markers.add("isActive");
			values.add(bActive);			
	
			if (markers.size() > 0) query += " where ";
			query += hql.toString();
	
			activities = factory.find(query, markers, values, 1000);
	    }	
	    else
	    {
	        activities = factory.find(query,1000);	        
	    }
	    
	    return ActivityVoAssembler.createActivityVoCollectionFromActivity(activities).sort();
}


	public CodingAlertConfigurationVo saveAlert(CodingAlertConfigurationVo alertVo) throws ims.domain.exceptions.StaleObjectException, UniqueKeyViolationException
	{
		if (!alertVo.isValidated())
		{
			throw new DomainRuntimeException("Alert has not been validated");
		}
		
		alertVo.setActivity(saveActivity(alertVo.getActivity()));
		DomainFactory factory = getDomainFactory();
		CodingAlertConfiguration doCodingAlertConfiguration = CodingAlertConfigurationVoAssembler.extractCodingAlertConfiguration(factory, alertVo);
		
		factory.save(doCodingAlertConfiguration); 
		return CodingAlertConfigurationVoAssembler.create(doCodingAlertConfiguration);
	}


	public ims.core.vo.ActivityVo getActivity(Integer activityId)
	{	
		DomainFactory factory = getDomainFactory();
		ims.core.resource.place.domain.objects.Activity domActivity = (ims.core.resource.place.domain.objects.Activity) factory.getDomainObject(Activity.class, activityId);
		return (ActivityVoAssembler.create(domActivity));
		
	}


	public MemberOfStaffShortVoCollection listStaff(MemberOfStaffShortVo filter) {
		MosAdmin impl = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		return impl.listMembersOfStaff(filter);	
	}

	public CodingAlertConfigurationVo getAlert(ActivityVo filter) {
		DomainFactory factory = getDomainFactory();
		String hql = " from CodingAlertConfiguration alert where alert.activity.id=:activityid";
		List list = factory.find(hql,new String[]{"activityid"}, new Object[]{filter.getID_Activity()});

		CodingAlertConfiguration domAlert = (CodingAlertConfiguration)list.get(0);
		domAlert=(CodingAlertConfiguration) factory.getDomainObject(CodingAlertConfiguration.class, domAlert.getId());
		
		return CodingAlertConfigurationVoAssembler.create(domAlert);
		
	}

	public ActivityVo saveActivity(ActivityVo activityVo) throws StaleObjectException, UniqueKeyViolationException
	{
		if (!activityVo.isValidated())
		{
			throw new DomainRuntimeException("Activity has not been validated");
		}
				
		DomainFactory factory = getDomainFactory();

		if(Activity.recordExistForNameAndIsActiveAndActivityType(factory, activityVo.getName(), activityVo.getIsActive(), getDomLookup( activityVo.getActivityType())))
		{
			if(activityVo.getID_ActivityIsNotNull())
			{
				Activity doConflictingActivity = Activity.getActivityFromactivity_unq1(factory, activityVo.getName(), activityVo.getIsActive(), getDomLookup( activityVo.getActivityType()));
				if(!doConflictingActivity.getId().equals(activityVo.getID_Activity()))
					throw new UniqueKeyViolationException("An " + (activityVo.getIsActive() ? "active" : "inactive") + " Activity of this Type and Name already exists");
			}
			else
				throw new UniqueKeyViolationException("An " + (activityVo.getIsActive() ? "active" : "inactive") + " Activity of this Type and Name already exists");
		}
			
 
		ims.core.resource.place.domain.objects.Activity domActivity = ActivityVoAssembler.extractActivity(factory, activityVo);				
		
		try
		{
			factory.save(domActivity);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("An activity with the same code mapping exists");
		}
		
		return ActivityVoAssembler.create(domActivity);
	}
	
	public ActivitySchedVo saveSchedActivity(ActivitySchedVo activityVo) throws ims.domain.exceptions.StaleObjectException, UniqueKeyViolationException
	{
		if(!activityVo.isValidated())
			throw new DomainRuntimeException("ActivitySchedVo not validated");
		
		DomainFactory factory = getDomainFactory();
		
		//TODO this implementation is not ideal - the recordExistForNameAndIsActiveAndActivityType should really take the record id attemptimg to be saved if applicable(update) as a param
		//instead of calling getActivityFromactivity_unq1 to check that the conflict is not with this record itself(update)
		if(Activity.recordExistForNameAndIsActiveAndActivityType(factory, activityVo.getName(), activityVo.getIsActive(), getDomLookup( activityVo.getActivityType())))
		{
			if(activityVo.getID_ActivityIsNotNull())
			{
				Activity doConflictingActivity = Activity.getActivityFromactivity_unq1(factory, activityVo.getName(), activityVo.getIsActive(), getDomLookup( activityVo.getActivityType()));
				if(!doConflictingActivity.getId().equals(activityVo.getID_Activity()))
					throw new UniqueKeyViolationException("An " + (activityVo.getIsActive() ? "active" : "inactive") + " Activity of this Type and Name already exists");
			}
			else
				throw new UniqueKeyViolationException("An " + (activityVo.getIsActive() ? "active" : "inactive") + " Activity of this Type and Name already exists");
		}
		
		Activity doActivity = ActivitySchedVoAssembler.extractActivity(factory, activityVo);
		
		try
		{
			factory.save(doActivity);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("An activity with the same code mapping exists");
		}
		
		return ActivitySchedVoAssembler.create(doActivity);
	}

	public ActivityVoCollection listNTPFActivities(Boolean isActive, LookupInstanceCollection activityTypeInstancesToExclude) 
	{
	    DomainFactory factory = getDomainFactory();		
	    
	    String hql = " from Activity act "; 
	    ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	  
	    if(isActive != null)
	    {
	    	condStr.append(andStr + " act.isActive = :isActive" );
			markers.add("isActive");
			values.add(isActive);		
			andStr = " and ";
	    }
	    if(activityTypeInstancesToExclude != null)
	    {
	    	for(int i=0;i<activityTypeInstancesToExclude.size();i++)
	    	{
	    		String paramName = "actType" + String.valueOf(i);
	    		condStr.append(andStr + " act.activityType <> " + ":" + paramName );
				markers.add(paramName);
				values.add(getDomLookup(activityTypeInstancesToExclude.getIndex(i)));		
				andStr = " and ";
	    	}
	    }
		
	    if(andStr.equals( " and "))
	    	hql += " where ";
	    
	    hql += condStr.toString();
	    List activities = factory.find(hql,markers,values);
	    return ActivityVoAssembler.createActivityVoCollectionFromActivity(activities).sort();		
		
	}


	public ActivitySchedVoCollection listSchedActivities(Boolean isActive)
	{	
		DomainFactory factory = getDomainFactory();
	
		if(isActive == null)
			return ActivitySchedVoAssembler.createActivitySchedVoCollectionFromActivity(factory.listDomainObjects(Activity.class));
		
		return ActivitySchedVoAssembler.createActivitySchedVoCollectionFromActivity(factory.find(" select act from Activity act left join act.activityType as type where act.isActive = :isActive and type.id=-599" , new String[]{"isActive"},new Object[]{isActive}));
	}
}
