//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.53 build 2641.15357)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.AuditList;
import ims.admin.domain.base.impl.BaseReadAuditViewImpl;
import ims.admin.vo.domain.AppUserShortVoAssembler;
import ims.configuration.ReadAudit;
import ims.core.patient.domain.objects.Patient;
import ims.core.resource.place.domain.objects.Location;
import ims.core.vo.ReadAuditVo;
import ims.core.vo.ReadAuditVoCollection;
import ims.core.vo.domain.PatientShortAssembler;
import ims.domain.DomainFactory;
import ims.framework.enumerations.SortOrder;

public class ReadAuditViewImpl extends BaseReadAuditViewImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* List Read Audit Records based on the search criteria passed as parameters to the method
	*/
	public ims.core.vo.ReadAuditVoCollection listReadAuditRecords(ims.core.vo.ReadAuditFilterVo filter)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" select audit from ReadAudit audit ");
		
		String andStr = " ";
		StringBuffer clause = new StringBuffer();
		
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		if (filter.getAuditUserIsNotNull())
		{
	
			clause.append(andStr + " audit.auditUser = :username");
			names.add("username");
			values.add(filter.getAuditUser());		
			andStr = " and ";
		}
		
		if (filter.getHostNameIsNotNull())
		{
			if (filter.getHostName().indexOf("%") >= 0)
				clause.append(andStr + " audit.auditHost like :hostname");
			else
				clause.append(andStr + " audit.auditHost = :hostname");
			names.add("hostname");
			values.add(filter.getHostName());		
			andStr = " and ";
		}
			
		
		if (filter.getAction() != null)
		{
			clause.append(andStr + " audit.auditAction = :action");
			names.add("action");
			values.add(filter.getAction());		
			andStr = " and ";
		}
	
		if (filter.getDateFrom() != null)
		{
			clause.append(andStr + " audit.auditDateTime >= :dateFrom" );
			names.add("dateFrom");
			values.add(filter.getDateFrom().getDate());		
			andStr = " and ";
		}
		if (filter.getDateTo() != null)
		{
			clause.append(andStr + " audit.auditDateTime <= :dateTo" );
			names.add("dateTo");
			values.add(filter.getDateTo().copy().addDay(1).getDate());		
			andStr = " and ";
		}
		if (filter.getPatient() != null)
		{
			hql.append(", Patient p join p.identifiers pid ");
			clause.append(andStr).append(" pid.type = :idType and pid.value = :idValue ");
			andStr = " and ";
			clause.append(andStr).append(" audit.patientId = p.id " );
			names.add("idType");
			names.add("idValue");
			values.add(getDomLookup(filter.getPatient().getType()));
			values.add(filter.getPatient().getValue());
			
		}
		
		if (filter.getAuditLocationIsNotNull())
		{
			clause.append(andStr + " audit.auditUserLocation = :auditLocation");
			names.add("auditLocation");
			values.add(filter.getAuditLocation().getID_Location());
			andStr = " and ";
		}
		
		if (andStr.equals(" and "))
		{
			hql.append(" where ");
		}
		hql.append(clause.toString());

		String[] snames = new String[names.size()];
		names.toArray(snames);

		ReadAuditVoCollection coll = new ReadAuditVoCollection();
		List audits  = factory.find(hql.toString(), snames, values.toArray());
		for (int i=0; i<audits.size(); i++)
		{
			ReadAudit inf = (ReadAudit)audits.get(i);
			ReadAuditVo vo = new ReadAuditVo();
			vo.setAction(inf.getAuditAction());
			java.util.Date dateTime = inf.getAuditDateTime();
			if (  null != dateTime ) 
			{
				vo.setAuditDateTime(new ims.framework.utils.DateTime(dateTime));
			}
			
			vo.setAuditUser(inf.getAuditUser());
			vo.setHostName(inf.getAuditHost());
			
			if (inf.getAuditUserLocation() != null)
			{
				Location domLoc = (Location) factory.getDomainObject(Location.class, inf.getAuditUserLocation());
				if (domLoc != null)
					vo.setLocation(domLoc.getName());
			}
			
			// Get Patient Information
			Patient domPatient = (Patient) factory.getDomainObject(Patient.class, inf.getPatientId().intValue());
			vo.setPatient(PatientShortAssembler.create(domPatient));
			coll.add(vo);
		}
		return coll.sort(SortOrder.DESCENDING);

	}

	/**
	* List all app users for the combo
	*/
	public ims.admin.vo.AppUserShortVoCollection listAppUsers(java.lang.String name)
	{
		StringBuilder query = new StringBuilder();
		query.append("from AppUser as user where user.username != 'imsadmin' ");
		
		if (name != null)
		{
			query.append(" and (UPPER(user.username) LIKE :NAME)");
			
			ArrayList<String> paramNames = new ArrayList<String>();
			paramNames.add("NAME");
			ArrayList<Object> paramValues = new ArrayList<Object>();
			paramValues.add("%" + name.toUpperCase() + "%");
			
			return AppUserShortVoAssembler.createAppUserShortVoCollectionFromAppUser(getDomainFactory().find(query.toString(), paramNames, paramValues));
		}
		
		return AppUserShortVoAssembler.createAppUserShortVoCollectionFromAppUser(getDomainFactory().find(query.toString()));
	}

	/**
	* Lists all active locations for the given value
	*/
	public ims.core.vo.LocationLiteVoCollection listActiveLocations(String value)
	{
		AuditList audit = (AuditList)super.getDomainImpl(AuditListImpl.class);
		return audit.listActiveLocations(value);
	}
}
