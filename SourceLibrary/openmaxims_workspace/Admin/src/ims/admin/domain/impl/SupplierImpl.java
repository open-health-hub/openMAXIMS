//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.43 build 2229.25474)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.base.impl.BaseSupplierImpl;
import ims.core.resource.place.domain.objects.Organisation;
import ims.core.vo.LocSiteVo;
import ims.core.vo.OrgShortVo;
import ims.core.vo.OrgShortVoCollection;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.domain.OrgShortVoAssembler;
import ims.core.vo.lookups.OrganisationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.vo.ValueObjectRef;

public class SupplierImpl extends BaseSupplierImpl
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public OrgShortVo saveOrganisationShort(OrgShortVo organisation) throws StaleObjectException, UniqueKeyViolationException
	{
		/*String result = "";*/
		
		DomainFactory factory = getDomainFactory();
		Organisation doOrg = OrgShortVoAssembler.extractOrganisation(factory, organisation);
		
		/*String serviceActivityUnique = isTaxonomyUnique(organisation.getCodeMappings());
			result += serviceActivityUnique;

		if(result.length() > 0)
			throw new UniqueKeyViolationException(result);		*/
		
		try
		{
			doOrg.setUpperNames();
			factory.save(doOrg);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("An Organisation with this details already exists within the system, please change", e);
		}

		return OrgShortVoAssembler.create(doOrg);
	}

	public OrgShortVoCollection listOrganisationForType(OrganisationType type, OrgShortVo voOrgShort, Boolean bActive)
	{
		if (type == null)
			throw new DomainRuntimeException("No type provided for listOrganisationForType");

		DomainFactory factory = getDomainFactory();
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		String hql = " from Organisation o ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		List orgs = null;
		condStr.append(andStr + " o.type.id = " + type.getID());
		andStr = " and ";

		if (voOrgShort != null && voOrgShort.getNameIsNotNull())
		{			
			String name = voOrgShort.getName();
			if (name.endsWith("%")) 
				name = name.substring(0,name.length()-1);
				
			condStr.append(andStr + " (upper(o.name) like :orgName ");
			markers.add("orgName");
			values.add("%"+ name.toUpperCase() + "%"); 			
			condStr.append(")");	
			andStr = " and ";
		}
		
		if (bActive != null)
		{
			condStr.append(andStr + "o.isActive = :active");
			markers.add("active");
			values.add(bActive);
		}

		hql += " where ";
		hql += condStr.toString();

		orgs = factory.find(hql, markers, values, 1000);

		OrgShortVoCollection voCollOrgs = OrgShortVoAssembler.createOrgShortVoCollectionFromOrganisation(orgs);
		voCollOrgs.sort();
		return voCollOrgs;
	}
	
	public String isTaxonomyUnique(TaxonomyMapCollection map)
	{
		DomainFactory factory = getDomainFactory();	
		
		if (map != null)
		{
			String result = "";
			for (int i = 0; i < map.size(); i++) 
			{
				java.util.List list = factory.find("select  l1_1.id, l1_1.name, l1_1.parentOrganisation.id, t1_1.taxonomyCode, l2_1.id from LocSite as l1_1 left join l1_1.codeMappings as t1_1 left join t1_1.taxonomyName as l2_1 where (t1_1.taxonomyCode = :code and l2_1.id = :name)", new String[]{"code" ,"name"}, new Object[]{map.get(i).getTaxonomyCode(), new Integer(map.get(i).getTaxonomyName().getID())});

				LocSiteVo itemLoc = new LocSiteVo();
				
				for (Iterator iter = list.iterator(); iter.hasNext();)
				{
					Object[] element = (Object[]) iter.next();
					itemLoc.setID_Location((Integer)element[0]);
					itemLoc.setName((String)element[1]);	
				}
				
				if (list.size() != 0 && 
						map.get(i).getTaxonomyCodeIsNotNull() &&
							itemLoc.getNameIsNotNull() &&
								map.get(i).getTaxonomyNameIsNotNull())
									result = "Item named '"+itemLoc.getName()+"' already has a "+(map.get(i).getTaxonomyName().toString()+" mapping with code = "+ map.get(i).getTaxonomyCode());
					
			}	
			return result;
		}
		
		return "";
	}

	public String checkExchequerCodeIsUnique(String taxonomyCode, ValueObjectRef refVo)
	{
		OrganisationAndLocation orgLocImpl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return orgLocImpl.checkExchequerCodeIsUnique(taxonomyCode, refVo);
	}

	public OrgShortVo getOrganisationShort(String name) 
	{
		if(name == null)
			throw new CodingRuntimeException("The Organisation Name must not be null. ");

		if(name != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from Organisation as o1_1 where  "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " o1_1.name = :NAME");
 			markers.add("NAME");
			values.add(name);
			andStr = " and ";	
			hql.append(andStr + " o1_1.isActive  = :ACTIVE");
 			markers.add("ACTIVE");
			values.add(Boolean.TRUE);
			
			List list = factory.find(hql.toString(), markers,values);
			if(list != null && list.size() > 0)
			{ 
				OrgShortVoCollection voColl = OrgShortVoAssembler.createOrgShortVoCollectionFromOrganisation(list);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}

	//wdev-11926
	public OrgShortVoCollection getOrganisationShortCollection(String name) 
	{
		if(name == null)
			throw new CodingRuntimeException("The Organisation Name must not be null. ");

		if(name != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from Organisation as o1_1 where  "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " o1_1.name = :NAME");
 			markers.add("NAME");
			values.add(name);
			andStr = " and ";	
			hql.append(andStr + " o1_1.isActive  = :ACTIVE");
 			markers.add("ACTIVE");
			values.add(Boolean.TRUE);
			
			List list = factory.find(hql.toString(), markers,values);
			if(list != null && list.size() > 0)
			{ 
				OrgShortVoCollection voColl = OrgShortVoAssembler.createOrgShortVoCollectionFromOrganisation(list);
				return voColl;
			}
		}
		return null;

	}
	//----
	
	
}
