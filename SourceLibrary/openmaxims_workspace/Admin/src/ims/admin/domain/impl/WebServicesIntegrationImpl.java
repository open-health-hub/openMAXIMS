//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;

import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import java.io.IOException;
import java.lang.reflect.*;

import javax.xml.rpc.soap.SOAPFaultException;

import org.apache.xerces.parsers.DOMParser;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;

import ims.admin.domain.ApplicationForms;
import ims.admin.domain.ApplicationRoles;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.base.impl.BaseWebServicesIntegrationImpl;
import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportTemplateVoCollection;
import ims.admin.vo.ReportVo;
import ims.admin.vo.ReportVoCollection;
import ims.admin.vo.SecurityParamVo;
import ims.admin.vo.SecurityParamVoCollection;
import ims.admin.vo.SecurityTokenVo;
import ims.admin.vo.domain.ReportListVoAssembler;
import ims.admin.vo.domain.ReportTemplateVoAssembler;
import ims.admin.vo.domain.ReportVoAssembler;
import ims.admin.vo.domain.SecurityTokenVoAssembler;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.ReportBo;
import ims.core.admin.domain.objects.SecurityToken;
import ims.core.admin.domain.objects.TemplateBo;

import ims.core.vo.Patient;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.DomainFactory;
import ims.domain.DomainSession;
import ims.domain.SessionData;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImplFlyweightFactory;
import ims.framework.SessionConstants;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.interfaces.IAppForm;
import ims.framework.interfaces.IAppRole;
import ims.framework.interfaces.IAppRoleLight;
import ims.framework.interfaces.IAppUser;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;

public class WebServicesIntegrationImpl extends BaseWebServicesIntegrationImpl
{	
	private static final long serialVersionUID = 1L;
	
	private String getSecurityToken(java.util.HashMap<String, String> parameters) throws StaleObjectException
	{		
		SecurityTokenVo securityTokenVo = new SecurityTokenVo();
		SecurityParamVoCollection params = new SecurityParamVoCollection();
		
		String securityToken = UUID.randomUUID().toString();
		securityTokenVo.setTokenID(securityToken);
		securityTokenVo.setExpirationTimeStamp(new DateTime().addMinutes(10));
		  
		List<Object> listParams = new ArrayList<Object>(parameters.entrySet());  
		Iterator<Object> iter = listParams.iterator();  
		while(iter.hasNext())
		{  
			Map.Entry<?, ?> entry = (Map.Entry<?, ?>) iter.next();  
			SecurityParamVo securityTokenParamVo = new SecurityParamVo();
			securityTokenParamVo.setItem((String) entry.getKey());
			securityTokenParamVo.setValue((String) entry.getValue());
			params.add(securityTokenParamVo);
		}  
						
		securityTokenVo.setParams(params);				
		
		DomainFactory factory = getDomainFactory();
		SecurityToken securityTokenDom = SecurityTokenVoAssembler.extractSecurityToken(factory, securityTokenVo);		
		factory.save(securityTokenDom);
		
		return securityToken;
	}

	public void setPatientIdentifierTypeAndValue(String identifierType, String identifierValue) 
	{	
		if ((identifierType == null || identifierType.trim().length() == 0) ||
				(identifierValue == null || identifierValue.trim().length() == 0))
		{
			createSOAPFault(SystemLogLevel.WARNING, "'identifierType' and 'identifierValue' cannot be null")
	;
		}
		
		HashMap<String, String> parameters = new HashMap<String, String>();
		parameters.put(identifierType, identifierValue);
		
		SessionData sessData = getSessionData();		
		sessData.securityTokenParameters.set(parameters);		
	}
	
	private void createSOAPFault(SystemLogLevel logLevel, String faultString)
	{
		 createSystemLogEntry(SystemLogType.WEB_SERVICE,logLevel, getSessionData().securityTokenLaunchUsername.get(), "", faultString);
		 throw new SOAPFaultException(null, faultString, null, null);
	}
	
	public void setPatientIdentifier(String sessionToken, String identifierValue) 
	{	
		if (identifierValue == null || identifierValue.trim().length() == 0)
		{			
			createSOAPFault(SystemLogLevel.ERROR, "'identifierValue' cannot be null");
		}
		
		SessionData sessData = getSessionData();
		sessData.securityTokenPatientIdentifierValue.set(identifierValue);		
	}
	
	public void setPatientIdentifierType(String sessionToken, String identifierType)
	{
		if (identifierType == null || identifierType.trim().length() == 0)
		{			
			createSOAPFault(SystemLogLevel.ERROR,"'identifierType' cannot be null");
		}
		
		SessionData sessData = getSessionData();
		sessData.securityTokenPatientIdentifierType.set(identifierType);
	}

	public void setUserLocation(String sessionToken, String location) 
	{
		ILocation loc = getLocationLiteByTaxonomyType(location,TaxonomyType.WEB_SERVICE);
		if (loc == null)
		{		
			createSOAPFault(SystemLogLevel.ERROR, "'location' not found");
		}
		SessionData sessData = getSessionData();
		sessData.selectedLocation.set(loc);
	}
 
	public ILocation getLocationLiteByTaxonomyType(String extId, TaxonomyType taxType)
	{	
		OrganisationAndLocation orgImpl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return orgImpl.getLocationLiteByTaxonomyType(extId, taxType);		
	}
	
	public void setStartupForm(String sessionToken, String form) 
	{
		IAppForm appForm = getAppFormListByTaxonomyType(form, TaxonomyType.WEB_SERVICE);
		if (appForm == null)
		{		
			createSOAPFault(SystemLogLevel.ERROR, "'startupForm' not found");
		}
		SessionData sessData = getSessionData();
		sessData.openForm.set(Integer.valueOf(appForm.getFormId()));	
	}
	
	public IAppForm getAppFormListByTaxonomyType(String extId, TaxonomyType taxType)
	{	
		ApplicationForms impl = (ApplicationForms) getDomainImpl(ApplicationFormsImpl.class);
		return impl.getAppFormListByTaxonomyType(extId, taxType);		
	}
	
	public void setUserRole(String sessionToken, String role) 
	{	
		IAppRole appRole = getAppRoleByTaxonomyType(role, TaxonomyType.WEB_SERVICE);
		if (appRole == null)
		{		
			createSOAPFault(SystemLogLevel.ERROR, "'role' not found");
		}
		
		IAppUser user = getLoggedInUser();
		if (user != null)
		{
			IAppRoleLight userRole = user.getAppRole(appRole.getId());
			if (userRole == null)
			{		
				createSOAPFault(SystemLogLevel.WARNING, "User '" + user.getUsername() + "' doesn't have assigned role '" + appRole.getName() + "'");
			}
		}
		else
		{
			createSOAPFault(SystemLogLevel.WARNING, "WebService error: setUserRole - \n loggedin user is null");
		}
		
		SessionData sessData = getSessionData();
		sessData.role.set(appRole);			
	}
	
	public IAppRole getAppRoleByTaxonomyType(String extId, TaxonomyType taxType)
	{	
		ApplicationRoles impl = (ApplicationRoles) getDomainImpl(ApplicationRolesImpl.class);
		return impl.getAppRoleByTaxonomyType(extId, taxType);		
	}
	
	private ims.domain.SessionData getSessionData()
	{
		SessionData sessData = (SessionData)this.getDomainFactory().getDomainSession().getAttribute(SessionConstants.SESSION_DATA);
		
		if (sessData == null) {
			 throw new SOAPFaultException(null, "getSessionData(): sessionData cannot be null", null, null);
		}
		
		return sessData;
	}
	
	public void restrictPatientAccess(String sessionToken, String restrict) 
	{				
		//Default restrict patient access
		SessionData sessData = getSessionData();
		sessData.restrictPatientAccess.set("true");
		
		if (restrict.toLowerCase().equals("false"))
		{
			sessData.restrictPatientAccess.set("false");
		}		
	}

	public String getSecurityToken(String sessionToken) throws StaleObjectException 
	{
		PatientShort 		 patient 		  = new ims.core.vo.Patient();
		PatientIdCollection  patIdColl  	  = new ims.core.vo.PatientIdCollection();
		PatientId			 patId			  = new PatientId();
		
		SessionData sessData = getSessionData();
		HashMap<String, String> parameters = new HashMap<String, String>();
		String securityToken = null;
		if (sessData.securityTokenParameters.get() != null && sessData.securityTokenParameters.get().size() > 0)
		{
			sessData.securityTokenPatientIdentifierType.set(null);
			sessData.securityTokenPatientIdentifierValue.set(null);									
		}
		else if (sessData.securityTokenPatientIdentifierType.get() != null &&
					sessData.securityTokenPatientIdentifierType.get().length() > 0 &&
						sessData.securityTokenPatientIdentifierValue.get() != null &&
							sessData.securityTokenPatientIdentifierValue.get().length() > 0 &&
								(sessData.securityTokenParameters.get() == null || sessData.securityTokenParameters.get().size() == 0))
		{			
			parameters.put(sessData.securityTokenPatientIdentifierType.get(), sessData.securityTokenPatientIdentifierValue.get());		
		}
		
		//Set Login username and password
		parameters.put("username", sessData.securityTokenLaunchUsername.get());
		parameters.put("password", sessData.securityTokenLaunchPassword.get());
		
		//Restrict Patient
		parameters.put("restrictPatient", sessData.restrictPatientAccess.get() == null ? "True" : sessData.restrictPatientAccess.get());
		
		//Set Location
		if (sessData.selectedLocation.get() != null)
		{
			parameters.put("locationId", Integer.valueOf(sessData.selectedLocation.get().getID()).toString());
		}
		
		//Set Role
		if (sessData.role.get() != null)
		{
			parameters.put("roleId", Integer.valueOf(sessData.role.get().getId()).toString());
		}
		
		//Set StartUp form
		if (sessData.openForm.get() != null)
		{
			parameters.put("startupFormId", Integer.valueOf(sessData.openForm.get()).toString());
		}
		
		sessData.securityTokenParameters.set(parameters);		
		securityToken = getSecurityToken(sessData.securityTokenParameters.get());
				
		//Check is Patient exist
		//Set Type and Value
		String type = sessData.securityTokenPatientIdentifierType.get();
		String value = sessData.securityTokenPatientIdentifierValue.get();
		boolean foundPatType = false;
		for (int j = 0; j < PatIdType.getNegativeInstanceNames().length; j++) 
		{
			if (PatIdType.getNegativeInstanceNames()[j].equals(type.toUpperCase()))
			{
				foundPatType = true;
				PatIdType lookupInstance = PatIdType.getNegativeInstance(PatIdType.getNegativeInstanceNames()[j]);
				patId.setType(lookupInstance);
				patId.setValue(value);
				patIdColl.add(patId);
				break;							
			}									
		}  
		
		if (Boolean.FALSE.equals(foundPatType))
		{
			createSOAPFault(SystemLogLevel.WARNING, "'identifierType' not found");
		}
		
		patient.setIdentifiers(patIdColl);
						
		Patient pat = null;
		try 
		{
			String message = "";
			if (ConfigFlag.FW.DEBUG_WEB_SERVICES.getValue()) 
			{
				message = "Call getSecurityToken with parameters: " +							
							(sessData.securityTokenLaunchUsername.get() != null ? "\nUsername: " + sessData.securityTokenLaunchUsername.get() : "") +
							(sessData.securityTokenLaunchPassword.get() != null ? "\nPassword: " + sessData.securityTokenLaunchPassword.get() : "") + 
							(sessData.selectedLocation.get() != null ? "\nLocation Id: " + sessData.selectedLocation.get().getID() : "" ) + 
							(sessData.role.get() != null ? "\nRole Id: " + sessData.role.get().getId() : "" ) +
							"\nPatient Identifier Type: " + type +
							"\nPatient Identifier Value: " + value;
			}
			else 
			{
				message = "Call getSecurityToken";
			}
			
 			createSystemLogEntry(SystemLogType.WEB_SERVICE, SystemLogLevel.INFORMATION, sessData.securityTokenLaunchUsername.get(), "", message);
			
			pat = getPatient(patient);
			if (pat == null)
			{				
				createSOAPFault(SystemLogLevel.WARNING, "'Patient' not found");
			}
			else
			{
				if (ConfigFlag.FW.DEBUG_WEB_SERVICES.getValue()) 
				{
					createSystemLogEntry(SystemLogType.WEB_SERVICE, SystemLogLevel.INFORMATION, sessData.securityTokenLaunchUsername.get(), "", "Found patient: " + pat.getPatientInfo());
				}
				else 
				{
					createSystemLogEntry(SystemLogType.WEB_SERVICE, SystemLogLevel.INFORMATION, sessData.securityTokenLaunchUsername.get(), "", "Found patient");
				}
			}
		}
		catch (Exception e) 
		{			
			createSOAPFault(SystemLogLevel.WARNING, e.getMessage());
		}
		
		if (ConfigFlag.FW.DEBUG_WEB_SERVICES.getValue()) 
		{
			createSystemLogEntry(SystemLogType.WEB_SERVICE, SystemLogLevel.INFORMATION, sessData.securityTokenLaunchUsername.get(), "", "Return security token: " + securityToken);
		}
		else 
		{
			createSystemLogEntry(SystemLogType.WEB_SERVICE, SystemLogLevel.INFORMATION, sessData.securityTokenLaunchUsername.get(), "", "Return security token");
		}
		
		return securityToken;
	}
	
	private Patient getPatient(PatientShort patientShort) throws Exception 
	{						
		DomainSession domainSession = DomainSession.getSession();		
		DomainImplFlyweightFactory factory = DomainImplFlyweightFactory.getInstance();
		
		Object instance = factory.create(Class.forName("ims.core.domain.impl.DemographicsImpl"), domainSession);		
		Class<?> demographicsImpl = instance.getClass();
		
		final Method getPatientMethod = demographicsImpl.getDeclaredMethod("getPatient", PatientShort.class);	
		AccessController.doPrivileged(new PrivilegedAction<Object>() 
		{
			public Object run() 
			{
				getPatientMethod.setAccessible(true);
		        return null;
		    }
		});

		Object patient = getPatientMethod.invoke( instance, new Object[] { patientShort } );	  
		
		return (Patient) patient;
     }

	public byte[] buildReport(String templateId, String imsId,
			String templateName, String reportId, String format) {
		// TODO Auto-generated method stub
		return null;
	}

	public String buildReportAsUrl(String templateId, String imsId,
			String templateName, String reportId, String format) 
	{		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		if (urlQueryServer == null || urlQueryServer.trim().length() == 0) {
			createSOAPFault(SystemLogLevel.ERROR, "Error: QUERY_SERVER_URL ConfigFlag is not set");
			return null;
		}
			
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		if (urlReportServer == null || urlReportServer.trim().length() == 0) {
			createSOAPFault(SystemLogLevel.ERROR, "Error: REPORT_SERVER_URL ConfigFlag is not set");
			return null;
		}
		
		DomainFactory factory = getDomainFactory();
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, getSession().getSessionId());
						   client.setQueryServer(ConfigFlag.GEN.QUERY_SERVER_URL.getValue());		
		
		boolean hasSeeds = hasSeeds(getDomainFactory().getDomainSession());
		boolean hasTemplateId = templateId != null && templateId.trim().length() > 0;
		boolean hasImsId = imsId != null && imsId.trim().length() > 0;
		boolean hasTemplateName = templateName != null && templateName.trim().length() > 0;
		boolean hasReportId = reportId != null && reportId.trim().length() > 0;
		if (format == null || format.trim().length() == 0) format = "PDF";
		
		try
		{
			if(hasTemplateId)			
			{
				ReportTemplateVo template = getTemplate(new Integer(templateId).intValue());
				if (hasSeeds)
					client = setClientSeeds(client, template.getReport(), (HashMap) factory.getDomainSession().getAttribute("seeds"));
				
				return client.buildReportAsUrl(template.getReport().getReportXml(), template.getTemplateXml(), urlReportServer, format, "", 1);
			}	
			else if(hasImsId)			
			{
				ReportVo report = getReportByImsId(imsId);
				ReportTemplateVoCollection templates = report.getTemplates();
				int activeCount = 0;
				for (int i = 0; i < templates.size(); i++) 
				{
					if (templates.get(i).getIsActive())
						activeCount ++;
				}
				
				if (activeCount == 0)
				{
					createSOAPFault(SystemLogLevel.ERROR, "No active templates found!");
					return null;
				}
				if (activeCount > 1)
				{
					createSOAPFault(SystemLogLevel.ERROR, "More than one active template: total active templates " + activeCount);
					return null;
				}
				if (hasSeeds)
					client = setClientSeeds(client, report, (HashMap) factory.getDomainSession().getAttribute("seeds"));
				
				return client.buildReportAsUrl(report.getReportXml(), report.getTemplates().get(0).getTemplateXml(), urlReportServer, format, "", 1);
			}	
			else if(hasReportId)			
			{
				ReportVo report = getReport(reportId);
				ReportTemplateVoCollection templates = report.getTemplates();
				int activeCount = 0;
				for (int i = 0; i < templates.size(); i++) 
				{
					if (templates.get(i).getIsActive())
						activeCount ++;
				}
				
				if (activeCount == 0)
				{
					createSOAPFault(SystemLogLevel.ERROR, "No active templates found!");
					return null;
				}
				if (activeCount > 1)
				{
					createSOAPFault(SystemLogLevel.ERROR, "More than one active template: total active templates " + activeCount);
					return null;
				}
					
				if (hasSeeds)
					client = setClientSeeds(client, report, (HashMap) factory.getDomainSession().getAttribute("seeds"));
				
				return client.buildReportAsUrl(report.getReportXml(), report.getTemplates().get(0).getTemplateXml(), urlReportServer, format, "", 1);
			}	
			else if(hasTemplateName)			
			{
				ReportTemplateVo template = getTemplateByName(templateName);
				if (hasSeeds)
					client = setClientSeeds(client, template.getReport(), (HashMap) factory.getDomainSession().getAttribute("seeds"));
								
				return client.buildReportAsUrl(template.getReport().getReportXml(), template.getTemplateXml(), urlReportServer, format, "", 1);
			}
		}
		catch (Exception error)
		{
			createSOAPFault(SystemLogLevel.ERROR, "Error: " + error.toString());
			return null;
		}
		
		return null;
	}
	
	private QueryBuilderClient setClientSeeds(QueryBuilderClient client, ReportVo report, HashMap seeds) throws SAXException, IOException, NumberFormatException, ClassNotFoundException
	{			
		Iterator iterator = seeds.keySet().iterator();  
		while (iterator.hasNext()) 
		{  
		   String key = iterator.next().toString();  
		   String value = seeds.get(key).toString(); 
		  
		   DOMParser parser = new DOMParser();
		   org.xml.sax.InputSource inputSource = new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(report.getReportXml().getBytes("UTF-8")));
		   inputSource.setEncoding("UTF-8");
		   parser.parse(inputSource);
		   Document doc = parser.getDocument();
				
		   NodeList listOfSeeds = doc.getElementsByTagName("Seed");           
           System.out.println("Total no of seeds : " + listOfSeeds.getLength());
		
           for(int i=0; i < listOfSeeds.getLength() ; i++)
           {
               Node firstNode = listOfSeeds.item(i);
               if(firstNode.getNodeType() == Node.ELEMENT_NODE)
               {
                   Element firstElement = (Element)firstNode;
                   
                   NodeList nameList = firstElement.getElementsByTagName("Name");
                   Element nameElement = (Element)nameList.item(0);
                   NodeList textNameList = nameElement.getChildNodes();

                   NodeList typeList = firstElement.getElementsByTagName("Type");
                   Element typeElement = (Element)typeList.item(0);
                   NodeList textTypeList = typeElement.getChildNodes();
                   
                   if (key.equals(((Node)textNameList.item(0)).getNodeValue().trim()))
                   {
						client.addSeed(new SeedValue(key, new Integer(value), Class.forName(((Node)textTypeList.item(0)).getNodeValue().trim())));	
                   }
               }
           }
        }
		
		return client;
	}

	public String buildReportAsUrlInlineFrame(String templateId, String imsId,
			String templateName, String reportId, String format) 
	{		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		if (urlQueryServer == null || urlQueryServer.trim().length() == 0) {
			createSOAPFault(SystemLogLevel.ERROR, "Error: QUERY_SERVER_URL ConfigFlag is not set");
			return null;
		}
			
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		if (urlReportServer == null || urlReportServer.trim().length() == 0) {
			createSOAPFault(SystemLogLevel.ERROR, "Error: REPORT_SERVER_URL ConfigFlag is not set");
			return null;
		}
		
		DomainFactory factory = getDomainFactory();
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, getSession().getSessionId());
						   client.setQueryServer(ConfigFlag.GEN.QUERY_SERVER_URL.getValue());		
		
		boolean hasSeeds = hasSeeds(getDomainFactory().getDomainSession());
		boolean hasTemplateId = templateId != null && templateId.trim().length() > 0;
		boolean hasImsId = imsId != null && imsId.trim().length() > 0;
		boolean hasTemplateName = templateName != null && templateName.trim().length() > 0;
		boolean hasReportId = reportId != null && reportId.trim().length() > 0;
		if (format == null || format.trim().length() == 0) format = "PDF";
		
		try
		{			
			if(hasTemplateId)			
			{
				ReportTemplateVo template = getTemplate(new Integer(templateId).intValue());
				if (hasSeeds)
					client = setClientSeeds(client, template.getReport(), (HashMap) factory.getDomainSession().getAttribute("seeds"));
				
				return client.buildReportAsUrlInlineFrame(template.getReport().getReportXml(), template.getTemplateXml(), urlReportServer, format, "", 1);
			}	
			else if(hasImsId)			
			{
				ReportVo report = getReportByImsId(imsId);
				ReportTemplateVoCollection templates = report.getTemplates();
				int activeCount = 0;
				for (int i = 0; i < templates.size(); i++) 
				{
					if (templates.get(i).getIsActive())
						activeCount ++;
				}
				
				if (activeCount == 0)
				{
					createSOAPFault(SystemLogLevel.ERROR, "No active templates found!");
					return null;
				}
				if (activeCount > 1)
				{
					createSOAPFault(SystemLogLevel.ERROR, "More than one active template: total active templates " + activeCount);
					return null;
				}
				if (hasSeeds)
					client = setClientSeeds(client, report, (HashMap) factory.getDomainSession().getAttribute("seeds"));
				
				return client.buildReportAsUrlInlineFrame(report.getReportXml(), report.getTemplates().get(0).getTemplateXml(), urlReportServer, format, "", 1);
			}	
			else if(hasReportId)			
			{
				ReportVo report = getReport(reportId);
				ReportTemplateVoCollection templates = report.getTemplates();
				int activeCount = 0;
				for (int i = 0; i < templates.size(); i++) 
				{
					if (templates.get(i).getIsActive())
						activeCount ++;
				}
				
				if (activeCount == 0)
				{
					createSOAPFault(SystemLogLevel.ERROR, "No active templates found!");
					return null;
				}
				if (activeCount > 1)
				{
					createSOAPFault(SystemLogLevel.ERROR, "More than one active template: total active templates " + activeCount);
					return null;
				}
				if (hasSeeds)
					client = setClientSeeds(client, report, (HashMap) factory.getDomainSession().getAttribute("seeds"));
				
				return client.buildReportAsUrlInlineFrame(report.getReportXml(), report.getTemplates().get(0).getTemplateXml(), urlReportServer, format, "", 1);
			}	
			else if(hasTemplateName)			
			{
				ReportTemplateVo template = getTemplateByName(templateName);
				if (hasSeeds)
					client = setClientSeeds(client, template.getReport(), (HashMap) factory.getDomainSession().getAttribute("seeds"));
				
				return client.buildReportAsUrlInlineFrame(template.getReport().getReportXml(), template.getTemplateXml(), urlReportServer, format, "", 1);
			}
		}
		catch (Exception error)
		{
			createSOAPFault(SystemLogLevel.ERROR, "Error: " + error.toString());
			return null;
		}
		
		return null;
	}
	
	public void addSeed(String name, String value) 
	{
		if (name == null || name.trim().length() ==0)
			return;
		
		if (value == null || value.trim().length() ==0)
			return;
		
		DomainFactory factory = getDomainFactory();
		DomainSession session = factory.getDomainSession();
		
		HashMap seeds = session.getAttribute("seeds") != null ? (session.getAttribute("seeds") instanceof HashMap ? (HashMap)session.getAttribute("seeds") : new HashMap()) : new HashMap() ;
		seeds.put(name, value);
		session.setAttribute("seeds", seeds);
		factory.setDomainSession(session);
	}
	
	private boolean hasSeeds(DomainSession session)
	{
		return session.getAttribute("seeds") != null ? (session.getAttribute("seeds") instanceof HashMap ? true : false) : false;		
	}
	
	private ReportTemplateVo getTemplate(int templateBoRefVoId)
	{
		DomainFactory factory = getDomainFactory();
		TemplateBo boTemplate = (TemplateBo) factory.getDomainObject(TemplateBo.class, templateBoRefVoId);
		return ReportTemplateVoAssembler.create(boTemplate);
	}
	
	private ReportVo getReport(String reportId)
	{
		DomainFactory factory = getDomainFactory();
		ReportBo boReport = (ReportBo) factory.getDomainObject(ReportBo.class, new Integer(reportId).intValue());
		return ReportVoAssembler.create(boReport);
	}
	
	private ReportTemplateVo getTemplateByName(String templateName)
	{
		StringBuffer hql = new StringBuffer();
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<String> values = new ArrayList<String>();
		
		hql.append("from TemplateBo as template where UPPER(template.name) like UPPER(:templateName)");
		markers.add("templateName");
		values.add(templateName);
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString(), markers, values);
		ReportTemplateVoCollection result = ReportTemplateVoAssembler.createReportTemplateVoCollectionFromTemplateBo(list);
				
		return result != null ? result.get(0) : null;		
	}
	
	private ReportVo getReportByImsId(String imsId)
	{
		StringBuffer hql = new StringBuffer();
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
		
		hql.append("from ReportBo as report where report.ImsId =:imsId");
		markers.add("imsId");
		values.add(new Integer(imsId).intValue());
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString(), markers, values);
		ReportVoCollection result = ReportVoAssembler.createReportVoCollectionFromReportBo(list);				
		
		return result != null ? result.get(0) : null;		
	}
	
	private ims.admin.vo.ReportListVoCollection searchReports(String reportName, String templateName)
	{
		StringBuffer hql = new StringBuffer();
		StringBuffer cond = new StringBuffer();
		
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";
		
		hql.append("select rep from ReportsCategory as cat right join cat.reports as rep left join rep.templates as tpl ");
		
		cond.append(andStr + "rep.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		cond.append(andStr + "UPPER(rep.reportName) like UPPER(:reportName)");
		markers.add("reportName");
		values.add(reportName);
		andStr = " and ";
		
		cond.append(andStr + "tpl.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);
		andStr = " and ";
		
		cond.append(andStr + "UPPER(tpl.name) like UPPER(:templateName)");
		markers.add("templateName");
		values.add(templateName);
		andStr = " and ";
		
		if (andStr.equals(" and "))
		{
			hql.append(" where ");
		}
		
		hql.append(cond.toString());
		
		DomainFactory factory = getDomainFactory();
		List list = factory.find(hql.toString(), markers, values);
		return ReportListVoAssembler.createReportListVoCollectionFromReportBo(list).sort();
	}
}
