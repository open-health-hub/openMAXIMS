//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.45 build 2334.40972)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import java.util.List;

import ims.admin.domain.base.impl.BaseReportTemplateBoRefImpl;
import ims.admin.vo.ReportTemplateBoRefVoCollection;
import ims.admin.vo.domain.ReportTemplateBoRefVoAssembler;
import ims.admin.vo.domain.ReportTemplateVoAssembler;
import ims.core.admin.domain.objects.ReportTemplateBoRef;
import ims.core.admin.vo.ReportTemplateBoRefRefVo;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.ForeignKeyViolationException;

public class ReportTemplateBoRefImpl extends BaseReportTemplateBoRefImpl
{
	private static final long serialVersionUID = 1L;

	/**
	* List all templates matching the given search criteria
	*/
	public ims.admin.vo.ReportTemplateVoCollection listTemplates(String searchFilter)
	{
		DomainFactory factory = getDomainFactory();
		String hql = " from TemplateBo tmp where upper(tmp.name) like upper(:name)";
		List lst = factory.find(hql, new String[]{"name"}, new Object[]{searchFilter});
		return ReportTemplateVoAssembler.createReportTemplateVoCollectionFromTemplateBo(lst);
	}

	/**
	* Returns the template assigned to the currently selected Business Object
	*/
	public ims.admin.vo.ReportTemplateBoRefVo getAssignedTemplate(String businessObject)
	{
		ReportTemplateBoRef domRep = ReportTemplateBoRef.getReportTemplateBoRefFromBusinessObj(getDomainFactory(), businessObject);
		return ReportTemplateBoRefVoAssembler.create(domRep);
	}

	/**
	* Saves the given report template and valueobject relationship
	*/
	public ims.admin.vo.ReportTemplateBoRefVo saveAssignedTemplates(ims.admin.vo.ReportTemplateBoRefVo reference) throws ims.domain.exceptions.StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		ReportTemplateBoRef domRep = ReportTemplateBoRefVoAssembler.extractReportTemplateBoRef(factory, reference);
		factory.save(domRep);
		return ReportTemplateBoRefVoAssembler.create(domRep);
	}

	public String[] listDomainObjectClasses()
	{
		DomainFactory factory = getDomainFactory();
		
		List list = factory.getDomainClasses();
		
		String[] result = new String[list.size()];
		
		for (int i = 0; i < list.size(); i++)
		{
			result[i] = (String) list.get(i);
		}
		return result;
	}

	public ReportTemplateBoRefVoCollection listAssignedTemplates()
	{
		return ReportTemplateBoRefVoAssembler.createReportTemplateBoRefVoCollectionFromReportTemplateBoRef(
				getDomainFactory().find("from ReportTemplateBoRef"));
	}

	public void removeLink(ReportTemplateBoRefRefVo item) throws ForeignKeyViolationException
	{
		DomainFactory factory = getDomainFactory();
		DomainObject domainObject = factory.getDomainObject(ReportTemplateBoRef.class, item.getID_ReportTemplateBoRef().intValue());
		if(domainObject != null)
			factory.delete(domainObject);
	}
}
