//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.60 build 2867.20478)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import ims.admin.domain.base.impl.BaseSecurityTokenAdminImpl;
import ims.admin.vo.SecurityParamVo;
import ims.admin.vo.SecurityParamVoCollection;
import ims.admin.vo.SecurityTokenVo;
import ims.admin.vo.SecurityTokenVoCollection;
import ims.admin.vo.domain.SecurityTokenVoAssembler;
import ims.core.admin.vo.SecurityTokenRefVo;
import ims.core.admin.domain.objects.SecurityToken;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.hibernate3.IMSCriteria;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

public class SecurityTokenAdminImpl extends BaseSecurityTokenAdminImpl
{

	private static final long serialVersionUID = 1L;

	public ims.admin.vo.SecurityTokenVoCollection listSecTokens(ims.framework.utils.Date forDate)
	{ 
		
        DomainFactory factory = getDomainFactory();
        String hql;
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
        
		if (forDate == null) 
			hql = " from SecurityToken secToken order by expirationTimeStamp";
		else
		{
			hql = " from SecurityToken secToken where expirationTimeStamp = :forDate";
			markers.add("forDate");
			values.add(forDate);
		}
		
		return SecurityTokenVoAssembler.createSecurityTokenVoCollectionFromSecurityToken(factory.find(hql, markers, values));

	}

	public void deleteSecToken(SecurityTokenRefVo voRefSecToken) 
	{
		DomainFactory factory = getDomainFactory();
		
		SecurityToken doSecToken = (SecurityToken) factory.getDomainObject(SecurityToken.class, voRefSecToken.getID_SecurityToken());
		try 
		{
			factory.delete(doSecToken);
		}
		catch (ForeignKeyViolationException e)
		{
			//can't really do anything here.
		}
	}

	public String getParameters(String uuid)
	{
		DomainFactory factory = getDomainFactory();
		IMSCriteria criteria = new IMSCriteria(ims.core.admin.domain.objects.SecurityToken.class,factory);
		criteria.equal("this.tokenID", uuid);
		List list=criteria.find();
		if (list.size()==0)
			return null;
		SecurityToken domObj=(SecurityToken)list.get(0);
		SecurityTokenVo vo = SecurityTokenVoAssembler.create(domObj);
		SecurityParamVoCollection coll = vo.getParams();
		
		for (SecurityParamVo vo2 : coll)
		{
			if("parameters".equals(vo2.getName()))
			{
				return vo2.getItem();
			}
		}
		
		return "";
	}

	public String getStartupToken(String serviceName, String parameters)
	{
		DomainFactory factory = getDomainFactory();

		SecurityTokenVo st= new SecurityTokenVo();
		String sessionId = UUID.randomUUID().toString();

		st.setTokenID(sessionId);
		st.setExpirationTimeStamp(new DateTime().addMinutes(10));
		SecurityParamVoCollection params = new SecurityParamVoCollection();
		SecurityParamVo sp1 = new SecurityParamVo();
		sp1.setItem("username");
//		sp1.setValue("emisuser");
		sp1.setValue(factory.getDomainSession().getUser().getUsername());
		params.add(sp1);
		SecurityParamVo sp2 = new SecurityParamVo();
		sp2.setItem("password");
//		sp2.setValue("emisuser");
		sp2.setValue(factory.getDomainSession().getUser().getClearPassword());
		params.add(sp2);
		SecurityParamVo sp3 = new SecurityParamVo();
		sp3.setItem("parameters");
		sp3.setValue(parameters);
		params.add(sp3);
		SecurityParamVo sp4 = new SecurityParamVo();
		sp4.setItem("sourceSystem");
		sp4.setValue(serviceName);
		params.add(sp4);
		st.setParams(params);
		
		
		SecurityToken stDom = SecurityTokenVoAssembler.extractSecurityToken(factory, st);
		try{
			factory.save(stDom);
		}
		catch (StaleObjectException soe)
		{
			soe.printStackTrace();
		}
		return sessionId;
		}

	public SecurityTokenVoCollection listStTikens(Date forDate)
	{
		return null;
	}

	public String getSecurityToken(String username, String password) throws DomainInterfaceException, StaleObjectException,	UniqueKeyViolationException 
	{
		if(username == null || username.length() == 0)
			throw new DomainInterfaceException("Can not generate security token for empty username.");
		
		if(password == null || password.length() == 0)
			throw new DomainInterfaceException("Can not generate security token for empty password.");
		
		DomainFactory factory = getDomainFactory();
		
		SecurityTokenVo st= new SecurityTokenVo();
		SecurityParamVoCollection params = new SecurityParamVoCollection();
		
		SecurityParamVo sp1 = new SecurityParamVo();
		sp1.setItem("username");
		sp1.setValue(username);
		params.add(sp1);
		
		SecurityParamVo sp2 = new SecurityParamVo();
		sp2.setItem("password");
		sp2.setValue(password);
		params.add(sp2);
		
		st.setParams(params);
		
		String securityToken = UUID.randomUUID().toString();
		st.setTokenID(securityToken);
		st.setExpirationTimeStamp(new DateTime().addMinutes(10));
		
		SecurityToken stDom = SecurityTokenVoAssembler.extractSecurityToken(factory, st);
		
		factory.save(stDom);
		
		return securityToken;
	}

//	public SecurityTokenVoCollection listSecTokens(Date forDate)
//	{
//		// TODO Auto-generated method stub
//		return null;
//	}
}
