//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by John MacEnri using IMS Development Environment (version 1.21 build 41007.1400)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.ImageSelectDialog;
import ims.admin.vo.AppImageVo;
import ims.admin.vo.AppImageVoCollection;
import ims.admin.vo.domain.AppImageVoAssembler;
import ims.assessment.configuration.vo.GraphicAssessmentRefVo;
import ims.assessment.vo.GraphicAssessmentShortVo;
import ims.assessment.vo.GraphicAssessmentShortVoCollection;
import ims.assessment.vo.domain.GraphicAssessmentShortVoAssembler;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.Configuration;
import ims.configuration.EnvironmentConfig;
import ims.core.configuration.domain.objects.AppImage;
import ims.core.configuration.vo.AppImageRefVo;
import ims.core.resource.people.domain.objects.Gp;
import ims.core.vo.domain.GPAssembler;
import ims.domain.DomainFactory;
import ims.domain.SessionData;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.domain.impl.DomainImpl;
import ims.framework.SessionConstants;
import ims.framework.utils.ImageInfo;
import ims.framework.utils.ImagePath;

public class ImageAdminImpl extends DomainImpl implements ims.admin.domain.ImageAdmin, ImageSelectDialog, ims.domain.impl.Transactional
{
	/**
	* Saves a site Image
	*/
	public AppImageVo saveImage(AppImageVo image) throws UniqueKeyViolationException, StaleObjectException
	{
		if (!image.isValidated())
		{
			throw new DomainRuntimeException("Application Image VO has not been validated.");
		}

		DomainFactory factory = getDomainFactory();
		
		AppImage domImage = null;
		//AppImage has an assigned id to allow for mix with DevEnv provided images
		Integer imageId = image.getID_AppImage();
		if (imageId == null)
		{
			Integer negId = getNextNegId();
			domImage = new AppImage(negId, 0);
			if (image.getImagePath() != null && image.getImagePath().equals(""))
			{
				image.setImagePath(null);
			}
			
			String imagePath = image.getImagePath();			
			domImage.setImagePath(imagePath);
			domImage.setIsSystem(image.getIsSystem());
			domImage.setNameSpace(image.getNameSpace());
			
			ImageInfo info = ImagePath.getImageInfo(imagePath);
			if (info != null)
			{
				domImage.setHeight(new Integer(info.getHeight()));
				domImage.setWidth(new Integer(info.getWidth()));				
			}
			domImage.setIsRIE(Boolean.FALSE);
			domImage.setIsActive(Boolean.TRUE);
		}
		else
		{
			domImage = (AppImage)factory.getDomainObject(AppImage.class, imageId);			
			domImage.setIsActive(image.getIsActive());
			//wdev-11245
			domImage.setImagePath(image.getImagePath());
			domImage.setHeight(image.getHeight());
			domImage.setWidth(image.getHeight());
			
			
			//---------
		}

		try
		{
			factory.save(domImage);
		}
		catch (UnqViolationUncheckedException e) 
		{
			throw new UniqueKeyViolationException("Image using same filename already exists. Duplicates not allowed.", e);
		}
		
		AppImageVo ret = AppImageVoAssembler.create(domImage);		
		getConfiguration().getRegisteredImages().put(ret.getID_AppImage(), ret);
		
		return ret;

	}

	private Configuration getConfiguration()
	{
		SessionData sessData = (SessionData)this.getDomainFactory().getDomainSession().getAttribute(SessionConstants.SESSION_DATA);
		Configuration cfg = sessData.configurationModule.get();
		return cfg;
	}

	private Integer getNextNegId() 
	{
		DomainFactory factory = getDomainFactory();
		List l = factory.find(" from AppImage i where i.id = (select min(i2.id) from AppImage i2)");
		if (l.size() == 0) return new Integer(-1);
		
		AppImage image = (AppImage)l.get(0);
		Integer ret = image.getId();
		if (ret == null || ret.intValue() > 0) return new Integer(-1);
		
		return new Integer(ret.intValue() -1);
	}

	public AppImageVoCollection listImages(String filter) 
	{
		AppImageVo vo = new AppImageVo();
		vo.setImagePath(filter);
		vo.setIsActive(Boolean.TRUE);
		return listImages(vo);	
	}

	public AppImageVoCollection listImages(AppImageVo filter) 
	{
		DomainFactory factory = getDomainFactory();		
		StringBuffer cond = new StringBuffer();
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = "";
		
		if (filter != null)
		{
			if (filter.getImagePath() != null && filter.getImagePath().length() > 0)
			{
				cond.append(andStr + " upper(i.imagePath) like :path");
				names.add("path");
				values.add("%" + filter.getImagePath().toUpperCase() + "%");
				andStr = " and ";
			}
			if (filter.getIsSystem() != null)
			{
				cond.append(andStr + " i.isSystem = :system");
				names.add("system");
				values.add(filter.getIsSystem());
				andStr = " and ";
			}
			if (filter.getIsActive() == null || filter.getIsActive().booleanValue())
			{
				cond.append(andStr + " i.isActive = :isActive ");
				names.add("isActive");
				values.add(Boolean.TRUE);
				andStr = " and ";
			}
		}
		
		String hql = " from AppImage i ";
		if (!andStr.equals(""))
		{
			hql += " where ";
			hql += cond.toString();
		}
		List images = factory.find(hql,names,values);
		
		return AppImageVoAssembler.createAppImageVoCollectionFromAppImage(images).sort();		
	}

	public void deleteImage(AppImageVo image) throws ForeignKeyViolationException 
	{
		DomainFactory factory = getDomainFactory();
		AppImage domImage = AppImageVoAssembler.extractAppImage(factory, image);
	    factory.delete(domImage);
	}

	//wdev-11245
	public GraphicAssessmentShortVoCollection getGraphicAssessmentByImage(AppImageRefVo appImageRefVo) 
	{		
		if(appImageRefVo == null)
			throw new DomainRuntimeException("AppImage must not be null");
		
		
		
		DomainFactory factory = getDomainFactory();
		//String hql = " from Gp g where g.localCode=:pasId";
		String hql = "select g1_1 from GraphicAssessment as g1_1 left join g1_1.images as d1_1 left join d1_1.image as a1_1 where	(a1_1.id = :imageId)";

		List graphicList = factory.find(hql,new String[]{"imageId"}, new Object[]{appImageRefVo.getID_AppImage()});

		if (graphicList != null && graphicList.size() > 0)
		{
			
			return GraphicAssessmentShortVoAssembler.createGraphicAssessmentShortVoCollectionFromGraphicAssessment(graphicList);
		}
		
		return null;
						
		
	}

	

	
}
