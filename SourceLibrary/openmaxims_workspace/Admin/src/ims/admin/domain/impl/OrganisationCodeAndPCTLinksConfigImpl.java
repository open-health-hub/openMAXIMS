//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.admin.domain.impl;

import java.util.List;

import ims.admin.domain.base.impl.BaseOrganisationCodeAndPCTLinksConfigImpl;
import ims.admin.vo.OrganisationPCTLinkConfigVo;
import ims.admin.vo.OrganisationPCTLinkConfigVoCollection;
import ims.admin.vo.domain.OrganisationPCTLinkConfigVoAssembler;
import ims.core.resource.place.domain.objects.OrganisationPCTLinkConfig;
import ims.domain.DomainFactory;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.exceptions.CodingRuntimeException;


public class OrganisationCodeAndPCTLinksConfigImpl extends BaseOrganisationCodeAndPCTLinksConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.admin.vo.OrganisationPCTLinkConfigVo save(ims.admin.vo.OrganisationPCTLinkConfigVo organisationPCTCodeConfig) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if (organisationPCTCodeConfig == null )

			throw new CodingRuntimeException("Cannot save organisationPCTCodeConfig if null or get organisationPCTCodeConfig on null ID . ");
			
		if (!organisationPCTCodeConfig.isValidated())
			throw new CodingRuntimeException("OrganisationPCTLinkConfigVo not Validated");
		try
		{
			DomainFactory factory = getDomainFactory();
			OrganisationPCTLinkConfig orgPctCode = OrganisationPCTLinkConfigVoAssembler.extractOrganisationPCTLinkConfig(factory, organisationPCTCodeConfig);

			factory.save(orgPctCode);
			
			return OrganisationPCTLinkConfigVoAssembler.create(orgPctCode);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("This Configuration Already Exist!", e);
		}
		
	}

	public ims.admin.vo.OrganisationPCTLinkConfigVoCollection listOrganisationPCTCode()
	{
		DomainFactory factory = getDomainFactory();
		String query = "from OrganisationPCTLinkConfig as orgPctCode";

		List<?> organisationPCTList = factory.find(query);
		return OrganisationPCTLinkConfigVoAssembler.createOrganisationPCTLinkConfigVoCollectionFromOrganisationPCTLinkConfig(organisationPCTList);
	
	}

	public OrganisationPCTLinkConfigVoCollection gePCTCodeForOrganisation(String organisation) 
	{
		DomainFactory factory = getDomainFactory();
		String query = "from OrganisationPCTLinkConfig as orgPctCode where orgPctCode.organisationCode = :organisation";

		List<?> organisationPCTList = factory.find(query,new String[]{"organisation"} , new Object[] {organisation});
		return OrganisationPCTLinkConfigVoAssembler.createOrganisationPCTLinkConfigVoCollectionFromOrganisationPCTLinkConfig(organisationPCTList);
	
	}

	public void removeOrgPCTCode(OrganisationPCTLinkConfigVo orgPCTCode)throws ForeignKeyViolationException 
	{
		if (orgPCTCode == null)
			throw new CodingRuntimeException("Cannot remove OrganisationPCTCode if null . ");
		
		
			DomainFactory factory = getDomainFactory();
			OrganisationPCTLinkConfig domainOrgPCTCode = OrganisationPCTLinkConfigVoAssembler.extractOrganisationPCTLinkConfig(factory, orgPCTCode);			
			factory.delete(domainOrgPCTCode);
		
	}

	public Boolean isStale(OrganisationPCTLinkConfigVo orgPCTCode) 
	{
	
		if (orgPCTCode == null || orgPCTCode.getID_OrganisationPCTLinkConfig()== null)
		{
			throw new CodingRuntimeException("Cannot get OrganisationPCTLinkConfigVo on null Id ");
		}
				
		DomainFactory factory = getDomainFactory();
		OrganisationPCTLinkConfig domainOrgPCTCode =  (OrganisationPCTLinkConfig) factory.getDomainObject(OrganisationPCTLinkConfig.class, orgPCTCode.getID_OrganisationPCTLinkConfig());
		
		if(domainOrgPCTCode==null)
		{
			return true;
		}
		
		if (domainOrgPCTCode.getVersion() > orgPCTCode.getVersion_OrganisationPCTLinkConfig())
		{
			return true;
		}
		
		return false;
	}
	
	
}
