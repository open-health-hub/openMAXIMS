//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 50307.1630)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.admin.domain.impl;

import ims.admin.domain.NTPFBatchPriceSelectionDialog;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.helper.Keywords;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.domain.objects.Service;
import ims.core.resource.place.domain.objects.Activity;
import ims.core.resource.place.domain.objects.LocationService;
import ims.core.resource.place.domain.objects.LocationServiceActivity;
import ims.core.resource.place.domain.objects.LocationServiceFunction;
import ims.core.resource.place.vo.ActivityRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.ActivityVo;
import ims.core.vo.ActivityVoCollection;
import ims.core.vo.LocationServiceActivityVo;
import ims.core.vo.LocationServiceActivityVoCollection;
import ims.core.vo.LocationServiceFunctionsVoCollection;
import ims.core.vo.LocationServiceMidVoCollection;
import ims.core.vo.LocationServiceVo;
import ims.core.vo.LocationServiceVoCollection;
import ims.core.vo.OrgShortVoCollection;
import ims.core.vo.ProcedureVo;
import ims.core.vo.ServiceActivityVoCollection;
import ims.core.vo.ServiceFunctionVo;
import ims.core.vo.ServiceFunctionVoCollection;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.ServiceVo;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.domain.ActivityVoAssembler;
import ims.core.vo.domain.LocationServiceActivityVoAssembler;
import ims.core.vo.domain.LocationServiceFunctionsVoAssembler;
import ims.core.vo.domain.LocationServiceMidVoAssembler;
import ims.core.vo.domain.LocationServiceVoAssembler;
import ims.core.vo.domain.OrgShortVoAssembler;
import ims.core.vo.domain.ServiceActivityVoAssembler;
import ims.core.vo.domain.ServiceFunctionVoAssembler;
import ims.core.vo.domain.ServiceShortVoAssembler;
import ims.core.vo.domain.ServiceVoAssembler;
import ims.core.vo.lookups.OrganisationType;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.domain.impl.DomainImpl;

import java.util.ArrayList;
import java.util.List;

public class LocationServiceImpl extends DomainImpl implements ims.admin.domain.LocationService, ims.domain.impl.Transactional
{
	private static final long	serialVersionUID	= 1L;

	public ims.core.vo.LocationServiceVoCollection listLocationService(ims.core.vo.LocationServiceVo locationService)
	{
		DomainFactory factory = getDomainFactory();

		if (locationService == null)
			return LocationServiceVoAssembler.createLocationServiceVoCollectionFromLocationService(factory.listDomainObjects(LocationService.class));

		String hql = " from LocationService locService ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		if (locationService.getLocationIsNotNull())
		{
			condStr.append(andStr + " locService.location.id = :locationId");
			markers.add("locationId");
			values.add(locationService.getLocation().getID_Location());
			andStr = " and ";
		}
		if (locationService.getServiceIsNotNull() && locationService.getService().getID_ServiceIsNotNull())
		{
			condStr.append(andStr + " locService.service.id = :serviceId");
			markers.add("serviceId");
			values.add(locationService.getService().getID_Service());
			andStr = " and ";
		}
		if (locationService.getServiceIsNotNull() && locationService.getService().getServiceName() != null)
		{
			condStr.append(andStr + " upper(locService.service.serviceName) like :serviceName");
			markers.add("serviceName");
			values.add(locationService.getService().getServiceName().toUpperCase() + "%");
			andStr = " and ";
		}
		if (locationService.getIsActiveIsNotNull())
		{
			condStr.append(andStr + " locService.isActive = :isActive");
			markers.add("isActive");
			values.add(locationService.getIsActive());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		return LocationServiceVoAssembler.createLocationServiceVoCollectionFromLocationService(factory.find(hql, markers, values)).sort();
	}

	public ims.core.vo.LocationServiceVo saveLocationService(ims.core.vo.LocationServiceVo locationService) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.ForeignKeyViolationException, ims.domain.exceptions.UniqueKeyViolationException
	{
		DomainFactory factory = getDomainFactory();
		LocationService doLocService = LocationServiceVoAssembler.extractLocationService(factory, locationService);

		try
		{
			factory.save(doLocService);
			locationService = LocationServiceVoAssembler.create(doLocService);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException(locationService.getService().getServiceName().toString() + " already exists. Duplicates not allowed.", e);
		}

		return locationService;
	}

	public ims.core.vo.OrganisationVoCollection listOrganisation(ims.core.vo.OrganisationVo voOrg)
	{
		OrganisationAndLocation impl = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return impl.listActiveRootOrgsNoGpp();
	}

	public LocationServiceVoCollection listLocationService(LocationRefVo voLocation)
	{
		DomainFactory factory = getDomainFactory();

		if (voLocation == null)
			return LocationServiceVoAssembler.createLocationServiceVoCollectionFromLocationService(factory.listDomainObjects(LocationService.class)).sort();

		if (voLocation.getID_LocationIsNotNull())
		{
			java.util.List servactList = factory.find("from  LocationService locService where locService.location.id = :locationId", new String[]{"locationId"}, new Object[]{voLocation.getID_Location()});
			return LocationServiceVoAssembler.createLocationServiceVoCollectionFromLocationService(servactList).sort();
		}

		return null;
	}

	public ServiceShortVoCollection listServices(String serviceName)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from Service s ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (serviceName != null)
		{
			String name = serviceName.toUpperCase();
			if (name.endsWith("%"))
				name = name.substring(0, name.length() - 1);

			hql.append(andStr + " (s.upperName like :serviceName ");
			markers.add("serviceName");
			values.add("%" + name + "%");
			hql.append(")");
			andStr = " and ";
		}

		hql.append(andStr + " s.isActive = :isActive");
		markers.add("isActive");
		values.add(new Boolean(true));
		andStr = " and ";

		if (markers.size() > 0)
			query += " where ";
		query += hql.toString();
		int configAmount = ConfigFlag.DOM.CLINICAL_ADMIN_SEARCH_MAX_SIZE.getValue();
		List services = factory.find(query, markers, values, configAmount);

		return ServiceShortVoAssembler.createServiceShortVoCollectionFromService(services).sort();
	}

	public ServiceVo getService(Integer serviceId)
	{
		DomainFactory factory = getDomainFactory();

		if (serviceId != null)
		{
			Service domSserv = (Service) factory.getDomainObject(Service.class, serviceId);
			return ServiceVoAssembler.create(domSserv);
		}
		return null;
	}

	public ServiceFunctionVoCollection listServiceFunction(Integer voServiceId)
	{
		DomainFactory factory = getDomainFactory();

		if (voServiceId != null)
		{
			java.util.List servfuncList = factory.find("from ServiceFunction servfunc where servfunc.service.id = :serviceid", new String[]{"serviceid"}, new Object[]{voServiceId});
			return ServiceFunctionVoAssembler.createServiceFunctionVoCollectionFromServiceFunction(servfuncList).sort();
		}

		return null;
	}

	public ServiceActivityVoCollection listServiceActivity(Integer voServiceId)
	{
		DomainFactory factory = getDomainFactory();

		if (voServiceId != null)
		{
			java.util.List servactList = factory.find("from  ServiceActivity servact where servact.service.id = :serviceid", new String[]{"serviceid"}, new Object[]{voServiceId}, 1000);
			return ServiceActivityVoAssembler.createServiceActivityVoCollectionFromServiceActivity(servactList).sort();
		}

		return null;
	}

	public ActivityVoCollection listActivity(LocationServiceActivityVo locationServiceActivity) throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();

		if (locationServiceActivity == null)
			return ActivityVoAssembler.createActivityVoCollectionFromActivity(factory.listDomainObjects(Activity.class));

		ActivityVoCollection voCollActivity = new ActivityVoCollection();

		String hql = "select locServiceActivity from LocationServiceActivity locServiceActivity, Procedure proc join proc.keywords as kw";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		condStr.append(andStr + " where locServiceActivity.serviceActivity is not null and locServiceActivity.serviceActivity.activity = proc.activity");
		andStr = " and ";

		if (locationServiceActivity.getLocationService() != null)
		{
			condStr.append(andStr + " locServiceActivity.locationService.id = :locService");
			markers.add("locService");
			values.add(locationServiceActivity.getLocationService().getID_LocationService());
			andStr = " and ";
		}

		if ((locationServiceActivity.getServiceActivityIsNotNull()) && (locationServiceActivity.getServiceActivity().getActivityIsNotNull()) && (locationServiceActivity.getServiceActivity().getActivity().getIsActiveIsNotNull()))
		{
			condStr.append(andStr + " locServiceActivity.serviceActivity.activity.isActive = :isActive");
			markers.add("isActive");
			values.add(locationServiceActivity.getServiceActivity().getActivity().getIsActive());
			andStr = " and ";
		}

		if ((locationServiceActivity.getLocationServiceIsNotNull()) && (locationServiceActivity.getLocationService().getIsActiveIsNotNull()))
		{
			condStr.append(andStr + " locServiceActivity.isActive = :isLSActive");
			markers.add("isLSActive");
			values.add(locationServiceActivity.getLocationService().getIsActive());
			andStr = " and ";
		}

		hql += condStr.toString();

		LocationServiceActivityVoCollection voCollLocServiceActivity = null;
		voCollLocServiceActivity = LocationServiceActivityVoAssembler.createLocationServiceActivityVoCollectionFromLocationServiceActivity(Keywords.searchByKeywords(factory, locationServiceActivity.getServiceActivity().getActivity().getName(), hql.toString(), markers, values));
		factory.getDomainSession().clearMessages();

		for (int i = 0; i < voCollLocServiceActivity.size(); i++)
		{
			if (voCollLocServiceActivity.get(i).getServiceActivityIsNotNull())
				voCollActivity.add(voCollLocServiceActivity.get(i).getServiceActivity().getActivity());
		}
		return voCollActivity.sort();
	}

	public ims.core.vo.ActivityVoCollection listActivity(ims.core.vo.ActivityVo filterActivity)
	{
		return listActivity(filterActivity, null);
	}

	// Overloaded listActivity method
	public ActivityVoCollection listActivity(ActivityVo filterActivity, Boolean checkDuplicate)
	{
		DomainFactory factory = getDomainFactory();

		if (filterActivity == null)
			return ActivityVoAssembler.createActivityVoCollectionFromActivity(factory.listDomainObjects(Activity.class));

		String hql = " from Activity activity ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		if (filterActivity.getNameIsNotNull())
		{
			// Checks the exact match
			if (checkDuplicate != null && checkDuplicate.booleanValue())
				condStr.append(andStr + " upper(activity.name) = :activityName");
			else
				condStr.append(andStr + " upper(activity.name) like :activityName");

			markers.add("activityName");
			values.add("%" + filterActivity.getName().toUpperCase() + "%");
			andStr = " and ";
		}
		if (filterActivity.getIsActiveIsNotNull())
		{
			condStr.append(andStr + " activity.isActive = :active");
			markers.add("active");
			values.add(filterActivity.getIsActive());
			andStr = " and ";
		}
		if (filterActivity.getActivityTypeIsNotNull())
		{
			condStr.append(andStr + " activity.activityType = :activityType");
			markers.add("activityType");
			values.add(getDomLookup(filterActivity.getActivityType()));
			andStr = " and ";
		}

		if (filterActivity.getIsWorkQueueIsNotNull())
		{
			condStr.append(andStr + " activity.isWorkQueue = :workQ ");
			markers.add("workQ");
			values.add(filterActivity.getIsWorkQueue());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		return ActivityVoAssembler.createActivityVoCollectionFromActivity(factory.find(hql, markers, values)).sort();
	}

	public LocationServiceActivityVoCollection listLocationServiceActivity(LocationServiceVo locationService, ActivityVo activity) throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();

		if (locationService == null && activity == null)
			return LocationServiceActivityVoAssembler.createLocationServiceActivityVoCollectionFromLocationServiceActivity(factory.listDomainObjects(LocationServiceActivity.class));

		String hql = " from LocationServiceActivity locServiceActivity ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		if (locationService != null)
		{
			if (locationService.getID_LocationServiceIsNotNull())
			{
				condStr.append(andStr + " locServiceActivity.locationService.id = :locServiceId");
				markers.add("locServiceId");
				values.add(locationService.getID_LocationService());
				andStr = " and ";
			}
			else if ((locationService.getLocationIsNotNull()) && (locationService.getLocation().getID_LocationIsNotNull()))
			{
				// filter by location
				condStr.append(andStr + " locServiceActivity.locationService.location.id = :locId");
				markers.add("locId");
				values.add(locationService.getLocation().getID_Location());
				andStr = " and ";
			}
			else if ((locationService.getServiceIsNotNull()) && (locationService.getService().getID_ServiceIsNotNull()))
			{
				// filter by location
				condStr.append(andStr + " locServiceActivity.locationService.service.id = :serId");
				markers.add("serId");
				values.add(locationService.getService().getID_Service());
				andStr = " and ";
			}
		}
		if (activity != null)
		{
			// filter Active
			if (activity.getIsActiveIsNotNull())
			{
				condStr.append(andStr + " locServiceActivity.serviceActivity.activity.isActive = :isActive");
				markers.add("isActive");
				values.add(activity.getIsActive());
				andStr = " and ";
			}
			// filter Name
			if (activity.getNameIsNotNull() && !activity.getID_ActivityIsNotNull())
			{
				condStr.append(andStr + " upper(locServiceActivity.serviceActivity.activity.name) like :activityName");
				markers.add("activityName");
				values.add("%" + activity.getName().toUpperCase() + "%");
				andStr = " and ";
			}
			else if (activity.getID_ActivityIsNotNull())
			{
				// filter by Activity
				condStr.append(andStr + "locServiceActivity.serviceActivity.activity.id = :activityId");
				markers.add("activityId");
				values.add(activity.getID_Activity());
				andStr = " and ";
			}

		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		return LocationServiceActivityVoAssembler.createLocationServiceActivityVoCollectionFromLocationServiceActivity(factory.find(hql, markers, values)).sort();
	}

	public ServiceVoCollection listService(Boolean activeOnly)
	{
		DomainFactory factory = getDomainFactory();
		if (activeOnly.booleanValue())
			return ServiceVoAssembler.createServiceVoCollectionFromService(factory.find("from Service service where service.isActive = :active", new String[]{"active"}, new Object[]{activeOnly}));

		return ServiceVoAssembler.createServiceVoCollectionFromService(factory.listDomainObjects(Service.class)).sort();
	}

	public OrgShortVoCollection listOrganisation()
	{
		DomainFactory factory = getDomainFactory();

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		StringBuffer condStr = new StringBuffer();
		String andStr = " and ";
		List orgs = null;

		String hql = " from Organisation o where o.type.id != " + OrganisationType.SUPPLIER.getID();

		condStr.append(andStr + " (o.type != :GP or o.type.id is null)");
		markers.add("GP");
		values.add(getDomLookup(OrganisationType.GPP));

		condStr.append(andStr + " o.isActive = :isActive");
		markers.add("isActive");
		values.add(Boolean.TRUE);

		condStr.append(andStr + " o.parentOrganisation is null");
		hql += condStr.toString();

		orgs = factory.find(hql, markers, values);

		return OrgShortVoAssembler.createOrgShortVoCollectionFromOrganisation(orgs).sort();
	}

	public void removeLocationService(ims.core.vo.LocationServiceVo voLocationService) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.ForeignKeyViolationException
	{
		DomainFactory factory = getDomainFactory();
		LocationService doLocService = LocationServiceVoAssembler.extractLocationService(factory, voLocationService);
		try
		{
			try
			{
				factory.delete(doLocService);
			}
			catch (ForeignKeyViolationException e)
			{
				throw new ForeignKeyViolationException(e.getMessage());
			}
		}
		catch (DomainRuntimeException re) // SN: catching
											// DomainRuntimeException here as
											// this is what Hib is returning
											// with e.getCause() =
											// ConstrainViolationException
		{
			throw new ForeignKeyViolationException(re.getMessage());
		}
		return;
	}

	public LocationServiceActivityVoCollection listLocationServiceActivity(LocationServiceVo filterLocationService)
	{
		DomainFactory factory = getDomainFactory();

		String hql = " from LocationServiceActivity locServiceActivity ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		if (filterLocationService != null && filterLocationService.getID_LocationServiceIsNotNull())
		{
			condStr.append(andStr + " locServiceActivity.locationService.id = :locService");
			markers.add("locService");
			values.add(filterLocationService.getID_LocationService());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";
		else
			return new LocationServiceActivityVoCollection();

		hql += condStr.toString();
		return LocationServiceActivityVoAssembler.createLocationServiceActivityVoCollectionFromLocationServiceActivity(factory.find(hql, markers, values)).sort();
	}

	public LocationServiceFunctionsVoCollection listLocationServiceFunction(LocationServiceVo voLocationService, ServiceFunctionVo voFunction)
	{
		DomainFactory factory = getDomainFactory();

		if (voLocationService == null && voFunction == null)
			return LocationServiceFunctionsVoAssembler.createLocationServiceFunctionsVoCollectionFromLocationServiceFunction(factory.listDomainObjects(LocationServiceFunction.class));

		String hql = " from LocationService locSer ";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		if (voLocationService != null)
		{
			if (voLocationService.getID_LocationServiceIsNotNull())
			{
				condStr.append(andStr + " locSer.locationService.id = :locServiceId");
				markers.add("locServiceId");
				values.add(voLocationService.getID_LocationService());
				andStr = " and ";
			}
			else if ((voLocationService.getLocationIsNotNull()) && (voLocationService.getLocation().getID_LocationIsNotNull()))
			{
				// filter by location
				condStr.append(andStr + " locServiceActivity.locationService.location.id = :locId");
				markers.add("locId");
				values.add(voLocationService.getLocation().getID_Location());
				andStr = " and ";
			}
			else if ((voLocationService.getServiceIsNotNull()) && (voLocationService.getService().getID_ServiceIsNotNull()))
			{
				// filter by location
				condStr.append(andStr + " locServiceActivity.locationService.service.id = :serId");
				markers.add("serId");
				values.add(voLocationService.getService().getID_Service());
				andStr = " and ";
			}
		}
		if (voFunction != null)
		{
			// filter on Function
			if (voFunction.getIsActiveIsNotNull())
			{
				condStr.append(andStr + " locServiceActivity.serviceFunction.isActive = :isActive");
				markers.add("isActive");
				values.add(voFunction.getIsActive());
				andStr = " and ";
			}
			// filter Name
			if (voFunction.getFunctionIsNotNull() && !voFunction.getID_ServiceFunctionIsNotNull())
			{
				condStr.append(andStr + " upper(locServiceActivity.serviceActivity.activity.name) like :functionName");
				markers.add("functionName");
				values.add("%" + voFunction.getFunction().getText().toUpperCase() + "%");
				andStr = " and ";
			}
			else if (voFunction.getID_ServiceFunctionIsNotNull())
			{
				// filter by Activity
				condStr.append(andStr + "locServiceActivity.serviceFunction.id = :serviceFunctionId");
				markers.add("serviceFunctionId");
				values.add(voFunction.getID_ServiceFunction());
				andStr = " and ";
			}
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		return LocationServiceFunctionsVoAssembler.createLocationServiceFunctionsVoCollectionFromLocationServiceFunction(factory.find(hql, markers, values)).sort();
	}

	public ServiceShortVoCollection listServiceExcludeCategory(String serviceName, ServiceCategory serviceCategory)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from Service s ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (serviceName != null)
		{
			String name = serviceName.toUpperCase();
			if (name.endsWith("%"))
				name = name.substring(0, name.length() - 1);

			hql.append(andStr + " (s.upperName like :serviceName ");
			markers.add("serviceName");
			values.add("%" + name + "%");
			hql.append(")");
			andStr = " and ";
		}

		if (serviceCategory != null)
		{
			hql.append(andStr + " s.serviceCategory.id != :sCat");
			markers.add("sCat");
			values.add(new Integer(serviceCategory.getId()));
			andStr = " and ";
		}

		hql.append(andStr + " s.isActive = :isActive");
		markers.add("isActive");
		values.add(new Boolean(true));
		andStr = " and ";

		if (markers.size() > 0)
			query += " where ";
		query += hql.toString();
		int configAmount = ConfigFlag.DOM.CLINICAL_ADMIN_SEARCH_MAX_SIZE.getValue();
		List services = factory.find(query, markers, values, configAmount);

		return ServiceShortVoAssembler.createServiceShortVoCollectionFromService(services).sort();
	}

	public LocationServiceActivityVoCollection listLocationServiceActivityKeyWords(LocationServiceVo locationService, ActivityVo activity) throws DomainInterfaceException
	{
		DomainFactory factory = getDomainFactory();

		if (locationService == null && activity == null)
			return LocationServiceActivityVoAssembler.createLocationServiceActivityVoCollectionFromLocationServiceActivity(factory.listDomainObjects(LocationServiceActivity.class));

		String hql = "select locServiceActivity from LocationServiceActivity locServiceActivity, Procedure proc join proc.keywords as kw";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";

		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		condStr.append(andStr + " where locServiceActivity.serviceActivity is not null and locServiceActivity.serviceActivity.activity = proc.activity");
		andStr = " and ";

		if (locationService != null)
		{
			if (locationService.getID_LocationServiceIsNotNull())
			{
				condStr.append(andStr + " locServiceActivity.locationService.id = :locServiceId");
				markers.add("locServiceId");
				values.add(locationService.getID_LocationService());
				andStr = " and ";
			}
			else if ((locationService.getLocationIsNotNull()) && (locationService.getLocation().getID_LocationIsNotNull()))
			{
				// filter by location
				condStr.append(andStr + " locServiceActivity.locationService.location.id = :locId");
				markers.add("locId");
				values.add(locationService.getLocation().getID_Location());
				andStr = " and ";
			}
			else if ((locationService.getServiceIsNotNull()) && (locationService.getService().getID_ServiceIsNotNull()))
			{
				// filter by location
				condStr.append(andStr + " locServiceActivity.locationService.service.id = :serId");
				markers.add("serId");
				values.add(locationService.getService().getID_Service());
				andStr = " and ";
			}
			if (locationService.getIsActiveIsNotNull())
			{
				condStr.append(andStr + " locServiceActivity.isActive = :isLSActive");
				markers.add("isLSActive");
				values.add(locationService.getIsActive());
				andStr = " and ";
			}
		}
		if (activity != null)
		{
			// filter Active
			if (activity.getIsActiveIsNotNull())
			{
				condStr.append(andStr + " locServiceActivity.serviceActivity.activity.isActive = :isActive");
				markers.add("isActive");
				values.add(activity.getIsActive());
				andStr = " and ";
			}
			if (activity.getID_ActivityIsNotNull())
			{
				// filter by Activity
				condStr.append(andStr + "locServiceActivity.serviceActivity.activity.id = :activityId");
				markers.add("activityId");
				values.add(activity.getID_Activity());
				andStr = " and ";
			}

		}
		hql += condStr.toString();
		return LocationServiceActivityVoAssembler.createLocationServiceActivityVoCollectionFromLocationServiceActivity(Keywords.searchByKeywords(factory, activity.getName(), hql.toString(), markers, values));
	}

	public ProcedureVo getProcedureForActivity(ActivityRefVo activityRefVo)
	{
		ims.admin.domain.Service impl = (ims.admin.domain.Service) getDomainImpl(ServiceImpl.class);
		return impl.getProcedureForActivity(activityRefVo);
	}

	public Integer countBatches(LocationRefVo location)
	{
		NTPFBatchPriceSelectionDialog impl = (NTPFBatchPriceSelectionDialog) getDomainImpl(NTPFBatchPriceSelectionDialogImpl.class);
		return impl.countBatches(location);
	}

	public LocationServiceMidVoCollection listLocationServiceLite(LocationRefVo voLocation)
	{
		DomainFactory factory = getDomainFactory();

		if (voLocation == null)
			return LocationServiceMidVoAssembler.createLocationServiceMidVoCollectionFromLocationService(factory.listDomainObjects(LocationService.class)).sort();

		if (voLocation.getID_LocationIsNotNull())
		{
			java.util.List servactList = factory.find("from  LocationService locService where locService.location.id = :locationId", new String[]{"locationId"}, new Object[]{voLocation.getID_Location()});
			return LocationServiceMidVoAssembler.createLocationServiceMidVoCollectionFromLocationService(servactList).sort();
		}

		return null;
	}

	/**
	 * expects parameters returns null if the parameters are not set
	 */
	public LocationServiceVoCollection listServicesForLocation(LocationRefVo location, ServiceVo service)
	{
		DomainFactory factory = getDomainFactory();

		if (location == null || service == null)
			return null;

		if (location.getID_LocationIsNotNull() && service.getID_ServiceIsNotNull())
		{
			java.util.List servactList = factory.find("from  LocationService locService where locService.location.id = :locationId and locService.service.id = :serviceId", new String[]{"locationId", "serviceId"}, new Object[]{location.getID_Location(), service.getID_Service()});
			return LocationServiceVoAssembler.createLocationServiceVoCollectionFromLocationService(servactList).sort();
		}

		return null;
	}
}
