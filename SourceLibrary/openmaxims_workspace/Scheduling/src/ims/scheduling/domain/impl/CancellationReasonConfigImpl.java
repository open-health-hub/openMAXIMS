//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.62 build 3084.26724)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.domain.impl;

import java.util.List;

import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.scheduling.domain.base.impl.BaseCancellationReasonConfigImpl;
import ims.scheduling.domain.objects.CancellationTypeReason;
import ims.scheduling.vo.CancellationTypeReasonVo;
import ims.scheduling.vo.CancellationTypeReasonVoCollection;
import ims.scheduling.vo.domain.CancellationTypeReasonVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;


public class CancellationReasonConfigImpl extends BaseCancellationReasonConfigImpl
{

	private static final long	serialVersionUID	= 1L;

	public ims.scheduling.vo.CancellationTypeReasonVoCollection listCancelationTypeReason(ims.scheduling.vo.lookups.Status_Reason value)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from CancellationTypeReason c ");
		if (value != null)
		{
			hql.append("where c.cancellationType = :TypeReason");
		}
		List result = factory.find(hql.toString(), new String[]{"TypeReason"}, new Object[]{getDomLookup(value)});
		return CancellationTypeReasonVoAssembler.createCancellationTypeReasonVoCollectionFromCancellationTypeReason(result);

	}

	
	public CancellationTypeReasonVoCollection saveCancellationTypeReasons(CancellationTypeReasonVoCollection cancellationTypeReason, Status_Reason cancelType) throws StaleObjectException, ForeignKeyViolationException
	{
		if(!cancellationTypeReason.isValidated())
		{
			throw new DomainRuntimeException("Cancellation Type Reason Collection has not been validated");
			
		}
		
		DomainFactory factory = getDomainFactory();
		
		String hqldel = "from CancellationTypeReason c where c.cancellationType.id =" + cancelType.getID();
		
		factory.delete(hqldel);
		
		for (int i = 0; i < cancellationTypeReason.size(); i++)
		{
				CancellationTypeReasonVo typeReason = cancellationTypeReason.get(i);
				
				
			if(!typeReason.getCancellationType().equals(cancelType))
			{
				
				throw new DomainRuntimeException("All cancellation reasons in the Cancellation Type Reason collection must be for the same cancelation Type ");
				
			}
			
			typeReason.setID_CancellationTypeReason(null);
			
		    CancellationTypeReason domCancel = CancellationTypeReasonVoAssembler.extractCancellationTypeReason(factory, typeReason);
		    factory.save(domCancel);
		
		    typeReason.setID_CancellationTypeReason(domCancel.getId());
		    
		    
		}
		
		
		
		return cancellationTypeReason;
	}
}
