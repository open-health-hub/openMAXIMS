//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.domain.base.impl;

import ims.domain.impl.DomainImpl;

public abstract class BaseBookAppointmentImpl extends DomainImpl implements ims.scheduling.domain.BookAppointment, ims.domain.impl.Transactional
{
	private static final long serialVersionUID = 1L;

	@SuppressWarnings("unused")
	public void validatelistSessionSlot(ims.scheduling.vo.SessionShortVo session)
	{
	}

	@SuppressWarnings("unused")
	public void validategetPatient(Integer patientId)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistGenericSession(ims.framework.utils.Date startDate, ims.framework.utils.Date endDate, ims.scheduling.vo.Sch_ProfileRefVo profile, ims.core.vo.ActivityVo activity, ims.core.clinical.vo.ServiceRefVo service, ims.core.resource.place.vo.LocationRefVo location, ims.vo.interfaces.IMos hcp, Boolean findFirstAvailable, Boolean allowOverBook)
	{
		if(hcp == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'hcp' of type 'ims.vo.interfaces.IMos' cannot be null.");
		if(allowOverBook == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'allowOverBook' of type 'Boolean' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatelistActivitiesForType(ims.core.vo.lookups.ActivityType actType)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistBookingAppointment(ims.scheduling.vo.SessionShortVo session)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistEvents(ims.scheduling.vo.lookups.Status_Reason statusReason, ims.core.resource.place.vo.ActivityRefVo activity)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistJourneyByPatient(ims.core.patient.vo.PatientRefVo patient)
	{
		if(patient == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'patient' of type 'ims.core.patient.vo.PatientRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatehasBookingRights(ims.framework.interfaces.IAppRole role, ims.scheduling.vo.Sch_SessionRefVo session)
	{
		if(role == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'role' of type 'ims.framework.interfaces.IAppRole' cannot be null.");
		if(session == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'session' of type 'ims.scheduling.vo.Sch_SessionRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatelistProfileLiteByService(ims.core.clinical.vo.ServiceRefVo service)
	{
		if(service == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'service' of type 'ims.core.clinical.vo.ServiceRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetCurrentMonth(ims.scheduling.vo.Sch_ProfileRefVo profile, ims.core.vo.ActivityVo activity, ims.core.clinical.vo.ServiceRefVo service, ims.core.resource.place.vo.LocationRefVo location, ims.vo.interfaces.IMos hcp, Boolean findFirstAvailable)
	{
		if(hcp == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'hcp' of type 'ims.vo.interfaces.IMos' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetProfileForSession(ims.scheduling.vo.Sch_SessionRefVo session)
	{
		if(session == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'session' of type 'ims.scheduling.vo.Sch_SessionRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validategetSch_BookingByAppt(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
	}

	@SuppressWarnings("unused")
	public void validatelistNonCancelledAppointmentsForSession(ims.scheduling.vo.Sch_SessionRefVo session)
	{
		if(session == null)
			throw new ims.domain.exceptions.DomainRuntimeException("The parameter 'session' of type 'ims.scheduling.vo.Sch_SessionRefVo' cannot be null.");
	}

	@SuppressWarnings("unused")
	public void validatesaveBooking(ims.scheduling.vo.Sch_BookingVo voBooking, ims.scheduling.vo.SlotEventPathwayVoCollection voCollSlotEvPathway, ims.scheduling.vo.SessionShortVo session)
	{
	}

	@SuppressWarnings("unused")
	public void validategetSessionIntermediate(ims.scheduling.vo.Sch_SessionRefVo session)
	{
	}

	@SuppressWarnings("unused")
	public void validateinstantiateEvent(ims.scheduling.vo.Booking_AppointmentVo appt, String prepend, String refSource)
	{
	}
}
