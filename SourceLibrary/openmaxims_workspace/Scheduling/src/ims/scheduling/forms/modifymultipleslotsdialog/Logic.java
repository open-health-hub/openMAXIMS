//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.modifymultipleslotsdialog;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.cn.data.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.vo.BookTheatreSlotDialogVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionParentChildSlotVoCollection;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.lookups.LookupHelper;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSaveOnDialog(true);
		
		if(args != null)
		{
			if(args.length > 0 && args[0] instanceof Status_Reason)
				form.getLocalContext().setProposedNewSlotStatus((Status_Reason) args[0]);
			if(args.length > 1 && args[1] instanceof Boolean)
				form.getLocalContext().setSaveOnDialog((Boolean)args[1]);
		}
		
		if(form.getLocalContext().getProposedNewSlotStatus() == null)
			throw new CodingRuntimeException("ProposedNewSlotStatus value must be set");
		
		initialise();
	}
	
	private void initialise()
	{		
		TreeNode[] collStatus = LookupHelper.getStatus_Reason(domain.getLookupService()).getRootNodes();
		for(int i=0;i<collStatus.length;i++)
		{
			if(collStatus[i].equals(form.getLocalContext().getProposedNewSlotStatus()))
			{
				for(int p=0;p<collStatus[i].getChildren().length;p++)
					form.cmbSuspendReason().newRow((Status_Reason) collStatus[i].getChildren()[p], ((Status_Reason)collStatus[i].getChildren()[p]).getText());
			}
		}
		
		open();	
	}

	/**
	 * 
	 */
	private void open()
	{
		clearInstanceControls();
		loadAvailableSlotEndTimes();
	}

	private void clearInstanceControls()
	{
		form.lblStartTime().setValue("");
		form.cmbTimes().setValue(null);
		form.cmbSuspendReason().setValue(null);
	}

	/**
	 * 
	 */
	private void loadAvailableSlotEndTimes()
	{		
		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		if (voData == null)
			throw new CodingRuntimeException("voData cannot be null in method loadAvailableSuspensionEndTimes");
		
		Status_Reason slotStatusToFind = null;
		if(form.getLocalContext().getProposedNewSlotStatus().equals(Status_Reason.SUSPENDED))
			slotStatusToFind = Status_Reason.SLOTOPENED;
		else if(form.getLocalContext().getProposedNewSlotStatus().equals(Status_Reason.SLOTOPENED))
			slotStatusToFind = Status_Reason.SUSPENDED;
		
		
		//load available end times of suspension
		SessionParentChildSlotVoCollection voCollSlotsAvailableForSuspension = null;
		
		if(voData != null && voData.getParentChildSlotIsNotNull() && voData.getParentChildSlot().getStartTimeIsNotNull())
			form.lblStartTime().setValue(voData.getParentChildSlot().getStartTime().toString());
		
		if(voData != null && voData.getSessionIsNotNull() && voData.getSession().getParentChildSlotsIsNotNull())
		{
			voCollSlotsAvailableForSuspension = new SessionParentChildSlotVoCollection();
			boolean initialSlotFound = false;
			voData.getSession().getParentChildSlots().sort(SortOrder.ASCENDING);
			for(SessionParentChildSlotVo voSlot : voData.getSession().getParentChildSlots())
			{
				if(!initialSlotFound)
				{
					if(voSlot.equals(voData.getParentChildSlot()))
						initialSlotFound = true;
				}
				
				if(initialSlotFound)
				{
					if(voSlot.getStatusIsNotNull() && voSlot.getStatus().equals(slotStatusToFind))
						voCollSlotsAvailableForSuspension.add(voSlot);
					else
						break;
				}
			}
		}
		
		form.cmbTimes().clear();
		if(voCollSlotsAvailableForSuspension != null)
		{
			voCollSlotsAvailableForSuspension.sort(SortOrder.ASCENDING);
			for(SessionParentChildSlotVo voSlot : voCollSlotsAvailableForSuspension)
			{
				form.cmbTimes().newRow(voSlot, Booking_AppointmentVo.calculateEndTime(voSlot.getStartTime(), voSlot.getDuration()).toString());
			}
		}
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] arrErrors = getUIValidation();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		SessionTheatreVo voSession = populateModifiedSlotsFromScreen();
		
		if(!form.getLocalContext().getSaveOnDialog())
			form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().setSession(voSession);
		else
		{
			try
			{
				domain.saveTheatreSession(voSession);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				initialise();
			}
		}
		
		engine.close(DialogResult.OK);
	}

	private SessionTheatreVo populateModifiedSlotsFromScreen()
	{
		SessionTheatreVo voTheatre = null;
		
		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		if(voData != null)
		{
			voTheatre = voData.getSession();
			
			SessionParentChildSlotVoCollection voCollSlotsForSuspension = new SessionParentChildSlotVoCollection();
			SessionParentChildSlotVo voStartSusSlot = voData.getParentChildSlot();
			SessionParentChildSlotVo voEndSusSlot = form.cmbTimes().getValue();
			
			for(int i=0;i<form.cmbTimes().getValues().size(); i++)
			{
				SessionParentChildSlotVo voSlot = (SessionParentChildSlotVo)form.cmbTimes().getValues().get(i);
				
				voTheatre.getParentChildSlots().get(getItemIndex(voTheatre, voSlot)).setStatus(form.getLocalContext().getProposedNewSlotStatus());
				voTheatre.getParentChildSlots().get(getItemIndex(voTheatre, voSlot)).setStatusReason(form.cmbSuspendReason().getValue());
				
				if(voSlot.equals(voEndSusSlot))
					break;					
			}
		}
	
		return voTheatre;
	}

	/**
	 * @param voTheatre 
	 * @param voSlot
	 * @return
	 */
	private int getItemIndex(SessionTheatreVo voTheatre, SessionParentChildSlotVo voSlot)
	{
		for(int i=0;i<voTheatre.getParentChildSlots().size();i++)
		{
			if(voTheatre.getParentChildSlots().get(i).equals(voSlot))
				return i;
		}
		
		throw new IndexOutOfBoundsException("When accessing ParentChildSlots");
	}
	
	private String[] getUIValidation()
	{
		List<String> errors = new ArrayList<String>();
		
		if(form.cmbTimes().getValue() == null)
			errors.add("'To' time is mandatory");
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;	
	}
	
}
