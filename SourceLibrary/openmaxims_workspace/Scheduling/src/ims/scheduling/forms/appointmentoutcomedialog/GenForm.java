//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.appointmentoutcomedialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbOutcomeReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.admin.vo.lookups.AppointmentOutcomeReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.admin.vo.lookups.AppointmentOutcomeReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.admin.vo.lookups.AppointmentOutcomeReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.admin.vo.lookups.AppointmentOutcomeReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.admin.vo.lookups.AppointmentOutcomeReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.admin.vo.lookups.AppointmentOutcomeReason getValue()
		{
			return (ims.admin.vo.lookups.AppointmentOutcomeReason)super.control.getValue();
		}
		public void setValue(ims.admin.vo.lookups.AppointmentOutcomeReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbOutcomeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.ApptOutcome value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.ApptOutcome value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.ApptOutcome value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.ApptOutcome value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.ApptOutcome value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.ApptOutcome getValue()
		{
			return (ims.scheduling.vo.lookups.ApptOutcome)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.ApptOutcome value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdDiagnosisRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDiagnosisRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDiagnosisReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDiagnosisReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDiagnosisOpened()
		{
			super.row.showOpened(0);
		}
		public String getColDiagnosis()
		{
			return (String)super.row.get(0);
		}
		public void setColDiagnosis(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDiagnosisTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.clinical.vo.PatientDiagnosisOpNotesVo getValue()
		{
			return (ims.clinical.vo.PatientDiagnosisOpNotesVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.PatientDiagnosisOpNotesVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDiagnosisRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDiagnosisRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDiagnosisRow get(int index)
		{
			return new grdDiagnosisRow(super.collection.get(index));
		}
		public grdDiagnosisRow newRow()
		{
			return new grdDiagnosisRow(super.collection.newRow());
		}
		public grdDiagnosisRow newRow(boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRow(autoSelect));
		}
		public grdDiagnosisRow newRowAt(int index)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index));
		}
		public grdDiagnosisRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDiagnosisGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.clinical.vo.PatientDiagnosisOpNotesVoCollection getValues()
		{
			ims.clinical.vo.PatientDiagnosisOpNotesVoCollection listOfValues = new ims.clinical.vo.PatientDiagnosisOpNotesVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.PatientDiagnosisOpNotesVo getValue()
		{
			return (ims.clinical.vo.PatientDiagnosisOpNotesVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.PatientDiagnosisOpNotesVo value)
		{
			super.grid.setValue(value);
		}
		public grdDiagnosisRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDiagnosisRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDiagnosisRowCollection getRows()
		{
			return new grdDiagnosisRowCollection(super.grid.getRows());
		}
		public grdDiagnosisRow getRowByValue(ims.clinical.vo.PatientDiagnosisOpNotesVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDiagnosisRow(row);
		}
		public void setColDiagnosisHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDiagnosisHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdProceduresRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProceduresRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDateOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.utils.Date getColDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setColDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellColDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColProcedureNameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColProcedureNameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColProcedureNameOpened()
		{
			super.row.showOpened(1);
		}
		public String getColProcedureName()
		{
			return (String)super.row.get(1);
		}
		public void setColProcedureName(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColProcedureNameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColLateralityReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColLateralityReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColLateralityOpened()
		{
			super.row.showOpened(2);
		}
		public String getColLaterality()
		{
			return (String)super.row.get(2);
		}
		public void setColLaterality(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColLateralityTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColSiteReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColSiteReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColSiteOpened()
		{
			super.row.showOpened(3);
		}
		public String getColSite()
		{
			return (String)super.row.get(3);
		}
		public void setColSite(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColSiteTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColPerformedByReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColPerformedByReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColPerformedByOpened()
		{
			super.row.showOpened(4);
		}
		public String getColPerformedBy()
		{
			return (String)super.row.get(4);
		}
		public void setColPerformedBy(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColPerformedByTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColPrimaryReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColPrimaryReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColPrimaryOpened()
		{
			super.row.showOpened(5);
		}
		public boolean getColPrimary()
		{
			return ((Boolean)super.row.get(5)).booleanValue();
		}
		public void setColPrimary(boolean value)
		{
			super.row.set(5, new Boolean(value));
		}
		public void setCellColPrimaryTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo getValue()
		{
			return (ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProceduresRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProceduresRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProceduresRow get(int index)
		{
			return new grdProceduresRow(super.collection.get(index));
		}
		public grdProceduresRow newRow()
		{
			return new grdProceduresRow(super.collection.newRow());
		}
		public grdProceduresRow newRow(boolean autoSelect)
		{
			return new grdProceduresRow(super.collection.newRow(autoSelect));
		}
		public grdProceduresRow newRowAt(int index)
		{
			return new grdProceduresRow(super.collection.newRowAt(index));
		}
		public grdProceduresRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProceduresRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProceduresGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVoCollection getValues()
		{
			ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVoCollection listOfValues = new ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo getValue()
		{
			return (ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo value)
		{
			super.grid.setValue(value);
		}
		public grdProceduresRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProceduresRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProceduresRowCollection getRows()
		{
			return new grdProceduresRowCollection(super.grid.getRows());
		}
		public grdProceduresRow getRowByValue(ims.RefMan.vo.PatientProcedureForAppointmentOutcomeVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProceduresRow(row);
		}
		public void setColDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColProcedureNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColProcedureNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColLateralityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColLateralityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColSiteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColSiteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColPerformedByHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColPerformedByHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColPrimaryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColPrimaryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 656);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenuSELECTItem = factory.createMenuItem(startControlID.intValue() + 1, "Select", true, false, new Integer(102232), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5470001)))
			contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenu.add(contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenuSELECTItem);
		contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenuADDItem = factory.createMenuItem(startControlID.intValue() + 2, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5470002)))
			contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenu.add(contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenuADDItem);
		contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5470003)))
			contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenu.add(contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenuEDITItem);
		form.registerMenu(contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenu);
		contextMenus.RefMan.contextMenuAppointmentOutcomeProcedureMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenuAppointmentOutcomeProcedureMenuADDItem = factory.createMenuItem(startControlID.intValue() + 4, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5460001)))
			contextMenus.RefMan.contextMenuAppointmentOutcomeProcedureMenu.add(contextMenus.RefMan.contextMenuAppointmentOutcomeProcedureMenuADDItem);
		contextMenus.RefMan.contextMenuAppointmentOutcomeProcedureMenuEDITItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5460002)))
			contextMenus.RefMan.contextMenuAppointmentOutcomeProcedureMenu.add(contextMenus.RefMan.contextMenuAppointmentOutcomeProcedureMenuEDITItem);
		form.registerMenu(contextMenus.RefMan.contextMenuAppointmentOutcomeProcedureMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 216, 464, 400, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Outcome Actions", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 200, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Outcome Detail", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 488, 440, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comments :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 488, 224, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnosis :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 576, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "other provider :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 560, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Transfer to", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 504, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Onward Referral :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 440, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Future Appointment :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 24, 376, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Planned List :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 24, 312, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Booked List :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 248, 80, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Waiting List :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 24, 88, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedures :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 168, 40, 188, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointment Status shown here", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 448, 66, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Outcome Reason :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 24, 66, 140, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointment Outcome :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 24, 40, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointment Status :", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 760, 624, 80, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 624, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 760, 624, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 675, 624, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 336, 432, 120, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 176, 560, 120, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 176, 496, 120, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 176, 432, 120, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 336, 368, 120, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 176, 368, 120, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 336, 304, 120, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 176, 304, 120, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 336, 240, 120, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 176, 240, 120, 52, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 488, 456, 352, 160, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 568, 64, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbOutcomeReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbOutcomeReasonTemp);
		cmbOutcomeReasonComboBox cmbOutcomeReason = (cmbOutcomeReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutcomeReasonComboBox.class, m_cmbOutcomeReasonTemp);
		super.addComboBox(cmbOutcomeReason);
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 168, 64, 248, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbOutcomeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbOutcomeTemp);
		cmbOutcomeComboBox cmbOutcome = (cmbOutcomeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOutcomeComboBox.class, m_cmbOutcomeTemp);
		super.addComboBox(cmbOutcome);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 448, 40, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"First Definitive Treatment", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 488, 240, 352, 176, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDiagnosisTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuAppointmentOutcomeDiagnosisMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDiagnosisTemp);
		grdDiagnosisGrid grdDiagnosis = (grdDiagnosisGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisGrid.class, m_grdDiagnosisTemp);
		grdDiagnosis.addStringColumn("Diagnosis", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDiagnosis);
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 24, 104, 800, 96, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuAppointmentOutcomeProcedureMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdProceduresTemp);
		grdProceduresGrid grdProcedures = (grdProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProceduresGrid.class, m_grdProceduresTemp);
		grdProcedures.addDateColumn("Date", 0, 0, 70, true, true, null, false, 0, true);
		grdProcedures.addStringColumn("Procedure Name", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProcedures.addStringColumn("Laterality", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProcedures.addStringColumn("Site", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProcedures.addStringColumn("Performed By", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProcedures.addBoolColumn("Primary", 0, 0, -1, true, false, 0, true);
		super.addGrid(grdProcedures);

		// Horizontal Line Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 24, 552, 432, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 24, 488, 432, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 24, 424, 432, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 24, 360, 432, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 24, 296, 432, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,new Integer(0)}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Panel pnlOutcomeActions()
	{
		return (Panel)super.getControl(0);
	}
	public Label lblApptStatusText()
	{
		return (Label)super.getControl(12);
	}
	public Label lblOutcomeReason()
	{
		return (Label)super.getControl(13);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(16);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(17);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(18);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(19);
	}
	public Button btnFutureApptAddLater()
	{
		return (Button)super.getControl(20);
	}
	public Button btnTransferToProvider()
	{
		return (Button)super.getControl(21);
	}
	public Button btnOnwardReferral()
	{
		return (Button)super.getControl(22);
	}
	public Button btnFutureApptAddNow()
	{
		return (Button)super.getControl(23);
	}
	public Button btnPlannedListAddLater()
	{
		return (Button)super.getControl(24);
	}
	public Button btnPlannedListAddNow()
	{
		return (Button)super.getControl(25);
	}
	public Button btnBookedListAddLater()
	{
		return (Button)super.getControl(26);
	}
	public Button btnBookedListAddNow()
	{
		return (Button)super.getControl(27);
	}
	public Button btnWaitingListAddLater()
	{
		return (Button)super.getControl(28);
	}
	public Button btnWaitingListAdd()
	{
		return (Button)super.getControl(29);
	}
	public TextBox txtComments()
	{
		return (TextBox)super.getControl(30);
	}
	public cmbOutcomeReasonComboBox cmbOutcomeReason()
	{
		return (cmbOutcomeReasonComboBox)super.getComboBox(0);
	}
	public cmbOutcomeComboBox cmbOutcome()
	{
		return (cmbOutcomeComboBox)super.getComboBox(1);
	}
	public CheckBox chkFirstDifinitiveTreatment()
	{
		return (CheckBox)super.getControl(33);
	}
	public grdDiagnosisGrid grdDiagnosis()
	{
		return (grdDiagnosisGrid)super.getGrid(0);
	}
	public grdProceduresGrid grdProcedures()
	{
		return (grdProceduresGrid)super.getGrid(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			RefMan = new RefManForms();
			Scheduling = new SchedulingForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ClinicListWithICPActions = new LocalFormName(123155);
				PatientDiagnosisDialog = new LocalFormName(123176);
			}
			public final FormName ClinicListWithICPActions;
			public final FormName PatientDiagnosisDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				NewElectiveListTCIErodDialog = new LocalFormName(134224);
				AppointmentOutcomeDiagnosisSelectionDialog = new LocalFormName(134233);
				AppointmentOutcomeProcedureDialog = new LocalFormName(134231);
				BookAppointmentDialog = new LocalFormName(134134);
			}
			public final FormName NewElectiveListTCIErodDialog;
			public final FormName AppointmentOutcomeDiagnosisSelectionDialog;
			public final FormName AppointmentOutcomeProcedureDialog;
			public final FormName BookAppointmentDialog;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				FutureAppointmentDetails = new LocalFormName(114113);
			}
			public final FormName FutureAppointmentDetails;
		}

		public ClinicalForms Clinical;
		public RefManForms RefMan;
		public SchedulingForms Scheduling;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			RefMan = new RefManImages();
		}
		public final class RefManImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManImages()
			{
				AddLater = new ImageHelper(134136, "Images/RefMan/AddLater.png", new Integer(50), new Integer(50));
				AddNow = new ImageHelper(134135, "Images/RefMan/AddNow.png", new Integer(50), new Integer(50));
			}
			public final ims.framework.utils.Image AddLater;
			public final ims.framework.utils.Image AddNow;
		}
		public final RefManImages RefMan;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Appointment = new ims.framework.ContextVariable("Appointment", prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__Appointment_" + componentIdentifier + "");
			cxl_AppointmentOutcomeConfig = new ims.framework.ContextVariable("AppointmentOutcomeConfig", prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__AppointmentOutcomeConfig_" + componentIdentifier + "");
			cxl_FormMode = new ims.framework.ContextVariable("FormMode", prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__FormMode_" + componentIdentifier + "");
			cxl_EditDiagnosis = new ims.framework.ContextVariable("EditDiagnosis", prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__EditDiagnosis_" + componentIdentifier + "");
			cxl_EditProcedure = new ims.framework.ContextVariable("EditProcedure", prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__EditProcedure_" + componentIdentifier + "");
			cxl_WasFutureAppointmentsButtonsPressed = new ims.framework.ContextVariable("WasFutureAppointmentsButtonsPressed", prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__WasFutureAppointmentsButtonsPressed_" + componentIdentifier + "");
		}
		
		public boolean getAppointmentIsNotNull()
		{
			return !cxl_Appointment.getValueIsNull(context);
		}
		public ims.scheduling.vo.BookingAppointmentOutcomeVo getAppointment()
		{
			return (ims.scheduling.vo.BookingAppointmentOutcomeVo)cxl_Appointment.getValue(context);
		}
		public void setAppointment(ims.scheduling.vo.BookingAppointmentOutcomeVo value)
		{
			cxl_Appointment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Appointment = null;
		public boolean getAppointmentOutcomeConfigIsNotNull()
		{
			return !cxl_AppointmentOutcomeConfig.getValueIsNull(context);
		}
		public ims.admin.vo.AppointmentOutcomeConfigVo getAppointmentOutcomeConfig()
		{
			return (ims.admin.vo.AppointmentOutcomeConfigVo)cxl_AppointmentOutcomeConfig.getValue(context);
		}
		public void setAppointmentOutcomeConfig(ims.admin.vo.AppointmentOutcomeConfigVo value)
		{
			cxl_AppointmentOutcomeConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AppointmentOutcomeConfig = null;
		public boolean getFormModeIsNotNull()
		{
			return !cxl_FormMode.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getFormMode()
		{
			return (ims.framework.enumerations.FormMode)cxl_FormMode.getValue(context);
		}
		public void setFormMode(ims.framework.enumerations.FormMode value)
		{
			cxl_FormMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FormMode = null;
		public boolean getEditDiagnosisIsNotNull()
		{
			return !cxl_EditDiagnosis.getValueIsNull(context);
		}
		public Boolean getEditDiagnosis()
		{
			return (Boolean)cxl_EditDiagnosis.getValue(context);
		}
		public void setEditDiagnosis(Boolean value)
		{
			cxl_EditDiagnosis.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditDiagnosis = null;
		public boolean getEditProcedureIsNotNull()
		{
			return !cxl_EditProcedure.getValueIsNull(context);
		}
		public Boolean getEditProcedure()
		{
			return (Boolean)cxl_EditProcedure.getValue(context);
		}
		public void setEditProcedure(Boolean value)
		{
			cxl_EditProcedure.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditProcedure = null;
		public boolean getWasFutureAppointmentsButtonsPressedIsNotNull()
		{
			return !cxl_WasFutureAppointmentsButtonsPressed.getValueIsNull(context);
		}
		public Boolean getWasFutureAppointmentsButtonsPressed()
		{
			return (Boolean)cxl_WasFutureAppointmentsButtonsPressed.getValue(context);
		}
		public void setWasFutureAppointmentsButtonsPressed(Boolean value)
		{
			cxl_WasFutureAppointmentsButtonsPressed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasFutureAppointmentsButtonsPressed = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class AppointmentOutcomeDiagnosisMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int SELECT = 1;
				public static final int ADD = 2;
				public static final int EDIT = 3;
			}
			public void disableAllAppointmentOutcomeDiagnosisMenuMenuItems()
			{
				this.contextMenuAppointmentOutcomeDiagnosisMenuSELECTItem.setEnabled(false);
				this.contextMenuAppointmentOutcomeDiagnosisMenuADDItem.setEnabled(false);
				this.contextMenuAppointmentOutcomeDiagnosisMenuEDITItem.setEnabled(false);
			}
			public void hideAllAppointmentOutcomeDiagnosisMenuMenuItems()
			{
				this.contextMenuAppointmentOutcomeDiagnosisMenuSELECTItem.setVisible(false);
				this.contextMenuAppointmentOutcomeDiagnosisMenuADDItem.setVisible(false);
				this.contextMenuAppointmentOutcomeDiagnosisMenuEDITItem.setVisible(false);
			}
			private Menu contextMenuAppointmentOutcomeDiagnosisMenu;
			public ReadOnlyMenuItem getAppointmentOutcomeDiagnosisMenuSELECTItem()
			{
				return this.contextMenuAppointmentOutcomeDiagnosisMenuSELECTItem;
			}
			private MenuItem contextMenuAppointmentOutcomeDiagnosisMenuSELECTItem;
			public ReadOnlyMenuItem getAppointmentOutcomeDiagnosisMenuADDItem()
			{
				return this.contextMenuAppointmentOutcomeDiagnosisMenuADDItem;
			}
			private MenuItem contextMenuAppointmentOutcomeDiagnosisMenuADDItem;
			public ReadOnlyMenuItem getAppointmentOutcomeDiagnosisMenuEDITItem()
			{
				return this.contextMenuAppointmentOutcomeDiagnosisMenuEDITItem;
			}
			private MenuItem contextMenuAppointmentOutcomeDiagnosisMenuEDITItem;
			public final class AppointmentOutcomeProcedureMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 4;
				public static final int EDIT = 5;
			}
			public void disableAllAppointmentOutcomeProcedureMenuMenuItems()
			{
				this.contextMenuAppointmentOutcomeProcedureMenuADDItem.setEnabled(false);
				this.contextMenuAppointmentOutcomeProcedureMenuEDITItem.setEnabled(false);
			}
			public void hideAllAppointmentOutcomeProcedureMenuMenuItems()
			{
				this.contextMenuAppointmentOutcomeProcedureMenuADDItem.setVisible(false);
				this.contextMenuAppointmentOutcomeProcedureMenuEDITItem.setVisible(false);
			}
			private Menu contextMenuAppointmentOutcomeProcedureMenu;
			public ReadOnlyMenuItem getAppointmentOutcomeProcedureMenuADDItem()
			{
				return this.contextMenuAppointmentOutcomeProcedureMenuADDItem;
			}
			private MenuItem contextMenuAppointmentOutcomeProcedureMenuADDItem;
			public ReadOnlyMenuItem getAppointmentOutcomeProcedureMenuEDITItem()
			{
				return this.contextMenuAppointmentOutcomeProcedureMenuEDITItem;
			}
			private MenuItem contextMenuAppointmentOutcomeProcedureMenuEDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[162];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-ISCOMORBIDITY", "IsComorbidity");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisOPNotes", "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PATIENT", "Patient");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-REFERRAL", "Referral");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-EPISODEOFCARE", "EpisodeOfCare");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-BED", "Bed");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-DATEONLIST", "DateOnList");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ORIGINALDECISIONDATE", "OriginalDecisionDate");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-AVAILABLEATSHORTNOTICE", "AvailableAtShortNotice");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-AVAILABLEATSHORTNOTICEPERIOD", "AvailableAtShortNoticePeriod");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PRIORITY", "Priority");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-LANGUAGE", "Language");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-TRANSPORT", "Transport");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-SPECIALREQUIREMENTS", "SpecialRequirements");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-SPECIALREQUIREMENTSDETAILS", "SpecialRequirementsDetails");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PATHWAYCLOCK", "PathwayClock");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-TCICANCELLEDBYPROVIDER", "TCICancelledByProvider");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PREADMISSIONREQUIRED", "PreAdmissionRequired");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-CURRENTSUSPENSIONENDDATE", "CurrentSuspensionEndDate");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-PATIENTSTATUS", "PatientStatus");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientElectiveList", "BO-1014100020-REQUIRESTCIBY", "RequiresTCIBy");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientProcedureForAppointmentOutcome", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientProcedureForAppointmentOutcome", "BO-1003100017-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientProcedureForAppointmentOutcome", "BO-1003100017-SITETEXT", "SiteText");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientProcedureForAppointmentOutcome", "BO-1003100017-PROCLATERALITY", "ProcLaterality");
			fields[133] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientProcedureForAppointmentOutcome", "BO-1003100017-PROCDATE", "ProcDate");
			fields[134] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientProcedureForAppointmentOutcome", "BO-1003100017-INFOSOURCE", "InfoSource");
			fields[135] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientProcedureForAppointmentOutcome", "BO-1003100017-EPISODEOFCARE", "EpisodeOfCare");
			fields[136] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientProcedureForAppointmentOutcome", "BO-1003100017-ISPRIMARY", "IsPrimary");
			fields[137] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientProcedureForAppointmentOutcome", "BO-1003100017-PROCEDURESTATUS", "ProcedureStatus");
			fields[138] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientProcedureForAppointmentOutcome", "BO-1003100017-CARECONTEXT", "CareContext");
			fields[139] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-ID", "ID_FutureAppointmentDetails");
			fields[140] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-PERIODVALUE", "PeriodValue");
			fields[141] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-PERIODTYPE", "PeriodType");
			fields[142] = new ims.framework.ReportField(this.context, "_cv_Scheduling.FutureAppointmentDetails", "BO-1090100021-FUTUREAPPTBYDATE", "FutureApptByDate");
			fields[143] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-OUTCOME", "Outcome");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-HASELECTIVELIST", "HasElectiveList");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-OUTCOMEREASON", "OutcomeReason");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__Appointment_" + componentIdentifier, "BO-1055100007-WASFIRSTDEFINITIVETREATMENT", "WasFirstDefinitiveTreatment");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__AppointmentOutcomeConfig_" + componentIdentifier, "BO-1004100065-ID", "ID_AppointmentOutcomeConfig");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__AppointmentOutcomeConfig_" + componentIdentifier, "BO-1004100065-SHOWFIRSTDEFINITIVETREATMENT", "ShowFirstDefinitiveTreatment");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__AppointmentOutcomeConfig_" + componentIdentifier, "BO-1004100065-CANADDTOWAITINGLIST", "CanAddtoWaitingList");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__AppointmentOutcomeConfig_" + componentIdentifier, "BO-1004100065-CANADDTOBOOKEDLIST", "CanAddtoBookedList");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__AppointmentOutcomeConfig_" + componentIdentifier, "BO-1004100065-CANADDTOPLANNEDLIST", "CanAddtoPlannedList");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__AppointmentOutcomeConfig_" + componentIdentifier, "BO-1004100065-CANMAKEAPPOINTMENT", "CanMakeAppointment");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__AppointmentOutcomeConfig_" + componentIdentifier, "BO-1004100065-CANMAKEONWARDREFERRAL", "CanMakeOnwardReferral");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__AppointmentOutcomeConfig_" + componentIdentifier, "BO-1004100065-CANTRANSFER", "CanTransfer");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.AppointmentOutcomeDialog.__internal_x_context__AppointmentOutcomeConfig_" + componentIdentifier, "BO-1004100065-APPOINTMENTOUTCOME", "AppointmentOutcome");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
