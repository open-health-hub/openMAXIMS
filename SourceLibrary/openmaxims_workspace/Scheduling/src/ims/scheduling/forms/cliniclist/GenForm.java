//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.cliniclist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.Status_Reason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.Status_Reason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.Status_Reason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.Status_Reason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.Status_Reason value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.Status_Reason getValue()
		{
			return (ims.scheduling.vo.lookups.Status_Reason)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.Status_Reason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbProfileComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.ProfileShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.ProfileShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.ProfileShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.ProfileShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.ProfileShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.ProfileShortVo getValue()
		{
			return (ims.scheduling.vo.ProfileShortVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.ProfileShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSessionsComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.SessionShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.SessionShortVo getValue()
		{
			return (ims.scheduling.vo.SessionShortVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdSlotsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSlotsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTimeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTimeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColTime(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColTime()
		{
			return (String)super.row.get(0);
		}
		public void setColTime(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColTimeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSlotStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSlotStatusReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSlotStatusOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColSlotStatus(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColSlotStatus()
		{
			return (String)super.row.get(1);
		}
		public void setColSlotStatus(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColSlotStatusTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColApptTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColApptTypeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColApptTypeOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColApptType(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColApptType()
		{
			return (String)super.row.get(2);
		}
		public void setColApptType(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColApptTypeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColPriorityReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColPriorityReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColPriorityOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColPriority(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColPriority()
		{
			return (String)super.row.get(3);
		}
		public void setColPriority(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColPriorityTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColUBRNReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColUBRNReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void setColUBRNEmpty(boolean value)
		{
			super.row.setIsEmpty(4, value);
		}
		public boolean isColUBRNEmpty()
		{
			return super.row.isEmpty(4);
		}
		public void showColUBRNOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColUBRN(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColUBRN()
		{
			return (String)super.row.get(4);
		}
		public void setColUBRN(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColUBRNTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColDetailsReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColDetailsReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColDetailsOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColDetails(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColDetails()
		{
			return (String)super.row.get(5);
		}
		public void setColDetails(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColDetailsTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColPatientShortReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColPatientShortReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColPatientShortOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColPatientShort(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.core.vo.PatientShort getColPatientShort()
		{
			return (ims.core.vo.PatientShort)super.row.get(6);
		}
		public void setColPatientShort(ims.core.vo.PatientShort value)
		{
			super.row.set(6, value);
		}
		public void setCellColPatientShortTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColActivityTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColActivityTypeReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColActivityTypeOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForColActivityType(String value)
		{
			super.row.setTooltip(7, value);
		}
		public String getColActivityType()
		{
			return (String)super.row.get(7);
		}
		public void setColActivityType(String value)
		{
			super.row.set(7, value);
		}
		public void setCellColActivityTypeTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSlotsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSlotsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSlotsRow get(int index)
		{
			return new grdSlotsRow(super.collection.get(index));
		}
		public grdSlotsRow newRow()
		{
			return new grdSlotsRow(super.collection.newRow());
		}
		public grdSlotsRow newRow(boolean autoSelect)
		{
			return new grdSlotsRow(super.collection.newRow(autoSelect));
		}
		public grdSlotsRow newRowAt(int index)
		{
			return new grdSlotsRow(super.collection.newRowAt(index));
		}
		public grdSlotsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSlotsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSlotsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public void setColUBRNCaption(String value)
		{
			this.grid.setColumnCaption(4, value);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdSlotsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSlotsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSlotsRowCollection getRows()
		{
			return new grdSlotsRowCollection(super.grid.getRows());
		}
		public grdSlotsRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSlotsRow(row);
		}
		public void setColTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSlotStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSlotStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColApptTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColApptTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColPriorityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColPriorityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColUBRNHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColUBRNHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColDetailsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColDetailsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColPatientShortHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColPatientShortHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColActivityTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColActivityTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(Integer.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Integer' of the global context variable 'Core.CurrentCareContext.ContextType' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(80);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Scheduling.contextMenuClinicList = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Scheduling.contextMenuClinicListDNAItem = factory.createMenuItem(startControlID.intValue() + 1, "DNA", true, false, new Integer(103158), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(390002)))
			contextMenus.Scheduling.contextMenuClinicList.add(contextMenus.Scheduling.contextMenuClinicListDNAItem);
		contextMenus.Scheduling.contextMenuClinicListCANCELItem = factory.createMenuItem(startControlID.intValue() + 2, "Cancel Appt", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuClinicList.add(contextMenus.Scheduling.contextMenuClinicListCANCELItem);
		contextMenus.Scheduling.contextMenuClinicListCANCELSLOTItem = factory.createMenuItem(startControlID.intValue() + 3, "Cancel Slot", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuClinicList.add(contextMenus.Scheduling.contextMenuClinicListCANCELSLOTItem);
		contextMenus.Scheduling.contextMenuClinicListREOPENItem = factory.createMenuItem(startControlID.intValue() + 4, "Re-Open", true, false, new Integer(102209), true, false);
		contextMenus.Scheduling.contextMenuClinicList.add(contextMenus.Scheduling.contextMenuClinicListREOPENItem);
		contextMenus.Scheduling.contextMenuClinicListOUTCOMEItem = factory.createMenuItem(startControlID.intValue() + 5, "Appointment Outcome", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(390001)))
			contextMenus.Scheduling.contextMenuClinicList.add(contextMenus.Scheduling.contextMenuClinicListOUTCOMEItem);
		contextMenus.Scheduling.contextMenuClinicListATTENDEDItem = factory.createMenuItem(startControlID.intValue() + 6, "Patient Attended", true, false, new Integer(102235), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(390003)))
			contextMenus.Scheduling.contextMenuClinicList.add(contextMenus.Scheduling.contextMenuClinicListATTENDEDItem);
		contextMenus.Scheduling.contextMenuClinicListSEENItem = factory.createMenuItem(startControlID.intValue() + 7, "Patient Seen", true, false, new Integer(103150), true, false);
		contextMenus.Scheduling.contextMenuClinicList.add(contextMenus.Scheduling.contextMenuClinicListSEENItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuClinicList);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 504, 51, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Activity Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 19, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Profile:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 51, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinics: ", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 504, 19, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 376, 600, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Slot", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 536, 600, 152, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel Appointment", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 696, 600, 144, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "DNA", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 592, 16, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 592, 48, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 64, 16, 424, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbProfileTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbProfileTemp);
		cmbProfileComboBox cmbProfile = (cmbProfileComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProfileComboBox.class, m_cmbProfileTemp);
		super.addComboBox(cmbProfile);
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 64, 48, 424, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSessionsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSessionsTemp);
		cmbSessionsComboBox cmbSessions = (cmbSessionsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSessionsComboBox.class, m_cmbSessionsTemp);
		super.addComboBox(cmbSessions);

		// Grid Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 832, 496, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdSlotsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuClinicList, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdSlotsTemp);
		grdSlotsGrid grdSlots = (grdSlotsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSlotsGrid.class, m_grdSlotsTemp);
		grdSlots.addStringColumn("Time", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Slot Status", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Appt. Type", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Priority", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("UBRN", 0, 0, 75, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Booking Details", 0, 0, 240, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("Patient Short", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSlots.addStringColumn("ActivityType", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdSlots);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 808, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 776, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnCancelSlot()
	{
		return (Button)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public Button btnDNA()
	{
		return (Button)super.getControl(6);
	}
	public DateControl dteSessionDate()
	{
		return (DateControl)super.getControl(7);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(0);
	}
	public cmbProfileComboBox cmbProfile()
	{
		return (cmbProfileComboBox)super.getComboBox(1);
	}
	public cmbSessionsComboBox cmbSessions()
	{
		return (cmbSessionsComboBox)super.getComboBox(2);
	}
	public grdSlotsGrid grdSlots()
	{
		return (grdSlotsGrid)super.getGrid(0);
	}
	public ImageButton btnClear()
	{
		return (ImageButton)super.getControl(12);
	}
	public ImageButton btnSearch()
	{
		return (ImageButton)super.getControl(13);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				BookingSlotStatus = new LocalFormName(114151);
				CancelAppointmentDialog = new LocalFormName(114160);
				BookAppointment = new LocalFormName(114149);
				AppointmentOutcomeDialog = new LocalFormName(114171);
				AttendOrSeenDialog = new LocalFormName(114173);
			}
			public final FormName BookingSlotStatus;
			public final FormName CancelAppointmentDialog;
			public final FormName BookAppointment;
			public final FormName AppointmentOutcomeDialog;
			public final FormName AttendOrSeenDialog;
		}

		public SchedulingForms Scheduling;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_AllSessions = new ims.framework.ContextVariable("AllSessions", prefix + "_lv_Scheduling.ClinicList.__internal_x_context__AllSessions_" + componentIdentifier + "");
			cxl_SessionSlot = new ims.framework.ContextVariable("SessionSlot", prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier + "");
			cxl_Arrival = new ims.framework.ContextVariable("Arrival", prefix + "_lv_Scheduling.ClinicList.__internal_x_context__Arrival_" + componentIdentifier + "");
			cxl_Patients = new ims.framework.ContextVariable("Patients", prefix + "_lv_Scheduling.ClinicList.__internal_x_context__Patients_" + componentIdentifier + "");
			cxl_LastSelectedPatient = new ims.framework.ContextVariable("LastSelectedPatient", prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier + "");
			cxl_LastRowValue = new ims.framework.ContextVariable("LastRowValue", prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastRowValue_" + componentIdentifier + "");
			cxl_MessageBoxDNA = new ims.framework.ContextVariable("MessageBoxDNA", prefix + "_lv_Scheduling.ClinicList.__internal_x_context__MessageBoxDNA_" + componentIdentifier + "");
		}
		
		public boolean getAllSessionsIsNotNull()
		{
			return !cxl_AllSessions.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionShortVoCollection getAllSessions()
		{
			return (ims.scheduling.vo.SessionShortVoCollection)cxl_AllSessions.getValue(context);
		}
		public void setAllSessions(ims.scheduling.vo.SessionShortVoCollection value)
		{
			cxl_AllSessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllSessions = null;
		public boolean getSessionSlotIsNotNull()
		{
			return !cxl_SessionSlot.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionSlotVo getSessionSlot()
		{
			return (ims.scheduling.vo.SessionSlotVo)cxl_SessionSlot.getValue(context);
		}
		public void setSessionSlot(ims.scheduling.vo.SessionSlotVo value)
		{
			cxl_SessionSlot.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessionSlot = null;
		public boolean getArrivalIsNotNull()
		{
			return !cxl_Arrival.getValueIsNull(context);
		}
		public Boolean getArrival()
		{
			return (Boolean)cxl_Arrival.getValue(context);
		}
		public void setArrival(Boolean value)
		{
			cxl_Arrival.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Arrival = null;
		public boolean getPatientsIsNotNull()
		{
			return !cxl_Patients.getValueIsNull(context);
		}
		public java.util.Map getPatients()
		{
			return (java.util.Map)cxl_Patients.getValue(context);
		}
		public void setPatients(java.util.Map value)
		{
			cxl_Patients.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Patients = null;
		public boolean getLastSelectedPatientIsNotNull()
		{
			return !cxl_LastSelectedPatient.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getLastSelectedPatient()
		{
			return (ims.core.vo.PatientShort)cxl_LastSelectedPatient.getValue(context);
		}
		public void setLastSelectedPatient(ims.core.vo.PatientShort value)
		{
			cxl_LastSelectedPatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastSelectedPatient = null;
		public boolean getLastRowValueIsNotNull()
		{
			return !cxl_LastRowValue.getValueIsNull(context);
		}
		public ims.vo.ValueObject getLastRowValue()
		{
			return (ims.vo.ValueObject)cxl_LastRowValue.getValue(context);
		}
		public void setLastRowValue(ims.vo.ValueObject value)
		{
			cxl_LastRowValue.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastRowValue = null;
		public boolean getMessageBoxDNAIsNotNull()
		{
			return !cxl_MessageBoxDNA.getValueIsNull(context);
		}
		public Integer getMessageBoxDNA()
		{
			return (Integer)cxl_MessageBoxDNA.getValue(context);
		}
		public void setMessageBoxDNA(Integer value)
		{
			cxl_MessageBoxDNA.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxDNA = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public SchedulingNamespace Scheduling = new SchedulingNamespace();
		public final class SchedulingNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ClinicList implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int DNA = 1;
				public static final int CANCEL = 2;
				public static final int CANCELSLOT = 3;
				public static final int REOPEN = 4;
				public static final int OUTCOME = 5;
				public static final int ATTENDED = 6;
				public static final int SEEN = 7;
			}
			public void disableAllClinicListMenuItems()
			{
				this.contextMenuClinicListDNAItem.setEnabled(false);
				this.contextMenuClinicListCANCELItem.setEnabled(false);
				this.contextMenuClinicListCANCELSLOTItem.setEnabled(false);
				this.contextMenuClinicListREOPENItem.setEnabled(false);
				this.contextMenuClinicListOUTCOMEItem.setEnabled(false);
				this.contextMenuClinicListATTENDEDItem.setEnabled(false);
				this.contextMenuClinicListSEENItem.setEnabled(false);
			}
			public void hideAllClinicListMenuItems()
			{
				this.contextMenuClinicListDNAItem.setVisible(false);
				this.contextMenuClinicListCANCELItem.setVisible(false);
				this.contextMenuClinicListCANCELSLOTItem.setVisible(false);
				this.contextMenuClinicListREOPENItem.setVisible(false);
				this.contextMenuClinicListOUTCOMEItem.setVisible(false);
				this.contextMenuClinicListATTENDEDItem.setVisible(false);
				this.contextMenuClinicListSEENItem.setVisible(false);
			}
			private Menu contextMenuClinicList;
			public ReadOnlyMenuItem getClinicListDNAItem()
			{
				return this.contextMenuClinicListDNAItem;
			}
			private MenuItem contextMenuClinicListDNAItem;
			public MenuItem getClinicListCANCELItem()
			{
				return this.contextMenuClinicListCANCELItem;
			}
			private MenuItem contextMenuClinicListCANCELItem;
			public ReadOnlyMenuItem getClinicListCANCELSLOTItem()
			{
				return this.contextMenuClinicListCANCELSLOTItem;
			}
			private MenuItem contextMenuClinicListCANCELSLOTItem;
			public MenuItem getClinicListREOPENItem()
			{
				return this.contextMenuClinicListREOPENItem;
			}
			private MenuItem contextMenuClinicListREOPENItem;
			public ReadOnlyMenuItem getClinicListOUTCOMEItem()
			{
				return this.contextMenuClinicListOUTCOMEItem;
			}
			private MenuItem contextMenuClinicListOUTCOMEItem;
			public ReadOnlyMenuItem getClinicListATTENDEDItem()
			{
				return this.contextMenuClinicListATTENDEDItem;
			}
			private MenuItem contextMenuClinicListATTENDEDItem;
			public ReadOnlyMenuItem getClinicListSEENItem()
			{
				return this.contextMenuClinicListSEENItem;
			}
			private MenuItem contextMenuClinicListSEENItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[149];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ID", "ID_Patient");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SEX", "Sex");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOB", "Dob");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-DOD", "Dod");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-RELIGION", "Religion");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISACTIVE", "IsActive");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SCN", "SCN");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Core.PatientToBeDisplayed", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_Clinical.PatientSummary.CareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-ID", "ID_Session_Slot");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-STARTTM", "StartTm");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-DURATION", "Duration");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-PRIORITY", "Priority");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-ISACTIVE", "IsActive");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-DIRECTACCESSSLOT", "DirectAccessSlot");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-DEALLOCDATE", "DeallocDate");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-STATUS", "Status");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-STATUSREASON", "StatusReason");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__SessionSlot_" + componentIdentifier, "BO-1055100016-SESSDATETIME", "SessDateTime");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.ClinicList.__internal_x_context__LastSelectedPatient_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
