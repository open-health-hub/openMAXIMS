//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.profiletheatreslotdialog;

import ims.framework.enumerations.DialogResult;
import ims.framework.utils.Time;
import ims.scheduling.vo.ProfileParentChildSlotVo;
import ims.scheduling.vo.domain.ProfileParentChildSlotVoAssembler;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getGlobalContext().Scheduling.getProfileEndTimeIsNotNull())
			form.lblProfileEndTime().setValue(form.getGlobalContext().Scheduling.getProfileEndTime().toString());
	
		ProfileParentChildSlotVo voSlot = form.getGlobalContext().Scheduling.getProfileParentChildSlot();
		
		//WDEV-12039
		form.getLocalContext().setProfileParentChildSlot(new ProfileParentChildSlotVo());
		ProfileParentChildSlotVoAssembler.copy(form.getLocalContext().getProfileParentChildSlot(), voSlot);
					
		if (voSlot != null)
		{
			this.populateScreenFromData(voSlot);
			if(voSlot.getID_ProfileParentChildSlot() == null && voSlot.getIsActive() == null)
				form.chkActive().setValue(true);

		}
	}

	protected void onImbCalculateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		Time startTime = form.timStart().getValue();
		Time endTime = form.getGlobalContext().Scheduling.getProfileEndTime();

		//this is mandatory for dialog
		if(form.getGlobalContext().Scheduling.getProfileEndTime() == null)
			return;
		
		if(startTime == null || (form.intSlotInterval().getValue() == null || form.intSlotInterval().getValue() == 0))
		{
			engine.showErrors(new String[] {"Start Time and Slot Interval need to be provided for calculation"});
			return;
		}
		
		int iDuration = form.intSlotInterval().getValue();
		
		int iTime = endTime.getTotalMinutes() - startTime.getTotalMinutes(); 
		form.intNoSlots().setValue(iTime/iDuration);
	}

	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ProfileParentChildSlotVo voSlot = form.getLocalContext().getProfileParentChildSlot();
		voSlot = this.populateDataFromScreen(voSlot);
		
		if(!validateUI())
			return;

		voSlot.setEndTm(calculateEndTime());
		
		form.getGlobalContext().Scheduling.setProfileParentChildSlot(voSlot);
		engine.close(DialogResult.OK);
	}
	
	private boolean validateUI()
	{
		List<String> errors = new ArrayList<String>();
		
		//this validation first then return
		if(form.timStart().getValue() == null)
			errors.add("'Start Time' is mandatory");
		if(form.intSlotInterval().getValue() == null)
			errors.add("'Slot Interval' is mandatory");
		if(form.intNoSlots().getValue() == null)
			errors.add("'No. of Slots' is mandatory");
		
		String[] arrErrors = errors.toArray(new String[0]);
		if(arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		if(form.timStart().getValue() != null && form.getGlobalContext().Scheduling.getProfileStartTimeIsNotNull())
			if(form.timStart().getValue().isLessThan(form.getGlobalContext().Scheduling.getProfileStartTime()))
				errors.add("Start Time of Slot ( " + form.timStart().getValue().toString() +  " ) cannot be before Profile Start Time ( " + form.getGlobalContext().Scheduling.getProfileStartTime() + " )");
		
		if(form.timStart().getValue() != null && form.getGlobalContext().Scheduling.getProfileEndTime() != null && form.timStart().getValue().isGreaterThan(form.getGlobalContext().Scheduling.getProfileEndTime()))
			errors.add("Start Time of Slot ( " + form.timStart().getValue().toString() +  " ) cannot exceed Profile End Time ( " + form.getGlobalContext().Scheduling.getProfileEndTime() + " )");
		else if(!isSlotEndTimeLessThanProfileEndTime())
			errors.add("End Time of Slots ( " + calculateEndTime() +  " ) cannot exceed Profile End Time ( " + form.getGlobalContext().Scheduling.getProfileEndTime() + " )");

		arrErrors = errors.toArray(new String[0]);
		if(arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		return true;
	}
	
	
	private Time calculateEndTime()
	{
		Time endTime = new Time();
		endTime = (Time) form.timStart().getValue().clone();
		endTime.addMinutes(form.intNoSlots().getValue() * form.intSlotInterval().getValue());
		return endTime;
	}

	private boolean isSlotEndTimeLessThanProfileEndTime()
	{	
		int availableMins = 0;
		if(form.getGlobalContext().Scheduling.getProfileEndTimeIsNotNull())
		{
			if(form.getGlobalContext().Scheduling.getProfileEndTime().isGreaterThan(form.timStart().getValue()))
				availableMins = form.getGlobalContext().Scheduling.getProfileEndTime().getTotalMinutes() - form.timStart().getValue().getTotalMinutes();
		}
	
		int requiredMins = form.intNoSlots().getValue() * form.intSlotInterval().getValue();		
		return requiredMins <= availableMins;
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setProfileParentChildSlot(ProfileParentChildSlotVoAssembler.copy( form.getGlobalContext().Scheduling.getProfileParentChildSlot() , form.getLocalContext().getProfileParentChildSlot()));
		engine.close(DialogResult.CANCEL);
	}
}
