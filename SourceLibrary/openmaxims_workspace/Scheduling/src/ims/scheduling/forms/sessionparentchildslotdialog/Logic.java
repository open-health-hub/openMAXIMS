//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.scheduling.forms.sessionparentchildslotdialog;

import java.util.ArrayList;
import java.util.List;

import ims.framework.enumerations.DialogResult;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateScreenFromData(form.getGlobalContext().Scheduling.getSessionParentChildSlot());
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateUI())
		{
			form.getGlobalContext().Scheduling.setSessionParentChildSlot(populateDataFromScreen(form.getGlobalContext().Scheduling.getSessionParentChildSlot()));
			engine.close(DialogResult.OK);
		}
	}
	private boolean validateUI()
	{
		List<String> errors = new ArrayList<String>();
		
		if(form.timStart().getValue() == null)
			errors.add("'Start Time' is mandatory");
		if(form.intDuration().getValue() == null)
			errors.add("'Duration' is mandatory");

		String[] arrErrors = errors.size() > 0 ? errors.toArray(new String[0]) : null;	
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		return true;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
