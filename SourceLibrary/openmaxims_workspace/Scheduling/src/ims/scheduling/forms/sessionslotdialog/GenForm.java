//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.sessionslotdialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbSlotResponsiblityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.Session_ListOwnerVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.Session_ListOwnerVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.Session_ListOwnerVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.Session_ListOwnerVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.Session_ListOwnerVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.Session_ListOwnerVo getValue()
		{
			return (ims.scheduling.vo.Session_ListOwnerVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.Session_ListOwnerVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSlotTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.SchedCABSlotType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedCABSlotType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedCABSlotType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedCABSlotType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.SchedCABSlotType value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.SchedCABSlotType getValue()
		{
			return (ims.scheduling.vo.lookups.SchedCABSlotType)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.SchedCABSlotType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSessionComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.SessionShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.SessionShortVo getValue()
		{
			return (ims.scheduling.vo.SessionShortVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbActivityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ActivityVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ActivityVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ActivityVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ActivityVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ActivityVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ActivityVo getValue()
		{
			return (ims.core.vo.ActivityVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ActivityVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPriorityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.SchedulingPriority value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.SchedulingPriority getValue()
		{
			return (ims.scheduling.vo.lookups.SchedulingPriority)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.SchedulingPriority value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdDosRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDosRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDOSReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDOSReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDOSOpened()
		{
			super.row.showOpened(0);
		}
		public ims.scheduling.vo.DirectoryOfServiceLiteVo getColDOS()
		{
			return (ims.scheduling.vo.DirectoryOfServiceLiteVo)super.row.get(0);
		}
		public void setColDOS(ims.scheduling.vo.DirectoryOfServiceLiteVo value)
		{
			super.row.set(0, value);
		}
		public void setCellColDOSTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(1);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.scheduling.vo.DirectoryOfServiceSessionSlotVo getValue()
		{
			return (ims.scheduling.vo.DirectoryOfServiceSessionSlotVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.DirectoryOfServiceSessionSlotVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDosRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDosRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDosRow get(int index)
		{
			return new grdDosRow(super.collection.get(index));
		}
		public grdDosRow newRow()
		{
			return new grdDosRow(super.collection.newRow());
		}
		public grdDosRow newRow(boolean autoSelect)
		{
			return new grdDosRow(super.collection.newRow(autoSelect));
		}
		public grdDosRow newRowAt(int index)
		{
			return new grdDosRow(super.collection.newRowAt(index));
		}
		public grdDosRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDosRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDosGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.scheduling.vo.DirectoryOfServiceSessionSlotVoCollection getValues()
		{
			ims.scheduling.vo.DirectoryOfServiceSessionSlotVoCollection listOfValues = new ims.scheduling.vo.DirectoryOfServiceSessionSlotVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.DirectoryOfServiceSessionSlotVo getValue()
		{
			return (ims.scheduling.vo.DirectoryOfServiceSessionSlotVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.DirectoryOfServiceSessionSlotVo value)
		{
			super.grid.setValue(value);
		}
		public grdDosRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDosRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDosRowCollection getRows()
		{
			return new grdDosRowCollection(super.grid.getRows());
		}
		public grdDosRow getRowByValue(ims.scheduling.vo.DirectoryOfServiceSessionSlotVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDosRow(row);
		}
		public void setColDOSHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDOSHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(488, 416);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 472, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Session Slot", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 32, 272, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 32, 144, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 32, 176, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Directory of Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 32, 50, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Session:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 32, 336, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Duration:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 32, 304, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 32, 82, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Activity:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 32, 114, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Priority:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 314, 376, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 394, 376, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 160, 272, 299, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSlotResponsiblityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSlotResponsiblityTemp);
		cmbSlotResponsiblityComboBox cmbSlotResponsiblity = (cmbSlotResponsiblityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSlotResponsiblityComboBox.class, m_cmbSlotResponsiblityTemp);
		super.addComboBox(cmbSlotResponsiblity);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 160, 144, 299, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSlotTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSlotTypeTemp);
		cmbSlotTypeComboBox cmbSlotType = (cmbSlotTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSlotTypeComboBox.class, m_cmbSlotTypeTemp);
		super.addComboBox(cmbSlotType);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 160, 48, 299, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSessionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSessionTemp);
		cmbSessionComboBox cmbSession = (cmbSessionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSessionComboBox.class, m_cmbSessionTemp);
		super.addComboBox(cmbSession);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 160, 80, 299, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbActivityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbActivityTemp);
		cmbActivityComboBox cmbActivity = (cmbActivityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActivityComboBox.class, m_cmbActivityTemp);
		super.addComboBox(cmbActivity);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 160, 112, 299, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbPriorityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbPriorityTemp);
		cmbPriorityComboBox cmbPriority = (cmbPriorityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityComboBox.class, m_cmbPriorityTemp);
		super.addComboBox(cmbPriority);

		// Grid Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 160, 176, 299, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		Grid m_grdDosTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDosTemp);
		grdDosGrid grdDos = (grdDosGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDosGrid.class, m_grdDosTemp);
		grdDos.addStringColumn("Directory Of Service", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDos.addBoolColumn("Select", 0, 1, -1, false, true, 0, true);
		super.addGrid(grdDos);

		// Time Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 160, 304, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 160, 336, 72, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(3)}));
	}


	public Label lbl5()
	{
		return (Label)super.getControl(1);
	}
	public Label lblSlotType()
	{
		return (Label)super.getControl(2);
	}
	public Label lblDos()
	{
		return (Label)super.getControl(3);
	}
	public Label lblSession()
	{
		return (Label)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(9);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(10);
	}
	public cmbSlotResponsiblityComboBox cmbSlotResponsiblity()
	{
		return (cmbSlotResponsiblityComboBox)super.getComboBox(0);
	}
	public cmbSlotTypeComboBox cmbSlotType()
	{
		return (cmbSlotTypeComboBox)super.getComboBox(1);
	}
	public cmbSessionComboBox cmbSession()
	{
		return (cmbSessionComboBox)super.getComboBox(2);
	}
	public cmbActivityComboBox cmbActivity()
	{
		return (cmbActivityComboBox)super.getComboBox(3);
	}
	public cmbPriorityComboBox cmbPriority()
	{
		return (cmbPriorityComboBox)super.getComboBox(4);
	}
	public grdDosGrid grdDos()
	{
		return (grdDosGrid)super.getGrid(0);
	}
	public TimeControl timStart()
	{
		return (TimeControl)super.getControl(17);
	}
	public IntBox intDuration()
	{
		return (IntBox)super.getControl(18);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedSessionFromSessionDetailsEdit = new ims.framework.ContextVariable("SelectedSessionFromSessionDetailsEdit", prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier + "");
		}
		
		public boolean getSelectedSessionFromSessionDetailsEditIsNotNull()
		{
			return !cxl_SelectedSessionFromSessionDetailsEdit.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionShortVo getSelectedSessionFromSessionDetailsEdit()
		{
			return (ims.scheduling.vo.SessionShortVo)cxl_SelectedSessionFromSessionDetailsEdit.getValue(context);
		}
		public void setSelectedSessionFromSessionDetailsEdit(ims.scheduling.vo.SessionShortVo value)
		{
			cxl_SelectedSessionFromSessionDetailsEdit.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSessionFromSessionDetailsEdit = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[121];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-ID", "ID_Session_Slot");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-STARTTM", "StartTm");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-DURATION", "Duration");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-PRIORITY", "Priority");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-ISACTIVE", "IsActive");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-DIRECTACCESSSLOT", "DirectAccessSlot");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-DEALLOCDATE", "DeallocDate");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-STATUS", "Status");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-STATUSREASON", "StatusReason");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Scheduling.SessionSlot", "BO-1055100016-SESSDATETIME", "SessDateTime");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-NAME", "Name");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-REMAININGSLOTS", "RemainingSlots");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-TOTALSLOTS", "TotalSlots");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-THEATRETYPE", "TheatreType");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ISFIXED", "IsFixed");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-STARTTM", "StartTm");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ENDTM", "EndTm");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-REMAININGTIME", "RemainingTime");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SESSIONDATE", "SessionDate");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-MAXCONTINUOUSAVAILABLEMINS", "MaxContinuousAvailableMins");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-CONSMEDIATYPE", "ConsMediaType");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-DESCRIPTION", "Description");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-SESSIONSTATUS", "SessionStatus");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ISACTIVE", "IsActive");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-PASCLINIC", "PASClinic");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-ISTHEATRESESSION", "IsTheatreSession");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-CANCELLATIONREASON", "CancellationReason");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-COMMENT", "Comment");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedSession", "BO-1055100010-WASSESSIONMOVED", "WasSessionMoved");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-ID", "ID_Sch_Session");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-NAME", "Name");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-REMAININGSLOTS", "RemainingSlots");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-TOTALSLOTS", "TotalSlots");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-THEATRETYPE", "TheatreType");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-ISFIXED", "IsFixed");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-STARTTM", "StartTm");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-ENDTM", "EndTm");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-REMAININGTIME", "RemainingTime");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-SESSIONDATE", "SessionDate");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-MAXCONTINUOUSAVAILABLEMINS", "MaxContinuousAvailableMins");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-CONSMEDIATYPE", "ConsMediaType");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-DESCRIPTION", "Description");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-SESSIONSTATUS", "SessionStatus");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-ISACTIVE", "IsActive");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-PASCLINIC", "PASClinic");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-ISTHEATRESESSION", "IsTheatreSession");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-CANCELLATIONREASON", "CancellationReason");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-COMMENT", "Comment");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.SessionSlotDialog.__internal_x_context__SelectedSessionFromSessionDetailsEdit_" + componentIdentifier, "BO-1055100010-WASSESSIONMOVED", "WasSessionMoved");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
