//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.30 build 2012.21169)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.sessiondetailsedit;

import ims.admin.vo.AppRoleShortVo;
import ims.admin.vo.AppRoleShortVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.HcpRefVoCollection;
import ims.core.vo.ActivityLiteVo;
import ims.core.vo.ActivityLiteVoCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocShortVo;
import ims.core.vo.PersonName;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.framework.utils.Time;
import ims.scheduling.forms.sessiondetailsedit.GenForm.lyrSessEditLayer.tabBookingRightsContainer.grdBookRightsRow;
import ims.scheduling.forms.sessiondetailsedit.GenForm.lyrSessEditLayer.tabDosContainer.grdDosRow;
import ims.scheduling.forms.sessiondetailsedit.GenForm.lyrSessEditLayer.tabExclusionContainer.grdApptsRow;
import ims.scheduling.forms.sessiondetailsedit.GenForm.lyrSessEditLayer.tabListOwnersContainer.grdListOwnerRow;
import ims.scheduling.forms.sessiondetailsedit.GenForm.lyrSessEditLayer.tabSlotDetailsContainer.grdSlotsRow;
import ims.scheduling.forms.sessiondetailsedit.GenForm.lyrSessEditLayer.tabTheatreProceduresContainer.grdTheatreRow;
import ims.scheduling.forms.sessiondetailsedit.GenForm.lyrSessEditLayer.tabTheatreProceduresContainer.lyrTheatreLayer.tabPCSlotsContainer.grdPCSlotsRow;
import ims.scheduling.forms.sessiondetailsedit.GenForm.lyrSessEditLayer.tabTheatreProceduresContainer.lyrTheatreLayer.tabTCITimesContainer.grdTCIRow;
import ims.scheduling.helper.SlotGenerationUtils;
import ims.scheduling.vo.BookTheatreSlotDialogVo;
import ims.scheduling.vo.BookingAppointmentLiteVo;
import ims.scheduling.vo.BookingAppointmentLiteVoCollection;
import ims.scheduling.vo.DirectoryOfServiceLiteVo;
import ims.scheduling.vo.DirectoryOfServiceLiteVoCollection;
import ims.scheduling.vo.DirectoryOfServiceSessionSlotVo;
import ims.scheduling.vo.DirectoryOfServiceSessionSlotVoCollection;
import ims.scheduling.vo.DirectoryOfServiceVo;
import ims.scheduling.vo.DirectoryOfServiceVoCollection;
import ims.scheduling.vo.ProfileLiteVo;
import ims.scheduling.vo.ProfileLiteVoCollection;
import ims.scheduling.vo.SessionActivityLiteVo;
import ims.scheduling.vo.SessionActivityLiteVoCollection;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionParentChildSlotVoCollection;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.SessionSlotVoCollection;
import ims.scheduling.vo.SessionTheatreProceduresRemainingVo;
import ims.scheduling.vo.SessionTheatreTCISlotLiteVo;
import ims.scheduling.vo.SessionTheatreTCISlotLiteVoCollection;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.SessionVo;
import ims.scheduling.vo.Session_BookingRightVo;
import ims.scheduling.vo.Session_BookingRightVoCollection;
import ims.scheduling.vo.Session_Exc_TimesVo;
import ims.scheduling.vo.Session_Exc_TimesVoCollection;
import ims.scheduling.vo.Session_ListOwnerVo;
import ims.scheduling.vo.Session_ListOwnerVoCollection;
import ims.scheduling.vo.TheatreProcedureLiteVo;
import ims.scheduling.vo.TheatreProcedureLiteVoCollection;
import ims.scheduling.vo.lookups.SlotType;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.List;
public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialise();
	}

	private void initialise()
	{
		if (ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"))
		{
			form.lyrSessEdit().tabDos().setHeaderVisible(false);
			form.lblDos().setVisible(false);
			form.qmbDoService().setVisible(false);// 	WDEV-15190
		}

		// prepopulating reference data
		form.getLocalContext().setRoleList(domain.listRoles());
		
		//WDEV-12918
		form.lyrSessEdit().tabGeneral().txtTheatreSessionType().setEnabled(false);
		form.lyrSessEdit().tabGeneral().txtAnaestheticTypes().setEnabled(false);
		form.lyrSessEdit().tabGeneral().txtSlotType().setEnabled(false);
	}
	
	private void updateControlState()
	{
		form.getContextMenus().Scheduling.hideAllSessionDetailsBookingRightsMenuItems();
		form.getContextMenus().Scheduling.hideAllSessionDetailsEditExclusionTimesMenuItems(); //WDEV-11569
		form.getContextMenus().Scheduling.hideAllSessionDetailsEditSlotsMenuItems();
		form.getContextMenus().Scheduling.hideAllSessionDetailsEditActivityMenuItems();
		form.getContextMenus().Scheduling.hideAllSessionDetailsListOwnersMenuItems();
		form.getContextMenus().Scheduling.hideAllSessionDetailsEditTheatreProceduresMenuItems();
		form.getContextMenus().Scheduling.hideAllSessionDetailsEditParentChildSlotsMenuItems(); //WDEV-12918
		
		boolean isTheatre = false;
		boolean isFixed = true;
		if(form.getLocalContext().getSessionIsNotNull())
		{
			if(form.getLocalContext().getSession().getIsTheatreSessionIsNotNull())
				isTheatre = form.getLocalContext().getSession().getIsTheatreSession();
			
			isFixed = form.getLocalContext().getSession().getIsFixed();
		}
		
		
		//WDEV-8680 - hide slots and DOS tabs and show Theatre Tab
		form.lyrSessEdit().tabSlotDetails().setHeaderVisible(!isTheatre);
		form.lyrSessEdit().tabDos().setHeaderVisible(!isTheatre);
		form.lyrSessEdit().tabTheatreProcedures().setHeaderVisible(isTheatre);
		
		//WDEV-18453 
		form.lyrSessEdit().tabGeneral().cmbConsMedia().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.getLocalContext().getSession() != null && Boolean.FALSE.equals(form.getLocalContext().getSession().getIsTheatreSession()));
		//WDEV-12918
		form.lyrSessEdit().tabGeneral().lblTheatreType().setVisible(isTheatre);
		form.lyrSessEdit().tabGeneral().lblAnaestheticType().setVisible(isTheatre);
		form.lyrSessEdit().tabGeneral().lblSlotType().setVisible(isTheatre);
		form.lyrSessEdit().tabGeneral().txtTheatreSessionType().setVisible(isTheatre);
		form.lyrSessEdit().tabGeneral().txtAnaestheticTypes().setVisible(isTheatre);
		form.lyrSessEdit().tabGeneral().txtSlotType().setVisible(isTheatre);
		
		//WDEV-8973 - activities for flexible profile
		form.lyrSessEdit().tabActivity().setHeaderVisible(false);
		if(!isFixed)
		{
			form.lyrSessEdit().tabSlotDetails().setHeaderVisible(false);
			form.lyrSessEdit().tabDos().setHeaderVisible(false);
			form.lyrSessEdit().tabTheatreProcedures().setHeaderVisible(false);
			form.lyrSessEdit().tabActivity().setHeaderVisible(true);
		}
	
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().Scheduling.getSessionDetailsEditEDITItem().setVisible(form.grdSessions().getValue() != null);
			form.qmbDoService().setEnabled(true);// 	WDEV-15190
		}
		else if (form.getMode().equals(FormMode.EDIT))
		{
			form.qmbDoService().setEnabled(false);// 	WDEV-15190
			enableRowSelection();

			form.getContextMenus().Scheduling.getSessionDetailsEditEDITItem().setVisible(false);

			form.getContextMenus().Scheduling.getSessionDetailsEditExclusionTimesADDItem().setVisible(true && !isFixed); //WDEV-11569
			form.getContextMenus().Scheduling.getSessionDetailsBookingRightsADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getSessionDetailsEditSlotsADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getSessionDetailsEditActivityADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getSessionDetailsListOwnersADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getSessionDetailsEditTheatreProceduresADDItem().setVisible(true);
			form.getContextMenus().Scheduling.getSessionDetailsEditParentChildSlotsADDItem().setVisible(true); //WDEV-12918

			//WDEV-16049 form.getContextMenus().Scheduling.getSessionDetailsBookingRightsEDITItem().setVisible(form.lyrSessEdit().tabBookingRights().grdBookRights().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getSessionDetailsListOwnersEDITItem().setVisible(form.lyrSessEdit().tabListOwners().grdListOwner().getSelectedRow() != null && (!form.getLocalContext().getHasOwnerProceduresIsNotNull() || !form.getLocalContext().getHasOwnerProcedures()));
			//WDEV-15350 
			grdSlotsRow sRow = form.lyrSessEdit().tabSlotDetails().grdSlots().getSelectedRow();
			boolean slotOpen = sRow != null && sRow.getValue() != null && Status_Reason.SLOTOPENED.equals(sRow.getValue().getStatus()) && sRow.getValue().getAppointment() == null;
			form.getContextMenus().Scheduling.getSessionDetailsEditSlotsBLOCKItem().setVisible(slotOpen);
			form.getContextMenus().Scheduling.getSessionDetailsEditSlotsCANCELItem().setVisible(slotOpen);
			
			//WDEV-12918
			SessionParentChildSlotVo voSlot = form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getValue();
			boolean slotAvailable = voSlot != null && voSlot.getAppointment() == null && voSlot.getStatusIsNotNull() && voSlot.getStatus().equals(Status_Reason.SLOTOPENED); 
			form.getContextMenus().Scheduling.getSessionDetailsEditParentChildSlotsSUSPENDItem().setVisible(slotAvailable);			
			form.getContextMenus().Scheduling.getSessionDetailsEditParentChildSlotsRELEASEItem().setVisible(voSlot != null && voSlot.getStatusIsNotNull() && voSlot.getStatus().equals(Status_Reason.SUSPENDED));
			
			
			
			form.getContextMenus().Scheduling.getSessionDetailsEditExclusionTimesREMOVEItem().setVisible(form.lyrSessEdit().tabExclusion().grdExclTime().getSelectedRow() != null && !isFixed); //WDEV-11569
			form.getContextMenus().Scheduling.getSessionDetailsBookingRightsREMOVEItem().setVisible(form.lyrSessEdit().tabBookingRights().grdBookRights().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getSessionDetailsListOwnersREMOVEItem().setVisible(form.lyrSessEdit().tabListOwners().grdListOwner().getSelectedRow() != null);//WDEV-16189 && (form.getLocalContext().getHasOwnerProcedures() == null || form.getLocalContext().getHasOwnerProcedures().equals(Boolean.FALSE)));
			form.getContextMenus().Scheduling.getSessionDetailsEditTheatreProceduresREMOVEItem().setVisible(form.lyrSessEdit().tabTheatreProcedures().grdTheatre().getSelectedRow() != null);
			form.getContextMenus().Scheduling.getSessionDetailsEditActivityREMOVEItem().setVisible(form.lyrSessEdit().tabActivity().grdActivities().getSelectedRow() != null);
			
			//WDEV-18555 - allow user modify location for today and future sessions
			form.lyrSessEdit().tabGeneral().btnLocation().setEnabled(form.grdSessions().getValue() != null && form.grdSessions().getValue().getSessionDate() != null && form.grdSessions().getValue().getSessionDate().isGreaterOrEqualThan(new Date()));

		}
	}

	private void enableRowSelection()
	{
		for (int i = 0; i < form.lyrSessEdit().tabDos().grdDos().getRows().size(); i++)
		{
			form.lyrSessEdit().tabDos().grdDos().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrSessEdit().tabBookingRights().grdBookRights().getRows().size(); i++)
		{
			form.lyrSessEdit().tabBookingRights().grdBookRights().getRows().get(i).setSelectable(true);
		}
		
		//WDEV-11569
		for (int i = 0; i < form.lyrSessEdit().tabExclusion().grdExclTime().getRows().size(); i++)
		{
			form.lyrSessEdit().tabExclusion().grdExclTime().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrSessEdit().tabListOwners().grdListOwner().getRows().size(); i++)
		{
			form.lyrSessEdit().tabListOwners().grdListOwner().getRows().get(i).setSelectable(true);
		}

		for (int i = 0; i < form.lyrSessEdit().tabSlotDetails().grdSlots().getRows().size(); i++)
		{
			form.lyrSessEdit().tabSlotDetails().grdSlots().getRows().get(i).setSelectable(true);
		}
		
		for (int i = 0; i < form.lyrSessEdit().tabActivity().grdActivities().getRows().size(); i++)
		{
			form.lyrSessEdit().tabActivity().grdActivities().getRows().get(i).setSelectable(true);
		}
		
		//WDEV-12918
		for (int i = 0; i < form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getRows().size(); i++)
		{
			if(!form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getRows().get(i).getColBooked())
				form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getRows().get(i).setSelectable(true);
		}
	}

	private void search()
	{	
		clearInstanceControls();
		form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(null);//	WDEV-13235
	
		//WDEV-14801
		if (!validateSearchCriteria(form.dteProfFrom().getValue(), form.dteProfTo().getValue()))
		{
			form.grdSessions().getRows().clear();
			return;
		}
		
		SessionShortVoCollection voCollSession = domain.listSession(form.qmbProfile().getValue(), form.qmbDoService().getValue(), form.dteProfFrom().getValue(), form.dteProfTo().getValue());// 	WDEV-15190
		populateGrid(voCollSession);
	}

	private void populateGrid(SessionShortVoCollection voCollSession)
	{
		form.grdSessions().getRows().clear();

		if (voCollSession == null || voCollSession.size() == 0)
		{
			engine.showMessage("No matching Sessions found");
			return;
		}

		GenForm.grdSessionsRow sRow = null;
		for (int i = 0; i < voCollSession.size(); i++)
		{
			sRow = form.grdSessions().getRows().newRow();
			sRow.setcolDescription(voCollSession.get(i).getDescription());

			if (voCollSession.get(i).getEndTmIsNotNull())
				sRow.setcolEndTime(voCollSession.get(i).getEndTm().toString());

			if (voCollSession.get(i).getSessionDateIsNotNull())
				sRow.setcolSessDate(voCollSession.get(i).getSessionDate().toString());

			if (voCollSession.get(i).getServiceIsNotNull())
				sRow.setColSpecialty(voCollSession.get(i).getService().getServiceName());

			if (voCollSession.get(i).getStartTmIsNotNull())
				sRow.setcolStartTime(voCollSession.get(i).getStartTm().toString());
			
			//WDEV-18453
			sRow.setcolConsMediaType(voCollSession.get(i).getConsMediaTypeIsNotNull() ? voCollSession.get(i).getConsMediaType().getText() : "");
			sRow.setValue(voCollSession.get(i));
		}
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria();
		clearInstanceControls();
		updateControlState(); //WDEV-17905
	}

	private void clearSearchCriteria()
	{
		form.qmbProfile().clear();// 	WDEV-15190
		form.qmbDoService().clear();// 	WDEV-15190
		form.dteProfFrom().setValue(null);
		form.dteProfTo().setValue(null);
		form.grdSessions().getRows().clear();
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
		updateControlState(); //WDEV-17905
	}

	private boolean validateSearchCriteria(Date startDate, Date endDate)
	{
		if (startDate != null && endDate != null)
		{
			if (startDate.getDate().after(endDate.getDate()))
			{
				engine.showMessage("From Date cannot be greater than To Date"); //WDEV-14801
				return false;
			}
		}

		return true;
	}

	protected void onGrdSessionsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSession(domain.getSession(form.grdSessions().getValue()));
		populateScreenFromData();
		updateControlState();
	}

	private void populateScreenFromData()
	{
		clearInstanceControls();

		SessionVo voSession = form.getLocalContext().getSession();
		if (voSession == null)
			return;

		// general details
		form.lyrSessEdit().tabGeneral().timEnd().setValue(voSession.getEndTm());
		form.lyrSessEdit().tabGeneral().timStart().setValue(voSession.getStartTm());
		form.lyrSessEdit().tabGeneral().txtDescription().setValue(voSession.getDescription());

		if (voSession.getSchLocationIsNotNull())
			form.lyrSessEdit().tabGeneral().txtLocation().setValue(voSession.getSchLocation().getName());

		form.lyrSessEdit().tabGeneral().txtName().setValue(voSession.getName());

		if (voSession.getServiceIsNotNull())
			form.lyrSessEdit().tabGeneral().txtService().setValue(voSession.getService().getServiceName());
		
		//WDEV-18453 
		form.lyrSessEdit().tabGeneral().cmbConsMedia().setValue(voSession.getConsMediaType());
		if (voSession.getSessionStatusIsNotNull())
			form.lyrSessEdit().tabGeneral().txtStatus().setValue(voSession.getSessionStatus().getText());

		if (voSession.getSessionTypeIsNotNull())
			form.lyrSessEdit().tabGeneral().txtType().setValue(voSession.getSessionType().getText());
		
		if (voSession.getIsAdHocSessionIsNotNull())
			form.lyrSessEdit().tabGeneral().txtCategory().setValue(voSession.getIsAdHocSession().booleanValue() ? "Ad-hoc" : "Standard" );

		//WDEV-12918 - display theatre details
		if(voSession.getIsTheatreSessionIsNotNull() && voSession.getIsTheatreSession())
		{
			if(voSession.getTheatreTypeIsNotNull())
				form.lyrSessEdit().tabGeneral().txtTheatreSessionType().setValue(voSession.getTheatreType().getText());
			if(voSession.getAnaestheticTypeIsNotNull() && voSession.getAnaestheticType().size() > 0)
				form.lyrSessEdit().tabGeneral().txtAnaestheticTypes().setValue(voSession.getAnaestheticTypesAsString());
			if(voSession.getSlotTypeIsNotNull())
				form.lyrSessEdit().tabGeneral().txtSlotType().setValue(voSession.getSlotType().getText());
		}
		
		// Dos details
		DirectoryOfServiceVoCollection voDosColl = voSession.getDirectoryofServices();
		if (voDosColl != null)
		{
			GenForm.lyrSessEditLayer.tabDosContainer.grdDosRow dRow = null;
			for (int i = 0; i < voDosColl.size(); i++)
			{
				dRow = form.lyrSessEdit().tabDos().grdDos().getRows().newRow();
				dRow.setcolDosName(voDosColl.get(i).getDoSName());
				dRow.setcolDosId(voDosColl.get(i).getDoSId());
				dRow.setColSelected(true);
				dRow.setValue(voDosColl.get(i));
				dRow.setSelectable(false);
			}
		}
		
		SessionSlotVoCollection voCollSlots = voSession.getSessionSlots();
		if (voCollSlots != null)
		{
			voCollSlots.sort();
			for (int i = 0; i < voCollSlots.size(); i++)
			{
				addSlotRow(voCollSlots.get(i));
			}
		}
		
		if(voSession.getTheatreProceduresRemainingIsNotNull())
		{
			TheatreProcedureLiteVoCollection voCollTheatreProcs = voSession.getTheatreProceduresRemaining().getProcedureDetails();
			if(voCollTheatreProcs != null)
			{
				for(TheatreProcedureLiteVo voTheatreProc : voCollTheatreProcs)
				{
					addTheatreRow(voTheatreProc);
				}
			}
		}
		
		if(voSession.getSessionActivitiesIsNotNull())
		{
			SessionActivityLiteVoCollection voCollSessionAct = voSession.getSessionActivities();
			if(voCollSessionAct != null)
			{
				for(SessionActivityLiteVo voSessionAct : voCollSessionAct)
				{
					addActivityRow(voSessionAct);
				}
			}
		}

		// Booking Rights
		Session_BookingRightVoCollection voCollBookRight = voSession.getBookingRights();
		if (voCollBookRight != null)
		{
			GenForm.lyrSessEditLayer.tabBookingRightsContainer.grdBookRightsRow bRow = null;
			for (int i = 0; i < voCollBookRight.size(); i++)
			{
				bRow = form.lyrSessEdit().tabBookingRights().grdBookRights().getRows().newRow();
				loadRolesAndUsersIntoGridColumnCombo(bRow);
				bRow.getcolRole().setValue(voCollBookRight.get(i).getRole());
				bRow.setValue(voCollBookRight.get(i));
				bRow.setSelectable(false);
			}
		}

		// List Owners
		form.lyrSessEdit().tabListOwners().grdListOwner().getRows().clear();
		GenForm.lyrSessEditLayer.tabListOwnersContainer.grdListOwnerRow lRow;
		for (int p = 0; p < voSession.getListOwners().size(); p++)
		{
			Session_ListOwnerVo listVo = voSession.getListOwners().get(p);
			lRow = form.lyrSessEdit().tabListOwners().grdListOwner().getRows().newRow();
			lRow.setValue(listVo);
			lRow.setReadOnly(true);
			if (listVo.getHcpIsNotNull())
			{
				lRow.getColHcp().newRow(listVo.getHcp(), listVo.getHcp().getName().toString());
				lRow.getColHcp().setValue(listVo.getHcp());
			}
			lRow.setSelectable(false);
		}

		// Exclusion Periods
		Session_Exc_TimesVoCollection voCollExclusionTimes = voSession.getExclusionTimes();
		if (voCollExclusionTimes != null)
		{
			GenForm.lyrSessEditLayer.tabExclusionContainer.grdExclTimeRow eRow = null;
			for (int i = 0; i < voCollExclusionTimes.size(); i++)
			{
				eRow = form.lyrSessEdit().tabExclusion().grdExclTime().getRows().newRow();

				if (voCollExclusionTimes.get(i).getStartTimeIsNotNull())
					eRow.setcolStartTime(voCollExclusionTimes.get(i).getStartTime());
				if (voCollExclusionTimes.get(i).getEndTimeIsNotNull())
					eRow.setcolEndTime(voCollExclusionTimes.get(i).getEndTime());

				eRow.setValue(voCollExclusionTimes.get(i));
				eRow.setSelectable(false);
				eRow.setReadOnly(true);
			}
		}
		
		//WDEV-11569 Existing Appointments
		BookingAppointmentLiteVoCollection voCollAppts = domain.listNonCancelledAppointmentsForSession(voSession);
		if (voCollAppts != null)
		{
			voCollAppts.sort(SortOrder.ASCENDING);
			for (BookingAppointmentLiteVo voApptItem : voCollAppts)
			{
				grdApptsRow row = form.lyrSessEdit().tabExclusion().grdAppts().getRows().newRow();

				if (voApptItem.getApptStartTimeIsNotNull())
					row.setcolApptTime(voApptItem.getApptStartTime());
				if (voApptItem.getApptEndTimeIsNotNull())
				{
					row.setColDuration(calculateApptDuration(voApptItem.getApptStartTime(), voApptItem.getApptEndTime()));
					row.setColEndTime(voApptItem.getApptEndTime());
				}

				if (voApptItem.getActivityIsNotNull())
					row.setColActivity(voApptItem.getActivity().getName());
				
				row.setValue(voApptItem);				
			}
		}
		
		if(voSession.getSlotTypeIsNotNull())
		{
			if(voSession.getSlotType().equals(SlotType.THEATRETCITIME))
				form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().showtabTCITimes();
			else if(voSession.getSlotType().equals(SlotType.SLOTS))
				form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().showtabPCSlots();
		}
		
		//WDEV-11777 - Theatre Slots
		if(voSession.getTheatreSlotsIsNotNull())
		{
			SessionTheatreTCISlotLiteVoCollection voCollTheatreSlots = voSession.getTheatreSlots();
			if(voCollTheatreSlots != null)
			{
				voCollTheatreSlots.sort();
				for(SessionTheatreTCISlotLiteVo voTheatreProc : voCollTheatreSlots)
				{
					addTheatreTCIRow(voTheatreProc);
				}
			}
		}
		
		//WDEV-12918
		if(voSession.getParentChildSlotsIsNotNull())
		{
			SessionParentChildSlotVoCollection voCollPCSlots = voSession.getParentChildSlots();
			if(voCollPCSlots != null)
			{
				voCollPCSlots.sort();
				for(SessionParentChildSlotVo voPcSlot : voCollPCSlots)
				{
					addTheatrePCSlotRow(voPcSlot);
				}
			}
		}
	}
	
	private void addTheatreTCIRow(SessionTheatreTCISlotLiteVo voTheatreProc)
	{
		//WDEV-12918
		if (voTheatreProc == null)
			throw new CodingRuntimeException("voTheatreProc cannot be null in method addTheatreTCIRow");
		
		grdTCIRow row = form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabTCITimes().grdTCI().getRows().newRow();
		row.setcolTCITime(voTheatreProc.getToComeInTime());
		row.setSelectable(false);
	}
	
	//WDEV-12918
	private void addTheatrePCSlotRow(SessionParentChildSlotVo voSessPcSlot)
	{
		if (voSessPcSlot == null)
			throw new CodingRuntimeException("voSessPcSlot cannot be null in method addTheatrePCSlotRow");
		
		grdPCSlotsRow row = form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getRows().newRow();
		if(voSessPcSlot.getStartTimeIsNotNull())
			row.setColStartTime(voSessPcSlot.getStartTime().toString());
		if(voSessPcSlot.getDurationIsNotNull())
			row.setColDuration(voSessPcSlot.getDuration().toString());
		
		if(voSessPcSlot.getStatusIsNotNull() && voSessPcSlot.getStatus().equals(Status_Reason.SUSPENDED))
		{
			row.setBackColor(Color.Bisque);
			row.setTooltip("Suspended for: " + (voSessPcSlot.getStatusReasonIsNotNull() ? voSessPcSlot.getStatusReason().getText() : ""));
		}
		
		row.setColBooked(voSessPcSlot.getAppointmentIsNotNull() || voSessPcSlot.getParentSlotIsNotNull());

		row.setColActive(voSessPcSlot.getIsActiveIsNotNull() ? voSessPcSlot.getIsActive() : false);
		row.setValue(voSessPcSlot);
		row.setSelectable(false);
	}
	

	
	private void addActivityRow(SessionActivityLiteVo voSessionAct)
	{
		GenForm.lyrSessEditLayer.tabActivityContainer.grdActivitiesRow aRow;
		aRow = form.lyrSessEdit().tabActivity().grdActivities().getRows().newRow();
		
		if(voSessionAct == null)
		{
			ActivityLiteVoCollection voCollActivity = domain.listActivity();
			if(voCollActivity != null)
			{
				for(ActivityLiteVo voAct : voCollActivity)
				{
					aRow.getcolActivity().newRow(voAct, voAct.getName());
				}
				if(voCollActivity.size() == 1)
					aRow.getcolActivity().setValue(voCollActivity.get(0));
				else if(voCollActivity.size() > 1)
					aRow.getcolActivity().showOpened();		
				
				aRow.setValue(new SessionActivityLiteVo());
			}

		}
		else
		{
			if (voSessionAct.getActivityIsNotNull())
			{
				aRow.getcolActivity().newRow(voSessionAct.getActivity(), voSessionAct.getActivity().getName());
				aRow.getcolActivity().setValue(voSessionAct.getActivity());
				
				aRow.setcolActive(voSessionAct.getIsActive());
				aRow.setValue(voSessionAct);
				aRow.setSelectable(false);	
			}
		}	
	}

	private void addTheatreRow(TheatreProcedureLiteVo voTheatreProc)
	{
		GenForm.lyrSessEditLayer.tabTheatreProceduresContainer.grdTheatreRow tRow;
		tRow = form.lyrSessEdit().tabTheatreProcedures().grdTheatre().getRows().newRow();
		if (voTheatreProc.getProcedureIsNotNull())
		{
			tRow.getcolProcedure().newRow(voTheatreProc.getProcedure(), voTheatreProc.getProcedure().getProcedureName());
			tRow.getcolProcedure().setValue(voTheatreProc.getProcedure());
		}
		if(voTheatreProc.getIsLimitedIsNotNull())
			tRow.setcolIsLimited(voTheatreProc.getIsLimited());
		if(voTheatreProc.getNumberOfProceduresLeftIsNotNull())
			tRow.setcolNumberLeft(voTheatreProc.getNumberOfProceduresLeft());

		tRow.setcolNumberLeftReadOnly((voTheatreProc.getIsLimitedIsNotNull() && voTheatreProc.getIsLimited()) ? false : true);
		
		tRow.setSelectable(false);
		tRow.setValue(voTheatreProc);
	}

	private void loadRolesAndUsersIntoGridColumnCombo(grdBookRightsRow row)
	{
		AppRoleShortVoCollection voCollRole = form.getLocalContext().getRoleList();
		if (voCollRole == null)
			return;

		for (int i = 0; i < voCollRole.size(); i++)
			row.getcolRole().newRow(voCollRole.get(i), voCollRole.get(i).getName());
	}

	private void addSlotRow(SessionSlotVo voSlot)
	{
		GenForm.lyrSessEditLayer.tabSlotDetailsContainer.grdSlotsRow sRow;
		sRow = form.lyrSessEdit().tabSlotDetails().grdSlots().getRows().newRow();
		if (voSlot.getActivityIsNotNull())
			sRow.setcolActivity(voSlot.getActivity().getName());
		sRow.setcolPriority(voSlot.getPriority());
		if (voSlot.getStartTmIsNotNull())
			sRow.setcolSTime(voSlot.getStartTm().toString());
		if (voSlot.getStartTmIsNotNull() && voSlot.getDurationIsNotNull())
			sRow.setcolETime(calculateEndTime(voSlot.getStartTm().copy(), voSlot.getDuration()));;
		if (voSlot.getAppointmentIsNotNull())
			sRow.setcolBooked(true);
		if (voSlot.getDirectAccessSlotIsNotNull())
			sRow.setcolAccessType(voSlot.getDirectAccessSlot().toString());

		sRow.setcolImage(getImage(voSlot.getStatus()));
		sRow.setSelectable(false);
		sRow.setValue(voSlot);
	}

	private String calculateEndTime(Time startTm, Integer duration)
	{
		startTm.addMinutes(duration);
		return startTm.toString();
	}

	private Image getImage(Status_Reason status)
	{
		if (status == null)
			return null;

		if (status.equals(Status_Reason.CANCELLED))
			return form.getImages().Scheduling.Cancelled;
		if (status.equals(Status_Reason.BLOCKED))
			return form.getImages().Core.RedFlag;
		if (status.equals(Status_Reason.SLOTOPENED))
			return form.getImages().Core.Tick;
		//WDEV-10148
		if (status.equals(Status_Reason.CANCEL_PROVISIONAL))
			return form.getImages().Scheduling.Cancel_Provisional;

		return null;
	}

	private void clearInstanceControls()
	{
		// General Details
		form.lyrSessEdit().tabGeneral().timEnd().setValue(null);
		form.lyrSessEdit().tabGeneral().timStart().setValue(null);
		form.lyrSessEdit().tabGeneral().txtCategory().setValue(null);
		form.lyrSessEdit().tabGeneral().txtDescription().setValue(null);
		form.lyrSessEdit().tabGeneral().txtLocation().setValue(null);
		form.lyrSessEdit().tabGeneral().txtName().setValue(null);
		form.lyrSessEdit().tabGeneral().txtService().setValue(null);
		//WDEV-18453
		form.lyrSessEdit().tabGeneral().cmbConsMedia().setValue(null);
		form.lyrSessEdit().tabGeneral().txtStatus().setValue(null);
		form.lyrSessEdit().tabGeneral().txtType().setValue(null);

		// Slot Details
		form.lyrSessEdit().tabSlotDetails().grdSlots().getRows().clear();
		form.lyrSessEdit().tabDos().grdDos().getRows().clear();
		
		//Activities
		form.lyrSessEdit().tabActivity().grdActivities().getRows().clear();
		
		//Theatre Details
		form.lyrSessEdit().tabTheatreProcedures().grdTheatre().getRows().clear();

		// Booking Rights
		form.lyrSessEdit().tabBookingRights().grdBookRights().getRows().clear();

		// List Owners
		form.lyrSessEdit().tabListOwners().grdListOwner().getRows().clear();

		// Exclusion Times
		form.lyrSessEdit().tabExclusion().grdExclTime().getRows().clear();
		
		//WDEV-11569 Appts
		form.lyrSessEdit().tabExclusion().grdAppts().getRows().clear();
		
		//WDEV-11777 Slots
		form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabTCITimes().grdTCI().getRows().clear();
		
		//WDEV-12918
		form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getRows().clear();
		
		//WDEV-12918 theatre sessiion details
		form.lyrSessEdit().tabGeneral().txtTheatreSessionType().setValue(null);
		form.lyrSessEdit().tabGeneral().txtAnaestheticTypes().setValue(null);
		form.lyrSessEdit().tabGeneral().txtSlotType().setValue(null);
		
		form.lyrSessEdit().showtabGeneral();
	}

	protected void onBtnSaveClick() throws PresentationLogicException
	{
		save();
	}

	/**
	 * 
	 */
	private void save()
	{
		SessionVo voSession = form.getLocalContext().getSession();
		voSession = populateDataFromScreen(voSession);
		if (voSession == null)
			return;

		String[] arrErrors = voSession.validate(getUIValidationRules(voSession));
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}

		try
		{
			voSession = domain.saveSession(voSession, true);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}

		search();
		form.setMode(FormMode.VIEW);
	}

	private String[] getUIValidationRules(SessionVo voSession)
	{
		List<String> errors = new ArrayList<String>();
				
		if(voSession != null)
		{
			if(voSession.getStartTm() == null)
				errors.add("General Details Tab : Start Time is mandatory");
			if(voSession.getEndTm() == null)
				errors.add("General Details Tab : End Time is mandatory");
			// WDEV-18555 - allow user modify location
			if(voSession.getSchLocation() == null)
				errors.add("General Details Tab : Location is mandatory");
			if(voSession.getStartTmIsNotNull() && voSession.getEndTmIsNotNull())
			{
				if(voSession.getStartTm().isGreaterOrEqualThan(voSession.getEndTm()))
					errors.add("General Details Tab : Start Time must be before End Time");
			}
			
			//wdev-11720 - Exclusion Times
			Session_Exc_TimesVoCollection voCollExclusionTimes = voSession.getExclusionTimes();
			if(voCollExclusionTimes != null && voCollExclusionTimes.size() > 0)
			{
				for(int i = 0;i < voCollExclusionTimes.size();i++)
				{
					Session_Exc_TimesVo voExclusion = voCollExclusionTimes.get(i);
					
					if(voExclusion == null)
						continue;
					
					if (voExclusion.getStartTime() == null || voExclusion.getEndTime() == null)
					{
						errors.add("Exclusion Periods Tab: Exclusion Start Time and Exclusion End Time are mandatory for all exclusion periods");
					}
					
					if(voSession.getStartTmIsNotNull() && voSession.getEndTmIsNotNull())
					{
						if(voExclusion.getStartTimeIsNotNull() && (voExclusion.getStartTime().isLessThan(voSession.getStartTm()) || voExclusion.getStartTime().isGreaterThan(voSession.getEndTm())))
						{
							errors.add("Exclusion Periods Tab : Exclusion Start Time and Exclusion End Time must be in interval of Session Start Time and Session End Time");
							break;
						}
						if(voExclusion.getEndTimeIsNotNull() && ( voExclusion.getEndTime().isLessThan(voSession.getStartTm()) || voExclusion.getEndTime().isGreaterThan(voSession.getEndTm()) ))
						{
							errors.add("Exclusion Periods Tab : Exclusion Start Time and Exclusion End Time must be in interval of Session Start Time and Session End Time");
							break;
						}
					}
					
					if( voExclusion.getStartTimeIsNotNull() && voExclusion.getEndTimeIsNotNull() && voExclusion.getStartTime().isGreaterOrEqualThan(voExclusion.getEndTime())) //WDEV-14801
					{
							errors.add("Exclusion Periods Tab : Exclusion Start Time must be before Exclusion End Time");
							break;
					}
				}
			}
			//-------
			if(voSession.getTheatreProceduresRemainingIsNotNull() && voSession.getTheatreProceduresRemaining().getProcedureDetailsIsNotNull())
			{
				for(TheatreProcedureLiteVo voTheatreProc : voSession.getTheatreProceduresRemaining().getProcedureDetails())
				{
					if(voTheatreProc.getProcedure() == null)
						errors.add("Procedure is mandatory on the Theatre Tab");
					
					if(voTheatreProc.getIsLimited() && !voTheatreProc.getNumberOfProceduresLeftIsNotNull())
						errors.add("Number Of Procedures Left is mandatory on the Theatre Tab");	
				}
			}
			
			//WDEV-10129 - It should not be possible to adjust the time to less than the sum of the procedures booked - also update remaining time if validation succeeds
			if(voSession.getIsTheatreSessionIsNotNull() && voSession.getIsTheatreSession())
			{
				if(voSession.getStartTm() != null  && voSession.getEndTm() != null)
				{
					//get the total duration of all theatre appts that are not cancelled etc.
					Integer usedTotal = domain.getUsedMins(voSession);
					Integer remainingTime = SlotGenerationUtils.calculateDuration(voSession.getStartTm().toString(), voSession.getEndTm().toString());	
					
					if(remainingTime != null && usedTotal != null)
					{
						if(remainingTime < usedTotal)
							errors.add("It is not possible to adjust the time to less than the sum of the procedures booked.");
						else
							voSession.setRemainingTime(remainingTime);
					}
				}				
			}
		
			if(voSession.getIsFixedIsNotNull() && !voSession.getIsFixed())
			{				
				//WDEV-8990 if flexible validate that activities are entered
				if(voSession.getSessionActivities() == null || voSession.getSessionActivities().size() == 0)
					errors.add("Activities are mandatory");
				else
				{
					//count active there must be at least one
					int activeCount = 0;
					for (SessionActivityLiteVo voSessAct : voSession.getSessionActivities())
					{
						if (voSessAct.getActivity() != null && (voSessAct.getIsActiveIsNotNull() && voSessAct.getIsActive()))
							activeCount++;	
					}
					if(activeCount == 0)
						errors.add("You must select one active activity");
				}
			}
		}
		
		
		return errors.size()>0 ? errors.toArray(new String[0]) : null;
	}

	private SessionVo populateDataFromScreen(SessionVo voSession)
	{
		// general Details
		voSession.setDescription(form.lyrSessEdit().tabGeneral().txtDescription().getValue());
		//WDEV-18453
		voSession.setConsMediaType(form.lyrSessEdit().tabGeneral().cmbConsMedia().getValue());
		voSession.setStartTm(form.lyrSessEdit().tabGeneral().timStart().getValue());
		voSession.setEndTm(form.lyrSessEdit().tabGeneral().timEnd().getValue());

		if(voSession.getIsTheatreSessionIsNotNull() && voSession.getIsTheatreSession())
		{
			SessionTheatreProceduresRemainingVo voTheatreProcsRemaining = voSession.getTheatreProceduresRemaining();
			if(voTheatreProcsRemaining == null || voTheatreProcsRemaining.getProcedureDetails() == null)
				throw new CodingRuntimeException("Generated Session with no Theatre Procedures found");
			
			voTheatreProcsRemaining.getProcedureDetails().clear();
			GenForm.lyrSessEditLayer.tabTheatreProceduresContainer.grdTheatreRow tRow = null;
			for (int i = 0; i < form.lyrSessEdit().tabTheatreProcedures().grdTheatre().getRows().size(); i++)
			{
				tRow = form.lyrSessEdit().tabTheatreProcedures().grdTheatre().getRows().get(i);

				TheatreProcedureLiteVo voTheatreProc = tRow.getValue();
				voTheatreProc.setIsLimited(tRow.getcolIsLimited());
				
				voTheatreProc.setNumberOfProceduresLeft(tRow.getcolIsLimited() ? tRow.getcolNumberLeft() : null);
				
				voTheatreProc.setProcedure((ProcedureLiteVo)tRow.getcolProcedure().getValue());
				voTheatreProcsRemaining.getProcedureDetails().add(voTheatreProc);
			}
			
			//WDEV-12918
			if(voSession.getParentChildSlotsIsNotNull())
			{
				voSession.getParentChildSlots().clear();
				for(int i=0;i<form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getRows().size();i++)
				{
					grdPCSlotsRow row = form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getRows().get(i);
					voSession.getParentChildSlots().add(row.getValue());
				}
			}
		}
		else
		{
			// Slot details
			SessionSlotVoCollection voCollSessionSlots = new SessionSlotVoCollection();
			GenForm.lyrSessEditLayer.tabSlotDetailsContainer.grdSlotsRow aRow = null;
			for (int i = 0; i < form.lyrSessEdit().tabSlotDetails().grdSlots().getRows().size(); i++)
			{
				aRow = form.lyrSessEdit().tabSlotDetails().grdSlots().getRows().get(i);

				SessionSlotVo voSlot = aRow.getValue();
				voSlot.setPriority(aRow.getcolPriority());
				voCollSessionSlots.add(voSlot);
			}
			voSession.setSessionSlots(voCollSessionSlots);

			DirectoryOfServiceVoCollection voCollDirServices = new DirectoryOfServiceVoCollection();
			GenForm.lyrSessEditLayer.tabDosContainer.grdDosRow dRow = null;
			DirectoryOfServiceVo voDirService = null;
			for (int i = 0; i < form.lyrSessEdit().tabDos().grdDos().getRows().size(); i++)
			{
				dRow = form.lyrSessEdit().tabDos().grdDos().getRows().get(i);
				if(dRow.getColSelected() == true)
				{	
					voDirService = dRow.getValue();
					voCollDirServices.add(voDirService);
				}
			}
			voSession.setDirectoryofServices(voCollDirServices);
			
			//activities
			GenForm.lyrSessEditLayer.tabActivityContainer.grdActivitiesRow acRow = null;
			SessionActivityLiteVoCollection voCollSessActivity = new SessionActivityLiteVoCollection();
			for (int i = 0; i < form.lyrSessEdit().tabActivity().grdActivities().getRows().size(); i++)
			{
				acRow = form.lyrSessEdit().tabActivity().grdActivities().getRows().get(i);

				SessionActivityLiteVo voSessActivity = acRow.getValue();
				voSessActivity.setActivity((ActivityLiteVo) acRow.getcolActivity().getValue());
				voSessActivity.setIsActive(acRow.getcolActive());
				voCollSessActivity.add(voSessActivity);
			}
			voSession.setSessionActivities(voCollSessActivity);
		}

		// Booking Rights
		Session_BookingRightVoCollection voCollBookRights = new Session_BookingRightVoCollection();
		GenForm.lyrSessEditLayer.tabBookingRightsContainer.grdBookRightsRow bRow = null;
		Session_BookingRightVo voBookRight = null;
		AppRoleShortVoCollection roleCollection = new AppRoleShortVoCollection(); //WDEV-16049
		
		for (int i = 0; i < form.lyrSessEdit().tabBookingRights().grdBookRights().getRows().size(); i++)
		{
			bRow = form.lyrSessEdit().tabBookingRights().grdBookRights().getRows().get(i);
			voBookRight = bRow.getValue();
			AppRoleShortVo voAppRoleShort = (AppRoleShortVo) bRow.getcolRole().getValue();
			
			if (roleCollection.contains(voAppRoleShort))
				continue;
			
			roleCollection.add(voAppRoleShort);
			voBookRight.setRole(voAppRoleShort);		
			voCollBookRights.add(voBookRight);
		}
		
		voSession.setBookingRights(voCollBookRights);
		
		//WDEV-11569 Exclusion Times
		Session_Exc_TimesVoCollection voCollExclusionTimes = new Session_Exc_TimesVoCollection();
		GenForm.lyrSessEditLayer.tabExclusionContainer.grdExclTimeRow eRow = null;
		Session_Exc_TimesVo voExclusion = null;
		for (int i = 0; i < form.lyrSessEdit().tabExclusion().grdExclTime().getRows().size(); i++)
		{
			eRow = form.lyrSessEdit().tabExclusion().grdExclTime().getRows().get(i);
			voExclusion = eRow.getValue();
			
			voExclusion.setStartTime(eRow.getcolStartTime());	
			voExclusion.setEndTime(eRow.getcolEndTime());
			
			voCollExclusionTimes.add(voExclusion);
		}
		
		voSession.setExclusionTimes(voCollExclusionTimes);
		
		voSession.setRemainingTime(calculateSessionRemainingTime(voSession));
		
		// List owners
		Session_ListOwnerVoCollection voCollListOwner = new Session_ListOwnerVoCollection();
		GenForm.lyrSessEditLayer.tabListOwnersContainer.grdListOwnerRow gRow = null;
		Session_ListOwnerVo voListOwner = null;
		for (int i = 0; i < form.lyrSessEdit().tabListOwners().grdListOwner().getRows().size(); i++)
		{
			gRow = form.lyrSessEdit().tabListOwners().grdListOwner().getRows().get(i);
			voListOwner = gRow.getValue();
			voListOwner.setHcp((HcpLiteVo) gRow.getColHcp().getValue());
			voCollListOwner.add(voListOwner);
		}
		voSession.setListOwners(voCollListOwner);

		//go through the slots and remove any reference to listowners that are no longer in overall record - dlaffan
		if(voSession.getSessionSlotsIsNotNull())
		{
			for(SessionSlotVo voSlot : voSession.getSessionSlots())
			{
				if(voSlot.getSlotRespIsNotNull())
				{
					if(!voSession.getListOwners().contains(voSlot.getSlotResp()))
						voSlot.setSlotResp(null);
				}
			}
		}
		return voSession;
	}

	/**
	 * Function used to calculate Session remaining time
	 * only for non-fixed sessions; otherwise it will return null
	 */
	private Integer calculateSessionRemainingTime(SessionVo session)
	{
		// If session Start Time or End Time then return null for the remaining time
		if (session == null || session.getStartTm() == null || session.getEndTm() == null)
			return null;

		// Calculate remaining time - for non fixed sessions only
		if (Boolean.TRUE.equals(session.getIsFixed()))
			return null;
		
		int remainingTime = calculateDuration(session.getStartTm(), session.getEndTm());

		// Reduce time from non cancelled appointments
		BookingAppointmentLiteVoCollection appointments = domain.listNonCancelledAppointmentsForSession(session);

		// Deduce appointment times for the session
		for (BookingAppointmentLiteVo appointment : appointments)
		{
			if (appointmentOverlapsInterval(appointment, session.getStartTm(), session.getEndTm()))
			{
				Time startTime =  session.getStartTm().isGreaterOrEqualThan(appointment.getApptStartTime()) ? session.getStartTm() : appointment.getApptStartTime();
				Time endTime = session.getEndTm().isLessOrEqualThan(appointment.getApptEndTime()) ? session.getEndTm() : appointment.getApptEndTime();
				
				remainingTime -= calculateApptDuration(startTime, endTime);
			}
		}

		// Deduce exclusion times for the session
		if (session.getExclusionTimesIsNotNull())
		{
			for (Session_Exc_TimesVo exclusionTime : session.getExclusionTimes())
			{
				if (exclusionTime.getStartTimeIsNotNull() && exclusionTime.getEndTimeIsNotNull())
				{
					remainingTime -= calculateDuration(exclusionTime.getStartTime(), exclusionTime.getEndTime());
				}
			}
		}

		return remainingTime;
	}	

	private boolean appointmentOverlapsInterval(BookingAppointmentLiteVo appointment, Time startTime, Time endTime)
	{
		if (appointment == null || appointment.getApptStartTime() == null || appointment.getApptEndTime() == null)
			return false;
		
		if (startTime == null || endTime == null)
			return false;
		
		if (appointment.getApptStartTime().isLessOrEqualThan(startTime) && appointment.getApptEndTime().isLessOrEqualThan(startTime))
			return false;
		
		if (appointment.getApptStartTime().isGreaterOrEqualThan(endTime) && appointment.getApptEndTime().isGreaterOrEqualThan(endTime))
			return false;
		
		return true;
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		search();
		form.setMode(FormMode.VIEW);
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEdit.EDIT :
				form.lyrSessEdit().showtabGeneral();
				form.setMode(FormMode.EDIT);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsListOwners.ADD :

				GenForm.lyrSessEditLayer.tabListOwnersContainer.grdListOwnerRow aoRow = form.lyrSessEdit().tabListOwners().grdListOwner().getRows().newRow(true);
				Session_ListOwnerVo voListOwner = new Session_ListOwnerVo();
				aoRow.setValue(voListOwner);
				aoRow.setReadOnly(false);
				
				form.getLocalContext().setHasOwnerProcedures(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsBookingRights.ADD :

				GenForm.lyrSessEditLayer.tabBookingRightsContainer.grdBookRightsRow abRow = form.lyrSessEdit().tabBookingRights().grdBookRights().getRows().newRow(true);
				loadRolesAndUsersIntoGridColumnCombo(abRow);
				abRow.setValue(new Session_BookingRightVo());
				abRow.setReadOnly(false);
			break;
			//WDEV-11569
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditExclusionTimes.ADD : 
				GenForm.lyrSessEditLayer.tabExclusionContainer.grdExclTimeRow eRow = form.lyrSessEdit().tabExclusion().grdExclTime().getRows().newRow(true);
				eRow.setValue(new Session_Exc_TimesVo());
				eRow.setReadOnly(false);
			break;
			
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditTheatreProcedures.ADD :
				GenForm.lyrSessEditLayer.tabTheatreProceduresContainer.grdTheatreRow taRow = form.lyrSessEdit().tabTheatreProcedures().grdTheatre().getRows().newRow(true);
				TheatreProcedureLiteVo voTheatreProc = new TheatreProcedureLiteVo();
				taRow.setValue(voTheatreProc);
				taRow.setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditActivity.ADD :
				addActivityRow(null);
			break;	
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditSlots.ADD :
				form.getGlobalContext().Scheduling.setSessionSlot(null);
				form.getGlobalContext().Scheduling.setDirectoryofServicesCollection(form.getLocalContext().getSessionIsNotNull() ? form.getLocalContext().getSession().getDirectoryofServices() : null);
				//WDEV-12214
				form.getGlobalContext().Scheduling.setSelectedSessionListOwners(form.lyrSessEdit().tabListOwners().grdListOwner().getValues());	
				engine.open(form.getForms().Scheduling.SessionSlotDialog, new Object[] {form.getLocalContext().getSession()});
			break;	
			//WDEV-12918
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditParentChildSlots.ADD :	
				form.getGlobalContext().Scheduling.setSessionParentChildSlot(new SessionParentChildSlotVo());
				form.getGlobalContext().Scheduling.getSessionParentChildSlot().setIsActive(true);
				engine.open(form.getForms().Scheduling.SessionParentChildSlotDialog);
			break;	
			
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsListOwners.EDIT :
				GenForm.lyrSessEditLayer.tabListOwnersContainer.grdListOwnerRow eoRow = form.lyrSessEdit().tabListOwners().grdListOwner().getSelectedRow();
				eoRow.setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsBookingRights.EDIT :
				GenForm.lyrSessEditLayer.tabBookingRightsContainer.grdBookRightsRow ebRow = form.lyrSessEdit().tabBookingRights().grdBookRights().getSelectedRow();
				loadRolesAndUsersIntoGridColumnCombo(ebRow);
				ebRow.setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditTheatreProcedures.EDIT :
				GenForm.lyrSessEditLayer.tabTheatreProceduresContainer.grdTheatreRow tRow = form.lyrSessEdit().tabTheatreProcedures().grdTheatre().getSelectedRow();
				tRow.setReadOnly(false);
			break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditParentChildSlots.SUSPEND:
				setContextInfoForDialog();
				engine.open(form.getForms().Scheduling.ModifyMultipleSlotsDialog, new Object[]{Status_Reason.SUSPENDED, Boolean.FALSE}, "Suspend");
			break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditParentChildSlots.RELEASE:
				setContextInfoForDialog();
				engine.open(form.getForms().Scheduling.ModifyMultipleSlotsDialog, new Object[]{Status_Reason.SLOTOPENED, Boolean.FALSE}, "Release");
			break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditSlots.BLOCK :
				GenForm.lyrSessEditLayer.tabSlotDetailsContainer.grdSlotsRow bRow = form.lyrSessEdit().tabSlotDetails().grdSlots().getSelectedRow();
				if (bRow.getValue() != null)
				{			
					bRow.getValue().setStatus(Status_Reason.BLOCKED);
					bRow.setcolImage(getImage(Status_Reason.BLOCKED));
				}
				
				//wdev-12580
				SessionVo voSession = form.getLocalContext().getSession();
				if(voSession != null)
				{
					int remainingSlots = voSession.getRemainingSlots();
					remainingSlots -= 1;
					
					if(remainingSlots < 0)
						remainingSlots = 0;
					
					voSession.setRemainingSlots(remainingSlots);
					form.getLocalContext().setSession(voSession);
				}
				//-----------
				
			break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditSlots.CANCEL :
				GenForm.lyrSessEditLayer.tabSlotDetailsContainer.grdSlotsRow cRow = form.lyrSessEdit().tabSlotDetails().grdSlots().getSelectedRow();
				if (cRow.getValue() != null)
				{
					cRow.getValue().setStatus(Status_Reason.CANCELLED);
					cRow.setcolImage(getImage(Status_Reason.CANCELLED));
				}
				
				//wdev-12580
				SessionVo voSessionc = form.getLocalContext().getSession();
				if(voSessionc != null)
				{
					int remainingSlots = voSessionc.getRemainingSlots();
					remainingSlots -= 1;
					
					if(remainingSlots < 0)
						remainingSlots = 0;
					
					voSessionc.setRemainingSlots(remainingSlots);
					form.getLocalContext().setSession(voSessionc);
				}
				//-----------
				
			break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsListOwners.REMOVE:
				form.lyrSessEdit().tabListOwners().grdListOwner().removeSelectedRow();
				break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsBookingRights.REMOVE:
				form.lyrSessEdit().tabBookingRights().grdBookRights().removeSelectedRow();
				break;
			//WDEV-11569
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditExclusionTimes.REMOVE:
				form.lyrSessEdit().tabExclusion().grdExclTime().removeSelectedRow();
				break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditTheatreProcedures.REMOVE:
				form.lyrSessEdit().tabTheatreProcedures().grdTheatre().removeSelectedRow();
				break;
			case GenForm.ContextMenus.SchedulingNamespace.SessionDetailsEditActivity.REMOVE:
				form.lyrSessEdit().tabActivity().grdActivities().removeSelectedRow();
				break;
			default:
		}
		
		updateControlState();
	}

	private void setContextInfoForDialog()
	{
		BookTheatreSlotDialogVo voData = new BookTheatreSlotDialogVo();//	WDEV-13235
		
		voData.setParentChildSlot(form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getValue());
		
		SessionTheatreVo session = domain.getTheatreSession(form.grdSessions().getValue());//	WDEV-13235
		
		if(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData() != null 
			&& form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSessionIsNotNull()
			&& form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getParentChildSlotsIsNotNull())///	WDEV-13235
		{
			session.setParentChildSlots(form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData().getSession().getParentChildSlots());
		}
		
		voData.setSession(session);//	WDEV-13235
		
		form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(voData);
	}
	
	
	private int calculateDuration(Time startTime, Time endTime)
	{
		if (startTime == null || endTime == null)
			throw new CodingRuntimeException("startTime or endTime is null in method calculateDuration");
	
		int mins = endTime.getTotalMinutes() - startTime.getTotalMinutes();
		if(endTime.isLessThan(startTime))	
		{
			Time midNight = new Time(23,59);
			mins = midNight.getTotalMinutes() + 1 - startTime.getTotalMinutes() + endTime.getTotalMinutes(); 
		}
			
		return mins;
	}
	
	private int calculateApptDuration(Time startTime, Time endTime)
	{
		if (startTime == null || endTime == null)
			throw new CodingRuntimeException("apptStartTime or apptEndTime is null in method calculateApptDuration");
	
		int mins = endTime.getTotalMinutes() - startTime.getTotalMinutes();
		//appt has gone past midnight
		if(endTime.isLessThan(startTime))	
		{
			Time midNight = new Time(23,59);
			mins = midNight.getTotalMinutes() + 1 - startTime.getTotalMinutes() + endTime.getTotalMinutes(); 
		}
			
		return mins;
	}
	

	protected void onGrdListOwnerGridQueryComboBoxTextSubmited(int column, grdListOwnerRow row, String text) throws PresentationLogicException
	{
		row.getColHcp().clear();

		HcpFilter filter = new HcpFilter();
		PersonName voName = new PersonName();
		voName.setSurname(text);
		filter.setQueryName(voName);

		HcpLiteVoCollection voCollHcp = domain.listHcpLite(filter);
		if (voCollHcp.size() == 0)
		{
			engine.showMessage("No matching records found");
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			row.getColHcp().newRow(voCollHcp.get(i), voCollHcp.get(i).getName().toString());
		}

		if (voCollHcp.size() == 1)
			row.getColHcp().setValue(voCollHcp.get(0));
		else
			row.getColHcp().showOpened();
	}

	protected void onGrdSlotsSelectionChanged() throws PresentationLogicException
	{
		grdSlotsRow sRow = form.lyrSessEdit().tabSlotDetails().grdSlots().getSelectedRow();
		if (sRow != null && sRow.getValue() != null)
		{
			//if the slot is not cancelled,blocked or cancel_provisional - allow block and cancel options
			boolean canProcess = !sRow.getcolBooked() && form.lyrSessEdit().tabSlotDetails().grdSlots().getValue() != null && (sRow.getValue().getStatusIsNotNull() && (!sRow.getValue().getStatus().equals(Status_Reason.BLOCKED) && !sRow.getValue().getStatus().equals(Status_Reason.CANCELLED) && !sRow.getValue().getStatus().equals(Status_Reason.CANCEL_PROVISIONAL)) && form.getMode().equals(FormMode.EDIT));
			
			form.getContextMenus().Scheduling.getSessionDetailsEditSlotsBLOCKItem().setVisible(canProcess);
			form.getContextMenus().Scheduling.getSessionDetailsEditSlotsCANCELItem().setVisible(canProcess);
		}
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Scheduling.SessionSlotDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				form.getGlobalContext().Scheduling.getSessionSlot().setSession(form.getLocalContext().getSession());
				form.getGlobalContext().Scheduling.getSessionSlot().setIsActive(true);
				addSlotRow(form.getGlobalContext().Scheduling.getSessionSlot());
				//wdev-14089
				SessionVo voSession = form.getLocalContext().getSession();
				if(voSession != null)
				{
					int remainingSlots = voSession.getRemainingSlots();
					remainingSlots += 1;					
					voSession.setRemainingSlots(remainingSlots);
					
					int totalslots = voSession.getTotalSlots();
					totalslots += 1;
					voSession.setTotalSlots(totalslots);
					
					form.getLocalContext().setSession(voSession);
				}
				//-----
			}
				
		}
		if (formName.equals(form.getForms().Scheduling.SessionParentChildSlotDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				if(form.getLocalContext().getSessionIsNotNull())
				{
					form.getGlobalContext().Scheduling.getSessionParentChildSlot().setSession(form.getLocalContext().getSession());
					form.getGlobalContext().Scheduling.getSessionParentChildSlot().setSessDateTime(new DateTime(form.getLocalContext().getSession().getSessionDate(), new Time("00:00")));	
					form.getGlobalContext().Scheduling.getSessionParentChildSlot().setStatus(Status_Reason.SLOTOPENED);
					form.getGlobalContext().Scheduling.getSessionParentChildSlot().setStatus(Status_Reason.SLOTOPENED);
				}
				
				addTheatrePCSlotRow(form.getGlobalContext().Scheduling.getSessionParentChildSlot());
			}
		}
		if (formName.equals(form.getForms().Scheduling.ModifyMultipleSlotsDialog))
		{
			if(result != null)
			{
				if(result.equals(DialogResult.OK))
				{
					loadFixedTheatreSlotsGridWithUnpersistedChanges();
					
					
				}
			}
		}
		
		//WDEV-18555 -allow user modify location
		if (formName.equals(form.getForms().Admin.LocationSelect) && result.equals(DialogResult.OK))
		{
			setLocation();
		}
		
		//WDEV-13818 
		updateControlState();
	}

	private void setLocation()
	{
		LocShortVo voLocShort = form.getGlobalContext().Admin.getProfileLocation();

		SessionVo voSession = form.getLocalContext().getSession();
		voSession.setSchLocation(voLocShort);
		form.getLocalContext().setSession(voSession);

		form.lyrSessEdit().tabGeneral().txtLocation().setValue(voLocShort.getName());
	}

	/**
	 * 
	 */
	private void loadFixedTheatreSlotsGridWithUnpersistedChanges()
	{
		//load the screen with the new status's from the global context modified on the dialog
		BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		if(voData != null)
		{
			for(int i=0;i<form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getRows().size(); i++)
			{
				grdPCSlotsRow row = form.lyrSessEdit().tabTheatreProcedures().lyrTheatre().tabPCSlots().grdPCSlots().getRows().get(i);
				for(SessionParentChildSlotVo voDlgSlot : voData.getSession().getParentChildSlots())
				{
					if(row.getValue().equals(voDlgSlot))
						row.setValue(voDlgSlot);
					
					row.setBackColor(Color.Default);
					if(row.getValue().getStatusIsNotNull())
					{
						if(row.getValue().getStatus().equals(Status_Reason.SUSPENDED))
						{
							row.setBackColor(Color.Bisque);
							row.setTooltip("Suspended for: " + (row.getValue().getStatusReasonIsNotNull() ? row.getValue().getStatusReason().getText() : ""));
						}
					}
				}
			}
		}
	}

	protected void onFormModeChanged()
	{
		updateControlState();
	}
	
	protected void onGrdBookRightsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	protected void onGrdListOwnerSelectionChanged() throws PresentationLogicException
	{
		if(form.lyrSessEdit().tabListOwners().grdListOwner().getValue() instanceof Session_ListOwnerVo)
			form.getLocalContext().setHasOwnerProcedures(checkIfOwnerHasProcedures((form.lyrSessEdit().tabListOwners().grdListOwner().getValue().getHcp())));
		
		updateControlState();
	}

	private Boolean checkIfOwnerHasProcedures(HcpRefVo hcpId) 
	{
		if(hcpId == null)
			return false;
		
		String proceduresId = "";
		
		for (int i = 0; i < form.lyrSessEdit().tabTheatreProcedures().grdTheatre().getRows().size(); i++)
		{
			grdTheatreRow tRow = form.lyrSessEdit().tabTheatreProcedures().grdTheatre().getRows().get(i);
			
			if(tRow.getcolProcedure().getValue() instanceof ProcedureLiteVo)
			{
				proceduresId += ((proceduresId == null || proceduresId.length() == 0) ? "" : ",") + ((ProcedureLiteVo)tRow.getcolProcedure().getValue()).getID_Procedure();
			}
		}
		
		return domain.hasSelectedOwnerProcedures(hcpId, proceduresId);
	}

	@Override
	protected void onGrdDosGridCheckBoxClicked(int column, grdDosRow row, boolean isChecked) throws PresentationLogicException
	{
		if(!isChecked)
		{
			form.getLocalContext().setSelectedDos(row.getValue());
			engine.showMessage("Remove DoS's from Corresponding Slots", "Modify Slots", MessageButtons.YESNO, MessageIcon.QUESTION);
		}
		else
			form.getLocalContext().setSelectedDos(null);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(result.equals(DialogResult.YES))
		{
			SessionVo voSession = form.getLocalContext().getSession();
			if(voSession != null)
			{
				if(voSession.getSessionSlotsIsNotNull())
				{
					for(SessionSlotVo voSlot : voSession.getSessionSlots())
					{
						if(voSlot.getActualDirectoryOfService() == null)
						{
							removeDos(voSlot.getDirectoryOfServices());
						}	
						else
						{
							if(!voSlot.getActualDirectoryOfService().equals(form.getLocalContext().getSelectedDos()))
							{
								removeDos(voSlot.getDirectoryOfServices());
							}
						}
					}
				}
			}
		}
		else if(result.equals(DialogResult.NO))
		{
			form.getLocalContext().setSelectedDos(null);
		}
	}

	private void removeDos(DirectoryOfServiceSessionSlotVoCollection directoryOfServices)
	{
		if(directoryOfServices != null && form.getLocalContext().getSelectedDos() != null)
		{
			for(DirectoryOfServiceSessionSlotVo voDosSlot : directoryOfServices)
			{
				if(voDosSlot.getDirectoryOfService().equals(form.getLocalContext().getSelectedDos()))
				{
					directoryOfServices.remove(voDosSlot);
					return;
				}
			}
		}
	}

	@Override
	protected void onGrdTheatreSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onGrdTheatreGridQueryComboBoxTextSubmited(int column, grdTheatreRow row, String text) throws PresentationLogicException
	{
		if(form.lyrSessEdit().tabListOwners().grdListOwner().getRows().size() == 0)
			return;
		
		row.getcolProcedure().clear();
		
		HcpRefVoCollection voCollHcp = new HcpRefVoCollection();
		for(int i=0;i<form.lyrSessEdit().tabListOwners().grdListOwner().getRows().size();i++)
			voCollHcp.add ((HcpRefVo) form.lyrSessEdit().tabListOwners().grdListOwner().getRows().get(i).getColHcp().getValue());

		ProcedureLiteVoCollection voCollProcedure = domain.listProcedureByHcpAndName(voCollHcp, text);
		if(voCollProcedure != null)
		{
			for(ProcedureLiteVo voProc : voCollProcedure)
				row.getcolProcedure().newRow(voProc, voProc.getProcedureName());
			
			if(voCollProcedure.size() > 1)
				row.getcolProcedure().showOpened();
			else if(voCollProcedure.size() == 1)
				row.getcolProcedure().setValue(voCollProcedure.get(0));
			else
				engine.showMessage("No matching records found");
		}
	}

	@Override
	protected void onGrdActivitiesSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onGrdTheatreGridCheckBoxClicked(int column, grdTheatreRow row, boolean isChecked) throws PresentationLogicException 
	{
		if(!isChecked)
		{
			row.setcolNumberLeft(null);
		}
		
		row.setcolNumberLeftReadOnly(!isChecked);	
	}

	@Override
	protected void onGrdListOwnerMutableComboBoxSelected(int column, grdListOwnerRow row, Object value)	throws PresentationLogicException 
	{
		if(value instanceof HcpLiteVo && row.getValue() instanceof Session_ListOwnerVo)
		{	
			row.getValue().setHcp((HcpLiteVo) value);
			row.setReadOnly(true);
			
			form.getLocalContext().setHasOwnerProcedures(checkIfOwnerHasProcedures((HcpLiteVo) value));
		}
		
		updateControlState();
	}

	@Override
	protected void onlyrSessEditTabChanged(LayerBridge tab) 
	{
		form.lyrSessEdit().tabListOwners().grdListOwner().setValue(null);
	}

	@Override
	protected void onGrdExclTimeSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onGrdPCSlotsSelectionChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	// 	WDEV-15190
	@Override
	protected void onQmbDoServiceTextSubmited(String value) throws PresentationLogicException
	{
		populateDos(value);
	}

	// 	WDEV-15190
	@Override
	protected void onQmbProfileTextSubmited(String value) throws PresentationLogicException
	{
		populateProfiles(value);
	}

	// 	WDEV-15190
	private void populateProfiles(String value)
	{
		form.qmbProfile().clear();
		
		if(value == null || value.length() == 0)
			return;
		
		ProfileLiteVoCollection profiles = domain.listProfile(value);
		
		if(profiles == null || profiles.size() == 0)
			return;
		
		for(ProfileLiteVo profile : profiles)
		{
			if(profile == null)
				continue;
			
			form.qmbProfile().newRow(profile, profile.getName());
		}
		
		if(profiles.size() == 1)
		{
			form.qmbProfile().setValue(profiles.get(0));
		}
		else
		{
			form.qmbProfile().showOpened();
		}
	}
	
	// 	WDEV-15190
	private void populateDos(String value)
	{
		form.qmbDoService().clear();
		
		if(value == null || value.length() == 0)
			return;
		
		DirectoryOfServiceLiteVoCollection doss = domain.listDos(value);
		
		if(doss == null || doss.size() == 0)
			return;
		
		for(DirectoryOfServiceLiteVo dos : doss)
		{
			if(dos == null)
				continue;
			
			form.qmbDoService().newRow(dos, dos.getDoSName());
		}
		
		if(doss.size() == 1)
		{
			form.qmbDoService().setValue(doss.get(0));
		}
		else
		{
			form.qmbDoService().showOpened();
		}
	}

	//WDEV-18555 - allow user modify location
	@Override
	protected void onBtnLocationClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Admin.LocationSelect);		
	}
}
