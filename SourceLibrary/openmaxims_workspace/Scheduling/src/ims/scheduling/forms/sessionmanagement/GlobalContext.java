//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.sessionmanagement;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Scheduling = new SchedulingContext(context);
		Core = new CoreContext(context);
		ChooseAndBook = new ChooseAndBookContext(context);
		RefMan = new RefManContext(context);
	}
	public final class SchedulingContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private SchedulingContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getBookingAppointmentIsNotNull()
		{
			return !cx_SchedulingBookingAppointment.getValueIsNull(context);
		}
		public ims.scheduling.vo.Booking_AppointmentVo getBookingAppointment()
		{
			return (ims.scheduling.vo.Booking_AppointmentVo)cx_SchedulingBookingAppointment.getValue(context);
		}
		public void setBookingAppointment(ims.scheduling.vo.Booking_AppointmentVo value)
		{
			cx_SchedulingBookingAppointment.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingBookingAppointment = new ims.framework.ContextVariable("Scheduling.BookingAppointment", "_cv_Scheduling.BookingAppointment");
		public boolean getSelectedHCPsIsNotNull()
		{
			return !cx_SchedulingSelectedHCPs.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVoCollection getSelectedHCPs()
		{
			return (ims.core.vo.HcpLiteVoCollection)cx_SchedulingSelectedHCPs.getValue(context);
		}
		public void setSelectedHCPs(ims.core.vo.HcpLiteVoCollection value)
		{
			cx_SchedulingSelectedHCPs.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingSelectedHCPs = new ims.framework.ContextVariable("Scheduling.SelectedHCPs", "_cv_Scheduling.SelectedHCPs");
		public boolean getApptCancelStatusIsNotNull()
		{
			return !cx_SchedulingApptCancelStatus.getValueIsNull(context);
		}
		public ims.scheduling.vo.Appointment_StatusVo getApptCancelStatus()
		{
			return (ims.scheduling.vo.Appointment_StatusVo)cx_SchedulingApptCancelStatus.getValue(context);
		}
		public void setApptCancelStatus(ims.scheduling.vo.Appointment_StatusVo value)
		{
			cx_SchedulingApptCancelStatus.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingApptCancelStatus = new ims.framework.ContextVariable("Scheduling.ApptCancelStatus", "_cv_Scheduling.ApptCancelStatus");
		public boolean getBookingAppointmentRefIsNotNull()
		{
			return !cx_SchedulingBookingAppointmentRef.getValueIsNull(context);
		}
		public ims.scheduling.vo.Booking_AppointmentRefVo getBookingAppointmentRef()
		{
			return (ims.scheduling.vo.Booking_AppointmentRefVo)cx_SchedulingBookingAppointmentRef.getValue(context);
		}
		public void setBookingAppointmentRef(ims.scheduling.vo.Booking_AppointmentRefVo value)
		{
			cx_SchedulingBookingAppointmentRef.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingBookingAppointmentRef = new ims.framework.ContextVariable("Scheduling.BookingAppointmentRef", "_cv_Scheduling.BookingAppointmentRef");
		public boolean getBookingActivityIsNotNull()
		{
			return !cx_SchedulingBookingActivity.getValueIsNull(context);
		}
		public ims.core.resource.place.vo.ActivityRefVo getBookingActivity()
		{
			return (ims.core.resource.place.vo.ActivityRefVo)cx_SchedulingBookingActivity.getValue(context);
		}
		public void setBookingActivity(ims.core.resource.place.vo.ActivityRefVo value)
		{
			cx_SchedulingBookingActivity.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingBookingActivity = new ims.framework.ContextVariable("Scheduling.BookingActivity", "_cv_Scheduling.BookingActivity");
		public boolean getSessionManagementSearchCriteriaIsNotNull()
		{
			return !cx_SchedulingSessionManagementSearchCriteria.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionManagementSearchCriteriaVo getSessionManagementSearchCriteria()
		{
			return (ims.scheduling.vo.SessionManagementSearchCriteriaVo)cx_SchedulingSessionManagementSearchCriteria.getValue(context);
		}
		public void setSessionManagementSearchCriteria(ims.scheduling.vo.SessionManagementSearchCriteriaVo value)
		{
			cx_SchedulingSessionManagementSearchCriteria.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingSessionManagementSearchCriteria = new ims.framework.ContextVariable("Scheduling.SessionManagementSearchCriteria", "_cvp_Scheduling.SessionManagementSearchCriteria");
		public boolean getSessionSlotIsNotNull()
		{
			return !cx_SchedulingSessionSlot.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionSlotVo getSessionSlot()
		{
			return (ims.scheduling.vo.SessionSlotVo)cx_SchedulingSessionSlot.getValue(context);
		}
		public void setSessionSlot(ims.scheduling.vo.SessionSlotVo value)
		{
			cx_SchedulingSessionSlot.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingSessionSlot = new ims.framework.ContextVariable("Scheduling.SessionSlot", "_cv_Scheduling.SessionSlot");
		public boolean getSelectedSessionListOwnersIsNotNull()
		{
			return !cx_SchedulingSelectedSessionListOwners.getValueIsNull(context);
		}
		public ims.scheduling.vo.Session_ListOwnerVoCollection getSelectedSessionListOwners()
		{
			return (ims.scheduling.vo.Session_ListOwnerVoCollection)cx_SchedulingSelectedSessionListOwners.getValue(context);
		}
		public void setSelectedSessionListOwners(ims.scheduling.vo.Session_ListOwnerVoCollection value)
		{
			cx_SchedulingSelectedSessionListOwners.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingSelectedSessionListOwners = new ims.framework.ContextVariable("Scheduling.SelectedSessionListOwners", "_cv_Scheduling.SelectedSessionListOwners");
		public boolean getDirectoryofServicesCollectionIsNotNull()
		{
			return !cx_SchedulingDirectoryofServicesCollection.getValueIsNull(context);
		}
		public ims.scheduling.vo.DirectoryOfServiceVoCollection getDirectoryofServicesCollection()
		{
			return (ims.scheduling.vo.DirectoryOfServiceVoCollection)cx_SchedulingDirectoryofServicesCollection.getValue(context);
		}
		public void setDirectoryofServicesCollection(ims.scheduling.vo.DirectoryOfServiceVoCollection value)
		{
			cx_SchedulingDirectoryofServicesCollection.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingDirectoryofServicesCollection = new ims.framework.ContextVariable("Scheduling.DirectoryofServicesCollection", "_cv_Scheduling.DirectoryofServicesCollection");
		public boolean getBookingServiceIsNotNull()
		{
			return !cx_SchedulingBookingService.getValueIsNull(context);
		}
		public ims.core.clinical.vo.ServiceRefVo getBookingService()
		{
			return (ims.core.clinical.vo.ServiceRefVo)cx_SchedulingBookingService.getValue(context);
		}
		public void setBookingService(ims.core.clinical.vo.ServiceRefVo value)
		{
			cx_SchedulingBookingService.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingBookingService = new ims.framework.ContextVariable("Scheduling.BookingService", "_cv_Scheduling.BookingService");
		public boolean getBookingSessionIsNotNull()
		{
			return !cx_SchedulingBookingSession.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_SessionRefVo getBookingSession()
		{
			return (ims.scheduling.vo.Sch_SessionRefVo)cx_SchedulingBookingSession.getValue(context);
		}
		public void setBookingSession(ims.scheduling.vo.Sch_SessionRefVo value)
		{
			cx_SchedulingBookingSession.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingBookingSession = new ims.framework.ContextVariable("Scheduling.BookingSession", "_cv_Scheduling.BookingSession");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCommentDialogStringIsNotNull()
		{
			return !cx_CoreCommentDialogString.getValueIsNull(context);
		}
		public String getCommentDialogString()
		{
			return (String)cx_CoreCommentDialogString.getValue(context);
		}
		public void setCommentDialogString(String value)
		{
			cx_CoreCommentDialogString.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCommentDialogString = new ims.framework.ContextVariable("Core.CommentDialogString", "_cv_Core.CommentDialogString");
		public boolean getPatientShortIsNotNull()
		{
			return !cx_CorePatientShort.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatientShort()
		{
			return (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);
		}
		public void setPatientShort(ims.core.vo.PatientShort value)
		{
			cx_CorePatientShort.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort");

		private ims.framework.Context context;
	}
	public final class ChooseAndBookContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private ChooseAndBookContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getSessionSlotStatusReasonIsNotNull()
		{
			return !cx_ChooseAndBookSessionSlotStatusReason.getValueIsNull(context);
		}
		public ims.scheduling.vo.lookups.Status_Reason getSessionSlotStatusReason()
		{
			return (ims.scheduling.vo.lookups.Status_Reason)cx_ChooseAndBookSessionSlotStatusReason.getValue(context);
		}
		public void setSessionSlotStatusReason(ims.scheduling.vo.lookups.Status_Reason value)
		{
			cx_ChooseAndBookSessionSlotStatusReason.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ChooseAndBookSessionSlotStatusReason = new ims.framework.ContextVariable("ChooseAndBook.SessionSlotStatusReason", "_cv_ChooseAndBook.SessionSlotStatusReason");
		public boolean getisCABApptIsNotNull()
		{
			return !cx_ChooseAndBookisCABAppt.getValueIsNull(context);
		}
		public Boolean getisCABAppt()
		{
			return (Boolean)cx_ChooseAndBookisCABAppt.getValue(context);
		}
		public void setisCABAppt(Boolean value)
		{
			cx_ChooseAndBookisCABAppt.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ChooseAndBookisCABAppt = new ims.framework.ContextVariable("ChooseAndBook.isCABAppt", "_cv_ChooseAndBook.isCABAppt");

		private ims.framework.Context context;
	}
	public final class RefManContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private RefManContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCatsReferralIsNotNull()
		{
			return !cx_RefManCatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralRefVo getCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralRefVo)cx_RefManCatsReferral.getValue(context);
		}
		public void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)
		{
			cx_RefManCatsReferral.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManCatsReferral = new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral");

		private ims.framework.Context context;
	}

	public SchedulingContext Scheduling;
	public CoreContext Core;
	public ChooseAndBookContext ChooseAndBook;
	public RefManContext RefMan;
}
