//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.30 build 2012.21169)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.bookappointment;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ActivitySchedVo;
import ims.core.vo.ActivitySchedVoCollection;
import ims.core.vo.ActivityVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.ActivityType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.forms.bookappointment.GenForm.grdApptsRow;
import ims.scheduling.forms.bookappointment.GenForm.grdSessionSlotsRow;
import ims.scheduling.vo.AppointmentBookingSearchFilterVo;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.AvailableDurationVo;
import ims.scheduling.vo.BookingAppointmentLiteVo;
import ims.scheduling.vo.BookingAppointmentLiteVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.Booking_AppointmentVoCollection;
import ims.scheduling.vo.ProfileLiteVo;
import ims.scheduling.vo.ProfileLiteVoCollection;
import ims.scheduling.vo.Sch_BookingVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionIntermediateVo;
import ims.scheduling.vo.SessionLiteVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.SessionSlotVoCollection;
import ims.scheduling.vo.Session_Exc_TimesVo;
import ims.scheduling.vo.lookups.SchedulingPriority;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.ValueObject;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Logic extends BaseLogic
{
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		if (args != null && args.length > 0 && args[0] instanceof Boolean)
		{
			form.getLocalContext().setTransportRequired((Boolean) args[0]);
		}
		
		form.btnClose().setVisible(false);
		form.bookingCalendar1().setEnabled(false);
		form.bookingCalendar1().setChecksReadOnly(true);
		form.getLocalContext().setEnableFirstAvailableApp(false);	//wdev-14867

		form.getLocalContext().setPatient(form.getGlobalContext().Core.getPatientShort());

		// WDEV-5193
		form.customControlHcp().initialize(MosType.HCP);

		if (form.getGlobalContext().Core.getPatientShort() == null)
		{
			engine.showMessage("No Patient Selected");
			clearBookingCalendar();
			return;
		}

		form.bookingCalendar1().setCurrentMonth(new Date());

		//WDEV-8717
		if(!engine.hasRight(AppRight.CAN_OVERBOOK_FLEXIBLE_APPT))
			form.chkOverBook().setVisible(false);
			
		loadServices();
		loadActivities();
		loadLocations();
		open();
		
		form.chkFirst().setValue(true);
		
		if(engine.isDialog())
		{
			form.setMode(FormMode.VIEW);
		}
		
		updateControlsState(); //WDEV-9613
	}

	private void loadLocations()
	{
		form.cmbLocation().clear();
		LocationLiteVoCollection voCollLoc = domain.listLocationLite();
		for (LocationLiteVo item : voCollLoc)
			form.cmbLocation().newRow(item, item.getName());
	}

	private void repopulateScreen()
	{
		if (form.getGlobalContext().Scheduling.getBookingAppointment() == null)
			return;

		// store the same booking record
		Sch_BookingVo voBooking = domain.getSch_BookingByAppt(form.getGlobalContext().Scheduling.getBookingAppointment());
		form.getLocalContext().setSch_Booking(voBooking);
		if (voBooking != null)
			form.txtBookingComments().setValue(voBooking.getBookingComments());

		form.cmbSpecialty().setValue(form.getGlobalContext().Scheduling.getBookingService());
		if (form.cmbSpecialty().getValue() == null && form.getGlobalContext().Scheduling.getBookingService() instanceof ServiceLiteVo)
		{
			form.cmbSpecialty().newRow(form.getGlobalContext().Scheduling.getBookingService(), ((ServiceLiteVo) form.getGlobalContext().Scheduling.getBookingService()).getServiceName());
			form.cmbSpecialty().setValue(form.getGlobalContext().Scheduling.getBookingService());
		}

		if (form.getGlobalContext().Scheduling.getBookingActivityIsNotNull())
		{
			for (int i = 0; i < form.cmbActivity().getValues().size(); i++)
			{
				if (((ActivitySchedVo) form.cmbActivity().getValues().get(i)).getID_Activity().equals(form.getGlobalContext().Scheduling.getBookingActivity().getID_Activity()))
				{
					form.cmbActivity().setValue((ActivitySchedVo) form.cmbActivity().getValues().get(i));
					listClinics();
					break;
				}
			}
		}

		if (form.getGlobalContext().Scheduling.getBookingSessionIsNotNull())
			form.cmbClinic().setValue(domain.getProfileForSession(form.getGlobalContext().Scheduling.getBookingSession()));

		if (validateSearchCriteria() == null)
		{
			loadSessions(false);
			form.getLocalContext().setEnableFirstAvailableApp(true);	//wdev-14867
			// set a flag to say that the appt to be rebooked hasnt yet been selected
			form.getLocalContext().setIsRebookApptSelected(false);
			form.setMode(FormMode.EDIT);
			form.bookingCalendar1().setSelectedDay(new Date());
			bookingCalendar1DateSelected(new Date());
			form.btnCancel().setEnabled(true);

			form.cmbSpecialty().setEnabled(false);
			form.cmbActivity().setEnabled(false);
			form.cmbClinic().setEnabled(false);
			form.imbClear().setEnabled(false);
		}
	}

	private void bookingCalendar1DateSelected(ims.framework.utils.Date date)
	{
		// go through sessions getting ones for the selected date
		SessionShortVoCollection voCollSessionShort = form.getLocalContext().getSessions();
		if (voCollSessionShort == null)
			return;

		SessionShortVoCollection voCollSelectedSessions = new SessionShortVoCollection();
		for (int i = 0; i < voCollSessionShort.size(); i++)
		{
			if (voCollSessionShort.get(i).getSessionDate().equals(date))
			{
				//WDEV-12209 - starts here
				boolean performingOverBook = (engine.hasRight(AppRight.CAN_OVERBOOK_FLEXIBLE_APPT) && form.chkOverBook().getValue() == true);
				
				if(!Boolean.TRUE.equals(voCollSessionShort.get(i).getIsFixed()) && !performingOverBook && voCollSessionShort.get(i).getRemainingTimeIsNotNull() && voCollSessionShort.get(i).getRemainingTime() <= 0)
					continue;
				
				//WDEV-12209 - ends here
				
				voCollSelectedSessions.add(voCollSessionShort.get(i));
			}
		}

		form.getLocalContext().setSelectedSessions(voCollSelectedSessions);
		form.getLocalContext().setSelectedSessionIndex(new Integer(0));
		loadSessionSlots();
	}

	private void loadActivities()
	{
		form.cmbActivity().clear();

		ActivitySchedVoCollection voCollActivities = domain.listActivitiesForType(ActivityType.APPOINTMENTTYPES);
		//wdev-12812
		if(voCollActivities != null)
		{
			voCollActivities.sort(new ActivityComparator(SortOrder.ASCENDING));	//wdev-12812
			for (int i = 0; i < voCollActivities.size(); i++)
			{
				if (voCollActivities.get(i).getNameIsNotNull())
					form.cmbActivity().newRow(voCollActivities.get(i), voCollActivities.get(i).getName());
			}
		}
	}
	//wdev-12812
	public class ActivityComparator implements Comparator<Object>
	{
		private int direction = 1;
		
		public ActivityComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ActivityComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String name1 = null;
			String name2 = null;
			if(ob1 instanceof ActivitySchedVo )
			{
				ActivitySchedVo ps1 = (ActivitySchedVo)ob1;
				name1 = ps1.getName();
			}
			if(ob2 instanceof ActivitySchedVo)
			{
				ActivitySchedVo ps2 = (ActivitySchedVo)ob2;
				name2 = ps2.getName();
			}
			if(name1 != null )
				return  name1.compareToIgnoreCase(name2)*direction;
			if(name2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	//----
	private void open()
	{
		clearSearchCriteria();
		
		clearLocalContext();

		form.btnBook().setEnabled(false);
		form.btnCancel().setEnabled(false);
		form.bookingCalendar1().setEnabled(false);
		form.btnPreviousSession().setEnabled(false);
		form.btnNextSession().setEnabled(false);
		form.bookingCalendar1().setCurrentMonth(new Date());
		clearBookingCalendar();
		form.getLocalContext().setSch_Booking(new Sch_BookingVo());

		//WDEV-15833
		/*
		form.cmbLocation().setEnabled(true);
		form.cmbPriority().setEnabled(true);
		form.cmbSpecialty().setEnabled(true);
		form.cmbActivity().setEnabled(true);
		form.cmbClinic().setEnabled(true);
		form.customControlHcp().setEnabled(true);
		 */
		form.imbClear().setEnabled(true);

		// rebooking WDEV-5213
		repopulateScreen();
	}

	private void clearLocalContext()
	{
		form.getLocalContext().setSelectedEventsAndPathways(null);
		form.getLocalContext().setSelectedAppointments(null);
		form.getLocalContext().setsearchFilter(null);
	}

	private void clearSearchCriteria()
	{
		form.cmbActivity().setValue(null);
		form.cmbPriority().setValue(null);
		form.customControlHcp().setValue(null);
		form.cmbClinic().clear();// 	WDEV-15329
		form.cmbLocation().setValue(null);
		form.cmbSpecialty().setValue(null);
		form.chkFirst().setValue(false);
		form.chkOverBook().setValue(false);
	}

	private void loadServices()
	{
		form.cmbSpecialty().clear();
		ServiceShortVoCollection voCollServices = domain.listActiveService();
		for (int i = 0; i < voCollServices.size(); i++)
			form.cmbSpecialty().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
	}

	private void clearBookingCalendar()
	{
		form.bookingCalendar1().clearBookedChecks();
		form.bookingCalendar1().clearChecks();
		form.bookingCalendar1().clearPercentages();
		form.bookingCalendar1().clearNoSessionDates();
		form.bookingCalendar1().clearNoSlotDates();
		form.bookingCalendar1().clearBackColors();

		Date dateStart = new Date(form.bookingCalendar1().getCurrentMonth().getYear(), form.bookingCalendar1().getCurrentMonth().getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendar1().getCurrentMonth().getYear(), form.bookingCalendar1().getCurrentMonth().getMonth(), form.bookingCalendar1().getCurrentMonth().getNumberOfDaysInTheMonth());

		while (dateStart.isLessOrEqualThan(dateEnd))
		{
			form.bookingCalendar1().addNoSessionDates(new Date(dateStart));
			dateStart.addDay(1);
		}
	}

	private void initialiseCalendar()
	{
		SessionShortVoCollection voCollSessionShort = form.getLocalContext().getSessions();
		if (voCollSessionShort == null)
			return;

		// go through the sessions for this month and where there are no
		// sessions for a given calendar date
		// call addNoSessionDates which effectively disableds that date on the
		// calendar
		Date dateStart = new Date(form.bookingCalendar1().getCurrentMonth().getYear(), form.bookingCalendar1().getCurrentMonth().getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendar1().getCurrentMonth().getYear(), form.bookingCalendar1().getCurrentMonth().getMonth(), form.bookingCalendar1().getCurrentMonth().getNumberOfDaysInTheMonth());

		ArrayList<SessionShortVo> sessionList = new ArrayList<SessionShortVo>();
		for (int i = 0; i < voCollSessionShort.size(); i++)
		{
			sessionList.add(i, voCollSessionShort.get(i));
		}

		int count = 0;
		Date dateSession = dateStart;
		while (dateSession.isLessOrEqualThan(dateEnd))
		{
			SessionShortVo voSessionShort = null;
			boolean bFound = false;
			for (int i = 0; i < sessionList.size(); i++)
			{
				voSessionShort = (SessionShortVo) sessionList.get(i);
				if (voSessionShort.getSessionDate().equals(dateSession))
				{
					bFound = true;
					
					//wdev-12209
					if(Boolean.TRUE.equals(voSessionShort.getIsFixed()))
					{
						form.bookingCalendar1().addPercentage(dateSession, calculatePercentageForFixedSessions(dateSession));
					}
					else
					{
						form.bookingCalendar1().addPercentage(dateSession, calculatePercentage(dateSession));
					}
				}
			}
			if (!bFound)
				form.bookingCalendar1().addNoSessionDates(new Date(dateSession));
			else
				count++;

			dateSession.addDay(1);
		}
	}

	private int calculatePercentage(Date dateSession)
	{
		SessionShortVoCollection voCollSessionShort = form.getLocalContext().getSessions();
		SessionShortVoCollection voCollSelectedSessions = new SessionShortVoCollection();

		// WDEV-9391 - calculation needs to be done on remaining time for session
		// go through Sessions Collection get matching ones for this day
		
		int totalTime = 0;
		int remainingTime = 0;
		for (int i = 0; i < voCollSessionShort.size(); i++)
		{
			if (voCollSessionShort.get(i).getSessionDate().equals(dateSession))
			{
				voCollSelectedSessions.add(voCollSessionShort.get(i));
				//get total time of sessions
				if(voCollSessionShort.get(i).getIsFixedIsNotNull())
				{
					if(!voCollSessionShort.get(i).getIsFixed())
					{
						if(voCollSessionShort.get(i).getStartTmIsNotNull() && voCollSessionShort.get(i).getEndTmIsNotNull())
						{
							//flexible - time remaining field
							Time startTime = (Time)voCollSessionShort.get(i).getStartTm().clone();
							Time endTime = (Time)voCollSessionShort.get(i).getEndTm().clone();
							
							totalTime += endTime.getTotalMinutes() - startTime.getTotalMinutes();
							remainingTime += voCollSessionShort.get(i).getRemainingTime();
						}
					}
				}
			}
		}
		
		//fixed
		if(totalTime == 0)
			return 0;
		
		int bookedTime = totalTime - remainingTime;
		return (int) (bookedTime * 100.0f / totalTime);	
	}
	
	//WDEV-12209
	private int calculatePercentageForFixedSessions(Date dateSession)
	{
		SessionShortVoCollection voCollSessionShort = form.getLocalContext().getSessions();
		SessionShortVoCollection voCollSelectedSessions = new SessionShortVoCollection();

		// go through Sessions Collection get matching ones for this day
		for (int i = 0; i < voCollSessionShort.size(); i++)
		{
			if (voCollSessionShort.get(i).getSessionDate().equals(dateSession))
				voCollSelectedSessions.add(voCollSessionShort.get(i));
		}

		int totalSlots = 0, remainingSlots = 0;
		for (int i = 0; i < voCollSelectedSessions.size(); i++)
		{
			totalSlots += voCollSelectedSessions.get(i).getTotalSlots().intValue();
			remainingSlots += voCollSelectedSessions.get(i).getRemainingSlots().intValue();
		}

		int bookedSlots = totalSlots - remainingSlots;
		return (int) (bookedSlots * 100.0f / totalSlots);
	}

	protected void onBookingCalendar1MonthSelected(Date date) throws PresentationLogicException
	{
		AppointmentBookingSearchFilterVo newFilter = populateFilter();

		if(form.getLocalContext().getsearchFilterIsNotNull())
		{
			if (validateSearchCriteria() == null && !(filterHasChanged(newFilter, form.getLocalContext().getsearchFilter())))
			{
				form.grdSessionSlots().getRows().clear();
				clearBookingCalendar();
				listSessions(false);
				form.bookingCalendar1().clearNoSessionDates();
				initialiseCalendar();

			}
			else if (validateSearchCriteria() == null && filterHasChanged(newFilter, form.getLocalContext().getsearchFilter()))
			{
				onImbSearchClick();
			}
			else if (validateSearchCriteria() != null)
			{
				engine.showErrors(validateSearchCriteria());

				form.bookingCalendar1().setEnabled(false);
				form.bookingCalendar1().setChecksReadOnly(true);
				form.bookingCalendar1().setCurrentMonth(new Date());
				form.bookingCalendar1().clearBookedChecks();
				form.bookingCalendar1().clearChecks();
				form.bookingCalendar1().clearPercentages();
				form.bookingCalendar1().clearNoSessionDates();
				form.bookingCalendar1().clearNoSlotDates();
				form.bookingCalendar1().clearBackColors();
			}
		}
		else if (validateSearchCriteria() != null)
		{
			engine.showErrors(validateSearchCriteria());

			form.bookingCalendar1().setEnabled(false);
			form.bookingCalendar1().setChecksReadOnly(true);
			form.bookingCalendar1().setCurrentMonth(new Date());
			form.bookingCalendar1().clearBookedChecks();
			form.bookingCalendar1().clearChecks();
			form.bookingCalendar1().clearPercentages();
			form.bookingCalendar1().clearNoSessionDates();
			form.bookingCalendar1().clearNoSlotDates();
			form.bookingCalendar1().clearBackColors();
		}
	}

	private boolean filterHasChanged(AppointmentBookingSearchFilterVo finalFilter, AppointmentBookingSearchFilterVo initFilter)
	{
		if (finalFilter == null || initFilter == null)
			throw new CodingRuntimeException("finalFilter or initFilter have not been populated");

		boolean activityChanged = !(finalFilter.getActivity().getBoId().equals(initFilter.getActivity().getBoId()));
		boolean startdateChanged = finalFilter.getStartDate().equals(initFilter.getStartDate());
		boolean endDateChanged = finalFilter.getEndDate().equals(initFilter.getEndDate());

		// Checking Clinic Value changed
		boolean clinicChanged = true;
		if (finalFilter.getClinic() == null && initFilter.getClinic() != null)
			clinicChanged = true;
		if (finalFilter.getClinic() != null && initFilter.getClinic() == null)
			clinicChanged = true;
		if (finalFilter.getClinic() == null && initFilter.getClinic() == null)
			clinicChanged = false;
		if (finalFilter.getClinic() != null && initFilter.getClinic() != null)
			clinicChanged = finalFilter.getClinic().equals(initFilter.getClinic());

		boolean specialityChanged = true;

		if (finalFilter.getSpecialty() == null && initFilter.getSpecialty() != null)
			specialityChanged = true;
		if (finalFilter.getSpecialty() != null && initFilter.getSpecialty() == null)
			specialityChanged = true;

		if (finalFilter.getSpecialty() == null && initFilter.getSpecialty() == null)
			specialityChanged = false;

		if (finalFilter.getSpecialty() != null && initFilter.getSpecialty() != null)
			specialityChanged = finalFilter.getSpecialty().equals(initFilter.getSpecialty());

		boolean hcpChanged = true;

		if (finalFilter.getHcp() == null && initFilter.getHcp() != null)
			hcpChanged = true;
		if (finalFilter.getHcp() != null && initFilter.getHcp() == null)
			hcpChanged = true;

		if (finalFilter.getHcp() == null && initFilter.getHcp() == null)
			hcpChanged = false;
		if (finalFilter.getHcp() != null && initFilter.getHcp() != null)
			hcpChanged = !(finalFilter.getHcp().equals(initFilter.getHcp()));

		if (activityChanged && startdateChanged && endDateChanged && clinicChanged && hcpChanged && specialityChanged)
			return false;

		return true;

	}

	protected void onBookingCalendar1DateSelected(Date date) throws PresentationLogicException
	{
		bookingCalendar1DateSelected(date);
	}

	private void loadSessionSlots()
	{
		form.grdSessionSlots().getRows().clear();
		SessionShortVoCollection voCollSelectedSessions = form.getLocalContext().getSelectedSessions();

		if (voCollSelectedSessions == null || voCollSelectedSessions.size() == 0)	//WDEV-9613
			return;

		setMultiplesSessionControls(voCollSelectedSessions.size());

		int index = 0;
		if (form.getLocalContext().getSelectedSessionIndexIsNotNull())
			index = form.getLocalContext().getSelectedSessionIndex().intValue();

		if(voCollSelectedSessions.size() != 0)
		{
			SessionShortVo voSession = voCollSelectedSessions.get(index);
			if (voSession.getIsFixedIsNotNull())
			{
				if (voSession.getIsFixed().booleanValue())
				{
					boolean hasBookingRights = doesUserHaveBookingRightsForSession(voSession);

					SessionSlotVoCollection voCollSlots = domain.listSessionSlot(voSession);
					if (voCollSlots == null)
						return;

					GenForm.grdSessionSlotsRow sRow = null;
					for (int i = 0; i < voCollSlots.size(); i++)
					{
						if (voCollSlots.get(i).getStatusIsNotNull() && voCollSlots.get(i).getStatus().equals(Status_Reason.SLOTOPENED) || voCollSlots.get(i).getStatus().equals(Status_Reason.APPOINTMENT_BOOKED))
						{
							if (form.cmbActivity().getValue() != null && voCollSlots.get(i).getActivityIsNotNull() && !form.cmbActivity().getValue().equals(voCollSlots.get(i).getActivity()))
								continue;

							if (form.cmbPriority().getValue() != null && voCollSlots.get(i).getPriorityIsNotNull())
								if (!voCollSlots.get(i).getPriority().equals(form.cmbPriority().getValue()))
									continue;

							if (voCollSlots.get(i).getAppointmentIsNotNull())
								continue;

							sRow = form.grdSessionSlots().getRows().newRow();
							
							//WDEV-8716
							if(voSession.getStartTmIsNotNull())
								sRow.setColSessStartTime(voSession.getStartTm().toString());
							if(voSession.getEndTmIsNotNull())
								sRow.setColSessEndTime(voSession.getEndTm().toString());
							
							if (voCollSlots.get(i).getStartTmIsNotNull())
								sRow.setColAppointmentTime(voCollSlots.get(i).getStartTm().toString());

							sRow.setColActivity(voCollSlots.get(i).getActivity());
							if(voCollSlots.get(i).getActivityIsNotNull())
								sRow.setTooltipForColActivity(voCollSlots.get(i).getActivity().getName());
							
							if (voCollSlots.get(i).getSessionIsNotNull() && voCollSlots.get(i).getSession().getSchLocationIsNotNull())
							{
								sRow.setColLocation(voCollSlots.get(i).getSession().getSchLocation().getName());
								sRow.setTooltipForColLocation(voCollSlots.get(i).getSession().getSchLocation().getName());
							}
						
							
							sRow.setValue(voCollSlots.get(i));
							sRow.setColSelectReadOnly(!hasBookingRights);
							if (!hasBookingRights)
								sRow.setTooltipForColSelect("Role does not have rights to book in this Session");

							if (voCollSlots.get(i).getPriorityIsNotNull() && voCollSlots.get(i).getPriority().equals(SchedulingPriority.URGENT))
								sRow.setBackColor(Color.Red);
						}
					}
				}
				else
				{					
					// add a new Flexible Appt
					Booking_AppointmentVo voBookAppt = new Booking_AppointmentVo();
					grdSessionSlotsRow sRow = form.grdSessionSlots().getRows().newRow();
					
					//WDEV-8972
					boolean hasBookingRights = doesUserHaveBookingRightsForSession(voSession);
					sRow.setColSelectReadOnly(!hasBookingRights);
					if (!hasBookingRights)
						sRow.setTooltipForColSelect("Role does not have rights to book in this Session");
					
					//WDEV-8716
					if(voSession.getStartTmIsNotNull())
						sRow.setColSessStartTime(voSession.getStartTm().toString());
					if(voSession.getEndTmIsNotNull())
						sRow.setColSessEndTime(voSession.getEndTm().toString());
					
					sRow.setColLocation(voSession.getSchLocation().getName());
					sRow.setTooltipForColLocation(voSession.getSchLocation().getName());
					
					sRow.setColActivity(form.cmbActivity().getValue());
					if(form.cmbActivity().getValue() != null)
						sRow.setTooltipForColActivity(form.cmbActivity().getValue().getName());
					
					sRow.setColAppointmentTime("Flexi");
					voBookAppt.setActivity(form.cmbActivity().getValue());
					voBookAppt.setSession(voSession);
					sRow.setValue(voBookAppt);
				}
			}
		
		}
	}

	private void clearAnyOtherNewFlexibleAppts()
	{
		if(form.getLocalContext().getSelectedAppointmentsIsNotNull())
			form.getLocalContext().getSelectedAppointments().clear();
		
		List<Integer> rowsToRemove = new ArrayList<Integer>();
		for(int i=0;i<form.grdAppts().getRows().size();i++)
		{
			grdApptsRow row = form.grdAppts().getRows().get(i);
			if(row.getValue() instanceof Booking_AppointmentVo)
			{
				if(((Booking_AppointmentVo)row.getValue()).getID_Booking_Appointment() == null)
					rowsToRemove.add(new Integer(i));
			}
		}
		
		if(rowsToRemove.size() > 0)
		{
			for(int i=rowsToRemove.size();i>0;i--)
			{
				form.grdAppts().getRows().remove(rowsToRemove.get(i).intValue());
			}
		}
	}

	private Boolean doesUserHaveBookingRightsForSession(Sch_SessionRefVo voSession)
	{
		Map map = form.getLocalContext().getSessionBookingRights();
		if (map == null)
			map = new HashMap();

		Object entry = map.get(voSession.getID_Sch_Session());

		if (entry == null)
		{
			map.put(voSession.getID_Sch_Session(), domain.hasBookingRights(engine.getLoggedInRole(), voSession));
			entry = map.get(voSession.getID_Sch_Session());
		}

		form.getLocalContext().setSessionBookingRights(map);
		return (Boolean) entry;
	}

	private void setMultiplesSessionControls(int total)
	{
		if (total == 1)
		{
			form.lblSession().setValue("1 of 1");
			form.btnPreviousSession().setEnabled(false);
			form.btnNextSession().setEnabled(false);
			form.getLocalContext().setSelectedSessionIndex(new Integer(0));
			return;
		}

		int currentIndex = form.getLocalContext().getSelectedSessionIndex().intValue();

		if (currentIndex < (total - 1))
			form.btnNextSession().setEnabled(true);
		if (currentIndex > 0)
			form.btnPreviousSession().setEnabled(true);

		form.lblSession().setValue(String.valueOf(form.getLocalContext().getSelectedSessionIndex().intValue() + 1) + " of " + String.valueOf(total));
	}

	protected void onBtnBookClick() throws PresentationLogicException
	{
		// WDEV-12626 - I know this is ugly, but short of rewriting the form, nothing else would do
		HashMap<Integer, SessionIntermediateVo> sessionIntermediateMap = new HashMap<Integer, SessionIntermediateVo>();

		Sch_BookingVo voBooking = form.getLocalContext().getSch_Booking();

		voBooking.setPatient(form.getLocalContext().getPatient());
		voBooking.setBookingComments(form.txtBookingComments().getValue());

		// WDEV-5829 - set the new slot for the rebooked appt in the appointments collection
		if (form.getLocalContext().getIsRebookApptSelectedIsNotNull() && form.getLocalContext().getIsRebookApptSelected())
		{
			for (Booking_AppointmentVo item : voBooking.getAppointments())
			{
				// WDEV-16968
				if(item.getCareContextIsNotNull())
					form.getLocalContext().setCareContextRef(item.getCareContext());
				
				//flexible appt
				if(item.getSessionSlot() == null)
				{
					grdApptsRow aRow = getRowByFlexAppt(item);
					if (aRow != null)
					{
						if (aRow.getcolApptTime() == null)
						{
							engine.showErrors(new String[]{"Appointment Time is mandatory"});
							return;
						}
					
						try{item.setAppointmentDate(new Date(aRow.getcolApptDate()));}
						catch (ParseException e){e.printStackTrace();}
						
						// WDEV-12626 - I know this is ugly, but short of rewriting the form, nothing else would do
						if (aRow.getValue() instanceof Booking_AppointmentVo)
						{
							Booking_AppointmentVo bookingAppointment = (Booking_AppointmentVo) aRow.getValue();
							SessionIntermediateVo sessionIntermediate = bookingAppointment.getSession();

							// add SessionIntermediateVo value to hash map
							sessionIntermediateMap.put(sessionIntermediate.getID_Sch_Session(), sessionIntermediate);

							item.setSession(sessionIntermediate);
						}
						else if (aRow.getValue() instanceof BookingAppointmentLiteVo)
						{
							BookingAppointmentLiteVo bookingAppointment = (BookingAppointmentLiteVo) aRow.getValue();
							SessionLiteVo sessionLite = bookingAppointment.getSession();
							
							// If the session is found in the Hash map then retrieve from it, else hit domain for record
							// add it to hash map and use it
							if (sessionIntermediateMap.containsKey(sessionLite.getID_Sch_Session()))
							{
								item.setSession(sessionIntermediateMap.get(sessionLite.getID_Sch_Session()));
							}
							else
							{
								SessionIntermediateVo sessionIntermediate = domain.getSessionIntermediate(sessionLite);
								
								// Add SessionIntermediate to HashMap
								sessionIntermediateMap.put(sessionIntermediate.getID_Sch_Session(), sessionIntermediate);
								
								item.setSession(sessionIntermediate);
							}
						}
						
						item.setApptStartTime(aRow.getcolApptTime());
						Time endTime = (Time) aRow.getcolApptTime().clone();
						if (item.getActivity().getTmReqIsNotNull())
							endTime.addMinutes(item.getActivity().getTmReq());
						item.setApptEndTime(endTime);
						
						//WDEV-8714 
						if(item.getApptStatusHistoryIsNotNull())
						{
							Appointment_StatusVoCollection collStatus = item.getApptStatusHistory();
							if(collStatus.size() > 0)
							{
								Appointment_StatusVo voStatus = collStatus.get(collStatus.size()-1);
								if(voStatus.getApptTime()==null)
									voStatus.setApptTime(aRow.getcolApptTime());
								
							}
						}
					}
				}
				
				if (item.getID_Booking_Appointment().equals(form.getLocalContext().getSelectedAppointments().get(0).getID_Booking_Appointment()))
				{
					voBooking.getAppointments().remove(form.getLocalContext().getSelectedAppointments().get(0));
					addNewStatusToHistory(item, form.getLocalContext().getSelectedAppointments().get(0));
					//wdev-11009
					item.setSessionSlot(form.getLocalContext().getSelectedAppointments().get(0).getSessionSlot());	
					//---------
					voBooking.getAppointments().add(item);		
					break;
				}
			}
		}
		else
			voBooking.setAppointments(form.getLocalContext().getSelectedAppointments());

		if (voBooking.getAppointmentsIsNotNull())
		{
			for (int i = 0; i < voBooking.getAppointments().size(); i++)
			{
				// is this a flexible appt?
				if (voBooking.getAppointments().get(i).getSessionSlot() == null)
				{
					grdApptsRow aRow = getRowByFlexAppt(voBooking.getAppointments().get(i));
					if (aRow != null)
					{
						if (aRow.getcolApptTime() == null)
						{
							engine.showErrors(new String[]{"Appointment Time is mandatory"});
							return;
						}

						try{voBooking.getAppointments().get(i).setAppointmentDate(new Date(aRow.getcolApptDate()));}
						catch (ParseException e){e.printStackTrace();}
						
						// WDEV-12626 - I know this is ugly, but short of rewriting the form, nothing else would do
						if (aRow.getValue() instanceof Booking_AppointmentVo)
						{
							Booking_AppointmentVo bookingAppointment = (Booking_AppointmentVo) aRow.getValue();
							SessionIntermediateVo session = bookingAppointment.getSession();

							// add SessionIntermediateVo value to hash map
							sessionIntermediateMap.put(session.getID_Sch_Session(), session);
							
							voBooking.getAppointments().get(i).setSession(session);
						}
						else if (aRow.getValue() instanceof BookingAppointmentLiteVo)
						{
							BookingAppointmentLiteVo bookingAppointment = (BookingAppointmentLiteVo) aRow.getValue();
							SessionLiteVo sessionLite = bookingAppointment.getSession();
							
							// If the session is found in the Hash map then retrieve from it, else hit domain for record
							// add it to hash map and use it
							if (sessionIntermediateMap.containsKey(sessionLite.getID_Sch_Session()))
							{
								voBooking.getAppointments().get(i).setSession(sessionIntermediateMap.get(sessionLite.getID_Sch_Session()));
							}
							else
							{
								SessionIntermediateVo sessionIntermediate = domain.getSessionIntermediate(sessionLite);
								
								// Add SessionIntermediate to HashMap
								sessionIntermediateMap.put(sessionIntermediate.getID_Sch_Session(), sessionIntermediate);
								
								voBooking.getAppointments().get(i).setSession(sessionIntermediate);
							}
						}
						
						voBooking.getAppointments().get(i).setApptStartTime(aRow.getcolApptTime());
						Time endTime = (Time) aRow.getcolApptTime().clone();
						if (voBooking.getAppointments().get(i).getActivity().getTmReqIsNotNull())
							endTime.addMinutes(voBooking.getAppointments().get(i).getActivity().getTmReq());
						voBooking.getAppointments().get(i).setApptEndTime(endTime);
						
						//WDEV-8714 
						if(voBooking.getAppointments().get(i).getApptStatusHistoryIsNotNull()){
							Appointment_StatusVoCollection collStatus = voBooking.getAppointments().get(i).getApptStatusHistory();
							if(collStatus.size() > 0)
							{
								Appointment_StatusVo voStatus = collStatus.get(collStatus.size()-1);
								if(voStatus.getApptTime()==null)
									voStatus.setApptTime(aRow.getcolApptTime());
							}
						}
					}
				}

				voBooking.getAppointments().get(i).setComments(form.txtBookingComments().getValue());
				voBooking.getAppointments().get(i).setApptStatus(Status_Reason.BOOKED);
				voBooking.getAppointments().get(i).setIsCABBooking(false);
				
				// WDEV-12625 - set Requires Rebooking to FALSE to prevent rebooking the same appointment (without cancelling it)
				// from the Referral Details dialog
				if (Boolean.TRUE.equals(form.getLocalContext().getIsRebookApptSelected()))
				{
					if (form.getGlobalContext().Scheduling.getBookingAppointmentIsNotNull())
					{
						if (voBooking.getAppointments().get(i).equals(form.getGlobalContext().Scheduling.getBookingAppointment()))
							voBooking.getAppointments().get(i).setRequiresRebook(false);
						
						ArrayList<Integer> id = new ArrayList<Integer>();
						
						id.add(form.getGlobalContext().Scheduling.getBookingAppointment().getID_Booking_Appointment());
						form.getGlobalContext().Scheduling.setAppointmentIds(id);
					}
				}
				
				if (voBooking.getAppointments().get(i).getIsTransportRequired() == null && form.getLocalContext().getTransportRequired() != null)
					voBooking.getAppointments().get(i).setIsTransportRequired(form.getLocalContext().getTransportRequired());
				
				//WDEV-8891
				if(voBooking.getAppointments().get(i).getCareContext() == null && form.getGlobalContext().Core.getCurrentCareContextIsNotNull())
					voBooking.getAppointments().get(i).setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				else if(voBooking.getAppointments().get(i).getCareContext() == null && form.getLocalContext().getCareContextRefIsNotNull()) // WDEV-16968 
					voBooking.getAppointments().get(i).setCareContext(form.getLocalContext().getCareContextRef());
			}
		}

		String[] arrErrors = voBooking.validate(getUIValidationRules(voBooking));
		
		if (arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		//WDEV-8907 - this has to be done after the validate
		//this method was moved in impl
		//reduceRemainingSlotsOrTimes(voBooking);	//	WDEV-10598

		try
		{
			voBooking = domain.saveBooking(voBooking, null, form.getLocalContext().getSelectedSessions().get(form.getLocalContext().getSelectedSessionIndex()));
			form.getGlobalContext().Scheduling.setBookingAppointment(null);
			form.getLocalContext().setIsRebookApptSelected(null);
		}
		catch (StaleObjectException e)
		{
			// WDEV-12625
			if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
			{
				if (engine.isDialog())
				{
					engine.showMessage("This appointment may have already been rebooked, please review appointments");
					engine.close(DialogResult.OK);
					return;
				}
			}
			
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			clearScreen();
			open();
			form.setMode(FormMode.VIEW);
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		clearScreen();
		open();
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setEnableFirstAvailableApp(false);	//wdev-14867

		form.getGlobalContext().Scheduling.setAppointmentIds(voBooking.getApptIds());

		engine.open(form.getForms().Scheduling.PrintAppointment);
	}

	private void addNewStatusToHistory(Booking_AppointmentVo item, Booking_AppointmentVo voBooking_Appointment) 
	{
		for (int i = 0; i < voBooking_Appointment.getApptStatusHistory().size(); i++)
		{
			if(voBooking_Appointment.getApptStatusHistory().get(i).getID_Appointment_Status()==null){
				grdApptsRow aRow = getRowByFlexAppt(item);
				voBooking_Appointment.getApptStatusHistory().get(i).setApptTime(aRow.getcolApptTime());
				
				item.getApptStatusHistory().add(voBooking_Appointment.getApptStatusHistory().get(i));
			}
		}
	}

	private void reduceRemainingSlotsOrTimes(Sch_BookingVo voBooking)
	{
		//WDEV - 8907 reduce the remaining time only if valid
		if (voBooking.getAppointments().size() > 0 && voBooking.getAppointments().get(0).getSessionIsNotNull())
		{
			//if flexible decrement TimeRemaining
			if(voBooking.getAppointments().get(0).getSession().getIsFixedIsNotNull() && !voBooking.getAppointments().get(0).getSession().getIsFixed())
			{
				if(voBooking.getAppointments().get(0).getSession().getRemainingTimeIsNotNull())
				{
					if(voBooking.getAppointments().get(0).getActivity().getTmReqIsNotNull())
					{
						int remaining = voBooking.getAppointments().get(0).getSession().getRemainingTime();
						remaining -= voBooking.getAppointments().get(0).getActivity().getTmReq();
						
						voBooking.getAppointments().get(0).getSession().setRemainingTime(remaining);
					}
				}
			}
			else
				voBooking.getAppointments().get(0).getSession().decrementRemainingSlots(1);
		}
	}

	private grdApptsRow getRowByFlexAppt(Booking_AppointmentVo booking_AppointmentVo)
	{
		for (int i = 0; i < form.grdAppts().getRows().size(); i++)
		{
			grdApptsRow aRow = form.grdAppts().getRows().get(i);
			if (aRow.getValue() != null)
				if (aRow.getValue().equals(booking_AppointmentVo))
					return aRow;
		}
		return null;
	}

	private String[] getUIValidationRules(Sch_BookingVo voBooking)
	{
		if (voBooking == null)
			throw new CodingRuntimeException("voBooking parameter is null in method getUIValidationRules");

		ArrayList<String> errors = new ArrayList<String>();
		for (Booking_AppointmentVo voAppt : voBooking.getAppointments())
		{
			if (ConfigFlag.DOM.SCHEDULING_LINKED_TO_PATHWAYS.getValue())
			{
				if ((voAppt.getEventIsNotNull() && voAppt.getJourney() == null) || (voAppt.getJourneyIsNotNull() && voAppt.getEvent() == null))
					errors.add("Event and Pathway must both be selected or neither one at all");
			}
			else
			{	
				//TODO check here overbook validation
				boolean performingOverBook = (engine.hasRight(AppRight.CAN_OVERBOOK_FLEXIBLE_APPT) && form.chkOverBook().getValue() == true);
				// if session is flexible validate appt selected against exclusion and appts made within session
				if (voAppt.getSession().getIsFixedIsNotNull() && !voAppt.getSession().getIsFixed() && (voAppt.getID_Booking_Appointment() == null || form.getLocalContext().getIsRebookApptSelectedIsNotNull()))
				{
					BookingAppointmentLiteVoCollection voCollAppts = domain.listNonCancelledAppointmentsForSession(voAppt.getSession());
					errors.addAll(validateFlexibleAppt(voAppt, voCollAppts, performingOverBook));
				}
			}
		}

		return (String[]) (errors.size() > 0 ? errors.toArray(new String[0]) : null);
	}

	private ArrayList<String> validateFlexibleAppt(Booking_AppointmentVo voAppt, BookingAppointmentLiteVoCollection voCollAppts, boolean isOverbook)
	{
		if (voCollAppts == null)
			throw new CodingRuntimeException("voCollAppts is null in method validateFlexibleAppt");
		if (voAppt == null)
			throw new CodingRuntimeException("voAppt is null in method validateFlexibleAppt");

		ArrayList<String> errors = new ArrayList<String>();

		if(!isOverbook)
		{
			//going past midnight anamolae
			if(voAppt.getApptEndTime().isLessThan(voAppt.getApptStartTime()))	
			{
				if(voAppt.getApptStartTime().isGreaterOrEqualThan(voAppt.getSession().getEndTm()))
					errors.add("The " + voAppt.getApptStartTime().toString() + " Appointment is outside either the Clinic Start Time(" + voAppt.getSession().getStartTm().toString() + ") or Clinic End Time(" + voAppt.getSession().getEndTm().toString() + ")");
			}
					
			// 1) validate that appointment start and end time is within session start and end time
			if (voAppt.getApptStartTime().isLessThan(voAppt.getSession().getStartTm()) || voAppt.getApptEndTime().isGreaterThan(voAppt.getSession().getEndTm()))
				errors.add("The " + voAppt.getApptStartTime().toString() + " Appointment is outside either the Clinic Start Time(" + voAppt.getSession().getStartTm().toString() + ") or Clinic End Time(" + voAppt.getSession().getEndTm().toString() + ")");
		}
	
		if (errors.size() > 0)
			return errors;
		
		

		// 2) go through available durations and see if proposed appt is available
		if(!isOverbook)
		{
			List<AvailableDurationVo> avails = voCollAppts.getAvailableDurations(voAppt.getSession());
			
			boolean isAvailable = false;
			if (avails != null && avails.size() > 0)
			{
				for (int i = 0; i < avails.size(); i++)
				{
					if (voAppt.getApptStartTime().isGreaterOrEqualThan(avails.get(i).getStartTm()) && voAppt.getApptEndTime().isLessOrEqualThan(avails.get(i).getEndTm()))
					{
						isAvailable = true;
						break;
					}
				}
			}
	
			if (!isAvailable)
			{
				errors.add("The " + voAppt.getApptStartTime().toString() + " Appointment overlaps another existing Appointment or excluded time for the Clinic");
			}
		}
		else
		{
			//validate only against exclusion times			
			//WDEV-11569 get Exclusion Times
			if(voAppt.getSession().getExclusionTimesIsNotNull())
			{
				boolean isAvailable = true;
				voAppt.getSession().getExclusionTimes().sort();
				for(Session_Exc_TimesVo voExcTime : voAppt.getSession().getExclusionTimes())
				{
					if ((voAppt.getApptStartTime().isGreaterOrEqualThan(voExcTime.getStartTime()) && voAppt.getApptStartTime().isLessThan(voExcTime.getEndTime())) || (voAppt.getApptEndTime().isGreaterThan(voExcTime.getStartTime()) &&   voAppt.getApptEndTime().isLessOrEqualThan(voExcTime.getEndTime())))
					{
						isAvailable = false;
						break;
					}
					//WDEV-11773 
					else if((voAppt.getApptStartTime().isLessOrEqualThan(voExcTime.getStartTime()) && voAppt.getApptEndTime().isGreaterOrEqualThan(voExcTime.getEndTime())))
					{
						isAvailable = false;
						break;
					}	
				}
				
				//going past midnight anamolae
				if(voAppt.getApptEndTime().isLessThan(voAppt.getApptStartTime()))	
					isAvailable = false;
				
				if (!isAvailable)
				{
					errors.add("The " + voAppt.getApptStartTime().toString() + " Appointment overlaps excluded time or goes into the next day for the Clinic");
				}
			}
		}

		return errors;
	}



	/**
	 * method will check before adding to the collection
	 * a) duration is greater than 0
	 * b) start time and end time are not equal
	 * c) availableDuration is within start and end time of session
	 * 
	 * @param availableDuration
	 * @param avails
	 * @param time2 
	 * @param sessionStartTm 
	 */
	private void addNewDuration2(AvailableDuration availableDuration, List<AvailableDuration> avails, Time sessStartTime, Time sessEndTime)
	{
		if(avails == null || availableDuration == null)
			return;
		
		if(availableDuration.startTm != null && availableDuration.endTm != null)
		{
			//avoid duplicate add
			for(int i=0;i<avails.size();i++)
			{
				if( availableDuration.startTm.equals(avails.get(i).startTm) && availableDuration.endTm.equals(avails.get(i).endTm))
					return;
			}
			
			if(availableDuration.startTm.isLessThan(sessStartTime))
				availableDuration.startTm = sessStartTime;
			
			if(availableDuration.endTm.isGreaterThan(sessEndTime))
				availableDuration.endTm = sessEndTime;
			
			//duration endTm greater than StartTime
			if( availableDuration.startTm.isGreaterThan(availableDuration.endTm))
				return;
		
			if(!availableDuration.startTm.equals(availableDuration.endTm))
			{
				if(calculateApptDuration(availableDuration.startTm, availableDuration.endTm) > 0)
				{
					avails.add(availableDuration);
				}
			}	
		}
	}
	
	private void clearScreen()
	{
		form.lblSession().setValue("* of *");
		form.grdSessionSlots().getRows().clear();
		form.grdAppts().getRows().clear();
		form.grdAppts().getRows().clear();
		form.txtBookingComments().setValue(null);
		form.getLocalContext().setSelectedAppointments(null);
		form.getLocalContext().setSelectedApptTimes(null);
	}

	protected void onBtnCancelClick() throws PresentationLogicException
	{
		// Also cancel rebooking of appointment
		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		form.getLocalContext().setIsRebookApptSelected(null);
		
		clearScreen();
		open();
		form.setMode(FormMode.VIEW);
		form.btnCancel().setEnabled(false);
		form.cmbClinic().clear();				//wdev-15367
	}

	protected void onGrdSessionSlotsGridCheckBoxClicked(int column, grdSessionSlotsRow row, boolean isChecked) throws PresentationLogicException
	{
		grdSessionSlotsClicked(row, isChecked);

		//WDEV-9613
		if(form.txtBookingComments().getValue() != null && form.grdAppts().getRows().size() == 0)
			form.txtBookingComments().setValue(null);
		
		updateControlsState();	//WDEV-9613
	}

	private void grdSessionSlotsClicked(grdSessionSlotsRow row, boolean isChecked)
	{
		if(!isChecked && form.getLocalContext().getIsRebookApptSelectedIsNotNull())
			form.getLocalContext().setIsRebookApptSelected(false);
		
		form.bookingCalendar1().setEnabled(!isChecked);
		boolean isFixed = row.getValue() instanceof SessionSlotVo;
		
		if(!isFixed && row.getValue() instanceof Booking_AppointmentVo)
			displayExistingFlexibleAppts((Booking_AppointmentVo) row.getValue(), isChecked);
		else if(isFixed && row.getValue() instanceof SessionSlotVo)
			displayExistingFixedAppts((SessionSlotVo) row.getValue(), isChecked);
					
		Booking_AppointmentVoCollection voCollBookAppointments = form.getLocalContext().getSelectedAppointments();
		if (voCollBookAppointments == null)
			voCollBookAppointments = new Booking_AppointmentVoCollection();

		if(isChecked)
			clearAllOtherSelections(row);
		
		if (!isFixed)
		{
			clearAnyOtherNewFlexibleAppts();
			// WDEV-5941
			for (int i = 0; i < form.grdAppts().getRows().size(); i++)
			{
				grdApptsRow fRow = form.grdAppts().getRows().get(i);		
				if (fRow.getcolApptTime() != null)
				{
					if(fRow.getValue() instanceof Booking_AppointmentVo)
						storeApptTimeSelection((Booking_AppointmentVo)fRow.getValue(), fRow.getcolApptTime());
				}
					
			}

			if (row.getColSelect() == true)
			{
				boolean bInListAlready = false;
				
				// /////////////////////////////////////////
				// rebook///////////////////////////////////
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
				{
					// rebook appt already selected
					if (form.getLocalContext().getIsRebookApptSelected().booleanValue())
					{
						clearAllOtherSelections(row);
					}
					else
					{
						form.getLocalContext().setIsRebookApptSelected(true);
						Booking_AppointmentVo voAppt = form.getGlobalContext().Scheduling.getBookingAppointment();
						if (voAppt == null)
							throw new CodingRuntimeException("Rebook appointment not set in Global Context");

						voCollBookAppointments.add(createAppointment(row, true));
						loadAppointmentsGrid(voCollBookAppointments, isFixed);
						form.btnCancel().setEnabled(true);
						form.setMode(FormMode.EDIT); //WDEV-10123
						return;
						
					}
				}
				// end rebook/////////////////////////////////
				// ///////////////////////////////////////////
				if (row.getValue() instanceof Booking_AppointmentVo)
				{
					for (int i = 0; i < voCollBookAppointments.size(); i++)
					{
						if (voCollBookAppointments.get(i).equals(row.getValue()))
							bInListAlready = true;
					}
					if (!bInListAlready)
						voCollBookAppointments.add(createAppointment(row, false));
				}
			}
			else
			{
				if (row.getValue() instanceof Booking_AppointmentVo)
				{
					for (int i = 0; i < voCollBookAppointments.size(); i++)
					{
						if (voCollBookAppointments.get(i).equals(row.getValue()))
							voCollBookAppointments.remove(voCollBookAppointments.get(i));
					}
				}
			}
		}
		else
		{
			if (row.getColSelect() == true)
			{
				boolean bInListAlready = false;

				// /////////////////////////////////////////
				// rebook///////////////////////////////////
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
				{
					// rebook appt already selected
					if (form.getLocalContext().getIsRebookApptSelected().booleanValue())
					{
						clearAllOtherSelections(row);
					}
					else
					{
						form.getLocalContext().setIsRebookApptSelected(true);
						Booking_AppointmentVo voAppt = form.getGlobalContext().Scheduling.getBookingAppointment();
						if (voAppt == null)
							throw new CodingRuntimeException("Rebook appointment not set in Global Context");
						voAppt.setSessionSlot((SessionSlotVo) row.getValue());
						voCollBookAppointments.add(createAppointment(voAppt, (SessionSlotVo) row.getValue()));
					}
				}
				// end rebook/////////////////////////////////
				// ///////////////////////////////////////////

				if (row.getValue() instanceof SessionSlotVo)
				{
					// when rebooking only one appt can be booked this replaces the one in the list with the one selected in the slots grid
					if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
					{
						if (form.getLocalContext().getIsRebookApptSelected().booleanValue())
						{
							if (voCollBookAppointments != null && voCollBookAppointments.size() == 1)
							{
								voCollBookAppointments.clear();
								voCollBookAppointments.add(createAppointment(form.getGlobalContext().Scheduling.getBookingAppointment(), (SessionSlotVo) row.getValue()));
								loadAppointmentsGrid(voCollBookAppointments, isFixed);
								form.btnCancel().setEnabled(true);	//	WDEV-12424
								form.setMode(FormMode.EDIT); //WDEV-10123
								return;
							}
						}
					}
					
					for (int i = 0; i < voCollBookAppointments.size(); i++)
					{
						if (voCollBookAppointments.get(i).getSessionSlotIsNotNull())
						{
							if (voCollBookAppointments.get(i).getSessionSlot().equals(row.getValue()))
								bInListAlready = true;
						}
					}
					if (!bInListAlready)
					{
						voCollBookAppointments.clear();
						voCollBookAppointments.add(createAppointment(null, (SessionSlotVo) row.getValue()));
					}
				}
				else if (row.getValue() instanceof Booking_AppointmentVo)
				{
					for (int i = 0; i < voCollBookAppointments.size(); i++)
					{
						if (voCollBookAppointments.get(i).equals(row.getValue()))
							bInListAlready = true;
					}
					if (!bInListAlready)
						voCollBookAppointments.add(createAppointment(row, false));
				}
			}
			else
			{
				if (row.getValue() instanceof SessionSlotVo)
				{
					for (int i = 0; i < voCollBookAppointments.size(); i++)
					{
						if (voCollBookAppointments.get(i).getSessionSlotIsNotNull())
						{
							if (voCollBookAppointments.get(i).getSessionSlot().equals(row.getValue()))
								voCollBookAppointments.remove(voCollBookAppointments.get(i));
						}
					}
				}
				else if (row.getValue() instanceof Booking_AppointmentVo)
				{
					for (int i = 0; i < voCollBookAppointments.size(); i++)
					{
						if (voCollBookAppointments.get(i).equals(row.getValue()))
							voCollBookAppointments.remove(voCollBookAppointments.get(i));
					}
				}
			}
		}

		if (isChecked)
		{
			form.setMode(FormMode.EDIT);
			form.btnCancel().setEnabled(true);
		}
		loadAppointmentsGrid(voCollBookAppointments, isFixed);

		// repopulate ApptTime data
		for (int i = 0; i < form.grdAppts().getRows().size(); i++)
		{
			grdApptsRow fRow = form.grdAppts().getRows().get(i);
			Time apptTime = null;
			if(fRow.getValue() instanceof Booking_AppointmentVo)
				apptTime = retrieveApptTimeData((Booking_AppointmentVo)fRow.getValue());
			if (apptTime != null)
				fRow.setcolApptTime(apptTime);
		}
	}

	//WDEV-9613
	private void updateControlsState() 
	{
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.txtBookingComments().setEnabled(form.grdAppts().getRows().size() > 0);
			if(	Boolean.TRUE.equals(form.getLocalContext().getEnableFirstAvailableApp()))	//wdev-14867
				form.chkFirst().setEnabled(true);
			else
				form.chkFirst().setEnabled(false);
		}
		else
			{
			form.chkFirst().setEnabled(true);		//wdev-14867
			//WDEV-15833
			form.txtBookingComments().setEnabled(false);
			}
			
	}

	private void displayExistingFixedAppts(SessionSlotVo voSlot, boolean isChecked)
	{
		form.grdAppts().getRows().clear();

		if (isChecked)
		{
			BookingAppointmentLiteVoCollection voCollAppts = domain.listNonCancelledAppointmentsForSession(voSlot.getSession());
			if (voCollAppts != null)
			{
				voCollAppts.sort(SortOrder.ASCENDING);
				for (BookingAppointmentLiteVo voApptItem : voCollAppts)
				{
					grdApptsRow row = form.grdAppts().getRows().newRow();

					if (voApptItem.getAppointmentDateIsNotNull())
						row.setcolApptDate(voApptItem.getAppointmentDate().toString());
					if (voApptItem.getApptStartTimeIsNotNull())
						row.setcolApptTime(voApptItem.getApptStartTime());
					if (voApptItem.getApptEndTimeIsNotNull())
					{
						row.setColDuration(calculateApptDuration(voApptItem.getApptStartTime(), voApptItem.getApptEndTime()));
						row.setColEndTime(voApptItem.getApptEndTime());
					}
					if (voApptItem.getPatientIsNotNull())
						row.setcolPatient(voApptItem.getPatient().toString());
					if (voApptItem.getActivityIsNotNull())
						row.setColActivity(voApptItem.getActivity().getName());
					
					row.setValue(voApptItem);
					row.setBackColor(Color.LightGray);
					row.setReadOnly(true);
				}
			}
		}
	}

	private void displayExistingFlexibleAppts(Booking_AppointmentVo voAppt, boolean isChecked)
	{
		form.grdAppts().getRows().clear();

		if (isChecked)
		{
			BookingAppointmentLiteVoCollection voCollAppts = domain.listNonCancelledAppointmentsForSession(voAppt.getSession());
							
			//WDEV-11565 get available durations and make dummy appts to display in grid 
			List<AvailableDurationVo> avails = voCollAppts.getAvailableDurations(voAppt.getSession());
			if(avails != null)
			{
				for(int i=0;i<avails.size();i++)
				{
					AvailableDurationVo timeSlot = avails.get(i);
					
					//create dummy appt
					BookingAppointmentLiteVo voDummyItem = new BookingAppointmentLiteVo();
					voDummyItem.setApptStartTime(timeSlot.getStartTm());
					voDummyItem.setApptEndTime(timeSlot.getEndTm());
					voDummyItem.setAppointmentDate(voAppt.getSession().getSessionDate());
					voDummyItem.setDummyColour(Color.Orange);
					voCollAppts.add(voDummyItem);
				}
			}
						
			if (voCollAppts != null)
			{
				voCollAppts.sort(SortOrder.ASCENDING);
				for (BookingAppointmentLiteVo voApptItem : voCollAppts)
				{
					grdApptsRow row = form.grdAppts().getRows().newRow();

					if (voApptItem.getAppointmentDateIsNotNull())
						row.setcolApptDate(voApptItem.getAppointmentDate().toString());
					if (voApptItem.getApptStartTimeIsNotNull())
						row.setcolApptTime(voApptItem.getApptStartTime());
					if (voApptItem.getApptEndTimeIsNotNull())
					{
						row.setColDuration(calculateApptDuration(voApptItem.getApptStartTime(), voApptItem.getApptEndTime()));
						row.setColEndTime(voApptItem.getApptEndTime());
					}
					if (voApptItem.getPatientIsNotNull())
						row.setcolPatient(voApptItem.getPatient().toString());
					if (voApptItem.getActivityIsNotNull())
						row.setColActivity(voApptItem.getActivity().getName());
					
					row.setValue(voApptItem);
					
					//WDEV-11565
					if(voApptItem.getDummyColourIsNotNull())
					{
						row.setBackColor(voApptItem.getDummyColour());
						if(voApptItem.getDummyColour().equals(Color.Orange))
							row.setColActivity("Available");
						else if(voApptItem.getDummyColour().equals(Color.Red))
							row.setColActivity("Exclusion Period");		//WDEV-12211
					}
					else
						row.setBackColor(Color.LightGray);
					
					row.setReadOnly(true);
				}
			}
		}
	}

	private int calculateApptDuration(Time apptStartTime, Time apptEndTime)
	{
		if (apptStartTime == null || apptEndTime == null)
			throw new CodingRuntimeException("apptStartTime or apptEndTime is null in method calculateApptDuration");
	
		int mins = apptEndTime.getTotalMinutes() - apptStartTime.getTotalMinutes();
		//appt has gone past midnight
		if(apptEndTime.isLessThan(apptStartTime))	
		{
			Time midNight = new Time(23,59);
			mins = midNight.getTotalMinutes() + 1 - apptStartTime.getTotalMinutes() + apptEndTime.getTotalMinutes(); 
		}
			
		return mins;
	}
	

	private void storeApptTimeSelection(Booking_AppointmentVo value, Time getcolApptTime)
	{
		Map map = form.getLocalContext().getSelectedApptTimes();
		if (map == null)
			map = new HashMap();

		Object entry = map.get(value);

		if (entry == null)
			map.put(value, getcolApptTime);

		form.getLocalContext().setSelectedApptTimes(map);
	}

	private Time retrieveApptTimeData(Booking_AppointmentVo voAppt)
	{
		Map map = form.getLocalContext().getSelectedApptTimes();
		if (map == null)
			return null;

		return (Time) map.get(voAppt);
	}

	/**
	 * When rebooking pass the original voAppt to this method in all other cases create a new appointment
	 * 
	 * @param voAppt
	 * @param voSessionSlot
	 * @return
	 */
	private Booking_AppointmentVo createAppointment(Booking_AppointmentVo voAppt, SessionSlotVo voSessionSlot)
	{
		Booking_AppointmentVo voBookAppt = voAppt;
		if (voBookAppt == null)
			voBookAppt = new Booking_AppointmentVo();

		voBookAppt.setSessionSlot(voSessionSlot);
		voBookAppt.setSession(voSessionSlot.getSession());
		voBookAppt.setAppointmentDate(form.bookingCalendar1().getSelectedDay());
		voBookAppt.setApptStartTime(voSessionSlot.getStartTm());
		voBookAppt.setActivity(form.cmbActivity().getValue());
		voBookAppt.setApptEndTime(Booking_AppointmentVo.calculateEndTime(voSessionSlot.getStartTm(), voSessionSlot.getDuration().intValue()));
		voBookAppt.setApptStatus(Status_Reason.BOOKED);
		voBookAppt.setPatient(form.getLocalContext().getPatient());

		if(voBookAppt.getApptStatusHistoryIsNotNull())
			clearUnsavedItemsInHistory(voBookAppt.getApptStatusHistory());
		// WDEV-6049
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voBookAppt.getAppointmentDate());
		voStatus.setApptTime(voBookAppt.getApptStartTime());
		//wdev-17770
		voStatus.setStatusChangeDateTime(new DateTime());
		//-------
		voStatus.setStatus(voBookAppt.getApptStatus());
		voBookAppt.setCurrentStatusRecord(voStatus);
		if (voBookAppt.getApptStatusHistory() == null)
			voBookAppt.setApptStatusHistory(new Appointment_StatusVoCollection());
		voBookAppt.getApptStatusHistory().add(voStatus);

		if (!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals("Local Only"))
		{
			if (voSessionSlot.getDirectoryOfServicesIsNotNull() && voSessionSlot.getDirectoryOfServices().size() > 0)
				voSessionSlot.getDirectoryOfServices().get(0).setUBRN(new DateTime().toString());
		}

		return voBookAppt;
	}
	
	private void clearUnsavedItemsInHistory(Appointment_StatusVoCollection apptStatusHistory) {
		for (int i = 0; i < apptStatusHistory.size(); i++)
		{
			if(apptStatusHistory.get(i).getID_Appointment_Status()==null)
				apptStatusHistory.remove(apptStatusHistory.get(i));
			
		}
		
	}

	private void clearAllOtherSelections(GenForm.grdSessionSlotsRow row)
	{
		// clear the only other appt entry as only allow rebook one appt
		for (int i = 0; i < form.grdSessionSlots().getRows().size(); i++)
		{
			grdSessionSlotsRow sRow = form.grdSessionSlots().getRows().get(i);
			if (!sRow.isReadOnly() && !sRow.getValue().equals(row.getValue()) && sRow.getColSelect())
			{
				sRow.setColSelect(false);
			}
		}
	}

	private Booking_AppointmentVo createAppointment(grdSessionSlotsRow row, boolean isRebook)
	{
		Booking_AppointmentVo voBookAppt = null;
		if(isRebook)
			voBookAppt = form.getGlobalContext().Scheduling.getBookingAppointment();
		else if (row.getValue() instanceof Booking_AppointmentVo)
			voBookAppt = (Booking_AppointmentVo) row.getValue();
		else 
			return null;

		int index = 0;
		if (form.getLocalContext().getSelectedSessionIndexIsNotNull())
			index = form.getLocalContext().getSelectedSessionIndex().intValue();

		SessionShortVo voSessionShort = form.getLocalContext().getSelectedSessions().get(index);
		voBookAppt.setSession(voSessionShort);

		voBookAppt.setAppointmentDate(form.bookingCalendar1().getSelectedDay());

		if (!row.getColAppointmentTime().equals("Flexi"))
			voBookAppt.setApptStartTime(new Time(row.getColAppointmentTime()));

		voBookAppt.setActivity(form.cmbActivity().getValue());
		if (voSessionShort.getIsFixed())
		{
			if (form.cmbActivity().getValue() != null && form.cmbActivity().getValue().getTmReqIsNotNull())
				voBookAppt.setApptEndTime(Booking_AppointmentVo.calculateEndTime(new Time(row.getColAppointmentTime()), form.cmbActivity().getValue().getTmReq().intValue()));
		}

		voBookAppt.setPatient(form.getLocalContext().getPatient());

		voBookAppt.setApptStatus(Status_Reason.BOOKED);
		
		if(voBookAppt.getApptStatusHistoryIsNotNull())								//wdev-14641
			clearUnsavedItemsInHistory(voBookAppt.getApptStatusHistory());
		
		//WDEV-8714 
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voBookAppt.getAppointmentDate());
		voStatus.setApptTime(voBookAppt.getApptStartTime());
		voStatus.setStatus(voBookAppt.getApptStatus());
		voBookAppt.setCurrentStatusRecord(voStatus);
		if (voBookAppt.getApptStatusHistory() == null)
			voBookAppt.setApptStatusHistory(new Appointment_StatusVoCollection());
		voBookAppt.getApptStatusHistory().add(voStatus);
		
		return voBookAppt;
	}

	private void loadAppointmentsGrid(Booking_AppointmentVoCollection voCollBookAppointments, boolean isFixed)
	{
		if (isFixed)
		{
			// set the appt type
			if (voCollBookAppointments != null)
			{
				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					voCollBookAppointments.get(i).setActivity(form.cmbActivity().getValue());
				}
			}

			form.getLocalContext().setSelectedAppointments(voCollBookAppointments);

			grdApptsRow aRow = null;
			Booking_AppointmentVo voBookAppt = null;
			for (int i = 0; i < voCollBookAppointments.size(); i++)
			{
				voBookAppt = voCollBookAppointments.get(i);
				if (voBookAppt.getSessionIsNotNull() && voBookAppt.getSession().getIsFixedIsNotNull() && voBookAppt.getSession().getIsFixed())
				{
					aRow = form.grdAppts().getRows().newRow();
					aRow.setcolApptDate(voBookAppt.getAppointmentDate().toString());
					if (voBookAppt.getApptStartTimeIsNotNull())
					{
						aRow.setcolApptTime(voBookAppt.getApptStartTime());
						if(voBookAppt.getApptEndTimeIsNotNull())
							aRow.setColDuration(calculateApptDuration(voBookAppt.getApptStartTime(), voBookAppt.getApptEndTime()));
					}
					
					if (voBookAppt.getPatientIsNotNull())
						aRow.setcolPatient(voBookAppt.getPatient().getPatientNameAndIdInfo());	
		
					if(voBookAppt.getActivityIsNotNull())
						aRow.setColActivity(voBookAppt.getActivity().getName());
					aRow.setValue(voBookAppt);
				}
			}

			if (form.grdAppts().getRows().size() > 0)
				form.btnBook().setEnabled(true);
			else
				form.btnBook().setEnabled(false);
		}
		else
		{
			// flexible
			form.getLocalContext().setSelectedAppointments(voCollBookAppointments);
		
			grdApptsRow aRow = null;
			Booking_AppointmentVo voBookAppt = null;
			for (int i = 0; i < voCollBookAppointments.size(); i++)
			{
				voBookAppt = voCollBookAppointments.get(i);
				if (voBookAppt.getSessionIsNotNull() && voBookAppt.getSession().getIsFixedIsNotNull() && !voBookAppt.getSession().getIsFixed())
				{
					aRow = form.grdAppts().getRows().newRow();
					aRow.setcolApptDate(voBookAppt.getAppointmentDate().toString());
					if (voBookAppt.getActivityIsNotNull())
						aRow.setColDuration(voBookAppt.getActivity().getTmReq());
					if (voBookAppt.getPatientIsNotNull())
						aRow.setcolPatient(voBookAppt.getPatient().getPatientNameAndIdInfo());	
					
					if(voBookAppt.getActivityIsNotNull())
						aRow.setColActivity(voBookAppt.getActivity().getName());
					aRow.setValue(voBookAppt);
				}
			}
			form.grdAppts().setReadOnly(false);

			if (form.grdAppts().getRows().size() > 0)
				form.btnBook().setEnabled(true);
			else
				form.btnBook().setEnabled(false);
		}
	}

	protected void onBtnPreviousSessionClick() throws PresentationLogicException
	{
		if (form.getLocalContext().getSelectedSessionsIsNotNull())
		{
			int sessionCount = form.getLocalContext().getSelectedSessions().size();
			int currentIndex = form.getLocalContext().getSelectedSessionIndex().intValue();

			if (currentIndex <= sessionCount && currentIndex != 0)
				currentIndex--;

			if (currentIndex == 0)
				form.btnPreviousSession().setEnabled(false);
			if (sessionCount > 0 && currentIndex <= sessionCount)
				form.btnPreviousSession().setEnabled(true);

			form.getLocalContext().setSelectedSessionIndex(new Integer(currentIndex));
			loadSessionSlots();
		}
	}

	protected void onBtnNextSessionClick() throws PresentationLogicException
	{

		if (form.getLocalContext().getSelectedSessionsIsNotNull())
		{
			int sessionCount = form.getLocalContext().getSelectedSessions().size();
			int currentIndex = form.getLocalContext().getSelectedSessionIndex().intValue();

			if (currentIndex < (sessionCount - 1))
				currentIndex++;

			if (currentIndex > 0)
				form.btnPreviousSession().setEnabled(true);
			if (currentIndex == (sessionCount - 1))
				form.btnNextSession().setEnabled(false);

			form.getLocalContext().setSelectedSessionIndex(new Integer(currentIndex));
			loadSessionSlots();
		}
	}

	private void loadSessions(boolean bUseFirstAvaialbleCheck)
	{
		AppointmentBookingSearchFilterVo popFilter = populateFilter();
		form.getLocalContext().setsearchFilter(popFilter);
		clearBookingCalendar();
		form.bookingCalendar1().clearNoSessionDates();
		listSessions(bUseFirstAvaialbleCheck);
		clearScreen();
		initialiseCalendar();
		form.bookingCalendar1().setEnabled(true);
		form.btnPreviousSession().setEnabled(false);
		form.btnNextSession().setEnabled(false);
		form.btnBook().setEnabled(false);
		form.btnCancel().setEnabled(false);
	}

	private void listSessions(boolean useFirstAvaialbleCheck)
	{

		ActivityVo voActivity = form.cmbActivity().getValue();

		if (useFirstAvaialbleCheck)
		{
			if (form.chkFirst().getValue() == true)
			{
				Date currentDate = domain.getCurrentMonth(form.cmbClinic().getValue(), voActivity, form.cmbSpecialty().getValue(), form.cmbLocation().getValue(), form.customControlHcp().getValue(), form.chkFirst().getValue());
				if (currentDate != null)
				{
					form.bookingCalendar1().setCurrentMonth(currentDate);
					form.getLocalContext().setCurrentDate(currentDate);
				}
			}
		}

		Date dateStart = new Date(form.bookingCalendar1().getCurrentMonth().getYear(), form.bookingCalendar1().getCurrentMonth().getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendar1().getCurrentMonth().getYear(), form.bookingCalendar1().getCurrentMonth().getMonth(), form.bookingCalendar1().getCurrentMonth().getNumberOfDaysInTheMonth());

		SessionShortVoCollection voCollSessionShort = domain.listGenericSession(dateStart, dateEnd, form.cmbClinic().getValue(), voActivity, form.cmbSpecialty().getValue(), form.cmbLocation().getValue(), form.customControlHcp().getValue(), form.chkFirst().getValue(), form.chkOverBook().getValue());
		form.getLocalContext().setSessions(voCollSessionShort);
	}

	protected void onCmbSpecialtyValueChanged() throws PresentationLogicException
	{
		listClinics();
	}

	private void listClinics()
	{
		form.cmbClinic().clear();
		if (form.cmbSpecialty().getValue() == null)
			return;

		ProfileLiteVoCollection voCollClinics = domain.listProfileLiteByService(form.cmbSpecialty().getValue());
		
		if (voCollClinics != null)
		{
			//wdev-12812
			voCollClinics.sort(new ClinicComparator(SortOrder.ASCENDING));
			//------------
			for (ProfileLiteVo item : voCollClinics)
				form.cmbClinic().newRow(item, item.getName());

		}
	}
	//wdev-12812
		
	public class ClinicComparator implements Comparator
	{
		private int direction = 1;
		
		public ClinicComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ClinicComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			String name1 = null;
			String name2 = null;
			if(ob1 instanceof ProfileLiteVo )
			{
				ProfileLiteVo ps1 = (ProfileLiteVo)ob1;
				name1 = ps1.getName();
			}
			if(ob2 instanceof ProfileLiteVo)
			{
				ProfileLiteVo ps2 = (ProfileLiteVo)ob2;
				name2 = ps2.getName();
			}
			if(name1 != null )
				return  name1.compareToIgnoreCase(name2)*direction;
			if(name2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	//--------
	
	
	protected void onImbClearClick() throws PresentationLogicException
	{
		clearSearchCriteria();
		clearScreen();
		clearLocalContext();
		form.bookingCalendar1().setCurrentMonth(new Date());
		form.getLocalContext().setCurrentDate(null);
		clearBookingCalendar();
		form.btnPreviousSession().setEnabled(false);
		form.btnNextSession().setEnabled(false);
		form.btnBook().setEnabled(false);
		form.btnCancel().setEnabled(false);
		form.setMode(FormMode.VIEW);
		form.cmbClinic().clear();
		form.bookingCalendar1().setEnabled(false);
	}

	protected void onImbSearchClick() throws PresentationLogicException
	{
		String[] errors = validateSearchCriteria();
		if (errors == null)
		{
			loadSessions(true);
		}
		else
			engine.showErrors(errors);
	}
	
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onFormModeChanged()
	{
		form.btnClose().setVisible(false);
		if(form.getMode().equals(FormMode.VIEW) && engine.isDialog())
			form.btnClose().setVisible(true);
		
		updateControlsState(); //	WDEV-9613
	}

	private AppointmentBookingSearchFilterVo populateFilter()
	{
		AppointmentBookingSearchFilterVo filter = new AppointmentBookingSearchFilterVo();

		filter.setActivity(form.cmbActivity().getValue());

		if (form.cmbClinic().getValue() != null)
			filter.setClinic(form.cmbClinic().getValue().getBoId());

		if (form.customControlHcp().getValue() != null)
			filter.setHcp(form.customControlHcp().getValue().getIMosName());

		filter.setFirstAvailableApp(form.chkFirst().getValue());

		if (form.cmbLocation().getValue() != null)
			filter.setLocation(form.cmbLocation().getValue().getBoId());

		if (form.cmbSpecialty().getValue() != null)
			filter.setSpecialty(form.cmbSpecialty().getValue().getBoId());

		Date dateStart = new Date(form.bookingCalendar1().getCurrentMonth().getYear(), form.bookingCalendar1().getCurrentMonth().getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendar1().getCurrentMonth().getYear(), form.bookingCalendar1().getCurrentMonth().getMonth(), form.bookingCalendar1().getCurrentMonth().getNumberOfDaysInTheMonth());

		filter.setStartDate(dateStart);

		if (dateEnd != null)
			filter.setEndDate(dateEnd);

		return filter;

	}

	private String[] validateSearchCriteria()
	{
		List<String> errors = new ArrayList<String>();
		if (form.cmbSpecialty().getValue() == null && form.customControlHcp().getValue() == null && form.cmbClinic().getValue() == null)
			errors.add("Service,Clinic or List Owner is mandatory");
		if (form.cmbActivity().getValue() == null)
			errors.add("Activity is mandatory");

		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	// used to store available times for flexible appointments
	class AvailableDuration
	{
		private Time	startTm;
		private Time	endTm;

		public AvailableDuration(Time stTm, Time eTm)
		{
			this.startTm = stTm;
			this.endTm = eTm;
		}
	}

	//WDEV-9099
	protected void onImbRefreshClick() throws PresentationLogicException
	{
		//wdev-11763
		if(form.cmbActivity().getValue() == null )
		{
			engine.showErrors(new String[]{"Activity field is mandatory"});
			return;
		}
		//----------
		//get any checked row's value and display accordingly
		grdSessionSlotsRow row = null;
		ValueObject rowVal = null;
		for(int i=0;i<form.grdSessionSlots().getRows().size();i++)
		{
			grdSessionSlotsRow sRow = form.grdSessionSlots().getRows().get(i);
			if(sRow.getColSelect())
			{
				rowVal = sRow.getValue();
				break;
			}
		}
				
		int selectedSession = form.getLocalContext().getSelectedSessionIndex();
		
		if(rowVal != null)
		{
			Date day = form.bookingCalendar1().getSelectedDay();
			
			loadSessions(true);
			if(day != null)
			{
				form.bookingCalendar1().setSelectedDay(day);
				bookingCalendar1DateSelected(form.bookingCalendar1().getSelectedDay());
			}
			
			if(selectedSession > 0)
			{
				for(int i=0;i<selectedSession;i++)
					onBtnNextSessionClick();
			}
			
			row = getSlotRowByValue(rowVal);
			if(row != null)
			{
				row.setColSelect(true);
				
				if(Boolean.TRUE.equals(form.getLocalContext().getIsRebookApptSelected()))
					form.getLocalContext().setIsRebookApptSelected(Boolean.FALSE);
				
				grdSessionSlotsClicked(row, true);
			}
		}
		
		updateControlsState();	//WDEV-9613
	}

	private grdSessionSlotsRow getSlotRowByValue(ValueObject rowVal)
	{
		if(rowVal == null)
			return null;
		
		if(rowVal instanceof Booking_AppointmentVo)
		{
			//match on session in this case as appt has no id
			for(int i=0;i<form.grdSessionSlots().getRows().size(); i++)
			{
				// WDEV-12626
				if (form.grdSessionSlots().getRows().get(i).getValue() instanceof Booking_AppointmentVo)
    				if((((Booking_AppointmentVo)rowVal).getSessionIsNotNull()) && ((Booking_AppointmentVo)form.grdSessionSlots().getRows().get(i).getValue()).getSessionIsNotNull())
    					if(((Booking_AppointmentVo)rowVal).getSession().equals(((Booking_AppointmentVo)form.grdSessionSlots().getRows().get(i).getValue()).getSession()))
    						return form.grdSessionSlots().getRows().get(i);
			}
			
			return form.grdSessionSlots().getRowByValue((Booking_AppointmentVo)rowVal);
		}
			
		else if(rowVal instanceof SessionSlotVo)
			return form.grdSessionSlots().getRowByValue((SessionSlotVo)rowVal);
		
		return null;
	}
}
