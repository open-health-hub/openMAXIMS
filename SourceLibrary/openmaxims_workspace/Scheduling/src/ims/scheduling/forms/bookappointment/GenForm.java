//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.bookappointment;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.resource.place.vo.LocationRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.resource.place.vo.LocationRefVo getValue()
		{
			return (ims.core.resource.place.vo.LocationRefVo)super.control.getValue();
		}
		public void setValue(ims.core.resource.place.vo.LocationRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbClinicComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.Sch_ProfileRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.Sch_ProfileRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.Sch_ProfileRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.Sch_ProfileRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.Sch_ProfileRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.Sch_ProfileRefVo getValue()
		{
			return (ims.scheduling.vo.Sch_ProfileRefVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.Sch_ProfileRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.clinical.vo.ServiceRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.clinical.vo.ServiceRefVo getValue()
		{
			return (ims.core.clinical.vo.ServiceRefVo)super.control.getValue();
		}
		public void setValue(ims.core.clinical.vo.ServiceRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPriorityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.SchedulingPriority value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.SchedulingPriority value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.SchedulingPriority getValue()
		{
			return (ims.scheduling.vo.lookups.SchedulingPriority)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.SchedulingPriority value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbActivityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ActivitySchedVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ActivitySchedVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ActivitySchedVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ActivitySchedVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ActivitySchedVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ActivitySchedVo getValue()
		{
			return (ims.core.vo.ActivitySchedVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ActivitySchedVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdSessionSlotsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSessionSlotsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColSessStartTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColSessStartTimeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColSessStartTimeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColSessStartTime(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getColSessStartTime()
		{
			return (String)super.row.get(0);
		}
		public void setColSessStartTime(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColSessStartTimeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColSessEndTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColSessEndTimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColSessEndTimeOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColSessEndTime(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColSessEndTime()
		{
			return (String)super.row.get(1);
		}
		public void setColSessEndTime(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColSessEndTimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColAppointmentTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColAppointmentTimeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColAppointmentTimeOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColAppointmentTime(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColAppointmentTime()
		{
			return (String)super.row.get(2);
		}
		public void setColAppointmentTime(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColAppointmentTimeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColLocationReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColLocationReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColLocationOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColLocation(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColLocation()
		{
			return (String)super.row.get(3);
		}
		public void setColLocation(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColLocationTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColActivityReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColActivityReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColActivityOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColActivity(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.ActivityVo getColActivity()
		{
			return (ims.core.vo.ActivityVo)super.row.get(4);
		}
		public void setColActivity(ims.core.vo.ActivityVo value)
		{
			super.row.set(4, value);
		}
		public void setCellColActivityTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColSelect(String value)
		{
			super.row.setTooltip(5, value);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(5)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(5, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSessionSlotsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSessionSlotsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSessionSlotsRow get(int index)
		{
			return new grdSessionSlotsRow(super.collection.get(index));
		}
		public grdSessionSlotsRow newRow()
		{
			return new grdSessionSlotsRow(super.collection.newRow());
		}
		public grdSessionSlotsRow newRow(boolean autoSelect)
		{
			return new grdSessionSlotsRow(super.collection.newRow(autoSelect));
		}
		public grdSessionSlotsRow newRowAt(int index)
		{
			return new grdSessionSlotsRow(super.collection.newRowAt(index));
		}
		public grdSessionSlotsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSessionSlotsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSessionSlotsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdSessionSlotsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSessionSlotsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSessionSlotsRowCollection getRows()
		{
			return new grdSessionSlotsRowCollection(super.grid.getRows());
		}
		public grdSessionSlotsRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSessionSlotsRow(row);
		}
		public void setColSessStartTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColSessStartTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColSessEndTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColSessEndTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColAppointmentTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColAppointmentTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColLocationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColLocationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColActivityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColActivityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	public static class grdApptsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdApptsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolApptDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolApptDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolApptDateOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolApptDate()
		{
			return (String)super.row.get(0);
		}
		public void setcolApptDate(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolApptDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolApptTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolApptTimeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolApptTimeOpened()
		{
			super.row.showOpened(1);
		}
		public ims.framework.utils.Time getcolApptTime()
		{
			return (ims.framework.utils.Time)super.row.get(1);
		}
		public void setcolApptTime(ims.framework.utils.Time value)
		{
			super.row.set(1, value);
		}
		public void setCellcolApptTimeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColEndTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColEndTimeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColEndTimeOpened()
		{
			super.row.showOpened(2);
		}
		public ims.framework.utils.Time getColEndTime()
		{
			return (ims.framework.utils.Time)super.row.get(2);
		}
		public void setColEndTime(ims.framework.utils.Time value)
		{
			super.row.set(2, value);
		}
		public void setCellColEndTimeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColDurationReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColDurationReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColDurationOpened()
		{
			super.row.showOpened(3);
		}
		public Integer getColDuration()
		{
			return (Integer)super.row.get(3);
		}
		public void setColDuration(Integer value)
		{
			super.row.set(3, value);
		}
		public void setCellColDurationTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColActivityReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColActivityReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColActivityOpened()
		{
			super.row.showOpened(4);
		}
		public String getColActivity()
		{
			return (String)super.row.get(4);
		}
		public void setColActivity(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColActivityTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolPatientReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolPatientReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolPatientOpened()
		{
			super.row.showOpened(5);
		}
		public String getcolPatient()
		{
			return (String)super.row.get(5);
		}
		public void setcolPatient(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolPatientTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdApptsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdApptsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdApptsRow get(int index)
		{
			return new grdApptsRow(super.collection.get(index));
		}
		public grdApptsRow newRow()
		{
			return new grdApptsRow(super.collection.newRow());
		}
		public grdApptsRow newRow(boolean autoSelect)
		{
			return new grdApptsRow(super.collection.newRow(autoSelect));
		}
		public grdApptsRow newRowAt(int index)
		{
			return new grdApptsRow(super.collection.newRowAt(index));
		}
		public grdApptsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdApptsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdApptsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addTimeColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addTimeColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, validationString, bold, sortOrder, canGrow);
		}
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdApptsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdApptsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdApptsRowCollection getRows()
		{
			return new grdApptsRowCollection(super.grid.getRows());
		}
		public grdApptsRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdApptsRow(row);
		}
		public void setcolApptDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolApptDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolApptTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolApptTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColEndTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColEndTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColDurationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColDurationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColActivityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColActivityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolPatientHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolPatientHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(80);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 80, 56, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_customControlHcpForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_customControlHcpControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(80), new Integer(56), new Integer(192), new Integer(20), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3), m_customControlHcpForm, instance1 } );
		ims.framework.Control m_customControlHcpControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3), m_customControlHcpForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlHcpControl);
		Menu[] menus1 = m_customControlHcpForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 264, 10, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Location:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 264, 34, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Priority:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 58, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 560, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 397, 99, 37, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "* of *", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 496, 10, 51, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Activity:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 560, 600, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 656, 600, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Book", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 344, 96, 32, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<<", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 455, 96, 32, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, ">>", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 752, 600, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 80, 560, 760, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 320, 8, 170, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLocationTemp);
		cmbLocationComboBox cmbLocation = (cmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationComboBox.class, m_cmbLocationTemp);
		super.addComboBox(cmbLocation);
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 80, 32, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbClinicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbClinicTemp);
		cmbClinicComboBox cmbClinic = (cmbClinicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbClinicComboBox.class, m_cmbClinicTemp);
		super.addComboBox(cmbClinic);
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 80, 8, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 320, 32, 170, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbPriorityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbPriorityTemp);
		cmbPriorityComboBox cmbPriority = (cmbPriorityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityComboBox.class, m_cmbPriorityTemp);
		super.addComboBox(cmbPriority);
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 552, 8, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbActivityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbActivityTemp);
		cmbActivityComboBox cmbActivity = (cmbActivityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActivityComboBox.class, m_cmbActivityTemp);
		super.addComboBox(cmbActivity);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 552, 52, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Overbook Flexible Sessions", Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 552, 32, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"First Available Appointment", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 344, 128, 496, 224, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdSessionSlotsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdSessionSlotsTemp);
		grdSessionSlotsGrid grdSessionSlots = (grdSessionSlotsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSessionSlotsGrid.class, m_grdSessionSlotsTemp);
		grdSessionSlots.addStringColumn("Clinic Start", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessionSlots.addStringColumn("Clinic End", 0, 0, 70, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessionSlots.addStringColumn("Time", 0, 0, 45, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessionSlots.addStringColumn("Location", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessionSlots.addStringColumn("Activity", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSessionSlots.addBoolColumn("Select", 1, 1, -1, false, true, 0, true);
		super.addGrid(grdSessionSlots);
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 363, 796, 184, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdApptsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdApptsTemp);
		grdApptsGrid grdAppts = (grdApptsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdApptsGrid.class, m_grdApptsTemp);
		grdAppts.addStringColumn("Appointment Date", 0, 0, 140, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addTimeColumn("Appt. Time", 0, 0, 100, false, true, false, null, false, 0, true);
		grdAppts.addTimeColumn("End Time", 0, 0, 100, true, true, false, null, false, 0, true);
		grdAppts.addIntColumn("Duration", 0, 0, 100, true, true, null, false, 0, true);
		grdAppts.addStringColumn("Activity", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdAppts.addStringColumn("Patient", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdAppts);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 810, 363, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.TimerStartEnabled24, this.getImages().Core.TimerStartDisabled24, "Refresh Appointments", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 810, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 776, 3, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for sessions matching 'Search Criteria'", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));

		// BookingCalendar Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 304, 256, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(BookingCalendar.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent customControlHcp()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlHcpValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlHcpVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlHcpVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlHcpEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlHcpEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Label lblSession()
	{
		return (Label)super.getControl(7);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(9);
	}
	public Button btnBook()
	{
		return (Button)super.getControl(10);
	}
	public Button btnPreviousSession()
	{
		return (Button)super.getControl(11);
	}
	public Button btnNextSession()
	{
		return (Button)super.getControl(12);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(13);
	}
	public TextBox txtBookingComments()
	{
		return (TextBox)super.getControl(14);
	}
	public cmbLocationComboBox cmbLocation()
	{
		return (cmbLocationComboBox)super.getComboBox(0);
	}
	public cmbClinicComboBox cmbClinic()
	{
		return (cmbClinicComboBox)super.getComboBox(1);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(2);
	}
	public cmbPriorityComboBox cmbPriority()
	{
		return (cmbPriorityComboBox)super.getComboBox(3);
	}
	public cmbActivityComboBox cmbActivity()
	{
		return (cmbActivityComboBox)super.getComboBox(4);
	}
	public CheckBox chkOverBook()
	{
		return (CheckBox)super.getControl(20);
	}
	public CheckBox chkFirst()
	{
		return (CheckBox)super.getControl(21);
	}
	public grdSessionSlotsGrid grdSessionSlots()
	{
		return (grdSessionSlotsGrid)super.getGrid(0);
	}
	public grdApptsGrid grdAppts()
	{
		return (grdApptsGrid)super.getGrid(1);
	}
	public ImageButton imbRefresh()
	{
		return (ImageButton)super.getControl(24);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(25);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(26);
	}
	public BookingCalendar bookingCalendar1()
	{
		return (BookingCalendar)super.getControl(27);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				PrintAppointment = new LocalFormName(114163);
			}
			public final FormName PrintAppointment;
		}

		public SchedulingForms Scheduling;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Core = new CoreImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Function = new ImageHelper(103109, "Images/Admin/Function.gif", new Integer(16), new Integer(16));
				Service = new ImageHelper(103110, "Images/Admin/clinical_service.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Function;
			public final ims.framework.utils.Image Service;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				TimerStartEnabled24 = new ImageHelper(102308, "Images/Core/sinc_24x24.png", new Integer(24), new Integer(24));
				TimerStartDisabled24 = new ImageHelper(102310, "Images/Core/sinc_disabled_24x24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image TimerStartEnabled24;
			public final ims.framework.utils.Image TimerStartDisabled24;
		}
		public final AdminImages Admin;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Sessions = new ims.framework.ContextVariable("Sessions", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Sessions_" + componentIdentifier + "");
			cxl_SelectedSessions = new ims.framework.ContextVariable("SelectedSessions", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__SelectedSessions_" + componentIdentifier + "");
			cxl_SelectedSessionIndex = new ims.framework.ContextVariable("SelectedSessionIndex", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__SelectedSessionIndex_" + componentIdentifier + "");
			cxl_SelectedAppointments = new ims.framework.ContextVariable("SelectedAppointments", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__SelectedAppointments_" + componentIdentifier + "");
			cxl_Patient = new ims.framework.ContextVariable("Patient", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier + "");
			cxl_SelectedEventsAndPathways = new ims.framework.ContextVariable("SelectedEventsAndPathways", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__SelectedEventsAndPathways_" + componentIdentifier + "");
			cxl_SessionBookingRights = new ims.framework.ContextVariable("SessionBookingRights", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__SessionBookingRights_" + componentIdentifier + "");
			cxl_CurrentDate = new ims.framework.ContextVariable("CurrentDate", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__CurrentDate_" + componentIdentifier + "");
			cxl_StartDate = new ims.framework.ContextVariable("StartDate", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__StartDate_" + componentIdentifier + "");
			cxl_EndDate = new ims.framework.ContextVariable("EndDate", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__EndDate_" + componentIdentifier + "");
			cxl_searchFilter = new ims.framework.ContextVariable("searchFilter", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__searchFilter_" + componentIdentifier + "");
			cxl_Sch_Booking = new ims.framework.ContextVariable("Sch_Booking", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier + "");
			cxl_IsRebookApptSelected = new ims.framework.ContextVariable("IsRebookApptSelected", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__IsRebookApptSelected_" + componentIdentifier + "");
			cxl_SelectedApptTimes = new ims.framework.ContextVariable("SelectedApptTimes", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__SelectedApptTimes_" + componentIdentifier + "");
			cxl_MaxAvailableDuration = new ims.framework.ContextVariable("MaxAvailableDuration", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__MaxAvailableDuration_" + componentIdentifier + "");
			cxl_EnableFirstAvailableApp = new ims.framework.ContextVariable("EnableFirstAvailableApp", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__EnableFirstAvailableApp_" + componentIdentifier + "");
			cxl_TransportRequired = new ims.framework.ContextVariable("TransportRequired", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__TransportRequired_" + componentIdentifier + "");
			cxl_CareContextRef = new ims.framework.ContextVariable("CareContextRef", prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__CareContextRef_" + componentIdentifier + "");
		}
		
		public boolean getSessionsIsNotNull()
		{
			return !cxl_Sessions.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionShortVoCollection getSessions()
		{
			return (ims.scheduling.vo.SessionShortVoCollection)cxl_Sessions.getValue(context);
		}
		public void setSessions(ims.scheduling.vo.SessionShortVoCollection value)
		{
			cxl_Sessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sessions = null;
		public boolean getSelectedSessionsIsNotNull()
		{
			return !cxl_SelectedSessions.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionShortVoCollection getSelectedSessions()
		{
			return (ims.scheduling.vo.SessionShortVoCollection)cxl_SelectedSessions.getValue(context);
		}
		public void setSelectedSessions(ims.scheduling.vo.SessionShortVoCollection value)
		{
			cxl_SelectedSessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSessions = null;
		public boolean getSelectedSessionIndexIsNotNull()
		{
			return !cxl_SelectedSessionIndex.getValueIsNull(context);
		}
		public Integer getSelectedSessionIndex()
		{
			return (Integer)cxl_SelectedSessionIndex.getValue(context);
		}
		public void setSelectedSessionIndex(Integer value)
		{
			cxl_SelectedSessionIndex.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSessionIndex = null;
		public boolean getSelectedAppointmentsIsNotNull()
		{
			return !cxl_SelectedAppointments.getValueIsNull(context);
		}
		public ims.scheduling.vo.Booking_AppointmentVoCollection getSelectedAppointments()
		{
			return (ims.scheduling.vo.Booking_AppointmentVoCollection)cxl_SelectedAppointments.getValue(context);
		}
		public void setSelectedAppointments(ims.scheduling.vo.Booking_AppointmentVoCollection value)
		{
			cxl_SelectedAppointments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedAppointments = null;
		public boolean getPatientIsNotNull()
		{
			return !cxl_Patient.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatient()
		{
			return (ims.core.vo.PatientShort)cxl_Patient.getValue(context);
		}
		public void setPatient(ims.core.vo.PatientShort value)
		{
			cxl_Patient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Patient = null;
		public boolean getSelectedEventsAndPathwaysIsNotNull()
		{
			return !cxl_SelectedEventsAndPathways.getValueIsNull(context);
		}
		public ims.scheduling.vo.SlotEventPathwayVoCollection getSelectedEventsAndPathways()
		{
			return (ims.scheduling.vo.SlotEventPathwayVoCollection)cxl_SelectedEventsAndPathways.getValue(context);
		}
		public void setSelectedEventsAndPathways(ims.scheduling.vo.SlotEventPathwayVoCollection value)
		{
			cxl_SelectedEventsAndPathways.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedEventsAndPathways = null;
		public boolean getSessionBookingRightsIsNotNull()
		{
			return !cxl_SessionBookingRights.getValueIsNull(context);
		}
		public java.util.Map getSessionBookingRights()
		{
			return (java.util.Map)cxl_SessionBookingRights.getValue(context);
		}
		public void setSessionBookingRights(java.util.Map value)
		{
			cxl_SessionBookingRights.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessionBookingRights = null;
		public boolean getCurrentDateIsNotNull()
		{
			return !cxl_CurrentDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getCurrentDate()
		{
			return (ims.framework.utils.Date)cxl_CurrentDate.getValue(context);
		}
		public void setCurrentDate(ims.framework.utils.Date value)
		{
			cxl_CurrentDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentDate = null;
		public boolean getStartDateIsNotNull()
		{
			return !cxl_StartDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getStartDate()
		{
			return (ims.framework.utils.Date)cxl_StartDate.getValue(context);
		}
		public void setStartDate(ims.framework.utils.Date value)
		{
			cxl_StartDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_StartDate = null;
		public boolean getEndDateIsNotNull()
		{
			return !cxl_EndDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getEndDate()
		{
			return (ims.framework.utils.Date)cxl_EndDate.getValue(context);
		}
		public void setEndDate(ims.framework.utils.Date value)
		{
			cxl_EndDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EndDate = null;
		public boolean getsearchFilterIsNotNull()
		{
			return !cxl_searchFilter.getValueIsNull(context);
		}
		public ims.scheduling.vo.AppointmentBookingSearchFilterVo getsearchFilter()
		{
			return (ims.scheduling.vo.AppointmentBookingSearchFilterVo)cxl_searchFilter.getValue(context);
		}
		public void setsearchFilter(ims.scheduling.vo.AppointmentBookingSearchFilterVo value)
		{
			cxl_searchFilter.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_searchFilter = null;
		public boolean getSch_BookingIsNotNull()
		{
			return !cxl_Sch_Booking.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_BookingVo getSch_Booking()
		{
			return (ims.scheduling.vo.Sch_BookingVo)cxl_Sch_Booking.getValue(context);
		}
		public void setSch_Booking(ims.scheduling.vo.Sch_BookingVo value)
		{
			cxl_Sch_Booking.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sch_Booking = null;
		public boolean getIsRebookApptSelectedIsNotNull()
		{
			return !cxl_IsRebookApptSelected.getValueIsNull(context);
		}
		public Boolean getIsRebookApptSelected()
		{
			return (Boolean)cxl_IsRebookApptSelected.getValue(context);
		}
		public void setIsRebookApptSelected(Boolean value)
		{
			cxl_IsRebookApptSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsRebookApptSelected = null;
		public boolean getSelectedApptTimesIsNotNull()
		{
			return !cxl_SelectedApptTimes.getValueIsNull(context);
		}
		public java.util.Map getSelectedApptTimes()
		{
			return (java.util.Map)cxl_SelectedApptTimes.getValue(context);
		}
		public void setSelectedApptTimes(java.util.Map value)
		{
			cxl_SelectedApptTimes.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedApptTimes = null;
		public boolean getMaxAvailableDurationIsNotNull()
		{
			return !cxl_MaxAvailableDuration.getValueIsNull(context);
		}
		public Integer getMaxAvailableDuration()
		{
			return (Integer)cxl_MaxAvailableDuration.getValue(context);
		}
		public void setMaxAvailableDuration(Integer value)
		{
			cxl_MaxAvailableDuration.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MaxAvailableDuration = null;
		public boolean getEnableFirstAvailableAppIsNotNull()
		{
			return !cxl_EnableFirstAvailableApp.getValueIsNull(context);
		}
		public Boolean getEnableFirstAvailableApp()
		{
			return (Boolean)cxl_EnableFirstAvailableApp.getValue(context);
		}
		public void setEnableFirstAvailableApp(Boolean value)
		{
			cxl_EnableFirstAvailableApp.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EnableFirstAvailableApp = null;
		public boolean getTransportRequiredIsNotNull()
		{
			return !cxl_TransportRequired.getValueIsNull(context);
		}
		public Boolean getTransportRequired()
		{
			return (Boolean)cxl_TransportRequired.getValue(context);
		}
		public void setTransportRequired(Boolean value)
		{
			cxl_TransportRequired.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TransportRequired = null;
		public boolean getCareContextRefIsNotNull()
		{
			return !cxl_CareContextRef.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getCareContextRef()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_CareContextRef.getValue(context);
		}
		public void setCareContextRef(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CareContextRef' RefVo context variable.");
			if(value == null)
				cxl_CareContextRef.setValue(context, null);
			else
				cxl_CareContextRef.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CareContextRef = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[118];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-ID", "ID_Sch_Booking");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-BOOKINGCOMMENTS", "BookingComments");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-UBRN", "UBRN");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-REFERRERSDSID", "ReferrerSdsId");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-REFERRERSDSROLEID", "ReferrerSdsRoleId");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-REFERRERSDSORGID", "ReferrerSdsOrgId");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Scheduling.BookAppointment.__internal_x_context__CareContextRef_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
