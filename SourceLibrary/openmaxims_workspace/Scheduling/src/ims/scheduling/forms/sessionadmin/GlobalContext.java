//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.forms.sessionadmin;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		ChooseAndBook = new ChooseAndBookContext(context);
		Scheduling = new SchedulingContext(context);
		RefMan = new RefManContext(context);
		Core = new CoreContext(context);
	}
	public final class ChooseAndBookContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private ChooseAndBookContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getisCancelSlotAndApptAvailableIsNotNull()
		{
			return !cx_ChooseAndBookisCancelSlotAndApptAvailable.getValueIsNull(context);
		}
		public Boolean getisCancelSlotAndApptAvailable()
		{
			return (Boolean)cx_ChooseAndBookisCancelSlotAndApptAvailable.getValue(context);
		}
		public void setisCancelSlotAndApptAvailable(Boolean value)
		{
			cx_ChooseAndBookisCancelSlotAndApptAvailable.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ChooseAndBookisCancelSlotAndApptAvailable = new ims.framework.ContextVariable("ChooseAndBook.isCancelSlotAndApptAvailable", "_cv_ChooseAndBook.isCancelSlotAndApptAvailable");
		public boolean getSessionSlotStatusReasonIsNotNull()
		{
			return !cx_ChooseAndBookSessionSlotStatusReason.getValueIsNull(context);
		}
		public ims.scheduling.vo.lookups.Status_Reason getSessionSlotStatusReason()
		{
			return (ims.scheduling.vo.lookups.Status_Reason)cx_ChooseAndBookSessionSlotStatusReason.getValue(context);
		}
		public void setSessionSlotStatusReason(ims.scheduling.vo.lookups.Status_Reason value)
		{
			cx_ChooseAndBookSessionSlotStatusReason.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ChooseAndBookSessionSlotStatusReason = new ims.framework.ContextVariable("ChooseAndBook.SessionSlotStatusReason", "_cv_ChooseAndBook.SessionSlotStatusReason");
		public boolean getSessionSlotStatusIsNotNull()
		{
			return !cx_ChooseAndBookSessionSlotStatus.getValueIsNull(context);
		}
		public ims.scheduling.vo.lookups.Status_Reason getSessionSlotStatus()
		{
			return (ims.scheduling.vo.lookups.Status_Reason)cx_ChooseAndBookSessionSlotStatus.getValue(context);
		}
		public void setSessionSlotStatus(ims.scheduling.vo.lookups.Status_Reason value)
		{
			cx_ChooseAndBookSessionSlotStatus.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_ChooseAndBookSessionSlotStatus = new ims.framework.ContextVariable("ChooseAndBook.SessionSlotStatus", "_cv_ChooseAndBook.SessionSlotStatus");

		private ims.framework.Context context;
	}
	public final class SchedulingContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private SchedulingContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getApptCancelStatusIsNotNull()
		{
			return !cx_SchedulingApptCancelStatus.getValueIsNull(context);
		}
		public ims.scheduling.vo.Appointment_StatusVo getApptCancelStatus()
		{
			return (ims.scheduling.vo.Appointment_StatusVo)cx_SchedulingApptCancelStatus.getValue(context);
		}
		public void setApptCancelStatus(ims.scheduling.vo.Appointment_StatusVo value)
		{
			cx_SchedulingApptCancelStatus.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingApptCancelStatus = new ims.framework.ContextVariable("Scheduling.ApptCancelStatus", "_cv_Scheduling.ApptCancelStatus");
		public boolean getTheatreSessionIsNotNull()
		{
			return !cx_SchedulingTheatreSession.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_SessionRefVo getTheatreSession()
		{
			return (ims.scheduling.vo.Sch_SessionRefVo)cx_SchedulingTheatreSession.getValue(context);
		}
		public void setTheatreSession(ims.scheduling.vo.Sch_SessionRefVo value)
		{
			cx_SchedulingTheatreSession.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_SchedulingTheatreSession = new ims.framework.ContextVariable("Scheduling.TheatreSession", "_cv_Scheduling.TheatreSession");

		private ims.framework.Context context;
	}
	public final class RefManContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private RefManContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getReferralContractTypeForPatientIsNotNull()
		{
			return !cx_RefManReferralContractTypeForPatient.getValueIsNull(context);
		}
		public ims.core.vo.lookups.ReferralManagementContractType getReferralContractTypeForPatient()
		{
			return (ims.core.vo.lookups.ReferralManagementContractType)cx_RefManReferralContractTypeForPatient.getValue(context);
		}
		public void setReferralContractTypeForPatient(ims.core.vo.lookups.ReferralManagementContractType value)
		{
			cx_RefManReferralContractTypeForPatient.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_RefManReferralContractTypeForPatient = new ims.framework.ContextVariable("RefMan.ReferralContractTypeForPatient", "_cvp_RefMan.ReferralContractTypeForPatient");

		private ims.framework.Context context;
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

		}

		public boolean getCommentDialogStringIsNotNull()
		{
			return !cx_CoreCommentDialogString.getValueIsNull(context);
		}
		public String getCommentDialogString()
		{
			return (String)cx_CoreCommentDialogString.getValue(context);
		}
		public void setCommentDialogString(String value)
		{
			cx_CoreCommentDialogString.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreCommentDialogString = new ims.framework.ContextVariable("Core.CommentDialogString", "_cv_Core.CommentDialogString");

		private ims.framework.Context context;
	}

	public ChooseAndBookContext ChooseAndBook;
	public SchedulingContext Scheduling;
	public RefManContext RefMan;
	public CoreContext Core;
}
