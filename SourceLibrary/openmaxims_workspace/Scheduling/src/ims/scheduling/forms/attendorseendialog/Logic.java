//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3358.22649)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.attendorseendialog;

import java.util.ArrayList;
import java.util.List;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Booking_AppointmentShortVo;
import ims.scheduling.vo.lookups.Status_Reason;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.tim1().setValue(new Time());
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getGlobalContext().Scheduling.getBookingAppointment() == null)
			throw new CodingRuntimeException("form.getGlobalContext().Scheduling.getBookingAppointment() is null in method onBtnSaveClick");
		
		Status_Reason status = form.getGlobalContext().Scheduling.getBookingAppointment().getApptStatus();
		
		Booking_AppointmentShortVo voAppt = domain.getBookingAppointmentShort(form.getGlobalContext().Scheduling.getBookingAppointment());
		if(voAppt == null)
			return;
		
		//WDEV-12568
		if(form.getGlobalContext().Scheduling.getBookingAppointment().getVersion_Booking_Appointment() != voAppt.getVersion_Booking_Appointment())
		{
			//simulate SOE
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
			return;
		}
		
			
		voAppt.setApptStatus(status);
		if(status.equals(Status_Reason.SEEN))
		{	
			//WDEV-18480
			voAppt.setSeenBy((HcpLiteVo) domain.getHcpLiteUser());
			voAppt.setSeenTime(form.tim1().getValue());
		}	
		else if(status.equals(Status_Reason.ARRIVAL))
			voAppt.setArrivalTime(form.tim1().getValue());

		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voAppt.getAppointmentDate());
		voStatus.setApptTime(voAppt.getApptStartTime());
		voStatus.setStatus(status);
		
		Appointment_StatusVoCollection voCollStatusHistory = voAppt.getApptStatusHistory();
		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();
		
		voCollStatusHistory.add(voStatus);
		voAppt.setCurrentStatusRecord(voStatus); 
		voAppt.setApptStatusHistory(voCollStatusHistory);
		
		String[] arrErrors = voAppt.validate(getUIValidationErrors());
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}	
		
		try
		{
			domain.saveBookingAppt(voAppt);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.CANCEL);
		}
		
		engine.close(DialogResult.OK);
	}
	private String[] getUIValidationErrors()
	{
		List<String> errors = new ArrayList<String>();
		
		if(form.tim1().getValue() == null)
			errors.add("Time is mandatory");
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
