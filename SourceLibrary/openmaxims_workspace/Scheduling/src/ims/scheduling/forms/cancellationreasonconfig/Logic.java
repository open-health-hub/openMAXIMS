//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.62 build 3084.20071)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.cancellationreasonconfig;

import java.util.ArrayList;

import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.scheduling.vo.CancellationTypeReasonVo;
import ims.scheduling.vo.CancellationTypeReasonVoCollection;
import ims.scheduling.vo.lookups.CancelAppointmentReason;
import ims.scheduling.vo.lookups.CancelAppointmentReasonCollection;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.Status_ReasonCollection;
import ims.scheduling.vo.lookups.LookupHelper;
import ims.vo.LookupInstVo;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initalise();
		populateCancellationTypeGrid();
		populateCancellationReasonGrid();
		open();
	}

	private void initalise()
	{		
		form.getContextMenus().hideAllGenericGridMenuItems();
	}

	private void populateCancellationReasonGrid()
	{
		form.grdCancellationReasons().getRows().clear();
		CancelAppointmentReasonCollection cancelAppReasonColl = LookupHelper.getCancelAppointmentReason(domain.getLookupService());

		for (int i = 0; i < cancelAppReasonColl.size(); i++)
		{
			GenForm.grdCancellationReasonsRow row = form.grdCancellationReasons().getRows().newRow();
			row.setValue(cancelAppReasonColl.get(i));
			row.setcolCancellationReason(cancelAppReasonColl.get(i).getText());
		}
	}

	private void populateCancellationTypeGrid()
	{
		form.grdCancellationType().getRows().clear();
		Status_ReasonCollection cancellationTypeCollection = LookupHelper.getStatus_Reason(domain.getLookupService());

		for (int i = 0; i < cancellationTypeCollection.size(); i++)
		{
			Status_Reason status_reason = cancellationTypeCollection.get(i);
			if (status_reason.equals(Status_Reason.CANCELLED))
			{
				Status_Reason reason = status_reason;
				ArrayList<LookupInstVo> reasonInstances = reason.getChildInstances();
				for (int j = 0; j < reason.getChildInstances().size(); j++)
				{
					LookupInstVo reasonInstance = reasonInstances.get(j);

					if (reasonInstance.equals(Status_Reason.HOSPITALCANCELLED) || reasonInstance.equals(Status_Reason.PATIENTCANCELLED))
					{
						GenForm.grdCancellationTypeRow row = form.grdCancellationType().getRows().newRow();
						row.setValue((Status_Reason) reasonInstance);
						row.setcolCancellationType(reasonInstance.getText());
					}
				}

			}

		}

	}

	private void open()
	{
		if(form.grdCancellationType().getSelectedRow()==null)			
			form.btnEdit().setEnabled(false);
		else
		{
			form.btnEdit().setEnabled(true);
			form.getContextMenus().getGenericGridUpdateItem().setVisible(true);				//wdev-10739
		}
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearReasonSettings();
		open();
		listCancellationReasons(form.grdCancellationType().getValue());
		form.btnEdit().setEnabled(true);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
	}

	private void clearReasonSettings()
	{
		for (int i = 0; i < form.grdCancellationReasons().getRows().size(); i++)
		{
			GenForm.grdCancellationReasonsRow row = form.grdCancellationReasons().getRows().get(i);
			row.setcolSelected(false);
		}

	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{

		CancellationTypeReasonVoCollection typeReasonCol = new CancellationTypeReasonVoCollection();

		for (int i = 0; i < form.grdCancellationReasons().getRows().size(); i++)
		{
			GenForm.grdCancellationReasonsRow row = form.grdCancellationReasons().getRows().get(i);

			if (row.getcolSelected())
			{
				CancellationTypeReasonVo cancelTypeReason = new CancellationTypeReasonVo();

				cancelTypeReason.setCancellationType(form.grdCancellationType().getValue());
				cancelTypeReason.setCancellationReason(row.getValue());
				typeReasonCol.add(cancelTypeReason);
			}

		}

		String[] error = typeReasonCol.validate();

		if (error != null)
		{
			engine.showErrors(error);
			return;
		}

		try
		{
			domain.saveCancellationTypeReasons(typeReasonCol, form.grdCancellationType().getValue());

		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage("There are data items in the system referencing this item");
			open();
			return;
		}
		open();

	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.btnEdit().setEnabled(false);
		form.getContextMenus().hideAllGenericGridMenuItems();
		
	}

	@Override
	protected void onGrdCancellationTypeChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnEdit().setEnabled(true);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(true);
		form.getContextMenus().getGenericGridUpdateItem().setEnabled(true);
		
		clearReasonSettings();
		listCancellationReasons(form.grdCancellationType().getValue());

	}

	private void listCancellationReasons(Status_Reason value)
	{
		CancellationTypeReasonVoCollection cancelTypeReasonVo = domain.listCancelationTypeReason(value);
		if (cancelTypeReasonVo == null)
			return;
		for (int i = 0; i < cancelTypeReasonVo.size(); i++)
		{
			CancellationTypeReasonVo typeReason = cancelTypeReasonVo.get(i);
			GenForm.grdCancellationReasonsRow row = form.grdCancellationReasons().getRowByValue(typeReason.getCancellationReason());
			if (row != null)
				row.setcolSelected(true);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		
		if(sender.equals(form.grdCancellationType()))
			
			switch(menuItemID)
			{
				case GenForm.ContextMenus.GenericGrid.Update:
					onBtnEditClick();
					
					break;
			}
		
		
		
	}
}
