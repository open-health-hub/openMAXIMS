//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3100.30141)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.scheduling.forms.exclusiondates;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.Date;
import ims.scheduling.forms.exclusiondates.GenForm.grdDatesRow;
import ims.scheduling.vo.ExclusionDatesVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	private void open()
	{
		form.setMode(FormMode.VIEW);
		form.grdDates().getRows().clear();
		
		ExclusionDatesVo voExDates = domain.listExclusionDates();
		form.getLocalContext().setExclusionDate(voExDates);
		
		if(voExDates != null)
		{
			for(int i=0;i<voExDates.getDates().length;i++)
			{
				grdDatesRow dRow = form.grdDates().getRows().newRow();
				dRow.setColDate(voExDates.getDates()[i]);
			}
		}
	}

	protected void onGrdDatesSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getContextMenus().Scheduling.getExclusionDatesREMOVEItem().setVisible(false);
		if(form.getMode().equals(FormMode.EDIT))
			form.getContextMenus().Scheduling.getExclusionDatesREMOVEItem().setVisible(form.grdDates().getSelectedRow() != null);
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.getContextMenus().Scheduling.getExclusionDatesADDItem().setVisible(true);
		form.getContextMenus().Scheduling.getExclusionDatesREMOVEItem().setVisible(form.grdDates().getSelectedRow() != null);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		ExclusionDatesVo voExDate = form.getLocalContext().getExclusionDate();
		if(voExDate == null)
			voExDate = new ExclusionDatesVo();
		
		removeBlankRows();
		
		int size = form.grdDates().getRows().size();
		voExDate.setDates(new Date[size]);
		
		for(int i=0;i<form.grdDates().getRows().size();i++)
			voExDate.getDates()[i] = form.grdDates().getRows().get(i).getColDate();

		if(!isValidDates(voExDate))
			return;
		
		try
		{
			domain.saveExclusionDates(voExDate);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		open();
	}
	
	private void removeBlankRows()
	{
		for(int i=form.grdDates().getRows().size(); i>0; i--)
		{
			if(form.grdDates().getRows().get(i-1).getColDate() == null)
				form.grdDates().getRows().remove(i-1);
		}	
	}

	private boolean isValidDates(ExclusionDatesVo voExDate)
	{
		if(voExDate == null)
			throw new CodingRuntimeException("vo not populated before isValidDates method was called");
		
		if(voExDate.getDates() == null || voExDate.getDates().length == 0)
		{
			engine.showErrors(new String[] {"At least one date is mandatory"});
			return false;
		}		

		return true;
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.ExclusionDates.ADD:
				grdDatesRow row = form.grdDates().getRows().newRow();
				row.setColDateReadOnly(false);
				break;
			case GenForm.ContextMenus.SchedulingNamespace.ExclusionDates.REMOVE:
				form.grdDates().removeSelectedRow();
				form.getContextMenus().Scheduling.getExclusionDatesREMOVEItem().setVisible(false);
				break;
		}
	}
	
	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.VIEW))
			form.getContextMenus().Scheduling.hideAllExclusionDatesMenuItems();
	}
}
