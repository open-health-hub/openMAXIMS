//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.80 build 3995.22787)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.icp.domain.impl;

import java.util.Date;
import java.util.List;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.PatientDocumentForICPReportsVoCollection;
import ims.core.vo.domain.PatientDocumentForICPReportsVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.icp.domain.base.impl.BaseICPReportsImpl;
import ims.icp.forms.icpreports.Logic.Types;
import ims.icp.vo.ICPAssessmentVo;
import ims.icp.vo.ICPAssessmentVoCollection;
import ims.icps.instantiation.vo.PatientICPRefVo;

public class ICPReportsImpl extends BaseICPReportsImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* getReportAndTemplateByImsId
	*/
	@SuppressWarnings("rawtypes")
	public String[] getReportAndTemplateByImsId(Integer imsId) throws ims.domain.exceptions.DomainInterfaceException
	{
		String hql = "select r1_1.reportXml, t1_1.templateXml from ReportBo as r1_1 left join r1_1.templates as t1_1 where  (r1_1.imsId = :IMSID)  order by t1_1.name asc";
		DomainFactory factory = getDomainFactory();
		
		List list = factory.find(hql, new String[] {"IMSID"}, new Object[] {imsId});
		
		if(list != null && list.size() > 0)
		{
			String[] ret = new String[2];
			
			Object[] pair = (Object[]) list.get(0); 
			
			ret[0] = (String)pair[0];
			ret[1] = (String)pair[1];
			
			return ret;
		}
		
		return null;
	}

	@SuppressWarnings("rawtypes")
	public Boolean existsRecordsForType(PatientICPRefVo patientIcpRef, Object objType) throws ims.domain.exceptions.DomainInterfaceException
	{
		if(objType == null)
			throw new CodingRuntimeException("Parameter objType cannot be null !");

		if(patientIcpRef == null)
			throw new CodingRuntimeException("Parameter patientIcpRef cannot be null !");

		String hql;
		DomainFactory factory = getDomainFactory();
		List list;
		Integer careContextId = null;
		
		//get care context for selected patient ICP
		hql = "select p1_1.careContext.id from PatientICP as p1_1 where  (p1_1.id = :ID)";
		list = factory.find(hql, new String[] {"ID"}, new Object[] {patientIcpRef.getID_PatientICP()});
		
		if(list != null && list.size() > 0)
		{
			careContextId = (Integer) list.get(0);
		}
		
		if(careContextId == null)
			throw new ims.domain.exceptions.DomainInterfaceException("The selected PatientICP record has a null careContext (" + patientIcpRef.getID_PatientICP() + ")");
		
		if(Types.PMH_CHECLKIST.equals(objType))
		{
			hql = "select count (p1_1.careContext) from PatientPMHChecklist as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
			
		}
		else if(Types.CLINICAL_OUTCOME.equals(objType)||Types.SOP_NOTES.equals(objType))
		{
			hql = "select count (p1_1.careContext) from CatsReferral as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
			
		}
		else if(Types.MEDICATION.equals(objType))
		{
			hql = "select count (p1_1.careContext) from PatientMedication as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
			
		}		
		else if(Types.ORDERED_INVESTIGATIONS.equals(objType))
		{
			//get the ICP date first
			java.util.Date icpDate = getIcpDate(patientIcpRef);
			
			hql = "select count (o1_1.id) from OrderSpecimen as o1_1 join o1_1.order as o2_1 where (o2_1.systemInformation.creationDateTime between :DATE1 and :DATE2 and o2_1.patient.id in (select picp.patient.id from PatientICP as picp where  (picp.id = :ID) ))";
			list = factory.find(hql, new String[] {"DATE1", "DATE2", "ID"}, new Object[] {icpDate, new Date(), patientIcpRef.getID_PatientICP()});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
			
		}		
		else if(Types.RESULTED_INVESTIGATIONS.equals(objType))
		{
			//get the ICP date first
			java.util.Date icpDate = getIcpDate(patientIcpRef);
			
			hql = "select count (o1_1.id) from OrderInvestigation as o1_1 left join o1_1.orderDetails as o2_1 where (o1_1.pathResultDetails is not null and o2_1.patient.id in (select picp.patient.id from PatientICP as picp where  (picp.id = :ID)) and o2_1.systemInformation.creationDateTime between :DATE1 and :DATE2) ";
			list = factory.find(hql, new String[] {"ID", "DATE1", "DATE2"}, new Object[] {patientIcpRef.getID_PatientICP(), icpDate, new Date()});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.PATIENT_ASSESSMENTS.equals(objType))
		{
			hql = "select count (p1_1.id) from PatientAssessment as p1_1 where (p1_1.careContext.id = :CCID) ";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.SOCIAL_HISTORY.equals(objType))
		{
			hql = "select count (p1_1.careContext) from SocialHistory as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.BASELINE_OBSERVATIONS.equals(objType))
		{
			hql = "select count (p1_1.careContext) from VitalSigns as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.URINALYSIS.equals(objType))
		{
			hql = "select count (p1_1.careContext) from Urinalysis as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.WATERLOW_ASSESSMENTS.equals(objType))
		{
			hql = "select count (p1_1.careContext) from Waterlow as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.SUITABLE_FOR_SURGERY.equals(objType))
		{
			hql = "select count (p1_1.careContext) from SuitableForSurgeryAssessment as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.FIT_FOR_SURGERY.equals(objType))
		{
			hql = "select count (p1_1.careContext) from FitForSurgeryAssesment as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.PROC_INTRAOP_CARE_RECORD.equals(objType))
		{
			hql = "select count (p1_1.careContext) from IntraOperativeCareRecord as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.APPOINTMENTS.equals(objType))
		{
			hql = "select count (b1_1.id) from PatientICP as p1_1 join p1_1.appointments as b1_1 where (p1_1.id = :ID)";

			list = factory.find(hql, new String[] {"ID"}, new Object[] {patientIcpRef.getID_PatientICP()});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.DIAGNOSIS.equals(objType))
		{
			hql = "select count (p1_1.careContext) from PatientDiagnosis as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.PATIENT_PROBLEMS.equals(objType))
		{
			hql = "select count (p1_1.careContext) from PatientProblem as p1_1 where (p1_1.careContext.id = :CCID)";

			list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.CRITICAL_EVENTS.equals(objType))
		{
			hql = "select count (p1_1.id) from PatientICP as p1_1 join p1_1.criticalEvents as p2_1 where (p1_1.id = :ID)";

			list = factory.find(hql, new String[] {"ID"}, new Object[] {patientIcpRef.getID_PatientICP()});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		
		else if(Types.EVALUATION_NOTES.equals(objType))
		{
			hql = "select count (p1_1.id) from PatientICP as p1_1 join p1_1.evaluationNotes as p2_1 where (p1_1.id = :ID) ";

			list = factory.find(hql, new String[] {"ID"}, new Object[] {patientIcpRef.getID_PatientICP()});
			
			if(list != null && list.size() > 0)
			{
				if(list.get(0) instanceof Integer || list.get(0) instanceof Long)
				{
					String val = list.get(0).toString();
					
					if(val.equals("0"))
						return Boolean.FALSE;
					
					return Boolean.TRUE;
				}
			}
		}		

		return false;
	}

	@SuppressWarnings("rawtypes")
	private Date getIcpDate(PatientICPRefVo patientIcpRef)
	{
		java.util.Date icpDate = null;
		DomainFactory factory = getDomainFactory();
		
		String hql = "select p1_1.startedDateTime from PatientICP as p1_1 where p1_1.id = :ID";
		List list = factory.find(hql, new String[] {"ID"}, new Object[] {patientIcpRef.getID_PatientICP()});
		
		if(list != null && list.size() > 0)
		{
			if(list.get(0) instanceof java.util.Date)
			{
				icpDate = (Date) list.get(0);
			
				return icpDate;
			}
		}
		
		return icpDate;
	}

	@SuppressWarnings("rawtypes")
	public CareContextRefVo getCareContext(PatientICPRefVo patientIcpRef) throws DomainInterfaceException
	{
		if(patientIcpRef == null)
			throw new CodingRuntimeException("Parameter patientIcpRef cannot be null !");
		
		//get care context for selected patient ICP
		DomainFactory factory = getDomainFactory();
		String hql = "select p1_1.careContext.id from PatientICP as p1_1 where  (p1_1.id = :ID)";

		List list = factory.find(hql, new String[] {"ID"}, new Object[] {patientIcpRef.getID_PatientICP()});
		
		if(list != null && list.size() > 0)
		{
			return new CareContextRefVo((Integer)list.get(0), 0);
		}
		
		return null;
	}

	@SuppressWarnings("rawtypes")
	public PatientDocumentForICPReportsVoCollection getPatientDocuments(PatientICPRefVo patientICPRef) 
	{
		if(patientICPRef == null || !patientICPRef.getID_PatientICPIsNotNull())
			throw new CodingRuntimeException("Parameter patientIcpRef cannot be null !");
		
		Integer careContextId = null;
		DomainFactory factory = getDomainFactory();
		
		String hql = "select p1_1.careContext.id from PatientICP as p1_1 where  (p1_1.id = :ID)";

		List list = factory.find(hql, new String[] {"ID"}, new Object[] {patientICPRef.getID_PatientICP()});
		
		if(list != null && list.size() > 0)
		{
			careContextId = (Integer)list.get(0);
		}
		
		if(careContextId == null)
		{
			//it should never get here as every patientICP has a care context
			System.out.println("Could not get careContext for patientICP " + patientICPRef.getID_PatientICP());
		}
		
		hql = "select pdoc from CatsReferral as cats join cats.referralDocuments as pdoc where (cats.careContext.id = :CCID)";
		list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContextId});		
		return PatientDocumentForICPReportsVoAssembler.createPatientDocumentForICPReportsVoCollectionFromPatientDocument(list);
	}

	@SuppressWarnings("rawtypes")
	public Integer[] listOrderSpecimens(PatientICPRefVo patientIcpRef) throws DomainInterfaceException
	{
		if(patientIcpRef == null)
			throw new CodingRuntimeException("Parameter patientIcpRef cannot be null !");
		
		//get care context for selected patient ICP
		DomainFactory factory = getDomainFactory();
		
		//get the ICP date first
		java.util.Date icpDate = getIcpDate(patientIcpRef);
		
		String hql = "select distinct o1_1.id from OrderSpecimen as o1_1 join o1_1.order as o2_1 where (o2_1.systemInformation.creationDateTime between :DATE1 and :DATE2 and o2_1.patient.id in (select picp.patient.id from PatientICP as picp where  (picp.id = :ID) ))";
		List list = factory.find(hql, new String[] {"DATE1", "DATE2", "ID"}, new Object[] {icpDate, new Date(), patientIcpRef.getID_PatientICP()});
		
		if(list != null && list.size() > 0)
		{
			Integer[] ret = new Integer[list.size()];
			
			for (int i = 0; i < list.size(); i++)
			{
				ret[i] = (Integer) list.get(i);
			}
			
			return ret;
		}

		return null;
	}

	@SuppressWarnings("rawtypes")
	public Integer[] listOrderInvestigations(PatientICPRefVo patientIcpRef) throws DomainInterfaceException
	{
		if(patientIcpRef == null)
			throw new CodingRuntimeException("Parameter patientIcpRef cannot be null !");
		
		//get care context for selected patient ICP
		DomainFactory factory = getDomainFactory();
		
		//get the ICP date first
		java.util.Date icpDate = getIcpDate(patientIcpRef);
		
		String hql = "select distinct o1_1.id from OrderInvestigation as o1_1 left join o1_1.orderDetails as o2_1 where (o1_1.pathResultDetails is not null and o2_1.patient.id in (select picp.patient.id from PatientICP as picp where  (picp.id = :ID)) and o2_1.systemInformation.creationDateTime between :DATE1 and :DATE2) ";
		List list = factory.find(hql, new String[] {"ID", "DATE1", "DATE2"}, new Object[] {patientIcpRef.getID_PatientICP(), icpDate, new Date()});
		
		if(list != null && list.size() > 0)
		{
			Integer[] ret = new Integer[list.size()];
			
			for (int i = 0; i < list.size(); i++)
			{
				ret[i] = (Integer) list.get(i);
			}
			
			return ret;
		}

		return null;
	}

	public ICPAssessmentVoCollection listPatientAssessments(PatientICPRefVo patientIcpRef) throws DomainInterfaceException
	{
		if(patientIcpRef == null)
			throw new CodingRuntimeException("Parameter patientIcpRef cannot be null !");
		
		DomainFactory factory = getDomainFactory();
		
		CareContextRefVo careContext = getCareContext(patientIcpRef);
		
		String hql = "select p1_1.id, u1_1.assessmentType.id from PatientAssessment as p1_1 left join p1_1.assessmentData as p2_1 left join p2_1.userAssessment as u1_1 where (p1_1.careContext.id = :CCID) order by p1_1.id asc ";
		List<?> list = factory.find(hql, new String[] {"CCID"}, new Object[] {careContext.getID_CareContext()});

		if(list != null && list.size() > 0)
		{
			ICPAssessmentVoCollection coll = new ICPAssessmentVoCollection();
			
			for (int i = 0; i < list.size(); i++)
			{
				Object[] listItem = (Object[]) list.get(i);
				
				ICPAssessmentVo item = new ICPAssessmentVo();
				
				item.setPatientAssessmentId((Integer) listItem[0]);
				item.setAssessmentType((Integer) listItem[1]);
				
				coll.add(item);
			}
			
			return coll;
		}
		
		return null;
	}

	public String[] listPrinters(Integer locationId) throws DomainInterfaceException
	{
		if(locationId == null)
			throw new CodingRuntimeException("Parameter locationId cannot be null !");
		
		DomainFactory factory = getDomainFactory();
		
		String hql = "select p1_1.name from Location as l1_1 join l1_1.printers as p1_1 where  l1_1.id = :ID and l1_1.isRIE is null order by p1_1.name ";
		List<?> list = factory.find(hql, new String[] {"ID"}, new Object[] {locationId});

		if(list != null && list.size() > 0)
		{
			String[] ret = new String[list.size()];
			
			for (int i = 0; i < list.size(); i++)
			{
				ret[i] = list.get(i).toString();
			}
			
			return ret;
		}
		
		return null;
	}

}
