//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.70 build 3434.21163)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.icp.domain.impl;

import ims.assessment.configuration.domain.objects.GraphicAssessment;
import ims.assessment.configuration.domain.objects.UserAssessment;
import ims.assessment.configuration.vo.GraphicAssessmentRefVo;
import ims.assessment.configuration.vo.UserAssessmentRefVo;
import ims.assessment.domain.DynamicAssessments;
import ims.assessment.domain.impl.DynamicAssessmentsImpl;
import ims.assessment.instantiation.domain.objects.PatientAssessment;
import ims.assessment.instantiation.domain.objects.PatientGraphicAssessment;
import ims.assessment.instantiation.vo.PatientAssessmentRefVo;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentListVo;
import ims.assessment.vo.PatientAssessmentListVoCollection;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentVo;
import ims.assessment.vo.domain.GraphicAssessmentVoAssembler;
import ims.assessment.vo.domain.PatientAssessmentListVoAssembler;
import ims.assessment.vo.domain.PatientAssessmentVoAssembler;
import ims.assessment.vo.domain.UserAssessmentVoAssembler;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.domain.CatsReferralVoAssembler;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.helper.DrawingControlReportHelper;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.HcpAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffLiteVoAssembler;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.HcpDisTypeCollection;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserDefinedAssessmentType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.icp.domain.base.impl.BasePatientICPImpl;
import ims.icp.vo.ICPActionShortVo;
import ims.icp.vo.ICPActionViewVo;
import ims.icp.vo.ICPConfigurationDisplayVo;
import ims.icp.vo.ICPFullVo;
import ims.icp.vo.ICPLiteVo;
import ims.icp.vo.ICPPhaseFullVo;
import ims.icp.vo.ICPPhaseViewVo;
import ims.icp.vo.ICPStageFullVo;
import ims.icp.vo.ICPStageViewVo;
import ims.icp.vo.PatientICPActionFullVo;
import ims.icp.vo.PatientICPActionFullVoCollection;
import ims.icp.vo.PatientICPActionLiteVo;
import ims.icp.vo.PatientICPActionLiteVoCollection;
import ims.icp.vo.PatientICPActionStatusVo;
import ims.icp.vo.PatientICPActionStatusVoCollection;
import ims.icp.vo.PatientICPActionViewVo;
import ims.icp.vo.PatientICPActionViewVoCollection;
import ims.icp.vo.PatientICPFullVo;
import ims.icp.vo.PatientICPPhaseStatusVo;
import ims.icp.vo.PatientICPPhaseStatusVoCollection;
import ims.icp.vo.PatientICPPhaseViewVo;
import ims.icp.vo.PatientICPPhaseViewVoCollection;
import ims.icp.vo.PatientICPPhasesFullVo;
import ims.icp.vo.PatientICPPhasesFullVoCollection;
import ims.icp.vo.PatientICPShortVo;
import ims.icp.vo.PatientICPStageStatusVo;
import ims.icp.vo.PatientICPStageStatusVoCollection;
import ims.icp.vo.PatientICPStageViewVo;
import ims.icp.vo.PatientICPStageViewVoCollection;
import ims.icp.vo.PatientICPStagesFullVo;
import ims.icp.vo.PatientICPStagesFullVoCollection;
import ims.icp.vo.PatientICPViewVo;
import ims.icp.vo.domain.ICPConfigurationDisplayVoAssembler;
import ims.icp.vo.domain.ICPFullVoAssembler;
import ims.icp.vo.domain.ICPLiteVoAssembler;
import ims.icp.vo.domain.IcpPhaseGoalVoAssembler;
import ims.icp.vo.domain.PatientCriticalEventsVoAssembler;
import ims.icp.vo.domain.PatientICPActionFullVoAssembler;
import ims.icp.vo.domain.PatientICPActionLiteVoAssembler;
import ims.icp.vo.domain.PatientICPActionStatusVoAssembler;
import ims.icp.vo.domain.PatientICPEvaluationNoteVoAssembler;
import ims.icp.vo.domain.PatientICPFullVoAssembler;
import ims.icp.vo.domain.PatientICPShortVoAssembler;
import ims.icp.vo.lookups.ICPActionStatus;
import ims.icp.vo.lookups.ICPPhaseStatus;
import ims.icp.vo.lookups.ICPStageStatus;
import ims.icp.vo.lookups.LookupHelper;
import ims.icps.configuration.domain.objects.ICP;
import ims.icps.configuration.vo.ICPRefVo;
import ims.icps.instantiation.domain.objects.PatientICP;
import ims.icps.instantiation.domain.objects.PatientICPAction;
import ims.icps.instantiation.domain.objects.PatientICPPhase;
import ims.icps.instantiation.domain.objects.PatientICPStage;
import ims.icps.instantiation.vo.PatientICPActionRefVo;
import ims.icps.instantiation.vo.PatientICPRefVo;
import ims.vo.ValueObject;
import ims.vo.ValueObjectRef;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class PatientICPImpl extends BasePatientICPImpl
{
	
	private static final long serialVersionUID = 1L;
	
	private static final int PROC_INDEX = 0;
	private static final int CARECONTEXT_INDEX = 1;
	private static final int CARESPELL_INDEX = 2;
	private static final int PATIENT_INDEX = 3;
	private static final int AUTH_DT_INDEX = 4;
	private static final int AUTH_HCP_INDEX = 5;

	/**
	* createPatientICP() will be kicked off by a rule
	 * @throws StaleObjectException 
	*/
	@SuppressWarnings("unchecked")
	public void createPatientICP(ims.core.clinical.vo.PatientProcedureRefVo patProc) throws StaleObjectException
	{
		boolean hasAdminActions = false;
		boolean hasNursingActions = false;
		boolean hasClinicalActions = false;
		boolean hasPhisioActions = false;
		
		PatientICPFullVo patICP = new PatientICPFullVo();
		
		DomainFactory factory = getDomainFactory();
		
		//get the procedure from PatientProcedureRefVo
		List procList = factory.find("select p1_1.procedure.id, p1_1.careContext.id, e1_1.careSpell.id, c2_1.patient.id, p1_1.authoringInformation.authoringDateTime, h1_1 from PatientProcedure as p1_1 left join p1_1.careContext as c1_1 left join c1_1.episodeOfCare as e1_1 left join e1_1.careSpell as c2_1 left join p1_1.authoringInformation.authoringHcp as h1_1 where p1_1.id = :ID", new String[] {"ID"}, new Object[] {patProc.getBoId()});
		
		if(procList == null || procList.size() == 0)
			throw new CodingRuntimeException("Can't get procedure from PatientProcedure ref vo !");

		Object[] procInfo = (Object[]) procList.get(0);
		
		List icpList = factory.find("from ICP as i1_1 where (i1_1.procedure.id = :PROC and i1_1.status.id = :STATUS)", new String[] {"PROC", "STATUS"}, new Object[] {procInfo[PROC_INDEX], PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if(icpList == null || icpList.size() == 0)
			return;
		
		ICPFullVo icp = ICPFullVoAssembler.create((ICP) icpList.get(0));
		
		AuthoringInformationVo auth = new AuthoringInformationVo();
		auth.setAuthoringDateTime(procInfo[AUTH_DT_INDEX] == null ? null : new DateTime(new java.util.Date(((Timestamp)procInfo[AUTH_DT_INDEX]).getTime())));
		auth.setAuthoringHcp(procInfo[AUTH_HCP_INDEX] == null ? null : HcpLiteVoAssembler.create((Hcp) procInfo[AUTH_HCP_INDEX]));
		
		patICP.setPatient(new PatientRefVo((Integer)procInfo[PATIENT_INDEX], 0));
		patICP.setCareContext(new CareContextRefVo((Integer)procInfo[CARECONTEXT_INDEX], 0));
		patICP.setICP(icp);
		patICP.setAuthoringInformation(auth);
		patICP.setStartedDateTime(new DateTime());
		
		//stages
		PatientICPStagesFullVoCollection stages = new PatientICPStagesFullVoCollection();
		
		if(icp.getStages() != null)
		{
			for (int i = 0; i < icp.getStages().size(); i++)
			{
				ICPStageFullVo icpStage = icp.getStages().get(i);
				PatientICPStagesFullVo stage = new PatientICPStagesFullVo();
				
				stage.setICP(patICP);
				stage.setStage(icpStage);
				stage.setStatusHistory(new PatientICPStageStatusVoCollection());

				//stage's status
				PatientICPStageStatusVo statusStage = new PatientICPStageStatusVo();
				statusStage.setStatusDate(new DateTime());
				statusStage.setChangedBy(getSession().getUser().getUsername());
				if(Boolean.TRUE.equals(icpStage.getIsActivatedOnInitiation()))
					statusStage.setStatus(ICPStageStatus.OUTSTANDING);
				else
					statusStage.setStatus(ICPStageStatus.NOTINSCOPE);
				stage.setCurrentStatus(statusStage);
				stage.getStatusHistory().add(statusStage);
				stage.setPatient(new PatientRefVo((Integer)procInfo[PATIENT_INDEX], 0));
				stage.setCareContext(new CareContextRefVo((Integer)procInfo[CARECONTEXT_INDEX], 0));				
				
				//phases
				PatientICPPhasesFullVoCollection phases = new PatientICPPhasesFullVoCollection();

				if(icpStage.getPhases() != null)
				{
					for (int j = 0; j < icpStage.getPhases().size(); j++)
					{
						ICPPhaseFullVo icpPhase = icpStage.getPhases().get(j);
						
						PatientICPPhasesFullVo phase = new PatientICPPhasesFullVo();
						
						phase.setPatient(new PatientRefVo((Integer)procInfo[PATIENT_INDEX], 0));
						phase.setCareContext(new CareContextRefVo((Integer)procInfo[CARECONTEXT_INDEX], 0));
						phase.setPhase(icpPhase);
						phase.setParentStage(stage);
						phase.setStatusHistory(new PatientICPPhaseStatusVoCollection());
						phase.setICP(patICP);
						
						//phase's status
						PatientICPPhaseStatusVo statusPhase = new PatientICPPhaseStatusVo();
						statusPhase.setStatusDate(new DateTime());
						statusPhase.setChangedBy(getSession().getUser().getUsername());
						if(Boolean.TRUE.equals(icpPhase.getIsActivatedOnInitiation()))
							statusPhase.setStatus(ICPPhaseStatus.INPROGRESS);
						else
							statusPhase.setStatus(ICPPhaseStatus.NOTINSCOPE);
						
						phase.setCurrentStatus(statusPhase);
						phase.getStatusHistory().add(statusPhase);
						
						//phase's actions
						PatientICPActionFullVoCollection actions = new PatientICPActionFullVoCollection();
						
						if(icpPhase.getActions() != null)
						{
							for (ICPActionShortVo icpAction : icpPhase.getActions())
							{
								PatientICPActionFullVo action = new PatientICPActionFullVo();
								
								action.setPatient(new PatientRefVo((Integer)procInfo[PATIENT_INDEX], 0));
								action.setCareContext(new CareContextRefVo((Integer)procInfo[CARECONTEXT_INDEX], 0));
								action.setICP(patICP);
								action.setAction(icpAction);
								action.setParentPhase(phase);
								action.setStatusHistory(new PatientICPActionStatusVoCollection());
								
								//action's current status
								PatientICPActionStatusVo statusAction = new PatientICPActionStatusVo();
								statusAction.setStatusDate(new DateTime());
								statusAction.setChangedBy(getSession().getUser() != null ? MemberOfStaffLiteVoAssembler.create((MemberOfStaff) getDomainFactory().getDomainObject(MemberOfStaff.class, getSession().getUser().getMosId())) : null);
								if(Boolean.TRUE.equals(icpPhase.getIsActivatedOnInitiation()))
									statusAction.setStatus(ICPActionStatus.OUTSTANDING);
								else
									statusAction.setStatus(ICPActionStatus.NOTINSCOPE);
								
								action.setCurrentStatus(statusAction);
								action.getStatusHistory().add(statusAction);
								
								actions.add(action );

								if(HcpDisType.OTHER.equals(icpAction.getDiscipline()) && ICPActionStatus.OUTSTANDING.equals(statusAction.getStatus()))
									hasAdminActions = true;
								if(HcpDisType.MEDICAL.equals(icpAction.getDiscipline()) && ICPActionStatus.OUTSTANDING.equals(statusAction.getStatus()))
									hasClinicalActions = true;
								if(HcpDisType.NURSING.equals(icpAction.getDiscipline()) && ICPActionStatus.OUTSTANDING.equals(statusAction.getStatus()))
									hasNursingActions = true;
								if(HcpDisType.THERAPY.equals(icpAction.getDiscipline()) && ICPActionStatus.OUTSTANDING.equals(statusAction.getStatus()))
									hasPhisioActions = true;
								
							}
						}
						
						phase.setPhaseActions(actions);
						
						phases.add(phase);
					}
				}
				
				stage.setStagePhases(phases);
				
				stages.add(stage);
			}
		}
		
		patICP.setHasOutstandingAdminActions(hasAdminActions);
		patICP.setHasOutstandingClinicalActions(hasClinicalActions);
		patICP.setHasOutstandingNursingActions(hasNursingActions);
		patICP.setHasOutstandingPhysioActions(hasPhisioActions);
		
		patICP.setStages(stages );
		
		String[] err = patICP.validate();
		
		if(err != null && err.length > 0)
			throw new CodingRuntimeException("PatientICP value object not validated !");
		
		PatientICP bo = PatientICPFullVoAssembler.extractPatientICP(factory, patICP);
		
		factory.save(bo);

	}

	@SuppressWarnings("unchecked")
	public PatientICPActionLiteVoCollection listActions(PatientICPRefVo patientICPRef)
	{
		DomainFactory factory = getDomainFactory();
		
		List actions = factory.find("select p4_1 from PatientICP as p1_1 left join p1_1.stages as p2_1 left join p2_1.stagePhases as p3_1 left join p3_1.phaseActions as p4_1 left join p4_1.action as i1_1 left join i1_1.discipline as l1_1 left join p4_1.currentStatus as p5_1 left join p5_1.status as l2_1 where p1_1.id = :ID and l2_1.id in (-1753, -1754, -1755) and l1_1.id = (select hcp.hcpType.id from Hcp hcp where hcp.id = :HCPID)", new String[] {"ID", "HCPID"}, new Object[] {patientICPRef.getBoId(), getSession().getUser() != null && getSession().getUser().getHcpId() != null ? getSession().getUser().getHcpId() : new Integer(0)});
		
		return PatientICPActionLiteVoAssembler.createPatientICPActionLiteVoCollectionFromPatientICPAction(actions);
	}

	public void addActionStatus(PatientICPActionRefVo actionRef, ICPActionStatus status) throws DomainInterfaceException, StaleObjectException
	{
		if(actionRef == null || actionRef.getID_PatientICPAction() == null)
			throw new CodingRuntimeException("PatientICPActionRefVo is null or has a null ID !");
		
		DomainFactory factory = getDomainFactory();
		
		PatientICPAction actionBo = (PatientICPAction) factory.loadDomainObject(PatientICPAction.class, actionRef.getID_PatientICPAction());
		
		PatientICPActionFullVo actionVo = PatientICPActionFullVoAssembler.create(actionBo);
		
		PatientICPActionStatusVo actionStatusVo = new PatientICPActionStatusVo();
		
		actionStatusVo.setStatusDate(new DateTime());
		actionStatusVo.setChangedBy(getSession().getUser() != null ? MemberOfStaffLiteVoAssembler.create((MemberOfStaff) getDomainFactory().getDomainObject(MemberOfStaff.class, getSession().getUser().getMosId())) : null);
		actionStatusVo.setStatus(status);
		
		actionVo.setCurrentStatus(actionStatusVo);
		actionVo.getStatusHistory().add(actionStatusVo);
		
		factory.save(PatientICPActionFullVoAssembler.extractPatientICPAction(factory, actionVo));
	}

	public CareContextShortVo getCareContextShort(CareContextRefVo voCareContextRef)
	{
		DynamicAssessments impl = (DynamicAssessments) getDomainImpl(DynamicAssessmentsImpl.class);
		return impl.getCareContextShort(voCareContextRef);
	}

	public ClinicalContactShortVo getClinicalContactShort(ClinicalContactRefVo clinicacalContactRefVo)
	{
		DynamicAssessments impl = (DynamicAssessments) getDomainImpl(DynamicAssessmentsImpl.class);
		return impl.getClinicalContactShort(clinicacalContactRefVo);
	}

	//wdev-12215
	public GraphicAssessmentVo getGraphicalAssessment(GraphicAssessmentRefVo assessmentRef)
	{
		if(assessmentRef == null || assessmentRef.getID_GraphicAssessment() == null)
			throw new CodingRuntimeException("Invalid graphical assessment");
		
		return GraphicAssessmentVoAssembler.create((GraphicAssessment)getDomainFactory().getDomainObject(assessmentRef));
	}

	//wdev-12215
	public PatientAssessmentListVo getLastStructuredAssessment(UserDefinedAssessmentType type, CareContextRefVo careContext)
	{
		List list = getDomainFactory().find("from PatientAssessment as p1_1 where p1_1.assessmentData.userAssessment.assessmentType.id = :TYPE and p1_1.careContext.id = :CARE_CONTEXT order by p1_1.authoringInformation.authoringDateTime desc", new String[] {"TYPE", "CARE_CONTEXT"}, new Object[] {new Integer(type.getID()), careContext.getID_CareContext()});
		
		//Get only the first record (to optimise the work of the assembler)
		if(list != null && list.size() > 1)
		{
			Object firstItem = list.get(0);
			list.removeAll(list);
			list.add(firstItem);
		}
		
		PatientAssessmentListVoCollection voColl = PatientAssessmentListVoAssembler.createPatientAssessmentListVoCollectionFromPatientAssessment(list);
		if(voColl != null && voColl.size() > 0)
			return voColl.get(0);
			
		return null;
	}

	//wdev-12215
	public PatientAssessmentVo getPatientAssessment(ClinicalContactRefVo clinicalContact, UserAssessmentRefVo userAssessment)
	{
		if(clinicalContact == null || clinicalContact.getID_ClinicalContact() == null)
			throw new CodingRuntimeException("Invalid clinical contact");
		if(userAssessment == null || userAssessment.getID_UserAssessment() == null)
			throw new CodingRuntimeException("Invalid user assessment");
		
		DomainFactory factory = getDomainFactory();		
		StringBuffer hql = new StringBuffer();
		String query = " from PatientAssessment a ";
		ArrayList<String> markers= new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = " ";

		hql.append(andStr + " a.clinicalContact.id = :cc");
		markers.add("cc");
		values.add(clinicalContact.getID_ClinicalContact());
		andStr = " and ";
		
		hql.append(andStr + " a.assessmentData.userAssessment.id = :ua");
		markers.add("ua");
		values.add(userAssessment.getID_UserAssessment());
		
		if (markers.size() > 0) 
			query += " where ";
		query += hql.toString();	
		
		List result = factory.find(query, markers, values);
		if(result == null || result.size() > 1)
			throw new RuntimeException("More than one patient assessment found");
		else if (result.size() == 0)
			return null;
		
		return PatientAssessmentVoAssembler.create((PatientAssessment)result.get(0));
	}

	//wdev-12215
	public PatientAssessmentVo getPatientAssessment(PatientAssessmentRefVo patientAssessment)
	{
		if(patientAssessment == null || patientAssessment.getID_PatientAssessment() == null)
			throw new CodingRuntimeException("Invalid patient assessment");
		
		return PatientAssessmentVoAssembler.create((PatientAssessment)getDomainFactory().getDomainObject(patientAssessment));	
	}

	//wdev-12215
	public PatientAssessmentVo getPatientAssessment(ClinicalContactRefVo clinicalContact, GraphicAssessmentRefVo graphicAssessment)
	{
		if(clinicalContact == null || clinicalContact.getID_ClinicalContact() == null)
			throw new CodingRuntimeException("Invalid clinical contact");
		if(graphicAssessment == null || graphicAssessment.getID_GraphicAssessment() == null)
			throw new CodingRuntimeException("Invalid graphical assessment");
		
		DomainFactory factory = getDomainFactory();		
		StringBuffer hql = new StringBuffer();
		String query = " from PatientAssessment a ";
		ArrayList<String> markers= new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = " ";

		hql.append(andStr + " a.clinicalContact.id = :cc");
		markers.add("cc");
		values.add(clinicalContact.getID_ClinicalContact());
		andStr = " and ";
		
		hql.append(andStr + " a.assessmentData.graphic.id = :ga");
		markers.add("ga");
		values.add(graphicAssessment.getID_GraphicAssessment());
		
		if (markers.size() > 0) 
			query += " where ";
		query += hql.toString();	
		
		List result = factory.find(query, markers, values);
		if(result == null || result.size() > 1)
			throw new RuntimeException("More than one patient assessment found");
		else if (result.size() == 0)
			return null;
		
		return PatientAssessmentVoAssembler.create((PatientAssessment)result.get(0));
	}

	//wdev-12215
	public UserAssessmentVo getStructuredAssessment(UserAssessmentRefVo assessmentRef)
	{
		if(assessmentRef == null || assessmentRef.getID_UserAssessment() == null)
			throw new CodingRuntimeException("Invalid user assessment");
		
		return UserAssessmentVoAssembler.create((UserAssessment)getDomainFactory().getDomainObject(assessmentRef));
	}

	//wdev-12215
	public PatientAssessmentListVoCollection listPatientAssessments(CareContextRefVo careContext, UserAssessmentRefVo userAssessment)
	{
		if(careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("Invalid care context");
		if(userAssessment == null || userAssessment.getID_UserAssessment() == null)
			throw new CodingRuntimeException("Invalid user assessment");
		
		DomainFactory factory = getDomainFactory();		
		StringBuffer hql = new StringBuffer();
		String query = " from PatientAssessment a ";
		ArrayList<String> markers= new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = " ";

		hql.append(andStr + " a.careContext.id = :cc");
		markers.add("cc");
		values.add(careContext.getID_CareContext());
		andStr = " and ";
		
		hql.append(andStr + " a.assessmentData.userAssessment.id = :ua");
		markers.add("ua");
		values.add(userAssessment.getID_UserAssessment());
		
		if (markers.size() > 0) 
			query += " where ";
		query += hql.toString();	
		
		query += " order by a.authoringInformation.authoringDateTime desc";
		
		return PatientAssessmentListVoAssembler.createPatientAssessmentListVoCollectionFromPatientAssessment(factory.find(query, markers, values));
	}

	//wdev-12215
	public PatientAssessmentListVoCollection listPatientAssessments(EpisodeOfCareRefVo episodeOfCare, UserAssessmentRefVo userAssessment)
	{
		if(episodeOfCare == null || episodeOfCare.getID_EpisodeOfCare() == null)
			throw new CodingRuntimeException("Invalid episode of care");
		if(userAssessment == null || userAssessment.getID_UserAssessment() == null)
			throw new CodingRuntimeException("Invalid user assessment");
		
		DomainFactory factory = getDomainFactory();		
		StringBuffer hql = new StringBuffer();
		String query = " from PatientAssessment a ";
		ArrayList<String> markers= new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = " ";

		//WDEV-11526
		hql.append(andStr + " a.episodeOfCare.id = :ec");
		markers.add("ec");
		values.add(episodeOfCare.getID_EpisodeOfCare());
		andStr = " and ";
		
		hql.append(andStr + " a.assessmentData.userAssessment.id = :ua");
		markers.add("ua");
		values.add(userAssessment.getID_UserAssessment());
		
		if (markers.size() > 0) 
			query += " where ";
		query += hql.toString();	
		
		query += " order by a.authoringInformation.authoringDateTime desc";
		
		return PatientAssessmentListVoAssembler.createPatientAssessmentListVoCollectionFromPatientAssessment(factory.find(query, markers, values));
	}

	//wdev-12215
	public PatientAssessmentListVoCollection listPatientAssessments(CareContextRefVo careContext, GraphicAssessmentRefVo graphicalAssessment)
	{
		if(careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("Invalid care context");
		if(graphicalAssessment == null || graphicalAssessment.getID_GraphicAssessment() == null)
			throw new CodingRuntimeException("Invalid graphic assessment");
		
		DomainFactory factory = getDomainFactory();		
		StringBuffer hql = new StringBuffer();
		String query = " from PatientAssessment a ";
		ArrayList<String> markers= new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = " ";

		hql.append(andStr + " a.careContext.id = :cc");
		markers.add("cc");
		values.add(careContext.getID_CareContext());
		andStr = " and ";
		
		hql.append(andStr + " a.assessmentData.graphic.id = :ga");
		markers.add("ga");
		values.add(graphicalAssessment.getID_GraphicAssessment());
		
		if (markers.size() > 0) 
			query += " where ";
		query += hql.toString();	
		
		query += " order by a.authoringInformation.authoringDateTime desc";
		
		return PatientAssessmentListVoAssembler.createPatientAssessmentListVoCollectionFromPatientAssessment(factory.find(query, markers, values));
	}

	//wdev-12215
	public PatientAssessmentListVoCollection listPatientAssessments(EpisodeOfCareRefVo episodeOfCare, GraphicAssessmentRefVo graphicalAssessment)
	{
		if(episodeOfCare == null || episodeOfCare.getID_EpisodeOfCare() == null)
			throw new CodingRuntimeException("Invalid episode of care");
		if(graphicalAssessment == null || graphicalAssessment.getID_GraphicAssessment() == null)
			throw new CodingRuntimeException("Invalid graphic assessment");
		
		DomainFactory factory = getDomainFactory();		
		StringBuffer hql = new StringBuffer();
		String query = " from PatientAssessment a ";
		ArrayList<String> markers= new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		String andStr = " ";

		//WDEV-11526
		hql.append(andStr + " a.episodeOfCare.id = :ec");
		markers.add("ec");
		values.add(episodeOfCare.getID_EpisodeOfCare());
		andStr = " and ";
		
		hql.append(andStr + " a.assessmentData.graphic.id = :ga");
		markers.add("ga");
		values.add(graphicalAssessment.getID_GraphicAssessment());
		
		if (markers.size() > 0) 
			query += " where ";
		query += hql.toString();	
		
		query += " order by a.authoringInformation.authoringDateTime desc";
		
		return PatientAssessmentListVoAssembler.createPatientAssessmentListVoCollectionFromPatientAssessment(factory.find(query, markers, values));
	}

	//wdev-12215
	public PatientAssessmentVo savePatientAssessment(PatientAssessmentVo patientAssessment) throws StaleObjectException
	{
		if(patientAssessment == null)
			throw new CodingRuntimeException("Invalid patient assessment");
		if(!patientAssessment.isValidated())
			throw new CodingRuntimeException("User assessment not validated");
		
		DomainFactory factory = getDomainFactory();
		
		//ONLY ONE ASSESSMENT PER CLINICAL CONTACT
		if (!patientAssessment.getID_PatientAssessmentIsNotNull() && patientAssessment.getClinicalContactIsNotNull())
		{
			StringBuilder query = new  StringBuilder("select pa.id from PatientAssessment as pa left join pa.assessmentData as ad where " +
					"(pa.clinicalContact.id = :ClinicalContact_id and pa.isRIE is null");
			
			String[] paramNames = new String[2];
			Object[] paramValues = new Object[2];
			
			paramNames[0] = "ClinicalContact_id";
			paramValues[0] = patientAssessment.getClinicalContact().getID_ClinicalContact();
			
			if (patientAssessment.getAssessmentData().getGraphicIsNotNull())
			{
				query.append(" and ad.graphic.id = :GraphicAssessment_id)"); 
				paramNames[1] = "GraphicAssessment_id";
				paramValues[1] = patientAssessment.getAssessmentData().getGraphic().getID_GraphicAssessment();
			}
			else
			if (patientAssessment.getAssessmentData().getUserAssessmentIsNotNull())
			{
				query.append(" and ad.userAssessment.id = :UserAssessment_id)");
				paramNames[1] = "UserAssessment_id";
				paramValues[1] = patientAssessment.getAssessmentData().getUserAssessment().getID_UserAssessment();
			}
			else 
				throw new DomainRuntimeException("Invalid Patient Assessment. It doesn't contain either a graphical assessment or a user assessment");
			
			int count = factory.count(query.toString(), paramNames, paramValues);
			if (count > 0)
				throw new StaleObjectException(null,"An assessment of this type has been created by another user");
		}
		//END ONLY ONE ASSESSMENT PER CLINICAL CONTACT
		
		PatientAssessment domainObject = PatientAssessmentVoAssembler.extractPatientAssessment(factory, patientAssessment);
		
		//save every PatientGraphicAssessment as a rendered MHT - used by reports only
		DrawingControlReportHelper helper = new DrawingControlReportHelper();
		if(patientAssessment.getAssessmentDataIsNotNull() && patientAssessment.getAssessmentData().getGraphicFindingsIsNotNull())
		{
			for (int i = 0; i < patientAssessment.getAssessmentData().getGraphicFindings().size(); i++)
			{
				PatientGraphicAssessment pga = (PatientGraphicAssessment) domainObject.getAssessmentData().getGraphicFindings().get(i);
				pga.setRenderedMHT(helper.CreateDrawingControlSeed(patientAssessment.getAssessmentData().getGraphicFindings().get(i), 800, 400));
			}
		}
		
		factory.save(domainObject);
		
		return PatientAssessmentVoAssembler.create(domainObject);
	}

	@SuppressWarnings("unchecked")
	public CareContextShortVo getCareContextShortFromPatientICP(PatientICPRefVo patientICP) throws DomainInterfaceException
	{
		if(patientICP == null || patientICP.getID_PatientICP() == null)
			throw new CodingRuntimeException("PatientICPRefVo is null or has a null ID !");
		
		DomainFactory factory = getDomainFactory(); 
			
		List list = factory.find("select p1_1.careContext from PatientICP as p1_1 where p1_1.id = :ID", new String[] {"ID"}, new Object[] {patientICP.getBoId()});

		if(list == null || list.size() == 0)
			throw new DomainInterfaceException("Can't get careContext from PatientICP: " + patientICP.getID_PatientICP());
		
		return CareContextShortVoAssembler.create((CareContext) list.get(0));
	}

	public PatientICPShortVo getPatientICPShort(PatientICPRefVo patientICPRef) throws DomainInterfaceException
	{
		if(patientICPRef == null || patientICPRef.getID_PatientICP() == null)
			throw new CodingRuntimeException("PatientICPRefVo is null or has a null ID !");

		DomainFactory factory = getDomainFactory();
		
		return PatientICPShortVoAssembler.create((PatientICP) factory.loadDomainObject(PatientICP.class, patientICPRef.getID_PatientICP()));
	}

	public HcpDisType getCurrentUserDiscipline()
	{
		if(getSession().getUser() != null && getSession().getUser().getHcpId() != null)
		{
			DomainFactory factory = getDomainFactory();
			
			Hcp hcp = (Hcp) factory.loadDomainObject(Hcp.class, getSession().getUser().getHcpId());
			
			return HcpAssembler.create(hcp).getHcpType();
		}
		
		return null;
	}

	public String getLinkedReportName(ValueObjectRef ref)
	{
		DynamicAssessments impl = (DynamicAssessments) getDomainImpl(DynamicAssessmentsImpl.class);
		return impl.getLinkedReportName(ref);
	}

	@SuppressWarnings("unchecked")
	public ICPLiteVo getICPInfo(PatientICPRefVo patientICPRef) throws DomainInterfaceException
	{
		if(patientICPRef == null || patientICPRef.getID_PatientICP() == null)
			throw new CodingRuntimeException("PatientICPRefVo is null or has a null ID !");
		
		DomainFactory factory = getDomainFactory(); 
			
		List list = factory.find("select p1_1.iCP from PatientICP as p1_1 where p1_1.id = :ID", new String[] {"ID"}, new Object[] {patientICPRef.getBoId()});

		if(list == null || list.size() == 0)
			throw new DomainInterfaceException("Can't get ICP from PatientICP: " + patientICPRef.getID_PatientICP());
		
		return ICPLiteVoAssembler.create((ICP) list.get(0));
	}

	public CatsReferralVo getCatsReferralRefVoForCareContext(CareContextRefVo voCarecontext) 
	{
		if(voCarecontext == null || voCarecontext.getID_CareContext() == null)
			throw new CodingRuntimeException("CareContextRefVo is null or id not provide for CareContextRefVo");
		
		DomainFactory factory = getDomainFactory();
		List catsRef = factory.find("select catsRef from CatsReferral as catsRef where catsRef.careContext.id = '" + voCarecontext.getID_CareContext() + "')");
		if(catsRef != null && catsRef.size() > 0)
		{
			CatsReferral val = (CatsReferral) catsRef.get(0);
			if(val != null)
			{
				return CatsReferralVoAssembler.create(val);
			}
		}	
		return null;
	}

	public ICPConfigurationDisplayVo getConfigurationICP(ICPRefVo icpRef) throws DomainInterfaceException
	{
		if (icpRef == null || !icpRef.getID_ICPIsNotNull())
			return null;
		
		return ICPConfigurationDisplayVoAssembler.create((ICP) getDomainFactory().getDomainObject(ICP.class, icpRef.getID_ICP()));
	}

	public PatientICPActionFullVo getPatientICPActionFull(PatientICPActionRefVo patientICPActionRef)
	{
		if (patientICPActionRef == null || !patientICPActionRef.getID_PatientICPActionIsNotNull())
			return null;
		
		return PatientICPActionFullVoAssembler.create((PatientICPAction) getDomainFactory().getDomainObject(PatientICPAction.class, patientICPActionRef.getID_PatientICPAction()));
	}

	public PatientICPActionFullVoCollection getLinkedPatientICPActions(PatientICPActionFullVo patientAction)
	{
		if (patientAction == null || !patientAction.getActionIsNotNull() || !patientAction.getICPIsNotNull())
			return null;
		
		String hqlQuery = "select patientAction from PatientICPAction as patientAction, ICPAction as action where patientAction.iCP.id = :ICP_ID " +
				"and patientAction.action.id = action.clinicalDetailActions.id and action.id = :ACTION_ID order by patientAction.action.name";
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("ICP_ID");
		paramValues.add(patientAction.getICP().getID_PatientICP());
		
		paramNames.add("ACTION_ID");
		paramValues.add(patientAction.getAction().getID_ICPAction());
		
		
		return PatientICPActionFullVoAssembler.createPatientICPActionFullVoCollectionFromPatientICPAction(getDomainFactory().find(hqlQuery, paramNames, paramValues));
	}

	public void addActionStatus(PatientICPActionRefVo actionRef, ICPActionStatus status, Boolean hasCountersigningRight) throws DomainInterfaceException, StaleObjectException
	{
		if(actionRef == null || actionRef.getID_PatientICPAction() == null)
			throw new CodingRuntimeException("PatientICPActionRefVo is null or has a null ID !");
		
		DomainFactory factory = getDomainFactory();
		
		PatientICPAction actionBo = (PatientICPAction) factory.loadDomainObject(PatientICPAction.class, actionRef.getID_PatientICPAction());
		
		PatientICPActionFullVo actionVo = PatientICPActionFullVoAssembler.create(actionBo);
		
		PatientICPActionStatusVo actionStatusVo = new PatientICPActionStatusVo();
		
		actionStatusVo.setStatusDate(new DateTime());
		actionStatusVo.setChangedBy(getSession().getUser() != null ? MemberOfStaffLiteVoAssembler.create((MemberOfStaff) getDomainFactory().getDomainObject(MemberOfStaff.class, getSession().getUser().getMosId())) : null);
		actionStatusVo.setStatus(status);
		
		actionVo.setCurrentStatus(actionStatusVo);
		actionVo.getStatusHistory().add(actionStatusVo);
		
		
		if (ICPActionStatus.MET.equals(status) || ICPActionStatus.NOT_MET.equals(status))
		{
			if (!Boolean.TRUE.equals(hasCountersigningRight) && Boolean.TRUE.equals(actionVo.getAction().getRequiresCounterSignature()))
			{
				actionVo.setRequiresCounterSigning(Boolean.TRUE);
			}
		}
		
		factory.save(PatientICPActionFullVoAssembler.extractPatientICPAction(factory, actionVo));
	}

	public PatientICPViewVo getPatientICPViewVo(PatientICPRefVo patICPRef)
	{
		if (!patICPRef.getID_PatientICPIsNotNull())
			throw new CodingRuntimeException("Invalid ref provided");
		PatientICP patICP = (PatientICP) getDomainFactory().getDomainObject(PatientICP.class,patICPRef.getID_PatientICP());
		PatientICPViewVo result = assemblePatientIcpView(patICP);
	
		return result;
		
	}

	private PatientICPViewVo assemblePatientIcpView(PatientICP patICP)
	{
		PatientICPViewVo result = new PatientICPViewVo(patICP.getId(), patICP.getVersion());
		result.setCompletedDateTime(patICP.getCompletedDateTime()!=null?new DateTime(patICP.getCompletedDateTime()):null);
		result.setCriticalEvents(PatientCriticalEventsVoAssembler.createPatientCriticalEventsVoCollectionFromPatientCriticalEvents(patICP.getCriticalEvents()));
		result.setEvaluationNotes(PatientICPEvaluationNoteVoAssembler.createPatientICPEvaluationNoteVoCollectionFromPatientICPEvaluationNote(patICP.getEvaluationNotes()));
		result.setHasOutstandingAdminActions(patICP.isHasOutstandingAdminActions());
		result.setHasOutstandingClinicalActions(patICP.isHasOutstandingClinicalActions());
		result.setHasOutstandingNursingActions(patICP.isHasOutstandingNursingActions());
		result.setHasOutstandingPhysioActions(patICP.isHasOutstandingPhysioActions());
		result.setICP(new ICPRefVo(patICP.getICP().getId(), patICP.getICP().getVersion()));
		result.setIsRIE(patICP.getIsRIE());
		
		if (patICP.getStages()!=null)
		{
			result.setStages(new PatientICPStageViewVoCollection());
			Iterator iterator = patICP.getStages().iterator();
			while (iterator.hasNext())
			{
				Object next = iterator.next();
				if (next instanceof PatientICPStage)
				{
					result.getStages().add(assemblePatientICPStageView((PatientICPStage)next));
					
				}
			}
		}
		return result;
	}

	private PatientICPStageViewVo assemblePatientICPStageView(PatientICPStage stage)
	{
		PatientICPStageViewVo stageVo = new PatientICPStageViewVo(stage.getId(), stage.getVersion());
		stageVo.setIsRIE(stage.getIsRIE());
		
		stageVo.setCurrentStatus(new PatientICPStageStatusVo(stage.getCurrentStatus().getId(), stage.getCurrentStatus().getVersion()));
		stageVo.getCurrentStatus().setChangedBy(stage.getCurrentStatus().getChangedBy());
		stageVo.getCurrentStatus().setIsRIE(stage.getCurrentStatus().getIsRIE());
		stageVo.getCurrentStatus().setStatus(LookupHelper.getICPStageStatusInstance(getLookupService(), stage.getCurrentStatus().getStatus().getId()));
		stageVo.getCurrentStatus().setStatusDate(stage.getCurrentStatus().getStatusDate()!=null?new DateTime(stage.getCurrentStatus().getStatusDate()):null);
		
		
		stageVo.setStage(new ICPStageViewVo(stage.getStage().getId(), stage.getStage().getVersion()));
		stageVo.getStage().setIsRIE(stage.getStage().getIsRIE());
		stageVo.getStage().setHelpURL(stage.getStage().getHelpURL());
		stageVo.getStage().setName(stage.getStage().getName());
		stageVo.getStage().setSequence(stage.getStage().getSequence());
		if (stage.getStagePhases()!=null)
		{
			stageVo.setStagePhases(new PatientICPPhaseViewVoCollection());
			Iterator phaseIt = stage.getStagePhases().iterator();
			while (phaseIt.hasNext())
			{
				Object nextStage = phaseIt.next();
				if (nextStage instanceof PatientICPPhase)
				{
									
					stageVo.getStagePhases().add(assemblePatientICPPhaseView((PatientICPPhase) nextStage));
				}
			}
		}
		return stageVo;
	}

	private PatientICPPhaseViewVo assemblePatientICPPhaseView(PatientICPPhase phase)
	{
		PatientICPPhaseViewVo phaseVo = new PatientICPPhaseViewVo(phase.getId(),phase.getVersion());
		phaseVo.setIsRIE(phase.getIsRIE());
		
		phaseVo.setCurrentStatus(new PatientICPPhaseStatusVo(phase.getId(), phase.getVersion()));
		phaseVo.getCurrentStatus().setChangedBy(phase.getCurrentStatus().getChangedBy());
		phaseVo.getCurrentStatus().setIsRIE(phase.getCurrentStatus().getIsRIE());
		phaseVo.getCurrentStatus().setStatus(LookupHelper.getICPPhaseStatusInstance(getLookupService(), phase.getCurrentStatus().getStatus().getId()));
		
		phaseVo.setPhase(new ICPPhaseViewVo(phase.getPhase().getId(),phase.getPhase().getVersion()));
		if (phase.getPhase().getGoals() != null)
		{
			phaseVo.getPhase().setGoals(IcpPhaseGoalVoAssembler.createIcpPhaseGoalVoCollectionFromICPPhaseGoal(phase.getPhase().getGoals()));
			
		}
		
		phaseVo.getPhase().setHelpURL(phase.getPhase().getHelpURL());
		phaseVo.getPhase().setName(phase.getPhase().getName());
		phaseVo.getPhase().setSequence(phase.getPhase().getSequence());
		phaseVo.getPhase().setIsRIE(phase.getPhase().getIsRIE());
		if (phase.getPhaseActions()!=null)
		{
			phaseVo.setPhaseActions(new PatientICPActionViewVoCollection());
			Iterator actIt = phase.getPhaseActions().iterator();
			while (actIt.hasNext())
			{
				Object nextAct = actIt.next();
				if (nextAct instanceof PatientICPAction)
				{
					phaseVo.getPhaseActions().add(assemblePatientICPActionView((PatientICPAction) nextAct));
				}
				
			}
		}
		return phaseVo;
	}

	private PatientICPActionViewVo assemblePatientICPActionView(PatientICPAction action)
	{
		PatientICPActionViewVo actionVo = new PatientICPActionViewVo(action.getId(),action.getVersion());
		actionVo.setIsRIE(action.getIsRIE());
		actionVo.setCurrentStatus(PatientICPActionStatusVoAssembler.create(action.getCurrentStatus()));
		actionVo.setRequiresCounterSigning(action.isRequiresCounterSigning());
		
		actionVo.setAction(new ICPActionViewVo(action.getAction().getId(), action.getAction().getVersion()));
		if (action.getAction().getDiscipline() != null)
		{
			actionVo.getAction().setDiscipline(new HcpDisTypeCollection());
			for (int i = 0 ; i < action.getAction().getDiscipline().size() ; i++)
			{
				actionVo.getAction().getDiscipline().add(ims.core.vo.lookups.LookupHelper.getHcpDisTypeInstance(getLookupService(), ((LookupInstance)action.getAction().getDiscipline().get(i)).getId()));
			}
		}
		
		actionVo.getAction().setHelpURL(action.getAction().getHelpURL());
		actionVo.getAction().setLinkedType(ims.core.vo.lookups.LookupHelper.getICPCompLinkedTypeInstance(getLookupService(), action.getAction().getLinkedType().getId()));
		actionVo.getAction().setName(action.getAction().getName());
		actionVo.getAction().setRequiresCounterSignature(action.getAction().isRequiresCounterSignature());
		actionVo.getAction().setSequence(action.getAction().getSequence());
		actionVo.getAction().setIsRIE(action.getAction().getIsRIE());
		return actionVo;
	}

	public PatientICPActionLiteVo getPatientICPActionLiteVo(PatientICPActionRefVo ref)
	{
		if (!ref.getID_PatientICPActionIsNotNull())
			throw new CodingRuntimeException("Invalid ref provided");
		return PatientICPActionLiteVoAssembler.create((PatientICPAction) getDomainFactory().getDomainObject(PatientICPAction.class, ref.getID_PatientICPAction()));
	}

	public Boolean isICPCompleted(PatientICPRefVo patICP)
	{
		String hql = "select count(p1_1.iCP) from PatientICP as p1_1 where p1_1.id = :ID and p1_1.completedDateTime is not null";
		long countWithHQL = getDomainFactory().countWithHQL(hql, new String[]{"ID"},new Object[]{ patICP.getID_PatientICP()});
		return countWithHQL>0;
	}

	/**
	 *	WDEV-13377
	 *	Function used to inactivate selected Stage or Phase
	 */
	public PatientICPRefVo inactivateStagePhase(PatientICPRefVo patientICP, ValueObject stagePhaseHolder) throws StaleObjectException
	{
		// Check ICP parameter
		if (patientICP == null || !patientICP.getID_PatientICPIsNotNull())
			throw new DomainRuntimeException("Can not bring into scope stages and phases for null Patient ICP record.");
		
		// Check stage / phase parameter not to be null
		if (stagePhaseHolder == null)
			throw new DomainRuntimeException("Can not inactivate null stage or phase.");
		
		// Get DomainFactory reference
		DomainFactory factory = getDomainFactory();
		// Get ICP DomainObject
		PatientICP domainPatientICP = (PatientICP) factory.getDomainObject(PatientICP.class, patientICP.getID_PatientICP());
		
		// Check version for stale
		if (patientICP.getVersion_PatientICP() != domainPatientICP.getVersion())
			throw new StaleObjectException(domainPatientICP);
		
		// Bring stage into scope
		if (stagePhaseHolder instanceof PatientICPStageViewVo)
		{
			domainPatientICP.removeStageFromScope(factory, null, ((PatientICPStageViewVo) stagePhaseHolder).getStage().getID_ICPStage().toString());
		}
		
		// Bring phase into scope
		if (stagePhaseHolder instanceof PatientICPPhaseViewVo)
		{
			domainPatientICP.removePhaseFromScope(factory, null, ((PatientICPPhaseViewVo) stagePhaseHolder).getPhase().getID_ICPPhase().toString());
		}
		
		// Commit to database
		factory.save(domainPatientICP);
		
		// Return the PatientICPRef to update the local context
		patientICP = new PatientICPRefVo(domainPatientICP.getId(), domainPatientICP.getVersion());
		
		return patientICP;
	}
}
