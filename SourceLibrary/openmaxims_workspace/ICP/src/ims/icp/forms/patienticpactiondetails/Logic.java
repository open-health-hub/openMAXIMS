//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.icp.forms.patienticpactiondetails;

import ims.core.vo.HcpLiteVo;
import ims.core.vo.lookups.ICPCompLinkedType;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.icp.forms.patienticpactiondetails.GenForm.lyrMainLayer.tabDetailsContainer;
import ims.icp.forms.patienticpactiondetails.GenForm.lyrMainLayer.tabLinkedActionsContainer;
import ims.icp.vo.PatientICPActionLiteVo;
import ims.icp.vo.PatientICPActionLiteVoCollection;
import ims.icps.instantiation.vo.PatientICPActionRefVo;
import ims.icps.instantiation.vo.PatientICPRefVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;


	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers region
	//------------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// Retrieve data from arguments
		if (args == null || args.length != 4)
			throw new CodingRuntimeException("Dialog 'Patient ICP Action Details' was not properly called.");

		// Initialize the form
		initialize((PatientICPRefVo) args[0], (HcpLiteVo) args[1], (PatientICPActionRefVo) args[2], (Boolean) args[3]);
		
		
		// Present screen
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	
	@Override
	protected void onlyrMainTabChanged(LayerBridge tab)
	{
		if (tab instanceof tabLinkedActionsContainer)
		{
			boolean isCompleted = form.getLocalContext().getPatientICP() == null || form.getLocalContext().getPatientICP().getCompletedDateTimeIsNotNull();
			
			form.lyrMain().tabLinkedActions().ccLinkedActionDetails().setValue(form.lyrMain().tabLinkedActions().recbrLinkedActions().getValue(), !isCompleted);
		}
		else if (tab instanceof tabDetailsContainer)
		{
			// Display action details on component
			boolean isCompleted = form.getLocalContext().getPatientICP() == null || form.getLocalContext().getPatientICP().getCompletedDateTimeIsNotNull();
			form.lyrMain().tabDetails().ccActionDetails().setValue(form.getLocalContext().getPatientICPAction(), !isCompleted && Boolean.FALSE.equals(form.getLocalContext().getReadOnly()));
		}
		
	}
	
	@Override
	protected void onRecbrLinkedActionsValueChanged() throws PresentationLogicException
	{
		boolean isCompleted = form.getLocalContext().getPatientICP() == null || form.getLocalContext().getPatientICP().getCompletedDateTimeIsNotNull();
		
		form.lyrMain().tabLinkedActions().ccLinkedActionDetails().setValue(form.lyrMain().tabLinkedActions().recbrLinkedActions().getValue(), !isCompleted  && Boolean.FALSE.equals(form.getLocalContext().getReadOnly()));
	}
	
	
	@Override
	protected void onCcActionDetailsValueChanged() throws PresentationLogicException
	{
		form.setMode(form.lyrMain().tabDetails().ccActionDetails().getMode());
	}

	@Override
	protected void onCcLinkedActionDetailsValueChanged() throws PresentationLogicException
	{
		form.setMode(form.lyrMain().tabLinkedActions().ccLinkedActionDetails().getMode());
	}
	

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
	
	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//------------------------------------------------------------------------------------------------------------------------------------------------------------

	private void initialize(PatientICPRefVo icp, HcpLiteVo hcp, PatientICPActionRefVo patientICPAction, Boolean readOnly)
	{
		form.getLocalContext().setPatientICP(domain.getPatientICP(icp));
		form.getLocalContext().setLoggedInUser(hcp);
		form.getLocalContext().setPatientICPAction(patientICPAction);
		form.getLocalContext().setReadOnly(readOnly);
	}

	private void open()
	{
		// Display first tab'
		form.lyrMain().showtabDetails();
		
		PatientICPActionLiteVo patientAction = domain.getPatietICPAction(form.getLocalContext().getPatientICPAction());
		form.lyrMain().tabDetails().setCaption(getCaptionString(patientAction));
		
		// Display action details on component
		boolean isCompleted = form.getLocalContext().getPatientICP() == null || form.getLocalContext().getPatientICP().getCompletedDateTimeIsNotNull();
		form.lyrMain().tabDetails().ccActionDetails().setValue(form.getLocalContext().getPatientICPAction(), !isCompleted && Boolean.FALSE.equals(form.getLocalContext().getReadOnly()));

		// Get linked actions
		PatientICPActionLiteVoCollection linkedActions = domain.getLinkedActions(form.getLocalContext().getPatientICP(), form.getLocalContext().getPatientICPAction());
		// Populate linked actions record browser
		
		if (linkedActions == null || linkedActions.size() == 0)
		{
			form.lyrMain().tabLinkedActions().setHeaderVisible(false);
		}
		else
		{
			populateLinkedActionsRecordBrowser(linkedActions);
		}
	}


	private void updateControlsState()
	{
		form.lyrMain().tabDetails().setHeaderEnabled(!FormMode.EDIT.equals(form.getMode()));
		form.lyrMain().tabLinkedActions().setHeaderEnabled(!FormMode.EDIT.equals(form.getMode()));
		
		form.lyrMain().tabLinkedActions().recbrLinkedActions().setEnabled(!FormMode.EDIT.equals(form.getMode()));
		
		form.btnClose().setVisible(!FormMode.EDIT.equals(form.getMode()));
	}

	private void populateLinkedActionsRecordBrowser(PatientICPActionLiteVoCollection linkedActions)
	{
		// Clear record browser
		form.lyrMain().tabLinkedActions().recbrLinkedActions().clear();
		
		// Sort linked actions
		linkedActions.sort();
		
		// Add linked actions to record browser
		for (PatientICPActionLiteVo action : linkedActions)
		{
			form.lyrMain().tabLinkedActions().recbrLinkedActions().newRow(action, getDisplayText(action));
		}
		
		// Default to first action
		if (linkedActions.size() > 0)
		{
			boolean isCompleted = form.getLocalContext().getPatientICP() == null || form.getLocalContext().getPatientICP().getCompletedDateTimeIsNotNull();
			
			form.lyrMain().tabLinkedActions().recbrLinkedActions().setValue(linkedActions.get(0));
			form.lyrMain().tabLinkedActions().ccLinkedActionDetails().setValue(linkedActions.get(0), !isCompleted && Boolean.FALSE.equals(form.getLocalContext().getReadOnly()));
		}
	}

	private String getDisplayText(PatientICPActionLiteVo action)
	{
		if (action == null)
			return null;
		
		StringBuilder displayText = new StringBuilder();
		
		displayText.append(action.getAction().getName());
		
		return displayText.toString();
	}


	private String getCaptionString(PatientICPActionLiteVo patientAction)
	{
		if (patientAction == null)
			return null;

		if (ICPCompLinkedType.FORM.equals(patientAction.getAction().getLinkedType()))
		{
			return patientAction.getAction().getLinkedForm().getCaption();
		}
		else if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(patientAction.getAction().getLinkedType()))
		{
			return patientAction.getAction().getLinkedAssessment().getName();
		}
		else if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(patientAction.getAction().getLinkedType()))
		{
			return patientAction.getAction().getLinkedGraphicAssessment().getName();
		}
		else if (ICPCompLinkedType.ORDER_TEMPLATE.equals(patientAction.getAction().getLinkedType()))
		{
			return "Place Order";
		}
		else if (ICPCompLinkedType.NONE.equals(patientAction.getAction().getLinkedType()))
		{
			return "No details";
		}
		
		return null;
	}
}
