//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.icp.forms.patienticpactionlinkeddetailscomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrMainLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageFormContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// DynamicForm Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 768, 488, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicForm.class, form, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL}));
			}

			public DynamicForm dynamicForm()
			{
				return (DynamicForm)super.getControl(0);
			}
		}
		public static class tabPageAssessmentContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class recbrStructuralAssessmentRecordBrowser extends RecordBrowserBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text)
				{
					super.control.newRow(index, value, text);
				}
				public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(index, value, text, image);
				}
				public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, textColor);
				}
				public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, image, textColor);
				}
				public ims.assessment.vo.PatientAssessmentLiteVo getValue()
				{
					return (ims.assessment.vo.PatientAssessmentLiteVo)super.control.getValue();
				}
				public void setValue(ims.assessment.vo.PatientAssessmentLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 752, 400, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccStrructuralAssessmentForm = loader.loadComponent(127109, appForm, startControlID * 10 + 1000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 5, skipContextValidation);
				//ims.framework.Control m_ccStrructuralAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(8), new Integer(40), new Integer(752), new Integer(400), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5), m_ccStrructuralAssessmentForm, instance1 } );
				ims.framework.Control m_ccStrructuralAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5), m_ccStrructuralAssessmentForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccStrructuralAssessmentControl);
				Menu[] menus1 = m_ccStrructuralAssessmentForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 312, 440, 300, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ims.framework.FormUiLogic m_authStructuredAssessmentCompletedForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper3.getSize(), instance2, startTabIndex.intValue() + 2007, skipContextValidation);
				//ims.framework.Control m_authStructuredAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(312), new Integer(440), new Integer(300), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 2007), m_authStructuredAssessmentCompletedForm, instance2 } );
				ims.framework.Control m_authStructuredAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 2007), m_authStructuredAssessmentCompletedForm, instance2, Boolean.TRUE } );
				super.addControl(m_authStructuredAssessmentCompletedControl);
				Menu[] menus2 = m_authStructuredAssessmentCompletedForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
				ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 440, 300, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ims.framework.FormUiLogic m_authStructuredAssessmentForm = loader.loadComponent(102228, appForm, startControlID * 10 + 3000, anchoringHelper4.getSize(), instance3, startTabIndex.intValue() + 1006, skipContextValidation);
				//ims.framework.Control m_authStructuredAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(8), new Integer(440), new Integer(300), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 1006), m_authStructuredAssessmentForm, instance3 } );
				ims.framework.Control m_authStructuredAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 1006), m_authStructuredAssessmentForm, instance3, Boolean.TRUE } );
				super.addControl(m_authStructuredAssessmentControl);
				Menu[] menus3 = m_authStructuredAssessmentForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus3.length; x++)
				{
					form.registerMenu(menus3[x]);
				}
		
				// RecordBrowser Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 40, 10, 704, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				RecordBrowser m_recbrStructuralAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
				addControl(m_recbrStructuralAssessmentTemp);
				recbrStructuralAssessmentRecordBrowser recbrStructuralAssessment = (recbrStructuralAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrStructuralAssessmentRecordBrowser.class, m_recbrStructuralAssessmentTemp);
				super.addRecordBrowser(recbrStructuralAssessment);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 752, 8, 25, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.HelpEnabled16, form_images_local.Core.HelpDisabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 7, 8, 25, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.InfoEnabled16, form_images_local.Core.InfoDisabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.assessment.forms.structuralassessment.IComponent ccStrructuralAssessment()
			{
				return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccStrructuralAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccStrructuralAssessmentVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccStrructuralAssessmentVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccStrructuralAssessmentEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccStrructuralAssessmentEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent authStructuredAssessmentCompleted()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setauthStructuredAssessmentCompletedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setauthStructuredAssessmentCompletedVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isauthStructuredAssessmentCompletedVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setauthStructuredAssessmentCompletedEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isauthStructuredAssessmentCompletedEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent authStructuredAssessment()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setauthStructuredAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setauthStructuredAssessmentVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isauthStructuredAssessmentVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setauthStructuredAssessmentEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isauthStructuredAssessmentEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public recbrStructuralAssessmentRecordBrowser recbrStructuralAssessment()
			{
				return (recbrStructuralAssessmentRecordBrowser)super.getRecordBrowser(0);
			}
			public ImageButton imbStructuralContextInfo()
			{
				return (ImageButton)super.getControl(4);
			}
			public ImageButton imbStructuralHelp()
			{
				return (ImageButton)super.getControl(5);
			}
		}
		public static class tabPageGraphicalAssessmentContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class recbrGraphicalAssessmentRecordBrowser extends RecordBrowserBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text)
				{
					super.control.newRow(index, value, text);
				}
				public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(index, value, text, image);
				}
				public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, textColor);
				}
				public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(index, value, text, image, textColor);
				}
				public ims.assessment.vo.PatientAssessmentLiteVo getValue()
				{
					return (ims.assessment.vo.PatientAssessmentLiteVo)super.control.getValue();
				}
				public void setValue(ims.assessment.vo.PatientAssessmentLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 312, 440, 300, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ims.framework.FormUiLogic m_authGraphicalAssessmentCompletedForm = loader.loadComponent(102228, appForm, startControlID * 10 + 4000, anchoringHelper8.getSize(), instance1, startTabIndex.intValue() + 5013, skipContextValidation);
				//ims.framework.Control m_authGraphicalAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(312), new Integer(440), new Integer(300), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 5013), m_authGraphicalAssessmentCompletedForm, instance1 } );
				ims.framework.Control m_authGraphicalAssessmentCompletedControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 5013), m_authGraphicalAssessmentCompletedForm, instance1, Boolean.FALSE } );
				super.addControl(m_authGraphicalAssessmentCompletedControl);
				Menu[] menus1 = m_authGraphicalAssessmentCompletedForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
				ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 440, 300, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ims.framework.FormUiLogic m_authGraphicalAssessmentForm = loader.loadComponent(102228, appForm, startControlID * 10 + 5000, anchoringHelper9.getSize(), instance2, startTabIndex.intValue() + 4012, skipContextValidation);
				//ims.framework.Control m_authGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(8), new Integer(440), new Integer(300), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 4012), m_authGraphicalAssessmentForm, instance2 } );
				ims.framework.Control m_authGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 4012), m_authGraphicalAssessmentForm, instance2, Boolean.FALSE } );
				super.addControl(m_authGraphicalAssessmentControl);
				Menu[] menus2 = m_authGraphicalAssessmentForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus2.length; x++)
				{
					form.registerMenu(menus2[x]);
				}
				ims.framework.CustomComponent instance3 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 0, 32, 774, 408, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccGraphicalAssessmentForm = loader.loadComponent(127114, appForm, startControlID * 10 + 6000, anchoringHelper10.getSize(), instance3, startTabIndex.intValue() + 3011, skipContextValidation);
				//ims.framework.Control m_ccGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(0), new Integer(32), new Integer(774), new Integer(408), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3011), m_ccGraphicalAssessmentForm, instance3 } );
				ims.framework.Control m_ccGraphicalAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3011), m_ccGraphicalAssessmentForm, instance3, Boolean.FALSE } );
				super.addControl(m_ccGraphicalAssessmentControl);
				Menu[] menus3 = m_ccGraphicalAssessmentForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus3.length; x++)
				{
					form.registerMenu(menus3[x]);
				}
		
				// RecordBrowser Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 40, 10, 696, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				RecordBrowser m_recbrGraphicalAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 3009), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
				addControl(m_recbrGraphicalAssessmentTemp);
				recbrGraphicalAssessmentRecordBrowser recbrGraphicalAssessment = (recbrGraphicalAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrGraphicalAssessmentRecordBrowser.class, m_recbrGraphicalAssessmentTemp);
				super.addRecordBrowser(recbrGraphicalAssessment);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 3008), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.InfoEnabled16, form_images_local.Core.InfoDisabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 744, 8, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 3010), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.HelpEnabled16, form_images_local.Core.HelpDisabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public ims.core.forms.authoringinfo.IComponent authGraphicalAssessmentCompleted()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setauthGraphicalAssessmentCompletedValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setauthGraphicalAssessmentCompletedVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isauthGraphicalAssessmentCompletedVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setauthGraphicalAssessmentCompletedEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isauthGraphicalAssessmentCompletedEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public ims.core.forms.authoringinfo.IComponent authGraphicalAssessment()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setauthGraphicalAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setauthGraphicalAssessmentVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isauthGraphicalAssessmentVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setauthGraphicalAssessmentEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isauthGraphicalAssessmentEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public ims.assessment.forms.graphicalassessment.IComponent ccGraphicalAssessment()
			{
				return (ims.assessment.forms.graphicalassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
			}
			public void setccGraphicalAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
			}
			public void setccGraphicalAssessmentVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setVisible(value);
			}
			public boolean isccGraphicalAssessmentVisible()
			{
				return ((ims.framework.Control)super.getControl(2)).isVisible();
			}
			public void setccGraphicalAssessmentEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(2)).setEnabled(value);
			}
			public boolean isccGraphicalAssessmentEnabled()
			{
				return ((ims.framework.Control)super.getControl(2)).isEnabled();
			}
			public recbrGraphicalAssessmentRecordBrowser recbrGraphicalAssessment()
			{
				return (recbrGraphicalAssessmentRecordBrowser)super.getRecordBrowser(0);
			}
			public ImageButton imbGraphicalHelp()
			{
				return (ImageButton)super.getControl(4);
			}
			public ImageButton imbGraphicalContextInfo()
			{
				return (ImageButton)super.getControl(5);
			}
		}
		public static class tabPageReportContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 768, 488, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccReportBuilderForm = loader.loadComponent(102275, appForm, startControlID * 10 + 7000, anchoringHelper14.getSize(), instance1, -1, skipContextValidation);
				//ims.framework.Control m_ccReportBuilderControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(8), new Integer(8), new Integer(768), new Integer(488), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccReportBuilderForm, instance1 } );
				ims.framework.Control m_ccReportBuilderControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1020),  new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(-1), m_ccReportBuilderForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccReportBuilderControl);
				Menu[] menus1 = m_ccReportBuilderForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.assessmentasreport.IComponent ccReportBuilder()
			{
				return (ims.core.forms.assessmentasreport.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccReportBuilderValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccReportBuilderVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccReportBuilderVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccReportBuilderEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccReportBuilderEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPageNoneContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 24, 24, 216, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Details Linked to Action", new Integer(1), null, new Integer(1)}));
			}

		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 792, 528, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageForm = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Form", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageFormContainer m_tabPageFormContainer = (tabPageFormContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageFormContainer.class, m_tabPageForm, factory);
			super.addContainer(m_tabPageForm, m_tabPageFormContainer);
			ims.framework.utils.SizeInfo m_tabPageFormDesignSize = new ims.framework.utils.SizeInfo(792, 528);
			ims.framework.utils.SizeInfo m_tabPageFormRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
			m_tabPageFormContainer.setContext(form, appForm, m_tabPageForm, loader, form_images_local, startControlID, m_tabPageFormDesignSize, m_tabPageFormRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 792, 528, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageAssessment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Assessment", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageAssessmentContainer m_tabPageAssessmentContainer = (tabPageAssessmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageAssessmentContainer.class, m_tabPageAssessment, factory);
			super.addContainer(m_tabPageAssessment, m_tabPageAssessmentContainer);
			ims.framework.utils.SizeInfo m_tabPageAssessmentDesignSize = new ims.framework.utils.SizeInfo(792, 528);
			ims.framework.utils.SizeInfo m_tabPageAssessmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
			m_tabPageAssessmentContainer.setContext(form, appForm, m_tabPageAssessment, loader, form_images_local, startControlID, m_tabPageAssessmentDesignSize, m_tabPageAssessmentRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 792, 528, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageGraphicalAssessment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Graphical Assessment", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageGraphicalAssessmentContainer m_tabPageGraphicalAssessmentContainer = (tabPageGraphicalAssessmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageGraphicalAssessmentContainer.class, m_tabPageGraphicalAssessment, factory);
			super.addContainer(m_tabPageGraphicalAssessment, m_tabPageGraphicalAssessmentContainer);
			ims.framework.utils.SizeInfo m_tabPageGraphicalAssessmentDesignSize = new ims.framework.utils.SizeInfo(792, 528);
			ims.framework.utils.SizeInfo m_tabPageGraphicalAssessmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper18.getWidth(), anchoringHelper18.getHeight());
			m_tabPageGraphicalAssessmentContainer.setContext(form, appForm, m_tabPageGraphicalAssessment, loader, form_images_local, startControlID, m_tabPageGraphicalAssessmentDesignSize, m_tabPageGraphicalAssessmentRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 792, 528, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageReport = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Report", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageReportContainer m_tabPageReportContainer = (tabPageReportContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageReportContainer.class, m_tabPageReport, factory);
			super.addContainer(m_tabPageReport, m_tabPageReportContainer);
			ims.framework.utils.SizeInfo m_tabPageReportDesignSize = new ims.framework.utils.SizeInfo(792, 528);
			ims.framework.utils.SizeInfo m_tabPageReportRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
			m_tabPageReportContainer.setContext(form, appForm, m_tabPageReport, loader, form_images_local, startControlID, m_tabPageReportDesignSize, m_tabPageReportRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 792, 528, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageNone = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"No Details Linked", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPageNoneContainer m_tabPageNoneContainer = (tabPageNoneContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageNoneContainer.class, m_tabPageNone, factory);
			super.addContainer(m_tabPageNone, m_tabPageNoneContainer);
			ims.framework.utils.SizeInfo m_tabPageNoneDesignSize = new ims.framework.utils.SizeInfo(792, 528);
			ims.framework.utils.SizeInfo m_tabPageNoneRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
			m_tabPageNoneContainer.setContext(form, appForm, m_tabPageNone, loader, form_images_local, startControlID, m_tabPageNoneDesignSize, m_tabPageNoneRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageForm().setVisible(false);
			tabPageAssessment().setVisible(false);
			tabPageGraphicalAssessment().setVisible(false);
			tabPageReport().setVisible(false);
			tabPageNone().setVisible(false);
		}
		public void settabPageFormEnabled(boolean value)
		{
			tabPageForm().setEnabled(value);
		}
		public void settabPageAssessmentEnabled(boolean value)
		{
			tabPageAssessment().setEnabled(value);
		}
		public void settabPageGraphicalAssessmentEnabled(boolean value)
		{
			tabPageGraphicalAssessment().setEnabled(value);
		}
		public void settabPageReportEnabled(boolean value)
		{
			tabPageReport().setEnabled(value);
		}
		public void settabPageNoneEnabled(boolean value)
		{
			tabPageNone().setEnabled(value);
		}
		public void showtabPageForm()
		{
			tabPageAssessment().setVisible(false);
			tabPageGraphicalAssessment().setVisible(false);
			tabPageReport().setVisible(false);
			tabPageNone().setVisible(false);
			tabPageForm().setVisible(true);
		}
		public void showtabPageAssessment()
		{
			tabPageForm().setVisible(false);
			tabPageGraphicalAssessment().setVisible(false);
			tabPageReport().setVisible(false);
			tabPageNone().setVisible(false);
			tabPageAssessment().setVisible(true);
		}
		public void showtabPageGraphicalAssessment()
		{
			tabPageForm().setVisible(false);
			tabPageAssessment().setVisible(false);
			tabPageReport().setVisible(false);
			tabPageNone().setVisible(false);
			tabPageGraphicalAssessment().setVisible(true);
		}
		public void showtabPageReport()
		{
			tabPageForm().setVisible(false);
			tabPageAssessment().setVisible(false);
			tabPageGraphicalAssessment().setVisible(false);
			tabPageNone().setVisible(false);
			tabPageReport().setVisible(true);
		}
		public void showtabPageNone()
		{
			tabPageForm().setVisible(false);
			tabPageAssessment().setVisible(false);
			tabPageGraphicalAssessment().setVisible(false);
			tabPageReport().setVisible(false);
			tabPageNone().setVisible(true);
		}

		public tabPageFormContainer tabPageForm()
		{
			return (tabPageFormContainer)super.layers.get(0);
		}
		public tabPageAssessmentContainer tabPageAssessment()
		{
			return (tabPageAssessmentContainer)super.layers.get(1);
		}
		public tabPageGraphicalAssessmentContainer tabPageGraphicalAssessment()
		{
			return (tabPageGraphicalAssessmentContainer)super.layers.get(2);
		}
		public tabPageReportContainer tabPageReport()
		{
			return (tabPageReportContainer)super.layers.get(3);
		}
		public tabPageNoneContainer tabPageNone()
		{
			return (tabPageNoneContainer)super.layers.get(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(808, 568);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrMainLayer m_lyrMainLayer = (lyrMainLayer)LayerFlyweightFactory.getInstance().createLayer(lyrMainLayer.class, this, factory);
		super.addLayer(m_lyrMainLayer);
		m_lyrMainLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 728, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 6018), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 648, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 6017), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 88, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 6015), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 544, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 6014), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 568, 547, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 6016), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Complete", Boolean.TRUE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrMainLayer lyrMain()
	{
		return (lyrMainLayer)super.getLayer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(7);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(8);
	}
	public CheckBox chkComplete()
	{
		return (CheckBox)super.getControl(9);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				SelectandOrder = new LocalFormName(116112);
			}
			public final FormName SelectandOrder;
		}

		public OCRRForms OCRR;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				InfoDisabled16 = new ImageHelper(102533, "Images/Core/info_disabled_16.png", new Integer(16), new Integer(16));
				InfoEnabled16 = new ImageHelper(102532, "Images/Core/info_enabled_16.png", new Integer(16), new Integer(16));
				HelpDisabled16 = new ImageHelper(102535, "Images/Core/help_disabled_16.png", new Integer(16), new Integer(16));
				HelpEnabled16 = new ImageHelper(102534, "Images/Core/help_enabled_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image InfoDisabled16;
			public final ims.framework.utils.Image InfoEnabled16;
			public final ims.framework.utils.Image HelpDisabled16;
			public final ims.framework.utils.Image HelpEnabled16;
		}
		public final CoreImages Core;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PatientICPAction = new ims.framework.ContextVariable("PatientICPAction", prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__PatientICPAction_" + componentIdentifier + "");
			cxl_UserHasEditRights = new ims.framework.ContextVariable("UserHasEditRights", prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__UserHasEditRights_" + componentIdentifier + "");
			cxl_SelectedPatientAssessment = new ims.framework.ContextVariable("SelectedPatientAssessment", prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier + "");
			cxl_SelectedPatientGraphicalAssessment = new ims.framework.ContextVariable("SelectedPatientGraphicalAssessment", prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier + "");
			cxl_CareContext = new ims.framework.ContextVariable("CareContext", prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__CareContext_" + componentIdentifier + "");
			cxl_ClinicalContact = new ims.framework.ContextVariable("ClinicalContact", prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__ClinicalContact_" + componentIdentifier + "");
		}
		
		public boolean getPatientICPActionIsNotNull()
		{
			return !cxl_PatientICPAction.getValueIsNull(context);
		}
		public ims.icp.vo.PatientICPActionFullVo getPatientICPAction()
		{
			return (ims.icp.vo.PatientICPActionFullVo)cxl_PatientICPAction.getValue(context);
		}
		public void setPatientICPAction(ims.icp.vo.PatientICPActionFullVo value)
		{
			cxl_PatientICPAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientICPAction = null;
		public boolean getUserHasEditRightsIsNotNull()
		{
			return !cxl_UserHasEditRights.getValueIsNull(context);
		}
		public Boolean getUserHasEditRights()
		{
			return (Boolean)cxl_UserHasEditRights.getValue(context);
		}
		public void setUserHasEditRights(Boolean value)
		{
			cxl_UserHasEditRights.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UserHasEditRights = null;
		public boolean getSelectedPatientAssessmentIsNotNull()
		{
			return !cxl_SelectedPatientAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getSelectedPatientAssessment()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_SelectedPatientAssessment.getValue(context);
		}
		public void setSelectedPatientAssessment(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_SelectedPatientAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedPatientAssessment = null;
		public boolean getSelectedPatientGraphicalAssessmentIsNotNull()
		{
			return !cxl_SelectedPatientGraphicalAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getSelectedPatientGraphicalAssessment()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_SelectedPatientGraphicalAssessment.getValue(context);
		}
		public void setSelectedPatientGraphicalAssessment(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_SelectedPatientGraphicalAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedPatientGraphicalAssessment = null;
		public boolean getCareContextIsNotNull()
		{
			return !cxl_CareContext.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getCareContext()
		{
			return (ims.core.vo.CareContextShortVo)cxl_CareContext.getValue(context);
		}
		public void setCareContext(ims.core.vo.CareContextShortVo value)
		{
			cxl_CareContext.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CareContext = null;
		public boolean getClinicalContactIsNotNull()
		{
			return !cxl_ClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVo getClinicalContact()
		{
			return (ims.core.vo.ClinicalContactShortVo)cxl_ClinicalContact.getValue(context);
		}
		public void setClinicalContact(ims.core.vo.ClinicalContactShortVo value)
		{
			cxl_ClinicalContact.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClinicalContact = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[121];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__PatientICPAction_" + componentIdentifier, "BO-1100100004-ID", "ID_PatientICPAction");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__PatientICPAction_" + componentIdentifier, "BO-1100100004-PATIENT", "Patient");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__PatientICPAction_" + componentIdentifier, "BO-1100100004-CARECONTEXT", "CareContext");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__PatientICPAction_" + componentIdentifier, "BO-1100100004-ICP", "ICP");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__PatientICPAction_" + componentIdentifier, "BO-1100100004-COMPLETEDONDATE", "CompletedOnDate");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__PatientICPAction_" + componentIdentifier, "BO-1100100004-PARENTPHASE", "ParentPhase");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__PatientICPAction_" + componentIdentifier, "BO-1100100004-REQUIRESCOUNTERSIGNING", "RequiresCounterSigning");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientAssessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__SelectedPatientGraphicalAssessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-CONTEXT", "Context");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__CareContext_" + componentIdentifier, "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-ID", "ID_ClinicalContact");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-SPECIALTY", "Specialty");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-CARECONTEXT", "CareContext");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPActionLinkedDetailsComponent.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
