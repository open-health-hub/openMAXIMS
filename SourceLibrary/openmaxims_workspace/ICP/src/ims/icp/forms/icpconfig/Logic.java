//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.71 build 3714.19498)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.icp.forms.icpconfig;

import ims.admin.vo.BusinessRuleVo;
import ims.admin.vo.BusinessRuleVoCollection;
import ims.assessment.vo.GraphicAssessmentLiteVo;
import ims.assessment.vo.UserAssessmentLiteVo;
import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AppFormLiteVo;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffLiteVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.HcpDisTypeCollection;
import ims.core.vo.lookups.ICPCompLinkedType;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.icp.forms.icpconfig.GenForm.ctnConfigurationContainer.lyrICPTabsLayer.ICPContainer.grdICPProceduresRow;
import ims.icp.forms.icpconfig.GenForm.ctnConfigurationContainer.lyrICPTabsLayer.PhaseContainer.grdPhaseGoalsRow;
import ims.icp.forms.icpconfig.GenForm.ctnConfigurationContainer.lyrICPTabsLayer.PhaseContainer.grdPhaseRulesRow;
import ims.icp.forms.icpconfig.GenForm.ctnConfigurationContainer.lyrICPTabsLayer.StageContainer.grdStageRulesRow;
import ims.icp.vo.ICPActionLiteVo;
import ims.icp.vo.ICPActionLiteVoCollection;
import ims.icp.vo.ICPActionShortVo;
import ims.icp.vo.ICPConfigurationDisplayVo;
import ims.icp.vo.ICPFullVo;
import ims.icp.vo.ICPLiteVo;
import ims.icp.vo.ICPLiteVoCollection;
import ims.icp.vo.ICPPhaseDisplayVo;
import ims.icp.vo.ICPPhaseDisplayVoCollection;
import ims.icp.vo.ICPPhaseFullVo;
import ims.icp.vo.ICPPhaseLiteVo;
import ims.icp.vo.ICPPhaseLiteVoCollection;
import ims.icp.vo.ICPPhaseShortVo;
import ims.icp.vo.ICPPhaseVo;
import ims.icp.vo.ICPShortVo;
import ims.icp.vo.ICPStageDisplayVo;
import ims.icp.vo.ICPStageDisplayVoCollection;
import ims.icp.vo.ICPStageFullVo;
import ims.icp.vo.ICPStageLiteVo;
import ims.icp.vo.ICPStageLiteVoCollection;
import ims.icp.vo.ICPStageShortVo;
import ims.icp.vo.ICPStageVo;
import ims.icp.vo.ICPVo;
import ims.icp.vo.IcpPhaseGoalVo;
import ims.icp.vo.IcpPhaseGoalVoCollection;
import ims.icps.configuration.vo.ICPActionRefVo;
import ims.icps.configuration.vo.ICPPhaseRefVo;
import ims.icps.configuration.vo.ICPRefVo;
import ims.icps.configuration.vo.ICPStageRefVo;
import ims.ocrr.vo.OrderEntryTemplateLiteVo;
import ims.vo.interfaces.IActionICPLinkedItem;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Static final variables
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	private static final Boolean EXPANDED = Boolean.TRUE;

	private static final int ACTION_SAVE_NEW_ICP = 0;
	private static final int ACTION_SAVE_EDIT_ICP = 1;
	private static final int ACTION_SAVE_CLONE_ICP = 2;
	private static final int ACTION_SAVE_ADD_STAGE = 3;
	private static final int ACTION_SAVE_EDIT_STAGE = 4;
	private static final int ACTION_SAVE_CLONE_STAGE = 5;
	private static final int ACTION_SAVE_ADD_PHASE = 6;
	private static final int ACTION_SAVE_EDIT_PHASE = 7;
	private static final int ACTION_SAVE_CLONE_PHASE = 8;
	private static final int ACTION_SAVE_ADD_ACTION = 9;
	private static final int ACTION_SAVE_EDIT_ACTION = 10;

	private static final int MB_INACTIVATE_ITEM = 1;

	private static final int ACTION_GOAL_NEW = 1;
	private static final int ACTION_GOAL_EDIT = 2;

	private static final int ACTION_BUSINESS_RULE_NEW = 1;
	private static final int ACTION_BUSINESS_RULE_EDIT = 2;

	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - Event Handlers
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Handler for FormOpen event
	 * Initialize the form and populate it with default data
	 */
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialize the form
		initialize();

		// Refresh the form
		open();
	}

	/**
	 * Handler for FormModeChanged event Update controls and context menu state
	 */
	protected void onFormModeChanged()
	{
		// Update controls and context menu state
		updateControlsState();
	}

	/**
	 * Handler for FormDialogClosed event
	 */
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (DialogResult.OK.equals(result) && (form.getForms().Core.SelectForm.equals(formName) || form.getForms().Core.SelectAssessment.equals(formName) || form.getForms().Core.SelectGraphicalAssessment.equals(formName) || form.getForms().ICP.SelectOrderEntryTemplate.equals(formName)))
		{
			setLinkedItem(form.getGlobalContext().ICP.getLinkedItem());
		}

		if (DialogResult.OK.equals(result) && form.getForms().ICP.ICPGoal.equals(formName))
		{
			// Update or add row with Phase Goal value
			updatePhaseGoal(form.getGlobalContext().ICP.getIcpPhaseGoal());

			// Clear local context action
			form.getLocalContext().setGoalAction(null);

			// Clear goal global context
			form.getGlobalContext().ICP.setIcpPhaseGoal(null);
		}

		if (DialogResult.OK.equals(result) && form.getForms().ICP.ICPRulesEditorDialog.equals(formName))
		{
			// Update (or add) row with ICP Action for Stage or Phase
			updateStagePhaseRule(form.getGlobalContext().ICP.RulesEditorDialog.getRule());

			// Clear local context action
			form.getLocalContext().setBusinessRuleAction(null);

			// Clear all rule global contexts
			form.getGlobalContext().Rules.setRuleToEdit(null);
			form.getGlobalContext().ICP.RulesEditorDialog.setRule(null);
		}
		
		if (form.getForms().ICP.ICPStageSelectDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			// Clone stage selected for cloning into current selected ICP
			cloneSelectedStage(form.getGlobalContext().ICP.getStageForCloning());
			
			// Clear selected stage global context
			form.getGlobalContext().ICP.setStageForCloning(null);
			
			// Refresh the screen
			open();
		}
		
		if (form.getForms().ICP.ICPPhaseSelectDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			// Clone phase selected for cloning into current selected stage
			cloneSelectedPhase(form.getGlobalContext().ICP.getPhaseForCloning());
			
			// Clear selected stage global context
			form.getGlobalContext().ICP.setPhaseForCloning(null);
			
			// Refresh the screen
			open();
		}

		updateControlsState();
	}


	/**
	 * Handler for MessageBoxClosed event
	 */
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (new Integer(MB_INACTIVATE_ITEM).equals(form.getLocalContext().getMessageBoxOpened()) && DialogResult.YES.equals(result))
		{
			inactivateItem(form.getLocalContext().getSelectedItem());
		}

		form.getLocalContext().setMessageBoxOpened(null);
	}

	/**
	 * Handler for ImageButtonFindClick event Perform search, populate tree with
	 * results, clear instance controls, clear local context
	 */
	protected void onImbFindClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Perform search
		ICPLiteVoCollection listICP = domain.listICP(form.txtName().getValue(), form.cmbStatus().getValue(), form.cmbCategory().getValue(), form.cmbSpeciality().getValue(), form.qmbContactPerson().getValue(), form.dteDateCreated().getValue());
		
		// Display error message if there are no results found
		if (listICP == null || listICP.size() == 0)
			engine.showMessage("No search results were found");
		
		// Populate tree with search result
		populateTreeICPNodes(listICP);

		// Clear local context for selected items
		form.getLocalContext().setSelectedItemParrent(null);
		form.getLocalContext().setSelectedItem(null);

		// Clear instance controls
		clearInstanceControls();

		// Update controls state
		updateControlsState();
	}

	/**
	 * Handler for ImageButtonClearClick event Clears search filters controls
	 */
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear tree and instance controls
		clear();

		// Clear local context for selected items
		form.getLocalContext().setSelectedItemParrent(null);
		form.getLocalContext().setSelectedItem(null);

		// Update controls state
		updateControlsState();
	}

	/**
	 * Handler for QueryComboBoxContactPersonTextSubmited event Populates the
	 * query combobox with values returned by the search
	 */
	protected void onQmbContactPersonTextSubmited(String value) throws PresentationLogicException
	{
		populateContactPerson(domain.listContactPersons(value));
	}

	/**
	 * Handler for TreeNodeExpand event Retrieve the Short VO version for
	 * ICPStages if the expanded node is an ICP and populate the child nodes
	 * Retrieve the Short VO version for ICPPhases if the expanded node is an
	 * ICPStage and populate the child nodes
	 */
	protected void onTreICPListTreeViewNodeExpandCollapse(TreeNode node) throws PresentationLogicException
	{
		// If node is already expanded skip
		if (EXPANDED.equals(node.getIdentifier()))
			return;

		// Get LITE version for leafs
		if (node.getValue() instanceof ICPLiteVo)
		{
			populateTreeICPStageNodes(node, domain.listStages((ICPRefVo) node.getValue()));
			return;
		}

		if (node.getValue() instanceof ICPStageLiteVo)
		{
			populateTreeICPPhaseNodes(node, domain.listPhases((ICPStageRefVo) node.getValue()));
			return;
		}

		if (node.getValue() instanceof ICPPhaseLiteVo)
		{
			populateTreeICPActionNodes(node, domain.listActions((ICPPhaseRefVo) node.getValue()));
			return;
		}
	}

	/**
	 * Handler for Tree Selection Clear event Clear selected item context and
	 * update controls state
	 */
	protected void onTreICPListTreeViewSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear local context - selected item
		form.getLocalContext().setSelectedItem(null);
		form.getLocalContext().setSelectedItemParrent(null);

		form.getLocalContext().setSelectedICP(null);

		// Clear instance controls
		clearInstanceControls();

		// Update controls state
		updateControlsState();
	}

	/**
	 * Handler for Tree Selection Changed event Retrieve the Short VO for
	 * selected item, populate the local context and instance controls
	 */
	protected void onTreICPListTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		// Set local context - selected item
		form.getLocalContext().setSelectedItem(domain.getItem(form.treICPList().getValue()));

		// Set local context - selected item parent
		if (node.getParent() != null)
		{
			form.getLocalContext().setSelectedItemParrent(domain.getItem(node.getParent().getValue()));
		}
		else
		{
			form.getLocalContext().setSelectedItemParrent(null);
		}

		// Set local context - selected ICP
		do
		{
			if (node.getValue() instanceof ICPRefVo)
				form.getLocalContext().setSelectedICP((ICPRefVo) node.getValue());

			node = node.getParent();
		}
		while (node != null);

		// Populate instance controls
		populateInstanceControls(form.getLocalContext().getSelectedItem());

		// Update controls state
		updateControlsState();
	}

	/**
	 * Handler for Button New Click event
	 */
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Set action - NEW ICP
		form.getLocalContext().setAction(ACTION_SAVE_NEW_ICP);

		// Call function to create a new instance
		newInstance();
	}

	/**
	 * Handler for ButtonEditClick event
	 */
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Set action - depending on selected item
		setEditAction(form.getLocalContext().getSelectedItem());

		// Edit current selected object
		updateInstance();
	}

	/**
	 * Handler for ButtonSaveClick event If a successful save is performed
	 * refresh the screen
	 */
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			open();
		}
	}

	/**
	 * Handler for ButtonCancelClick event Refresh the screen
	 */
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Refresh the screen
		open();
	}

	/**
	 * Function used to determine the type of object we are editing
	 * 
	 * @param selectedItem
	 */
	private void setEditAction(Object selectedItem)
	{
		// Determine what we are editing

		if (selectedItem instanceof ICPRefVo)
		{
			form.getLocalContext().setAction(ACTION_SAVE_EDIT_ICP);
		}
		else if (selectedItem instanceof ICPStageRefVo)
		{
			form.getLocalContext().setAction(ACTION_SAVE_EDIT_STAGE);
		}
		else if (selectedItem instanceof ICPPhaseRefVo)
		{
			form.getLocalContext().setAction(ACTION_SAVE_EDIT_PHASE);
		}
		else if (selectedItem instanceof ICPActionRefVo)
		{
			form.getLocalContext().setAction(ACTION_SAVE_EDIT_ACTION);
		}

	}

	/**
	 * On ICP Procedures Grid Selection Changed event handler
	 */
	protected void onGrdICPProceduresSelectionChanged()
	{
		updateControlsState();
	}

	/**
	 * On ICP Procedures Grid Selection Cleared event handler
	 */
	protected void onGrdICPProceduresSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}

	/**
	 * On ICP Procedures Grid Query Combobox Text Submitted event handler
	 */
	protected void onGrdICPProceduresGridQueryComboBoxTextSubmited(int column, GenForm.ctnConfigurationContainer.lyrICPTabsLayer.ICPContainer.grdICPProceduresRow row, String text) throws ims.framework.exceptions.PresentationLogicException
	{
		populateICPProcedures(row, domain.listProcedures(text));
	}

	/**
	 * On ICP Procedures Grid Combobox Value Changed
	 */
	protected void onGrdICPProceduresMutableComboBoxSelected(int column, grdICPProceduresRow row, Object value) throws PresentationLogicException
	{
		// Set row value from combobox
		row.setValue(value instanceof ProcedureLiteVo ? (ProcedureLiteVo) value : null);
	}

	/**
	 * On ICP Contacts Query Combobox Text Submitted
	 */
	protected void onQmbICPContactPersonTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateICPContactPersons(domain.listContactPersons(value));
	}

	/**
	 * On ICP Diagnosis Query Combobox Text Submitted
	 */
	protected void onQmbICPDiagnosisTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateICPDiagnosis(domain.listDiagnosis(value));
	}
	

	/**
	 * On ICP Problem Query Combobox Text Submitted
	 */
	protected void onQmbICPProblemTextSubmited(String value) throws PresentationLogicException
	{
		populateICPProblems(domain.listProblems(value));
	}


	/**
	 * On ICP Stage Grid Rules Selection Changed
	 */
	protected void onGrdStageRulesSelectionChanged()
	{
		updateControlsState();
	}

	/**
	 * On ICP Stage Grid Rules Selection Cleared
	 */
	protected void onGrdStageRulesSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}

	/**
	 * On ICP Phase Grid Rules Selection Changed
	 */
	protected void onGrdPhaseRulesSelectionChanged()
	{
		updateControlsState();
	}

	/**
	 * On ICP Phase Grid Rules Selection Cleared
	 */
	protected void onGrdPhaseRulesSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}

	/**
	 * On ICP Phase Grid Goals Selection Changed
	 */
	protected void onGrdPhaseGoalsSelectionChanged()
	{
		updateControlsState();
	}

	/**
	 * On ICP Phase Grid Goals Selection Cleared
	 */
	protected void onGrdPhaseGoalsSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}

	/**
	 * On ICP Action Button Linked Click event handler
	 */
	protected void onBtnActionBrowseLinkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (ICPCompLinkedType.FORM.equals(form.ctnConfiguration().lyrICPTabs().Action().cmbActionLinkedType().getValue()))
		{
			engine.open(form.getForms().Core.SelectForm, new Object[] { Boolean.FALSE });
		}
		else if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(form.ctnConfiguration().lyrICPTabs().Action().cmbActionLinkedType().getValue()))
		{
			engine.open(form.getForms().Core.SelectGraphicalAssessment);
		}
		else if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(form.ctnConfiguration().lyrICPTabs().Action().cmbActionLinkedType().getValue()))
		{
			engine.open(form.getForms().Core.SelectAssessment);
		}
		else if (ICPCompLinkedType.ORDER_TEMPLATE.equals(form.ctnConfiguration().lyrICPTabs().Action().cmbActionLinkedType().getValue()))
		{
			engine.open(form.getForms().ICP.SelectOrderEntryTemplate);
		}
	}

	/**
	 * On ICP Action Combobox Liked Type Value Changed event handler
	 */
	protected void onCmbActionLinkedTypeValueChanged() throws PresentationLogicException
	{
		// Clear the linked item text box & global context
		setLinkedItem(null);

		// Update controls state
		updateControlsState();
	}

	/**
	 * On ICP Action Link Button Click event handler
	 */
	protected void onBtnLinkActionsClick() throws PresentationLogicException
	{
		// Check behaviour when the ICP Action is newly created
		
		// Create parameters array to be passed to dialog
		Object[] params = {form.getLocalContext().getSelectedICP(), form.getLocalContext().getSelectedItem(), form.getMode()};
		
		// Open dialog to link action to current ICP Action
		engine.open(form.getForms().ICP.ICPConfigLinkActions, params, false);
	}

	/**
	 * On Context Menu Item Clicked event handler
	 */
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			// New ICP - set action to be taken on save and call newInstance()
			// function
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.NEWICP:
				form.getLocalContext().setAction(ACTION_SAVE_NEW_ICP);
				newInstance();
				break;

			// Edit ICP - set action to be taken on save and call
			// updateInstance() function
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.EDITICP:
				form.getLocalContext().setAction(ACTION_SAVE_EDIT_ICP);
				updateInstance();
				break;

			case GenForm.ContextMenus.ICPNamespace.IcpMenu.CLONEICP:
				form.getLocalContext().setAction(ACTION_SAVE_CLONE_ICP);
				cloneInstance();
				break;

			// Inactivate ICP - set action to be taken on save
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.REMOVEICP:
				inactivateICP();
				break;

			// Add new ICP Stage - set action to be taken on save and call
			// newInstance() function
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.ADDSTAGE:
				form.getLocalContext().setAction(ACTION_SAVE_ADD_STAGE);
				newInstance();
				break;

			// Edit ICP Stage - set action to be taken on save and call
			// updateInstance() function
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.EDITSTAGE:
				form.getLocalContext().setAction(ACTION_SAVE_EDIT_STAGE);
				updateInstance();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.CLONESTAGE:
				form.getLocalContext().setAction(ACTION_SAVE_CLONE_STAGE);
				cloneStage();
				break;

			// Inactivate ICP Stage
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.REMOVESTAGE:
				inactivateICPStage();
				break;

			// Add new ICP Phase - set action to be taken on save and call
			// newInstance() function
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.ADDPHASE:
				form.getLocalContext().setAction(ACTION_SAVE_ADD_PHASE);
				newInstance();
				break;

			// Edit ICP Phase - set action to be taken on save and call
			// updateInstance() function
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.EDITPHASE:
				form.getLocalContext().setAction(ACTION_SAVE_EDIT_PHASE);
				updateInstance();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.CLONEPHASE:
				form.getLocalContext().setAction(ACTION_SAVE_CLONE_PHASE);
				clonePhase();
				break;

			// Inactivate ICP Phase
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.REMOVEPHASE:
				inactivateICPPhase();
				break;

			// Add new ICP Action - set action to be taken on save and call
			// newInstance() function
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.ADDACTION:
				form.getLocalContext().setAction(ACTION_SAVE_ADD_ACTION);
				newInstance();
				break;

			// Edit ICP Action - set action to be taken on save and call
			// updateInstance() function
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.EDITACTION:
				form.getLocalContext().setAction(ACTION_SAVE_EDIT_ACTION);
				updateInstance();
				break;

			// Inactivate ICP Action
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.REMOVEACTION:
				inactivateICPAction();
				break;

			// Move item (Stage, Phase, Action) up
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.MOVEUP:
				moveItemUP();
				break;

			// Move item (Stage, Phase, Action) down
			case GenForm.ContextMenus.ICPNamespace.IcpMenu.MOVEDOWN:
				moveItemDOWN();
				break;

			// Add procedure row to Procedures grid in ICP tab
			case GenForm.ContextMenus.ICPNamespace.ICPConfigurationProcedures.AddProcedure:
				addICPProcedureGridRow();
				break;

			// Remove procedure row to Procedures grid in ICP tab
			case GenForm.ContextMenus.ICPNamespace.ICPConfigurationProcedures.RemoveProcedure:
				removeICPProcedureGridRow();
				break;

			// Add open business rule editor dialog
			case GenForm.ContextMenus.ICPNamespace.ICPSearchStageRules.Add:
				addBussinessRule();
				break;

			case GenForm.ContextMenus.ICPNamespace.ICPSearchStageRules.Edit:
				editBussinessRule();
				break;

			case GenForm.ContextMenus.ICPNamespace.ICPSearchStageRules.Remove:
				removeBusinessRule();
				break;

			case GenForm.ContextMenus.ICPNamespace.ICPSearchStageRules.RemoveAll:
				removeAllBusinessRules();
				break;

			case GenForm.ContextMenus.ICPNamespace.PhaseGoals.ADDGOAL:
				addPhaseGoal();
				break;

			case GenForm.ContextMenus.ICPNamespace.PhaseGoals.EDITGOAL:
				editPhaseGoal();
				break;
		}

		updateControlsState();
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Form presentation functions
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to initialize the form - will only be called once from
	 * OnFromOpen event
	 */
	public void initialize() throws FormOpenException
	{
		// Initialize ICP discipline comboboxes - keep only the parent nodes
		initializeICPActionDisciplineComboBox();

		// Initialize PreActiveActive status comboboxes - remove the inactive
		// status
		initializeStatus();

		// Initialize Linked type combobox - remove Notification
		initializeLinkedType();

		// Initialize context menu
		initializeContextMenus();
	}

	/**
	 * Function used to initialize Linked Type combobox 
	 * Will remove the NOTIFICATION value
	 */

	private void initializeLinkedType()
	{
		form.ctnConfiguration().lyrICPTabs().Action().cmbActionLinkedType().removeRow(ICPCompLinkedType.NOTIFICATION);
	}

	/**
	 * Function used to initialize the PreactiveActiveInactive status Will
	 * remove the inactive status from combobox
	 */
	private void initializeStatus()
	{
		form.ctnConfiguration().lyrICPTabs().ICP().cmbICPStatus().removeRow(PreActiveActiveInactiveStatus.INACTIVE);
		form.ctnConfiguration().lyrICPTabs().Stage().cmbStageStatus().removeRow(PreActiveActiveInactiveStatus.INACTIVE);
		form.ctnConfiguration().lyrICPTabs().Phase().cmbPhaseStatus().removeRow(PreActiveActiveInactiveStatus.INACTIVE);
		form.ctnConfiguration().lyrICPTabs().Action().cmbActionStatus().removeRow(PreActiveActiveInactiveStatus.INACTIVE);
	}

	/**
	 * Function used to initialize the ICP Action Discipline combobox Will only
	 * permit selection of top level ICP Action discipline
	 */
	private void initializeICPActionDisciplineComboBox()
	{
		// Clear disciplines from check list
		form.ctnConfiguration().lyrICPTabs().Action().chklistActionDiscipline().clear();
		
		// Get all the values for ICP Action discipline
		HcpDisTypeCollection disciplines = LookupHelper.getHcpDisType(domain.getLookupService());

		if (disciplines == null)
			return;
		
		// Populate the check list with discipline
		for (int i = 0; i < disciplines.size(); i++)
		{
			HcpDisType discipline = disciplines.get(i);
			
			// Skip null disciplines or disciplines that are not root nodes
			if (discipline == null || discipline.getParent() != null)
				continue;
			
			form.ctnConfiguration().lyrICPTabs().Action().chklistActionDiscipline().newRow(discipline);
		}
	}

	/**
	 * Function used to initialize the context menus used on form
	 */
	private void initializeContextMenus()
	{
		// Tree context menu
		form.getContextMenus().ICP.hideAllIcpMenuMenuItems();
		// ICP procedures context menu
		form.getContextMenus().ICP.hideAllICPConfigurationProceduresMenuItems();
	}

	/**
	 * Function used to refresh the screen Will clear the screen and populate
	 * with selected ICP (if any) and reselect last item selected (if any)
	 */
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen
		clear();

		// Populate tree with latest edited ICP
		populateTreeFullICP(domain.getDisplayICP(form.getLocalContext().getSelectedICP()));

		// Reselect latest selected item && refresh local context
		form.treICPList().setValue(form.getLocalContext().getSelectedItem());

		form.getLocalContext().setSelectedItem(domain.getItem(form.treICPList().getValue()));
		if (form.treICPList().getSelectedNode() != null && form.treICPList().getSelectedNode().getParent() != null)
		{
			form.getLocalContext().setSelectedItemParrent(domain.getItem(form.treICPList().getSelectedNode().getParent().getValue()));
		}

		// Populate instance controls with selection
		populateInstanceControls(form.getLocalContext().getSelectedItem());

		// Clear all actions
		form.getLocalContext().setAction(null);

		// Set form mode to VIEW
		form.setMode(FormMode.VIEW);
	}

	/**
	 * Function used to clear the screen
	 */
	public void clear()
	{
		clearSearchControls();

		form.treICPList().clear();

		clearInstanceControls();
	}

	/**
	 * Function used to clear search filters controls
	 */
	private void clearSearchControls()
	{
		// Clear name filter
		form.txtName().setValue(null);

		// Clear status, category, specialty filters (combobox - use
		// setValue(null))
		form.cmbStatus().setValue(null);
		form.cmbCategory().setValue(null);
		form.cmbSpeciality().setValue(null);

		// Clear contact person (query combobox - use clear() function)
		form.qmbContactPerson().clear();

		// Clear date created filter
		form.dteDateCreated().setValue(null);
	}

	/**
	 * Function used to clear instance controls
	 */
	public void clearInstanceControls()
	{
		clearInstanceControlsTabICP();

		clearInstanceControlsTabStage();

		clearInstanceControlsTabPhase();

		clearInstanceControlsTabAction();
	}

	/**
	 * Function used to clear instance controls on ICP Tab
	 */
	private void clearInstanceControlsTabICP()
	{
		// Clear ICP instance controls
		form.ctnConfiguration().lyrICPTabs().ICP().cmbICPSpecialty().setValue(null);
		form.ctnConfiguration().lyrICPTabs().ICP().qmbICPDiagnosis().clear();
		form.ctnConfiguration().lyrICPTabs().ICP().qmbICPProblem().clear();

		form.ctnConfiguration().lyrICPTabs().ICP().txtICPName().setValue(null);
		form.ctnConfiguration().lyrICPTabs().ICP().txtICPDescription().setValue(null);
		form.ctnConfiguration().lyrICPTabs().ICP().txtICPHelpUrl().setValue(null);

		form.ctnConfiguration().lyrICPTabs().ICP().dteICPCreationDate().setValue(null);
		form.ctnConfiguration().lyrICPTabs().ICP().qmbICPContactPerson().clear();
		form.ctnConfiguration().lyrICPTabs().ICP().cmbICPCategory().setValue(null);
		form.ctnConfiguration().lyrICPTabs().ICP().cmbICPStatus().setValue(null);

		form.ctnConfiguration().lyrICPTabs().ICP().grdICPProcedures().getRows().clear();
	}

	private void clearInstanceControlsTabAction()
	{
		// Clear ICP Action instance controls
		form.ctnConfiguration().lyrICPTabs().Action().intActionSequence().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Action().chklistActionDiscipline().setValues(null);

		form.ctnConfiguration().lyrICPTabs().Action().txtActionName().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Action().txtActionDescription().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Action().txtActionHelpUrl().setValue(null);

		form.ctnConfiguration().lyrICPTabs().Action().cmbActionStatus().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Action().cmbActionLinkedType().setValue(null);

		form.ctnConfiguration().lyrICPTabs().Action().chkActionMandatory().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Action().chkCounterSignature().setValue(null);

		setLinkedItem(null);
		
		form.getGlobalContext().ICP.setLinkedActions(null);
	}

	private void clearInstanceControlsTabPhase()
	{
		// Clear ICP Phase instance controls
		form.ctnConfiguration().lyrICPTabs().Phase().intPhaseSequence().setValue(null);

		form.ctnConfiguration().lyrICPTabs().Phase().txtPhaseName().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Phase().txtPhaseDescription().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Phase().txtPhaseHelpUrl().setValue(null);

		form.ctnConfiguration().lyrICPTabs().Phase().cmbPhaseStatus().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Phase().chkPhaseActivate().setValue(null);

		form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getRows().clear();
		form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().getRows().clear();
	}

	private void clearInstanceControlsTabStage()
	{
		// Clear ICP Stage instance controls
		form.ctnConfiguration().lyrICPTabs().Stage().intStageSequence().setValue(null);

		form.ctnConfiguration().lyrICPTabs().Stage().txtStageName().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Stage().txtStageDescription().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Stage().txtStageHelpUrl().setValue(null);

		form.ctnConfiguration().lyrICPTabs().Stage().cmbStageStatus().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Stage().chkStageHasPhases().setValue(null);
		form.ctnConfiguration().lyrICPTabs().Stage().chkStageActivate().setValue(null);

		form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getRows().clear();
	}

	/**
	 * Function used to update controls state
	 */
	public void updateControlsState()
	{
		// Update layer visibility
		updateVisibleLayer(form.getLocalContext().getSelectedItem());

		form.ctnConfiguration().setCollapsed(!FormMode.EDIT.equals(form.getMode()) && !form.getLocalContext().getSelectedItemIsNotNull());

		// REGION - Update controls state different for each form mode
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible((form.treICPList().getValue() instanceof ICPLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPLiteVo) form.treICPList().getValue()).getStatus())) || (form.treICPList().getValue() instanceof ICPStageLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPStageLiteVo) form.treICPList().getValue()).getStatus())) || (form.treICPList().getValue() instanceof ICPPhaseLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPPhaseLiteVo) form.treICPList().getValue()).getStatus())) || (form.treICPList().getValue() instanceof ICPActionLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPActionLiteVo) form.treICPList().getValue()).getStatus())));
		}
		else
		{
			form.ctnConfiguration().lyrICPTabs().Stage().chkStageHasPhases().setEnabled(!(form.getLocalContext().getSelectedItem() instanceof ICPStageVo && ((ICPStageVo) form.getLocalContext().getSelectedItem()).getPhasesIsNotNull() && ((ICPStageVo) form.getLocalContext().getSelectedItem()).getPhases().size() > 0));

			form.ctnConfiguration().lyrICPTabs().Action().btnActionBrowseLink().setEnabled(form.ctnConfiguration().lyrICPTabs().Action().cmbActionLinkedType().getValue() != null && !ICPCompLinkedType.NONE.equals(form.ctnConfiguration().lyrICPTabs().Action().cmbActionLinkedType().getValue()));
		}

		// REGION - Update context menu state
		updateContextMenuState();
	}

	/**
	 * Function used to identify and display only the tab needed
	 * 
	 * @param selectedItem
	 */
	private void updateVisibleLayer(Object selectedItem)
	{
		// Hide all layers and tab headers
		form.ctnConfiguration().lyrICPTabs().hide();

		form.ctnConfiguration().lyrICPTabs().ICP().setHeaderVisible(false);
		form.ctnConfiguration().lyrICPTabs().Stage().setHeaderVisible(false);
		form.ctnConfiguration().lyrICPTabs().Phase().setHeaderVisible(false);
		form.ctnConfiguration().lyrICPTabs().Action().setHeaderVisible(false);

		// Keep the next part of code as it is until the .showTab() function for layer control is changed to accept a boolean parameter (Framework issue)

		// Conditions
		boolean formEditMode = FormMode.EDIT.equals(form.getMode());
		Integer action = form.getLocalContext().getAction();

		// Test if selected item is an ICP or if we create/edit an ICP
		if ((!formEditMode && (selectedItem instanceof ICPVo || selectedItem == null)) || (formEditMode && (new Integer(ACTION_SAVE_NEW_ICP).equals(action) || new Integer(ACTION_SAVE_EDIT_ICP).equals(action))))
		{
			// Show ICP tab and header
			form.ctnConfiguration().lyrICPTabs().showICP();
			form.ctnConfiguration().lyrICPTabs().ICP().setHeaderVisible(true);

			// Exit the function to save execution time
			return;
		}

		// Test if selected item is an ICPStage or if we create/edit an ICPStage
		if (selectedItem instanceof ICPStageVo || (formEditMode && new Integer(ACTION_SAVE_ADD_STAGE).equals(action)))
		{
			// Show ICP Stage tab and header
			form.ctnConfiguration().lyrICPTabs().showStage();
			form.ctnConfiguration().lyrICPTabs().Stage().setHeaderVisible(true);

			// Exit the function to save execution time
			return;
		}

		// Test if selected item is an ICPPhase or if we create/edit an ICPPhase
		if (selectedItem instanceof ICPPhaseVo || (formEditMode && new Integer(ACTION_SAVE_ADD_PHASE).equals(action)))
		{
			// Show ICP Phase tab and header
			form.ctnConfiguration().lyrICPTabs().showPhase();
			form.ctnConfiguration().lyrICPTabs().Phase().setHeaderVisible(true);

			// Exit the function to save execution time
			return;
		}

		// Test if selected item is an ICPAction or if we create/edit an
		// ICPAction
		if (selectedItem instanceof ICPActionShortVo || (formEditMode && new Integer(ACTION_SAVE_ADD_ACTION).equals(action)))
		{
			// Show ICP Action tab and header
			form.ctnConfiguration().lyrICPTabs().showAction();
			form.ctnConfiguration().lyrICPTabs().Action().setHeaderVisible(true);

			// Exit the function to save execution time
			return;
		}
	}

	/**
	 * Function used to update the state of context menu options
	 */
	private void updateContextMenuState()
	{
		boolean formModeView = FormMode.VIEW.equals(form.getMode());
		Object treeSelection = form.treICPList().getValue();

		// ICP Context menu options
		// New ICP
		form.getContextMenus().ICP.getIcpMenuNEWICPItem().setVisible(formModeView);
		// Edit ICP
		form.getContextMenus().ICP.getIcpMenuEDITICPItem().setVisible(formModeView && treeSelection instanceof ICPLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPLiteVo) treeSelection).getStatus()));
		// Clone ICP
		form.getContextMenus().ICP.getIcpMenuCLONEICPItem().setVisible(formModeView && treeSelection instanceof ICPLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPLiteVo) treeSelection).getStatus()));
		// Inactivate ICP
		form.getContextMenus().ICP.getIcpMenuREMOVEICPItem().setVisible(formModeView && treeSelection instanceof ICPLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPLiteVo) treeSelection).getStatus()));

		// Add new ICP Stage
		form.getContextMenus().ICP.getIcpMenuADDSTAGEItem().setVisible(formModeView && treeSelection instanceof ICPLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPLiteVo) treeSelection).getStatus()));
		// Edit ICP Stage
		form.getContextMenus().ICP.getIcpMenuEDITSTAGEItem().setVisible(formModeView && treeSelection instanceof ICPStageLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPStageLiteVo) treeSelection).getStatus()));
		// Clone ICP Stage
		form.getContextMenus().ICP.getIcpMenuCLONESTAGEItem().setVisible(formModeView && treeSelection instanceof ICPLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPLiteVo) treeSelection).getStatus()));
		// Inactivate ICP Stage
		form.getContextMenus().ICP.getIcpMenuREMOVESTAGEItem().setVisible(formModeView && treeSelection instanceof ICPStageLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPStageLiteVo) treeSelection).getStatus()));

		// Add new ICP Phase
		form.getContextMenus().ICP.getIcpMenuADDPHASEItem().setVisible(formModeView && treeSelection instanceof ICPStageLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPStageLiteVo) treeSelection).getStatus()) && Boolean.TRUE.equals(((ICPStageLiteVo) treeSelection).getHasPhase()));
		// Edit ICP Phase
		form.getContextMenus().ICP.getIcpMenuEDITPHASEItem().setVisible(formModeView && treeSelection instanceof ICPPhaseLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPPhaseLiteVo) treeSelection).getStatus()));
		// Clone ICP Phase
		form.getContextMenus().ICP.getIcpMenuCLONEPHASEItem().setVisible(formModeView && treeSelection instanceof ICPStageLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPStageLiteVo) treeSelection).getStatus()) && Boolean.TRUE.equals(((ICPStageLiteVo) treeSelection).getHasPhase()));
		// Inactivate ICP Phase
		form.getContextMenus().ICP.getIcpMenuREMOVEPHASEItem().setVisible(formModeView && treeSelection instanceof ICPPhaseLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPPhaseLiteVo) treeSelection).getStatus()));

		// Add new ICP Action
		form.getContextMenus().ICP.getIcpMenuADDACTIONItem().setVisible(formModeView && treeSelection instanceof ICPPhaseLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPPhaseLiteVo) treeSelection).getStatus()));
		// Edit ICP Action
		form.getContextMenus().ICP.getIcpMenuEDITACTIONItem().setVisible(formModeView && treeSelection instanceof ICPActionLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPActionLiteVo) treeSelection).getStatus()));
		// Inactivate ICP Action
		form.getContextMenus().ICP.getIcpMenuREMOVEACTIONItem().setVisible(formModeView && treeSelection instanceof ICPActionLiteVo && !PreActiveActiveInactiveStatus.INACTIVE.equals(((ICPActionLiteVo) treeSelection).getStatus()));

		// Move up & down ICP Stages, Phases, Actions
		form.getContextMenus().ICP.getIcpMenuMOVEUPItem().setVisible(formModeView && treeSelection != null && !(treeSelection instanceof ICPLiteVo) && form.treICPList().canMoveCurrentUp());
		form.getContextMenus().ICP.getIcpMenuMOVEDOWNItem().setVisible(formModeView && treeSelection != null && !(treeSelection instanceof ICPLiteVo) && form.treICPList().canMoveCurrentDown());

		// ICP Procedures context menu options
		form.getContextMenus().ICP.getICPConfigurationProceduresAddProcedureItem().setVisible(!formModeView);

		form.getContextMenus().ICP.getICPConfigurationProceduresRemoveProcedureItem().setVisible(!formModeView && form.ctnConfiguration().lyrICPTabs().ICP().grdICPProcedures().getSelectedRow() != null);

		// ICP Stage rules context menu options
		form.getContextMenus().ICP.getICPSearchStageRulesAddItem().setVisible(!formModeView);

		form.getContextMenus().ICP.getICPSearchStageRulesRemoveAllItem().setVisible((!formModeView && form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getRows().size() > 0 && form.ctnConfiguration().lyrICPTabs().Stage().isVisible()) || (!formModeView && form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getRows().size() > 0 && form.ctnConfiguration().lyrICPTabs().Phase().isVisible()));

		form.getContextMenus().ICP.getICPSearchStageRulesEditItem().setVisible((!formModeView && form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getSelectedRow() != null && form.ctnConfiguration().lyrICPTabs().Stage().isVisible()) || (!formModeView && form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getRows().size() > 0 && form.ctnConfiguration().lyrICPTabs().Phase().isVisible()));

		form.getContextMenus().ICP.getICPSearchStageRulesRemoveItem().setVisible((!formModeView && form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getSelectedRow() != null && form.ctnConfiguration().lyrICPTabs().Stage().isVisible()) || (!formModeView && form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getRows().size() > 0 && form.ctnConfiguration().lyrICPTabs().Phase().isVisible()));

		// ICP Phase goals context menu options
		form.getContextMenus().ICP.getPhaseGoalsADDGOALItem().setVisible(!formModeView);

		form.getContextMenus().ICP.getPhaseGoalsEDITGOALItem().setVisible(!formModeView && form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().getSelectedRow() != null);
	}

	/**
	 * Function used to create a new instance (ICP, ICPStage, ICPPhase, ICPAction)
	 */
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialize status
		initializeStatus();

		// Clear instance controls
		clearInstanceControls();

		// If selected action is New ICP - clear selected item parent context
		if (new Integer(ACTION_SAVE_NEW_ICP).equals(form.getLocalContext().getAction()))
		{
			// Set parent item to null
			form.getLocalContext().setSelectedItemParrent(null);

			form.getLocalContext().setSelectedICP(null);
		}

		// If selected action is Add ICP Stage - set selected item parent context
		if (new Integer(ACTION_SAVE_ADD_STAGE).equals(form.getLocalContext().getAction()))
		{
			// Set parent item
			form.getLocalContext().setSelectedItemParrent(form.getLocalContext().getSelectedItem());

			// Check selected item parent
			if (!(form.getLocalContext().getSelectedItemParrent() instanceof ICPShortVo))
				throw new CodingRuntimeException("Major Logical Error - The ICP Stage parent must be an ICP");

			ICPShortVo parentICP = (ICPShortVo) form.getLocalContext().getSelectedItemParrent();

			form.ctnConfiguration().lyrICPTabs().Stage().intStageSequence().setValue(parentICP.getStagesIsNotNull() ? parentICP.getStages().size() + 1 : 1);
		}

		// If selected action is Add ICP Phase - set selected item parent context
		if (new Integer(ACTION_SAVE_ADD_PHASE).equals(form.getLocalContext().getAction()))
		{
			// Set parent item
			form.getLocalContext().setSelectedItemParrent(form.getLocalContext().getSelectedItem());

			// Check selected item parent
			if (!(form.getLocalContext().getSelectedItemParrent() instanceof ICPStageShortVo))
				throw new CodingRuntimeException("Major Logical Error - The ICP Phase parent must be an ICP Stage");

			ICPStageShortVo parentICPStage = (ICPStageShortVo) form.getLocalContext().getSelectedItemParrent();

			form.ctnConfiguration().lyrICPTabs().Phase().intPhaseSequence().setValue(parentICPStage.getPhasesIsNotNull() ? parentICPStage.getPhases().size() + 1 : 1);
		}

		// If selected action is Add ICP Action - set selected item parent
		// context
		if (new Integer(ACTION_SAVE_ADD_ACTION).equals(form.getLocalContext().getAction()))
		{
			// Set parent item
			form.getLocalContext().setSelectedItemParrent(form.getLocalContext().getSelectedItem());

			// Check selected item parent
			if (!(form.getLocalContext().getSelectedItemParrent() instanceof ICPPhaseShortVo))
				throw new CodingRuntimeException("Major Logical Error - The ICP Action parent must be an ICP Phase");

			ICPPhaseShortVo parentICPPhase = (ICPPhaseShortVo) form.getLocalContext().getSelectedItemParrent();

			form.ctnConfiguration().lyrICPTabs().Action().intActionSequence().setValue(parentICPPhase.getActionsIsNotNull() ? parentICPPhase.getActions().size() + 1 : 1);
		}

		// Clear selected item context
		form.getLocalContext().setSelectedItem(null);

		// Set form mode to EDIT
		form.setMode(FormMode.EDIT);
	}

	/**
	 * Function used to update an instance (ICP, ICPStage, ICPPhase, ICPAction)
	 */
	public void updateInstance()
	{
		// Initialize the status
		initializeStatus();

		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}

	public void cloneInstance() throws PresentationLogicException
	{
		try
		{
			// Initialize the status
			initializeStatus();

			if (!form.getLocalContext().getSelectedICPIsNotNull())
				return;

			// Get the full ICP clone
			ICPFullVo fullCloneICP = (ICPFullVo) domain.getFullICP(form.getLocalContext().getSelectedICP()).clone();

			// Remove the ID for selected ICP
			removeCloneID(fullCloneICP);
			
			// Validate ICP
			String[] errors = fullCloneICP.validate();
			
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return;
			}

			// Save the full ICP VO
			form.getLocalContext().setSelectedItem(domain.save(fullCloneICP));
			
			form.getLocalContext().setSelectedICP((ICPRefVo) form.getLocalContext().getSelectedItem());
			
			// Refresh screen
			open();
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			open();
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
		}
	}

	
	/**
	 *	WDEV-13773
	 *	Function used to select the stage to clone
	 */
	public void cloneStage()
	{
		engine.open(form.getForms().ICP.ICPStageSelectDialog);
	}

	/**
	 * WDEV-13773
	 * Function used to clone selected stage
	 */
	private void cloneSelectedStage(ICPStageRefVo stageForCloning)
	{
		try
		{
			// Check if selected node is an ICP
			if (form.getLocalContext().getSelectedItem() instanceof ICPShortVo)
			{
				ICPShortVo icp = (ICPShortVo) form.getLocalContext().getSelectedItem();
				// Get the full stage from domain
				ICPStageFullVo stage = domain.getICPStageFull(stageForCloning);

				// Prepare stage to be added to ICP
				// Remove the ID
				removeCloneID(stage, true, true);
				// Set phase sequence
				stage.setSequence(icp.getStages().size() + 1);
				
				String[] errors = icp.validate();
				errors = stage.validate(errors);

				// Add selected phase for cloning to the stage
				domain.addClonedStage(stage, icp);
			}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
		}	
	}

	/**
	 *	WDEV-13773
	 *	Function used to select the phase to clone
	 */
	public void clonePhase()
	{
		engine.open(form.getForms().ICP.ICPPhaseSelectDialog);
	}
	
	
	/**
	 * WDEV-13773
	 * Function used to clone selected phase
	 */
	private void cloneSelectedPhase(ICPPhaseRefVo phaseForCloning)
	{
		try
		{
			// Check if selected node is a stage
			if (form.getLocalContext().getSelectedItem() instanceof ICPStageShortVo)
			{
				ICPStageShortVo stage = (ICPStageShortVo) form.getLocalContext().getSelectedItem();

				// Get the full phase from domain
				ICPPhaseFullVo phase = domain.getICPPhaseFull(phaseForCloning);

				// Prepare phase to be added to stage
				// Remove the ID
				removeCloneID(phase, true, true);
				// Set phase sequence
				phase.setSequence(stage.getPhases().size() + 1);
				
				String[] errors = phase.validate();
				errors = stage.validate(errors);

				// Add selected phase for cloning to the stage
				domain.addClonedPhase(phase, stage);
			}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
		}
	}
	
	private void removeCloneID(ICPFullVo fullCloneICP)
	{
		fullCloneICP.setID_ICP(null);
		fullCloneICP.setStatus(PreActiveActiveInactiveStatus.PREACTIVE);

		if (fullCloneICP.getStages() != null)
		{
			for (ICPStageFullVo stageClone : fullCloneICP.getStages())
			{
				removeCloneID(stageClone, true, false);
			}
		}
	}

	private void removeCloneID(ICPStageFullVo stageClone, boolean resetStatus, boolean resetSequence)
	{
		if (stageClone == null)
			return;

		stageClone.setID_ICPStage(null);
		
		if (resetStatus)
		{
			stageClone.setStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		}
		
		if (resetSequence)
		{
			stageClone.setSequence(null);
		}

		// Clear the rules (can not properly clone them to work with the new ICP as the ID for stages, phases and actions will change)
		stageClone.setRules(null);

		if (stageClone.getPhasesIsNotNull())
		{
			for (ICPPhaseFullVo phaseClone : stageClone.getPhases())
			{
				removeCloneID(phaseClone, resetStatus, false);
			}
		}
	}

	/**
	 * WDEV-13773
	 * Function used to reset the phase for cloning
	 */
	private void removeCloneID(ICPPhaseFullVo phaseClone, boolean resetStatus, boolean resetSequence)
	{
		if (phaseClone == null)
			return;

		phaseClone.setID_ICPPhase(null);
		
		if (resetStatus)
		{
			phaseClone.setStatus(PreActiveActiveInactiveStatus.PREACTIVE);
		}
		
		if (resetSequence)
		{
			phaseClone.setSequence(null);
		}

		// Clear the rules (can not properly clone them to work with the new ICP)
		phaseClone.setRules(null);

		// Clear ID for phase goals
		if (phaseClone.getGoalsIsNotNull())
		{
			for (IcpPhaseGoalVo goal : phaseClone.getGoals())
			{
				goal.setID_ICPPhaseGoal(null);
			}
		}

		// Clear ID for phase actions
		if (phaseClone.getActionsIsNotNull())
		{
			for (ICPActionShortVo action : phaseClone.getActions())
			{
				action.setID_ICPAction(null);
				
				if (resetStatus)
				{
					action.setStatus(PreActiveActiveInactiveStatus.PREACTIVE);
				}
			}
		}
	}

	/**
	 * Function used to save an instance (ICP, ICP Stage, ICPPhase, ICPAction)
	 */
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		// Determine the action to take
		switch (form.getLocalContext().getAction())
		{
			// Call function to save a new ICP
			case ACTION_SAVE_NEW_ICP:
			case ACTION_SAVE_EDIT_ICP:
				return saveICP();

				// Call function to add an ICP Stage
			case ACTION_SAVE_ADD_STAGE:
				return addICPStage();

				// Call function to save an edited ICP Stage
			case ACTION_SAVE_EDIT_STAGE:
				return saveICPStage();

				// Call function to add an ICP Phase
			case ACTION_SAVE_ADD_PHASE:
				return addICPPhase();

				// Call function to save an edited ICP Phase
			case ACTION_SAVE_EDIT_PHASE:
				return saveICPPhase();

				// Call function to add an ICP Action
			case ACTION_SAVE_ADD_ACTION:
				return addICPAction();

				// Call function to save an edited ICP Action
			case ACTION_SAVE_EDIT_ACTION:
				return saveICPAction();

				// Default action is to refresh the screen
			default:
				return true;
		}
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Functions used for search controls
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to populate the Contact Person query combobox search filter
	 * 
	 * @param contactList
	 */
	private void populateContactPerson(MemberOfStaffLiteVoCollection contactList)
	{
		// Clear the query combobox
		form.qmbContactPerson().clear();

		// Check the list of contacts
		if (contactList == null)
			return;

		for (MemberOfStaffLiteVo contact : contactList)
		{
			// Skip null contacts
			if (contact == null)
				continue;

			form.qmbContactPerson().newRow(contact, contact.getIMosName());
		}

		// Set the default value if only one record was returned, else expand
		// the query combobox
		if (contactList.size() == 1)
		{
			form.qmbContactPerson().setValue(contactList.get(0));
		}
		else
		{
			form.qmbContactPerson().showOpened();
		}
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Save functions
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to save an ICP It will save an ICPVo - even though the
	 * stages will not be saved
	 */
	private boolean saveICP() throws PresentationLogicException
	{
		try
		{
			// Check local context (must be null or ICP VO instance)
			// Set local context to null if it is not the required instance
			if (form.getLocalContext().getSelectedItemIsNotNull() && !(form.getLocalContext().getSelectedItem() instanceof ICPVo))
			{
				form.getLocalContext().setSelectedItem(null);
			}

			// Get data from screen
			ICPVo icp = populateICPDataFromScreen(form.getLocalContext().getSelectedItemIsNotNull() ? (ICPVo) form.getLocalContext().getSelectedItem() : null);

			// Validate the VO
			String[] errors = icp.validate();

			// Check for errors
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt save
			form.getLocalContext().setSelectedItem(domain.save(icp));

			form.getLocalContext().setSelectedICP((ICPRefVo) form.getLocalContext().getSelectedItem());

			// Return true
			return true;
		}
		catch (DomainInterfaceException e)
		{
			// Report error and end on false
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			// Report error, refresh screen and end on false
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			// Report error and end on false
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			// Report error and end on false
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		catch (UnqViolationUncheckedException exception)		// This exception is thrown when attempting to save the record with a rule with the same name as another rule
		{
			// Report error and return false
			engine.showMessage("A rule with the same name already exits. Rules name must be unique.", "Save Error");
			return false;
		}

	}

	/**
	 * Function used to add an ICP Stage to an ICP
	 * 
	 * @return
	 * @throws PresentationLogicException
	 */
	private boolean addICPStage() throws PresentationLogicException
	{
		try
		{
			// Check if selected parent item is an ICP
			if (!(form.getLocalContext().getSelectedItemParrent() instanceof ICPShortVo))
				throw new CodingRuntimeException("Major Logical Error - Can only add an ICP Stage to an ICP");

			ICPShortVo parentICP = (ICPShortVo) form.getLocalContext().getSelectedItemParrent();

			// Get data from screen into selected item local context
			// Pass null as parameter to get a new VO
			ICPStageVo stage = populateICPStageDataFromScreen(null);

			// Validate the VO (and the parent)
			String[] errors = stage.validate();
			errors = parentICP.validate(errors);

			// Check for errors
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Check for a stage with the same name or same sequence number
			if (parentICP.getStagesIsNotNull())
			{
				for (ICPStageLiteVo markStage : parentICP.getStages())
				{
					// Skip null stages
					if (markStage == null)
						continue;

					// Compare stages name with new stage name
					if (markStage.getNameIsNotNull() && markStage.getName().equalsIgnoreCase(stage.getName()))
					{
						engine.showMessage("Another stage with the same name exists for current ICP.", "Message");
						return false;
					}
				}
			}

			// Attempt save
			form.getLocalContext().setSelectedItem(domain.addStage(stage, (ICPShortVo) form.getLocalContext().getSelectedItemParrent()));

			return true;
		}
		catch (DomainInterfaceException exception)
		{
			// Report error and return false
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (StaleObjectException exception)
		{
			// Report error, refresh screen and return false
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException exception)
		{
			// Report error and return false
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException exception)
		{
			// Report error and return false
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (UnqViolationUncheckedException exception)		// This exception is thrown when attempting to save the record with a rule with the same name as another rule
		{
			// Report error and return false
			engine.showMessage("A rule with the same name already exits. Rules name must be unique.", "Save Error");
			return false;
		}

	}

	/**
	 * Function used to add an ICP Phase to an ICP Stage
	 * 
	 * @return
	 * @throws PresentationLogicException
	 */
	private boolean addICPPhase() throws PresentationLogicException
	{
		try
		{
			// Check if selected parent item is an ICP Stage
			if (!(form.getLocalContext().getSelectedItemParrent() instanceof ICPStageShortVo))
				throw new CodingRuntimeException("Major Logical Error - Can only add an ICP Phase to an ICP Stage");

			ICPStageShortVo parentStage = (ICPStageShortVo) form.getLocalContext().getSelectedItemParrent();

			// Get data from screen into selected item local context
			// Pass null as parameter to get a new VO
			ICPPhaseVo phase = populateICPPhaseDataFromScreen(null);

			// Validate the VO
			String[] errors = phase.validate();
			errors = parentStage.validate(errors);

			// Check for errors
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Check for a phase with the same name
			if (parentStage.getPhasesIsNotNull())
			{
				for (ICPPhaseLiteVo markPhase : parentStage.getPhases())
				{
					// Skip null phases
					if (markPhase == null)
						continue;

					// Compare phases name with new phase name
					if (markPhase.getNameIsNotNull() && markPhase.getName().equalsIgnoreCase(phase.getName()))
					{
						engine.showMessage("Another phase with the same name exists for current Stage", "Message");
						return false;
					}
				}
			}

			// Attempt save
			form.getLocalContext().setSelectedItem(domain.addPhase(phase, (ICPStageShortVo) form.getLocalContext().getSelectedItemParrent()));

			return true;
		}
		catch (DomainInterfaceException exception)
		{
			// Report error and return false
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (StaleObjectException exception)
		{
			// Report error, refresh screen and return false
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException exception)
		{
			// Report error and return false
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException exception)
		{
			// Report error and return false
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (UnqViolationUncheckedException exception)		// This exception is thrown when attempting to save the record with a rule with the same name as another rule
		{
			// Report error and return false
			engine.showMessage("A rule with the same name already exits. Rules name must be unique.", "Save Error");
			return false;
		}
	}

	/**
	 * Function used to add an ICP Action to an ICP Phase
	 * 
	 * @return
	 * @throws PresentationLogicException
	 */
	private boolean addICPAction() throws PresentationLogicException
	{
		try
		{
			// Check if selected parent item is an ICP
			if (!(form.getLocalContext().getSelectedItemParrent() instanceof ICPPhaseShortVo))
				throw new CodingRuntimeException("Major Logical Error - Can only add an ICP Action to an ICP Phase");

			ICPPhaseShortVo parentPhase = (ICPPhaseShortVo) form.getLocalContext().getSelectedItemParrent();

			// Get data from screen into selected item local context
			// Pass null as parameter to get a new VO
			ICPActionShortVo action = populateICPActionDataFromScreen(null);

			// Validate the VO
			String[] errors = action.validate();
			errors = parentPhase.validate(errors);

			// Validate liked item
			errors = validateLinkedItem(action, errors);

			// Check for errors
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Check for an action with the same name
			if (parentPhase.getActionsIsNotNull())
			{
				for (ICPActionLiteVo markAction : parentPhase.getActions())
				{
					// Skip null actions
					if (markAction == null)
						continue;

					// Compare actions name with new action
					if (markAction.getNameIsNotNull() && markAction.getName().equalsIgnoreCase(action.getName()))
					{
						engine.showMessage("Another action with the same name exists for current phase", "Message");
						return false;
					}
				}
			}

			// Attempt save
			form.getLocalContext().setSelectedItem(domain.addAction(action, (ICPPhaseShortVo) form.getLocalContext().getSelectedItemParrent()));

			return true;
		}
		catch (DomainInterfaceException exception)
		{
			// Report error and return false
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (StaleObjectException exception)
		{
			// Report error, refresh screen and return false
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException exception)
		{
			// Report error and return false
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException exception)
		{
			// Report error and return false
			engine.showMessage(exception.getMessage());
			return false;
		}
		catch (UnqViolationUncheckedException exception)		// This exception is thrown when attempting to save the record with a rule with the same name as another rule
		{
			// Report error and return false
			engine.showMessage("A rule with the same name already exits. Rules name must be unique.", "Save Error");
			return false;
		}

	}

	/**
	 * Function used to save an ICP Stage when editing it
	 * 
	 * @return
	 * @throws PresentationLogicException
	 */
	private boolean saveICPStage() throws PresentationLogicException
	{
		try
		{
			// Check local context (must be null or ICP Stage VO instance)
			// Set local context to null if it is not the required instance
			if (form.getLocalContext().getSelectedItemIsNotNull() && !(form.getLocalContext().getSelectedItem() instanceof ICPStageVo))
			{
				form.getLocalContext().setSelectedItem(null);
			}

			// Check selected item parent (must be ICP Short VO instance)
			if (!(form.getLocalContext().getSelectedItemParrent() instanceof ICPShortVo))
				throw new CodingRuntimeException("Major Logical Error - Can only add an ICP Stage to an ICP");

			ICPShortVo parentICP = (ICPShortVo) form.getLocalContext().getSelectedItemParrent();

			// Get data from screen
			ICPStageVo stage = populateICPStageDataFromScreen(form.getLocalContext().getSelectedItemIsNotNull() ? (ICPStageVo) form.getLocalContext().getSelectedItem() : null);

			// Validate the VO
			String[] errors = stage.validate();

			// Check for errors
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Check for a stage with the same name or same sequence number
			if (parentICP.getStagesIsNotNull())
			{
				for (ICPStageLiteVo markStage : parentICP.getStages())
				{
					// Skip null stages
					if (markStage == null)
						continue;

					// Compare stages name with new stage name
					if (!markStage.equals(stage) && markStage.getNameIsNotNull() && markStage.getName().equalsIgnoreCase(stage.getName()))
					{
						engine.showMessage("Another stage with the same name exists for current ICP.", "Message");
						return false;
					}
				}
			}

			// Attempt save
			form.getLocalContext().setSelectedItem(domain.save(stage));

			// Return true
			return true;
		}
		catch (DomainInterfaceException e)
		{
			// Report error and end on false
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			// Report error, refresh screen and end on false
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			// Report error and end on false
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			// Report error and end on false
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UnqViolationUncheckedException exception)		// This exception is thrown when attempting to save the record with a rule with the same name as another rule
		{
			// Report error and return false
			engine.showMessage("A rule with the same name already exits. Rules name must be unique.", "Save Error");
			return false;
		}

	}

	/**
	 * Function used to save an ICP Phase when editing it
	 * 
	 * @return
	 * @throws PresentationLogicException
	 */
	private boolean saveICPPhase() throws PresentationLogicException
	{
		try
		{
			// Check local context (must be null or ICP Phase VO instance)
			// Set local context to null if it is not the required instance
			if (form.getLocalContext().getSelectedItemIsNotNull() && !(form.getLocalContext().getSelectedItem() instanceof ICPPhaseVo))
			{
				form.getLocalContext().setSelectedItem(null);
			}

			// Check parent local context (must be ICP Stage Short VO instance)
			if (!(form.getLocalContext().getSelectedItemParrent() instanceof ICPStageShortVo))
				throw new CodingRuntimeException("Major Logical Error - Major Logical Error");

			ICPStageShortVo parentStage = (ICPStageShortVo) form.getLocalContext().getSelectedItemParrent();

			// Get data from screen
			ICPPhaseVo phase = populateICPPhaseDataFromScreen(form.getLocalContext().getSelectedItemIsNotNull() ? (ICPPhaseVo) form.getLocalContext().getSelectedItem() : null);

			// Validate the VO
			String[] errors = phase.validate();

			// Check for errors
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Check for a phase with the same name
			if (parentStage.getPhasesIsNotNull())
			{
				for (ICPPhaseLiteVo markPhase : parentStage.getPhases())
				{
					// Skip null phases
					if (markPhase == null)
						continue;

					// Compare phases name with new phase name
					if (!markPhase.equals(phase) && markPhase.getNameIsNotNull() && markPhase.getName().equalsIgnoreCase(phase.getName()))
					{
						engine.showMessage("Another phase with the same name exists for current Stage", "Message");
						return false;
					}
				}
			}

			// Attempt save
			form.getLocalContext().setSelectedItem(domain.save(phase));

			// Return true
			return true;
		}
		catch (DomainInterfaceException e)
		{
			// Report error and return false
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			// Report error, refresh screen and return false
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			// Report error and return false
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			// Report error and end on false
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UnqViolationUncheckedException exception)			// This exception is thrown when attempting to save the record with a rule with the same name as another rule
		{
			// Report error and return false
			engine.showMessage("A rule with the same name already exits. Rules name must be unique.", "Save Error");
			return false;
		}

	}

	/**
	 * Function used to save an ICP Action when editing it
	 * 
	 * @return
	 * @throws PresentationLogicException
	 */
	private boolean saveICPAction() throws PresentationLogicException
	{
		try
		{
			// Check local context (must be null or ICP Action VO instance)
			// Set local context to null if it is not the required instance
			if (form.getLocalContext().getSelectedItemIsNotNull() && !(form.getLocalContext().getSelectedItem() instanceof ICPActionShortVo))
			{
				form.getLocalContext().setSelectedItem(null);
			}

			// Check local context for parent item (must be ICP Phase Short VO
			// instance)
			if (!(form.getLocalContext().getSelectedItemParrent() instanceof ICPPhaseShortVo))
				throw new CodingRuntimeException("Major Logical Error - Can not save an action unless it's parent is ICP Phase");

			ICPPhaseShortVo parentPhase = (ICPPhaseShortVo) form.getLocalContext().getSelectedItemParrent();

			// Get data from screen
			ICPActionShortVo action = populateICPActionDataFromScreen(form.getLocalContext().getSelectedItemIsNotNull() ? (ICPActionShortVo) form.getLocalContext().getSelectedItem() : null);

			// Validate the VO
			String[] errors = action.validate();

			// Validate linked type
			errors = validateLinkedItem(action, errors);

			// Check for errors
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Check for an action with the same name
			if (parentPhase.getActionsIsNotNull())
			{
				for (ICPActionLiteVo markAction : parentPhase.getActions())
				{
					// Skip null actions
					if (markAction == null)
						continue;

					// Compare actions name with new action
					if (!markAction.equals(action) && markAction.getNameIsNotNull() && markAction.getName().equalsIgnoreCase(action.getName()))
					{
						engine.showMessage("Another action with the same name exists for current phase", "Message");
						return false;
					}
				}
			}

			// Attempt save
			form.getLocalContext().setSelectedItem(domain.save(action));

			// Return true
			return true;
		}
		catch (DomainInterfaceException e)
		{
			// Report error and return false
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			// Report error, refresh screen and return false
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			// Report error and return false
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			// Report error and end on false
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UnqViolationUncheckedException exception)			// This exception is thrown when attempting to save the record with a rule with the same name as another rule
		{
			// Report error and return false
			engine.showMessage("A rule with the same name already exits. Rules name must be unique.", "Save Error");
			return false;
		}

	}

	/**
	 * Function used to validate the liked type for an ICP Action
	 * 
	 * @param action
	 * @param existingErrors
	 * @return
	 */
	private String[] validateLinkedItem(ICPActionShortVo action, String[] existingErrors)
	{
		// Create errors array list
		ArrayList<String> errorList = new ArrayList<String>();

		// Add existing errors
		if (existingErrors != null)
		{
			for (int i = 0; i < existingErrors.length; i++)
			{
				errorList.add(existingErrors[i]);
			}
		}

		// Validate linked type
		if (ICPCompLinkedType.FORM.equals(action.getLinkedType()) && !action.getLinkedFormIsNotNull())
			errorList.add("Select the form you want to link the action to");

		if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(action.getLinkedType()) && !action.getLinkedGraphicAssessmentIsNotNull())
			errorList.add("Select the graphic assessment you want to link the action to");

		if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(action.getLinkedType()) && !action.getLinkedAssessmentIsNotNull())
			errorList.add("Select the assessment you want to link the action to");

		if (ICPCompLinkedType.ORDER_TEMPLATE.equals(action.getLinkedType()) && !action.getLinkedOrderEntryTemplateIsNotNull())
			errorList.add("Select the order template you want to link the action to");

		// Return the errors
		int errorCount = errorList.size();

		if (errorCount == 0)
			return null;

		String[] errors = new String[errorCount];

		for (int i = 0; i < errorCount; i++)
		{
			errors[i] = errorList.get(i);
		}

		return errors;
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Functions used to move items up or down
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to move item up It will further choose the appropriate
	 * method to call for stages, phases or action
	 */
	private void moveItemUP() throws PresentationLogicException
	{
		// Call appropriate function to move item up
		if (form.getLocalContext().getSelectedItem() instanceof ICPStageLiteVo && form.getLocalContext().getSelectedItemParrent() instanceof ICPShortVo)
		{
			moveStageUPorDOWN((ICPStageLiteVo) form.getLocalContext().getSelectedItem(), (ICPShortVo) form.getLocalContext().getSelectedItemParrent(), -1);
		}
		else if (form.getLocalContext().getSelectedItem() instanceof ICPPhaseLiteVo && form.getLocalContext().getSelectedItemParrent() instanceof ICPStageShortVo)
		{
			movePhaseUPorDOWN((ICPPhaseLiteVo) form.getLocalContext().getSelectedItem(), (ICPStageShortVo) form.getLocalContext().getSelectedItemParrent(), -1);
		}
		else if (form.getLocalContext().getSelectedItem() instanceof ICPActionLiteVo && form.getLocalContext().getSelectedItemParrent() instanceof ICPPhaseShortVo)
		{
			moveActionUPorDOWN((ICPActionLiteVo) form.getLocalContext().getSelectedItem(), (ICPPhaseShortVo) form.getLocalContext().getSelectedItemParrent(), -1);
		}
	}

	/**
	 * Function used to move down on item It will call appropriate function for
	 * each type of item
	 */
	private void moveItemDOWN() throws PresentationLogicException
	{
		// Call appropriate function to move item down
		if (form.getLocalContext().getSelectedItem() instanceof ICPStageLiteVo && form.getLocalContext().getSelectedItemParrent() instanceof ICPShortVo)
		{
			moveStageUPorDOWN((ICPStageLiteVo) form.getLocalContext().getSelectedItem(), (ICPShortVo) form.getLocalContext().getSelectedItemParrent(), 1);
		}
		else if (form.getLocalContext().getSelectedItem() instanceof ICPPhaseLiteVo && form.getLocalContext().getSelectedItemParrent() instanceof ICPStageShortVo)
		{
			movePhaseUPorDOWN((ICPPhaseLiteVo) form.getLocalContext().getSelectedItem(), (ICPStageShortVo) form.getLocalContext().getSelectedItemParrent(), 1);
		}
		else if (form.getLocalContext().getSelectedItem() instanceof ICPActionLiteVo && form.getLocalContext().getSelectedItemParrent() instanceof ICPPhaseShortVo)
		{
			moveActionUPorDOWN((ICPActionLiteVo) form.getLocalContext().getSelectedItem(), (ICPPhaseShortVo) form.getLocalContext().getSelectedItemParrent(), 1);
		}
	}

	/**
	 * Function used to move down or up an ICP Stage
	 */
	private void moveStageUPorDOWN(ICPStageLiteVo stage, ICPShortVo icp, int direction) throws PresentationLogicException
	{
		try
		{
			// Check parameters
			if (stage == null || icp == null || !icp.getStagesIsNotNull())
				return;

			Integer sequence = stage.getSequence();

			// Iterate all stages from ICP
			for (ICPStageLiteVo markStage : icp.getStages())
			{
				// Skip null stages
				if (markStage == null || markStage.equals(stage))
					continue;

				// For the stage with the next sequence
				if (markStage.getSequence().intValue() == new Integer(sequence + direction).intValue())
				{
					// Swap sequence
					stage.setSequence(sequence + direction);
					markStage.setSequence(sequence);

					// Validate the stages
					String[] errors = stage.validate();
					errors = markStage.validate(errors);

					// Check for errors
					if (errors != null && errors.length > 0)
					{
						engine.showErrors(errors);
						return;
					}

					// Attempt save
					form.getLocalContext().setSelectedItem(domain.getItem(domain.save(stage, markStage)));

					// Refresh screen
					open();

					// Terminate function
					return;
				}
			}
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage(), "Message");
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue(), "Message");
			open();
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage(), "Message");
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage(), "Message");
		}
	}

	/**
	 * Function used to move down or up an ICP Phase
	 * 
	 * @param phase
	 * @param stage
	 * @throws PresentationLogicException
	 */
	private void movePhaseUPorDOWN(ICPPhaseLiteVo phase, ICPStageShortVo stage, int direction) throws PresentationLogicException
	{
		try
		{
			// Check parameters
			if (phase == null || stage == null || !stage.getPhasesIsNotNull())
				return;

			Integer sequence = phase.getSequence();

			// Iterate all phases from ICP Stage
			for (ICPPhaseLiteVo markPhase : stage.getPhases())
			{
				// Skip null phases
				if (markPhase == null)
					continue;

				// For the phase with the next sequence
				if (markPhase.getSequence() == sequence + direction)
				{
					// Swap sequence
					phase.setSequence(sequence + direction);
					markPhase.setSequence(sequence);

					// Validate the phases
					String[] errors = phase.validate();
					errors = markPhase.validate(errors);

					// Check for errors
					if (errors != null && errors.length > 0)
					{
						engine.showErrors(errors);
						return;
					}

					// Attempt save
					form.getLocalContext().setSelectedItem(domain.getItem(domain.save(phase, markPhase)));

					// Refresh screen
					open();

					// Terminate function
					return;
				}
			}
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage(), "Message");
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue(), "Message");
			open();
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage(), "Message");
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage(), "Message");
		}
	}

	/**
	 * Function used to move up or down an ICP Action
	 * 
	 * @param action
	 * @param phase
	 * @param direction
	 * @throws PresentationLogicException
	 */
	private void moveActionUPorDOWN(ICPActionLiteVo action, ICPPhaseShortVo phase, int direction) throws PresentationLogicException
	{
		try
		{
			// Check parameters
			if (action == null || phase == null || !phase.getActionsIsNotNull())
				return;

			Integer sequence = action.getSequence();

			// Iterate all actions from ICP Phase
			for (ICPActionLiteVo markAction : phase.getActions())
			{
				// Skip null phases
				if (markAction == null)
					continue;

				// For the action with the next (or previous) sequence
				if (markAction.getSequence() == sequence + direction)
				{
					// Swap sequence
					action.setSequence(sequence + direction);
					markAction.setSequence(sequence);

					// Validate the phases
					String[] errors = action.validate();
					errors = markAction.validate(errors);

					// Check for errors
					if (errors != null && errors.length > 0)
					{
						engine.showErrors(errors);
						return;
					}

					// Attempt save
					form.getLocalContext().setSelectedItem(domain.getItem(domain.save(action, markAction)));

					// Refresh screen
					open();

					// Terminate function
					return;
				}
			}
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage(), "Message");
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue(), "Message");
			open();
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage(), "Message");
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage(), "Message");
		}
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Functions used to move items up or down
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to ask confirmation for ICP inactivation
	 */
	private void inactivateICP()
	{
		form.getLocalContext().setMessageBoxOpened(MB_INACTIVATE_ITEM);
		engine.showMessage("Are you sure you want to inactivate this ICP?", "Message", MessageButtons.YESNO, MessageIcon.QUESTION);
	}

	/**
	 * Function used to ask confirmation for ICP Stage inactivation
	 */
	private void inactivateICPStage()
	{
		form.getLocalContext().setMessageBoxOpened(MB_INACTIVATE_ITEM);
		engine.showMessage("Are you sure you want to inactivate this Stage?", "Message", MessageButtons.YESNO, MessageIcon.QUESTION);
	}

	/**
	 * Function used to ask confirmation for ICP Phase inactivation
	 */
	private void inactivateICPPhase()
	{
		form.getLocalContext().setMessageBoxOpened(MB_INACTIVATE_ITEM);
		engine.showMessage("Are you sure you want to inactivate this Phase?", "Message", MessageButtons.YESNO, MessageIcon.QUESTION);
	}

	/**
	 * Function used to ask confirmation for ICP Action inactivation
	 */
	private void inactivateICPAction()
	{
		form.getLocalContext().setMessageBoxOpened(MB_INACTIVATE_ITEM);
		engine.showMessage("Are you sure you want to inactivate this Action?", "Message", MessageButtons.YESNO, MessageIcon.QUESTION);
	}

	/**
	 * Function used to inactivate an item Domain will chose based on item type
	 * what to inactivate
	 * 
	 * @param item
	 * @throws PresentationLogicException
	 */
	private void inactivateItem(Object item) throws PresentationLogicException
	{
		try
		{
			// Inactivate item
			form.getLocalContext().setSelectedItem(domain.inactivateItem(item));

			// Refresh screen
			open();
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
		}
	}

	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - Populate Tree
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to populate tree with a full ICP (Stages, Phases, Actions)
	 * Used in open function
	 */
	private void populateTreeFullICP(ICPConfigurationDisplayVo displayICP)
	{
		// Clear tree
		form.treICPList().clear();

		// Terminate the function if the ICP is null
		if (displayICP == null)
			return;

		// Add ICP value to tree
		TreeNode node = form.treICPList().getNodes().add((ICPLiteVo) displayICP, displayICP.getName());

		// Set node images, gray text for inactive ICP, collapse node and add
		// stage nodes
		node.setCollapsedImage(form.getImages().ICP.ICP);
		node.setExpandedImage(form.getImages().ICP.ICP);

		if (PreActiveActiveInactiveStatus.INACTIVE.equals(displayICP.getStatus()))
		{
			node.setTextColor(Color.Gray);
		}

		populateTreeFullICPStages(node, displayICP.getStages());

		node.setExpanded(true);
		node.setIdentifier(EXPANDED);
	}

	/**
	 * Function used to populate full stages to an ICP node (Phases, Actions)
	 * 
	 * @param node
	 * @param stageCollection
	 */
	private void populateTreeFullICPStages(TreeNode node, ICPStageDisplayVoCollection stageCollection)
	{
		// Clear nodes
		node.getNodes().clear();

		// Check the stages collection
		if (stageCollection == null || stageCollection.size() == 0)
			return;

		stageCollection.sort(new StageComparator());

		// Iterate ICP Stages collection
		for (ICPStageDisplayVo stage : stageCollection)
		{
			// Skip null stages
			if (stage == null)
				continue;

			// Add ICP Stage value to ICP node
			TreeNode stageNode = node.getNodes().add((ICPStageLiteVo) stage, stage.getName());

			// Set node images, gray text for inactive stage, collapse node and
			// add phase nodes
			stageNode.setCollapsedImage(form.getImages().ICP.Stage);
			stageNode.setExpandedImage(form.getImages().ICP.Stage);

			if (PreActiveActiveInactiveStatus.INACTIVE.equals(stage.getStatus()))
			{
				stageNode.setTextColor(Color.Gray);
			}

			populateTreeFullICPPhase(stageNode, stage.getPhases());

			stageNode.setExpanded(true);
			stageNode.setIdentifier(EXPANDED);
		}
	}

	/**
	 * Function used to populate full phases to an ICP Stage node (Action)
	 * 
	 * @param node
	 * @param phaseCollection
	 */
	private void populateTreeFullICPPhase(TreeNode node, ICPPhaseDisplayVoCollection phaseCollection)
	{
		// Clear node
		node.getNodes().clear();

		// Check the phase collection
		if (phaseCollection == null || phaseCollection.size() == 0)
			return;

		phaseCollection.sort(new PhaseComparator());

		// Iterate ICP Phases collection
		for (ICPPhaseDisplayVo phase : phaseCollection)
		{
			// Skip null ICP Phase
			if (phase == null)
				continue;

			// Add ICP Phase value to ICP Stage node
			TreeNode phaseNode = node.getNodes().add((ICPPhaseLiteVo) phase, phase.getName());

			// Set node images, gray text for inactive stage, collapse node and
			// add actions nodes
			phaseNode.setCollapsedImage(form.getImages().ICP.Phase);
			phaseNode.setExpandedImage(form.getImages().ICP.Phase);

			if (PreActiveActiveInactiveStatus.INACTIVE.equals(phase.getStatus()))
			{
				phaseNode.setTextColor(Color.Gray);
			}

			populateTreeICPActionNodes(phaseNode, phase.getActions());

			phaseNode.setExpanded(true);
			phaseNode.setIdentifier(EXPANDED);
		}
	}

	/**
	 * Function used to populate tree with an ICP list
	 * 
	 * @param listICP
	 */
	private void populateTreeICPNodes(ICPLiteVoCollection listICP)
	{
		// Clear tree
		form.treICPList().clear();

		// Check ICP list - exit function if list is null or zero length
		if (listICP == null || listICP.size() == 0)
			return;

		// Iterate the ICP list
		for (ICPLiteVo icp : listICP)
		{
			// Skip null ICPs
			if (icp == null)
				continue;

			// Add ICP value to tree
			TreeNode node = form.treICPList().getNodes().add(icp, icp.getName());

			// Set node images, gray text for inactive ICP, collapse node and
			// add mock node
			node.setCollapsedImage(form.getImages().ICP.ICP);
			node.setExpandedImage(form.getImages().ICP.ICP);

			if (PreActiveActiveInactiveStatus.INACTIVE.equals(icp.getStatus()))
			{
				node.setTextColor(Color.Gray);
			}

			node.setExpanded(false);

			node.getNodes().add(null, "Loading...");

			// Set node as not expanded
			node.setIdentifier(null);
		}
	}

	/**
	 * Function used to populate ICP Node with ICP Stages
	 * 
	 * @param node
	 * @param listStages
	 */
	private void populateTreeICPStageNodes(TreeNode node, ICPStageLiteVoCollection listStages)
	{
		// Clear nodes
		node.getNodes().clear();

		// Set node as expanded
		node.setIdentifier(EXPANDED);

		// Check stages list - exit the function if it is null or zero length
		if (listStages == null || listStages.size() == 0)
			return;

		// Sort ICP Stages by sequence
		listStages.sort(new StageComparator());

		// Iterate ICP Stages list
		for (ICPStageLiteVo icpStage : listStages)
		{
			// Skip null stages
			if (icpStage == null)
				continue;

			// Add ICP Stage to ICP node
			TreeNode stageNode = node.getNodes().add(icpStage, icpStage.getName());

			// Set node images, gray text for inactive ICP Stage, collapse node
			// and mock node
			stageNode.setCollapsedImage(form.getImages().ICP.Stage);
			stageNode.setExpandedImage(form.getImages().ICP.Stage);

			if (PreActiveActiveInactiveStatus.INACTIVE.equals(icpStage.getStatus()))
			{
				stageNode.setTextColor(Color.Gray);
			}

			stageNode.setExpanded(false);

			stageNode.getNodes().add(null, "Loading...");

			// Set node as not expanded
			stageNode.setIdentifier(null);
		}
	}

	/**
	 * Function used to populate ICP Stages Node with ICP Phases
	 * 
	 * @param node
	 * @param listPhases
	 */
	private void populateTreeICPPhaseNodes(TreeNode node, ICPPhaseLiteVoCollection listPhases)
	{
		// Clear nodes
		node.getNodes().clear();

		// Set node as expanded
		node.setIdentifier(EXPANDED);

		// Check phases list - exit the function if it is null or zero length
		if (listPhases == null || listPhases.size() == 0)
			return;

		// Sort phase list by sequence
		listPhases.sort(new PhaseComparator());

		// Iterate ICP Phases list
		for (ICPPhaseLiteVo icpPhase : listPhases)
		{
			// Skip null phases
			if (icpPhase == null)
				continue;

			// Add ICP Phase to ICP Stage node
			TreeNode phaseNode = node.getNodes().add(icpPhase, icpPhase.getName());

			// Set node image, gray text for inactive phase, collapse node and
			// mock node
			phaseNode.setCollapsedImage(form.getImages().ICP.Phase);
			phaseNode.setExpandedImage(form.getImages().ICP.Phase);

			if (PreActiveActiveInactiveStatus.INACTIVE.equals(icpPhase.getStatus()))
			{
				phaseNode.setTextColor(Color.Gray);
			}

			phaseNode.setExpanded(false);

			phaseNode.getNodes().add(null, "Loading...");

			// Set node as collapsed
			phaseNode.setIdentifier(null);
		}
	}

	/**
	 * Function used to populate ICP Phase Node with ICP Actions
	 * 
	 * @param node
	 * @param listActions
	 */
	private void populateTreeICPActionNodes(TreeNode node, ICPActionLiteVoCollection listActions)
	{
		// Clear node
		node.getNodes().clear();

		// Set node as expanded
		node.setIdentifier(EXPANDED);

		// Check actions list - exit the function if it is null or zero length
		if (listActions == null || listActions.size() == 0)
			return;

		// Sort ICP Action list by sequence
		listActions.sort(new ActionComparator());

		// Iterate ICP Actions list
		for (ICPActionLiteVo icpAction : listActions)
		{
			// Skip null ICP Actions
			if (icpAction == null)
				continue;
			
			// Build ICP Action text
			StringBuilder nodeText = new StringBuilder();
			
			// Add ICP Action name
			nodeText.append(icpAction.getName());
			// Add ICP Action disciplines
			if (icpAction.getDisciplineIsNotNull())
			{
				nodeText.append(" (");
				
				// Add the name of each discipline 
				for (int i = 0; i < icpAction.getDiscipline().size(); i++)
				{
					HcpDisType discipline = icpAction.getDiscipline().get(i);
					
					// Skip null disciplines
					if (discipline == null)
						continue;
					
					nodeText.append(discipline.getText());
					
					if (i < icpAction.getDiscipline().size() - 1)
						nodeText.append(", ");
				}
				
				nodeText.append(")");
			}

			// Add ICP Action to ICP Phase node
			TreeNode actionNode = node.getNodes().add(icpAction, nodeText.toString());

			// Set node image, gray text to inactive actions
			actionNode.setCollapsedImage(form.getImages().ICP.Action);
			actionNode.setExpandedImage(form.getImages().ICP.Action);

			if (PreActiveActiveInactiveStatus.INACTIVE.equals(icpAction.getStatus()))
			{
				actionNode.setTextColor(Color.Gray);
			}
		}
	}

	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - Populate Instance controls
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to populate instance controls with provided item It will
	 * choose based on instance type what function to call
	 * 
	 * @param item
	 *            - Data provided for populating instance controls
	 */
	private void populateInstanceControls(Object item)
	{
		// Clear instance controls (for all types)
		clearInstanceControls();

		// Populate instance controls when item is an ICP
		if (item instanceof ICPVo)
		{
			populateICPInstanceControls((ICPVo) item);
			return;
		}

		// Populate instance controls when item is an ICP Stage
		if (item instanceof ICPStageVo)
		{
			populateICPStageInstanceControls((ICPStageVo) item);
			return;
		}

		// Populate instance controls when item is an ICP Phase
		if (item instanceof ICPPhaseVo)
		{
			populateICPPhaseInstanceControls((ICPPhaseVo) item);
			return;
		}

		// Populate instance controls when item is an ICP Action
		if (item instanceof ICPActionShortVo)
		{
			populateICPActionInstanceControls((ICPActionShortVo) item);
			return;
		}
	}

	/**
	 * Function used to populate instance controls with an ICP VO
	 * 
	 * @param icp
	 *            - ICP provided for populating instance controls
	 */
	private void populateICPInstanceControls(ICPVo icp)
	{
		// No need to clear the controls - they were already cleared in the
		// calling function

		// Exit the function if the ICP is null
		if (icp == null)
			return;

		// Populate controls with DATA

		form.ctnConfiguration().lyrICPTabs().ICP().cmbICPSpecialty().setValue(icp.getSpecialty());

		// To set diagnosis in a query combobox we need first to add a row
		if (icp.getDiagnosisIsNotNull())
		{
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPDiagnosis().newRow(icp.getDiagnosis(), icp.getDiagnosis().getDiagnosisName());
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPDiagnosis().setValue(icp.getDiagnosis());
		}
		
		// To set problem in a query combo-box we need first to add a row
		if (icp.getProblemIsNotNull())
		{
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPProblem().newRow(icp.getProblem(), icp.getProblem().getPCName());
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPProblem().setValue(icp.getProblem());
		}

		form.ctnConfiguration().lyrICPTabs().ICP().txtICPName().setValue(icp.getName());
		form.ctnConfiguration().lyrICPTabs().ICP().txtICPDescription().setValue(icp.getDescription());
		form.ctnConfiguration().lyrICPTabs().ICP().txtICPHelpUrl().setValue(icp.getHelpURL());

		form.ctnConfiguration().lyrICPTabs().ICP().dteICPCreationDate().setValue(icp.getCreationDate());

		// To set a contact person in a query combobox we need first to add a
		// row
		if (icp.getContactPersonIsNotNull())
		{
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPContactPerson().newRow(icp.getContactPerson(), icp.getContactPerson().getIMosName());
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPContactPerson().setValue(icp.getContactPerson());
		}

		form.ctnConfiguration().lyrICPTabs().ICP().cmbICPCategory().setValue(icp.getCategory());
		form.ctnConfiguration().lyrICPTabs().ICP().cmbICPStatus().setValue(icp.getStatus());

		// Set the ICP Procedures
		setICPProceduresGrid(icp.getProcedures());
	}

	/**
	 * Function used to populate the procedures grid for an ICP configuration
	 * 
	 * @param procedures
	 *            - Procedure collection for ICP
	 */
	private void setICPProceduresGrid(ProcedureLiteVoCollection procedures)
	{
		// Clear the grid
		form.ctnConfiguration().lyrICPTabs().ICP().grdICPProcedures().getRows().clear();

		// Terminate function if procedure collection is null
		if (procedures == null)
			return;

		// Iterate procedure collection
		for (ProcedureLiteVo procedure : procedures)
		{
			// Skip null procedures
			if (procedure == null)
				continue;

			// Create new row
			grdICPProceduresRow newRow = form.ctnConfiguration().lyrICPTabs().ICP().grdICPProcedures().getRows().newRow();

			// Fill new row columns cells
			newRow.getcolProcedure().newRow(procedure, procedure.getProcedureName());
			newRow.getcolProcedure().setValue(procedure);

			// Set row value
			newRow.setValue(procedure);
		}
	}

	/**
	 * Function used to populate instance controls with an ICP Stage VO
	 * 
	 * @param icpStage
	 *            - ICP Stage provided for populating instance controls
	 */
	private void populateICPStageInstanceControls(ICPStageVo icpStage)
	{
		// No need to clear the controls - they were already cleared in the
		// calling function

		// Exit the function if the ICP stage is null
		if (icpStage == null)
			return;

		// Populate controls with DATA

		form.ctnConfiguration().lyrICPTabs().Stage().txtStageName().setValue(icpStage.getName());
		form.ctnConfiguration().lyrICPTabs().Stage().txtStageDescription().setValue(icpStage.getDescription());
		form.ctnConfiguration().lyrICPTabs().Stage().txtStageHelpUrl().setValue(icpStage.getHelpURL());

		form.ctnConfiguration().lyrICPTabs().Stage().intStageSequence().setValue(icpStage.getSequence());
		form.ctnConfiguration().lyrICPTabs().Stage().chkStageHasPhases().setValue(icpStage.getHasPhase());

		form.ctnConfiguration().lyrICPTabs().Stage().cmbStageStatus().setValue(icpStage.getStatus());
		form.ctnConfiguration().lyrICPTabs().Stage().chkStageActivate().setValue(icpStage.getIsActivatedOnInitiation());

		// Set the ICP Stage Rules
		setICPStageRules(icpStage.getRules());
	}

	/**
	 * Function used to populate rules for an ICP Stage configuration
	 * 
	 * @param rules
	 *            - Business Rules collection used for populating ICP Stage
	 *            rules grid
	 */
	private void setICPStageRules(BusinessRuleVoCollection rules)
	{
		// Clear rules grid
		form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getRows().clear();

		// Terminate function if rules collection is null
		if (rules == null)
			return;

		for (BusinessRuleVo rule : rules)
		{
			// Skip rule if null
			if (rule == null)
				continue;

			// Create a new row
			grdStageRulesRow newRow = form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getRows().newRow();

			// Fill new row columns cells
			newRow.setcolName(rule.getName());
			newRow.setcolDescription(rule.getDescription());
			newRow.setcolCategory(rule.getCategory());
			newRow.setcolActive(rule.getActive());

			// Set row value
			newRow.setValue(rule);
		}
	}

	/**
	 * Function used to populate instance controls with an ICP Phase VO
	 * 
	 * @param icpPhase
	 *            - ICP Phase provided for populating instance controls
	 */
	private void populateICPPhaseInstanceControls(ICPPhaseVo icpPhase)
	{
		// No need to clear the controls - they were already cleared in the
		// calling function

		// Exit the function if the ICP phase is null
		if (icpPhase == null)
			return;

		// Populate controls with DATA

		form.ctnConfiguration().lyrICPTabs().Phase().txtPhaseName().setValue(icpPhase.getName());
		form.ctnConfiguration().lyrICPTabs().Phase().txtPhaseDescription().setValue(icpPhase.getDescription());
		form.ctnConfiguration().lyrICPTabs().Phase().txtPhaseHelpUrl().setValue(icpPhase.getHelpURL());

		form.ctnConfiguration().lyrICPTabs().Phase().intPhaseSequence().setValue(icpPhase.getSequence());
		form.ctnConfiguration().lyrICPTabs().Phase().chkPhaseActivate().setValue(icpPhase.getIsActivatedOnInitiation());
		form.ctnConfiguration().lyrICPTabs().Phase().cmbPhaseStatus().setValue(icpPhase.getStatus());

		// Set ICP Phase Rules
		setICPPhaseRules(icpPhase.getRules());

		// Set ICP Phase Goals
		setICPPhaseGoals(icpPhase.getGoals());
	}

	/**
	 * Function used to populate rules for an ICP Phase configuration
	 * 
	 * @param rules
	 *            - Business Rules collection used for populating ICP Phase
	 *            rules grid
	 */
	private void setICPPhaseRules(BusinessRuleVoCollection rules)
	{
		// Clear rules grid
		form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getRows().clear();

		// Terminate function if rule collection is null
		if (rules == null)
			return;

		// Iterate rule collection
		for (BusinessRuleVo rule : rules)
		{
			// Skip null rules
			if (rule == null)
				continue;

			// Create a new row
			grdPhaseRulesRow newRow = form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getRows().newRow();

			// Fill new row columns cells
			newRow.setcolName(rule.getName());
			newRow.setcolDescription(rule.getDescription());
			newRow.setcolCategory(rule.getCategory());
			newRow.setcolActive(rule.getActive());

			// Set row value
			newRow.setValue(rule);
		}
	}

	/**
	 * Function used to populate phase goals for an ICP Phase configuration
	 * 
	 * @param goals
	 *            - Phase Goals collection used for populating ICP Phase goals
	 *            grid
	 */
	private void setICPPhaseGoals(IcpPhaseGoalVoCollection goals)
	{
		// Clear goals grid
		form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().getRows().clear();

		// Terminate function if rule collection is null
		if (goals == null)
			return;

		for (IcpPhaseGoalVo goal : goals)
		{
			// Skip null goals
			if (goal == null)
				continue;

			// Create a new row
			grdPhaseGoalsRow newRow = form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().getRows().newRow();

			// Fill new row columns cells
			newRow.setcolGoal(goal.getGoal());
			newRow.setcolActive(Boolean.TRUE.equals(goal.getIsActive()) ? form.getImages().Core.Tick : null);

			// Set row value
			newRow.setValue(goal);
		}
	}


	/**
	 * Function used to populate instance controls with an ICP Action VO
	 * 
	 * @param icpAction
	 *            - ICP Action provided for populating instance controls
	 */
	private void populateICPActionInstanceControls(ICPActionShortVo icpAction)
	{
		// No need to clear the controls - they were already cleared in the calling function

		// Exit the function if the ICP Action is null
		if (icpAction == null)
			return;

		// Populate controls with DATA

		// Disciplines
		form.ctnConfiguration().lyrICPTabs().Action().chklistActionDiscipline().setValues(icpAction.getDiscipline());

		form.ctnConfiguration().lyrICPTabs().Action().txtActionName().setValue(icpAction.getName());
		form.ctnConfiguration().lyrICPTabs().Action().txtActionDescription().setValue(icpAction.getDescription());
		form.ctnConfiguration().lyrICPTabs().Action().txtActionHelpUrl().setValue(icpAction.getHelpURL());

		form.ctnConfiguration().lyrICPTabs().Action().cmbActionStatus().setValue(icpAction.getStatus());

		form.ctnConfiguration().lyrICPTabs().Action().intActionSequence().setValue(icpAction.getSequence());

		form.ctnConfiguration().lyrICPTabs().Action().cmbActionLinkedType().setValue(icpAction.getLinkedType());

		// Choose what to populate in Action Link text box
		if (ICPCompLinkedType.FORM.equals(icpAction.getLinkedType()))
		{
			setLinkedItem(icpAction.getLinkedForm());
		}
		else if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(icpAction.getLinkedType()))
		{
			setLinkedItem(icpAction.getLinkedAssessment());
		}
		else if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(icpAction.getLinkedType()))
		{
			setLinkedItem(icpAction.getLinkedGraphicAssessment());
		}
		else if (ICPCompLinkedType.ORDER_TEMPLATE.equals(icpAction.getLinkedType()))
		{
			setLinkedItem(icpAction.getLinkedOrderEntryTemplate());
		}
		
		form.ctnConfiguration().lyrICPTabs().Action().chkActionMandatory().setValue(icpAction.getIsMandatory());
		form.ctnConfiguration().lyrICPTabs().Action().chkCounterSignature().setValue(icpAction.getRequiresCounterSignature());
		
		// Set other linked ICP Actions
		form.getGlobalContext().ICP.setLinkedActions(icpAction.getClinicalDetailActions());
	}

	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - Populate data from instance controls
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to populate the ICP data from screen
	 * 
	 * @param icpVo
	 * @return
	 */
	private ICPVo populateICPDataFromScreen(ICPVo icpVo)
	{
		// If no ICP is given, create a new one
		if (icpVo == null)
			icpVo = new ICPVo();

		// Get data from screen
		icpVo.setSpecialty(form.ctnConfiguration().lyrICPTabs().ICP().cmbICPSpecialty().getValue());

		icpVo.setDiagnosis(form.ctnConfiguration().lyrICPTabs().ICP().qmbICPDiagnosis().getValue());
		icpVo.setProblem(form.ctnConfiguration().lyrICPTabs().ICP().qmbICPProblem().getValue());

		icpVo.setName(form.ctnConfiguration().lyrICPTabs().ICP().txtICPName().getValue());
		icpVo.setDescription(form.ctnConfiguration().lyrICPTabs().ICP().txtICPDescription().getValue());
		icpVo.setHelpURL(form.ctnConfiguration().lyrICPTabs().ICP().txtICPHelpUrl().getValue());

		icpVo.setCreationDate(form.ctnConfiguration().lyrICPTabs().ICP().dteICPCreationDate().getValue());

		icpVo.setContactPerson(form.ctnConfiguration().lyrICPTabs().ICP().qmbICPContactPerson().getValue());

		icpVo.setCategory(form.ctnConfiguration().lyrICPTabs().ICP().cmbICPCategory().getValue());
		icpVo.setStatus(form.ctnConfiguration().lyrICPTabs().ICP().cmbICPStatus().getValue());

		// Get procedures
		icpVo.setProcedures(getProcedures());

		// Return the ICP with data from screen
		return icpVo;
	}

	/**
	 * Function used to populate the Procedures collection from procedures grid
	 * on ICP tab
	 * 
	 * @return
	 */
	private ProcedureLiteVoCollection getProcedures()
	{
		// Create a new procedures collection
		ProcedureLiteVoCollection procedures = new ProcedureLiteVoCollection();

		// Add each procedure to collection
		for (int i = 0; i < form.ctnConfiguration().lyrICPTabs().ICP().grdICPProcedures().getRows().size(); i++)
		{
			ProcedureLiteVo procedure = form.ctnConfiguration().lyrICPTabs().ICP().grdICPProcedures().getRows().get(i).getValue();

			if (procedure == null)
				continue;

			procedures.add(procedure);
		}

		return procedures;
	}

	/**
	 * Function used to populate the ICP Stage data from screen
	 * 
	 * @param icpStageVo
	 * @return
	 */
	private ICPStageVo populateICPStageDataFromScreen(ICPStageVo icpStageVo)
	{
		// If no ICP Stage is given, create a new one
		if (icpStageVo == null)
			icpStageVo = new ICPStageVo();

		// Get data from screen
		icpStageVo.setName(form.ctnConfiguration().lyrICPTabs().Stage().txtStageName().getValue());
		icpStageVo.setDescription(form.ctnConfiguration().lyrICPTabs().Stage().txtStageDescription().getValue());
		icpStageVo.setHelpURL(form.ctnConfiguration().lyrICPTabs().Stage().txtStageHelpUrl().getValue());

		icpStageVo.setStatus(form.ctnConfiguration().lyrICPTabs().Stage().cmbStageStatus().getValue());

		icpStageVo.setSequence(form.ctnConfiguration().lyrICPTabs().Stage().intStageSequence().getValue());
		icpStageVo.setHasPhase(form.ctnConfiguration().lyrICPTabs().Stage().chkStageHasPhases().getValue());
		icpStageVo.setIsActivatedOnInitiation(form.ctnConfiguration().lyrICPTabs().Stage().chkStageActivate().getValue());

		// Get stage rules
		icpStageVo.setRules(getICPStageRules());

		// Return the ICP Stage with data from screen
		return icpStageVo;
	}

	/**
	 * Function used to populate the Business Rules collection from business
	 * rules grid on ICP Stage tab
	 * 
	 * @return
	 */
	private BusinessRuleVoCollection getICPStageRules()
	{
		// Create a new rule collection
		BusinessRuleVoCollection rules = new BusinessRuleVoCollection();

		// Iterate rules grid rows
		for (int i = 0; i < form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getRows().size(); i++)
		{
			BusinessRuleVo rule = form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getRows().get(i).getValue();

			// Skip null rules
			if (rule == null)
				continue;

			// Add rule to collection
			rules.add(rule);
		}

		// Return populated rule collection
		return rules;
	}

	/**
	 * Function used to populate the ICP Phase data from screen
	 * 
	 * @param icpPhaseVo
	 * @return
	 */
	private ICPPhaseVo populateICPPhaseDataFromScreen(ICPPhaseVo icpPhaseVo)
	{
		// If no ICP Phase is given, create a new one
		if (icpPhaseVo == null)
		{
			icpPhaseVo = new ICPPhaseVo();
		}

		// Get data from screen
		icpPhaseVo.setName(form.ctnConfiguration().lyrICPTabs().Phase().txtPhaseName().getValue());
		icpPhaseVo.setDescription(form.ctnConfiguration().lyrICPTabs().Phase().txtPhaseDescription().getValue());
		icpPhaseVo.setHelpURL(form.ctnConfiguration().lyrICPTabs().Phase().txtPhaseHelpUrl().getValue());

		icpPhaseVo.setSequence(form.ctnConfiguration().lyrICPTabs().Phase().intPhaseSequence().getValue());
		icpPhaseVo.setStatus(form.ctnConfiguration().lyrICPTabs().Phase().cmbPhaseStatus().getValue());
		icpPhaseVo.setIsActivatedOnInitiation(form.ctnConfiguration().lyrICPTabs().Phase().chkPhaseActivate().getValue());

		// Get phase rules
		icpPhaseVo.setRules(getICPPhaseRules());

		// Get phase goals
		icpPhaseVo.setGoals(getICPPhaseGoals());

		// Return the ICP Phase with data from screen
		return icpPhaseVo;
	}

	/**
	 * Function used to populate the Business Rules collection from business
	 * rules grid on ICP Phase tab
	 * 
	 * @return
	 */
	private BusinessRuleVoCollection getICPPhaseRules()
	{
		// Create a new rule collection
		BusinessRuleVoCollection rules = new BusinessRuleVoCollection();

		// Iterate rules grid rows
		for (int i = 0; i < form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getRows().size(); i++)
		{
			BusinessRuleVo rule = form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getRows().get(i).getValue();

			// Skip null rules
			if (rule == null)
				continue;

			// Add rule to collection
			rules.add(rule);
		}

		// Return populated rule collection
		return rules;
	}

	/**
	 * Function used to populate the Phase Goals collection from grid
	 * 
	 * @return
	 */
	private IcpPhaseGoalVoCollection getICPPhaseGoals()
	{
		// Create a new phase goals collection
		IcpPhaseGoalVoCollection phaseGoals = new IcpPhaseGoalVoCollection();

		// Iterate phase goals grid rows
		for (int i = 0; i < form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().getRows().size(); i++)
		{
			IcpPhaseGoalVo goal = form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().getRows().get(i).getValue();

			// Skip null goals
			if (goal == null)
				continue;

			// Add goal to phase goals collection
			phaseGoals.add(goal);
		}

		// Return populated goals collection
		return phaseGoals;
	}

	/**
	 * Function used to populate the ICP Action data from screen
	 * 
	 * @param icpActionVo
	 * @return
	 */
	private ICPActionShortVo populateICPActionDataFromScreen(ICPActionShortVo icpActionVo)
	{
		// If no ICP Action is given, create a new one
		if (icpActionVo == null)
		{
			icpActionVo = new ICPActionShortVo();
		}

		// Get data from screen
		icpActionVo.setName(form.ctnConfiguration().lyrICPTabs().Action().txtActionName().getValue());
		icpActionVo.setDescription(form.ctnConfiguration().lyrICPTabs().Action().txtActionDescription().getValue());
		icpActionVo.setHelpURL(form.ctnConfiguration().lyrICPTabs().Action().txtActionHelpUrl().getValue());

		icpActionVo.setDiscipline(form.ctnConfiguration().lyrICPTabs().Action().chklistActionDiscipline().getValues());
		
		icpActionVo.setStatus(form.ctnConfiguration().lyrICPTabs().Action().cmbActionStatus().getValue());

		icpActionVo.setSequence(form.ctnConfiguration().lyrICPTabs().Action().intActionSequence().getValue());
		icpActionVo.setLinkedType(form.ctnConfiguration().lyrICPTabs().Action().cmbActionLinkedType().getValue());

		// Set linked object
		if (form.ctnConfiguration().lyrICPTabs().Action().txtActionLink().getValue() == null) //WDEV-17626
		{
			icpActionVo.setLinkedForm(null);
			icpActionVo.setLinkedAssessment(null);
			icpActionVo.setLinkedGraphicAssessment(null);
			icpActionVo.setLinkedOrderEntryTemplate(null);
		}

		if (ICPCompLinkedType.FORM.equals(icpActionVo.getLinkedType()))
		{
			// Set the form linked type
			if (form.getGlobalContext().ICP.getLinkedItem() instanceof AppFormLiteVo)
			{
				icpActionVo.setLinkedForm((AppFormLiteVo) form.getGlobalContext().ICP.getLinkedItem());
			}
		}
		else if (ICPCompLinkedType.GRAPHICALASSESSMENT.equals(icpActionVo.getLinkedType()))
		{
			// Set the graphical assessment linked type
			if (form.getGlobalContext().ICP.getLinkedItem() instanceof GraphicAssessmentLiteVo)
			{
				icpActionVo.setLinkedGraphicAssessment((GraphicAssessmentLiteVo) form.getGlobalContext().ICP.getLinkedItem());
			}
		}
		else if (ICPCompLinkedType.USERDEFINEDASSESSMENT.equals(icpActionVo.getLinkedType()))
		{
			// Set the user defined assessment linked type
			if (form.getGlobalContext().ICP.getLinkedItem() instanceof UserAssessmentLiteVo)
			{
				icpActionVo.setLinkedAssessment((UserAssessmentLiteVo) form.getGlobalContext().ICP.getLinkedItem());
			}
		}
		else if (ICPCompLinkedType.ORDER_TEMPLATE.equals(icpActionVo.getLinkedType()))
		{
			// Set the order template linked type
			if (form.getGlobalContext().ICP.getLinkedItem() instanceof OrderEntryTemplateLiteVo)
			{
				icpActionVo.setLinkedOrderEntryTemplate((OrderEntryTemplateLiteVo) form.getGlobalContext().ICP.getLinkedItem());
			}
		}

		icpActionVo.setIsMandatory(form.ctnConfiguration().lyrICPTabs().Action().chkActionMandatory().getValue());
		icpActionVo.setRequiresCounterSignature(form.ctnConfiguration().lyrICPTabs().Action().chkCounterSignature().getValue());
		
		// Set other linked ICP Action
		icpActionVo.setClinicalDetailActions(form.getGlobalContext().ICP.getLinkedActions());

		// Return the ICP Action with data from screen
		return icpActionVo;
	}

	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - ICP Tab
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to add a procedure row to Procedure grid in ICP tab
	 */
	private void addICPProcedureGridRow()
	{
		// Add a new row to ICP Procedures grid
		form.ctnConfiguration().lyrICPTabs().ICP().grdICPProcedures().getRows().newRow();
	}

	/**
	 * Function used to remove a procedure row from Procedure grid in ICP tab
	 */
	private void removeICPProcedureGridRow()
	{
		// Remove selected row
		form.ctnConfiguration().lyrICPTabs().ICP().grdICPProcedures().removeSelectedRow();
	}

	/**
	 * Function used to populate Procedure in ICP Procedures query combobox
	 */
	private void populateICPProcedures(grdICPProceduresRow row, ProcedureLiteVoCollection procedures)
	{
		// Clear procedures && row value
		row.getcolProcedure().clear();
		row.setValue(null);

		// Terminate function if list is null
		if (procedures == null)
			return;

		for (ProcedureLiteVo procedure : procedures)
		{
			// Skip null procedures
			if (procedure == null)
				continue;

			row.getcolProcedure().newRow(procedure, procedure.getProcedureName());
		}

		// If only one record is present default to it's value
		if (procedures.size() == 1)
		{
			row.getcolProcedure().setValue(procedures.get(0));
			row.setValue(procedures.get(0));
		}
		// If more than one record is present then show the query combobox
		// expanded
		else
		{
			row.getcolProcedure().showOpened();
		}
	}

	/**
	 * Function used to populate ICP Contact Persons
	 * 
	 * @param contactPersons
	 */
	private void populateICPContactPersons(MemberOfStaffLiteVoCollection contactPersons)
	{
		// Clear contact persons
		form.ctnConfiguration().lyrICPTabs().ICP().qmbICPContactPerson().clear();

		// Terminate function if the list is null
		if (contactPersons == null)
			return;

		for (MemberOfStaffLiteVo contactPerson : contactPersons)
		{
			// Skip null contacts
			if (contactPerson == null)
				continue;

			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPContactPerson().newRow(contactPerson, contactPerson.getIMosName());
		}

		if (contactPersons.size() == 1)
		{
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPContactPerson().setValue(contactPersons.get(0));
		}
		else
		{
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPContactPerson().showOpened();
		}
	}

	/**
	 * Function used to populate ICP Diagnosis
	 * 
	 * @param diagnosisCollection
	 */
	private void populateICPDiagnosis(DiagLiteVoCollection diagnosisCollection)
	{
		// Clear diagnosis
		form.ctnConfiguration().lyrICPTabs().ICP().qmbICPDiagnosis().clear();

		// Terminate function if the list is null
		if (diagnosisCollection == null)
			return;

		for (DiagLiteVo diagnose : diagnosisCollection)
		{
			// Skip null diagnose
			if (diagnose == null)
				continue;

			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPDiagnosis().newRow(diagnose, diagnose.getDiagnosisName());
		}

		if (diagnosisCollection.size() == 1)
		{
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPDiagnosis().setValue(diagnosisCollection.get(0));
		}
		else
		{
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPDiagnosis().showOpened();
		}
	}
	
	
	/**
	 * Function used to populate ICP Problems
	 * 
	 * @param problemsCollection
	 */
	private void populateICPProblems(ClinicalProblemShortVoCollection problemsCollection)
	{
		// Clear problems
		form.ctnConfiguration().lyrICPTabs().ICP().qmbICPProblem().clear();
		
		// Terminate function if the list is null
		if (problemsCollection == null)
			return;
		
		for (ClinicalProblemShortVo problem : problemsCollection)
		{
			// Skip null problems
			if (problem == null)
				continue;
			
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPProblem().newRow(problem, problem.getPCName());
		}
		
		if (problemsCollection.size() == 1)
		{
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPProblem().setValue(problemsCollection.get(0));
		}
		else
		{
			form.ctnConfiguration().lyrICPTabs().ICP().qmbICPProblem().showOpened();
		}
	}


	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - ICP Stage Tab
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to open the dialog to add a business rule
	 */
	private void addBussinessRule()
	{
		// Set local context action to NEW rule (will be used in OnFormDialogClosed)
		form.getLocalContext().setBusinessRuleAction(ACTION_BUSINESS_RULE_NEW);

		// Rule passed to be edited global context (OVERKILL)
		form.getGlobalContext().Rules.setRuleToEdit(null);

		// Open business rule editor dialog (with parameters - selected rule
		// (null) - currently is not used but it might in the future, current
		// selected ICP, form mode)
		engine.open(form.getForms().ICP.ICPRulesEditorDialog, new Object[] { null, form.getLocalContext().getSelectedICP(), FormMode.EDIT });
	}

	/**
	 * Function used to open the dialog to edit a business rule
	 */
	private void editBussinessRule()
	{
		// Set local context action to EDIT rule (will be used in
		// OnFormDialogClosed)
		form.getLocalContext().setBusinessRuleAction(ACTION_BUSINESS_RULE_EDIT);

		// Rule passed to be edited global context (OVERKILL)
		BusinessRuleVo rule = form.ctnConfiguration().lyrICPTabs().Stage().isVisible() ? form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getValue() : form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getValue();

		form.getGlobalContext().Rules.setRuleToEdit(rule);

		// Open business rule editor dialog (with parameters - selected rule -
		// currently is not used but it might in the future, current selected
		// ICP, form mode)
		engine.open(form.getForms().ICP.ICPRulesEditorDialog, new Object[] { rule, form.getLocalContext().getSelectedICP(), FormMode.EDIT });
	}

	/**
	 * Function used to update a Business Rule row after edit or create
	 * @param rule
	 */
	private void updateStagePhaseRule(BusinessRuleVo rule)
	{
		if (rule != null)
		{
			// Determine which tab are we on (Stage or Phase)
			if (form.ctnConfiguration().lyrICPTabs().Stage().isVisible())
			{
				// Create a new row in the grid or get selected grid row
				grdStageRulesRow ruleRow = null;

				if (new Integer(ACTION_BUSINESS_RULE_NEW).equals(form.getLocalContext().getBusinessRuleAction()))
				{
					ruleRow = form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getRows().newRow();
				}
				else
				{
					ruleRow = form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getSelectedRow();
				}

				// Set row columns
				ruleRow.setcolName(rule.getName());
				ruleRow.setcolDescription(rule.getDescription());
				ruleRow.setTooltipForcolDescription(rule.getDescription());
				ruleRow.setcolCategory(rule.getCategory());
				ruleRow.setcolActive(rule.getActive());
				// Set row value
				ruleRow.setValue(rule);

				// Reselect row && reset scroll position
				form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().setValue(rule);
				form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().resetScrollPosition();
			}
			else if (form.ctnConfiguration().lyrICPTabs().Phase().isVisible())
			{
				// Create a new row in the grid or get selected grid row
				grdPhaseRulesRow ruleRow = null;

				if (new Integer(ACTION_BUSINESS_RULE_NEW).equals(form.getLocalContext().getBusinessRuleAction()))
				{
					ruleRow = form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getRows().newRow();
				}
				else
				{
					ruleRow = form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getSelectedRow();
				}

				// Set row columns
				ruleRow.setcolName(rule.getName());
				ruleRow.setcolDescription(rule.getDescription());
				ruleRow.setTooltipForcolDescription(rule.getDescription());
				ruleRow.setcolCategory(rule.getCategory());
				ruleRow.setcolActive(rule.getActive());
				// Set row value
				ruleRow.setValue(rule);

				// Reselect row && reset scroll position
				form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().setValue(rule);
				form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().resetScrollPosition();
			}
		}
	}

	/**
	 * Function used to remove the selected rule from business rules grid
	 */
	private void removeBusinessRule()
	{
		// Determine which tab are we on (Stage or Phase)
		if (form.ctnConfiguration().lyrICPTabs().Stage().isVisible())
		{
			form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().removeSelectedRow();
		}
		else if (form.ctnConfiguration().lyrICPTabs().Phase().isVisible())
		{
			form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().removeSelectedRow();
		}
	}

	/**
	 * Function used to remove all the rules from business rules grid
	 */
	private void removeAllBusinessRules()
	{
		// Determine which tab are we on (Stage or Phase)
		if (form.ctnConfiguration().lyrICPTabs().Stage().isVisible())
		{
			form.ctnConfiguration().lyrICPTabs().Stage().grdStageRules().getRows().clear();
		}
		else if (form.ctnConfiguration().lyrICPTabs().Phase().isVisible())
		{
			form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseRules().getRows().clear();
		}
	}

	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - ICP Phase Tab
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to open the dialog to add a phase goal It will clear the
	 * global context for phase goal
	 */
	private void addPhaseGoal()
	{
		// Set local context action to NEW goal (will be used in
		// OnFormDialogClosed)
		form.getLocalContext().setGoalAction(ACTION_GOAL_NEW);

		// Pass null for goal
		form.getGlobalContext().ICP.setIcpPhaseGoal(null);

		// Open dialog for editing goal
		engine.open(form.getForms().ICP.ICPGoal);
	}

	/**
	 * Function used to edit a phase dialog It will populate the global context
	 * with selected Phase Goal
	 */
	private void editPhaseGoal()
	{
		// Set local context action to NEW goal (will be used in
		// OnFormDialogClosed)
		form.getLocalContext().setGoalAction(ACTION_GOAL_EDIT);

		// Pass selected goal
		form.getGlobalContext().ICP.setIcpPhaseGoal(form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().getValue());

		// Open dialog for editing goal
		engine.open(form.getForms().ICP.ICPGoal);
	}
	
	
	/**
	 * Function used to update a Phase Goal row after edit or create
	 */
	private void updatePhaseGoal(IcpPhaseGoalVo phaseGoal)
	{
		if (phaseGoal != null)
		{
			// Create a new row in the grid or get selected grid row
			grdPhaseGoalsRow goalRow = null;

			if (new Integer(ACTION_GOAL_NEW).equals(form.getLocalContext().getGoalAction()))
			{
				goalRow = form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().getRows().newRow();
			}
			else
			{
				goalRow = form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().getSelectedRow();
			}

			// Set row columns
			goalRow.setcolGoal(phaseGoal.getGoal());
			goalRow.setcolActive(Boolean.TRUE.equals(phaseGoal.getIsActive()) ? form.getImages().Core.Tick : null);
			// Set row value
			goalRow.setValue(phaseGoal);

			// Reselect row && reset scroll position
			form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().setValue(phaseGoal);
			form.ctnConfiguration().lyrICPTabs().Phase().grdPhaseGoals().resetScrollPosition();
		}
	}


	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - ICP Actions Tab
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to set the value of ICP Action liked item Must set a local
	 * context
	 */
	private void setLinkedItem(IActionICPLinkedItem linkedItem)
	{
		// Clear linked item text box
		form.ctnConfiguration().lyrICPTabs().Action().txtActionLink().setValue(null);

		// Set global context
		form.getGlobalContext().ICP.setLinkedItem(linkedItem);

		// Set the text box
		if (linkedItem != null)
		{
			form.ctnConfiguration().lyrICPTabs().Action().txtActionLink().setValue(linkedItem.getDisplayText());
		}
	}

	// ------------------------------------------------------------------------------------------------------------------------------------------------------
	// Region - Comparators
	// ------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Stage comparator - sort by sequence
	 */
	private class StageComparator implements Comparator<ICPStageLiteVo>
	{
		public int compare(ICPStageLiteVo stage1, ICPStageLiteVo stage2)
		{
			if (stage1 != null && stage2 != null && stage1.getSequenceIsNotNull() && stage2.getSequenceIsNotNull())
				return stage1.getSequence().compareTo(stage2.getSequence());

			return 0;
		}
	}

	/**
	 * Phase comparator - sort by sequence
	 */
	private class PhaseComparator implements Comparator<ICPPhaseLiteVo>
	{
		public int compare(ICPPhaseLiteVo phase1, ICPPhaseLiteVo phase2)
		{
			if (phase1 != null && phase2 != null && phase1.getSequenceIsNotNull() && phase2.getSequenceIsNotNull())
				return phase1.getSequence().compareTo(phase2.getSequence());

			return 0;
		}
	}

	/**
	 * Action comparator - sort by sequence
	 */
	private class ActionComparator implements Comparator<ICPActionLiteVo>
	{
		public int compare(ICPActionLiteVo action1, ICPActionLiteVo action2)
		{
			if (action1 != null && action2 != null && action1.getSequenceIsNotNull() && action2.getSequenceIsNotNull())
				return action1.getSequence().compareTo(action2.getSequence());

			return 0;
		}
	}
}
