//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.icp.forms.icpconfig;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnConfigurationContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class lyrICPTabsLayer extends Layer
		{
			private static final long serialVersionUID = 1L;
			public static class ICPContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbICPStatusComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
					{
						return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbICPCategoryComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.ICPCategoryType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.ICPCategoryType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.ICPCategoryType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.ICPCategoryType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.ICPCategoryType value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.ICPCategoryType getValue()
					{
						return (ims.core.vo.lookups.ICPCategoryType)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.ICPCategoryType value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbICPSpecialtyComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.Specialty value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.Specialty value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.Specialty getValue()
					{
						return (ims.core.vo.lookups.Specialty)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.Specialty value)
					{
						super.control.setValue(value);
					}
				}
				public static class qmbICPProblemComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.vo.ClinicalProblemShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.vo.ClinicalProblemShortVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.vo.ClinicalProblemShortVo getValue()
					{
						return (ims.clinical.vo.ClinicalProblemShortVo)super.control.getValue();
					}
					public void setValue(ims.clinical.vo.ClinicalProblemShortVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public static class qmbICPContactPersonComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.MemberOfStaffLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.MemberOfStaffLiteVo getValue()
					{
						return (ims.core.vo.MemberOfStaffLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.MemberOfStaffLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public static class qmbICPDiagnosisComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.DiagLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.DiagLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.DiagLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.DiagLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.DiagLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.DiagLiteVo getValue()
					{
						return (ims.core.vo.DiagLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.DiagLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
				public static class grdICPProceduresRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdICPProceduresRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolProcedureReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolProcedureReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolProcedureOpened()
					{
						super.row.showOpened(0);
					}
					public ims.framework.controls.GridMutableComboBox getcolProcedure()
					{
						return new ims.framework.controls.GridMutableComboBox(super.row, 0);
					}
					public void setCellcolProcedureTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public ims.core.vo.ProcedureLiteVo getValue()
					{
						return (ims.core.vo.ProcedureLiteVo)super.row.getValue();
					}
					public void setValue(ims.core.vo.ProcedureLiteVo value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdICPProceduresRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdICPProceduresRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdICPProceduresRow get(int index)
					{
						return new grdICPProceduresRow(super.collection.get(index));
					}
					public grdICPProceduresRow newRow()
					{
						return new grdICPProceduresRow(super.collection.newRow());
					}
					public grdICPProceduresRow newRow(boolean autoSelect)
					{
						return new grdICPProceduresRow(super.collection.newRow(autoSelect));
					}
					public grdICPProceduresRow newRowAt(int index)
					{
						return new grdICPProceduresRow(super.collection.newRowAt(index));
					}
					public grdICPProceduresRow newRowAt(int index, boolean autoSelect)
					{
						return new grdICPProceduresRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdICPProceduresGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
					{
						 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
					}
					public ims.core.vo.ProcedureLiteVoCollection getValues()
					{
						ims.core.vo.ProcedureLiteVoCollection listOfValues = new ims.core.vo.ProcedureLiteVoCollection();
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues.add(this.getRows().get(x).getValue());
						}
						return listOfValues;
					}
					public ims.core.vo.ProcedureLiteVo getValue()
					{
						return (ims.core.vo.ProcedureLiteVo)super.grid.getValue();
					}
					public void setValue(ims.core.vo.ProcedureLiteVo value)
					{
						super.grid.setValue(value);
					}
					public grdICPProceduresRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdICPProceduresRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdICPProceduresRowCollection getRows()
					{
						return new grdICPProceduresRowCollection(super.grid.getRows());
					}
					public grdICPProceduresRow getRowByValue(ims.core.vo.ProcedureLiteVo value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdICPProceduresRow(row);
					}
					public void setcolProcedureHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolProcedureHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 58, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Problem:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 152, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 130, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Help URL:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 106, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnosis:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 496, 82, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Status:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 496, 58, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Category:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 496, 34, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Contact Person:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 496, 10, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Creation Date:", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 88, 128, 712, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 88, 104, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(250), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 88, 80, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
			
					// Date Controls
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 592, 8, 208, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 592, 80, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					ComboBox m_cmbICPStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbICPStatusTemp);
					cmbICPStatusComboBox cmbICPStatus = (cmbICPStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbICPStatusComboBox.class, m_cmbICPStatusTemp);
					super.addComboBox(cmbICPStatus);
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 592, 56, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					ComboBox m_cmbICPCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbICPCategoryTemp);
					cmbICPCategoryComboBox cmbICPCategory = (cmbICPCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbICPCategoryComboBox.class, m_cmbICPCategoryTemp);
					super.addComboBox(cmbICPCategory);
					RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 88, 8, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbICPSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbICPSpecialtyTemp);
					cmbICPSpecialtyComboBox cmbICPSpecialty = (cmbICPSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbICPSpecialtyComboBox.class, m_cmbICPSpecialtyTemp);
					super.addComboBox(cmbICPSpecialty);
			
					// Query ComboBox Controls
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 88, 56, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_qmbICPProblemTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbICPProblemTemp);
					qmbICPProblemComboBox qmbICPProblem = (qmbICPProblemComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbICPProblemComboBox.class, m_qmbICPProblemTemp);
					super.addComboBox(qmbICPProblem);
					RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 592, 32, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					ComboBox m_qmbICPContactPersonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbICPContactPersonTemp);
					qmbICPContactPersonComboBox qmbICPContactPerson = (qmbICPContactPersonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbICPContactPersonComboBox.class, m_qmbICPContactPersonTemp);
					super.addComboBox(qmbICPContactPerson);
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 88, 32, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_qmbICPDiagnosisTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbICPDiagnosisTemp);
					qmbICPDiagnosisComboBox qmbICPDiagnosis = (qmbICPDiagnosisComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbICPDiagnosisComboBox.class, m_qmbICPDiagnosisTemp);
					super.addComboBox(qmbICPDiagnosis);
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 88, 152, 712, 96, ims.framework.enumerations.ControlAnchoring.ALL);
					Grid m_grdICPProceduresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.DISABLED, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.ICP.contextMenuICPConfigurationProcedures, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdICPProceduresTemp);
					grdICPProceduresGrid grdICPProcedures = (grdICPProceduresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdICPProceduresGrid.class, m_grdICPProceduresTemp);
					grdICPProcedures.addMutableComboBoxColumn("Procedure", 0, 0, -1, false, true, true, false, true, true, -1);
					super.addGrid(grdICPProcedures);
				}
	
				public TextBox txtICPHelpUrl()
				{
					return (TextBox)super.getControl(11);
				}
				public TextBox txtICPDescription()
				{
					return (TextBox)super.getControl(12);
				}
				public TextBox txtICPName()
				{
					return (TextBox)super.getControl(13);
				}
				public DateControl dteICPCreationDate()
				{
					return (DateControl)super.getControl(14);
				}
				public cmbICPStatusComboBox cmbICPStatus()
				{
					return (cmbICPStatusComboBox)super.getComboBox(0);
				}
				public cmbICPCategoryComboBox cmbICPCategory()
				{
					return (cmbICPCategoryComboBox)super.getComboBox(1);
				}
				public cmbICPSpecialtyComboBox cmbICPSpecialty()
				{
					return (cmbICPSpecialtyComboBox)super.getComboBox(2);
				}
				public qmbICPProblemComboBox qmbICPProblem()
				{
					return (qmbICPProblemComboBox)super.getComboBox(3);
				}
				public qmbICPContactPersonComboBox qmbICPContactPerson()
				{
					return (qmbICPContactPersonComboBox)super.getComboBox(4);
				}
				public qmbICPDiagnosisComboBox qmbICPDiagnosis()
				{
					return (qmbICPDiagnosisComboBox)super.getComboBox(5);
				}
				public grdICPProceduresGrid grdICPProcedures()
				{
					return (grdICPProceduresGrid)super.getGrid(0);
				}
			}
			public static class StageContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbStageStatusComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
					{
						return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
					{
						super.control.setValue(value);
					}
				}
				public static class grdStageRulesRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdStageRulesRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolNameReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolNameReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolNameOpened()
					{
						super.row.showOpened(0);
					}
					public void setTooltipForcolName(String value)
					{
						super.row.setTooltip(0, value);
					}
					public String getcolName()
					{
						return (String)super.row.get(0);
					}
					public void setcolName(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolNameTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolDescriptionReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolDescriptionReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolDescriptionOpened()
					{
						super.row.showOpened(1);
					}
					public void setTooltipForcolDescription(String value)
					{
						super.row.setTooltip(1, value);
					}
					public String getcolDescription()
					{
						return (String)super.row.get(1);
					}
					public void setcolDescription(String value)
					{
						super.row.set(1, value);
					}
					public void setCellcolDescriptionTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolCategoryReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolCategoryReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolCategoryOpened()
					{
						super.row.showOpened(2);
					}
					public void setTooltipForcolCategory(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.admin.vo.lookups.BusinessRuleCategory getcolCategory()
					{
						return (ims.admin.vo.lookups.BusinessRuleCategory)super.row.get(2);
					}
					public void setcolCategory(ims.admin.vo.lookups.BusinessRuleCategory value)
					{
						super.row.set(2, value, true);
					}
					public void setCellcolCategoryTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public void setcolActiveReadOnly(boolean value)
					{
						super.row.setReadOnly(3, value);
					}
					public boolean iscolActiveReadOnly()
					{
						return super.row.isReadOnly(3);
					}
					public void showcolActiveOpened()
					{
						super.row.showOpened(3);
					}
					public void setTooltipForcolActive(String value)
					{
						super.row.setTooltip(3, value);
					}
					public boolean getcolActive()
					{
						return ((Boolean)super.row.get(3)).booleanValue();
					}
					public void setcolActive(boolean value)
					{
						super.row.set(3, new Boolean(value));
					}
					public void setCellcolActiveTooltip(String value)
					{
						super.row.setTooltip(3, value);
					}
					public ims.admin.vo.BusinessRuleVo getValue()
					{
						return (ims.admin.vo.BusinessRuleVo)super.row.getValue();
					}
					public void setValue(ims.admin.vo.BusinessRuleVo value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdStageRulesRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdStageRulesRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdStageRulesRow get(int index)
					{
						return new grdStageRulesRow(super.collection.get(index));
					}
					public grdStageRulesRow newRow()
					{
						return new grdStageRulesRow(super.collection.newRow());
					}
					public grdStageRulesRow newRow(boolean autoSelect)
					{
						return new grdStageRulesRow(super.collection.newRow(autoSelect));
					}
					public grdStageRulesRow newRowAt(int index)
					{
						return new grdStageRulesRow(super.collection.newRowAt(index));
					}
					public grdStageRulesRow newRowAt(int index, boolean autoSelect)
					{
						return new grdStageRulesRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdStageRulesGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
					{
						super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.admin.vo.BusinessRuleVoCollection getValues()
					{
						ims.admin.vo.BusinessRuleVoCollection listOfValues = new ims.admin.vo.BusinessRuleVoCollection();
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues.add(this.getRows().get(x).getValue());
						}
						return listOfValues;
					}
					public ims.admin.vo.BusinessRuleVo getValue()
					{
						return (ims.admin.vo.BusinessRuleVo)super.grid.getValue();
					}
					public void setValue(ims.admin.vo.BusinessRuleVo value)
					{
						super.grid.setValue(value);
					}
					public grdStageRulesRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdStageRulesRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdStageRulesRowCollection getRows()
					{
						return new grdStageRulesRowCollection(super.grid.getRows());
					}
					public grdStageRulesRow getRowByValue(ims.admin.vo.BusinessRuleVo value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdStageRulesRow(row);
					}
					public void setcolNameHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolNameHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolDescriptionHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolDescriptionHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolCategoryHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolCategoryHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
					public GridComboBox colCategoryComboBox()
					{
						return new GridComboBox(super.grid, 2);
					}
					public void setcolActiveHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(3, value);
					}
					public String getcolActiveHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(3);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 72, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Precondition\nRules:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 58, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Help URL:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 640, 10, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Has Phases:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 448, 82, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Activate on Initiation:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 448, 10, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Sequence:", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 88, 56, 712, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
					RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 88, 32, 712, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
					RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 88, 8, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 88, 80, 312, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbStageStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbStageStatusTemp);
					cmbStageStatusComboBox cmbStageStatus = (cmbStageStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStageStatusComboBox.class, m_cmbStageStatusTemp);
					super.addComboBox(cmbStageStatus);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 720, 10, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 584, 82, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 88, 104, 712, 144, ims.framework.enumerations.ControlAnchoring.ALL);
					Grid m_grdStageRulesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.DISABLED, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.ICP.contextMenuICPSearchStageRules, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdStageRulesTemp);
					grdStageRulesGrid grdStageRules = (grdStageRulesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdStageRulesGrid.class, m_grdStageRulesTemp);
					grdStageRules.addStringColumn("Name", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdStageRules.addStringColumn("Description", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdStageRules.addComboBoxColumn("Category", 0, 0, 100, true, true, false, false, true, -1);
					grdStageRules.addBoolColumn("Active", 0, 0, -1, true, false, 0, true);
					super.addGrid(grdStageRules);
			
					// IntBox Controls
					RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 520, 8, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				}
	
				public TextBox txtStageHelpUrl()
				{
					return (TextBox)super.getControl(8);
				}
				public TextBox txtStageDescription()
				{
					return (TextBox)super.getControl(9);
				}
				public TextBox txtStageName()
				{
					return (TextBox)super.getControl(10);
				}
				public cmbStageStatusComboBox cmbStageStatus()
				{
					return (cmbStageStatusComboBox)super.getComboBox(0);
				}
				public CheckBox chkStageHasPhases()
				{
					return (CheckBox)super.getControl(12);
				}
				public CheckBox chkStageActivate()
				{
					return (CheckBox)super.getControl(13);
				}
				public grdStageRulesGrid grdStageRules()
				{
					return (grdStageRulesGrid)super.getGrid(0);
				}
				public IntBox intStageSequence()
				{
					return (IntBox)super.getControl(15);
				}
			}
			public static class PhaseContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbPhaseStatusComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
					{
						return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
					{
						super.control.setValue(value);
					}
				}
				public static class grdPhaseRulesRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdPhaseRulesRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolNameReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolNameReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolNameOpened()
					{
						super.row.showOpened(0);
					}
					public void setTooltipForcolName(String value)
					{
						super.row.setTooltip(0, value);
					}
					public String getcolName()
					{
						return (String)super.row.get(0);
					}
					public void setcolName(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolNameTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolDescriptionReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolDescriptionReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolDescriptionOpened()
					{
						super.row.showOpened(1);
					}
					public void setTooltipForcolDescription(String value)
					{
						super.row.setTooltip(1, value);
					}
					public String getcolDescription()
					{
						return (String)super.row.get(1);
					}
					public void setcolDescription(String value)
					{
						super.row.set(1, value);
					}
					public void setCellcolDescriptionTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public void setcolCategoryReadOnly(boolean value)
					{
						super.row.setReadOnly(2, value);
					}
					public boolean iscolCategoryReadOnly()
					{
						return super.row.isReadOnly(2);
					}
					public void showcolCategoryOpened()
					{
						super.row.showOpened(2);
					}
					public void setTooltipForcolCategory(String value)
					{
						super.row.setTooltip(2, value);
					}
					public ims.admin.vo.lookups.BusinessRuleCategory getcolCategory()
					{
						return (ims.admin.vo.lookups.BusinessRuleCategory)super.row.get(2);
					}
					public void setcolCategory(ims.admin.vo.lookups.BusinessRuleCategory value)
					{
						super.row.set(2, value, true);
					}
					public void setCellcolCategoryTooltip(String value)
					{
						super.row.setTooltip(2, value);
					}
					public void setcolActiveReadOnly(boolean value)
					{
						super.row.setReadOnly(3, value);
					}
					public boolean iscolActiveReadOnly()
					{
						return super.row.isReadOnly(3);
					}
					public void showcolActiveOpened()
					{
						super.row.showOpened(3);
					}
					public void setTooltipForcolActive(String value)
					{
						super.row.setTooltip(3, value);
					}
					public boolean getcolActive()
					{
						return ((Boolean)super.row.get(3)).booleanValue();
					}
					public void setcolActive(boolean value)
					{
						super.row.set(3, new Boolean(value));
					}
					public void setCellcolActiveTooltip(String value)
					{
						super.row.setTooltip(3, value);
					}
					public ims.admin.vo.BusinessRuleVo getValue()
					{
						return (ims.admin.vo.BusinessRuleVo)super.row.getValue();
					}
					public void setValue(ims.admin.vo.BusinessRuleVo value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdPhaseRulesRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdPhaseRulesRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdPhaseRulesRow get(int index)
					{
						return new grdPhaseRulesRow(super.collection.get(index));
					}
					public grdPhaseRulesRow newRow()
					{
						return new grdPhaseRulesRow(super.collection.newRow());
					}
					public grdPhaseRulesRow newRow(boolean autoSelect)
					{
						return new grdPhaseRulesRow(super.collection.newRow(autoSelect));
					}
					public grdPhaseRulesRow newRowAt(int index)
					{
						return new grdPhaseRulesRow(super.collection.newRowAt(index));
					}
					public grdPhaseRulesRow newRowAt(int index, boolean autoSelect)
					{
						return new grdPhaseRulesRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdPhaseRulesGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
					{
						super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
					}
					private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
					{
						super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
					}
					public ims.admin.vo.BusinessRuleVoCollection getValues()
					{
						ims.admin.vo.BusinessRuleVoCollection listOfValues = new ims.admin.vo.BusinessRuleVoCollection();
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues.add(this.getRows().get(x).getValue());
						}
						return listOfValues;
					}
					public ims.admin.vo.BusinessRuleVo getValue()
					{
						return (ims.admin.vo.BusinessRuleVo)super.grid.getValue();
					}
					public void setValue(ims.admin.vo.BusinessRuleVo value)
					{
						super.grid.setValue(value);
					}
					public grdPhaseRulesRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdPhaseRulesRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdPhaseRulesRowCollection getRows()
					{
						return new grdPhaseRulesRowCollection(super.grid.getRows());
					}
					public grdPhaseRulesRow getRowByValue(ims.admin.vo.BusinessRuleVo value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdPhaseRulesRow(row);
					}
					public void setcolNameHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolNameHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolDescriptionHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolDescriptionHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
					public void setcolCategoryHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(2, value);
					}
					public String getcolCategoryHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(2);
					}
					public GridComboBox colCategoryComboBox()
					{
						return new GridComboBox(super.grid, 2);
					}
					public void setcolActiveHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(3, value);
					}
					public String getcolActiveHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(3);
					}
				}
				public static class grdPhaseGoalsRow extends GridRowBridge
				{
					private static final long serialVersionUID = 1L;
					
					protected grdPhaseGoalsRow(GridRow row)
					{
						super(row);
					}
					public void showOpened(int column)
					{
						super.row.showOpened(column);
					}
					public void setcolGoalReadOnly(boolean value)
					{
						super.row.setReadOnly(0, value);
					}
					public boolean iscolGoalReadOnly()
					{
						return super.row.isReadOnly(0);
					}
					public void showcolGoalOpened()
					{
						super.row.showOpened(0);
					}
					public String getcolGoal()
					{
						return (String)super.row.get(0);
					}
					public void setcolGoal(String value)
					{
						super.row.set(0, value);
					}
					public void setCellcolGoalTooltip(String value)
					{
						super.row.setTooltip(0, value);
					}
					public void setcolActiveReadOnly(boolean value)
					{
						super.row.setReadOnly(1, value);
					}
					public boolean iscolActiveReadOnly()
					{
						return super.row.isReadOnly(1);
					}
					public void showcolActiveOpened()
					{
						super.row.showOpened(1);
					}
					public ims.framework.utils.Image getcolActive()
					{
						return (ims.framework.utils.Image)super.row.get(1);
					}
					public void setcolActive(ims.framework.utils.Image value)
					{
						super.row.set(1, value);
					}
					public void setCellcolActiveTooltip(String value)
					{
						super.row.setTooltip(1, value);
					}
					public ims.icp.vo.IcpPhaseGoalVo getValue()
					{
						return (ims.icp.vo.IcpPhaseGoalVo)super.row.getValue();
					}
					public void setValue(ims.icp.vo.IcpPhaseGoalVo value)
					{
						super.row.setValue(value);
					}
				}
				public static class grdPhaseGoalsRowCollection extends GridRowCollectionBridge
				{
					private static final long serialVersionUID = 1L;
					
					private grdPhaseGoalsRowCollection(GridRowCollection collection)
					{
						super(collection);
					}
					public grdPhaseGoalsRow get(int index)
					{
						return new grdPhaseGoalsRow(super.collection.get(index));
					}
					public grdPhaseGoalsRow newRow()
					{
						return new grdPhaseGoalsRow(super.collection.newRow());
					}
					public grdPhaseGoalsRow newRow(boolean autoSelect)
					{
						return new grdPhaseGoalsRow(super.collection.newRow(autoSelect));
					}
					public grdPhaseGoalsRow newRowAt(int index)
					{
						return new grdPhaseGoalsRow(super.collection.newRowAt(index));
					}
					public grdPhaseGoalsRow newRowAt(int index, boolean autoSelect)
					{
						return new grdPhaseGoalsRow(super.collection.newRowAt(index, autoSelect));
					}
				}
				public static class grdPhaseGoalsGrid extends GridBridge
				{
					private static final long serialVersionUID = 1L;
					
					private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
					{
						super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
					}
					private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
					{
						super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
					}
					public ims.icp.vo.IcpPhaseGoalVoCollection getValues()
					{
						ims.icp.vo.IcpPhaseGoalVoCollection listOfValues = new ims.icp.vo.IcpPhaseGoalVoCollection();
						for(int x = 0; x < this.getRows().size(); x++)
						{
							listOfValues.add(this.getRows().get(x).getValue());
						}
						return listOfValues;
					}
					public ims.icp.vo.IcpPhaseGoalVo getValue()
					{
						return (ims.icp.vo.IcpPhaseGoalVo)super.grid.getValue();
					}
					public void setValue(ims.icp.vo.IcpPhaseGoalVo value)
					{
						super.grid.setValue(value);
					}
					public grdPhaseGoalsRow getSelectedRow()
					{
						return super.grid.getSelectedRow() == null ? null : new grdPhaseGoalsRow(super.grid.getSelectedRow());
					}
					public int getSelectedRowIndex()
					{
						return super.grid.getSelectedRowIndex();
					}
					public grdPhaseGoalsRowCollection getRows()
					{
						return new grdPhaseGoalsRowCollection(super.grid.getRows());
					}
					public grdPhaseGoalsRow getRowByValue(ims.icp.vo.IcpPhaseGoalVo value)
					{
						GridRow row = super.grid.getRowByValue(value);
						return row == null?null:new grdPhaseGoalsRow(row);
					}
					public void setcolGoalHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(0, value);
					}
					public String getcolGoalHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(0);
					}
					public void setcolActiveHeaderTooltip(String value)
					{
						super.grid.setColumnHeaderTooltip(1, value);
					}
					public String getcolActiveHeaderTooltip()
					{
						return super.grid.getColumnHeaderTooltip(1);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 448, 82, 129, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Activate on Initiation:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 448, 10, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Sequence:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 40, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Goals:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 104, 72, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Precondition\nRules:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 82, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 58, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Help URL:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 88, 56, 712, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 55), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
					RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 88, 32, 712, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 54), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
					RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 88, 8, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 88, 80, 312, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbPhaseStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 56), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbPhaseStatusTemp);
					cmbPhaseStatusComboBox cmbPhaseStatus = (cmbPhaseStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPhaseStatusComboBox.class, m_cmbPhaseStatusTemp);
					super.addComboBox(cmbPhaseStatus);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 584, 82, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 57), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			
					// Grid Controls
					RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 88, 104, 712, 72, ims.framework.enumerations.ControlAnchoring.ALL);
					Grid m_grdPhaseRulesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 59), ControlState.DISABLED, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.ICP.contextMenuICPSearchStageRules, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdPhaseRulesTemp);
					grdPhaseRulesGrid grdPhaseRules = (grdPhaseRulesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPhaseRulesGrid.class, m_grdPhaseRulesTemp);
					grdPhaseRules.addStringColumn("Name", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdPhaseRules.addStringColumn("Description", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdPhaseRules.addComboBoxColumn("Category", 0, 0, 100, true, true, false, false, true, -1);
					grdPhaseRules.addBoolColumn("Active", 0, 0, -1, true, false, 0, true);
					super.addGrid(grdPhaseRules);
					RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 88, 176, 712, 72, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
					Grid m_grdPhaseGoalsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 61), ControlState.DISABLED, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.ICP.contextMenuPhaseGoals, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
					addControl(m_grdPhaseGoalsTemp);
					grdPhaseGoalsGrid grdPhaseGoals = (grdPhaseGoalsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPhaseGoalsGrid.class, m_grdPhaseGoalsTemp);
					grdPhaseGoals.addStringColumn("Goal", 0, 0, 500, true, false, 0, 500, true, ims.framework.enumerations.CharacterCasing.NORMAL);
					grdPhaseGoals.addImageColumn("Active", 0, 0, -1, true, 0);
					super.addGrid(grdPhaseGoals);
			
					// IntBox Controls
					RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 520, 8, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 52), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				}
	
				public TextBox txtPhaseHelpUrl()
				{
					return (TextBox)super.getControl(8);
				}
				public TextBox txtPhaseDescription()
				{
					return (TextBox)super.getControl(9);
				}
				public TextBox txtPhaseName()
				{
					return (TextBox)super.getControl(10);
				}
				public cmbPhaseStatusComboBox cmbPhaseStatus()
				{
					return (cmbPhaseStatusComboBox)super.getComboBox(0);
				}
				public CheckBox chkPhaseActivate()
				{
					return (CheckBox)super.getControl(12);
				}
				public grdPhaseRulesGrid grdPhaseRules()
				{
					return (grdPhaseRulesGrid)super.getGrid(0);
				}
				public grdPhaseGoalsGrid grdPhaseGoals()
				{
					return (grdPhaseGoalsGrid)super.getGrid(1);
				}
				public IntBox intPhaseSequence()
				{
					return (IntBox)super.getControl(15);
				}
			}
			public static class ActionContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class chklistActionDisciplineCheckedListBox extends CheckedListBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.HcpDisType value, boolean checked, boolean enabled)
					{
						super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor(), checked, enabled));
					}
					public void newRow(ims.core.vo.lookups.HcpDisType value)
					{
						super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor()));
					}
					public void newRow(ims.core.vo.lookups.HcpDisType value, boolean checked)
					{
						super.control.newItem(new ListItem(value, value.getText(), value.getImage(), value.getTextColor(), checked, true));
					}
					public ims.core.vo.lookups.HcpDisTypeCollection getValues()
					{
						ListItemCollection checkedItems = super.control.getCheckedItems();
						if(checkedItems.size() == 0)
							return null;
						ims.core.vo.lookups.HcpDisTypeCollection items = new ims.core.vo.lookups.HcpDisTypeCollection();
						for(int x = 0; x < checkedItems.size(); x++)
						{
							items.add((ims.core.vo.lookups.HcpDisType)checkedItems.get(x).getValue());
						}
						return items;
					}
					public void setValues(ims.core.vo.lookups.HcpDisTypeCollection values)
					{
						if(values == null)
							super.control.setCheckedItems(null);
						else
						{
							ListItemCollection checkedItems = new ListItemCollection();
							for(int x = 0; x < values.size(); x++)
							{
								ListItem item = new ListItem();
								item.setValue(values.get(x));
								checkedItems.add(item);
							}
							super.control.setCheckedItems(checkedItems);
						}
					}
				}
				public static class cmbActionLinkedTypeComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.ICPCompLinkedType value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.ICPCompLinkedType value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.ICPCompLinkedType value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.ICPCompLinkedType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.ICPCompLinkedType value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.ICPCompLinkedType getValue()
					{
						return (ims.core.vo.lookups.ICPCompLinkedType)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.ICPCompLinkedType value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbActionStatusComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
					{
						return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
					{
						super.control.setValue(value);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Label Controls
					RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 464, 94, 166, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Requires Counter-signature:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 224, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Help URL:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 123, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 8, 101, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 13, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discipline:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 464, 118, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Mandatory:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 464, 40, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Linked Type:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 464, 13, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Sequence:", new Integer(1), null, new Integer(0)}));
			
					// Button Controls
					RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 592, 220, 208, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 79), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "View / Edit Action Links", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
					RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 776, 62, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 76), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "...", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 544, 64, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 75), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
					RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 88, 198, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 69), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
					RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 88, 123, 328, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 67), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
					RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 88, 99, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 65), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 544, 38, 256, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					ComboBox m_cmbActionLinkedTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 74), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbActionLinkedTypeTemp);
					cmbActionLinkedTypeComboBox cmbActionLinkedType = (cmbActionLinkedTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActionLinkedTypeComboBox.class, m_cmbActionLinkedTypeTemp);
					super.addComboBox(cmbActionLinkedType);
					RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 88, 222, 328, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbActionStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 71), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbActionStatusTemp);
					cmbActionStatusComboBox cmbActionStatus = (cmbActionStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActionStatusComboBox.class, m_cmbActionStatusTemp);
					super.addComboBox(cmbActionStatus);
			
					// CheckedListBox Controls
					RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 88, 13, 328, 84, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					CheckedListBox m_chklistActionDisciplineTemp = (CheckedListBox)factory.getControl(CheckedListBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null, Boolean.FALSE, null, new Integer(startTabIndex.intValue() + 63), Boolean.FALSE, null});
					addControl(m_chklistActionDisciplineTemp);
					chklistActionDisciplineCheckedListBox chklistActionDiscipline = (chklistActionDisciplineCheckedListBox)CheckedListBoxFlyweightFactory.getInstance().createCheckedListBoxBridge(chklistActionDisciplineCheckedListBox.class, m_chklistActionDisciplineTemp);
					super.addCheckedListBox(chklistActionDiscipline);
			
					// CheckBox Controls
					RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 632, 94, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), new Integer(startTabIndex.intValue() + 77), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
					RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 544, 118, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 78), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"", Boolean.FALSE, null}));
			
					// IntBox Controls
					RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 544, 13, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 73), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				}
	
				public Button btnLinkActions()
				{
					return (Button)super.getControl(9);
				}
				public Button btnActionBrowseLink()
				{
					return (Button)super.getControl(10);
				}
				public TextBox txtActionLink()
				{
					return (TextBox)super.getControl(11);
				}
				public TextBox txtActionHelpUrl()
				{
					return (TextBox)super.getControl(12);
				}
				public TextBox txtActionDescription()
				{
					return (TextBox)super.getControl(13);
				}
				public TextBox txtActionName()
				{
					return (TextBox)super.getControl(14);
				}
				public cmbActionLinkedTypeComboBox cmbActionLinkedType()
				{
					return (cmbActionLinkedTypeComboBox)super.getComboBox(0);
				}
				public cmbActionStatusComboBox cmbActionStatus()
				{
					return (cmbActionStatusComboBox)super.getComboBox(1);
				}
				public chklistActionDisciplineCheckedListBox chklistActionDiscipline()
				{
					return (chklistActionDisciplineCheckedListBox)super.getCheckedListBox(0);
				}
				public CheckBox chkCounterSignature()
				{
					return (CheckBox)super.getControl(18);
				}
				public CheckBox chkActionMandatory()
				{
					return (CheckBox)super.getControl(19);
				}
				public IntBox intActionSequence()
				{
					return (IntBox)super.getControl(20);
				}
			}
	
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 816, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_ICP = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"ICP Configuration", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				ICPContainer m_ICPContainer = (ICPContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(ICPContainer.class, m_ICP, factory);
				super.addContainer(m_ICP, m_ICPContainer);
				ims.framework.utils.SizeInfo m_ICPDesignSize = new ims.framework.utils.SizeInfo(816, 280);
				ims.framework.utils.SizeInfo m_ICPRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper76.getWidth(), anchoringHelper76.getHeight());
				m_ICPContainer.setContext(form, appForm, m_ICP, loader, form_images_local, contextMenus, startControlID, m_ICPDesignSize, m_ICPRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 816, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_Stage = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Stage Configuration", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				StageContainer m_StageContainer = (StageContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(StageContainer.class, m_Stage, factory);
				super.addContainer(m_Stage, m_StageContainer);
				ims.framework.utils.SizeInfo m_StageDesignSize = new ims.framework.utils.SizeInfo(816, 280);
				ims.framework.utils.SizeInfo m_StageRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper77.getWidth(), anchoringHelper77.getHeight());
				m_StageContainer.setContext(form, appForm, m_Stage, loader, form_images_local, contextMenus, startControlID, m_StageDesignSize, m_StageRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 816, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_Phase = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Phase Configuration", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				PhaseContainer m_PhaseContainer = (PhaseContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(PhaseContainer.class, m_Phase, factory);
				super.addContainer(m_Phase, m_PhaseContainer);
				ims.framework.utils.SizeInfo m_PhaseDesignSize = new ims.framework.utils.SizeInfo(816, 280);
				ims.framework.utils.SizeInfo m_PhaseRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper78.getWidth(), anchoringHelper78.getHeight());
				m_PhaseContainer.setContext(form, appForm, m_Phase, loader, form_images_local, contextMenus, startControlID, m_PhaseDesignSize, m_PhaseRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 816, 280, ims.framework.enumerations.ControlAnchoring.ALL);
				Container m_Action = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Action Configuration", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				ActionContainer m_ActionContainer = (ActionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(ActionContainer.class, m_Action, factory);
				super.addContainer(m_Action, m_ActionContainer);
				ims.framework.utils.SizeInfo m_ActionDesignSize = new ims.framework.utils.SizeInfo(816, 280);
				ims.framework.utils.SizeInfo m_ActionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper79.getWidth(), anchoringHelper79.getHeight());
				m_ActionContainer.setContext(form, appForm, m_Action, loader, form_images_local, contextMenus, startControlID, m_ActionDesignSize, m_ActionRuntimeSize, startTabIndex, skipContextValidation);
			}
			public void hide()
			{
				ICP().setVisible(false);
				Stage().setVisible(false);
				Phase().setVisible(false);
				Action().setVisible(false);
			}
			public void setICPEnabled(boolean value)
			{
				ICP().setEnabled(value);
			}
			public void setStageEnabled(boolean value)
			{
				Stage().setEnabled(value);
			}
			public void setPhaseEnabled(boolean value)
			{
				Phase().setEnabled(value);
			}
			public void setActionEnabled(boolean value)
			{
				Action().setEnabled(value);
			}
			public void showICP()
			{
				Stage().setVisible(false);
				Phase().setVisible(false);
				Action().setVisible(false);
				ICP().setVisible(true);
			}
			public void showStage()
			{
				ICP().setVisible(false);
				Phase().setVisible(false);
				Action().setVisible(false);
				Stage().setVisible(true);
			}
			public void showPhase()
			{
				ICP().setVisible(false);
				Stage().setVisible(false);
				Action().setVisible(false);
				Phase().setVisible(true);
			}
			public void showAction()
			{
				ICP().setVisible(false);
				Stage().setVisible(false);
				Phase().setVisible(false);
				Action().setVisible(true);
			}
	
			public ICPContainer ICP()
			{
				return (ICPContainer)super.layers.get(0);
			}
			public StageContainer Stage()
			{
				return (StageContainer)super.layers.get(1);
			}
			public PhaseContainer Phase()
			{
				return (PhaseContainer)super.layers.get(2);
			}
			public ActionContainer Action()
			{
				return (ActionContainer)super.layers.get(3);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Layer Clasess
			lyrICPTabsLayer m_lyrICPTabsLayer = (lyrICPTabsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrICPTabsLayer.class, this, factory);
			super.addLayer(m_lyrICPTabsLayer);
			m_lyrICPTabsLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public lyrICPTabsLayer lyrICPTabs()
		{
			return (lyrICPTabsLayer)super.getLayer(0);
		}
	}
	public static class cmbSpecialityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCategoryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ICPCategoryType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ICPCategoryType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ICPCategoryType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ICPCategoryType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ICPCategoryType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ICPCategoryType getValue()
		{
			return (ims.core.vo.lookups.ICPCategoryType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ICPCategoryType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbContactPersonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.MemberOfStaffLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.MemberOfStaffLiteVo getValue()
		{
			return (ims.core.vo.MemberOfStaffLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.MemberOfStaffLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(55);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.ICP.contextMenuIcpMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.ICP.contextMenuIcpMenuNEWICPItem = factory.createMenuItem(startControlID.intValue() + 1, "New ICP", true, false, new Integer(118104), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuNEWICPItem);
		contextMenus.ICP.contextMenuIcpMenuEDITICPItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit ICP", true, false, new Integer(118104), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuEDITICPItem);
		contextMenus.ICP.contextMenuIcpMenuCLONEICPItem = factory.createMenuItem(startControlID.intValue() + 3, "Clone ICP", true, false, new Integer(118104), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2880001)))
			contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuCLONEICPItem);
		contextMenus.ICP.contextMenuIcpMenuADDSTAGEItem = factory.createMenuItem(startControlID.intValue() + 4, "Add Stage", true, false, new Integer(118105), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuADDSTAGEItem);
		contextMenus.ICP.contextMenuIcpMenuEDITSTAGEItem = factory.createMenuItem(startControlID.intValue() + 5, "Edit Stage", true, false, new Integer(118105), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuEDITSTAGEItem);
		contextMenus.ICP.contextMenuIcpMenuCLONESTAGEItem = factory.createMenuItem(startControlID.intValue() + 6, "Clone Stage", true, false, new Integer(118105), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2880002)))
			contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuCLONESTAGEItem);
		contextMenus.ICP.contextMenuIcpMenuREMOVESTAGEItem = factory.createMenuItem(startControlID.intValue() + 7, "Inactivate Stage", true, false, new Integer(118105), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuREMOVESTAGEItem);
		contextMenus.ICP.contextMenuIcpMenuADDPHASEItem = factory.createMenuItem(startControlID.intValue() + 8, "Add Phase", true, false, new Integer(118106), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuADDPHASEItem);
		contextMenus.ICP.contextMenuIcpMenuEDITPHASEItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit Phase", true, false, new Integer(118106), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuEDITPHASEItem);
		contextMenus.ICP.contextMenuIcpMenuCLONEPHASEItem = factory.createMenuItem(startControlID.intValue() + 10, "Clone Phase", true, false, new Integer(118106), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2880003)))
			contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuCLONEPHASEItem);
		contextMenus.ICP.contextMenuIcpMenuREMOVEPHASEItem = factory.createMenuItem(startControlID.intValue() + 11, "Inactivate Phase", true, false, new Integer(118106), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuREMOVEPHASEItem);
		contextMenus.ICP.contextMenuIcpMenuADDACTIONItem = factory.createMenuItem(startControlID.intValue() + 12, "Add Action", true, false, new Integer(118107), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuADDACTIONItem);
		contextMenus.ICP.contextMenuIcpMenuEDITACTIONItem = factory.createMenuItem(startControlID.intValue() + 13, "Edit Action", true, false, new Integer(118107), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuEDITACTIONItem);
		contextMenus.ICP.contextMenuIcpMenuREMOVEACTIONItem = factory.createMenuItem(startControlID.intValue() + 14, "Inactivate Action", true, false, new Integer(118107), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuREMOVEACTIONItem);
		contextMenus.ICP.contextMenuIcpMenuADDEXISTINGSTAGEItem = factory.createMenuItem(startControlID.intValue() + 15, "Add Existing Stage", true, false, null, true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuADDEXISTINGSTAGEItem);
		contextMenus.ICP.contextMenuIcpMenuADDEXISTINGPHASEItem = factory.createMenuItem(startControlID.intValue() + 16, "Add Existing Phase", true, false, null, true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuADDEXISTINGPHASEItem);
		contextMenus.ICP.contextMenuIcpMenuADDEXISTINGACTIONItem = factory.createMenuItem(startControlID.intValue() + 17, "Add Existing Action", true, false, null, true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuADDEXISTINGACTIONItem);
		contextMenus.ICP.contextMenuIcpMenuREMOVEICPItem = factory.createMenuItem(startControlID.intValue() + 18, "Inactivate ICP", true, false, new Integer(118104), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuREMOVEICPItem);
		contextMenus.ICP.contextMenuIcpMenuMOVEUPItem = factory.createMenuItem(startControlID.intValue() + 19, "Move Up", true, false, new Integer(102114), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuMOVEUPItem);
		contextMenus.ICP.contextMenuIcpMenuMOVEDOWNItem = factory.createMenuItem(startControlID.intValue() + 20, "Move Down", true, false, new Integer(102108), true, false);
		contextMenus.ICP.contextMenuIcpMenu.add(contextMenus.ICP.contextMenuIcpMenuMOVEDOWNItem);
		form.registerMenu(contextMenus.ICP.contextMenuIcpMenu);
		contextMenus.ICP.contextMenuICPConfigurationProcedures = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.ICP.contextMenuICPConfigurationProceduresAddProcedureItem = factory.createMenuItem(startControlID.intValue() + 21, "Add Procedure", true, false, new Integer(102179), true, false);
		contextMenus.ICP.contextMenuICPConfigurationProcedures.add(contextMenus.ICP.contextMenuICPConfigurationProceduresAddProcedureItem);
		contextMenus.ICP.contextMenuICPConfigurationProceduresRemoveProcedureItem = factory.createMenuItem(startControlID.intValue() + 22, "Remove Procedure", true, false, new Integer(102300), true, false);
		contextMenus.ICP.contextMenuICPConfigurationProcedures.add(contextMenus.ICP.contextMenuICPConfigurationProceduresRemoveProcedureItem);
		form.registerMenu(contextMenus.ICP.contextMenuICPConfigurationProcedures);
		contextMenus.ICP.contextMenuICPSearchStageRules = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.ICP.contextMenuICPSearchStageRulesAddItem = factory.createMenuItem(startControlID.intValue() + 23, "Add rule", true, false, new Integer(102149), true, false);
		contextMenus.ICP.contextMenuICPSearchStageRules.add(contextMenus.ICP.contextMenuICPSearchStageRulesAddItem);
		contextMenus.ICP.contextMenuICPSearchStageRulesEditItem = factory.createMenuItem(startControlID.intValue() + 24, "Edit Rule", true, false, new Integer(102150), true, false);
		contextMenus.ICP.contextMenuICPSearchStageRules.add(contextMenus.ICP.contextMenuICPSearchStageRulesEditItem);
		contextMenus.ICP.contextMenuICPSearchStageRulesCloneItem = factory.createMenuItem(startControlID.intValue() + 25, "Clone Rule", true, false, new Integer(102222), true, false);
		contextMenus.ICP.contextMenuICPSearchStageRules.add(contextMenus.ICP.contextMenuICPSearchStageRulesCloneItem);
		contextMenus.ICP.contextMenuICPSearchStageRulesRemoveItem = factory.createMenuItem(startControlID.intValue() + 26, "Remove Rule", true, false, new Integer(102300), true, true);
		contextMenus.ICP.contextMenuICPSearchStageRules.add(contextMenus.ICP.contextMenuICPSearchStageRulesRemoveItem);
		contextMenus.ICP.contextMenuICPSearchStageRulesRemoveAllItem = factory.createMenuItem(startControlID.intValue() + 27, "Remove All Rules", true, false, new Integer(102249), true, true);
		contextMenus.ICP.contextMenuICPSearchStageRules.add(contextMenus.ICP.contextMenuICPSearchStageRulesRemoveAllItem);
		form.registerMenu(contextMenus.ICP.contextMenuICPSearchStageRules);
		contextMenus.ICP.contextMenuPhaseGoals = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.ICP.contextMenuPhaseGoalsADDGOALItem = factory.createMenuItem(startControlID.intValue() + 28, "Add Goal", true, false, null, true, false);
		contextMenus.ICP.contextMenuPhaseGoals.add(contextMenus.ICP.contextMenuPhaseGoalsADDGOALItem);
		contextMenus.ICP.contextMenuPhaseGoalsEDITGOALItem = factory.createMenuItem(startControlID.intValue() + 29, "Edit Goal", true, false, null, true, false);
		contextMenus.ICP.contextMenuPhaseGoals.add(contextMenus.ICP.contextMenuPhaseGoalsEDITGOALItem);
		form.registerMenu(contextMenus.ICP.contextMenuPhaseGoals);


		// Container Clasess
		RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 8, 288, 832, 304, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnConfiguration = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "", new Boolean(true)});
		addControl(m_ctnConfiguration);
		ctnConfigurationContainer ctnConfiguration = (ctnConfigurationContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnConfigurationContainer.class, m_ctnConfiguration, factory);
		ims.framework.utils.SizeInfo m_ctnConfigurationDesignSize = new ims.framework.utils.SizeInfo(832, 304);
		ims.framework.utils.SizeInfo m_ctnConfigurationRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper80.getWidth(), anchoringHelper80.getHeight());
		ctnConfiguration.setContext(form, appForm, m_ctnConfiguration, loader, this.getImages(), contextMenus, startControlID, m_ctnConfigurationDesignSize, m_ctnConfigurationRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnConfiguration);

		// Label Controls
		RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 480, 34, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Creation Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 480, 10, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Contact Person:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 264, 34, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 264, 10, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 16, 34, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 16, 10, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 84), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 86), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 82), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 80), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 64, 8, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.BOTH, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 576, 32, 160, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 328, 32, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSpecialityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSpecialityTemp);
		cmbSpecialityComboBox cmbSpeciality = (cmbSpecialityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialityComboBox.class, m_cmbSpecialityTemp);
		super.addComboBox(cmbSpeciality);
		RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 328, 8, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbCategoryTemp);
		cmbCategoryComboBox cmbCategory = (cmbCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCategoryComboBox.class, m_cmbCategoryTemp);
		super.addComboBox(cmbCategory);
		RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 64, 32, 184, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 576, 8, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbContactPersonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbContactPersonTemp);
		qmbContactPersonComboBox qmbContactPerson = (qmbContactPersonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbContactPersonComboBox.class, m_qmbContactPersonTemp);
		super.addComboBox(qmbContactPerson);

		// Tree Controls
		RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 832, 216, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.ICP.contextMenuIcpMenu, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 768, 16, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 808, 16, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnConfigurationContainer ctnConfiguration()
	{
		return (ctnConfigurationContainer)super.getContainer(0);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(7);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(8);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(9);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(10);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(11);
	}
	public DateControl dteDateCreated()
	{
		return (DateControl)super.getControl(12);
	}
	public cmbSpecialityComboBox cmbSpeciality()
	{
		return (cmbSpecialityComboBox)super.getComboBox(0);
	}
	public cmbCategoryComboBox cmbCategory()
	{
		return (cmbCategoryComboBox)super.getComboBox(1);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(2);
	}
	public qmbContactPersonComboBox qmbContactPerson()
	{
		return (qmbContactPersonComboBox)super.getComboBox(3);
	}
	public TreeView treICPList()
	{
		return (TreeView)super.getControl(17);
	}
	public ImageButton imbFind()
	{
		return (ImageButton)super.getControl(18);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(19);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			ICP = new ICPForms();
			Core = new CoreForms();
		}
		public final class ICPForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPForms()
			{
				ICPRulesEditorDialog = new LocalFormName(118114);
				ICPGoal = new LocalFormName(118115);
				SelectOrderEntryTemplate = new LocalFormName(118118);
				ICPConfigLinkActions = new LocalFormName(118112);
				ICPPhaseSelectDialog = new LocalFormName(118126);
				ICPStageSelectDialog = new LocalFormName(118125);
			}
			public final FormName ICPRulesEditorDialog;
			public final FormName ICPGoal;
			public final FormName SelectOrderEntryTemplate;
			public final FormName ICPConfigLinkActions;
			public final FormName ICPPhaseSelectDialog;
			public final FormName ICPStageSelectDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				SelectForm = new LocalFormName(102310);
				SelectAssessment = new LocalFormName(102314);
				SelectGraphicalAssessment = new LocalFormName(102313);
			}
			public final FormName SelectForm;
			public final FormName SelectAssessment;
			public final FormName SelectGraphicalAssessment;
		}

		public ICPForms ICP;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			ICP = new ICPImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image Tick;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				Action = new ImageHelper(118107, "Images/ICP/Action.gif", new Integer(16), new Integer(16));
				ICP = new ImageHelper(118104, "Images/ICP/ICP.gif", new Integer(16), new Integer(16));
				Phase = new ImageHelper(118106, "Images/ICP/Phase.gif", new Integer(16), new Integer(16));
				Stage = new ImageHelper(118105, "Images/ICP/Stage.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Action;
			public final ims.framework.utils.Image ICP;
			public final ims.framework.utils.Image Phase;
			public final ims.framework.utils.Image Stage;
		}
		public final CoreImages Core;
		public final ICPImages ICP;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedItem = new ims.framework.ContextVariable("SelectedItem", prefix + "_lv_ICP.ICPConfig.__internal_x_context__SelectedItem_" + componentIdentifier + "");
			cxl_SelectedItemParrent = new ims.framework.ContextVariable("SelectedItemParrent", prefix + "_lv_ICP.ICPConfig.__internal_x_context__SelectedItemParrent_" + componentIdentifier + "");
			cxl_Action = new ims.framework.ContextVariable("Action", prefix + "_lv_ICP.ICPConfig.__internal_x_context__Action_" + componentIdentifier + "");
			cxl_ActionLinkedObject = new ims.framework.ContextVariable("ActionLinkedObject", prefix + "_lv_ICP.ICPConfig.__internal_x_context__ActionLinkedObject_" + componentIdentifier + "");
			cxl_SelectedICP = new ims.framework.ContextVariable("SelectedICP", prefix + "_lv_ICP.ICPConfig.__internal_x_context__SelectedICP_" + componentIdentifier + "");
			cxl_MessageBoxOpened = new ims.framework.ContextVariable("MessageBoxOpened", prefix + "_lv_ICP.ICPConfig.__internal_x_context__MessageBoxOpened_" + componentIdentifier + "");
			cxl_BusinessRuleAction = new ims.framework.ContextVariable("BusinessRuleAction", prefix + "_lv_ICP.ICPConfig.__internal_x_context__BusinessRuleAction_" + componentIdentifier + "");
			cxl_GoalAction = new ims.framework.ContextVariable("GoalAction", prefix + "_lv_ICP.ICPConfig.__internal_x_context__GoalAction_" + componentIdentifier + "");
		}
		
		public boolean getSelectedItemIsNotNull()
		{
			return !cxl_SelectedItem.getValueIsNull(context);
		}
		public java.lang.Object getSelectedItem()
		{
			return cxl_SelectedItem.getValue(context);
		}
		public void setSelectedItem(java.lang.Object value)
		{
			cxl_SelectedItem.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedItem = null;
		public boolean getSelectedItemParrentIsNotNull()
		{
			return !cxl_SelectedItemParrent.getValueIsNull(context);
		}
		public java.lang.Object getSelectedItemParrent()
		{
			return cxl_SelectedItemParrent.getValue(context);
		}
		public void setSelectedItemParrent(java.lang.Object value)
		{
			cxl_SelectedItemParrent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedItemParrent = null;
		public boolean getActionIsNotNull()
		{
			return !cxl_Action.getValueIsNull(context);
		}
		public Integer getAction()
		{
			return (Integer)cxl_Action.getValue(context);
		}
		public void setAction(Integer value)
		{
			cxl_Action.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Action = null;
		public boolean getActionLinkedObjectIsNotNull()
		{
			return !cxl_ActionLinkedObject.getValueIsNull(context);
		}
		public java.lang.Object getActionLinkedObject()
		{
			return cxl_ActionLinkedObject.getValue(context);
		}
		public void setActionLinkedObject(java.lang.Object value)
		{
			cxl_ActionLinkedObject.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActionLinkedObject = null;
		public boolean getSelectedICPIsNotNull()
		{
			return !cxl_SelectedICP.getValueIsNull(context);
		}
		public ims.icps.configuration.vo.ICPRefVo getSelectedICP()
		{
			return (ims.icps.configuration.vo.ICPRefVo)cxl_SelectedICP.getValue(context);
		}
		public void setSelectedICP(ims.icps.configuration.vo.ICPRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'SelectedICP' RefVo context variable.");
			if(value == null)
				cxl_SelectedICP.setValue(context, null);
			else
				cxl_SelectedICP.setValue(context, new ims.icps.configuration.vo.ICPRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_SelectedICP = null;
		public boolean getMessageBoxOpenedIsNotNull()
		{
			return !cxl_MessageBoxOpened.getValueIsNull(context);
		}
		public Integer getMessageBoxOpened()
		{
			return (Integer)cxl_MessageBoxOpened.getValue(context);
		}
		public void setMessageBoxOpened(Integer value)
		{
			cxl_MessageBoxOpened.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxOpened = null;
		public boolean getBusinessRuleActionIsNotNull()
		{
			return !cxl_BusinessRuleAction.getValueIsNull(context);
		}
		public Integer getBusinessRuleAction()
		{
			return (Integer)cxl_BusinessRuleAction.getValue(context);
		}
		public void setBusinessRuleAction(Integer value)
		{
			cxl_BusinessRuleAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BusinessRuleAction = null;
		public boolean getGoalActionIsNotNull()
		{
			return !cxl_GoalAction.getValueIsNull(context);
		}
		public Integer getGoalAction()
		{
			return (Integer)cxl_GoalAction.getValue(context);
		}
		public void setGoalAction(Integer value)
		{
			cxl_GoalAction.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GoalAction = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ICPNamespace ICP = new ICPNamespace();
		public final class ICPNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class IcpMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEWICP = 1;
				public static final int EDITICP = 2;
				public static final int CLONEICP = 3;
				public static final int ADDSTAGE = 4;
				public static final int EDITSTAGE = 5;
				public static final int CLONESTAGE = 6;
				public static final int REMOVESTAGE = 7;
				public static final int ADDPHASE = 8;
				public static final int EDITPHASE = 9;
				public static final int CLONEPHASE = 10;
				public static final int REMOVEPHASE = 11;
				public static final int ADDACTION = 12;
				public static final int EDITACTION = 13;
				public static final int REMOVEACTION = 14;
				public static final int ADDEXISTINGSTAGE = 15;
				public static final int ADDEXISTINGPHASE = 16;
				public static final int ADDEXISTINGACTION = 17;
				public static final int REMOVEICP = 18;
				public static final int MOVEUP = 19;
				public static final int MOVEDOWN = 20;
			}
			public void disableAllIcpMenuMenuItems()
			{
				this.contextMenuIcpMenuNEWICPItem.setEnabled(false);
				this.contextMenuIcpMenuEDITICPItem.setEnabled(false);
				this.contextMenuIcpMenuCLONEICPItem.setEnabled(false);
				this.contextMenuIcpMenuADDSTAGEItem.setEnabled(false);
				this.contextMenuIcpMenuEDITSTAGEItem.setEnabled(false);
				this.contextMenuIcpMenuCLONESTAGEItem.setEnabled(false);
				this.contextMenuIcpMenuREMOVESTAGEItem.setEnabled(false);
				this.contextMenuIcpMenuADDPHASEItem.setEnabled(false);
				this.contextMenuIcpMenuEDITPHASEItem.setEnabled(false);
				this.contextMenuIcpMenuCLONEPHASEItem.setEnabled(false);
				this.contextMenuIcpMenuREMOVEPHASEItem.setEnabled(false);
				this.contextMenuIcpMenuADDACTIONItem.setEnabled(false);
				this.contextMenuIcpMenuEDITACTIONItem.setEnabled(false);
				this.contextMenuIcpMenuREMOVEACTIONItem.setEnabled(false);
				this.contextMenuIcpMenuADDEXISTINGSTAGEItem.setEnabled(false);
				this.contextMenuIcpMenuADDEXISTINGPHASEItem.setEnabled(false);
				this.contextMenuIcpMenuADDEXISTINGACTIONItem.setEnabled(false);
				this.contextMenuIcpMenuREMOVEICPItem.setEnabled(false);
				this.contextMenuIcpMenuMOVEUPItem.setEnabled(false);
				this.contextMenuIcpMenuMOVEDOWNItem.setEnabled(false);
			}
			public void hideAllIcpMenuMenuItems()
			{
				this.contextMenuIcpMenuNEWICPItem.setVisible(false);
				this.contextMenuIcpMenuEDITICPItem.setVisible(false);
				this.contextMenuIcpMenuCLONEICPItem.setVisible(false);
				this.contextMenuIcpMenuADDSTAGEItem.setVisible(false);
				this.contextMenuIcpMenuEDITSTAGEItem.setVisible(false);
				this.contextMenuIcpMenuCLONESTAGEItem.setVisible(false);
				this.contextMenuIcpMenuREMOVESTAGEItem.setVisible(false);
				this.contextMenuIcpMenuADDPHASEItem.setVisible(false);
				this.contextMenuIcpMenuEDITPHASEItem.setVisible(false);
				this.contextMenuIcpMenuCLONEPHASEItem.setVisible(false);
				this.contextMenuIcpMenuREMOVEPHASEItem.setVisible(false);
				this.contextMenuIcpMenuADDACTIONItem.setVisible(false);
				this.contextMenuIcpMenuEDITACTIONItem.setVisible(false);
				this.contextMenuIcpMenuREMOVEACTIONItem.setVisible(false);
				this.contextMenuIcpMenuADDEXISTINGSTAGEItem.setVisible(false);
				this.contextMenuIcpMenuADDEXISTINGPHASEItem.setVisible(false);
				this.contextMenuIcpMenuADDEXISTINGACTIONItem.setVisible(false);
				this.contextMenuIcpMenuREMOVEICPItem.setVisible(false);
				this.contextMenuIcpMenuMOVEUPItem.setVisible(false);
				this.contextMenuIcpMenuMOVEDOWNItem.setVisible(false);
			}
			private Menu contextMenuIcpMenu;
			public ReadOnlyMenuItem getIcpMenuNEWICPItem()
			{
				return this.contextMenuIcpMenuNEWICPItem;
			}
			private MenuItem contextMenuIcpMenuNEWICPItem;
			public ReadOnlyMenuItem getIcpMenuEDITICPItem()
			{
				return this.contextMenuIcpMenuEDITICPItem;
			}
			private MenuItem contextMenuIcpMenuEDITICPItem;
			public ReadOnlyMenuItem getIcpMenuCLONEICPItem()
			{
				return this.contextMenuIcpMenuCLONEICPItem;
			}
			private MenuItem contextMenuIcpMenuCLONEICPItem;
			public ReadOnlyMenuItem getIcpMenuADDSTAGEItem()
			{
				return this.contextMenuIcpMenuADDSTAGEItem;
			}
			private MenuItem contextMenuIcpMenuADDSTAGEItem;
			public ReadOnlyMenuItem getIcpMenuEDITSTAGEItem()
			{
				return this.contextMenuIcpMenuEDITSTAGEItem;
			}
			private MenuItem contextMenuIcpMenuEDITSTAGEItem;
			public ReadOnlyMenuItem getIcpMenuCLONESTAGEItem()
			{
				return this.contextMenuIcpMenuCLONESTAGEItem;
			}
			private MenuItem contextMenuIcpMenuCLONESTAGEItem;
			public ReadOnlyMenuItem getIcpMenuREMOVESTAGEItem()
			{
				return this.contextMenuIcpMenuREMOVESTAGEItem;
			}
			private MenuItem contextMenuIcpMenuREMOVESTAGEItem;
			public ReadOnlyMenuItem getIcpMenuADDPHASEItem()
			{
				return this.contextMenuIcpMenuADDPHASEItem;
			}
			private MenuItem contextMenuIcpMenuADDPHASEItem;
			public ReadOnlyMenuItem getIcpMenuEDITPHASEItem()
			{
				return this.contextMenuIcpMenuEDITPHASEItem;
			}
			private MenuItem contextMenuIcpMenuEDITPHASEItem;
			public ReadOnlyMenuItem getIcpMenuCLONEPHASEItem()
			{
				return this.contextMenuIcpMenuCLONEPHASEItem;
			}
			private MenuItem contextMenuIcpMenuCLONEPHASEItem;
			public ReadOnlyMenuItem getIcpMenuREMOVEPHASEItem()
			{
				return this.contextMenuIcpMenuREMOVEPHASEItem;
			}
			private MenuItem contextMenuIcpMenuREMOVEPHASEItem;
			public ReadOnlyMenuItem getIcpMenuADDACTIONItem()
			{
				return this.contextMenuIcpMenuADDACTIONItem;
			}
			private MenuItem contextMenuIcpMenuADDACTIONItem;
			public ReadOnlyMenuItem getIcpMenuEDITACTIONItem()
			{
				return this.contextMenuIcpMenuEDITACTIONItem;
			}
			private MenuItem contextMenuIcpMenuEDITACTIONItem;
			public ReadOnlyMenuItem getIcpMenuREMOVEACTIONItem()
			{
				return this.contextMenuIcpMenuREMOVEACTIONItem;
			}
			private MenuItem contextMenuIcpMenuREMOVEACTIONItem;
			public ReadOnlyMenuItem getIcpMenuADDEXISTINGSTAGEItem()
			{
				return this.contextMenuIcpMenuADDEXISTINGSTAGEItem;
			}
			private MenuItem contextMenuIcpMenuADDEXISTINGSTAGEItem;
			public ReadOnlyMenuItem getIcpMenuADDEXISTINGPHASEItem()
			{
				return this.contextMenuIcpMenuADDEXISTINGPHASEItem;
			}
			private MenuItem contextMenuIcpMenuADDEXISTINGPHASEItem;
			public ReadOnlyMenuItem getIcpMenuADDEXISTINGACTIONItem()
			{
				return this.contextMenuIcpMenuADDEXISTINGACTIONItem;
			}
			private MenuItem contextMenuIcpMenuADDEXISTINGACTIONItem;
			public ReadOnlyMenuItem getIcpMenuREMOVEICPItem()
			{
				return this.contextMenuIcpMenuREMOVEICPItem;
			}
			private MenuItem contextMenuIcpMenuREMOVEICPItem;
			public ReadOnlyMenuItem getIcpMenuMOVEUPItem()
			{
				return this.contextMenuIcpMenuMOVEUPItem;
			}
			private MenuItem contextMenuIcpMenuMOVEUPItem;
			public ReadOnlyMenuItem getIcpMenuMOVEDOWNItem()
			{
				return this.contextMenuIcpMenuMOVEDOWNItem;
			}
			private MenuItem contextMenuIcpMenuMOVEDOWNItem;
			public final class ICPConfigurationProcedures implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddProcedure = 21;
				public static final int RemoveProcedure = 22;
			}
			public void disableAllICPConfigurationProceduresMenuItems()
			{
				this.contextMenuICPConfigurationProceduresAddProcedureItem.setEnabled(false);
				this.contextMenuICPConfigurationProceduresRemoveProcedureItem.setEnabled(false);
			}
			public void hideAllICPConfigurationProceduresMenuItems()
			{
				this.contextMenuICPConfigurationProceduresAddProcedureItem.setVisible(false);
				this.contextMenuICPConfigurationProceduresRemoveProcedureItem.setVisible(false);
			}
			private Menu contextMenuICPConfigurationProcedures;
			public ReadOnlyMenuItem getICPConfigurationProceduresAddProcedureItem()
			{
				return this.contextMenuICPConfigurationProceduresAddProcedureItem;
			}
			private MenuItem contextMenuICPConfigurationProceduresAddProcedureItem;
			public ReadOnlyMenuItem getICPConfigurationProceduresRemoveProcedureItem()
			{
				return this.contextMenuICPConfigurationProceduresRemoveProcedureItem;
			}
			private MenuItem contextMenuICPConfigurationProceduresRemoveProcedureItem;
			public final class ICPSearchStageRules implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int Add = 23;
				public static final int Edit = 24;
				public static final int Clone = 25;
				public static final int Remove = 26;
				public static final int RemoveAll = 27;
			}
			public void disableAllICPSearchStageRulesMenuItems()
			{
				this.contextMenuICPSearchStageRulesAddItem.setEnabled(false);
				this.contextMenuICPSearchStageRulesEditItem.setEnabled(false);
				this.contextMenuICPSearchStageRulesCloneItem.setEnabled(false);
				this.contextMenuICPSearchStageRulesRemoveItem.setEnabled(false);
				this.contextMenuICPSearchStageRulesRemoveAllItem.setEnabled(false);
			}
			public void hideAllICPSearchStageRulesMenuItems()
			{
				this.contextMenuICPSearchStageRulesAddItem.setVisible(false);
				this.contextMenuICPSearchStageRulesEditItem.setVisible(false);
				this.contextMenuICPSearchStageRulesCloneItem.setVisible(false);
				this.contextMenuICPSearchStageRulesRemoveItem.setVisible(false);
				this.contextMenuICPSearchStageRulesRemoveAllItem.setVisible(false);
			}
			private Menu contextMenuICPSearchStageRules;
			public ReadOnlyMenuItem getICPSearchStageRulesAddItem()
			{
				return this.contextMenuICPSearchStageRulesAddItem;
			}
			private MenuItem contextMenuICPSearchStageRulesAddItem;
			public ReadOnlyMenuItem getICPSearchStageRulesEditItem()
			{
				return this.contextMenuICPSearchStageRulesEditItem;
			}
			private MenuItem contextMenuICPSearchStageRulesEditItem;
			public ReadOnlyMenuItem getICPSearchStageRulesCloneItem()
			{
				return this.contextMenuICPSearchStageRulesCloneItem;
			}
			private MenuItem contextMenuICPSearchStageRulesCloneItem;
			public ReadOnlyMenuItem getICPSearchStageRulesRemoveItem()
			{
				return this.contextMenuICPSearchStageRulesRemoveItem;
			}
			private MenuItem contextMenuICPSearchStageRulesRemoveItem;
			public ReadOnlyMenuItem getICPSearchStageRulesRemoveAllItem()
			{
				return this.contextMenuICPSearchStageRulesRemoveAllItem;
			}
			private MenuItem contextMenuICPSearchStageRulesRemoveAllItem;
			public final class PhaseGoals implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADDGOAL = 28;
				public static final int EDITGOAL = 29;
			}
			public void disableAllPhaseGoalsMenuItems()
			{
				this.contextMenuPhaseGoalsADDGOALItem.setEnabled(false);
				this.contextMenuPhaseGoalsEDITGOALItem.setEnabled(false);
			}
			public void hideAllPhaseGoalsMenuItems()
			{
				this.contextMenuPhaseGoalsADDGOALItem.setVisible(false);
				this.contextMenuPhaseGoalsEDITGOALItem.setVisible(false);
			}
			private Menu contextMenuPhaseGoals;
			public ReadOnlyMenuItem getPhaseGoalsADDGOALItem()
			{
				return this.contextMenuPhaseGoalsADDGOALItem;
			}
			private MenuItem contextMenuPhaseGoalsADDGOALItem;
			public ReadOnlyMenuItem getPhaseGoalsEDITGOALItem()
			{
				return this.contextMenuPhaseGoalsEDITGOALItem;
			}
			private MenuItem contextMenuPhaseGoalsEDITGOALItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[97];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-ID", "ID_BusinessRule");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-CATEGORY", "Category");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-VALIDFROM", "ValidFrom");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-VALIDTO", "ValidTo");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-PRIORITY", "Priority");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-XMLCONTENT", "XmlContent");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-ACTIVE", "Active");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-ROOTENTITY", "RootEntity");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_ICP.IcpPhaseGoal", "BO-1102100000-ID", "ID_ICPPhaseGoal");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_ICP.IcpPhaseGoal", "BO-1102100000-GOAL", "Goal");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_ICP.IcpPhaseGoal", "BO-1102100000-ISACTIVE", "IsActive");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_ICP.RulesEditorDialog.Rule", "BO-1004100040-ID", "ID_BusinessRule");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_ICP.RulesEditorDialog.Rule", "BO-1004100040-NAME", "Name");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_ICP.RulesEditorDialog.Rule", "BO-1004100040-DESCRIPTION", "Description");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_ICP.RulesEditorDialog.Rule", "BO-1004100040-CATEGORY", "Category");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_ICP.RulesEditorDialog.Rule", "BO-1004100040-VALIDFROM", "ValidFrom");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_ICP.RulesEditorDialog.Rule", "BO-1004100040-VALIDTO", "ValidTo");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_ICP.RulesEditorDialog.Rule", "BO-1004100040-PRIORITY", "Priority");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_ICP.RulesEditorDialog.Rule", "BO-1004100040-XMLCONTENT", "XmlContent");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_ICP.RulesEditorDialog.Rule", "BO-1004100040-ACTIVE", "Active");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_ICP.RulesEditorDialog.Rule", "BO-1004100040-ROOTENTITY", "RootEntity");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_ICP.StageForCloning", "BO-1060100001-ID", "ID_ICPStage");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_ICP.PhaseForCloning", "BO-1060100002-ID", "ID_ICPPhase");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.ICPConfig.__internal_x_context__SelectedICP_" + componentIdentifier, "BO-1060100000-ID", "ID_ICP");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
