//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.icp.forms.patienticppresentationcomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbDisciplineComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.HcpDisType getValue()
		{
			return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.HcpDisType value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(480, 504);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.ICP.contextMenuPatientICPMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.ICP.contextMenuPatientICPMenuBringStageIntoScopeItem = factory.createMenuItem(startControlID.intValue() + 1, "Bring Stage Into Scope", true, false, new Integer(118105), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560001)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuBringStageIntoScopeItem);
		contextMenus.ICP.contextMenuPatientICPMenuRemoveStageFromScopeItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove Stage From Scope", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560002)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuRemoveStageFromScopeItem);
		contextMenus.ICP.contextMenuPatientICPMenuBringPhaseIntoScopeItem = factory.createMenuItem(startControlID.intValue() + 3, "Bring Phase Into Scope", true, false, new Integer(118106), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560003)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuBringPhaseIntoScopeItem);
		contextMenus.ICP.contextMenuPatientICPMenuRemovePhaseFromScopeItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove Phase From Scope", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560004)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuRemovePhaseFromScopeItem);
		contextMenus.ICP.contextMenuPatientICPMenuActionMetItem = factory.createMenuItem(startControlID.intValue() + 5, "Action Met", true, false, new Integer(118108), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560005)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuActionMetItem);
		contextMenus.ICP.contextMenuPatientICPMenuActionNotMetItem = factory.createMenuItem(startControlID.intValue() + 6, "Action Not Met", true, false, new Integer(118109), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560006)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuActionNotMetItem);
		contextMenus.ICP.contextMenuPatientICPMenuRecordVarianceItem = factory.createMenuItem(startControlID.intValue() + 7, "Record Variance", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560007)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuRecordVarianceItem);
		contextMenus.ICP.contextMenuPatientICPMenuAddCriticalEventItem = factory.createMenuItem(startControlID.intValue() + 8, "Add Critical Event", true, false, new Integer(118126), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560008)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuAddCriticalEventItem);
		contextMenus.ICP.contextMenuPatientICPMenuEditCriticalEventItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit Critical Event", true, false, new Integer(118128), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560009)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuEditCriticalEventItem);
		contextMenus.ICP.contextMenuPatientICPMenuViewCriticalEventItem = factory.createMenuItem(startControlID.intValue() + 10, "View Critical Event", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560010)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuViewCriticalEventItem);
		contextMenus.ICP.contextMenuPatientICPMenuAddEvaluationNoteItem = factory.createMenuItem(startControlID.intValue() + 11, "Add Evaluation Note", true, false, new Integer(118127), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560011)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuAddEvaluationNoteItem);
		contextMenus.ICP.contextMenuPatientICPMenuEditEvaluationNoteItem = factory.createMenuItem(startControlID.intValue() + 12, "Edit Evaluation Note", true, false, new Integer(118129), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560012)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuEditEvaluationNoteItem);
		contextMenus.ICP.contextMenuPatientICPMenuViewEvaluationNoteItem = factory.createMenuItem(startControlID.intValue() + 13, "View Evaluation Note", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560013)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuViewEvaluationNoteItem);
		contextMenus.ICP.contextMenuPatientICPMenuActionDetailsItem = factory.createMenuItem(startControlID.intValue() + 14, "Action Details", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4560014)))
			contextMenus.ICP.contextMenuPatientICPMenu.add(contextMenus.ICP.contextMenuPatientICPMenuActionDetailsItem);
		form.registerMenu(contextMenus.ICP.contextMenuPatientICPMenu);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 4, 19, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "with Discipline:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 4, 3, 142, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View Actions Associated", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 364, 8, 84, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Default View", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 273, 8, 84, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 144, 9, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbDisciplineTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDisciplineTemp);
		cmbDisciplineComboBox cmbDiscipline = (cmbDisciplineComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDisciplineComboBox.class, m_cmbDisciplineTemp);
		super.addComboBox(cmbDiscipline);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 0, 40, 448, 464, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.ICP.contextMenuPatientICPMenu, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 456, 395, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, this.getImages().Core.Plus, this.getImages().Core.PlusDisabled, "Bring Stage Into Scope", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 456, 422, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, this.getImages().Core.Minus, this.getImages().Core.MinusDisabled, "Remove Stage From Scope", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 456, 453, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, this.getImages().Core.Plus, this.getImages().Core.PlusDisabled, "Bring Phase Into Scope", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 456, 480, 24, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, this.getImages().Core.Minus, this.getImages().Core.MinusDisabled, "Remove Phase From Scope", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 456, 40, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().ICP.ActionMet_Enabled_16, this.getImages().ICP.ActionMet_Enabled_16, "Action Met", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 456, 68, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().ICP.ACTION_NOT_MET_ENABLED_16, this.getImages().ICP.ACTION_NOT_MET_ENABLED_16, "Action Not Met", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 456, 96, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.InfoEnabled16, this.getImages().Core.InfoEnabled16, "Record Variance", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 456, 168, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.AddFile16, this.getImages().Core.AddFile16Disable, "Add Critical Event", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 456, 196, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Admin.Edit, this.getImages().Admin.EditDisabled, "Edit Critical Event", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 456, 224, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.View, this.getImages().Core.ViewDisabled, "View Critical Event", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 456, 296, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.AddFile16, this.getImages().Core.AddFile16Disable, "Add Evaluation Note", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 456, 324, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Admin.Edit, this.getImages().Admin.EditDisabled, "Edit Evaluation Note", Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 456, 352, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.View, this.getImages().Core.ViewDisabled, "View Evaluation Note", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnDefaultView()
	{
		return (Button)super.getControl(2);
	}
	public Button btnView()
	{
		return (Button)super.getControl(3);
	}
	public cmbDisciplineComboBox cmbDiscipline()
	{
		return (cmbDisciplineComboBox)super.getComboBox(0);
	}
	public DynamicGrid dyngrdICP()
	{
		return (DynamicGrid)super.getControl(5);
	}
	public ImageButton imbBringStageIntoScope()
	{
		return (ImageButton)super.getControl(6);
	}
	public ImageButton imbRemoveStageFromScope()
	{
		return (ImageButton)super.getControl(7);
	}
	public ImageButton imbBringPhaseIntoScope()
	{
		return (ImageButton)super.getControl(8);
	}
	public ImageButton imbRemovePhaseFromScope()
	{
		return (ImageButton)super.getControl(9);
	}
	public ImageButton imbActionMet()
	{
		return (ImageButton)super.getControl(10);
	}
	public ImageButton imbActionNotMet()
	{
		return (ImageButton)super.getControl(11);
	}
	public ImageButton imbRecordVariance()
	{
		return (ImageButton)super.getControl(12);
	}
	public ImageButton imbAddCriticalEvent()
	{
		return (ImageButton)super.getControl(13);
	}
	public ImageButton imbEditCriticalEvent()
	{
		return (ImageButton)super.getControl(14);
	}
	public ImageButton imbViewCriticalEvent()
	{
		return (ImageButton)super.getControl(15);
	}
	public ImageButton imbAddEvaluationNote()
	{
		return (ImageButton)super.getControl(16);
	}
	public ImageButton imbEditEvaluationNote()
	{
		return (ImageButton)super.getControl(17);
	}
	public ImageButton imbViewEvaluationNote()
	{
		return (ImageButton)super.getControl(18);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			ICP = new ICPForms();
		}
		public final class ICPForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPForms()
			{
				PatientICPActionDetails = new LocalFormName(118127);
				ICPCritcalEvents = new LocalFormName(118119);
				ICPEvaluationNotes = new LocalFormName(118101);
				RecordICPActionVariance = new LocalFormName(118116);
				BringStageIntoScope = new LocalFormName(118129);
				BringPhaseIntoScope = new LocalFormName(118130);
			}
			public final FormName PatientICPActionDetails;
			public final FormName ICPCritcalEvents;
			public final FormName ICPEvaluationNotes;
			public final FormName RecordICPActionVariance;
			public final FormName BringStageIntoScope;
			public final FormName BringPhaseIntoScope;
		}

		public ICPForms ICP;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			ICP = new ICPImages();
			Core = new CoreImages();
			Admin = new AdminImages();
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				Action = new ImageHelper(118107, "Images/ICP/Action.gif", new Integer(16), new Integer(16));
				ICP = new ImageHelper(118104, "Images/ICP/ICP.gif", new Integer(16), new Integer(16));
				Phase = new ImageHelper(118106, "Images/ICP/Phase.gif", new Integer(16), new Integer(16));
				Stage = new ImageHelper(118105, "Images/ICP/Stage.gif", new Integer(16), new Integer(16));
				ACTION_NOT_MET_ENABLED_16 = new ImageHelper(118109, "Images/ICP/ACTION_NOT_MET_16.png", new Integer(16), new Integer(16));
				ACTION_OUTSANDING_ENABLED_16 = new ImageHelper(118110, "Images/ICP/ACTION_OUTSANDING_16.png", new Integer(16), new Integer(16));
				ActionMet_Enabled_16 = new ImageHelper(118108, "Images/ICP/ACION_MET_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Action;
			public final ims.framework.utils.Image ICP;
			public final ims.framework.utils.Image Phase;
			public final ims.framework.utils.Image Stage;
			public final ims.framework.utils.Image ACTION_NOT_MET_ENABLED_16;
			public final ims.framework.utils.Image ACTION_OUTSANDING_ENABLED_16;
			public final ims.framework.utils.Image ActionMet_Enabled_16;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				InfoEnabled16 = new ImageHelper(102532, "Images/Core/info_enabled_16.png", new Integer(16), new Integer(16));
				RedCircle = new ImageHelper(102274, "Images/Core/red-circle-1.gif", new Integer(16), new Integer(16));
				CriticalError = new ImageHelper(102250, "Images/Core/CriticalError.gif", new Integer(16), new Integer(16));
				GreenSquare = new ImageHelper(102124, "Images/Core/circle_green.png", new Integer(16), new Integer(16));
				Plus = new ImageHelper(102116, "Images/Core/plus.gif", new Integer(16), new Integer(16));
				PlusDisabled = new ImageHelper(102117, "Images/Core/plus_disabled.gif", new Integer(16), new Integer(16));
				Minus = new ImageHelper(102118, "Images/Core/minus.gif", new Integer(16), new Integer(16));
				MinusDisabled = new ImageHelper(102119, "Images/Core/minus_disabled.gif", new Integer(16), new Integer(16));
				AddFile16 = new ImageHelper(102330, "Images/Core/add-file_16x16.png", new Integer(16), new Integer(16));
				AddFile16Disable = new ImageHelper(102565, "Images/Core/add-fileDisable_16x16.png", new Integer(16), new Integer(16));
				View = new ImageHelper(102223, "Images/Core/Slide Show.gif", new Integer(16), new Integer(16));
				ViewDisabled = new ImageHelper(102279, "Images/Core/Slide Show disabled.gif", new Integer(16), new Integer(16));
				Memo = new ImageHelper(102136, "Images/Core/memo.GIF", new Integer(17), new Integer(17));
			}
			public final ims.framework.utils.Image InfoEnabled16;
			public final ims.framework.utils.Image RedCircle;
			public final ims.framework.utils.Image CriticalError;
			public final ims.framework.utils.Image GreenSquare;
			public final ims.framework.utils.Image Plus;
			public final ims.framework.utils.Image PlusDisabled;
			public final ims.framework.utils.Image Minus;
			public final ims.framework.utils.Image MinusDisabled;
			public final ims.framework.utils.Image AddFile16;
			public final ims.framework.utils.Image AddFile16Disable;
			public final ims.framework.utils.Image View;
			public final ims.framework.utils.Image ViewDisabled;
			public final ims.framework.utils.Image Memo;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Edit = new ImageHelper(103102, "Images/Admin/edit.gif", new Integer(16), new Integer(16));
				EditDisabled = new ImageHelper(103136, "Images/Admin/editdis.gif", new Integer(16), new Integer(16));
				ProcedureEnabled16 = new ImageHelper(103423, "Images/Admin/procedure_simple_16.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Edit;
			public final ims.framework.utils.Image EditDisabled;
			public final ims.framework.utils.Image ProcedureEnabled16;
		}
		public final ICPImages ICP;
		public final CoreImages Core;
		public final AdminImages Admin;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ICP = new ims.framework.ContextVariable("ICP", prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__ICP_" + componentIdentifier + "");
			cxl_LoggedInUser = new ims.framework.ContextVariable("LoggedInUser", prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__LoggedInUser_" + componentIdentifier + "");
			cxl_ReadOnlyMode = new ims.framework.ContextVariable("ReadOnlyMode", prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__ReadOnlyMode_" + componentIdentifier + "");
			cxl_CustomEvent = new ims.framework.ContextVariable("CustomEvent", prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__CustomEvent_" + componentIdentifier + "");
			cxl_ActionDetailsHandlingMode = new ims.framework.ContextVariable("ActionDetailsHandlingMode", prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__ActionDetailsHandlingMode_" + componentIdentifier + "");
			cxl_Action = new ims.framework.ContextVariable("Action", prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__Action_" + componentIdentifier + "");
			cxl_Selection = new ims.framework.ContextVariable("Selection", prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__Selection_" + componentIdentifier + "");
		}
		
		public boolean getICPIsNotNull()
		{
			return !cxl_ICP.getValueIsNull(context);
		}
		public ims.icp.vo.PatientICP_PresentationVo getICP()
		{
			return (ims.icp.vo.PatientICP_PresentationVo)cxl_ICP.getValue(context);
		}
		public void setICP(ims.icp.vo.PatientICP_PresentationVo value)
		{
			cxl_ICP.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ICP = null;
		public boolean getLoggedInUserIsNotNull()
		{
			return !cxl_LoggedInUser.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVo getLoggedInUser()
		{
			return (ims.core.vo.HcpLiteVo)cxl_LoggedInUser.getValue(context);
		}
		public void setLoggedInUser(ims.core.vo.HcpLiteVo value)
		{
			cxl_LoggedInUser.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoggedInUser = null;
		public boolean getReadOnlyModeIsNotNull()
		{
			return !cxl_ReadOnlyMode.getValueIsNull(context);
		}
		public Boolean getReadOnlyMode()
		{
			return (Boolean)cxl_ReadOnlyMode.getValue(context);
		}
		public void setReadOnlyMode(Boolean value)
		{
			cxl_ReadOnlyMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReadOnlyMode = null;
		public boolean getCustomEventIsNotNull()
		{
			return !cxl_CustomEvent.getValueIsNull(context);
		}
		public ims.icp.vo.enums.PresentationEvent getCustomEvent()
		{
			return (ims.icp.vo.enums.PresentationEvent)cxl_CustomEvent.getValue(context);
		}
		public void setCustomEvent(ims.icp.vo.enums.PresentationEvent value)
		{
			cxl_CustomEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CustomEvent = null;
		public boolean getActionDetailsHandlingModeIsNotNull()
		{
			return !cxl_ActionDetailsHandlingMode.getValueIsNull(context);
		}
		public ims.icp.vo.enums.PresentationActionDetails getActionDetailsHandlingMode()
		{
			return (ims.icp.vo.enums.PresentationActionDetails)cxl_ActionDetailsHandlingMode.getValue(context);
		}
		public void setActionDetailsHandlingMode(ims.icp.vo.enums.PresentationActionDetails value)
		{
			cxl_ActionDetailsHandlingMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActionDetailsHandlingMode = null;
		public boolean getActionIsNotNull()
		{
			return !cxl_Action.getValueIsNull(context);
		}
		public ims.icp.vo.PatientICPAction_PresentationVo getAction()
		{
			return (ims.icp.vo.PatientICPAction_PresentationVo)cxl_Action.getValue(context);
		}
		public void setAction(ims.icp.vo.PatientICPAction_PresentationVo value)
		{
			cxl_Action.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Action = null;
		public boolean getSelectionIsNotNull()
		{
			return !cxl_Selection.getValueIsNull(context);
		}
		public Object getSelection()
		{
			return cxl_Selection.getValue(context);
		}
		public void setSelection(Object value)
		{
			cxl_Selection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Selection = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public ICPNamespace ICP = new ICPNamespace();
		public final class ICPNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class PatientICPMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int BringStageIntoScope = 1;
				public static final int RemoveStageFromScope = 2;
				public static final int BringPhaseIntoScope = 3;
				public static final int RemovePhaseFromScope = 4;
				public static final int ActionMet = 5;
				public static final int ActionNotMet = 6;
				public static final int RecordVariance = 7;
				public static final int AddCriticalEvent = 8;
				public static final int EditCriticalEvent = 9;
				public static final int ViewCriticalEvent = 10;
				public static final int AddEvaluationNote = 11;
				public static final int EditEvaluationNote = 12;
				public static final int ViewEvaluationNote = 13;
				public static final int ActionDetails = 14;
			}
			public void disableAllPatientICPMenuMenuItems()
			{
				this.contextMenuPatientICPMenuBringStageIntoScopeItem.setEnabled(false);
				this.contextMenuPatientICPMenuRemoveStageFromScopeItem.setEnabled(false);
				this.contextMenuPatientICPMenuBringPhaseIntoScopeItem.setEnabled(false);
				this.contextMenuPatientICPMenuRemovePhaseFromScopeItem.setEnabled(false);
				this.contextMenuPatientICPMenuActionMetItem.setEnabled(false);
				this.contextMenuPatientICPMenuActionNotMetItem.setEnabled(false);
				this.contextMenuPatientICPMenuRecordVarianceItem.setEnabled(false);
				this.contextMenuPatientICPMenuAddCriticalEventItem.setEnabled(false);
				this.contextMenuPatientICPMenuEditCriticalEventItem.setEnabled(false);
				this.contextMenuPatientICPMenuViewCriticalEventItem.setEnabled(false);
				this.contextMenuPatientICPMenuAddEvaluationNoteItem.setEnabled(false);
				this.contextMenuPatientICPMenuEditEvaluationNoteItem.setEnabled(false);
				this.contextMenuPatientICPMenuViewEvaluationNoteItem.setEnabled(false);
				this.contextMenuPatientICPMenuActionDetailsItem.setEnabled(false);
			}
			public void hideAllPatientICPMenuMenuItems()
			{
				this.contextMenuPatientICPMenuBringStageIntoScopeItem.setVisible(false);
				this.contextMenuPatientICPMenuRemoveStageFromScopeItem.setVisible(false);
				this.contextMenuPatientICPMenuBringPhaseIntoScopeItem.setVisible(false);
				this.contextMenuPatientICPMenuRemovePhaseFromScopeItem.setVisible(false);
				this.contextMenuPatientICPMenuActionMetItem.setVisible(false);
				this.contextMenuPatientICPMenuActionNotMetItem.setVisible(false);
				this.contextMenuPatientICPMenuRecordVarianceItem.setVisible(false);
				this.contextMenuPatientICPMenuAddCriticalEventItem.setVisible(false);
				this.contextMenuPatientICPMenuEditCriticalEventItem.setVisible(false);
				this.contextMenuPatientICPMenuViewCriticalEventItem.setVisible(false);
				this.contextMenuPatientICPMenuAddEvaluationNoteItem.setVisible(false);
				this.contextMenuPatientICPMenuEditEvaluationNoteItem.setVisible(false);
				this.contextMenuPatientICPMenuViewEvaluationNoteItem.setVisible(false);
				this.contextMenuPatientICPMenuActionDetailsItem.setVisible(false);
			}
			private Menu contextMenuPatientICPMenu;
			public ReadOnlyMenuItem getPatientICPMenuBringStageIntoScopeItem()
			{
				return this.contextMenuPatientICPMenuBringStageIntoScopeItem;
			}
			private MenuItem contextMenuPatientICPMenuBringStageIntoScopeItem;
			public ReadOnlyMenuItem getPatientICPMenuRemoveStageFromScopeItem()
			{
				return this.contextMenuPatientICPMenuRemoveStageFromScopeItem;
			}
			private MenuItem contextMenuPatientICPMenuRemoveStageFromScopeItem;
			public ReadOnlyMenuItem getPatientICPMenuBringPhaseIntoScopeItem()
			{
				return this.contextMenuPatientICPMenuBringPhaseIntoScopeItem;
			}
			private MenuItem contextMenuPatientICPMenuBringPhaseIntoScopeItem;
			public ReadOnlyMenuItem getPatientICPMenuRemovePhaseFromScopeItem()
			{
				return this.contextMenuPatientICPMenuRemovePhaseFromScopeItem;
			}
			private MenuItem contextMenuPatientICPMenuRemovePhaseFromScopeItem;
			public ReadOnlyMenuItem getPatientICPMenuActionMetItem()
			{
				return this.contextMenuPatientICPMenuActionMetItem;
			}
			private MenuItem contextMenuPatientICPMenuActionMetItem;
			public ReadOnlyMenuItem getPatientICPMenuActionNotMetItem()
			{
				return this.contextMenuPatientICPMenuActionNotMetItem;
			}
			private MenuItem contextMenuPatientICPMenuActionNotMetItem;
			public ReadOnlyMenuItem getPatientICPMenuRecordVarianceItem()
			{
				return this.contextMenuPatientICPMenuRecordVarianceItem;
			}
			private MenuItem contextMenuPatientICPMenuRecordVarianceItem;
			public ReadOnlyMenuItem getPatientICPMenuAddCriticalEventItem()
			{
				return this.contextMenuPatientICPMenuAddCriticalEventItem;
			}
			private MenuItem contextMenuPatientICPMenuAddCriticalEventItem;
			public ReadOnlyMenuItem getPatientICPMenuEditCriticalEventItem()
			{
				return this.contextMenuPatientICPMenuEditCriticalEventItem;
			}
			private MenuItem contextMenuPatientICPMenuEditCriticalEventItem;
			public ReadOnlyMenuItem getPatientICPMenuViewCriticalEventItem()
			{
				return this.contextMenuPatientICPMenuViewCriticalEventItem;
			}
			private MenuItem contextMenuPatientICPMenuViewCriticalEventItem;
			public ReadOnlyMenuItem getPatientICPMenuAddEvaluationNoteItem()
			{
				return this.contextMenuPatientICPMenuAddEvaluationNoteItem;
			}
			private MenuItem contextMenuPatientICPMenuAddEvaluationNoteItem;
			public ReadOnlyMenuItem getPatientICPMenuEditEvaluationNoteItem()
			{
				return this.contextMenuPatientICPMenuEditEvaluationNoteItem;
			}
			private MenuItem contextMenuPatientICPMenuEditEvaluationNoteItem;
			public ReadOnlyMenuItem getPatientICPMenuViewEvaluationNoteItem()
			{
				return this.contextMenuPatientICPMenuViewEvaluationNoteItem;
			}
			private MenuItem contextMenuPatientICPMenuViewEvaluationNoteItem;
			public ReadOnlyMenuItem getPatientICPMenuActionDetailsItem()
			{
				return this.contextMenuPatientICPMenuActionDetailsItem;
			}
			private MenuItem contextMenuPatientICPMenuActionDetailsItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[95];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-ID", "ID_PatientICPActionStatus");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-STATUSDATE", "StatusDate");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-STATUS", "Status");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-VARIANCECATEGORY", "VarianceCategory");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-VARIANCETYPE", "VarianceType");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_ICP.ActionStatus", "BO-1100100006-VARIANCECOMMENT", "VarianceComment");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_ICP.PatientICPRecord", "BO-1100100000-ID", "ID_PatientICP");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_ICP.PatientCriticalEvent", "BO-1100100007-ID", "ID_PatientCriticalEvents");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_ICP.EvaluationNote", "BO-1100100008-ID", "ID_PatientICPEvaluationNote");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__ICP_" + componentIdentifier, "BO-1100100000-ID", "ID_PatientICP");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__ICP_" + componentIdentifier, "BO-1100100000-STARTEDDATETIME", "StartedDateTime");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__ICP_" + componentIdentifier, "BO-1100100000-COMPLETEDDATETIME", "CompletedDateTime");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__ICP_" + componentIdentifier, "BO-1100100000-HASOUTSTANDINGCLINICALACTIONS", "HasOutstandingClinicalActions");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__ICP_" + componentIdentifier, "BO-1100100000-HASOUTSTANDINGNURSINGACTIONS", "HasOutstandingNursingActions");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__ICP_" + componentIdentifier, "BO-1100100000-HASOUTSTANDINGPHYSIOACTIONS", "HasOutstandingPhysioActions");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__ICP_" + componentIdentifier, "BO-1100100000-HASOUTSTANDINGADMINACTIONS", "HasOutstandingAdminActions");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ID", "ID_Hcp");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-HCPTYPE", "HcpType");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISACTIVE", "IsActive");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__LoggedInUser_" + componentIdentifier, "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__Action_" + componentIdentifier, "BO-1100100004-ID", "ID_PatientICPAction");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__Action_" + componentIdentifier, "BO-1100100004-ICP", "ICP");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_ICP.PatientICPPresentationComponent.__internal_x_context__Action_" + componentIdentifier, "BO-1100100004-REQUIRESCOUNTERSIGNING", "RequiresCounterSigning");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
