//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.icp.forms.patienticppresentationcomponent;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbDisciplineLookup();
	abstract protected void defaultcmbDisciplineLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbBringStageIntoScopeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnDefaultViewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbDisciplineValueSet(Object value);
	abstract protected void onDyngrdICPCellButtonClicked(ims.framework.controls.DynamicGridCell cell);
	abstract protected void onDyngrdICPRowSelectionChanged(ims.framework.controls.DynamicGridRow row) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnViewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemoveStageFromScopeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbBringPhaseIntoScopeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRemovePhaseFromScopeClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbActionMetClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbActionNotMetClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbRecordVarianceClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddCriticalEventClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbEditCriticalEventClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbViewCriticalEventClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbAddEvaluationNoteClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbEditEvaluationNoteClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onImbViewEvaluationNoteClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIComponentEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.imbBringStageIntoScope().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbBringStageIntoScopeClick();
			}
		});
		this.form.btnDefaultView().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnDefaultViewClick();
			}
		});
		this.form.cmbDiscipline().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbDisciplineValueSet(value);
			}
		});
		this.form.dyngrdICP().setDynamicGridCellButtonClickedEvent(new DynamicGridCellButtonClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridCell cell) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdICPCellButtonClicked(cell);
			}
		});
		this.form.dyngrdICP().setDynamicGridRowSelectionChangedEvent(new DynamicGridRowSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.controls.DynamicGridRow row, ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onDyngrdICPRowSelectionChanged(row);
			}
		});
		this.form.btnView().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnViewClick();
			}
		});
		this.form.imbRemoveStageFromScope().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemoveStageFromScopeClick();
			}
		});
		this.form.imbBringPhaseIntoScope().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbBringPhaseIntoScopeClick();
			}
		});
		this.form.imbRemovePhaseFromScope().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRemovePhaseFromScopeClick();
			}
		});
		this.form.imbActionMet().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbActionMetClick();
			}
		});
		this.form.imbActionNotMet().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbActionNotMetClick();
			}
		});
		this.form.imbRecordVariance().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbRecordVarianceClick();
			}
		});
		this.form.imbAddCriticalEvent().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddCriticalEventClick();
			}
		});
		this.form.imbEditCriticalEvent().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbEditCriticalEventClick();
			}
		});
		this.form.imbViewCriticalEvent().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbViewCriticalEventClick();
			}
		});
		this.form.imbAddEvaluationNote().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbAddEvaluationNoteClick();
			}
		});
		this.form.imbEditEvaluationNote().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbEditEvaluationNoteClick();
			}
		});
		this.form.imbViewEvaluationNote().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbViewEvaluationNoteClick();
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuBringStageIntoScopeItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.BringStageIntoScope, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuRemoveStageFromScopeItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.RemoveStageFromScope, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuBringPhaseIntoScopeItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.BringPhaseIntoScope, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuRemovePhaseFromScopeItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.RemovePhaseFromScope, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuActionMetItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.ActionMet, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuActionNotMetItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.ActionNotMet, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuRecordVarianceItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.RecordVariance, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuAddCriticalEventItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.AddCriticalEvent, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuEditCriticalEventItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.EditCriticalEvent, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuViewCriticalEventItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.ViewCriticalEvent, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuAddEvaluationNoteItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.AddEvaluationNote, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuEditEvaluationNoteItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.EditEvaluationNote, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuViewEvaluationNoteItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.ViewEvaluationNote, sender);
			}
		});
		this.form.getContextMenus().ICP.getPatientICPMenuActionDetailsItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.ICPNamespace.PatientICPMenu.ActionDetails, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbDisciplineLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbDisciplineLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbDisciplineLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIComponentEngine engine;
	protected GenForm form;
}
