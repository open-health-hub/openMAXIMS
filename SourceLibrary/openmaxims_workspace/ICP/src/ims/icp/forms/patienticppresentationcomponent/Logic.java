//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.icp.forms.patienticppresentationcomponent;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.HcpDisTypeCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.icp.vo.IcpPhaseGoalVo;
import ims.icp.vo.PatientCriticalEventsVo;
import ims.icp.vo.PatientCriticalEventsVoCollection;
import ims.icp.vo.PatientICPAction_PresentationVo;
import ims.icp.vo.PatientICPEvaluationNoteVo;
import ims.icp.vo.PatientICPEvaluationNoteVoCollection;
import ims.icp.vo.PatientICPPhase_PresentationVo;
import ims.icp.vo.PatientICPStage_PresentationVo;
import ims.icp.vo.PatientICP_PresentationVo;
import ims.icp.vo.enums.PresentationActionDetails;
import ims.icp.vo.enums.PresentationEvent;
import ims.icp.vo.lookups.ICPActionStatus;
import ims.icp.vo.lookups.ICPPhaseStatus;
import ims.icp.vo.lookups.ICPStageStatus;
import ims.icps.instantiation.vo.PatientICPActionRefVo;
import ims.icps.instantiation.vo.PatientICPPhaseRefVo;
import ims.icps.instantiation.vo.PatientICPRefVo;
import ims.icps.instantiation.vo.PatientICPStageRefVo;
import ims.vo.interfaces.IInstantiationICPStagePhaseAction;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	// Dynamic grid columns unique identifiers
	private static final Object COL_PRESENTATION = 1;
	private static final Object COL_CONTER_SIGNATURE = 2;
	private static final Object COL_STATUS = 3;
	private static final Object COL_ACTION_DETAILS = 4;
	private static final Object COL_HELP = 5;
	
	// Colours used on form
	private static Color InScopeColor = Color.BlanchedAlmond;

	private static final String CRITICAL_EVENT = "Critical events";
	private static final String EVALUATION_NOTES = "Evaluation notes";

	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Auxiliary classes
	//------------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 *	Patient ICP Stage comparator used for sorting stages after sequence
	 */
	private static class StageComparator implements Comparator<PatientICPStage_PresentationVo>
	{
		public int compare(PatientICPStage_PresentationVo stage1, PatientICPStage_PresentationVo stage2)
		{
			return stage1.getStage().getSequence().compareTo(stage2.getStage().getSequence());
		}
	}


	/**
	 * Patient ICP Phase comparator used for sorting phases after sequence
	 */
	private static class PhaseCompartor implements Comparator<PatientICPPhase_PresentationVo>
	{
		public int compare(PatientICPPhase_PresentationVo phase1, PatientICPPhase_PresentationVo phase2)
		{
			return phase1.getPhase().getSequence().compareTo(phase2.getPhase().getSequence());
		}
	}


	/**
	 * Patient ICP Action comparator used for sorting actions after sequence
	 */
	private static class ActionsComparator implements Comparator<PatientICPAction_PresentationVo>
	{
		public int compare(PatientICPAction_PresentationVo action1, PatientICPAction_PresentationVo action2)
		{
			return action1.getAction().getSequence().compareTo(action2.getAction().getSequence());
		}

	}

	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Component interface functions region
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	/**
	 * Function used to initialize the component
	 */
	public void initialize()
	{
		// Initialize controls on form
		
			// Initialize Discipline combo box with root disciplines only
			initializeDisciplinesComboBox();
		
			// Initialize Patient ICP dynamic grid
			initializePatientICPDynamicGrid();
			

		// Initialize context menus
			
		// Initialize currently logged in user
		form.getLocalContext().setLoggedInUser((HcpLiteVo) domain.getHcpLiteUser());
		form.getLocalContext().setReadOnlyMode(Boolean.FALSE);
		
		// Initialize local context for custom events
		form.getLocalContext().setCustomEvent(null);
		
		// Initialize local context for changing do Action
		form.getLocalContext().setActionDetailsHandlingMode(PresentationActionDetails.OPEN_IN_DIALOG);
	}
	

	/**
	 * Function used to set how Action Details is going to be handled
	 */
	public void setActionDetailsHandlingMode(PresentationActionDetails mode)
	{
		form.getLocalContext().setActionDetailsHandlingMode(mode);
	}


	/**
	 * Function used to toggle read-only mode for the component
	 */
	public void setReadOnly(Boolean readOnly)
	{
		form.getLocalContext().setReadOnlyMode(readOnly);
		
		updateControlsState();
	}

	/**
	* Function used to set value (a Patient ICP reference). Null values are allowed - component will be empty.
	*/
	public void setValue(PatientICPRefVo patientICP)
	{
		// Get value from domain
		form.getLocalContext().setICP(domain.getPatientICP(patientICP));
		// Set Patient ICP Record global context
		form.getGlobalContext().ICP.setPatientICPRecord(form.getLocalContext().getICP());

		// Present value to screen
		open(null);
	}

	/**
	 * Function used to refresh the screen
	 */
	public void refresh()
	{
		// Get ICP value from domain
		form.getLocalContext().setICP(domain.getPatientICP(form.getLocalContext().getICP()));
		// Also refresh the Global Context
		form.getGlobalContext().ICP.setPatientICPRecord(form.getLocalContext().getICP());

		// Present value to screen
		open(form.cmbDiscipline().getValue());
		
		// Notify selection changed
		notifySelectedActionChanged(getSelectedAction());
	}
	
	/**
	 *	IComponent function used by forms treating component events to determine what kind of events are triggered 
	 */
	public PresentationEvent getEvent()
	{
		return form.getLocalContext().getCustomEvent();
	}

	/**
	 * IComponent function used by forms treating component events to clear previous events
	 */
	public void clearEvent()
	{
		form.getLocalContext().setCustomEvent(null);
	}
	
	/**
	 * IComponent function used to retrieve the selected action
	 */
	public PatientICPAction_PresentationVo getSelectedAction()
	{
		return form.getLocalContext().getAction();
	}


	/**
	 * Function used to notify that action selected was changed
	 * @param action
	 */
	private void notifySelectedActionChanged(PatientICPAction_PresentationVo action)
	{
		// Set selected action
		form.getLocalContext().setAction(action);
		
		// Set event to be triggered & trigger event
		form.getLocalContext().setCustomEvent(PresentationEvent.SELECTION_CHANGED);
		form.fireCustomControlValueChanged();
	}
	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers region
	//------------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormModeChanged()
	{
		// Notify form containing the component
		form.fireCustomControlValueChanged();
		
		// Update controls state
		updateControlsState();
		
	}

	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		//WDEV-17337
		form.getLocalContext().setCustomEvent(PresentationEvent.ACTION_DETAILS_VIEW);
		form.fireCustomControlValueChanged();
		// Refresh screen
		refresh();
	}

	
	@Override
	protected void onDyngrdICPRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		form.getLocalContext().setSelection(form.dyngrdICP().getValue());
		
		// Update controls state
		updateControlsState();

		// Get selected action (if any) into local context
		boolean isActionSelected = form.dyngrdICP().getSelectedRow() != null && form.dyngrdICP().getSelectedRow().getValue() instanceof PatientICPAction_PresentationVo;
		
		if (isActionSelected)
			notifySelectedActionChanged((PatientICPAction_PresentationVo) form.dyngrdICP().getSelectedRow().getValue());
		else
			notifySelectedActionChanged(null);
	}


	@Override
	protected void onDyngrdICPCellButtonClicked(DynamicGridCell cell)
	{
		if (cell == null)
			return;
		
		Object rowValue = cell.getRow().getValue();
		
		if (COL_HELP.equals(cell.getColumn().getIdentifier()))
		{
			if (rowValue instanceof IInstantiationICPStagePhaseAction)
			{
				String helpURL = ((IInstantiationICPStagePhaseAction) rowValue).getHelpURL();
				engine.openUrl(helpURL);
			}
		}
		else if (COL_ACTION_DETAILS.equals(cell.getColumn().getIdentifier()))
		{
			form.dyngrdICP().setValue(rowValue);
			doActionDetails();
		}
	}

	
	@Override
	protected void onBtnDefaultViewClick() throws PresentationLogicException
	{
		// Display Patient ICP non-filtered
		open(null);

		// Clear selected action & notify form containing the component that the selection was changed
		notifySelectedActionChanged(null);
	}


	@Override
	protected void onBtnViewClick() throws PresentationLogicException
	{
		// Display Patient ICP filtered by selected discipline
		open(form.cmbDiscipline().getValue());
		
		// Clear selected action & notify form containing the component that the selection was changed
		notifySelectedActionChanged(null);
	}


	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.BringStageIntoScope:
				doBringStageIntoScope();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.RemoveStageFromScope:
				doRemoveStageFromScope();
				break;
				
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.BringPhaseIntoScope:
				doBringPhaseIntoScope();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.RemovePhaseFromScope:
				doRemovePhaseFromScope();
				break;
				
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.ActionMet:
				doActionMet();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.ActionNotMet:
				doActionNotMet();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.RecordVariance:
				doRecordVariance();
				break;
				
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.AddCriticalEvent:
				doAddCriticalEvent();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.EditCriticalEvent:
				doEditCriticalEvent();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.ViewCriticalEvent:
				doViewCriticalEvent();
				break;
				
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.AddEvaluationNote:
				doAddEvaluationNote();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.EditEvaluationNote:
				doEditEvaluationNote();
				break;
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.ViewEvaluationNote:
				doViewEvaluationNote();
				break;
				
				
			case GenForm.ContextMenus.ICPNamespace.PatientICPMenu.ActionDetails:
				doActionDetails();
				break;
		}		
	}


	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//------------------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to bind HCP Discipline with combo-box
	 * <br>It will only bind root values
	 */
	protected void initializeDisciplinesComboBox()
	{
		// Clear combo-box
		form.cmbDiscipline().clear();
		
		// Get HCP Discipline values
		HcpDisTypeCollection disciplines = LookupHelper.getHcpDisType(domain.getLookupService());
		
		if (disciplines == null)
			return;
		
		// Populate combo box with root disciplines
		for  (int i = 0; i < disciplines.size(); i++)
		{
			HcpDisType discipline = disciplines.get(i);
			
			// If discipline is a root discipline then add it to the combo box
			if (discipline != null && discipline.getParent() == null)
			{
				form.cmbDiscipline().newRow(discipline, discipline.getText(), discipline.getImage());
			}
		}
	}

	/**
	 * Function used to configure Patient ICP dynamic grid
	 */
	protected void initializePatientICPDynamicGrid()
	{
		// Clear dynamic grid (rows & columns)
		form.dyngrdICP().clear();
		
		// Create columns
		DynamicGridColumn column = form.dyngrdICP().getColumns().newColumn("");
		column.setIdentifier(COL_PRESENTATION);
		column.setWidth(300);
		column.setCanGrow(false);
		column.setDynamicWidthSupported(true);
		
		column = form.dyngrdICP().getColumns().newColumn("");
		column.setIdentifier(COL_CONTER_SIGNATURE);
		column.setWidth(25);
		column.setDynamicWidthSupported(true);
		column.setCanGrow(false);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);
		
		column = form.dyngrdICP().getColumns().newColumn("Status");
		column.setIdentifier(COL_STATUS);
		column.setWidth(40);
		column.setDynamicWidthSupported(true);
		column.setCanGrow(false);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);
		
		column = form.dyngrdICP().getColumns().newColumn("");
		column.setIdentifier(COL_ACTION_DETAILS);
		column.setWidth(25);
		column.setDynamicWidthSupported(true);
		column.setCanGrow(false);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);
		
		column = form.dyngrdICP().getColumns().newColumn("");
		column.setIdentifier(COL_HELP);
		column.setWidth(25);
		column.setDynamicWidthSupported(true);
		column.setCanGrow(false);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setAlignment(Alignment.CENTER);
	}

	
	/**
	 * Function used to present the form
	 */
	public void open(HcpDisType discipline)
	{
		// Clear screen
		clearScreen();
		
		// Set discipline to combobox
		form.cmbDiscipline().setValue(discipline);
		
		// Populate the screen with Patient ICP
		populateICP(form.getLocalContext().getICP(), discipline);
		
		// Reselect
		form.dyngrdICP().setValue(form.getLocalContext().getSelection());
		
		// Update controls state
		updateControlsState();
	}
	
	
	
	protected void clearScreen()
	{
		// Clear discipline combo-box
		form.cmbDiscipline().setValue(null);
		
		// Clear dynamic grid rows
		form.dyngrdICP().getRows().clear();
	}


	protected void updateControlsState()
	{
		// Update controls state on screen depending on context
		// NOTE: If buttons are added to form - use them here
		
		// Update context menu state
		updateContextMenuState();
	}

	
	/**
	 * Function used to update the context menu options state
	 * Will also update context menu place holder buttons
	 */
	protected void updateContextMenuState()
	{
		form.getContextMenus().ICP.hideAllPatientICPMenuMenuItems();
		
	
		boolean noICP = form.getLocalContext().getICP() == null;
		boolean readOnly = Boolean.TRUE.equals(form.getLocalContext().getReadOnlyMode());
		boolean isICPCompleted = form.getLocalContext().getICPIsNotNull() && form.getLocalContext().getICP().getCompletedDateTimeIsNotNull();
		
		
		// Context menu options for BRING / REMOVE Stage from scope
		boolean isStageSelected = form.dyngrdICP().getSelectedRow() != null && form.dyngrdICP().getSelectedRow().getValue() instanceof PatientICPStage_PresentationVo;
		
		form.getContextMenus().ICP.getPatientICPMenuBringStageIntoScopeItem().setVisible(!noICP && !readOnly && !isICPCompleted);
		form.getContextMenus().ICP.getPatientICPMenuRemoveStageFromScopeItem().setVisible(!noICP && !readOnly && !isICPCompleted && isStageSelected);
		
		form.imbBringStageIntoScope().setEnabled(!noICP && !readOnly && !isICPCompleted);
		form.imbRemoveStageFromScope().setEnabled(!noICP && !readOnly && !isICPCompleted && isStageSelected);
		
		
		// Context menu options for BRING / REMOVE Phase from scope
		boolean isPhaseSelectd = form.dyngrdICP().getSelectedRow() != null && form.dyngrdICP().getSelectedRow().getValue() instanceof PatientICPPhase_PresentationVo;
		
		form.getContextMenus().ICP.getPatientICPMenuBringPhaseIntoScopeItem().setVisible(!noICP && !readOnly && !isICPCompleted);
		form.getContextMenus().ICP.getPatientICPMenuRemovePhaseFromScopeItem().setVisible(!noICP && !readOnly && !isICPCompleted && isPhaseSelectd);
		
		form.imbBringPhaseIntoScope().setEnabled(!noICP && !readOnly && !isICPCompleted);
		form.imbRemovePhaseFromScope().setEnabled(!noICP && !readOnly && !isICPCompleted && isPhaseSelectd);
		

		// Context menu option for Actions - MET / NOT MET / Record Variance
		boolean isActionSelected = form.dyngrdICP().getSelectedRow() != null && form.dyngrdICP().getSelectedRow().getValue() instanceof PatientICPAction_PresentationVo;
		PatientICPAction_PresentationVo selectedAction = (PatientICPAction_PresentationVo) (isActionSelected ? form.dyngrdICP().getSelectedRow().getValue() : null);
		boolean isActionEditable = isActionSelected && isActionEditatble(selectedAction, form.getLocalContext().getLoggedInUser());

		form.getContextMenus().ICP.getPatientICPMenuActionMetItem().setVisible(!noICP && !readOnly && isActionSelected && !isICPCompleted && isActionEditable && ICPActionStatus.OUTSTANDING.equals(selectedAction.getCurrentStatus().getStatus()));
		form.getContextMenus().ICP.getPatientICPMenuActionNotMetItem().setVisible(!noICP && !readOnly && isActionSelected && !isICPCompleted && isActionEditable && ICPActionStatus.OUTSTANDING.equals(selectedAction.getCurrentStatus().getStatus()));
		form.getContextMenus().ICP.getPatientICPMenuRecordVarianceItem().setVisible(!noICP && !readOnly && isActionSelected && !isICPCompleted && isActionEditable && ICPActionStatus.NOT_MET.equals(selectedAction.getCurrentStatus().getStatus()));
		
		form.imbActionMet().setEnabled(!noICP && !readOnly && isActionSelected && !isICPCompleted && isActionEditable && ICPActionStatus.OUTSTANDING.equals(selectedAction.getCurrentStatus().getStatus()));
		form.imbActionNotMet().setEnabled(!noICP && !readOnly && isActionSelected && !isICPCompleted && isActionEditable && ICPActionStatus.OUTSTANDING.equals(selectedAction.getCurrentStatus().getStatus()));
		form.imbRecordVariance().setEnabled(!noICP && !readOnly && isActionSelected && !isICPCompleted && isActionEditable && ICPActionStatus.NOT_MET.equals(selectedAction.getCurrentStatus().getStatus()));
		
		
		// Context menu options for Critical Events
		boolean showCriticalEvents = Boolean.TRUE.equals(ConfigFlag.UI.SHOW_CRITICAL_EVENTS_ON_PATIENT_ICP.getValue());
		
		boolean selectedRootCriticalEvent = form.dyngrdICP().getSelectedRow() != null && CRITICAL_EVENT.equals(form.dyngrdICP().getSelectedRow().getValue());
		boolean isCriticalEventSelected = form.dyngrdICP().getSelectedRow() != null && form.dyngrdICP().getSelectedRow().getValue() instanceof PatientCriticalEventsVo;
		PatientCriticalEventsVo selectedCriticalEvent = (PatientCriticalEventsVo) (isCriticalEventSelected ? form.dyngrdICP().getSelectedRow().getValue() : null);
		boolean isEventEditable = isCriticalEventEditable(selectedCriticalEvent, form.getLocalContext().getLoggedInUser());
		
		form.getContextMenus().ICP.getPatientICPMenuAddCriticalEventItem().setVisible(!noICP && !readOnly && showCriticalEvents && !isICPCompleted && selectedRootCriticalEvent);
		form.getContextMenus().ICP.getPatientICPMenuEditCriticalEventItem().setVisible(!noICP && !readOnly && showCriticalEvents && !isICPCompleted && isCriticalEventSelected && isEventEditable);
		form.getContextMenus().ICP.getPatientICPMenuViewCriticalEventItem().setVisible(!noICP && !readOnly && showCriticalEvents && isCriticalEventSelected);
		
		form.imbAddCriticalEvent().setEnabled(!noICP && !readOnly && showCriticalEvents && !isICPCompleted && selectedRootCriticalEvent);
		form.imbEditCriticalEvent().setEnabled(!noICP && !readOnly && showCriticalEvents && !isICPCompleted && isCriticalEventSelected && isEventEditable);
		form.imbViewCriticalEvent().setEnabled(!noICP && !readOnly && showCriticalEvents && isCriticalEventSelected);
		

		// Context menu options for Evaluation Notes
		boolean selectedRootEvaluationNotes = form.dyngrdICP().getSelectedRow() != null && EVALUATION_NOTES.equals(form.dyngrdICP().getSelectedRow().getValue());
		boolean isEvaluationNoteSelected = form.dyngrdICP().getSelectedRow() != null && form.dyngrdICP().getSelectedRow().getValue() instanceof PatientICPEvaluationNoteVo;
		PatientICPEvaluationNoteVo selectedEvaluationNote = (PatientICPEvaluationNoteVo) (isEvaluationNoteSelected ? form.dyngrdICP().getSelectedRow().getValue() : null);
		boolean isNoteEditable = isEvaluationNoteEditable(selectedEvaluationNote, form.getLocalContext().getLoggedInUser());
		
		form.getContextMenus().ICP.getPatientICPMenuAddEvaluationNoteItem().setVisible(!noICP && !readOnly && !isICPCompleted && selectedRootEvaluationNotes);
		form.getContextMenus().ICP.getPatientICPMenuEditEvaluationNoteItem().setVisible(!noICP && !readOnly && !isICPCompleted && isEvaluationNoteSelected && isNoteEditable);
		form.getContextMenus().ICP.getPatientICPMenuViewEvaluationNoteItem().setVisible(!noICP && !readOnly && !isICPCompleted && isEvaluationNoteSelected);
		
		form.imbAddEvaluationNote().setEnabled(!noICP && !readOnly && !isICPCompleted && selectedRootEvaluationNotes);
		form.imbEditEvaluationNote().setEnabled(!noICP && !readOnly && !isICPCompleted && isEvaluationNoteSelected && isNoteEditable);
		form.imbViewEvaluationNote().setEnabled(!noICP && !readOnly && !isICPCompleted && isEvaluationNoteSelected);
		
		
		// Context menu option for Action Details
		form.getContextMenus().ICP.getPatientICPMenuActionDetailsItem().setVisible(!noICP && isActionSelected);
	}

	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//------------------------------------------------------------------------------------------------------------------------------------------------------------

	private void doBringStageIntoScope()
	{
		engine.open(form.getForms().ICP.BringStageIntoScope);
	}

	private void doRemoveStageFromScope()
	{
		try
		{
			MemberOfStaffLiteVo mos = form.getLocalContext().getLoggedInUserIsNotNull() ? form.getLocalContext().getLoggedInUser().getMos() : null;
			domain.removeStageFromScope(form.getLocalContext().getICP(), (PatientICPStageRefVo) form.dyngrdICP().getValue(), mos);
			
			refresh();
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			refresh();
		}
	}

	private void doBringPhaseIntoScope()
	{
		engine.open(form.getForms().ICP.BringPhaseIntoScope);
	}

	private void doRemovePhaseFromScope()
	{
		try
		{
			MemberOfStaffLiteVo mos = form.getLocalContext().getLoggedInUserIsNotNull() ? form.getLocalContext().getLoggedInUser().getMos() : null;
			domain.removePhaseFromScope(form.getLocalContext().getICP(), (PatientICPPhaseRefVo) form.dyngrdICP().getValue(), mos);
			
			refresh();
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			refresh();
		}
	}

	/**
	 * Function used to set an action to MET status
	 */
	private void doActionMet()
	{
		try
		{
			MemberOfStaffLiteVo mos = form.getLocalContext().getLoggedInUserIsNotNull() ? form.getLocalContext().getLoggedInUser().getMos() : null;

			// Set action status to Action MET
			domain.setActionStatus(form.getGlobalContext().ICP.getPatientICPRecord(), (PatientICPActionRefVo) form.dyngrdICP().getValue(), ICPActionStatus.MET, engine.hasRight(AppRight.CAN_COUNTERSIGN), mos);

			// Refresh screen
			refresh();
		}
		catch (StaleObjectException exception)
		{
			// Display SOE message
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// Refresh screen
			refresh();
		}
	}

	/**
	 * Function used to set an action to NOT MET status
	 */
	private void doActionNotMet()
	{
		try
		{
			MemberOfStaffLiteVo mos = form.getLocalContext().getLoggedInUserIsNotNull() ? form.getLocalContext().getLoggedInUser().getMos() : null;
			
			// Set action status to Action NOT MET
			PatientICPAction_PresentationVo icpAction = domain.setActionStatus(form.getGlobalContext().ICP.getPatientICPRecord(), (PatientICPActionRefVo) form.dyngrdICP().getValue(), ICPActionStatus.NOT_MET, engine.hasRight(AppRight.CAN_COUNTERSIGN), mos);

			// Display dialog for recording action variance
			form.getGlobalContext().ICP.setActionStatus(icpAction.getCurrentStatus());
			engine.open(form.getForms().ICP.RecordICPActionVariance);
		}
		catch (StaleObjectException exception)
		{
			// Display SOE message
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// Refresh screen
			refresh();
		}
	}
	
	
	private void doRecordVariance()
	{
		form.getGlobalContext().ICP.setActionStatus(((PatientICPAction_PresentationVo) form.dyngrdICP().getValue()).getCurrentStatus());
		engine.open(form.getForms().ICP.RecordICPActionVariance);
	}

	private void doAddCriticalEvent()
	{
		form.getGlobalContext().ICP.setPatientCriticalEvent(null);
		engine.open(form.getForms().ICP.ICPCritcalEvents);
	}

	private void doEditCriticalEvent()
	{
		form.getGlobalContext().ICP.setPatientCriticalEvent((PatientCriticalEventsVo) form.dyngrdICP().getValue());
		engine.open(form.getForms().ICP.ICPCritcalEvents);
	}

	private void doViewCriticalEvent()
	{
		form.getGlobalContext().ICP.setPatientCriticalEvent((PatientCriticalEventsVo) form.dyngrdICP().getValue());
		engine.open(form.getForms().ICP.ICPCritcalEvents, new Object[] { Boolean.TRUE });
	}

	private void doAddEvaluationNote()
	{
		form.getGlobalContext().ICP.setEvaluationNote(null);
		engine.open(form.getForms().ICP.ICPEvaluationNotes);
	}

	private void doEditEvaluationNote()
	{
		form.getGlobalContext().ICP.setEvaluationNote((PatientICPEvaluationNoteVo) form.dyngrdICP().getValue());
		engine.open(form.getForms().ICP.ICPEvaluationNotes);
	}

	private void doViewEvaluationNote()
	{
		form.getGlobalContext().ICP.setEvaluationNote((PatientICPEvaluationNoteVo) form.dyngrdICP().getValue());
		engine.open(form.getForms().ICP.ICPEvaluationNotes, new Object[] { Boolean.TRUE });
	}
	
	private void doActionDetails()
	{
		PatientICPAction_PresentationVo action = (PatientICPAction_PresentationVo) form.dyngrdICP().getValue();
		
		
		if (PresentationActionDetails.OPEN_IN_DIALOG.equals(form.getLocalContext().getActionDetailsHandlingMode()))
		{
			engine.open(form.getForms().ICP.PatientICPActionDetails, new Object[] { form.getLocalContext().getICP(), form.getLocalContext().getLoggedInUser(), action, Boolean.TRUE.equals(form.getLocalContext().getReadOnlyMode()) });
		}
		else if (PresentationActionDetails.TRIGGER_EVENT.equals(form.getLocalContext().getActionDetailsHandlingMode()))
		{
			form.getLocalContext().setCustomEvent(PresentationEvent.ACTION_DETAILS_VIEW);
			
			form.getLocalContext().setAction(action);
			
			form.fireCustomControlValueChanged();
		}
		else if (PresentationActionDetails.OPEN_DIALOG_TRIGGER_EVENT.equals(form.getLocalContext().getActionDetailsHandlingMode()))
		{
			form.getLocalContext().setCustomEvent(PresentationEvent.ACTION_DETAILS_VIEW);
			
			form.getLocalContext().setAction(action);
			
			engine.open(form.getForms().ICP.PatientICPActionDetails, new Object[] { form.getLocalContext().getICP(), form.getLocalContext().getLoggedInUser(), action, Boolean.TRUE.equals(form.getLocalContext().getReadOnlyMode()) });
			
			form.fireCustomControlValueChanged();
		}
	}




	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Data exchange functions
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	

	/**
	 * Function used to display Patient ICP to screen
	 */
	protected void populateICP(PatientICP_PresentationVo icp, HcpDisType discipline)
	{
		// Clear dynamic grid rows
		form.dyngrdICP().getRows().clear();
		
		// Test ICP to be displayed
		if (icp == null || icp.getStages() == null)
			return;
		
		// Sort stages by sequence
		icp.getStages().sort(new StageComparator());
		
		
		// Populate Patient ICP Stages
		for (PatientICPStage_PresentationVo stage : icp.getStages())
		{
			populateICPStage(stage, discipline);
		}
		
		// Populate Patient ICP Critical Events if required
		if (Boolean.TRUE.equals(ConfigFlag.UI.SHOW_CRITICAL_EVENTS_ON_PATIENT_ICP.getValue()))
		{
			populatePatientICPCriticalEvents(icp.getCriticalEvents());
		}

		// Populate Patient ICP Evaluation Notes
		populatePatientICPEvaluationNotes(icp.getEvaluationNotes());
	}


	/**
	 * Function used to populate a Patient ICP Stage to a row
	 */
	protected void populateICPStage(PatientICPStage_PresentationVo stage, HcpDisType discipline)
	{
		// Check if stage not to be outside of scope
		if (stage == null || ICPStageStatus.NOTINSCOPE.equals(stage.getCurrentStatus().getStatus()))
			return;
		
		// Create stage row
		DynamicGridRow stageRow = form.dyngrdICP().getRows().newRow();
		
		// Set row attributes
		stageRow.setSelectable(true);
		
		stageRow.setCollapsedImage(form.getImages().ICP.Stage);
		stageRow.setExpandedImage(form.getImages().ICP.Stage);
		
		// Fill in row cells
		DynamicGridCell cell = stageRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_PRESENTATION), DynamicCellType.STRING);
		cell.setValue(stage.getStage().getName());
		cell.setWidth(300);
		cell.setReadOnly(true);
		
		if (stage.getStage().getHelpURLIsNotNull() && stage.getStage().getHelpURL().trim().length() > 0)
		{
			cell = stageRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_HELP), DynamicCellType.IMAGEBUTTON);
			cell.setValue(form.getImages().Core.InfoEnabled16);
			cell.setReadOnly(false);
			cell.setTooltip(stage.getStage().getHelpURL());
			cell.setWidth(25);
			cell.setAutoPostBack(true);
		}
		
		// Set row value
		stageRow.setValue(stage);
		
		
		if (stage.getPhases() == null)
			return;
		
		stage.getPhases().sort(new PhaseCompartor());
		
		// Populate stage's Patient ICP Phases
		for (PatientICPPhase_PresentationVo phase : stage.getPhases())
		{
			populateICPPhase(phase, discipline, stageRow);
		}
		
		// Expand stage row
		stageRow.setExpanded(true);
	}

	
	/**
	 * Function used to populate a Patient ICP Phase to a row
	 */
	protected void populateICPPhase(PatientICPPhase_PresentationVo phase, HcpDisType discipline, DynamicGridRow stageRow)
	{
		// Check if phase not to be outside of scope
		if (phase == null || ICPPhaseStatus.NOTINSCOPE.equals(phase.getCurrentStatus().getStatus()))
			return;
		
		// Create phase row
		DynamicGridRow phaseRow = stageRow.getRows().newRow();
		
		// Set row attributes
		phaseRow.setSelectable(true);
		
		phaseRow.setCollapsedImage(form.getImages().ICP.Phase);
		phaseRow.setExpandedImage(form.getImages().ICP.Phase);
		
		// Fill in row cells
		DynamicGridCell cell = phaseRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_PRESENTATION), DynamicCellType.STRING);
		cell.setValue(phase.getPhase().getName());
		cell.setWidth(300);
		cell.setReadOnly(true);
		
    		// If phase has goals defined then display them as a tooltip
    		if (phase.getPhase().getGoalsIsNotNull() && phase.getPhase().getGoals().size() > 0)
    		{
    			cell.setTooltip(buildPhaseGoalsString(phase));
    		}
		
		if (phase.getPhase().getHelpURLIsNotNull() && phase.getPhase().getHelpURL().length() > 0)
		{
			cell = phaseRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_HELP), DynamicCellType.IMAGEBUTTON);
			cell.setValue(form.getImages().Core.InfoEnabled16);
			cell.setTooltip(phase.getPhase().getHelpURL());
			cell.setWidth(25);
			cell.setAutoPostBack(true);
		}
		
		// Set row value
		phaseRow.setValue(phase);
		
		
		if (phase.getActions() == null)
			return;
		
		phase.getActions().sort(new ActionsComparator());
		
		// Populate phase's Patient ICP Actions
		for (PatientICPAction_PresentationVo action : phase.getActions())
		{
			populateICPAction(action, discipline, phaseRow);
		}
		
		// Expand phase row
		phaseRow.setExpanded(true);
	}

	
	/**
	 * Function used to populate a Patient ICP Action to a row
	 * @param phaseRow 
	 */
	protected void populateICPAction(PatientICPAction_PresentationVo action, HcpDisType discipline, DynamicGridRow phaseRow)
	{
		// Check if the action matches the filter discipline
		if (action == null || (discipline != null && !action.getAction().getDiscipline().contains(discipline)))
			return;
		
		// Check for action not to be outside of the scope
		if (ICPActionStatus.NOTINSCOPE.equals(action.getCurrentStatus().getStatus()))
			return;
		
		
		// Create action row
		DynamicGridRow actionRow = phaseRow.getRows().newRow();
		
		// Set row attributes
		actionRow.setSelectable(true);
		
		actionRow.setCollapsedImage(form.getImages().ICP.Action);
		actionRow.setExpandedImage(form.getImages().ICP.Action);
		
		if (isActionEditatble(action, form.getLocalContext().getLoggedInUser()))
		{
			actionRow.setBackColor(InScopeColor);
		}
		
		// Fill in row cells
		
			// Name cell
    		DynamicGridCell cell = actionRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_PRESENTATION), DynamicCellType.STRING);
    		cell.setValue(action.getAction().getName());
    		cell.setTooltip(action.getAction().getName());
    		cell.setWidth(300);
    		cell.setReadOnly(true);

    		// Requires counter-signing cell
    		cell = actionRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_CONTER_SIGNATURE), DynamicCellType.IMAGE);
    		if (Boolean.TRUE.equals(action.getRequiresCounterSigning()))
    		{
    			cell.setValue(form.getImages().ICP.ACTION_OUTSANDING_ENABLED_16);
    			cell.setTooltip("Requires counter-signature.");
    		}
    		cell.setWidth(25);
    		cell.setReadOnly(true);
    		
    		// Status cell
    		cell = actionRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_STATUS), DynamicCellType.IMAGE);
    		cell.setValue(action.getCurrentStatus().getStatus().getImage());
    		cell.setTooltip(buildActionStatusTooltip(action));
    		cell.setWidth(40);
    		cell.setReadOnly(true);
    		
			cell = actionRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_ACTION_DETAILS), DynamicCellType.BUTTON);
    		cell.setTooltip("Action details.");
    		cell.setWidth(25);
    		cell.setAutoPostBack(true);
    		
    		// Help cell
    		if (action.getAction().getHelpURLIsNotNull() && action.getAction().getHelpURL().length() > 0)
    		{
    			cell = actionRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_HELP), DynamicCellType.IMAGEBUTTON);
    			cell.setValue(form.getImages().Core.InfoEnabled16);
    			cell.setTooltip(action.getAction().getHelpURL());
    			cell.setWidth(25);
    			cell.setAutoPostBack(true);
    		}
		
		// Set row value
		actionRow.setValue(action);
	}

	
	/**
	 * Function used to populate a Patient ICP critical events
	 */
	private void populatePatientICPCriticalEvents(PatientCriticalEventsVoCollection criticalEvents)
	{
		// Create parent row for Critical Events
		DynamicGridRow eventsRootRow = form.dyngrdICP().getRows().newRow();
		
		// Set row attributes
		eventsRootRow.setSelectable(true);
		
		eventsRootRow.setCollapsedImage(form.getImages().Core.CriticalError);
		eventsRootRow.setExpandedImage(form.getImages().Core.CriticalError);
		
		// Fill in cells for root row
		DynamicGridCell cell = eventsRootRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_PRESENTATION), DynamicCellType.STRING);
		cell.setValue(CRITICAL_EVENT);
		cell.setReadOnly(true);
		cell.setWidth(300);
		
		// Set row value
		eventsRootRow.setValue(CRITICAL_EVENT);
		
		
		// Sort critical events
		criticalEvents.sort(SortOrder.DESCENDING);
		
		// Add critical event to root row
		for (PatientCriticalEventsVo event : criticalEvents)
		{
			// Create row for critical event
			DynamicGridRow eventRow = eventsRootRow.getRows().newRow();
			
			// Set row attributes
			eventRow.setSelectable(true);
			
			eventRow.setCollapsedImage(form.getImages().Core.RedCircle);
			eventRow.setExpandedImage(form.getImages().Core.RedCircle);
			
			// Fill in cells for root row
			DynamicGridCell eventCell = eventRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_PRESENTATION), DynamicCellType.STRING);
			
			eventCell.setValue(buildCriticalEventText(event));
			eventCell.setReadOnly(true);
			eventCell.setTooltip(event.getNote());
			eventCell.setWidth(300);
			
			// Set row value
			eventRow.setValue(event);
		}
		
		eventsRootRow.setExpanded(true);
	}


	/**
	 * Function used to populate a Patient ICP evaluation notes
	 */
	private void populatePatientICPEvaluationNotes(PatientICPEvaluationNoteVoCollection evaluationNotes)
	{
		// Create a root row for evaluation notes
		DynamicGridRow notesRootRow = form.dyngrdICP().getRows().newRow();
		
		// Set row attributes
		notesRootRow.setSelectable(true);
		
		notesRootRow.setCollapsedImage(form.getImages().Core.Memo);
		notesRootRow.setExpandedImage(form.getImages().Core.Memo);
		
		// Fill in cell
		DynamicGridCell cell = notesRootRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_PRESENTATION), DynamicCellType.STRING);
		cell.setValue(EVALUATION_NOTES);
		cell.setReadOnly(true);
		cell.setWidth(300);
		
		// Set row value
		notesRootRow.setValue(EVALUATION_NOTES);
		
		
		// Sort evaluation notes
		evaluationNotes.sort(SortOrder.DESCENDING);
		
		// Add evaluation notes to root row
		for (PatientICPEvaluationNoteVo note : evaluationNotes)
		{
			// Create row for evaluation note
			DynamicGridRow noteRow = notesRootRow.getRows().newRow();
			
			// Set row attributes
			noteRow.setSelectable(true);
			
			noteRow.setCollapsedImage(form.getImages().Core.GreenSquare);
			noteRow.setCollapsedImage(form.getImages().Core.GreenSquare);
			
			// Fill in cells
			DynamicGridCell noteCell = noteRow.getCells().newCell(form.dyngrdICP().getColumns().getByIdentifier(COL_PRESENTATION), DynamicCellType.STRING);
			noteCell.setValue(buildEvaluationNoteText(note));
			noteCell.setTooltip(note.getNote());
			noteCell.setReadOnly(true);
			noteCell.setWidth(-1);
			
			// Set row value
			noteRow.setValue(note);
		}
		
		notesRootRow.setExpanded(true);
	}

	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Private class methods
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	/**
	 * Function used to check if a Patient ICP Action can be edited by current user
	 */
	private boolean isActionEditatble(PatientICPAction_PresentationVo action, HcpLiteVo user)
	{
		// If no action is provided - consider it an error
		if (action == null)
			return false;
		
		// If no HCP user is logged in or no discipline is configured for the user
		// action is not editable
		if (user == null || user.getHcpType() == null)
			return false;
		
		// If the action contains user discipline consider the action to be editable
		if (action.getAction().getDiscipline().contains(user.getHcpType()))
			return true;

		// By default consider action not to be editable
		return false;
	}
	
	
	/**
	 * Function used to determine if a Critical Event can be edited by user
	 */
	private boolean isCriticalEventEditable(PatientCriticalEventsVo criticalEvent, HcpLiteVo user)
	{
		// If no event is provided - consider it an error
		if (criticalEvent == null)
			return false;
		
		// If no HCP user is logged in then Critical Event is not editable
		if (user == null)
			return false;
		
		
		// If the Critical event has Authored by user then Critical Event is editable by user
		if (user.equals(criticalEvent.getAuthoringInformation().getAuthoringHcp()))
			return true;
		
		// By default consider Critical Event not to be editable
		return false;
	}


	/**
	 * Function used to determine if an Evaluation Note can be edited by user
	 */
	private boolean isEvaluationNoteEditable(PatientICPEvaluationNoteVo evaluationNote, HcpLiteVo user)
	{
		// If no event is provided - consider it an error
		if (evaluationNote == null)
			return false;
			
		// If no HCP User is logged in then Evaluation Note is not editable
		if (user == null)
			return false;
		
		// If the Evaluation note has been Authored by user then Evaluation note is editable by user
		if (user.equals(evaluationNote.getAuthoringInformation().getAuthoringHcp()))
			return true;
		
		// By default consider Evaluation Note not to be editable
		return false;
	}


	/**
	 * Function used to build the Phase Goals tooltip string 
	 */
	private String buildPhaseGoalsString(PatientICPPhase_PresentationVo phase)
	{
		StringBuilder sb = new StringBuilder();
		
		sb.append("Goals: ");
		
		for (IcpPhaseGoalVo goal : phase.getPhase().getGoals())
		{
			sb.append(goal.getGoal()).append("; ");
		}
		
		String goalString = sb.toString();
		return goalString;
	}

	
	/**
	 * Function used to build the Action Status tooltip string 
	 */
	private String buildActionStatusTooltip(PatientICPAction_PresentationVo action)
	{
		StringBuilder actionStatusString = new StringBuilder();
		
		actionStatusString.append("Status: ").append(action.getCurrentStatus().getStatus().getText());
		
		if (ICPActionStatus.MET.equals(action.getCurrentStatus().getStatus()))
		{
			actionStatusString.append("<br>Changed by: ").append(action.getCurrentStatus().getChangedBy().toString());
			actionStatusString.append("<br>Date / Time: ").append(action.getCurrentStatus().getStatusDate().toString());
		}
		else if (ICPActionStatus.NOT_MET.equals(action.getCurrentStatus().getStatus()))
		{
			actionStatusString.append("<br>Changed by: ").append(action.getCurrentStatus().getChangedBy().toString());
			actionStatusString.append("<br>Date / Time: ").append(action.getCurrentStatus().getStatusDate().toString());
			actionStatusString.append("<br>Variance Category: ").append(action.getCurrentStatus().getVarianceCategoryIsNotNull() ? action.getCurrentStatus().getVarianceCategory().getText() : "");
			actionStatusString.append("<br>Variance Type: ").append(action.getCurrentStatus().getVarianceTypeIsNotNull() ? action.getCurrentStatus().getVarianceType().getText() : "");
			actionStatusString.append("<br>Variance Comment: ").append(action.getCurrentStatus().getVarianceCommentIsNotNull() ? action.getCurrentStatus().getVarianceComment() : "");
		}
		
		String tooltipValue = actionStatusString.toString();
		return tooltipValue;
	}


	/**
	 * Function used to build the Critical Events text
	 */
	private String buildCriticalEventText(PatientCriticalEventsVo event)
	{
		StringBuilder sb = new StringBuilder();
		
		sb.append(event.getCriticalEvent());
		sb.append(" - ");
		
		if (event.getAuthoringInformationIsNotNull())
			sb.append(event.getAuthoringInformation().getAuthoringDateTime().getDate());
		else
			sb.append(" ? ");
		
		return sb.toString();
	}


	/**
	 * Function used to build the Evaluation Notes text
	 */
	private Object buildEvaluationNoteText(PatientICPEvaluationNoteVo note)
	{
		StringBuilder sb = new StringBuilder();
		
		sb.append(note.getDiscipline().getText());
		sb.append(" - ");
		
		if (note.getAuthoringInformationIsNotNull())
			sb.append(note.getAuthoringInformation().getAuthoringDateTime().getDate());
		else
			sb.append(" ? ");

		return sb.toString();
	}


	
	//------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Context menu buttons place holders event handlers
	//------------------------------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onImbBringStageIntoScopeClick() throws PresentationLogicException
	{
		doBringStageIntoScope();
	}

	@Override
	protected void onImbRemoveStageFromScopeClick() throws PresentationLogicException
	{
		doRemoveStageFromScope();
	}

	@Override
	protected void onImbBringPhaseIntoScopeClick() throws PresentationLogicException
	{
		doBringPhaseIntoScope();
	}

	@Override
	protected void onImbRemovePhaseFromScopeClick() throws PresentationLogicException
	{
		doRemovePhaseFromScope();
	}

	@Override
	protected void onImbActionMetClick() throws PresentationLogicException
	{
		doActionMet();
	}

	@Override
	protected void onImbActionNotMetClick() throws PresentationLogicException
	{
		doActionNotMet();
	}

	@Override
	protected void onImbRecordVarianceClick() throws PresentationLogicException
	{
		doRecordVariance();
	}

	@Override
	protected void onImbAddCriticalEventClick() throws PresentationLogicException
	{
		doAddCriticalEvent();
	}

	@Override
	protected void onImbEditCriticalEventClick() throws PresentationLogicException
	{
		doEditCriticalEvent();
	}

	@Override
	protected void onImbViewCriticalEventClick() throws PresentationLogicException
	{
		doViewCriticalEvent();
	}

	@Override
	protected void onImbAddEvaluationNoteClick() throws PresentationLogicException
	{
		doAddEvaluationNote();
	}

	@Override
	protected void onImbEditEvaluationNoteClick() throws PresentationLogicException
	{
		doEditEvaluationNote();
	}

	@Override
	protected void onImbViewEvaluationNoteClick() throws PresentationLogicException
	{
		doViewEvaluationNote();
	}
}
