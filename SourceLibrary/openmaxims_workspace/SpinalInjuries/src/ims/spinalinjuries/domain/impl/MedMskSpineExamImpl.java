//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.22 build 41222.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.
//31/03/2005 - List and save the record based on the Medical Contact
package ims.spinalinjuries.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.admin.domain.DrawingConfiguration;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.DrawingConfigurationImpl;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.PatientProblem;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.DrawingImageVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.lookups.ContactType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.enumerations.SortOrder;
import ims.generalmedical.vo.AdmisSpineExamVo;
import ims.generalmedical.vo.MedicalProbOnAdmisVoCollection;
import ims.generalmedical.vo.MskSpineExamFindingShortVo;
import ims.generalmedical.vo.MskSpineExamFindingShortVoCollection;
import ims.generalmedical.vo.MskSpineExaminationVo;
import ims.generalmedical.vo.MskSpineExaminationVoCollection;
import ims.generalmedical.vo.domain.MedicalProbOnAdmisVoAssembler;
import ims.generalmedical.vo.domain.MskSpineExamFindingShortVoAssembler;
import ims.generalmedical.vo.domain.MskSpineExaminationVoAssembler;
import ims.medical.domain.objects.MskSpineExam;


public class MedMskSpineExamImpl extends DomainImpl implements ims.spinalinjuries.domain.MedMskSpineExam, ims.domain.impl.Transactional
{

	/**
	* Save the Admission Spinal Examinations and findings for the selected Episode
	*/
	public AdmisSpineExamVo saveAdmisSpineExamination(AdmisSpineExamVo admisSpinExam) throws StaleObjectException
	{
		// Ensure the value object has been validated
		if (!admisSpinExam.isValidated())
			throw new DomainRuntimeException("Admission Spinal Examination has not been validated");
		
			DomainFactory factory = getDomainFactory();
			
			if(admisSpinExam.getMskExamIsNotNull())
			{
				MskSpineExam doMskSpineExam = MskSpineExaminationVoAssembler.extractMskSpineExam(factory, admisSpinExam.getMskExam());
	
				factory.save(doMskSpineExam);
		
				admisSpinExam.setMskExam(MskSpineExaminationVoAssembler.create(doMskSpineExam));
			}
			
			MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = new MedicalProbOnAdmisVoCollection(); 
			
			if(admisSpinExam.getProblemsOnAdmissionIsNotNull())
			{
				for(int i=0; i<admisSpinExam.getProblemsOnAdmission().size(); i++)
				{
					PatientProblem doMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.extractPatientProblem(factory, admisSpinExam.getProblemsOnAdmission().get(i));
						
					factory.save(doMedicalProbOnAdmis);
					
					collMedicalProbOnAdmis.add(MedicalProbOnAdmisVoAssembler.create(doMedicalProbOnAdmis));
				}
			}
			return admisSpinExam;
			
	}


	/* (non-Javadoc)
	 * Gets a DrawingImage
	 */
	public DrawingImageVo getDrawingImage(DrawingImageVo drawingImage) 
	{
		DrawingConfiguration drawingConfigImpl = (DrawingConfiguration)getDomainImpl(DrawingConfigurationImpl.class);
		return drawingConfigImpl.getDrawingImage(drawingImage);
	}

	public MskSpineExamFindingShortVoCollection listByCareContext(CareContextLiteVo voCareContext)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from MskSpineExam mse ";
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if(voCareContext != null)
		{
			hql.append(andStr + " mse.careContext.id = :cc");
			markers.add("cc");
			values.add(voCareContext.getID_CareContext());
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();	
		
		List mskSpine = factory.find(query,markers,values);
		MskSpineExamFindingShortVoCollection voSpineExamFindingShortColl = MskSpineExamFindingShortVoAssembler.createMskSpineExamFindingShortVoCollectionFromMskSpineExam(mskSpine);
		if(voSpineExamFindingShortColl != null)
			return voSpineExamFindingShortColl.sort(SortOrder.DESCENDING);
		else	
			return null;
	}

	public HcpLiteVoCollection listHcpLiteByName(String hcpName)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(hcpName);

	}

	public AdmisSpineExamVo getAdmisSpineExamination(ClinicalContactShortVo contact, MskSpineExamFindingShortVo voSpineExamShort)
	{
		
		AdmisSpineExamVo voAdmisSpineExam = new AdmisSpineExamVo();
	
		if (voSpineExamShort != null)
		{
			voAdmisSpineExam.setMskExam(get(voSpineExamShort));
			return voAdmisSpineExam;
		}
		else
		{
			DomainFactory factory = getDomainFactory();	
	
			MskSpineExaminationVoCollection collMskSpineExamination = new MskSpineExaminationVoCollection();
			String hql = " from MskSpineExam mskSpineExam"; 
			StringBuffer condStr = new StringBuffer();
			String andStr = " ";
		
			ArrayList markers = new ArrayList();
			ArrayList values = new ArrayList();
		
	
			if(contact.getID_ClinicalContactIsNotNull())
			{
				condStr.append(andStr + " mskSpineExam.clinicalContact.id = :id_ClinicalContact"); 
				markers.add("id_ClinicalContact");
				values.add(contact.getID_ClinicalContact());
				andStr = " and ";
			}	
			
			if (andStr.equals(" and "))
				hql += " where ";
		
			hql += condStr.toString();
			collMskSpineExamination = MskSpineExaminationVoAssembler.createMskSpineExaminationVoCollectionFromMskSpineExam(factory.find(hql, markers, values));
			if(collMskSpineExamination.size()>0)
			{
				collMskSpineExamination.sort(SortOrder.DESCENDING);
				voAdmisSpineExam.setMskExam(collMskSpineExamination.get(0));
			}
		}

		return voAdmisSpineExam;
	}


	public AdmisSpineExamVo getAdmisSpineExamByCareContext(CareContextLiteVo voCareContext, MskSpineExamFindingShortVo voSpineExamFindingShort)
	{
		DomainFactory factory = getDomainFactory();
		
		AdmisSpineExamVo voAdmisSpineExam = new AdmisSpineExamVo();
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if(voCareContext.getID_CareContextIsNotNull())
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :id"); 
			markers.add("id");
			values.add(voCareContext.getID_CareContext());
			andStr = " and ";
		}	
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Neuro - Reflexes");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		voAdmisSpineExam.setProblemsOnAdmission(collMedicalProbOnAdmis);
		
		if (voSpineExamFindingShort != null)
		{
			voAdmisSpineExam.setMskExam(get(voSpineExamFindingShort));
			return voAdmisSpineExam;
		}
		else
		{
			MskSpineExaminationVoCollection collMskSpineExamination = new MskSpineExaminationVoCollection();
			hql = " from MskSpineExam mskSpineExam"; 
			condStr = new StringBuffer();
			andStr = " ";
		
			markers = new ArrayList();
			values = new ArrayList();
		
			if(voCareContext.getID_CareContextIsNotNull())
			{
				condStr.append(andStr + " mskSpineExam.careContext.id = :id"); 
				markers.add("id");
				values.add(voCareContext.getID_CareContext());
				andStr = " and ";
			}	
			
			condStr.append(andStr + " mskSpineExam.clinicalContact is null"); 
			
			if (andStr.equals(" and "))
				hql += " where ";
		
			hql += condStr.toString();
			collMskSpineExamination = MskSpineExaminationVoAssembler.createMskSpineExaminationVoCollectionFromMskSpineExam(factory.find(hql, markers, values));
			if(collMskSpineExamination.size()>0)
			{
				collMskSpineExamination.sort(SortOrder.DESCENDING);
				voAdmisSpineExam.setMskExam(collMskSpineExamination.get(0));
			}
		}
		
		return voAdmisSpineExam;
	}
	private MskSpineExaminationVo get(MskSpineExamFindingShortVo voSpineExamFindingShort)
	{
		if(voSpineExamFindingShort == null)
			throw new DomainRuntimeException("Invalid Exam Sensation record to get");

		return MskSpineExaminationVoAssembler.create((MskSpineExam) getDomainFactory().getDomainObject(MskSpineExam.class,voSpineExamFindingShort.getID_MskSpineExam()));
	}


	public AdmisSpineExamVo getMedicalAdmissionSpineExamByCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();
		AdmisSpineExamVo voAdmisSpineExam = null;
		
		List exam =   factory.find(" from MskSpineExam exam where exam.clinicalContact.id = " + 
				"( select cons.id from CareContext con join con.clinicalContacts cons where cons.contactType = :type and con.id = :idcare)",
				new String[]{"type", "idcare" },
				new Object[]{ getDomLookup(ContactType.SPINALMEDICALADMISSION),voCareContextRef.getID_CareContext()});
		
		MskSpineExaminationVoCollection collMskSpineExamination = MskSpineExaminationVoAssembler.createMskSpineExaminationVoCollectionFromMskSpineExam(exam);
		if(collMskSpineExamination != null && collMskSpineExamination.size()>0)
		{
			voAdmisSpineExam = new AdmisSpineExamVo();
			voAdmisSpineExam.setMskExam(collMskSpineExamination.get(0));
		}
		return voAdmisSpineExam;
			
	}

}
