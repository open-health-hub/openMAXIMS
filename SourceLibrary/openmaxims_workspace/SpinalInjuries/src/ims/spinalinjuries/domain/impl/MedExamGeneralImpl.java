//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 41222.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import ims.clinical.domain.objects.ExamGen;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.PatientProblem;
import ims.core.domain.VitalSignsAll;
import ims.core.domain.impl.VitalSignsImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vitals.domain.objects.VitalSigns;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.PatientShort;
import ims.core.vo.VSMetrics;
import ims.core.vo.VitalSignsVo;
import ims.core.vo.VitalSignsVoCollection;
import ims.core.vo.domain.VSBloodPressureAssembler;
import ims.core.vo.domain.VSGlasgowComaScaleAssembler;
import ims.core.vo.domain.VSLungFunctionTestVoAssembler;
import ims.core.vo.domain.VSMetricsAssembler;
import ims.core.vo.domain.VSOxygenSaturationAssembler;
import ims.core.vo.domain.VSPulseAssembler;
import ims.core.vo.domain.VSRespirationsAssembler;
import ims.core.vo.domain.VSTemperatureAssembler;
import ims.core.vo.domain.VitalSignsVoAssembler;
import ims.core.vo.lookups.VSType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.domain.lookups.LookupInstance;
import ims.generalmedical.vo.AdmisExamGeneralVo;
import ims.generalmedical.vo.MedExamGeneralVoCollection;
import ims.generalmedical.vo.MedicalProbOnAdmisVoCollection;
import ims.generalmedical.vo.domain.MedExamGeneralVoAssembler;
import ims.generalmedical.vo.domain.MedicalProbOnAdmisVoAssembler;

import java.util.ArrayList;
import java.util.List;

public class MedExamGeneralImpl extends DomainImpl implements ims.spinalinjuries.domain.MedExamGeneral, ims.domain.impl.Transactional
{
	private static final long	serialVersionUID	= 1L;

	/**
	* saveExamGeneral
	*/
	public PatientShort saveAdmisExamGeneral(AdmisExamGeneralVo admisExamGeneralVo, ClinicalContactShortVo contactVo) throws StaleObjectException
	{
		if (!admisExamGeneralVo.isValidated())
			throw new DomainRuntimeException("Exam General has not been validated");
		
		DomainFactory factory = getDomainFactory();
			
		ClinicalContact doClinicalContact = (ClinicalContact)factory.getDomainObject(ClinicalContact.class, contactVo.getID_ClinicalContact());
		
		PatientShort patient=null;
		if(admisExamGeneralVo.getVitalssignsrecordedIsNotNull())
		{
			//wdev-10669
			if(admisExamGeneralVo.getGenExaminationDet().getID_ExamGen() == null && admisExamGeneralVo.getGenExaminationDet().getClinicalContactIsNotNull())
			{
				StringBuffer hql = new StringBuffer();
				hql.append("from ExamGen as e1_1 where e1_1.clinicalContact.id = :CCID and e1_1.isRIE is null");
				java.util.List<?> list = getDomainFactory().find(hql.toString(), "CCID",admisExamGeneralVo.getGenExaminationDet().getClinicalContact().getID_ClinicalContact());
				if (list == null || list.size() > 0)
					throw new StaleObjectException(null);
			}
			//-----------
			VitalSigns doVitals = VitalSignsVoAssembler.extractVitalSigns(factory,admisExamGeneralVo.getVitalssignsrecorded());
			
			if(doVitals != null)
			{
				List<?> recordedExistColl = doVitals.getRecordedSigns();
				if(recordedExistColl.size() > 0) //existing vitals must be inactivated if new recorded ones
					checkAndInactivate(recordedExistColl, doVitals, admisExamGeneralVo.getVitalssignsrecorded());
			}
	
			doVitals = VitalSignsVoAssembler.extractVitalSigns(factory, admisExamGeneralVo.getVitalssignsrecorded());
			factory.save(doVitals);
			admisExamGeneralVo.setVitalssignsrecorded(VitalSignsVoAssembler.create(doVitals));
			
			//set the VitalSigns - Metrics to Patient 
			if(admisExamGeneralVo.getVitalssignsrecorded().getMetricsIsNotNull())
			{
				admisExamGeneralVo.getVitalssignsrecorded().getMetrics().validate();
				saveMetricsToPatient(admisExamGeneralVo.getVitalssignsrecorded().getMetrics());
			}
			
		}
		
		if(admisExamGeneralVo.getGenExaminationDetIsNotNull())
		{
			ExamGen doExamGen = MedExamGeneralVoAssembler.extractExamGen(factory, admisExamGeneralVo.getGenExaminationDet());
			
			if(doExamGen.getClinicalContact()==null)
				doExamGen.setClinicalContact(doClinicalContact);
			
			factory.save(doExamGen);
		
			admisExamGeneralVo.setGenExaminationDet(MedExamGeneralVoAssembler.create(doExamGen));
		}
		
		
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = new MedicalProbOnAdmisVoCollection(); 
		
		if(admisExamGeneralVo.getProblemsOnAdmissionIsNotNull())
			for(int i=0; i<admisExamGeneralVo.getProblemsOnAdmission().size(); i++)
			{
				PatientProblem doMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.extractPatientProblem(factory, admisExamGeneralVo.getProblemsOnAdmission().get(i));

				factory.save(doMedicalProbOnAdmis);

				collMedicalProbOnAdmis.add(MedicalProbOnAdmisVoAssembler.create(doMedicalProbOnAdmis));
			}
				
		// A valid/updated patient vo will be returned if it was updated by the saveMetricsToCoreClinical method
		// otherwise, null will be returned and handled by the calling logic
		return patient;
	}


	/**
	 * @param recordedExistColl
	 * @param doVitals
	 * @param vo
	 */
	private void checkAndInactivate(List<?> recordedExistColl, VitalSigns doVitals, VitalSignsVo voVitals) throws StaleObjectException
	{	
		VitalSignsAll impl = (VitalSignsAll)getDomainImpl(VitalSignsImpl.class);
		LookupInstance type = null;
		for(int i=0;i<recordedExistColl.size(); i++)
		{
			type = (LookupInstance)recordedExistColl.get(i);
			if(type.getId() == VSType.BP.getId())
			{
				if(!voVitals.contentEquals(VSBloodPressureAssembler.create(doVitals.getBloodPressure())))
					impl.inactivateVitalSign(voVitals,VSType.BP);
			}
			if(type.getId() == VSType.PULSE.getId())
			{
				if(!voVitals.contentEquals(VSPulseAssembler.create(doVitals.getPulse())))
					impl.inactivateVitalSign(voVitals,VSType.PULSE);
			}
			if(type.getId() == VSType.TEMP.getId())
			{
				if(!voVitals.contentEquals(VSTemperatureAssembler.create(doVitals.getTemperature())))
					impl.inactivateVitalSign(voVitals,VSType.TEMP);
			}
			if(type.getId() == VSType.RESPIRATION.getId())
			{
				if(!voVitals.contentEquals(VSRespirationsAssembler.create(doVitals.getRespiratory())))
					impl.inactivateVitalSign(voVitals,VSType.RESPIRATION);
			}
			if(type.getId() == VSType.OXYGEN.getId())
			{
				if(!voVitals.contentEquals(VSOxygenSaturationAssembler.create(doVitals.getOxygenSaturation())))
					impl.inactivateVitalSign(voVitals,VSType.OXYGEN);
			}
			if(type.getId() == VSType.VITALCAPACITY.getId())
			{
				if(!voVitals.contentEquals(VSLungFunctionTestVoAssembler.create(doVitals.getLungFunctionTest())))
					impl.inactivateVitalSign(voVitals,VSType.VITALCAPACITY);
			}
			if(type.getId() == VSType.METRICS.getId())
			{
				if(!voVitals.contentEquals(VSMetricsAssembler.create(doVitals.getMetrics())))
					impl.inactivateVitalSign(voVitals,VSType.METRICS);
			}
			if(type.getId() == VSType.GLASGOWCOMASCALE.getId())
			{
				if(!voVitals.contentEquals(VSGlasgowComaScaleAssembler.create(doVitals.getGlasgowComaScale())))
					impl.inactivateVitalSign(voVitals,VSType.GLASGOWCOMASCALE);
			}
		}
	}

	public AdmisExamGeneralVo getAdmisExamGeneral(ClinicalContactShortVo voClinicalContactShort)
	{
		DomainFactory factory = getDomainFactory();
		
		AdmisExamGeneralVo voAdmisGeneral = new AdmisExamGeneralVo(); 
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		if(voClinicalContactShort.getCareContextIsNotNull())
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :cc"); 
			markers.add("cc");
			values.add(voClinicalContactShort.getCareContext().getID_CareContext());
			andStr = " and ";
		}	
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Exam General");
		andStr = " and ";
			
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		voAdmisGeneral.setProblemsOnAdmission(collMedicalProbOnAdmis);
		
		VitalSignsVoCollection collVitalSigns = new VitalSignsVoCollection();
		hql = " from VitalSigns vitalSigns"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList<String>();
		values = new ArrayList<Object>();
		
		if(voClinicalContactShort.getID_ClinicalContactIsNotNull())
		{
			condStr.append(andStr + " vitalSigns.clinicalContact.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(voClinicalContactShort.getID_ClinicalContact());
			andStr = " and ";
		}	
	
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		collVitalSigns = VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns(factory.find(hql, markers, values));
		if(collVitalSigns.size()>0)
			voAdmisGeneral.setVitalssignsrecorded(collVitalSigns.get(0));
		
		MedExamGeneralVoCollection collMedExamGeneral = new MedExamGeneralVoCollection();
		hql = " from ExamGen examGen"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList<String>();
		values = new ArrayList<Object>();
	
		if(voClinicalContactShort.getID_ClinicalContactIsNotNull())
		{
			condStr.append(andStr + " examGen.clinicalContact.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(voClinicalContactShort.getID_ClinicalContact());
			andStr = " and ";
		}	
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		collMedExamGeneral = MedExamGeneralVoAssembler.createMedExamGeneralVoCollectionFromExamGen(factory.find(hql, markers, values));
		if(collMedExamGeneral.size()>0)
			voAdmisGeneral.setGenExaminationDet(collMedExamGeneral.get(0));
		
		return voAdmisGeneral;
	}



	public AdmisExamGeneralVo getAdmisExamGeneralByCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();
		
		AdmisExamGeneralVo voAdmisGeneral = new AdmisExamGeneralVo(); 
		
		String hql = " from PatientProblem prob "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		if(voCareContextRef != null)
		{
			condStr.append(andStr + " prob.careContext.id = :cc"); 
			markers.add("cc");
			values.add(voCareContextRef.getID_CareContext());
			andStr = " and ";
		}	
		
		condStr.append(andStr + " prob.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Exam General");
		andStr = " and ";
			
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		voAdmisGeneral.setProblemsOnAdmission(collMedicalProbOnAdmis);
		
		VitalSignsVoCollection collVitalSigns = new VitalSignsVoCollection();
		hql = " from VitalSigns vitalSigns"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList<String>();
		values = new ArrayList<Object>();
		
		if(voCareContextRef != null)
		{
			condStr.append(andStr + " vitalSigns.careContext.id = :id_careContext"); 
			markers.add("id_careContext");
			values.add(voCareContextRef.getID_CareContext());
			andStr = " and ";
		}	
	
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		collVitalSigns = VitalSignsVoAssembler.createVitalSignsVoCollectionFromVitalSigns(factory.find(hql, markers, values));
		if(collVitalSigns.size()>0)
			voAdmisGeneral.setVitalssignsrecorded(collVitalSigns.get(0));
		
		MedExamGeneralVoCollection collMedExamGeneral = new MedExamGeneralVoCollection();
		hql = " from ExamGen examGen"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList<String>();
		values = new ArrayList<Object>();
	
		if(voCareContextRef != null)
		{
			condStr.append(andStr + " examGen.clinicalContact.careContext.id = :id_CareContext"); 
			markers.add("id_CareContext");
			values.add(voCareContextRef.getID_CareContext());
			andStr = " and ";
		}	
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		collMedExamGeneral = MedExamGeneralVoAssembler.createMedExamGeneralVoCollectionFromExamGen(factory.find(hql, markers, values));
		if(collMedExamGeneral.size()>0)
			voAdmisGeneral.setGenExaminationDet(collMedExamGeneral.get(0));
		
		return voAdmisGeneral;
	}

	public VSMetrics getMetricsFromPatient(PatientRefVo voPatientRef)
	{
		VitalSignsAll metrics = (VitalSignsAll) getDomainImpl(VitalSignsImpl.class);
		return metrics.getMetricsFromPatient(voPatientRef);
	}
	
	private VSMetrics saveMetricsToPatient(VSMetrics voMetrics) throws StaleObjectException
	{
		VitalSignsAll metrics = (VitalSignsAll) getDomainImpl(VitalSignsImpl.class);
		return metrics.saveMetricsToPatient(voMetrics);
	}

}
