//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.22 build 41214.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.ClinicalContactRefVo;
import ims.core.clinical.domain.objects.PatientProblem;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.exceptions.CodingRuntimeException;
import ims.generalmedical.vo.InjuryDetailsVo;
import ims.generalmedical.vo.InjuryDetailsVoCollection;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.MedicalProbOnAdmisVoCollection;
import ims.generalmedical.vo.domain.MedicalProbOnAdmisVoAssembler;
import ims.generalmedical.vo.domain.InjuryDetailsVoAssembler;
import ims.core.vo.lookups.ContactType;
import ims.medical.domain.objects.InjuryDetails;

public class InjuryDetailsImpl extends DomainImpl implements ims.spinalinjuries.domain.MedInjuryDetails, ims.domain.impl.Transactional
{
	

	public HcpCollection listMedics(HcpFilter filter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listMedics(filter);
	}

	public InjuryDetailsVoCollection getInjuryDetailsByMedicalAdmissionClinicalContact(ClinicalContactRefVo voClinicalContactRef)
	{
		if(voClinicalContactRef == null)
			throw new CodingRuntimeException("Contact not Provided");
		
		DomainFactory factory = getDomainFactory();
		
		//the following query retrievs the one and only contact of type spinalmedicaladmission if it has been instantiated
		List injuries =   factory.find(" from InjuryDetails inj where inj.clinicalContact.id = " + 
				"( select cons.id from ClinicalContact con join con.careContext.clinicalContacts cons where cons.contactType = :type and con.id = :idClinContact )order by inj.systemInformation.creationDateTime desc ",
				new String[]{"type", "idClinContact" },
				new Object[]{ getDomLookup(ContactType.SPINALMEDICALADMISSION),voClinicalContactRef.getID_ClinicalContact()});  //wdev-13529

		InjuryDetailsVoCollection voCollInjuries = InjuryDetailsVoAssembler.createInjuryDetailsVoCollectionFromInjuryDetails(injuries);
		
		return voCollInjuries;
	}
	
	public InjuryDetailsVoCollection getInjuryDetailsByCareContext(CareContextRefVo voCareContextRef)
	{
		if(voCareContextRef == null)
			throw new CodingRuntimeException("Care Context not Provided");
		
		DomainFactory factory = getDomainFactory();
	
		List injuries =   factory.find(" from InjuryDetails inj where inj.clinicalContact.id = " + 
				"( select cons.id from CareContext con join con.clinicalContacts cons where cons.contactType = :type and con.id = :idcare) order by inj.systemInformation.creationDateTime desc ",
				new String[]{"type", "idcare" },
				new Object[]{ getDomLookup(ContactType.SPINALMEDICALADMISSION),voCareContextRef.getID_CareContext()});   //wdev-13529

		InjuryDetailsVoCollection voCollInjuries = InjuryDetailsVoAssembler.createInjuryDetailsVoCollectionFromInjuryDetails(injuries);
		
		return voCollInjuries;
	}

	/* (non-Javadoc)
	 * @see ims.spinalinjuries.domain.MedInjuryDetails#saveInjuryAndProblems(ims.generalmedical.vo.InjuryDetailsVo)
	 */
	public InjuryDetailsVo saveInjuryDetails(InjuryDetailsVo injuryDetails) throws StaleObjectException {
		//Ensure the value object has been validated
		if (!injuryDetails.isValidated())
			throw new DomainRuntimeException("Admission Injury Details has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		InjuryDetails doInjuryDetails = InjuryDetailsVoAssembler.extractInjuryDetails(factory, injuryDetails);
		
		factory.save(doInjuryDetails);
		
		return InjuryDetailsVoAssembler.create(doInjuryDetails);
	}

	/* (non-Javadoc)
	 * @see ims.spinalinjuries.domain.MedInjuryDetails#getProblems(ims.core.vo.ClinicalContactShortVo)
	 */
	public MedicalProbOnAdmisVoCollection  getProblems(CareContextShortVo careContext) {
		DomainFactory factory = getDomainFactory();
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(careContext.getID_CareContextIsNotNull())
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :id_CareContext"); 
			markers.add("id_CareContext");
			values.add(careContext.getID_CareContext());
			andStr = " and ";
		}	
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Event Injury Details");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		return MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
	}

	/* (non-Javadoc)
	 * @see ims.spinalinjuries.domain.MedInjuryDetails#saveProblemsOnAdmis(ims.generalmedical.vo.MedicalProbOnAdmisVo)
	 */
	public MedicalProbOnAdmisVoCollection saveProblemsOnAdmis(MedicalProbOnAdmisVoCollection collProblemsOnAdmis) throws StaleObjectException {
		//Ensure the value object has been validated
		if (!collProblemsOnAdmis.isValidated())
			throw new DomainRuntimeException("Problems on Admission has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = new MedicalProbOnAdmisVoCollection(); 
		
		for(int i=0; i<collProblemsOnAdmis.size(); i++){
			PatientProblem doMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.extractPatientProblem(factory, collProblemsOnAdmis.get(i));
		
			factory.save(doMedicalProbOnAdmis);
		
			collMedicalProbOnAdmis.add(MedicalProbOnAdmisVoAssembler.create(doMedicalProbOnAdmis));
		}
		
		return collMedicalProbOnAdmis;
	}
	//wdev-13529
	public MedicalProbOnAdmisVoCollection saveProblemOnAdmisAsRie(MedicalProbOnAdmisVoCollection problemColl)throws StaleObjectException 
	{
		if(problemColl == null)
			return null;
		DomainFactory factory = getDomainFactory();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = new MedicalProbOnAdmisVoCollection();
		if(problemColl != null)
			for(int i=0; i<problemColl.size(); i++)
			{
				MedicalProbOnAdmisVo voMedicalProbOnAdmis = problemColl.get(i);
				PatientProblem doMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.extractPatientProblem(factory, voMedicalProbOnAdmis);
				doMedicalProbOnAdmis.setIsRIE(Boolean.TRUE);
				
				factory.save(doMedicalProbOnAdmis);
				collMedicalProbOnAdmis.add(MedicalProbOnAdmisVoAssembler.create(doMedicalProbOnAdmis));
								
				
			}
		return collMedicalProbOnAdmis;
	}

	//wdev-13529
	public MedicalProbOnAdmisVoCollection getRIEProblems(CareContextShortVo careContext) 
	{
		DomainFactory factory = getDomainFactory();
		MedicalProbOnAdmisVoCollection tempProbColl = new MedicalProbOnAdmisVoCollection();
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(careContext.getID_CareContextIsNotNull())
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :id_CareContext"); 
			markers.add("id_CareContext");
			values.add(careContext.getID_CareContext());
			andStr = " and ";
		}	
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Event Injury Details");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		List list = factory.find(hql, markers, values);
		if(list != null && list.size() > 0)
		{
			for(int i = 0;i < list.size();i++)
			{
				PatientProblem domObjTemp = (PatientProblem) list.get(i);
				MedicalProbOnAdmisVo medProbVO = assembleMedicalProbOnAdm(domObjTemp);
				if(medProbVO != null && Boolean.TRUE.equals(medProbVO.getIsRIE()))
					tempProbColl.add(medProbVO);
							
			}
			return tempProbColl;
		}
		return null;
	}
	//wdev-13529
	private MedicalProbOnAdmisVo assembleMedicalProbOnAdm(PatientProblem domObj)
	{
		if(domObj == null)
			return null;
		MedicalProbOnAdmisVo medProbVo = new MedicalProbOnAdmisVo(domObj.getId(),domObj.getVersion());
		medProbVo.setIsRIE(domObj.getIsRIE());
		medProbVo.setCareContext(domObj.getCareContext() != null ? new CareContextRefVo(domObj.getCareContext().getId(), domObj.getCareContext().getVersion()) : null);
		medProbVo.setClinicalContact(domObj.getClinicalContact() != null ? new ClinicalContactShortVo(domObj.getClinicalContact().getId(), domObj.getClinicalContact().getVersion()) : null);
		medProbVo.setIsActive(domObj.isIsActive());
		medProbVo.setPatientProblem(domObj.getPatientProblem());
		medProbVo.setProblemContext(domObj.getProblemContext());
		
		return medProbVo;
		
		
	}
}
