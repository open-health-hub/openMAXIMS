//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 41222.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.generalmedical.vo.AdmisSysRevewVo;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.MedicalProbOnAdmisVoCollection;
import ims.generalmedical.vo.SystemReviewVo;
import ims.generalmedical.vo.SystemReviewVoCollection;
import ims.generalmedical.vo.domain.MedicalProbOnAdmisVoAssembler;
import ims.generalmedical.vo.domain.SystemReviewVoAssembler;
import ims.medical.domain.objects.SysRev;
import ims.core.admin.domain.objects.ClinicalContact;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.PatientProblem;
import ims.core.vo.ClinicalContactShortVo;

public class MedSystemreviewImpl extends DomainImpl implements ims.spinalinjuries.domain.MedSystemreview, ims.domain.impl.Transactional
{
	public AdmisSysRevewVo getAdmisSystemReviewByClinicalContact(ClinicalContactShortVo voClinicalContactShort)
	{
		DomainFactory factory = getDomainFactory();
		
		AdmisSysRevewVo voAdmisReview = new AdmisSysRevewVo();
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if(voClinicalContactShort.getCareContextIsNotNull())
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :id_CareContext"); 
			markers.add("id_CareContext");
			values.add(voClinicalContactShort.getCareContext().getID_CareContext());
			andStr = " and ";
		}	
	
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("System Review");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		voAdmisReview.setProblemsOnAdmission(collMedicalProbOnAdmis);
		
		SystemReviewVoCollection collSystemReview = new SystemReviewVoCollection();
		hql = " from SysRev systemReview"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList();
		values = new ArrayList();
	
		if(voClinicalContactShort.getID_ClinicalContactIsNotNull())
		{
			condStr.append(andStr + " systemReview.clinicalContact.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(voClinicalContactShort.getID_ClinicalContact());
			andStr = " and ";
		}	
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		collSystemReview = SystemReviewVoAssembler.createSystemReviewVoCollectionFromSysRev(factory.find(hql, markers, values));
		if(collSystemReview.size()>0)
			voAdmisReview.setSystemReview(collSystemReview.get(0));
		
		return voAdmisReview;
	}

	public AdmisSysRevewVo saveAdmisSystemReview(AdmisSysRevewVo admisSysReview, ClinicalContactShortVo contact) throws StaleObjectException, UniqueKeyViolationException
	{
		if (!admisSysReview.isValidated())
			throw new DomainRuntimeException("System Review has not been validated");
		
		DomainFactory factory = getDomainFactory();
		
		ClinicalContact doClinicalContact = (ClinicalContact)factory.getDomainObject(ClinicalContact.class, contact.getID_ClinicalContact());
		
		if(admisSysReview.getSystemReviewIsNotNull()){
			
			if (admisSysReview.getSystemReview().getID_SysRev() == null)//Inserting a record
			{
				SystemReviewVo  voSR = getSystemReviewByClinicalContact(admisSysReview.getSystemReview().getClinicalContact());
				if(voSR != null)
					throw new UniqueKeyViolationException("A record exists for this clinical contact, the screen will be refreshed");
			}
			
			SysRev doSysReview = SystemReviewVoAssembler.extractSysRev(factory, admisSysReview.getSystemReview());
			if(doSysReview.getClinicalContact()==null)
				doSysReview.setClinicalContact(doClinicalContact);
			
			factory.save(doSysReview);
						
			admisSysReview.setSystemReview(SystemReviewVoAssembler.create(doSysReview));
		}
		
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = new MedicalProbOnAdmisVoCollection(); 
		
		if(admisSysReview.getProblemsOnAdmissionIsNotNull())
			for(int i=0; i<admisSysReview.getProblemsOnAdmission().size(); i++){
				MedicalProbOnAdmisVo voMedicalProbOnAdmis = admisSysReview.getProblemsOnAdmission().get(i);
				PatientProblem doMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.extractPatientProblem(factory, voMedicalProbOnAdmis);
				doMedicalProbOnAdmis.setCareContext(doClinicalContact.getCareContext());
				
				factory.save(doMedicalProbOnAdmis);
								
				collMedicalProbOnAdmis.add(MedicalProbOnAdmisVoAssembler.create(doMedicalProbOnAdmis));
			}
				
		return admisSysReview;
	}

	private SystemReviewVo getSystemReviewByClinicalContact(ClinicalContactShortVo clinicalContact) {
		
		DomainFactory factory = getDomainFactory();
		
		AdmisSysRevewVo voAdmisReview = new AdmisSysRevewVo();
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		SystemReviewVoCollection collSystemReview = new SystemReviewVoCollection();
		hql = " from SysRev systemReview"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList();
		values = new ArrayList();
	
		if(clinicalContact.getID_ClinicalContactIsNotNull())
		{
			condStr.append(andStr + " systemReview.clinicalContact.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(clinicalContact.getID_ClinicalContact());
			andStr = " and ";
		}	
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		collSystemReview = SystemReviewVoAssembler.createSystemReviewVoCollectionFromSysRev(factory.find(hql, markers, values));
		if(collSystemReview.size()>0)
			return collSystemReview.get(0);
		
		return null;
	}

	public AdmisSysRevewVo getAdmisSystemReviewByCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();
		
		AdmisSysRevewVo voAdmisReview = new AdmisSysRevewVo();
		
		String hql = " from PatientProblem patProb "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if(voCareContextRef != null)
		{
			condStr.append(andStr + " patProb.careContext.id = :id_CareContext"); 
			markers.add("id_CareContext");
			values.add(voCareContextRef.getID_CareContext());
			andStr = " and ";
		}	
	
		condStr.append(andStr + " patProb.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("System Review");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		voAdmisReview.setProblemsOnAdmission(collMedicalProbOnAdmis);
		
		SystemReviewVoCollection collSystemReview = new SystemReviewVoCollection();
		hql = " from SysRev systemReview"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList();
		values = new ArrayList();
	
		if(voCareContextRef != null)
		{
			condStr.append(andStr + " systemReview.clinicalContact.careContext.id = :id_care"); 
			markers.add("id_care");
			values.add(voCareContextRef.getID_CareContext());
			andStr = " and ";
		}	
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		collSystemReview = SystemReviewVoAssembler.createSystemReviewVoCollectionFromSysRev(factory.find(hql, markers, values));
		if(collSystemReview.size()>0)
			voAdmisReview.setSystemReview(collSystemReview.get(0));
		
		return voAdmisReview;
	}

	//wdev-13417
	public MedicalProbOnAdmisVoCollection getPatientProblemByClinicalContact(ClinicalContactShortVo voClinicalContactShort) 
	{
		DomainFactory factory = getDomainFactory();
		
		AdmisSysRevewVo voAdmisReview = new AdmisSysRevewVo();
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if(voClinicalContactShort.getCareContextIsNotNull())
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :id_CareContext"); 
			markers.add("id_CareContext");
			values.add(voClinicalContactShort.getCareContext().getID_CareContext());
			andStr = " and ";
		}	
	
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("System Review");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		return collMedicalProbOnAdmis;

	}

	//wdev-13417
	public MedicalProbOnAdmisVoCollection getPatientProblemByCareContext(CareContextRefVo voCareContextRef) 
	{
		DomainFactory factory = getDomainFactory();
		
		AdmisSysRevewVo voAdmisReview = new AdmisSysRevewVo();
		
		String hql = " from PatientProblem patProb "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if(voCareContextRef != null)
		{
			condStr.append(andStr + " patProb.careContext.id = :id_CareContext"); 
			markers.add("id_CareContext");
			values.add(voCareContextRef.getID_CareContext());
			andStr = " and ";
		}	
	
		condStr.append(andStr + " patProb.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("System Review");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		return collMedicalProbOnAdmis;

	}

	//wdev-13417
	public SystemReviewVoCollection getAdmisSystemReviewCollByCareContext(CareContextRefVo voCareContextRef) 
	{
		DomainFactory factory = getDomainFactory();
		String hql; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		SystemReviewVoCollection collSystemReview = new SystemReviewVoCollection();
		hql = " from SysRev systemReview"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList();
		values = new ArrayList();
	
		if(voCareContextRef != null)
		{
			condStr.append(andStr + " systemReview.clinicalContact.careContext.id = :id_care"); 
			markers.add("id_care");
			values.add(voCareContextRef.getID_CareContext());
			andStr = " and ";
		}	
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		hql += " order by systemReview.systemInformation.creationDateTime desc";
		collSystemReview = SystemReviewVoAssembler.createSystemReviewVoCollectionFromSysRev(factory.find(hql, markers, values));
		
		return collSystemReview;
	}

	//wdev-13417
	public SystemReviewVoCollection getAdmisSystemReviewCollByClinicalContact(ClinicalContactShortVo voClinicalContactShort) 
	{
		DomainFactory factory = getDomainFactory();
				
		String hql; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		SystemReviewVoCollection collSystemReview = new SystemReviewVoCollection();
		hql = " from SysRev systemReview"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList();
		values = new ArrayList();
	
		if(voClinicalContactShort.getID_ClinicalContactIsNotNull())
		{
			condStr.append(andStr + " systemReview.clinicalContact.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(voClinicalContactShort.getID_ClinicalContact());
			andStr = " and ";
		}	
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		hql += " order by systemReview.systemInformation.creationDateTime desc";
		collSystemReview = SystemReviewVoAssembler.createSystemReviewVoCollectionFromSysRev(factory.find(hql, markers, values));
		
		
		return collSystemReview;

	}

	//wdev-13512
	public void saveProblemsAdmis(MedicalProbOnAdmisVoCollection problemColl)throws StaleObjectException, UniqueKeyViolationException 
	{

		if(problemColl == null)
			return;
		DomainFactory factory = getDomainFactory();
		if(problemColl != null)
			for(int i=0; i<problemColl.size(); i++)
			{
				MedicalProbOnAdmisVo voMedicalProbOnAdmis = problemColl.get(i);
				PatientProblem doMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.extractPatientProblem(factory, voMedicalProbOnAdmis);
				doMedicalProbOnAdmis.setIsRIE(Boolean.TRUE);  //wdev-13525
				
				factory.save(doMedicalProbOnAdmis);
								
				
			}
		
	}

	//wdev-13525
	public MedicalProbOnAdmisVoCollection getRiePatientProblemBYCareConntext(CareContextRefVo voCareContextRef) 
	{
		
		DomainFactory factory = getDomainFactory();
		
		
		MedicalProbOnAdmisVoCollection tempVoColl = new MedicalProbOnAdmisVoCollection(); 
		String hql = " from PatientProblem patProb "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if(voCareContextRef != null)
		{
			condStr.append(andStr + " patProb.careContext.id = :id_CareContext"); 
			markers.add("id_CareContext");
			values.add(voCareContextRef.getID_CareContext());
			andStr = " and ";
		}	
	
		condStr.append(andStr + " patProb.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("System Review");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		List list = factory.find(hql, markers, values);
		if(list != null && list.size() > 0)
		{
			for(int i = 0;i < list.size();i++)
			{
				PatientProblem domObjTemp = (PatientProblem) list.get(i);
				MedicalProbOnAdmisVo medProbVO = assembleMedicalProbOnAdm(domObjTemp);
				if(medProbVO != null && Boolean.TRUE.equals(medProbVO.getIsRIE()))
					tempVoColl.add(medProbVO);
							
			}
			return tempVoColl;
		}
		
		return null;

		

	}
	//wdev-13525
	private MedicalProbOnAdmisVo assembleMedicalProbOnAdm(PatientProblem domObj)
	{
		if(domObj == null)
			return null;
		MedicalProbOnAdmisVo medProbVo = new MedicalProbOnAdmisVo(domObj.getId(),domObj.getVersion());
		medProbVo.setIsRIE(domObj.getIsRIE());
		medProbVo.setCareContext(domObj.getCareContext() != null ? new CareContextRefVo(domObj.getCareContext().getId(), domObj.getCareContext().getVersion()) : null);
		medProbVo.setClinicalContact(domObj.getClinicalContact() != null ? new ClinicalContactShortVo(domObj.getClinicalContact().getId(), domObj.getClinicalContact().getVersion()) : null);
		medProbVo.setIsActive(domObj.isIsActive());
		medProbVo.setPatientProblem(domObj.getPatientProblem());
		medProbVo.setProblemContext(domObj.getProblemContext());
		
		return medProbVo;
		
		
	}

	//wdev-13525
	public MedicalProbOnAdmisVoCollection getRiePatientProblemByClinicalContact( ClinicalContactShortVo voClinicalCOntactShort)
	{
		DomainFactory factory = getDomainFactory();
		
		MedicalProbOnAdmisVoCollection tempVoColl = new MedicalProbOnAdmisVoCollection();
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if(voClinicalCOntactShort.getCareContextIsNotNull())
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :id_CareContext"); 
			markers.add("id_CareContext");
			values.add(voClinicalCOntactShort.getCareContext().getID_CareContext());
			andStr = " and ";
		}	
	
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("System Review");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		List list = factory.find(hql, markers, values);
		if(list != null && list.size() > 0)
		{
			for(int i = 0;i < list.size();i++)
			{
				PatientProblem domObjTemp = (PatientProblem) list.get(i);
				MedicalProbOnAdmisVo medProbVO = assembleMedicalProbOnAdm(domObjTemp);
				if(medProbVO != null && Boolean.TRUE.equals(medProbVO.getIsRIE()))
					tempVoColl.add(medProbVO);
							
			}
			return tempVoColl;
		}
		
		return null;
	}

	
	

}
