//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.22 build 50204.1245)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.generalmedical.vo.OPDVisitDetailsVo;
import ims.generalmedical.vo.OPDVisitDetailsVoCollection;
import ims.generalmedical.vo.domain.OPDVisitDetailsVoAssembler;
import ims.medical.domain.objects.OPDVisitDetails;


public class OPDVisitDetailsImpl extends DomainImpl implements ims.spinalinjuries.domain.OPDVisitDetails, ims.domain.impl.Transactional
{
/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public HcpLiteVoCollection listHcpLiteByName(String hcpName)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(hcpName);

	}
	public OPDVisitDetailsVo saveOPDVisitDetails(OPDVisitDetailsVo voOPDVisitDetails) throws StaleObjectException, UniqueKeyViolationException
	{
		// Ensure the value object has been validated
		if (!voOPDVisitDetails.isValidated())
			throw new DomainRuntimeException("Sleep has not been validated");
		
		DomainFactory factory = getDomainFactory();
		if (voOPDVisitDetails.getID_OPDVisitDetails() == null)//Inserting a record
		{
			StringBuffer hql = new StringBuffer();
			hql.append("from OPDVisitDetails as o where o.careContext.id = :CCID and o.isRIE is null");
			java.util.List list = getDomainFactory().find(hql.toString(), "CCID",voOPDVisitDetails.getCareContext().getID_CareContext());
			if (list == null || list.size() > 0)
				throw new UniqueKeyViolationException("A record exists for this Care Context, the screen will be refreshed");
		}
		OPDVisitDetails domVisitDetails = OPDVisitDetailsVoAssembler.extractOPDVisitDetails(factory, voOPDVisitDetails);
		factory.save(domVisitDetails);
		
		OPDVisitDetailsVo voOPDVisitDetailsReturn = OPDVisitDetailsVoAssembler.create(domVisitDetails);
		return voOPDVisitDetailsReturn;
	}

	public OPDVisitDetailsVo getOPDVisitDetails(ClinicalContactShortVo voClinicalContact)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = " from OPDVisitDetails visdet ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (voClinicalContact != null)
		{
			hql.append(andStr + " visdet.clinicalContact.id = :cc ");
			markers.add("cc");
			values.add(voClinicalContact.getID_ClinicalContact());
			andStr = " and ";
		}

		if (markers.size() > 0) query += " where ";
		query += hql.toString();
		List adviceList = factory.find(query, markers, values);							
		
		OPDVisitDetailsVoCollection voCollInvPlan = OPDVisitDetailsVoAssembler.createOPDVisitDetailsVoCollectionFromOPDVisitDetails(adviceList);
		if (voCollInvPlan.size() > 0)
			return voCollInvPlan.get(0);
		else
			return null;
	}

	public OPDVisitDetailsVo getOPDVisitDetailsByCareContext(CareContextLiteVo voCareContext)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = " from OPDVisitDetails visdet ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (voCareContext != null)
		{
			hql.append(andStr + " visdet.careContext.id = :cc ");
			markers.add("cc");
			values.add(voCareContext.getID_CareContext());
			andStr = " and ";
		}

		if (markers.size() > 0) query += " where ";
		query += hql.toString();
		List adviceList = factory.find(query, markers, values);							
		
		OPDVisitDetailsVoCollection voCollInvPlan = OPDVisitDetailsVoAssembler.createOPDVisitDetailsVoCollectionFromOPDVisitDetails(adviceList);
		if (voCollInvPlan.size() > 0)
			return voCollInvPlan.get(0);
		else
			return null;
	}
	public HcpLiteVoCollection listHcpLite() {
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName("%");
	}
}
