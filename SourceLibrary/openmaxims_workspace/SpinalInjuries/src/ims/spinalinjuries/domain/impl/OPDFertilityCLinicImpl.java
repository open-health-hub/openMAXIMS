//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.22 build 50127.1530)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.domain.objects.SocialHistory;
import ims.core.domain.impl.SocialHistoryImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.SocialHistoryVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.SocialHistoryVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.generalmedical.vo.OPDFertClinicVo;
import ims.generalmedical.vo.OPDFertClinicVoCollection;
import ims.generalmedical.vo.domain.OPDFertClinicVoAssembler;
import ims.medical.domain.objects.OPDFertClinic;
import ims.spinalinjuries.domain.OPDEDClinicNotes;
public class OPDFertilityCLinicImpl extends DomainImpl implements ims.spinalinjuries.domain.OPDFertilityCLinic, ims.domain.impl.Transactional
{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public void saveOPDFertClinicVo(OPDFertClinicVo voOPDFertClinic) throws StaleObjectException, UniqueKeyViolationException 
	{
		// Ensure the value object has been validated
		if (!voOPDFertClinic.isValidated())
			throw new DomainRuntimeException("OPD Fertility Clinic has not been validated");
		
		DomainFactory factory = getDomainFactory();
		if (voOPDFertClinic.getID_OPDFertClinic() == null)//Inserting a record
		{
			StringBuffer hql = new StringBuffer();
			hql.append("from OPDFertClinic as o where o.careContext.id = :CCID and o.isRIE is null");
			java.util.List list = getDomainFactory().find(hql.toString(), "CCID",voOPDFertClinic.getCareContext().getID_CareContext());
			if (list == null || list.size() > 0)
				throw new UniqueKeyViolationException("A record exists for this Care Context, the screen will be refreshed");
		}
		OPDFertClinic doOPDFertClinic = OPDFertClinicVoAssembler.extractOPDFertClinic(factory, voOPDFertClinic);
		factory.save(doOPDFertClinic);
		
	}

	public SocialHistoryVo getMedSocialHistory(ClinicalContactShortVo voClinicalContactShort)
	{
		OPDEDClinicNotes impl = (OPDEDClinicNotes) getDomainImpl(OPDEDClinicNotesImpl.class);
		return impl.getMedSocialHistory(voClinicalContactShort);
	}

	public void saveMedSocialHistory(SocialHistoryVo voSocialHistory) throws StaleObjectException 
	{
		// Ensure the value object has been validated
		if (!voSocialHistory.isValidated())
			throw new DomainRuntimeException("Social History has not been validated");
		
		DomainFactory factory = getDomainFactory();
		SocialHistory doSocHist = SocialHistoryVoAssembler.extractSocialHistory(factory, voSocialHistory);
		
		factory.save(doSocHist);
				
		return;
	}

	public SocialHistoryVo getMedSocialHistoryByCareContext(CareContextLiteVo voCareContext)
	{
		OPDEDClinicNotes impl = (OPDEDClinicNotes) getDomainImpl(OPDEDClinicNotesImpl.class);   
		return impl.getMedSocialHistoryByCareContext(voCareContext);
	}

	public OPDFertClinicVoCollection listByCareContext(CareContextLiteVo voCareContext)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = " from OPDFertClinic oPDFertClinic ";
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if(voCareContext.getEpisodeOfCareIsNotNull())
		{
			hql.append(andStr + " oPDFertClinic.careContext.id = :ec");
			markers.add("ec");
			values.add(voCareContext.getID_CareContext());
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();	
		
		java.util.List edList = factory.find(query,markers,values);
		OPDFertClinicVoCollection voOPDFertClinicVoColl = OPDFertClinicVoAssembler.createOPDFertClinicVoCollectionFromOPDFertClinic(edList);
		
		if(voOPDFertClinicVoColl.size()>0)
			return voOPDFertClinicVoColl;
		else
			return null;	
		}

	public OPDFertClinicVo getOPDFertClinicVo(ClinicalContactShortVo voClinicalContact)
	{
		OPDFertClinicVoCollection voCollOPDFertClinic = new OPDFertClinicVoCollection();
		
		DomainFactory factory = getDomainFactory();
		
		String hql = " from OPDFertClinic oPDFertClinic "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		if(voClinicalContact.getID_ClinicalContact()!= null)
		{
			condStr.append(andStr + " oPDFertClinic.clinicalContact.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(voClinicalContact.getID_ClinicalContact());
			andStr = " and ";
		}	
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		voCollOPDFertClinic = OPDFertClinicVoAssembler.createOPDFertClinicVoCollectionFromOPDFertClinic(factory.find(hql, markers, values));
		if(voCollOPDFertClinic.size()>0)
			return voCollOPDFertClinic.get(0);
		else return null;		
	}
	
	public CareContextShortVoCollection listFertilityCareContextsByEpisode(EpisodeOfCareRefVo voRefEpisodeOfCare) 
	{
		DomainFactory factory = getDomainFactory();
		String hql= "select careContext from OPDFertClinic opd where opd.careContext.episodeOfCare.id = " + voRefEpisodeOfCare.getID_EpisodeOfCare();
		List lstCareContexts = factory.find(hql);		
		return CareContextShortVoAssembler.createCareContextShortVoCollectionFromCareContext(lstCareContexts);
	}

	public OPDFertClinicVoCollection getOPDFertClinicByCareContext(CareContextLiteVo voCareContext) 
	{
	    if (voCareContext == null)
			throw new RuntimeException("Cannot get OPDFertClinicVo for null CareContextLiteVo");

		StringBuffer hql = new StringBuffer("from OPDFertClinic as o1_1 where o1_1.careContext.id = :CCID");
		List list = getDomainFactory().find(hql.toString(), "CCID", voCareContext.getID_CareContext());
		
		OPDFertClinicVoCollection voList = OPDFertClinicVoAssembler.createOPDFertClinicVoCollectionFromOPDFertClinic(list);;
		return voList;
	}

	public HcpCollection listMedics(HcpFilter voHcpFilter) 
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listMedics(voHcpFilter);
	}

	public SocialHistoryVo getSocialHistoryByPatient(PatientRefVo patient) 
	{
		ims.core.domain.SocialHistory social = (ims.core.domain.SocialHistory)getDomainImpl(SocialHistoryImpl.class);
		return social.getSocialHistoryByPatient(patient);
	}
}
