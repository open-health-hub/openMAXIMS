//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.22 build 50106.1615)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import java.util.ArrayList;
import java.util.List;
import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.lookups.ContactType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.impl.DomainImpl;
import ims.framework.enumerations.SortOrder;
import ims.generalmedical.vo.MedicalProbOnAdmisVoCollection;
import ims.generalmedical.vo.NeuroReflexesExaminationVo;
import ims.generalmedical.vo.NeuroReflexesShortVo;
import ims.generalmedical.vo.NeuroReflexesShortVoCollection;
import ims.generalmedical.vo.NeuroReflexesVo;
import ims.generalmedical.vo.NeuroReflexesVoCollection;
import ims.generalmedical.vo.domain.MedicalProbOnAdmisVoAssembler;
import ims.generalmedical.vo.domain.NeuroReflexesShortVoAssembler;
import ims.generalmedical.vo.domain.NeuroReflexesVoAssembler;
import ims.medical.domain.objects.NeuExamReflxs;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.domain.objects.PatientProblem;
public class MedNeuroReflexesImpl extends DomainImpl implements ims.spinalinjuries.domain.MedNeuroReflexes, ims.domain.impl.Transactional
{
	public NeuroReflexesExaminationVo saveNeuroReflexRecord(NeuroReflexesExaminationVo exam) throws StaleObjectException, UniqueKeyViolationException
	{	
		if (!exam.isValidated())
			throw new DomainRuntimeException("Reflex Record has not been validated");
	
		NeuroReflexesExaminationVo voNeuroReflexesExamination = new NeuroReflexesExaminationVo();
		DomainFactory factory = getDomainFactory();
		
		if(exam.getNeuroRefIsNotNull())
		{
			if (exam.getNeuroRef().getID_NeuExamReflxs() == null && exam.getNeuroRef().getClinicalContactIsNotNull())//Inserting a record
			{
				StringBuffer hql = new StringBuffer();
				hql.append("from NeuExamReflxs as ner where ner.clinicalContact.id = :CCID and ner.isRIE is null");
				java.util.List list = getDomainFactory().find(hql.toString(), "CCID",exam.getNeuroRef().getClinicalContact().getID_ClinicalContact());
				if (list == null || list.size() > 0)
					throw new UniqueKeyViolationException(" The screen will be refreshed");
			}
			
			NeuExamReflxs doNeuroReflexes = NeuroReflexesVoAssembler.extractNeuExamReflxs(factory, exam.getNeuroRef());
			
			factory.save(doNeuroReflexes);
			
			voNeuroReflexesExamination.setNeuroRef(NeuroReflexesVoAssembler.create(doNeuroReflexes));
		}

		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = new MedicalProbOnAdmisVoCollection(); 
		
		if(exam.getProblemsOnAdmissionIsNotNull())
			for(int i=0; i<exam.getProblemsOnAdmission().size(); i++)
			{
				PatientProblem doMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.extractPatientProblem(factory, exam.getProblemsOnAdmission().get(i));
				
				factory.save(doMedicalProbOnAdmis);
				
				collMedicalProbOnAdmis.add(MedicalProbOnAdmisVoAssembler.create(doMedicalProbOnAdmis));
			}
		
		voNeuroReflexesExamination.setProblemsOnAdmission(collMedicalProbOnAdmis);
					
		return voNeuroReflexesExamination;
	}

	public NeuroReflexesShortVoCollection listByCareContext(CareContextLiteVo voCareContext)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer();
		String query = "from NeuExamReflxs ner ";
		ArrayList markers= new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if(voCareContext != null)
		{
			hql.append(andStr + " ner.careContext.id = :cc");
			markers.add("cc");
			values.add(voCareContext.getID_CareContext());
			andStr = " and ";
		}
		
		if (markers.size() > 0) query += " where ";
		query += hql.toString();	
		
		List neuros = factory.find(query,markers,values);
		NeuroReflexesShortVoCollection voNeuroReflexesShortColl = NeuroReflexesShortVoAssembler.createNeuroReflexesShortVoCollectionFromNeuExamReflxs(neuros);
		if(voNeuroReflexesShortColl != null)
			return voNeuroReflexesShortColl.sort(SortOrder.DESCENDING);
		else	
			return null;
	}
	public HcpLiteVoCollection listHcpLiteByName(String hcpName)
	{
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHcpLiteByName(hcpName);

	}
	public NeuroReflexesExaminationVo getNeuroReflexRecord(ClinicalContactShortVo voClinicalContact, NeuroReflexesShortVo voNeuroReflexesShort)
	{
		DomainFactory factory = getDomainFactory();
		
		NeuroReflexesExaminationVo voReflexExam = new NeuroReflexesExaminationVo(); 
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if(voClinicalContact != null)
		{
			condStr.append(andStr + " medicalProbOnAdmis.clinicalContact.id = :id_ClinicalContact"); 
			markers.add("id_ClinicalContact");
			values.add(voClinicalContact.getID_ClinicalContact());
			andStr = " and ";
		}	
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Neuro - Reflexes");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		voReflexExam.setProblemsOnAdmission(collMedicalProbOnAdmis);
		
		if (voNeuroReflexesShort != null)
		{
			voReflexExam.setNeuroRef(get(voNeuroReflexesShort));
			return voReflexExam;
		}
		else
		{
			NeuroReflexesVoCollection collNeuroReflexes = new NeuroReflexesVoCollection();
			hql = " from NeuExamReflxs neuExamReflxs"; 
			condStr = new StringBuffer();
			andStr = " ";
		
			markers = new ArrayList();
			values = new ArrayList();
		
			if(voClinicalContact.getID_ClinicalContactIsNotNull())
			{
				condStr.append(andStr + " neuExamReflxs.clinicalContact.id = :id_ClinicalContact"); 
				markers.add("id_ClinicalContact");
				values.add(voClinicalContact.getID_ClinicalContact());
				andStr = " and ";
			}	
			
			if (andStr.equals(" and "))
				hql += " where ";
		
			hql += condStr.toString();
			collNeuroReflexes = NeuroReflexesVoAssembler.createNeuroReflexesVoCollectionFromNeuExamReflxs(factory.find(hql, markers, values));
			if(collNeuroReflexes.size()>0)
			{
				collNeuroReflexes.sort(SortOrder.DESCENDING);
				voReflexExam.setNeuroRef(collNeuroReflexes.get(0));
			}
		}
		
		return voReflexExam;
	}
	private NeuroReflexesVo get(NeuroReflexesShortVo voNeuroReflexesShort)
	{
		if(voNeuroReflexesShort == null)
			throw new DomainRuntimeException("Invalid need neuro - reflex record to get");

		return NeuroReflexesVoAssembler.create((NeuExamReflxs) getDomainFactory().getDomainObject(NeuExamReflxs.class,voNeuroReflexesShort.getID_NeuExamReflxs()));
	
	}

	/*public NeuroReflexesExaminationVo getByCareContext(CareContextLiteVo voCareContext)
	{
		DomainFactory factory = getDomainFactory();
		
		NeuroReflexesExaminationVo voReflexExam = new NeuroReflexesExaminationVo(); 
		
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		if(voCareContext != null)
		{
			condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :cc"); 
			markers.add("cc");
			values.add(voCareContext.getID_CareContext());
			andStr = " and ";
		}	
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Neuro - Reflexes");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		voReflexExam.setProblemsOnAdmission(collMedicalProbOnAdmis);
		
		NeuroReflexesVoCollection collNeuroReflexes = new NeuroReflexesVoCollection();
		hql = " from NeuExamReflxs neuExamReflxs"; 
		condStr = new StringBuffer();
		andStr = " ";
	
		markers = new ArrayList();
		values = new ArrayList();
	
		if(voCareContext.getID_CareContextIsNotNull())
		{
			condStr.append(andStr + " neuExamReflxs.careContext.id = :carec"); 
			markers.add("carec");
			values.add(voCareContext.getID_CareContext());
			andStr = " and ";
		}	
		
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		collNeuroReflexes = NeuroReflexesVoAssembler.createNeuroReflexesVoCollectionFromNeuExamReflxs(factory.find(hql, markers, values));
		if(collNeuroReflexes.size()>0)
			voReflexExam.setNeuroRef(collNeuroReflexes.get(0));
		
		return voReflexExam;
	}*/

	public NeuroReflexesExaminationVo getNeuroReflexByCareContext(CareContextRefVo voCareContext, NeuroReflexesShortVo voNeuroReflexesShort)
	{
		DomainFactory factory = getDomainFactory();
		
		NeuroReflexesExaminationVo voReflexExam = new NeuroReflexesExaminationVo();
	
		if (voNeuroReflexesShort != null)
		{
			voReflexExam.setNeuroRef(get(voNeuroReflexesShort));
			return voReflexExam;
		}
		else
		{
			NeuroReflexesVoCollection collNeuroReflexes = new NeuroReflexesVoCollection();
			String hql = " from NeuExamReflxs neuExamReflxs"; 
			StringBuffer condStr = new StringBuffer();
			String andStr = " ";
		
			ArrayList markers = new ArrayList();
			ArrayList values = new ArrayList();
		
			if(voCareContext.getID_CareContextIsNotNull())
			{
				condStr.append(andStr + " neuExamReflxs.careContext.id = :id"); 
				markers.add("id");
				values.add(voCareContext.getID_CareContext());
				andStr = " and ";
			}	
			
			condStr.append(andStr + " neuExamReflxs.clinicalContact.id is null"); 
			
			if (andStr.equals(" and "))
				hql += " where ";
		
			hql += condStr.toString();
			collNeuroReflexes = NeuroReflexesVoAssembler.createNeuroReflexesVoCollectionFromNeuExamReflxs(factory.find(hql, markers, values));
			if(collNeuroReflexes.size()>0)
			{
				collNeuroReflexes.sort(SortOrder.DESCENDING);
				voReflexExam.setNeuroRef(collNeuroReflexes.get(0));
			}
		}
		
		if(voCareContext != null)
			voReflexExam.setProblemsOnAdmission(getProblemByCareContext(voCareContext.getID_CareContext()));
			
		return voReflexExam;
	}

	private MedicalProbOnAdmisVoCollection getProblemByCareContext(Integer careContextID)
	{
		DomainFactory factory = getDomainFactory();
		String hql = " from PatientProblem medicalProbOnAdmis "; 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		
		condStr.append(andStr + " medicalProbOnAdmis.careContext.id = :id"); 
		markers.add("id");
		values.add(careContextID);
		andStr = " and ";
		
		condStr.append(andStr + " medicalProbOnAdmis.problemContext = :problemContext"); 
		markers.add("problemContext");
		values.add("Neuro - Reflexes");
		andStr = " and ";
		
		if (andStr.equals(" and "))
			hql += " where ";
	
		hql += condStr.toString();
		MedicalProbOnAdmisVoCollection collMedicalProbOnAdmis = MedicalProbOnAdmisVoAssembler.createMedicalProbOnAdmisVoCollectionFromPatientProblem(factory.find(hql, markers, values));
		return collMedicalProbOnAdmis;
	}

	public NeuroReflexesExaminationVo getSpinalMedicalAdmissionReflexesByCareContext(CareContextRefVo voCareContextRef)
	{
		DomainFactory factory = getDomainFactory();

		NeuroReflexesExaminationVo voNeuroReflexesExamination = new NeuroReflexesExaminationVo();
		
		List reflexes =   factory.find(" from NeuExamReflxs reflex where reflex.clinicalContact.id = " + 
				"( select cons.id from CareContext con join con.clinicalContacts cons where cons.contactType = :type and con.id = :idcare)",
				new String[]{"type", "idcare" },
				new Object[]{ getDomLookup(ContactType.SPINALMEDICALADMISSION),voCareContextRef.getID_CareContext()});
		
		NeuroReflexesVoCollection voNeuroReflexesColl = NeuroReflexesVoAssembler.createNeuroReflexesVoCollectionFromNeuExamReflxs(reflexes);
		if(voNeuroReflexesColl != null && voNeuroReflexesColl.size()>0)
			voNeuroReflexesExamination.setNeuroRef(voNeuroReflexesColl.get(0));
		
		if(voCareContextRef != null)
			voNeuroReflexesExamination.setProblemsOnAdmission(getProblemByCareContext(voCareContextRef.getID_CareContext()));
			
		return voNeuroReflexesExamination;
	}
}
