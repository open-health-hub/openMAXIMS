//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.42 build 2211.14872)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.assessment.configuration.domain.objects.UserDefinedObject;
import ims.assessment.vo.domain.UserDefinedObjectListVoAssembler;
import ims.clinical.domain.MDTNotes;
import ims.clinical.domain.impl.MDTNotesImpl;
import ims.clinical.domain.objects.NeedsAssessment;
import ims.clinical.vo.NeedsAssessmentRefVo;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.NeedsAssessmentEditVo;
import ims.core.vo.NeedsAssessmentListVoCollection;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.NeedsAssessmentEditVoAssembler;
import ims.core.vo.domain.NeedsAssessmentListVoAssembler;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserDefinedObjectType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.generalmedical.vo.AdmisSummary;
import ims.spinalinjuries.domain.base.impl.BaseNeedsAssessmentImpl;

import java.util.List;
public class NeedsAssessmentImpl extends BaseNeedsAssessmentImpl
{
	private static final long	serialVersionUID	= 1L;
	
	public ims.core.vo.NeedsAssessmentEditVo save(ims.core.vo.NeedsAssessmentEditVo record) throws StaleObjectException
	{
		if(record == null)
			throw new DomainRuntimeException("Invalid need assessment record to save");		
		if(!record.isValidated())
			throw new DomainRuntimeException("Needs assessment record not validated");
		
		DomainFactory factory = getDomainFactory();		
		NeedsAssessment domainRecord = NeedsAssessmentEditVoAssembler.extractNeedsAssessment(factory, record);
		factory.save(domainRecord);		 
		return NeedsAssessmentEditVoAssembler.create(domainRecord);		
	}

	public ims.assessment.vo.UserDefinedObjectListVo getCurrentUserDefinedForm()
	{		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer("select id from UserDefinedObject u ");
		hql.append(" where u.activeStatus = :status");
	    hql.append(" and u.objectType = :type");		
		
		List<?> results = factory.find(hql.toString(), new String[] {"status", "type"}, new Object[] { getDomLookup(PreActiveActiveInactiveStatus.ACTIVE), getDomLookup(UserDefinedObjectType.NEEDSASSESSMENT)});		
		if(results == null || results.size() != 1 || results.get(0) == null)
			return null;
		
		UserDefinedObject activeRecord = (UserDefinedObject)factory.getDomainObject(UserDefinedObject.class, (Integer)results.get(0));
		return UserDefinedObjectListVoAssembler.create(activeRecord);
	}
	public NeedsAssessmentListVoCollection list(CareContextRefVo careContext) 
	{
		if(careContext == null)
			throw new DomainRuntimeException("Invalid care context");
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("from NeedsAssessment a ");
		hql.append(" where a.careContext.id = " + careContext.getID_CareContext());
		return NeedsAssessmentListVoAssembler.createNeedsAssessmentListVoCollectionFromNeedsAssessment(factory.find(hql.toString()));
	}
	public NeedsAssessmentEditVo get(NeedsAssessmentRefVo record) 
	{
		if(record == null || record.getID_NeedsAssessment() == null)
			throw new DomainRuntimeException("Invalid need assessment record to get");
		
		return NeedsAssessmentEditVoAssembler.create((NeedsAssessment)getDomainFactory().getDomainObject(NeedsAssessment.class, record.getID_NeedsAssessment()));
	}
	public AdmisSummary getAdmissionSummary(CareContextShortVo careContext)
	{
		MDTNotes impl = (MDTNotes)getDomainImpl(MDTNotesImpl.class);
		return impl.getAdmissionSummaryByCareContext(careContext);		
	}
	public ims.core.vo.HcpCollection listHcps(String filter)
	{
		HcpAdmin impl = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		HcpFilter hcpFilter = new HcpFilter();
		ims.core.vo.PersonName name = new ims.core.vo.PersonName();
		name.setSurname(filter);
		hcpFilter.setQueryName(name);
		return impl.listHCPs(hcpFilter);
	}

	public HcpLiteVo getHcpLite(HcpRefVo hcpRefVo)
	{
		if(hcpRefVo == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		return HcpLiteVoAssembler.create((Hcp)factory.getDomainObject(Hcp.class, hcpRefVo.getID_Hcp()));
	}
}
