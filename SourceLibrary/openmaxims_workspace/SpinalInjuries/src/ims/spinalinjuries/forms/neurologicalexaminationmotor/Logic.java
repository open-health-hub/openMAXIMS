//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.70 build 3379.24044)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.neurologicalexaminationmotor;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.MotorChartAreaDetailVo;
import ims.core.vo.MotorChartAreaDetailVoCollection;
import ims.core.vo.VertebrallevelVo;
import ims.core.vo.VertebrallevelVoCollection;
import ims.core.vo.lookups.ContactType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.DynamicGridRowCollection;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.utils.Color;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.NeuroMotorAreaFindingVo;
import ims.generalmedical.vo.NeuroMotorAreaFindingVoCollection;
import ims.generalmedical.vo.NeuroMotorFindingsShortVo;
import ims.generalmedical.vo.NeuroMotorFindingsShortVoCollection;
import ims.generalmedical.vo.NeuroMotorFindingsVo;
import ims.generalmedical.vo.NeuroMotorRootValueVo;
import ims.generalmedical.vo.NeuroMotorRootValueVoCollection;
import ims.medical.vo.NeuExamMotorRefVo;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int STANDARD_COLUMN_WIDTH = 60;

	// ----------------------------------------------------------------------------------------------------------------------------
	// DYNAMIC GRID (COLUMN IDENTIFIERS)
	// ----------------------------------------------------------------------------------------------------------------------------
	private static final int COL_MOTOR_AREA = 1;
	private static final int COL_RIGHT = 2;
	private static final int COL_LEFT = 3;
	private static final int COL_DUMMY = 4;

	// ----------------------------------------------------------------------------------------------------------------------------
	// DYNAMIC GRID (VALUE TYPE IDENTIFIERS)
	// ----------------------------------------------------------------------------------------------------------------------------
	private static final int VALUE_TYPE_ROOT_FINDINGS = 1;
	private static final int VALUE_TYPE_MOTOR_AREA_FINDINGS = 2;

	private static final int SCORE_LOWER_LIMBS = 1;
	private static final int SCORE_UPPER_LIMBS = 2;
	private static final int SCORE_OVERALL = 3;

	// ----------------------------------------------------------------------------------------------------------------------------
	// EVENT HANDLERS region
	// ----------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();

		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onRecNeuroValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Update selection
		if (form.recNeuro().getValue() instanceof NeuroMotorFindingsShortVo)
		{
			form.getLocalContext().setSelectedFindings(domain.getFinding((NeuroMotorFindingsShortVo) form.recNeuro().getValue()));
		}
		else if (form.recNeuro().getValue() instanceof CareContextShortVo)
		{
			if (form.recNeuro().getValues().get(1) instanceof NeuroMotorFindingsShortVo)
			{
				form.getLocalContext().setSelectedFindings(domain.getFinding((NeuroMotorFindingsShortVo) form.recNeuro().getValues().get(1)));
			}
			else
			{
				form.getLocalContext().setSelectedFindings(null);
			}
		}
		else if (form.recNeuro().getValue() instanceof ClinicalContactShortVo)
		{
			NeuroMotorFindingsShortVoCollection findingsList = domain.listFindings(form.getGlobalContext().Core.getCurrentCareContext(), null);

			if (findingsList == null)
			{
				form.getLocalContext().setSelectedFindings(null);
				return;
			}

			for (int i = 0; i < findingsList.size(); i++)
			{
				NeuroMotorFindingsShortVo finding = findingsList.get(i);

				// If the finding is null - skip to next finding
				if (finding == null)
					return;

				if (finding.getClinicalContactIsNotNull())
				{
					form.getLocalContext().setSelectedFindings(domain.getFinding(finding));
					break;
				}
			}
		}

		populateInstanceControls(form.getLocalContext().getSelectedFindings());
		updateControlsState();
	}

	@Override
	protected void onDyngrdMotorCellValueChanged(DynamicGridCell cell)
	{
		calculateScore();
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			open();
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	// ------------------------------------------------------------------------------------------------------------------------------
	// FORM UI FUNCTIONS region
	// ------------------------------------------------------------------------------------------------------------------------------

	public void initialize() throws FormOpenException
	{
		// Initialize dynamic grid
		initializeDymanicGrid();

		// Initialize combo-box
		initializeCombos();

		form.getLocalContext().setSelectedFindings(null);

		ClinicalContactShortVo currentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();

		form.getLocalContext().setIsClinicalContactType(currentClinicalContact != null && currentClinicalContact.getContactType().equals(ContactType.SPINALMEDICALADMISSION));
		form.getLocalContext().setIsMedicalInpatientForm(new Boolean(engine.getFormName().equals(form.getForms().SpinalInjuries.NeurologicalExaminationMotorInpatient)));

		displayRecordBrowser(form.getLocalContext().getIsMedicalInpatientForm());
		// form.chkProblem().setVisible(!form.getLocalContext().getIsMedicalInpatientForm().booleanValue());
	}

	private void displayRecordBrowser(boolean visible)
	{
		form.recNeuro().setVisible(visible);
		form.lblBrowseStatus().setVisible(visible);
		form.pnlMotor().setVisible(!visible);
	}

	private void initializeDymanicGrid()
	{
		form.dyngrdMotor().clear();
		form.dyngrdMotor().setSelectable(false);// WDEV-12953
		DynamicGridColumn column;

		column = form.dyngrdMotor().getColumns().newColumn("Motor Area", COL_MOTOR_AREA);
		column.setWidth(270);
		column.setCanGrow(true);

		column = form.dyngrdMotor().getColumns().newColumn("Right", COL_RIGHT);
		column.setAlignment(Alignment.CENTER);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setDynamicWidthSupported(true);
		column.setWidth(STANDARD_COLUMN_WIDTH);

		column = form.dyngrdMotor().getColumns().newColumn("Left", COL_LEFT);
		column.setWidth(STANDARD_COLUMN_WIDTH);
		column.setAlignment(Alignment.CENTER);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setCanGrow(false);

		column = form.dyngrdMotor().getColumns().newColumn("", COL_DUMMY);// WDEV-12953
		column.setDynamicWidthSupported(true);// WDEV-12953
		column.setWidth(1);// WDEV-12953
	}

	private void initializeCombos()
	{
		form.cmbMotorRight().clear();
		form.cmbMotorLeft().clear();

		VertebrallevelVoCollection listVertebralLevelsCollection = domain.listVertebralLevels();

		for (int i = 0; i < listVertebralLevelsCollection.size(); i++)
		{
			VertebrallevelVo vertebraLlevel = listVertebralLevelsCollection.get(i);

			if (vertebraLlevel == null)
				continue;

			form.cmbMotorLeft().newRow(vertebraLlevel, vertebraLlevel.getName());
			form.cmbMotorRight().newRow(vertebraLlevel, vertebraLlevel.getName());
		}
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		// Retrieve selection
		form.getLocalContext().setSelectedFindings(domain.getFinding(form.getLocalContext().getSelectedFindings()));

		// Populate record browser
		if (form.getLocalContext().getIsMedicalInpatientForm())
		{
			populateRecordBrowser(domain.listFindings(form.getGlobalContext().Core.getCurrentCareContext(), null));
		}
		else
		{
			populateRecordBrowser(domain.listFindings(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getCurrentClinicalContact()));
		}

		// Populate instance controls
		populateInstanceControls(form.getLocalContext().getSelectedFindings());

		// Set form mode to VIEW
		form.setMode(FormMode.VIEW);
	}

	public void updateControlsState()
	{

		if (form.getLocalContext().getIsMedicalInpatientForm())
		{
			form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) && (!form.getLocalContext().getIsClinicalContactType()));
			form.btnNew().setEnabled(form.getMode().equals(FormMode.VIEW) && (!form.getLocalContext().getIsClinicalContactType()) && (form.getLocalContext().getSelectedFindings() == null || form.recNeuro().getValue() != null && (form.recNeuro().getValue() instanceof CareContextShortVo || form.recNeuro().getValue() instanceof NeuroMotorFindingsShortVo && ((NeuroMotorFindingsShortVo) form.recNeuro().getValue()).getClinicalContact() == null)));

			form.btnUpdate().setVisible(form.getMode().equals(FormMode.VIEW) && !(form.getLocalContext().getIsClinicalContactType()) && form.getLocalContext().getSelectedFindings() != null);
			form.btnUpdate().setEnabled(form.getMode().equals(FormMode.VIEW) && (!form.getLocalContext().getIsClinicalContactType()) && form.recNeuro().getValue() != null);
		}
		else
		{
			form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) && !(!(form.getLocalContext().getIsClinicalContactType()) && form.getLocalContext().getSelectedFindings() == null));
			form.btnNew().setEnabled(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getIsClinicalContactType() && form.getLocalContext().getSelectedFindings() == null);

			form.btnUpdate().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectedFindings() != null);
			form.btnUpdate().setEnabled(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getIsClinicalContactType());
		}

		form.recNeuro().setEnabled(form.getMode().equals(FormMode.VIEW));

		// WDEV-15126
		form.ccAuthoring().setEnabledAuthoringHCP(form.getMode().equals(FormMode.EDIT));
		form.ccAuthoring().setEnabledDateTime(form.getMode().equals(FormMode.EDIT));
		form.ccAuthoring().setIsRequiredPropertyToControls(form.getMode().equals(FormMode.EDIT));

	}

	public void clearInstanceControls()
	{
		form.ccAuthoring().setValue(null);
		form.dyngrdMotor().getRows().clear();
		form.cmbMotorLeft().setValue(null);
		form.cmbMotorRight().setValue(null);
		form.chkProblem().setValue(null);
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear local context
		form.getLocalContext().setSelectedFindings(null);

		// Set value type to motor area findings
		form.getLocalContext().setValueType(VALUE_TYPE_MOTOR_AREA_FINDINGS);

		// Clear instance controls
		clearInstanceControls();

		// Initialize authoring information
		if (form.getLocalContext().getIsMedicalInpatientForm())
		{
			form.ccAuthoring().initializeComponent(true);
		}
		else
		{
			form.ccAuthoring().initializeComponent(false);
		}

		// Populate dynamic grid with motor area findings
		setDynamicGridNewMotorAreaFindings(domain.listMotorCharAreaDetail());

		calculateScore();

		updateBrowseInformation("Creating new record");

		form.setMode(FormMode.EDIT);
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			form.getLocalContext().setMedicalPatientProblem(null); // wdev-12491
			form.getLocalContext().setSelectedFindings(populateDataFromInstanceControls(form.getLocalContext().getSelectedFindings()));

			if (!form.getLocalContext().getSelectedFindingsIsNotNull())
				return true;

			String[] errors = form.getLocalContext().getSelectedFindings().validate();

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			form.getLocalContext().setSelectedFindings(domain.saveFindingAndProblem(form.getLocalContext().getSelectedFindings(), form.getLocalContext().getMedicalPatientProblem())); // wdev-12491
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		return true;
	}

	// ------------------------------------------------------------------------------------------------------------------------------
	// DATA EXCHANGE functions region
	// ------------------------------------------------------------------------------------------------------------------------------

	private NeuroMotorFindingsVo populateDataFromInstanceControls(NeuroMotorFindingsVo selectedFindings)
	{
		if (selectedFindings == null)
		{
			selectedFindings = new NeuroMotorFindingsVo();

			// Set the care context
			selectedFindings.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			// Set the clinical contact if any
			selectedFindings.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		}

		// Set authoring information
		if (form.ccAuthoring().getValue() != null)
		{
			selectedFindings.setAuthoringDateTime(form.ccAuthoring().getValue().getAuthoringDateTime());
			selectedFindings.setAuthoringCP(form.ccAuthoring().getValue().getAuthoringHcp());
		}

		// Set motor level
		selectedFindings.setRightMotorLevel(form.cmbMotorRight().getValue());
		selectedFindings.setLeftMotorLevel(form.cmbMotorLeft().getValue());
		// wdev-12491
		if ((selectedFindings.getIsProblem() == null && form.chkProblem().getValue() == true) || (selectedFindings.getIsProblem() != null && selectedFindings.getIsProblem().equals(Boolean.FALSE) && form.chkProblem().getValue() == true))
		{
			MedicalProbOnAdmisVo voProblem = new MedicalProbOnAdmisVo();
			voProblem.setPatientProblem("Motor Function Abnormality");
			voProblem.setIsActive(Boolean.TRUE);
			voProblem.setProblemContext("Neurological Examination - Motor");

			voProblem.setClinicalContact(selectedFindings.getClinicalContact());
			voProblem.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			form.getLocalContext().setMedicalPatientProblem(voProblem);

		}
		else
			form.getLocalContext().setMedicalPatientProblem(null);
		// -------

		// Set is Problem
		selectedFindings.setIsProblem(form.chkProblem().getValue());

		// Get value from dynamic grid
		switch (form.getLocalContext().getValueType())
		{
			case VALUE_TYPE_ROOT_FINDINGS:
				selectedFindings.setRootFinding(getDynamicGridRootFindings());
				break;

			case VALUE_TYPE_MOTOR_AREA_FINDINGS:
				selectedFindings.setMotorAreaFindings(getDynamicGridMotorAreaFindings());
				break;

			default:
				break;
		}

		// Get the scores - lower limbs
		form.dyngrdMotor().setValue(SCORE_LOWER_LIMBS);

		DynamicGridRow rowLowerScore = form.dyngrdMotor().getSelectedRow();
		if (rowLowerScore != null)
		{
			DynamicGridColumn column;
			DynamicGridCell cell;

			column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
			cell = rowLowerScore.getCells().get(column);

			if (cell != null)
				selectedFindings.setLLAsiaLeft((Integer) cell.getIdentifier());

			column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
			cell = rowLowerScore.getCells().get(column);

			if (cell != null)
				selectedFindings.setLLAsiaRight((Integer) cell.getIdentifier());
		}

		// Get the scores - overall
		form.dyngrdMotor().setValue(SCORE_OVERALL);

		DynamicGridRow rowOverallScore = form.dyngrdMotor().getSelectedRow();
		if (rowOverallScore != null)
		{
			DynamicGridColumn column;
			DynamicGridCell cell;

			column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
			cell = rowOverallScore.getCells().get(column);

			if (cell != null)
				selectedFindings.setOverAllAsiaLeft((Integer) cell.getIdentifier());

			column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
			cell = rowOverallScore.getCells().get(column);

			if (cell != null)
				selectedFindings.setOverallAsiaRight((Integer) cell.getIdentifier());
		}

		return selectedFindings;
	}

	private NeuroMotorRootValueVoCollection getDynamicGridRootFindings()
	{
		NeuroMotorRootValueVoCollection collection = new NeuroMotorRootValueVoCollection();

		for (int i = 0; i < form.dyngrdMotor().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdMotor().getRows().get(i);

			if (row == null || !(row.getValue() instanceof NeuroMotorRootValueVo))
				continue;

			NeuroMotorRootValueVo rootFinding = getDynamicGridRootFindingRowValue(row);

			if (rootFinding != null)
			{
				collection.add(rootFinding);
			}
		}

		return collection;
	}

	private NeuroMotorRootValueVo getDynamicGridRootFindingRowValue(DynamicGridRow row)
	{
		if (row == null)
			return null;

		NeuroMotorRootValueVo rootValue = null;

		if (row.getValue() == null)
		{
			rootValue = new NeuroMotorRootValueVo();
		}
		else
		{
			rootValue = (NeuroMotorRootValueVo) row.getValue();
		}

		DynamicGridColumn column;
		DynamicGridCell cell;

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_MOTOR_AREA);
		cell = row.getCells().get(column);
		rootValue.setRootValue(cell.getIdentifier() != null ? (VertebrallevelVo) cell.getIdentifier() : null);

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
		cell = row.getCells().get(column);
		try
		{
			int score = Integer.parseInt(cell.getValue().toString());

			if (score < 0 || score > 5)
				rootValue.setRightFinding(null);
			else
				rootValue.setRightFinding(score);
		}
		catch (Exception e)
		{
			if ("N".equals(cell.getValue()) || "n".equals(cell.getValue()))
				rootValue.setRightFinding(-1);
			else
				rootValue.setLeftFinding(null);
		}

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
		cell = row.getCells().get(column);
		try
		{
			int score = Integer.parseInt(cell.getValue().toString());

			if (score < 0 || score > 5)
				rootValue.setLeftFinding(null);
			else
				rootValue.setLeftFinding(score);
		}
		catch (Exception e)
		{
			if ("N".equals(cell.getValue()) || "n".equals(cell.getValue()))
				rootValue.setLeftFinding(-1);
			else
				rootValue.setLeftFinding(null);
		}

		return rootValue;
	}

	private NeuroMotorAreaFindingVoCollection getDynamicGridMotorAreaFindings()
	{
		NeuroMotorAreaFindingVoCollection collection = new NeuroMotorAreaFindingVoCollection();

		for (int i = 0; i < form.dyngrdMotor().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdMotor().getRows().get(i);

			if (row == null || !(row.getValue() instanceof NeuroMotorAreaFindingVo))
				continue;

			NeuroMotorAreaFindingVo motorAreaFinding = getDynamicGridMotorAreaFindingRowValue(row);

			if (motorAreaFinding != null)
			{
				collection.add(motorAreaFinding);
			}
		}

		return collection;
	}

	private NeuroMotorAreaFindingVo getDynamicGridMotorAreaFindingRowValue(DynamicGridRow row)
	{
		if (row == null)
			return null;

		NeuroMotorAreaFindingVo motorAreaValue = null;

		if (row.getValue() == null)
		{
			motorAreaValue = new NeuroMotorAreaFindingVo();
		}
		else
		{
			motorAreaValue = (NeuroMotorAreaFindingVo) row.getValue();
		}

		DynamicGridColumn column;
		DynamicGridCell cell;

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_MOTOR_AREA);
		cell = row.getCells().get(column);
		motorAreaValue.setMotorArea((MotorChartAreaDetailVo) cell.getIdentifier());

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
		cell = row.getCells().get(column);

		try
		{
			int score = Integer.parseInt(cell.getValue().toString());

			if (score < 0 || score > 5)
				motorAreaValue.setRightFinding(null);
			else
				motorAreaValue.setRightFinding(score);
		}
		catch (Exception e)
		{
			if ("N".equals(cell.getValue()) || "n".equals(cell.getValue()))
				motorAreaValue.setRightFinding(-1);
			else
				motorAreaValue.setRightFinding(null);
		}

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
		cell = row.getCells().get(column);

		try
		{
			int score = Integer.parseInt(cell.getValue().toString());

			if (score < 0 || score > 5)
				motorAreaValue.setLeftFinding(null);
			else
				motorAreaValue.setLeftFinding(score);
		}
		catch (Exception e)
		{
			if ("N".equals(cell.getValue()) || "n".equals(cell.getValue()))
				motorAreaValue.setLeftFinding(-1);
			else
				motorAreaValue.setLeftFinding(null);
		}

		return motorAreaValue;
	}

	/**
	 * Function used to populate the record browser with findings collection
	 */
	private void populateRecordBrowser(NeuroMotorFindingsShortVoCollection findingsList)
	{
		// Clear the record browser
		form.recNeuro().clear();

		// If the collection passed is null - clear the selected local context
		// and break the execution
		if (findingsList == null)
		{
			form.getLocalContext().setSelectedFindings(null);
			return;
		}

		if (form.getLocalContext().getIsMedicalInpatientForm())
		{
			CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
			form.recNeuro().newRow(voCareContext, "Care Context:    " + voCareContext.getStartDateTime() + " - " + voCareContext.getEpisodeOfCare().getResponsibleHCP(), Color.Green);

			if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			{
				form.recNeuro().newRow(form.getGlobalContext().Core.getCurrentClinicalContact(), "Clinical Contact: " + form.getGlobalContext().Core.getCurrentClinicalContact().getStartDateTime() + " - " + form.getGlobalContext().Core.getCurrentClinicalContact().getSeenBy(), Color.Green);
			}
			// Fill the record browser with the findings from collection
			for (int i = 0; i < findingsList.size(); i++)
			{
				NeuroMotorFindingsShortVo finding = findingsList.get(i);

				// If the finding is null - skip to next finding
				if (finding == null)
					return;

				if (finding.getClinicalContactIsNotNull())
				{
					form.recNeuro().newRow(finding.getClinicalContact(), "Clinical Contact: " + finding.getClinicalContact().getStartDateTime() + " - " + finding.getClinicalContact().getSeenBy(), Color.Green);
				}

				// Build text to display into record browser
				StringBuffer text = new StringBuffer();
				text.append(finding.getAuthoringDateTimeIsNotNull() ? finding.getAuthoringDateTime().toString() : "");
				text.append(" - ");
				text.append(finding.getAuthoringCPIsNotNull() ? finding.getAuthoringCP().getName().toString() : "");

				// Add the finding to record browser
				if (finding.getClinicalContact() == null)
				{
					form.recNeuro().newRow(1, finding, text.toString());
				}
				else
					form.recNeuro().newRow(finding, text.toString());

				
				if (finding.getClinicalContactIsNotNull() && form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
				{
					form.getLocalContext().setSelectedFindings(domain.getFinding(finding));
				}
				else if (finding.getClinicalContact() == null && form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull() && form.getGlobalContext().Core.getCurrentClinicalContact() == null)
				{
					form.getLocalContext().setSelectedFindings(null);
				}
				else if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && finding.getClinicalContact() == null && form.getGlobalContext().Core.getCurrentClinicalContact() == null)
				{
					form.getLocalContext().setSelectedFindings(domain.getFinding(finding));
				}
				else if (!(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && finding.getClinicalContact() != null) && form.getGlobalContext().Core.getCurrentClinicalContact() == null)
				{
					form.getLocalContext().setSelectedFindings(null);
				}

			}

			if (findingsList.size() == 0)
			{
				if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
				{
					form.recNeuro().newRow(form.getGlobalContext().Core.getCurrentClinicalContact(), "Clinical Contact: " + form.getGlobalContext().Core.getCurrentClinicalContact().getStartDateTime() + " - " + form.getGlobalContext().Core.getCurrentClinicalContact().getSeenBy(), Color.Green);
				}
			}

			if (form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			{
				form.recNeuro().setValue(form.getGlobalContext().Core.getCurrentClinicalContact());
			}
			else
			{
				form.recNeuro().setValue(form.getGlobalContext().Core.getCurrentCareContext());
			}
		}
		else
		{
			for (int i = 0; i < findingsList.size(); i++)
			{
				NeuroMotorFindingsShortVo finding = findingsList.get(i);

				// If the finding is null - skip to next finding
				if (finding == null)
					return;

				if (finding.getClinicalContactIsNotNull())
				{
					form.getLocalContext().setSelectedFindings(domain.getFinding(finding));
				}
			}
		}
	}

	private void updateBrowseInformation(String info)
	{
		form.lblBrowseStatus().setValue(info);
	}

	/**
	 * function used to populate instance controls with selected finding
	 */
	private void populateInstanceControls(NeuroMotorFindingsVo finding)
	{
		clearInstanceControls();

		if (finding == null)
			return;

		updateBrowseInformation(form.recNeuro().getRecordState("Assessment", "Assessments"));

		// Populate authoring information
		AuthoringInformationVo authoring = new AuthoringInformationVo();
		authoring.setAuthoringDateTime(finding.getAuthoringDateTime());
		authoring.setAuthoringHcp(finding.getAuthoringCP());

		form.ccAuthoring().setValue(authoring);

		// Populate combo-boxes
		form.cmbMotorLeft().setValue(finding.getLeftMotorLevel());
		form.cmbMotorRight().setValue(finding.getRightMotorLevel());

		// Populate is problem
		form.chkProblem().setValue(finding.getIsProblem());

		// Populate dynamic grid
		if (finding.getRootFindingIsNotNull() && finding.getRootFinding().size() > 0)
		{
			form.getLocalContext().setValueType(VALUE_TYPE_ROOT_FINDINGS);

			setDynamicGridRootFindings(finding.getRootFinding());
		}
		else
		{
			form.getLocalContext().setValueType(VALUE_TYPE_MOTOR_AREA_FINDINGS);

			setDynamicGridMotorAreaFindings(finding.getMotorAreaFindings());
		}

		calculateScore();
	}

	/**
	 * function used to populate dynamic grid with neuro motor area finding
	 * collection
	 */
	private void setDynamicGridMotorAreaFindings(NeuroMotorAreaFindingVoCollection findings)
	{
		form.dyngrdMotor().getRows().clear();

		if (findings == null)
			return;

		// Sort collection
		findings.sort(new FindingsAndMotorChartComparator());

		for (int i = 0; i < findings.size(); i++)
		{
			NeuroMotorAreaFindingVo finding = findings.get(i);

			if (finding == null)
				continue;

			setDynamicGridMotorAreaFindingRow(form.dyngrdMotor().getRows().newRow(), finding);
		}
	}

	/**
	 * function used to populate dynamic grid row with neuro motor area finding
	 */
	private void setDynamicGridMotorAreaFindingRow(DynamicGridRow row, NeuroMotorAreaFindingVo finding)
	{
		if (finding == null)
			return;

		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add a finding to a null row");

		// Set the row
		DynamicGridColumn column;
		DynamicGridCell cell;

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_MOTOR_AREA);
		cell = row.getCells().newCell(column, DynamicCellType.HTMLVIEW);
		cell.setValue(finding.getMotorAreaIsNotNull() ? finding.getMotorArea().getMotorAreaDescription() : ""); // wdev-14406
		cell.setIdentifier(finding.getMotorArea());
		cell.setReadOnly(true);

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(finding.getRightFinding() == null ? "" : (finding.getRightFinding() < 0 ? "N" : finding.getRightFinding().toString()));
		cell.setWidth(STANDARD_COLUMN_WIDTH);
		cell.setReadOnly(false);
		cell.setAutoPostBack(true);

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(finding.getLeftFinding() == null ? "" : (finding.getLeftFinding() < 0 ? "N" : finding.getLeftFinding().toString()));
		cell.setReadOnly(false);
		cell.setAutoPostBack(true);

		row.setValue(finding);
	}

	/**
	 * function used to populate dynamic grid with root findings (backward
	 * compatibility)
	 */
	private void setDynamicGridRootFindings(NeuroMotorRootValueVoCollection findings)
	{
		form.dyngrdMotor().getRows().clear();

		if (findings == null)
			return;

		// Sort collection
		findings.sort(new FindingsAndMotorChartComparator());

		for (int i = 0; i < findings.size(); i++)
		{
			NeuroMotorRootValueVo finding = findings.get(i);

			if (finding == null)
				continue;

			setDynamicGridRootFindingRow(form.dyngrdMotor().getRows().newRow(), finding);
		}
	}

	/**
	 * function used to populate dynamic grid row with root finding (backward
	 * compatibility)
	 */
	private void setDynamicGridRootFindingRow(DynamicGridRow row, NeuroMotorRootValueVo finding)
	{
		if (finding == null)
			return;

		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add a finding to a null row");

		// Set the row
		DynamicGridColumn column;
		DynamicGridCell cell;

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_MOTOR_AREA);
		cell = row.getCells().newCell(column, DynamicCellType.HTMLVIEW);
		cell.setValue(finding.getRootValue() != null ? finding.getRootValue().getDescription() : "");
		cell.setIdentifier(finding.getRootValue());
		cell.setReadOnly(true);

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(finding.getRightFinding() == null ? "" : (finding.getRightFinding() < 0 ? "N" : finding.getRightFinding().toString()));
		cell.setWidth(STANDARD_COLUMN_WIDTH);
		cell.setReadOnly(false);
		cell.setAutoPostBack(true);

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(finding.getLeftFinding() == null ? "" : (finding.getLeftFinding() < 0 ? "N" : finding.getLeftFinding().toString()));
		cell.setReadOnly(false);
		cell.setAutoPostBack(true);

		row.setValue(finding);
	}

	private void setDynamicGridNewMotorAreaFindings(MotorChartAreaDetailVoCollection listMotorCharAreaDetail)
	{
		form.dyngrdMotor().getRows().clear();

		if (listMotorCharAreaDetail == null)
			return;

		// Sort collection
		listMotorCharAreaDetail.sort(new FindingsAndMotorChartComparator());

		for (int i = 0; i < listMotorCharAreaDetail.size(); i++)
		{
			MotorChartAreaDetailVo motorChartAreaDetailVo = listMotorCharAreaDetail.get(i);

			if (motorChartAreaDetailVo == null)
				continue;

			if (motorChartAreaDetailVo.getIsActive() != null && motorChartAreaDetailVo.getIsActive() == true)
				setDynamicGridNewMotorAreaRow(form.dyngrdMotor().getRows().newRow(), motorChartAreaDetailVo);
		}
	}

	private void setDynamicGridNewMotorAreaRow(DynamicGridRow row, MotorChartAreaDetailVo motorChartAreaDetail)
	{
		if (motorChartAreaDetail == null)
			return;

		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not add a finding to a null row");

		// Set the row
		DynamicGridColumn column;
		DynamicGridCell cell;

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_MOTOR_AREA);
		cell = row.getCells().newCell(column, DynamicCellType.HTMLVIEW);
		cell.setValue(motorChartAreaDetail.getMotorAreaDescription());
		cell.setIdentifier(motorChartAreaDetail);
		cell.setReadOnly(true);

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(null);
		cell.setWidth(STANDARD_COLUMN_WIDTH);
		cell.setReadOnly(false);
		cell.setAutoPostBack(true);

		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(null);
		cell.setReadOnly(false);
		cell.setAutoPostBack(true);

		// Build row value
		NeuroMotorAreaFindingVo motorAreaFindingVo = new NeuroMotorAreaFindingVo();
		motorAreaFindingVo.setMotorArea(motorChartAreaDetail);

		row.setValue(motorAreaFindingVo);
	}

	private void calculateScore()
	{
		switch (form.getLocalContext().getValueType())
		{
			case VALUE_TYPE_ROOT_FINDINGS:
				calculateAsiaScoreRootFindings();
				break;

			case VALUE_TYPE_MOTOR_AREA_FINDINGS:
				calculateAsiaScoreMotorAreaFindings();
				break;

			default:
				break;
		}
	}

	private void calculateAsiaScoreMotorAreaFindings()
	{
		int scoreUpperRight = 0;
		int scoreUpperLeft = 0;

		int scoreLowerRight = 0;
		int scoreLowerLeft = 0;

		DynamicGridRowCollection rows = form.dyngrdMotor().getRows();

		// Calculate scores
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);

			if (row.getValue() instanceof NeuroMotorAreaFindingVo)
			{
				NeuroMotorAreaFindingVo motorAreaFinding = (NeuroMotorAreaFindingVo) row.getValue();

				DynamicGridColumn column;
				DynamicGridCell cell;

				column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
				cell = row.getCells().get(column);

				if (cell.getValue() != null && cell.getValue() != "")
				{
					try
					{
						int score = Integer.parseInt(cell.getValue().toString());

						if (score < 0 || score > 5)
							score = 0;

						if (motorAreaFinding.getMotorArea().getIsLowerLimb())
							scoreLowerLeft += score;

						if (motorAreaFinding.getMotorArea().getIsUpperLimb())
							scoreUpperLeft += score;
					}
					catch (Exception e)
					{
						e.printStackTrace();
					}
				}

				column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
				cell = row.getCells().get(column);

				if (cell.getValue() != null && cell.getValue() != "")
				{
					try
					{
						int score = Integer.parseInt(cell.getValue().toString());

						if (score < 0 || score > 5)
							score = 0;

						if (motorAreaFinding.getMotorArea().getIsLowerLimb())
							scoreLowerRight += score;

						if (motorAreaFinding.getMotorArea().getIsUpperLimb())
							scoreUpperRight += score;
					}
					catch (Exception e)
					{
						e.printStackTrace();
					}
				}
			}
		}

		// Display scores
		displayAsiaScores(scoreUpperLeft, scoreUpperRight, scoreLowerLeft, scoreLowerRight);
	}

	private void displayAsiaScores(int scoreUpperLeft, int scoreUpperRight, int scoreLowerLeft, int scoreLowerRight)
	{
		int scoreOverallLeft = scoreLowerLeft + scoreUpperLeft;
		int scoreOverallRight = scoreLowerRight + scoreUpperRight;

		int totalOverallScore = scoreOverallLeft + scoreOverallRight;

		DynamicGridRow row;

		DynamicGridColumn column;
		DynamicGridCell cell;

		// Set upper limb row
		form.dyngrdMotor().setValue(SCORE_UPPER_LIMBS);

		row = form.dyngrdMotor().getSelectedRow();

		if (row == null)
			row = form.dyngrdMotor().getRows().newRow();
		row.setValue(SCORE_UPPER_LIMBS);
		row.setBackColor(Color.LightYellow);// //WDEV-12953

		// Text cell
		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_MOTOR_AREA);
		cell = row.getCells().get(column);

		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.HTMLVIEW);
		cell.setValue("<b>Total ASIA Upper Limb Score</b>");

		// Left score cell
		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
		cell = row.getCells().get(column);

		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.STRING);

		cell.setValue(scoreUpperLeft + " / 25");
		cell.setIdentifier(scoreUpperLeft);
		cell.setReadOnly(true);

		// Right score cell
		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
		cell = row.getCells().get(column);

		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.STRING);

		cell.setWidth(STANDARD_COLUMN_WIDTH);
		cell.setValue(scoreUpperRight + " / 25");
		cell.setIdentifier(scoreUpperRight);
		cell.setReadOnly(true);

		// Set lower limb row
		form.dyngrdMotor().setValue(SCORE_LOWER_LIMBS);

		row = form.dyngrdMotor().getSelectedRow();

		if (row == null)
			row = form.dyngrdMotor().getRows().newRow();
		row.setValue(SCORE_LOWER_LIMBS);
		row.setBackColor(Color.LightYellow);// WDEV-12953
		// Text cell
		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_MOTOR_AREA);
		cell = row.getCells().get(column);

		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.HTMLVIEW);
		cell.setValue("<b>Total ASIA Lower Limb Score</b>");

		// Left score cell
		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
		cell = row.getCells().get(column);

		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.STRING);

		cell.setValue(scoreLowerLeft + " / 25");
		cell.setIdentifier(scoreLowerLeft);

		// Right score cell
		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
		cell = row.getCells().get(column);

		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.STRING);

		cell.setWidth(STANDARD_COLUMN_WIDTH);
		cell.setValue(scoreLowerRight + " / 25");
		cell.setIdentifier(scoreLowerRight);

		// Set overall limb row
		form.dyngrdMotor().setValue(SCORE_OVERALL);

		row = form.dyngrdMotor().getSelectedRow();

		if (row == null)
			row = form.dyngrdMotor().getRows().newRow();
		row.setValue(SCORE_OVERALL);
		row.setBackColor(Color.LightYellow);// WDEV-12953

		// Text cell
		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_MOTOR_AREA);
		cell = row.getCells().get(column);

		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.HTMLVIEW);
		cell.setValue("<b>Overall ASIA score</b>");

		// Left cell
		column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
		cell = row.getCells().get(column);

		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.STRING);

		cell.setWidth(2 * STANDARD_COLUMN_WIDTH);
		cell.setValue(totalOverallScore + " / 100");
		cell.setIdentifier(totalOverallScore);

		// Right cell
		/*
		 * column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
		 * cell = row.getCells().get(column);
		 * 
		 * if (cell == null) cell = row.getCells().newCell(column,
		 * DynamicCellType.STRING); cell.setWidth(0);
		 */

	}

	private void calculateAsiaScoreRootFindings()
	{
		int scoreUpperRight = 0;
		int scoreUpperLeft = 0;

		int scoreLowerRight = 0;
		int scoreLowerLeft = 0;

		DynamicGridRowCollection rows = form.dyngrdMotor().getRows();

		// Calculate scores
		for (int i = 0; i < rows.size(); i++)
		{
			DynamicGridRow row = rows.get(i);

			if (row.getValue() instanceof NeuroMotorRootValueVo)
			{
				NeuroMotorRootValueVo motorFinding = (NeuroMotorRootValueVo) row.getValue();

				DynamicGridColumn column;
				DynamicGridCell cell;

				column = form.dyngrdMotor().getColumns().getByIdentifier(COL_LEFT);
				cell = row.getCells().get(column);

				if (cell.getValue() != null)
				{
					try
					{
						int score = Integer.parseInt(cell.getValue().toString());

						if (score < 0 || score > 5)
							score = 0;

						if (motorFinding.getRootValue().getIsLLAsiaScore())
							scoreLowerLeft += score;

						if (motorFinding.getRootValue().getIsULAsiaScore())
							scoreUpperLeft += score;
					}
					catch (Exception e)
					{
						e.printStackTrace();
					}
				}

				column = form.dyngrdMotor().getColumns().getByIdentifier(COL_RIGHT);
				cell = row.getCells().get(column);

				if (cell.getValue() != null)
				{
					try
					{
						int score = Integer.parseInt(cell.getValue().toString());

						if (score < 0 || score > 5)
							score = 0;

						if (motorFinding.getRootValue().getIsLLAsiaScore())
							scoreLowerRight += score;

						if (motorFinding.getRootValue().getIsULAsiaScore())
							scoreUpperRight += score;
					}
					catch (Exception e)
					{
						e.printStackTrace();
					}
				}
			}
		}

		// Display scores
		displayAsiaScores(scoreUpperLeft, scoreUpperRight, scoreLowerLeft, scoreLowerRight);
	}

	private class FindingsAndMotorChartComparator implements Comparator<Object>
	{
		public int compare(Object arg0, Object arg1)
		{
			if (arg0 instanceof NeuroMotorRootValueVo && arg1 instanceof NeuroMotorRootValueVo)
			{
				if (!((NeuroMotorRootValueVo) arg0).getRootValueIsNotNull() || !((NeuroMotorRootValueVo) arg1).getRootValueIsNotNull())
					return 0;

				if (!((NeuroMotorRootValueVo) arg0).getRootValue().getOrderNoIsNotNull() || !((NeuroMotorRootValueVo) arg1).getRootValueIsNotNull())
					return 0;

				return ((NeuroMotorRootValueVo) arg0).getRootValue().getOrderNo().compareTo(((NeuroMotorRootValueVo) arg1).getRootValue().getOrderNo());
			}

			if (arg0 instanceof NeuroMotorAreaFindingVo && arg1 instanceof NeuroMotorAreaFindingVo)
			{
				if (!((NeuroMotorAreaFindingVo) arg0).getMotorAreaIsNotNull() || !((NeuroMotorAreaFindingVo) arg1).getMotorAreaIsNotNull())
					return 0;

				if (!((NeuroMotorAreaFindingVo) arg0).getMotorArea().getOrderNoIsNotNull() || !((NeuroMotorAreaFindingVo) arg1).getMotorArea().getOrderNoIsNotNull())
					return 0;

				return ((NeuroMotorAreaFindingVo) arg0).getMotorArea().getOrderNo().compareTo(((NeuroMotorAreaFindingVo) arg1).getMotorArea().getOrderNo());
			}

			if (arg0 instanceof MotorChartAreaDetailVo && arg1 instanceof MotorChartAreaDetailVo)
			{
				if (!((MotorChartAreaDetailVo) arg0).getOrderNoIsNotNull() || !((MotorChartAreaDetailVo) arg1).getOrderNoIsNotNull())
					return 0;

				return ((MotorChartAreaDetailVo) arg0).getOrderNo().compareTo(((MotorChartAreaDetailVo) arg1).getOrderNo());
			}

			return 0;
		}
	}
}
