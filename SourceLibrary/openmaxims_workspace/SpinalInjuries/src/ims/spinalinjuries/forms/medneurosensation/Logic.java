//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 50107.1300)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.medneurosensation;

import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.VertebrallevelVo;
import ims.core.vo.VertebrallevelVoCollection;
import ims.core.vo.lookups.ContactType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.NeuroSenastionFindingsVo;
import ims.generalmedical.vo.NeuroSenastionFindingsVoCollection;
import ims.generalmedical.vo.NeuroSensationExaminationVo;
import ims.generalmedical.vo.NeuroSensationFindingsShortVo;
import ims.generalmedical.vo.NeuroSensationFindingsShortVoCollection;
import ims.generalmedical.vo.NeuroSensationRootValueVo;
import ims.generalmedical.vo.NeuroSensationRootValueVoCollection;
import ims.spinalinjuries.vo.lookups.MSKSenstionModality;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	
	
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open();
	}

	private void initialize()
	{
		loadVertebralCombos();
		
		ClinicalContactShortVo currentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		
		boolean bMedicalAdmissionContactSelected = (currentClinicalContact!=null && currentClinicalContact.getContactType().equals(ContactType.SPINALMEDICALADMISSION));
		Boolean bMedicalInpatientForm = new Boolean(engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroSensationInpatient));
		
		form.getLocalContext().setIsMedicalInpatientForm(bMedicalInpatientForm);
		form.getLocalContext().setIsClinicalContactType(bMedicalAdmissionContactSelected);
		
		displayRecordBrowser(bMedicalInpatientForm.booleanValue());
		form.lyr1().tabDetails().chkProblem().setVisible(!form.getLocalContext().getIsMedicalInpatientForm().booleanValue());
		
		if(writeConditionsApply(bMedicalInpatientForm,	bMedicalAdmissionContactSelected))
			activateButtons(true);
		else
			activateButtons(false);
			
		form.lyr1().tabMannequinn().imgMannequinn().setValue(form.getImages().SpinalInjuries.Mannequinn);
		
		form.ccAuthoring().setIsRequiredPropertyToControls(true);
		
	}
	
	/**
	 * inpatient form writable when Spinal Medical Admission contact NOT selected
	 * admission form writable when Spinal Medical Admission contact IS selected
	 * @param  bMedicalInpatientForm, currentClinicalContact
	 * @return boolean
	 */		
	private boolean writeConditionsApply(Boolean bMedicalInpatientForm, boolean bMedicalAdmissionContactSelected) {
	
		if(bMedicalInpatientForm.booleanValue()){
			
			if(bMedicalAdmissionContactSelected)
				return false;
			else
				return true;
		}
		else{
			if(bMedicalAdmissionContactSelected)
				return true;
			else
				return false;
		}
	}
	
	private void activateButtons(boolean activate)
	{
		form.btnNew().setVisible(activate);
		form.btnNew().setEnabled(activate);
		form.btnUpdate().setVisible(activate);
		form.btnUpdate().setEnabled(activate);
	}

	private void displayRecordBrowser(boolean visible)
	{
		form.panSense().setVisible(!visible);
		form.recbrSensation().setVisible(visible);
		form.lblBrowseStatus().setVisible(visible);
	}

	private void open() 
	{
		form.setMode(FormMode.VIEW);
		form.getLocalContext().setNeuroSenastionFindingsVo(null);
		
		clearScreen();
		loadFindingsGrids();
		
		if(engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroSensation))
		{
			ClinicalContactShortVo voClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			
			if(voClinicalContact != null && voClinicalContact.getContactType().equals(ContactType.SPINALMEDICALADMISSION))
			{
				//form.getLocalContext().setSensationRecord(domain.getNeuroSensationRecord(form.getGlobalContext().Core.getCurrentClinicalContact(), null));
				//wdev-13418
				MedicalProbOnAdmisVo medProbVo = domain.getPatientProblemByClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
				NeuroSenastionFindingsVoCollection neuroSensColl = domain.getNeuroSensationRecordCollByClinCont(form.getGlobalContext().Core.getCurrentClinicalContact(), null);
				NeuroSensationExaminationVo tempVo = new NeuroSensationExaminationVo();
				tempVo.setProblem(medProbVo);
				if(neuroSensColl != null && neuroSensColl.size() > 0)
					tempVo.setNeuroSens(neuroSensColl.get(0));
				
				//-------
				form.getLocalContext().setSensationRecord(tempVo);
			}
			else
			{
				//form.getLocalContext().setSensationRecord(domain.getSpinalMedicalAdmissionSensationByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
				//wdev-13418
				NeuroSenastionFindingsVoCollection neuroSensColl = domain.getSpinalMedicalAdmissionSensationByCareContextColl(form.getGlobalContext().Core.getCurrentCareContext());
				NeuroSensationExaminationVo tempVo = new NeuroSensationExaminationVo();
				
				if(neuroSensColl != null && neuroSensColl.size() > 0)
					tempVo.setNeuroSens(neuroSensColl.get(0));
				
				form.getLocalContext().setSensationRecord(tempVo);
				//-------
			
				
				
			}
			
			populateScreenFromData();
		}
		else
		{
			fillRecordBrowser();
		}
		//displayButtons();
	}

	private void displayButtons()
	{
		if(engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroSensationInpatient))
		{
			form.btnNew().setEnabled(true);
			form.btnNew().setVisible(true);
			if(form.recbrSensation().size() >0)
				form.btnUpdate().setVisible(true);
			else
				form.btnUpdate().setVisible(false);
		}
	}

	private void fillRecordBrowser()
	{
		form.recbrSensation().clear();
		
		NeuroSensationFindingsShortVoCollection voSensationFindingsColl = domain.listByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
		loadCareContextRecords(voSensationFindingsColl);
				
		sortNeuroSensation(voSensationFindingsColl);
			
		checkForSelectedClinicalContact();
			
		setRecordBrowser();
		browseRecord();
	}

	private void checkForSelectedClinicalContact()
	{
		// the selected Clinical Contact that has been selected from Patient Summary may not have a record and therefore 
		// must be added to the record browser
		boolean clinicalContactFound = false;
		ClinicalContactShortVo voSelectedClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		
		if(voSelectedClinicalContact != null)
		{
			for(int i =0; i< form.recbrSensation().size(); i++)
			{
				ValueObject vo = (ValueObject) form.recbrSensation().getValues().get(i);
				if(vo instanceof ClinicalContactShortVo)
				{
					ClinicalContactShortVo voClinicalContact = (ClinicalContactShortVo) form.recbrSensation().getValues().get(i);
					if(voClinicalContact.equals(voSelectedClinicalContact))
						clinicalContactFound = true;
				}
			}
			
			if(!clinicalContactFound)
			{
				form.recbrSensation().newRow(voSelectedClinicalContact, "Clinical Contact: " + voSelectedClinicalContact.getStartDateTime() + " - " + voSelectedClinicalContact.getSeenBy(), Color.Green);
				form.recbrSensation().setValue(voSelectedClinicalContact);
			}
		}
	}

	private void sortNeuroSensation(NeuroSensationFindingsShortVoCollection voSensationFindingsColl)
	{
		if(voSensationFindingsColl != null)
		{
			int x = 0;
			for(x = 0; x < voSensationFindingsColl.size(); x++)
			{
				NeuroSensationFindingsShortVoCollection voNeuroSensationCollForClinicalContact = new NeuroSensationFindingsShortVoCollection();
				if(voSensationFindingsColl.get(x).getClinicalContact() != null)
				{
					ClinicalContactShortVo voClinicalContact = voSensationFindingsColl.get(x).getClinicalContact();
					
					for(int i =0; i<voSensationFindingsColl.size(); i++)
					{
						if(voSensationFindingsColl.get(i).getClinicalContact() != null)
						{
							if(voSensationFindingsColl.get(i).getClinicalContact().getID_ClinicalContact().equals(voClinicalContact.getID_ClinicalContact()))
							{
								voNeuroSensationCollForClinicalContact.add(voSensationFindingsColl.get(i));
								x = i;
							}
						}
					}
					loadClinicalContactReflexRecords(voClinicalContact, voNeuroSensationCollForClinicalContact);
				}
			}
		}
	}

	private void loadClinicalContactReflexRecords(ClinicalContactShortVo voClinicalContact, NeuroSensationFindingsShortVoCollection voNeuroSensationColl)
	{
		boolean isClinicalContactSelected = checkCurrentClinicalContact(voClinicalContact);
		
		Color textColour = null;
		if(isClinicalContactSelected)
			textColour = Color.Green;
		
		form.recbrSensation().newRow(voClinicalContact, "Clinical Contact: " + voClinicalContact.getStartDateTime() + " - " + voClinicalContact.getSeenBy(), textColour);
		
		if(isClinicalContactSelected)
			form.recbrSensation().setValue(voClinicalContact);
		
		for(int i=0; i<voNeuroSensationColl.size(); i++)
		{
			NeuroSensationFindingsShortVo voNeuroSensation = voNeuroSensationColl.get(i);
			form.recbrSensation().newRow(voNeuroSensation, "\t\t\t\t " + voNeuroSensation.getAuthoringDateTime() + " - " + voNeuroSensation.getAuthoringCP().getMos().getName(), textColour);
		}
	}

	private boolean checkCurrentClinicalContact(ClinicalContactShortVo voClinicalContact)
	{
		// checks if this Clinical Contact is the selected Clinical Contact from Patient Summary
		ClinicalContactShortVo voSelectedClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		if(voSelectedClinicalContact != null)
		{
			if(voSelectedClinicalContact.equals(voClinicalContact))
				return true;
			else
				return false;
		}
		return false;
	}

	private void loadCareContextRecords(NeuroSensationFindingsShortVoCollection voSensationFindingsColl)
	{
		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		
		if(form.getGlobalContext().Core.getCurrentClinicalContact() == null)
		{
			form.recbrSensation().newRow(voCareContext, "Care Context:    " + voCareContext.getStartDateTime() + " - " + voCareContext.getEpisodeOfCare().getResponsibleHCP(), Color.Green);
			loadCareContextMotorRecords(voSensationFindingsColl, Color.Green);
			form.recbrSensation().setValue(voCareContext);
		}
		else
		{
			form.recbrSensation().newRow(voCareContext, "Care Context:    " + voCareContext.getStartDateTime() + " - " + voCareContext.getEpisodeOfCare().getResponsibleHCP());
			loadCareContextMotorRecords(voSensationFindingsColl, null);
		} 
	}

	private void loadCareContextMotorRecords(NeuroSensationFindingsShortVoCollection voSensationFindingsColl, Color activeColor)
	{
		if(voSensationFindingsColl != null)
		{
			for(int i=0; i<voSensationFindingsColl.size(); i++)
			{
				NeuroSensationFindingsShortVo voSensationFindings = voSensationFindingsColl.get(i);
				if(voSensationFindings.getClinicalContact() == null)
				{
					form.recbrSensation().newRow(voSensationFindings, "\t\t\t\t "+ voSensationFindings.getAuthoringDateTime() + " - " + voSensationFindings.getAuthoringCP().getMos().getName(), activeColor);
				}
			}
		}
	}

	private void setRecordBrowser()
	{
		//after an update need to set the record browser to display the updated record
		if(form.getLocalContext().getUpdatedInstanceIsNotNull())
		{
			form.recbrSensation().setValue(form.getLocalContext().getUpdatedInstance());
	
			browseRecord();
		}
	}

	private void populateScreenFromData() 
	{				
		NeuroSensationExaminationVo voSensExam = form.getLocalContext().getSensationRecord(); 
		if(voSensExam!=null)
			form.getLocalContext().setNeuroSenastionFindingsVo(voSensExam.getNeuroSens());
		
		if(voSensExam != null)
		{
			if(voSensExam.getNeuroSens() == null)
			{
				populateContactInfo(null);
				form.btnNew().setVisible((form.getLocalContext().getIsClinicalContactType().booleanValue()==true && form.getLocalContext().getIsMedicalInpatientForm().booleanValue()==false ) || form.getLocalContext().getIsMedicalInpatientForm().booleanValue()==true); //WDEV-15048 
				form.btnNew().setEnabled((form.getLocalContext().getIsClinicalContactType().booleanValue()==true && form.getLocalContext().getIsMedicalInpatientForm().booleanValue()==false ) || form.getLocalContext().getIsMedicalInpatientForm().booleanValue()==true); //WDEV-15048 
				form.btnUpdate().setVisible(false);
				return;
			}
			else
			{
				form.btnNew().setVisible(true);
				form.btnNew().setEnabled(false);
				form.btnUpdate().setVisible(true);
			}	
			
			NeuroSenastionFindingsVo voFindings = voSensExam.getNeuroSens();
			if(voFindings != null)
			{
				populateContactInfo(voFindings);
				
				if(voFindings.getLeftSensoryLevel() != null)
				{
					if(!form.lyr1().tabDetails().cmbLeftSensLevel().getValues().contains(voFindings.getLeftSensoryLevel()))
						form.lyr1().tabDetails().cmbLeftSensLevel().newRow(voFindings.getLeftSensoryLevel(), voFindings.getLeftSensoryLevel().getDescription());
					else
						form.lyr1().tabDetails().cmbLeftSensLevel().setValue(voFindings.getLeftSensoryLevel());
				}
				
				if(voFindings.getRightSensoryLevel() != null)
				{
					if(!form.lyr1().tabDetails().cmbRightSensLevel().getValues().contains(voFindings.getRightSensoryLevel()))
						form.lyr1().tabDetails().cmbRightSensLevel().newRow(voFindings.getRightSensoryLevel(), voFindings.getRightSensoryLevel().getDescription());
					else
						form.lyr1().tabDetails().cmbRightSensLevel().setValue(voFindings.getRightSensoryLevel());
				}
				form.lyr1().tabDetails().cmbFrankelGrade().setValue(voFindings.getFrankleGrade());
				
				if(voFindings.getIsProblemIsNotNull())
					form.lyr1().tabDetails().chkProblem().setValue(voFindings.getIsProblem().booleanValue());
				
				populateFindingsGridFromData(voFindings.getRootfinding());
			}
			displayButtons();
		}
	}
	private void populateFindingsGridFromData(NeuroSensationRootValueVoCollection voCollFindings) 
	{
		if(voCollFindings == null)
			return;
		
		NeuroSensationRootValueVo voFindingsItem = null;	
		
		for(int i=0;i<voCollFindings.size();i++)
		{
			voFindingsItem = voCollFindings.get(i);
			
			if(voFindingsItem.getSensationType().equals(MSKSenstionModality.LIGHTTOUCH))
			{
				GenForm.grdLightTouchRow lRow = null;
				for(int p=0;p<form.grdLightTouch().getRows().size()-1;p++)
				{
					lRow = form.grdLightTouch().getRows().get(p);
					if(lRow.getValue().equals(voFindingsItem.getRootValue()))
					{
						lRow.setIdentifier(voFindingsItem);
						if(voFindingsItem.getLeftFinding() != null)
						{
							if(voFindingsItem.getLeftFinding().intValue() == -1)
								lRow.setcolLeft("N");
							else
								lRow.setcolLeft(String.valueOf(voFindingsItem.getLeftFinding().intValue()));
						}
						if(voFindingsItem.getRightFinding() != null)
						{
							if(voFindingsItem.getRightFinding().intValue() == -1)
								lRow.setcolRight("N");
							else
								lRow.setcolRight(String.valueOf(voFindingsItem.getRightFinding().intValue()));
						}
					}
				}
			}
			else if(voFindingsItem.getSensationType().equals(MSKSenstionModality.PINPRICK))
			{
				GenForm.grdPinPrickRow pRow = null;
				for(int p=0;p<form.grdPinPrick().getRows().size()-1;p++)
				{
					pRow = form.grdPinPrick().getRows().get(p);
					if(pRow.getValue().equals(voFindingsItem.getRootValue()))
					{
						pRow.setIdentifier(voFindingsItem);
						if(voFindingsItem.getLeftFinding() != null)
						{
							if(voFindingsItem.getLeftFinding().intValue() == -1)
								pRow.setcolLeft("N");
							else
								pRow.setcolLeft(String.valueOf(voFindingsItem.getLeftFinding().intValue()));
						}
						if(voFindingsItem.getRightFinding() != null)
						{
							if(voFindingsItem.getRightFinding().intValue() == -1)
								pRow.setcolRight("N");
							else
								pRow.setcolRight(String.valueOf(voFindingsItem.getRightFinding().intValue()));
						}
					}
				}
			}
		}
		
		if(voCollFindings.size() > 0)
		{
			String[] lScores = calculateLeftAndRightScore(voCollFindings);
			GenForm.grdLightTouchRow lRow = form.grdLightTouch().getRows().get(form.grdLightTouch().getRows().size() - 1);
			lRow.setcolLeft(lScores[0]);
			lRow.setcolRight(lScores[1]);
			
			String[] pScores = calculateLeftAndRightScore(voCollFindings, true);
			GenForm.grdPinPrickRow pRow = form.grdPinPrick().getRows().get(form.grdPinPrick().getRows().size() - 1);
			pRow.setcolLeft(pScores[0]);
			pRow.setcolRight(pScores[1]);
		}	
	}

	private String[] calculateLeftAndRightScore(NeuroSensationRootValueVoCollection voCollFindings)
	{
		return calculateLeftAndRightScore(voCollFindings, false);
	}
	private String[] calculateLeftAndRightScore(NeuroSensationRootValueVoCollection voCollFindings, boolean bPinPrick) 
	{
		//TODO: need to calculate scores out of 50? and add to array returned
		NeuroSensationRootValueVo voCollFinding;
		//Variables used as counters (if >=0) or as flags (if == -1) 
		int left  = -1, right = -1;
		//Variables mutually exclusive - for promoting reuse and for an easier debug
		boolean bLightTouch, bGreenPrick;
		
		for(int i=0;i<voCollFindings.size();i++)
		{
			voCollFinding = voCollFindings.get(i);
			bLightTouch = !bPinPrick && voCollFinding.getSensationType().equals(MSKSenstionModality.LIGHTTOUCH);
			bGreenPrick = bPinPrick  && voCollFinding.getSensationType().equals(MSKSenstionModality.PINPRICK);
			
			if(bLightTouch || bGreenPrick)
			{
				if(voCollFinding.getLeftFinding() != null)
				{
					//assign 0 to "left" variable -1
					left  = (left==-1?0:left);
					left += voCollFinding.getLeftFinding().intValue()==-1?0:voCollFinding.getLeftFinding().intValue();
				}
				
				if(voCollFinding.getRightFinding() != null)
				{
					//set the 0 to "right" variable if -1
					right = (right==-1?0:right);
					right += voCollFinding.getRightFinding().intValue()==-1?0:voCollFinding.getRightFinding().intValue();
				}
			}
		}
		
		return new String[]{(left!=-1?String.valueOf(left):""),(right!=-1?String.valueOf(right):"")};
	}
	

	private void loadFindingsGrids() 
	{
		VertebrallevelVoCollection voCollVertebral = domain.listVertebralLevel(Boolean.TRUE);	
		VertebrallevelVo voVertebralItem = null;
		GenForm.grdLightTouchRow lRow = null;
		GenForm.grdPinPrickRow pRow = null;
		for(int i=0; i<voCollVertebral.size();i++)
		{
			voVertebralItem = voCollVertebral.get(i);

			lRow = form.grdLightTouch().getRows().newRow();
			lRow.setcolRootVal(voVertebralItem.getName());
			lRow.setValue(voVertebralItem);
			lRow.setIdentifier(null);
			
			pRow = form.grdPinPrick().getRows().newRow();
			pRow.setcolRootVal(voVertebralItem.getName());
			pRow.setValue(voVertebralItem);
			pRow.setIdentifier(null);	
		}
		
		if(voCollVertebral.size() > 0)
		{
			lRow = form.grdLightTouch().getRows().newRow();
			lRow.setcolRootVal("Total");	
			lRow.setSelectable(false);
			lRow.setReadOnly(true);
			lRow.setBackColor(Color.Beige);
			
			pRow = form.grdPinPrick().getRows().newRow();
			pRow.setcolRootVal("Total");	
			pRow.setSelectable(false);
			pRow.setReadOnly(true);
			pRow.setBackColor(Color.Beige);
		}
	}

	private void clearScreen() 
	{
		form.ccAuthoring().setValue(null);		
		form.grdLightTouch().getRows().clear();
		form.grdPinPrick().getRows().clear();
		form.lyr1().tabDetails().cmbFrankelGrade().setValue(null);
		form.lyr1().tabDetails().cmbLeftSensLevel().setValue(null);
		form.lyr1().tabDetails().cmbRightSensLevel().setValue(null);
	}

	private void populateContactInfo(NeuroSenastionFindingsVo voNeuroSenastionFindings) 
	{
		if(voNeuroSenastionFindings != null && voNeuroSenastionFindings.getAuthoringCPIsNotNull())
		{
			//WDEV-15172
			AuthoringInformationVo authoringInfo = new AuthoringInformationVo(); 
			authoringInfo.setAuthoringHcp(voNeuroSenastionFindings.getAuthoringCP());
			authoringInfo.setAuthoringDateTime(voNeuroSenastionFindings.getAuthoringDateTime());
			form.ccAuthoring().setValue(authoringInfo);
			
			return;
		}
		
		if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
		{
			ClinicalContactShortVo voClinicalContactShort = form.getGlobalContext().Core.getCurrentClinicalContact();
			
			if(voClinicalContactShort != null)
			{
				if(voClinicalContactShort.getStartDateTimeIsNotNull())
				{
					form.ccAuthoring().initializeComponent(false); //WDEV-15172 
				}
			}
		}
	}

	private void loadVertebralCombos() 
	{
		form.lyr1().tabDetails().cmbLeftSensLevel().clear();
		form.lyr1().tabDetails().cmbRightSensLevel().clear();

		VertebrallevelVoCollection voCollVertebral = domain.listVertebralLevel(Boolean.TRUE);	
		for(int i=0;i<voCollVertebral.size();i++)
		{
			form.lyr1().tabDetails().cmbLeftSensLevel().newRow(voCollVertebral.get(i), voCollVertebral.get(i).getName());
			form.lyr1().tabDetails().cmbRightSensLevel().newRow(voCollVertebral.get(i), voCollVertebral.get(i).getName());
		}		
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.lblBrowseStatus().setValue("Creating new record");
		
		NeuroSensationExaminationVo voNeuroSensation = new NeuroSensationExaminationVo();
		NeuroSenastionFindingsVo voNeuroFindings = new NeuroSenastionFindingsVo();
		//if(engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroSensation))
		//	voNeuroFindings.setClinicalContact(form.getGlobalContext().SpinalInjuries.getMedicalAdmissionContact());
		//else
		
		voNeuroFindings.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		voNeuroFindings.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voNeuroSensation.setNeuroSens(voNeuroFindings);
		
		form.getLocalContext().setSensationRecord(voNeuroSensation);
		
		if(engine.getFormName().equals(form.getForms().SpinalInjuries.MedNeuroSensationInpatient))
		{			
			clearScreen();
			loadFindingsGrids();
			
			form.ccAuthoring().initializeComponent(true); //WDEV-15172
		}
	}
	
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validUpdate())
		{
			form.setMode(FormMode.EDIT);
			setUpdatedRecord();
		}
	}
	private void setUpdatedRecord()
	{
		if(form.recbrSensation().getValue() != null)
		{
			form.getLocalContext().setUpdatedInstance(form.recbrSensation().getValue());
		}
	}
	
	private boolean validUpdate()
	{
		if(form.getLocalContext().getSensationRecord() == null)
		{
			engine.showMessage("Please select a record to update");
			return false;
		}
		return true;
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		NeuroSensationExaminationVo voSensExam = form.getLocalContext().getSensationRecord();
	
		if(!validateInput())
			return;
			
		populateDataFromScreen(voSensExam);
		
		String[] arrErrors = voSensExam.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		try 
		{
			form.getLocalContext().setSensationRecord(domain.saveNeuroSensationRecord(voSensExam));
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		catch (DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		open();	
	}
	
	private void populateDataFromScreen(NeuroSensationExaminationVo voSensExam) 
	{
		NeuroSenastionFindingsVo voFindings = voSensExam.getNeuroSens();
		if(voFindings == null)
			voFindings = new NeuroSenastionFindingsVo();
		
		voFindings.setAuthoringDateTime(form.ccAuthoring().getValue().getAuthoringDateTime());
		voFindings.setAuthoringCP(form.ccAuthoring().getValue().getAuthoringHcp());
		
		if((voFindings.getIsProblem() == null && form.lyr1().tabDetails().chkProblem().getValue() == true) || 
		(voFindings.getIsProblem() != null &&  voFindings.getIsProblem().equals(Boolean.FALSE) && form.lyr1().tabDetails().chkProblem().getValue() == true))
		{
			MedicalProbOnAdmisVo voProblem = new MedicalProbOnAdmisVo();
			voProblem.setPatientProblem("Sensation Function Abnormality");
			voProblem.setIsActive(Boolean.TRUE);
			voProblem.setProblemContext("Neuro - Sensation");	
			voProblem.setCareContext(form.getGlobalContext().Core.getCurrentCareContext()); 
			voProblem.setClinicalContact(voFindings.getClinicalContact());
			voSensExam.setProblem(voProblem);
		}
		else	
			voSensExam.setProblem(null);
				
		voFindings.setIsProblem(new Boolean(form.lyr1().tabDetails().chkProblem().getValue()));
		voFindings.setLeftSensoryLevel(form.lyr1().tabDetails().cmbLeftSensLevel().getValue());
		voFindings.setRightSensoryLevel(form.lyr1().tabDetails().cmbRightSensLevel().getValue());
		voFindings.setFrankleGrade(form.lyr1().tabDetails().cmbFrankelGrade().getValue());
		voFindings.setRootfinding(populateFindingsDataFromGrid());
		voSensExam.setNeuroSens(voFindings);	
	}

	private NeuroSensationRootValueVoCollection populateFindingsDataFromGrid() 
	{	
		NeuroSensationRootValueVoCollection voCollSensRoot = new NeuroSensationRootValueVoCollection();
		NeuroSensationRootValueVo voSensRootItem = null;
		
		GenForm.grdPinPrickRow pRow = null;
		for(int i=0;i<form.grdPinPrick().getRows().size();i++)
		{
			//we dont want to work on the total Row
			if(i == form.grdPinPrick().getRows().size() - 1)
				break;
				
			pRow = form.grdPinPrick().getRows().get(i);	
			
			voSensRootItem = pRow.getIdentifier();
			if(voSensRootItem == null)	
				voSensRootItem = new NeuroSensationRootValueVo();
				
			voSensRootItem.setRootValue(pRow.getValue());

			voSensRootItem.setLeftFinding(getFindingValue(pRow.getcolLeft()	  != null?pRow.getcolLeft().trim() :""));
			voSensRootItem.setRightFinding(getFindingValue(pRow.getcolRight() != null?pRow.getcolRight().trim():""));
			voSensRootItem.setSensationType(MSKSenstionModality.PINPRICK);
			voCollSensRoot.add(voSensRootItem);	
		}
		
		GenForm.grdLightTouchRow lRow = null;
		for(int i=0;i<form.grdLightTouch().getRows().size();i++)
		{
			//we dont want to work on the total Row
			if(i == form.grdLightTouch().getRows().size() - 1)
				break;
				
			lRow = form.grdLightTouch().getRows().get(i);	
			
			voSensRootItem = lRow.getIdentifier();
			if(voSensRootItem == null)	
				voSensRootItem = new NeuroSensationRootValueVo();
				
			voSensRootItem.setRootValue(lRow.getValue());

			voSensRootItem.setLeftFinding(getFindingValue(lRow.getcolLeft()   != null?lRow.getcolLeft().trim() :""));
			voSensRootItem.setRightFinding(getFindingValue(lRow.getcolRight() != null?lRow.getcolRight().trim():""));
			voSensRootItem.setSensationType(MSKSenstionModality.LIGHTTOUCH);
			voCollSensRoot.add(voSensRootItem);	
		}

		return voCollSensRoot;
	}

	private boolean validateInput() 
	{
		
		if (form.ccAuthoring().getValue() == null) //WDEV-15172
		{
			engine.showMessage(form.ccAuthoring().getErrors());
			return false;
		}
		
		GenForm.grdPinPrickRow pRow = null;
		for(int i=0;i<form.grdPinPrick().getRows().size();i++)
		{
			//we dont want to work on the total Row
			if(i == form.grdPinPrick().getRows().size() -1)
				break;
				
			pRow = form.grdPinPrick().getRows().get(i);
			
			if(!validateString(pRow.getcolLeft()) || !validateString(pRow.getcolRight()))
			{
				engine.showMessage("Please enter only scores from 0-2 or 'N' - allowed values listed on the right of the screen");
				return false;
			}			
		}

		GenForm.grdLightTouchRow lRow = null;
		for(int i=0;i<form.grdLightTouch().getRows().size();i++)
		{
			//we dont want to work on the total Row
			if(i == form.grdLightTouch().getRows().size() -1)
				break;
				
			lRow = form.grdLightTouch().getRows().get(i);
			
			if(!validateString(lRow.getcolLeft()) || !validateString(lRow.getcolRight()))
			{
				engine.showMessage("Please enter only scores from 0-2 or 'N' - allowed values listed on the left of the screen");
				return false;
			}	
		}

		return true;
	}
	
	private boolean validateString(String strVal)
	{
		if(strVal != null && !strVal.trim().equals(""))
		{
			strVal = strVal.trim();
			if(!strVal.equals("0") && !strVal.equals("1") && !strVal.equals("2") && !strVal.equalsIgnoreCase("N"))
			{
				return false;
			}
		}		
		return true;
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSensationRecord(null);
		form.getLocalContext().setUpdatedInstance(null);
		open();
	}
	
	protected void onBtnOkClick() throws PresentationLogicException 
	{
		form.lyr1().showtabDetails();
		form.lnkMannequinn().setEnabled(true);
	}

	protected void onLnkMannequinnClick() throws PresentationLogicException 
	{
		form.lyr1().showtabMannequinn();
		form.lnkMannequinn().setEnabled(false);
	}

	//calculates the Integer value of the finding - if digit returns its value, 0 for the rest 
	private Integer getFindingValue(String value)
	{
		Integer nValue = null;
		if(value != null && value.length() > 0)
		{
			char ch = value.charAt(0);
			if(Character.isDigit(ch))
				nValue = Integer.valueOf(Character.toString(ch));
			//add extra logic if necessary
			else if (Character.isLetter(ch) && String.valueOf(ch).equalsIgnoreCase("N"))
				nValue = new Integer(-1);
		}
		
		return nValue;
	}

	protected void onRecbrSensationValueChanged() throws PresentationLogicException
	{
		browseRecord();
	}

	private void browseRecord()
	{
		clearScreen();
		loadFindingsGrids();
		
		updateBrowseInformation();
		
		if(form.recbrSensation().getValue() != null)
		{			
			if(form.recbrSensation().getValue() instanceof ClinicalContactShortVo)
			{
				//form.getLocalContext().setSensationRecord(domain.getNeuroSensationRecord((ClinicalContactShortVo) form.recbrSensation().getValue(), null));
				
				//wdev-13418
				MedicalProbOnAdmisVo medProbVo = domain.getPatientProblemByClinicalContact((ClinicalContactShortVo) form.recbrSensation().getValue());
				NeuroSenastionFindingsVoCollection neuroSensColl = domain.getNeuroSensationRecordCollByClinCont((ClinicalContactShortVo) form.recbrSensation().getValue(), null);
				NeuroSensationExaminationVo tempVo = new NeuroSensationExaminationVo();
				tempVo.setProblem(medProbVo);
				if(neuroSensColl != null && neuroSensColl.size() > 0)
					tempVo.setNeuroSens(neuroSensColl.get(0));
				
				
				form.getLocalContext().setSensationRecord(tempVo);
				//---------------
			}
			else if(form.recbrSensation().getValue() instanceof NeuroSensationFindingsShortVo)
			{
				NeuroSensationFindingsShortVo voSensationFindings = (NeuroSensationFindingsShortVo) form.recbrSensation().getValue();
				
				if(voSensationFindings.getClinicalContact() == null)
				{
					//form.getLocalContext().setSensationRecord(domain.getNeuroSensationByCareContext(voSensationFindings.getCareContext(), voSensationFindings));
					//wdev-13418
					MedicalProbOnAdmisVo medProbVo = domain.getPatientProblemByCareContext(voSensationFindings.getCareContext());
					NeuroSenastionFindingsVoCollection neuroSensColl = domain.getNeuroSensationCollByCareContext(voSensationFindings.getCareContext(), voSensationFindings);
					NeuroSensationExaminationVo tempVo = new NeuroSensationExaminationVo();
					tempVo.setProblem(medProbVo);
					if(neuroSensColl != null && neuroSensColl.size() > 0)
						tempVo.setNeuroSens(neuroSensColl.get(0));
					
					
					form.getLocalContext().setSensationRecord(tempVo);
					//---------------
				}
				else
				{
					//form.getLocalContext().setSensationRecord(domain.getNeuroSensationRecord(voSensationFindings.getClinicalContact(), voSensationFindings));
					//wdev-13418
					MedicalProbOnAdmisVo medProbVo = domain.getPatientProblemByClinicalContact(voSensationFindings.getClinicalContact());
					NeuroSenastionFindingsVoCollection neuroSensColl = domain.getNeuroSensationRecordCollByClinCont(voSensationFindings.getClinicalContact(), voSensationFindings);
					NeuroSensationExaminationVo tempVo = new NeuroSensationExaminationVo();
					tempVo.setProblem(medProbVo);
					if(neuroSensColl != null && neuroSensColl.size() > 0)
						tempVo.setNeuroSens(neuroSensColl.get(0));
					
					
					form.getLocalContext().setSensationRecord(tempVo);
					//---------------
				}
			}
			else
			{
				//form.getLocalContext().setSensationRecord(domain.getNeuroSensationByCareContext((CareContextLiteVo) form.recbrSensation().getValue(), null));
				//wdev-13418
				MedicalProbOnAdmisVo medProbVo = domain.getPatientProblemByCareContext((CareContextLiteVo) form.recbrSensation().getValue());
				NeuroSenastionFindingsVoCollection neuroSensColl = domain.getNeuroSensationCollByCareContext((CareContextLiteVo) form.recbrSensation().getValue(), null);
				NeuroSensationExaminationVo tempVo = new NeuroSensationExaminationVo();
				tempVo.setProblem(medProbVo);
				if(neuroSensColl != null && neuroSensColl.size() > 0)
					tempVo.setNeuroSens(neuroSensColl.get(0));
				
				
				form.getLocalContext().setSensationRecord(tempVo);
				//---------------
			}
			populateScreenFromData();
		}
		checkRecordIsEditable();
	}

	private void checkRecordIsEditable()
	{
		if(form.recbrSensation().getValue() != null)
		{
			CareContextShortVo voCurrentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
			ClinicalContactShortVo voCurrentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			
			if(form.recbrSensation().getValue() instanceof CareContextShortVo)		//wdev-13064
			{
				CareContextShortVo voSelectedCareContext = (CareContextShortVo) form.recbrSensation().getValue();
				if(voSelectedCareContext.getID_CareContext().equals(voCurrentCareContext.getID_CareContext()) && form.getGlobalContext().Core.getCurrentClinicalContact() == null)
					activateButtons(true);
				else
					activateButtons(false);
			}
			else if(form.recbrSensation().getValue() instanceof NeuroSensationFindingsShortVo)
			{
				NeuroSensationFindingsShortVo voNeuroSensation = (NeuroSensationFindingsShortVo) form.recbrSensation().getValue();
				if(voNeuroSensation.getClinicalContact()== null)
				{
					CareContextRefVo voSelectedCareContext = voNeuroSensation.getCareContext();
					if(voSelectedCareContext.getID_CareContext().equals(voCurrentCareContext.getID_CareContext()) && form.getGlobalContext().Core.getCurrentClinicalContact() == null)
					{
						activateButtons(true);
					}
					else
						activateButtons(false);
				}
				else
				{
					
					ClinicalContactShortVo voSelectedClinicalContact = voNeuroSensation.getClinicalContact();
					if(voCurrentClinicalContact != null)
					{
						if(voSelectedClinicalContact.getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
						{
							activateButtons(true);
							form.btnNew().setEnabled(false);
						}
						else
							activateButtons(false);
					}
					if(voSelectedClinicalContact!=null)
						form.btnNew().setEnabled(false);
						
				}
			}
			else
			{
				ClinicalContactShortVo voSelectedClinicalContact = (ClinicalContactShortVo) form.recbrSensation().getValue();
				if(voCurrentClinicalContact != null)
				{
					if(voSelectedClinicalContact.getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
						activateButtons(true);
					else
						activateButtons(false);
				}
				else
					activateButtons(false);
				
				//Disable new if record exists for clinical contact
				if(form.getLocalContext().getSensationRecordIsNotNull() && form.getLocalContext().getSensationRecord().getNeuroSensIsNotNull() && voCurrentClinicalContact!=null){
					NeuroSenastionFindingsVo voNeuroSens = form.getLocalContext().getSensationRecord().getNeuroSens();
					if(voNeuroSens.getClinicalContactIsNotNull() && voNeuroSens.getClinicalContact().getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
						form.btnNew().setEnabled(false);
				}
			}
		}
		checkForSensationRecord();
		isRecordOfTypeMedicalAdmission();
	}

	private void isRecordOfTypeMedicalAdmission()
	{
		ClinicalContactShortVo voCurrentClinical = form.getGlobalContext().Core.getCurrentClinicalContact();
		if(voCurrentClinical != null)
		{
			if(voCurrentClinical.getContactType().equals(ContactType.SPINALMEDICALADMISSION))
				activateButtons(false);
		}
	}

	private void checkForSensationRecord()
	{
		if(form.getLocalContext().getSensationRecordIsNotNull())
		{
			if(form.getLocalContext().getSensationRecord().getNeuroSens() == null)
				form.btnUpdate().setVisible(false);
		}
	}

	private void updateBrowseInformation()
	{
		form.lblBrowseStatus().setValue(form.recbrSensation().getRecordState("Assessment", "Assessments"));	
	}

	protected void onFormModeChanged()
	{
		if(form.getMode().equals(FormMode.VIEW))
			form.recbrSensation().setEnabled(true);
		else
			form.recbrSensation().setEnabled(false);
		
		//WDEV-15172
		form.ccAuthoring().setEnabledAuthoringHCP(form.getMode().equals(FormMode.EDIT) && form.getLocalContext().getIsMedicalInpatientForm());
		form.ccAuthoring().setEnabledDateTime(form.getMode().equals(FormMode.EDIT) && form.getLocalContext().getIsMedicalInpatientForm());
	}


}
