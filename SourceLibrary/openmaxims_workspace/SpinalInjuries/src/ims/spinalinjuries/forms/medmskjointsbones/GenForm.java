//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.medmskjointsbones;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbGroupComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.MskGroupVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.MskGroupVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.MskGroupVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.MskGroupVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.MskGroupVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.MskGroupVo getValue()
		{
			return (ims.core.vo.MskGroupVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.MskGroupVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbFilterByComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(String value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(String value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(String value)
		{
			return super.control.removeRow(value);
		}
		public String getValue()
		{
			return (String)super.control.getValue();
		}
		public void setValue(String value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbJBComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(java.lang.Object  value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(java.lang.Object  value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(java.lang.Object  value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(java.lang.Object  value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(java.lang.Object  value)
		{
			return super.control.removeRow(value);
		}
		public java.lang.Object  getValue()
		{
			return (java.lang.Object )super.control.getValue();
		}
		public void setValue(java.lang.Object  value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbLateralityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.LateralityLRonly value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.LateralityLRonly value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.LateralityLRonly getValue()
		{
			return (ims.core.vo.lookups.LateralityLRonly)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.LateralityLRonly value)
		{
			super.control.setValue(value);
		}
	}
	public static class recbrJointBoneRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.ValueObject value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.control.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdIndexRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdIndexRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolJBReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolJBReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolJBOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolJB()
		{
			return (String)super.row.get(0);
		}
		public void setcolJB(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolJBTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolLateralityReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolLateralityReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolLateralityOpened()
		{
			super.row.showOpened(1);
		}
		public ims.core.vo.lookups.LateralityLRonly getcolLaterality()
		{
			return (ims.core.vo.lookups.LateralityLRonly)super.row.get(1);
		}
		public void setcolLaterality(ims.core.vo.lookups.LateralityLRonly value)
		{
			super.row.set(1, value, true);
		}
		public void setCellcolLateralityTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.generalmedical.vo.MskExamJointBonesDetailVo getValue()
		{
			return (ims.generalmedical.vo.MskExamJointBonesDetailVo)super.row.getValue();
		}
		public void setValue(ims.generalmedical.vo.MskExamJointBonesDetailVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdIndexRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdIndexRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdIndexRow get(int index)
		{
			return new grdIndexRow(super.collection.get(index));
		}
		public grdIndexRow newRow()
		{
			return new grdIndexRow(super.collection.newRow());
		}
		public grdIndexRow newRow(boolean autoSelect)
		{
			return new grdIndexRow(super.collection.newRow(autoSelect));
		}
		public grdIndexRow newRowAt(int index)
		{
			return new grdIndexRow(super.collection.newRowAt(index));
		}
		public grdIndexRow newRowAt(int index, boolean autoSelect)
		{
			return new grdIndexRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdIndexGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public ims.generalmedical.vo.MskExamJointBonesDetailVoCollection getValues()
		{
			ims.generalmedical.vo.MskExamJointBonesDetailVoCollection listOfValues = new ims.generalmedical.vo.MskExamJointBonesDetailVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.generalmedical.vo.MskExamJointBonesDetailVo getValue()
		{
			return (ims.generalmedical.vo.MskExamJointBonesDetailVo)super.grid.getValue();
		}
		public void setValue(ims.generalmedical.vo.MskExamJointBonesDetailVo value)
		{
			super.grid.setValue(value);
		}
		public grdIndexRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdIndexRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdIndexRowCollection getRows()
		{
			return new grdIndexRowCollection(super.grid.getRows());
		}
		public grdIndexRow getRowByValue(ims.generalmedical.vo.MskExamJointBonesDetailVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdIndexRow(row);
		}
		public void setcolJBHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolJBHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolLateralityHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolLateralityHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox colLateralityComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
	}
	public static class grdMovementsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMovementsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolMovementIdReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolMovementIdReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolMovementIdOpened()
		{
			super.row.showOpened(0);
		}
		public Integer getcolMovementId()
		{
			return (Integer)super.row.get(0);
		}
		public void setcolMovementId(Integer value)
		{
			super.row.set(0, value);
		}
		public void setCellcolMovementIdTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setMovementsReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isMovementsReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showMovementsOpened()
		{
			super.row.showOpened(1);
		}
		public String getMovements()
		{
			return (String)super.row.get(1);
		}
		public void setMovements(String value)
		{
			super.row.set(1, value);
		}
		public void setCellMovementsTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolFindingReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolFindingReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolFindingOpened()
		{
			super.row.showOpened(2);
		}
		public ims.spinalinjuries.vo.lookups.MskBonesJointFindings getcolFinding()
		{
			return (ims.spinalinjuries.vo.lookups.MskBonesJointFindings)super.row.get(2);
		}
		public void setcolFinding(ims.spinalinjuries.vo.lookups.MskBonesJointFindings value)
		{
			super.row.set(2, value, true);
		}
		public void setCellcolFindingTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolSorReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolSorReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolSorOpened()
		{
			super.row.showOpened(3);
		}
		public Integer getcolSor()
		{
			return (Integer)super.row.get(3);
		}
		public void setcolSor(Integer value)
		{
			super.row.set(3, value);
		}
		public void setCellcolSorTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolEorReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolEorReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolEorOpened()
		{
			super.row.showOpened(4);
		}
		public Integer getcolEor()
		{
			return (Integer)super.row.get(4);
		}
		public void setcolEor(Integer value)
		{
			super.row.set(4, value);
		}
		public void setCellcolEorTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.core.vo.MskJointMovementVo getValue()
		{
			return (ims.core.vo.MskJointMovementVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.MskJointMovementVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdMovementsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMovementsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMovementsRow get(int index)
		{
			return new grdMovementsRow(super.collection.get(index));
		}
		public grdMovementsRow newRow()
		{
			return new grdMovementsRow(super.collection.newRow());
		}
		public grdMovementsRow newRow(boolean autoSelect)
		{
			return new grdMovementsRow(super.collection.newRow(autoSelect));
		}
		public grdMovementsRow newRowAt(int index)
		{
			return new grdMovementsRow(super.collection.newRowAt(index));
		}
		public grdMovementsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMovementsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMovementsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		public ims.core.vo.MskJointMovementVo[] getValues()
		{
			ims.core.vo.MskJointMovementVo[] listOfValues = new ims.core.vo.MskJointMovementVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.core.vo.MskJointMovementVo getValue()
		{
			return (ims.core.vo.MskJointMovementVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.MskJointMovementVo value)
		{
			super.grid.setValue(value);
		}
		public grdMovementsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMovementsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMovementsRowCollection getRows()
		{
			return new grdMovementsRowCollection(super.grid.getRows());
		}
		public grdMovementsRow getRowByValue(ims.core.vo.MskJointMovementVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMovementsRow(row);
		}
		public void setcolMovementIdHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolMovementIdHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setMovementsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getMovementsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolFindingHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolFindingHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public GridComboBox colFindingComboBox()
		{
			return new GridComboBox(super.grid, 2);
		}
		public void setcolSorHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolSorHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolEorHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolEorHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuJointsBones = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuJointsBonesNewItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuJointsBones.add(contextMenus.contextMenuJointsBonesNewItem);
		contextMenus.contextMenuJointsBonesADDItem = factory.createMenuItem(startControlID.intValue() + 2, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuJointsBones.add(contextMenus.contextMenuJointsBonesADDItem);
		contextMenus.contextMenuJointsBonesUPDATEItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuJointsBones.add(contextMenus.contextMenuJointsBonesUPDATEItem);
		form.registerMenu(contextMenus.contextMenuJointsBones);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 392, 96, 448, 496, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Details", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 14, 36, 386, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_ccAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 4, skipContextValidation);
		//ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(14), new Integer(36), new Integer(386), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4), m_ccAuthoringForm, instance1 } );
		ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 4), m_ccAuthoringForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccAuthoringControl);
		Menu[] menus1 = m_ccAuthoringForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 728, 40, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<Browse Status>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 400, 200, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Findings:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 408, 120, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Group:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 146, 23, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Filter By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 408, 168, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 400, 464, 201, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Ligaments / Tests / Special Notes:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 400, 538, 90, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Interpretation:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 408, 144, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Joint / Bone:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 680, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 768, 560, 64, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Clear", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 696, 560, 64, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Add/Apply", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 504, 536, 328, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 400, 480, 432, 48, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(200), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 504, 120, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbGroupTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbGroupTemp);
		cmbGroupComboBox cmbGroup = (cmbGroupComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGroupComboBox.class, m_cmbGroupTemp);
		super.addComboBox(cmbGroup);
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 208, 21, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbFilterByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.HIDDEN, ControlState.HIDDEN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFilterByTemp);
		cmbFilterByComboBox cmbFilterBy = (cmbFilterByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFilterByComboBox.class, m_cmbFilterByTemp);
		super.addComboBox(cmbFilterBy);
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 504, 144, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbJBTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbJBTemp);
		cmbJBComboBox cmbJB = (cmbJBComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbJBComboBox.class, m_cmbJBTemp);
		super.addComboBox(cmbJB);
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 504, 168, 312, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLateralityTemp);
		cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
		super.addComboBox(cmbLaterality);

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 24, 16, 808, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrJointBoneTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrJointBoneTemp);
		recbrJointBoneRecordBrowser recbrJointBone = (recbrJointBoneRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrJointBoneRecordBrowser.class, m_recbrJointBoneTemp);
		super.addRecordBrowser(recbrJointBone);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 400, 571, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Add to Problems", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 96, 368, 496, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdIndexTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuJointsBones, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdIndexTemp);
		grdIndexGrid grdIndex = (grdIndexGrid)GridFlyweightFactory.getInstance().createGridBridge(grdIndexGrid.class, m_grdIndexTemp);
		grdIndex.addStringColumn("Joint \\ Bone", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdIndex.addComboBoxColumn("Laterality", 0, 0, -1, true, true, false, false, true, -1);
		super.addGrid(grdIndex);
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 400, 344, 432, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdMovementsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdMovementsTemp);
		grdMovementsGrid grdMovements = (grdMovementsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMovementsGrid.class, m_grdMovementsTemp);
		grdMovements.addIntColumn("MovementId", 0, 0, 0, false, true, null, false, 0, true);
		grdMovements.addStringColumn("Movements", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMovements.addComboBoxColumn("Finding", 0, 0, 150, false, true, false, false, true, -1);
		grdMovements.addIntColumn("SOR", 0, 0, 40, false, true, null, false, 0, true);
		grdMovements.addIntColumn("EOR", 0, 0, -1, false, true, null, false, 0, true);
		super.addGrid(grdMovements);

		// Tree Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 400, 216, 432, 120, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public Panel pnlJoints()
	{
		return (Panel)super.getControl(0);
	}
	public ims.core.forms.authoringinfo.IComponent ccAuthoring()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
	}
	public void setccAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
	}
	public void setccAuthoringVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setVisible(value);
	}
	public boolean isccAuthoringVisible()
	{
		return ((ims.framework.Control)super.getControl(2)).isVisible();
	}
	public void setccAuthoringEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setEnabled(value);
	}
	public boolean isccAuthoringEnabled()
	{
		return ((ims.framework.Control)super.getControl(2)).isEnabled();
	}
	public Label lblBrowseStatus()
	{
		return (Label)super.getControl(3);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(11);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(12);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(13);
	}
	public Button btnClear()
	{
		return (Button)super.getControl(14);
	}
	public Button btnOk()
	{
		return (Button)super.getControl(15);
	}
	public TextBox txtInterpret()
	{
		return (TextBox)super.getControl(16);
	}
	public TextBox txtLigSpecTests()
	{
		return (TextBox)super.getControl(17);
	}
	public cmbGroupComboBox cmbGroup()
	{
		return (cmbGroupComboBox)super.getComboBox(0);
	}
	public cmbFilterByComboBox cmbFilterBy()
	{
		return (cmbFilterByComboBox)super.getComboBox(1);
	}
	public cmbJBComboBox cmbJB()
	{
		return (cmbJBComboBox)super.getComboBox(2);
	}
	public cmbLateralityComboBox cmbLaterality()
	{
		return (cmbLateralityComboBox)super.getComboBox(3);
	}
	public recbrJointBoneRecordBrowser recbrJointBone()
	{
		return (recbrJointBoneRecordBrowser)super.getRecordBrowser(0);
	}
	public CheckBox chkProblem()
	{
		return (CheckBox)super.getControl(23);
	}
	public grdIndexGrid grdIndex()
	{
		return (grdIndexGrid)super.getGrid(0);
	}
	public grdMovementsGrid grdMovements()
	{
		return (grdMovementsGrid)super.getGrid(1);
	}
	public TreeView treGeneralFindings()
	{
		return (TreeView)super.getControl(26);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			SpinalInjuries = new SpinalInjuriesForms();
		}
		public final class SpinalInjuriesForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SpinalInjuriesForms()
			{
				MedMskJointsBonesInpatient = new LocalFormName(105158);
				MedMskJointsBones = new LocalFormName(105106);
				MedMskJointsBonesDialog = new LocalFormName(105152);
			}
			public final FormName MedMskJointsBonesInpatient;
			public final FormName MedMskJointsBones;
			public final FormName MedMskJointsBonesDialog;
		}

		public SpinalInjuriesForms SpinalInjuries;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedChildInstance = new ims.framework.ContextVariable("SelectedChildInstance", prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedChildInstance_" + componentIdentifier + "");
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_UpdatedInstance = new ims.framework.ContextVariable("UpdatedInstance", prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__UpdatedInstance_" + componentIdentifier + "");
			cxl_IsMedicalInpatientForm = new ims.framework.ContextVariable("IsMedicalInpatientForm", prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__IsMedicalInpatientForm_" + componentIdentifier + "");
			cxl_bMedicalAdmissionContactSelected = new ims.framework.ContextVariable("bMedicalAdmissionContactSelected", prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__bMedicalAdmissionContactSelected_" + componentIdentifier + "");
			cxl_UpdatedChildInstance = new ims.framework.ContextVariable("UpdatedChildInstance", prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__UpdatedChildInstance_" + componentIdentifier + "");
		}
		
		public boolean getSelectedChildInstanceIsNotNull()
		{
			return !cxl_SelectedChildInstance.getValueIsNull(context);
		}
		public ims.generalmedical.vo.MskExamJointBonesDetailVo getSelectedChildInstance()
		{
			return (ims.generalmedical.vo.MskExamJointBonesDetailVo)cxl_SelectedChildInstance.getValue(context);
		}
		public void setSelectedChildInstance(ims.generalmedical.vo.MskExamJointBonesDetailVo value)
		{
			cxl_SelectedChildInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedChildInstance = null;
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.generalmedical.vo.MskBoneJointVo getSelectedRecord()
		{
			return (ims.generalmedical.vo.MskBoneJointVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.generalmedical.vo.MskBoneJointVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getUpdatedInstanceIsNotNull()
		{
			return !cxl_UpdatedInstance.getValueIsNull(context);
		}
		public ims.vo.ValueObject getUpdatedInstance()
		{
			return (ims.vo.ValueObject)cxl_UpdatedInstance.getValue(context);
		}
		public void setUpdatedInstance(ims.vo.ValueObject value)
		{
			cxl_UpdatedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedInstance = null;
		public boolean getIsMedicalInpatientFormIsNotNull()
		{
			return !cxl_IsMedicalInpatientForm.getValueIsNull(context);
		}
		public Boolean getIsMedicalInpatientForm()
		{
			return (Boolean)cxl_IsMedicalInpatientForm.getValue(context);
		}
		public void setIsMedicalInpatientForm(Boolean value)
		{
			cxl_IsMedicalInpatientForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsMedicalInpatientForm = null;
		public boolean getbMedicalAdmissionContactSelectedIsNotNull()
		{
			return !cxl_bMedicalAdmissionContactSelected.getValueIsNull(context);
		}
		public Boolean getbMedicalAdmissionContactSelected()
		{
			return (Boolean)cxl_bMedicalAdmissionContactSelected.getValue(context);
		}
		public void setbMedicalAdmissionContactSelected(Boolean value)
		{
			cxl_bMedicalAdmissionContactSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bMedicalAdmissionContactSelected = null;
		public boolean getUpdatedChildInstanceIsNotNull()
		{
			return !cxl_UpdatedChildInstance.getValueIsNull(context);
		}
		public ims.generalmedical.vo.MskExamJointBonesDetailVo getUpdatedChildInstance()
		{
			return (ims.generalmedical.vo.MskExamJointBonesDetailVo)cxl_UpdatedChildInstance.getValue(context);
		}
		public void setUpdatedChildInstance(ims.generalmedical.vo.MskExamJointBonesDetailVo value)
		{
			cxl_UpdatedChildInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedChildInstance = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class JointsBones implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 1;
			public static final int ADD = 2;
			public static final int UPDATE = 3;
		}
		public void disableAllJointsBonesMenuItems()
		{
			this.contextMenuJointsBonesNewItem.setEnabled(false);
			this.contextMenuJointsBonesADDItem.setEnabled(false);
			this.contextMenuJointsBonesUPDATEItem.setEnabled(false);
		}
		public void hideAllJointsBonesMenuItems()
		{
			this.contextMenuJointsBonesNewItem.setVisible(false);
			this.contextMenuJointsBonesADDItem.setVisible(false);
			this.contextMenuJointsBonesUPDATEItem.setVisible(false);
		}
		private Menu contextMenuJointsBones;
		public MenuItem getJointsBonesNewItem()
		{
			return this.contextMenuJointsBonesNewItem;
		}
		private MenuItem contextMenuJointsBonesNewItem;
		public MenuItem getJointsBonesADDItem()
		{
			return this.contextMenuJointsBonesADDItem;
		}
		private MenuItem contextMenuJointsBonesADDItem;
		public MenuItem getJointsBonesUPDATEItem()
		{
			return this.contextMenuJointsBonesUPDATEItem;
		}
		private MenuItem contextMenuJointsBonesUPDATEItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[87];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1072100035-ID", "ID_MSkExamJointBonesDetail");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1072100035-ISJOINT", "IsJoint");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1072100035-BONE", "Bone");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1072100035-LATERALITY", "Laterality");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1072100035-LIGAMENTSTESTS", "LigamentsTests");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1072100035-INTERPRETATION", "Interpretation");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedChildInstance_" + componentIdentifier, "BO-1072100035-ISPROBLEM", "IsProblem");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1031100003-ID", "ID_MskExamJointBones");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1031100003-AUTHORINGDATETIME", "AuthoringDateTime");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__UpdatedChildInstance_" + componentIdentifier, "BO-1072100035-ID", "ID_MSkExamJointBonesDetail");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__UpdatedChildInstance_" + componentIdentifier, "BO-1072100035-ISJOINT", "IsJoint");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__UpdatedChildInstance_" + componentIdentifier, "BO-1072100035-BONE", "Bone");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__UpdatedChildInstance_" + componentIdentifier, "BO-1072100035-LATERALITY", "Laterality");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__UpdatedChildInstance_" + componentIdentifier, "BO-1072100035-LIGAMENTSTESTS", "LigamentsTests");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__UpdatedChildInstance_" + componentIdentifier, "BO-1072100035-INTERPRETATION", "Interpretation");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedMskJointsBones.__internal_x_context__UpdatedChildInstance_" + componentIdentifier, "BO-1072100035-ISPROBLEM", "IsProblem");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
