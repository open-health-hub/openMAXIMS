//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.opdfertilityclinic;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class container1Container extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbScreenConsentComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.FCConsentForScreen value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCConsentForScreen value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCConsentForScreen value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCConsentForScreen value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.FCConsentForScreen value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.FCConsentForScreen getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCConsentForScreen)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCConsentForScreen value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSpermFrozenComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.FCSpermfrozen value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCSpermfrozen value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCSpermfrozen value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCSpermfrozen value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.FCSpermfrozen value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.FCSpermfrozen getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCSpermfrozen)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCSpermfrozen value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbELISAComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.FCElisa value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCElisa value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCElisa value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCElisa value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.FCElisa value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.FCElisa getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCElisa)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCElisa value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbAchieveErectionComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.FCAchieveErection value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCAchieveErection value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCAchieveErection value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCAchieveErection value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.FCAchieveErection value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.FCAchieveErection getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCAchieveErection)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCAchieveErection value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbMaritalStatusComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.MaritalStatus value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.MaritalStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.MaritalStatus value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.MaritalStatus getValue()
			{
				return (ims.core.vo.lookups.MaritalStatus)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.MaritalStatus value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSexualDriveComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.FCSexDrive value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCSexDrive value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCSexDrive value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCSexDrive value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.FCSexDrive value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.FCSexDrive getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCSexDrive)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCSexDrive value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbSemenCultureComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.FCSemenCulture value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCSemenCulture value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCSemenCulture value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCSemenCulture value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.FCSemenCulture value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.FCSemenCulture getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCSemenCulture)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCSemenCulture value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbEjaculationComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.FCEjaculation value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCEjaculation value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCEjaculation value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCEjaculation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.FCEjaculation value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.FCEjaculation getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCEjaculation)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCEjaculation value)
			{
				super.control.setValue(value);
			}
		}
		public static class cmbTestAtrophyComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.spinalinjuries.vo.lookups.FCTestAtrophy value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCTestAtrophy value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCTestAtrophy value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.spinalinjuries.vo.lookups.FCTestAtrophy value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.spinalinjuries.vo.lookups.FCTestAtrophy value)
			{
				return super.control.removeRow(value);
			}
			public ims.spinalinjuries.vo.lookups.FCTestAtrophy getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCTestAtrophy)super.control.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCTestAtrophy value)
			{
				super.control.setValue(value);
			}
		}
		public static class grdSpermRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdSpermRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolSpermReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolSpermReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolSpermOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.FCSemenAnalysis getcolSperm()
			{
				return (ims.spinalinjuries.vo.lookups.FCSemenAnalysis)super.row.get(0);
			}
			public void setcolSperm(ims.spinalinjuries.vo.lookups.FCSemenAnalysis value)
			{
				super.row.set(0, value);
			}
			public void setCellcolSpermTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolScoreReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolScoreReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolScoreOpened()
			{
				super.row.showOpened(1);
			}
			public Integer getcolScore()
			{
				return (Integer)super.row.get(1);
			}
			public void setcolScore(Integer value)
			{
				super.row.set(1, value);
			}
			public void setCellcolScoreTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.spinalinjuries.vo.lookups.FCSemenAnalysis getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCSemenAnalysis)super.row.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCSemenAnalysis value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdSpermRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdSpermRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdSpermRow get(int index)
			{
				return new grdSpermRow(super.collection.get(index));
			}
			public grdSpermRow newRow()
			{
				return new grdSpermRow(super.collection.newRow());
			}
			public grdSpermRow newRow(boolean autoSelect)
			{
				return new grdSpermRow(super.collection.newRow(autoSelect));
			}
			public grdSpermRow newRowAt(int index)
			{
				return new grdSpermRow(super.collection.newRowAt(index));
			}
			public grdSpermRow newRowAt(int index, boolean autoSelect)
			{
				return new grdSpermRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdSpermGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			public ims.spinalinjuries.vo.lookups.FCSemenAnalysis[] getValues()
			{
				ims.spinalinjuries.vo.lookups.FCSemenAnalysis[] listOfValues = new ims.spinalinjuries.vo.lookups.FCSemenAnalysis[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.spinalinjuries.vo.lookups.FCSemenAnalysis getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCSemenAnalysis)super.grid.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCSemenAnalysis value)
			{
				super.grid.setValue(value);
			}
			public grdSpermRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdSpermRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdSpermRowCollection getRows()
			{
				return new grdSpermRowCollection(super.grid.getRows());
			}
			public grdSpermRow getRowByValue(ims.spinalinjuries.vo.lookups.FCSemenAnalysis value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdSpermRow(row);
			}
			public void setcolSpermHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolSpermHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolScoreHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolScoreHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdSuccessMethodRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdSuccessMethodRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolMethodReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolMethodReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolMethodOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith getcolMethod()
			{
				return (ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith)super.row.get(0);
			}
			public void setcolMethod(ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith value)
			{
				super.row.set(0, value);
			}
			public void setCellcolMethodTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith)super.row.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdSuccessMethodRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdSuccessMethodRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdSuccessMethodRow get(int index)
			{
				return new grdSuccessMethodRow(super.collection.get(index));
			}
			public grdSuccessMethodRow newRow()
			{
				return new grdSuccessMethodRow(super.collection.newRow());
			}
			public grdSuccessMethodRow newRow(boolean autoSelect)
			{
				return new grdSuccessMethodRow(super.collection.newRow(autoSelect));
			}
			public grdSuccessMethodRow newRowAt(int index)
			{
				return new grdSuccessMethodRow(super.collection.newRowAt(index));
			}
			public grdSuccessMethodRow newRowAt(int index, boolean autoSelect)
			{
				return new grdSuccessMethodRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdSuccessMethodGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith[] getValues()
			{
				ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith[] listOfValues = new ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith)super.grid.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith value)
			{
				super.grid.setValue(value);
			}
			public grdSuccessMethodRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdSuccessMethodRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdSuccessMethodRowCollection getRows()
			{
				return new grdSuccessMethodRowCollection(super.grid.getRows());
			}
			public grdSuccessMethodRow getRowByValue(ims.spinalinjuries.vo.lookups.FCmethodsSuccessWith value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdSuccessMethodRow(row);
			}
			public void setcolMethodHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolMethodHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdBladDrainageRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdBladDrainageRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolDrainageTypeReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolDrainageTypeReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolDrainageTypeOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.FCBladderDrainage getcolDrainageType()
			{
				return (ims.spinalinjuries.vo.lookups.FCBladderDrainage)super.row.get(0);
			}
			public void setcolDrainageType(ims.spinalinjuries.vo.lookups.FCBladderDrainage value)
			{
				super.row.set(0, value);
			}
			public void setCellcolDrainageTypeTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.spinalinjuries.vo.lookups.FCBladderDrainage getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCBladderDrainage)super.row.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCBladderDrainage value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdBladDrainageRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdBladDrainageRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdBladDrainageRow get(int index)
			{
				return new grdBladDrainageRow(super.collection.get(index));
			}
			public grdBladDrainageRow newRow()
			{
				return new grdBladDrainageRow(super.collection.newRow());
			}
			public grdBladDrainageRow newRow(boolean autoSelect)
			{
				return new grdBladDrainageRow(super.collection.newRow(autoSelect));
			}
			public grdBladDrainageRow newRowAt(int index)
			{
				return new grdBladDrainageRow(super.collection.newRowAt(index));
			}
			public grdBladDrainageRow newRowAt(int index, boolean autoSelect)
			{
				return new grdBladDrainageRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdBladDrainageGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.spinalinjuries.vo.lookups.FCBladderDrainage[] getValues()
			{
				ims.spinalinjuries.vo.lookups.FCBladderDrainage[] listOfValues = new ims.spinalinjuries.vo.lookups.FCBladderDrainage[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.spinalinjuries.vo.lookups.FCBladderDrainage getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCBladderDrainage)super.grid.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCBladderDrainage value)
			{
				super.grid.setValue(value);
			}
			public grdBladDrainageRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdBladDrainageRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdBladDrainageRowCollection getRows()
			{
				return new grdBladDrainageRowCollection(super.grid.getRows());
			}
			public grdBladDrainageRow getRowByValue(ims.spinalinjuries.vo.lookups.FCBladderDrainage value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdBladDrainageRow(row);
			}
			public void setcolDrainageTypeHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolDrainageTypeHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdTxErectDysRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdTxErectDysRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolTreatmentReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolTreatmentReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolTreatmentOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.FCErectDysTreatments getcolTreatment()
			{
				return (ims.spinalinjuries.vo.lookups.FCErectDysTreatments)super.row.get(0);
			}
			public void setcolTreatment(ims.spinalinjuries.vo.lookups.FCErectDysTreatments value)
			{
				super.row.set(0, value);
			}
			public void setCellcolTreatmentTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.spinalinjuries.vo.lookups.FCErectDysTreatments getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCErectDysTreatments)super.row.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCErectDysTreatments value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdTxErectDysRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdTxErectDysRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdTxErectDysRow get(int index)
			{
				return new grdTxErectDysRow(super.collection.get(index));
			}
			public grdTxErectDysRow newRow()
			{
				return new grdTxErectDysRow(super.collection.newRow());
			}
			public grdTxErectDysRow newRow(boolean autoSelect)
			{
				return new grdTxErectDysRow(super.collection.newRow(autoSelect));
			}
			public grdTxErectDysRow newRowAt(int index)
			{
				return new grdTxErectDysRow(super.collection.newRowAt(index));
			}
			public grdTxErectDysRow newRowAt(int index, boolean autoSelect)
			{
				return new grdTxErectDysRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdTxErectDysGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.spinalinjuries.vo.lookups.FCErectDysTreatments[] getValues()
			{
				ims.spinalinjuries.vo.lookups.FCErectDysTreatments[] listOfValues = new ims.spinalinjuries.vo.lookups.FCErectDysTreatments[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.spinalinjuries.vo.lookups.FCErectDysTreatments getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCErectDysTreatments)super.grid.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCErectDysTreatments value)
			{
				super.grid.setValue(value);
			}
			public grdTxErectDysRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdTxErectDysRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdTxErectDysRowCollection getRows()
			{
				return new grdTxErectDysRowCollection(super.grid.getRows());
			}
			public grdTxErectDysRow getRowByValue(ims.spinalinjuries.vo.lookups.FCErectDysTreatments value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdTxErectDysRow(row);
			}
			public void setcolTreatmentHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolTreatmentHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdEndoEvalPerfRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdEndoEvalPerfRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolHormoneLevelReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolHormoneLevelReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolHormoneLevelOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.FCEndoEval getcolHormoneLevel()
			{
				return (ims.spinalinjuries.vo.lookups.FCEndoEval)super.row.get(0);
			}
			public void setcolHormoneLevel(ims.spinalinjuries.vo.lookups.FCEndoEval value)
			{
				super.row.set(0, value);
			}
			public void setCellcolHormoneLevelTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.spinalinjuries.vo.lookups.FCEndoEval getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCEndoEval)super.row.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCEndoEval value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdEndoEvalPerfRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdEndoEvalPerfRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdEndoEvalPerfRow get(int index)
			{
				return new grdEndoEvalPerfRow(super.collection.get(index));
			}
			public grdEndoEvalPerfRow newRow()
			{
				return new grdEndoEvalPerfRow(super.collection.newRow());
			}
			public grdEndoEvalPerfRow newRow(boolean autoSelect)
			{
				return new grdEndoEvalPerfRow(super.collection.newRow(autoSelect));
			}
			public grdEndoEvalPerfRow newRowAt(int index)
			{
				return new grdEndoEvalPerfRow(super.collection.newRowAt(index));
			}
			public grdEndoEvalPerfRow newRowAt(int index, boolean autoSelect)
			{
				return new grdEndoEvalPerfRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdEndoEvalPerfGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.spinalinjuries.vo.lookups.FCEndoEval[] getValues()
			{
				ims.spinalinjuries.vo.lookups.FCEndoEval[] listOfValues = new ims.spinalinjuries.vo.lookups.FCEndoEval[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.spinalinjuries.vo.lookups.FCEndoEval getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCEndoEval)super.grid.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCEndoEval value)
			{
				super.grid.setValue(value);
			}
			public grdEndoEvalPerfRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdEndoEvalPerfRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdEndoEvalPerfRowCollection getRows()
			{
				return new grdEndoEvalPerfRowCollection(super.grid.getRows());
			}
			public grdEndoEvalPerfRow getRowByValue(ims.spinalinjuries.vo.lookups.FCEndoEval value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdEndoEvalPerfRow(row);
			}
			public void setcolHormoneLevelHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolHormoneLevelHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdInfScreenRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdInfScreenRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolInfectionReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolInfectionReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolInfectionOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.FCInfectionScreening getcolInfection()
			{
				return (ims.spinalinjuries.vo.lookups.FCInfectionScreening)super.row.get(0);
			}
			public void setcolInfection(ims.spinalinjuries.vo.lookups.FCInfectionScreening value)
			{
				super.row.set(0, value);
			}
			public void setCellcolInfectionTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.spinalinjuries.vo.lookups.FCInfectionScreening getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCInfectionScreening)super.row.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCInfectionScreening value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdInfScreenRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdInfScreenRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdInfScreenRow get(int index)
			{
				return new grdInfScreenRow(super.collection.get(index));
			}
			public grdInfScreenRow newRow()
			{
				return new grdInfScreenRow(super.collection.newRow());
			}
			public grdInfScreenRow newRow(boolean autoSelect)
			{
				return new grdInfScreenRow(super.collection.newRow(autoSelect));
			}
			public grdInfScreenRow newRowAt(int index)
			{
				return new grdInfScreenRow(super.collection.newRowAt(index));
			}
			public grdInfScreenRow newRowAt(int index, boolean autoSelect)
			{
				return new grdInfScreenRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdInfScreenGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.spinalinjuries.vo.lookups.FCInfectionScreening[] getValues()
			{
				ims.spinalinjuries.vo.lookups.FCInfectionScreening[] listOfValues = new ims.spinalinjuries.vo.lookups.FCInfectionScreening[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.spinalinjuries.vo.lookups.FCInfectionScreening getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCInfectionScreening)super.grid.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCInfectionScreening value)
			{
				super.grid.setValue(value);
			}
			public grdInfScreenRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdInfScreenRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdInfScreenRowCollection getRows()
			{
				return new grdInfScreenRowCollection(super.grid.getRows());
			}
			public grdInfScreenRow getRowByValue(ims.spinalinjuries.vo.lookups.FCInfectionScreening value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdInfScreenRow(row);
			}
			public void setcolInfectionHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolInfectionHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdTxOfferedRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdTxOfferedRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolTreatmentMethodReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolTreatmentMethodReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolTreatmentMethodOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.FCTreatmentsOffered getcolTreatmentMethod()
			{
				return (ims.spinalinjuries.vo.lookups.FCTreatmentsOffered)super.row.get(0);
			}
			public void setcolTreatmentMethod(ims.spinalinjuries.vo.lookups.FCTreatmentsOffered value)
			{
				super.row.set(0, value);
			}
			public void setCellcolTreatmentMethodTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.spinalinjuries.vo.lookups.FCTreatmentsOffered getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCTreatmentsOffered)super.row.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCTreatmentsOffered value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdTxOfferedRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdTxOfferedRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdTxOfferedRow get(int index)
			{
				return new grdTxOfferedRow(super.collection.get(index));
			}
			public grdTxOfferedRow newRow()
			{
				return new grdTxOfferedRow(super.collection.newRow());
			}
			public grdTxOfferedRow newRow(boolean autoSelect)
			{
				return new grdTxOfferedRow(super.collection.newRow(autoSelect));
			}
			public grdTxOfferedRow newRowAt(int index)
			{
				return new grdTxOfferedRow(super.collection.newRowAt(index));
			}
			public grdTxOfferedRow newRowAt(int index, boolean autoSelect)
			{
				return new grdTxOfferedRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdTxOfferedGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.spinalinjuries.vo.lookups.FCTreatmentsOffered[] getValues()
			{
				ims.spinalinjuries.vo.lookups.FCTreatmentsOffered[] listOfValues = new ims.spinalinjuries.vo.lookups.FCTreatmentsOffered[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.spinalinjuries.vo.lookups.FCTreatmentsOffered getValue()
			{
				return (ims.spinalinjuries.vo.lookups.FCTreatmentsOffered)super.grid.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.FCTreatmentsOffered value)
			{
				super.grid.setValue(value);
			}
			public grdTxOfferedRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdTxOfferedRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdTxOfferedRowCollection getRows()
			{
				return new grdTxOfferedRowCollection(super.grid.getRows());
			}
			public grdTxOfferedRow getRowByValue(ims.spinalinjuries.vo.lookups.FCTreatmentsOffered value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdTxOfferedRow(row);
			}
			public void setcolTreatmentMethodHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolTreatmentMethodHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 654, 134, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consent for Screening:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 232, 366, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 989, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Sperm Frozen:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 848, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "ELISA:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 875, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Success with:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 683, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Semen Culture:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 464, 10, 34, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Year:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 66, 211, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatments for Erectile Dysfunction:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 36, 175, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Can Patient Achieve Erection?", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 10, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Marital Status:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 188, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Sexual Drive?", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 217, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ejaculation:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 244, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bladder Drainage:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 395, 184, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Evidence of Testicular Atrophy?", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 422, 192, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Endocrine Evaluation Performed:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 1016, 114, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Treatment Offered:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 534, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Infection Screening:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 296, 364, 296, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// PartialDateBox Controls
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 520, 8, 72, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(PartialDateBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, null, Boolean.FALSE, Boolean.FALSE}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 232, 652, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbScreenConsentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbScreenConsentTemp);
			cmbScreenConsentComboBox cmbScreenConsent = (cmbScreenConsentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbScreenConsentComboBox.class, m_cmbScreenConsentTemp);
			super.addComboBox(cmbScreenConsent);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 232, 987, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbSpermFrozenTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSpermFrozenTemp);
			cmbSpermFrozenComboBox cmbSpermFrozen = (cmbSpermFrozenComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpermFrozenComboBox.class, m_cmbSpermFrozenTemp);
			super.addComboBox(cmbSpermFrozen);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 232, 846, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbELISATemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbELISATemp);
			cmbELISAComboBox cmbELISA = (cmbELISAComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbELISAComboBox.class, m_cmbELISATemp);
			super.addComboBox(cmbELISA);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 232, 37, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbAchieveErectionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbAchieveErectionTemp);
			cmbAchieveErectionComboBox cmbAchieveErection = (cmbAchieveErectionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAchieveErectionComboBox.class, m_cmbAchieveErectionTemp);
			super.addComboBox(cmbAchieveErection);
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 232, 8, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbMaritalStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbMaritalStatusTemp);
			cmbMaritalStatusComboBox cmbMaritalStatus = (cmbMaritalStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMaritalStatusComboBox.class, m_cmbMaritalStatusTemp);
			super.addComboBox(cmbMaritalStatus);
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 232, 186, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbSexualDriveTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSexualDriveTemp);
			cmbSexualDriveComboBox cmbSexualDrive = (cmbSexualDriveComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSexualDriveComboBox.class, m_cmbSexualDriveTemp);
			super.addComboBox(cmbSexualDrive);
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 232, 681, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbSemenCultureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbSemenCultureTemp);
			cmbSemenCultureComboBox cmbSemenCulture = (cmbSemenCultureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSemenCultureComboBox.class, m_cmbSemenCultureTemp);
			super.addComboBox(cmbSemenCulture);
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 232, 215, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbEjaculationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbEjaculationTemp);
			cmbEjaculationComboBox cmbEjaculation = (cmbEjaculationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEjaculationComboBox.class, m_cmbEjaculationTemp);
			super.addComboBox(cmbEjaculation);
			RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 232, 393, 360, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbTestAtrophyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbTestAtrophyTemp);
			cmbTestAtrophyComboBox cmbTestAtrophy = (cmbTestAtrophyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTestAtrophyComboBox.class, m_cmbTestAtrophyTemp);
			super.addComboBox(cmbTestAtrophy);
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 232, 710, 360, 128, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdSpermTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdSpermTemp);
			grdSpermGrid grdSperm = (grdSpermGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpermGrid.class, m_grdSpermTemp);
			grdSperm.addStringColumn("Sperm", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdSperm.addIntColumn("Score", 0, 0, -1, false, true, null, false, 0, true);
			super.addGrid(grdSperm);
			RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 232, 875, 360, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdSuccessMethodTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdSuccessMethodTemp);
			grdSuccessMethodGrid grdSuccessMethod = (grdSuccessMethodGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSuccessMethodGrid.class, m_grdSuccessMethodTemp);
			grdSuccessMethod.addStringColumn("Method", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdSuccessMethod.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdSuccessMethod);
			RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 232, 244, 360, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdBladDrainageTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdBladDrainageTemp);
			grdBladDrainageGrid grdBladDrainage = (grdBladDrainageGrid)GridFlyweightFactory.getInstance().createGridBridge(grdBladDrainageGrid.class, m_grdBladDrainageTemp);
			grdBladDrainage.addStringColumn("Drainage Type", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdBladDrainage.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdBladDrainage);
			RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 232, 66, 360, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdTxErectDysTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdTxErectDysTemp);
			grdTxErectDysGrid grdTxErectDys = (grdTxErectDysGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTxErectDysGrid.class, m_grdTxErectDysTemp);
			grdTxErectDys.addStringColumn("Treatment", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTxErectDys.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdTxErectDys);
			RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 232, 422, 360, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdEndoEvalPerfTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdEndoEvalPerfTemp);
			grdEndoEvalPerfGrid grdEndoEvalPerf = (grdEndoEvalPerfGrid)GridFlyweightFactory.getInstance().createGridBridge(grdEndoEvalPerfGrid.class, m_grdEndoEvalPerfTemp);
			grdEndoEvalPerf.addStringColumn("Hormone Level", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdEndoEvalPerf.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdEndoEvalPerf);
			RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 232, 534, 360, 110, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdInfScreenTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdInfScreenTemp);
			grdInfScreenGrid grdInfScreen = (grdInfScreenGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInfScreenGrid.class, m_grdInfScreenTemp);
			grdInfScreen.addStringColumn("Infection", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdInfScreen.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdInfScreen);
			RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 232, 1016, 360, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdTxOfferedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1024), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdTxOfferedTemp);
			grdTxOfferedGrid grdTxOffered = (grdTxOfferedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTxOfferedGrid.class, m_grdTxOfferedTemp);
			grdTxOffered.addStringColumn("Treatment Method", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTxOffered.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdTxOffered);
		}
		public TextBox txtBladDrainOther()
		{
			return (TextBox)super.getControl(17);
		}
		public PartialDateBox pdtYear()
		{
			return (PartialDateBox)super.getControl(18);
		}
		public cmbScreenConsentComboBox cmbScreenConsent()
		{
			return (cmbScreenConsentComboBox)super.getComboBox(0);
		}
		public cmbSpermFrozenComboBox cmbSpermFrozen()
		{
			return (cmbSpermFrozenComboBox)super.getComboBox(1);
		}
		public cmbELISAComboBox cmbELISA()
		{
			return (cmbELISAComboBox)super.getComboBox(2);
		}
		public cmbAchieveErectionComboBox cmbAchieveErection()
		{
			return (cmbAchieveErectionComboBox)super.getComboBox(3);
		}
		public cmbMaritalStatusComboBox cmbMaritalStatus()
		{
			return (cmbMaritalStatusComboBox)super.getComboBox(4);
		}
		public cmbSexualDriveComboBox cmbSexualDrive()
		{
			return (cmbSexualDriveComboBox)super.getComboBox(5);
		}
		public cmbSemenCultureComboBox cmbSemenCulture()
		{
			return (cmbSemenCultureComboBox)super.getComboBox(6);
		}
		public cmbEjaculationComboBox cmbEjaculation()
		{
			return (cmbEjaculationComboBox)super.getComboBox(7);
		}
		public cmbTestAtrophyComboBox cmbTestAtrophy()
		{
			return (cmbTestAtrophyComboBox)super.getComboBox(8);
		}
		public grdSpermGrid grdSperm()
		{
			return (grdSpermGrid)super.getGrid(0);
		}
		public grdSuccessMethodGrid grdSuccessMethod()
		{
			return (grdSuccessMethodGrid)super.getGrid(1);
		}
		public grdBladDrainageGrid grdBladDrainage()
		{
			return (grdBladDrainageGrid)super.getGrid(2);
		}
		public grdTxErectDysGrid grdTxErectDys()
		{
			return (grdTxErectDysGrid)super.getGrid(3);
		}
		public grdEndoEvalPerfGrid grdEndoEvalPerf()
		{
			return (grdEndoEvalPerfGrid)super.getGrid(4);
		}
		public grdInfScreenGrid grdInfScreen()
		{
			return (grdInfScreenGrid)super.getGrid(5);
		}
		public grdTxOfferedGrid grdTxOffered()
		{
			return (grdTxOfferedGrid)super.getGrid(6);
		}
	}
	public static class recbrOPDFertilirtClinicRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.CareContextShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.core.vo.CareContextShortVo getValue()
		{
			return (ims.core.vo.CareContextShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.CareContextShortVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getvoOPDFertClinic();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 400, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper36.getSize(), instance1, startTabIndex.intValue() + 2, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(16), new Integer(32), new Integer(400), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2), m_customControlAuthoringInfoForm, instance1 } );
		ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1036),  new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringInfoControl);
		Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Container Clasess
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_container1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_container1);
		container1Container container1 = (container1Container)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(container1Container.class, m_container1, factory);
		ims.framework.utils.SizeInfo m_container1DesignSize = new ims.framework.utils.SizeInfo(832, 488);
		ims.framework.utils.SizeInfo m_container1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper37.getWidth(), anchoringHelper37.getHeight());
		container1.setContext(form, appForm, m_container1, loader, startControlID, m_container1DesignSize, m_container1RuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(container1);

		// Label Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 728, 32, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<Browser Status>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 280, 608, 84, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Date of Clinic:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 656, 592, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 1031), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 592, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 744, 592, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1034), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 376, 600, 160, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.HIDDEN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrOPDFertilirtClinicTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrOPDFertilirtClinicTemp);
		recbrOPDFertilirtClinicRecordBrowser recbrOPDFertilirtClinic = (recbrOPDFertilirtClinicRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrOPDFertilirtClinicRecordBrowser.class, m_recbrOPDFertilirtClinicTemp);
		super.addRecordBrowser(recbrOPDFertilirtClinic);
	}


	public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public container1Container container1()
	{
		return (container1Container)super.getContainer(0);
	}
	public Label lblBrowser()
	{
		return (Label)super.getControl(2);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(4);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(5);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(6);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}
	public DateControl dteClinic()
	{
		return (DateControl)super.getControl(8);
	}
	public recbrOPDFertilirtClinicRecordBrowser recbrOPDFertilirtClinic()
	{
		return (recbrOPDFertilirtClinicRecordBrowser)super.getRecordBrowser(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_voOPDFertClinic = new ims.framework.ContextVariable("voOPDFertClinic", prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier + "");
			cxl_voOPDFertClinicSemenAna = new ims.framework.ContextVariable("voOPDFertClinicSemenAna", prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinicSemenAna_" + componentIdentifier + "");
			cxl_SelectedCareContextShort = new ims.framework.ContextVariable("SelectedCareContextShort", prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__SelectedCareContextShort_" + componentIdentifier + "");
			cxl_MedSocialHistory = new ims.framework.ContextVariable("MedSocialHistory", prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier + "");
			cxl_voOPDFertClinicColl = new ims.framework.ContextVariable("voOPDFertClinicColl", prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinicColl_" + componentIdentifier + "");
			cxl_UpdatedInstance = new ims.framework.ContextVariable("UpdatedInstance", prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__UpdatedInstance_" + componentIdentifier + "");
		}
		
		public boolean getvoOPDFertClinicIsNotNull()
		{
			return !cxl_voOPDFertClinic.getValueIsNull(context);
		}
		public ims.generalmedical.vo.OPDFertClinicVo getvoOPDFertClinic()
		{
			return (ims.generalmedical.vo.OPDFertClinicVo)cxl_voOPDFertClinic.getValue(context);
		}
		public void setvoOPDFertClinic(ims.generalmedical.vo.OPDFertClinicVo value)
		{
			cxl_voOPDFertClinic.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voOPDFertClinic = null;
		public boolean getvoOPDFertClinicSemenAnaIsNotNull()
		{
			return !cxl_voOPDFertClinicSemenAna.getValueIsNull(context);
		}
		public ims.generalmedical.vo.OPDFertCLinicSemenAna getvoOPDFertClinicSemenAna()
		{
			return (ims.generalmedical.vo.OPDFertCLinicSemenAna)cxl_voOPDFertClinicSemenAna.getValue(context);
		}
		public void setvoOPDFertClinicSemenAna(ims.generalmedical.vo.OPDFertCLinicSemenAna value)
		{
			cxl_voOPDFertClinicSemenAna.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voOPDFertClinicSemenAna = null;
		public boolean getSelectedCareContextShortIsNotNull()
		{
			return !cxl_SelectedCareContextShort.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getSelectedCareContextShort()
		{
			return (ims.core.vo.CareContextShortVo)cxl_SelectedCareContextShort.getValue(context);
		}
		public void setSelectedCareContextShort(ims.core.vo.CareContextShortVo value)
		{
			cxl_SelectedCareContextShort.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedCareContextShort = null;
		public boolean getMedSocialHistoryIsNotNull()
		{
			return !cxl_MedSocialHistory.getValueIsNull(context);
		}
		public ims.core.vo.SocialHistoryVo getMedSocialHistory()
		{
			return (ims.core.vo.SocialHistoryVo)cxl_MedSocialHistory.getValue(context);
		}
		public void setMedSocialHistory(ims.core.vo.SocialHistoryVo value)
		{
			cxl_MedSocialHistory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MedSocialHistory = null;
		public boolean getvoOPDFertClinicCollIsNotNull()
		{
			return !cxl_voOPDFertClinicColl.getValueIsNull(context);
		}
		public ims.generalmedical.vo.OPDFertClinicVoCollection getvoOPDFertClinicColl()
		{
			return (ims.generalmedical.vo.OPDFertClinicVoCollection)cxl_voOPDFertClinicColl.getValue(context);
		}
		public void setvoOPDFertClinicColl(ims.generalmedical.vo.OPDFertClinicVoCollection value)
		{
			cxl_voOPDFertClinicColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voOPDFertClinicColl = null;
		public boolean getUpdatedInstanceIsNotNull()
		{
			return !cxl_UpdatedInstance.getValueIsNull(context);
		}
		public ims.vo.ValueObject getUpdatedInstance()
		{
			return (ims.vo.ValueObject)cxl_UpdatedInstance.getValue(context);
		}
		public void setUpdatedInstance(ims.vo.ValueObject value)
		{
			cxl_UpdatedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedInstance = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[103];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-ID", "ID_OPDFertClinic");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-ACHIEVEERECTION", "AchieveErection");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-SEXDRIVE", "SexDrive");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-EJACULATION", "Ejaculation");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-BLADDERDRAINAGETXT", "BladderDrainagetxt");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-TESTATROPHY", "TestAtrophy");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-SCREENCONSENT", "ScreenConsent");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-SEMENCULTURE", "SemenCulture");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-ELISA", "Elisa");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-SPERMFROZEN", "SpermFrozen");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__voOPDFertClinic_" + componentIdentifier, "BO-1023100027-CARECONTEXT", "CareContext");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-CONTEXT", "Context");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-ID", "ID_SocialHistory");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-CARECONTEXT", "CareContext");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-SMOKINGSTATUS", "SmokingStatus");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-ILLICITDRUGS", "IllicitDrugs");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATION", "Occupation");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-LIVESWITH", "LivesWith");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-FITTOCAREFORPATIENT", "FitToCareForPatient");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-FITTOTAKEHOME", "FitToTakeHome");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATIONTEXT", "OccupationText");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-SOCIALHISTORYNOTES", "SocialHistoryNotes");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-MOBILITYINDEPENDENCE", "MobilityIndependence");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-OCCUPATIONSTATUS", "OccupationStatus");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDFertilityCLinic.__internal_x_context__MedSocialHistory_" + componentIdentifier, "BO-1003100026-DIET", "Diet");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
