//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.opdfertilityclinic;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.spinalinjuries.domain.OPDFertilityCLinic.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.spinalinjuries.domain.OPDFertilityCLinic domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbScreenConsentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().cmbScreenConsent().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCConsentForScreen existingInstance = (ims.spinalinjuries.vo.lookups.FCConsentForScreen)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbScreenConsentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.FCConsentForScreen)
		{
			ims.spinalinjuries.vo.lookups.FCConsentForScreen instance = (ims.spinalinjuries.vo.lookups.FCConsentForScreen)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbScreenConsentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCConsentForScreen existingInstance = (ims.spinalinjuries.vo.lookups.FCConsentForScreen)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().cmbScreenConsent().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbScreenConsentLookup()
	{
		this.form.container1().cmbScreenConsent().clear();
		ims.spinalinjuries.vo.lookups.FCConsentForScreenCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getFCConsentForScreen(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().cmbScreenConsent().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbScreenConsentLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.FCConsentForScreen instance = ims.spinalinjuries.vo.lookups.LookupHelper.getFCConsentForScreenInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().cmbScreenConsent().setValue(instance);
	}
	protected final void defaultcmbScreenConsentLookupValue()
	{
		this.form.container1().cmbScreenConsent().setValue((ims.spinalinjuries.vo.lookups.FCConsentForScreen)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.FCConsentForScreen.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.FCConsentForScreen.TYPE_ID));
	}
	protected final void oncmbSpermFrozenValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().cmbSpermFrozen().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCSpermfrozen existingInstance = (ims.spinalinjuries.vo.lookups.FCSpermfrozen)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSpermFrozenLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.FCSpermfrozen)
		{
			ims.spinalinjuries.vo.lookups.FCSpermfrozen instance = (ims.spinalinjuries.vo.lookups.FCSpermfrozen)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSpermFrozenLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCSpermfrozen existingInstance = (ims.spinalinjuries.vo.lookups.FCSpermfrozen)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().cmbSpermFrozen().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSpermFrozenLookup()
	{
		this.form.container1().cmbSpermFrozen().clear();
		ims.spinalinjuries.vo.lookups.FCSpermfrozenCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getFCSpermfrozen(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().cmbSpermFrozen().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSpermFrozenLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.FCSpermfrozen instance = ims.spinalinjuries.vo.lookups.LookupHelper.getFCSpermfrozenInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().cmbSpermFrozen().setValue(instance);
	}
	protected final void defaultcmbSpermFrozenLookupValue()
	{
		this.form.container1().cmbSpermFrozen().setValue((ims.spinalinjuries.vo.lookups.FCSpermfrozen)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.FCSpermfrozen.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.FCSpermfrozen.TYPE_ID));
	}
	protected final void oncmbELISAValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().cmbELISA().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCElisa existingInstance = (ims.spinalinjuries.vo.lookups.FCElisa)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbELISALookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.FCElisa)
		{
			ims.spinalinjuries.vo.lookups.FCElisa instance = (ims.spinalinjuries.vo.lookups.FCElisa)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbELISALookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCElisa existingInstance = (ims.spinalinjuries.vo.lookups.FCElisa)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().cmbELISA().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbELISALookup()
	{
		this.form.container1().cmbELISA().clear();
		ims.spinalinjuries.vo.lookups.FCElisaCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getFCElisa(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().cmbELISA().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbELISALookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.FCElisa instance = ims.spinalinjuries.vo.lookups.LookupHelper.getFCElisaInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().cmbELISA().setValue(instance);
	}
	protected final void defaultcmbELISALookupValue()
	{
		this.form.container1().cmbELISA().setValue((ims.spinalinjuries.vo.lookups.FCElisa)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.FCElisa.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.FCElisa.TYPE_ID));
	}
	protected final void oncmbAchieveErectionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().cmbAchieveErection().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCAchieveErection existingInstance = (ims.spinalinjuries.vo.lookups.FCAchieveErection)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAchieveErectionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.FCAchieveErection)
		{
			ims.spinalinjuries.vo.lookups.FCAchieveErection instance = (ims.spinalinjuries.vo.lookups.FCAchieveErection)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAchieveErectionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCAchieveErection existingInstance = (ims.spinalinjuries.vo.lookups.FCAchieveErection)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().cmbAchieveErection().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAchieveErectionLookup()
	{
		this.form.container1().cmbAchieveErection().clear();
		ims.spinalinjuries.vo.lookups.FCAchieveErectionCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getFCAchieveErection(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().cmbAchieveErection().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAchieveErectionLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.FCAchieveErection instance = ims.spinalinjuries.vo.lookups.LookupHelper.getFCAchieveErectionInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().cmbAchieveErection().setValue(instance);
	}
	protected final void defaultcmbAchieveErectionLookupValue()
	{
		this.form.container1().cmbAchieveErection().setValue((ims.spinalinjuries.vo.lookups.FCAchieveErection)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.FCAchieveErection.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.FCAchieveErection.TYPE_ID));
	}
	protected final void oncmbMaritalStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().cmbMaritalStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MaritalStatus existingInstance = (ims.core.vo.lookups.MaritalStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbMaritalStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.MaritalStatus)
		{
			ims.core.vo.lookups.MaritalStatus instance = (ims.core.vo.lookups.MaritalStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbMaritalStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MaritalStatus existingInstance = (ims.core.vo.lookups.MaritalStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().cmbMaritalStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbMaritalStatusLookup()
	{
		this.form.container1().cmbMaritalStatus().clear();
		ims.core.vo.lookups.MaritalStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMaritalStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().cmbMaritalStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbMaritalStatusLookupValue(int id)
	{
		ims.core.vo.lookups.MaritalStatus instance = ims.core.vo.lookups.LookupHelper.getMaritalStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().cmbMaritalStatus().setValue(instance);
	}
	protected final void defaultcmbMaritalStatusLookupValue()
	{
		this.form.container1().cmbMaritalStatus().setValue((ims.core.vo.lookups.MaritalStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.MaritalStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.MaritalStatus.TYPE_ID));
	}
	protected final void oncmbSexualDriveValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().cmbSexualDrive().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCSexDrive existingInstance = (ims.spinalinjuries.vo.lookups.FCSexDrive)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSexualDriveLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.FCSexDrive)
		{
			ims.spinalinjuries.vo.lookups.FCSexDrive instance = (ims.spinalinjuries.vo.lookups.FCSexDrive)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSexualDriveLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCSexDrive existingInstance = (ims.spinalinjuries.vo.lookups.FCSexDrive)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().cmbSexualDrive().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSexualDriveLookup()
	{
		this.form.container1().cmbSexualDrive().clear();
		ims.spinalinjuries.vo.lookups.FCSexDriveCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getFCSexDrive(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().cmbSexualDrive().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSexualDriveLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.FCSexDrive instance = ims.spinalinjuries.vo.lookups.LookupHelper.getFCSexDriveInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().cmbSexualDrive().setValue(instance);
	}
	protected final void defaultcmbSexualDriveLookupValue()
	{
		this.form.container1().cmbSexualDrive().setValue((ims.spinalinjuries.vo.lookups.FCSexDrive)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.FCSexDrive.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.FCSexDrive.TYPE_ID));
	}
	protected final void oncmbSemenCultureValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().cmbSemenCulture().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCSemenCulture existingInstance = (ims.spinalinjuries.vo.lookups.FCSemenCulture)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSemenCultureLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.FCSemenCulture)
		{
			ims.spinalinjuries.vo.lookups.FCSemenCulture instance = (ims.spinalinjuries.vo.lookups.FCSemenCulture)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSemenCultureLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCSemenCulture existingInstance = (ims.spinalinjuries.vo.lookups.FCSemenCulture)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().cmbSemenCulture().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSemenCultureLookup()
	{
		this.form.container1().cmbSemenCulture().clear();
		ims.spinalinjuries.vo.lookups.FCSemenCultureCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getFCSemenCulture(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().cmbSemenCulture().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSemenCultureLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.FCSemenCulture instance = ims.spinalinjuries.vo.lookups.LookupHelper.getFCSemenCultureInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().cmbSemenCulture().setValue(instance);
	}
	protected final void defaultcmbSemenCultureLookupValue()
	{
		this.form.container1().cmbSemenCulture().setValue((ims.spinalinjuries.vo.lookups.FCSemenCulture)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.FCSemenCulture.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.FCSemenCulture.TYPE_ID));
	}
	protected final void oncmbEjaculationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().cmbEjaculation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCEjaculation existingInstance = (ims.spinalinjuries.vo.lookups.FCEjaculation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbEjaculationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.FCEjaculation)
		{
			ims.spinalinjuries.vo.lookups.FCEjaculation instance = (ims.spinalinjuries.vo.lookups.FCEjaculation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbEjaculationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCEjaculation existingInstance = (ims.spinalinjuries.vo.lookups.FCEjaculation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().cmbEjaculation().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbEjaculationLookup()
	{
		this.form.container1().cmbEjaculation().clear();
		ims.spinalinjuries.vo.lookups.FCEjaculationCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getFCEjaculation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().cmbEjaculation().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbEjaculationLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.FCEjaculation instance = ims.spinalinjuries.vo.lookups.LookupHelper.getFCEjaculationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().cmbEjaculation().setValue(instance);
	}
	protected final void defaultcmbEjaculationLookupValue()
	{
		this.form.container1().cmbEjaculation().setValue((ims.spinalinjuries.vo.lookups.FCEjaculation)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.FCEjaculation.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.FCEjaculation.TYPE_ID));
	}
	protected final void oncmbTestAtrophyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.container1().cmbTestAtrophy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCTestAtrophy existingInstance = (ims.spinalinjuries.vo.lookups.FCTestAtrophy)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTestAtrophyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.spinalinjuries.vo.lookups.FCTestAtrophy)
		{
			ims.spinalinjuries.vo.lookups.FCTestAtrophy instance = (ims.spinalinjuries.vo.lookups.FCTestAtrophy)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTestAtrophyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.spinalinjuries.vo.lookups.FCTestAtrophy existingInstance = (ims.spinalinjuries.vo.lookups.FCTestAtrophy)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.container1().cmbTestAtrophy().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTestAtrophyLookup()
	{
		this.form.container1().cmbTestAtrophy().clear();
		ims.spinalinjuries.vo.lookups.FCTestAtrophyCollection lookupCollection = ims.spinalinjuries.vo.lookups.LookupHelper.getFCTestAtrophy(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.container1().cmbTestAtrophy().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTestAtrophyLookupValue(int id)
	{
		ims.spinalinjuries.vo.lookups.FCTestAtrophy instance = ims.spinalinjuries.vo.lookups.LookupHelper.getFCTestAtrophyInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.container1().cmbTestAtrophy().setValue(instance);
	}
	protected final void defaultcmbTestAtrophyLookupValue()
	{
		this.form.container1().cmbTestAtrophy().setValue((ims.spinalinjuries.vo.lookups.FCTestAtrophy)domain.getLookupService().getDefaultInstance(ims.spinalinjuries.vo.lookups.FCTestAtrophy.class, engine.getFormName().getID(), ims.spinalinjuries.vo.lookups.FCTestAtrophy.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.spinalinjuries.domain.OPDFertilityCLinic domain;
}
