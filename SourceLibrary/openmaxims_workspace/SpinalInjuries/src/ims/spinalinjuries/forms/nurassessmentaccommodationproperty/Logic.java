//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 41123.900)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.nurassessmentaccommodationproperty;

import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.nursing.vo.AccommodationHousing;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.PatientProperty;
import ims.nursing.vo.lookups.AssessmentComponentType;
import ims.spinalinjuries.vo.NurAssessmentAccommodationPropertyVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}
	
	private void open() 
	{
		if(form.getGlobalContext().Core.getAssessmentIsReadOnly() == null || form.getGlobalContext().Core.getAssessmentIsReadOnly() == false )
			form.setMode(FormMode.EDIT);
		else
		{
			form.setMode(FormMode.VIEW);
			form.chkSectionComplete().setEnabled(false);
		}
		form.chkCopy().setEnabled(false);
		
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssessment(assmnt);
	
		NurAssessmentAccommodationPropertyVo voAccomProp = null;
		if (assmnt != null && assmnt.getCurrentComponent() != null)
		{
			voAccomProp = (NurAssessmentAccommodationPropertyVo)domain.getComponent(assmnt.getCurrentComponent());
			form.getLocalContext().setAssessmentAccomodation(voAccomProp);
		}
		
		checkForPreviousAssessent();
		
		if(voAccomProp != null)
			populateScreenFromData(voAccomProp);
		
		
	}
	
	protected void checkForPreviousAssessent()
	{
		NurAssessmentAccommodationPropertyVo assessAccPro = (NurAssessmentAccommodationPropertyVo) domain.getLastAssessmentComponentByCareContext(form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.SPINAL_ACCOMODATION);
	
		if (assessAccPro == null)
		{
			this.form.chkCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPreviousAssessmentAcc(assessAccPro);
		if(form.getMode().equals(FormMode.EDIT))
			form.chkCopy().setEnabled(true);
	}
	
	
	

	private void populateScreenFromData(NurAssessmentAccommodationPropertyVo voAccomProp) 
	{
		if (voAccomProp.getIsComplete().booleanValue() == true)  // Complete
		{
			form.setMode(FormMode.VIEW);
			form.chkSectionComplete().setValue(true);
			form.chkSectionComplete().setEnabled(false);
		}
		form.chkCopy().setEnabled(false);
		if (voAccomProp.getCopy().booleanValue() == true)
		{
			form.chkCopy().setValue(true);	
		}
		
		
		PatientProperty voProperty = voAccomProp.getPatientProperty();
		if(voProperty != null)
		{
			form.ansPropertyBookCompleted().setValue(voProperty.getPropertyBookComplete());
			form.txtSerialNumber().setValue(voProperty.getSerialNumber());
			//wdev-13083
			if(form.getMode().equals(FormMode.EDIT))
			{
				if(YesNoUnknown.NO.equals(form.ansPropertyBookCompleted().getValue()))
				{
					form.txtSerialNumber().setEnabled(false);	
				}
				else
				{
					form.txtSerialNumber().setEnabled(true);
				}
			}
			//------------------
		}	
		
		AccommodationHousing voHousing = voAccomProp.getAccommodationHousing();
		if(voHousing != null)
		{
			form.cmbAccommodation().setValue(voHousing.getAccommodationType());
			form.cmbLivingArrangements().setValue(voHousing.getLivingArrangements());
			form.txtNotes().setValue(voHousing.getNotes());
		}
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{		
		populateDataFromScreen();
		
		NurAssessmentAccommodationPropertyVo voAccomProp = form.getLocalContext().getAssessmentAccomodation();
		
		//if AssessmentHeaderInfo id == null, check if in the meantime another user from another session has created a new assessment for selected care context
		if(form.getLocalContext().getAssessment() != null)
			if(form.getLocalContext().getAssessment().getID_Assessment() == null)
				if(form.getGlobalContext().Core.getCurrentCareContext() != null)
				{
					AssessmentHeaderInfo tempvo = domain.getAssessmentHeaderInfoByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					if(tempvo != null)
					{
						form.getLocalContext().setAssessment(tempvo);
						form.getGlobalContext().Nursing.setAssessmentHeaderInfo(form.getLocalContext().getAssessment());
					}
				}
		
		String[] arrErrors = voAccomProp.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		try
		{
			AssessmentHeaderInfo newAssmnt = domain.saveComponent(form.getLocalContext().getAssessment(), voAccomProp);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
			engine.open(form.getForms().Nursing.AdmissionAssessOverview);	
		}catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			if (e.getStaleObject() != null)
			{
				 AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
				 if (assmnt != null && assmnt.getCurrentComponent() == null)
				 {
					 ims.nursing.vo.AssessmentComponent comp = new ims.nursing.vo.AssessmentComponent();
					 comp.setID_AssessmentComponent(e.getStaleObject().getId());
					 assmnt.setCurrentComponent(comp);
					 form.getGlobalContext().Nursing.setAssessmentHeaderInfo(assmnt);
				 }
			}
			open();
			return;								
		}
		catch(DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			AssessmentHeaderInfo newAssmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
			AssessmentHeaderInfo assessheaderinfoVo = form.getLocalContext().getAssessment();	
			newAssmnt.setCurrentComponent( domain.getAssessComponent(assessheaderinfoVo.getID_Assessment(),AssessmentComponentType.SPINAL_ACCOMODATION));
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
			open();
			return;
		}
	}
	
	private void populateDataFromScreen() 
	{
		PatientProperty voPatientProperty = null;
		AccommodationHousing voAccommodationHousing = null;
		
		NurAssessmentAccommodationPropertyVo voAccomProp = form.getLocalContext().getAssessmentAccomodation();
		if (voAccomProp == null)
			voAccomProp = new NurAssessmentAccommodationPropertyVo();
		
		if(voAccomProp.getPatientProperty() != null)
			voPatientProperty = voAccomProp.getPatientProperty();
		else
			voPatientProperty = new PatientProperty();
		
		voPatientProperty.setPropertyBookComplete(form.ansPropertyBookCompleted().getValue());
		voPatientProperty.setSerialNumber(form.txtSerialNumber().getValue());
		
		if(voPatientProperty.countFieldsWithValue() == 0)
			voPatientProperty = null;
		
		voAccomProp.setPatientProperty(voPatientProperty);
			
		if(voAccomProp.getAccommodationHousing() != null)
			voAccommodationHousing = voAccomProp.getAccommodationHousing();
		else
			voAccommodationHousing = new AccommodationHousing();
		
		voAccommodationHousing.setAccommodationType(form.cmbAccommodation().getValue());
		voAccommodationHousing.setLivingArrangements(form.cmbLivingArrangements().getValue());
		voAccommodationHousing.setNotes(form.txtNotes().getValue());
		
		if(voAccommodationHousing.countFieldsWithValue() == 0)
			voAccommodationHousing = null;
		
		voAccomProp.setAccommodationHousing(voAccommodationHousing);
		
		voAccomProp.setIsComplete(new Boolean(form.chkSectionComplete().getValue()));
		voAccomProp.setCopy(new Boolean(form.chkCopy().getValue()));
		
		form.getLocalContext().setAssessmentAccomodation(voAccomProp);
	}

	protected void onChkCopyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getLocalContext().getPreviousAssessmentAccIsNotNull())
		{
			NurAssessmentAccommodationPropertyVo previousAssAccomVo = new NurAssessmentAccommodationPropertyVo();
			previousAssAccomVo = form.getLocalContext().getPreviousAssessmentAcc();
			form.chkCopy().setValue(true);
			form.chkCopy().setEnabled(false);
			previousAssAccomVo.setIsComplete(Boolean.FALSE);
			previousAssAccomVo.setCopy(Boolean.TRUE);
				
			populateScreenFromData(previousAssAccomVo);
		}
		else
		{
			form.chkCopy().setValue(false);
			return;
		}
	
	}

	
	protected void onLnkInfoClick() throws PresentationLogicException 
	{
		if (form.getLocalContext().getAssessmentAccomodation() != null && form.getLocalContext().getAssessmentAccomodation().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessmentAccomodation().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}	
	}

	//wdev-13083
	protected void onAnsPropertyBookCompletedValueChanged()	throws PresentationLogicException 
	{
		if(form.getMode().equals(FormMode.EDIT))
		{
			if(YesNoUnknown.NO.equals(form.ansPropertyBookCompleted().getValue()))
			{
				form.txtSerialNumber().setEnabled(false);
				form.txtSerialNumber().setValue(null);
			}
			else
			{
				form.txtSerialNumber().setEnabled(true);
			}
		}
		
	}
}
