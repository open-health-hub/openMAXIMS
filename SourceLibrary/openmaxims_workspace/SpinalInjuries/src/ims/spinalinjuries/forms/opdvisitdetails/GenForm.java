//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.opdvisitdetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class qmbSeenByComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.interfaces.IHcp value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.interfaces.IHcp value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.interfaces.IHcp value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.interfaces.IHcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.vo.interfaces.IHcp value)
		{
			return super.control.removeRow(value);
		}
		public ims.vo.interfaces.IHcp getValue()
		{
			return (ims.vo.interfaces.IHcp)super.control.getValue();
		}
		public void setValue(ims.vo.interfaces.IHcp value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbRecordingHCPComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.interfaces.IHcp value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.interfaces.IHcp value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.interfaces.IHcp value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.interfaces.IHcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.vo.interfaces.IHcp value)
		{
			return super.control.removeRow(value);
		}
		public ims.vo.interfaces.IHcp getValue()
		{
			return (ims.vo.interfaces.IHcp)super.control.getValue();
		}
		public void setValue(ims.vo.interfaces.IHcp value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdOtherHcpRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdOtherHcpRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolHcpsReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolHcpsReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolHcpsOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getcolHcps()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellcolHcpsTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.generalmedical.vo.OPDVisitHcpPresentVo getValue()
		{
			return (ims.generalmedical.vo.OPDVisitHcpPresentVo)super.row.getValue();
		}
		public void setValue(ims.generalmedical.vo.OPDVisitHcpPresentVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdOtherHcpRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdOtherHcpRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdOtherHcpRow get(int index)
		{
			return new grdOtherHcpRow(super.collection.get(index));
		}
		public grdOtherHcpRow newRow()
		{
			return new grdOtherHcpRow(super.collection.newRow());
		}
		public grdOtherHcpRow newRow(boolean autoSelect)
		{
			return new grdOtherHcpRow(super.collection.newRow(autoSelect));
		}
		public grdOtherHcpRow newRowAt(int index)
		{
			return new grdOtherHcpRow(super.collection.newRowAt(index));
		}
		public grdOtherHcpRow newRowAt(int index, boolean autoSelect)
		{
			return new grdOtherHcpRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdOtherHcpGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		public ims.generalmedical.vo.OPDVisitHcpPresentVoCollection getValues()
		{
			ims.generalmedical.vo.OPDVisitHcpPresentVoCollection listOfValues = new ims.generalmedical.vo.OPDVisitHcpPresentVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.generalmedical.vo.OPDVisitHcpPresentVo getValue()
		{
			return (ims.generalmedical.vo.OPDVisitHcpPresentVo)super.grid.getValue();
		}
		public void setValue(ims.generalmedical.vo.OPDVisitHcpPresentVo value)
		{
			super.grid.setValue(value);
		}
		public grdOtherHcpRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdOtherHcpRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdOtherHcpRowCollection getRows()
		{
			return new grdOtherHcpRowCollection(super.grid.getRows());
		}
		public grdOtherHcpRow getRowByValue(ims.generalmedical.vo.OPDVisitHcpPresentVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdOtherHcpRow(row);
		}
		public void setcolHcpsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolHcpsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdRelFamPresRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdRelFamPresRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolRelationshipReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolRelationshipReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolRelationshipOpened()
		{
			super.row.showOpened(0);
		}
		public ims.core.vo.lookups.PersonRelationship getcolRelationship()
		{
			return (ims.core.vo.lookups.PersonRelationship)super.row.get(0);
		}
		public void setcolRelationship(ims.core.vo.lookups.PersonRelationship value)
		{
			super.row.set(0, value, true);
		}
		public void setCellcolRelationshipTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolNameReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolNameReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolNameOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolName()
		{
			return (String)super.row.get(1);
		}
		public void setcolName(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolNameTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.generalmedical.vo.OPDVisitRelPresVo getValue()
		{
			return (ims.generalmedical.vo.OPDVisitRelPresVo)super.row.getValue();
		}
		public void setValue(ims.generalmedical.vo.OPDVisitRelPresVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdRelFamPresRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdRelFamPresRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdRelFamPresRow get(int index)
		{
			return new grdRelFamPresRow(super.collection.get(index));
		}
		public grdRelFamPresRow newRow()
		{
			return new grdRelFamPresRow(super.collection.newRow());
		}
		public grdRelFamPresRow newRow(boolean autoSelect)
		{
			return new grdRelFamPresRow(super.collection.newRow(autoSelect));
		}
		public grdRelFamPresRow newRowAt(int index)
		{
			return new grdRelFamPresRow(super.collection.newRowAt(index));
		}
		public grdRelFamPresRow newRowAt(int index, boolean autoSelect)
		{
			return new grdRelFamPresRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdRelFamPresGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.generalmedical.vo.OPDVisitRelPresVo[] getValues()
		{
			ims.generalmedical.vo.OPDVisitRelPresVo[] listOfValues = new ims.generalmedical.vo.OPDVisitRelPresVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.generalmedical.vo.OPDVisitRelPresVo getValue()
		{
			return (ims.generalmedical.vo.OPDVisitRelPresVo)super.grid.getValue();
		}
		public void setValue(ims.generalmedical.vo.OPDVisitRelPresVo value)
		{
			super.grid.setValue(value);
		}
		public grdRelFamPresRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdRelFamPresRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdRelFamPresRowCollection getRows()
		{
			return new grdRelFamPresRowCollection(super.grid.getRows());
		}
		public grdRelFamPresRow getRowByValue(ims.generalmedical.vo.OPDVisitRelPresVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdRelFamPresRow(row);
		}
		public void setcolRelationshipHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolRelationshipHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox colRelationshipComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setcolNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuEpisodeCreateLocalHcp = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuEpisodeCreateLocalHcpAddItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuEpisodeCreateLocalHcp.add(contextMenus.contextMenuEpisodeCreateLocalHcpAddItem);
		contextMenus.contextMenuEpisodeCreateLocalHcpUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuEpisodeCreateLocalHcp.add(contextMenus.contextMenuEpisodeCreateLocalHcpUpdateItem);
		form.registerMenu(contextMenus.contextMenuEpisodeCreateLocalHcp);
		contextMenus.contextMenuEpisodeCreateLocalRelative = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuEpisodeCreateLocalRelativeADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuEpisodeCreateLocalRelative.add(contextMenus.contextMenuEpisodeCreateLocalRelativeADDItem);
		contextMenus.contextMenuEpisodeCreateLocalRelativeDELETEItem = factory.createMenuItem(startControlID.intValue() + 4, "Delete", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuEpisodeCreateLocalRelative.add(contextMenus.contextMenuEpisodeCreateLocalRelativeDELETEItem);
		form.registerMenu(contextMenus.contextMenuEpisodeCreateLocalRelative);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 440, 56, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 440, 91, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Seen:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 91, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Seen By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 136, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Other HCP's Present:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 437, 136, 158, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Family / Relatives Present:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 56, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 584, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 656, 584, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 744, 584, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 512, 91, 312, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 512, 56, 312, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 128, 91, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbSeenByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbSeenByTemp);
		qmbSeenByComboBox qmbSeenBy = (qmbSeenByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbSeenByComboBox.class, m_qmbSeenByTemp);
		super.addComboBox(qmbSeenBy);
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 128, 56, 280, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbRecordingHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbRecordingHCPTemp);
		qmbRecordingHCPComboBox qmbRecordingHCP = (qmbRecordingHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbRecordingHCPComboBox.class, m_qmbRecordingHCPTemp);
		super.addComboBox(qmbRecordingHCP);

		// Grid Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 160, 392, 408, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdOtherHcpTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuEpisodeCreateLocalHcp, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdOtherHcpTemp);
		grdOtherHcpGrid grdOtherHcp = (grdOtherHcpGrid)GridFlyweightFactory.getInstance().createGridBridge(grdOtherHcpGrid.class, m_grdOtherHcpTemp);
		grdOtherHcp.addMutableComboBoxColumn("HCP's", 0, 0, -1, false, true, false, false, false, true, -1);
		super.addGrid(grdOtherHcp);
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 440, 160, 387, 408, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdRelFamPresTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuEpisodeCreateLocalRelative, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdRelFamPresTemp);
		grdRelFamPresGrid grdRelFamPres = (grdRelFamPresGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRelFamPresGrid.class, m_grdRelFamPresTemp);
		grdRelFamPres.addComboBoxColumn("Relationship", 0, 0, 150, false, true, false, false, true, -1);
		grdRelFamPres.addStringColumn("Name", 0, 0, -1, false, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdRelFamPres);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(7);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(8);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(9);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(10);
	}
	public DateTimeControl dtimSeen()
	{
		return (DateTimeControl)super.getControl(11);
	}
	public DateTimeControl dtimRecording()
	{
		return (DateTimeControl)super.getControl(12);
	}
	public qmbSeenByComboBox qmbSeenBy()
	{
		return (qmbSeenByComboBox)super.getComboBox(0);
	}
	public qmbRecordingHCPComboBox qmbRecordingHCP()
	{
		return (qmbRecordingHCPComboBox)super.getComboBox(1);
	}
	public grdOtherHcpGrid grdOtherHcp()
	{
		return (grdOtherHcpGrid)super.getGrid(0);
	}
	public grdRelFamPresGrid grdRelFamPres()
	{
		return (grdRelFamPresGrid)super.getGrid(1);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				DeleteDisabled = new ImageHelper(102177, "Images/Core/delete_dis.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image DeleteDisabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_voOPDVisitDetails = new ims.framework.ContextVariable("voOPDVisitDetails", prefix + "_lv_SpinalInjuries.OPDVisitDetails.__internal_x_context__voOPDVisitDetails_" + componentIdentifier + "");
			cxl_ClinicalContact = new ims.framework.ContextVariable("ClinicalContact", prefix + "_lv_SpinalInjuries.OPDVisitDetails.__internal_x_context__ClinicalContact_" + componentIdentifier + "");
			cxl_voHcpColl = new ims.framework.ContextVariable("voHcpColl", prefix + "_lv_SpinalInjuries.OPDVisitDetails.__internal_x_context__voHcpColl_" + componentIdentifier + "");
		}
		
		public boolean getvoOPDVisitDetailsIsNotNull()
		{
			return !cxl_voOPDVisitDetails.getValueIsNull(context);
		}
		public ims.generalmedical.vo.OPDVisitDetailsVo getvoOPDVisitDetails()
		{
			return (ims.generalmedical.vo.OPDVisitDetailsVo)cxl_voOPDVisitDetails.getValue(context);
		}
		public void setvoOPDVisitDetails(ims.generalmedical.vo.OPDVisitDetailsVo value)
		{
			cxl_voOPDVisitDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voOPDVisitDetails = null;
		public boolean getClinicalContactIsNotNull()
		{
			return !cxl_ClinicalContact.getValueIsNull(context);
		}
		public ims.core.vo.ClinicalContactShortVo getClinicalContact()
		{
			return (ims.core.vo.ClinicalContactShortVo)cxl_ClinicalContact.getValue(context);
		}
		public void setClinicalContact(ims.core.vo.ClinicalContactShortVo value)
		{
			cxl_ClinicalContact.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClinicalContact = null;
		public boolean getvoHcpCollIsNotNull()
		{
			return !cxl_voHcpColl.getValueIsNull(context);
		}
		public ims.core.vo.HcpLiteVoCollection getvoHcpColl()
		{
			return (ims.core.vo.HcpLiteVoCollection)cxl_voHcpColl.getValue(context);
		}
		public void setvoHcpColl(ims.core.vo.HcpLiteVoCollection value)
		{
			cxl_voHcpColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voHcpColl = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class EpisodeCreateLocalHcp implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
		}
		public void disableAllEpisodeCreateLocalHcpMenuItems()
		{
			this.contextMenuEpisodeCreateLocalHcpAddItem.setEnabled(false);
			this.contextMenuEpisodeCreateLocalHcpUpdateItem.setEnabled(false);
		}
		public void hideAllEpisodeCreateLocalHcpMenuItems()
		{
			this.contextMenuEpisodeCreateLocalHcpAddItem.setVisible(false);
			this.contextMenuEpisodeCreateLocalHcpUpdateItem.setVisible(false);
		}
		private Menu contextMenuEpisodeCreateLocalHcp;
		public MenuItem getEpisodeCreateLocalHcpAddItem()
		{
			return this.contextMenuEpisodeCreateLocalHcpAddItem;
		}
		private MenuItem contextMenuEpisodeCreateLocalHcpAddItem;
		public MenuItem getEpisodeCreateLocalHcpUpdateItem()
		{
			return this.contextMenuEpisodeCreateLocalHcpUpdateItem;
		}
		private MenuItem contextMenuEpisodeCreateLocalHcpUpdateItem;
		public final class EpisodeCreateLocalRelative implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 3;
			public static final int DELETE = 4;
		}
		public void disableAllEpisodeCreateLocalRelativeMenuItems()
		{
			this.contextMenuEpisodeCreateLocalRelativeADDItem.setEnabled(false);
			this.contextMenuEpisodeCreateLocalRelativeDELETEItem.setEnabled(false);
		}
		public void hideAllEpisodeCreateLocalRelativeMenuItems()
		{
			this.contextMenuEpisodeCreateLocalRelativeADDItem.setVisible(false);
			this.contextMenuEpisodeCreateLocalRelativeDELETEItem.setVisible(false);
		}
		private Menu contextMenuEpisodeCreateLocalRelative;
		public MenuItem getEpisodeCreateLocalRelativeADDItem()
		{
			return this.contextMenuEpisodeCreateLocalRelativeADDItem;
		}
		private MenuItem contextMenuEpisodeCreateLocalRelativeADDItem;
		public MenuItem getEpisodeCreateLocalRelativeDELETEItem()
		{
			return this.contextMenuEpisodeCreateLocalRelativeDELETEItem;
		}
		private MenuItem contextMenuEpisodeCreateLocalRelativeDELETEItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[78];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDVisitDetails.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-ID", "ID_ClinicalContact");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDVisitDetails.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-SPECIALTY", "Specialty");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDVisitDetails.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDVisitDetails.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDVisitDetails.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDVisitDetails.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-CARECONTEXT", "CareContext");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDVisitDetails.__internal_x_context__ClinicalContact_" + componentIdentifier, "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
