//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.22 build 41222.900)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.medmskspineexam;

import java.util.ArrayList;

import ims.admin.vo.AppImageVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CareContextLiteVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.ClinicalContactShortVo;
import ims.core.vo.DrawingAreaVo;
import ims.core.vo.DrawingGroupVo;
import ims.core.vo.DrawingImageVersionVo;
import ims.core.vo.DrawingImageVo;
import ims.core.vo.lookups.ContactType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.controls.DrawingControlArea;
import ims.framework.controls.DrawingControlAreaCollection;
import ims.framework.controls.DrawingControlGroup;
import ims.framework.controls.DrawingControlGroupCollection;
import ims.framework.controls.DrawingControlShape;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateFormat;
import ims.framework.utils.Image;
import ims.framework.utils.TimeFormat;
import ims.generalmedical.vo.AdmisSpineExamVo;
import ims.generalmedical.vo.MSKSpinePathologyFindingVo;
import ims.generalmedical.vo.MedicalProbOnAdmisVo;
import ims.generalmedical.vo.MedicalProbOnAdmisVoCollection;
import ims.generalmedical.vo.MskSpineExamFindingShortVo;
import ims.generalmedical.vo.MskSpineExamFindingShortVoCollection;
import ims.generalmedical.vo.MskSpineExamFindingVo;
import ims.generalmedical.vo.MskSpineExamFindingVoCollection;
import ims.generalmedical.vo.MskSpineExaminationVo;
import ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury;
import ims.spinalinjuries.vo.lookups.SpineExaminationFinding;
import ims.vo.ValueObject;
/**
 * @comment aursache - 26/10/2005 - Changes do deal with versioning
 * Roll back the initialiseDrawingControl method to deal with the versioning
 * Clean up the Code - Removed unused methods and comments
 * Change getCurrentImageName() and getCurrentVersionNumber() methods to get the right vo from the context!
**/

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		open(true);
	}
	private void initialize()
	{
		ClinicalContactShortVo currentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		
		boolean bMedicalAdmissionContactSelected = (currentClinicalContact!=null && currentClinicalContact.getContactType().equals(ContactType.SPINALMEDICALADMISSION));
		Boolean bMedicalInpatientForm = new Boolean(engine.getFormName().equals(form.getForms().SpinalInjuries.MedMskSpineExamInpatient));
		
		form.getLocalContext().setIsMedicalInpatientForm(bMedicalInpatientForm);
		displayRecordBrowser(bMedicalInpatientForm.booleanValue());
		
		if(writeConditionsApply(bMedicalInpatientForm,	bMedicalAdmissionContactSelected))
			activateButtons(true);
		else
			activateButtons(false);		
		
		form.ccAuthoring().setIsRequiredPropertyToControls(true); //WDEV-15172
	}
	/**
	 * inpatient form writable when Spinal Medical Admission contact NOT selected
	 * admission form writable when Spinal Medical Admission contact IS selected
	 * @param  bMedicalInpatientForm, currentClinicalContact
	 * @return boolean
	 */		
	private boolean writeConditionsApply(Boolean bMedicalInpatientForm, boolean bMedicalAdmissionContactSelected) {
	
		if(bMedicalInpatientForm.booleanValue()){
			
			if(bMedicalAdmissionContactSelected)
				return false;
			else
				return true;
		}
		else{
			if(bMedicalAdmissionContactSelected)
				return true;
			else
				return false;
		}
	}
	private void activateButtons(boolean activate)
	{
		form.btnNew().setVisible(activate);
		form.btnNew().setEnabled(activate);
		form.btnUpdate().setVisible(activate);
		form.btnUpdate().setEnabled(activate);
	}
	private void displayRecordBrowser(boolean visible)
	{
		form.recbrExam().setVisible(visible);
		form.lblBrowseStatus().setVisible(visible);
		form.pnlExam().setVisible(!visible);
	}
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		
		form.lblBrowseStatus().setValue("Creating new record");
		
		setClinicalContact();
		
		if(engine.getFormName().equals(form.getForms().SpinalInjuries.MedMskSpineExamInpatient))
		{	
			clearControls();
			form.ccAuthoring().initializeComponent(true); //WDEV-15172
		}
		
		if(form.getLocalContext().getIsMedicalInpatientForm().booleanValue())
			form.getContextMenus().getMedInjuryDetailsTextBoxAddToProblemItem().setVisible(false);
	}
	private void setClinicalContact()
	{
		//need to set ClinicalContact on new, not in populateDataFromScreen as we dont want to change the contact on an update.
		AdmisSpineExamVo voAdmisSpineExam = new AdmisSpineExamVo();	
		MskSpineExaminationVo voMskSpineExam = new MskSpineExaminationVo();
		
		voMskSpineExam.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		voMskSpineExam.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		voAdmisSpineExam.setMskExam(voMskSpineExam);
		
		form.getLocalContext().setadmisSpineExam(voAdmisSpineExam);
		
		prepareDrawing(voAdmisSpineExam);
	}
	private void prepareDrawing(AdmisSpineExamVo voAdmisSpineExam)
	{
		form.drawingBack().clearBrushes();
		form.drawingBack().clearShapes();
		initialiseDrawingControl(voAdmisSpineExam, true);
	}
	protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		if(form.getLocalContext().getIsMedicalInpatientForm().booleanValue())
			form.getContextMenus().getMedInjuryDetailsTextBoxAddToProblemItem().setVisible(false);
		setUpdatedRecord();
		
	}
	private void setUpdatedRecord()
	{
		if(form.recbrExam().getValue() != null)
		{
			form.getLocalContext().setUpdatedInstance(form.recbrExam().getValue());
		}
	}
	protected void onGrdSiteFindingSelectionChanged() throws PresentationLogicException
	{
		updateContextMenu();
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getadmisSpineExam() == null)
			return;
		
		AdmisSpineExamVo voAdmisSpineExam = (AdmisSpineExamVo) form.getLocalContext().getadmisSpineExam().clone();

		try
		{ 
			// WDEV-18101
			if (voAdmisSpineExam.getMskExamIsNotNull() && voAdmisSpineExam.getMskExam().getExaminationFindingsIsNotNull() && voAdmisSpineExam.getMskExam().getExaminationFindings().size() > 0)
			{
				voAdmisSpineExam.getMskExam().setSpineMovements(form.txtMovements().getValue());
				
				MskSpineExamFindingVoCollection voMskSpineExamFindCol = voAdmisSpineExam.getMskExam().getExaminationFindings();
			
				//WDEV-15172
				if (form.ccAuthoring().getValue() != null)
				{
					voAdmisSpineExam.getMskExam().setAuthoringDateTime(form.ccAuthoring().getValue().getAuthoringDateTime());  
					voAdmisSpineExam.getMskExam().setAuthoringCP(form.ccAuthoring().getValue().getAuthoringHcp());
				}
						
				//Clear the FindingsID
				for(int i=0; i<voMskSpineExamFindCol.size(); i++)
					voMskSpineExamFindCol.get(i).setID_MskSpineExamFinding(null);
				
				voAdmisSpineExam.getMskExam().setExaminationFindings(voMskSpineExamFindCol);
				
				//get version
				if (voAdmisSpineExam.getMskExam().getImageVersion() == null)
				{
					//set image version
					voAdmisSpineExam.getMskExam().setImageVersion(form.getLocalContext().getvoDrawingImageVersion());
				}
				
				 if ( ! validateUiErrors()) //WDEV-15172
					 return;
				 
				String[] messages = voAdmisSpineExam.validate();
				if (messages != null)
				{
					engine.showErrors("Validation Errors", messages);
					return;
				}
				
				//save and update local context
				form.getLocalContext().setadmisSpineExam(domain.saveAdmisSpineExamination(voAdmisSpineExam));				
			}
			else
			{
				engine.showMessage("Please create at least one finding.");
				return;
			}
			
			// put new record into the global context
			//if (form.getLocalContext().getadmisSpineExamIsNotNull())
			//	form.getLocalContext().setadmisSpineExam(voAdmisSpineExam);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;				
		}
		open();
	}
	
	private boolean validateUiErrors()
	{
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if(form.ccAuthoring().getValue() == null)
		{
			listOfErrors.add(form.ccAuthoring().getErrors());
		}

		int errorCount = listOfErrors.size();
		String[] result = new String[errorCount];

		for (int x = 0; x < errorCount; x++)
			result[x] = (String) listOfErrors.get(x);

		if (result != null && result.length > 0)
		{
			engine.showErrors(result);
			return false;
		}

		return true;
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setadmisSpineExam(null);
		form.getLocalContext().setUpdatedInstance(null);
		open();
	}
	protected void onDrawingEdited(int index) throws ims.framework.exceptions.PresentationLogicException
	{
		AdmisSpineExamVo voAdmisExam = form.getLocalContext().getadmisSpineExam();
		boolean bSiteFound = false;
		
		//get the Drawing Shape edited
		DrawingControlShape shape = getEditedShape(index);
		if(shape != null)
		{	
			//update shape
			if ((voAdmisExam != null) && (voAdmisExam.getMskExamIsNotNull()) && (voAdmisExam.getMskExam().getExaminationFindingsIsNotNull()))
			{
				MskSpineExamFindingVoCollection vocolSpExFin = voAdmisExam.getMskExam().getExaminationFindings();
				for (int i=0;i<vocolSpExFin.size();i++)
				{
					if(vocolSpExFin.get(i).getID_MskSpineExamFindingIsNotNull() &&
					   vocolSpExFin.get(i).getID_MskSpineExamFinding().intValue() == shape.getIndex())
					{
						vocolSpExFin.get(i).setSpineSiteDetails(shape.getVML());
						voAdmisExam.getMskExam().setExaminationFindings(vocolSpExFin);
						//	Set the Assessment Findings						
						form.getGlobalContext().SpinalInjuries.Back.setMskSpineExamFindingVo(vocolSpExFin.get(i));
						form.getLocalContext().setadmisSpineExam(voAdmisExam);						
						bSiteFound = true;
					}					
				}
			}
			
			if (!bSiteFound) // TODO Add a shape........
			{
				MskSpineExamFindingVo mskSpineExamFindingVO = new MskSpineExamFindingVo();
				//site name
				mskSpineExamFindingVO.setSpineSiteName(getAreaOrGroupName(shape.getTargetID()));
				//finding type
				mskSpineExamFindingVO.setFindingType(new SpineExaminationFinding(shape.getBrushID()));
				//Site XML image description
				mskSpineExamFindingVO.setSpineSiteDetails(shape.getVML());
				//set internal finding id with drawing index until changed by saving the domain record
				mskSpineExamFindingVO.setID_MskSpineExamFinding(new Integer(shape.getIndex()));
				
				//keep Site Index in local context to update grid on return from dialog
				form.getLocalContext().setdrawingIndex(new Integer(shape.getIndex()));
				form.getLocalContext().setvoSpinExamFindIndex(new Integer(-1));

				if(voAdmisExam == null)
					voAdmisExam = new AdmisSpineExamVo();
				if(voAdmisExam.getMskExam() == null)
					voAdmisExam.setMskExam(new MskSpineExaminationVo());
				if(voAdmisExam.getMskExam().getExaminationFindings() == null)
					voAdmisExam.getMskExam().setExaminationFindings(new MskSpineExamFindingVoCollection());
				voAdmisExam.getMskExam().getExaminationFindings().add(mskSpineExamFindingVO);
				
				form.getLocalContext().setadmisSpineExam(voAdmisExam);
			}
		}
	}
	
	protected void onDrawingRemoved(int index) throws ims.framework.exceptions.PresentationLogicException
	{
		AdmisSpineExamVo voAdmisExam = form.getLocalContext().getadmisSpineExam();
		
		//get the Drawing Shape edited
		if ((voAdmisExam != null) && (voAdmisExam.getMskExamIsNotNull()) && (voAdmisExam.getMskExam().getExaminationFindingsIsNotNull()))
		{
			MskSpineExamFindingVoCollection vocolSpExFin = voAdmisExam.getMskExam().getExaminationFindings();
			for (int i=0;i<vocolSpExFin.size();i++)
			{
				if( vocolSpExFin.get(i).getID_MskSpineExamFinding().intValue() == index)//WDEV-15279
				{
					//remove it
					removeFromGrid(index);
					vocolSpExFin.remove(i);
					voAdmisExam.getMskExam().setExaminationFindings(vocolSpExFin);
					//Set the Assessment Findings						
					form.getLocalContext().setadmisSpineExam(voAdmisExam);						
				}					
			}
		}	
}
	
	private void removeFromGrid(int drawingIndex)
	{
		GenForm.grdSiteFindingRowCollection nRowCol = form.grdSiteFinding().getRows();
		
		for (int i=0; i<nRowCol.size(); i++)
		{
			if (nRowCol.get(i).getdrawingIndex().intValue() == drawingIndex)
			{
				//remove it
				nRowCol.remove(i);
				break;
			}
		}
		updateContextMenu();
	}
	
	protected void onDrawingNote(ims.framework.controls.DrawingControlShape shape) throws ims.framework.exceptions.PresentationLogicException
	{
		AdmisSpineExamVo admisSpineVo = form.getLocalContext().getadmisSpineExam();

		if(admisSpineVo.getMskExam() == null)
		{
			admisSpineVo.setMskExam(new MskSpineExaminationVo());
			admisSpineVo.getMskExam().setExaminationFindings(new MskSpineExamFindingVoCollection());
		}
		
		MskSpineExamFindingVo mskSpineExamFindingVO = null; 
		MskSpineExaminationVo voMskSpineExam = admisSpineVo.getMskExam();
		
		boolean bSiteFound = false;
		if(voMskSpineExam.getExaminationFindings() != null)
		{
			for(int i=0; i<voMskSpineExam.getExaminationFindings().size(); i++)
			{
				//The user can update the record not saved
				if( voMskSpineExam.getExaminationFindings().get(i).getID_MskSpineExamFinding().intValue() == shape.getIndex()) 
				{
					if(shape.getTargetID() == savedTargetID)
					{
						//Saved record
						engine.showMessage("You are not allowed to update an existing finding.");
						return;	
					}
					else
					{
						//Not saved yet record - and as a consequence is updatable
						mskSpineExamFindingVO = voMskSpineExam.getExaminationFindings().get(i);
						mskSpineExamFindingVO.setSpineSiteDetails(shape.getVML()); //WDEV-18096 
						form.getLocalContext().setdrawingIndex(new Integer(shape.getIndex()));
						form.getLocalContext().setvoSpinExamFindIndex(new Integer(i));
						bSiteFound = true;
						break;
					}
				}
			}
		}
		
		if(!bSiteFound)
		{
			mskSpineExamFindingVO = new MskSpineExamFindingVo();
			//site name
			mskSpineExamFindingVO.setSpineSiteName(getAreaOrGroupName(shape.getTargetID()));
			//finding type
			mskSpineExamFindingVO.setFindingType(new SpineExaminationFinding(shape.getBrushID()));
			//Site XML image description
			mskSpineExamFindingVO.setSpineSiteDetails(shape.getVML());
			//set internal finding id with drawing index until changed by saving the domain record
			mskSpineExamFindingVO.setID_MskSpineExamFinding(new Integer(shape.getIndex()));
			//keep Site Index in local context to update grid on return from dialog
			form.getLocalContext().setdrawingIndex(new Integer(shape.getIndex()));
			form.getLocalContext().setvoSpinExamFindIndex(new Integer(-1));
		}

		//Set the global context to pass to 
		form.getGlobalContext().SpinalInjuries.Back.setMskSpineExamFindingVo(mskSpineExamFindingVO);
		//Set the main Pain Assessment 
		form.getLocalContext().setadmisSpineExam(admisSpineVo);
		
		engine.open(form.getForms().SpinalInjuries.MedMskSpineExamFindingsDialog);
		
	}
		
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().SpinalInjuries.MedMskSpineExamFindingsDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				//save the record
				AdmisSpineExamVo voAdmisSpineExam;
				
				if ((form.getLocalContext().getadmisSpineExamIsNotNull()) && (form.getGlobalContext().SpinalInjuries.Back.getMskSpineExamFindingVoIsNotNull()))
				{
					MskSpineExamFindingVo voSpineExamFinding = form.getGlobalContext().SpinalInjuries.Back.getMskSpineExamFindingVo();

					voAdmisSpineExam = form.getLocalContext().getadmisSpineExam();
					
					if (voAdmisSpineExam.getMskExam().getExaminationFindingsIsNotNull())
					{
						//record to update
						int iRecToUpdate = form.getLocalContext().getvoSpinExamFindIndex().intValue();
						if (iRecToUpdate != -1)
						{
							voAdmisSpineExam.getMskExam().getExaminationFindings().get(iRecToUpdate).setSpineFindInterpretation(voSpineExamFinding.getSpineFindInterpretation());
							voAdmisSpineExam.getMskExam().getExaminationFindings().get(iRecToUpdate).setSpineSiteDetails(voSpineExamFinding.getSpineSiteDetails());
							voAdmisSpineExam.getMskExam().getExaminationFindings().get(iRecToUpdate).setSpineSiteName(voSpineExamFinding.getSpineSiteName());
						}
						else
							voAdmisSpineExam.getMskExam().getExaminationFindings().add(voSpineExamFinding);
							
					}
					else
					{
						MskSpineExamFindingVoCollection voMskSpineExamFindingColl = new MskSpineExamFindingVoCollection();
						voMskSpineExamFindingColl.add(voSpineExamFinding);
						voAdmisSpineExam.getMskExam().setExaminationFindings(voMskSpineExamFindingColl);
					}
					
					//27/10/2005 - Code Refactoring - add Problem only when exists
					if (form.getGlobalContext().SpinalInjuries.getMedicalProbToSaveIsNotNull())
					{
						if (voAdmisSpineExam.getProblemsOnAdmission() == null)
							voAdmisSpineExam.setProblemsOnAdmission( new MedicalProbOnAdmisVoCollection());
						voAdmisSpineExam.getProblemsOnAdmission().add(form.getGlobalContext().SpinalInjuries.getMedicalProbToSave());
											
						form.getGlobalContext().SpinalInjuries.setMedicalProbToSave(null);
					}

					form.getLocalContext().setadmisSpineExam(voAdmisSpineExam);
							
					GenForm.grdSiteFindingRowCollection nRowCol = form.grdSiteFinding().getRows();
					boolean bfound = false;
					
					for (int i=0; i<nRowCol.size(); i++)
					{
						if (nRowCol.get(i).getdrawingIndex() != null && 
						    nRowCol.get(i).getdrawingIndex().intValue() == form.getLocalContext().getdrawingIndex().intValue())
						{
							//update it
							nRowCol.get(i).setValue(form.getGlobalContext().SpinalInjuries.Back.getMskSpineExamFindingVo());
							nRowCol.get(i).setcolInterpretation(form.getGlobalContext().SpinalInjuries.Back.getMskSpineExamFindingVo().getSpineFindInterpretation());
							bfound = true;
							break;
						}
					}
					
					if (!bfound)
					{
						//insert into grid
						GenForm.grdSiteFindingRow nRow = form.grdSiteFinding().getRows().newRow(true);
						nRow.setValue(voSpineExamFinding);
						nRow.setcolFinding(new SpineExaminationFinding(voSpineExamFinding.getFindingType().getID()));
						nRow.setcolInterpretation(voSpineExamFinding.getSpineFindInterpretation());
						nRow.setcolSite(voSpineExamFinding.getSpineSiteName());
						nRow.setdrawingIndex(form.getLocalContext().getdrawingIndex());
					}												
				}
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				//Find if the user clicked Cancel for the first Time (was changing his mind)
				//and warn the user to clear the drawing
				MskSpineExamFindingVoCollection voSpineExamFindingCol = form.getLocalContext().getadmisSpineExam().getMskExam().getExaminationFindings();
				if(voSpineExamFindingCol != null)
				{
					int index = voSpineExamFindingCol.indexOf(form.getGlobalContext().SpinalInjuries.Back.getMskSpineExamFindingVo());
					if(index < 0)
					{
						engine.showMessage("Please select the previous image and remove it.");
					}
				}
			}
		}
		updateContextMenu(); // WDEV-18029
	}
	
	private String getAreaOrGroupName(int targetID)
	{
		return getAreaName(new Integer(targetID));
	}
		
	private String getAreaName(Integer areaID)
	{
		DrawingControlAreaCollection areas = form.getGlobalContext().SpinalInjuries.Back.getAreas();
		if(areas != null)
			for(int i=0; i<areas.size(); i++)
				if(areas.get(i).getID() == areaID.intValue())
					return areas.get(i).getName();
				
		//Check if it's not a group
		DrawingControlGroupCollection groups = form.getGlobalContext().SpinalInjuries.Back.getGroups();
		if(groups != null)
			for(int i=0; i<groups.size(); i++)
				if(groups.get(i).getID() == areaID.intValue())
					return groups.get(i).getName();
		return "";
	}		
	
	private boolean open()
	{
		return open(false);
	}
	
	private boolean open(boolean bInitDrawingCtrl)
	{
		clearControls();
		form.drawingBack().clearShapes();
		
		form.setMode(FormMode.VIEW);
		
		if(engine.getFormName().equals(form.getForms().SpinalInjuries.MedMskSpineExamInpatient))
		{
			form.drawingBack().clearBrushes();
			fillRecordBrowser();
			initialiseDrawingControl(form.getLocalContext().getadmisSpineExam(),true);
		}
		else
		{
			ClinicalContactShortVo voClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			if(voClinicalContact != null && voClinicalContact.getContactType().equals(ContactType.SPINALMEDICALADMISSION))
				form.getLocalContext().setadmisSpineExam(domain.getAdmisSpineExamination(voClinicalContact, null));
			else
				form.getLocalContext().setadmisSpineExam(domain.getMedicalAdmissionSpineExamByCareContext(form.getGlobalContext().Core.getCurrentCareContext()));
			
			populateScreenFromData(form.getLocalContext().getadmisSpineExam(),bInitDrawingCtrl);
		}
		return true;	
	}

	private void fillRecordBrowser()
	{
		form.recbrExam().clear();
		
		MskSpineExamFindingShortVoCollection voSpineExamFindingColl = domain.listByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
		loadCareContextRecords(voSpineExamFindingColl);
				
		sortSpineExam(voSpineExamFindingColl);
			
		checkForSelectedClinicalContact();
			
		setRecordBrowser();
		browseRecord();
	}
	
	private void checkForSelectedClinicalContact()
	{
		// the selected Clinical Contact that has been selected from Patient Summary may not have a record and therefore 
		// must be added to the record browser
		boolean clinicalContactFound = false;
		ClinicalContactShortVo voSelectedClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		
		if(voSelectedClinicalContact != null)
		{
			for(int i =0; i< form.recbrExam().size(); i++)
			{
				ValueObject vo = (ValueObject) form.recbrExam().getValues().get(i);
				if(vo instanceof ClinicalContactShortVo)
				{
					ClinicalContactShortVo voClinicalContact = (ClinicalContactShortVo) form.recbrExam().getValues().get(i);
					if(voClinicalContact.equals(voSelectedClinicalContact))
						clinicalContactFound = true;
				}
			}
			
			if(!clinicalContactFound)
			{
				form.recbrExam().newRow(voSelectedClinicalContact, "Clinical Contact: " + voSelectedClinicalContact.getStartDateTime() + " - " + voSelectedClinicalContact.getSeenBy(), Color.Green);
				form.recbrExam().setValue(voSelectedClinicalContact);
			}
		}
	}
	private void sortSpineExam(MskSpineExamFindingShortVoCollection voSpineExamFindingColl)
	{
		if(voSpineExamFindingColl != null)
		{
			int x = 0;
			for(x = 0; x < voSpineExamFindingColl.size(); x++)
			{
				MskSpineExamFindingShortVoCollection voSpineExamFindingCollForClinicalContact = new MskSpineExamFindingShortVoCollection();
				if(voSpineExamFindingColl.get(x).getClinicalContact() != null)
				{
					ClinicalContactShortVo voClinicalContact = voSpineExamFindingColl.get(x).getClinicalContact();
					
					for(int i =0; i<voSpineExamFindingColl.size(); i++)
					{
						if(voSpineExamFindingColl.get(i).getClinicalContact() != null)
						{
							if(voSpineExamFindingColl.get(i).getClinicalContact().getID_ClinicalContact().equals(voClinicalContact.getID_ClinicalContact()))
							{
								voSpineExamFindingCollForClinicalContact.add(voSpineExamFindingColl.get(i));
								x = i;
							}
						}
					}
					loadClinicalContactSpineRecords(voClinicalContact, voSpineExamFindingCollForClinicalContact);
				}
			}
		}
	}
	private void loadClinicalContactSpineRecords(ClinicalContactShortVo voClinicalContact, MskSpineExamFindingShortVoCollection voSpineExamFindingColl)
	{
		boolean isClinicalContactSelected = checkCurrentClinicalContact(voClinicalContact);
		
		Color textColour = Color.Black;
		if(isClinicalContactSelected)
			textColour = Color.Green;
		
		form.recbrExam().newRow(voClinicalContact, "Clinical Contact: " + voClinicalContact.getStartDateTime() + " - " + voClinicalContact.getSeenBy(), textColour);
		
		if(isClinicalContactSelected)
			form.recbrExam().setValue(voClinicalContact);
		
		for(int i=0; i<voSpineExamFindingColl.size(); i++)
		{
			MskSpineExamFindingShortVo voSpineExam = voSpineExamFindingColl.get(i);
			form.recbrExam().newRow(voSpineExam, "\t\t\t\t " + voSpineExam.getAuthoringDateTime() + " - " + voSpineExam.getAuthoringCP().getMos().getName(), textColour);
		}
	}
	private boolean checkCurrentClinicalContact(ClinicalContactShortVo voClinicalContact)
	{
		// checks if this Clinical Contact is the selected Clinical Contact from Patient Summary
		ClinicalContactShortVo voSelectedClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
		if(voSelectedClinicalContact != null)
		{
			if(voSelectedClinicalContact.equals(voClinicalContact))
				return true;
			else
				return false;
		}
		return false;
	}
	private void loadCareContextRecords(MskSpineExamFindingShortVoCollection voSensationFindingsColl)
	{
		CareContextShortVo voCareContext = form.getGlobalContext().Core.getCurrentCareContext();
		
		if(form.getGlobalContext().Core.getCurrentClinicalContact() == null)
		{
			form.recbrExam().newRow(voCareContext, "Care Context:    " + voCareContext.getStartDateTime() + " - " + voCareContext.getEpisodeOfCare().getResponsibleHCP(), Color.Green);
			loadCareContextMotorRecords(voSensationFindingsColl, Color.Green);
			form.recbrExam().setValue(voCareContext);
		}
		else
		{
			form.recbrExam().newRow(voCareContext, "Care Context:    " + voCareContext.getStartDateTime() + " - " + voCareContext.getEpisodeOfCare().getResponsibleHCP());
			loadCareContextMotorRecords(voSensationFindingsColl, Color.Black);
		} 
	}
	private void loadCareContextMotorRecords(MskSpineExamFindingShortVoCollection voSensationFindingsColl, Color activeColor)
	{
		if(voSensationFindingsColl != null)
		{
			for(int i=0; i<voSensationFindingsColl.size(); i++)
			{
				MskSpineExamFindingShortVo voSpineExam = voSensationFindingsColl.get(i);
				if(voSpineExam.getClinicalContact() == null)
				{
					form.recbrExam().newRow(voSpineExam, "\t\t\t\t "+ voSpineExam.getAuthoringDateTime() + " - " + voSpineExam.getAuthoringCP().getMos().getName(), activeColor);
				}
			}
		}
	}
	private void setRecordBrowser()
	{
		// after an update need to set the record browser to display the updated record
		if(form.getLocalContext().getUpdatedInstanceIsNotNull())
		{
			form.recbrExam().setValue(form.getLocalContext().getUpdatedInstance());
	
			browseRecord();
		}
	}
	private void clearControls()
	{
		form.ccAuthoring().setValue(null);	
		form.txtMovements().setValue("");
		form.grdSiteFinding().getRows().clear();
	}
	
	private boolean populateScreenFromData(AdmisSpineExamVo voAdmisSpineExam, boolean bInitDrawingCtrl)
	{		
		populateControlInfo(voAdmisSpineExam);

		boolean bImageLoaded = initialiseDrawingControl(voAdmisSpineExam,bInitDrawingCtrl);
		populateControls();
		return bImageLoaded;
	}
	private void displayButtons()
	{
		if(form.getLocalContext().getadmisSpineExam() == null || form.getLocalContext().getadmisSpineExam().getMskExam() == null)
		{
			form.btnNew().setVisible(true);
			form.btnUpdate().setVisible(false);
		}
		else
		{
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled(false);
			form.btnUpdate().setVisible(true);
		}
		
		/*if(engine.getFormName().equals(form.getForms().SpinalInjuries.MedMskSpineExamInpatient))
		{
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled(true);
			if(form.recbrExam().getValue() != null)
				form.btnUpdate().setVisible(true);
			else
				form.btnUpdate().setVisible(false);
		}*/
		
	}
		
	private void populateControlInfo(AdmisSpineExamVo voAdmisSpineExam)
	{
		displayButtons();
		
		
		if(voAdmisSpineExam != null)
		{
			if(voAdmisSpineExam.getMskExamIsNotNull())
			{
				MskSpineExaminationVo voSpineExam = voAdmisSpineExam.getMskExam();
				//WDEV-15172
				AuthoringInformationVo authoringInfo = new AuthoringInformationVo(); 
				authoringInfo.setAuthoringHcp(voSpineExam.getAuthoringCP());
				authoringInfo.setAuthoringDateTime(voSpineExam.getAuthoringDateTime());
				form.ccAuthoring().setValue(authoringInfo);
				return;
			}
		}
		
		if(!engine.getFormName().equals(form.getForms().SpinalInjuries.MedMskSpineExamInpatient))
		{
			if(form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull())
			{
				ClinicalContactShortVo voClinicalContactShort = form.getGlobalContext().Core.getCurrentClinicalContact();
				
				if(voClinicalContactShort != null)
				{
					form.ccAuthoring().initializeComponent(false); //WDEV-15172
				}
			}
		}
		
	}
	private String getCurrentImageName()
	{
		//25/10/2005 - get the local context
		AdmisSpineExamVo voAdmisSpineExam = form.getLocalContext().getadmisSpineExam();
		if(voAdmisSpineExam != null && voAdmisSpineExam.getMskExamIsNotNull() && voAdmisSpineExam.getMskExam().getImageVersionIsNotNull())
			return voAdmisSpineExam.getMskExam().getImageVersion().getImageName();

		//It should match the name of the image from the database
		return "Spinal Back";
	}
	
	//Returns the saved version number or the getLast version
	private Integer getCurrentVersionNumber()
	{
		AdmisSpineExamVo voAdmisSpineExam = form.getLocalContext().getadmisSpineExam();
		if(voAdmisSpineExam != null && voAdmisSpineExam.getMskExamIsNotNull() && voAdmisSpineExam.getMskExam().getImageVersionIsNotNull() && voAdmisSpineExam.getMskExam().getImageVersion().getVersionNumberIsNotNull())
			return voAdmisSpineExam.getMskExam().getImageVersion().getVersionNumber();	
		
		DrawingImageVersionVo voDrawImgVersion = form.getLocalContext().getvoDrawingImageVersion();
		return voDrawImgVersion != null?voDrawImgVersion.getVersionNumber():null;
	}

	//26 October 2005 - Roll back to the way the versioning was working (from 07/10/2005)
	//Versioning = when the screen has data use the version against the saved data, otherwise get the latest image version configuration
	private boolean initialiseDrawingControl(AdmisSpineExamVo voAdmisSpineExam,boolean bInitCtrl)
	{
		if(bInitCtrl)
		{
			DrawingImageVo voImageRetrieved = new DrawingImageVo();
			AppImageVo voAppImage = new AppImageVo();
			
			if (voAdmisSpineExam != null && (voAdmisSpineExam.getMskExamIsNotNull()) && (voAdmisSpineExam.getMskExam().getImageVersionIsNotNull()))
			{
					//load this record's image version
					if (voAdmisSpineExam.getMskExam().getImageVersionIsNotNull())
					{	
						//store records version of the image to local context for updates
						form.getLocalContext().setvoDrawingImageVersion(voAdmisSpineExam.getMskExam().getImageVersion());
											
						voAppImage.setID_AppImage(new Integer(form.getImages().GeneralMedical.SpinalBack.getImageId()));
						
						DrawingImageVo voImagetoGet = new DrawingImageVo();					
						voImagetoGet.setImage(voAppImage);
						voImagetoGet.setImageName(getCurrentImageName());
						//When no version no - the domain will return getLast()
						Integer currentVersion = getCurrentVersionNumber();
						if(currentVersion != null)
							voImagetoGet.setVersionNumber(currentVersion);
						voImageRetrieved = domain.getDrawingImage(voImagetoGet);
						if(voImageRetrieved == null)
						{
							//load blank Image
							loadDefaultImgSettings();
							disablePage();
							displayError("No image associated with the drawing control");
							return false;
						}
					}
					else
						engine.showMessage("Image not associated with saved record");
			}
			else
			{
					//load the associated image 		
					voAppImage.setID_AppImage(new Integer(form.getImages().GeneralMedical.SpinalBack.getImageId()));
					
					DrawingImageVo voImagetoGet = new DrawingImageVo();
					voImagetoGet.setImage(voAppImage);
					voImagetoGet.setImageName(getCurrentImageName());
					
					//get the latest version
					voImageRetrieved = domain.getDrawingImage(voImagetoGet);
					if(voImageRetrieved == null)
					{
						loadDefaultImgSettings();
						disablePage();
						displayError("No image associated with the drawing control");
						return false;
					}
					
					//update local context drawingimage version
					DrawingImageVersionVo voDrwImageVer = new DrawingImageVersionVo();				
					voDrwImageVer.setImageName(voImageRetrieved.getImageName());
					voDrwImageVer.setVersionNumber(voImageRetrieved.getVersionNumber());
					form.getLocalContext().setvoDrawingImageVersion(voDrwImageVer);
			}
			//Set the image
			Image repImage = engine.getRegisteredImage(voImageRetrieved.getImage().getID_AppImage().intValue());
			form.drawingBack().setImage(repImage);
			//Findings
			for(int i=0; i<SpineExaminationFinding.getNegativeInstances().length; i++)
				form.drawingBack().addBrush(SpineExaminationFinding.getNegativeInstances()[i].getId(), SpineExaminationFinding.getNegativeInstances()[i].getText(), SpineExaminationFinding.getNegativeInstances()[i].getColor());
			//Areas and roots		
			DrawingControlGroup rootNode = new DrawingControlGroup(voImageRetrieved.getRootGroup().getGroupID().intValue(), voImageRetrieved.getRootGroup().getGroupName());
			convertAllAreasToNode(voImageRetrieved.getRootGroup(), rootNode);
			form.drawingBack().setAreas(rootNode);			
			form.getGlobalContext().SpinalInjuries.Back.setAreas(rootNode.getAllAreas());
			form.getGlobalContext().SpinalInjuries.Back.setGroups(getAllGroups(rootNode));
			
			//For Printing
			form.drawingBack().setPrintSubTitle(getCurrentImageName());
			if (form.getGlobalContext().Core.getPatientShortIsNotNull())
				form.drawingBack().setPrintTitle(form.getGlobalContext().Core.getPatientShort().getPatientInfo());
		}
		
		return true;
	}
	
	//Get all the Groups
	private DrawingControlGroupCollection getAllGroups(DrawingControlGroup rootNode)
	{
		DrawingControlGroupCollection groupColl = new DrawingControlGroupCollection();;
		if(rootNode.getGroups() != null)
		{
			//Add the parent root
			groupColl.add(rootNode);
			for(int i=0; i<rootNode.getGroups().size(); i++)
			{
				groupColl.add(rootNode.getGroups().get(i));
				getGroups(groupColl, rootNode.getGroups().get(i)); 
			}
		}

		return groupColl;
	}
	
	private void getGroups(DrawingControlGroupCollection groupColl, DrawingControlGroup node)
	{
		if(node.getGroups().size() > 0)
		{
			for(int i=0; i<node.getGroups().size(); i++)
				getGroups(groupColl, node.getGroups().get(i)); 
		}
		else
			groupColl.add(node);
	}
		
	private void populateControls()
	{
		AdmisSpineExamVo voAdmisSpineExam;
		MskSpineExaminationVo voSpineExamination;
		
		form.getLocalContext().setSelectedMskSpineExaminationVo(null);//WDEV-13524
				
		if(form.getLocalContext().getadmisSpineExamIsNotNull() && 
				form.getLocalContext().getadmisSpineExam().getMskExamIsNotNull())
		{
			voAdmisSpineExam = form.getLocalContext().getadmisSpineExam();
			voSpineExamination = voAdmisSpineExam.getMskExam();
			
			form.getLocalContext().setSelectedMskSpineExaminationVo(voSpineExamination);//WDEV-13524
			
			if((voAdmisSpineExam != null) && (voSpineExamination != null))
			{
				//Populate Drawing Chart
				DrawingControlShape shape;
				MskSpineExamFindingVoCollection voColSpineExamFind = voSpineExamination.getExaminationFindings();
				for(int i=0; i<voColSpineExamFind.size(); i++)
				{
					if(voColSpineExamFind.get(i).getFindingTypeIsNotNull() && 
					   voColSpineExamFind.get(i).getID_MskSpineExamFindingIsNotNull())
					{
						shape = new DrawingControlShape(
						voColSpineExamFind.get(i).getID_MskSpineExamFinding().intValue(),
						savedTargetID,
						voColSpineExamFind.get(i).getSpineSiteDetails(), 
						voColSpineExamFind.get(i).getFindingType().getId(),
						true,
						getTooltip(voAdmisSpineExam, voColSpineExamFind.get(i)));
					
						form.drawingBack().addShape(shape);
						
						//insert into grid
						GenForm.grdSiteFindingRow nRow = form.grdSiteFinding().getRows().newRow();
						nRow.setValue(voColSpineExamFind.get(i));
						nRow.setcolFinding(new SpineExaminationFinding(voColSpineExamFind.get(i).getFindingType().getID()));
						nRow.setcolInterpretation(voColSpineExamFind.get(i).getSpineFindInterpretation());
						nRow.setcolSite(voColSpineExamFind.get(i).getSpineSiteName());
						//hidden column for drawing index
						nRow.setdrawingIndex(new Integer(shape.getIndex()));						
					}
				}

				
				if (voSpineExamination.getSpineMovementsIsNotNull())
				{
					form.txtMovements().setValue(voSpineExamination.getSpineMovements());
				}
			}
			
		}
	}
	
	private String getTooltip(AdmisSpineExamVo spineAdmisExam, MskSpineExamFindingVo findingVO)
	{
		StringBuffer tooltip = new StringBuffer();
		String cr = "<br>";

		tooltip.append(label[0]);
		//Date/Time
		/*if(spineAdmisExam.getMskExam().getClinicalContact().getRecordingDateTimeIsNotNull())
		{
			tooltip.append(spineAdmisExam.getMskExam().getClinicalContact().getRecordingDateTime().getDate().toString(DateFormat.STANDARD));
			tooltip.append("; ");
			tooltip.append(spineAdmisExam.getMskExam().getClinicalContact().getRecordingDateTime().getTime().toString(TimeFormat.DEFAULT));
			tooltip.append("hrs");
		}*/
		if(spineAdmisExam.getMskExam().getClinicalContactIsNotNull())
		{
			if(spineAdmisExam.getMskExam().getClinicalContact().getStartDateTimeIsNotNull())
			{
				tooltip.append(spineAdmisExam.getMskExam().getClinicalContact().getStartDateTime().getDate().toString(DateFormat.STANDARD));
				tooltip.append("; ");
				tooltip.append(spineAdmisExam.getMskExam().getClinicalContact().getStartDateTime().getTime().toString(TimeFormat.DEFAULT));
				tooltip.append("hrs");
			}
		}
			
		tooltip.append(cr);
		
		tooltip.append(label[1]);
		//HCP
		//if(spineAdmisExam.getMskExam().getClinicalContact().getCareContext().getEpisodeOfCare().getResponsibleHCPIsNotNull())
		//	tooltip.append(spineAdmisExam.getMskExam().getClinicalContact().getCareContext().getEpisodeOfCare().getResponsibleHCP().toString());
		if(spineAdmisExam.getMskExam().getClinicalContactIsNotNull())
		{
			if(spineAdmisExam.getMskExam().getClinicalContact().getSeenByIsNotNull())
				tooltip.append(spineAdmisExam.getMskExam().getClinicalContact().getSeenBy().toString());
		}
		
		tooltip.append(cr);
		
		//Finding
		tooltip.append(label[2]);
		if(findingVO.getFindingTypeIsNotNull())
			tooltip.append(findingVO.getFindingType().getText());
		tooltip.append(cr);
		
		//Site
		tooltip.append(label[3]);
		tooltip.append(findingVO.getSpineSiteNameIsNotNull()?findingVO.getSpineSiteName():"");
		tooltip.append(cr);
				
		return tooltip.toString();
	}
	
	private void convertAllAreasToNode(DrawingGroupVo voGroup,DrawingControlGroup node)
	{
		node.setName(voGroup.getGroupName());
		//convert all areas to controlgroup
		int i;
		for(i=0;i<voGroup.getAreaCollection().size();i++)
		{
			node.add(createDrawingControlArea(voGroup.getAreaCollection().get(i)));
		}
		
		for(int j=0;j<voGroup.getChildGroups().size();j++)
		{
			DrawingGroupVo  childGroup = voGroup.getChildGroups().get(j);
			node.add(createDrawingControlGroup(childGroup));
			convertAllAreasToNode(childGroup, node.getGroup(i+j));
		}	
	}
	
	private DrawingControlGroup createDrawingControlGroup(DrawingGroupVo voGroup) 
	{
		DrawingControlGroup group = new DrawingControlGroup(voGroup.getGroupID().intValue(),voGroup.getGroupName());
		return group;
	}

	private DrawingControlArea createDrawingControlArea(DrawingAreaVo voArea) 
	{
		DrawingControlArea area = new DrawingControlArea(voArea.getAreaID().intValue(),voArea.getAreaName(),voArea.getAreaVectors());
		return area;
	}
	
	private DrawingControlShape getEditedShape(int index)
	{
		for(int i=0; i<form.drawingBack().getShapes().size(); i++)
		{
			DrawingControlShape shape = (DrawingControlShape)form.drawingBack().getShapes().get(i);
			if(shape.getIndex() == index)
				return shape;
		}
		return null;
	}
	
	private void displayError(String error)
	{
		engine.showMessage(error);
	}
	private void loadDefaultImgSettings()
	{
		form.drawingBack().setImage(form.getImages().GeneralMedical.Blank);
		for(int i=0; i<SpineExaminationFinding.getNegativeInstances().length; i++)
			form.drawingBack().addBrush(SpineExaminationFinding.getNegativeInstances()[i].getId(), SpineExaminationFinding.getNegativeInstances()[i].getText(), SpineExaminationFinding.getNegativeInstances()[i].getColor());
		DrawingControlGroup root = new DrawingControlGroup(-1, "Spinal back");
		form.drawingBack().setAreas(root);
	}
	private void disablePage()
	{
		form.btnNew().setEnabled(false);
		form.btnUpdate().setEnabled(false);
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.MedInjuryDetailsTextBox.AddToProblem:
				addProblem(sender);
				break;
			case GenForm.ContextMenus.GenericGrid.Update:
				updateExamFinding();
				break;
		}
	}

	private void addProblem(Control sender)
	{
		if(sender.equals(form.txtMovements()))
		{
			MedicalProbOnAdmisVo voMedicalProblem = new MedicalProbOnAdmisVo();
			voMedicalProblem.setPatientProblem(form.txtMovements().getSelectedText());
			voMedicalProblem.setIsActive(Boolean.TRUE);
			voMedicalProblem.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
			voMedicalProblem.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			voMedicalProblem.setProblemContext("Spine Examination");

			AdmisSpineExamVo voAdmisSpineExam = form.getLocalContext().getadmisSpineExam();
			if(voAdmisSpineExam == null)
				voAdmisSpineExam = new AdmisSpineExamVo();
			
			if(voAdmisSpineExam.getProblemsOnAdmission() == null)
				voAdmisSpineExam.setProblemsOnAdmission(new MedicalProbOnAdmisVoCollection());
			
			voAdmisSpineExam.getProblemsOnAdmission().add(voMedicalProblem);
			
			form.getLocalContext().setadmisSpineExam(voAdmisSpineExam);
		}
	}

	private void updateExamFinding()
	{
		MskSpineExamFindingVo voSpineExamFinding = form.grdSiteFinding().getValue();
		//Set the global context to pass to 
		form.getGlobalContext().SpinalInjuries.Back.setMskSpineExamFindingVo(voSpineExamFinding);
		
		form.getLocalContext().setvoSpinExamFindIndex(getExaminationFindingIndex(voSpineExamFinding));
		form.getLocalContext().setdrawingIndex(voSpineExamFinding.getID_MskSpineExamFinding());
				
		engine.open(form.getForms().SpinalInjuries.MedMskSpineExamFindingsDialog);
	}

	protected void onFormModeChanged() 
	{
		updateContextMenu();
		
		prepareRecordBrowser();
		
		checkAuthoringControls();
	}
	private void checkAuthoringControls()
	{
		//WDEV-15172
		form.ccAuthoring().setEnabledAuthoringHCP(form.getMode().equals(FormMode.EDIT) && form.getLocalContext().getIsMedicalInpatientForm());
		form.ccAuthoring().setEnabledDateTime(form.getMode().equals(FormMode.EDIT) && form.getLocalContext().getIsMedicalInpatientForm());
	}
	
	private void prepareRecordBrowser()
	{
		if(form.getMode().equals(FormMode.VIEW)&& form.recbrExam().getVisible())
			form.recbrExam().setEnabled(true);
		else
			form.recbrExam().setEnabled(false);
	}
	private void updateContextMenu()
	{
		form.getContextMenus().getMedInjuryDetailsTextBoxAddToProblemItem().setVisible(form.getMode().equals(FormMode.EDIT));
		
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Exam Finding");
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdSiteFinding().getValue() != null);
	}
	private Integer getExaminationFindingIndex(MskSpineExamFindingVo voSpineExamFinding)
	{
		AdmisSpineExamVo voMskSpineExam = form.getLocalContext().getadmisSpineExam();
		for(int i=0; i<voMskSpineExam.getMskExam().getExaminationFindings().size(); i++)
		{
			if(voMskSpineExam.getMskExam().getExaminationFindings().get(i).equals(voSpineExamFinding))
				return new Integer(i);
		}
		
		return new Integer(-1);
	}
	
	private String[] label = new String[]{"<b>" + "Recording Date/Time: " + "</b>", 
			  "<b>" + "HCP: " + "</b>",
			  "<b>" + "Finding: " + "</b>",
			  "<b>" + "Site: " + "</b>"};
	private int savedTargetID =-1;
	
	protected void onRecbrExamValueChanged() throws PresentationLogicException
	{
		browseRecord();
	}
	private void browseRecord()
	{
		clearControls();
		form.drawingBack().clearShapes();
		
		updateBrowseInformation();
		
		if(form.recbrExam().getValue() != null)
		{			
			if(form.recbrExam().getValue() instanceof ClinicalContactShortVo)
			{
				form.getLocalContext().setadmisSpineExam(domain.getAdmisSpineExamination((ClinicalContactShortVo) form.recbrExam().getValue(), null));
			}
			else if(form.recbrExam().getValue() instanceof MskSpineExamFindingShortVo)
			{
				MskSpineExamFindingShortVo voSpineExam = (MskSpineExamFindingShortVo) form.recbrExam().getValue();
				
				if(voSpineExam.getClinicalContact() == null)
					form.getLocalContext().setadmisSpineExam(domain.getAdmisSpineExamByCareContext(voSpineExam.getCareContext(), voSpineExam));
				else
					form.getLocalContext().setadmisSpineExam(domain.getAdmisSpineExamination(voSpineExam.getClinicalContact(), voSpineExam));
			}
			else
			{
				form.getLocalContext().setadmisSpineExam(domain.getAdmisSpineExamByCareContext((CareContextLiteVo) form.recbrExam().getValue(), null));
			}
			populateScreenFromData(form.getLocalContext().getadmisSpineExam(), false);
		}
		checkRecordIsEditable();
	}
	private void checkRecordIsEditable()
	{
		if(form.recbrExam().getValue() != null)
		{
			CareContextShortVo voCurrentCareContext = form.getGlobalContext().Core.getCurrentCareContext();
			ClinicalContactShortVo voCurrentClinicalContact = form.getGlobalContext().Core.getCurrentClinicalContact();
			
			if(form.recbrExam().getValue() instanceof CareContextVo)
			{
				CareContextShortVo voSelectedCareContext = (CareContextShortVo) form.recbrExam().getValue();
				if(voSelectedCareContext.getID_CareContext().equals(voCurrentCareContext.getID_CareContext()) && form.getGlobalContext().Core.getCurrentClinicalContact() == null)
					activateButtons(true);
				else
					activateButtons(false);
				
			}
			else if(form.recbrExam().getValue() instanceof MskSpineExamFindingShortVo)
			{
				MskSpineExamFindingShortVo voSpineExam = (MskSpineExamFindingShortVo) form.recbrExam().getValue();
				if(voSpineExam.getClinicalContact()== null)
				{
					CareContextShortVo voSelectedCareContext = voSpineExam.getCareContext();
					if(voSelectedCareContext.getID_CareContext().equals(voCurrentCareContext.getID_CareContext()) && form.getGlobalContext().Core.getCurrentClinicalContact() == null)
					{
						activateButtons(true);
						form.btnNew().setEnabled(false);
					}
					else
						activateButtons(false);
				}
				else
				{
					
					ClinicalContactShortVo voSelectedClinicalContact = voSpineExam.getClinicalContact();
					if(voCurrentClinicalContact != null)
					{
						if(voSelectedClinicalContact.getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
						{
							activateButtons(true);
							form.btnNew().setEnabled(false);
						}
						else
							activateButtons(false);
					}
				}
			}
			else if(form.recbrExam().getValue() instanceof ClinicalContactShortVo)//WDEV-13143 
			{
				ClinicalContactShortVo voSelectedClinicalContact = (ClinicalContactShortVo) form.recbrExam().getValue();
				if(voCurrentClinicalContact != null)
				{
					if(voSelectedClinicalContact.getID_ClinicalContact().equals(voCurrentClinicalContact.getID_ClinicalContact()))
						activateButtons(true);
					else
						activateButtons(false);
				}
				else
					activateButtons(false);
				
			}
		}
		checkForExamRecord();
		isRecordOfTypeMedicalAdmission();
	}
	private void isRecordOfTypeMedicalAdmission()
	{
		ClinicalContactShortVo voCurrentClinical = form.getGlobalContext().Core.getCurrentClinicalContact();
		if(voCurrentClinical != null)
		{
			if(voCurrentClinical.getContactType().equals(ContactType.SPINALMEDICALADMISSION))
				activateButtons(false);
		}
	}
	private void checkForExamRecord()
	{
		if(form.getLocalContext().getadmisSpineExamIsNotNull())
		{
			if(form.getLocalContext().getadmisSpineExam().getMskExam() == null)
				form.btnUpdate().setVisible(false);
		}
	}
	private void updateBrowseInformation()
	{
		form.lblBrowseStatus().setValue(form.recbrExam().getRecordState("Assessment", "Assessments"));
	}
}
