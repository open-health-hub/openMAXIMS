//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.sharednewconcern;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.spinalinjuries.domain.SharedNewConcern.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.spinalinjuries.domain.SharedNewConcern domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbIdByTeamValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbIdByTeam().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.HcpDisType existingInstance = (ims.core.vo.lookups.HcpDisType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIdByTeamLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.HcpDisType)
		{
			ims.core.vo.lookups.HcpDisType instance = (ims.core.vo.lookups.HcpDisType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIdByTeamLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.HcpDisType existingInstance = (ims.core.vo.lookups.HcpDisType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbIdByTeam().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIdByTeamLookup()
	{
		this.form.cmbIdByTeam().clear();
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbIdByTeam().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIdByTeamLookupValue(int id)
	{
		ims.core.vo.lookups.HcpDisType instance = ims.core.vo.lookups.LookupHelper.getHcpDisTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbIdByTeam().setValue(instance);
	}
	protected final void defaultcmbIdByTeamLookupValue()
	{
		this.form.cmbIdByTeam().setValue((ims.core.vo.lookups.HcpDisType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.HcpDisType.class, engine.getFormName().getID(), ims.core.vo.lookups.HcpDisType.TYPE_ID));
	}
	protected final void oncmbAllocToTeamValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbAllocToTeam().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.HcpDisType existingInstance = (ims.core.vo.lookups.HcpDisType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAllocToTeamLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.HcpDisType)
		{
			ims.core.vo.lookups.HcpDisType instance = (ims.core.vo.lookups.HcpDisType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAllocToTeamLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.HcpDisType existingInstance = (ims.core.vo.lookups.HcpDisType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbAllocToTeam().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAllocToTeamLookup()
	{
		this.form.cmbAllocToTeam().clear();
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbAllocToTeam().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAllocToTeamLookupValue(int id)
	{
		ims.core.vo.lookups.HcpDisType instance = ims.core.vo.lookups.LookupHelper.getHcpDisTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbAllocToTeam().setValue(instance);
	}
	protected final void defaultcmbAllocToTeamLookupValue()
	{
		this.form.cmbAllocToTeam().setValue((ims.core.vo.lookups.HcpDisType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.HcpDisType.class, engine.getFormName().getID(), ims.core.vo.lookups.HcpDisType.TYPE_ID));
	}
	protected final void oncmbStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientConcernStatus existingInstance = (ims.core.vo.lookups.PatientConcernStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.PatientConcernStatus)
		{
			ims.core.vo.lookups.PatientConcernStatus instance = (ims.core.vo.lookups.PatientConcernStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.PatientConcernStatus existingInstance = (ims.core.vo.lookups.PatientConcernStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbStatusLookup()
	{
		this.form.cmbStatus().clear();
		ims.core.vo.lookups.PatientConcernStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPatientConcernStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbStatusLookupValue(int id)
	{
		ims.core.vo.lookups.PatientConcernStatus instance = ims.core.vo.lookups.LookupHelper.getPatientConcernStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbStatus().setValue(instance);
	}
	protected final void defaultcmbStatusLookupValue()
	{
		this.form.cmbStatus().setValue((ims.core.vo.lookups.PatientConcernStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PatientConcernStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.PatientConcernStatus.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.cmbUpdatingHcp().setValue(null);
		this.form.cmbRecordingHcp().setValue(null);
		this.form.tmeAllocated().setValue(null);
		this.form.cmbIdByMember().setValue(null);
		this.form.dteIdentified().setValue(null);
		this.form.txtConcernAction().setValue("");
		this.form.cmbIdByTeam().setValue(null);
		this.form.txtAssocNote().setValue("");
		this.form.cmbAllocToMember().setValue(null);
		this.form.cmbAllocToTeam().setValue(null);
		this.form.dteAllocated().setValue(null);
		this.form.tmeIdentified().setValue(null);
		this.form.cmbStatus().setValue(null);
	}
	protected void populateScreenFromData(ims.core.vo.PatientCurrentConcernVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.cmbUpdatingHcp().setValue(value.getUpdatingHCPIsNotNull() ? value.getUpdatingHCP() : null);
		this.form.cmbRecordingHcp().setValue(value.getRecordingHCPIsNotNull() ? value.getRecordingHCP() : null);
		if(value.getDateTimeAllocatedIsNotNull())
			this.form.tmeAllocated().setValue(value.getDateTimeAllocated().getTime());
		else
			this.form.tmeAllocated().setValue(null);
		this.form.cmbIdByMember().setValue(value.getMemberIdentifiedIsNotNull() ? value.getMemberIdentified() : null);
		if(value.getDateTimeIdentifiedIsNotNull())
			this.form.dteIdentified().setValue(value.getDateTimeIdentified().getDate());
		else
			this.form.dteIdentified().setValue(null);
		this.form.txtConcernAction().setValue(value.getConcernDescriptionIsNotNull() ? value.getConcernDescription(): null);
		this.form.cmbIdByTeam().setValue(value.getTeamIdentifiedIsNotNull() ? value.getTeamIdentified() : null);
		this.form.txtAssocNote().setValue(value.getAssociatedNoteIsNotNull() ? value.getAssociatedNote(): null);
		this.form.cmbAllocToMember().setValue(value.getAllocToTeamMemberIsNotNull() ? value.getAllocToTeamMember() : null);
		this.form.cmbAllocToTeam().setValue(value.getAllocatedToTeamIsNotNull() ? value.getAllocatedToTeam() : null);
		if(value.getDateTimeAllocatedIsNotNull())
			this.form.dteAllocated().setValue(value.getDateTimeAllocated().getDate());
		else
			this.form.dteAllocated().setValue(null);
		if(value.getDateTimeIdentifiedIsNotNull())
			this.form.tmeIdentified().setValue(value.getDateTimeIdentified().getTime());
		else
			this.form.tmeIdentified().setValue(null);
		this.form.cmbStatus().setValue(value.getConcernStatusIsNotNull() ? value.getConcernStatus() : null);
	}
	protected ims.core.vo.PatientCurrentConcernVo populateDataFromScreen(ims.core.vo.PatientCurrentConcernVo value)
	{
		if(value == null)
			value = new ims.core.vo.PatientCurrentConcernVo();

		value.setUpdatingHCP(this.form.cmbUpdatingHcp().getValue());
		value.setRecordingHCP(this.form.cmbRecordingHcp().getValue());
		if(value.getDateTimeAllocatedIsNotNull())
			value.setDateTimeAllocated((value.getDateTimeAllocated().getDate() == null && this.form.tmeAllocated().getValue() == null) ? null : new ims.framework.utils.DateTime(value.getDateTimeAllocated().getDate(), this.form.tmeAllocated().getValue()));
		else
			value.setDateTimeAllocated(this.form.tmeAllocated().getValue() == null ? null : new ims.framework.utils.DateTime(null, this.form.tmeAllocated().getValue()));
		value.setMemberIdentified(this.form.cmbIdByMember().getValue());
		if(value.getDateTimeIdentifiedIsNotNull())
			value.setDateTimeIdentified((this.form.dteIdentified().getValue() == null && value.getDateTimeIdentified().getTime() == null) ? null : new ims.framework.utils.DateTime(this.form.dteIdentified().getValue(), value.getDateTimeIdentified().getTime()));
		else
			value.setDateTimeIdentified(this.form.dteIdentified().getValue() == null ? null : new ims.framework.utils.DateTime(this.form.dteIdentified().getValue(), null));
		value.setConcernDescription(this.form.txtConcernAction().getValue());
		value.setTeamIdentified(this.form.cmbIdByTeam().getValue());
		value.setAssociatedNote(this.form.txtAssocNote().getValue());
		value.setAllocToTeamMember(this.form.cmbAllocToMember().getValue());
		value.setAllocatedToTeam(this.form.cmbAllocToTeam().getValue());
		if(value.getDateTimeAllocatedIsNotNull())
			value.setDateTimeAllocated((this.form.dteAllocated().getValue() == null && value.getDateTimeAllocated().getTime() == null) ? null : new ims.framework.utils.DateTime(this.form.dteAllocated().getValue(), value.getDateTimeAllocated().getTime()));
		else
			value.setDateTimeAllocated(this.form.dteAllocated().getValue() == null ? null : new ims.framework.utils.DateTime(this.form.dteAllocated().getValue(), null));
		if(value.getDateTimeIdentifiedIsNotNull())
			value.setDateTimeIdentified((value.getDateTimeIdentified().getDate() == null && this.form.tmeIdentified().getValue() == null) ? null : new ims.framework.utils.DateTime(value.getDateTimeIdentified().getDate(), this.form.tmeIdentified().getValue()));
		else
			value.setDateTimeIdentified(this.form.tmeIdentified().getValue() == null ? null : new ims.framework.utils.DateTime(null, this.form.tmeIdentified().getValue()));
		value.setConcernStatus(this.form.cmbStatus().getValue());

		return value;
	}
	protected ims.core.vo.PatientCurrentConcernVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.core.vo.PatientCurrentConcernVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.spinalinjuries.domain.SharedNewConcern domain;
}
