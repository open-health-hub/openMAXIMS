//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.opdspasticityassess;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cntDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class grdBotulinmRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdBotulinmRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolBotulismReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolBotulismReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolBotulismOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolBotulism()
			{
				return (String)super.row.get(0);
			}
			public void setcolBotulism(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolBotulismTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.spinalinjuries.vo.lookups.SABotulinm getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SABotulinm)super.row.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SABotulinm value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdBotulinmRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdBotulinmRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdBotulinmRow get(int index)
			{
				return new grdBotulinmRow(super.collection.get(index));
			}
			public grdBotulinmRow newRow()
			{
				return new grdBotulinmRow(super.collection.newRow());
			}
			public grdBotulinmRow newRow(boolean autoSelect)
			{
				return new grdBotulinmRow(super.collection.newRow(autoSelect));
			}
			public grdBotulinmRow newRowAt(int index)
			{
				return new grdBotulinmRow(super.collection.newRowAt(index));
			}
			public grdBotulinmRow newRowAt(int index, boolean autoSelect)
			{
				return new grdBotulinmRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdBotulinmGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.spinalinjuries.vo.lookups.SABotulinm[] getValues()
			{
				ims.spinalinjuries.vo.lookups.SABotulinm[] listOfValues = new ims.spinalinjuries.vo.lookups.SABotulinm[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.spinalinjuries.vo.lookups.SABotulinm getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SABotulinm)super.grid.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SABotulinm value)
			{
				super.grid.setValue(value);
			}
			public grdBotulinmRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdBotulinmRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdBotulinmRowCollection getRows()
			{
				return new grdBotulinmRowCollection(super.grid.getRows());
			}
			public grdBotulinmRow getRowByValue(ims.spinalinjuries.vo.lookups.SABotulinm value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdBotulinmRow(row);
			}
			public void setcolBotulismHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolBotulismHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdTreatGoalsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdTreatGoalsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolGoalReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolGoalReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolGoalOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.SATreatmentGoal getcolGoal()
			{
				return (ims.spinalinjuries.vo.lookups.SATreatmentGoal)super.row.get(0);
			}
			public void setcolGoal(ims.spinalinjuries.vo.lookups.SATreatmentGoal value)
			{
				super.row.set(0, value);
			}
			public void setCellcolGoalTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolStatusReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolStatusReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void setcolStatusEmpty(boolean value)
			{
				super.row.setIsEmpty(1, value);
			}
			public boolean iscolStatusEmpty()
			{
				return super.row.isEmpty(1);
			}
			public void showcolStatusOpened()
			{
				super.row.showOpened(1);
			}
			public ims.spinalinjuries.vo.lookups.SATreatmentGoalStatus getcolStatus()
			{
				return (ims.spinalinjuries.vo.lookups.SATreatmentGoalStatus)super.row.get(1);
			}
			public void setcolStatus(ims.spinalinjuries.vo.lookups.SATreatmentGoalStatus value)
			{
				super.row.set(1, value, true);
			}
			public void setCellcolStatusTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.generalmedical.vo.OPDSpasticityAssessTreatGoalVo getValue()
			{
				return (ims.generalmedical.vo.OPDSpasticityAssessTreatGoalVo)super.row.getValue();
			}
			public void setValue(ims.generalmedical.vo.OPDSpasticityAssessTreatGoalVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdTreatGoalsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdTreatGoalsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdTreatGoalsRow get(int index)
			{
				return new grdTreatGoalsRow(super.collection.get(index));
			}
			public grdTreatGoalsRow newRow()
			{
				return new grdTreatGoalsRow(super.collection.newRow());
			}
			public grdTreatGoalsRow newRow(boolean autoSelect)
			{
				return new grdTreatGoalsRow(super.collection.newRow(autoSelect));
			}
			public grdTreatGoalsRow newRowAt(int index)
			{
				return new grdTreatGoalsRow(super.collection.newRowAt(index));
			}
			public grdTreatGoalsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdTreatGoalsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdTreatGoalsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			public ims.generalmedical.vo.OPDSpasticityAssessTreatGoalVoCollection getValues()
			{
				ims.generalmedical.vo.OPDSpasticityAssessTreatGoalVoCollection listOfValues = new ims.generalmedical.vo.OPDSpasticityAssessTreatGoalVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.generalmedical.vo.OPDSpasticityAssessTreatGoalVo getValue()
			{
				return (ims.generalmedical.vo.OPDSpasticityAssessTreatGoalVo)super.grid.getValue();
			}
			public void setValue(ims.generalmedical.vo.OPDSpasticityAssessTreatGoalVo value)
			{
				super.grid.setValue(value);
			}
			public grdTreatGoalsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdTreatGoalsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdTreatGoalsRowCollection getRows()
			{
				return new grdTreatGoalsRowCollection(super.grid.getRows());
			}
			public grdTreatGoalsRow getRowByValue(ims.generalmedical.vo.OPDSpasticityAssessTreatGoalVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdTreatGoalsRow(row);
			}
			public void setcolGoalHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolGoalHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolStatusHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolStatusHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridComboBox colStatusComboBox()
			{
				return new GridComboBox(super.grid, 1);
			}
		}
		public static class grdTreatPlanRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdTreatPlanRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setcolPlanReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean iscolPlanReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showcolPlanOpened()
			{
				super.row.showOpened(0);
			}
			public String getcolPlan()
			{
				return (String)super.row.get(0);
			}
			public void setcolPlan(String value)
			{
				super.row.set(0, value);
			}
			public void setCellcolPlanTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setcolSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean iscolSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showcolSelectOpened()
			{
				super.row.showOpened(1);
			}
			public boolean getcolSelect()
			{
				return ((Boolean)super.row.get(1)).booleanValue();
			}
			public void setcolSelect(boolean value)
			{
				super.row.set(1, new Boolean(value));
			}
			public void setCellcolSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.spinalinjuries.vo.lookups.SATreatmentPlan getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SATreatmentPlan)super.row.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SATreatmentPlan value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdTreatPlanRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdTreatPlanRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdTreatPlanRow get(int index)
			{
				return new grdTreatPlanRow(super.collection.get(index));
			}
			public grdTreatPlanRow newRow()
			{
				return new grdTreatPlanRow(super.collection.newRow());
			}
			public grdTreatPlanRow newRow(boolean autoSelect)
			{
				return new grdTreatPlanRow(super.collection.newRow(autoSelect));
			}
			public grdTreatPlanRow newRowAt(int index)
			{
				return new grdTreatPlanRow(super.collection.newRowAt(index));
			}
			public grdTreatPlanRow newRowAt(int index, boolean autoSelect)
			{
				return new grdTreatPlanRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdTreatPlanGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
			{
				super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
			}
			public ims.spinalinjuries.vo.lookups.SATreatmentPlan[] getValues()
			{
				ims.spinalinjuries.vo.lookups.SATreatmentPlan[] listOfValues = new ims.spinalinjuries.vo.lookups.SATreatmentPlan[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public ims.spinalinjuries.vo.lookups.SATreatmentPlan getValue()
			{
				return (ims.spinalinjuries.vo.lookups.SATreatmentPlan)super.grid.getValue();
			}
			public void setValue(ims.spinalinjuries.vo.lookups.SATreatmentPlan value)
			{
				super.grid.setValue(value);
			}
			public grdTreatPlanRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdTreatPlanRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdTreatPlanRowCollection getRows()
			{
				return new grdTreatPlanRowCollection(super.grid.getRows());
			}
			public grdTreatPlanRow getRowByValue(ims.spinalinjuries.vo.lookups.SATreatmentPlan value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdTreatPlanRow(row);
			}
			public void setcolPlanHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getcolPlanHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setcolSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getcolSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		public static class grdAssessmentRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdAssessmentRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColLimbsReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColLimbsReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColLimbsOpened()
			{
				super.row.showOpened(0);
			}
			public String getColLimbs()
			{
				return (String)super.row.get(0);
			}
			public void setColLimbs(String value)
			{
				super.row.set(0, value);
			}
			public void setCellColLimbsTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setObjectIdReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isObjectIdReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showObjectIdOpened()
			{
				super.row.showOpened(1);
			}
			public Integer getObjectId()
			{
				return (Integer)super.row.get(1);
			}
			public void setObjectId(Integer value)
			{
				super.row.set(1, value);
			}
			public void setCellObjectIdTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public void setColActiveLeftReadOnly(boolean value)
			{
				super.row.setReadOnly(2, value);
			}
			public boolean isColActiveLeftReadOnly()
			{
				return super.row.isReadOnly(2);
			}
			public void setColActiveLeftBackColor(ims.framework.utils.Color value)
			{
				super.row.setBackColor(2, value);
			}
			public void setColActiveLeftTextColor(ims.framework.utils.Color value)
			{
				super.row.setTextColor(2, value);
			}
			public void showColActiveLeftOpened()
			{
				super.row.showOpened(2);
			}
			public Integer getColActiveLeft()
			{
				return (Integer)super.row.get(2);
			}
			public void setColActiveLeft(Integer value)
			{
				super.row.set(2, value);
			}
			public void setCellColActiveLeftTooltip(String value)
			{
				super.row.setTooltip(2, value);
			}
			public void setColActiveRightReadOnly(boolean value)
			{
				super.row.setReadOnly(3, value);
			}
			public boolean isColActiveRightReadOnly()
			{
				return super.row.isReadOnly(3);
			}
			public void setColActiveRightBackColor(ims.framework.utils.Color value)
			{
				super.row.setBackColor(3, value);
			}
			public void setColActiveRightTextColor(ims.framework.utils.Color value)
			{
				super.row.setTextColor(3, value);
			}
			public void showColActiveRightOpened()
			{
				super.row.showOpened(3);
			}
			public Integer getColActiveRight()
			{
				return (Integer)super.row.get(3);
			}
			public void setColActiveRight(Integer value)
			{
				super.row.set(3, value);
			}
			public void setCellColActiveRightTooltip(String value)
			{
				super.row.setTooltip(3, value);
			}
			public void setColPassiveLeftReadOnly(boolean value)
			{
				super.row.setReadOnly(4, value);
			}
			public boolean isColPassiveLeftReadOnly()
			{
				return super.row.isReadOnly(4);
			}
			public void setColPassiveLeftBackColor(ims.framework.utils.Color value)
			{
				super.row.setBackColor(4, value);
			}
			public void setColPassiveLeftTextColor(ims.framework.utils.Color value)
			{
				super.row.setTextColor(4, value);
			}
			public void showColPassiveLeftOpened()
			{
				super.row.showOpened(4);
			}
			public Integer getColPassiveLeft()
			{
				return (Integer)super.row.get(4);
			}
			public void setColPassiveLeft(Integer value)
			{
				super.row.set(4, value);
			}
			public void setCellColPassiveLeftTooltip(String value)
			{
				super.row.setTooltip(4, value);
			}
			public void setColPassiveRightReadOnly(boolean value)
			{
				super.row.setReadOnly(5, value);
			}
			public boolean isColPassiveRightReadOnly()
			{
				return super.row.isReadOnly(5);
			}
			public void setColPassiveRightBackColor(ims.framework.utils.Color value)
			{
				super.row.setBackColor(5, value);
			}
			public void setColPassiveRightTextColor(ims.framework.utils.Color value)
			{
				super.row.setTextColor(5, value);
			}
			public void showColPassiveRightOpened()
			{
				super.row.showOpened(5);
			}
			public Integer getColPassiveRight()
			{
				return (Integer)super.row.get(5);
			}
			public void setColPassiveRight(Integer value)
			{
				super.row.set(5, value);
			}
			public void setCellColPassiveRightTooltip(String value)
			{
				super.row.setTooltip(5, value);
			}
			public void setColToneLeftReadOnly(boolean value)
			{
				super.row.setReadOnly(6, value);
			}
			public boolean isColToneLeftReadOnly()
			{
				return super.row.isReadOnly(6);
			}
			public void setColToneLeftBackColor(ims.framework.utils.Color value)
			{
				super.row.setBackColor(6, value);
			}
			public void setColToneLeftTextColor(ims.framework.utils.Color value)
			{
				super.row.setTextColor(6, value);
			}
			public void showColToneLeftOpened()
			{
				super.row.showOpened(6);
			}
			public ims.spinalinjuries.vo.lookups.SpasAssToneQualititative getColToneLeft()
			{
				return (ims.spinalinjuries.vo.lookups.SpasAssToneQualititative)super.row.get(6);
			}
			public void setColToneLeft(ims.spinalinjuries.vo.lookups.SpasAssToneQualititative value)
			{
				super.row.set(6, value, true);
			}
			public void setCellColToneLeftTooltip(String value)
			{
				super.row.setTooltip(6, value);
			}
			public void setColToneRightReadOnly(boolean value)
			{
				super.row.setReadOnly(7, value);
			}
			public boolean isColToneRightReadOnly()
			{
				return super.row.isReadOnly(7);
			}
			public void setColToneRightBackColor(ims.framework.utils.Color value)
			{
				super.row.setBackColor(7, value);
			}
			public void setColToneRightTextColor(ims.framework.utils.Color value)
			{
				super.row.setTextColor(7, value);
			}
			public void showColToneRightOpened()
			{
				super.row.showOpened(7);
			}
			public ims.spinalinjuries.vo.lookups.SpasAssToneQualititative getColToneRight()
			{
				return (ims.spinalinjuries.vo.lookups.SpasAssToneQualititative)super.row.get(7);
			}
			public void setColToneRight(ims.spinalinjuries.vo.lookups.SpasAssToneQualititative value)
			{
				super.row.set(7, value, true);
			}
			public void setCellColToneRightTooltip(String value)
			{
				super.row.setTooltip(7, value);
			}
			public Object getValue()
			{
				return super.row.getValue();
			}
			public void setValue(Object value)
			{
				super.row.setValue(value);
			}
			public grdAssessmentRow getParentRow()
			{
				return super.row.getParent() == null ? null : new grdAssessmentRow(super.row.getParent());
			}
			public grdAssessmentRowCollection getRows()
			{
				if(this.collection == null)
					this.collection = new grdAssessmentRowCollection(super.row.getRows());
				return this.collection;
			}
			private grdAssessmentRowCollection collection;
		}
		public static class grdAssessmentRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdAssessmentRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdAssessmentRow get(int index)
			{
				return new grdAssessmentRow(super.collection.get(index));
			}
			public grdAssessmentRow newRow()
			{
				return new grdAssessmentRow(super.collection.newRow());
			}
			public grdAssessmentRow newRow(boolean autoSelect)
			{
				return new grdAssessmentRow(super.collection.newRow(autoSelect));
			}
			public grdAssessmentRow newRowAt(int index)
			{
				return new grdAssessmentRow(super.collection.newRowAt(index));
			}
			public grdAssessmentRow newRowAt(int index, boolean autoSelect)
			{
				return new grdAssessmentRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdAssessmentGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			public GenForm.cntDetailsContainer.grdAssessmentRow[] getAllRows()
			{
				java.util.ArrayList rows = new java.util.ArrayList();
				for(int x = 0; x < getRows().size(); x++)
				{
					GenForm.cntDetailsContainer.grdAssessmentRow row = getRows().get(x);
					rows.add(row);
					GenForm.cntDetailsContainer.grdAssessmentRow[] childRows = getAllRows(row);
					for(int i = 0; i < childRows.length; i++)
					{
						rows.add(childRows[i]);
					}
				}
				GenForm.cntDetailsContainer.grdAssessmentRow[] result = new GenForm.cntDetailsContainer.grdAssessmentRow[rows.size()];
				for(int x = 0; x < rows.size(); x++)
				{
					result[x] = (GenForm.cntDetailsContainer.grdAssessmentRow)rows.get(x);
				}
				return result;
			}
			public GenForm.cntDetailsContainer.grdAssessmentRow[] getAllRows(GenForm.cntDetailsContainer.grdAssessmentRow parentRow)
			{
				java.util.ArrayList rows = new java.util.ArrayList();
				for(int x = 0; x < parentRow.getRows().size(); x++)
				{
					GenForm.cntDetailsContainer.grdAssessmentRow row = parentRow.getRows().get(x);
					rows.add(row);
					GenForm.cntDetailsContainer.grdAssessmentRow[] childRows = getAllRows(row);
					for(int i = 0; i < childRows.length; i++)
					{
						rows.add(childRows[i]);
					}
				}
				GenForm.cntDetailsContainer.grdAssessmentRow[] result = new GenForm.cntDetailsContainer.grdAssessmentRow[rows.size()];
				for(int x = 0; x < rows.size(); x++)
				{
					result[x] = (GenForm.cntDetailsContainer.grdAssessmentRow)rows.get(x);
				}
				return result;
			}
			public void expandAll()
			{
				expandCollapseAll(true);
			}
			public void collapseAll()
			{
				expandCollapseAll(false);
			}
			private void expandCollapseAll(boolean expand)
			{
				for(int x = 0; x < getRows().size(); x++)
				{
					GenForm.cntDetailsContainer.grdAssessmentRow row = getRows().get(x);
					row.setExpanded(expand);
					expandCollapseRow(row, expand);
				}
			}
			private void expandCollapseRow(GenForm.cntDetailsContainer.grdAssessmentRow parentRow, boolean expand)
			{
				for(int x = 0; x < parentRow.getRows().size(); x++)
				{
					GenForm.cntDetailsContainer.grdAssessmentRow row = parentRow.getRows().get(x);
					row.setExpanded(expand);
					expandCollapseRow(row, expand);
				}
			}
			private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
			{
				super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
			}
			private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
			{
				super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
			}
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			public Object[] getValues()
			{
				Object[] listOfValues = new Object[this.getRows().size()];
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues[x] = this.getRows().get(x).getValue();
				}
				return listOfValues;
			}
			public Object getValue()
			{
				return super.grid.getValue();
			}
			public void setValue(Object value)
			{
				super.grid.setValue(value);
			}
			public grdAssessmentRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdAssessmentRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdAssessmentRowCollection getRows()
			{
				return new grdAssessmentRowCollection(super.grid.getRows());
			}
			public grdAssessmentRow getRowByValue(Object value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdAssessmentRow(row);
			}
			public void setColLimbsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColLimbsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setObjectIdHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getObjectIdHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public void setColActiveLeftHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(2, value);
			}
			public String getColActiveLeftHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(2);
			}
			public void setColActiveRightHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(3, value);
			}
			public String getColActiveRightHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(3);
			}
			public void setColPassiveLeftHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(4, value);
			}
			public String getColPassiveLeftHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(4);
			}
			public void setColPassiveRightHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(5, value);
			}
			public String getColPassiveRightHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(5);
			}
			public void setColToneLeftHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(6, value);
			}
			public String getColToneLeftHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(6);
			}
			public GridComboBox ColToneLeftComboBox()
			{
				return new GridComboBox(super.grid, 6);
			}
			public void setColToneRightHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(7, value);
			}
			public String getColToneRightHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(7);
			}
			public GridComboBox ColToneRightComboBox()
			{
				return new GridComboBox(super.grid, 7);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 408, 801, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Treatment Plan", new Integer(1), ""}));
	
			// Label Controls
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 312, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Joint Contractures:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 793, 48, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(500), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 416, 688, 385, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdBotulinmTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdBotulinmTemp);
			grdBotulinmGrid grdBotulinm = (grdBotulinmGrid)GridFlyweightFactory.getInstance().createGridBridge(grdBotulinmGrid.class, m_grdBotulinmTemp);
			grdBotulinm.addStringColumn("Botulism", 0, 0, 285, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdBotulinm.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdBotulinm);
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 456, 785, 216, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdTreatGoalsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdTreatGoalsTemp);
			grdTreatGoalsGrid grdTreatGoals = (grdTreatGoalsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTreatGoalsGrid.class, m_grdTreatGoalsTemp);
			grdTreatGoals.addStringColumn("Treatment Goal", 0, 0, 450, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTreatGoals.addComboBoxColumn("Status", 0, 0, -1, false, true, false, false, true, -1);
			super.addGrid(grdTreatGoals);
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 688, 384, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdTreatPlanTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdTreatPlanTemp);
			grdTreatPlanGrid grdTreatPlan = (grdTreatPlanGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTreatPlanGrid.class, m_grdTreatPlanTemp);
			grdTreatPlan.addStringColumn("Treatment Plan", 0, 0, 285, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdTreatPlan.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
			super.addGrid(grdTreatPlan);
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 793, 280, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdAssessmentTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdAssessmentTemp);
			grdAssessmentGrid grdAssessment = (grdAssessmentGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAssessmentGrid.class, m_grdAssessmentTemp);
			grdAssessment.addTreeColumn("Limbs", 0, 180, false, true);
			grdAssessment.addIntColumn("ObjectId", 0, 0, 0, true, true, null, false, 0, true);
			grdAssessment.addIntColumn("Active ROM (L)", 0, 0, 100, false, true, null, false, 0, true);
			grdAssessment.addIntColumn(" Active ROM (R)", 0, 0, 100, false, true, null, false, 0, true);
			grdAssessment.addIntColumn("Passive ROM (L)", 0, 0, 100, false, true, null, false, 0, true);
			grdAssessment.addIntColumn("Passive ROM (R)", 0, 0, 100, false, true, null, false, 0, true);
			grdAssessment.addComboBoxColumn("Tone (L)", 0, 0, 105, false, true, false, false, true, -1);
			grdAssessment.addComboBoxColumn("Tone (R)", 0, 0, -1, false, true, false, false, true, -1);
			super.addGrid(grdAssessment);
		}
		public TextBox txtJointContractures()
		{
			return (TextBox)super.getControl(2);
		}
		public grdBotulinmGrid grdBotulinm()
		{
			return (grdBotulinmGrid)super.getGrid(0);
		}
		public grdTreatGoalsGrid grdTreatGoals()
		{
			return (grdTreatGoalsGrid)super.getGrid(1);
		}
		public grdTreatPlanGrid grdTreatPlan()
		{
			return (grdTreatPlanGrid)super.getGrid(2);
		}
		public grdAssessmentGrid grdAssessment()
		{
			return (grdAssessmentGrid)super.getGrid(3);
		}
	}
	public static class recbrSpacticityAssessRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.ValueObject value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.control.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getvoOpdSpastAssessTreat();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 376, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper8.getSize(), instance1, -1, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(16), new Integer(32), new Integer(376), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_customControlAuthoringInfoForm, instance1 } );
		ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(-1), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringInfoControl);
		Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Container Clasess
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 832, 464, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_cntDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_cntDetails);
		cntDetailsContainer cntDetails = (cntDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(cntDetailsContainer.class, m_cntDetails, factory);
		ims.framework.utils.SizeInfo m_cntDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 464);
		ims.framework.utils.SizeInfo m_cntDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper9.getWidth(), anchoringHelper9.getHeight());
		cntDetails.setContext(form, appForm, m_cntDetails, loader, startControlID, m_cntDetailsDesignSize, m_cntDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(cntDetails);

		// Label Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 728, 32, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<Browser Status>", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 752, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 672, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrSpacticityAssessTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrSpacticityAssessTemp);
		recbrSpacticityAssessRecordBrowser recbrSpacticityAssess = (recbrSpacticityAssessRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrSpacticityAssessRecordBrowser.class, m_recbrSpacticityAssessTemp);
		super.addRecordBrowser(recbrSpacticityAssess);
	}


	public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public cntDetailsContainer cntDetails()
	{
		return (cntDetailsContainer)super.getContainer(0);
	}
	public Label lblBrowser()
	{
		return (Label)super.getControl(2);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(3);
	}
	public Button bCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public recbrSpacticityAssessRecordBrowser recbrSpacticityAssess()
	{
		return (recbrSpacticityAssessRecordBrowser)super.getRecordBrowser(0);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_voOpdSpastAssessTreat = new ims.framework.ContextVariable("voOpdSpastAssessTreat", prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__voOpdSpastAssessTreat_" + componentIdentifier + "");
			cxl_SelectedCareContextShort = new ims.framework.ContextVariable("SelectedCareContextShort", prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__SelectedCareContextShort_" + componentIdentifier + "");
			cxl_voOpdSpastAssessTreatColl = new ims.framework.ContextVariable("voOpdSpastAssessTreatColl", prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__voOpdSpastAssessTreatColl_" + componentIdentifier + "");
			cxl_UpdatedInstance = new ims.framework.ContextVariable("UpdatedInstance", prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__UpdatedInstance_" + componentIdentifier + "");
			cxl_CurrentCareContextId = new ims.framework.ContextVariable("CurrentCareContextId", prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__CurrentCareContextId_" + componentIdentifier + "");
			cxl_CollMskGroupVo = new ims.framework.ContextVariable("CollMskGroupVo", prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__CollMskGroupVo_" + componentIdentifier + "");
		}
		
		public boolean getvoOpdSpastAssessTreatIsNotNull()
		{
			return !cxl_voOpdSpastAssessTreat.getValueIsNull(context);
		}
		public ims.generalmedical.vo.OPDSpasticityAssessTreatVo getvoOpdSpastAssessTreat()
		{
			return (ims.generalmedical.vo.OPDSpasticityAssessTreatVo)cxl_voOpdSpastAssessTreat.getValue(context);
		}
		public void setvoOpdSpastAssessTreat(ims.generalmedical.vo.OPDSpasticityAssessTreatVo value)
		{
			cxl_voOpdSpastAssessTreat.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voOpdSpastAssessTreat = null;
		public boolean getSelectedCareContextShortIsNotNull()
		{
			return !cxl_SelectedCareContextShort.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getSelectedCareContextShort()
		{
			return (ims.core.vo.CareContextShortVo)cxl_SelectedCareContextShort.getValue(context);
		}
		public void setSelectedCareContextShort(ims.core.vo.CareContextShortVo value)
		{
			cxl_SelectedCareContextShort.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedCareContextShort = null;
		public boolean getvoOpdSpastAssessTreatCollIsNotNull()
		{
			return !cxl_voOpdSpastAssessTreatColl.getValueIsNull(context);
		}
		public ims.generalmedical.vo.OPDSpasticityAssessTreatVoCollection getvoOpdSpastAssessTreatColl()
		{
			return (ims.generalmedical.vo.OPDSpasticityAssessTreatVoCollection)cxl_voOpdSpastAssessTreatColl.getValue(context);
		}
		public void setvoOpdSpastAssessTreatColl(ims.generalmedical.vo.OPDSpasticityAssessTreatVoCollection value)
		{
			cxl_voOpdSpastAssessTreatColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voOpdSpastAssessTreatColl = null;
		public boolean getUpdatedInstanceIsNotNull()
		{
			return !cxl_UpdatedInstance.getValueIsNull(context);
		}
		public ims.vo.ValueObject getUpdatedInstance()
		{
			return (ims.vo.ValueObject)cxl_UpdatedInstance.getValue(context);
		}
		public void setUpdatedInstance(ims.vo.ValueObject value)
		{
			cxl_UpdatedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedInstance = null;
		public boolean getCurrentCareContextIdIsNotNull()
		{
			return !cxl_CurrentCareContextId.getValueIsNull(context);
		}
		public Integer getCurrentCareContextId()
		{
			return (Integer)cxl_CurrentCareContextId.getValue(context);
		}
		public void setCurrentCareContextId(Integer value)
		{
			cxl_CurrentCareContextId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentCareContextId = null;
		public boolean getCollMskGroupVoIsNotNull()
		{
			return !cxl_CollMskGroupVo.getValueIsNull(context);
		}
		public ims.core.vo.MskGroupVoCollection getCollMskGroupVo()
		{
			return (ims.core.vo.MskGroupVoCollection)cxl_CollMskGroupVo.getValue(context);
		}
		public void setCollMskGroupVo(ims.core.vo.MskGroupVoCollection value)
		{
			cxl_CollMskGroupVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CollMskGroupVo = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[81];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__voOpdSpastAssessTreat_" + componentIdentifier, "BO-1031100005-ID", "ID_OPDSpasticityAssessTreat");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__voOpdSpastAssessTreat_" + componentIdentifier, "BO-1031100005-JOINTCONTRACTURE", "JointContracture");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-CONTEXT", "Context");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.OPDSpasticityAssess.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
