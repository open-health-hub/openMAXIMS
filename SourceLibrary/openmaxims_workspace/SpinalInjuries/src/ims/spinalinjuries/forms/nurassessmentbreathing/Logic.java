//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 41123.1600)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.nurassessmentbreathing;

import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicationDose;
import ims.core.vo.MedicationDoseCollection;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.MedicationLiteVoCollection;
import ims.core.vo.PatientMedicationVo;
import ims.core.vo.PatientMedicationVoCollection;
import ims.core.vo.Smoking;
import ims.core.vo.SmokingDetails;
import ims.core.vo.SmokingDetailsCollection;
import ims.core.vo.lookups.SmokingCurrentHistoric;
import ims.core.vo.lookups.SmokingStatus;
import ims.core.vo.lookups.YesNoUnknown;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;
import ims.nursing.vo.lookups.AssessmentStatus;
import ims.nursing.vo.lookups.BreathingDyspnoea;
import ims.nursing.vo.lookups.BreathingDyspnoeaCollection;
import ims.nursing.vo.lookups.BreathingTreatment;
import ims.nursing.vo.lookups.BreathingTreatmentCollection;
import ims.nursing.vo.lookups.LookupHelper;
import ims.spinalinjuries.forms.nurassessmentbreathing.GenForm.ctnBreathingContainer.grdMedicationRow;
import ims.spinalinjuries.forms.nurassessmentbreathing.GenForm.ctnBreathingContainer.grdSmokingRow;
import ims.spinalinjuries.vo.NurAssessmentBreathingVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{	
		open();
		if(form.getGlobalContext().Core.getAssessmentIsReadOnly() != null && form.getGlobalContext().Core.getAssessmentIsReadOnly() == true )
		{
			form.ctnBreathing().chkSectionComplete().setEnabled(false);
			form.ctnBreathing().grdDyspnoea().setReadOnly(true);
			form.ctnBreathing().cmbDysAcuteChronic().setEnabled(false);
		}
	}
	private void clearControls()
	{
		form.ctnBreathing().grdDyspnoea().getRows().clear();
		form.ctnBreathing().grdPhysioTreatment().getRows().clear();
		form.ctnBreathing().grdCarePlan().getRows().clear();
		form.ctnBreathing().grdSmoking().getRows().clear();
		form.ctnBreathing().grdMedication().getRows().clear();
	}
	private void open() 
	{
		updateInfoLinkState(); // //WDEV-17082 on creation of the assessment Info Link will be hidden. On Update it will be displayed.
		form.ctnBreathing().ansDifficultyBreathing().setFocus();
		if(form.getGlobalContext().Core.getAssessmentIsReadOnly() == null || form.getGlobalContext().Core.getAssessmentIsReadOnly() == false )
			form.setMode(FormMode.EDIT);
		else
			form.setMode(FormMode.VIEW);
			
		
		form.chkCopy().setEnabled(false);
		clearControls();
		NurAssessmentBreathingVo voBreath =null;
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssessment(assmnt);

		if (assmnt != null && assmnt.getCurrentComponent() != null)
		{		
			voBreath = (NurAssessmentBreathingVo)domain.getComponent(assmnt.getCurrentComponent());
			form.getLocalContext().setAssessBreathing(voBreath);
		}
	
		//Breathing
		GenForm.ctnBreathingContainer.grdDyspnoeaRow row = null;
		
		BreathingDyspnoeaCollection sColl = LookupHelper.getBreathingDyspnoea(domain.getLookupService());
		for (int i = 0; i < sColl.size(); i++)
		{
			BreathingDyspnoea bDyspnoea = sColl.get(i);
			row = form.ctnBreathing().grdDyspnoea().getRows().newRow();
			row.setValue(bDyspnoea);
			row.setColDyspnoea(bDyspnoea.getText());
		}

		//PhysioTherapy Treatment
		GenForm.ctnBreathingContainer.grdPhysioTreatmentRow pRow = null;
		
		BreathingTreatmentCollection pColl = LookupHelper.getBreathingTreatment(domain.getLookupService());
		for (int i = 0; i < pColl.size(); i++)
		{
			BreathingTreatment treatment = pColl.get(i);
			pRow = form.ctnBreathing().grdPhysioTreatment().getRows().newRow();
			pRow.setValue(treatment);
			pRow.setColPhysiotherapy(treatment.getText());
		}

		//Care Plans
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.SPINAL_BREATHING);
		if (tempColl != null)
		{
			form.ctnBreathing().grdCarePlan().getRows().clear();
			GenForm.ctnBreathingContainer.grdCarePlanRow tempRow;
			for (int i=0; i<tempColl.size(); i++)
			{
				CarePlanTemplateTitle template = tempColl.get(i);
				tempRow = form.ctnBreathing().grdCarePlan().getRows().newRow();
				tempRow.setValue(template);
				tempRow.setcolCarePlans(template.getTitle());
			}
		}
		
		checkForPreviousAssessent();
		
		if(voBreath != null)
			this.populateScreenFromData(voBreath);	
			
		try
		{	onAnsDifficultyBreathingValueChanged();
			onCmbSmokingStatusValueChanged();} 
		catch (PresentationLogicException e){}
	
		setRemoveSmokingMenuVisibility();
		setMedRemoveMenuVisibility();
	}
	
	private void updateInfoLinkState() {
		
		form.lnkInfo().setVisible(form.getGlobalContext().Nursing.getAssessmentHeaderInfo().getCurrentComponentIsNotNull() && form.getGlobalContext().Nursing.getAssessmentHeaderInfo().getCurrentComponent().getComponentTypeIsNotNull() && form.getGlobalContext().Nursing.getAssessmentHeaderInfo().getCurrentComponent().getComponentType().equals(AssessmentComponentType.SPINAL_BREATHING));
				
	}
	protected void checkForPreviousAssessent()
	{
		NurAssessmentBreathingVo assessBreathPro = (NurAssessmentBreathingVo) domain.getLastAssessmentComponentByCareContext(form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.SPINAL_BREATHING);
	
		if (assessBreathPro == null)
		{
			this.form.chkCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPreviousAssBreath(assessBreathPro);
		if(form.getMode().equals(FormMode.EDIT))
			form.chkCopy().setEnabled(true);
	}
	
	private void populateScreenFromData(NurAssessmentBreathingVo voBreath) 
	{
		super.populateScreenFromData(voBreath.getVentilationTrachyeostomy());
	
		//Breathing
		BreathingDyspnoeaCollection coll = voBreath.getBreathingDyspnoea();
		if (coll != null)
		{
			 GenForm.ctnBreathingContainer.grdDyspnoeaRow rowDyp;
			 for (int j=0; j<coll.size(); j++)
			 {
				 BreathingDyspnoea dyspnoea = coll.get(j);
				 int i=0;
				 for (i=0; i<form.ctnBreathing().grdDyspnoea().getRows().size(); i++)
				 {
					 rowDyp = form.ctnBreathing().grdDyspnoea().getRows().get(i);
					 if (rowDyp.getValue().getId() == dyspnoea.getId())
					 {
						 rowDyp.setColSelect(true);
						 break;
					 }
				 }
				 if(i == form.ctnBreathing().grdDyspnoea().getRows().size())
				 {
					 rowDyp = form.ctnBreathing().grdDyspnoea().getRows().newRow();
					 rowDyp.setValue(dyspnoea);
					 rowDyp.setColDyspnoea(dyspnoea.getText());
					 rowDyp.setColSelect(true);
				 }
			 }
		}	
		
		form.ctnBreathing().cmbDysAcuteChronic().setValue(voBreath.getAcuteChronic());
		form.ctnBreathing().ansDifficultyBreathing().setValue(voBreath.getDifficultyBreathing());
	
		//Smoking
		if (voBreath.getSmoking() != null)
		{
			 form.ctnBreathing().cmbSmokingStatus().setValue(voBreath.getSmoking().getCurrentSmokingStatus());
		
			 // Fill in the grid if there is any data
			 GenForm.ctnBreathingContainer.grdSmokingRow rowSmoke;
			 form.ctnBreathing().grdSmoking().getRows().clear();
			 for (int i=0; i<voBreath.getSmoking().getSmokingDetails().size(); i++)
			 {
				SmokingDetails smoke = voBreath.getSmoking().getSmokingDetails().get(i);
				rowSmoke = form.ctnBreathing().grdSmoking().getRows().newRow();
				rowSmoke.setValue(smoke);
				rowSmoke.setColAmt(smoke.getAmountPerDay());
				rowSmoke.setColNrYrs(smoke.getNumberOfYears());
				rowSmoke.setColStatus(smoke.getStatus());
				rowSmoke.setColWhat(smoke.getSmokingWhat());
				rowSmoke.setColWhenStopped(smoke.getWhenStopped());
			 }
		}
		
		//Medication
		PatientMedicationVoCollection voMedColl = voBreath.getBreathingMedication();
		if (voMedColl != null)
		{
			GenForm.ctnBreathingContainer.grdMedicationRow medRow = null;
			for (int j=0; j<voMedColl.size(); j++)
			{
				PatientMedicationVo voMedication = voMedColl.get(j);
				
				//Add a new row and load the medication combo column
				medRow = form.ctnBreathing().grdMedication().getRows().newRow();
				
				if(voMedication.getMedication() != null)
					medRow.getColMedication().newRow(voMedication.getMedication(), voMedication.getMedication().getMedicationName());
				medRow.getColMedication().setValue(voMedication.getMedication());
				medRow.setColFrequency(voMedication.getFrequency());
				
				if(voMedication.getPrescribedDoses() != null)
				{
					if(voMedication.getPrescribedDoses().size() > 0)
					{
						MedicationDose dose = voMedication.getPrescribedDoses().get(0);				
						medRow.setColDose(dose.getDose());
						medRow.setColRoute(dose.getAdminRoute());
					}
				}
				medRow.setValue(voMedication);
			}			
		}
		
		//PhysioTherapy Treatment
		BreathingTreatmentCollection pColl = voBreath.getBreathingTreatment();
		if (pColl != null)
		{
			 GenForm.ctnBreathingContainer.grdPhysioTreatmentRow rowPhysio = null;
			 for (int j=0; j<pColl.size(); j++)
			 {
				 BreathingTreatment treatment = pColl.get(j);
				 int i=0;
				 for (i=0; i<form.ctnBreathing().grdPhysioTreatment().getRows().size(); i++)
				 {
					 rowPhysio = form.ctnBreathing().grdPhysioTreatment().getRows().get(i);
					 if (rowPhysio.getValue().equals(treatment))
					 {
						 rowPhysio.setColSelect(true);
						 break;
					 }
				 }
				 if(i == form.ctnBreathing().grdPhysioTreatment().getRows().size())
				 {
					 rowPhysio = form.ctnBreathing().grdPhysioTreatment().getRows().newRow();
					 rowPhysio.setValue(treatment);
					 rowPhysio.setColPhysiotherapy(treatment.getText());
					 rowPhysio.setColSelect(true);
				 }
			 }
		}	

		//Care Plans
		if (voBreath.getCarePlanTemplate() != null && voBreath.getCarePlanTemplate().size() > 0)
		{
			GenForm.ctnBreathingContainer.grdCarePlanRow cpRow;
			CarePlanTemplateCollection templateColl =voBreath.getCarePlanTemplate(); 
			CarePlanTemplate template;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.ctnBreathing().grdCarePlan().getRows().size(); j++)
			{
				cpRow = form.ctnBreathing().grdCarePlan().getRows().get(j);
				for (i=0; i<templateColl.size(); i++)
				{
					template = templateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelect(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}
				
		form.ctnBreathing().chkSectionComplete().setValue(voBreath.getIsComplete().booleanValue());
		
		if (voBreath.getIsComplete().booleanValue() == true)  // Complete
		{
			form.ctnBreathing().chkSectionComplete().setEnabled(false);
			form.ctnBreathing().chkSectionComplete().setValue(true);
			form.ctnBreathing().grdDyspnoea().setReadOnly(true);
			form.ctnBreathing().cmbDysAcuteChronic().setEnabled(false);
			form.setMode(FormMode.VIEW);
		}
		if (voBreath.getCopy().booleanValue() == true)
		{
			form.chkCopy().setValue(true);
		}	
		form.chkCopy().setEnabled(false);	
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		NurAssessmentBreathingVo voBreath = form.getLocalContext().getAssessBreathing();
		if (voBreath == null)
			voBreath = new NurAssessmentBreathingVo();
			
		voBreath.setVentilationTrachyeostomy(super.populateDataFromScreen());
		
		voBreath.setIsComplete(new Boolean(form.ctnBreathing().chkSectionComplete().getValue()));
		voBreath.setCopy(new Boolean(form.chkCopy().getValue()));
		
		voBreath.setDifficultyBreathing(form.ctnBreathing().ansDifficultyBreathing().getValue());
		voBreath.setAcuteChronic(form.ctnBreathing().cmbDysAcuteChronic().getValue());
		
		BreathingDyspnoeaCollection bColl = new BreathingDyspnoeaCollection();	
		GenForm.ctnBreathingContainer.grdDyspnoeaRow row = null;	
		for (int i=0; i<form.ctnBreathing().grdDyspnoea().getRows().size(); i++)
		{
			row = form.ctnBreathing().grdDyspnoea().getRows().get(i);
			if (row.getColSelect())
				bColl.add(row.getValue());
		}
		voBreath.setBreathingDyspnoea(bColl);		
	    
		// Setup the Smoking values to save
		Smoking smoke = new Smoking();
		smoke.setCurrentSmokingStatus(form.ctnBreathing().cmbSmokingStatus().getValue());
		SmokingDetailsCollection smokeColl = new SmokingDetailsCollection();
		GenForm.ctnBreathingContainer.grdSmokingRow smokeRow;	
		for (int i=0; i<form.ctnBreathing().grdSmoking().getRows().size(); i++)
		{
			smokeRow = form.ctnBreathing().grdSmoking().getRows().get(i);
			SmokingDetails detail = new SmokingDetails();
			if(form.ctnBreathing().cmbSmokingStatus().getValue() != null)
			{
				if(smokeRow.getColStatus() != null)
				{
					if (form.ctnBreathing().cmbSmokingStatus().getValue().equals(SmokingStatus.SMOKER) && smokeRow.getColStatus().equals(SmokingCurrentHistoric.CURRENT) && smokeRow.getColWhenStopped() != null)
					{
						engine.showMessage("Smoking: A 'When Stopped' value is not required where the status is current" );
						form.ctnBreathing().grdSmoking().setFocus();
						return;
					}
					if (form.ctnBreathing().cmbSmokingStatus().getValue().equals(SmokingStatus.EXSMOKER) && smokeRow.getColStatus().equals(SmokingCurrentHistoric.CURRENT))
					{
						engine.showMessage("Smoking: 'Current' smoking details cannot be entered for an Ex-Smoker" );
						form.ctnBreathing().grdSmoking().setFocus();
						return;
					}
				}	
			}
			detail.setStatus(smokeRow.getColStatus());
			detail.setAmountPerDay(smokeRow.getColAmt());
			detail.setNumberOfYears(smokeRow.getColNrYrs());
			if(smokeRow.getColWhat() != null)
				detail.setSmokingWhat(smokeRow.getColWhat());
			
			detail.setWhenStopped(smokeRow.getColWhenStopped());
			if (detail.getStatus()==null && detail.getAmountPerDay()==null && detail.getNumberOfYears()==null 
					&& detail.getSmokingWhat()==null && detail.getWhenStopped()==null)
			{
				engine.showMessage("Empty row on Smoking grid." );
				form.ctnBreathing().grdSmoking().setFocus();
				return;
			}
			smokeColl.add(detail);
		}
		
		smoke.setSmokingDetails(smokeColl);
		voBreath.setSmoking(smoke);
		
		PatientMedicationVoCollection voCollPatientMedication = new PatientMedicationVoCollection();
		PatientMedicationVo voPatientMedication = null;
		GenForm.ctnBreathingContainer.grdMedicationRow mRow = null;
		for(int i=0;i<form.ctnBreathing().grdMedication().getRows().size();i++)
		{
			voPatientMedication = new PatientMedicationVo();
			HcpLiteVo voHcp = (HcpLiteVo) domain.getHcpLiteUser();
			mRow = form.ctnBreathing().grdMedication().getRows().get(i);
			AuthoringInformationVo  voAuthoringInformation  = new AuthoringInformationVo ();
			voAuthoringInformation.setAuthoringHcp(voHcp);
			voAuthoringInformation.setAuthoringDateTime(new DateTime());
			voPatientMedication.setAuthoringInformation(voAuthoringInformation);
			if(mRow.getColMedication().getValue() instanceof MedicationLiteVo){
				voPatientMedication.setMedication((MedicationLiteVo) mRow.getColMedication().getValue());
				voPatientMedication.setOtherMedicationText(mRow.getColMedication().getEditedText());
			}
			voPatientMedication.setFrequency(mRow.getColFrequency());
			voPatientMedication.setPatient(form.getGlobalContext().Core.getPatientShort());
			
			MedicationDose dose = new MedicationDose();
			AuthoringInformationVo  voAuthoringInfoDose  = new AuthoringInformationVo ();
			voAuthoringInfoDose.setAuthoringHcp(voHcp);
			voAuthoringInfoDose.setAuthoringDateTime(new DateTime());
			dose.setAuthoringInformation(voAuthoringInfoDose);
			dose.setDose(mRow.getColDose());
			dose.setAdminRoute(mRow.getColRoute());
			
			if(voPatientMedication.getPrescribedDoses() == null)
				voPatientMedication.setPrescribedDoses(new MedicationDoseCollection());
				
			voPatientMedication.getPrescribedDoses().add(dose);
			voCollPatientMedication.add(voPatientMedication);
		}
		voBreath.setBreathingMedication(voCollPatientMedication);
		
		BreathingTreatmentCollection tColl = new BreathingTreatmentCollection();	
		GenForm.ctnBreathingContainer.grdPhysioTreatmentRow pRow = null;	
		for (int i=0; i<form.ctnBreathing().grdPhysioTreatment().getRows().size(); i++)
		{
			pRow = form.ctnBreathing().grdPhysioTreatment().getRows().get(i);
			if (pRow.getColSelect())
				tColl.add(pRow.getValue());
		}
		voBreath.setBreathingTreatment(tColl);		
		
		//if AssessmentHeaderInfo id == null, check if in the meantime another user from another session has created a new assessment for selected care context
		if(form.getLocalContext().getAssessment() != null)
			if(form.getLocalContext().getAssessment().getID_Assessment() == null)
				if(form.getGlobalContext().Core.getCurrentCareContext() != null)
				{
					AssessmentHeaderInfo tempvo = domain.getAssessmentHeaderInfoByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					if(tempvo != null)
					{
						form.getLocalContext().setAssessment(tempvo);
						form.getGlobalContext().Nursing.setAssessmentHeaderInfo(form.getLocalContext().getAssessment());
					}
				}

		try
		{
			String[] messages = voBreath.validate();
			if (messages != null)
			{
				engine.showErrors("Validation Errors", messages);
				return;
			}
			AssessmentHeaderInfo newAssmnt = domain.saveComponent(form.getLocalContext().getAssessment(), voBreath);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		}
		catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			if (e.getStaleObject() != null)
			{
				 AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
				 if (assmnt != null && assmnt.getCurrentComponent() == null)
				 {
					 ims.nursing.vo.AssessmentComponent comp = new ims.nursing.vo.AssessmentComponent();
					 comp.setID_AssessmentComponent(e.getStaleObject().getId());
					 assmnt.setCurrentComponent(comp);
					 form.getGlobalContext().Nursing.setAssessmentHeaderInfo(assmnt);
				 }
			}
	
			open();
			return;				
		}
		catch(DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			AssessmentHeaderInfo newAssmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
			AssessmentHeaderInfo assessheaderinfoVo = form.getLocalContext().getAssessment();	
			newAssmnt.setCurrentComponent( domain.getAssessComponent(assessheaderinfoVo.getID_Assessment(),AssessmentComponentType.SPINAL_BREATHING));
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
			open();
			return;
		}
		
		// If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.ctnBreathing().grdCarePlan().getReadOnly() == false)
		{
			 CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			 GenForm.ctnBreathingContainer.grdCarePlanRow cpRow;
			 for (int i=0; i<form.ctnBreathing().grdCarePlan().getRows().size(); i++)
			 {
				 cpRow = form.ctnBreathing().grdCarePlan().getRows().get(i);
				 if (cpRow.getcolSelect() && !cpRow.isReadOnly())
					templList.add(cpRow.getValue());
			 }
			 if (templList.size() > 0)
			 {
				 form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				 engine.open(form.getForms().Nursing.CarePlanStep2);
			 }
			 else
				 engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		}
		else
			 engine.open(form.getForms().Nursing.AdmissionAssessOverview);	
	}
	
	protected void onLnkInfoClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssessBreathing() != null && form.getLocalContext().getAssessBreathing().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessBreathing().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}		
	}

	protected void onAnsDifficultyBreathingValueChanged() throws PresentationLogicException 
	{
		if(form.ctnBreathing().ansDifficultyBreathing().getValue() == null || !form.ctnBreathing().ansDifficultyBreathing().getValue().equals(YesNoUnknown.YES))
		{
			for(int i = 0; i < form.ctnBreathing().grdDyspnoea().getRows().size(); i++)
				form.ctnBreathing().grdDyspnoea().getRows().get(i).setColSelect(false);
		
			form.ctnBreathing().grdDyspnoea().setReadOnly(true);
			form.ctnBreathing().cmbDysAcuteChronic().setValue(null);
			form.ctnBreathing().cmbDysAcuteChronic().setEnabled(false);
		}
		else
		{
			form.ctnBreathing().grdDyspnoea().setReadOnly(false);
			form.ctnBreathing().cmbDysAcuteChronic().setEnabled(true);
								
			if(form.getLocalContext().getAssessBreathing() != null)
			{
				if(form.getLocalContext().getAssessBreathing().getIsComplete().booleanValue() == true)
				{
					form.ctnBreathing().grdDyspnoea().setReadOnly(true);
					form.ctnBreathing().cmbDysAcuteChronic().setEnabled(false);
				}
			}
			
		}		
	}

	protected void onCmbSmokingStatusValueChanged() throws PresentationLogicException 
	{
		if(form.ctnBreathing().cmbSmokingStatus().getValue() != null && form.ctnBreathing().cmbSmokingStatus().getValue().equals(SmokingStatus.NEVERSMOKED) && form.ctnBreathing().grdSmoking().getRows().size() > 0)
			form.ctnBreathing().cmbSmokingStatus().setValue(SmokingStatus.SMOKER);
		
		if(form.ctnBreathing().cmbSmokingStatus().getValue() != null && form.ctnBreathing().cmbSmokingStatus().getValue().equals(SmokingStatus.NEVERSMOKED))
		{
			form.getContextMenus().getSmokingGridADDItem().setVisible(false);
			//WDEV-17082
			form.getContextMenus().getSmokingGridREMOVEItem().setVisible(false);
		}
		else
		{
			form.getContextMenus().getSmokingGridADDItem().setVisible(true);
			//WDEV-17082
			form.getContextMenus().getSmokingGridREMOVEItem().setVisible(form.ctnBreathing().grdSmoking().getSelectedRowIndex() != -1);
		}	
	}

	protected void onImbDeleteMedClick()  
	{
		removeMed();	
	}

	private void removeMed() 
	{
		if (form.ctnBreathing().grdMedication().getSelectedRowIndex() >= 0)
			form.ctnBreathing().grdMedication().getRows().remove(form.ctnBreathing().grdMedication().getSelectedRowIndex());
	}

	protected void onImbNewMedClick() 
	{
		newMed();
	}

	private void newMed() 
	{
		form.ctnBreathing().grdMedication().getRows().newRow();
	}

	protected void onImbNewSmokingClick()  
	{
		newSmoking();
	}

	private void newSmoking() 
	{
		GenForm.ctnBreathingContainer.grdSmokingRow row = form.ctnBreathing().grdSmoking().getRows().newRow();
		row.setValue(new SmokingDetails());
	}

	protected void onImbDeleteSmokingClick() 
	{
		removeSmoking();	
	}

	private void removeSmoking() 
	{
		if (form.ctnBreathing().grdSmoking().getSelectedRowIndex() >= 0)
			form.ctnBreathing().grdSmoking().getRows().remove(form.ctnBreathing().grdSmoking().getSelectedRowIndex());
	}

	protected void onChkCopyValueChanged() throws PresentationLogicException 
	{
		if(form.getLocalContext().getPreviousAssBreathIsNotNull())
		{
			NurAssessmentBreathingVo previousAssBreathVo = new NurAssessmentBreathingVo();
			previousAssBreathVo = form.getLocalContext().getPreviousAssBreath();
			form.chkCopy().setValue(true);
			form.chkCopy().setEnabled(false);
			previousAssBreathVo.setIsComplete(Boolean.FALSE);
			previousAssBreathVo.setCopy(Boolean.TRUE);
			previousAssBreathVo.setCarePlanTemplate(null);	
			populateScreenFromData(previousAssBreathVo);
		}
		else
		{
			form.chkCopy().setValue(false);
			return;
		}
	}

	protected void onGrdSmokingGridComboBoxSelectionChanged(int column, grdSmokingRow row, Object value) throws PresentationLogicException 
	{
		if(form.ctnBreathing().cmbSmokingStatus().getValue() == null || value == null || row == null)
			return;
				
		if(column == 0 && form.ctnBreathing().cmbSmokingStatus().getValue().equals(SmokingStatus.EXSMOKER) && !value.equals(SmokingCurrentHistoric.HISTORIC))
			row.setColStatus(SmokingCurrentHistoric.HISTORIC);
				
		if(column == 0  && form.ctnBreathing().cmbSmokingStatus().getValue().equals(SmokingStatus.SMOKER) && value.equals(SmokingCurrentHistoric.CURRENT))
			row.setColWhenStopped(null);
		
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (sender.equals(form.ctnBreathing().grdMedication()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.MedicationGrid.ADD:
					newMed();
					break;
				case GenForm.ContextMenus.MedicationGrid.REMOVE:
					removeMed();
					setMedRemoveMenuVisibility();
			}
		}
		else if (sender.equals(form.ctnBreathing().grdSmoking()))
		{
			switch (menuItemID)
			{
			case GenForm.ContextMenus.SmokingGrid.ADD:
				newSmoking();
				break;
			case GenForm.ContextMenus.SmokingGrid.REMOVE:
				removeSmoking();
				setRemoveSmokingMenuVisibility();
				break;
			}
		}
		
	}

	private void setRemoveSmokingMenuVisibility() 
	{
		boolean bVisible = form.ctnBreathing().grdSmoking().getSelectedRowIndex() != -1 &&
						   form.ctnBreathing().chkSectionComplete().getValue() == false && 
						   form.getMode().equals(FormMode.EDIT);
		
		form.getContextMenus().getSmokingGridREMOVEItem().setVisible(bVisible);
		
	}

	private void setMedRemoveMenuVisibility() 
	{
		boolean bVisible = form.ctnBreathing().grdMedication().getSelectedRowIndex() != -1 &&
						form.getMode().equals(FormMode.EDIT);
		
		form.getContextMenus().getMedicationGridREMOVEItem().setVisible(bVisible);
		
	}

	protected void onFormModeChanged() 
	{
		boolean bVisible = form.getMode().equals(FormMode.EDIT);
		form.getContextMenus().getMedicationGridADDItem().setVisible(bVisible);
		form.getContextMenus().getSmokingGridADDItem().setVisible(bVisible);				
	}

	protected void onGrdMedicationSelectionChanged() throws PresentationLogicException 
	{
		setMedRemoveMenuVisibility();		
	}

	protected void onGrdSmokingSelectionChanged() throws PresentationLogicException 
	{
		setRemoveSmokingMenuVisibility();		
	}

	protected void onGrdMedicationGridQueryComboBoxTextSubmited(int column, grdMedicationRow row, String text) throws PresentationLogicException
	{
		//load medications into memory
		if(text != null)
		{
			//wdev-10792
			row.getColMedication().clear();
			//------------------------------
			MedicationLiteVoCollection voCollMeds = domain.listMedication(text);
			
			if(voCollMeds == null || voCollMeds.size()==0)
				return;

			
			for(int i=0;i<voCollMeds.size();i++)
				row.getColMedication().newRow(voCollMeds.get(i),voCollMeds.get(i).getMedicationName());
			
			row.getColMedication().showOpened();
		}
		
	}
}
