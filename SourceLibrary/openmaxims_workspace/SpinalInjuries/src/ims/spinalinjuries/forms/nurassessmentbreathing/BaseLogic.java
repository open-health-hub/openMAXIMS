//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.nurassessmentbreathing;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.spinalinjuries.domain.NurAssessmentBreathing.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.spinalinjuries.domain.NurAssessmentBreathing domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbTracheostomyAccessoriesValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().cmbTracheostomyAccessories().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.TracheostomyAccessories existingInstance = (ims.core.vo.lookups.TracheostomyAccessories)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTracheostomyAccessoriesLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.TracheostomyAccessories)
		{
			ims.core.vo.lookups.TracheostomyAccessories instance = (ims.core.vo.lookups.TracheostomyAccessories)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTracheostomyAccessoriesLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.TracheostomyAccessories existingInstance = (ims.core.vo.lookups.TracheostomyAccessories)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().cmbTracheostomyAccessories().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTracheostomyAccessoriesLookup()
	{
		this.form.ctnBreathing().cmbTracheostomyAccessories().clear();
		ims.core.vo.lookups.TracheostomyAccessoriesCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getTracheostomyAccessories(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().cmbTracheostomyAccessories().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTracheostomyAccessoriesLookupValue(int id)
	{
		ims.core.vo.lookups.TracheostomyAccessories instance = ims.core.vo.lookups.LookupHelper.getTracheostomyAccessoriesInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnBreathing().cmbTracheostomyAccessories().setValue(instance);
	}
	protected final void defaultcmbTracheostomyAccessoriesLookupValue()
	{
		this.form.ctnBreathing().cmbTracheostomyAccessories().setValue((ims.core.vo.lookups.TracheostomyAccessories)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.TracheostomyAccessories.class, engine.getFormName().getID(), ims.core.vo.lookups.TracheostomyAccessories.TYPE_ID));
	}
	protected final void oncmbTracheostomyTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().cmbTracheostomyType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.TracheostomyType existingInstance = (ims.core.vo.lookups.TracheostomyType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTracheostomyTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.TracheostomyType)
		{
			ims.core.vo.lookups.TracheostomyType instance = (ims.core.vo.lookups.TracheostomyType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTracheostomyTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.TracheostomyType existingInstance = (ims.core.vo.lookups.TracheostomyType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().cmbTracheostomyType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTracheostomyTypeLookup()
	{
		this.form.ctnBreathing().cmbTracheostomyType().clear();
		ims.core.vo.lookups.TracheostomyTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getTracheostomyType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().cmbTracheostomyType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTracheostomyTypeLookupValue(int id)
	{
		ims.core.vo.lookups.TracheostomyType instance = ims.core.vo.lookups.LookupHelper.getTracheostomyTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnBreathing().cmbTracheostomyType().setValue(instance);
	}
	protected final void defaultcmbTracheostomyTypeLookupValue()
	{
		this.form.ctnBreathing().cmbTracheostomyType().setValue((ims.core.vo.lookups.TracheostomyType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.TracheostomyType.class, engine.getFormName().getID(), ims.core.vo.lookups.TracheostomyType.TYPE_ID));
	}
	protected final void oncmbVentilationModeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().cmbVentilationMode().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.VentilationMode existingInstance = (ims.core.vo.lookups.VentilationMode)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbVentilationModeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.VentilationMode)
		{
			ims.core.vo.lookups.VentilationMode instance = (ims.core.vo.lookups.VentilationMode)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbVentilationModeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.VentilationMode existingInstance = (ims.core.vo.lookups.VentilationMode)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().cmbVentilationMode().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbVentilationModeLookup()
	{
		this.form.ctnBreathing().cmbVentilationMode().clear();
		ims.core.vo.lookups.VentilationModeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getVentilationMode(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().cmbVentilationMode().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbVentilationModeLookupValue(int id)
	{
		ims.core.vo.lookups.VentilationMode instance = ims.core.vo.lookups.LookupHelper.getVentilationModeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnBreathing().cmbVentilationMode().setValue(instance);
	}
	protected final void defaultcmbVentilationModeLookupValue()
	{
		this.form.ctnBreathing().cmbVentilationMode().setValue((ims.core.vo.lookups.VentilationMode)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.VentilationMode.class, engine.getFormName().getID(), ims.core.vo.lookups.VentilationMode.TYPE_ID));
	}
	protected final void oncmbVentilatorTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().cmbVentilatorType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.VentilatorType existingInstance = (ims.core.vo.lookups.VentilatorType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbVentilatorTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.VentilatorType)
		{
			ims.core.vo.lookups.VentilatorType instance = (ims.core.vo.lookups.VentilatorType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbVentilatorTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.VentilatorType existingInstance = (ims.core.vo.lookups.VentilatorType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().cmbVentilatorType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbVentilatorTypeLookup()
	{
		this.form.ctnBreathing().cmbVentilatorType().clear();
		ims.core.vo.lookups.VentilatorTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getVentilatorType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().cmbVentilatorType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbVentilatorTypeLookupValue(int id)
	{
		ims.core.vo.lookups.VentilatorType instance = ims.core.vo.lookups.LookupHelper.getVentilatorTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnBreathing().cmbVentilatorType().setValue(instance);
	}
	protected final void defaultcmbVentilatorTypeLookupValue()
	{
		this.form.ctnBreathing().cmbVentilatorType().setValue((ims.core.vo.lookups.VentilatorType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.VentilatorType.class, engine.getFormName().getID(), ims.core.vo.lookups.VentilatorType.TYPE_ID));
	}
	protected final void onansRequiresTrachyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().ansRequiresTrachy().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindansRequiresTrachyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindansRequiresTrachyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().ansRequiresTrachy().addOption(instance);
		}
	}
	protected final void bindansRequiresTrachyLookup()
	{
		this.form.ctnBreathing().ansRequiresTrachy().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().ansRequiresTrachy().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultansRequiresTrachyLookupValue()
	{
		this.form.ctnBreathing().ansRequiresTrachy().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void onansPatientVentilatedValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().ansPatientVentilated().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindansPatientVentilatedLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindansPatientVentilatedLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().ansPatientVentilated().addOption(instance);
		}
	}
	protected final void bindansPatientVentilatedLookup()
	{
		this.form.ctnBreathing().ansPatientVentilated().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().ansPatientVentilated().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultansPatientVentilatedLookupValue()
	{
		this.form.ctnBreathing().ansPatientVentilated().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void onansBreathsSpontaneouslyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().ansBreathsSpontaneously().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindansBreathsSpontaneouslyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindansBreathsSpontaneouslyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().ansBreathsSpontaneously().addOption(instance);
		}
	}
	protected final void bindansBreathsSpontaneouslyLookup()
	{
		this.form.ctnBreathing().ansBreathsSpontaneously().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().ansBreathsSpontaneously().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultansBreathsSpontaneouslyLookupValue()
	{
		this.form.ctnBreathing().ansBreathsSpontaneously().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void onansPatientIntubatedValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().ansPatientIntubated().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindansPatientIntubatedLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindansPatientIntubatedLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().ansPatientIntubated().addOption(instance);
		}
	}
	protected final void bindansPatientIntubatedLookup()
	{
		this.form.ctnBreathing().ansPatientIntubated().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().ansPatientIntubated().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultansPatientIntubatedLookupValue()
	{
		this.form.ctnBreathing().ansPatientIntubated().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void oncmbDysAcuteChronicValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().cmbDysAcuteChronic().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BreathingAcuteChronic existingInstance = (ims.nursing.vo.lookups.BreathingAcuteChronic)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDysAcuteChronicLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.BreathingAcuteChronic)
		{
			ims.nursing.vo.lookups.BreathingAcuteChronic instance = (ims.nursing.vo.lookups.BreathingAcuteChronic)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDysAcuteChronicLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.BreathingAcuteChronic existingInstance = (ims.nursing.vo.lookups.BreathingAcuteChronic)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().cmbDysAcuteChronic().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDysAcuteChronicLookup()
	{
		this.form.ctnBreathing().cmbDysAcuteChronic().clear();
		ims.nursing.vo.lookups.BreathingAcuteChronicCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getBreathingAcuteChronic(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().cmbDysAcuteChronic().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDysAcuteChronicLookupValue(int id)
	{
		ims.nursing.vo.lookups.BreathingAcuteChronic instance = ims.nursing.vo.lookups.LookupHelper.getBreathingAcuteChronicInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnBreathing().cmbDysAcuteChronic().setValue(instance);
	}
	protected final void defaultcmbDysAcuteChronicLookupValue()
	{
		this.form.ctnBreathing().cmbDysAcuteChronic().setValue((ims.nursing.vo.lookups.BreathingAcuteChronic)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.BreathingAcuteChronic.class, engine.getFormName().getID(), ims.nursing.vo.lookups.BreathingAcuteChronic.TYPE_ID));
	}
	protected final void onansDifficultyBreathingValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().ansDifficultyBreathing().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindansDifficultyBreathingLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.YesNoUnknown)
		{
			ims.core.vo.lookups.YesNoUnknown instance = (ims.core.vo.lookups.YesNoUnknown)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindansDifficultyBreathingLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.YesNoUnknown existingInstance = (ims.core.vo.lookups.YesNoUnknown)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().ansDifficultyBreathing().addOption(instance);
		}
	}
	protected final void bindansDifficultyBreathingLookup()
	{
		this.form.ctnBreathing().ansDifficultyBreathing().clear();
		ims.core.vo.lookups.YesNoUnknownCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getYesNoUnknown(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().ansDifficultyBreathing().addOption(lookupCollection.get(x));
		}
	}
	protected final void defaultansDifficultyBreathingLookupValue()
	{
		this.form.ctnBreathing().ansDifficultyBreathing().setValue((ims.core.vo.lookups.YesNoUnknown)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.YesNoUnknown.class, engine.getFormName().getID(), ims.core.vo.lookups.YesNoUnknown.TYPE_ID));
	}
	protected final void oncmbSmokingStatusValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.ctnBreathing().cmbSmokingStatus().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.SmokingStatus existingInstance = (ims.core.vo.lookups.SmokingStatus)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbSmokingStatusLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.SmokingStatus)
		{
			ims.core.vo.lookups.SmokingStatus instance = (ims.core.vo.lookups.SmokingStatus)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbSmokingStatusLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.SmokingStatus existingInstance = (ims.core.vo.lookups.SmokingStatus)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.ctnBreathing().cmbSmokingStatus().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbSmokingStatusLookup()
	{
		this.form.ctnBreathing().cmbSmokingStatus().clear();
		ims.core.vo.lookups.SmokingStatusCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSmokingStatus(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().cmbSmokingStatus().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbSmokingStatusLookupValue(int id)
	{
		ims.core.vo.lookups.SmokingStatus instance = ims.core.vo.lookups.LookupHelper.getSmokingStatusInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.ctnBreathing().cmbSmokingStatus().setValue(instance);
	}
	protected final void defaultcmbSmokingStatusLookupValue()
	{
		this.form.ctnBreathing().cmbSmokingStatus().setValue((ims.core.vo.lookups.SmokingStatus)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.SmokingStatus.class, engine.getFormName().getID(), ims.core.vo.lookups.SmokingStatus.TYPE_ID));
	}
	protected final void bindgrdSmokingColStatusLookup()
	{
		this.form.ctnBreathing().grdSmoking().ColStatusComboBox().clear();
		ims.core.vo.lookups.SmokingCurrentHistoricCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSmokingCurrentHistoric(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().grdSmoking().ColStatusComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdSmokingColWhatLookup()
	{
		this.form.ctnBreathing().grdSmoking().ColWhatComboBox().clear();
		ims.core.vo.lookups.SmokingWhatCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getSmokingWhat(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().grdSmoking().ColWhatComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdMedicationColRouteLookup()
	{
		this.form.ctnBreathing().grdMedication().ColRouteComboBox().clear();
		ims.core.vo.lookups.MedicationRouteCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMedicationRoute(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().grdMedication().ColRouteComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void bindgrdMedicationColFrequencyLookup()
	{
		this.form.ctnBreathing().grdMedication().ColFrequencyComboBox().clear();
		ims.core.vo.lookups.MedicationFrequencyCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMedicationFrequency(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.ctnBreathing().grdMedication().ColFrequencyComboBox().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected void clearScreen()
	{
		this.form.ctnBreathing().txtCPAP().setValue("");
		this.form.ctnBreathing().txtIntubatedVia().setValue("");
		this.form.ctnBreathing().dteRemoved().setValue(null);
		this.form.ctnBreathing().dteNextChange().setValue(null);
		this.form.ctnBreathing().dteLastChange().setValue(null);
		this.form.ctnBreathing().dteInserted().setValue(null);
		this.form.ctnBreathing().cmbTracheostomyAccessories().setValue(null);
		this.form.ctnBreathing().cmbTracheostomyType().setValue(null);
		this.form.ctnBreathing().txtNotes().setValue("");
		this.form.ctnBreathing().cmbVentilationMode().setValue(null);
		this.form.ctnBreathing().cmbVentilatorType().setValue(null);
		this.form.ctnBreathing().ansRequiresTrachy().setValue(null);
		this.form.ctnBreathing().ansPatientVentilated().setValue(null);
		this.form.ctnBreathing().ansBreathsSpontaneously().setValue(null);
		this.form.ctnBreathing().ansPatientIntubated().setValue(null);
		this.form.ctnBreathing().txtTracheostomy().setValue("");
	}
	protected void populateScreenFromData(ims.core.vo.VentilationTracheostomyVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.ctnBreathing().txtCPAP().setValue(value.getSizeCPAPValveIsNotNull() ? value.getSizeCPAPValve(): null);
		this.form.ctnBreathing().txtIntubatedVia().setValue(value.getIntubationMethodIsNotNull() ? value.getIntubationMethod(): null);
		this.form.ctnBreathing().dteRemoved().setValue(value.getDateRemovedIsNotNull() ? value.getDateRemoved() : null);
		this.form.ctnBreathing().dteNextChange().setValue(value.getDateNextChangeIsNotNull() ? value.getDateNextChange() : null);
		this.form.ctnBreathing().dteLastChange().setValue(value.getDateLastChangeIsNotNull() ? value.getDateLastChange() : null);
		this.form.ctnBreathing().dteInserted().setValue(value.getDateInsertedIsNotNull() ? value.getDateInserted() : null);
		this.form.ctnBreathing().cmbTracheostomyAccessories().setValue(value.getTracheostomyAccessoriesIsNotNull() ? value.getTracheostomyAccessories() : null);
		this.form.ctnBreathing().cmbTracheostomyType().setValue(value.getTracheostomyTypeIsNotNull() ? value.getTracheostomyType() : null);
		this.form.ctnBreathing().txtNotes().setValue(value.getNotesIsNotNull() ? value.getNotes(): null);
		this.form.ctnBreathing().cmbVentilationMode().setValue(value.getModeOfVentilationIsNotNull() ? value.getModeOfVentilation() : null);
		this.form.ctnBreathing().cmbVentilatorType().setValue(value.getTypeOfVentilatorIsNotNull() ? value.getTypeOfVentilator() : null);
		this.form.ctnBreathing().ansRequiresTrachy().setValue(value.getRequiresATracheostomyIsNotNull() ? value.getRequiresATracheostomy() : null);
		this.form.ctnBreathing().ansPatientVentilated().setValue(value.getPatientVentilatedIsNotNull() ? value.getPatientVentilated() : null);
		this.form.ctnBreathing().ansBreathsSpontaneously().setValue(value.getBreathsSpontaneouslyIsNotNull() ? value.getBreathsSpontaneously() : null);
		this.form.ctnBreathing().ansPatientIntubated().setValue(value.getPatientIntubatedIsNotNull() ? value.getPatientIntubated() : null);
		this.form.ctnBreathing().txtTracheostomy().setValue(value.getSizeOfTracheostomyIsNotNull() ? value.getSizeOfTracheostomy(): null);
	}
	protected ims.core.vo.VentilationTracheostomyVo populateDataFromScreen(ims.core.vo.VentilationTracheostomyVo value)
	{
		if(value == null)
			value = new ims.core.vo.VentilationTracheostomyVo();

		value.setSizeCPAPValve(this.form.ctnBreathing().txtCPAP().getValue());
		value.setIntubationMethod(this.form.ctnBreathing().txtIntubatedVia().getValue());
		value.setDateRemoved(this.form.ctnBreathing().dteRemoved().getValue());
		value.setDateNextChange(this.form.ctnBreathing().dteNextChange().getValue());
		value.setDateLastChange(this.form.ctnBreathing().dteLastChange().getValue());
		value.setDateInserted(this.form.ctnBreathing().dteInserted().getValue());
		value.setTracheostomyAccessories(this.form.ctnBreathing().cmbTracheostomyAccessories().getValue());
		value.setTracheostomyType(this.form.ctnBreathing().cmbTracheostomyType().getValue());
		value.setNotes(this.form.ctnBreathing().txtNotes().getValue());
		value.setModeOfVentilation(this.form.ctnBreathing().cmbVentilationMode().getValue());
		value.setTypeOfVentilator(this.form.ctnBreathing().cmbVentilatorType().getValue());
		value.setRequiresATracheostomy(this.form.ctnBreathing().ansRequiresTrachy().getValue());
		value.setPatientVentilated(this.form.ctnBreathing().ansPatientVentilated().getValue());
		value.setBreathsSpontaneously(this.form.ctnBreathing().ansBreathsSpontaneously().getValue());
		value.setPatientIntubated(this.form.ctnBreathing().ansPatientIntubated().getValue());
		value.setSizeOfTracheostomy(this.form.ctnBreathing().txtTracheostomy().getValue());

		return value;
	}
	protected ims.core.vo.VentilationTracheostomyVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.core.vo.VentilationTracheostomyVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.spinalinjuries.domain.NurAssessmentBreathing domain;
}
