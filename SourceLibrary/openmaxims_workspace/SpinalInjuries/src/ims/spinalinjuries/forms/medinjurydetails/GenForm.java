//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.medinjurydetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbModeInjuryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
		{
			return super.control.removeRow(value);
		}
		public ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury getValue()
		{
			return (ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury)super.control.getValue();
		}
		public void setValue(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbUnitDurLOCComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.spinalinjuries.vo.lookups.DurLOCUnit value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.DurLOCUnit value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.DurLOCUnit value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.DurLOCUnit value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.spinalinjuries.vo.lookups.DurLOCUnit value)
		{
			return super.control.removeRow(value);
		}
		public ims.spinalinjuries.vo.lookups.DurLOCUnit getValue()
		{
			return (ims.spinalinjuries.vo.lookups.DurLOCUnit)super.control.getValue();
		}
		public void setValue(ims.spinalinjuries.vo.lookups.DurLOCUnit value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbReqVentComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.YesNoUnknown value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.YesNoUnknown getValue()
		{
			return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNoUnknown value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCauseInjuryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury value)
		{
			return super.control.removeRow(value);
		}
		public ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury getValue()
		{
			return (ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury)super.control.getValue();
		}
		public void setValue(ims.spinalinjuries.vo.lookups.InjuryClassCauseofInjury value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbMechInjuryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
		{
			return super.control.removeRow(value);
		}
		public ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury getValue()
		{
			return (ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury)super.control.getValue();
		}
		public void setValue(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdAssocFactorsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdAssocFactorsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolFactorReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolFactorReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolFactorOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolFactor(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.spinalinjuries.vo.lookups.InjuryAssociatedFactor getcolFactor()
		{
			return (ims.spinalinjuries.vo.lookups.InjuryAssociatedFactor)super.row.get(0);
		}
		public void setcolFactor(ims.spinalinjuries.vo.lookups.InjuryAssociatedFactor value)
		{
			super.row.set(0, value, true);
		}
		public void setCellcolFactorTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolDetailsReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolDetailsReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolDetailsOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolDetails(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolDetails()
		{
			return (String)super.row.get(1);
		}
		public void setcolDetails(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolDetailsTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setactiveReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isactiveReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showactiveOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForactive(String value)
		{
			super.row.setTooltip(2, value);
		}
		public boolean getactive()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setactive(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellactiveTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.generalmedical.vo.AssociatedFactorVo getValue()
		{
			return (ims.generalmedical.vo.AssociatedFactorVo)super.row.getValue();
		}
		public void setValue(ims.generalmedical.vo.AssociatedFactorVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdAssocFactorsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdAssocFactorsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdAssocFactorsRow get(int index)
		{
			return new grdAssocFactorsRow(super.collection.get(index));
		}
		public grdAssocFactorsRow newRow()
		{
			return new grdAssocFactorsRow(super.collection.newRow());
		}
		public grdAssocFactorsRow newRow(boolean autoSelect)
		{
			return new grdAssocFactorsRow(super.collection.newRow(autoSelect));
		}
		public grdAssocFactorsRow newRowAt(int index)
		{
			return new grdAssocFactorsRow(super.collection.newRowAt(index));
		}
		public grdAssocFactorsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdAssocFactorsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdAssocFactorsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
		{
			super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.generalmedical.vo.AssociatedFactorVo[] getValues()
		{
			ims.generalmedical.vo.AssociatedFactorVo[] listOfValues = new ims.generalmedical.vo.AssociatedFactorVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.generalmedical.vo.AssociatedFactorVo getValue()
		{
			return (ims.generalmedical.vo.AssociatedFactorVo)super.grid.getValue();
		}
		public void setValue(ims.generalmedical.vo.AssociatedFactorVo value)
		{
			super.grid.setValue(value);
		}
		public grdAssocFactorsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdAssocFactorsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdAssocFactorsRowCollection getRows()
		{
			return new grdAssocFactorsRowCollection(super.grid.getRows());
		}
		public grdAssocFactorsRow getRowByValue(ims.generalmedical.vo.AssociatedFactorVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdAssocFactorsRow(row);
		}
		public void setcolFactorHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolFactorHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public GridComboBox colFactorComboBox()
		{
			return new GridComboBox(super.grid, 0);
		}
		public void setcolDetailsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolDetailsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setactiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getactiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdProblemsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProblemsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolProblemReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolProblemReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolProblemOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolProblem()
		{
			return (String)super.row.get(0);
		}
		public void setcolProblem(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolProblemTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolProblemButtonReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolProblemButtonReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolProblemButtonOpened()
		{
			super.row.showOpened(1);
		}
		public String getcolProblemButton()
		{
			return (String)super.row.get(1);
		}
		public void setcolProblemButton(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolProblemButtonTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolActiveReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolActiveOpened()
		{
			super.row.showOpened(2);
		}
		public boolean getcolActive()
		{
			return ((Boolean)super.row.get(2)).booleanValue();
		}
		public void setcolActive(boolean value)
		{
			super.row.set(2, new Boolean(value));
		}
		public void setCellcolActiveTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.generalmedical.vo.MedicalProbOnAdmisVo getValue()
		{
			return (ims.generalmedical.vo.MedicalProbOnAdmisVo)super.row.getValue();
		}
		public void setValue(ims.generalmedical.vo.MedicalProbOnAdmisVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProblemsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProblemsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProblemsRow get(int index)
		{
			return new grdProblemsRow(super.collection.get(index));
		}
		public grdProblemsRow newRow()
		{
			return new grdProblemsRow(super.collection.newRow());
		}
		public grdProblemsRow newRow(boolean autoSelect)
		{
			return new grdProblemsRow(super.collection.newRow(autoSelect));
		}
		public grdProblemsRow newRowAt(int index)
		{
			return new grdProblemsRow(super.collection.newRowAt(index));
		}
		public grdProblemsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProblemsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProblemsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addCommentColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int maxLength, boolean canGrow)
		{
			super.grid.addCommentColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, maxLength, canGrow);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.generalmedical.vo.MedicalProbOnAdmisVo[] getValues()
		{
			ims.generalmedical.vo.MedicalProbOnAdmisVo[] listOfValues = new ims.generalmedical.vo.MedicalProbOnAdmisVo[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.generalmedical.vo.MedicalProbOnAdmisVo getValue()
		{
			return (ims.generalmedical.vo.MedicalProbOnAdmisVo)super.grid.getValue();
		}
		public void setValue(ims.generalmedical.vo.MedicalProbOnAdmisVo value)
		{
			super.grid.setValue(value);
		}
		public grdProblemsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProblemsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProblemsRowCollection getRows()
		{
			return new grdProblemsRowCollection(super.grid.getRows());
		}
		public grdProblemsRow getRowByValue(ims.generalmedical.vo.MedicalProbOnAdmisVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProblemsRow(row);
		}
		public void setcolProblemHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolProblemHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolProblemButtonHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolProblemButtonHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getInjuryDetails();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuMedInjuryDetailsTextBox = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuMedInjuryDetailsTextBoxAddToProblemItem = factory.createMenuItem(startControlID.intValue() + 1, "Add to Problems List", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMedInjuryDetailsTextBox.add(contextMenus.contextMenuMedInjuryDetailsTextBoxAddToProblemItem);
		contextMenus.contextMenuMedInjuryDetailsTextBoxAddToAssociatedFactorsItem = factory.createMenuItem(startControlID.intValue() + 2, "Add to Associated Factors", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMedInjuryDetailsTextBox.add(contextMenus.contextMenuMedInjuryDetailsTextBoxAddToAssociatedFactorsItem);
		form.registerMenu(contextMenus.contextMenuMedInjuryDetailsTextBox);
		contextMenus.contextMenuMedInjuryDetailsAssociatedFactors = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuMedInjuryDetailsAssociatedFactorsADDItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuMedInjuryDetailsAssociatedFactors.add(contextMenus.contextMenuMedInjuryDetailsAssociatedFactorsADDItem);
		contextMenus.contextMenuMedInjuryDetailsAssociatedFactorsREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuMedInjuryDetailsAssociatedFactors.add(contextMenus.contextMenuMedInjuryDetailsAssociatedFactorsREMOVEItem);
		form.registerMenu(contextMenus.contextMenuMedInjuryDetailsAssociatedFactors);
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 5, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 7, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 8, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 9, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 10, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 11, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 12, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 13, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 824, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Admission Contact", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 88, 824, 496, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Injury Details", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 32, 49, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 448, 50, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, "Authoring Date/Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 456, 256, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Presenting Complaints:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 32, 256, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description of Injury:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 32, 195, 134, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Loss of Consciousness:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 448, 143, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mode of Injury:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 32, 221, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Duration of LOC:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 448, 117, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requires Ventillation:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 448, 169, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cause of Injury:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 448, 195, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mechanism of Injury:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 32, 117, 123, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time of Injury:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 32, 143, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Referral:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 32, 169, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Transfer:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 32, 420, 115, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Associated Factors:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 29), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 685, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 765, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 128, 48, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 32, 282, 392, 126, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, new Integer(2000), Boolean.TRUE, Boolean.FALSE, contextMenus.contextMenuMedInjuryDetailsTextBox, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 456, 274, 360, 124, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, new Integer(2000), Boolean.TRUE, Boolean.FALSE, contextMenus.contextMenuMedInjuryDetailsTextBox, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 176, 167, 160, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 176, 141, 160, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 176, 115, 160, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 608, 45, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 608, 141, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbModeInjuryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbModeInjuryTemp);
		cmbModeInjuryComboBox cmbModeInjury = (cmbModeInjuryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbModeInjuryComboBox.class, m_cmbModeInjuryTemp);
		super.addComboBox(cmbModeInjury);
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 224, 220, 200, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbUnitDurLOCTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbUnitDurLOCTemp);
		cmbUnitDurLOCComboBox cmbUnitDurLOC = (cmbUnitDurLOCComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUnitDurLOCComboBox.class, m_cmbUnitDurLOCTemp);
		super.addComboBox(cmbUnitDurLOC);
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 608, 115, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbReqVentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbReqVentTemp);
		cmbReqVentComboBox cmbReqVent = (cmbReqVentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReqVentComboBox.class, m_cmbReqVentTemp);
		super.addComboBox(cmbReqVent);
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 608, 167, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbCauseInjuryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbCauseInjuryTemp);
		cmbCauseInjuryComboBox cmbCauseInjury = (cmbCauseInjuryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCauseInjuryComboBox.class, m_cmbCauseInjuryTemp);
		super.addComboBox(cmbCauseInjury);
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 608, 193, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbMechInjuryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbMechInjuryTemp);
		cmbMechInjuryComboBox cmbMechInjury = (cmbMechInjuryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMechInjuryComboBox.class, m_cmbMechInjuryTemp);
		super.addComboBox(cmbMechInjury);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 176, 196, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 32, 440, 392, 128, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		Grid m_grdAssocFactorsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuMedInjuryDetailsAssociatedFactors, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdAssocFactorsTemp);
		grdAssocFactorsGrid grdAssocFactors = (grdAssocFactorsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAssocFactorsGrid.class, m_grdAssocFactorsTemp);
		grdAssocFactors.addComboBoxColumn("Factor", 0, 0, 145, false, true, false, false, true, -1);
		grdAssocFactors.addWrapTextColumn("Details", 0, 0, 175, false, false, 1000, true);
		grdAssocFactors.addBoolColumn("Active", 0, 1, -1, false, false, 0, true);
		super.addGrid(grdAssocFactors);
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 456, 440, 360, 128, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdProblemsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdProblemsTemp);
		grdProblemsGrid grdProblems = (grdProblemsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProblemsGrid.class, m_grdProblemsTemp);
		grdProblems.addStringColumn("Problems", 0, 0, 260, true, false, 0, 255, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdProblems.addCommentColumn(" ", 0, 0, 20, false, true,255, true);
		grdProblems.addBoolColumn("Active", 0, 1, -1, false, true, 0, true);
		super.addGrid(grdProblems);

		// Time Controls
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 360, 115, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, "Please enter a valid time", Boolean.TRUE, ""}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 176, 219, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, "Please enter a valid number", null, Boolean.FALSE, new Integer(9)}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnNew()
	{
		return (Button)super.getControl(16);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(17);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(18);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(19);
	}
	public TextBox txtAuthoringHcp()
	{
		return (TextBox)super.getControl(20);
	}
	public TextBox txtDescInjury()
	{
		return (TextBox)super.getControl(21);
	}
	public TextBox txtPresComp()
	{
		return (TextBox)super.getControl(22);
	}
	public DateControl dteTransfer()
	{
		return (DateControl)super.getControl(23);
	}
	public DateControl dteReferral()
	{
		return (DateControl)super.getControl(24);
	}
	public DateControl dteInjury()
	{
		return (DateControl)super.getControl(25);
	}
	public DateTimeControl dtimAuthoringDateTime()
	{
		return (DateTimeControl)super.getControl(26);
	}
	public cmbModeInjuryComboBox cmbModeInjury()
	{
		return (cmbModeInjuryComboBox)super.getComboBox(0);
	}
	public cmbUnitDurLOCComboBox cmbUnitDurLOC()
	{
		return (cmbUnitDurLOCComboBox)super.getComboBox(1);
	}
	public cmbReqVentComboBox cmbReqVent()
	{
		return (cmbReqVentComboBox)super.getComboBox(2);
	}
	public cmbCauseInjuryComboBox cmbCauseInjury()
	{
		return (cmbCauseInjuryComboBox)super.getComboBox(3);
	}
	public cmbMechInjuryComboBox cmbMechInjury()
	{
		return (cmbMechInjuryComboBox)super.getComboBox(4);
	}
	public CheckBox chkLOC()
	{
		return (CheckBox)super.getControl(32);
	}
	public grdAssocFactorsGrid grdAssocFactors()
	{
		return (grdAssocFactorsGrid)super.getGrid(0);
	}
	public grdProblemsGrid grdProblems()
	{
		return (grdProblemsGrid)super.getGrid(1);
	}
	public TimeControl tmeInjury()
	{
		return (TimeControl)super.getControl(35);
	}
	public IntBox intDurLOC()
	{
		return (IntBox)super.getControl(36);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
				DeleteDisabled = new ImageHelper(102177, "Images/Core/delete_dis.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image NewDisabled;
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image Delete;
			public final ims.framework.utils.Image DeleteDisabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_InjuryDetails = new ims.framework.ContextVariable("InjuryDetails", prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier + "");
		}
		
		public boolean getInjuryDetailsIsNotNull()
		{
			return !cxl_InjuryDetails.getValueIsNull(context);
		}
		public ims.generalmedical.vo.InjuryDetailsVo getInjuryDetails()
		{
			return (ims.generalmedical.vo.InjuryDetailsVo)cxl_InjuryDetails.getValue(context);
		}
		public void setInjuryDetails(ims.generalmedical.vo.InjuryDetailsVo value)
		{
			cxl_InjuryDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InjuryDetails = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class MedInjuryDetailsTextBox implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int AddToProblem = 1;
			public static final int AddToAssociatedFactors = 2;
		}
		public void disableAllMedInjuryDetailsTextBoxMenuItems()
		{
			this.contextMenuMedInjuryDetailsTextBoxAddToProblemItem.setEnabled(false);
			this.contextMenuMedInjuryDetailsTextBoxAddToAssociatedFactorsItem.setEnabled(false);
		}
		public void hideAllMedInjuryDetailsTextBoxMenuItems()
		{
			this.contextMenuMedInjuryDetailsTextBoxAddToProblemItem.setVisible(false);
			this.contextMenuMedInjuryDetailsTextBoxAddToAssociatedFactorsItem.setVisible(false);
		}
		private Menu contextMenuMedInjuryDetailsTextBox;
		public MenuItem getMedInjuryDetailsTextBoxAddToProblemItem()
		{
			return this.contextMenuMedInjuryDetailsTextBoxAddToProblemItem;
		}
		private MenuItem contextMenuMedInjuryDetailsTextBoxAddToProblemItem;
		public MenuItem getMedInjuryDetailsTextBoxAddToAssociatedFactorsItem()
		{
			return this.contextMenuMedInjuryDetailsTextBoxAddToAssociatedFactorsItem;
		}
		private MenuItem contextMenuMedInjuryDetailsTextBoxAddToAssociatedFactorsItem;
		public final class MedInjuryDetailsAssociatedFactors implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 3;
			public static final int REMOVE = 4;
		}
		public void disableAllMedInjuryDetailsAssociatedFactorsMenuItems()
		{
			this.contextMenuMedInjuryDetailsAssociatedFactorsADDItem.setEnabled(false);
			this.contextMenuMedInjuryDetailsAssociatedFactorsREMOVEItem.setEnabled(false);
		}
		public void hideAllMedInjuryDetailsAssociatedFactorsMenuItems()
		{
			this.contextMenuMedInjuryDetailsAssociatedFactorsADDItem.setVisible(false);
			this.contextMenuMedInjuryDetailsAssociatedFactorsREMOVEItem.setVisible(false);
		}
		private Menu contextMenuMedInjuryDetailsAssociatedFactors;
		public MenuItem getMedInjuryDetailsAssociatedFactorsADDItem()
		{
			return this.contextMenuMedInjuryDetailsAssociatedFactorsADDItem;
		}
		private MenuItem contextMenuMedInjuryDetailsAssociatedFactorsADDItem;
		public MenuItem getMedInjuryDetailsAssociatedFactorsREMOVEItem()
		{
			return this.contextMenuMedInjuryDetailsAssociatedFactorsREMOVEItem;
		}
		private MenuItem contextMenuMedInjuryDetailsAssociatedFactorsREMOVEItem;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 5;
			public static final int Update = 6;
			public static final int Remove = 7;
			public static final int View = 8;
			public static final int MoveUp = 9;
			public static final int MoveDown = 10;
			public static final int Replace = 11;
			public static final int Confirm = 12;
			public static final int EDIT_VIEW_ICP_ACTIONS = 13;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[85];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-ID", "ID_InjuryDetails");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-INJURYDATE", "InjuryDate");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-INJURYTIME", "InjuryTime");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-REFERRALDATE", "ReferralDate");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-TRANSFERDATE", "TransferDate");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-SUFFEREDLOC", "SufferedLOC");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-DURLOC", "DurLOC");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-DURLOCUNIT", "DurLOCUnit");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-REQUIRESVENTILLATION", "RequiresVentillation");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-DESCRIPTIONOFINJURY", "DescriptionOfInjury");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-PRESENTINGCOMPLAINTS", "PresentingComplaints");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-MODEOFINJURY", "ModeOfInjury");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-CAUSEOFINJURY", "CauseOfInjury");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.MedInjuryDetails.__internal_x_context__InjuryDetails_" + componentIdentifier, "BO-1023100000-MECHANISMOFINJURY", "MechanismOfInjury");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
