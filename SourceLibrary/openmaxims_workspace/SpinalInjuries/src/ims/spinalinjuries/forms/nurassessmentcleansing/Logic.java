//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.22 build 41209.1630)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.spinalinjuries.forms.nurassessmentcleansing;

import ims.coe.vo.lookups.DressingAndGroomingActivities;
import ims.coe.vo.lookups.DressingAndGroomingActivitiesCollection;
import ims.coe.vo.lookups.LookupHelper;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;
import ims.nursing.vo.AssessmentHeaderInfo;
import ims.nursing.vo.CarePlanTemplate;
import ims.nursing.vo.CarePlanTemplateCollection;
import ims.nursing.vo.CarePlanTemplateTitle;
import ims.nursing.vo.CarePlanTemplateTitleCollection;
import ims.nursing.vo.lookups.AssessmentComponentType;
import ims.nursing.vo.lookups.HygieneActivities;
import ims.nursing.vo.lookups.HygieneActivitiesCollection;
import ims.spinalinjuries.vo.NurAssessmentCleansingDressingVo;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		open();
	}
	
	private void open() 
	{
		if(form.getGlobalContext().Core.getAssessmentIsReadOnly() == null || form.getGlobalContext().Core.getAssessmentIsReadOnly() == false )
			form.setMode(FormMode.EDIT);
		else
			form.setMode(FormMode.VIEW);
		form.chkCopy().setEnabled(false);
		
		AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
		form.getLocalContext().setAssessment(assmnt);
	
		NurAssessmentCleansingDressingVo voCleansing = null;
		if (assmnt != null && assmnt.getCurrentComponent() != null)
		{
			voCleansing = (NurAssessmentCleansingDressingVo)domain.getComponent(assmnt.getCurrentComponent());
			form.getLocalContext().setAssessCleansing(voCleansing);
		}
		
		//Hygiene Grid
		GenForm.grdHygieneRow hRow = null;
		form.grdHygiene().getRows().clear();
		HygieneActivitiesCollection hColl = ims.nursing.vo.lookups.LookupHelper.getHygieneActivities(domain.getLookupService());
		for (int i = 0; i < hColl.size(); i++)
		{
			HygieneActivities activity  = hColl.get(i);
			hRow = form.grdHygiene().getRows().newRow();
			hRow.setcolHygieneActivities(activity.getText());
			hRow.setValue(activity);
		}

		//Dressing Grid
		GenForm.grdDressingRow dRow = null;
		form.grdDressing().getRows().clear();
		DressingAndGroomingActivitiesCollection sColl = LookupHelper.getDressingAndGroomingActivities(domain.getLookupService());
		for (int i = 0; i < sColl.size(); i++)
		{
			DressingAndGroomingActivities activity  = sColl.get(i);
			dRow = form.grdDressing().getRows().newRow();
			dRow.setcolDressingGrooming(activity.getText());
			dRow.setValue(activity);
		}
		
		//Care Plans
		CarePlanTemplateTitleCollection tempColl = domain.listCarePlanTemplates(AssessmentComponentType.SPINAL_CLEANSING);
		if (tempColl != null)
		{
			form.grdCarePlan().getRows().clear();
			GenForm.grdCarePlanRow tempRow;
			for (int i=0; i<tempColl.size(); i++)
			{
				CarePlanTemplateTitle template = tempColl.get(i);
				tempRow = form.grdCarePlan().getRows().newRow();
				tempRow.setValue(template);
				tempRow.setcolCarePlans(template.getTitle());
			}
		}
			
		checkForPreviousAssessent();
		
		if(voCleansing != null)
			populateScreenFromData(voCleansing);
	
	}
	
	protected void checkForPreviousAssessent()
	{
		NurAssessmentCleansingDressingVo assessCleanPro = (NurAssessmentCleansingDressingVo) domain.getLastAssessmentComponentByCareContext(form.getGlobalContext().Core.getCurrentCareContext(), AssessmentComponentType.SPINAL_CLEANSING);
	
		if (assessCleanPro == null)
		{
			this.form.chkCopy().setValue(false);
			return;
		}
		
		form.getLocalContext().setPreviousAssClean(assessCleanPro);
		if(form.getMode().equals(FormMode.EDIT))
			form.chkCopy().setEnabled(true);
	}

	protected void onChkCopyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getLocalContext().getPreviousAssCleanIsNotNull())
		{
			NurAssessmentCleansingDressingVo previousAssCleanVo = new NurAssessmentCleansingDressingVo();
			previousAssCleanVo = form.getLocalContext().getPreviousAssClean();
			form.chkCopy().setValue(true);
			form.chkCopy().setEnabled(false);
			previousAssCleanVo.setIsComplete(Boolean.FALSE);
			previousAssCleanVo.setCopy(Boolean.TRUE);
			previousAssCleanVo.setCarePlanTemplate(null);	
			populateScreenFromData(previousAssCleanVo);
		}
		else
		{
			form.chkCopy().setValue(false);
			return;
		}		
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.open(form.getForms().Nursing.AdmissionAssessOverview);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		NurAssessmentCleansingDressingVo voCleansing = form.getLocalContext().getAssessCleansing();
		if (voCleansing == null)
			voCleansing = new NurAssessmentCleansingDressingVo();
		
		voCleansing = super.populateDataFromScreen(voCleansing);
		
		//Hygiene 
		ims.nursing.vo.HygieneActivitiesCollection collHygiene = new ims.nursing.vo.HygieneActivitiesCollection();
		ims.nursing.vo.HygieneActivities hygiene = null;
		GenForm.grdHygieneRow hRow = null;	
		for (int i=0; i<form.grdHygiene().getRows().size(); i++)
		{
			hRow = form.grdHygiene().getRows().get(i);
			hygiene = new ims.nursing.vo.HygieneActivities();
			hygiene.setAbility(hRow.getcolAbility());
			hygiene.setActivities(hRow.getValue());
			hygiene.setAidsUsed(hRow.getcolAids());		
			collHygiene.add(hygiene);
		}
		voCleansing.setHygieneActivities(collHygiene);	
		
		//Dressing 
		ims.nursing.vo.DressingAndGroomingActivitiesCollection collDressing = new ims.nursing.vo.DressingAndGroomingActivitiesCollection();
		ims.nursing.vo.DressingAndGroomingActivities dressing = null;
		GenForm.grdDressingRow dRow = null;	
		for (int i=0; i<form.grdDressing().getRows().size(); i++)
		{
			dRow = form.grdDressing().getRows().get(i);
			dressing = new ims.nursing.vo.DressingAndGroomingActivities();
			dressing.setAbility(dRow.getcolAbility());
			dressing.setActivities(dRow.getValue());
			dressing.setDetails(dRow.getcolAids());		
			collDressing.add(dressing);
		}
		voCleansing.setDressingAndGrooming(collDressing);	
	
		//if AssessmentHeaderInfo id == null, check if in the meantime another user from another session has created a new assessment for selected care context
		if(form.getLocalContext().getAssessment() != null)
			if(form.getLocalContext().getAssessment().getID_Assessment() == null)
				if(form.getGlobalContext().Core.getCurrentCareContext() != null)
				{
					AssessmentHeaderInfo tempvo = domain.getAssessmentHeaderInfoByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
					if(tempvo != null)
					{
						form.getLocalContext().setAssessment(tempvo);
						form.getGlobalContext().Nursing.setAssessmentHeaderInfo(form.getLocalContext().getAssessment());
					}
				}
		
		String[] arrErrors = voCleansing.validate();
		
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		try
		{
			AssessmentHeaderInfo newAssmnt = domain.saveComponent(form.getLocalContext().getAssessment(), voCleansing);
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
		}catch(StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			// We may need to reset the current component value in GC for onFormOpen - if there was none previously
			if (e.getStaleObject() != null)
			{
				 AssessmentHeaderInfo assmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
				 if (assmnt != null && assmnt.getCurrentComponent() == null)
				 {
					 ims.nursing.vo.AssessmentComponent comp = new ims.nursing.vo.AssessmentComponent();
					 comp.setID_AssessmentComponent(e.getStaleObject().getId());
					 assmnt.setCurrentComponent(comp);
					 form.getGlobalContext().Nursing.setAssessmentHeaderInfo(assmnt);
				 }
			}
			open();
			return;								
		}
		catch(DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			AssessmentHeaderInfo newAssmnt = form.getGlobalContext().Nursing.getAssessmentHeaderInfo();
			AssessmentHeaderInfo assessheaderinfoVo = form.getLocalContext().getAssessment();	
			newAssmnt.setCurrentComponent( domain.getAssessComponent(assessheaderinfoVo.getID_Assessment(),AssessmentComponentType.SPINAL_CLEANSING));
			form.getGlobalContext().Nursing.setAssessmentHeaderInfo(newAssmnt);
			open();
			return;
		}

		//If the careplan grid is not readonly, we may need to go to the careplanstep2 form
		if (form.grdCarePlan().getReadOnly() == false)
		{
			  CarePlanTemplateTitleCollection templList = new CarePlanTemplateTitleCollection();
			  GenForm.grdCarePlanRow cpRow;
			  for (int i=0; i<form.grdCarePlan().getRows().size(); i++)
			  {
				  cpRow = form.grdCarePlan().getRows().get(i);
				  if (cpRow.getcolSelect() && !cpRow.isReadOnly())
					 templList.add(cpRow.getValue());
			  }
			  if (templList.size() > 0)
			  {
				  form.getGlobalContext().COE.CarePlan.setTemplateList(templList);
				  engine.open(form.getForms().Nursing.CarePlanStep2);
			  }
			  else
				  engine.open(form.getForms().Nursing.AdmissionAssessOverview);
		 }
		 else
			  engine.open(form.getForms().Nursing.AdmissionAssessOverview);	
		
	}
	
	protected void onLnkInfoClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getAssessCleansing() != null && form.getLocalContext().getAssessCleansing().getAssessmentInfo() != null)
		{
			form.getGlobalContext().Nursing.setAssessmentInfo(form.getLocalContext().getAssessCleansing().getAssessmentInfo());
			engine.open(form.getForms().Nursing.AssessmentInfo);
		}						
	}

	protected void populateScreenFromData(NurAssessmentCleansingDressingVo voCleansing) 
	{	
		super.populateScreenFromData(voCleansing);

		//Hygiene
		ims.nursing.vo.HygieneActivitiesCollection collHygiene  = voCleansing.getHygieneActivities();
		if(collHygiene != null)
		{		
			GenForm.grdHygieneRow rowHygiene;
   			for (int j=0; j<collHygiene.size(); j++)
		    {
				ims.nursing.vo.HygieneActivities hygiene = collHygiene.get(j);
			   	int i=0;
			   	for (i=0; i<form.grdHygiene().getRows().size(); i++)
			   	{
					rowHygiene = form.grdHygiene().getRows().get(i);
				    if (rowHygiene.getValue().equals(hygiene.getActivities()))
				   	{
						rowHygiene.setcolAbility(hygiene.getAbility());
						rowHygiene.setcolAids(hygiene.getAidsUsed());
					   	break;
				   	}
			   }
			   if(i == form.grdHygiene().getRows().size())
			   {
					rowHygiene = form.grdHygiene().getRows().newRow();
					rowHygiene.setcolHygieneActivities(hygiene.getActivities().getText());
					rowHygiene.setValue(hygiene.getActivities());
					rowHygiene.setcolAbility(hygiene.getAbility());
					rowHygiene.setcolAids(hygiene.getAidsUsed());
			   }
		   }		 
		}	

		//Dressing
		ims.nursing.vo.DressingAndGroomingActivitiesCollection collDressing  = voCleansing.getDressingAndGrooming();
		if(collDressing != null)
		{		
			GenForm.grdDressingRow rowDressing;
			for (int j=0; j<collDressing.size(); j++)
			{
				ims.nursing.vo.DressingAndGroomingActivities dressing = collDressing.get(j);
				int i=0;
				for (i=0; i<form.grdDressing().getRows().size(); i++)
				{
					rowDressing = form.grdDressing().getRows().get(i);
					if (rowDressing.getValue().equals(dressing.getActivities()))
					{
						rowDressing.setcolAbility(dressing.getAbility());
						rowDressing.setcolAids(dressing.getDetails());
						break;
					}
			   }
			   if(i == form.grdHygiene().getRows().size())
			   {
					rowDressing = form.grdDressing().getRows().newRow();
					rowDressing.setcolDressingGrooming(dressing.getActivities().getText());
					rowDressing.setValue(dressing.getActivities());
					rowDressing.setcolAbility(dressing.getAbility());
					rowDressing.setcolAids(dressing.getDetails());
			   }
		   }		 
		}	
		
		//Care Plans
		if (voCleansing.getCarePlanTemplate() != null && voCleansing.getCarePlanTemplate().size() > 0)
		{
			GenForm.grdCarePlanRow cpRow;
			CarePlanTemplateCollection templateColl = voCleansing.getCarePlanTemplate(); 
			CarePlanTemplate template;
			int i=0;
			// Find the correct row to set to selected
			for (int j=0; j<form.grdCarePlan().getRows().size(); j++)
			{
				cpRow = form.grdCarePlan().getRows().get(j);
				for (i=0; i<templateColl.size(); i++)
				{
					template = templateColl.get(i);
					if (cpRow.getValue().getID_CarePlanTemplate().equals(template.getID_CarePlanTemplate()))
					{
						cpRow.setcolSelect(true);
						cpRow.setReadOnly(true);
						break;
					}
				}
			}
		}

		if (voCleansing.getIsComplete().booleanValue() == true)  // Complete
		{
			form.setMode(FormMode.VIEW);
		}
		
		form.chkCopy().setEnabled(false);	
	}
}
