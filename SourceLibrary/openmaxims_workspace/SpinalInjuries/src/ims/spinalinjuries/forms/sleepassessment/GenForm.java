//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.spinalinjuries.forms.sleepassessment;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cntSleepingContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbValuesComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.core.vo.lookups.PulseOximetryValues value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.core.vo.lookups.PulseOximetryValues value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.core.vo.lookups.PulseOximetryValues value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.core.vo.lookups.PulseOximetryValues value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.core.vo.lookups.PulseOximetryValues value)
			{
				return super.control.removeRow(value);
			}
			public ims.core.vo.lookups.PulseOximetryValues getValue()
			{
				return (ims.core.vo.lookups.PulseOximetryValues)super.control.getValue();
			}
			public void setValue(ims.core.vo.lookups.PulseOximetryValues value)
			{
				super.control.setValue(value);
			}
		}
		public static class grdFindingsRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdFindingsRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColFindingsReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColFindingsReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColFindingsOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.SleepFindings getColFindings()
			{
				return (ims.spinalinjuries.vo.lookups.SleepFindings)super.row.get(0);
			}
			public void setColFindings(ims.spinalinjuries.vo.lookups.SleepFindings value)
			{
				super.row.set(0, value);
			}
			public void setCellColFindingsTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColSelectOpened()
			{
				super.row.showOpened(1);
			}
			public ims.core.vo.lookups.YesNoUnknown getColSelect()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.row.get(1);
			}
			public void setColSelect(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.row.set(1, value, true);
			}
			public void setCellColSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.generalmedical.vo.SleepFindingsVo getValue()
			{
				return (ims.generalmedical.vo.SleepFindingsVo)super.row.getValue();
			}
			public void setValue(ims.generalmedical.vo.SleepFindingsVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdFindingsRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdFindingsRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdFindingsRow get(int index)
			{
				return new grdFindingsRow(super.collection.get(index));
			}
			public grdFindingsRow newRow()
			{
				return new grdFindingsRow(super.collection.newRow());
			}
			public grdFindingsRow newRow(boolean autoSelect)
			{
				return new grdFindingsRow(super.collection.newRow(autoSelect));
			}
			public grdFindingsRow newRowAt(int index)
			{
				return new grdFindingsRow(super.collection.newRowAt(index));
			}
			public grdFindingsRow newRowAt(int index, boolean autoSelect)
			{
				return new grdFindingsRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdFindingsGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			public ims.generalmedical.vo.SleepFindingsVoCollection getValues()
			{
				ims.generalmedical.vo.SleepFindingsVoCollection listOfValues = new ims.generalmedical.vo.SleepFindingsVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.generalmedical.vo.SleepFindingsVo getValue()
			{
				return (ims.generalmedical.vo.SleepFindingsVo)super.grid.getValue();
			}
			public void setValue(ims.generalmedical.vo.SleepFindingsVo value)
			{
				super.grid.setValue(value);
			}
			public grdFindingsRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdFindingsRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdFindingsRowCollection getRows()
			{
				return new grdFindingsRowCollection(super.grid.getRows());
			}
			public grdFindingsRow getRowByValue(ims.generalmedical.vo.SleepFindingsVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdFindingsRow(row);
			}
			public void setColFindingsHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColFindingsHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridComboBox ColSelectComboBox()
			{
				return new GridComboBox(super.grid, 1);
			}
		}
		public static class grdEpworthRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdEpworthRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColSituationReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColSituationReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColSituationOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.SleepEpworthScore getColSituation()
			{
				return (ims.spinalinjuries.vo.lookups.SleepEpworthScore)super.row.get(0);
			}
			public void setColSituation(ims.spinalinjuries.vo.lookups.SleepEpworthScore value)
			{
				super.row.set(0, value);
			}
			public void setCellColSituationTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColDozingReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColDozingReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColDozingOpened()
			{
				super.row.showOpened(1);
			}
			public ims.spinalinjuries.vo.lookups.SleepEpworthChanceOfSleep getColDozing()
			{
				return (ims.spinalinjuries.vo.lookups.SleepEpworthChanceOfSleep)super.row.get(1);
			}
			public void setColDozing(ims.spinalinjuries.vo.lookups.SleepEpworthChanceOfSleep value)
			{
				super.row.set(1, value, true);
			}
			public void setCellColDozingTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.generalmedical.vo.EpworthSleepAssessmentVo getValue()
			{
				return (ims.generalmedical.vo.EpworthSleepAssessmentVo)super.row.getValue();
			}
			public void setValue(ims.generalmedical.vo.EpworthSleepAssessmentVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdEpworthRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdEpworthRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdEpworthRow get(int index)
			{
				return new grdEpworthRow(super.collection.get(index));
			}
			public grdEpworthRow newRow()
			{
				return new grdEpworthRow(super.collection.newRow());
			}
			public grdEpworthRow newRow(boolean autoSelect)
			{
				return new grdEpworthRow(super.collection.newRow(autoSelect));
			}
			public grdEpworthRow newRowAt(int index)
			{
				return new grdEpworthRow(super.collection.newRowAt(index));
			}
			public grdEpworthRow newRowAt(int index, boolean autoSelect)
			{
				return new grdEpworthRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdEpworthGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			public ims.generalmedical.vo.EpworthSleepAssessmentVoCollection getValues()
			{
				ims.generalmedical.vo.EpworthSleepAssessmentVoCollection listOfValues = new ims.generalmedical.vo.EpworthSleepAssessmentVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.generalmedical.vo.EpworthSleepAssessmentVo getValue()
			{
				return (ims.generalmedical.vo.EpworthSleepAssessmentVo)super.grid.getValue();
			}
			public void setValue(ims.generalmedical.vo.EpworthSleepAssessmentVo value)
			{
				super.grid.setValue(value);
			}
			public grdEpworthRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdEpworthRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdEpworthRowCollection getRows()
			{
				return new grdEpworthRowCollection(super.grid.getRows());
			}
			public grdEpworthRow getRowByValue(ims.generalmedical.vo.EpworthSleepAssessmentVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdEpworthRow(row);
			}
			public void setColSituationHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColSituationHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColDozingHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColDozingHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridComboBox ColDozingComboBox()
			{
				return new GridComboBox(super.grid, 1);
			}
		}
		public static class grdCognitiveRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdCognitiveRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColCognitiveReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColCognitiveReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColCognitiveOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.SleepCognitiveFunction getColCognitive()
			{
				return (ims.spinalinjuries.vo.lookups.SleepCognitiveFunction)super.row.get(0);
			}
			public void setColCognitive(ims.spinalinjuries.vo.lookups.SleepCognitiveFunction value)
			{
				super.row.set(0, value);
			}
			public void setCellColCognitiveTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColSelectOpened()
			{
				super.row.showOpened(1);
			}
			public ims.core.vo.lookups.YesNoUnknown getColSelect()
			{
				return (ims.core.vo.lookups.YesNoUnknown)super.row.get(1);
			}
			public void setColSelect(ims.core.vo.lookups.YesNoUnknown value)
			{
				super.row.set(1, value, true);
			}
			public void setCellColSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.generalmedical.vo.CognitiveFunctionVo getValue()
			{
				return (ims.generalmedical.vo.CognitiveFunctionVo)super.row.getValue();
			}
			public void setValue(ims.generalmedical.vo.CognitiveFunctionVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdCognitiveRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdCognitiveRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdCognitiveRow get(int index)
			{
				return new grdCognitiveRow(super.collection.get(index));
			}
			public grdCognitiveRow newRow()
			{
				return new grdCognitiveRow(super.collection.newRow());
			}
			public grdCognitiveRow newRow(boolean autoSelect)
			{
				return new grdCognitiveRow(super.collection.newRow(autoSelect));
			}
			public grdCognitiveRow newRowAt(int index)
			{
				return new grdCognitiveRow(super.collection.newRowAt(index));
			}
			public grdCognitiveRow newRowAt(int index, boolean autoSelect)
			{
				return new grdCognitiveRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdCognitiveGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
			{
				super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
			}
			public ims.generalmedical.vo.CognitiveFunctionVoCollection getValues()
			{
				ims.generalmedical.vo.CognitiveFunctionVoCollection listOfValues = new ims.generalmedical.vo.CognitiveFunctionVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.generalmedical.vo.CognitiveFunctionVo getValue()
			{
				return (ims.generalmedical.vo.CognitiveFunctionVo)super.grid.getValue();
			}
			public void setValue(ims.generalmedical.vo.CognitiveFunctionVo value)
			{
				super.grid.setValue(value);
			}
			public grdCognitiveRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdCognitiveRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdCognitiveRowCollection getRows()
			{
				return new grdCognitiveRowCollection(super.grid.getRows());
			}
			public grdCognitiveRow getRowByValue(ims.generalmedical.vo.CognitiveFunctionVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdCognitiveRow(row);
			}
			public void setColCognitiveHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColCognitiveHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
			public GridComboBox ColSelectComboBox()
			{
				return new GridComboBox(super.grid, 1);
			}
		}
		public static class grdApnoeaRow extends GridRowBridge
		{
			private static final long serialVersionUID = 1L;
			
			protected grdApnoeaRow(GridRow row)
			{
				super(row);
			}
			public void showOpened(int column)
			{
				super.row.showOpened(column);
			}
			public void setColApnoeaReadOnly(boolean value)
			{
				super.row.setReadOnly(0, value);
			}
			public boolean isColApnoeaReadOnly()
			{
				return super.row.isReadOnly(0);
			}
			public void showColApnoeaOpened()
			{
				super.row.showOpened(0);
			}
			public ims.spinalinjuries.vo.lookups.SleepApnoeaFactors getColApnoea()
			{
				return (ims.spinalinjuries.vo.lookups.SleepApnoeaFactors)super.row.get(0);
			}
			public void setColApnoea(ims.spinalinjuries.vo.lookups.SleepApnoeaFactors value)
			{
				super.row.set(0, value);
			}
			public void setCellColApnoeaTooltip(String value)
			{
				super.row.setTooltip(0, value);
			}
			public void setColSelectReadOnly(boolean value)
			{
				super.row.setReadOnly(1, value);
			}
			public boolean isColSelectReadOnly()
			{
				return super.row.isReadOnly(1);
			}
			public void showColSelectOpened()
			{
				super.row.showOpened(1);
			}
			public ims.framework.controls.GridMutableComboBox getColSelect()
			{
				return new ims.framework.controls.GridMutableComboBox(super.row, 1);
			}
			public void setCellColSelectTooltip(String value)
			{
				super.row.setTooltip(1, value);
			}
			public ims.generalmedical.vo.SleepApnoeaVo getValue()
			{
				return (ims.generalmedical.vo.SleepApnoeaVo)super.row.getValue();
			}
			public void setValue(ims.generalmedical.vo.SleepApnoeaVo value)
			{
				super.row.setValue(value);
			}
		}
		public static class grdApnoeaRowCollection extends GridRowCollectionBridge
		{
			private static final long serialVersionUID = 1L;
			
			private grdApnoeaRowCollection(GridRowCollection collection)
			{
				super(collection);
			}
			public grdApnoeaRow get(int index)
			{
				return new grdApnoeaRow(super.collection.get(index));
			}
			public grdApnoeaRow newRow()
			{
				return new grdApnoeaRow(super.collection.newRow());
			}
			public grdApnoeaRow newRow(boolean autoSelect)
			{
				return new grdApnoeaRow(super.collection.newRow(autoSelect));
			}
			public grdApnoeaRow newRowAt(int index)
			{
				return new grdApnoeaRow(super.collection.newRowAt(index));
			}
			public grdApnoeaRow newRowAt(int index, boolean autoSelect)
			{
				return new grdApnoeaRow(super.collection.newRowAt(index, autoSelect));
			}
		}
		public static class grdApnoeaGrid extends GridBridge
		{
			private static final long serialVersionUID = 1L;
			
			private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
			{
				super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
			}
			private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
			{
				 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
			}
			public ims.generalmedical.vo.SleepApnoeaVoCollection getValues()
			{
				ims.generalmedical.vo.SleepApnoeaVoCollection listOfValues = new ims.generalmedical.vo.SleepApnoeaVoCollection();
				for(int x = 0; x < this.getRows().size(); x++)
				{
					listOfValues.add(this.getRows().get(x).getValue());
				}
				return listOfValues;
			}
			public ims.generalmedical.vo.SleepApnoeaVo getValue()
			{
				return (ims.generalmedical.vo.SleepApnoeaVo)super.grid.getValue();
			}
			public void setValue(ims.generalmedical.vo.SleepApnoeaVo value)
			{
				super.grid.setValue(value);
			}
			public grdApnoeaRow getSelectedRow()
			{
				return super.grid.getSelectedRow() == null ? null : new grdApnoeaRow(super.grid.getSelectedRow());
			}
			public int getSelectedRowIndex()
			{
				return super.grid.getSelectedRowIndex();
			}
			public grdApnoeaRowCollection getRows()
			{
				return new grdApnoeaRowCollection(super.grid.getRows());
			}
			public grdApnoeaRow getRowByValue(ims.generalmedical.vo.SleepApnoeaVo value)
			{
				GridRow row = super.grid.getRowByValue(value);
				return row == null?null:new grdApnoeaRow(row);
			}
			public void setColApnoeaHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(0, value);
			}
			public String getColApnoeaHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(0);
			}
			public void setColSelectHeaderTooltip(String value)
			{
				super.grid.setColumnHeaderTooltip(1, value);
			}
			public String getColSelectHeaderTooltip()
			{
				return super.grid.getColumnHeaderTooltip(1);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Panel Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 801, 248, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"General Information", new Integer(2), ""}));
	
			// Label Controls
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 360, 512, 9, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "-", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 176, 512, 180, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Total Epworth sleepiness score", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 656, 144, 27, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "cms", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 448, 120, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "BMI:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 656, 72, 27, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "cms", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 656, 96, 18, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "kg", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 448, 72, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Height:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 448, 48, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pulse Oximetry:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 448, 144, 62, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Neck size:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 187, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Medications for Spasticity/Pain:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 448, 96, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Weight:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 624, 48, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Values:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 208, 224, 584, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 672, 48, 96, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbValuesTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
			addControl(m_cmbValuesTemp);
			cmbValuesComboBox cmbValues = (cmbValuesComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbValuesComboBox.class, m_cmbValuesTemp);
			super.addComboBox(cmbValues);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 584, 48, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
	
			// Grid Controls
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 24, 40, 416, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdFindingsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdFindingsTemp);
			grdFindingsGrid grdFindings = (grdFindingsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFindingsGrid.class, m_grdFindingsTemp);
			grdFindings.addStringColumn("Findings", 0, 0, 285, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdFindings.addComboBoxColumn("Select", 0, 0, -1, false, true, false, false, true, -1);
			super.addGrid(grdFindings);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 272, 496, 237, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			Grid m_grdEpworthTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdEpworthTemp);
			grdEpworthGrid grdEpworth = (grdEpworthGrid)GridFlyweightFactory.getInstance().createGridBridge(grdEpworthGrid.class, m_grdEpworthTemp);
			grdEpworth.addStringColumn("EPWORTH Sleepiness Score - Situation", 0, 0, 350, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdEpworth.addComboBoxColumn("Chance of Dozing", 1, 1, -1, false, true, true, false, true, -1);
			super.addGrid(grdEpworth);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 520, 272, 281, 237, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdCognitiveTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdCognitiveTemp);
			grdCognitiveGrid grdCognitive = (grdCognitiveGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCognitiveGrid.class, m_grdCognitiveTemp);
			grdCognitive.addStringColumn("Cognitive Function", 0, 0, 160, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdCognitive.addComboBoxColumn("Select", 1, 1, -1, false, true, false, false, true, -1);
			super.addGrid(grdCognitive);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 544, 792, 175, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Grid m_grdApnoeaTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
			addControl(m_grdApnoeaTemp);
			grdApnoeaGrid grdApnoea = (grdApnoeaGrid)GridFlyweightFactory.getInstance().createGridBridge(grdApnoeaGrid.class, m_grdApnoeaTemp);
			grdApnoea.addStringColumn("Sleep Apnoea Factors", 0, 0, 550, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
			grdApnoea.addMutableComboBoxColumn("Select", 1, 1, -1, false, true, false, false, false, true, -1);
			super.addGrid(grdApnoea);
	
			// IntBox Controls
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 584, 120, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, "This is a calculated field<br>Read only", null, Boolean.FALSE, new Integer(9)}));
	
			// DecimalBox Controls
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 584, 144, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 584, 72, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 584, 96, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
		}
		public Label lblTotalScore()
		{
			return (Label)super.getControl(1);
		}
		public TextBox txtMeds()
		{
			return (TextBox)super.getControl(13);
		}
		public cmbValuesComboBox cmbValues()
		{
			return (cmbValuesComboBox)super.getComboBox(0);
		}
		public CheckBox chkBoxOximetry()
		{
			return (CheckBox)super.getControl(15);
		}
		public grdFindingsGrid grdFindings()
		{
			return (grdFindingsGrid)super.getGrid(0);
		}
		public grdEpworthGrid grdEpworth()
		{
			return (grdEpworthGrid)super.getGrid(1);
		}
		public grdCognitiveGrid grdCognitive()
		{
			return (grdCognitiveGrid)super.getGrid(2);
		}
		public grdApnoeaGrid grdApnoea()
		{
			return (grdApnoeaGrid)super.getGrid(3);
		}
		public IntBox intBMI()
		{
			return (IntBox)super.getControl(20);
		}
		public DecimalBox decNeck()
		{
			return (DecimalBox)super.getControl(21);
		}
		public DecimalBox decHeight()
		{
			return (DecimalBox)super.getControl(22);
		}
		public DecimalBox decWeight()
		{
			return (DecimalBox)super.getControl(23);
		}
	}
	public static class recbrSleepAssessmentRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.CareContextShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.core.vo.CareContextShortVo getValue()
		{
			return (ims.core.vo.CareContextShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.CareContextShortVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getvoSleep();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 376, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper25.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(8), new Integer(32), new Integer(376), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3), m_customControlAuthoringInfoForm, instance1 } );
		ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1025),  new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringInfoControl);
		Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Container Clasess
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 832, 488, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_cntSleeping = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_cntSleeping);
		cntSleepingContainer cntSleeping = (cntSleepingContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(cntSleepingContainer.class, m_cntSleeping, factory);
		ims.framework.utils.SizeInfo m_cntSleepingDesignSize = new ims.framework.utils.SizeInfo(832, 488);
		ims.framework.utils.SizeInfo m_cntSleepingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper26.getWidth(), anchoringHelper26.getHeight());
		cntSleeping.setContext(form, appForm, m_cntSleeping, loader, this.getImages(), startControlID, m_cntSleepingDesignSize, m_cntSleepingRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(cntSleeping);

		// Label Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 728, 32, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "<Browser Status>", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 664, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 744, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrSleepAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrSleepAssessmentTemp);
		recbrSleepAssessmentRecordBrowser recbrSleepAssessment = (recbrSleepAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrSleepAssessmentRecordBrowser.class, m_recbrSleepAssessmentTemp);
		super.addRecordBrowser(recbrSleepAssessment);
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean iscustomControlAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setcustomControlAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public cntSleepingContainer cntSleeping()
	{
		return (cntSleepingContainer)super.getContainer(0);
	}
	public Label lblBrowser()
	{
		return (Label)super.getControl(2);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(3);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public recbrSleepAssessmentRecordBrowser recbrSleepAssessment()
	{
		return (recbrSleepAssessmentRecordBrowser)super.getRecordBrowser(0);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Search = new ImageHelper(102120, "Images/Core/bin.gif", new Integer(15), new Integer(15));
			}
			public final ims.framework.utils.Image Search;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_voSleep = new ims.framework.ContextVariable("voSleep", prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voSleep_" + componentIdentifier + "");
			cxl_voVitals = new ims.framework.ContextVariable("voVitals", prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voVitals_" + componentIdentifier + "");
			cxl_SelectedCareContextShort = new ims.framework.ContextVariable("SelectedCareContextShort", prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__SelectedCareContextShort_" + componentIdentifier + "");
			cxl_voSleepColl = new ims.framework.ContextVariable("voSleepColl", prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voSleepColl_" + componentIdentifier + "");
			cxl_voVitalsColl = new ims.framework.ContextVariable("voVitalsColl", prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voVitalsColl_" + componentIdentifier + "");
			cxl_UpdatedInstance = new ims.framework.ContextVariable("UpdatedInstance", prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__UpdatedInstance_" + componentIdentifier + "");
		}
		
		public boolean getvoSleepIsNotNull()
		{
			return !cxl_voSleep.getValueIsNull(context);
		}
		public ims.generalmedical.vo.SleepReferralVo getvoSleep()
		{
			return (ims.generalmedical.vo.SleepReferralVo)cxl_voSleep.getValue(context);
		}
		public void setvoSleep(ims.generalmedical.vo.SleepReferralVo value)
		{
			cxl_voSleep.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voSleep = null;
		public boolean getvoVitalsIsNotNull()
		{
			return !cxl_voVitals.getValueIsNull(context);
		}
		public ims.core.vo.VitalSignsVo getvoVitals()
		{
			return (ims.core.vo.VitalSignsVo)cxl_voVitals.getValue(context);
		}
		public void setvoVitals(ims.core.vo.VitalSignsVo value)
		{
			cxl_voVitals.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voVitals = null;
		public boolean getSelectedCareContextShortIsNotNull()
		{
			return !cxl_SelectedCareContextShort.getValueIsNull(context);
		}
		public ims.core.vo.CareContextShortVo getSelectedCareContextShort()
		{
			return (ims.core.vo.CareContextShortVo)cxl_SelectedCareContextShort.getValue(context);
		}
		public void setSelectedCareContextShort(ims.core.vo.CareContextShortVo value)
		{
			cxl_SelectedCareContextShort.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedCareContextShort = null;
		public boolean getvoSleepCollIsNotNull()
		{
			return !cxl_voSleepColl.getValueIsNull(context);
		}
		public ims.generalmedical.vo.SleepReferralVoCollection getvoSleepColl()
		{
			return (ims.generalmedical.vo.SleepReferralVoCollection)cxl_voSleepColl.getValue(context);
		}
		public void setvoSleepColl(ims.generalmedical.vo.SleepReferralVoCollection value)
		{
			cxl_voSleepColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voSleepColl = null;
		public boolean getvoVitalsCollIsNotNull()
		{
			return !cxl_voVitalsColl.getValueIsNull(context);
		}
		public ims.core.vo.VitalSignsVoCollection getvoVitalsColl()
		{
			return (ims.core.vo.VitalSignsVoCollection)cxl_voVitalsColl.getValue(context);
		}
		public void setvoVitalsColl(ims.core.vo.VitalSignsVoCollection value)
		{
			cxl_voVitalsColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voVitalsColl = null;
		public boolean getUpdatedInstanceIsNotNull()
		{
			return !cxl_UpdatedInstance.getValueIsNull(context);
		}
		public ims.vo.ValueObject getUpdatedInstance()
		{
			return (ims.vo.ValueObject)cxl_UpdatedInstance.getValue(context);
		}
		public void setUpdatedInstance(ims.vo.ValueObject value)
		{
			cxl_UpdatedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UpdatedInstance = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[90];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voSleep_" + componentIdentifier, "BO-1023100029-ID", "ID_SleepReferral");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voSleep_" + componentIdentifier, "BO-1023100029-PULSEOXIMETRY", "PulseOximetry");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voSleep_" + componentIdentifier, "BO-1023100029-OXIMETRYVALUES", "OximetryValues");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voSleep_" + componentIdentifier, "BO-1023100029-MEDICATION", "Medication");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voVitals_" + componentIdentifier, "BO-1022100004-ID", "ID_VitalSigns");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voVitals_" + componentIdentifier, "BO-1022100004-CARECONTEXT", "CareContext");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voVitals_" + componentIdentifier, "BO-1022100004-ISVENTILATIONCHARTRECORD", "IsVentilationChartRecord");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voVitals_" + componentIdentifier, "BO-1022100004-VITALSTAKENDATETIME", "VitalsTakenDateTime");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voVitals_" + componentIdentifier, "BO-1022100004-PATIENTCONSCIOUS", "PatientConscious");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voVitals_" + componentIdentifier, "BO-1022100004-URINE2MLKGKHR", "Urine2mlkgkhr");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__voVitals_" + componentIdentifier, "BO-1022100004-PATIENTCAUSINGCONCERN", "PatientCausingConcern");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-CONTEXT", "Context");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_SpinalInjuries.SleepAssessment.__internal_x_context__SelectedCareContextShort_" + componentIdentifier, "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
