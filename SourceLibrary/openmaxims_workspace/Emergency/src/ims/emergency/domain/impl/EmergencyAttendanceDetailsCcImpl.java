//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.admin.vo.EDAttendanceControlsConfigVoCollection;
import ims.admin.vo.lookups.EDAttendenceControlType;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.CareSpell;
import ims.core.admin.domain.objects.DefaultEDLocationDeptType;
import ims.core.admin.domain.objects.EmergencyAttendance;
import ims.core.admin.domain.objects.EmergencyEpisode;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.domain.objects.ProviderSystem;
import ims.core.admin.domain.objects.RTA;
import ims.core.admin.domain.objects.TIIG;
import ims.core.admin.vo.EmergencyAttendanceRefVo;
import ims.core.admin.vo.EmergencyEpisodeRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.domain.objects.SpecialInterestDetail;
import ims.core.domain.Demographics;
import ims.core.domain.impl.DemographicsImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.Gp;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.CareContextVo;
import ims.core.vo.CareSpellVo;
import ims.core.vo.EpisodeofCareVo;
import ims.core.vo.GpLiteWithNameVo;
import ims.core.vo.GpShortVo;
import ims.core.vo.GpShortVoCollection;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.Patient;
import ims.core.vo.domain.CareContextVoAssembler;
import ims.core.vo.domain.CareSpellVoAssembler;
import ims.core.vo.domain.EpisodeofCareVoAssembler;
import ims.core.vo.domain.GpLiteWithNameVoAssembler;
import ims.core.vo.domain.GpShortVoAssembler;
import ims.core.vo.domain.LocSiteShortVoAssembler;
import ims.core.vo.lookups.MsgEventType;
import ims.core.vo.lookups.QueueType;
import ims.domain.DomainFactory;
import ims.domain.DomainObject;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.configuration.domain.objects.LocationDepartmentTypes;
import ims.emergency.domain.base.impl.BaseEmergencyAttendanceDetailsCcImpl;
import ims.emergency.domain.objects.AttendanceRequiringContracting;
import ims.emergency.domain.objects.Tracking;
import ims.emergency.helper.EmergencyHelper;
import ims.emergency.helper.IEmergencyHelper;
import ims.emergency.vo.AttendanceDetailsVo;
import ims.emergency.vo.AttendanceDetailsVoCollection;
import ims.emergency.vo.AttendanceRequiringContractingVo;
import ims.emergency.vo.DefaultEDLocationDeptTypeVo;
import ims.emergency.vo.EpisodeDetailsVo;
import ims.emergency.vo.EpisodeDetailsVoCollection;
import ims.emergency.vo.EpisodeOfcareLiteVo;
import ims.emergency.vo.LocationDepartmentTypesVo;
import ims.emergency.vo.RTAVo;
import ims.emergency.vo.TIIGVo;
import ims.emergency.vo.TrackingSendToAreaVo;
import ims.emergency.vo.domain.AttendanceDetailsVoAssembler;
import ims.emergency.vo.domain.DefaultEDLocationDeptTypeVoAssembler;
import ims.emergency.vo.domain.EpisodeDetailsVoAssembler;
import ims.emergency.vo.domain.EpisodeOfcareLiteVoAssembler;
import ims.emergency.vo.domain.LocationDepartmentTypesVoAssembler;
import ims.emergency.vo.domain.RTAVoAssembler;
import ims.emergency.vo.domain.TIIGVoAssembler;
import ims.emergency.vo.domain.TrackingSendToAreaVoAssembler;
import ims.emergency.vo.enums.AttendanceHistoryDialog;
import ims.emergency.vo.lookups.EmergencyDeptType;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.hl7adtout.domain.objects.EdAttendanceMessageQueue;
import ims.ocrr.vo.lookups.OrderMessageStatus;
import ims.vo.LookupInstVo;

import java.util.Iterator;
import java.util.List;

public class EmergencyAttendanceDetailsCcImpl extends BaseEmergencyAttendanceDetailsCcImpl
{

	private static final long serialVersionUID = 1L;
	public CareSpellVo getCareSpellByEpisodeOfCare(Integer id)
	{
		if(id == null)
			throw new CodingRuntimeException("Patient not provided");
		
		DomainFactory factory = getDomainFactory();
		
		String hsql = "select cs from EpisodeOfCare as eoc left join eoc.careSpell as cs";
		hsql += " where eoc.id = :id";
		
		List careSpell = factory.find(hsql, new String[] {"id"}, new Object[] {id.intValue()});

		return CareSpellVoAssembler.createCareSpellVoCollectionFromCareSpell(careSpell).get(0);
	}
		
	public EpisodeDetailsVoCollection listEmergencyEpisodeByPatient(PatientRefVo patientRefVo, 
			Integer maxRecords,
				AttendanceHistoryDialog type, 
					DateTime scheduledDate, 
						DateTime unscheduledDate)
	{
		if(patientRefVo == null || patientRefVo.getID_Patient() == null)
			throw new CodingRuntimeException("Patient not provided");
		
		DomainFactory factory = getDomainFactory();
		
		String hsql = " select e1_1 from EmergencyEpisode as e1_1 ";
		hsql += " left join e1_1.episodeOfCare as e2_1 ";
		hsql += " left join e2_1.careSpell as c1_1 ";
		hsql += " left join c1_1.patient as p1_1 ";
		hsql += " where e1_1.isRIE is null and p1_1.id = :idPatient";
		
		if (type != null)
		{
			if (type.equals(AttendanceHistoryDialog.SCHEDULED))
			{
				hsql += " and e1_1.injuryDateTime >= :scheduledDate";
			}
			if (type.equals(AttendanceHistoryDialog.UNSCHEDULED))
			{
				hsql += " and (e1_1.injuryDateTime >= :unscheduledDate and e1_1.injuryDateTime < :scheduledDate)";
			}
		}
		hsql += " order by e2_1.startDate desc";		//wdev-16070
		
		List episodeDetails = null;
		
		if (maxRecords != 0)
		{
			if (type != null)
			{
				if (type.equals(AttendanceHistoryDialog.SCHEDULED))
				{
					episodeDetails = factory.find(hsql, new String[] {"scheduledDate","idPatient"}, new Object[] {scheduledDate.getJavaDate(), patientRefVo.getID_Patient()},maxRecords);
				}
				if (type.equals(AttendanceHistoryDialog.UNSCHEDULED))
				{
					episodeDetails = factory.find(hsql, new String[] {"scheduledDate","unscheduledDate","idPatient"}, new Object[] {scheduledDate.getJavaDate(), unscheduledDate.getJavaDate(), patientRefVo.getID_Patient()},maxRecords);
				}
			}
			else
			{
				episodeDetails = factory.find(hsql, new String[] {"idPatient"}, new Object[] {patientRefVo.getID_Patient()},maxRecords);
			}
		}
		else
		{
			if (type != null)
			{
				if (type.equals(AttendanceHistoryDialog.SCHEDULED))
				{
					episodeDetails = factory.find(hsql, new String[] {"scheduledDate","idPatient"}, new Object[] {scheduledDate.getJavaDate(), patientRefVo.getID_Patient()});
				}
				if (type.equals(AttendanceHistoryDialog.UNSCHEDULED))
				{
					episodeDetails = factory.find(hsql, new String[] {"scheduledDate","unscheduledDate","idPatient"}, new Object[] {scheduledDate.getJavaDate(), unscheduledDate.getJavaDate(), patientRefVo.getID_Patient()});
				}
			}
			else
			{
				episodeDetails = factory.find(hsql, new String[] {"idPatient"}, new Object[] {patientRefVo.getID_Patient()});
			}
		}
		
		
		if ( episodeDetails != null && episodeDetails.size() > 0)
			 return EpisodeDetailsVoAssembler.createEpisodeDetailsVoCollectionFromEmergencyEpisode(episodeDetails).sort(SortOrder.DESCENDING);
			
		
		return null;
	}
	
	public Patient getPatient(PatientRefVo patientRef)
	{
		Demographics impl = (Demographics) getDomainImpl(DemographicsImpl.class);
		return impl.getPatient(patientRef);
	}
	
	public EpisodeDetailsVo save(EpisodeDetailsVo record, CareSpellVo voCareSpell, EpisodeofCareVo voEpisodeOfCare, CareContextVo voCareContext, TrackingSendToAreaVo trackingVo, TIIGVo tiigrecord, RTAVo rtaRecord, AttendanceDetailsVo emergattendance) throws StaleObjectException
	{
		if (record == null  || !record.isValidated())
			throw new CodingRuntimeException("Care Spell is null or has not been validated");

		DomainFactory factory = getDomainFactory();

		//WDEV-17269 Check SOE
		if (record!=null && record.getID_EmergencyEpisodeIsNotNull())
		{
			EmergencyEpisode tempEpisodeDetails = (EmergencyEpisode)factory.getDomainObject(EmergencyEpisode.class, record.getID_EmergencyEpisode());
			if (record.getVersion_EmergencyEpisode()!=tempEpisodeDetails.getVersion())
			{
				throw new StaleObjectException(tempEpisodeDetails);
			}
		}
		
		CareSpell doCareSpell = null;
		EpisodeOfCare doEpisode = null;
		CareContext doCare = null;

		if (voCareSpell != null)
		{
			doCareSpell = CareSpellVoAssembler.extractCareSpell(factory, voCareSpell);			
			factory.save(doCareSpell);
			doEpisode = getEpisodeOfCareDO(doCareSpell);
			doCare = getCareContextDO(doEpisode);
		}
		else
		{
			if(trackingVo != null)
			{
				doCare = CareContextVoAssembler.extractCareContext(factory,voCareContext);
				factory.save(doCare);
			}
		}
		EmergencyEpisode doEpisodeDetails = EpisodeDetailsVoAssembler.extractEmergencyEpisode(factory, record);
		
		if (voCareSpell != null)
		{
			doEpisodeDetails.setEpisodeOfCare(doEpisode);
		}
		Iterator it = doEpisodeDetails.getEmergencyAttendances().iterator();
		while(it.hasNext())
		{
			EmergencyAttendance doEmergencyAttendances = (EmergencyAttendance) it.next();
			if (doEmergencyAttendances.getCareContext() == null ||
					doEmergencyAttendances.getCareContext().getId() == null )
						doEmergencyAttendances.setCareContext(doCare);
		}
		
		Iterator itspec = doEpisodeDetails.getSpecialInterestDetails().iterator();
		while(itspec.hasNext())
		{
			SpecialInterestDetail doSpecialInterestDetail = (SpecialInterestDetail) itspec.next();
			if (doSpecialInterestDetail.getAttendance() == null ||	doSpecialInterestDetail.getAttendance().getId() == null )
				doSpecialInterestDetail.setAttendance(doCare);
			if (doSpecialInterestDetail.getEpisode() == null ||	doSpecialInterestDetail.getEpisode().getId() == null )
				doSpecialInterestDetail.setEpisode(doEpisodeDetails.getEpisodeOfCare());
		}
		//wdev-14582
		if(	record.getTiigIsNotNull() && record.getTiig().getID_TIIG() == null)
		{
			if(	doEpisodeDetails.getTiig().getEpisode() == null || doEpisodeDetails.getTiig().getEpisode().getId() == null)
				doEpisodeDetails.getTiig().setEpisode(doEpisodeDetails.getEpisodeOfCare());
			if( doEpisodeDetails.getTiig().getAttendance() == null || doEpisodeDetails.getTiig().getAttendance().getId() == null)
				doEpisodeDetails.getTiig().setAttendance(doCare);
		}
		//if the emergencyepisodes is edited and the TIIG fields is set to null the old TIIG is marked as RIE
		if(	tiigrecord != null)
		{
			TIIG doTIIG = TIIGVoAssembler.extractTIIG(factory, tiigrecord);
			if(	doTIIG != null)
			{
				doTIIG.setIsRIE(Boolean.TRUE);
				factory.save(doTIIG);
			}
			
			
		}
		//wdev-14615 if the emergencyepisodes is edited and the RTA field is set to null the old RTA is marked as RIE
		if(	rtaRecord != null)
		{
			RTA doRTA =  RTAVoAssembler.extractRTA(factory, rtaRecord);
			if(	doRTA != null)
			{
				doRTA.setIsRIE(Boolean.TRUE);
				factory.save(doRTA);
			}
		}
		
		//--------------
		factory.save(doEpisodeDetails);
		if( trackingVo == null && emergattendance != null) //wdev-17949 - 
			triggerAttendanceUpdateEvent(emergattendance); //trigger message on update of emergency attendance
		
		
		//wdev-14420
		if(trackingVo != null)
		{
			
			EmergencyAttendance doAttendanceDEt = getAttendanceDetailsByCareContext(doCare,factory );
			Tracking doTracking = TrackingSendToAreaVoAssembler.extractTracking(factory, trackingVo);
			if( doTracking.getEpisode() == null || doTracking.getEpisode().getId() == null)
				doTracking.setEpisode(doEpisodeDetails);
				//doTracking.setEpisode(voCareSpell != null ? doEpisode : doEpisodeDetails.getEpisodeOfCare());
				
			if( doTracking.getCurrentStatus().getEpisode() == null || doTracking.getCurrentStatus().getEpisode().getId()== null)
				doTracking.getCurrentStatus().setEpisode(voCareSpell != null ? doEpisode : doEpisodeDetails.getEpisodeOfCare());				
		
			
			if( doTracking.getAttendance() == null || doTracking.getAttendance().getId() == null )
				doTracking.setAttendance(doAttendanceDEt);
			if( doTracking.getCurrentStatus().getAttendance() == null || doTracking.getCurrentStatus().getAttendance().getId() == null)
				doTracking.getCurrentStatus().setAttendance(doCare);
						
			factory.save(doTracking);
			
			//WDEV-17513
			if (Boolean.TRUE.equals(ConfigFlag.UI.USE_HEARTS_CONTRACTING.getValue()) && record.getID_EmergencyEpisode()==null)
			{
				AttendanceRequiringContracting doAttendanceRequiringContracting=new AttendanceRequiringContracting();
				doAttendanceRequiringContracting.setPatient(doAttendanceDEt.getPatient());
				doAttendanceRequiringContracting.setAttendance(doAttendanceDEt);
				
				factory.save(doAttendanceRequiringContracting);
			}
			
			if( emergattendance == null) //wdev-17949
				triggerAttendanceRegistrationEvent(AttendanceDetailsVoAssembler.create(doAttendanceDEt));  //wdev-17949 , trigger message when emergency attendance is created 
		}
		
		//-------

		return EpisodeDetailsVoAssembler.create(doEpisodeDetails);		
	}
	private EmergencyAttendance getAttendanceDetailsByCareContext(CareContext doCare,DomainFactory factory )
	{
		if(doCare == null)
			throw new CodingRuntimeException("Care Context is null");
		
		String hsql = "select e1_1 from EmergencyAttendance as e1_1 left join e1_1.careContext as c1_1	where (c1_1.id =:id)";
		List attendances = factory.find(hsql, new String[] {"id"}, new Object[] {doCare.getId()});
		if(attendances != null && attendances.size() > 0)
		{
			return (EmergencyAttendance) attendances.get(0);
		}
		return null;
	}

	public GpLiteWithNameVo getGP(Integer id) 
	{
		DomainFactory factory = getDomainFactory();
		Gp doGP = (Gp) factory.getDomainObject(Gp.class, id);
		return GpLiteWithNameVoAssembler.create(doGP);
	}
	
	public EpisodeofCareVo getEpisodeOfCare(Integer id) 
	{
		DomainFactory factory = getDomainFactory();
		EpisodeOfCare doEpisodeOfCare = (EpisodeOfCare) factory.getDomainObject(EpisodeOfCare.class, id);
		return EpisodeofCareVoAssembler.create(doEpisodeOfCare);
	}
	
	private CareContext getCareContextDO(EpisodeOfCare doEpisode)
	{
		for (Iterator iter = doEpisode.getCareContexts().iterator(); iter.hasNext();)
		{
			CareContext element = (CareContext) iter.next();
				return element;
		}

		return null;
	}

	private EpisodeOfCare getEpisodeOfCareDO(CareSpell doCareSpell)
	{
		for (Iterator iter = doCareSpell.getEpisodes().iterator(); iter.hasNext();)
		{
			EpisodeOfCare element = (EpisodeOfCare) iter.next();
				return element;
		}

		return null;
	}

	public TrackingSendToAreaVo isPatientCurrentlyinED(PatientRefVo patient) 
	{
		IEmergencyHelper impl = (IEmergencyHelper)getDomainImpl(EmergencyHelper.class);
		return impl.isPatientCurrentlyinED(patient);
	}
	
	public GpShortVo getGpPatient(PatientRefVo patient) 
	{
		if(patient == null)
			throw new CodingRuntimeException("Patient not provided");
		
		DomainFactory factory = getDomainFactory();
		
		String hsql = "select g1_1 from Patient as p1_1 left join p1_1.gp as g1_1 	where	(p1_1.id = :id)";
		 
		List gps = factory.find(hsql, new String[] {"id"}, new Object[] {patient.getID_Patient()});
		if(gps != null && gps.size() > 0)
		{
			GpShortVoCollection gpColl = GpShortVoAssembler.createGpShortVoCollectionFromGp(gps);
			if(gpColl != null && gpColl.size() > 0)
				return gpColl.get(0);
		}
		return null;
	}

	//wdev-14420
	public AttendanceDetailsVo getLastAttendance(PatientRefVo patientRef) 
	{
		if(patientRef == null)
			throw new CodingRuntimeException("Patient not provided");

		DomainFactory factory = getDomainFactory();
		

		String hsql = 	"select e3_1 from EmergencyEpisode as e1_1 left join e1_1.episodeOfCare as e2_1 left join e2_1.careSpell as c1_1 left join c1_1.patient as p1_1 left join e1_1.emergencyAttendances as e3_1 where (e3_1.arrivalDateTime = " +
						"(select  max (xe3_1.arrivalDateTime)   from EmergencyEpisode as xe1_1 left join xe1_1.episodeOfCare as xe2_1 left join xe2_1.careSpell as xc1_1 left join xc1_1.patient as xp1_1 left join xe1_1.emergencyAttendances as xe3_1  " +
						"where (xc1_1.patient.id =:idPatient )) and c1_1.patient.id =:idPatient1 )";
		
			
		List attendances = factory.find(hsql, new String[] {"idPatient","idPatient1"}, new Object[] {patientRef.getID_Patient(),patientRef.getID_Patient()});
		if(attendances != null && attendances.size() > 0)
		{
			AttendanceDetailsVoCollection attColl = AttendanceDetailsVoAssembler.createAttendanceDetailsVoCollectionFromEmergencyAttendance(attendances);
			if( attColl != null && attColl.size() > 0)
				return attColl.get(0);
		}
		return null;
	

	}

	//wdev-14420
	public EpisodeDetailsVo getEmergencyEpisode(EmergencyEpisodeRefVo episodeId) 
	{
		if(	episodeId == null)
			throw new CodingRuntimeException("EmergencyEpisodeRefVo not provided");
		
		DomainFactory factory = getDomainFactory();
		
		String hsql = "select e1_1 from EmergencyEpisode as e1_1 where	(e1_1.id = :id)";
		 
		List emergency = factory.find(hsql, new String[] {"id"}, new Object[] {episodeId.getID_EmergencyEpisode()});
		if(emergency != null && emergency.size() > 0)
		{
			EpisodeDetailsVoCollection EpisodeColl = EpisodeDetailsVoAssembler.createEpisodeDetailsVoCollectionFromEmergencyEpisode(emergency);
			if(EpisodeColl != null && EpisodeColl.size() > 0)
				return EpisodeColl.get(0);
		}
		return null;
		
		
	}

	//wdev-14420
	public LocSiteShortVo getTypeOfLocSite(LocationRefVo locRef) 
	{
		if(	locRef == null )
			throw new CodingRuntimeException("Location not provided");
		
		DomainFactory factory = getDomainFactory();
		LocSite doLocation  =(LocSite) factory.getDomainObject(LocSite.class, locRef.getID_Location());
		return LocSiteShortVoAssembler.create(doLocation);
		
	}

	//WDEV-15821
	public LocationDepartmentTypesVo getLocationDepartmentTypes(LocationRefVo edLocation)
	{
		if(edLocation == null || edLocation.getID_Location() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "from LocationDepartmentTypes as ldt where ldt.eDLocation.id = :EmergencyLocation";
		List<?> departments = factory.find(query, new String[] {"EmergencyLocation"}, new Object[] {edLocation.getID_Location()});
		
		if(departments != null && departments.size() > 0)
		{
			 return LocationDepartmentTypesVoAssembler.create((LocationDepartmentTypes) departments.get(0));
		}
		
		return null;
	}

	//wdev-16070
	public EpisodeOfcareLiteVo getEpisodeOfCareLite(EpisodeOfCareRefVo episodeOfCareRef)
	{
		if( episodeOfCareRef == null )
			throw new CodingRuntimeException("EpisodeOfCareRefVo not provided");
		
		DomainFactory factory = getDomainFactory();
		EpisodeOfCare doEpisodeOfCare = (EpisodeOfCare) factory.getDomainObject(EpisodeOfCare.class, episodeOfCareRef.getID_EpisodeOfCare());
		return EpisodeOfcareLiteVoAssembler.create(doEpisodeOfCare);
	}

	public EDAttendanceControlsConfigVoCollection getEDAttendanceControlsConfig(EDAttendenceControlType controlType)
	{
		IEmergencyHelper impl = (IEmergencyHelper)getDomainImpl(EmergencyHelper.class);
		return impl.getEDAttendanceControlsConfig(controlType);
	}

	public AttendanceDetailsVo getAttendanceDetails(EmergencyAttendanceRefVo attendanceDetailsRef)
	{
		IEmergencyHelper impl = (IEmergencyHelper)getDomainImpl(EmergencyHelper.class);
		return impl.getAttendanceDetails(attendanceDetailsRef);
	}

	//WDEV-17008
	public EmergencyDeptType getEDDeptType(LocationRefVo locationRef)
	{
		if(locationRef == null || locationRef.getID_Location() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "from DefaultEDLocationDeptType as defaultEdDeptType where defaultEdDeptType.location.id = :EmergencyLocation";
		List<?> edDeptType = factory.find(query, new String[] {"EmergencyLocation"}, new Object[] {locationRef.getID_Location()});
		
		if(edDeptType != null && edDeptType.size() > 0 && edDeptType.get(0)!=null)
		{
			 return (DefaultEDLocationDeptTypeVoAssembler.create((DefaultEDLocationDeptType) edDeptType.get(0))).getDefaultDeptType();
		}
		
		return null;
	}
	
	//http://jira/browse/WDEV-17134
	public void triggerAttendanceRegistrationEvent(EmergencyAttendanceRefVo emergencyAttendance) throws StaleObjectException
	{
		triggerAttendanceEvent(emergencyAttendance,MsgEventType.A01);	
	}

	public void triggerAttendanceUpdateEvent(EmergencyAttendanceRefVo emergencyAttendance) throws StaleObjectException
	{
		triggerAttendanceEvent(emergencyAttendance,MsgEventType.A08);	
	}

	public void triggerAttendanceDischargeEvent(EmergencyAttendanceRefVo emergencyAttendance) throws StaleObjectException
	{
		triggerAttendanceEvent(emergencyAttendance,MsgEventType.A03);	
	}

	public void triggerAttendanceCancelDischargeEvent(EmergencyAttendanceRefVo emergencyAttendance) throws StaleObjectException
	{
		triggerAttendanceEvent(emergencyAttendance,MsgEventType.A13);	
	}

	public void triggerAttendanceCancelRegistrationEvent(EmergencyAttendanceRefVo emergencyAttendance) throws StaleObjectException
	{
		triggerAttendanceEvent(emergencyAttendance,MsgEventType.A11);	
	}
	
	private void triggerAttendanceEvent(EmergencyAttendanceRefVo emergencyAttendance,LookupInstVo type) throws StaleObjectException
	{
		if(emergencyAttendance!=null)
		{
			DomainFactory factory = getDomainFactory();
			String hqlString = "select ot.providerSystem from OutboundTriggers as ot left join ot.queueType as qt left join qt.instance as i"
					+ " where(i.id = "+QueueType.EDATTENDANCE.getId()+")";

			java.util.List<ProviderSystem> list = factory.find(hqlString);
			for (ProviderSystem providerSystem : list)
			{
				EdAttendanceMessageQueue event = new EdAttendanceMessageQueue();
				event.setAttendance((EmergencyAttendance)factory.getDomainObject(emergencyAttendance));
				event.setProviderSystem(providerSystem);
				event.setWasProcessed(Boolean.FALSE);
				event.setMessageStatus(getDomLookup(OrderMessageStatus.CREATED));
				event.setMsgType(getDomLookup(type));
				event.setQueueType(getDomLookup(QueueType.EDATTENDANCE));
				factory.save(event);
			}
		}
	}


}
