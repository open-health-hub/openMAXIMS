//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.emergency.configuration.domain.objects.TrackingArea;
import ims.emergency.configuration.domain.objects.TrackingConfiguration;
import ims.emergency.configuration.vo.TrackingAreaRefVo;
import ims.emergency.configuration.vo.TrackingCubicleRoomBedRefVo;
import ims.emergency.domain.base.impl.BaseTrackingConfigurationImpl;
import ims.emergency.domain.objects.TrackingAreaCubicles;
import ims.emergency.vo.CubicleAllocationVoCollection;
import ims.emergency.vo.TrackingAreaCubiclesVo;
import ims.emergency.vo.TrackingAreaCubiclesVoCollection;
import ims.emergency.vo.TrackingAreaVo;
import ims.emergency.vo.TrackingConfigurationVo;
import ims.emergency.vo.domain.CubicleAllocationVoAssembler;
import ims.emergency.vo.domain.TrackingAreaCubiclesVoAssembler;
import ims.emergency.vo.domain.TrackingAreaVoAssembler;
import ims.emergency.vo.domain.TrackingConfigurationVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

import javax.swing.SpringLayout.Constraints;

public class TrackingConfigurationImpl extends BaseTrackingConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.LocationLiteVoCollection listLocations()
	{
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer();
		//List only Emergency Department
		hql.append(" from Location loc where loc.type = " + LocationType.ANE.getId()); 
		hql.append(" and loc.isActive =:active");
		hql.append(" and loc.isRIE is null");
		hql.append(" and loc.isVirtual =:virtual");
		hql.append(" order by loc.name asc ");

		List<?> locationList = factory.find(hql.toString(), new String[]{"active", "virtual"}, new Object[]{Boolean.TRUE, Boolean.FALSE});
		return LocationLiteVoAssembler.createLocationLiteVoCollectionFromLocation(locationList); 
	}

	public TrackingConfigurationVo save(TrackingConfigurationVo trackingConfigToSave) throws StaleObjectException, UniqueKeyViolationException
	{
		
		if (trackingConfigToSave == null )

			throw new CodingRuntimeException("Cannot save TrackingConfiguration if null or get TrackingConfiguration on null ID . ");
			
		if (!trackingConfigToSave.isValidated())
			throw new CodingRuntimeException("TrackingConfigurationVo not Validated");
		try
		{
			DomainFactory factory = getDomainFactory();
			TrackingConfiguration trackingConfig = TrackingConfigurationVoAssembler.extractTrackingConfiguration(factory,trackingConfigToSave);

			factory.save(trackingConfig);
			
			return TrackingConfigurationVoAssembler.create(trackingConfig);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("This Configuration Already Exist!", e);
		}
		
	}

	public Boolean isStale(TrackingConfigurationVo trackingConfig)
	{
		if (trackingConfig == null || trackingConfig.getID_TrackingConfiguration() == null)
		{
			throw new CodingRuntimeException("Cannot get TrackingConfigurationVo on null Id ");
		}
				
		DomainFactory factory = getDomainFactory();
		TrackingConfiguration domainTrackingConfig = (TrackingConfiguration) factory.getDomainObject(TrackingConfiguration.class, trackingConfig.getID_TrackingConfiguration());
		
		if(domainTrackingConfig==null)
		{
			return true;
		}
		
		if (domainTrackingConfig.getVersion() > trackingConfig.getVersion_TrackingConfiguration())
		{
			return true;
		}
		
		return false;
	}

	public TrackingConfigurationVo getTrackingConfig(LocationRefVo locationID)
	{
		if(locationID == null)
			throw new CodingRuntimeException("Can not get TrackingConfiguration value on null locationID.");
		
		StringBuffer hql = new StringBuffer();
		hql.append("select trackConfig from TrackingConfiguration as trackConfig ");
		hql.append("where trackConfig.eDLocation.id = :locationID ");
		
		DomainFactory factory = getDomainFactory();
		List<?> list = factory.find(hql.toString(), new String[] {"locationID"}, new Object[] {locationID.getID_Location()});
		
		if (list!=null && list.size()>0)
		{
			return TrackingConfigurationVoAssembler.createTrackingConfigurationVoCollectionFromTrackingConfiguration(list).get(0);
		}
		return null;

	}

	public TrackingAreaVo saveTrackingArea(TrackingAreaVo trackingAreaToSave) throws StaleObjectException, UniqueKeyViolationException
	{
		if (trackingAreaToSave == null )

		throw new CodingRuntimeException("Cannot save TrackingArea if null or get TrackingArea on null ID . ");
		
		if (!trackingAreaToSave.isValidated())
			throw new CodingRuntimeException("TrackingAreaVo not Validated");
		try
		{
			DomainFactory factory = getDomainFactory();
			TrackingArea trackingArea = TrackingAreaVoAssembler.extractTrackingArea(factory,trackingAreaToSave);

			factory.save(trackingArea);
		
			return TrackingAreaVoAssembler.create(trackingArea);
		}
		catch (UnqViolationUncheckedException e)
		{
			throw new UniqueKeyViolationException("This Tracking Area Configuration Already Exist!", e);
		}
		
	}
	
	public Boolean isStaleTrackingArea(TrackingAreaVo trackingArea)
	{
		if (trackingArea == null || trackingArea.getID_TrackingArea() == null)
		{
			throw new CodingRuntimeException("Cannot get TrackingConfigurationVo on null Id ");
		}
				
		DomainFactory factory = getDomainFactory();
		TrackingArea domainTrackingConfig = (TrackingArea) factory.getDomainObject(TrackingArea.class, trackingArea.getID_TrackingArea());
		
		if(domainTrackingConfig==null)
		{
			return true;
		}
		
		if (domainTrackingConfig.getVersion() > trackingArea.getVersion_TrackingArea())
		{
			return true;
		}
		
		return false;
	}

	public TrackingAreaVo getTrackingArea(TrackingAreaRefVo trackingArea)
	{
		if (trackingArea == null || trackingArea.getID_TrackingArea() == null)
		{
			throw new CodingRuntimeException("Cannot get TrackingAreaRefVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();

		TrackingArea domainTrackingArea = (TrackingArea) factory.getDomainObject(TrackingArea.class, trackingArea.getID_TrackingArea());
	
		return TrackingAreaVoAssembler.create(domainTrackingArea);
	}

	//wdev-16011
	public TrackingAreaCubiclesVo saveTrackingAreaCubicle(TrackingAreaCubiclesVo trackingAreaCubicle) throws StaleObjectException, UniqueKeyViolationException
	{
		if( trackingAreaCubicle == null)
			throw new CodingRuntimeException("TrackingAreaCubiclesVo is null");
		
		DomainFactory factory = getDomainFactory();
		
		if( trackingAreaCubicle != null && trackingAreaCubicle.getID_TrackingAreaCubicles() == null )
		{
			if( existTrackingAreaCubiclesForTrackingArea(trackingAreaCubicle.getTrackingArea().getID_TrackingArea(),factory) == true)
			{
				throw new StaleObjectException(null);
				
			}
		}
		
		TrackingAreaCubicles trackingAreaCub = TrackingAreaCubiclesVoAssembler.extractTrackingAreaCubicles(factory, trackingAreaCubicle);

		factory.save(trackingAreaCub);
				
		
		return TrackingAreaCubiclesVoAssembler.create(trackingAreaCub);
		
	}
	
	//wdev-16011
	public boolean existTrackingAreaCubiclesForTrackingArea(Integer trackAreaId,DomainFactory factory)
	{
		if( trackAreaId == null)
			return false;
		 
		StringBuffer hql = new StringBuffer();
		//List only Emergency Department
		hql.append(" select t1_1 from TrackingAreaCubicles as t1_1 left join t1_1.trackingArea as t2_1 where (t2_1.id = :trackareaid)"); 
		List<?> trackingList = factory.find(hql.toString(), new String[]{"trackareaid"}, new Object[]{trackAreaId});
		if( trackingList != null && trackingList.size() > 0)
		{
			TrackingAreaCubiclesVoCollection tempColl = TrackingAreaCubiclesVoAssembler.createTrackingAreaCubiclesVoCollectionFromTrackingAreaCubicles(trackingList);
			if( tempColl != null && tempColl.size() > 0)
				return true;
			else
				return false;
		}
		
		return false;
		
	}

	//wdev-16011
	public CubicleAllocationVoCollection getAllocationCubicle(TrackingCubicleRoomBedRefVo trackcubId)
	{
		if( trackcubId == null)
			return null;
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer();
		 
		hql.append(" select c1_1 from CubicleAllocation as c1_1 left join c1_1.cubicleRoomBed as t1_1 where (t1_1.id = :trackcubid)"); 
		List<?> trackingList = factory.find(hql.toString(), new String[]{"trackcubid"}, new Object[]{trackcubId.getID_TrackingCubicleRoomBed()});
		
		if( trackingList != null && trackingList.size() > 0)
		{
			CubicleAllocationVoCollection tempColl = CubicleAllocationVoAssembler.createCubicleAllocationVoCollectionFromCubicleAllocation(trackingList);
			return  tempColl;
		}
		
		
		
		return null;
	}
	
	

}
