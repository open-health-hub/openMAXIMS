//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.clinical.domain.PatientSummary;
import ims.clinical.domain.impl.PatientSummaryImpl;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.domain.objects.PatientDiagnosis;
import ims.core.clinical.domain.objects.PatientNotification;
import ims.core.configuration.domain.objects.AppForm;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.place.domain.objects.Location;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.NurseVo;
import ims.core.vo.PatientId;
import ims.core.vo.PatientIdCollection;
import ims.core.vo.PatientNotificationsFillerOnlyVo;
import ims.core.vo.PersonAddress;
import ims.core.vo.PersonName;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.EpisodeofCareShortVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.LocationLiteVoAssembler;
import ims.core.vo.domain.PatientNotificationsFillerOnlyVoAssembler;
import ims.core.vo.domain.PersonNameAssembler;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.PersonTitle;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.Specialty;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.lookups.LookupInstance;
import ims.emergency.configuration.domain.objects.AttendanceKPIConfig;
import ims.emergency.configuration.domain.objects.TrackingArea;
import ims.emergency.configuration.domain.objects.TrackingConfiguration;
import ims.emergency.domain.base.impl.BaseTrackingImpl;
import ims.emergency.domain.objects.EDTransfer;
import ims.emergency.domain.objects.Tracking;
import ims.emergency.vo.AppFormForTrackingVo;
import ims.emergency.vo.AttendanceKPIConfigVo;
import ims.emergency.vo.BedAvailabilityForTrackingVo;
import ims.emergency.vo.ColumnDetailVo;
import ims.emergency.vo.ColumnDetailVoCollection;
import ims.emergency.vo.CubicleAllocationForTrackingVo;
import ims.emergency.vo.DNWForTrackingVo;
import ims.emergency.vo.DNWStatusForTrackingVo;
import ims.emergency.vo.EDTransferVo;
import ims.emergency.vo.EmergencyAttendanceForTrackingVo;
import ims.emergency.vo.EmergencyEpisodeForTrackingVo;
import ims.emergency.vo.PatientDiagnosisForTrackingVo;
import ims.emergency.vo.PatientForTrackingVo;
import ims.emergency.vo.PatientProblemForTrackingVo;
import ims.emergency.vo.ReferToSpecTeamForTrackingVo;
import ims.emergency.vo.SeenByHCPVo;
import ims.emergency.vo.TrackingAreaForTrackingLiteVo;
import ims.emergency.vo.TrackingAreaForTrackingVo;
import ims.emergency.vo.TrackingAreaForTrackingVoCollection;
import ims.emergency.vo.TrackingAttendanceStatusForTrackingVo;
import ims.emergency.vo.TrackingConfigurationForTrackingVo;
import ims.emergency.vo.TrackingCountVo;
import ims.emergency.vo.TrackingCountVoCollection;
import ims.emergency.vo.TrackingCubicleRoomBedVo;
import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo;
import ims.emergency.vo.TrackingRefVo;
import ims.emergency.vo.TrackingSaveVo;
import ims.emergency.vo.TrackingVo;
import ims.emergency.vo.TrackingVoCollection;
import ims.emergency.vo.TrackingWithPartialAdmissionVo;
import ims.emergency.vo.TriageForTrackingVo;
import ims.emergency.vo.domain.AppFormForTrackingVoAssembler;
import ims.emergency.vo.domain.AttendanceKPIConfigVoAssembler;
import ims.emergency.vo.domain.EDTransferVoAssembler;
import ims.emergency.vo.domain.PatientDiagnosisForTrackingVoAssembler;
import ims.emergency.vo.domain.TrackingAreaForTrackingVoAssembler;
import ims.emergency.vo.domain.TrackingConfigurationForTrackingVoAssembler;
import ims.emergency.vo.domain.TrackingForClinicianWorklistAndTriageVoAssembler;
import ims.emergency.vo.domain.TrackingSaveVoAssembler;
import ims.emergency.vo.domain.TrackingVoAssembler;
import ims.emergency.vo.domain.TrackingWithPartialAdmissionVoAssembler;
import ims.emergency.vo.lookups.AttendanceOutcome;
import ims.emergency.vo.lookups.Cubicle;
import ims.emergency.vo.lookups.PresentingComplaint;
import ims.emergency.vo.lookups.ReferralSpecialtyConsultantOrTeam;
import ims.emergency.vo.lookups.TrackingAreaColumn;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.emergency.vo.lookups.TriagePriority;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;

public class TrackingImpl extends BaseTrackingImpl
{
	private static final long serialVersionUID = 1L;
	
	
	private enum TrackingColumn
	{ 
		ALERTS (TrackingAreaColumn.ALERTS, " (select count (alert.id) from PatientAlert as alert where ( alert.isRIE = false or alert.isRIE is null ) and alert.isCurrentlyActiveAlert = true and alert.patient.id = p.id) ", new String[] {" left join tr.patient as p "}),
		//WDEV-16816
		//SEEN_BY_HCP_MEDIC (TrackingAreaColumn.SEEN_BY_HCP, " mosMedic.name ", new String[] {" left join tr.seenBy as seenByHcp ", " left join seenByHcp.allocatedMedic as medic ", " left join medic.mos as mosMedic "}),
		//SEEN_BY_HCP_NURSE (TrackingAreaColumn.SEEN_BY_HCP, " mosNurse.name ", new String[] {" left join tr.seenBy as seenByHcp ", " left join seenByHcp.allocatedNurse as nurse ", " left join nurse.mos as mosNurse "}),
		SEEN_BY_HCP_MEDIC (TrackingAreaColumn.SEEN_BY_HCP, " mosMedic.name , mosNurse.name ", new String[] {" left join tr.seenBy as seenByHcp ", " left join seenByHcp.allocatedMedic as medic left join seenByHcp.allocatedNurse as nurse ", " left join medic.mos as mosMedic left join nurse.mos as mosNurse "}),
		SEEN_BY_HCP_DATE_TIME (TrackingAreaColumn.SEEN_BY_HCP_ALLOCATED_DATE_TIME, " seenByHcp.allocatedDateTime ", new String[] {" left join tr.seenBy as seenByHcp  "}),
		SEEN_BY_HCP_SEEN_DATE_TIME (TrackingAreaColumn.SEEN_BY_HCP_SEEN_DATE_TIME, " seenByHcp.seenDateTime ", new String[] {" left join tr.seenBy as seenByHcp  "}),
		
		/*//WDEV-16816
		ALLOCATED_HCP (TrackingAreaColumn.ALLOCATED_HCP, " mosMedic.name ", new String[] {" left join tr.currentAllocatedMedic as cam ", " left join cam.allocatedMedic as medic ", " left join medic.mos as mosMedic "}),
		ALLOCATED_HCP_DATE_TIME (TrackingAreaColumn.ALLOCATED_HCP_DATE_TIME, " cam.allocatedDateTime ", new String[] {" left join tr.currentAllocatedMedic as cam "}),
		ALLOCATED_HCP_SEEN_DATE_TIME (TrackingAreaColumn.ALLOCATED_HCP_SEEN_DATE_TIME, " cam.seenDateTime ", new String[] {" left join tr.currentAllocatedMedic as cam "}),
		ALLOCATED_NURSE (TrackingAreaColumn.ALLOCATED_NURSE, " mosNurse.name ", new String[] {" left join tr.currentAllocatedNurse as can ", " left join can.allocatedNurse as nurse ", " left join nurse.mos as mosNurse "}),
		ALLOCATED_NURSE_DATE_TIME (TrackingAreaColumn.ALLOCATED_NURSE_DATE_TIME, " can.allocatedDateTime ", new String[] {" left join tr.currentAllocatedNurse as can "}),
		ALLOCATED_NURSE_SEEN_DATE_TIME (TrackingAreaColumn.ALLOCATED_NURSE_SEEN_DATE_TIME, " can.seenDateTime ", new String[] {" left join tr.currentAllocatedNurse as can "}),
		*/
		ARRIVAL_DATE_TIME (TrackingAreaColumn.ARRIVAL_DATE_TIME, " attendance.arrivalDateTime ", new String[] {" left join tr.attendance as attendance "}),
		ATTENDANCE_ID (TrackingAreaColumn.ATTENDANCE_ID, " at.id ", new String[] {" left join tr.attendance as at "}),
		
		BED (TrackingAreaColumn.BED, " at.id ", new String[] {" left join tr.attendance as at "}),
		BED_STATUS (TrackingAreaColumn.BED_STATUS, " bedAvailability.availableDateTime, bedAvailability.awaitingDateTime ", new String[] {" left join tr.bedAvailability as bedAvailability "}),
		CHART_NUMBER (TrackingAreaColumn.CHART_NUMBER, " (select iChartNumber.value from Patient as pChartNumber left join pChartNumber.identifiers as iChartNumber left join iChartNumber.type as typeChartNumber where typeChartNumber.id = -44 and pChartNumber.id = p.id)  ", new String[] {" left join tr.patient as p "}),
		CLINICAL_IMAGING_RESULTS (TrackingAreaColumn.CLINICAL_IMAGING_RESULTS, " at.id ", new String[] {" left join tr.attendance as at "}),
		COMMENTS (TrackingAreaColumn.COMMENTS, " at.comments ", new String[] {" left join tr.attendance as at "}),
		
		CUBICLE (TrackingAreaColumn.CUBICLE, " cub.cubicleRoomBedName ", new String[] {" left join tr.currentCubicle as currentCubicle left join currentCubicle.cubicleRoomBed as cub "}),     //wdev-16011 
		
		DIAGNOSIS (TrackingAreaColumn.DIAGNOSIS, " (select MAX(patDiagnosis.id) from CsPrimaryDiagnosis as primaryDiag left join primaryDiag.diagnosis as patDiagnosis left join primaryDiag.careContext as primaryDiagCareContext  where primaryDiagCareContext.id = careContext.id ) ", new String[] {" left join tr.attendance as at left join at.careContext as careContext "}),//WDEV-16987
		DIAGNOSIS_REQUIRED (TrackingAreaColumn.DIAGNOSIS_REQUIRED, " (select MAX(patDiagnosis.id) from CsPrimaryDiagnosis as primaryDiag left join primaryDiag.diagnosis as patDiagnosis left join primaryDiag.careContext as primaryDiagCareContext  where primaryDiagCareContext.id = careContext.id ) ", new String[] {" left join tr.attendance as at left join at.careContext as careContext "}),//WDEV-16987
		DISCHARGE_DATE_AND_TIME (TrackingAreaColumn.DISCHARGE_DATE_AND_TIME, " at.dischargeDateTime ", new String[] {" left join tr.attendance as at "}),
		DISCHARGE_OUTCOME (TrackingAreaColumn.DISCHARGE_OUTCOME, " atOutcome ", new String[] {" left join tr.attendance as at ", " left join at.outcome as atOutcome"}),
		DNW (TrackingAreaColumn.DNA, " dnwStatus.calledAmount ", null),
		ED_SITE (TrackingAreaColumn.ED_SITE, " edLoc.name ", null),
		EPISODE_ID (TrackingAreaColumn.EPISODE_ID, " episode.id ", new String[] {" left join tr.episode as episode "}),
		HOSPITAL_NUMBER (TrackingAreaColumn.HOSPITAL_NUMBER, " (select max(iHospNumber.value) from Patient as pHospNumber left join pHospNumber.identifiers as iHospNumber left join iHospNumber.type as typeHospNumber where typeHospNumber.id = -150 and pHospNumber.id = p.id and iHospNumber.merged is null), (select count(iHospNumber.value) from Patient as pHospNumber left join pHospNumber.identifiers as iHospNumber left join iHospNumber.type as typeHospNumber where typeHospNumber.id = -150 and pHospNumber.id = p.id and iHospNumber.merged is null)  ", new String[] {" left join tr.patient as p "}),//wdev-17280
		INJURY_DATE_TIME (TrackingAreaColumn.INJURY_DATE_TIME, " episode.injuryDateTime ", new String[] {" left join tr.episode as episode "}),
		LAST_MOVEMENT_DATE_AND_TIME (TrackingAreaColumn.LAST_MOVEMENT_DATE_AND_TIME, " tr.lastMovementDateTime ", null),
		LENGTH_OF_STAY (TrackingAreaColumn.LENGTH_OF_STAY, ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime") ? "at.registrationDateTime" : "at.arrivalDateTime ", null),																//wdev-18299,wdev-18327																								
		LODGED_DATE_AND_TIME (TrackingAreaColumn.LODGED_DATE_AND_TIME, " at.id ", new String[] {" left join tr.attendance as at "}),
		LODGED_TYPE (TrackingAreaColumn.LODGED_TYPE, " at.id ", new String[] {" left join tr.attendance as at "}),
		NEW_RESULTS (TrackingAreaColumn.NEW_RESULTS, " patOcsNotification ", new String[] {" left join tr.patient as p ", " left join p.oCSNotification as patOcsNotification "}),	//WDEV-16987
		NHS_NUMBER (TrackingAreaColumn.NHS_NUMBER, " (select max(iNHSNumber.value) from Patient as pNHSNumber left join pNHSNumber.identifiers as iNHSNumber left join iNHSNumber.type as typeNHSNumber where typeNHSNumber.id = -9 and pNHSNumber.id = p.id and iNHSNumber.merged is null), (select max(iNHSNumber.value) from Patient as pNHSNumber left join pNHSNumber.identifiers as iNHSNumber left join iNHSNumber.type as typeNHSNumber where typeNHSNumber.id = -9 and pNHSNumber.id = p.id and iNHSNumber.merged is null and iNHSNumber.verified = 1), (select count(iNHSNumber.value) from Patient as pNHSNumber left join pNHSNumber.identifiers as iNHSNumber left join iNHSNumber.type as typeNHSNumber where typeNHSNumber.id = -9 and pNHSNumber.id = p.id and iNHSNumber.merged is null) ", new String[] {" left join tr.patient as p "}),
		OUTSTANDING_ORDERS (TrackingAreaColumn.OUTSTANDING_ORDERS, " at.id ", new String[] {" left join tr.attendance as at "}),
		PATHOLOGY_RESULTS (TrackingAreaColumn.PATHOLOGY_RESULTS, " at.id ", new String[] {" left join tr.attendance as at "}),
		
		
		PATIENT_ADDRESS_LINE_1 (TrackingAreaColumn.PATIENT_ADDRESS_LINE_1, " p.address.line1 ", new String[] {" left join tr.patient as p "}),
		PATIENT_AGE (TrackingAreaColumn.PATIENT_AGE, " p.dob ", new String[] {" left join tr.patient as p "}),
		PATIENT_CURRENT_STATUS (TrackingAreaColumn.PATIENT_CURRENT_STATUS, " trStatus ", new String[] {" left join tr.currentStatus as trCurrentStatus ", " left join trCurrentStatus.status as trStatus "}),
		PATIENT_DOB (TrackingAreaColumn.PATIENT_DOB, " p.dob ", new String[] {" left join tr.patient as p "}),
		PATIENT_DOD (TrackingAreaColumn.PATIENT_DOD, " p.dod ", new String[] {" left join tr.patient as p "}),
		PATIENT_FORENAME(TrackingAreaColumn.PATIENT_FORENAME, " p.name.forename ", new String[] {" left join tr.patient as p "}),
		PATIENT_GENDER (TrackingAreaColumn.PATIENT_GENDER, " pSex ", new String[] {" left join tr.patient as p ", " left join p.sex as pSex "}),
		PATIENT_SURNAME(TrackingAreaColumn.PATIENT_SURNAME, " p.name.surname ", new String[] {" left join tr.patient as p "}),
		PATIENT_TITLE (TrackingAreaColumn.PATIENT_TITLE, " pTitle ", new String[] {" left join tr.patient as p ", " left join p.name.title as pTitle "}),
		ADMISSION_WARD (TrackingAreaColumn.ADMISSION_WARD, " pWard ", new String[] {" left join tr.patient as p ", " left join p.ward as pWard "}),//WDEV-16987
		
		PATIENT_PREVIOUS_STATUS(TrackingAreaColumn.PATIENT_PREVIOUS_STATUS, " p.name.surname ", new String[] {" left join tr.patient as p "}),
		PRESENTING_COMPLAINT(TrackingAreaColumn.PRESENTING_COMPLAINT, " presentingComp ", new String[] {" left join tr.episode as episode ", " left join episode.presentingComplaint as presentingComp "}),
		PRESENTING_PROBLEM(TrackingAreaColumn.PRESENTING_PROBLEM, " problem.patientProblem ", new String[] {" left join tr.triageDetails as triageDetails ", " left join triageDetails.mainPresentingProblem as problem "}),
		PRIMARY_CARE(TrackingAreaColumn.PRIMARY_CARE, " at.isPrimaryCare ", new String[] {" left join tr.attendance as at "}),
		REFERRAL_DATE_AND_TIME(TrackingAreaColumn.REFERRAL_DATE_AND_TIME, " currentReferral.referredDateTime ", new String[] {" left join tr.currentReferral as currentReferral "}),
		REFERRAL_SEEN_DATE_AND_TIME(TrackingAreaColumn.REFERRAL_SEEN_DATE_AND_TIME, " currentReferral.seenDateTime ", new String[] {" left join tr.currentReferral as currentReferral "}),
		REFERRAL_SPECIALTY(TrackingAreaColumn.REFERRAL_SPECIALTY, " currentReferralSpecialty, teamCon ", new String[] {" left join tr.currentReferral as currentReferral ", " left join currentReferral.teamConsultant as teamCon ", " left join currentReferral.specialty as currentReferralSpecialty "}),
		REGISTRATION_DATE_TIME(TrackingAreaColumn.REGISTRATION_DATE_TIME, " at.registrationDateTime ", null),
		RISKS(TrackingAreaColumn.RISKS, " p.name.surname ", new String[] {" left join tr.patient as p "}),
		ROOM(TrackingAreaColumn.ROOM, " p.name.surname ", new String[] {" left join tr.patient as p "}),
		TRACKING_ZONE(TrackingAreaColumn.TRACKING_ZONE, " ta.areaDisplayName ", null),
		TRIAGE_DATE_AND_TIME(TrackingAreaColumn.TRIAGE_DATE_AND_TIME, " triageDetails.triageStartDateTime ", null),
		TRIAGE_PRIORITY(TrackingAreaColumn.TRIAGE_PRIORITY, " triagePriority ", null),
		UNKNOWN_PATIENT(TrackingAreaColumn.UNKNOWN_PATIENT, " at.isUnknownPatient ", new String[] {" left join tr.attendance as at "}),
		TRANSFER(TrackingAreaColumn.TRANSFER, " currentTransferRecord ", new String[] {" left join tr.currentTransferRecord as currentTransferRecord "});	//wdev-16867
		
		
		private TrackingAreaColumn index;
		private String hqlSelect;
		private String[] hqlJoin;
		
		TrackingColumn(TrackingAreaColumn index, String hqlSelect, String[] hqlJoin)
		{
			this.index = index;
			this.hqlSelect = hqlSelect;
			this.hqlJoin = hqlJoin;
		}
		
		public TrackingAreaColumn getIndex()
		{
			return index;
		}
		
		public String getHqlSelect()
		{
			return this.hqlSelect;
		}
		
		public String[] getHqlJoin()
		{
			return this.hqlJoin;
		}
		public void setHqlSelect(String hqlstr) //wdev-18327
		{
			this.hqlSelect = hqlstr;
		}
	}
	
	public TrackingCountVoCollection listTrackingAreas(ILocation location)
	{
		if(location == null)
			throw new CodingRuntimeException("Cannot list Tracking Area for a null EDLocation Id.");
		
		
		DomainFactory factory = getDomainFactory();
		String query = "select ta, (select count(tr1.patient.id) from Tracking as tr1 left join tr1.currentArea as ta1 where ta1.id = ta.id group by ta1) as patientNumber from TrackingConfiguration as trc left join trc.areas as ta where ta.eDLocation.id = :EDLocationId and ta.status.id = :ActiveStatus order by index(ta)";//order by upper(ta.areaDisplayName)";
		List<?> list = factory.find(query, new String[] {"EDLocationId", "ActiveStatus"}, new Object[] {location.getID(), PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if(list == null || list.size() == 0)
			return null;
		
		TrackingCountVoCollection coll = new TrackingCountVoCollection();
		
		for(int i=0; i<list.size(); i++)
		{
			Object[] record = (Object[]) list.get(i);
			
			if(record == null)
				continue;
			
			TrackingCountVo item = new TrackingCountVo();
			if(record[0] instanceof TrackingArea)
			{
				item.setTrackingArea(TrackingAreaForTrackingVoAssembler.create((TrackingArea) record[0]));
			}
			
			if(record[1] != null)
			{
				item.setNumberOfPatiens(((Long) record[1]).intValue());
			}
			else
			{
				item.setNumberOfPatiens(0);
			}
			
			coll.add(item);
		}
		
		return coll;
	}

	//WDEV-16987
	public TrackingVoCollection listTrackingPatients(TrackingAreaForTrackingVo trackingArea, HcpRefVo allocatedHcp, Boolean toBeSeen, Boolean unallocated, Boolean currentlyInDept, Boolean departed, Boolean currentAndDeparted) 
	{
		if(trackingArea == null || trackingArea.getID_TrackingArea() == null)
			throw new CodingRuntimeException("Cannot list Tracking Patients for a null Tracking Area Id.");
		
		if(trackingArea.getEDLocation() == null || trackingArea.getEDLocation().getID_Location() == null)
			throw new CodingRuntimeException("Cannot list Tracking Patients for a null EDLocation Id.");
		
		if(trackingArea.getColumns() == null || trackingArea.getColumns().size() == 0)
			return null;
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		StringBuilder hqlSelect = new StringBuilder("");
		StringBuilder hqlJoins = new StringBuilder(" from Tracking  as tr left join tr.eDLocation as edLoc left join tr.currentArea as ta left join tr.patient as p left join tr.attendance as at " +
				"left join at.careContext as careContext left join tr.episode as episode left join episode.episodeOfCare as episodeOfCare left join tr.currentDNW as currentDnw " +
				"left join currentDnw.currentStatus as dnwStatus left join tr.triageDetails as triageDetails left join triageDetails.currentTriagePriority as triagePriority " +
				"left join p.ward as pWard left join tr.currentStatus as trCurrentStatus left join trCurrentStatus.status as trStatus ");//WDEV-16987
		StringBuilder hqlConditions = new StringBuilder(" where edLoc.id = :EDLocId ");
		
		//WDEV-16987
		if(Boolean.TRUE.equals(currentlyInDept))
		{	
    		if (trackingArea.getIsOverallViewIsNotNull() && trackingArea.getIsOverallView().equals(true))
    		{
    			hqlConditions.append(" and ta.id is not null ");
    		}
    		else
    		{
    			hqlConditions.append(" and ta.id = :TrackingAreaId ");
    			paramNames.add("TrackingAreaId");
    			paramValues.add(trackingArea.getID_TrackingArea());
    		}
		}
		else if(Boolean.TRUE.equals(departed))
		{
			
			int hoursConfigFlag = ims.configuration.gen.ConfigFlag.UI.ED_SHOW_DISCHARGED_TRACKING_RECORDS_PERIOD.getValue() * -1;
			
			DateTime dateTimeTemp = (new DateTime()).addHours(hoursConfigFlag);
			//hqlConditions.append(" and (tr.isDischarged =1 and ( at.dischargeDateTime >= :DischargeDateTime or (trStatus.id=:DischargedStatus and pWard.displayInEDTracking = 1)))");
			hqlConditions.append(" and (tr.isDischarged =1 and ( at.dischargeDateTime=( select max(emergAtt.dischargeDateTime) from EmergencyAttendance as emergAtt where emergAtt.dischargeDateTime >= :DischargeDateTime and emergAtt.patient.id = p.id) or (trStatus.id=:DischargedStatus and pWard.displayInEDTracking = 1)))");//WDEV-18161
			paramNames.add("DischargeDateTime");
			paramValues.add(dateTimeTemp.getJavaDate());
			paramNames.add("DischargedStatus");
			paramValues.add(TrackingStatus.DISCHARGED.getID());
			
		}
		else if(Boolean.TRUE.equals(currentAndDeparted))
		{
			int hoursConfigFlag = ims.configuration.gen.ConfigFlag.UI.ED_SHOW_DISCHARGED_TRACKING_RECORDS_PERIOD.getValue() * -1;
			
			DateTime dateTimeTemp = (new DateTime()).addHours(hoursConfigFlag);
			//hqlConditions.append(" and ( ta.id is not null or at.dischargeDateTime >= :DischargeDateTime or (tr.isDischarged =1 and trStatus.id=:DischargedStatus and pWard.displayInEDTracking = 1) ) ");
			hqlConditions.append(" and ( ta.id is not null or ( at.dischargeDateTime=( select max(emergAtt.dischargeDateTime) from EmergencyAttendance as emergAtt where emergAtt.dischargeDateTime >= :DischargeDateTime and emergAtt.patient.id = p.id)) or (tr.isDischarged =1 and trStatus.id=:DischargedStatus and pWard.displayInEDTracking = 1) ) ");//WDEV-18161
			paramNames.add("DischargeDateTime");
			paramValues.add(dateTimeTemp.getJavaDate());paramNames.add("DischargedStatus");
			paramValues.add(TrackingStatus.DISCHARGED.getID());			
		}
		
		paramNames.add("EDLocId");
		paramValues.add(trackingArea.getEDLocation().getID_Location());
		
		//WDEV-16816
		if(allocatedHcp != null && allocatedHcp.getID_Hcp() != null)
		{
			DomainFactory factory = getDomainFactory();
			HcpLiteVo tempHcpLiteVo = HcpLiteVoAssembler.create((Hcp) factory.getDomainObject(Hcp.class, allocatedHcp.getID_Hcp()));
			
			String toBeSeenCondition = "";
			
			if(Boolean.TRUE.equals(toBeSeen))
			{
				toBeSeenCondition = " and tr.seenBy.seenDateTime is null ";
			}
			
			if (tempHcpLiteVo!=null && HcpDisType.MEDICAL.equals(tempHcpLiteVo.getHcpType()))
			{
				String[] allocatedHcpJoin = {" left join tr.seenBy as seenByHcp left join seenByHcp.allocatedMedic  as medic "};
			
			
    			for(int a=0; a<allocatedHcpJoin.length; a++)
    			{
    				if(hqlJoins.indexOf(allocatedHcpJoin[a]) < 0)
    				{
    					hqlJoins.append(allocatedHcpJoin[a]);
    				}
    			}
    			
    			hqlConditions.append(" and (medic.id = :HcpId " + toBeSeenCondition + ") ");
    			paramNames.add("HcpId");
    			paramValues.add(allocatedHcp.getID_Hcp());
			}
			else if (tempHcpLiteVo!=null && HcpDisType.NURSING.equals(tempHcpLiteVo.getHcpType()))
			{
				String[] allocatedNurseJoin = {" left join tr.seenBy as seenByHcp left join seenByHcp.allocatedNurse as nurse "};
			
    			for(int a=0; a<allocatedNurseJoin.length; a++)
    			{
    				if(hqlJoins.indexOf(allocatedNurseJoin[a]) < 0)
    				{
    					hqlJoins.append(allocatedNurseJoin[a]);
    				}
    			}
    			
    			hqlConditions.append(" and (nurse.id = :HcpId " + toBeSeenCondition + ") ");
    			paramNames.add("HcpId");
    			paramValues.add(allocatedHcp.getID_Hcp());
			}
			else//WDEV-17403
			{
				return null;
			}
			
		}
		else if(Boolean.TRUE.equals(unallocated))
		{
			String seenByHcpJoin = " left join tr.seenBy as seenByHcp ";
			if(hqlJoins.indexOf(seenByHcpJoin) < 0)
			{
				hqlJoins.append(seenByHcpJoin);
			}
			
			hqlConditions.append(" and (seenByHcp is null ) ");
		}
		
		for(ColumnDetailVo column : trackingArea.getColumns())
		{
			if(column == null)
				continue;
			
			TrackingAreaColumn trackingColumn = column.getColumn();
			TrackingColumn trackingColumnHql = getHqlConfigByIndex(trackingColumn);
			
			if(trackingColumnHql == null)
				continue;
			
			if(trackingColumnHql.getHqlSelect() != null && trackingColumnHql.getHqlSelect().length() > 0)
			{
				hqlSelect.append((hqlSelect.length() > 0 ? "," : "") + trackingColumnHql.getHqlSelect());
			}
			
			String[] hqlJoin = trackingColumnHql.getHqlJoin();
			
			if(hqlJoin != null)
			{
				for(int a=0; a<hqlJoin.length; a++)
				{	
					if(hqlJoin[a] == null)
						continue;
					
					if(hqlJoins.indexOf(hqlJoin[a]) < 0)
					{
						hqlJoins.append(hqlJoin[a]);
					}
				}
			}
		}
		
		long startTime = System.currentTimeMillis();
		
		String query = "select tr.id, tr.version, tr.isDischarged, p.id, p.version, episodeOfCare.id, episodeOfCare.version, careContext.id, careContext.version, dnwStatus.calledAmount, " +
				"triageDetails.triageStartDateTime, triageDetails.medicInterventionStartDateTime, at.registrationDateTime, triagePriority, at.dischargeDateTime, " + //wdev-17593
				"" + hqlSelect.append(hqlJoins.toString()).append(hqlConditions.toString()).toString();
		List<?> list = getDomainFactory().find(query, paramNames, paramValues);
		long endTime = System.currentTimeMillis();	
		
		if(list == null || list.size() == 0)
			return null;
		
		TrackingVoCollection trackingColl = new TrackingVoCollection();
		
		for(int x=0; x<list.size(); x++)
		{
			trackingColl.add(assembleTrackingRecord(list.get(x), trackingArea.getColumns()));
		}
		
		long miliseconds = endTime - startTime;
		
		System.out.println("Time : " + miliseconds);
		
		return trackingColl;
		
		
		/*
		long startTime = System.currentTimeMillis();
		StringBuilder hqlConditions = new StringBuilder(" select tr from Tracking as tr left join tr.eDLocation as edLoc left join tr.currentArea as ta where edLoc.id = :EDLocId and ta.id = :TrackingAreaId ");
		paramNames.add("EDLocId");
		paramValues.add(edLocation.getID());
		paramNames.add("TrackingAreaId");
		paramValues.add(trackingArea.getID_TrackingArea());
		List<?> list = getDomainFactory().find(hqlConditions.toString(), paramNames, paramValues);
		TrackingVoCollection listT = TrackingVoAssembler.createTrackingVoCollectionFromTracking(list);
		
		long endTime = System.currentTimeMillis();
		
		long miliseconds = endTime - startTime;
		
		System.out.println("Time : " + miliseconds);
		
		
		return listT;*/
	}

	private TrackingVo assembleTrackingRecord(Object record, ColumnDetailVoCollection columns) 
	{
		if(record == null)
			return null;
		
		Object[] items = (Object[]) record;
		
		if(items == null || items.length == 0)
			return null;
		
		AtomicReference<Object> recordIndexRef = new AtomicReference<Object>(0);
		
		TrackingVo tracking = assembleTracking(items, recordIndexRef);
		int recordIndex = (Integer) recordIndexRef.get();
		
		for(int i=0; i<columns.size(); i++, recordIndex++)
		{
			ColumnDetailVo column = columns.get(i);
			
			if(column == null)
				continue;
			
			Object item = (recordIndex < items.length) ? items[recordIndex] : null;
			
			//if(item == null)
			//	continue;
			
			if(TrackingAreaColumn.ALERTS.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, (Long) item, null, null, null, null, null, null, null, null,null,null, null, null, null));//WDEV-16987
			}
			//WDEV-16816
			else if(TrackingAreaColumn.SEEN_BY_HCP.equals(column.getColumn()))
			{
				recordIndex = recordIndex + 1;
				Object itemSecond = (columns.size() > 1 && items.length > recordIndex) ? items[recordIndex] : null;
				tracking.setSeenBy(assembleSeenBy(tracking.getSeenBy(), (ims.core.generic.domain.objects.PersonName) item, (ims.core.generic.domain.objects.PersonName) itemSecond ,null, null));
			}
			else if(TrackingAreaColumn.SEEN_BY_HCP_ALLOCATED_DATE_TIME.equals(column.getColumn()))
			{
				tracking.setSeenBy(assembleSeenBy(tracking.getSeenBy(), null , null, (java.util.Date) item, null));
			}
			else if(TrackingAreaColumn.SEEN_BY_HCP_SEEN_DATE_TIME.equals(column.getColumn()))
			{
				tracking.setSeenBy(assembleSeenBy(tracking.getSeenBy(), null, null , null, (java.util.Date) item));
			}
			/*//WDEV-16816
			else if(TrackingAreaColumn.ALLOCATED_HCP.equals(column.getColumn()))
			{
				tracking.setCurrentAllocatedMedic(assembleAllocatedMedic(tracking.getCurrentAllocatedMedic(), (ims.core.generic.domain.objects.PersonName) item, null, null));
			}
			else if(TrackingAreaColumn.ALLOCATED_HCP_DATE_TIME.equals(column.getColumn()))
			{
				tracking.setCurrentAllocatedMedic(assembleAllocatedMedic(tracking.getCurrentAllocatedMedic(), null, (java.util.Date) item, null));
			}
			else if(TrackingAreaColumn.ALLOCATED_HCP_SEEN_DATE_TIME.equals(column.getColumn()))
			{
				tracking.setCurrentAllocatedMedic(assembleAllocatedMedic(tracking.getCurrentAllocatedMedic(), null, null, (java.util.Date) item));
			}
			else if(TrackingAreaColumn.ALLOCATED_NURSE.equals(column.getColumn()))
			{
				tracking.setCurrentAllocatedNurse(assembleAllocatedNurse(tracking.getCurrentAllocatedNurse(), (ims.core.generic.domain.objects.PersonName) item, null, null));
			}
			else if(TrackingAreaColumn.ALLOCATED_NURSE_DATE_TIME.equals(column.getColumn()))
			{
				tracking.setCurrentAllocatedNurse(assembleAllocatedNurse(tracking.getCurrentAllocatedNurse(), null, (java.util.Date) item, null));
			}
			else if(TrackingAreaColumn.ALLOCATED_NURSE_SEEN_DATE_TIME.equals(column.getColumn()))
			{
				tracking.setCurrentAllocatedNurse(assembleAllocatedNurse(tracking.getCurrentAllocatedNurse(), null, null, (java.util.Date) item));
			}
			*/
			else if(TrackingAreaColumn.ARRIVAL_DATE_TIME.equals(column.getColumn()))
			{
				tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, (java.util.Date) item, null, null, null, null, null, null, null, null));
			}
			else if(TrackingAreaColumn.ATTENDANCE_ID.equals(column.getColumn()))
			{
				tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), (Integer) item, null, null, null, null, null, null, null, null, null));
			}
			else if(TrackingAreaColumn.BED_STATUS.equals(column.getColumn()))
			{
				recordIndex = recordIndex + 1;
				Object itemSecond = (columns.size() > 1 && items.length > recordIndex) ? items[recordIndex] : null;
				tracking.setBedAvailability(assembleBedAvailability(tracking.getBedAvailability(), (java.util.Date) item , (java.util.Date) itemSecond));
			}
			else if(TrackingAreaColumn.CHART_NUMBER.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, null, null, null, null, null, null, (String) item, null, null,null,null, null, null, null));//WDEV-16987
			}
			else if(TrackingAreaColumn.COMMENTS.equals(column.getColumn()))
			{
				tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, null, null, (String) item, null, null, null, null, null, null));
			}
			else if(TrackingAreaColumn.CUBICLE.equals(column.getColumn()))
			{
				tracking.setCurrentCubicle(assembleCubicleAllocation(tracking.getCurrentCubicle(), (String) item));	//wdev-16011
			}
			else if(TrackingAreaColumn.DISCHARGE_DATE_AND_TIME.equals(column.getColumn()))
			{
				tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, null, null, null, (java.util.Date) item, null, null, null, null, null));
			}
			else if(TrackingAreaColumn.DISCHARGE_OUTCOME.equals(column.getColumn()))
			{
				tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, null, null, null, null, (ims.domain.lookups.LookupInstance) item, null, null, null, null));
			}
			else if(TrackingAreaColumn.DNA.equals(column.getColumn()))
			{
				tracking.setCurrentDNW(assembleDNW(tracking.getCurrentDNW(), (Integer) item));
			}
			else if(TrackingAreaColumn.ED_SITE.equals(column.getColumn()))
			{
				tracking.setEDLocation(assembleLocation(tracking.getEDLocation(), (String) item));
			}
			else if(TrackingAreaColumn.EPISODE_ID.equals(column.getColumn()))
			{
				tracking.setEpisode(assembleEmergencyEpisode(tracking.getEpisode(), (Integer) item, null, null, null, null));
			}
			else if(TrackingAreaColumn.INJURY_DATE_TIME.equals(column.getColumn()))
			{
				tracking.setEpisode(assembleEmergencyEpisode(tracking.getEpisode(), null, (java.util.Date) item, null, null, null));
			}
			else if(TrackingAreaColumn.HOSPITAL_NUMBER.equals(column.getColumn()))
			{
				recordIndex = recordIndex + 1;
				Object itemSecond = (columns.size() > 1 && items.length > recordIndex) ? items[recordIndex] : null;
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, null, null, null, null, null, null, null,(String) item, null,null,null, (itemSecond instanceof Long ? (Long) itemSecond : null), null, null));//WDEV-16987
			}
			else if(TrackingAreaColumn.LAST_MOVEMENT_DATE_AND_TIME.equals(column.getColumn()))
			{
				if (item != null)
				{
					DateTime lastMovement = new DateTime((java.util.Date) item);
					tracking.setLastMovementDateInMinutes(calculateDateDiffInMinutes(new DateTime(), lastMovement));
				}
			}
			else if(TrackingAreaColumn.LENGTH_OF_STAY.equals(column.getColumn()))
			{	
				if( ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))	//wdev-18327
				{
					tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, null, (java.util.Date) item, null, null, null, null, null, null, null));		//wdev-18327
				}
				else
					tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, (java.util.Date) item, null, null, null, null, null, null, null, null));    //wdev-18299
			}
			else if(TrackingAreaColumn.NHS_NUMBER.equals(column.getColumn()))
			{
				recordIndex = recordIndex + 1;
				Object itemSecond = (columns.size() > 1 && items.length > recordIndex) ? items[recordIndex] : null;
				recordIndex = recordIndex + 1;
				Object itemThird = (columns.size() > 1 && items.length > recordIndex) ? items[recordIndex] : null;
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, null, null, null, null, null, null, null, null, (String) item,null,null, null, (String) itemSecond, (itemThird instanceof Long ? (Long) itemThird : null)));//WDEV-16987
			}
			else if(TrackingAreaColumn.PATIENT_ADDRESS_LINE_1.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, null, null, (String) item, null, null, null, null, null, null,null,null, null, null, null));//WDEV-16987
			}
			else if(TrackingAreaColumn.PATIENT_AGE.equals(column.getColumn()) || TrackingAreaColumn.PATIENT_DOB.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, null, (Integer) item, null, null, null, null, null, null, null,null,null, null, null, null));//WDEV-16987
			}
			else if(TrackingAreaColumn.PATIENT_CURRENT_STATUS.equals(column.getColumn()))
			{
				tracking.setCurrentStatus(assembleTrackingAttendanceStatus(tracking.getCurrentStatus(), (ims.domain.lookups.LookupInstance) item));
			}
			else if(TrackingAreaColumn.PATIENT_DOD.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, null, null, null, (java.util.Date) item, null, null, null, null, null,null,null, null, null, null));//WDEV-16987
			}
			else if(TrackingAreaColumn.PATIENT_FORENAME.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, (String) item, null, null, null, null, null, null, null, null, null,null,null, null, null, null));//WDEV-16987
			}
			else if(TrackingAreaColumn.PATIENT_GENDER.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, null, null, null, null, (ims.domain.lookups.LookupInstance) item, null, null, null, null,null,null, null, null, null));//WDEV-16987
			}
			else if(TrackingAreaColumn.PATIENT_SURNAME.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, (String) item, null, null, null, null, null, null, null, null, null, null,null,null, null, null, null));//WDEV-16987
			}
			else if(TrackingAreaColumn.PATIENT_TITLE.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, null, null, null, null, null, (ims.domain.lookups.LookupInstance) item, null, null, null,null,null, null, null, null));//WDEV-16987
			}
			else if(TrackingAreaColumn.PRESENTING_COMPLAINT.equals(column.getColumn()))
			{
				tracking.setEpisode(assembleEmergencyEpisode(tracking.getEpisode(), null, null, (ims.domain.lookups.LookupInstance) item, null, null));
			}
			else if(TrackingAreaColumn.PRESENTING_PROBLEM.equals(column.getColumn()))
			{
				tracking.setTriageDetails(assembleTriage(tracking.getTriageDetails(), null, (String) item, null, null));
			}
			else if(TrackingAreaColumn.PRIMARY_CARE.equals(column.getColumn()))
			{
				tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, null, null, null, null, null, (Boolean) item, null, null, null));
			}
			else if(TrackingAreaColumn.REFERRAL_DATE_AND_TIME.equals(column.getColumn()))
			{
				tracking.setCurrentReferral(assembleReferToSpecTeam(tracking.getCurrentReferral(), null, null, (java.util.Date) item, null));
			}
			else if(TrackingAreaColumn.REFERRAL_SEEN_DATE_AND_TIME.equals(column.getColumn()))
			{
				tracking.setCurrentReferral(assembleReferToSpecTeam(tracking.getCurrentReferral(), null, null, null, (java.util.Date) item));
			}
			else if(TrackingAreaColumn.REFERRAL_SPECIALTY.equals(column.getColumn()))
			{
				recordIndex = recordIndex + 1;
				Object itemSecond = (columns.size() > 1 && items.length > recordIndex) ? items[recordIndex] : null;
				tracking.setCurrentReferral(assembleReferToSpecTeam(tracking.getCurrentReferral(), (ims.domain.lookups.LookupInstance) item, (ims.domain.lookups.LookupInstance) itemSecond, null, null));
			}
			else if(TrackingAreaColumn.REGISTRATION_DATE_TIME.equals(column.getColumn()))
			{
				tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, null, (java.util.Date) item, null, null, null, null, null, null, null));
			}
			else if(TrackingAreaColumn.TRACKING_ZONE.equals(column.getColumn()))
			{
				tracking.setCurrentArea(assembletrackingArea(tracking.getCurrentArea(), (String) item));
			}
			else if(TrackingAreaColumn.TRIAGE_DATE_AND_TIME.equals(column.getColumn()))
			{
				tracking.setTriageDetails(assembleTriage(tracking.getTriageDetails(), (java.util.Date) item, null, null, null));
			}
			else if(TrackingAreaColumn.TRIAGE_PRIORITY.equals(column.getColumn()))
			{
				tracking.setTriageDetails(assembleTriage(tracking.getTriageDetails(), null, null, (ims.domain.lookups.LookupInstance) item, null));
			}
			else if(TrackingAreaColumn.UNKNOWN_PATIENT.equals(column.getColumn()))
			{
				tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, null, null, null, null, null, null, null, null, (Boolean) item));
			}
			//WDEV-16987
			else if(TrackingAreaColumn.ADMISSION_WARD.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, null, null, null, null, null, null, null, null, null, (Location)item,null, null, null, null));//WDEV-16987
			}
			else if(TrackingAreaColumn.DIAGNOSIS.equals(column.getColumn()))
			{
				tracking.setPrimaryDiagnosis(assemblePrimaryDiag((Integer) item));
			}
			else if(TrackingAreaColumn.DIAGNOSIS_REQUIRED.equals(column.getColumn()))
			{
				tracking.setPrimaryDiagnosis(assemblePrimaryDiag((Integer) item));
			}
			//WDEV-16987
			else if(TrackingAreaColumn.NEW_RESULTS.equals(column.getColumn()))
			{
				tracking.setPatient(assemblePatient(tracking.getPatient(), null, null, null, null, null, null, null, null, null, null, null, null, null, null,(PatientNotification)item, null, null, null));//WDEV-16987
			}
			//wdev-16867
			else if( TrackingAreaColumn.TRANSFER.equals(column.getColumn()))
			{
				tracking.setCurrentTransferRecord(assembleEDtransfer((EDTransfer)item));
			}
		}
		
		return tracking;
	}

	//WDEV-16987
	private PatientDiagnosisForTrackingVo assemblePrimaryDiag(Integer item)
	{
		if(item != null)
		{
			DomainFactory factory = getDomainFactory();
			return PatientDiagnosisForTrackingVoAssembler.create((PatientDiagnosis) factory.getDomainObject(PatientDiagnosis.class, item));
			
		}
		
		return null;
	}
	//wdev-16867
	private EDTransferVo assembleEDtransfer(EDTransfer item)
	{
		if(item != null)
		{
			//DomainFactory factory = getDomainFactory();
			//return EDTransferVoAssembler.create((EDTransfer) factory.getDomainObject(EDTransfer.class, item.getId()));
			return EDTransferVoAssembler.create(item);
			
		}
		
		return null;
	}
	
	//----------

	private TrackingAreaForTrackingLiteVo assembletrackingArea(TrackingAreaForTrackingLiteVo currentArea, String areaName) 
	{
		if(currentArea == null)
			currentArea = new TrackingAreaForTrackingLiteVo();
		
		if(areaName != null)
		{
			currentArea.setAreaDisplayName(areaName);
		}
		
		return currentArea;
	}

	private TrackingVo assembleTracking(Object[] items, AtomicReference<Object> recordIndexRef) 
	{
		int recordIndex = (Integer) recordIndexRef.get();
		
		Integer trackingId = (Integer) items[recordIndex++];
		Integer trackingVersion = (Integer) items[recordIndex++];
		Boolean trackingIsDischarged = (Boolean) items[recordIndex++];
		
		TrackingVo tracking = new TrackingVo(trackingId, trackingVersion);
		tracking.setIsDischarged(trackingIsDischarged);
		
		Integer patientId = (Integer) items[recordIndex++];
		Integer patientVersion = (Integer) items[recordIndex++];
		tracking.setPatient(assemblePatient(tracking.getPatient(), patientId, patientVersion, null, null, null, null, null, null, null, null, null, null, null,null,null, null, null, null));//WDEV-16987
		
		Integer episodeOfCareId = (Integer) items[recordIndex++];
		Integer episodeOfCareVersion = (Integer) items[recordIndex++];
		tracking.setEpisode(assembleEmergencyEpisode(tracking.getEpisode(), null, null, null, episodeOfCareId, episodeOfCareVersion));
		
		Integer careContextId = (Integer) items[recordIndex++];
		Integer careContextVersion = (Integer) items[recordIndex++];
		tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, null, null, null, null, null, null, careContextId, careContextVersion, null));
		
		Integer calledAmount = (Integer) items[recordIndex++];
		tracking.setCurrentDNW(assembleDNW(tracking.getCurrentDNW(), calledAmount));
		
		Date triageStartDate = (Date) items[recordIndex++];
		tracking.setTriageDetails(assembleTriage(tracking.getTriageDetails(), triageStartDate, null, null, null));
		
		Date medicStartDate = (Date) items[recordIndex++];
		tracking.setTriageDetails(assembleTriage(tracking.getTriageDetails(), null, null, null, medicStartDate));
		
		Date registrationDate = (Date) items[recordIndex++];
		tracking.setAttendance(assembleEmergencyAttendance(tracking.getAttendance(), null, null, registrationDate, null, null, null, null, null, null, null));
		
		ims.domain.lookups.LookupInstance triagePriority = (ims.domain.lookups.LookupInstance) items[recordIndex++];
		tracking.setTriageDetails(assembleTriage(tracking.getTriageDetails(), null, null, triagePriority, null));

		//wdev-17593
		Date dischargeDate = (Date) items[recordIndex++];
		tracking.getAttendance().setDischargeDateTime(dischargeDate != null ? new DateTime(dischargeDate) : null); 
		
		recordIndexRef.set(recordIndex);
		
		return tracking;
	}

	private DNWForTrackingVo assembleDNW(DNWForTrackingVo currentDNW, Integer calledAmount) 
	{
		if(currentDNW == null)
			currentDNW = new DNWForTrackingVo();
		
		if(calledAmount != null)
		{
			if(currentDNW.getCurrentStatus() == null)
			{
				currentDNW.setCurrentStatus(new DNWStatusForTrackingVo());
			}
			
			currentDNW.getCurrentStatus().setCalledAmount(calledAmount);
		}
		
		return currentDNW;
	}

	 
	private CubicleAllocationForTrackingVo assembleCubicleAllocation(CubicleAllocationForTrackingVo currentCubicle, String cubicle)		//wdev-16011
	{
		if(currentCubicle == null)
		{
			currentCubicle = new CubicleAllocationForTrackingVo();
		}
		
		if(cubicle != null)
		{
			
			currentCubicle.setCubicleRoomBed(assembleCubicleRoomBed(cubicle));   //wdev-16011
		}
		
		return currentCubicle;
	}
	//wdev-16011
	private TrackingCubicleRoomBedVo assembleCubicleRoomBed(String cubicle)
	{
		if(cubicle == null)
			return null;
		
		TrackingCubicleRoomBedVo tempVo = new TrackingCubicleRoomBedVo();
		tempVo.setCubicleRoomBedName(cubicle);
		
		return tempVo;
		
	}

	private Cubicle assembleCubicleLookupItem(LookupInstance cubicle) 
	{
		if(cubicle == null)
			return null;
		
		ims.framework.utils.ImagePath img = null;
		ims.framework.utils.Color color = null;		
		img = null;
		
		if (cubicle.getImage() != null) 
		{
			img = new ims.framework.utils.ImagePath(cubicle.getImage().getImageId(), cubicle.getImage().getImagePath());
		}
		
		color = cubicle.getColor();
		
		if (color != null) 
			color.getValue();

		ims.emergency.vo.lookups.Cubicle voLookup = new ims.emergency.vo.lookups.Cubicle(cubicle.getId(),cubicle.getText(), cubicle.isActive(), null, img, color);
		ims.emergency.vo.lookups.Cubicle parentVoLookup = voLookup;
		ims.domain.lookups.LookupInstance parent = cubicle.getParent();
		
		while (parent != null)
		{
			if (parent.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(parent.getImage().getImageId(), parent.getImage().getImagePath() );
			}
			else 
			{
				img = null;
			}
			
			color = parent.getColor();
			
			if (color != null) 
				color.getValue();
			
			parentVoLookup.setParent(new ims.emergency.vo.lookups.Cubicle(parent.getId(),parent.getText(), parent.isActive(), null, img, color));
			parentVoLookup = parentVoLookup.getParent();
			parent = parent.getParent();
		}	
		
		return voLookup;
	}

	private BedAvailabilityForTrackingVo assembleBedAvailability(BedAvailabilityForTrackingVo bedAvailability, Date availableDateTime, Date awaitingDateTime) 
	{
		if(bedAvailability == null)
		{
			bedAvailability = new BedAvailabilityForTrackingVo();
		}
		
		if(availableDateTime != null)
		{
			bedAvailability.setAvailableDateTime(new DateTime(availableDateTime));
		}
		
		if(awaitingDateTime != null)
		{
			bedAvailability.setAwaitingDateTime(new DateTime(awaitingDateTime));
		}
		
		return bedAvailability;
	}

	private TriageForTrackingVo assembleTriage(TriageForTrackingVo triageDetails, Date triageStartDate, String patientProblem, LookupInstance triagePriority, Date medicStartDate) 
	{
		if(triageDetails == null)
			triageDetails = new TriageForTrackingVo();
		
		if(triageStartDate != null)
		{
			triageDetails.setTriageStartDateTime(new DateTime(triageStartDate));
		}
		
		if(patientProblem != null)
		{
			if(triageDetails.getMainPresentingProblem() == null)
			{
				triageDetails.setMainPresentingProblem(new PatientProblemForTrackingVo());
			}
			
			triageDetails.getMainPresentingProblem().setPatientProblem(patientProblem);
		}
		
		if(triagePriority != null)
		{
			triageDetails.setCurrentTriagePriority(assembleTriagePriorityLookupItem(triagePriority));
		}
		
		if(medicStartDate != null)
		{
			triageDetails.setMedicInterventionStartDateTime(new DateTime(medicStartDate));
		}
		
		return triageDetails;
	}

	private TriagePriority assembleTriagePriorityLookupItem(LookupInstance triagePriority) 
	{
		if(triagePriority == null)
			return null;
		
		ims.framework.utils.ImagePath img = null;
		ims.framework.utils.Color color = null;		
		img = null;
		
		if (triagePriority.getImage() != null) 
		{
			img = new ims.framework.utils.ImagePath(triagePriority.getImage().getImageId(), triagePriority.getImage().getImagePath());
		}
		
		color = triagePriority.getColor();
		
		if (color != null) 
			color.getValue();

		ims.emergency.vo.lookups.TriagePriority voLookup = new ims.emergency.vo.lookups.TriagePriority(triagePriority.getId(),triagePriority.getText(), triagePriority.isActive(), null, img, color);
		ims.emergency.vo.lookups.TriagePriority parentVoLookup = voLookup;
		ims.domain.lookups.LookupInstance parent = triagePriority.getParent();
		
		while (parent != null)
		{
			if (parent.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(parent.getImage().getImageId(), parent.getImage().getImagePath() );
			}
			else 
			{
				img = null;
			}
			
			color = parent.getColor();
			
			if (color != null) 
				color.getValue();
			
			parentVoLookup.setParent(new ims.emergency.vo.lookups.TriagePriority(parent.getId(),parent.getText(), parent.isActive(), null, img, color));
			parentVoLookup = parentVoLookup.getParent();
			parent = parent.getParent();
		}
		
		return voLookup;
	}

	private LocationLiteVo assembleLocation(LocationLiteVo edLocation,	String name) 
	{
		if(edLocation == null)
		{
			edLocation = new LocationLiteVo();
		}
		
		if(name != null)
		{
			edLocation.setName(name);
		}
		
		return edLocation;
	}

	private ReferToSpecTeamForTrackingVo assembleReferToSpecTeam(ReferToSpecTeamForTrackingVo currentReferral, LookupInstance specialty, LookupInstance teamConsultant, Date referredDate, Date referredSeenDate) 
	{
		if(currentReferral == null)
		{
			currentReferral = new ReferToSpecTeamForTrackingVo();
		}
		
		if(specialty != null)
		{
			currentReferral.setSpecialty(assembleReferalSpecialty(specialty));
		}
		
		if(teamConsultant != null)
		{
			currentReferral.setTeamConsultant(assembleTeamConsultant(teamConsultant));
		}
		
		if(referredDate != null)
		{
			currentReferral.setReferredDateTime(new DateTime(referredDate));
		}

		if(referredSeenDate != null)
		{
			currentReferral.setSeenDateTime(new DateTime(referredSeenDate));
		}
		
		return currentReferral;
	}

	private ReferralSpecialtyConsultantOrTeam assembleTeamConsultant(LookupInstance teamConsultant) 
	{
		if(teamConsultant == null)
			return null;
		
		ims.framework.utils.ImagePath img = null;
		ims.framework.utils.Color color = null;		
		img = null;
		
		if (teamConsultant.getImage() != null) 
		{
			img = new ims.framework.utils.ImagePath(teamConsultant.getImage().getImageId(), teamConsultant.getImage().getImagePath());
		}
		
		color = teamConsultant.getColor();
		
		if (color != null) 
			color.getValue();

		ims.emergency.vo.lookups.ReferralSpecialtyConsultantOrTeam voLookup = new ims.emergency.vo.lookups.ReferralSpecialtyConsultantOrTeam(teamConsultant.getId(),teamConsultant.getText(), teamConsultant.isActive(), null, img, color);
		ims.emergency.vo.lookups.ReferralSpecialtyConsultantOrTeam parentVoLookup = voLookup;
		ims.domain.lookups.LookupInstance parent = teamConsultant.getParent();
		
		while (parent != null)
		{
			if (parent.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(parent.getImage().getImageId(), parent.getImage().getImagePath() );
			}
			else 
			{
				img = null;
			}
			color = parent.getColor();
			if (color != null) 
				color.getValue();
			
			parentVoLookup.setParent(new ims.emergency.vo.lookups.ReferralSpecialtyConsultantOrTeam(parent.getId(),parent.getText(), parent.isActive(), null, img, color));
			parentVoLookup = parentVoLookup.getParent();
			parent = parent.getParent();
		}	
		
		return voLookup;
	}

	private Specialty assembleReferalSpecialty(LookupInstance specialty) 
	{
		if(specialty == null)
			return null;
		
		ims.framework.utils.ImagePath img = null;
		ims.framework.utils.Color color = null;		
		img = null;
		
		if (specialty.getImage() != null) 
		{
			img = new ims.framework.utils.ImagePath(specialty.getImage().getImageId(), specialty.getImage().getImagePath());
		}
		
		color = specialty.getColor();
		
		if (color != null) 
			color.getValue();

		ims.core.vo.lookups.Specialty voLookup = new ims.core.vo.lookups.Specialty(specialty.getId(),specialty.getText(), specialty.isActive(), null, img, color);
		ims.core.vo.lookups.Specialty parentVoLookup = voLookup;
		ims.domain.lookups.LookupInstance parent = specialty.getParent();
		
		while (parent != null)
		{
			if (parent.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(parent.getImage().getImageId(), parent.getImage().getImagePath() );
			}
			else 
			{
				img = null;
			}
			
			color = parent.getColor();
			
			if (color != null) 
				color.getValue();
			
			parentVoLookup.setParent(new ims.core.vo.lookups.Specialty(parent.getId(),parent.getText(), parent.isActive(), null, img, color));
			parentVoLookup = parentVoLookup.getParent();
			parent = parent.getParent();
		}	
		
		return voLookup;
	}

	private EmergencyEpisodeForTrackingVo assembleEmergencyEpisode(EmergencyEpisodeForTrackingVo episode, Integer episodeId, java.util.Date injuryDate, LookupInstance presentingComplaint, Integer episodeOfCareId, Integer episodeOfCareVersion) 
	{
		if(episode == null)
			episode = new EmergencyEpisodeForTrackingVo();
		
		if(episodeId != null)
		{
			episode.setID_EmergencyEpisode(episodeId);
		}
		
		if(injuryDate != null)
		{
			episode.setInjuryDateTime(new DateTime(injuryDate));
		}
		
		if(presentingComplaint != null)
		{
			episode.setPresentingComplaint(assemblePresentingComplaintLookupItem(presentingComplaint));
		}
		
		if(episode.getEpisodeOfCare() == null && episodeOfCareId != null || episodeOfCareVersion != null)
		{
			episode.setEpisodeOfCare(new EpisodeOfCareRefVo(episodeOfCareId, episodeOfCareVersion));
		}
		
		return episode;
	}

	private PresentingComplaint assemblePresentingComplaintLookupItem(LookupInstance presentingComplaint) 
	{
		if(presentingComplaint == null)
			return null;
		
		ims.framework.utils.ImagePath img = null;
		ims.framework.utils.Color color = null;		
		img = null;
		
		if (presentingComplaint.getImage() != null) 
		{
			img = new ims.framework.utils.ImagePath(presentingComplaint.getImage().getImageId(), presentingComplaint.getImage().getImagePath());
		}
		
		color = presentingComplaint.getColor();
		
		if (color != null) 
			color.getValue();

		ims.emergency.vo.lookups.PresentingComplaint voLookup = new ims.emergency.vo.lookups.PresentingComplaint(presentingComplaint.getId(),presentingComplaint.getText(), presentingComplaint.isActive(), null, img, color);
		ims.emergency.vo.lookups.PresentingComplaint parentVoLookup = voLookup;
		ims.domain.lookups.LookupInstance parent = presentingComplaint.getParent();
		
		while (parent != null)
		{
			if (parent.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(parent.getImage().getImageId(), parent.getImage().getImagePath() );
			}
			else 
			{
				img = null;
			}
			
			color = parent.getColor();
			
			if (color != null) 
				color.getValue();
			
			parentVoLookup.setParent(new ims.emergency.vo.lookups.PresentingComplaint(parent.getId(),parent.getText(), parent.isActive(), null, img, color));
			parentVoLookup = parentVoLookup.getParent();
			parent = parent.getParent();
		}	
		
		return voLookup;
	}

	private TrackingAttendanceStatusForTrackingVo assembleTrackingAttendanceStatus(TrackingAttendanceStatusForTrackingVo currentStatus, ims.domain.lookups.LookupInstance status) 
	{
		if(currentStatus == null)
			currentStatus =  new TrackingAttendanceStatusForTrackingVo();
		
		if(status != null)
		{
			ims.framework.utils.ImagePath img = null;
			ims.framework.utils.Color color = null;		
			img = null;
			
			if (status.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(status.getImage().getImageId(), status.getImage().getImagePath());
			}
			
			color = status.getColor();
			
			if (color != null) 
				color.getValue();

			ims.emergency.vo.lookups.TrackingStatus voLookup = new ims.emergency.vo.lookups.TrackingStatus(status.getId(),status.getText(), status.isActive(), null, img, color);
			ims.emergency.vo.lookups.TrackingStatus parentVoLookup = voLookup;
			ims.domain.lookups.LookupInstance parent = status.getParent();
			
			while (parent != null)
			{
				if (parent.getImage() != null) 
				{
					img = new ims.framework.utils.ImagePath(parent.getImage().getImageId(), parent.getImage().getImagePath() );
				}
				else 
				{
					img = null;
				}
				color = parent.getColor();
				
    			if (color != null) 
    				color.getValue();
    			
				parentVoLookup.setParent(new ims.emergency.vo.lookups.TrackingStatus(parent.getId(),parent.getText(), parent.isActive(), null, img, color));
				parentVoLookup = parentVoLookup.getParent();
				parent = parent.getParent();
			}
			
			currentStatus.setStatus(voLookup);
		}
		
		return currentStatus;
	}

	//WDEV-16816
	/*
	private AllocatedNurseForTrackingVo assembleAllocatedNurse(AllocatedNurseForTrackingVo currentAllocatedNurse,	ims.core.generic.domain.objects.PersonName hcpName, Date allocatedNurseDate, Date allocatedNurseSeenDate) 
	{
		if(currentAllocatedNurse == null)
		{
			currentAllocatedNurse = new AllocatedNurseForTrackingVo();
		}
		
		if(hcpName != null)
		{
			if(currentAllocatedNurse.getAllocatedNurse() == null)
			{
				currentAllocatedNurse.setAllocatedNurse(new HcpLiteVo());
			}
			
			if(currentAllocatedNurse.getAllocatedNurse().getMos() == null)
			{
				currentAllocatedNurse.getAllocatedNurse().setMos(new MemberOfStaffLiteVo());
			}
			
			currentAllocatedNurse.getAllocatedNurse().getMos().setName(PersonNameAssembler.create(hcpName));
		}
		
		if(allocatedNurseDate != null)
		{
			currentAllocatedNurse.setAllocatedDateTime(new DateTime(allocatedNurseDate));
		}
		
		if(allocatedNurseSeenDate != null)
		{
			currentAllocatedNurse.setSeenDateTime(new DateTime(allocatedNurseSeenDate));
		}
		
		return currentAllocatedNurse;
	}

	private AllocatedMedicForTrackingVo assembleAllocatedMedic(AllocatedMedicForTrackingVo currentAllocatedMedic, ims.core.generic.domain.objects.PersonName hcpName, Date allocatedHcpDate, Date allocatedHcpSeenDate) 
	{
		if(currentAllocatedMedic == null)
		{
			currentAllocatedMedic = new AllocatedMedicForTrackingVo();
		}
		
		if(hcpName != null)
		{
			if(currentAllocatedMedic.getAllocatedMedic() == null)
			{
				currentAllocatedMedic.setAllocatedMedic(new MedicLiteVo());
			}
			
			if(currentAllocatedMedic.getAllocatedMedic().getMos() == null)
			{
				currentAllocatedMedic.getAllocatedMedic().setMos(new MemberOfStaffLiteVo());
			}
			
			currentAllocatedMedic.getAllocatedMedic().getMos().setName(PersonNameAssembler.create(hcpName));
		}
		
		if(allocatedHcpDate != null)
		{
			currentAllocatedMedic.setAllocatedDateTime(new DateTime(allocatedHcpDate));
		}
		
		if(allocatedHcpSeenDate != null)
		{
			currentAllocatedMedic.setSeenDateTime(new DateTime(allocatedHcpSeenDate));
		}
		
		return currentAllocatedMedic;
	}
	*/
	//WDEV-16816
	private SeenByHCPVo assembleSeenBy(SeenByHCPVo seenByHcp, ims.core.generic.domain.objects.PersonName hcpNameMedic,ims.core.generic.domain.objects.PersonName hcpNameNurse, Date allocatedHcpDate, Date seenByHcpSeenDate) 
	{
		if(seenByHcp == null)
		{
			seenByHcp = new SeenByHCPVo();
		}
		
		if(hcpNameMedic != null)
		{
			if(seenByHcp.getAllocatedMedic() == null)
			{
				seenByHcp.setAllocatedMedic(new MedicVo());
			}
			
			if(seenByHcp.getAllocatedMedic().getMos() == null)
			{
				seenByHcp.getAllocatedMedic().setMos(new MemberOfStaffShortVo());
			}		
			
			seenByHcp.getAllocatedMedic().getMos().setName(PersonNameAssembler.create(hcpNameMedic));
		}
		
		if(hcpNameNurse != null)
		{
			if(seenByHcp.getAllocatedNurse() == null)
			{
				seenByHcp.setAllocatedNurse(new NurseVo());
			}
			
			if(seenByHcp.getAllocatedNurse().getMos() == null)
			{
				seenByHcp.getAllocatedNurse().setMos(new MemberOfStaffShortVo());
			}		
			
			seenByHcp.getAllocatedNurse().getMos().setName(PersonNameAssembler.create(hcpNameNurse));
		}
		
		
		if(allocatedHcpDate != null)
		{
			seenByHcp.setAllocatedDateTime(new DateTime(allocatedHcpDate));
		}
		
		if(seenByHcpSeenDate != null)
		{
			seenByHcp.setSeenDateTime(new DateTime(seenByHcpSeenDate));
		}
		
		return seenByHcp;
	}
	
	private PatientForTrackingVo assemblePatient(PatientForTrackingVo patient, Integer patientId, Integer patientVersion, String surname, String forename, Long hasAlerts, Integer dob, String line1, java.util.Date dod, ims.domain.lookups.LookupInstance sex, ims.domain.lookups.LookupInstance title, String chartNumber, String hospNumber, String nhsNumber, Location ward, PatientNotification patOcsNotification, Long noOfHospitalNumbers, String verifiedNHSNumber, Long noOfNHSNumbers) //WDEV-16987 
	{
		if(patient == null)
		{
			patient = new PatientForTrackingVo(patientId, patientVersion);
		}
		
		if(surname != null || forename != null || title != null)
		{
			if(patient.getName() == null)
			{
				patient.setName(new PersonName());
			}
			
			if(surname != null)
			{
				patient.getName().setSurname(surname);
			}
			
			if(forename != null)
			{
				patient.getName().setForename(forename);
			}
			
			if(title != null)
			{
				patient.getName().setTitle(assembleTitleLookupItem(title));
			}
		}
		
		patient.setHasAlerts(hasAlerts != null && hasAlerts > 0 ? Boolean.TRUE : Boolean.FALSE);
		
		if(dob != null)
		{
			patient.setDob(new ims.framework.utils.PartialDate(dob));
			
			if ( ! (patient.getDob().getDay() == null
					&& patient.getDob().getMonth() == null
					&& patient.getDob().getYear() == 0))
				patient.calculateAge();
		}
		
		if(line1 != null)
		{
			if(patient.getAddress() == null)
			{
				patient.setAddress(new PersonAddress());
			}
			
			patient.getAddress().setLine1(line1);
		}
		
		if(dod != null)
		{
			patient.setDod(new ims.framework.utils.Date(dod));
		}
		
		if(sex != null)
		{
			patient.setSex(assembleSexLookupItem(sex));
		}
		
		if(chartNumber != null || hospNumber != null || nhsNumber != null)
		{
			if(patient.getIdentifiers() == null)
			{
				patient.setIdentifiers(new PatientIdCollection());
			}
			
			PatientId identifierVo = new PatientId();
			
			if(chartNumber != null)
			{
				identifierVo.setType(PatIdType.CHARTNUM);
				identifierVo.setValue(chartNumber);
			}
			else if(hospNumber != null)
			{
				identifierVo.setType(PatIdType.HOSPNUM);
				identifierVo.setValue(hospNumber);
			}
			else if(nhsNumber != null || verifiedNHSNumber != null)
			{
				identifierVo.setType(PatIdType.NHSN);
				if(verifiedNHSNumber != null)
				{
					identifierVo.setValue(verifiedNHSNumber);
				}
				else
				{
					identifierVo.setValue(nhsNumber);
				}
			}
			
			patient.getIdentifiers().add(identifierVo);
		}
		
		//WDEV-16987
		if (ward!=null)
		{
			LocationLiteVo wardLocLiteVo = LocationLiteVoAssembler.create((Location)ward);
			patient.setWard(wardLocLiteVo);
		}
		
		if (patOcsNotification!=null)
		{
			PatientNotificationsFillerOnlyVo patNotifVo = PatientNotificationsFillerOnlyVoAssembler.create((PatientNotification)patOcsNotification);
			patient.setOCSNotification(patNotifVo);
		}
		
		if(noOfHospitalNumbers != null)
		{
			patient.setNoOfHospNumbers(noOfHospitalNumbers.intValue());
		}
		
		if(noOfNHSNumbers != null)
		{
			patient.setNoOfNHSNumbers(noOfNHSNumbers.intValue());
		}
		
		return patient;
	}

	private PersonTitle assembleTitleLookupItem(LookupInstance title) 
	{
		if(title == null)
			return null;
		
		ims.framework.utils.ImagePath img = null;
		ims.framework.utils.Color color = null;		
		img = null;
		
		if (title.getImage() != null) 
		{
			img = new ims.framework.utils.ImagePath(title.getImage().getImageId(), title.getImage().getImagePath());
		}
		color = title.getColor();
		
		if (color != null) 
			color.getValue();

		ims.core.vo.lookups.PersonTitle voLookup = new ims.core.vo.lookups.PersonTitle(title.getId(),title.getText(), title.isActive(), null, img, color);
		ims.core.vo.lookups.PersonTitle parentVoLookup = voLookup;
		ims.domain.lookups.LookupInstance parent = title.getParent();
		
		while (parent != null)
		{
			if (parent.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(parent.getImage().getImageId(), parent.getImage().getImagePath() );
			}
			else 
			{
				img = null;
			}
			
			color = parent.getColor();
			
			if (color != null) 
				color.getValue();
			
			parentVoLookup.setParent(new ims.core.vo.lookups.PersonTitle(parent.getId(),parent.getText(), parent.isActive(), null, img, color));
			parentVoLookup = parentVoLookup.getParent();
			parent = parent.getParent();
		}			
		
		return voLookup;
	}

	private ims.core.vo.lookups.Sex assembleSexLookupItem(ims.domain.lookups.LookupInstance sex) 
	{
		if(sex == null)
			return null;
		
		ims.framework.utils.ImagePath img = null;
		ims.framework.utils.Color color = null;		
		img = null;
		
		if (sex.getImage() != null) 
		{
			img = new ims.framework.utils.ImagePath(sex.getImage().getImageId(), sex.getImage().getImagePath());
		}
		
		color = sex.getColor();
		
		if (color != null) 
			color.getValue();

		ims.core.vo.lookups.Sex voLookup = new ims.core.vo.lookups.Sex(sex.getId(),sex.getText(), sex.isActive(), null, img, color);
		ims.core.vo.lookups.Sex parentVoLookup = voLookup;
		ims.domain.lookups.LookupInstance parent = sex.getParent();
		
		while (parent != null)
		{
			if (parent.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(parent.getImage().getImageId(), parent.getImage().getImagePath() );
			}
			else 
			{
				img = null;
			}
			
			color = parent.getColor();
			if (color != null) 
				color.getValue();
			
			parentVoLookup.setParent(new ims.core.vo.lookups.Sex(parent.getId(),parent.getText(), parent.isActive(), null, img, color));
			parentVoLookup = parentVoLookup.getParent();
			parent = parent.getParent();
		}
		
		return voLookup;
	}

	private EmergencyAttendanceForTrackingVo assembleEmergencyAttendance(EmergencyAttendanceForTrackingVo attendance, Integer attendanceId, java.util.Date arrivalDate, Date registrationDateTime, String comments, Date dischargeDateTime, LookupInstance outcome, Boolean isPrimaryCare, Integer careContextId, Integer careContextVersion, Boolean isPatientUnknown) 
	{
		if(attendance == null)
			attendance = new EmergencyAttendanceForTrackingVo();
		
		if(attendanceId != null)
		{
			attendance.setID_EmergencyAttendance(attendanceId);
		}
		
		if(arrivalDate != null)
		{
			attendance.setArrivalDateTime(new DateTime(arrivalDate));
			
			//wdev-18299
			int lenghtOsStay = 0;
			if(attendance.getDischargeDateTimeIsNotNull()) //wdev-17593
				lenghtOsStay = calculateDateDiffInMinutes(attendance.getDischargeDateTime(), attendance.getArrivalDateTime());
			else	
				lenghtOsStay = calculateDateDiffInMinutes(new DateTime(), attendance.getArrivalDateTime());
			
			attendance.setLengthOfStay(lenghtOsStay);
		}
		
		if(registrationDateTime != null)
		{
			attendance.setRegistrationDateTime(new DateTime(registrationDateTime));
			//wdev-18327
			int lenghtOsStay = 0;
			if(attendance.getDischargeDateTimeIsNotNull()) //wdev-17593
				lenghtOsStay = calculateDateDiffInMinutes(attendance.getDischargeDateTime(), attendance.getRegistrationDateTime());
			else	
				lenghtOsStay = calculateDateDiffInMinutes(new DateTime(), attendance.getRegistrationDateTime());
			
			attendance.setLengthOfStay(lenghtOsStay);
			
		}
		
		if(comments != null)
		{
			attendance.setComments(comments);
		}
		
		if(dischargeDateTime != null)
		{
			attendance.setDischargeDateTime(new DateTime(dischargeDateTime));
		}
		
		if(outcome != null)
		{
			attendance.setOutcome(assembleOutcomeLookupItem(outcome));
		}
		
		if(attendance.getCareContext() == null && careContextId != null && careContextVersion != null)
		{
			attendance.setCareContext(new CareContextRefVo(careContextId, careContextVersion));
		}
		
		if(isPrimaryCare != null)
		{
			attendance.setIsPrimaryCare(isPrimaryCare);
		}
		
		if(isPatientUnknown != null)
		{
			attendance.setIsUnknownPatient(isPatientUnknown);
		}
		
		return attendance;
	}

	private int calculateDateDiffInMinutes(DateTime currentTime, DateTime registrationDateTime) 
	{
		long currentTimeInMillis = currentTime.getJavaDate().getTime();
		long registrationDateTimeInMillis = registrationDateTime.getJavaDate().getTime();
		
		return (int)(((currentTimeInMillis < registrationDateTimeInMillis ? registrationDateTimeInMillis - currentTimeInMillis : currentTimeInMillis - registrationDateTimeInMillis)/1000)/60);
	}

	private AttendanceOutcome assembleOutcomeLookupItem(LookupInstance outcome) 
	{
		if(outcome == null)
			return null;
		
		ims.framework.utils.ImagePath img = null;
		ims.framework.utils.Color color = null;		
		img = null;
		
		if (outcome.getImage() != null) 
		{
			img = new ims.framework.utils.ImagePath(outcome.getImage().getImageId(), outcome.getImage().getImagePath());
		}
		
		color = outcome.getColor();
		
		if (color != null) 
			color.getValue();

		ims.emergency.vo.lookups.AttendanceOutcome voLookup = new ims.emergency.vo.lookups.AttendanceOutcome(outcome.getId(),outcome.getText(), outcome.isActive(), null, img, color);
		ims.emergency.vo.lookups.AttendanceOutcome parentVoLookup = voLookup;
		ims.domain.lookups.LookupInstance parent = outcome.getParent();
		
		while (parent != null)
		{
			if (parent.getImage() != null) 
			{
				img = new ims.framework.utils.ImagePath(parent.getImage().getImageId(), parent.getImage().getImagePath() );
			}
			else 
			{
				img = null;
			}
			
			color = parent.getColor();
			
			if (color != null) 
				color.getValue();
			
			parentVoLookup.setParent(new ims.emergency.vo.lookups.AttendanceOutcome(parent.getId(),parent.getText(), parent.isActive(), null, img, color));
			parentVoLookup = parentVoLookup.getParent();
			parent = parent.getParent();
		}	
		
		return voLookup;
	}

	private TrackingColumn getHqlConfigByIndex(TrackingAreaColumn trackingColumn) 
	{
		for(TrackingColumn item : TrackingColumn.values())
		{
			if(item.getIndex().equals(trackingColumn))
			{
				if( TrackingAreaColumn.LENGTH_OF_STAY.equals(item.getIndex()))	//wdev-18327
				{
					if (ConfigFlag.DOM.STARTTIME_FOR_LOS_AND_BREACH_CALCULATIONS.getValue().equals("RegistrationDateTime"))
						item.setHqlSelect("at.registrationDateTime");
					else
						item.setHqlSelect("at.arrivalDateTime"); 
				}
				
				return item;
			}
		}
		
		return null;
	}

	public TrackingConfigurationForTrackingVo getTrackingConfig(ILocation edLocation) 
	{
		if(edLocation == null)
			throw new CodingRuntimeException("Cannot get Tracking configuration for a null EDLocation Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select tr from TrackingConfiguration as tr left join tr.eDLocation as loc where loc.id = :Loc and tr.isActive = 1";
		List<?> listConfig = factory.find(query, new String[] {"Loc"}, new Object[] {edLocation.getID()});
		
		if(listConfig != null && listConfig.size() > 0)
		{
			return TrackingConfigurationForTrackingVoAssembler.create((TrackingConfiguration) listConfig.get(0));
		}
		
		return null;
	}

	public TrackingSaveVo getTracking(TrackingRefVo trackingId) 
	{
		if(trackingId == null || trackingId.getID_Tracking() == null)
			throw new CodingRuntimeException("Cannot get Tracking record on null Tracking Id.");
		
		DomainFactory factory = getDomainFactory();
		Tracking doTracking = (Tracking) factory.getDomainObject(Tracking.class, trackingId.getID_Tracking());
		
		return TrackingSaveVoAssembler.create(doTracking);
	}

	public TrackingSaveVo saveTracking(TrackingSaveVo tracking)	throws StaleObjectException, UniqueKeyViolationException 
	{
		if(tracking == null)
			throw new CodingRuntimeException("Cannot save a null tracking record.");
		
		if(!tracking.isValidated())
			throw new CodingRuntimeException("tracking record is not validated.");
		
		DomainFactory factory = getDomainFactory();
		Tracking doTracking = TrackingSaveVoAssembler.extractTracking(factory, tracking);
		
		factory.save(doTracking);
		return TrackingSaveVoAssembler.create(doTracking);
	}

	public AttendanceKPIConfigVo getAttendanceKPIConfig(ILocation edLocation) 
	{
		if(edLocation == null)
			throw new CodingRuntimeException("Cannot get AttendanceKPIConfig for a null EDLocation Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select kpi from AttendanceKPIConfig as kpi left join kpi.eDLocation as loc where loc.id = :EDLoc";
		
		List<?> list = factory.find(query, new String[] {"EDLoc"}, new Object[] {edLocation.getID()});
		
		if(list == null || list.size() == 0)
			return null;
		
		return AttendanceKPIConfigVoAssembler.create((AttendanceKPIConfig) list.get(0));
	}

	public LocationLiteVoCollection listAllEDs() 
	{
		OrganisationAndLocation orgAndLoc = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return orgAndLoc.listActiveEDs();
	}

	public EpisodeofCareShortVo getEpisodeOfCare(EpisodeOfCareRefVo episodeOfCare) 
	{
		if(episodeOfCare == null || episodeOfCare.getID_EpisodeOfCare() == null)
			throw new CodingRuntimeException("Cannnot get EOC for a null Id.");
		
		return EpisodeofCareShortVoAssembler.create((EpisodeOfCare) getDomainFactory().getDomainObject(EpisodeOfCare.class, episodeOfCare.getID_EpisodeOfCare()));
	}

	public CareContextShortVo getCareContext(CareContextRefVo careContext) 
	{
		if(careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("Cannot get CC for a null Id.");
	
		return CareContextShortVoAssembler.create((CareContext) getDomainFactory().getDomainObject(CareContext.class, careContext.getID_CareContext()));
	}

	//wdev-16067
	public TrackingAreaForTrackingVo getTrackingAreaForTracking(TrackingRefVo trackingRef)
	{
		if( trackingRef == null )
			return null;
		 
		DomainFactory factory = getDomainFactory();
		String query = "select t2_1	from Tracking as t1_1 left join t1_1.currentArea as t2_1 where( t1_1.id = :trackingId )";
		
		List<?> list = factory.find(query, new String[] {"trackingId"}, new Object[] {trackingRef.getID_Tracking()});
		
		if(list == null || list.size() == 0)
			return null;
		TrackingAreaForTrackingVoCollection temp =TrackingAreaForTrackingVoAssembler.createTrackingAreaForTrackingVoCollectionFromTrackingArea(list);
		if( temp != null && temp.size() > 0)
			return temp.get(0);
		
		return null;
	
	}

	
	public TrackingForClinicianWorklistAndTriageVo getTrackingForClinicianWorklistAndTriageVo(TrackingRefVo trackingRef)
	{
		if(trackingRef == null )
			throw new CodingRuntimeException("TrackingRefVo cannot be null");
	
		return TrackingForClinicianWorklistAndTriageVoAssembler.create((Tracking) getDomainFactory().getDomainObject(Tracking.class, trackingRef.getID_Tracking()));
	}

	//wdev-16751
	public TrackingVo getTrackingVo(TrackingRefVo trackingRef)
	{
		if(trackingRef == null )
			throw new CodingRuntimeException("TrackingRefVo cannot be null");
	
		return TrackingVoAssembler.create((Tracking) getDomainFactory().getDomainObject(Tracking.class, trackingRef.getID_Tracking()));
	}

	//WDEV-17332
	public String getPIDDiagnosisInfo(CareContextRefVo careContextRefVo, EpisodeOfCareRefVo episodeRefVo)
	{
		PatientSummary ps = (PatientSummary) getDomainImpl(PatientSummaryImpl.class);
		return ps.getPIDDiagnosisInfo(careContextRefVo, episodeRefVo, null);
	}

	//wdev-17604
	public AppFormForTrackingVo getFormMenuAction(Integer formId) 
	{
		if(formId == null)
			throw new CodingRuntimeException("Cannot get AppFormMenuActionVo for a null FormId.");
		
		AppForm domainObject = (AppForm)getDomainFactory().getDomainObject(AppForm.class, formId);
		
		return  AppFormForTrackingVoAssembler.create(domainObject);
	}

	//wdev-16867
	public TrackingWithPartialAdmissionVo getTrackingWithEDPartialAdmission(TrackingRefVo trackRef)
	{
		if(trackRef == null || trackRef.getID_Tracking() == null)
			throw new CodingRuntimeException("Cannot get Tracking record on null Tracking Id.");
		
		DomainFactory factory = getDomainFactory();
		Tracking doTracking = (Tracking) factory.getDomainObject(Tracking.class, trackRef.getID_Tracking());
		
		return TrackingWithPartialAdmissionVoAssembler.create(doTracking);
	}
}
