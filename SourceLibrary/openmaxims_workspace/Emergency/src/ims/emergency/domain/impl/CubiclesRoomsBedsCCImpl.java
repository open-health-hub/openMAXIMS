//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4664.22850)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import java.util.List;

import ims.domain.DomainFactory;
import ims.emergency.configuration.vo.TrackingCubicleRoomBedRefVo;
import ims.emergency.domain.base.impl.BaseCubiclesRoomsBedsCCImpl;
import ims.emergency.vo.CubicleAllocationVoCollection;
import ims.emergency.vo.domain.CubicleAllocationVoAssembler;
import ims.emergency.vo.domain.TrackingAreaCubiclesVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class CubiclesRoomsBedsCCImpl extends BaseCubiclesRoomsBedsCCImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.TrackingAreaCubiclesVo getTrackingAreaCubicle(ims.emergency.configuration.vo.TrackingAreaRefVo trackingAreaRef)
	{
		if(trackingAreaRef == null)
			throw new CodingRuntimeException("TrackingAreaRefVo is null.");
		 

		StringBuffer hql = new StringBuffer();
		hql.append("select t1_1 from TrackingAreaCubicles as t1_1 left join t1_1.trackingArea as t2_1 ");
		hql.append("where (t2_1.id = :trackinAreaId) ");
		
		DomainFactory factory = getDomainFactory();
		List<?> list = factory.find(hql.toString(), new String[] {"trackinAreaId"}, new Object[] {trackingAreaRef.getID_TrackingArea()});
		
		if (list!=null && list.size()>0)
		{
			return TrackingAreaCubiclesVoAssembler.createTrackingAreaCubiclesVoCollectionFromTrackingAreaCubicles(list).get(0);
		}
		return null;
	}

	//wdev-16011
	public CubicleAllocationVoCollection getAllcotiobCubilce(TrackingCubicleRoomBedRefVo trackCubId)
	{
		if( trackCubId == null)
			return null;
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer();
		 
		hql.append(" select c1_1 from CubicleAllocation as c1_1 left join c1_1.cubicleRoomBed as t1_1 where (t1_1.id = :trackcubid)"); 
		List<?> trackingList = factory.find(hql.toString(), new String[]{"trackcubid"}, new Object[]{trackCubId.getID_TrackingCubicleRoomBed()});
		
		if( trackingList != null && trackingList.size() > 0)
		{
			CubicleAllocationVoCollection tempColl = CubicleAllocationVoAssembler.createCubicleAllocationVoCollectionFromCubicleAllocation(trackingList);
			return  tempColl;
		}
		
		
		
		return null;
	}
}
