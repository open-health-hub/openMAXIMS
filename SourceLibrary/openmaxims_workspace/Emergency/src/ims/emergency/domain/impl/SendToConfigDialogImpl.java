//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.core.resource.place.vo.LocationRefVo;
import ims.domain.DomainFactory;
import ims.emergency.domain.base.impl.BaseSendToConfigDialogImpl;
import ims.emergency.vo.TrackingConfigurationVo;
import ims.emergency.vo.domain.TrackingAreaVoAssembler;
import ims.emergency.vo.domain.TrackingConfigurationVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.List;

public class SendToConfigDialogImpl extends BaseSendToConfigDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.TrackingAreaVoCollection getAreasDefinitions(ims.core.resource.place.vo.LocationRefVo locationID)
	{
		if(locationID == null)
			throw new CodingRuntimeException("Can not get TrackingConfiguration value on null locationID.");
		
		StringBuffer hql = new StringBuffer();
	
		
		hql.append("select trackArea from TrackingConfiguration as trackConfig left join trackConfig.areas as trackArea ");
		hql.append("where (trackConfig.eDLocation.id = :locationID and trackArea.isOverallView = :isOverallView and trackArea.isRegistrationArea = :isRegistrationArea and trackArea.status.id <> -618) ");

		DomainFactory factory = getDomainFactory();
		List<?> list = factory.find(hql.toString(), new String[] {"locationID","isOverallView","isRegistrationArea"}, new Object[] {locationID.getID_Location(),false,false});
		
		return TrackingAreaVoAssembler.createTrackingAreaVoCollectionFromTrackingArea(list);
		
	}

	
	public TrackingConfigurationVo getTrackingConfig(LocationRefVo locationId)
	{
		if(locationId == null)
			throw new CodingRuntimeException("Can not get TrackingConfiguration value on null locationID.");
		
		StringBuffer hql = new StringBuffer();
		hql.append("select trackConfig from TrackingConfiguration as trackConfig ");
		hql.append("where trackConfig.eDLocation.id = :locationID ");
		
		DomainFactory factory = getDomainFactory();
		List<?> list = factory.find(hql.toString(), new String[] {"locationID"}, new Object[] {locationId.getID_Location()});
		
		if (list!=null && list.size()>0)
		{
			return TrackingConfigurationVoAssembler.createTrackingConfigurationVoCollectionFromTrackingConfiguration(list).get(0);
		}
		return null;
	}
}
