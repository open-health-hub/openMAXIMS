//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.emergency.configuration.domain.objects.StatusWorkflowConfig;
import ims.emergency.domain.base.impl.BaseStatusWorkflowConfigurationImpl;
import ims.emergency.vo.domain.StatusWorkflowConfigVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class StatusWorkflowConfigurationImpl extends BaseStatusWorkflowConfigurationImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* StatusWorkflowConfigVo
	*/
	public ims.emergency.vo.StatusWorkflowConfigVoCollection listStatusWorkflowConfig()
	{
		DomainFactory factory = getDomainFactory();
		return  StatusWorkflowConfigVoAssembler.createStatusWorkflowConfigVoCollectionFromStatusWorkflowConfig(factory.listDomainObjects(StatusWorkflowConfig.class)).sort();
	}

	/**
	* StatusWorkflowConfigVo
	*/
	public ims.emergency.vo.StatusWorkflowConfigVo saveStatusWorkflowConfig(ims.emergency.vo.StatusWorkflowConfigVo voStatusWorkflowConfig) throws ims.domain.exceptions.StaleObjectException
	{
		DomainFactory factory = getDomainFactory();
		
		if(voStatusWorkflowConfig.isValidated() == false)
			throw new DomainRuntimeException("StatusWorkflowConfig record not validated");
		
		StatusWorkflowConfig doRecord = StatusWorkflowConfigVoAssembler.extractStatusWorkflowConfig(factory, voStatusWorkflowConfig);
		
		factory.save(doRecord);
		
		return StatusWorkflowConfigVoAssembler.create(doRecord);

	}

	/**
	* StatusWorkflowConfigVo
	*/
	public ims.emergency.vo.StatusWorkflowConfigVo getStatusWorkflowConfigVo(ims.emergency.configuration.vo.StatusWorkflowConfigRefVo voRef)
	{
		if(	voRef == null )
			throw new CodingRuntimeException("StatusWorkflowConfigRefVo not provided");
		
		DomainFactory factory = getDomainFactory();
		StatusWorkflowConfig doSWC  =(StatusWorkflowConfig) factory.getDomainObject(StatusWorkflowConfig.class, voRef.getID_StatusWorkflowConfig());
		return StatusWorkflowConfigVoAssembler.create(doSWC);
	}
}
