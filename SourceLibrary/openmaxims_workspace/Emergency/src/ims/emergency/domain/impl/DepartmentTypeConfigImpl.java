//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4646.25174)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import java.util.List;

import com.sun.org.apache.bcel.internal.generic.LLOAD;

import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.resource.place.vo.LocationRefVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.configuration.domain.objects.LocationDepartmentTypes;
import ims.emergency.domain.base.impl.BaseDepartmentTypeConfigImpl;
import ims.emergency.vo.LocationDepartmentTypesVo;
import ims.emergency.vo.domain.LocationDepartmentTypesVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class DepartmentTypeConfigImpl extends BaseDepartmentTypeConfigImpl
{

	private static final long serialVersionUID = 1L;

	public ims.core.vo.LocationLiteVoCollection listAllEDs()
	{
		OrganisationAndLocation orgAndLoc = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return orgAndLoc.listActiveEDs();
	}

	public ims.emergency.vo.LocationDepartmentTypesVo save(ims.emergency.vo.LocationDepartmentTypesVo locationDepartmentTypes) throws ims.domain.exceptions.StaleObjectException
	{
		if(locationDepartmentTypes == null)
			throw new CodingRuntimeException("Cannnot save a null LocationDepartmentType.");
		
		if(!locationDepartmentTypes.isValidated())
			throw new CodingRuntimeException("LocationDepartmentType is not validated.");
		
		DomainFactory factory = getDomainFactory();
		LocationDepartmentTypes doLocationDepartmentType = LocationDepartmentTypesVoAssembler.extractLocationDepartmentTypes(factory, locationDepartmentTypes);
		
		if(locationDepartmentTypes.getID_LocationDepartmentTypes() == null)
		{
			LocationDepartmentTypesVo locationDepartmentTypesFromDB = get(locationDepartmentTypes.getEDLocation());
			
			if(locationDepartmentTypesFromDB != null && locationDepartmentTypesFromDB.getID_LocationDepartmentTypes() != null)
				throw new StaleObjectException(doLocationDepartmentType);
		}
		
		factory.save(doLocationDepartmentType);
		
		return LocationDepartmentTypesVoAssembler.create(doLocationDepartmentType);
	}

	public LocationDepartmentTypesVo get(LocationRefVo edLocation) 
	{
		if(edLocation == null || edLocation.getID_Location() == null)
			return null;
		
		String query = "from LocationDepartmentTypes as locConfig where locConfig.eDLocation.id = :EDLocationId";
		DomainFactory factory = getDomainFactory();
		List<?> list = factory.find(query, new String[] {"EDLocationId"}, new Object[] {edLocation.getID_Location()});
		
		if(list != null && list.size() > 0)
			return LocationDepartmentTypesVoAssembler.create((LocationDepartmentTypes) list.get(0));
		
		return null;
	}
}
