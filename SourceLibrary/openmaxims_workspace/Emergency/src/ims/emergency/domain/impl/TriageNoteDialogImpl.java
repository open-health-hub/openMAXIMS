//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import java.util.List;

import ims.clinical.configuration.vo.ClinicalProblemRefVo;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.DomainFactory;
import ims.emergency.configuration.domain.objects.TriageNoteDefaultTextConfig;
import ims.emergency.domain.base.impl.BaseTriageNoteDialogImpl;
import ims.emergency.domain.objects.TriageNotes;
import ims.emergency.vo.TriageNoteDefaultTextConfigVo;
import ims.emergency.vo.domain.TriageNoteDefaultTextConfigVoAssembler;
import ims.emergency.vo.domain.TriageNotesVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

public class TriageNoteDialogImpl extends BaseTriageNoteDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.TriageNotesVo save(ims.emergency.vo.TriageNotesVo note) throws ims.domain.exceptions.StaleObjectException, ims.domain.exceptions.UniqueKeyViolationException
	{
		if(note == null)
			throw new CodingRuntimeException("Cannot save a null TriageNote.");
		
		if(!note.isValidated())
			throw new CodingRuntimeException("TriageNote is not validated.");
		
		DomainFactory factory = getDomainFactory();
		
		TriageNotes doNote = TriageNotesVoAssembler.extractTriageNotes(factory, note);
		factory.save(doNote);
		
		return TriageNotesVoAssembler.create(doNote);
	}

	public TriageNoteDefaultTextConfigVo getDefaultTriageNote(ClinicalProblemRefVo problem) 
	{
		if(problem == null || problem.getID_ClinicalProblem() == null)
			throw new CodingRuntimeException("Cannot get default triage note for a null Presenting Problem Id.");
		
		DomainFactory factory = getDomainFactory();
		String query = "select tn from TriageNoteDefaultTextConfig as tn left join tn.problem as p where p.id = :ProblemId and tn.status.id = :ActiveStatus ";
		
		List<?> defaultTriageNoteList = factory.find(query, new String[] {"ProblemId", "ActiveStatus"}, new Object[] {problem.getID_ClinicalProblem(), PreActiveActiveInactiveStatus.ACTIVE.getID()});
		
		if(defaultTriageNoteList == null || defaultTriageNoteList.size() == 0)
			return null;
		
		return TriageNoteDefaultTextConfigVoAssembler.create((TriageNoteDefaultTextConfig) defaultTriageNoteList.get(0));
	}
}
