//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.LocationLiteVo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.domain.base.impl.BaseBedAwaitingBedAvailableImpl;
import ims.emergency.domain.objects.BedAvailability;
import ims.emergency.domain.objects.Tracking;
import ims.emergency.helper.EmergencyHelper;
import ims.emergency.helper.IEmergencyHelper;
import ims.emergency.vo.BedAvailabilityVo;
import ims.emergency.vo.TrackingForBedAvailabilityVo;
import ims.emergency.vo.TrackingRefVo;
import ims.emergency.vo.domain.BedAvailabilityVoAssembler;
import ims.emergency.vo.domain.EmergencyAttendanceForTrackingVoAssembler;
import ims.emergency.vo.domain.TrackingForBedAvailabilityVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.ILocation;

import java.util.List;

public class BedAwaitingBedAvailableImpl extends BaseBedAwaitingBedAvailableImpl
{

	private static final long serialVersionUID = 1L;

	public Boolean isStale(BedAvailabilityVo bedAvailabilityToSave)
	{
		if (bedAvailabilityToSave == null || bedAvailabilityToSave.getID_BedAvailability() == null)
		{
			throw new CodingRuntimeException("Cannot get BedAvailabilityVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();
		BedAvailability domainBedAvailability = (BedAvailability) factory.getDomainObject(BedAvailability.class, bedAvailabilityToSave.getID_BedAvailability());

		if (domainBedAvailability == null)
		{
			return true;
		}

		if (domainBedAvailability.getVersion() > bedAvailabilityToSave.getVersion_BedAvailability())
		{
			return true;
		}

		return false;
	}

	public ims.framework.utils.DateTime getAttendanceRegistrationDateTime(CareContextRefVo careContextRef)
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get AllocatedMedicVoCollection on null Id for CareContext ");
		}

		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer();
		hql.append("select att from EmergencyAttendance as att where att.careContext.id = :careContextID ");

		List<?> list = factory.find(hql.toString(), new String[] { "careContextID" }, new Object[] { careContextRef.getID_CareContext() });

		return EmergencyAttendanceForTrackingVoAssembler.createEmergencyAttendanceForTrackingVoCollectionFromEmergencyAttendance(list).get(0).getRegistrationDateTime();
	}

	public TrackingForBedAvailabilityVo getTracking(TrackingRefVo trackingRef)
	{
		if (trackingRef == null || trackingRef.getID_Tracking() == null)
		{
			throw new CodingRuntimeException("Cannot get TrackingForBedAvailabilityVo on null Id for Tracking ");
		}

		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer();
		hql.append("select tracking from Tracking as tracking where tracking.id = :trackingID ");

		List<?> list = factory.find(hql.toString(), new String[] { "trackingID" }, new Object[] { trackingRef.getID_Tracking() });
		return TrackingForBedAvailabilityVoAssembler.createTrackingForBedAvailabilityVoCollectionFromTracking(list).get(0);
	}

	public BedAvailabilityVo save(BedAvailabilityVo bedAvailabilityToSave, TrackingForBedAvailabilityVo trackingToSave) throws StaleObjectException, UniqueKeyViolationException
	{
		if (bedAvailabilityToSave == null && trackingToSave == null)
			throw new CodingRuntimeException("Cannot save null BedAvailability or TrackingForBedAvailability ");

		DomainFactory factory = getDomainFactory();

		if (bedAvailabilityToSave != null && trackingToSave == null)
		{
			if (!bedAvailabilityToSave.isValidated())
				throw new DomainRuntimeException("BedAvailabilityVo Not Validated.");

			BedAvailability domainBedAvailability = BedAvailabilityVoAssembler.extractBedAvailability(factory, bedAvailabilityToSave);
			factory.save(domainBedAvailability);

			return BedAvailabilityVoAssembler.create(domainBedAvailability);
		}
		else if (bedAvailabilityToSave == null && trackingToSave != null)
		{
			if (!trackingToSave.isValidated())
				throw new DomainRuntimeException("TrackingForBedAvailability Not Validated.");

			Tracking domainTracking = TrackingForBedAvailabilityVoAssembler.extractTracking(factory, trackingToSave);
			factory.save(domainTracking);

			TrackingForBedAvailabilityVo track = TrackingForBedAvailabilityVoAssembler.create(domainTracking);

			if (track != null)
				return track.getBedAvailability();
		}

		return null;
	}

	public Boolean isStaleTracking(TrackingForBedAvailabilityVo trackingToSave)
	{
		if (trackingToSave == null || trackingToSave.getID_Tracking() == null)
		{
			throw new CodingRuntimeException("Cannot get TrackingForBedAvailabilityVo on null Id ");
		}

		DomainFactory factory = getDomainFactory();
		Tracking domainTracking = (Tracking) factory.getDomainObject(Tracking.class, trackingToSave.getID_Tracking());

		if (domainTracking == null)
		{
			return true;
		}

		if (domainTracking.getVersion() > trackingToSave.getVersion_Tracking())
		{
			return true;
		}

		return false;
	}

	//WDEV-17615
	public LocationLiteVo getCurrentHospital(ILocation currentLocation)
	{
		IEmergencyHelper impl = (IEmergencyHelper)getDomainImpl(EmergencyHelper.class);
		return impl.getCurrentHospital(currentLocation);
	}
}
