//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.MosAdmin;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.MosAdminImpl;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.domain.objects.PatientNoSupportNetworkServicesInfo;
import ims.core.clinical.domain.objects.PatientNoSupportNetworkStatusInfo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.domain.Demographics;
import ims.core.domain.impl.DemographicsImpl;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.domain.objects.Medic;
import ims.core.resource.people.domain.objects.Nurse;
import ims.core.resource.people.domain.objects.Therapist;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.resource.place.domain.objects.LocationService;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.GpShortVo;
import ims.core.vo.Hcp;
import ims.core.vo.LocShortVo;
import ims.core.vo.LocShortVoCollection;
import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocationServiceVo;
import ims.core.vo.LocationServiceVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.MemberOfStaffVoCollection;
import ims.core.vo.Patient;
import ims.core.vo.PatientNoSupportNetworkServicesInfoVo;
import ims.core.vo.PatientNoSupportNetworkStatusInfoVo;
import ims.core.vo.ServiceVoCollection;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.HcpAssembler;
import ims.core.vo.domain.LocShortVoAssembler;
import ims.core.vo.domain.LocationServiceVoAssembler;
import ims.core.vo.domain.MedicVoAssembler;
import ims.core.vo.domain.MemberOfStaffVoAssembler;
import ims.core.vo.domain.NurseVoAssembler;
import ims.core.vo.domain.PatientNoSupportNetworkServicesInfoVoAssembler;
import ims.core.vo.domain.PatientNoSupportNetworkStatusInfoVoAssembler;
import ims.core.vo.domain.ServiceVoAssembler;
import ims.core.vo.domain.SupportNetworkFamilyAssembler;
import ims.core.vo.domain.SupportNetworkProfessionalVoAssembler;
import ims.core.vo.domain.SupportNetworkServicesVoAssembler;
import ims.core.vo.domain.TherapistVoAssembler;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.ServiceCategoryCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainException;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.domain.base.impl.BaseSupportServicesImpl;
import ims.emergency.domain.objects.DischargeServicesAndAdvice;
import ims.emergency.vo.DischargeServicesAndAdviceVo;
import ims.emergency.vo.domain.DischargeServicesAndAdviceVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class SupportServicesImpl extends BaseSupportServicesImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* save
	*/
	public ims.emergency.vo.DischargeServicesAndAdviceVo saveSupportServices(ims.emergency.vo.DischargeServicesAndAdviceVo voSupportServices) throws ims.domain.exceptions.StaleObjectException
	{
		if(!voSupportServices.isValidated())
		{
			throw new DomainRuntimeException("DischargeServicesAndAdviceVo Value Object has not been validated");
		}

		DomainFactory factory = getDomainFactory();

		DischargeServicesAndAdvice doDS = DischargeServicesAndAdviceVoAssembler.extractDischargeServicesAndAdvice(factory, voSupportServices);

		if (voSupportServices.getID_DischargeServicesAndAdvice() == null)
		{
			//Double check one does not already exist - saved from another session
			if (this.getSupportServices(null, voSupportServices.getAttendance()) != null)
				throw new StaleObjectException(doDS);
		}

		factory.save(doDS);
			
		return DischargeServicesAndAdviceVoAssembler.create(doDS);
	}

	public ims.core.vo.HcpCollection listHcps(ims.core.vo.HcpFilter filter)
	{
		HcpAdmin hcpAdmin = (HcpAdmin)getDomainImpl(HcpAdminImpl.class);
		return hcpAdmin.listHCPs(filter);
	}

	public ims.core.vo.Hcp getHcp(ims.core.vo.HcpFilter filter)
	{
		HcpAdmin intf = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return intf.getHcp(filter);
	}

	/**
	* getSupportServices
	*/
	public ims.emergency.vo.DischargeServicesAndAdviceVo getSupportServices(ims.emergency.vo.DischargeServicesAndAdviceRefVo refVo, ims.core.admin.vo.CareContextRefVo voCCRef)
	{
		if (refVo == null && voCCRef  == null)
			throw new CodingRuntimeException("Invalid getSupportServices call");

		DomainFactory factory = getDomainFactory();
		if (refVo != null && refVo.getID_DischargeServicesAndAdviceIsNotNull())
		{
			List snf = factory.find("from DischargeServicesAndAdvice dsa where dsa.id = :id ",new String[] {"id"},new Object[] {refVo.getID_DischargeServicesAndAdvice()});
			if(snf != null && snf.size() > 0)
				return (DischargeServicesAndAdviceVoAssembler.create((ims.emergency.domain.objects.DischargeServicesAndAdvice)snf.get(0)));
		}
		else if (voCCRef != null)
		{
			List snf = factory.find("from DischargeServicesAndAdvice dsa where dsa.attendance.id = :attID order by dsa.id desc",new String[] {"attID"},new Object[] {voCCRef.getID_CareContext()});
			if(snf != null && snf.size() > 0)
				return (DischargeServicesAndAdviceVoAssembler.create((ims.emergency.domain.objects.DischargeServicesAndAdvice)snf.get(0)));
		}
			
		return null;
	}

	public Patient getPatient(PatientRefVo voPatientShort) throws StaleObjectException 
	{
		Demographics patDemoGr = (Demographics)getDomainImpl(DemographicsImpl.class);
		return patDemoGr.getPatient(voPatientShort);
	}

	public LocShortVoCollection listLocations(ServiceRefVo service) 
	{
		if (service == null)
			throw new CodingRuntimeException("Service was not supplied. Mandatory argument");

		DomainFactory factory = getDomainFactory();

		String hql = "from LocationService ls " + " where ls.service.id = :id and ls.isActive = :active";

		List services = factory.find(hql, new String[]{"id", "active"}, new Object[]{service.getID_Service(), Boolean.TRUE});
		LocShortVoCollection locs = new LocShortVoCollection();

		for (int i = 0; i < services.size(); i++)
		{
			LocationService doLocService = (LocationService) services.get(i);
			locs.add(LocShortVoAssembler.create(doLocService.getLocation()));
		}

		return locs.sort();
	}

	public LocationServiceVo getLocationService(LocShortVo locShort, ServiceRefVo service) 
	{
		if (locShort == null || service == null)
			throw new DomainRuntimeException("Failed to get LocationService record, location and/or service not supplied");

		DomainFactory factory = getDomainFactory();

		List lstLocService = factory.find("from LocationService locService where locService.location.id = :locationId and locService.service.id = :serviceId", new String[]{"locationId", "serviceId"}, new Object[]{locShort.getID_Location(), service.getID_Service()});
		LocationServiceVoCollection voCollLocServices = LocationServiceVoAssembler.createLocationServiceVoCollectionFromLocationService(lstLocService);

		if (voCollLocServices != null && voCollLocServices.size() > 0)
			return voCollLocServices.get(0);

		return null;
	}

	public MemberOfStaffShortVoCollection listMembersOfStaffWithPrimaryLocations(MemberOfStaffShortVo voMemberOfStaffShortVo, HcpDisType hcpSUbtype) 
	{
		List mosList = null;
		if(HcpDisType.MEDICAL.equals(voMemberOfStaffShortVo.getHcp().getHcpType()))
		{
			mosList = listMedic(voMemberOfStaffShortVo,hcpSUbtype);
		}
		else if(HcpDisType.NURSING.equals(voMemberOfStaffShortVo.getHcp().getHcpType()))
		{
			mosList = listNurse(voMemberOfStaffShortVo,hcpSUbtype);
		}
		else if(HcpDisType.THERAPY.equals(voMemberOfStaffShortVo.getHcp().getHcpType()))
		{
			mosList = listTherapist(voMemberOfStaffShortVo,hcpSUbtype);
		}
		else
			mosList = listDomMos(voMemberOfStaffShortVo);
		
		MemberOfStaffVoCollection voCollMos = MemberOfStaffVoAssembler.createMemberOfStaffVoCollectionFromMemberOfStaff(mosList);
		MemberOfStaffShortVoCollection voCollReturn = new MemberOfStaffShortVoCollection();
		if (voCollMos != null)
		{
			for (int i = 0; i < voCollMos.size(); i++)
			{
				MemberOfStaffShortVo voShortMos = new MemberOfStaffShortVo();
				voShortMos = voCollMos.get(i);
				for (int j = 0; j < voCollMos.get(i).getLocations().size(); j++)
				{
					if ( voCollMos.get(i).getLocations().get(j).getIsPrimary() != null &&
						 voCollMos.get(i).getLocations().get(j).getIsPrimary().equals(Boolean.TRUE))
						voShortMos.setPrimaryLocation(voCollMos.get(i).getLocations().get(j).getLocation());
				}
				voCollReturn.add(voShortMos);
			}
		}

		return voCollReturn;
	}

	private List listDomMos(MemberOfStaffShortVo filter)
	{
		if (filter == null)
			throw new CodingRuntimeException("Member Of Staff was not supplied. Mandatory argument");
		
		DomainFactory factory = getDomainFactory();
		String hql = " from MemberOfStaff mos";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();

		if (filter.getID_MemberOfStaffIsNotNull())
		{
			hql += (" where mos.id = " + filter.getID_MemberOfStaff());
			return factory.find(hql, markers, values);
		}
		if (filter.getNameIsNotNull() && filter.getName().getSurname() != null && filter.getName().getSurname().length() > 0)
		{
			String surnameSearch = filter.getName().getSurname().toUpperCase();
			surnameSearch = surnameSearch.substring(0, Math.min(10, filter.getName().getSurname().length()));
			condStr.append(andStr + " mos.name.upperSurname like :mosSname");
			markers.add("mosSname");
			values.add(surnameSearch + "%");
			andStr = " and ";
		}

		if (filter.getStaffTypeIsNotNull())
		{
			condStr.append(andStr + " mos.staffType = :staffType");
			markers.add("staffType");
			values.add(getDomLookup(filter.getStaffType()));
			andStr = " and ";
		}

		if (filter.getHcpIsNotNull() && filter.getHcp().getHcpTypeIsNotNull())
		{
			if (filter.getHcp().getHcpType().equals(HcpDisType.OTHER))
			{
				condStr.append(andStr + " mos.hcp.hcpType not in (:hcpType1 , :hcpType2, :hcpType3)");
				markers.add("hcpType1");
				values.add(getDomLookup(HcpDisType.MEDICAL));
				markers.add("hcpType2");
				values.add(getDomLookup(HcpDisType.NURSING));
				markers.add("hcpType3");
				values.add(getDomLookup(HcpDisType.THERAPY));
				andStr = " and ";
			}
			else
			{
				condStr.append(andStr + " mos.hcp.hcpType = :hcpType");
				markers.add("hcpType");
				values.add(getDomLookup(filter.getHcp().getHcpType()));
				andStr = " and ";
			}
		}

		if (filter.getIsAppUserIsNotNull() && filter.getIsAppUser().booleanValue())
		{
			condStr.append(andStr + " mos.appUser is not null ");
			andStr = " and ";
		}

		if (filter.getIsActiveIsNotNull() && filter.getIsActive().booleanValue())
		{
			condStr.append(andStr + " mos.isActive = :isActive");
			markers.add("isActive");
			values.add(filter.getIsActive());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		hql += " order by mos.name.upperSurname,mos.name.upperForename";
		
		return factory.find(hql, markers, values);
	}

	private List listMedic(MemberOfStaffShortVo filter,HcpDisType hcpSUbtype)
	{
		if (filter == null)
			throw new CodingRuntimeException("Member Of Staff was not supplied. Mandatory argument");
		
		DomainFactory factory = getDomainFactory();
		String hql = " select m1_1.mos from Medic as m1_1";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		if (filter.getNameIsNotNull() && filter.getName().getSurname() != null && filter.getName().getSurname().length() > 0)
		{
			String surnameSearch = filter.getName().getSurname().toUpperCase();
			surnameSearch = surnameSearch.substring(0, Math.min(10, filter.getName().getSurname().length()));
			condStr.append(andStr + " m1_1.mos.name.upperSurname like :mosSname");
			markers.add("mosSname");
			values.add(surnameSearch + "%");
			andStr = " and ";
		}

		if (filter.getStaffTypeIsNotNull())
		{
			condStr.append(andStr + " m1_1.mos.staffType = :staffType");
			markers.add("staffType");
			values.add(getDomLookup(filter.getStaffType()));
			andStr = " and ";
		}
		if (filter.getHcpIsNotNull() && filter.getHcp().getHcpTypeIsNotNull())
		{
			
			condStr.append(andStr + " m1_1.hcpType = :hcpType");
			markers.add("hcpType");
			values.add(getDomLookup(filter.getHcp().getHcpType()));
			andStr = " and ";
			
		}
		if(hcpSUbtype != null)
		{
			condStr.append(andStr + " m1_1.medicType = :hcpMedicType");
			markers.add("hcpMedicType");
			values.add(getDomLookup(hcpSUbtype));
			andStr = " and ";
		}
		if (filter.getIsAppUserIsNotNull() && filter.getIsAppUser().booleanValue())
		{
			condStr.append(andStr + " m1_1.mos.appUser is not null ");
			andStr = " and ";
		}

		if (filter.getIsActiveIsNotNull() && filter.getIsActive().booleanValue())
		{
			condStr.append(andStr + " m1_1.mos.isActive = :isActive");
			markers.add("isActive");
			values.add(filter.getIsActive());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		hql += " order by m1_1.mos.name.upperSurname,m1_1.mos.name.upperForename";
		
		return factory.find(hql, markers, values);
		
		
		
	}
	private List listNurse(MemberOfStaffShortVo filter,HcpDisType hcpSUbtype)
	{
		if (filter == null)
			throw new CodingRuntimeException("Member Of Staff was not supplied. Mandatory argument");
		
		DomainFactory factory = getDomainFactory();
		String hql = " select n1_1.mos from Nurse as n1_1";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		if (filter.getNameIsNotNull() && filter.getName().getSurname() != null && filter.getName().getSurname().length() > 0)
		{
			String surnameSearch = filter.getName().getSurname().toUpperCase();
			surnameSearch = surnameSearch.substring(0, Math.min(10, filter.getName().getSurname().length()));
			condStr.append(andStr + " n1_1.mos.name.upperSurname like :mosSname");
			markers.add("mosSname");
			values.add(surnameSearch + "%");
			andStr = " and ";
		}

		if (filter.getStaffTypeIsNotNull())
		{
			condStr.append(andStr + " n1_1.mos.staffType = :staffType");
			markers.add("staffType");
			values.add(getDomLookup(filter.getStaffType()));
			andStr = " and ";
		}
		if (filter.getHcpIsNotNull() && filter.getHcp().getHcpTypeIsNotNull())
		{
			
			condStr.append(andStr + " n1_1.hcpType = :hcpType");
			markers.add("hcpType");
			values.add(getDomLookup(filter.getHcp().getHcpType()));
			andStr = " and ";
			
		}
		if(hcpSUbtype != null)
		{
			condStr.append(andStr + " n1_1.nurseType = :hcpNurseType");
			markers.add("hcpNurseType");
			values.add(getDomLookup(hcpSUbtype));
			andStr = " and ";
		}
		if (filter.getIsAppUserIsNotNull() && filter.getIsAppUser().booleanValue())
		{
			condStr.append(andStr + " n1_1.mos.appUser is not null ");
			andStr = " and ";
		}

		if (filter.getIsActiveIsNotNull() && filter.getIsActive().booleanValue())
		{
			condStr.append(andStr + " n1_1.mos.isActive = :isActive");
			markers.add("isActive");
			values.add(filter.getIsActive());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		hql += " order by n1_1.mos.name.upperSurname,n1_1.mos.name.upperForename";
		
		return factory.find(hql, markers, values);
		
		
		
	}
	private List listTherapist(MemberOfStaffShortVo filter,HcpDisType hcpSUbtype)
	{
		if (filter == null)
			throw new CodingRuntimeException("Member Of Staff was not supplied. Mandatory argument");
		
		DomainFactory factory = getDomainFactory();
		String hql = " select t1_1.mos from Therapist as t1_1";
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		if (filter.getNameIsNotNull() && filter.getName().getSurname() != null && filter.getName().getSurname().length() > 0)
		{
			String surnameSearch = filter.getName().getSurname().toUpperCase();
			surnameSearch = surnameSearch.substring(0, Math.min(10, filter.getName().getSurname().length()));
			condStr.append(andStr + " t1_1.mos.name.upperSurname like :mosSname");
			markers.add("mosSname");
			values.add(surnameSearch + "%");
			andStr = " and ";
		}

		if (filter.getStaffTypeIsNotNull())
		{
			condStr.append(andStr + " t1_1.mos.staffType = :staffType");
			markers.add("staffType");
			values.add(getDomLookup(filter.getStaffType()));
			andStr = " and ";
		}
		if (filter.getHcpIsNotNull() && filter.getHcp().getHcpTypeIsNotNull())
		{
			
			condStr.append(andStr + " t1_1.hcpType = :hcpType");
			markers.add("hcpType");
			values.add(getDomLookup(filter.getHcp().getHcpType()));
			andStr = " and ";
			
		}
		if(hcpSUbtype != null)
		{
			condStr.append(andStr + " t1_1.therapistType = :hcpTherapistType");
			markers.add("hcpTherapistType");
			values.add(getDomLookup(hcpSUbtype));
			andStr = " and ";
		}
		if (filter.getIsAppUserIsNotNull() && filter.getIsAppUser().booleanValue())
		{
			condStr.append(andStr + " t1_1.mos.appUser is not null ");
			andStr = " and ";
		}

		if (filter.getIsActiveIsNotNull() && filter.getIsActive().booleanValue())
		{
			condStr.append(andStr + " t1_1.mos.isActive = :isActive");
			markers.add("isActive");
			values.add(filter.getIsActive());
			andStr = " and ";
		}

		if (andStr.equals(" and "))
			hql += " where ";

		hql += condStr.toString();
		hql += " order by t1_1.mos.name.upperSurname,t1_1.mos.name.upperForename";
		
		return factory.find(hql, markers, values);
		
		
		
	}

	public CareContextShortVoCollection listCareContexts(PatientRefVo voPatientRef) 
	{
		if (voPatientRef == null)
			throw new CodingRuntimeException("Patient was not supplied. Mandatory argument");

		DomainFactory factory = getDomainFactory();

		String hql = " from CareContext cc where cc.episodeOfCare.careSpell.patient.id = :patient";
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();
		markerNames.add("patient");
		markerValues.add(voPatientRef.getID_Patient());

		java.util.List lst = factory.find(hql, markerNames, markerValues);
		return CareContextShortVoAssembler.createCareContextShortVoCollectionFromCareContext(lst);
	}

	public LocShortVoCollection listLocationsForMemberOfStaff(MemberOfStaffRefVo mos) 
	{
		MosAdmin impl = (MosAdmin) getDomainImpl(MosAdminImpl.class);
		return impl.listLocationsForMemberOfStaff(mos);
	}

	public GpShortVo getGPDetails(PatientRefVo patientRef)
	{
		Demographics impl = (Demographics) getDomainImpl(DemographicsImpl.class);	
		return impl.getPatient(patientRef).getGp();
	}

	public ServiceVoCollection listService(	ServiceCategoryCollection excludedServices) 
	{
		DomainFactory factory = getDomainFactory();

		StringBuffer hql = new StringBuffer("from Service s where s.isActive = :active");
		ArrayList paramNames = new ArrayList();
		ArrayList paramValues = new ArrayList();

		paramNames.add("active");
		paramValues.add(Boolean.TRUE);

		if (excludedServices != null)
		{
			int servicesSize = excludedServices.size();
			for (int i = 0; i < servicesSize; i++)
			{
				if (i == 0)
					hql.append(" and (");

				ServiceCategory serviceCategory = excludedServices.get(i);
				String serviceType = "serviceType" + Integer.toString(i);
				paramNames.add(serviceType);
				paramValues.add(new Integer(serviceCategory.getID()));

				hql.append("s.serviceCategory.id <> :" + serviceType);

				if (i == (servicesSize - 1))
					hql.append(")");
				else
					hql.append(" and ");
			}
		}
		//WDEV-18210
		hql.append(" order by UPPER(s.serviceName) asc");

		java.util.List services = factory.find(hql.toString(), paramNames, paramValues);

		return ServiceVoAssembler.createServiceVoCollectionFromService(services);
	}

	public LocSiteShortVo getGpSurgeryByPatient(PatientRefVo patient) 
	{
		Demographics impl = (Demographics) getDomainImpl(DemographicsImpl.class);
		return impl.getPatient(patient).getGpSurgery();
	}

	public PatientNoSupportNetworkServicesInfoVo getPatientNoSupportNetworkServicesInfo(PatientRefVo patientRefVo) 
	{		
		DomainFactory factory = getDomainFactory();	
		PatientNoSupportNetworkServicesInfo patientNoSupportNetworkServicesInfo = PatientNoSupportNetworkServicesInfo.getPatientNoSupportNetworkServicesInfoFromPatient(factory, patientRefVo.getID_Patient());
		return PatientNoSupportNetworkServicesInfoVoAssembler.create(patientNoSupportNetworkServicesInfo);
	}
	
	public PatientNoSupportNetworkStatusInfoVo getPatientNoSupportNetworkStatusInfo(PatientRefVo patientRefVo) 
	{	
		DomainFactory factory = getDomainFactory();
		PatientNoSupportNetworkStatusInfo patientNoSupportNetworkStatusInfo = PatientNoSupportNetworkStatusInfo.getPatientNoSupportNetworkStatusInfoFromPatient(factory, patientRefVo.getID_Patient());
		return PatientNoSupportNetworkStatusInfoVoAssembler.create(patientNoSupportNetworkStatusInfo);
	}	

	public PatientNoSupportNetworkServicesInfoVo savePatientNoSupportNetworkServicesInfo(PatientNoSupportNetworkServicesInfoVo voPatientNoSupportNetworkServicesInfo) throws DomainInterfaceException, StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();		
		PatientNoSupportNetworkServicesInfo doPatientNoSupportNetworkServicesInfo = PatientNoSupportNetworkServicesInfoVoAssembler.extractPatientNoSupportNetworkServicesInfo(factory, voPatientNoSupportNetworkServicesInfo);			
		factory.save(doPatientNoSupportNetworkServicesInfo);
		return (PatientNoSupportNetworkServicesInfoVoAssembler.create(doPatientNoSupportNetworkServicesInfo));		
	}

	public PatientNoSupportNetworkStatusInfoVo savePatientNoSupportNetworkStatusInfo(PatientNoSupportNetworkStatusInfoVo voPatientNoSupportNetworkStatusInfo) throws DomainInterfaceException, StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();		
		PatientNoSupportNetworkStatusInfo doPatientNoSupportNetworkStatusInfo = PatientNoSupportNetworkStatusInfoVoAssembler.extractPatientNoSupportNetworkStatusInfo(factory, voPatientNoSupportNetworkStatusInfo);			
		factory.save(doPatientNoSupportNetworkStatusInfo);
		return (PatientNoSupportNetworkStatusInfoVoAssembler.create(doPatientNoSupportNetworkStatusInfo));		
	}

	public LocationServiceVoCollection listLocationServices(ServiceRefVo service)
	{
		if (service == null)
			throw new CodingRuntimeException("Service was not supplied. Mandatory argument");

		DomainFactory factory = getDomainFactory();

		String hql = "from LocationService ls " + " where ls.service.id = :id and ls.isActive = :active";

		List services = factory.find(hql, new String[]{"id", "active"}, new Object[]{service.getID_Service(), Boolean.TRUE});
		return LocationServiceVoAssembler.createLocationServiceVoCollectionFromLocationService(services).sort();
	}

	public Boolean copyPreviousSupportServiceNetwork(PatientRefVo voPatRef, CareContextRefVo ccRefVo, EpisodeOfCareRefVo voEpisRef) throws StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();

		String hqlQuery = " from DischargeServicesAndAdvice dsa ";
		StringBuffer condStr = new StringBuffer();
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();
		
		condStr.append(" where ");
		condStr.append(" dsa.patient.id = :patID");
		markerNames.add("patID");
		markerValues.add(voPatRef.getID_Patient());

		condStr.append(" order by dsa.attendance desc ");
		
		hqlQuery += condStr.toString();

		java.util.List lst = factory.find(hqlQuery, markerNames, markerValues);
		DischargeServicesAndAdvice domDSAFound = null;
		if (lst.size() > 0)
		{
			domDSAFound = (DischargeServicesAndAdvice) lst.get(0);
			DischargeServicesAndAdviceVo voDSAFound = (DischargeServicesAndAdviceVoAssembler.create(domDSAFound));

			if (domDSAFound.getAttendance().getId().equals(ccRefVo.getID_CareContext()))
				throw new StaleObjectException(domDSAFound, "Previous Copy has already occured");
			
			DischargeServicesAndAdvice domToSave = new DischargeServicesAndAdvice();
			
			domToSave.setAttendance((CareContext) factory.getDomainObject(CareContext.class, ccRefVo.getID_CareContext()));
			domToSave.setEpisode((EpisodeOfCare) factory.getDomainObject(EpisodeOfCare.class, voEpisRef.getID_EpisodeOfCare()));
			domToSave.setPatient((ims.core.patient.domain.objects.Patient) factory.getDomainObject(ims.core.patient.domain.objects.Patient.class, voPatRef.getID_Patient()));

			for (int i = 0; voDSAFound.getSupportNetworkProfessionalsIsNotNull() && i < voDSAFound.getSupportNetworkProfessionals().size(); i++)
			{
				if (voDSAFound.getSupportNetworkProfessionals().get(i).getIsCurrActiveProfSuppIsNotNull()
					&& ! voDSAFound.getSupportNetworkProfessionals().get(i).getIsCurrActiveProfSupp())
					voDSAFound.getSupportNetworkProfessionals().remove(i);
				else
					voDSAFound.getSupportNetworkProfessionals().get(i).setID_SupportNetworkProfessional(null);
			}

			domToSave.setSupportNetworkProfessionals(SupportNetworkProfessionalVoAssembler.extractSupportNetworkProfessionalList(factory, voDSAFound.getSupportNetworkProfessionals()));

			for (int i = 0; voDSAFound.getSupportNetworkServicesIsNotNull() && i < voDSAFound.getSupportNetworkServices().size(); i++)
			{
				if (voDSAFound.getSupportNetworkServices().get(i).getIsCurrentlyActiveIsNotNull()
					&& ! voDSAFound.getSupportNetworkServices().get(i).getIsCurrentlyActive())
					voDSAFound.getSupportNetworkServices().remove(i);
				else
					voDSAFound.getSupportNetworkServices().get(i).setID_SupportNetworkServices(null);
			}

			domToSave.setSupportNetworkServices(SupportNetworkServicesVoAssembler.extractSupportNetworkServicesList(factory, voDSAFound.getSupportNetworkServices()));
			
			for (int i = 0; voDSAFound.getSupportNetworkFamilyIsNotNull() && i < voDSAFound.getSupportNetworkFamily().size(); i++)
			{
				if (voDSAFound.getSupportNetworkFamily().get(i).getIsCurrentlyActiveFamilySupportIsNotNull()
					&& ! voDSAFound.getSupportNetworkFamily().get(i).getIsCurrentlyActiveFamilySupport())
					voDSAFound.getSupportNetworkFamily().remove(i);
				else
					voDSAFound.getSupportNetworkFamily().get(i).setID_SupportNetworkFamily(null);
			}

			domToSave.setSupportNetworkFamily(SupportNetworkFamilyAssembler.extractSupportNetworkFamilyList(factory, voDSAFound.getSupportNetworkFamily()));

			try
			{
				factory.save(domToSave);
			}
			catch (DomainException e)
			{
				throw new DomainRuntimeException("Domain Exception occurred. Failed to save DischargeServicesAndAdvice " + e.getMessage(), e);
			}
			return true;
		}
		return false;
	}

	public Boolean checkForAPreviousSupportService(PatientRefVo voPatientRef) 
	{
		DomainFactory factory = getDomainFactory();

		String hqlQuery = " from DischargeServicesAndAdvice dsa ";
		StringBuffer condStr = new StringBuffer();
		ArrayList markerNames = new ArrayList();
		ArrayList markerValues = new ArrayList();
		
		condStr.append(" where ");
		condStr.append(" dsa.patient.id = :patID");
		markerNames.add("patID");
		markerValues.add(voPatientRef.getID_Patient());

		hqlQuery += condStr.toString();

		java.util.List lst = factory.find(hqlQuery, markerNames, markerValues);
		if (lst.size() > 0)
			return true;
		else
			return false;
	}

	public Hcp getHCP(HcpRefVo hcpRefVo)
	{
		DomainFactory factory = getDomainFactory();
		ims.core.resource.people.domain.objects.Hcp doHcp = (ims.core.resource.people.domain.objects.Hcp) factory.getDomainObject(ims.core.resource.people.domain.objects.Hcp.class, hcpRefVo.getID_Hcp());

		if (Medic.class.isAssignableFrom(doHcp.getClass()))
			return MedicVoAssembler.create((Medic) doHcp);
		else if (doHcp instanceof Therapist)
			return TherapistVoAssembler.create((Therapist)doHcp);
		else if (doHcp instanceof Nurse)
			return NurseVoAssembler.create((Nurse) doHcp);

		return HcpAssembler.create(doHcp);		
	}

}
