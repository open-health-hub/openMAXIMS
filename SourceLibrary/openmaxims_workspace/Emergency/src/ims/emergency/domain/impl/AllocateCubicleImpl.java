//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import java.util.List;

import ims.core.admin.vo.CareContextRefVo;
import ims.domain.DomainFactory;
import ims.emergency.configuration.vo.TrackingAreaRefVo;
import ims.emergency.domain.Tracking;
import ims.emergency.domain.base.impl.BaseAllocateCubicleImpl;
import ims.emergency.domain.objects.CubicleAllocation;
import ims.emergency.vo.CubicleAllocationShortVoCollection;
import ims.emergency.vo.CubicleAllocationVo;
import ims.emergency.vo.TrackingAreaCubiclesVo;
import ims.emergency.vo.TrackingAreaCubiclesVoCollection;
import ims.emergency.vo.TrackingForAllocateCubicleVo;
import ims.emergency.vo.TrackingForAllocateCubicleVoCollection;
import ims.emergency.vo.TrackingLiteVo;
import ims.emergency.vo.TrackingRefVo;
import ims.emergency.vo.domain.CubicleAllocationShortVoAssembler;
import ims.emergency.vo.domain.CubicleAllocationVoAssembler;
import ims.emergency.vo.domain.EmergencyAttendanceForTrackingVoAssembler;
import ims.emergency.vo.domain.TrackingAreaCubiclesVoAssembler;
import ims.emergency.vo.domain.TrackingForAllocateCubicleVoAssembler;
import ims.emergency.vo.domain.TrackingLiteVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;

public class AllocateCubicleImpl extends BaseAllocateCubicleImpl
{

	private static final long serialVersionUID = 1L;

	public ims.emergency.vo.CubicleAllocationShortVoCollection listCubicleAllocationShortVo(ims.core.admin.vo.CareContextRefVo careContextRef)
	{
		if(	careContextRef == null)
			throw new CodingRuntimeException("Care Context not provided");
		
		DomainFactory factory = getDomainFactory();
		
		String hsql = "select c1_1	from CubicleAllocation as c1_1 left join c1_1.attendance as c2_1 where	(c2_1.id = :id)";
		 
		
		List cubicle = factory.find(hsql, new String[] {"id"}, new Object[] {careContextRef.getID_CareContext()});
		if(cubicle != null && cubicle.size() > 0)
		{
			CubicleAllocationShortVoCollection tempColl = CubicleAllocationShortVoAssembler.createCubicleAllocationShortVoCollectionFromCubicleAllocation(cubicle);
			return tempColl;
		}
			
		
		return null;

	}

	public ims.emergency.vo.CubicleAllocationVo getCubicleAllocation(ims.emergency.vo.CubicleAllocationRefVo cubicleRef)
	{
		if(	cubicleRef == null )
			throw new CodingRuntimeException("CubicleAllocation not provided");
		
		DomainFactory factory = getDomainFactory();
		CubicleAllocation doCubicleAllocation  =(CubicleAllocation) factory.getDomainObject(CubicleAllocation.class, cubicleRef.getID_CubicleAllocation());
		return CubicleAllocationVoAssembler.create(doCubicleAllocation);
		
	}

	public ims.emergency.vo.CubicleAllocationVo saveCubicleAllocation(CubicleAllocationVo record, TrackingForAllocateCubicleVo tracking) throws ims.domain.exceptions.StaleObjectException
	{
		if( record == null && tracking == null)
			throw new CodingRuntimeException("CubicleAllocation not provided and TrackingForAllocateCubicleVo not provided");
		
		DomainFactory factory = getDomainFactory();

		if(	record !=  null)
		{
			CubicleAllocation doCubicleAllocation = CubicleAllocationVoAssembler.extractCubicleAllocation(factory, record);

		
			factory.save(doCubicleAllocation);
		
		
			return CubicleAllocationVoAssembler.create(doCubicleAllocation);
		}
		else if( tracking != null)
		{
			ims.emergency.domain.objects.Tracking doTracking = TrackingForAllocateCubicleVoAssembler.extractTracking(factory, tracking);
			
			factory.save(doTracking);
			
			TrackingForAllocateCubicleVo track = TrackingForAllocateCubicleVoAssembler.create(doTracking);
			
			if(	track != null)
				return track.getCurrentCubicle();
		}
		
		return null;
	}
	
	public TrackingForAllocateCubicleVo getTracking(TrackingRefVo trackingRef) 
	{
		if(	trackingRef == null)
			throw new CodingRuntimeException("Tracking not provided");
		
		DomainFactory factory = getDomainFactory();
		ims.emergency.domain.objects.Tracking doTracking = (ims.emergency.domain.objects.Tracking) factory.getDomainObject(ims.emergency.domain.objects.Tracking.class, trackingRef.getID_Tracking());
		return TrackingForAllocateCubicleVoAssembler.create(doTracking);
	}

	
	public DateTime getAttendanceRegistrationDateTime(CareContextRefVo careContextRef) 
	{
		if (careContextRef == null || careContextRef.getID_CareContext() == null)
		{
			throw new CodingRuntimeException("Cannot get AllocatedMedicVoCollection on null Id for CareContext ");
		}
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer();
		hql.append("select att from EmergencyAttendance as att where att.careContext.id = :careContextID ");
	
		List list = factory.find(hql.toString(), new String[] {"careContextID"}, new Object[] {careContextRef.getID_CareContext()});
			
		return EmergencyAttendanceForTrackingVoAssembler.createEmergencyAttendanceForTrackingVoCollectionFromEmergencyAttendance(list).get(0).getRegistrationDateTime();
	
	}

	//wdev-16011
	public TrackingAreaCubiclesVo getTrackingAreaCubicles(TrackingAreaRefVo trackingAreaRef)
	{
		if(	trackingAreaRef == null )
			return null;
		
		DomainFactory factory = getDomainFactory();
		
		StringBuffer hql = new StringBuffer();
		 
		hql.append("select t1_1 from TrackingAreaCubicles as t1_1 left join t1_1.trackingArea as t2_1 where	(t2_1.id = :trackingAreaId) ");
	
		List list = factory.find(hql.toString(), new String[] {"trackingAreaId"}, new Object[] {trackingAreaRef.getID_TrackingArea()});
		
		if( list != null && list.size() > 0)
		{
			TrackingAreaCubiclesVoCollection tempColl = TrackingAreaCubiclesVoAssembler.createTrackingAreaCubiclesVoCollectionFromTrackingAreaCubicles(list);
			if( tempColl != null )
				return tempColl.get(0);
			
		}
		
			
		return null;
		
		
	}

	//wdev-17430
	public Boolean isAllocateCubicleForCurrentTrackingArea(TrackingAreaRefVo trackingAreaRef) 
	{
		if( trackingAreaRef == null )
			throw new CodingRuntimeException("Tracking Area not provided");
		
		DomainFactory factory = getDomainFactory();
		 
		String hsql = "select c1_1	from CubicleAllocation as c1_1 left join c1_1.trackingArea as t1_1	where(t1_1.id = :id)";
		 
		
		List cubicle = factory.find(hsql, new String[] {"id"}, new Object[] {trackingAreaRef.getID_TrackingArea()});
		if(cubicle != null && cubicle.size() > 0)
		{
			return Boolean.TRUE;
		}
			
		return Boolean.FALSE;
	}

	//wdev-17430
	public TrackingLiteVo getTrackingLiteVo(TrackingRefVo trackingRef) 
	{
		if(	trackingRef == null)
			throw new CodingRuntimeException("Tracking not provided");
		
		DomainFactory factory = getDomainFactory();
		ims.emergency.domain.objects.Tracking doTracking = (ims.emergency.domain.objects.Tracking) factory.getDomainObject(ims.emergency.domain.objects.Tracking.class, trackingRef.getID_Tracking());
		return TrackingLiteVoAssembler.create(doTracking);
	}
}
