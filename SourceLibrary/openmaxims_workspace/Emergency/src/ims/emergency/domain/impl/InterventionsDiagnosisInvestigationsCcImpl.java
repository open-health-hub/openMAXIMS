//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.domain.impl;

import ims.clinical.domain.PatientSummary;
import ims.clinical.domain.impl.PatientSummaryImpl;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EmergencyAttendanceRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.clinical.domain.objects.PatientDiagnosis;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.PatientDiagnosisAtConsultationVo;
import ims.core.vo.PatientDiagnosisAtConsultationVoCollection;
import ims.core.vo.domain.PatientDiagnosisAtConsultationVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.domain.InterventionsTreatments;
import ims.emergency.domain.InvestigationAttendenceDetailDialog;
import ims.emergency.domain.base.impl.BaseInterventionsDiagnosisInvestigationsCcImpl;
import ims.emergency.domain.objects.EmergencyAttendanceInvestigationCoding;
import ims.emergency.domain.objects.InterventionsTreatmentsForAttendence;
import ims.emergency.vo.EmergencyAttendanceInvestigationCodingVo;
import ims.emergency.vo.InterventionsTreatmentsForAttendenceVo;
import ims.emergency.vo.InvestigationAttendenceDetailVo;
import ims.emergency.vo.InvestigationAttendenceDetailVoCollection;
import ims.emergency.vo.OrderInvestigationForAttendenceNotesCcVoCollection;
import ims.emergency.vo.domain.EmergencyAttendanceInvestigationCodingVoAssembler;
import ims.emergency.vo.domain.InterventionsTreatmentsForAttendenceVoAssembler;
import ims.emergency.vo.domain.InvestigationAttendenceDetailVoAssembler;
import ims.emergency.vo.domain.OrderInvestigationForAttendenceNotesCcVoAssembler;
import ims.framework.exceptions.CodingRuntimeException;
import ims.ocrr.vo.lookups.OrderInvStatus;

import java.util.ArrayList;
import java.util.List;

public class InterventionsDiagnosisInvestigationsCcImpl extends BaseInterventionsDiagnosisInvestigationsCcImpl
{
	private static final long serialVersionUID = 1L;

	public InterventionsTreatmentsForAttendenceVo getInterventionsTreatmentsForAttendence(CareContextRefVo attendence) 
	{
		if(attendence == null || attendence.getID_CareContext() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select it from InterventionsTreatmentsForAttendence as it where it.attendance.id = :AttendenceId ";
		
		List<?> list = factory.find(query, new String[] {"AttendenceId"}, new Object[] {attendence.getID_CareContext()});
		
		if(list == null || list.size() == 0)
			return null;
		
		return InterventionsTreatmentsForAttendenceVoAssembler.create((InterventionsTreatmentsForAttendence) list.get(0));
	}

	public InterventionsTreatmentsForAttendenceVo save(InterventionsTreatmentsForAttendenceVo record) throws StaleObjectException 
	{
		InterventionsTreatments impl = (InterventionsTreatments) getDomainImpl(InterventionsTreatmentsImpl.class);
		return impl.save(record);
	}

	public PatientDiagnosisAtConsultationVoCollection listPatientDiagnosis(CareContextRefVo attendance) 
	{
		if(attendance == null || attendance.getID_CareContext() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select pd from PatientDiagnosis as pd left join pd.careContext as cc where cc.id = :AttendenceId order by UPPER(pd.diagnosisDescription) asc";
		
		List<?> list = factory.find(query, new String[] {"AttendenceId"}, new Object[] {attendance.getID_CareContext()});
		
		return PatientDiagnosisAtConsultationVoAssembler.createPatientDiagnosisAtConsultationVoCollectionFromPatientDiagnosis(list);
	}

	public PatientDiagnosisAtConsultationVoCollection saveDiagnosis(PatientDiagnosisAtConsultationVoCollection diagnosis)	throws StaleObjectException 
	{
		if(diagnosis == null)
			throw new CodingRuntimeException("Cannot save a null PatientDiagnosisAtConsultationVoCollection.");
		
		if(!diagnosis.isValidated())
			throw new CodingRuntimeException("PatientDiagnosisAtConsultationVoCollection is not validated.");
		
		DomainFactory factory = getDomainFactory();
		PatientDiagnosisAtConsultationVoCollection coll = new PatientDiagnosisAtConsultationVoCollection();
		
		for(PatientDiagnosisAtConsultationVo diagnose : diagnosis)
		{
			if(diagnose == null)
				continue;
			
			PatientDiagnosis doDiagnose = PatientDiagnosisAtConsultationVoAssembler.extractPatientDiagnosis(factory, diagnose);
			
			factory.save(doDiagnose);
			coll.add(PatientDiagnosisAtConsultationVoAssembler.create(doDiagnose));
		}
		
		return coll;
	}

	public OrderInvestigationForAttendenceNotesCcVoCollection listOrderInvestigations(PatientRefVo patient, CareContextRefVo careContext) 
	{
		if (patient == null || patient.getID_Patient() == null)
			throw new CodingRuntimeException("Patient parameter can not be null when listing OrderInvestigations.");
		
		DomainFactory factory = getDomainFactory();
		java.util.Date fromDate = null;
		java.util.Date dateTo = null;
		
		if(careContext != null && careContext.getID_CareContext() != null)
		{
			CareContext doCareContext = (CareContext) factory.getDomainObject(CareContext.class, careContext.getID_CareContext());
			if(doCareContext != null)
			{
				if(doCareContext.getStartDateTime() != null)
				{
					fromDate = doCareContext.getStartDateTime();
				}
				
				if(doCareContext.getEndDateTime() != null)
				{
					dateTo = doCareContext.getEndDateTime();
				}
				else
				{
					dateTo = new java.util.Date();
				}
			}		
		}
		
		StringBuilder query = new StringBuilder();
		
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();
		
		
		query.append("SELECT orderInv FROM OrderInvestigation AS orderInv ");
		query.append(" LEFT JOIN FETCH orderInv.orderDetails AS details LEFT JOIN details.patient AS patient left join orderInv.investigation as inv left join inv.investigationIndex as invIndex left join orderInv.ordInvCurrentStatus.ordInvStatus as ordStatus ");
		
		query.append("WHERE patient.id = :PATIENT_ID and ordStatus.id <> :cancelledStatusId and ordStatus.id <> :cancelRequestStatusId");
		paramNames.add("PATIENT_ID");
		paramValues.add(patient.getID_Patient());
		
		//WDEV-17303
		paramNames.add("cancelledStatusId");
		paramValues.add(OrderInvStatus.CANCELLED.getID());
		paramNames.add("cancelRequestStatusId");
		paramValues.add(OrderInvStatus.CANCEL_REQUEST.getID());
		
		if (fromDate != null && dateTo != null)
		{
			query.append(" AND orderInv.displayDateTime BETWEEN :FROM_DATE AND :END_DATE ");
			
			paramNames.add("FROM_DATE");	paramValues.add(fromDate);
			paramNames.add("END_DATE");		paramValues.add(dateTo);
		}
		
		query.append(" order by UPPER(invIndex.name) asc");
		
		return OrderInvestigationForAttendenceNotesCcVoAssembler.createOrderInvestigationForAttendenceNotesCcVoCollectionFromOrderInvestigation(factory.find(query.toString(), paramNames, paramValues));
	}

	public InvestigationAttendenceDetailVoCollection listInvestigationAttendence(CareContextRefVo careContext) 
	{
		if(careContext == null || careContext.getID_CareContext() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		String query = "select ia from InvestigationAttendenceDetail as ia left join ia.attendance as at left join ia.attendenceInvestigation as ai where at.id = :AttendenceId and ia.active = 1 order by UPPER(ai.text) asc";
		
		List<?> list = factory.find(query, new String[] {"AttendenceId"}, new Object[] {careContext.getID_CareContext()});
		
		return InvestigationAttendenceDetailVoAssembler.createInvestigationAttendenceDetailVoCollectionFromInvestigationAttendenceDetail(list);
	}

	public InvestigationAttendenceDetailVo save(InvestigationAttendenceDetailVo record) throws StaleObjectException 
	{
		InvestigationAttendenceDetailDialog impl = (InvestigationAttendenceDetailDialog) getDomainImpl(InvestigationAttendenceDetailDialogImpl.class);
		return impl.save(record);
	}

	public Boolean isStaleOnDiagnosis(PatientDiagnosisRefVo diagnosis) 
	{
		if(diagnosis == null)
			return false;
		
		DomainFactory factory = getDomainFactory();
		
		List<?> appts = factory.find("select a.id from PatientDiagnosis as a where a.id = :DiagnosisId and a.version > :DiagnosisVersion", new String[] {"DiagnosisId", "DiagnosisVersion"}, new Object[] {diagnosis.getID_PatientDiagnosis(), diagnosis.getVersion_PatientDiagnosis()});
		
		if(appts != null && appts.size() > 0)
			return true;
		
		return false;
	}

	public PatientDiagnosisAtConsultationVo getPatientDiagnosis(PatientDiagnosisRefVo patDiagnosis) 
	{
		if(patDiagnosis == null || patDiagnosis.getID_PatientDiagnosis() == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		PatientDiagnosis doPatDiagnosis = (PatientDiagnosis) factory.getDomainObject(PatientDiagnosis.class, patDiagnosis.getID_PatientDiagnosis());
		
		return PatientDiagnosisAtConsultationVoAssembler.create(doPatDiagnosis);
	}

	//WDEV-17320
	public String getPIDDiagnosisInfo(CareContextRefVo careContextRefVo, EpisodeOfCareRefVo episodeRefVo)
	{
		PatientSummary ps = (PatientSummary) getDomainImpl(PatientSummaryImpl.class);
		return ps.getPIDDiagnosisInfo(careContextRefVo, episodeRefVo, null);
	}

	public EmergencyAttendanceInvestigationCodingVo getInvestigationSequence(EmergencyAttendanceRefVo emergencyAttendance) 
	{
		return null;
	}

	public EmergencyAttendanceInvestigationCodingVo saveInvestigationSequence(EmergencyAttendanceInvestigationCodingVo investigationSequence) throws StaleObjectException 
	{
		if(investigationSequence == null)
			throw new CodingRuntimeException("Cannot save a null EmergencyAttendanceInvestigationCodingVo.");
		
		if(!investigationSequence.isValidated())
			throw new CodingRuntimeException("EmergencyAttendanceInvestigationCodingVo is not validated.");
		
		DomainFactory factory = getDomainFactory();

		EmergencyAttendanceInvestigationCoding doInv = EmergencyAttendanceInvestigationCodingVoAssembler.extractEmergencyAttendanceInvestigationCoding(factory, investigationSequence);
		factory.save(doInv);
		return EmergencyAttendanceInvestigationCodingVoAssembler.create(doInv);
	}

	public EmergencyAttendanceInvestigationCodingVo getInvestigationSequence(CareContextRefVo emergencyAttendance) 
	{
		if(emergencyAttendance == null || emergencyAttendance.getID_CareContext() == null)
			return null;

		DomainFactory factory = getDomainFactory();
		String query = "select eaic from EmergencyAttendanceInvestigationCoding as eaic left join eaic.careContext as cc where cc.id = :ccID";
		
		List<?> list = factory.find(query, new String[] {"ccID"}, new Object[] {emergencyAttendance.getID_CareContext()});
		if(list != null && list.size() > 0)
			return EmergencyAttendanceInvestigationCodingVoAssembler.create((EmergencyAttendanceInvestigationCoding)list.get(0));

		return null;
	}
}
