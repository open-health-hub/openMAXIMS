//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.tiigdialog;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.emergency.domain.TIIGDialog.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.emergency.domain.TIIGDialog domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbPatientPreviouslyValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbPatientPreviously().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker existingInstance = (ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbPatientPreviouslyLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker)
		{
			ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker instance = (ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbPatientPreviouslyLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker existingInstance = (ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbPatientPreviously().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbPatientPreviouslyLookup()
	{
		this.form.cmbPatientPreviously().clear();
		ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttackerCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getPatientPreviouslyAssaultedByAttacker(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbPatientPreviously().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbPatientPreviouslyLookupValue(int id)
	{
		ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker instance = ims.emergency.vo.lookups.LookupHelper.getPatientPreviouslyAssaultedByAttackerInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbPatientPreviously().setValue(instance);
	}
	protected final void defaultcmbPatientPreviouslyLookupValue()
	{
		this.form.cmbPatientPreviously().setValue((ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker.class, engine.getFormName().getID(), ims.emergency.vo.lookups.PatientPreviouslyAssaultedByAttacker.TYPE_ID));
	}
	protected final void oncmbGenderOfAttackerValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbGenderOfAttacker().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.GenderofAttacker existingInstance = (ims.emergency.vo.lookups.GenderofAttacker)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbGenderOfAttackerLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.GenderofAttacker)
		{
			ims.emergency.vo.lookups.GenderofAttacker instance = (ims.emergency.vo.lookups.GenderofAttacker)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbGenderOfAttackerLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.GenderofAttacker existingInstance = (ims.emergency.vo.lookups.GenderofAttacker)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbGenderOfAttacker().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbGenderOfAttackerLookup()
	{
		this.form.cmbGenderOfAttacker().clear();
		ims.emergency.vo.lookups.GenderofAttackerCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getGenderofAttacker(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbGenderOfAttacker().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbGenderOfAttackerLookupValue(int id)
	{
		ims.emergency.vo.lookups.GenderofAttacker instance = ims.emergency.vo.lookups.LookupHelper.getGenderofAttackerInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbGenderOfAttacker().setValue(instance);
	}
	protected final void defaultcmbGenderOfAttackerLookupValue()
	{
		this.form.cmbGenderOfAttacker().setValue((ims.emergency.vo.lookups.GenderofAttacker)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.GenderofAttacker.class, engine.getFormName().getID(), ims.emergency.vo.lookups.GenderofAttacker.TYPE_ID));
	}
	protected final void oncmbNumberOfAttackersValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbNumberOfAttackers().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.NumberOfAttackers existingInstance = (ims.emergency.vo.lookups.NumberOfAttackers)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbNumberOfAttackersLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.NumberOfAttackers)
		{
			ims.emergency.vo.lookups.NumberOfAttackers instance = (ims.emergency.vo.lookups.NumberOfAttackers)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbNumberOfAttackersLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.NumberOfAttackers existingInstance = (ims.emergency.vo.lookups.NumberOfAttackers)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbNumberOfAttackers().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbNumberOfAttackersLookup()
	{
		this.form.cmbNumberOfAttackers().clear();
		ims.emergency.vo.lookups.NumberOfAttackersCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getNumberOfAttackers(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbNumberOfAttackers().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbNumberOfAttackersLookupValue(int id)
	{
		ims.emergency.vo.lookups.NumberOfAttackers instance = ims.emergency.vo.lookups.LookupHelper.getNumberOfAttackersInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbNumberOfAttackers().setValue(instance);
	}
	protected final void defaultcmbNumberOfAttackersLookupValue()
	{
		this.form.cmbNumberOfAttackers().setValue((ims.emergency.vo.lookups.NumberOfAttackers)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.NumberOfAttackers.class, engine.getFormName().getID(), ims.emergency.vo.lookups.NumberOfAttackers.TYPE_ID));
	}
	protected final void oncmbAttackerHadConsumedAlcoholValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbAttackerHadConsumedAlcohol().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.AttackerHadConsumedAlcohol existingInstance = (ims.emergency.vo.lookups.AttackerHadConsumedAlcohol)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAttackerHadConsumedAlcoholLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.AttackerHadConsumedAlcohol)
		{
			ims.emergency.vo.lookups.AttackerHadConsumedAlcohol instance = (ims.emergency.vo.lookups.AttackerHadConsumedAlcohol)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAttackerHadConsumedAlcoholLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.AttackerHadConsumedAlcohol existingInstance = (ims.emergency.vo.lookups.AttackerHadConsumedAlcohol)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbAttackerHadConsumedAlcohol().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAttackerHadConsumedAlcoholLookup()
	{
		this.form.cmbAttackerHadConsumedAlcohol().clear();
		ims.emergency.vo.lookups.AttackerHadConsumedAlcoholCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getAttackerHadConsumedAlcohol(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbAttackerHadConsumedAlcohol().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAttackerHadConsumedAlcoholLookupValue(int id)
	{
		ims.emergency.vo.lookups.AttackerHadConsumedAlcohol instance = ims.emergency.vo.lookups.LookupHelper.getAttackerHadConsumedAlcoholInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbAttackerHadConsumedAlcohol().setValue(instance);
	}
	protected final void defaultcmbAttackerHadConsumedAlcoholLookupValue()
	{
		this.form.cmbAttackerHadConsumedAlcohol().setValue((ims.emergency.vo.lookups.AttackerHadConsumedAlcohol)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.AttackerHadConsumedAlcohol.class, engine.getFormName().getID(), ims.emergency.vo.lookups.AttackerHadConsumedAlcohol.TYPE_ID));
	}
	protected final void oncmbDrinkPriorIncidentValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbDrinkPriorIncident().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom existingInstance = (ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDrinkPriorIncidentLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom)
		{
			ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom instance = (ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDrinkPriorIncidentLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom existingInstance = (ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbDrinkPriorIncident().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDrinkPriorIncidentLookup()
	{
		this.form.cmbDrinkPriorIncident().clear();
		ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFromCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getConsumedOrPurchasedAlcoholFrom(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbDrinkPriorIncident().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDrinkPriorIncidentLookupValue(int id)
	{
		ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom instance = ims.emergency.vo.lookups.LookupHelper.getConsumedOrPurchasedAlcoholFromInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbDrinkPriorIncident().setValue(instance);
	}
	protected final void defaultcmbDrinkPriorIncidentLookupValue()
	{
		this.form.cmbDrinkPriorIncident().setValue((ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom.class, engine.getFormName().getID(), ims.emergency.vo.lookups.ConsumedOrPurchasedAlcoholFrom.TYPE_ID));
	}
	protected final void oncmbIntendedToInformPoliceValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbIntendedToInformPolice().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.PoliceInformed existingInstance = (ims.emergency.vo.lookups.PoliceInformed)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIntendedToInformPoliceLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.PoliceInformed)
		{
			ims.emergency.vo.lookups.PoliceInformed instance = (ims.emergency.vo.lookups.PoliceInformed)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIntendedToInformPoliceLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.PoliceInformed existingInstance = (ims.emergency.vo.lookups.PoliceInformed)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbIntendedToInformPolice().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIntendedToInformPoliceLookup()
	{
		this.form.cmbIntendedToInformPolice().clear();
		ims.emergency.vo.lookups.PoliceInformedCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getPoliceInformed(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbIntendedToInformPolice().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIntendedToInformPoliceLookupValue(int id)
	{
		ims.emergency.vo.lookups.PoliceInformed instance = ims.emergency.vo.lookups.LookupHelper.getPoliceInformedInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbIntendedToInformPolice().setValue(instance);
	}
	protected final void defaultcmbIntendedToInformPoliceLookupValue()
	{
		this.form.cmbIntendedToInformPolice().setValue((ims.emergency.vo.lookups.PoliceInformed)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.PoliceInformed.class, engine.getFormName().getID(), ims.emergency.vo.lookups.PoliceInformed.TYPE_ID));
	}
	protected final void oncmbRelationshipToAttackerValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbRelationshipToAttacker().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.RelationshipToAttacker existingInstance = (ims.emergency.vo.lookups.RelationshipToAttacker)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRelationshipToAttackerLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.RelationshipToAttacker)
		{
			ims.emergency.vo.lookups.RelationshipToAttacker instance = (ims.emergency.vo.lookups.RelationshipToAttacker)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRelationshipToAttackerLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.RelationshipToAttacker existingInstance = (ims.emergency.vo.lookups.RelationshipToAttacker)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbRelationshipToAttacker().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRelationshipToAttackerLookup()
	{
		this.form.cmbRelationshipToAttacker().clear();
		ims.emergency.vo.lookups.RelationshipToAttackerCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getRelationshipToAttacker(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbRelationshipToAttacker().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRelationshipToAttackerLookupValue(int id)
	{
		ims.emergency.vo.lookups.RelationshipToAttacker instance = ims.emergency.vo.lookups.LookupHelper.getRelationshipToAttackerInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbRelationshipToAttacker().setValue(instance);
	}
	protected final void defaultcmbRelationshipToAttackerLookupValue()
	{
		this.form.cmbRelationshipToAttacker().setValue((ims.emergency.vo.lookups.RelationshipToAttacker)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.RelationshipToAttacker.class, engine.getFormName().getID(), ims.emergency.vo.lookups.RelationshipToAttacker.TYPE_ID));
	}
	protected final void oncmbAssaultLocationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbAssaultLocation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.AssaultLocation existingInstance = (ims.emergency.vo.lookups.AssaultLocation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAssaultLocationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.AssaultLocation)
		{
			ims.emergency.vo.lookups.AssaultLocation instance = (ims.emergency.vo.lookups.AssaultLocation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAssaultLocationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.AssaultLocation existingInstance = (ims.emergency.vo.lookups.AssaultLocation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbAssaultLocation().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAssaultLocationLookup()
	{
		this.form.cmbAssaultLocation().clear();
		ims.emergency.vo.lookups.AssaultLocationCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getAssaultLocation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbAssaultLocation().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAssaultLocationLookupValue(int id)
	{
		ims.emergency.vo.lookups.AssaultLocation instance = ims.emergency.vo.lookups.LookupHelper.getAssaultLocationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbAssaultLocation().setValue(instance);
	}
	protected final void defaultcmbAssaultLocationLookupValue()
	{
		this.form.cmbAssaultLocation().setValue((ims.emergency.vo.lookups.AssaultLocation)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.AssaultLocation.class, engine.getFormName().getID(), ims.emergency.vo.lookups.AssaultLocation.TYPE_ID));
	}
	protected final void oncmbAssaultWeaponValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbAssaultWeapon().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.AssaultWeapon existingInstance = (ims.emergency.vo.lookups.AssaultWeapon)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAssaultWeaponLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.AssaultWeapon)
		{
			ims.emergency.vo.lookups.AssaultWeapon instance = (ims.emergency.vo.lookups.AssaultWeapon)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAssaultWeaponLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.AssaultWeapon existingInstance = (ims.emergency.vo.lookups.AssaultWeapon)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbAssaultWeapon().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAssaultWeaponLookup()
	{
		this.form.cmbAssaultWeapon().clear();
		ims.emergency.vo.lookups.AssaultWeaponCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getAssaultWeapon(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbAssaultWeapon().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAssaultWeaponLookupValue(int id)
	{
		ims.emergency.vo.lookups.AssaultWeapon instance = ims.emergency.vo.lookups.LookupHelper.getAssaultWeaponInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbAssaultWeapon().setValue(instance);
	}
	protected final void defaultcmbAssaultWeaponLookupValue()
	{
		this.form.cmbAssaultWeapon().setValue((ims.emergency.vo.lookups.AssaultWeapon)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.AssaultWeapon.class, engine.getFormName().getID(), ims.emergency.vo.lookups.AssaultWeapon.TYPE_ID));
	}
	protected final void oncmbIncidentLocationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbIncidentLocation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.IncidentLocation existingInstance = (ims.emergency.vo.lookups.IncidentLocation)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIncidentLocationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.IncidentLocation)
		{
			ims.emergency.vo.lookups.IncidentLocation instance = (ims.emergency.vo.lookups.IncidentLocation)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIncidentLocationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.IncidentLocation existingInstance = (ims.emergency.vo.lookups.IncidentLocation)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbIncidentLocation().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIncidentLocationLookup()
	{
		this.form.cmbIncidentLocation().clear();
		ims.emergency.vo.lookups.IncidentLocationCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getIncidentLocation(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbIncidentLocation().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIncidentLocationLookupValue(int id)
	{
		ims.emergency.vo.lookups.IncidentLocation instance = ims.emergency.vo.lookups.LookupHelper.getIncidentLocationInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbIncidentLocation().setValue(instance);
	}
	protected final void defaultcmbIncidentLocationLookupValue()
	{
		this.form.cmbIncidentLocation().setValue((ims.emergency.vo.lookups.IncidentLocation)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.IncidentLocation.class, engine.getFormName().getID(), ims.emergency.vo.lookups.IncidentLocation.TYPE_ID));
	}
	protected final void oncmbHadPatientConsumedAlcoholValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbHadPatientConsumedAlcohol().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident existingInstance = (ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbHadPatientConsumedAlcoholLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident)
		{
			ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident instance = (ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbHadPatientConsumedAlcoholLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident existingInstance = (ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbHadPatientConsumedAlcohol().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbHadPatientConsumedAlcoholLookup()
	{
		this.form.cmbHadPatientConsumedAlcohol().clear();
		ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncidentCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getConsumedAlcoholThreeHoursPriorToIncident(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbHadPatientConsumedAlcohol().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbHadPatientConsumedAlcoholLookupValue(int id)
	{
		ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident instance = ims.emergency.vo.lookups.LookupHelper.getConsumedAlcoholThreeHoursPriorToIncidentInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbHadPatientConsumedAlcohol().setValue(instance);
	}
	protected final void defaultcmbHadPatientConsumedAlcoholLookupValue()
	{
		this.form.cmbHadPatientConsumedAlcohol().setValue((ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident.class, engine.getFormName().getID(), ims.emergency.vo.lookups.ConsumedAlcoholThreeHoursPriorToIncident.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.emergency.domain.TIIGDialog domain;
}
