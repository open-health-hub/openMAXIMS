//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.attendanceclinicalnotedialog;

import ims.clinical.configuration.vo.ClinicalProblemRefVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.AttendanceClinicalNotesVo;
import ims.emergency.vo.lookups.AttendanceClinicalNoteType;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.vo.ValueObject;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (args!=null && args.length>0 && args[0]!=null &&  args[0] instanceof AttendanceClinicalNoteType)
		{
			form.ctnNoteDetails().cmbNoteType().setValue((AttendanceClinicalNoteType)args[0]);
		}
		
		if (args!=null && args.length>1 && args[1]!=null)
		{
			form.getLocalContext().setSelectedParentRecord((ValueObject)args[1]);
		}
		
		if (args!=null && args.length>2 && args[2]!=null && args[2] instanceof ClinicalProblemRefVo)
		{
			form.getLocalContext().setPresentingProblem((ClinicalProblemRefVo) args[2]);
		}
		
		if (args!=null && args.length>3 && args[3]!=null && args[3] instanceof FormMode)
		{
			form.getLocalContext().setParentDialogMode((FormMode) args[3]);
			form.btnSave().setText("OK");
		}
		
		populateComboBoxes();
		updateControlState();
		
		open();
		
	}

	private void populateComboBoxes()
	{
		populateAttendanceCombo(domain.getCareContextByPatient(form.getGlobalContext().Core.getPatientShort()));
		loadHcpDisciplines();//WDEV-17264
		
	}

	//WDEV-17264
	private void loadHcpDisciplines()
	{
		form.ctnNoteDetails().cmbDiscipline().clear();
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(domain.getLookupService());
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).isActive() == true && lookupCollection.get(x).getParent() == null)
				form.ctnNoteDetails().cmbDiscipline().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	
	private void populateAttendanceCombo(CareContextShortVoCollection collCareContext)
	{
		form.ctnNoteDetails().cmbAttendance().clear();
		if (collCareContext==null || collCareContext.size()==0)
			return;
		
		for (int i=0;i<collCareContext.size();i++)
		{
			CareContextShortVo careContex = collCareContext.get(i);
			form.ctnNoteDetails().cmbAttendance().newRow(careContex, getTextToDisplayInAttendanceCombo(careContex));
		}
	}

	private String getTextToDisplayInAttendanceCombo(CareContextShortVo careContex)
	{
		if (careContex==null)
			return null;
		
		return (careContex.getStartDateTimeIsNotNull() ? careContex.getStartDateTime():"")
			   +(careContex.getResponsibleHCPIsNotNull() ? " - "+careContex.getResponsibleHCP().getIHcpName()  : "")
			   +(careContex.getEndDateTimeIsNotNull() ? " - "+ careContex.getEndDateTime() : "");
	}

	private void open()
	{

		AttendanceClinicalNotesVo voAttendanceClinicalNote = form.getGlobalContext().Emergency.getAttendanceClinicalNotes();
		
		if (voAttendanceClinicalNote==null)
		{
			initialize();
			form.ccAuthoringInfo().initializeComponent();
			return;
		}
	
		clear();
		form.ccAuthoringInfo().setValue(voAttendanceClinicalNote.getAuthoringInformation());
		form.richTextNote().setValue(voAttendanceClinicalNote.getClinicalNote());
		form.ctnNoteDetails().cmbAttendance().setValue(voAttendanceClinicalNote.getAttendance());
		form.ctnNoteDetails().cmbNoteType().setValue(voAttendanceClinicalNote.getNoteType());
		form.ctnNoteDetails().cmbDiscipline().setValue(voAttendanceClinicalNote.getDiscipline());
		form.ctnNoteDetails().cmbSpecialty().setValue(voAttendanceClinicalNote.getSpecialty());
		
	}
	
	private void initialize()
	{
		form.ccAuthoringInfo().setLabels(AuthoringLabelType.AUTHORED);
		form.ccAuthoringInfo().setIsRequiredPropertyToControls(true);
		form.ctnNoteDetails().cmbAttendance().setValue(form.getGlobalContext().Core.getCurrentCareContext());
		
		Object hcp = domain.getHcpLiteUser();
		if (hcp !=null && hcp instanceof HcpLiteVo)
		{
			HcpLiteVo hcpLite = (HcpLiteVo)hcp;
			form.ctnNoteDetails().cmbDiscipline().setValue(hcpLite.getHcpType().getParent()!=null ? hcpLite.getHcpType().getParent() : hcpLite.getHcpType() );//WDEV-17264
			form.ctnNoteDetails().cmbSpecialty().setValue(domain.getSpecialtyForHCP(hcpLite, hcpLite.getHcpType()));
		}
	}

	private void updateControlState()
	{
		form.ccAuthoringInfo().setEnabledAuthoringHCP(false);
		form.ccAuthoringInfo().setEnabledDateTime(false);
		form.ctnNoteDetails().cmbAttendance().setEnabled(false);
		form.ctnNoteDetails().cmbNoteType().setEnabled(false);
		form.ctnNoteDetails().cmbDiscipline().setEnabled(false);
		form.ctnNoteDetails().cmbSpecialty().setEnabled(false);
		
		//WDEV-17270
		if (AttendanceClinicalNoteType.TRIAGE.equals(form.ctnNoteDetails().cmbNoteType().getValue()))
		{
			form.lblDefaultNote().setValue("Use Default Triage Note");
		}
		else if (AttendanceClinicalNoteType.MEDIC.equals(form.ctnNoteDetails().cmbNoteType().getValue()))
		{
			form.lblDefaultNote().setValue("Use Default Clinician Note");
		}
		
		form.lblDefaultNote().setVisible(AttendanceClinicalNoteType.TRIAGE.equals(form.ctnNoteDetails().cmbNoteType().getValue()) || AttendanceClinicalNoteType.MEDIC.equals(form.ctnNoteDetails().cmbNoteType().getValue()));
		form.chkDefaultTriageNote().setVisible(AttendanceClinicalNoteType.TRIAGE.equals(form.ctnNoteDetails().cmbNoteType().getValue()) || AttendanceClinicalNoteType.MEDIC.equals(form.ctnNoteDetails().cmbNoteType().getValue()));
	}

	private void clear()
	{
		form.ccAuthoringInfo().setValue(null);
		form.chkDefaultTriageNote().setValue(null);
		form.richTextNote().setValue(null);
		form.ctnNoteDetails().cmbAttendance().setValue(null);
		form.ctnNoteDetails().cmbNoteType().setValue(null);
		form.ctnNoteDetails().cmbDiscipline().setValue(null);
		form.ctnNoteDetails().cmbSpecialty().setValue(null);	
	}
	
	@Override
	protected void onChkDefaultTriageNoteValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.chkDefaultTriageNote().getValue() && form.getLocalContext().getPresentingProblem() != null) //WDEV-17299
		{
			if (AttendanceClinicalNoteType.TRIAGE.equals(form.ctnNoteDetails().cmbNoteType().getValue()))
			{
				form.getLocalContext().setDefaultTriageNote(domain.getDefaultTriageNote(form.getLocalContext().getPresentingProblem()));
				form.richTextNote().pasteText( form.getLocalContext().getDefaultTriageNote() != null ? form.getLocalContext().getDefaultTriageNote().getDefaultTriageNote() : null);
			}
			else if (AttendanceClinicalNoteType.MEDIC.equals(form.ctnNoteDetails().cmbNoteType().getValue()))
			{
				//WDEV-17270
				form.getLocalContext().setDefaultClinicianNote(domain.getDefaultClinicianNote(form.getLocalContext().getPresentingProblem()));
				form.richTextNote().pasteText( form.getLocalContext().getDefaultClinicianNote() != null ? form.getLocalContext().getDefaultClinicianNote().getDefaultClinicianNote() : null);
			}
		}
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (FormMode.EDIT.equals(form.getLocalContext().getParentDialogMode()))
		{
			AttendanceClinicalNotesVo voAttendanceClinicalNoteToSave = populateDataFromScreen(form.getGlobalContext().Emergency.getAttendanceClinicalNotes());
			
			String[] errors = voAttendanceClinicalNoteToSave.validate();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return ;
			}
			
			form.getGlobalContext().Emergency.setAttendanceClinicalNotes(voAttendanceClinicalNoteToSave);
			engine.close(DialogResult.OK);
			return;
			
		}
		
		if (save())
		{
			engine.close(DialogResult.OK);
		}
	}

	private boolean save()
	{
		AttendanceClinicalNotesVo voAttendanceClinicalNoteToSave = populateDataFromScreen(form.getGlobalContext().Emergency.getAttendanceClinicalNotes());
		
		String[] errors = voAttendanceClinicalNoteToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{	
			if (form.getLocalContext().getSelectedParentRecordIsNotNull())
			{
				//Save the entire ReferralToSpecialty 
				form.getGlobalContext().Emergency.setAttendanceClinicalNotes(domain.save(voAttendanceClinicalNoteToSave,form.getLocalContext().getSelectedParentRecord()));
				
			}
			else
			{
				form.getGlobalContext().Emergency.setAttendanceClinicalNotes(domain.save(voAttendanceClinicalNoteToSave,null));
			}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
				
		return true;	
	}

	private AttendanceClinicalNotesVo populateDataFromScreen(AttendanceClinicalNotesVo attendanceClinicalNotes)
	{
		if (attendanceClinicalNotes==null)
			attendanceClinicalNotes=new AttendanceClinicalNotesVo();
		else
			attendanceClinicalNotes=(AttendanceClinicalNotesVo) attendanceClinicalNotes.clone();
		
		attendanceClinicalNotes.setPatient(form.getGlobalContext().Core.getPatientShort());
		attendanceClinicalNotes.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		attendanceClinicalNotes.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		
		attendanceClinicalNotes.setAuthoringInformation(form.ccAuthoringInfo().getValue());
		attendanceClinicalNotes.setClinicalNote(form.richTextNote().getValue());
		attendanceClinicalNotes.setAttendance(form.ctnNoteDetails().cmbAttendance().getValue());
		attendanceClinicalNotes.setNoteType(form.ctnNoteDetails().cmbNoteType().getValue());
		attendanceClinicalNotes.setDiscipline(form.ctnNoteDetails().cmbDiscipline().getValue());
		attendanceClinicalNotes.setSpecialty(form.ctnNoteDetails().cmbSpecialty().getValue());
		
		return attendanceClinicalNotes;
	}
}
