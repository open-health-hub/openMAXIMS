//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.dischargedetails_advicetransport;

import ims.clinical.configuration.vo.ClinicalProblemRefVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PatientMobility;
import ims.core.vo.lookups.PatientMobilityCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.dischargedetails_advicetransport.GenForm.grdAdviceLefletRow;
import ims.emergency.forms.dischargedetails_advicetransport.GenForm.grdEquipmentRow;
import ims.emergency.forms.dischargedetails_advicetransport.GenForm.grdMobilityRow;
import ims.emergency.vo.AdviceLeafletConfigDisplayVo;
import ims.emergency.vo.AdviceLeafletConfigDisplayVoCollection;
import ims.emergency.vo.DischargeServicesAndAdviceVo;
import ims.emergency.vo.enums.DischargeDetails_CustomEvents;
import ims.emergency.vo.lookups.Dischargequipment;
import ims.emergency.vo.lookups.DischargequipmentCollection;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	
	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Component interface functions
	//-----------------------------------------------------------------------------------------------------------------------------------------

	public void setValue(ClinicalProblemRefVo clinicalProblem, CareContextRefVo careContext)
	{
		// Initialize the form
		initialize();
		
		// Set local context for problem
		form.getLocalContext().setCareContext(careContext);
		
		// Set local context for CareContext
		form.getLocalContext().setMainProblem(clinicalProblem);
		
		// Present form to screen
		open();
	}
	
	public void setReadOnly(Boolean readOnly)
	{
		form.getLocalContext().setReadOnly(readOnly);
		
		updateControlsState();
	}


	public DischargeDetails_CustomEvents getCustomEvent()
	{
		return form.getLocalContext().getCustomEvent();
	}


	public void clearCustomEvent()
	{
		form.getLocalContext().setCustomEvent(null);
	}

	
	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers
	//-----------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		// Nothing to do here - it's a component
		// Keep this event for data binding purposes
	}
	

	@Override
	protected void onFormModeChanged()
	{
		form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.FORMMODECHANGED);

		// Update controls state
		updateControlsState();
	}

	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		// Check if printing is necessary
		if (form.getForms().Admin.SelectPrinterDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			printSelectedAdviceLeaflets();
		}
		
	}

	
	@Override
	protected void onGrdAdviceLefletGridCheckBoxClicked(int column, grdAdviceLefletRow row, boolean isChecked) throws PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		updateControlsState();
	}

	
	@Override
	protected void onBtnPrintAdviceClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		// Select printer
		selectPrinter();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		// Prepare form for editing an instance
		updateInstance();
	}

	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		// Refresh screen on successful saves
		if (save())
			open();
	}


	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		// Refresh the screen
		open();
	}

	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.DischargeAdviceTransport.PRINT_ADVICE:

				form.getLocalContext().setCustomEvent(null);
				// Select printer
				selectPrinter();
				break;
		}
	}

	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Form Presentation functions
	//-----------------------------------------------------------------------------------------------------------------------------------------

	
	/**
	 * Function used to initialize the screen
	 */
	public void initialize()
	{
		// Bind PatientMobility grid
		bindPatientMobilityGrid();
		
		// Bind Equipment Provided grid
		bindEquipmentProvided();
	}
	

	/**
	 * Function used to present form to screen
	 */
	public void open()
	{
		// Clear screen
		clear();
		
		// Populate advice leaflets
		populateAdviceLeaflets(domain.getAdviceLeaflets(form.getLocalContext().getMainProblem()));
		
		// Populate instance controls
		form.getLocalContext().setRecord(domain.getDischargeServiceAndAdvice(form.getLocalContext().getCareContext()));
		populateInstanceControls(form.getLocalContext().getRecord());
		
		// Set form in VIEW mode
		form.setMode(FormMode.VIEW);
	}
	

	/**
	 * Function used to prepare form for creating a new instance
	 */
	public void newInstance() throws PresentationLogicException
	{
		// Clear selected record from local context
		form.getLocalContext().setRecord(null);
		
		// Set form in EDIT mode
		form.setMode(FormMode.EDIT);
	}

	
	/**
	 * Function used to prepare form for editing current instance
	 */
	public void updateInstance()
	{
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}


	/**
	 * Function used to save created / edited instance to database
	 */
	public boolean save() throws PresentationLogicException
	{
		try
		{
			// Get data from screen
			form.getLocalContext().setRecord(populateDataFromInstanceControls(form.getLocalContext().getRecord()));

			// Validate data
			String[] errors = form.getLocalContext().getRecord().validate();

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt to save data to database
			form.getLocalContext().setRecord(domain.save(form.getLocalContext().getRecord()));

			return true;
		}
		// Treat any errors that might arise
		catch (StaleObjectException e)
		{
			e.printStackTrace();

			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			initialize();
			open();
			return false;
		}
	}


	/**
	 * Function used to clear the screen
	 */
	public void clear()
	{
		// Clear 'Advice Leaflet' grid
		form.grdAdviceLeflet().getRows().clear();
		
		// Clear instance controls
		clearInstanceControls();
	}


	/**
	 * Function used to clear instance control
	 */
	public void clearInstanceControls()
	{
		// Clear patient mobility
		for (int i = 0; i < form.grdMobility().getRows().size(); i++)
		{
			form.grdMobility().getRows().get(i).setColSelect(false);
		}
		
		// Clear Transport Details
		form.cmbTransportType().setValue(null);
		form.dtimTransport().setValue(null);
		form.txtBookingNo().setValue(null);
		
		// Clear Equipment provided
		for (int i = 0; i < form.grdEquipment().getRows().size(); i++)
		{
			form.grdEquipment().getRows().get(i).setColSelect(false);
		}
		
		// Clear comments
		form.txtOverallAdvice().setValue(null);
	}
	

	/**
	 * Function used to update controls state
	 */
	public void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
    		form.btnEdit().setVisible(form.getLocalContext().getRecord() != null);
    		form.btnEdit().setEnabled(!Boolean.TRUE.equals(form.getLocalContext().getReadOnly()));
    		
    		boolean adviceSelected = isAdviceSelected();

    		form.btnPrintAdvice().setVisible(true);
			form.btnPrintAdvice().setEnabled(adviceSelected);
    		
    		// Also the context menu print option
    		form.getContextMenus().Emergency.getDischargeAdviceTransportPRINT_ADVICEItem().setVisible(true);
    		form.getContextMenus().Emergency.getDischargeAdviceTransportPRINT_ADVICEItem().setEnabled(adviceSelected);
		}
	}

	private boolean isAdviceSelected()
	{
		for (int i = 0; i < form.grdAdviceLeflet().getRows().size(); i++)
		{
			if (form.grdAdviceLeflet().getRows().get(i).getColSelect() == true)
				return true;
		}

		return false;
	}

	
	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Data binding functions for controls
	//-----------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to populate the Advice Leaflets
	 */
	private void populateAdviceLeaflets(AdviceLeafletConfigDisplayVoCollection adviceLeaflets)
	{
		// Clear advice leaflet grid
		form.grdAdviceLeflet().getRows().clear();
		
		// Check advice collection parameter
		if (adviceLeaflets == null)
			return;
		
		
		for (AdviceLeafletConfigDisplayVo advice : adviceLeaflets)
		{
			grdAdviceLefletRow row = form.grdAdviceLeflet().getRows().newRow();
			
			row.setColAdvice(advice.getTemplate().getName());
			row.setColSelect(false);
			
			row.setValue(advice);
		}
	}


	/**
	 * Function used to bind Patient Mobility lookup to grid
	 */
	private void bindPatientMobilityGrid()
	{
		// Clear grid
		form.grdMobility().getRows().clear();
		
		// Get PatientMobility values
		PatientMobilityCollection values = LookupHelper.getPatientMobility(domain.getLookupService());
		
		// Add each Patient Mobility to grid
		if (values != null)
		{
			for (int i = 0; i < values.size(); i++)
			{
				PatientMobility mobility = values.get(i);
				
				grdMobilityRow row = form.grdMobility().getRows().newRow();
				
				row.setColMobility(mobility.getText());
				row.setColMobilityReadOnly(false);
				
				row.setValue(mobility);
			}
		}
	}


	/**
	 * Function used to bind Equipment Provided lookup to grid
	 */
	private void bindEquipmentProvided()
	{
		// Clear grid
		form.grdEquipment().getRows().clear();
		
		// Get Equipment values
		DischargequipmentCollection values = ims.emergency.vo.lookups.LookupHelper.getDischargequipment(domain.getLookupService());

		// Add each Equipment to grid
		if (values != null)
		{
			for (int i = 0; i < values.size(); i++)
			{
				Dischargequipment equipment = values.get(i);
				
				grdEquipmentRow row = form.grdEquipment().getRows().newRow();
				
				row.setColEquipment(equipment.getText());
				row.setColEquipmentReadOnly(false);
				
				row.setValue(equipment);
			}
		}
	}


	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Functions used in data exchange between screen and data layer
	//-----------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Function used to populate instance controls with values from
	 * DischargeServicesAndAdviceVo record
	 */
	private void populateInstanceControls(DischargeServicesAndAdviceVo record)
	{
		// Clear instance controls
		clearInstanceControls();
		
		// Check parameter
		if (record == null)
			return;
		

		// Populate patient mobility
		if (record.getPatientMobilityIsNotNull())
		{
			for (int i = 0; i < record.getPatientMobility().size(); i++)
			{
				grdMobilityRow row = form.grdMobility().getRowByValue(record.getPatientMobility().get(i));
				
				if (row != null) row.setColSelect(true);
			}
		}
		
		// Populate Transport details
		form.cmbTransportType().setValue(record.getTransportArrangedType());
		form.dtimTransport().setValue(record.getTransportDateTime());
		form.txtBookingNo().setValue(record.getBookingNo());
		
		// Populate Equipment type
		if (record.getEquipmentIsNotNull())
		{
			for (int i = 0; i < record.getEquipment().size(); i++)
			{
				grdEquipmentRow row = form.grdEquipment().getRowByValue(record.getEquipment().get(i));
				
				if (row != null) row.setColSelect(true);
			}
		}
		
		
		// Populate Comments
		form.txtOverallAdvice().setValue(record.getComments());		
	}

	
	/**
	 * Function used to populate a DischargeServicesAndAdviceVo record from
	 * instance controls data
	 */
	private DischargeServicesAndAdviceVo populateDataFromInstanceControls(DischargeServicesAndAdviceVo record)
	{
		// If no record exist then create and initialize one
		if (record == null)
		{
			record = new DischargeServicesAndAdviceVo();
			
			record.setPatient(form.getGlobalContext().Core.getPatientShort());
			record.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
			record.setAttendance(form.getLocalContext().getCareContext());
		}
		
		// Get selected PatientMobility values
		record.setPatientMobility(new PatientMobilityCollection());
		
		for (int i = 0; i < form.grdMobility().getRows().size(); i++)
		{
			grdMobilityRow row = form.grdMobility().getRows().get(i);
			
			if (row.getColSelect())
			{
				record.getPatientMobility().add(row.getValue());
			}
		}
		
		// Get Transport details
		record.setTransportArrangedType(form.cmbTransportType().getValue());
		record.setTransportDateTime(form.dtimTransport().getValue());
		record.setBookingNo(form.txtBookingNo().getValue());
		
		// Get selected Equipment values
		record.setEquipment(new DischargequipmentCollection());
		
		for (int i = 0; i < form.grdEquipment().getRows().size(); i++)
		{
			grdEquipmentRow row = form.grdEquipment().getRows().get(i);
			
			if (row.getColSelect())
			{
				record.getEquipment().add(row.getValue());
			}
		}
		
		// Get overall Comments
		record.setComments(form.txtOverallAdvice().getValue());
		
		return record;
	}



	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Functions used in data exchange between screen and data layer
	//-----------------------------------------------------------------------------------------------------------------------------------------


	private void selectPrinter()
	{
		engine.open(form.getForms().Admin.SelectPrinterDialog);
	}


	private void printSelectedAdviceLeaflets()
	{
		try
		{
			// Get selected advice leaflets
			AdviceLeafletConfigDisplayVoCollection selectedAdviceLeaflets = new AdviceLeafletConfigDisplayVoCollection();

			for (int i = 0; i < form.grdAdviceLeflet().getRows().size(); i++)
			{
				grdAdviceLefletRow adviceRow = form.grdAdviceLeflet().getRows().get(i);

				if (adviceRow.getColSelect())	selectedAdviceLeaflets.add(adviceRow.getValue());
			}

			// For each selected advice leaflet
			for (AdviceLeafletConfigDisplayVo adviceLeaflet : selectedAdviceLeaflets)
			{
				// Get Report and Template from database
				String report[] = domain.getReportAndTemplate(adviceLeaflet.getTemplate());

				// Check for valid report and template
				if (report == null)
				{
					engine.showMessage("No report found for selected advice leaflet");
					return;
				}

				// Create a query builder client instance
				QueryBuilderClient client = new QueryBuilderClient(ConfigFlag.GEN.QUERY_SERVER_URL.getValue(), engine.getSessionId());

				// Attempt to build report and print it to printer
				String printerName = form.getGlobalContext().Admin.getSelectedPrinter() != null ? form.getGlobalContext().Admin.getSelectedPrinter().getIPrinterName() : null;
				client.buildReport(report[0], report[1], ConfigFlag.GEN.REPORT_SERVER_URL.getValue(), "PDF", printerName, 1);
			}
		}
		catch (QueryBuilderClientException exception)
		{
			exception.printStackTrace();
		}
	}
}
