//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.addeditassessmentstowhiteboard;

import ims.core.configuration.vo.AppImageRefVo;
import ims.emergency.vo.UserAssessmentForWhiteboardConfigVo;
import ims.emergency.vo.UserAssessmentForWhiteboardConfigVoCollection;
import ims.emergency.vo.WhiteBoardAssessmentConfigVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Image;
import ims.framework.utils.ImagePath;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		WhiteBoardAssessmentConfigVo whiteBoardAssessToSave = populateDataFromScreen(form.getGlobalContext().Emergency.getWhiteBoardAssessmentConfig());
		
		String[] errors = getUIErrors();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return ;
		}
		
		
		form.getGlobalContext().Emergency.setWhiteBoardAssessmentConfig(whiteBoardAssessToSave);
		engine.close(DialogResult.OK);
	}
	
	private WhiteBoardAssessmentConfigVo populateDataFromScreen(WhiteBoardAssessmentConfigVo whiteBoardAssessmentConfig)
	{
		if (whiteBoardAssessmentConfig==null)
			whiteBoardAssessmentConfig=new WhiteBoardAssessmentConfigVo();
		else
			whiteBoardAssessmentConfig=(WhiteBoardAssessmentConfigVo) whiteBoardAssessmentConfig.clone();
		
		whiteBoardAssessmentConfig.setName(form.qmbAssessment().getValue()!=null ? form.qmbAssessment().getEditedText() : null);
		
		whiteBoardAssessmentConfig.setIcon((AppImageRefVo) form.qmbIcon().getValue());
		
		whiteBoardAssessmentConfig.setMAXIMSMappingValue(form.txtTaxonomy().getValue());
		
		return whiteBoardAssessmentConfig;
	}
	
	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.qmbAssessment().getValue()==null)
			errors.add("Assessment is mandatory!");
		
		if (form.qmbIcon().getValue()==null)
			errors.add("Icon is mandatory!");
		
		if (form.txtTaxonomy().getValue()==null)
			errors.add("Taxonomy is mandatory!");
		
		
		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}
	
	@Override
	protected void onQmbIconValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		Image img = form.qmbIcon().getValue();
		if (img != null)
		{
			form.imgAssessment().setValue(img);
		}
		
		updateControlState();
	}
	
	@Override
	protected void onQmbIconTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.qmbIcon().clear();
		Image[] images = engine.getRegisteredImages();
		
		Image img = null;
		for (int i = 0; i < images.length; i++)
		{
			img = images[i];
			
			if (img instanceof ImagePath)
				continue;
			
			if (img.getImagePath().toLowerCase().indexOf(value.toLowerCase()) != -1
				&& img.isActive())
			{
				form.qmbIcon().newRow(img, img.getImagePath());
			}
		}
		int size = form.qmbIcon().getValues().size();
		if (size == 1)
		{
			form.qmbIcon().setValue((Image) form.qmbIcon().getValues().get(0));
			form.imgAssessment().setValue((Image) form.qmbIcon().getValues().get(0));
		}
		else if (size > 1)
		{
			form.qmbIcon().showOpened();
		}
	}
	
	@Override
	protected void onQmbAssessmentTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateAssessmentQueryCombo(value);
	}
	
	private void populateAssessmentQueryCombo(String value)
	{
		form.qmbAssessment().clear();
		
		UserAssessmentForWhiteboardConfigVoCollection coll = domain.listAssessments(value);

		for (int i = 0; i < coll.size(); i++)
		{
			UserAssessmentForWhiteboardConfigVo userAssess = coll.get(i);
			form.qmbAssessment().newRow(userAssess, userAssess.getName().toString());
		}
		if (coll.size() == 1)
		{
			form.qmbAssessment().setValue(coll.get(0));
		}
		else if (coll.size() > 1)
		{
			form.qmbAssessment().showOpened();
		}
		
	}
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		form.qmbAssessment().setEnabled(form.getGlobalContext().Emergency.getWhiteBoardAssessmentConfig()==null);
		form.txtTaxonomy().setEnabled(form.getGlobalContext().Emergency.getWhiteBoardAssessmentConfig()==null);
		open();
	}
	
	private void open()
	{	
		populateScreenFromData(form.getGlobalContext().Emergency.getWhiteBoardAssessmentConfig());
		updateControlState();
	}
	
	private void updateControlState()
	{
		form.imgAssessment().setVisible(form.qmbIcon().getValue()!=null);
	}
	private void populateScreenFromData(WhiteBoardAssessmentConfigVo whiteBoardAssessmentConfig)
	{
		clearScreen();
		if (whiteBoardAssessmentConfig==null)
			return;
		
		if (whiteBoardAssessmentConfig.getName() != null)
		{
			UserAssessmentForWhiteboardConfigVo tempUA = new UserAssessmentForWhiteboardConfigVo();
			form.qmbAssessment().newRow(tempUA, whiteBoardAssessmentConfig.getName());
			form.qmbAssessment().setValue(tempUA);
		}
		
		if (whiteBoardAssessmentConfig.getIcon() != null)
		{
			Image img =engine.getRegisteredImage(whiteBoardAssessmentConfig.getIcon().getID_AppImage());
			form.qmbIcon().newRow(img, img.getImagePath());
			form.qmbIcon().setValue(img);
			form.imgAssessment().setValue(img);
		}
		
		form.txtTaxonomy().setValue(whiteBoardAssessmentConfig.getMAXIMSMappingValue());
	
	}
	private void clearScreen()
	{
		form.qmbAssessment().setValue(null);
		form.qmbIcon().setValue(null);
		form.imgAssessment().setValue(null);
		form.txtTaxonomy().setValue(null);
	}
	
}
