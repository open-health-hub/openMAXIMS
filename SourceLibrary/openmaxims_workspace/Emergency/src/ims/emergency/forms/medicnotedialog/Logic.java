//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.medicnotedialog;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.MedicNotesVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open() 
	{
		populateScreenFromData();
		updateControlsState();
	}

	private void updateControlsState() 
	{
		form.chkDefault().setVisible(form.getLocalContext().getDefaultNoteIsNotNull());
		
		form.ccAuthoring().setEnabledAuthoringHCP(form.getGlobalContext().Emergency.getMedicNote() != null && form.getGlobalContext().Emergency.getMedicNote().getID_MedicNotes() == null);
		form.ccAuthoring().setEnabledDateTime(form.getGlobalContext().Emergency.getMedicNote() != null && form.getGlobalContext().Emergency.getMedicNote().getID_MedicNotes() == null);
	}

	private void populateScreenFromData() 
	{
		if(form.getGlobalContext().Emergency.getMedicNote() == null)
			return;
		
		if(form.getGlobalContext().Emergency.getMedicNote().getID_MedicNotesIsNotNull())
		{
			form.ccAuthoring().setValue(form.getGlobalContext().Emergency.getMedicNote().getAuthoringInformation());
			form.richTextNote().setValue(form.getGlobalContext().Emergency.getMedicNote().getMedicNote());
		}
	}

	private void initialize() 
	{
		form.ccAuthoring().initializeComponent();
		form.ccAuthoring().setIsRequiredPropertyToControls(true);
		
		if(form.getGlobalContext().Emergency.getMedicNoteIsNotNull() && form.getGlobalContext().Emergency.getMedicNote().getPresentingProblemIsNotNull())
		{
			form.getLocalContext().setDefaultNote(domain.getDefaultTriageNote(form.getGlobalContext().Emergency.getMedicNote().getPresentingProblem()));
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			engine.close(DialogResult.OK);
	}

	private boolean save() 
	{
		MedicNotesVo note = populateDatafromScreen();
		
		String[] errors = note.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getGlobalContext().Emergency.setMedicNote(domain.saveNote(note));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		} 
		
		return true;
	}

	private MedicNotesVo populateDatafromScreen() 
	{
		MedicNotesVo note = null;
		
		if(form.getGlobalContext().Emergency.getMedicNote() == null)
		{
			note = new MedicNotesVo();
		}
		else
		{
			note = (MedicNotesVo) form.getGlobalContext().Emergency.getMedicNote().clone();
		}
		
		note.setAuthoringInformation(form.ccAuthoring().getValue());
		note.setMedicNote(form.richTextNote().getValue());
		
		return note;
	}

	@Override
	protected void onChkDefaultValueChanged() throws PresentationLogicException 
	{
		if(form.chkDefault().getValue())
		{
			form.richTextNote().pasteText(form.getLocalContext().getDefaultNote().getDefaultClinicianNote());
		}
	}
}
