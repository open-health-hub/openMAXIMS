//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.dischargedetails_outcome;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.EmergencyAttendanceOutcomeVo;
import ims.emergency.vo.TrackingAttendanceOutcomeVo;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo;
import ims.emergency.vo.enums.DischargeDetails_CustomEvents;
import ims.emergency.vo.lookups.AttendanceOutcome;
import ims.emergency.vo.lookups.ReasonForBreach;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

import java.util.ArrayList;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final int ED_DISCHARGE_SUMMARY_IMSID = 346; 
	private static final String TRACKING_SEED = "Tracking_id";

	
	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Component interface functions
	//-----------------------------------------------------------------------------------------------------------------------------------------

	public void setValue(ims.core.admin.vo.CareContextRefVo careContext)
	{
		// Set CareContext local context
		form.getLocalContext().setCareContext(careContext);
		
		form.getLocalContext().setIsDischarged(Boolean.FALSE);
		
		// Present form to screen
		open();
	}
	

	public void setReadOnly(Boolean readOnly)
	{
		form.getLocalContext().setReadOnly(readOnly);
		
		updateControlsState();
	}


	public DischargeDetails_CustomEvents getCustomEvent()
	{
		return form.getLocalContext().getCustomEvent();
	}


	public void clearCustomEvent()
	{
		form.getLocalContext().setCustomEvent(null);
	}


	public Boolean getRecordedDischarge()
	{
		if (form.getLocalContext().getIsDischarged() == null)
			return Boolean.FALSE;
		
		return Boolean.TRUE.equals(form.getLocalContext().getIsDischarged());
	}
	

	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers
	//-----------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		// Nothing to do here - it's a component
		// Keep this event handler for data binding purposes
	}

	@Override
	protected void onFormModeChanged()
	{
		form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.FORMMODECHANGED);

		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{	
		if (form.getForms().Emergency.ReasonForBreach.equals(formName) && DialogResult.OK.equals(result))
		{
			if (save(form.getGlobalContext().Emergency.getReasonForBreach()))
				open();
		}
		else if (form.getForms().Emergency.TrackingStatusDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			//WDEV-17408
			if (DischargeDetails_CustomEvents.UNDO.equals(form.getLocalContext().getCustomEvent()))
			{
				if (save(null))
				{
					open();
				}
			}
			else if (removeBed(form.getGlobalContext().Emergency.getTrackingAttendanceStatus()))
				open();
		}
		
		//WDEV-17337
		if (DialogResult.OK.equals(result))
		{
			form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.SAVE);
			form.fireCustomControlValueChanged();
		}
	}


	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		if (DialogResult.NO.equals(result))
		{
			form.cmbOutcome().setValue(null);
		}
		
		updateControlsState();		
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		// Prepare screen for creating a new instance
		newInstance();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		// Prepare screen for editing an instance
		updateInstance();
	}

	@Override
	protected void onChkEnterDischargeOutcomeValueChanged() throws PresentationLogicException
	{
		//WDEV-17822
		String[] errors = validateOnCheckboxValueChanged();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
		}
		
		form.getLocalContext().setCustomEvent(null);
		
		// Default in values for discharge outcome
		defaultDischargeOutcomeValue();
		
		form.getLocalContext().setIsDischarged(form.chkEnterDischargeOutcome().getValue());
		
		// Update controls state
		updateControlsState();
	}

	//WDEV-17822
	private String[] validateOnCheckboxValueChanged()
	{
		if (form.getLocalContext().getRecord() == null)
			return null;
		
		boolean savedRecordHasOutcome = form.getLocalContext().getRecord().getAttendance() != null && form.getLocalContext().getRecord().getAttendance().getOutcome() != null;
		
		ArrayList<String> errorList = new ArrayList<String>();
		
		//WDEV-17822 
		if (Boolean.FALSE.equals(ConfigFlag.GEN.ED_CAN_DISCHARGE_FROM_ED_WITHOUT_GP_ADVICE.getValue()) && (Boolean.TRUE.equals(form.chkEnterDischargeOutcome().getValue()) || savedRecordHasOutcome))//WDEV-17394 //WDEV-17455
		{
			if (Boolean.FALSE.equals(domain.dischargePlanningAdviceHasComments(form.getLocalContext().getRecord().getAttendance().getCareContext())))
				errorList.add("Patient cannot be departed until the 'Actions, Comments and advice for GP' on Discharge Information is completed for the attendance. ");//WDEV-17920
		}
		
		if (Boolean.FALSE.equals(ConfigFlag.GEN.ED_CAN_DISCHARGE_FROM_ED_WITHOUT_CODING.getValue()) && (Boolean.TRUE.equals(form.chkEnterDischargeOutcome().getValue()) || savedRecordHasOutcome))//WDEV-17394 //WDEV-17455
		{
			if (Boolean.FALSE.equals(domain.hasDiagnosesTreatmentsInterventionsOrInvestigations(form.getGlobalContext().Core.getPatientShort(), form.getLocalContext().getRecord().getAttendance().getCareContext())))
				errorList.add("Patient cannot be departed until the coding details are completed for the attendance.");//WDEV-17920
		}
		
		return errorList.toArray(new String[errorList.size()]);
	}
	
	@Override
	protected void onCmbOutcomeValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(null);
		
		if (AttendanceOutcome.MORTUARY.equals(form.cmbOutcome().getValue()))
		{
			// Display confirmation dialog
			engine.showMessage("Are you sure you wish to select Mortuary?", "Warning", MessageButtons.YESNO);
			return;
		}
		
		if (! (AttendanceOutcome.MORTUARY.equals(form.cmbOutcome().getValue())
				|| AttendanceOutcome.BID.equals(form.cmbOutcome().getValue())
				|| AttendanceOutcome.DOA.equals(form.cmbOutcome().getValue())
				|| AttendanceOutcome.DID.equals(form.cmbOutcome().getValue())))
		{
			if (form.getLocalContext().getRecord().getAttendance().getPatient().getDod() == null)
			{
				form.dteDateOfDeath().setValue(null);
			}
		}
		
		// Update controls state
		updateControlsState();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-17337
		form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.SAVE);
		form.fireCustomControlValueChanged();
		
		// If saving an instance is successful then refresh the screen
		if (save(null))
			open();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-17337
		form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.CANCEL);
		form.fireCustomControlValueChanged();
		
		form.getLocalContext().setIsDischarged(null); 		//wdev-17165
		
		// Refresh the screen
		open();
	}

	
	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Form Presentation functions
	//-----------------------------------------------------------------------------------------------------------------------------------------
	
	
	/**
	 * Function used to present form to screen
	 */
	public void open()
	{
		// Clear screen
		clearInstanceControls();
		
		// Populate instance controls
		form.getLocalContext().setRecord(domain.getTrackingAttendanceOutcomeVo(form.getLocalContext().getCareContext()));
		populateInstanceControls(form.getLocalContext().getRecord());
		
		// Set form to VIEW mode
		form.setMode(FormMode.VIEW);
	}
	
	
	/**
	 * Function used to prepare screen for a new outcome
	 */
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		// Clear screen controls
		clearInstanceControls();
		
		// Default in Patient Category & Conclusion Date Time
		form.cmbCategory().setValue(form.getLocalContext().getRecord() != null ? form.getLocalContext().getRecord().getAttendance().getEmergencyEpisode().getCategory() : null);
		form.dtimConclusion().setValue(new DateTime());
		
		// Set Date of death from Patient (if any)
		form.dteDateOfDeath().setValue(form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getDod() : null);
		
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}

	
	/**
	 * Function used to prepare screen for editing the outcome for the emergency attendance
	 */
	public void updateInstance()
	{
		// Default in Patient Category & Patient DOD (if that is the case)
		form.cmbCategory().setValue(form.getLocalContext().getRecord() != null ? form.getLocalContext().getRecord().getAttendance().getEmergencyEpisode().getCategory() : null);
		form.dteDateOfDeath().setValue(form.getGlobalContext().Core.getPatientShort() != null && form.getGlobalContext().Core.getPatientShort().getDod() != null ? form.getGlobalContext().Core.getPatientShort().getDod() : null);
		
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}
	
	
	/**
	 * Function used to default in values for discharge outcome
	 */
	private void defaultDischargeOutcomeValue()
	{
		// Default in departure date time
		form.dtimDischargeTime().setValue(new DateTime());
		
		// Default in Authoring HCP & Authoring Date / Time
		form.ccAuthoring().initializeComponent();
	}

	
	/**
	 * Function used to save to database the Tracking Attendance Outcome record 
	 * @param reasonForBreach 
	 */
	public boolean save(ReasonForBreach reasonForBreach) throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			// Populate data from screen
			// WDEV-17119
			TrackingAttendanceOutcomeVo recordToSave = null;
			String[] errors = null;
			ims.emergency.vo.enums.Discharge_Action action = null; //wdev-17949
			if (DischargeDetails_CustomEvents.UNDO.equals(form.getLocalContext().getCustomEvent()))
			{
				form.getLocalContext().setCustomEvent(null);
				recordToSave = populateDataToUndoDischarge(form.getLocalContext().getRecord());
				action = ims.emergency.vo.enums.Discharge_Action.UNDO_DISCHARGE;  //wdev-17949
				errors = recordToSave.validate();

				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return false;
				}
			}
			else
			{
				recordToSave = populateDataFromInstanceControls(form.getLocalContext().getRecord(), reasonForBreach);
				
				// Validate data to save
				errors = recordToSave.validate(validateUIRules());

				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return false;
				}

				if (recordToSave.getAttendance().getRegistrationDateTime() != null && recordToSave.getAttendance().getDischargeDateTime() != null)
				{
					int minutesInEmergency = DateTime.minutesDiff(recordToSave.getAttendance().getRegistrationDateTime(), recordToSave.getAttendance().getDischargeDateTime());
					if (minutesInEmergency > ConfigFlag.GEN.ED_WAIT_TIME_REQUIRING_BREACH_REASON.getValue() * 60
							&& recordToSave.getReasonForBreach() == null)
					{
						engine.open(form.getForms().Emergency.ReasonForBreach);
						return false;
					}
				}
				//wdev-17949
				if( recordToSave != null && Boolean.TRUE.equals(recordToSave.getIsDischarged()))
					action = ims.emergency.vo.enums.Discharge_Action.DISCHARGE;  //wdev-17949
				//----------
			}

			// Attempt save
			try 
			{
				domain.saveTrackingAttendanceOutcome(recordToSave,action);
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			}	//wdev-17949
			
			//WDEV-17513
			PatientShort ps = form.getGlobalContext().Core.getPatientShort();
			ps.setDod(recordToSave.getAttendance().getPatient().getDod());//WDEV-18074
			form.getGlobalContext().Core.setPatientShort(ps);
			//WDEV-17513

			return true;
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
	}

	/**
	 * Function used to clear instance controls
	 */
	public void clearInstanceControls()
	{
		// Clear patient category
		form.cmbCategory().setValue(null);
		
		// Clear conclusion details
		form.dtimConclusion().setValue(null);
		
		// Clear Decision to Admit details
		form.lblRequestedBy().setValue("-");
		form.lblDecisionToAdmit().setValue("-");
		form.lblBedType().setValue("-");
		form.lblAvailableBedTime().setValue("-");
		
		// Un-check discharge outcome details
		form.chkEnterDischargeOutcome().setValue(false);
		
		// Clear Discharge Outcome details
		form.cmbOutcome().setValue(null);
		form.txtDestination().setValue(null);
		form.dteDateOfDeath().setValue(null);
		form.dtimDischargeTime().setValue(null);
		
		// Clear authoring info
		form.ccAuthoring().setValue(null);
	}
	

	/**
	 * Function used to perform custom validation on data on screen
	 */
	private String[] validateUIRules()
	{
		// Test logic - record must be present
		if (form.getLocalContext().getRecord() == null)
			throw new CodingRuntimeException("Logical error - How the hell did you enter this method without a record?");
		
		boolean savedRecordHasOutcome = form.getLocalContext().getRecord().getAttendance() != null && form.getLocalContext().getRecord().getAttendance().getOutcome() != null;
		
		ArrayList<String> errorList = new ArrayList<String>();
		
		AttendanceOutcome outcome = form.cmbOutcome().getValue();

		DateTime conclusionDateTime = form.dtimConclusion().getValue();
		DateTime dischargeDateTime = form.dtimDischargeTime().getValue();
		DateTime registrationDateTime = form.getLocalContext().getRecord().getAttendance().getRegistrationDateTime();
		
		//WDEV-17822
		if (!AttendanceOutcome.DID_NOT_WAIT.equals(form.cmbOutcome().getValue()) && Boolean.FALSE.equals(ConfigFlag.GEN.ED_CAN_DISCHARGE_FROM_ED_WITHOUT_GP_ADVICE.getValue()) && (Boolean.TRUE.equals(form.chkEnterDischargeOutcome().getValue()) || savedRecordHasOutcome))//WDEV-17394 //WDEV-17455
		{
			if (Boolean.FALSE.equals(domain.dischargePlanningAdviceHasComments(form.getLocalContext().getRecord().getAttendance().getCareContext())))
				errorList.add("Patient cannot be departed until the 'Actions, Comments and advice for GP' on Discharge Information is completed for the attendance. ");//WDEV-17920
		}
		
		if (!AttendanceOutcome.DID_NOT_WAIT.equals(form.cmbOutcome().getValue()) && Boolean.FALSE.equals(ConfigFlag.GEN.ED_CAN_DISCHARGE_FROM_ED_WITHOUT_CODING.getValue()) && (Boolean.TRUE.equals(form.chkEnterDischargeOutcome().getValue()) || savedRecordHasOutcome))//WDEV-17394 //WDEV-17455
		{
			if (Boolean.FALSE.equals(domain.hasDiagnosesTreatmentsInterventionsOrInvestigations(form.getGlobalContext().Core.getPatientShort(), form.getLocalContext().getRecord().getAttendance().getCareContext())))
				errorList.add("Patient cannot be departed until the coding details are completed for the attendance.");//WDEV-17920
		}
		
		// Test outcome and discharge date time mandatory fields
		if (form.chkEnterDischargeOutcome().getValue() == true || savedRecordHasOutcome)
		{
			if (outcome == null)
				errorList.add("Outcome is mandatory.");
			
			if (dischargeDateTime == null)
				errorList.add("Departure Time is mandatory.");			//wdev-17422

			if (form.ccAuthoring().getValue() == null)
			{
				errorList.add("Authoring HCP & Authoring Date / Time are mandatory.");
			}
			else
			{
				if (form.ccAuthoring().getValue().getAuthoringHcp() == null)
					errorList.add("Authoring HCP is mandatory.");
				
				if (form.ccAuthoring().getValue().getAuthoringDateTime() == null)
					errorList.add("Authoring Date / Time is mandatory.");
			}
		}
		
		// Test date of death mandatory field
		if (AttendanceOutcome.MORTUARY.equals(outcome) || AttendanceOutcome.BID.equals(outcome) || AttendanceOutcome.DOA.equals(outcome) || AttendanceOutcome.DID.equals(outcome))
		{
			if (form.dteDateOfDeath().getValue() == null)
				errorList.add("Date of Death is mandatory.");
		}
		
		
		// Test Conclusion Date / Time to be filled in (marked as mandatory)
		if (conclusionDateTime == null)
			errorList.add("Conclusion Date / Time is mandatory.");
		// Test Conclusion Date / Time to be set after Registration Date / Time
		if (conclusionDateTime != null && !registrationDateTime.isLessOrEqualThan(conclusionDateTime))
			errorList.add("Conclusion Date / Time must be set after attendance Registration Date / Time.");
		// Test Discharge Date / Time to be set after Registration Date / Time
		if (dischargeDateTime != null && !registrationDateTime.isLessOrEqualThan(dischargeDateTime))
			errorList.add("Departure Time must be set after attendance Registration Date / Time.");  //wdev-17422
		// Test Discharge Date / Time to be set after Conclusion Date / Time
		if (conclusionDateTime != null && dischargeDateTime != null && !conclusionDateTime.isLessOrEqualThan(dischargeDateTime))
			errorList.add("Departure Time must be set after Conclusion Date / Time");					//wdev-17422
		
		if (conclusionDateTime != null && conclusionDateTime.isGreaterThan(new DateTime()))
			errorList.add("Conclusion Date / Time should not have a value in the future."); //wdev-18002
		
		if (dischargeDateTime != null && dischargeDateTime.isGreaterThan(new DateTime()))
			errorList.add("Departure Time should not have a value in the future.");		//wdev-18002						//wdev-17422
		
		if (form.dteDateOfDeath().getValue() == null && form.getGlobalContext().Core.getPatientShort().getDod() != null)
			errorList.add("Date of Death is mandatory for this patient.");
		
		if (form.dteDateOfDeath().getValue() != null && form.dteDateOfDeath().getValue().isGreaterThan(new Date()))
			errorList.add("Date of Death should not have a value in the future.");
		
		
		return errorList.toArray(new String[errorList.size()]);
	}


	/**
	 * Function used to update the controls state
	 */
	public void updateControlsState()
	{
		TrackingAttendanceOutcomeVo record = form.getLocalContext().getRecord();

		boolean recordSelected = record != null;
		boolean hasConclusionDateTime = record != null && record.getAttendance().getConclusionDateTime() != null;
		//wdev-17598
		boolean dnwAttendance = record != null && record.getCurrentDNWIsNotNull()
				&& record.getCurrentDNW().getCurrentStatus() != null 
				&& record.getCurrentDNW().getCurrentStatus().getCalledAmount() != 0 
				&& record.getCurrentDNW().getCurrentStatus().getCalledAmount() == ConfigFlag.DOM.AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER.getValue();

		boolean hasDischargeDate = record != null && record.getAttendance().getDischargeDateTime() != null;//WDEV-17119
		boolean hasOutcome = record != null && record.getAttendance().getOutcome() != null;
		boolean isPatientAdmittedInWard = form.getGlobalContext().Core.getPatientShortIsNotNull() && form.getGlobalContext().Core.getPatientShort().getWardIsNotNull();
		
		boolean isReadOnly = Boolean.TRUE.equals(form.getLocalContext().getReadOnly());
		boolean editMode = FormMode.EDIT.equals(form.getMode());
		
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(!isReadOnly && recordSelected && !hasConclusionDateTime && !dnwAttendance);
			form.btnNew().setEnabled(!isReadOnly && recordSelected && !hasConclusionDateTime && !dnwAttendance);
		}
		else if (FormMode.EDIT.equals(form.getMode()))
		{
			form.chkEnterDischargeOutcome().setEnabled(true);
			form.chkEnterDischargeOutcome().setVisible(recordSelected && !hasOutcome);
		}
		
		form.pnlAttendanceOutcome().setVisible((!editMode && recordSelected && hasOutcome) || (editMode && ((recordSelected && hasOutcome) || form.chkEnterDischargeOutcome().getValue() == true)));

		form.lblOutcome().setVisible((!editMode && recordSelected && hasOutcome) || (editMode && ((recordSelected && hasOutcome) || form.chkEnterDischargeOutcome().getValue() == true)));
		form.cmbOutcome().setVisible((!editMode && recordSelected && hasOutcome) || (editMode && ((recordSelected && hasOutcome) || form.chkEnterDischargeOutcome().getValue() == true)));
		form.cmbOutcome().setEnabled(editMode);
		
		form.lblDestination().setVisible((!editMode && recordSelected && hasOutcome) || (editMode && ((recordSelected && hasOutcome) || form.chkEnterDischargeOutcome().getValue() == true)));
		form.txtDestination().setVisible((!editMode && recordSelected && hasOutcome) || (editMode && ((recordSelected && hasOutcome) || form.chkEnterDischargeOutcome().getValue() == true)));
		form.txtDestination().setEnabled(editMode);
		
		form.lblDOD().setVisible((!editMode && recordSelected && hasOutcome) || (editMode && ((recordSelected && hasOutcome) || form.chkEnterDischargeOutcome().getValue() == true)));
		form.dteDateOfDeath().setVisible((!editMode && recordSelected && hasOutcome) || (editMode && ((recordSelected && hasOutcome) || form.chkEnterDischargeOutcome().getValue() == true)));
		form.dteDateOfDeath().setEnabled(editMode && (form.getGlobalContext().Core.getPatientShort().getDod() != null
										|| (AttendanceOutcome.MORTUARY.equals(form.cmbOutcome().getValue()) || AttendanceOutcome.BID.equals(form.cmbOutcome().getValue())
												|| AttendanceOutcome.DOA.equals(form.cmbOutcome().getValue()) || AttendanceOutcome.DID.equals(form.cmbOutcome().getValue()))));
		form.dteDateOfDeath().setRequired(editMode && (form.getGlobalContext().Core.getPatientShort().getDod() != null
										|| (AttendanceOutcome.MORTUARY.equals(form.cmbOutcome().getValue()) || AttendanceOutcome.BID.equals(form.cmbOutcome().getValue())
												|| AttendanceOutcome.DOA.equals(form.cmbOutcome().getValue()) || AttendanceOutcome.DID.equals(form.cmbOutcome().getValue()))));
		
		form.lblDischargeTime().setVisible((!editMode && recordSelected && hasOutcome) || (editMode && ((recordSelected && hasOutcome) || form.chkEnterDischargeOutcome().getValue() == true)));
		form.dtimDischargeTime().setVisible((!editMode && recordSelected && hasOutcome) || (editMode && ((recordSelected && hasOutcome) || form.chkEnterDischargeOutcome().getValue() == true)));
		form.dtimDischargeTime().setEnabled(editMode);
		
		
		form.setccAuthoringVisible((!editMode && recordSelected && hasOutcome) || (editMode && ((recordSelected && hasOutcome) || form.chkEnterDischargeOutcome().getValue() == true)));

		form.ccAuthoring().setEnabledAuthoringHCP(editMode && !isReadOnly);
		form.ccAuthoring().setEnabledDateTime(editMode && !isReadOnly);
		form.ccAuthoring().setIsRequiredPropertyToControls(editMode && !isReadOnly);
		
		//WDEV-16006
		form.btnBookAppointment().setVisible(FormMode.VIEW.equals(form.getMode()) && false);	
		form.btnBookAppointment().setEnabled(FormMode.VIEW.equals(form.getMode()) && !isReadOnly && recordSelected && false);
		
		//WDEV-17119
		EmergencyAttendanceOutcomeVo latestEmergencyAttendance =(form.getGlobalContext().Core.getPatientShort()!=null ? domain.getLatestEmergencyAttendance(form.getGlobalContext().Core.getPatientShort()):null);
		boolean isLatestAttendance = (record!=null ? record.getAttendance().equals(latestEmergencyAttendance) : false);
		//form.btnUndo().setVisible(FormMode.VIEW.equals(form.getMode()) && !Boolean.TRUE.equals(form.getLocalContext().getIsHistoryMode()) && recordSelected && hasConclusionDateTime && engine.hasRight(AppRight.ED_CAN_UNDO_ED_DISCHARGE));
		form.btnUndo().setVisible(FormMode.VIEW.equals(form.getMode()) && isLatestAttendance && recordSelected && hasDischargeDate && !isPatientAdmittedInWard && engine.hasRight(AppRight.ED_CAN_UNDO_ED_DISCHARGE));
		//form.btnUndo().setEnabled(FormMode.VIEW.equals(form.getMode()) && !Boolean.TRUE.equals(form.getLocalContext().getIsHistoryMode()) && recordSelected && hasConclusionDateTime && engine.hasRight(AppRight.ED_CAN_UNDO_ED_DISCHARGE));
		
		//WDEV-17389
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && recordSelected && hasConclusionDateTime);//wdev-17598
		
		form.btnPrintDischarge().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getRecord() != null && Boolean.TRUE.equals(form.getLocalContext().getRecord().getIsDischarged()));
		form.btnPrintDischarge().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getRecord() != null && Boolean.TRUE.equals(form.getLocalContext().getRecord().getIsDischarged()));
		form.btnRemoveBedRequest().setVisible(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getRecord() != null && Boolean.TRUE.equals(form.getLocalContext().getRecord().getBedAvailabilityIsNotNull())); //wdev-17254
		form.btnRemoveBedRequest().setEnabled(FormMode.VIEW.equals(form.getMode()) && form.getLocalContext().getRecord() != null && Boolean.TRUE.equals(form.getLocalContext().getRecord().getBedAvailabilityIsNotNull()) && !isReadOnly && !hasOutcome); //WDEV-17632 wdev-17254
	}


	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Data binding functions for controls
	//-----------------------------------------------------------------------------------------------------------------------------------------


	/**
	 * Function used to populate data to instance controls
	 */
	private void populateInstanceControls(TrackingAttendanceOutcomeVo record)
	{
		// Clear instance controls
		clearInstanceControls();

		// Populate Date of Death from patient
		form.dteDateOfDeath().setValue(form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getDod() : null);
		
		// Check record parameter
		if (record == null)
			return;
		
		// Populate instance controls with data from record
		form.cmbCategory().setValue(record.getAttendance().getEmergencyEpisode().getCategory());
		
		// Populate conclusion date time for attendance
		form.dtimConclusion().setValue(record.getAttendance().getConclusionDateTime());
		
		// Populate Decision to Admit details
		if (record.getBedAvailability() != null && record.getBedAvailability().getRequestedBy() != null)
			form.lblRequestedBy().setValue(record.getBedAvailability().getRequestedBy().toString());
		
		if (record.getAssociatedPendingEmergencyAdmission() != null && !EmergencyAdmissionStatus.CANCELLED.equals(record.getAssociatedPendingEmergencyAdmission().getAdmissionStatus()))
		{
			if (record.getAssociatedPendingEmergencyAdmission().getDTADateTime() != null)
				form.lblDecisionToAdmit().setValue(record.getAssociatedPendingEmergencyAdmission().getDTADateTime().toString());
			if (record.getAssociatedPendingEmergencyAdmission().getBedTypeRequested() != null)
				form.lblBedType().setValue(record.getAssociatedPendingEmergencyAdmission().getBedTypeRequested().getText());
		}
		
		if (record.getBedAvailability() != null && record.getBedAvailability().getAvailableDateTime() != null)
			form.lblAvailableBedTime().setValue(record.getBedAvailability().getAvailableDateTime().toString());
		
		if (record.getAttendance().getOutcome() != null)
		{
			form.cmbOutcome().setValue(record.getAttendance().getOutcome());
			form.txtDestination().setValue(record.getAttendance().getDestination());
			form.dteDateOfDeath().setValue(record.getAttendance().getPatient().getDod());
			form.dtimDischargeTime().setValue(record.getAttendance().getDischargeDateTime());
		}
		
		form.ccAuthoring().setValue(record.getAttendance().getDischargingHCP());
	}


	/**
	 *	Function used to retrieve data from instance controls
	 * @param reasonForBreach 
	 */
	private TrackingAttendanceOutcomeVo populateDataFromInstanceControls(TrackingAttendanceOutcomeVo record, ReasonForBreach reasonForBreach)
	{
		if (record == null)
			throw new CodingRuntimeException("Trackind Attendace record can not be created in this form.");
		
		if (record.getAttendance() == null)
			throw new CodingRuntimeException("Attendance Outcome record can not be created in this form.");
		
		if (record.getAttendance().getEmergencyEpisode() == null)
			throw new CodingRuntimeException("Emergency Episode record can not be created in this form.");
		
		
		TrackingAttendanceOutcomeVo recordToSave = (TrackingAttendanceOutcomeVo) record.clone();
		
		recordToSave.getAttendance().getEmergencyEpisode().setCategory(form.cmbCategory().getValue());
		
		recordToSave.getAttendance().setConclusionDateTime(form.dtimConclusion().getValue());
		recordToSave.setReasonForBreach(reasonForBreach);
		
		//WDEV-17389
		TrackingForClinicianWorklistAndTriageVo tempTVo = domain.getTrackingForClinicianWorklistAndTriageVo(recordToSave);
//		if (form.cmbBedType().getValue() != null )
//		{
//			PendingEmergencyAdmissionForDischargeVo tempPendingEmAdmVo = recordToSave.getAssociatedPendingEmergencyAdmission();
//			if( tempPendingEmAdmVo == null )
//				tempPendingEmAdmVo = new PendingEmergencyAdmissionForDischargeVo();
//			
//			tempPendingEmAdmVo.setAdmissionStatus(EmergencyAdmissionStatus.DTA);
//			tempPendingEmAdmVo.setDTADateTime(form.dtimConclusion().getValue());
//			tempPendingEmAdmVo.setAdmissionType(AdmissionType.PLANNED);
//			
//			LocationLiteVo tempVo = (LocationLiteVo) engine.getCurrentLocation();
//			if( tempVo != null)//WDEV-17615
//			{
//				//WDEV-17615
//				LocationLiteVo currentHospital = domain.getCurrentHospital(tempVo);
//				tempPendingEmAdmVo.setCurrentLocation(currentHospital);
//			}
//			
//			tempPendingEmAdmVo.setBedTypeRequested(form.cmbBedType().getValue());
			
//			if( !tempPendingEmAdmVo.getPasEventIsNotNull())
//			{
//				PasEventShortVo pasVo = new PasEventShortVo();
//				if( recordToSave.getAttendanceIsNotNull() && recordToSave.getAttendance().getRegistrationDateTimeIsNotNull() )
//					pasVo.setEventDateTime( recordToSave.getAttendance().getRegistrationDateTime() );
//				if( tempTVo != null)
//				{
//					pasVo.setPatient(domain.getPatientShort( tempTVo.getPatient()));
//								
//				}
//				pasVo.setPasEventId(new DateTime().toString());
//				LocationLiteVo templocVo = (LocationLiteVo) engine.getCurrentLocation();
//				if( templocVo != null )//WDEV-17615
//				{
//					//WDEV-17615
//					LocationLiteVo currentHospital = domain.getCurrentHospital(templocVo);
//					pasVo.setLocation(currentHospital);	
//				}
//				pasVo.setSpecialty(Specialty.EMERGENCY);
//				tempPendingEmAdmVo.setPasEvent(pasVo);
//				
//				
//				
//			}
//			recordToSave.setAssociatedPendingEmergencyAdmission(tempPendingEmAdmVo);
			
//			if( tempTVo != null && recordToSave != null  && !recordToSave.getBedAvailabilityIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getRecord().getIsDischarged()))//WDEV-17408
//			{
//				BedAvailabilityVo bedTrackVo = new BedAvailabilityVo();
//				bedTrackVo.setPatient( tempTVo.getPatient());
//				bedTrackVo.setEpisode( tempTVo.getEpisode().getEpisodeOfCare());
//				bedTrackVo.setAttendance(tempTVo.getAttendance().getCareContext());
//				bedTrackVo.setTrackingArea(recordToSave.getCurrentArea());
//				Object user = domain.getMosUser();
//				if( user instanceof MemberOfStaffLiteVo)
//				{
//					bedTrackVo.setRequestedBy((MemberOfStaffLiteVo)user);
//				}
//				
//				bedTrackVo.setAwaitingDateTime(new DateTime());
//				recordToSave.setBedAvailability(bedTrackVo);
//			}
//		}
		// WDEV-17231 //WDEV-17389
		if (form.chkEnterDischargeOutcome().isVisible() && form.chkEnterDischargeOutcome().getValue() == false) //WDEV-17389
		{	
			// Create new current status (Decision To Admit) for tracking
			TrackingAttendanceStatusVo newStatus = new TrackingAttendanceStatusVo();

			newStatus.setPatient(tempTVo.getPatient());
			newStatus.setEpisode(tempTVo.getEpisode().getEpisodeOfCare());
			newStatus.setAttendance(tempTVo.getAttendance().getCareContext());
			newStatus.setTrackingArea(tempTVo.getCurrentArea());
			newStatus.setStatusDatetime(new DateTime());
			newStatus.setCreatedBy((MemberOfStaffRefVo) domain.getMosUser());
			newStatus.setStatus(TrackingStatus.DECISION_TO_ADMIT);
			
			newStatus.setPrevStatus((tempTVo != null && tempTVo.getCurrentStatus() != null) ? tempTVo.getCurrentStatus().getStatus() : null);
			newStatus.setPrevTrackingArea((tempTVo != null && tempTVo.getCurrentStatus() != null) ? tempTVo.getCurrentStatus().getTrackingArea() : null);
			recordToSave.setCurrentStatus(newStatus);
			
		}
		//--------------- end //wdev-17231
		
		if (recordToSave.getAttendance().getOutcome() != null  ||  form.chkEnterDischargeOutcome().getValue() == true)
		{
			recordToSave.getAttendance().setOutcome(form.cmbOutcome().getValue());
			recordToSave.getAttendance().setDestination(form.txtDestination().getValue());
			recordToSave.getAttendance().getPatient().setDod(form.dteDateOfDeath().getValue());
			recordToSave.getAttendance().setDischargeDateTime(form.dtimDischargeTime().getValue());
			
			if (form.chkEnterDischargeOutcome().isVisible() && form.chkEnterDischargeOutcome().getValue() == true)//WDEV-17389
			{
				// Create new current status for tracking
				TrackingAttendanceStatusVo newStatus = new TrackingAttendanceStatusVo();

				newStatus.setPatient(form.getGlobalContext().Core.getPatientShort());
				newStatus.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
				newStatus.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
				newStatus.setTrackingArea(record.getCurrentArea());
				newStatus.setStatusDatetime(new DateTime());
				newStatus.setCreatedBy((MemberOfStaffRefVo) domain.getMosUser());
				newStatus.setStatus(TrackingStatus.DISCHARGED);
				
				newStatus.setPrevStatus((record!=null && record.getCurrentStatus()!=null  ) ? record.getCurrentStatus().getStatus() : null);//WDEV-16777
				newStatus.setPrevTrackingArea(form.getLocalContext().getRecord().getCurrentArea());//WDEV-17119
				recordToSave.setCurrentStatus(newStatus);
			}
			
			// Update tracking record
			recordToSave.getAttendance().getCareContext().setEndDateTime(form.dtimDischargeTime().getValue());//WDEV-17003
			recordToSave.setCurrentArea(null);
			recordToSave.setIsDischarged(Boolean.TRUE);
			
			//WDEV-17147
			if (recordToSave.getAssociatedPendingEmergencyAdmission() != null && EmergencyAdmissionStatus.DTA.equals(recordToSave.getAssociatedPendingEmergencyAdmission().getAdmissionStatus()))
			{
				recordToSave.getAssociatedPendingEmergencyAdmission().setAdmissionStatus(EmergencyAdmissionStatus.DISCHARGED);
				recordToSave.getAssociatedPendingEmergencyAdmission().setConclusionDate(form.dtimDischargeTime().getValue());
			}
			
			recordToSave.getAttendance().setDischargingHCP(form.ccAuthoring().getValue());
		}
		
		//WDEV-17408
//		if (recordToSave.getAssociatedPendingEmergencyAdmission() != null && (form.cmbBedType().getValue()==null || AttendanceOutcome.DID_NOT_WAIT.equals(recordToSave.getAttendance().getOutcome()))) //WDEV-17283
//		{
//			recordToSave.getAssociatedPendingEmergencyAdmission().setAdmissionStatus(EmergencyAdmissionStatus.CANCELLED);
//			
//			if (form.cmbBedType().getValue()==null)
//			{
//				recordToSave.setBedAvailability(null);
//			}
//		}
		
		return recordToSave;
	}

	//WDEV-16006
	@Override
	protected void onBtnBookAppointmentClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Scheduling.BookAppointmentDialog);
	}

	//WDEV-17119
	@Override
	protected void onBtnUndoClick() throws PresentationLogicException
	{
		form.getLocalContext().setCustomEvent(DischargeDetails_CustomEvents.UNDO);
		form.fireCustomControlValueChanged();//WDEV-17337
		
		//WDEV-17408
		engine.open(form.getForms().Emergency.TrackingStatusDialog);
	}
	
	//WDEV-17119 //WDEV-17389
	private TrackingAttendanceOutcomeVo populateDataToUndoDischarge(TrackingAttendanceOutcomeVo record)
	{
		TrackingAttendanceOutcomeVo recordToSave = (TrackingAttendanceOutcomeVo) record.clone();
		
		//WDEV-17389
		if (AttendanceOutcome.MORTUARY.equals(recordToSave.getAttendance().getOutcome()) || AttendanceOutcome.BID.equals(recordToSave.getAttendance().getOutcome()) || AttendanceOutcome.DOA.equals(recordToSave.getAttendance().getOutcome()) || AttendanceOutcome.DID.equals(recordToSave.getAttendance().getOutcome()))
		{
			recordToSave.getAttendance().getPatient().setDod(null);
		}
		
		recordToSave.getAttendance().setOutcome(null);
		recordToSave.getAttendance().setDestination(null);
		
		recordToSave.getAttendance().setDischargeDateTime(null);
		recordToSave.setReasonForBreach(null);
			
		recordToSave.getAttendance().getCareContext().setEndDateTime(null);
		recordToSave.setCurrentArea(form.getLocalContext().getRecord().getCurrentStatus().getPrevTrackingArea());
		recordToSave.setIsDischarged(null);
			
		recordToSave.getAttendance().setDischargingHCP(null);
		
		//WDEV-17247
		if (recordToSave.getCurrentDNW() != null 
			&& recordToSave.getCurrentDNW().getCurrentStatus() != null 
			&& recordToSave.getCurrentDNW().getCurrentStatus().getCalledAmount() != 0 
			&& recordToSave.getCurrentDNW().getCurrentStatus().getCalledAmount() == ConfigFlag.DOM.AUTOMATICALLY_DISCHARGE_PATIENT_FROM_ED_ON_DNA_CALL_NUMBER.getValue())
		{
			recordToSave.getCurrentDNW().getCurrentStatus().setCalledAmount(recordToSave.getCurrentDNW().getCurrentStatus().getCalledAmount() - 1);
		}
		
		recordToSave.setCurrentStatus(populateTrackingAttendanceStatus(form.getGlobalContext().Emergency.getTrackingAttendanceStatus().getStatus()));//WDEV-17408
		
		//WDEV-17407
//		if (recordToSave.getAssociatedPendingEmergencyAdmission() != null && (EmergencyAdmissionStatus.DISCHARGED.equals(recordToSave.getAssociatedPendingEmergencyAdmission().getAdmissionStatus()) || (AttendanceOutcome.DID_NOT_WAIT.equals(form.cmbOutcome().getValue()) && EmergencyAdmissionStatus.CANCELLED.equals(recordToSave.getAssociatedPendingEmergencyAdmission().getAdmissionStatus()) && form.cmbBedType().getValue()!=null)))//WDEV-17283 //WDEV-17471 //WDEV-17532
//		{
//			recordToSave.getAssociatedPendingEmergencyAdmission().setAdmissionStatus(EmergencyAdmissionStatus.DTA);
//		}
		
		return recordToSave;
	}

	//WDEV-17119
	private TrackingAttendanceStatusVo populateTrackingAttendanceStatus(TrackingStatus status)
	{
		TrackingAttendanceStatusVo trackingAttStatus = new TrackingAttendanceStatusVo();

		trackingAttStatus.setPatient(form.getGlobalContext().Core.getPatientShort());
		trackingAttStatus.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		trackingAttStatus.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		trackingAttStatus.setTrackingArea(form.getLocalContext().getRecord().getCurrentStatus().getPrevTrackingArea());

		trackingAttStatus.setStatusDatetime(new DateTime());

		Object mos = domain.getMosUser();
		if (mos instanceof MemberOfStaffLiteVo)
		{
			trackingAttStatus.setCreatedBy((MemberOfStaffLiteVo) mos);
		}

		trackingAttStatus.setStatus(status);
		trackingAttStatus.setPrevStatus((form.getLocalContext().getRecord()!=null && form.getLocalContext().getRecord().getCurrentStatus()!=null  ) ? form.getLocalContext().getRecord().getCurrentStatus().getStatus() : null);
		
		return trackingAttStatus;
	}


	@Override
	protected void onBtnPrintDischargeClick() throws PresentationLogicException 
	{
		printDischarge();
	}

	private void printDischarge() 
	{
		if(form.getLocalContext().getRecord() != null)
		{
			form.getGlobalContext().Core.setImsReportId(ED_DISCHARGE_SUMMARY_IMSID);
			engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {TRACKING_SEED, form.getLocalContext().getRecord().getID_Tracking()});
		}
	}


	//WDEV-17119
	public void setHistoryMode(Boolean isHistoryMode)
	{
		form.getLocalContext().setIsHistoryMode(isHistoryMode);
	}


	//wdev-17254
	protected void onBtnRemoveBedRequestClick()	throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.TrackingStatusDialog);
	}

	//wdev-17254
	private boolean removeBed(TrackingAttendanceStatusVo newStatus)
	{
		if (form.getLocalContext().getReadOnlyIsNotNull())
		{
			if( form.getLocalContext().getRecord().getAssociatedPendingEmergencyAdmissionIsNotNull() )
			{
				form.getLocalContext().getRecord().getAssociatedPendingEmergencyAdmission().setAdmissionStatus(EmergencyAdmissionStatus.CANCELLED);
				form.getLocalContext().getRecord().getAssociatedPendingEmergencyAdmission().setAllocatedWard(null);
			}
			form.getLocalContext().getRecord().setBedAvailability(null);
			form.getLocalContext().getRecord().setCurrentStatus(newStatus);
			form.getLocalContext().getRecord().getAttendance().setConclusionDateTime(null);
			form.getLocalContext().getRecord().getAttendance().setBedTypeRequested(null);
			
			String[] errors = form.getLocalContext().getRecord().validate();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
			try 
			{
				domain.saveTrackingAttendanceOutcome(form.getLocalContext().getRecord(),null);	//wdev-17949
			} 
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return true;
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			} 
						
			return true;
			
		}
		return false;
	}
}
