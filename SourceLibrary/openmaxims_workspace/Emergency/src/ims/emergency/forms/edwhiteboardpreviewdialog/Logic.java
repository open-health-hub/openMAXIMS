//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edwhiteboardpreviewdialog;

import ims.admin.vo.AppImageVo;
import ims.emergency.vo.WhiteBoardAssessmentConfigVo;
import ims.emergency.vo.WhiteBoardAssessmentConfigVoCollection;
import ims.emergency.vo.WhiteBoardConfigVo;
import ims.emergency.vo.WhiteBoardQuestionConfigVo;
import ims.emergency.vo.WhiteBoardQuestionConfigVoCollection;
import ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellTable;
import ims.framework.controls.DynamicGridCellTable.TableCell;
import ims.framework.controls.DynamicGridCellTable.TableCellOptions;
import ims.framework.controls.DynamicGridCellTable.TableCellType;
import ims.framework.controls.DynamicGridCellTable.TableRow;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Align;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FontFamily;
import ims.framework.enumerations.FontStyle;
import ims.framework.enumerations.FontWeight;
import ims.framework.enumerations.VerticalAlignment;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final String	COLUMN_PATIENT			= "0";
	private static final String	COLUMN_LOCATION			= "1";
	private static final String	COLUMN_OBS_REQUIRED		= "2";
	private static final String	COLUMN_MEDS_GIVEN		= "3";
	private static final String	COLUMN_ECG				= "4";
	private static final String	COLUMN_NPO				= "5";
	private static final String	COLUMN_ISOLATION		= "6";
	private static final String	COLUMN_COMMENT			= "7";
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getGlobalContext().Emergency.getWhiteBoardConfig()==null)
			return;
		
		initializeDynamicGrid();
		addNewRow();
	}
	
	private void addNewRow()
	{
		DynamicGridRow row = form.dyngrdWhiteBoard().getRows().newRow();
		
		addPatientButton(row);
		
		DynamicGridCell cellLoc = row.getCells().newCell(getColumnByIdentifier(COLUMN_LOCATION), DynamicCellType.STRING);
		cellLoc.setValue("Location");
		cellLoc.setTooltip("Location");
		cellLoc.setReadOnly(true);
		
		addAssessmentsToGrid(row,form.getGlobalContext().Emergency.getWhiteBoardConfig().getAssessments());
		addFixedQuestions(row,form.getGlobalContext().Emergency.getWhiteBoardConfig());
		addConfigurableQuestions(row,form.getGlobalContext().Emergency.getWhiteBoardConfig().getOtherQuestions());
		
		if (form.getGlobalContext().Emergency.getWhiteBoardConfig().getComments())
		{
			DynamicGridCell cellComment = row.getCells().newCell(getColumnByIdentifier(COLUMN_COMMENT), DynamicCellType.IMAGEBUTTON);
    		
    		//Add Comment Button Cell
    		cellComment = row.getCells().newCell(getColumnByIdentifier(COLUMN_COMMENT), DynamicCellType.TABLE);
    		DynamicGridCellTable helper = new DynamicGridCellTable(cellComment);		
    		TableRow tableRow = helper.getRows().newRow();
    		TableCell tableCell = tableRow.getCells().newCell();
    		  		  tableCell.setType(TableCellType.BUTTON);		
    					
    		TableCellOptions cellOptions = new TableCellOptions();
    						 cellOptions.setAutopostback(true);
    						 cellOptions.setButtonImage(form.getImages().Core.Memo);
    						 cellOptions.setButtonImageText(" Comment");
    						 cellOptions.setButtonHeight(120);
    						 cellOptions.setButtonWidth(80);
    	
    		tableCell.setOptions(cellOptions);
    		cellComment.setValue(helper);
		}
	}
	private void addConfigurableQuestions(DynamicGridRow row, WhiteBoardQuestionConfigVoCollection collOtherQuestions)
	{
		if (collOtherQuestions==null)
			return;
		
		for (int i=0;i<collOtherQuestions.size();i++)
		{
			DynamicGridCell cellPain = row.getCells().newCell(getColumnByIdentifier(collOtherQuestions.get(i)), DynamicCellType.WRAPTEXT);
			cellPain.setValue(collOtherQuestions.get(i).getQuestionText());
			cellPain.setTooltip(collOtherQuestions.get(i).getQuestionText());
			cellPain.setReadOnly(true);
		}
	}

	private void addFixedQuestions(DynamicGridRow row, WhiteBoardConfigVo whiteBoardConfig)
	{
		if (whiteBoardConfig.getObsTaken())
		{
		DynamicGridCell cellObs = row.getCells().newCell(getColumnByIdentifier(COLUMN_OBS_REQUIRED), DynamicCellType.ENUMERATION);
		populateCellCombo(cellObs);
		}
		
		if (whiteBoardConfig.getMedsGiven())
		{
		DynamicGridCell cellMeds = row.getCells().newCell(getColumnByIdentifier(COLUMN_MEDS_GIVEN), DynamicCellType.ENUMERATION);
		populateCellCombo(cellMeds);
		}
		
		if (whiteBoardConfig.getECG())
		{
		DynamicGridCell cellECG = row.getCells().newCell(getColumnByIdentifier(COLUMN_ECG), DynamicCellType.BOOL);
		cellECG.setValue(null);
		cellECG.setAutoPostBack(true);
		cellECG.setReadOnly(false);
		}
		
		if (whiteBoardConfig.getNPO())
		{
		DynamicGridCell cellNPO = row.getCells().newCell(getColumnByIdentifier(COLUMN_NPO), DynamicCellType.BOOL);
		cellNPO.setValue(null);
		cellNPO.setAutoPostBack(true);
		cellNPO.setReadOnly(false);
		}
		
		if (whiteBoardConfig.getIsolation())
		{
		DynamicGridCell cellIsolation = row.getCells().newCell(getColumnByIdentifier(COLUMN_ISOLATION), DynamicCellType.BOOL);
		cellIsolation.setValue(null);
		cellIsolation.setAutoPostBack(true);
		cellIsolation.setReadOnly(false);
		}

	}
	
	private void populateCellCombo(DynamicGridCell cellMeds)
	{
		cellMeds.getItems().newItem(ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.REQUIRED,ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.REQUIRED.getText(),ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.REQUIRED.getImage());
		cellMeds.getItems().newItem(ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.COMPLETE,ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.COMPLETE.getText(),ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.COMPLETE.getImage());
		cellMeds.getItems().newItem(ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.NOT_REQUIRED,ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.NOT_REQUIRED.getText(),ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.NOT_REQUIRED.getImage());
		cellMeds.setValue(EDWhiteBoardDynGrdComboValues.REQUIRED);
		
		cellMeds.setAutoPostBack(true);
		cellMeds.setReadOnly(false);
	}
	
	private void addAssessmentsToGrid(DynamicGridRow row, WhiteBoardAssessmentConfigVoCollection collAssessments)
	{
		if (collAssessments==null)
			return;
		
		for (int i=0;i<collAssessments.size();i++)
		{
			DynamicGridCell cellPain = row.getCells().newCell(getColumnByIdentifier(collAssessments.get(i)), DynamicCellType.INT);
			cellPain.setValue(i);
			cellPain.setTooltip(Integer.toString(i));
			cellPain.setReadOnly(true);
		}
	
	}
	
	private DynamicGridColumn getColumnByIdentifier( Object identifier)
	{
		return form.dyngrdWhiteBoard().getColumns().getByIdentifier(identifier);
	}

	private void addPatientButton(DynamicGridRow row)
	{
	
		DynamicGridCell cellLabel = row.getCells().newCell(getColumnByIdentifier(COLUMN_PATIENT), DynamicCellType.TABLE);
		DynamicGridCellTable helper = new DynamicGridCellTable(cellLabel);		
		helper.setBorder(4);	
				
		helper.setBorder(4);		
		
		TableRow  tableRow = helper.getRows().newRow();
			
		//Patient			
		TableCell tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		TableCellOptions cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(16);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(220);		
		tableCell.setColSpan(4);			
			
		tableCell.setValue("Surname");
		tableCell.setTooltip("Surname:Surname " );
		
		
		tableRow = helper.getRows().newRow();   //wdev-17138
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(16);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(220);		
		tableCell.setColSpan(4);
		
		tableCell.setValue("Forename");
		tableCell.setTooltip("Forename: Forename" );
			
			
			
		//Hospital
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(13);
						 cellOptions.setAlign(Align.RIGHT);
		tableCell.setOptions(cellOptions);
		tableCell.setColSpan(2);
		tableCell.setValue("3289537E");
		tableCell.setTooltip("Hospital No.: 3289537E");
				
				
		//Triage priority
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setValue(form.getImages().Emergency.Triage_Priority_P1);
		tableCell.setWidth(18);		
	
		tableCell.setColSpan(2);
		
		//Temporary patient Image 
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setValue(form.getImages().Emergency.EvenHistoryEnabled16);
		
		tableCell.setTooltip("Temporary Patient");
		tableCell.setWidth(17);
		
		//--------------------------
		
		tableRow = helper.getRows().newRow();
		
		//Patient image
		 tableCell = tableRow.getCells().newCell();
					tableCell.setType(TableCellType.IMAGE);		
					tableCell.setRowSpan(3);
					tableCell.setValue(getPatientImage());
					tableCell.setWidth(50);

		//Gender
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		tableCell.setValue(form.getImages().Emergency.Male);
				
		
		//Presenting problem
		tableCell = tableRow.getCells().newCell();
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(13);
						 cellOptions.setFontStyle(FontStyle.ITALIC);
						 cellOptions.setFontWeight(FontWeight.BOLD);
						 
						 cellOptions.setAlign(Align.CENTER);					 
		tableCell.setType(TableCellType.STRING);
		tableCell.setOptions(cellOptions);
		
		tableCell.setValue("Presenting Problem");
		
		tableCell.setWidth(140);
		tableCell.setColSpan(3);
		

		//Path Image
			
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		
		tableCell.setValue(form.getImages().OCRR.Pathology48);
		tableCell.setWidth(24);	
		
		//DOB
		tableRow = helper.getRows().newRow();
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(11);
						 cellOptions.setFontWeight(FontWeight.BOLD);
						 cellOptions.setAlign(Align.LEFT);
		tableCell.setOptions(cellOptions);
		tableCell.setValue("DOB:");
		tableCell.setWidth(30);
		
		//dd/mm/yyy
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(11);					
						 cellOptions.setAlign(Align.LEFT);
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(105);
		
		tableCell.setValue("11/11/1970 (43) ");
		tableCell.setTooltip("Age at Attendance : 43");
	
		//Time since
		tableCell = tableRow.getCells().newCell();
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(12);
						 cellOptions.setFontWeight(FontWeight.BOLD);										 
						 cellOptions.setAlign(Align.CENTER);
		tableCell.setType(TableCellType.STRING);
		tableCell.setOptions(cellOptions);

		tableCell.setValue("115m");
		tableCell.setTooltip("115m since Triage");
		
		tableCell.setWidth(50);
		
		
		
		//LOS
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(11);
						 cellOptions.setFontWeight(FontWeight.BOLD);
						 cellOptions.setAlign(Align.CENTER);
						 
		tableCell.setOptions(cellOptions);
		
		tableCell.setValue("135m");
		tableCell.setTooltip("135m since Registration");
		
		tableCell.setWidth(50);
		
		//Allergy
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		tableCell.setValue(form.getImages().Core.Allergies48);
		tableCell.setTooltip("The patient has allergies.");
		
		//Alert
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		tableCell.setValue(form.getImages().Core.Allergies18);
		tableCell.setTooltip("The patient has alerts." );
		
		
		// STatus
		tableRow = helper.getRows().newRow();  
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(10);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(140);		
		tableCell.setColSpan(3);
		tableCell.setTooltip("Status: Waiting to be Triaged" );
		
		
		//Current Area
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);		
		cellOptions = new TableCellOptions();		
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(10);
						 cellOptions.setFontWeight(FontWeight.BOLDER);
						 cellOptions.setAlign(Align.LEFT);
						 //setAwaitingClinicianNameCellOptionsColors(cellOptions, LOS, isSkippedTriage);
						 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(100);		
		tableCell.setColSpan(4);
		
		tableCell.setTooltip("Current Area: Triage");
		
		
		cellLabel.setValue(helper);
		cellLabel.setReadOnly(true);
		
		
		
		return;

	}
	
	private AppImageVo getPatientImage()
	{
		AppImageVo imageVo = new AppImageVo();
		imageVo.setImagePath(form.getImages().Core.NoPatientImage.getImagePath());
			
		return imageVo;
		
	}

	private void initializeDynamicGrid()
	{
		
		form.dyngrdWhiteBoard().clear();
		form.dyngrdWhiteBoard().setHeaderHeight(40);
		form.dyngrdWhiteBoard().setReadOnly(true);

		DynamicGridColumn column = form.dyngrdWhiteBoard().getColumns().newColumn("Name",COLUMN_PATIENT);
		column.setWidth(400);
		column.setAlignment(Alignment.CENTER);
		column.setVerticalAlignment(VerticalAlignment.TOP);
		column.setHeaderAlignment(Alignment.CENTER);
		column.setReadOnly(true);
		
		column = form.dyngrdWhiteBoard().getColumns().newColumn("Location",COLUMN_LOCATION);
		column.setWidth(60);
		column.setAlignment(Alignment.LEFT);
		column.setVerticalAlignment(VerticalAlignment.MIDDLE);

		column.setHeaderAlignment(Alignment.LEFT);
		
		initializeWithAssessments(form.getGlobalContext().Emergency.getWhiteBoardConfig().getAssessments());
		initializeWithFixedQuestions(form.getGlobalContext().Emergency.getWhiteBoardConfig());
		initializeWithConfigurableQuestions(form.getGlobalContext().Emergency.getWhiteBoardConfig().getOtherQuestions());
		
		if (form.getGlobalContext().Emergency.getWhiteBoardConfig().getComments())
		{
			column = form.dyngrdWhiteBoard().getColumns().newColumn("Comment",COLUMN_COMMENT);
    		column.setWidth(85);
    		column.setAlignment(Alignment.CENTER);
    		column.setVerticalAlignment(VerticalAlignment.TOP);
    		column.setHeaderAlignment(Alignment.LEFT);
		}

		
	}

	private void initializeWithConfigurableQuestions(WhiteBoardQuestionConfigVoCollection collOtherQuestions)
	{
		if (collOtherQuestions==null || collOtherQuestions.size()==0)
			return;
		
		for (int i=0;i<collOtherQuestions.size();i++)
			addColumnQuestion(collOtherQuestions.get(i));
	}

	private void addColumnQuestion(WhiteBoardQuestionConfigVo whiteBoardQuestionConfigVo)
	{
		DynamicGridColumn column = form.dyngrdWhiteBoard().getColumns().newColumn(whiteBoardQuestionConfigVo.getColumnHeaderText());
		column.setWidth(whiteBoardQuestionConfigVo.getColumnWidth());
		column.setIdentifier(whiteBoardQuestionConfigVo);
	}

	private void initializeWithFixedQuestions(WhiteBoardConfigVo whiteBoardConfig)
	{
		DynamicGridColumn column;
		if (whiteBoardConfig.getMedsGiven())
		{
			column = form.dyngrdWhiteBoard().getColumns().newColumn("Meds Given",COLUMN_MEDS_GIVEN);
			column.setWidth(100);
			column.setAlignment(Alignment.LEFT);
			column.setVerticalAlignment(VerticalAlignment.MIDDLE);
			column.setHeaderAlignment(Alignment.LEFT);
		}
		
		if (whiteBoardConfig.getObsTaken())
		{
    		column = form.dyngrdWhiteBoard().getColumns().newColumn("Obs Required",COLUMN_OBS_REQUIRED);
    		column.setWidth(100);
    		column.setAlignment(Alignment.LEFT);
    		column.setVerticalAlignment(VerticalAlignment.MIDDLE);
    		column.setHeaderAlignment(Alignment.LEFT);
		}
		
		if (whiteBoardConfig.getECG())
		{
    		column = form.dyngrdWhiteBoard().getColumns().newColumn("ECG",COLUMN_ECG);
    		column.setWidth(35);
    		column.setAlignment(Alignment.LEFT);
    		column.setVerticalAlignment(VerticalAlignment.MIDDLE);
    		column.setHeaderAlignment(Alignment.LEFT);
		}
		
		if (whiteBoardConfig.getNPO())
		{
    		column = form.dyngrdWhiteBoard().getColumns().newColumn("NPO",COLUMN_NPO);
    		column.setWidth(35);
    		column.setAlignment(Alignment.LEFT);
    		column.setVerticalAlignment(VerticalAlignment.MIDDLE);
    		column.setHeaderAlignment(Alignment.LEFT);
		}
		
		if (whiteBoardConfig.getIsolation())
		{
    		column = form.dyngrdWhiteBoard().getColumns().newColumn("Isolation",COLUMN_ISOLATION);
    		column.setWidth(65);
    		column.setAlignment(Alignment.LEFT);
    		column.setVerticalAlignment(VerticalAlignment.MIDDLE);
    		column.setHeaderAlignment(Alignment.LEFT);
		}
	}

	private void initializeWithAssessments(WhiteBoardAssessmentConfigVoCollection collAssessmentColumns)
	{
		if (collAssessmentColumns==null || collAssessmentColumns.size()==0)
			return;
		
		for (int i=0;i<collAssessmentColumns.size();i++)
			addColumnAssessment(collAssessmentColumns.get(i));
	}

	private void addColumnAssessment(WhiteBoardAssessmentConfigVo whiteBoardAssessmentConfig)
	{
		DynamicGridColumn column = form.dyngrdWhiteBoard().getColumns().newColumn("");
		column.setWidth(30);
		column.setAlignment(Alignment.CENTER);
		column.setVerticalAlignment(VerticalAlignment.MIDDLE);
		column.setCaptionImage(engine.getRegisteredImage(whiteBoardAssessmentConfig.getIcon().getID_AppImage()));
		column.setHeaderAlignment(Alignment.CENTER);
		column.setIdentifier(whiteBoardAssessmentConfig);
	}

	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}
}
