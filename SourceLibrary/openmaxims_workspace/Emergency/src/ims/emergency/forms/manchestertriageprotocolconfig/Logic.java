//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.manchestertriageprotocolconfig;

import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.forms.manchestertriageprotocolconfig.GenForm.grdDiscriminatorsRow;
import ims.emergency.forms.manchestertriageprotocolconfig.GenForm.grdDiscriminatorsRowCollection;
import ims.emergency.forms.manchestertriageprotocolconfig.GenForm.grdProtocolRow;
import ims.emergency.vo.ManchesterTriageProtocolConfigLiteVoCollection;
import ims.emergency.vo.ManchesterTriageProtocolConfigVo;
import ims.emergency.vo.ProtocolDiscriminatorVo;
import ims.emergency.vo.ProtocolDiscriminatorVoCollection;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		open();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearInstanceControls();
		open();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			doSearch();

			form.setMode(FormMode.VIEW);
			form.grdProtocol().setValue(form.getLocalContext().getSelectedTriageProtocol());
			populateInstanceControlsFromData(form.getLocalContext().getSelectedTriageProtocol());
		}
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdDiscriminators().setValue(null);
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onGrdProtocolSelectionChanged()
	{
		ManchesterTriageProtocolConfigVo selectedTriageProtocol = domain.getTriageProtocol(form.grdProtocol().getValue());

		form.getLocalContext().setSelectedTriageProtocol(selectedTriageProtocol);
		populateInstanceControlsFromData(selectedTriageProtocol);
		updateControlsState();
	}

	private void populateInstanceControlsFromData(ManchesterTriageProtocolConfigVo selectedTriageProtocol)
	{
		if (selectedTriageProtocol == null)
		{
			return;
		}

		clearInstanceControls();

		form.txtProtocolName().setValue(selectedTriageProtocol.getProtocolName());
		form.txtDescription().setValue(selectedTriageProtocol.getProtocolDescription());
		form.qmbProblem().newRow(selectedTriageProtocol.getProblem(), selectedTriageProtocol.getProblem().getPCName());
		form.qmbProblem().setValue(selectedTriageProtocol.getProblem());
		form.cmbPriority().setValue(selectedTriageProtocol.getDefaultPriority());
		removePreactiveOrActiveLookup();
		form.cmbStatus().setValue(selectedTriageProtocol.getActiveStatus());
		form.ccMappings().setValue(selectedTriageProtocol.getTaxonomyMap());

		populateDiscriminatorsGrid(form.getLocalContext().getSelectedTriageProtocol().getDiscriminators());

	}

	private void doSearch()
	{
		form.grdProtocol().getRows().clear();
		clearInstanceControls();

		ManchesterTriageProtocolConfigLiteVoCollection triageProtocols = domain.listTriageProtocols(form.txtName().getValue(), form.qmbProblemSearch().getValue(), form.cmbStatusSearch().getValue());

		if (triageProtocols == null || triageProtocols.size() == 0)
		{
			form.getLocalContext().setSelectedTriageProtocol(null);
			updateControlsState();
			engine.showMessage("There are no Records for the Search Criteria Provided");
			return;
		}

		populateScreenFromData(triageProtocols);
		updateControlsState();
	}

	private void populateScreenFromData(ManchesterTriageProtocolConfigLiteVoCollection triageProtocols)
	{

		for (int i = 0; i < triageProtocols.size(); i++)
		{
			grdProtocolRow newRow = form.grdProtocol().getRows().newRow();

			newRow.setcolProtocol(triageProtocols.get(i).getProtocolName());
			newRow.setcolProblem(triageProtocols.get(i).getProblem().getPCName());
			newRow.setcolStatus(triageProtocols.get(i).getActiveStatus().toString());
			newRow.setValue(triageProtocols.get(i));
		}

		if (form.getLocalContext().getSelectedTriageProtocolIsNotNull())
		{
			form.grdProtocol().setValue(form.getLocalContext().getSelectedTriageProtocol());

			if (form.grdProtocol().getSelectedRow() != null)
			{
				populateInstanceControlsFromData(form.getLocalContext().getSelectedTriageProtocol());
			}
		}

	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{

		if (form.getLocalContext().getSelectedTriageProtocolIsNotNull())
		{
			form.ccMappings().initialize();
			form.getLocalContext().setSelectedTriageProtocol(domain.getTriageProtocol(form.getLocalContext().getSelectedTriageProtocol()));
			populateInstanceControlsFromData(form.getLocalContext().getSelectedTriageProtocol());
		}

		form.txtName().setFocus();
		form.setMode(FormMode.VIEW);

	}

	public void clearInstanceControls()
	{
		form.txtProtocolName().setValue(null);
		form.txtDescription().setValue(null);
		form.qmbProblem().setValue(null);
		form.cmbPriority().setValue(null);
		form.cmbStatus().setValue(null);
		form.ccMappings().clear();
		form.grdDiscriminators().getRows().clear();
	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedTriageProtocol(null);
		form.grdProtocol().setValue(null);
		clearInstanceControls();
		removePreactiveOrActiveLookup();
		form.setMode(FormMode.EDIT);
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{

		ManchesterTriageProtocolConfigVo TriageToSave = populateDataFromScreen(form.getLocalContext().getSelectedTriageProtocol());

		String[] errors = TriageToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.ACTIVE))
		{
			ManchesterTriageProtocolConfigLiteVoCollection TriageProtocol = domain.checkAlreadyActive(TriageToSave);

			if (TriageProtocol != null && TriageProtocol.getActiveCount() != 0 && !TriageProtocol.contains(TriageToSave))
			{
				engine.showMessage("An active Triage Protocol already exists for the selected Problem.", "", MessageButtons.OK, MessageIcon.WARNING);
				return false;
			}
		}

		try
		{
			TriageToSave = domain.saveTriage(TriageToSave);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		form.getLocalContext().setSelectedTriageProtocol(TriageToSave);

		form.txtName().setValue(TriageToSave.getProtocolName());
		form.qmbProblemSearch().newRow(TriageToSave.getProblem(), TriageToSave.getProblem().getPCName());
		form.qmbProblemSearch().setValue(TriageToSave.getProblem());
		form.cmbStatusSearch().setValue(TriageToSave.getActiveStatus());

		return true;
	}

	private ManchesterTriageProtocolConfigVo populateDataFromScreen(ManchesterTriageProtocolConfigVo selectedTriageProtocol)
	{
		if (selectedTriageProtocol == null)
		{
			selectedTriageProtocol = new ManchesterTriageProtocolConfigVo();
		}

		selectedTriageProtocol.setProtocolName(form.txtProtocolName().getValue());
		selectedTriageProtocol.setProtocolDescription(form.txtDescription().getValue());
		selectedTriageProtocol.setProblem(form.qmbProblem().getValue());
		selectedTriageProtocol.setDefaultPriority(form.cmbPriority().getValue());
		selectedTriageProtocol.setActiveStatus(form.cmbStatus().getValue());
		selectedTriageProtocol.setTaxonomyMap(form.ccMappings().getValue());

		selectedTriageProtocol.setDiscriminators(getDiscriminators());

		return selectedTriageProtocol;
	}

	private ProtocolDiscriminatorVoCollection getDiscriminators()
	{
		grdDiscriminatorsRowCollection discriminators = form.grdDiscriminators().getRows();

		ProtocolDiscriminatorVoCollection discriminatorCollection = new ProtocolDiscriminatorVoCollection();

		for (int i = 0; i < discriminators.size(); i++)
		{
			discriminatorCollection.add(discriminators.get(i).getValue());
		}

		return discriminatorCollection;
	}

	public void updateControlsState()
	{

		form.ccMappings().setComponentMode(form.getMode());
		form.ccMappings().setMode(form.getMode());

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(form.grdProtocol().getSelectedRow() != null);
		}

		form.getContextMenus().Emergency.getManchesterTriageProtocolAddItem().setVisible(form.getMode().equals(FormMode.EDIT));
		form.getContextMenus().Emergency.getManchesterTriageProtocolRemoveItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdDiscriminators().getSelectedRow() != null);
		form.getContextMenus().Emergency.getManchesterTriageProtocolMoveDowmItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdDiscriminators().canMoveCurrentDown());
		form.getContextMenus().Emergency.getManchesterTriageProtocolMoveUpItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdDiscriminators().canMoveCurrentUp());
		form.getContextMenus().Emergency.getManchesterTriageProtocolSortItem().setVisible(form.getMode().equals(FormMode.EDIT) && form.grdDiscriminators().getRows().size() > 1);

		form.imbAdd().setEnabled(form.getMode().equals(FormMode.EDIT));
		form.imbRemove().setEnabled(form.getMode().equals(FormMode.EDIT) && form.grdDiscriminators().getSelectedRow() != null);
		form.imbUp().setEnabled(form.getMode().equals(FormMode.EDIT) && form.grdDiscriminators().canMoveCurrentUp());
		form.imbDown().setEnabled(form.getMode().equals(FormMode.EDIT) && form.grdDiscriminators().canMoveCurrentDown());
		form.imbSort().setEnabled(form.getMode().equals(FormMode.EDIT) && form.grdDiscriminators().getRows().size() > 1);

	}

	public void updateInstance()
	{
		// TODO: Add you code here.
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Emergency.DiscriminatorSelectDialog) && result.equals(DialogResult.OK))
		{
			if (!form.getGlobalContext().Emergency.getManchesterTriageProtocolIsNotNull())
			{
				return;
			}

			populateDiscriminatorsGrid(form.getGlobalContext().Emergency.getManchesterTriageProtocol());
			updateControlsState();
		}
	}

	private void populateDiscriminatorsGrid(ProtocolDiscriminatorVoCollection newdiscriminatorCollection)
	{
		grdDiscriminatorsRowCollection addedDiscriminatorCollection = form.grdDiscriminators().getRows();

		if (addedDiscriminatorCollection.size() == 0)
		{
			addNewRow(newdiscriminatorCollection);
		}
		else
		{
			ProtocolDiscriminatorVoCollection remainingDiscriminatorCollection = new ProtocolDiscriminatorVoCollection();

			for (int x = 0; x < newdiscriminatorCollection.size(); x++)
			{
				remainingDiscriminatorCollection.add(newdiscriminatorCollection.get(x));
			}

			for (int a = newdiscriminatorCollection.size() - 1; a >= 0; a--)
			{
				for (int n = addedDiscriminatorCollection.size() - 1; n >= 0; n--)
				{
					if (addedDiscriminatorCollection.get(n).getcolDiscriminator().equals(newdiscriminatorCollection.get(a).getDiscriminator().getDiscriminatorName()))
					{
						addedDiscriminatorCollection.get(n).setcolPriority(newdiscriminatorCollection.get(a).getPriority().toString());
						addedDiscriminatorCollection.get(n).setValue(newdiscriminatorCollection.get(a));
						remainingDiscriminatorCollection.remove(a);
					}
				}
			}

			addNewRow(remainingDiscriminatorCollection);
		}

	}

	private void addNewRow(ProtocolDiscriminatorVoCollection newdiscriminatorCollection)
	{
		for (int i = 0; i < newdiscriminatorCollection.size(); i++)
		{
			grdDiscriminatorsRow newRow = form.grdDiscriminators().getRows().newRow();

			newRow.setcolPriority(newdiscriminatorCollection.get(i).getPriority().getText());
			newRow.setcolDiscriminator(newdiscriminatorCollection.get(i).getDiscriminator().getDiscriminatorName());
			newRow.setValue(newdiscriminatorCollection.get(i));
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.ManchesterTriageProtocol.Add:
				engine.open(form.getForms().Emergency.DiscriminatorSelectDialog);
				break;

			case GenForm.ContextMenus.EmergencyNamespace.ManchesterTriageProtocol.Remove:
				form.grdDiscriminators().removeSelectedRow();
				updateControlsState();
				break;

			case GenForm.ContextMenus.EmergencyNamespace.ManchesterTriageProtocol.MoveUp:
				form.grdDiscriminators().moveUp();
				updateControlsState();
				break;

			case GenForm.ContextMenus.EmergencyNamespace.ManchesterTriageProtocol.MoveDowm:
				form.grdDiscriminators().moveDown();
				updateControlsState();
				break;

			case GenForm.ContextMenus.EmergencyNamespace.ManchesterTriageProtocol.Sort:

				ProtocolDiscriminatorVoCollection discriminatorCollection = getDiscriminators();

				if (discriminatorCollection != null)
				{
					discriminatorCollection.sort(new StringComparator(SortOrder.ASCENDING));
					form.grdDiscriminators().getRows().clear();
					populateDiscriminatorsGrid(discriminatorCollection);
					updateControlsState();
				}

				break;
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onQmbProblemSearchTextSubmited(String value) throws PresentationLogicException
	{
		listProblemSearch(value);
	}

	private void listProblemSearch(String value)
	{
		ClinicalProblemShortVoCollection coll = null;

		coll = domain.listProblems(value);

		form.qmbProblemSearch().setValue(null);
		form.qmbProblemSearch().clear();

		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				ClinicalProblemShortVo vo = coll.get(i);
				form.qmbProblemSearch().newRow(vo, vo.getPCName());
			}

			if (coll.size() == 1)
			{
				form.qmbProblemSearch().setValue(coll.get(0));
			}

			if (coll.size() > 1)
			{
				form.qmbProblemSearch().showOpened();
			}
		}

	}

	@Override
	protected void onQmbProblemTextSubmited(String value) throws PresentationLogicException
	{
		listProblemDiscriminator(value);

	}

	private void listProblemDiscriminator(String value)
	{

		ClinicalProblemShortVoCollection coll = null;

		coll = domain.listProblems(value);

		form.qmbProblem().setValue(null);
		form.qmbProblem().clear();

		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				ClinicalProblemShortVo vo = coll.get(i);
				form.qmbProblem().newRow(vo, vo.getPCName());
			}
		}

		if (coll.size() == 1)
		{
			form.qmbProblem().setValue(coll.get(0));
		}

		if (coll.size() > 1)
		{
			form.qmbProblem().showOpened();
		}

	}

	@Override
	protected void onGrdDiscriminatorsSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	private void clearScreen()
	{
		form.grdProtocol().getRows().clear();
		form.txtName().setValue(null);
		form.qmbProblemSearch().setValue(null);
		form.cmbStatusSearch().setValue(null);
		form.getLocalContext().setSelectedTriageProtocol(null);
		clearInstanceControls();
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		doSearch();
	}

	@Override
	protected void onImbSortClick() throws PresentationLogicException
	{

		ProtocolDiscriminatorVoCollection discriminatorCollection = getDiscriminators();

		if (discriminatorCollection != null)
		{
			discriminatorCollection.sort(new StringComparator(SortOrder.ASCENDING));
			form.grdDiscriminators().getRows().clear();
			populateDiscriminatorsGrid(discriminatorCollection);
			updateControlsState();
		}
	}

	@Override
	protected void onImbDownClick() throws PresentationLogicException
	{
		form.grdDiscriminators().moveDown();
		updateControlsState();
	}

	@Override
	protected void onImbUpClick() throws PresentationLogicException
	{
		form.grdDiscriminators().moveUp();
		updateControlsState();
	}

	@Override
	protected void onImbRemoveClick() throws PresentationLogicException
	{
		form.grdDiscriminators().removeSelectedRow();
		updateControlsState();
	}

	@Override
	protected void onImbAddClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.DiscriminatorSelectDialog);
	}

	public class StringComparator implements Comparator<Object>
	{
		private int direction = 1;

		public StringComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public StringComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;

		}

		public int compare(Object ob1, Object ob2)
		{
			String name1 = null;
			String name2 = null;
			if (ob1 instanceof ProtocolDiscriminatorVo)
			{
				ProtocolDiscriminatorVo ps1 = (ProtocolDiscriminatorVo) ob1;
				if (ps1.getPriority().equals(" "))
				{
					return 0;
				}
				name1 = ps1 != null ? ps1.getPriority().getText() : null;
			}
			if (ob2 instanceof ProtocolDiscriminatorVo)
			{
				ProtocolDiscriminatorVo ps2 = (ProtocolDiscriminatorVo) ob2;

				if (ps2.getPriority().getText().equals(" "))
				{
					return 0;
				}
				name2 = ps2 != null ? ps2.getPriority().getText() : null;

			}
			if (name1 != null)
				return name1.compareTo(name2) * direction;
			if (name2 != null)
				return (-1) * direction;

			return 0;
		}
	}

	private void removePreactiveOrActiveLookup()
	{
		PreActiveActiveInactiveStatus status = form.cmbStatus().getValue();
		form.cmbStatus().clear();
		PreActiveActiveInactiveStatusCollection lookupColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for (int i = 0; lookupColl != null && i < lookupColl.size(); i++)
		{
			if (isStatusActive() && lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE))
				continue;
			if (isStatusInactive() && (lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE) || lookupColl.get(i).equals(PreActiveActiveInactiveStatus.ACTIVE)))
				continue;
			//WDEV-17376
			if ((form.getLocalContext().getSelectedTriageProtocol()==null || form.getLocalContext().getSelectedTriageProtocol() != null && form.getLocalContext().getSelectedTriageProtocol().getActiveStatusIsNotNull() && form.getLocalContext().getSelectedTriageProtocol().getActiveStatus().equals(PreActiveActiveInactiveStatus.PREACTIVE)) && lookupColl.get(i).equals(PreActiveActiveInactiveStatus.INACTIVE))
			{
				continue;
			}
			form.cmbStatus().newRow(lookupColl.get(i), lookupColl.get(i).toString(), lookupColl.get(i).getImage(), lookupColl.get(i).getColor());
		}
		form.cmbStatus().setValue(status);
	}

	private boolean isStatusActive()
	{
		ManchesterTriageProtocolConfigVo voTriageProtocol = form.getLocalContext().getSelectedTriageProtocol();
		return voTriageProtocol != null && voTriageProtocol.getActiveStatusIsNotNull() && voTriageProtocol.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE);
	}

	private boolean isStatusInactive()
	{
		ManchesterTriageProtocolConfigVo voTriageProtocol = form.getLocalContext().getSelectedTriageProtocol();
		return voTriageProtocol != null && voTriageProtocol.getActiveStatusIsNotNull() && voTriageProtocol.getActiveStatus().equals(PreActiveActiveInactiveStatus.INACTIVE);
	}
}
