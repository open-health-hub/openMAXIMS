//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.invoicesbillingcc;

import ims.admin.vo.EDAttendanceControlsConfigVo;
import ims.admin.vo.EDAttendanceControlsConfigVoCollection;
import ims.admin.vo.lookups.EDAttendenceControlType;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EmergencyAttendanceRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.EmergencyAttendanceBillingVo;
import ims.emergency.vo.enums.EmergencyAttendanceEvent;
import ims.emergency.vo.lookups.ExemptionReason;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final String EXEMPTION_REASON = "IB02";
	private static final String EXEMPTION_REASON_OTHER = "IB03";
	private static final String PAYMENT_MADE = "IB04";
	private static final String PAYMENT_TYPE = "IB05";
	private static final String INVOICE_AMOUNT = "IB06";
	private static final String REASON_FOR_NON_PAYMENT = "IB07";
	private static final String PAYMENT_REFUNDED = "IB08";

	public void initialize(EmergencyAttendanceRefVo attendanceDetailsRef, PatientRefVo patientRef, EpisodeOfCareRefVo episodeOfCareRef, CareContextRefVo careContextRef)
	{
		form.getLocalContext().setAttendanceDetailsRef(attendanceDetailsRef);
		form.getLocalContext().setPatientRef(patientRef);
		form.getLocalContext().setEpisodeOfCareRef(episodeOfCareRef);
		form.getLocalContext().setCareContextRef(careContextRef);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}

	private void updateControlState()
	{
		EmergencyAttendanceBillingVo currentEmergAttBilling = (form.getLocalContext().getAttendanceDetailsRefIsNotNull() ? domain.getAttendanceBillingByEmergencyAttendance(form.getLocalContext().getAttendanceDetailsRef()) : null);

		form.btnNew().setVisible(FormMode.VIEW.equals(form.getMode()) && currentEmergAttBilling == null);
		form.btnEdit().setVisible(FormMode.VIEW.equals(form.getMode()) && currentEmergAttBilling != null);

		form.cmbIsPatientExempt().setRequired(true);
		form.cmbIsPatientExempt().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		EDAttendanceControlsConfigVoCollection attendanceControlsConfig = domain.getEDAttendanceControlsConfig(EDAttendenceControlType.INV_BILL_CONTROLS);

		for (int i = 0; attendanceControlsConfig != null && i < attendanceControlsConfig.size(); i++)
		{
			EDAttendanceControlsConfigVo controlConfig = attendanceControlsConfig.get(i);

			if (EXEMPTION_REASON.equals(controlConfig.getControlIMSID()))
			{
				form.lblExemptionReason().setVisible(controlConfig.getIsVisible());

				form.cmbExemptionReason().setVisible(controlConfig.getIsVisible());
				form.cmbExemptionReason().setRequired(controlConfig.getIsRequired() || YesNo.YES.equals(form.cmbIsPatientExempt().getValue()));
				form.cmbExemptionReason().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());

			}
			else if (EXEMPTION_REASON_OTHER.equals(controlConfig.getControlIMSID()))
			{
				form.lblExemptionReasonOther().setVisible(controlConfig.getIsVisible());

				form.txtExemptionReasonOther().setVisible(controlConfig.getIsVisible());
				form.txtExemptionReasonOther().setRequired(controlConfig.getIsRequired() || ExemptionReason.EXEMPT_OTHER.equals(form.cmbExemptionReason().getValue()));
				form.txtExemptionReasonOther().setEnabled(FormMode.EDIT.equals(form.getMode()) && (controlConfig.getIsEditable() || ExemptionReason.EXEMPT_OTHER.equals(form.cmbExemptionReason().getValue())));

			}
			else if (PAYMENT_MADE.equals(controlConfig.getControlIMSID()))
			{
				form.lblPaymentMade().setVisible(controlConfig.getIsVisible());

				form.cmbPaymentMade().setVisible(controlConfig.getIsVisible());
				form.cmbPaymentMade().setRequired(controlConfig.getIsRequired() || YesNo.NO.equals(form.cmbIsPatientExempt().getValue()));
				form.cmbPaymentMade().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());

			}
			else if (PAYMENT_TYPE.equals(controlConfig.getControlIMSID()))
			{
				form.lblPaymentType().setVisible(controlConfig.getIsVisible());

				form.cmbPaymentType().setVisible(controlConfig.getIsVisible());
				form.cmbPaymentType().setRequired(controlConfig.getIsRequired() || (YesNo.NO.equals(form.cmbIsPatientExempt().getValue()) && !YesNo.NO.equals(form.cmbPaymentMade().getValue())));//WDEV-17160
				form.cmbPaymentType().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());

			}
			else if (INVOICE_AMOUNT.equals(controlConfig.getControlIMSID()))
			{
				form.lblInvoiceAmount().setVisible(controlConfig.getIsVisible());

				form.intInvoiceAmount().setVisible(controlConfig.getIsVisible());
				form.intInvoiceAmount().setRequired(controlConfig.getIsRequired() || (YesNo.NO.equals(form.cmbIsPatientExempt().getValue()) && !YesNo.NO.equals(form.cmbPaymentMade().getValue())));//WDEV-17160
				form.intInvoiceAmount().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());

			}
			else if (REASON_FOR_NON_PAYMENT.equals(controlConfig.getControlIMSID()))
			{
				form.lblReasonForNonPayment().setVisible(controlConfig.getIsVisible());

				form.cmbReasonForNonPayment().setVisible(controlConfig.getIsVisible());
				form.cmbReasonForNonPayment().setRequired(controlConfig.getIsRequired() || (YesNo.NO.equals(form.cmbIsPatientExempt().getValue()) && YesNo.NO.equals(form.cmbPaymentMade().getValue())));
				form.cmbReasonForNonPayment().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());

			}
			else if (PAYMENT_REFUNDED.equals(controlConfig.getControlIMSID()))
			{
				form.lblPaymentRefunded().setVisible(controlConfig.getIsVisible());

				form.cmbPaymentRefunded().setVisible(controlConfig.getIsVisible());
				form.cmbPaymentRefunded().setRequired(controlConfig.getIsRequired());
				form.cmbPaymentRefunded().setEnabled(FormMode.EDIT.equals(form.getMode()) && controlConfig.getIsEditable());

			}
		}

	}

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.NEW);
		form.fireCustomControlValueChanged();
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getcurrentAttendanceBilling()!=null)
		{
			form.getLocalContext().setcurrentAttendanceBilling(domain.getAttendanceBilling(form.getLocalContext().getcurrentAttendanceBilling()));
			populateScreenFromData(form.getLocalContext().getcurrentAttendanceBilling());
		}
		
		form.setMode(FormMode.EDIT);
		form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.EDIT);
		
		form.fireCustomControlValueChanged();
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.SAVE);
			form.fireCustomControlValueChanged();
		}
	}

	private boolean save()
	{
		EmergencyAttendanceBillingVo emergAttBillingToSave = populateDataFromScreen(form.getLocalContext().getcurrentAttendanceBilling());

		String[] errors = emergAttBillingToSave.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		EmergencyAttendanceBillingVo currentEmergAttBilling = (form.getLocalContext().getAttendanceDetailsRefIsNotNull() ? domain.getAttendanceBillingByEmergencyAttendance(form.getLocalContext().getAttendanceDetailsRef()) : null);
		if (emergAttBillingToSave.getID_EmergencyAttendanceBilling() == null && currentEmergAttBilling != null)
		{
			engine.showMessage("An Emergency Attendance Billing already exists for the selected Emergency Attendance !");
			form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}

		try
		{
			form.getLocalContext().setcurrentAttendanceBilling(domain.save(emergAttBillingToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.CANCEL);
			form.fireCustomControlValueChanged();
			return false;
		}

		return true;
	}

	private EmergencyAttendanceBillingVo populateDataFromScreen(EmergencyAttendanceBillingVo attendanceBilling)
	{
		if (attendanceBilling == null)
			attendanceBilling = new EmergencyAttendanceBillingVo();
		else
			attendanceBilling = (EmergencyAttendanceBillingVo) attendanceBilling.clone();

		attendanceBilling.setEmergencyAttendence(form.getLocalContext().getAttendanceDetailsRef());
		attendanceBilling.setPatient(form.getLocalContext().getPatientRef());
		attendanceBilling.setEpisode(form.getLocalContext().getEpisodeOfCareRef());
		attendanceBilling.setAttendance(form.getLocalContext().getCareContextRef());

		attendanceBilling.setIsPatientExempt(form.cmbIsPatientExempt().getValue());
		attendanceBilling.setExemptionReason(form.cmbExemptionReason().getValue());
		attendanceBilling.setExemptionReasonOther(form.txtExemptionReasonOther().getValue());
		attendanceBilling.setPaymentMade(form.cmbPaymentMade().getValue());
		attendanceBilling.setPaymentType(form.cmbPaymentType().getValue());
		attendanceBilling.setInvoiceAmount(form.intInvoiceAmount().getValue());
		attendanceBilling.setReasonForNonPayment(form.cmbReasonForNonPayment().getValue());
		attendanceBilling.setPaymentRefunded(form.cmbPaymentRefunded().getValue());

		return attendanceBilling;
	}

	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.cmbExemptionReason().isRequired() && form.cmbExemptionReason().getVisible() && form.cmbExemptionReason().isEnabled() && form.cmbExemptionReason().getValue() == null)
		{
			errors.add("Exemption Reason is mandatory!");
		}

		if (form.txtExemptionReasonOther().isRequired() && form.txtExemptionReasonOther().isVisible() && form.txtExemptionReasonOther().isEnabled() && form.txtExemptionReasonOther().getValue() == null)
		{
			errors.add("Exemption Reason Other is mandatory!");
		}

		if (form.cmbPaymentMade().isRequired() && form.cmbPaymentMade().getVisible() && form.cmbPaymentMade().isEnabled() && form.cmbPaymentMade().getValue() == null)
		{
			errors.add("Payment Made is mandatory!");
		}

		if (form.cmbPaymentType().isRequired() && form.cmbPaymentType().getVisible() && form.cmbPaymentType().isEnabled() && form.cmbPaymentType().getValue() == null)
		{
			errors.add("Payment Type is mandatory!");
		}

		if (form.intInvoiceAmount().isRequired() && form.intInvoiceAmount().isVisible() && form.intInvoiceAmount().isEnabled() && form.intInvoiceAmount().getValue() == null)
		{
			errors.add("Invoice Amount is mandatory!");
		}

		if (form.cmbReasonForNonPayment().isRequired() && form.cmbReasonForNonPayment().getVisible() && form.cmbReasonForNonPayment().isEnabled() && form.cmbReasonForNonPayment().getValue() == null)
		{
			errors.add("Reason For non Payment is mandatory!");
		}

		if (form.cmbPaymentRefunded().isRequired() && form.cmbPaymentRefunded().getVisible() && form.cmbPaymentRefunded().isEnabled() && form.cmbPaymentRefunded().getValue() == null)
		{
			errors.add("Payment Refunded is mandatory!");
		}

		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedEvent(EmergencyAttendanceEvent.CANCEL);
		form.fireCustomControlValueChanged();
	}

	public void setValue(EmergencyAttendanceBillingVo attendanceBilling)
	{
		form.getLocalContext().setcurrentAttendanceBilling(attendanceBilling);
		populateScreenFromData(form.getLocalContext().getcurrentAttendanceBilling());
	}

	private void populateScreenFromData(EmergencyAttendanceBillingVo attendanceBillingVo)
	{
		clearScreen();
		if (attendanceBillingVo == null)
			return;

		form.cmbIsPatientExempt().setValue(attendanceBillingVo.getIsPatientExempt());
		form.cmbExemptionReason().setValue(attendanceBillingVo.getExemptionReason());
		form.txtExemptionReasonOther().setValue(attendanceBillingVo.getExemptionReasonOther());
		form.cmbPaymentMade().setValue(attendanceBillingVo.getPaymentMade());
		form.cmbPaymentType().setValue(attendanceBillingVo.getPaymentType());
		form.intInvoiceAmount().setValue(attendanceBillingVo.getInvoiceAmount());
		form.cmbReasonForNonPayment().setValue(attendanceBillingVo.getReasonForNonPayment());
		form.cmbPaymentRefunded().setValue(attendanceBillingVo.getPaymentRefunded());

	}

	private void clearScreen()
	{
		form.cmbIsPatientExempt().setValue(null);
		form.cmbExemptionReason().setValue(null);
		form.txtExemptionReasonOther().setValue(null);
		form.cmbPaymentMade().setValue(null);
		form.cmbPaymentType().setValue(null);
		form.intInvoiceAmount().setValue(null);
		form.cmbReasonForNonPayment().setValue(null);
		form.cmbPaymentRefunded().setValue(null);

	}

	public ims.emergency.vo.enums.EmergencyAttendanceEvent getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}

	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

	@Override
	protected void onCmbPaymentMadeValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

	@Override
	protected void onCmbExemptionReasonValueChanged() throws PresentationLogicException
	{
		form.txtExemptionReasonOther().setValue(null);
		updateControlState();
	}

	@Override
	protected void onCmbIsPatientExemptValueChanged() throws PresentationLogicException
	{
		updateControlState();
	}

}
