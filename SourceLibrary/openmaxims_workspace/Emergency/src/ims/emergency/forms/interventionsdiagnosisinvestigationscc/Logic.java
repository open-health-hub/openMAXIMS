//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4828.20158)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.interventionsdiagnosisinvestigationscc;

import ims.clinical.vo.lookups.TreatmentInterventionType;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.helper.ResetPIDBarHelper;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CSPrimaryDiagnosisShortVo;
import ims.core.vo.PatientDiagnosisAtConsultationVo;
import ims.core.vo.PatientDiagnosisAtConsultationVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdInterventionsTreatmentsRow;
import ims.emergency.vo.EmergencyAttendanceInvestigationCodingSequenceItemVo;
import ims.emergency.vo.EmergencyAttendanceInvestigationCodingSequenceItemVoCollection;
import ims.emergency.vo.EmergencyAttendanceInvestigationCodingVo;
import ims.emergency.vo.InterventionTreatmentDetailVo;
import ims.emergency.vo.InterventionTreatmentDetailVoCollection;
import ims.emergency.vo.InterventionsTreatmentsForAttendenceVo;
import ims.emergency.vo.InvestigationAttendenceDetailVo;
import ims.emergency.vo.InvestigationAttendenceDetailVoCollection;
import ims.emergency.vo.OrderInvestigationForAttendenceNotesCcVo;
import ims.emergency.vo.OrderInvestigationForAttendenceNotesCcVoCollection;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.EDIT:
				
				//WDEV-17648
				if (form.getLocalContext().getInterventionSequenceChanged())
				{
					saveInterventionSequence();
					form.getLocalContext().setInterventionSequenceChanged(false);
				}
				
				editTreatmentIntervention();
			break;
		
			case GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.REMOVE:
				removeInterventionTreatment();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.MOVE_UP:
				moveInterventionUp();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.InterventionsTreatmentsMenu.MOVE_DOWN:
				moveInterventionDown();
			break;

			case GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.ADD:
				saveDiagnosisOrder();
				addDiagnose();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.EDIT:
				saveDiagnosisOrder();
				editDiagnose();
			break;
				
			case GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.REMOVE:
				
				//WDEV-17648 if the sort order was changed, save the order, re-populate the grid and remove Diagnosis (doRie)
				if (form.getLocalContext().getDiagnosisSequenceChanged())
				{
					PatientDiagnosisAtConsultationVo temoraryDiagnosis = form.grdDiagnosis().getValue();
		
					saveDiagnosisSequence();
					populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
		
					form.grdDiagnosis().setValue(temoraryDiagnosis);
					form.getLocalContext().setDiagnosisSequenceChanged(false);
				}
				
				removeDiagnose();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.MOVE_UP:
				moveDiagnosisForAttendancUp();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.DiagnosisForAttendanceNotesMenu.MOVE_DOWN:
				moveDiagnosisForAttendancDown();
			break;

			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.ADD:
				saveInvestigationsOrder();
				addInvestigation();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.EDIT:
				saveInvestigationsOrder();
				editInvestigation();
			break;
				
			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.REMOVE:
				saveInvestigationsOrder();
				removeInvestigation();
			break;
			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.MOVE_UP:
				moveInvestigationsForAttendanceUp();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.InvestigationsForAttendanceNotesMenu.MOVE_DOWN:
				moveInvestigationsForAttendanceDown();
			break;

		}
	}

	//WDEV-17648
	private void saveDiagnosisOrder()
	{
		if (form.getLocalContext().getDiagnosisSequenceChanged())
		{
			saveDiagnosisSequence();
			form.getLocalContext().setDiagnosisSequenceChanged(false);
		}
	}

	//WDEV-17648
	private void saveInvestigationsOrder()
	{
		if (form.getLocalContext().getInvestigationsSequenceChanged())
		{
			saveInvestigationSequence();
			form.getLocalContext().setInvestigationsSequenceChanged(false);
		}
	}
	
	private void moveDiagnosisForAttendancDown() 
	{
		form.grdDiagnosis().moveDown();
		form.getLocalContext().setDiagnosisSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void moveDiagnosisForAttendancUp() 
	{
		form.grdDiagnosis().moveUp();
		form.getLocalContext().setDiagnosisSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void moveInvestigationsForAttendanceDown() 
	{
		form.grdInvestigations().moveDown();
		form.getLocalContext().setInvestigationsSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void moveInvestigationsForAttendanceUp() 
	{
		form.grdInvestigations().moveUp();
		form.getLocalContext().setInvestigationsSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void moveInterventionDown() 
	{
		form.grdInterventionsTreatments().moveDown();
		form.getLocalContext().setInterventionSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void moveInterventionUp() 
	{
		form.grdInterventionsTreatments().moveUp();
		form.getLocalContext().setInterventionSequenceChanged(true);//wdev-17486
		updateControlsState();
	}

	private void editTreatmentIntervention() 
	{
		if(form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence() == null)
		{
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(createInterventionsTreatmentsForAttendence());
		}
		
		if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
		{
			engine.open(form.getForms().Emergency.InterventionsTreatments, new Object[] {Boolean.TRUE});
		}
		else
		{
			engine.open(form.getForms().Emergency.InterventionsTreatments);
		}
	}
	
	private InterventionsTreatmentsForAttendenceVo createInterventionsTreatmentsForAttendence() 
	{
		InterventionsTreatmentsForAttendenceVo record = new InterventionsTreatmentsForAttendenceVo();
		
		record.setPatient(form.getLocalContext().getPatient());
		record.setEpisode(form.getLocalContext().getEpisodeOfCare());
		record.setAttendance(form.getLocalContext().getCareContext());
		
		return record;
	}
	
	private void removeInterventionTreatment() 
	{
		form.getLocalContext().setRemoveInterventionTreatmentMessageBoxId(engine.showMessage("Do you really want to delete the selected Intervention / Treatment?", "Confirm Intervention / Treatment Delete", MessageButtons.YESNO, MessageIcon.QUESTION));
	}
	
	private void removeDiagnose() 
	{
		if(form.grdDiagnosis().getValue() == null)
			return;
		
		form.getLocalContext().setRIERecord(form.grdDiagnosis().getValue());
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}
	
	private void editDiagnose() 
	{
		if(form.grdDiagnosis().getValue() != null)
		{
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultation(domain.getPatientDiagnosis(form.grdDiagnosis().getValue()));
			
			if(form.getGlobalContext().Core.getPatientDiagnosisAtConsultation() == null)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
				populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
				resetPIDBarText();//WDEV-17334
				updateControlsState();//WDEV-17334
				return;
			}
			
			engine.open(form.getForms().Clinical.DiagnosisDialog);
		}
	}
	
	private void addDiagnose() 
	{
		form.getGlobalContext().Core.setPatientDiagnosisAtConsultation(null);
		form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
		
		if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
		{
			engine.open(form.getForms().Clinical.DiagnosisDialog, new Object[] {Boolean.TRUE});
		}
		else
		{
			engine.open(form.getForms().Clinical.DiagnosisDialog);
		}
	}
	
	private void removeInvestigation() 
	{
		form.getLocalContext().setRemoveInvestigationMessageBoxId(engine.showMessage("Do you really want to delete the selected Investigation?", "Confirm Investigation Delete", MessageButtons.YESNO, MessageIcon.QUESTION));
	}
	
	private void editInvestigation() 
	{
		if(form.grdInvestigations().getValue() instanceof InvestigationAttendenceDetailVo)
		{
			form.getGlobalContext().Emergency.setInvestigationAttendenceDetail((InvestigationAttendenceDetailVo) form.grdInvestigations().getValue());
		
			engine.open(form.getForms().Emergency.InvestigationAttendenceDetailDialog);
		}
	}
	
	private void addInvestigation() 
	{
		InvestigationAttendenceDetailVo newRecord = new InvestigationAttendenceDetailVo();
		newRecord.setPatient(form.getLocalContext().getPatient());
		newRecord.setEpisode(form.getLocalContext().getEpisodeOfCare());
		newRecord.setAttendance(form.getLocalContext().getCareContext());
		
		if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
		{
			newRecord.setAddedDuringCoding(true);
		}
		
		form.getGlobalContext().Emergency.setInvestigationAttendenceDetail(newRecord);
		
		engine.open(form.getForms().Emergency.InvestigationAttendenceDetailDialog);
	}

	public void initialize(ims.core.patient.vo.PatientRefVo patient, ims.core.admin.vo.EpisodeOfCareRefVo episode, ims.core.admin.vo.CareContextRefVo careContext, Boolean addedDuringCoding)
	{
		form.getLocalContext().setEmergencyInvestigationSequence(null);
		form.getLocalContext().setPatient(patient);
		form.getLocalContext().setEpisodeOfCare(episode);
		form.getLocalContext().setCareContext(careContext);
		form.getLocalContext().setIsEnabled(true);
		form.getLocalContext().setAddedDuringCoding(addedDuringCoding);
		form.getLocalContext().setInvestigationsSequenceChanged(false);//wdev-17486
		form.getLocalContext().setDiagnosisSequenceChanged(false);//wdev-17486
		form.getLocalContext().setInterventionSequenceChanged(false);//wdev-17486
		refresh();
	}

	private void updateControlsState() 
	{
		form.getContextMenus().Emergency.getInterventionsTreatmentsMenuEDITItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled())); //wdev-17637

		form.getContextMenus().Emergency.getInterventionsTreatmentsMenuREMOVEItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInterventionsTreatments().getValue() != null);
		
		form.getContextMenus().Emergency.getInterventionsTreatmentsMenuMOVE_DOWNItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInterventionsTreatments().getValue() != null 
				&& form.grdInterventionsTreatments().canMoveCurrentDown()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.getContextMenus().Emergency.getInterventionsTreatmentsMenuMOVE_UPItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInterventionsTreatments().getValue() != null 
				&& form.grdInterventionsTreatments().canMoveCurrentUp()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		
		form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuADDItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()));
		form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuEDITItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdDiagnosis().getValue() != null);
		form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuREMOVEItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdDiagnosis().getValue() != null && engine.hasRight(AppRight.ED_ATTENDENCE_NOTES_CAN_RIE_DIAGNOSIS));

		form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuMOVE_DOWNItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdDiagnosis().getValue() != null 
				&& form.grdDiagnosis().canMoveCurrentDown()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.getContextMenus().Emergency.getDiagnosisForAttendanceNotesMenuMOVE_UPItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdDiagnosis().getValue() != null 
				&& form.grdDiagnosis().canMoveCurrentUp()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));

		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuADDItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()));
		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuEDITItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInvestigations().getValue() instanceof InvestigationAttendenceDetailVo);
		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuREMOVEItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInvestigations().getValue() instanceof InvestigationAttendenceDetailVo);

		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuMOVE_DOWNItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInvestigations().getValue() != null 
				&& form.grdInvestigations().canMoveCurrentDown()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		form.getContextMenus().Emergency.getInvestigationsForAttendanceNotesMenuMOVE_UPItem().setVisible(form.getLocalContext().getCareContextIsNotNull() 
				&& Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdInvestigations().getValue() != null 
				&& form.grdInvestigations().canMoveCurrentUp()
				&& Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()));
		
		boolean bShowSaveCancel = false;
		if (Boolean.TRUE.equals(form.getLocalContext().getInterventionSequenceChanged()) //WDEV-18335
				|| Boolean.TRUE.equals(form.getLocalContext().getInvestigationsSequenceChanged())
				|| Boolean.TRUE.equals(form.getLocalContext().getDiagnosisSequenceChanged()))
			bShowSaveCancel = true;
			form.btnSave().setVisible(bShowSaveCancel);
			form.btnCancel().setVisible(bShowSaveCancel);
			form.btnSave().setEnabled(bShowSaveCancel);
			form.btnCancel().setEnabled(bShowSaveCancel);
	}

	private void populateInterventionsTreatmentsGrid() 
	{
		form.grdInterventionsTreatments().getRows().clear();
		
		InterventionTreatmentDetailVoCollection coll = null;
		
		if(form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence() != null)
			coll = form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence().getInterventionTreatments();
		
		if(coll == null || coll.size() == 0)
			return;
		
		if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
			coll.sort();

		for(InterventionTreatmentDetailVo intTreat : coll)
		{
			if(intTreat == null)
				continue;
			
			grdInterventionsTreatmentsRow row = null;
			if(Boolean.FALSE.equals(form.getLocalContext().getAddedDuringCoding()))
			{
				row = getSelectedParentRow(intTreat);
				if(row == null)
					return;
			}
			grdInterventionsTreatmentsRow childRow = null;

			if (row == null)
				childRow = form.grdInterventionsTreatments().getRows().newRow();
			else
				childRow = row.getRows().newRow();

			childRow.setColIntervention(intTreat.getTreatmentInterventionDescription());
			childRow.setValue(intTreat);
		}
	}
	
	private grdInterventionsTreatmentsRow getSelectedParentRow(InterventionTreatmentDetailVo intTreat) 
	{
		if(intTreat == null || intTreat.getTreatmentIntervention() == null)
			return null;
		
		for(int i=0; i<form.grdInterventionsTreatments().getRows().size(); i++)
		{
			grdInterventionsTreatmentsRow row = form.grdInterventionsTreatments().getRows().get(i);
			
			if(row.getValue() instanceof TreatmentInterventionType 
					&& row.getValue().equals(intTreat.getTreatmentIntervention().getTreatmentInterventionType()))
			{
				return row;
			}
		}
		
		grdInterventionsTreatmentsRow row = form.grdInterventionsTreatments().getRows().newRow();
		
		row.setColIntervention(intTreat.getTreatmentIntervention().getTreatmentInterventionType().getText());
		row.setBold(true);
		row.setValue(intTreat.getTreatmentIntervention().getTreatmentInterventionType());
		row.setSelectable(false);
		row.setExpanded(true);
		
		return row;
	}
	
	private void populatePatientDiagnosisGrid(PatientDiagnosisAtConsultationVoCollection patientDiagnosisAtConsultationVoCollection) 
	{
		form.grdDiagnosis().getRows().clear();
		
		if(patientDiagnosisAtConsultationVoCollection == null || patientDiagnosisAtConsultationVoCollection.size() == 0)
			return;
		
		if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
			patientDiagnosisAtConsultationVoCollection.sort();

		for(PatientDiagnosisAtConsultationVo diagnose : patientDiagnosisAtConsultationVoCollection)
		{
			if(diagnose == null)
				continue;
			
			ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdDiagnosisRow row = form.grdDiagnosis().getRows().newRow();
			row.setColDiagnose(diagnose.getDiagnosisDescription());
			
			boolean isPrimary = isPrimary(diagnose);
			row.setBold(isPrimary);
			
			if(isPrimary)
			{
				row.setColImage(form.getImages().Core.Pin);
				row.setTooltipForColImage("Main Diagnosis");
				form.getLocalContext().setPrimaryDiagnosis(diagnose);//WDEV-17320
			}
			
			row.setValue(diagnose);
		}
	}
	
	private boolean isPrimary(PatientDiagnosisAtConsultationVo diagnose) 
	{
		if(diagnose == null || diagnose.getPrimaryForCareSpells() == null || diagnose.getPrimaryForCareSpells().size() == 0)
			return false;
		
		for(CSPrimaryDiagnosisShortVo primary : diagnose.getPrimaryForCareSpells())
		{
			if(primary == null || primary.getCareContext() == null)
				continue;
			
			if(primary.getCareContext().equals(form.getLocalContext().getCareContext()) && Boolean.TRUE.equals(primary.getIsActive()))//WDEV-17356
				return true;
		}
		
		return false;
	}

	private void populateInvestigationsGrid(PatientRefVo patient, CareContextRefVo careContext) 
	{
		EmergencyAttendanceInvestigationCodingVo investigationSequenceVo = null;
		if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
		{
			investigationSequenceVo = domain.getInvestigationSequence(form.getGlobalContext().Core.getCurrentCareContext());
			if (investigationSequenceVo != null 
				&& investigationSequenceVo.getInvestigationSequenceCodingItemsIsNotNull())
			{
				form.getLocalContext().setEmergencyInvestigationSequence(investigationSequenceVo);
				showorderedInvestigations(investigationSequenceVo);
				return;
			}
		}
		
		form.grdInvestigations().getRows().clear();
		
		InvestigationAttendenceDetailVoCollection emergencyInvColl = domain.listInvestigationAttendence(careContext);
		
		if(emergencyInvColl != null)
		{
			for(InvestigationAttendenceDetailVo inv : emergencyInvColl)
			{
				if(inv == null)
					continue;
				
				ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdInvestigationsRow row = form.grdInvestigations().getRows().newRow();
				row.setColInvestigation(inv.getAttendenceInvestigation().getText());
				row.setValue(inv);
			}
		}
		
		OrderInvestigationForAttendenceNotesCcVoCollection invColl = domain.listOrderInvestigations(patient, careContext);
		
		if(invColl != null)
		{
			for(OrderInvestigationForAttendenceNotesCcVo inv : invColl)
			{
				if(inv == null)
					continue;
				
				ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdInvestigationsRow row = form.grdInvestigations().getRows().newRow();
				row.setColInvestigation(inv.getInvestigation().getInvestigationIndex().getName());
				row.setValue(inv);
			}
		}

		
	}

	private void showorderedInvestigations(EmergencyAttendanceInvestigationCodingVo investigationSequenceVo)
	{
		form.grdInvestigations().getRows().clear();
		
		InvestigationAttendenceDetailVoCollection emergencyInvColl = domain.listInvestigationAttendence(form.getLocalContext().getCareContext());
		OrderInvestigationForAttendenceNotesCcVoCollection invColl = domain.listOrderInvestigations(form.getLocalContext().getPatient(), form.getLocalContext().getCareContext());

		if (investigationSequenceVo != null 
			&& investigationSequenceVo.getInvestigationSequenceCodingItemsIsNotNull())
		{
			investigationSequenceVo.getInvestigationSequenceCodingItems().sort();
			for (int i = 0 ; i < investigationSequenceVo.getInvestigationSequenceCodingItems().size(); i++)
			{
				ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdInvestigationsRow row = null;
				//Look in emergencyInvColl and see if the record for investigationSequenceVo.getInvestigationSequenceCodingItems().get(i).getEmergencyInvestigation()
				if (investigationSequenceVo.getInvestigationSequenceCodingItems().get(i).getEmergencyInvestigationIsNotNull())
				{
					for(InvestigationAttendenceDetailVo inv : emergencyInvColl)
					{
						if (investigationSequenceVo.getInvestigationSequenceCodingItems().get(i).getEmergencyInvestigation().equals(inv))
						{
							row = form.grdInvestigations().getRows().newRow();
							row.setColInvestigation(inv.getAttendenceInvestigation().getText());
							row.setValue(inv);
						}
					}
				}
				
				//Look in invColl and see if the record for investigationSequenceVo.getInvestigationSequenceCodingItems().get(i).getOrderInvestigation()
				if (investigationSequenceVo.getInvestigationSequenceCodingItems().get(i).getOrderInvestigationIsNotNull())
				{
					for(OrderInvestigationForAttendenceNotesCcVo invOrder : invColl)
					{
						if (investigationSequenceVo.getInvestigationSequenceCodingItems().get(i).getOrderInvestigationIsNotNull()
							&& investigationSequenceVo.getInvestigationSequenceCodingItems().get(i).getOrderInvestigation().equals(invOrder.getID_OrderInvestigation()))
						{
							row = form.grdInvestigations().getRows().newRow();
							row.setColInvestigation(invOrder.getInvestigation().getInvestigationIndex().getName());
							row.setValue(invOrder);
						}
					}
				}
				
			}
		}
		
		if(emergencyInvColl != null)
		{
			for(InvestigationAttendenceDetailVo inv : emergencyInvColl)
			{
				if(inv == null)
					continue;

				boolean bFound = false;
				for (int findInv = 0 ; findInv < form.grdInvestigations().getRows().size() ; findInv++ )
				{
					if (form.grdInvestigations().getRows().get(findInv).getValue() instanceof InvestigationAttendenceDetailVo
						&& form.grdInvestigations().getRows().get(findInv).getValue().equals(inv) )
						bFound = true;
				}
				if (!bFound)
				{
					ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdInvestigationsRow row = form.grdInvestigations().getRows().newRowAt(0);
					row.setColInvestigation(inv.getAttendenceInvestigation().getText());
					row.setValue(inv);
				}
			}
		}
		
		if(invColl != null)
		{
			for(OrderInvestigationForAttendenceNotesCcVo inv : invColl)
			{
				if(inv == null)
					continue;
				
				boolean bFound = false;
				for (int findInv = 0 ; findInv < form.grdInvestigations().getRows().size() ; findInv++ )
				{
					if (form.grdInvestigations().getRows().get(findInv).getValue() instanceof OrderInvestigationForAttendenceNotesCcVo
						&& form.grdInvestigations().getRows().get(findInv).getValue().equals(inv) )
						bFound = true;
				}
				if (!bFound)
				{
					ims.emergency.forms.interventionsdiagnosisinvestigationscc.GenForm.grdInvestigationsRow row = form.grdInvestigations().getRows().newRowAt(0);
					row.setColInvestigation(inv.getInvestigation().getInvestigationIndex().getName());
					row.setValue(inv);
				}
			}
		}

		
	}

	public void setEnabled(Boolean value)
	{
		form.getLocalContext().setIsEnabled(value);
		updateControlsState();
	}

	public void clear()
	{
		form.getLocalContext().setPatient(null);
		form.getLocalContext().setEpisodeOfCare(null);
		form.getLocalContext().setCareContext(null);
		form.getLocalContext().setRIERecord(null);
		form.grdInterventionsTreatments().getRows().clear();
		form.grdDiagnosis().getRows().clear();
		form.grdInvestigations().getRows().clear();
		
		updateControlsState();
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
		form.getLocalContext().setInvestigationsSequenceChanged(false);//wdev-17486
		form.getLocalContext().setDiagnosisSequenceChanged(false);//wdev-17486
		form.getLocalContext().setInterventionSequenceChanged(false);//wdev-17486
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			doRIE();
			
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
			populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
		}
		
		if(formName.equals(form.getForms().Emergency.InterventionsTreatments))
		{
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.getInterventionsTreatmentsForAttendence(form.getLocalContext().getCareContext()));
			populateInterventionsTreatmentsGrid();
			if (form.getLocalContext().getAddedDuringCoding()
				&& ! form.getLocalContext().getInvestigationsSequenceChanged()
				&& ! form.getLocalContext().getDiagnosisSequenceChanged()
				&& ! form.getLocalContext().getInterventionSequenceChanged())
			{
				form.getLocalContext().setInterventionSequenceChanged(true);//wdev-17486
				saveOrder();
			}
		}
		
		if(formName.equals(form.getForms().Clinical.DiagnosisDialog) && result.equals(DialogResult.OK))
		{
			if(saveDiagnosis())
			{
				populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
				if (form.getLocalContext().getAddedDuringCoding()
					&& ! form.getLocalContext().getInvestigationsSequenceChanged()
					&& ! form.getLocalContext().getDiagnosisSequenceChanged()
					&& ! form.getLocalContext().getInterventionSequenceChanged())
				{
					form.getLocalContext().setDiagnosisSequenceChanged(true);//wdev-17486
					saveOrder();
				}
			}
		}
		
		if(formName.equals(form.getForms().Emergency.InvestigationAttendenceDetailDialog))
		{
			populateInvestigationsGrid(form.getLocalContext().getPatient(), form.getLocalContext().getCareContext());
			if (form.getLocalContext().getAddedDuringCoding()
				&& ! form.getLocalContext().getInvestigationsSequenceChanged()
				&& ! form.getLocalContext().getDiagnosisSequenceChanged()
				&& ! form.getLocalContext().getInterventionSequenceChanged())
			{
				form.getLocalContext().setInvestigationsSequenceChanged(true);//wdev-17486
				saveOrder();
			}
		}
		
		//WDEV-17337
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
		form.fireCustomControlValueChanged();
		
		updateControlsState();
		resetPIDBarText();//WDEV-17320
	}
	
	//WDEV-17320
	private void resetPIDBarText()
	{
		if (form.getGlobalContext().Core.getPatientShort() == null
			|| (form.getLocalContext().getPrimaryDiagnosis()!=null && (form.getLocalContext().getPrimaryDiagnosis().getPrimaryForCareSpells() == null
					|| (form.getLocalContext().getPrimaryDiagnosis().getPrimaryForCareSpellsIsNotNull()
					&& form.getLocalContext().getPrimaryDiagnosis().getPrimaryForCareSpells().size() == 0) )))
			return;

		new ResetPIDBarHelper(engine, form.getGlobalContext().Core.getPatientShort() , domain.getPIDDiagnosisInfo(form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().Core.getEpisodeofCareShort()));
		form.getLocalContext().setPrimaryDiagnosis(null);
	}
	
	private void doRIE() 
	{
		boolean isStale = false;
		
		if(form.getLocalContext().getRIERecord() instanceof PatientDiagnosisAtConsultationVo)
		{
			if(domain.isStaleOnDiagnosis(form.getLocalContext().getRIERecord()))
			{
				isStale = true;
			}
		}
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		try 
		{
			domain.markAsRie(form.getLocalContext().getRIERecord(), engine.getFormName(), form.getLocalContext().getPatient().getID_Patient(), null, form.getLocalContext().getCareContext().getID_CareContext(), form.getGlobalContext().Core.getRieMessage());
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}
	
	private boolean saveDiagnosis() 
	{
		PatientDiagnosisAtConsultationVoCollection diagnosisList = form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList();
		
		String[] errors = diagnosisList.validate();
		if(errors != null && errors.length >0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.saveDiagnosis(diagnosisList));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
			populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
			return false;
		}
		
		return true;
	}
	
	private void saveInterventionSequence() 
	{
		InterventionsTreatmentsForAttendenceVo record = form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence();
		
		if(record == null || record.getInterventionTreatments() == null || record.getInterventionTreatments().size() == 0)
			return;
		
		//Need to save the sequence of Interventions
		for (int i = 0 ; i < form.grdInterventionsTreatments().getRows().size() ; i++)
		{
			InterventionTreatmentDetailVo interventionVo = (InterventionTreatmentDetailVo)form.grdInterventionsTreatments().getRows().get(i).getValue();
			
			interventionVo.setCodingSequence(i);
			
			record.getInterventionTreatments().set(record.getInterventionTreatments().indexOf(interventionVo), interventionVo);
		}
		String[] errors = record.validate();
		if(errors != null && errors.length >0)
		{
			engine.showErrors(errors);
		}
			
		try 
		{
			domain.save(record);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.getInterventionsTreatmentsForAttendence(form.getLocalContext().getCareContext()));
		}
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getRemoveInterventionTreatmentMessageBoxId() != null && messageBoxId == form.getLocalContext().getRemoveInterventionTreatmentMessageBoxId())
		{
			if(DialogResult.YES.equals(result))
			{
				if(removeTreatmentIntervention())
					populateInterventionsTreatmentsGrid();
			}
		}
		else if(form.getLocalContext().getRemoveInvestigationMessageBoxId() != null && messageBoxId == form.getLocalContext().getRemoveInvestigationMessageBoxId())
		{
			if(DialogResult.YES.equals(result))
			{
				if(doRemoveInvestigation())
					populateInvestigationsGrid(form.getLocalContext().getPatient(), form.getLocalContext().getCareContext());
			}
		}
		
		updateControlsState();
	}
	
	private boolean removeTreatmentIntervention() 
	{
		InterventionsTreatmentsForAttendenceVo record = form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence();
		
		if(record == null || record.getInterventionTreatments() == null || record.getInterventionTreatments().size() == 0)
			return false;
		
		if(!(form.grdInterventionsTreatments().getValue() instanceof InterventionTreatmentDetailVo))
			return false;
		
		//WDEV-17648 if the sequence was changed, do an update
		if (form.getLocalContext().getInterventionSequenceChanged())
		{
			for (int x = 0; x < form.grdInterventionsTreatments().getRows().size(); x++)
			{
				InterventionTreatmentDetailVo interventionVo = (InterventionTreatmentDetailVo) form.grdInterventionsTreatments().getRows().get(x).getValue();
				interventionVo.setCodingSequence(x);
				record.getInterventionTreatments().set(record.getInterventionTreatments().indexOf(interventionVo), interventionVo);
			}
			
			form.getLocalContext().setInterventionSequenceChanged(false);
		}
		
		InterventionTreatmentDetailVo treatmenttoRemove = (InterventionTreatmentDetailVo) form.grdInterventionsTreatments().getValue();
		
		record.getInterventionTreatments().remove(treatmenttoRemove);
		String[] errors = record.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.save(record));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.getInterventionsTreatmentsForAttendence(form.getLocalContext().getCareContext()));
			populateInterventionsTreatmentsGrid();
			return false;
		}
		
		return true;
	}
	
	private boolean doRemoveInvestigation() 
	{
		if(form.grdInvestigations().getValue() instanceof InvestigationAttendenceDetailVo)
		{
			InvestigationAttendenceDetailVo record = (InvestigationAttendenceDetailVo) form.grdInvestigations().getValue();
			record.setActive(false);
			
			String[] errors = record.validate();
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}
			
			try 
			{
				domain.save(record);
			} 
			catch (StaleObjectException e) 
			{
				e.printStackTrace();
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				populateInvestigationsGrid(form.getLocalContext().getPatient(), form.getLocalContext().getCareContext());
				return false;
			}
			
			return true;
		}
		
		return false;
	}

	@Override
	protected void onGrdInterventionsTreatmentsSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onGrdInvestigationsSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onGrdDiagnosisSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	public void refresh() 
	{
		if(form.getLocalContext().getCareContext() != null)
		{
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.getInterventionsTreatmentsForAttendence(form.getLocalContext().getCareContext()));
			populateInterventionsTreatmentsGrid();
		
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
			populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
		
			if(form.getLocalContext().getPatient() != null)
			{
				populateInvestigationsGrid(form.getLocalContext().getPatient(), form.getLocalContext().getCareContext());
			}
		}
		
		resetPIDBarText();//WDEV-17320
		updateControlsState();
	}
	
	//WDEV-17337
	public EdAssessment_CustomControlsEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}
	
	//WDEV-17337
	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		saveOrder();
	}

	private void saveOrder()
	{
		if (form.getLocalContext().getInvestigationsSequenceChanged())
			saveInvestigationSequence();
		
		if (form.getLocalContext().getDiagnosisSequenceChanged())
			saveDiagnosisSequence();

		if (form.getLocalContext().getInterventionSequenceChanged())
			saveInterventionSequence();
		
		form.getLocalContext().setInvestigationsSequenceChanged(false);//wdev-17486
		form.getLocalContext().setDiagnosisSequenceChanged(false);//wdev-17486
		form.getLocalContext().setInterventionSequenceChanged(false);//wdev-17486

		refresh();
	}

	private void saveInvestigationSequence()
	{
		EmergencyAttendanceInvestigationCodingSequenceItemVoCollection invColl = new EmergencyAttendanceInvestigationCodingSequenceItemVoCollection();
		
		EmergencyAttendanceInvestigationCodingVo voEmergencyAttendanceInvestigationCoding = form.getLocalContext().getEmergencyInvestigationSequence();
		if ( voEmergencyAttendanceInvestigationCoding == null)
			voEmergencyAttendanceInvestigationCoding = new EmergencyAttendanceInvestigationCodingVo();
		
		voEmergencyAttendanceInvestigationCoding.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		for (int gridIndex = 0 ; gridIndex < form.grdInvestigations().getRows().size() ; gridIndex++)
		{
			EmergencyAttendanceInvestigationCodingSequenceItemVo voSeq = new EmergencyAttendanceInvestigationCodingSequenceItemVo();
			
			if (form.grdInvestigations().getRows().get(gridIndex).getValue() instanceof InvestigationAttendenceDetailVo)
			{
				voSeq.setEmergencyInvestigation((InvestigationAttendenceDetailVo)form.grdInvestigations().getRows().get(gridIndex).getValue());
				voSeq.setOrderInvestigation(null);
			}
			if (form.grdInvestigations().getRows().get(gridIndex).getValue() instanceof OrderInvestigationForAttendenceNotesCcVo)
			{
				voSeq.setEmergencyInvestigation(null);
				voSeq.setOrderInvestigation(((OrderInvestigationForAttendenceNotesCcVo)form.grdInvestigations().getRows().get(gridIndex).getValue()).getID_OrderInvestigation());
			}
			
			voSeq.setCodingSequence(gridIndex);
				
			invColl.add(voSeq);
		}
		voEmergencyAttendanceInvestigationCoding.setInvestigationSequenceCodingItems(invColl);
		String[] errors = voEmergencyAttendanceInvestigationCoding.validate();
		if(errors != null && errors.length >0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			domain.saveInvestigationSequence(voEmergencyAttendanceInvestigationCoding);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
			populateInvestigationsGrid(form.getLocalContext().getPatient(), form.getLocalContext().getCareContext());
		}
		
	}

	private void saveDiagnosisSequence() 
	{
		PatientDiagnosisAtConsultationVoCollection diagnosisList = form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList();
		
		for (int gridIndex = 0 ; gridIndex < form.grdDiagnosis().getRows().size() ; gridIndex++)
		{
			PatientDiagnosisAtConsultationVo diagnosisVo = (PatientDiagnosisAtConsultationVo)form.grdDiagnosis().getRows().get(gridIndex).getValue();
				
			diagnosisVo.setCodingSequence(gridIndex);
				
			diagnosisList.set(diagnosisList.indexOf(diagnosisVo), diagnosisVo);
		}
		
		String[] errors = diagnosisList.validate();
		if(errors != null && errors.length >0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.saveDiagnosis(diagnosisList));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(domain.listPatientDiagnosis(form.getLocalContext().getCareContext()));
			populatePatientDiagnosisGrid(form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList());
		}
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		form.getLocalContext().setInvestigationsSequenceChanged(false);//wdev-17486
		form.getLocalContext().setDiagnosisSequenceChanged(false);//wdev-17486
		form.getLocalContext().setInterventionSequenceChanged(false);//wdev-17486
		refresh();
	}
}
