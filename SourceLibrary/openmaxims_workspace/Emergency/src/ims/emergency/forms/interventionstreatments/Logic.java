//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.interventionstreatments;

import ims.clinical.vo.lookups.TreatmentInterventionType;
import ims.clinicaladmin.vo.TreatmentInterventionLiteVo;
import ims.clinicaladmin.vo.TreatmentInterventionLiteVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.interventionstreatments.GenForm.grdHotlistInterventionTreatmentsRow;
import ims.emergency.forms.interventionstreatments.GenForm.grdSelectedRow;
import ims.emergency.vo.InterventionTreatmentDetailVo;
import ims.emergency.vo.InterventionTreatmentDetailVoCollection;
import ims.emergency.vo.InterventionsTreatmentsForAttendenceVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final TreatmentInterventionType ALL_TYPE = new TreatmentInterventionType(0, "All", true);

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize(args);
		open(true);
	}
	
	private void open(boolean isFromFormOpen) 
	{
		CareContextRefVo attendence = form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence() != null ? form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence().getAttendance() : form.getGlobalContext().Core.getCurrentCareContext();
		
		InterventionsTreatmentsForAttendenceVo record = domain.getInterventionsTreatmentsForAttendence(attendence);
		
		if(record != null)
		{
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(record);
		}
		
		if(form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence() != null)
		{
			populateSelectedGrid(form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence().getInterventionTreatments());
		}
		
		populateHotlistTreatmentInterventions(domain.listTreatmentsInterventionsFromHotlist(getListOfAddedTreatmentsInterventions(), null));
		
		if(!isFromFormOpen)
			form.ccAuthoringInfo().setValue(null);
		
		form.setMode(isFromFormOpen ? FormMode.EDIT : FormMode.VIEW);
		updateControlsState();
		//wdev-17444
		
		if( form.grdSelected().getRows().size() > 0 )
		{
			form.ccAuthoringInfo().setEnabledAuthoringHCP(false);
			form.ccAuthoringInfo().setEnabledDateTime(false);
			form.getLocalContext().setAuthoringInfoControlIsEnabled(false);
		}
		else
			form.getLocalContext().setAuthoringInfoControlIsEnabled(true);
			
		
		//------------
	}

	private String getListOfAddedTreatmentsInterventions() 
	{
		if(form.grdSelected().getRows().size() == 0)
			return null;
		
		String listOfTreatmentsInterventionsAllreadyAdded = "";
		
		for(int i=0; i<form.grdSelected().getRows().size(); i++)
		{
			grdSelectedRow parentRow = form.grdSelected().getRows().get(i);
			Object rowValue = form.grdSelected().getRows().get(i).getValue();
			
			if(rowValue instanceof TreatmentInterventionType)
			{
				for(int j=0; j<parentRow.getRows().size(); j++)
				{
					Object childRowValue = parentRow.getRows().get(j).getValue();
					
					if(childRowValue instanceof TreatmentInterventionLiteVo)
					{
						listOfTreatmentsInterventionsAllreadyAdded += (listOfTreatmentsInterventionsAllreadyAdded.length() == 0 ? "" : ",") + ((TreatmentInterventionLiteVo) childRowValue).getID_TreatmentIntervention();
					}
					else if(childRowValue instanceof InterventionTreatmentDetailVo)
					{
						if(((InterventionTreatmentDetailVo) childRowValue).getTreatmentIntervention() != null)
						{
							listOfTreatmentsInterventionsAllreadyAdded += (listOfTreatmentsInterventionsAllreadyAdded.length() == 0 ? "" : ",") + ((InterventionTreatmentDetailVo) childRowValue).getTreatmentIntervention().getID_TreatmentIntervention();
						}
					}
				}
			}
		}
		
		return listOfTreatmentsInterventionsAllreadyAdded.length() > 0 ? listOfTreatmentsInterventionsAllreadyAdded : null;
	}

	private void updateControlsState() 
	{
		boolean editMode = FormMode.EDIT.equals(form.getMode());
		
		form.btnAdd().setEnabled(editMode && form.qmbTreatmentIntervention().getValue() instanceof TreatmentInterventionLiteVo);
		form.btnAddSelected().setEnabled(editMode && form.grdHotlistInterventionTreatments().getValue() != null);
		form.btnRemoveSelected().setEnabled(editMode && form.grdSelected().getValue() != null);
		
		if( Boolean.FALSE.equals(form.getLocalContext().getAuthoringInfoControlIsEnabled()) )	//wdev-17444
		{
			form.ccAuthoringInfo().setEnabledAuthoringHCP(false);
			form.ccAuthoringInfo().setEnabledDateTime(false);
		}
		else
		{
			form.ccAuthoringInfo().setEnabledAuthoringHCP(editMode);
			form.ccAuthoringInfo().setEnabledDateTime(editMode);
		}
	}

	private void populateHotlistTreatmentInterventions(TreatmentInterventionLiteVoCollection list) 
	{
		form.grdHotlistInterventionTreatments().getRows().clear();
		
		if(list == null || list.size() == 0)
			return;
		
		for(TreatmentInterventionLiteVo treatInt : list)
		{
			addTreatmentInterventionFromHotlistRow(treatInt);
		}
	}

	private void addTreatmentInterventionFromHotlistRow(TreatmentInterventionLiteVo treatInt) 
	{
		if(treatInt == null)
			return;
		
		grdHotlistInterventionTreatmentsRow row = getParentRow(treatInt);
		
		if(row == null)
			return;
		
		grdHotlistInterventionTreatmentsRow childRow = row.getRows().newRow();
		
		childRow.setColTreatmentIntervention(treatInt.getTreatmentInterventionName());
		childRow.setValue(treatInt);
	}

	private grdHotlistInterventionTreatmentsRow getParentRow(TreatmentInterventionLiteVo treatInt) 
	{
		if(treatInt == null)
			return null;
		
		for(int i=0; i<form.grdHotlistInterventionTreatments().getRows().size(); i++)
		{
			grdHotlistInterventionTreatmentsRow row = form.grdHotlistInterventionTreatments().getRows().get(i);
			
			if(row.getValue() instanceof TreatmentInterventionType 
					&& row.getValue().equals(treatInt.getTreatmentInterventionType()))
			{
				return row;
			}
		}
		
		grdHotlistInterventionTreatmentsRow row = form.grdHotlistInterventionTreatments().getRows().newRow();
		
		row.setColTreatmentIntervention(treatInt.getTreatmentInterventionType().getText());
		row.setValue(treatInt.getTreatmentInterventionType());
		row.setSelectable(false);
		row.setBold(true);
		row.setExpanded(true);
		
		return row;
	}

	private void populateSelectedGrid(InterventionTreatmentDetailVoCollection interventionTreatments) 
	{
		form.grdSelected().getRows().clear();
		
		if(interventionTreatments == null || interventionTreatments.size() == 0)
			return;
		
		for(InterventionTreatmentDetailVo intTreat : interventionTreatments)
		{
			addInterventionTreatmentDetailsRow(intTreat);
		}
	}

	private void addInterventionTreatmentDetailsRow(InterventionTreatmentDetailVo intTreat) 
	{
		if(intTreat == null)
			return;
		
		grdSelectedRow row = getSelectedParentRow(intTreat);
		
		if(row == null)
			return;
		
		grdSelectedRow childRow = row.getRows().newRow();
		childRow.setColTreatmentIntervention(intTreat.getTreatmentInterventionDescription());
		childRow.setValue(intTreat);
	}

	private grdSelectedRow getSelectedParentRow(InterventionTreatmentDetailVo intTreat) 
	{
		if(intTreat == null || intTreat.getTreatmentIntervention() == null)
			return null;
		
		for(int i=0; i<form.grdSelected().getRows().size(); i++)
		{
			grdSelectedRow row = form.grdSelected().getRows().get(i);
			
			if(row.getValue() instanceof TreatmentInterventionType 
					&& row.getValue().equals(intTreat.getTreatmentIntervention().getTreatmentInterventionType()))
			{
				return row;
			}
		}
		
		grdSelectedRow row = form.grdSelected().getRows().newRow();
		
		row.setColTreatmentIntervention(intTreat.getTreatmentIntervention().getTreatmentInterventionType().getText());
		row.setValue(intTreat.getTreatmentIntervention().getTreatmentInterventionType());
		row.setSelectable(false);
		row.setBold(true);
		row.setExpanded(true);
		
		return row;
	}

	@Override
	protected void onGrdSelectedSelectionChanged()
	{
		if(form.grdSelected().getValue() instanceof InterventionTreatmentDetailVo)
		{
			form.ccAuthoringInfo().setValue(((InterventionTreatmentDetailVo) form.grdSelected().getValue()).getAuthoringInformation());
		}
		else
		{
			form.ccAuthoringInfo().initializeComponent();
		}
		
		updateControlsState();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			//open(false);
			engine.close(DialogResult.OK);
		}
	}
	
	private void initialize(Object[] args) 
	{
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof Boolean)
			{
				form.getLocalContext().setAddedDuringCoding(Boolean.TRUE);
			}
		}
		
		form.cmbTreatmentType().newRow(ALL_TYPE, ALL_TYPE.getText());
		form.cmbTreatmentType().setValue(ALL_TYPE);
		form.ccAuthoringInfo().initializeComponent();
		form.ccAuthoringInfo().setIsRequiredPropertyToControls(true);
		form.getLocalContext().setLoggedInAuthoring(form.ccAuthoringInfo().getValue()); //WDEV-17533
	}

	private boolean save() 
	{
		InterventionsTreatmentsForAttendenceVo record = populateDataFromScreen();
		
		String[] errors = record.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getGlobalContext().Emergency.setInterventionsTreatmentsForAttendence(domain.save(record));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open(false);
			return false;
		} 
		
		return true;
	}

	private InterventionsTreatmentsForAttendenceVo populateDataFromScreen() 
	{
		InterventionsTreatmentsForAttendenceVo record = form.getGlobalContext().Emergency.getInterventionsTreatmentsForAttendence();
		
		record.setInterventionTreatments(populateInterventionsTreatmentsFromScreen());
		
		return record;
	}

	private InterventionTreatmentDetailVoCollection populateInterventionsTreatmentsFromScreen() 
	{
		if(form.grdSelected().getRows().size() == 0)
			return null;
		
		InterventionTreatmentDetailVoCollection coll = new InterventionTreatmentDetailVoCollection();
		
		for(int i=0; i<form.grdSelected().getRows().size(); i++)
		{
			if(form.grdSelected().getRows().get(i) == null)
				continue;
			
			for(int j=0; j<form.grdSelected().getRows().get(i).getRows().size(); j++)
			{
				if(form.grdSelected().getRows().get(i).getRows().get(j).getValue() instanceof InterventionTreatmentDetailVo)
				{
					coll.add((InterventionTreatmentDetailVo) form.grdSelected().getRows().get(i).getRows().get(j).getValue());
				}
				else if(form.grdSelected().getRows().get(i).getRows().get(j).getValue() instanceof TreatmentInterventionLiteVo)
				{
					coll.add(createInterventionTreatmentDetail((TreatmentInterventionLiteVo) form.grdSelected().getRows().get(i).getRows().get(j).getValue()));
				}
			}
		}
		
		return coll;
	}

	private InterventionTreatmentDetailVo createInterventionTreatmentDetail(TreatmentInterventionLiteVo value) 
	{
		if(value == null)
			return null;
		
		InterventionTreatmentDetailVo record = new InterventionTreatmentDetailVo();
		//wdev-17444
		if( Boolean.TRUE.equals(form.getLocalContext().getAuthoringInfoControlIsEnabled()) )
			record.setAuthoringInformation(form.ccAuthoringInfo().getValue());
		else
			record.setAuthoringInformation(form.getLocalContext().getLoggedInAuthoring());
		//----------
		record.setTreatmentIntervention(value);
		record.setTreatmentInterventionDescription(value.getTreatmentInterventionName());
		
		if(Boolean.TRUE.equals(form.getLocalContext().getAddedDuringCoding()))
		{
			record.setAddedDuringCoding(true);
		}
		
		return record;
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.grdHotlistInterventionTreatments().setValue(null);
		form.grdSelected().setValue(null);
		form.ccAuthoringInfo().initializeComponent();
		
		updateControlsState();
	}
	
	@Override
	protected void onBtnRemoveSelectedClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.grdSelected().getSelectedRow() != null)
		{
			grdSelectedRow parentRow = null;
			
			if(form.grdSelected().getSelectedRow().getValue() instanceof TreatmentInterventionLiteVo)
			{
				parentRow = getParentRowInSelectedGrid((TreatmentInterventionLiteVo) form.grdSelected().getSelectedRow().getValue());
			}
			else if(form.grdSelected().getSelectedRow().getValue() instanceof InterventionTreatmentDetailVo)
			{
				parentRow = getSelectedParentRow((InterventionTreatmentDetailVo) form.grdSelected().getSelectedRow().getValue());
			}
		
			form.grdSelected().removeSelectedRow();
			
			if(parentRow != null && parentRow.getRows().size() == 0)
			{
				removeSelectedRow(parentRow);
			}
		}
		
		//WDEV-17533
		if( form.grdSelected().getRows().size() == 0 )
		{
			form.getLocalContext().setAuthoringInfoControlIsEnabled(true);
		}
		
		TreatmentInterventionType type = null;
		
		if(!ALL_TYPE.equals(form.cmbTreatmentType().getValue()))
		{
			type = form.cmbTreatmentType().getValue();
		}
		
		populateHotlistTreatmentInterventions(domain.listTreatmentsInterventionsFromHotlist(getListOfAddedTreatmentsInterventions(), type));
		
		form.ccAuthoringInfo().initializeComponent();
		updateControlsState();
	}
	
	private void removeSelectedRow(grdSelectedRow parentRow) 
	{
		if(parentRow == null || parentRow.getValue() == null)
			return;
		
		for(int i = 0; i<form.grdSelected().getRows().size(); i++)
		{
			if(parentRow.getValue().equals(form.grdSelected().getRows().get(i).getValue()))
			{
				form.grdSelected().getRows().remove(i);
				return;
			}
		}
	}

	@Override
	protected void onBtnAddSelectedClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.grdHotlistInterventionTreatments().getValue() instanceof TreatmentInterventionLiteVo)
		{
			addTreatmentInterventionInSelectedGrid((TreatmentInterventionLiteVo) form.grdHotlistInterventionTreatments().getValue());
			
			if(form.grdHotlistInterventionTreatments().getSelectedRow() != null && form.grdHotlistInterventionTreatments().getSelectedRow().getValue() instanceof TreatmentInterventionLiteVo)
			{
				grdHotlistInterventionTreatmentsRow parentRow = getParentRow((TreatmentInterventionLiteVo) form.grdHotlistInterventionTreatments().getSelectedRow().getValue());
				
				form.grdHotlistInterventionTreatments().removeSelectedRow();
					
				if(parentRow != null && parentRow.getRows().size() == 0)
				{
					removeRow(parentRow);
				}
			}
		}
		
		form.ccAuthoringInfo().initializeComponent();
		
		updateControlsState();
	}
	
	private void removeRow(grdHotlistInterventionTreatmentsRow parentRow) 
	{
		if(parentRow == null || parentRow.getValue() == null)
			return;
		
		for(int i = 0; i<form.grdHotlistInterventionTreatments().getRows().size(); i++)
		{
			if(parentRow.getValue().equals(form.grdHotlistInterventionTreatments().getRows().get(i).getValue()))
			{
				form.grdHotlistInterventionTreatments().getRows().remove(i);
				return;
			}
		}
	}

	@Override
	protected void onBtnAddClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addTreatmentInterventionInSelectedGrid(form.qmbTreatmentIntervention().getValue());
		form.qmbTreatmentIntervention().clear();
		form.ccAuthoringInfo().initializeComponent();
		updateControlsState();
	}
	
	private void addTreatmentInterventionInSelectedGrid(TreatmentInterventionLiteVo treatmentInterventionLiteVo) 
	{
		if(treatmentInterventionLiteVo == null)
			return;
		
		grdSelectedRow row = getParentRowInSelectedGrid(treatmentInterventionLiteVo);
		
		if(row == null)
			return;
		
		grdSelectedRow childRow = row.getRows().newRow();
		
		childRow.setColTreatmentIntervention(treatmentInterventionLiteVo.getTreatmentInterventionName());
		childRow.setBackColor(Color.Beige);
		childRow.setValue(treatmentInterventionLiteVo);
		form.grdSelected().setValue(treatmentInterventionLiteVo); //WDEV-17402
	}

	private grdSelectedRow getParentRowInSelectedGrid(TreatmentInterventionLiteVo treatmentInterventionLiteVo) 
	{
		if(treatmentInterventionLiteVo == null)
			return null;
		
		for(int i=0; i<form.grdSelected().getRows().size(); i++)
		{
			grdSelectedRow row = form.grdSelected().getRows().get(i);
			
			if(row.getValue() instanceof TreatmentInterventionType 
					&& row.getValue().equals(treatmentInterventionLiteVo.getTreatmentInterventionType()))
			{
				return row;
			}
		}
		
		grdSelectedRow row = form.grdSelected().getRows().newRow();
		
		row.setColTreatmentIntervention(treatmentInterventionLiteVo.getTreatmentInterventionType().getText());
		row.setValue(treatmentInterventionLiteVo.getTreatmentInterventionType());
		row.setSelectable(false);
		row.setBold(true);
		row.setExpanded(true);
		
		return row;
	}

	@Override
	protected void onQmbTreatmentInterventionTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		populateTreatmentsInterventionsQueryCombo(value);
		updateControlsState();
	}

	private void populateTreatmentsInterventionsQueryCombo(String criteria) 
	{
		form.qmbTreatmentIntervention().clear();
		
		TreatmentInterventionLiteVoCollection list = domain.listTreatmentsInterventions(criteria, getListOfAddedTreatmentsInterventions());
		
		if(list == null || list.size() == 0)
			return;
		
		for(TreatmentInterventionLiteVo treatInt : list)
		{
			if(treatInt == null)
				continue;
			
			form.qmbTreatmentIntervention().newRow(treatInt, treatInt.getTreatmentInterventionName());
		}
		
		if(list.size() > 0)
		{
			form.qmbTreatmentIntervention().showOpened();
		}
	}

	@Override
	protected void onGrdHotlistInterventionTreatmentsSelectionChanged()	throws PresentationLogicException 
	{
		form.ccAuthoringInfo().initializeComponent();
		form.getLocalContext().setLoggedInAuthoring(form.ccAuthoringInfo().getValue());	//wdev-17444
		updateControlsState();
	}

	@Override
	protected void onQmbTreatmentInterventionValueChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onCmbTreatmentTypeValueChanged()	throws PresentationLogicException 
	{
		TreatmentInterventionType type = null;
		
		if(!ALL_TYPE.equals(form.cmbTreatmentType().getValue()))
		{
			type = form.cmbTreatmentType().getValue();
		}
		
		populateHotlistTreatmentInterventions(domain.listTreatmentsInterventionsFromHotlist(getListOfAddedTreatmentsInterventions(), type));
		updateControlsState();
	}
}
