//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.trackingandattendanceworklists;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbPresentingProblemLookup();
	abstract protected void defaultcmbPresentingProblemLookupValue();
	abstract protected void bindcmbSourceOfReferralLookup();
	abstract protected void defaultcmbSourceOfReferralLookupValue();
	abstract protected void bindcmbOutcomeLookup();
	abstract protected void defaultcmbOutcomeLookupValue();
	abstract protected void bindcmbPriorityLookup();
	abstract protected void defaultcmbPriorityLookupValue();
	abstract protected void bindcmbConsultantSpecialtyLookup();
	abstract protected void defaultcmbConsultantSpecialtyLookupValue();
	abstract protected void bindcmbSpecialtyLookup();
	abstract protected void defaultcmbSpecialtyLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnViewResultsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPresentingProblemValueSet(Object value);
	abstract protected void oncmbSourceOfReferralValueSet(Object value);
	abstract protected void oncmbOutcomeValueSet(Object value);
	abstract protected void onCmbOutcomeValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkBedAllocatedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAwaitingBedValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdResultsGridHeaderClicked(int column) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdResultsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnReferSpecialtyClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSeenCompleteHCPClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnAssessmentDetailsClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnViewPatientSummaryClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onChkAwaitingReviewValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnClearClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSearchClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteDischargeToValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onDteDischargeFromValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbPriorityValueSet(Object value);
	abstract protected void oncmbConsultantSpecialtyValueSet(Object value);
	abstract protected void oncmbSpecialtyValueSet(Object value);

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnViewResults().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnViewResultsClick();
			}
		});
		this.form.cmbPresentingProblem().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPresentingProblemValueSet(value);
			}
		});
		this.form.cmbSourceOfReferral().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSourceOfReferralValueSet(value);
			}
		});
		this.form.cmbOutcome().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbOutcomeValueSet(value);
			}
		});
		this.form.cmbOutcome().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbOutcomeValueChanged();
			}
		});
		this.form.chkBedAllocated().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkBedAllocatedValueChanged();
			}
		});
		this.form.chkAwaitingBed().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAwaitingBedValueChanged();
			}
		});
		this.form.grdResults().setGridHeaderClickedEvent(new GridHeaderClicked()
		{
			private static final long serialVersionUID = 1L;
			public void handle(int column) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdResultsGridHeaderClicked(column);
			}
		});
		this.form.grdResults().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdResultsSelectionChanged();
			}
		});
		this.form.btnReferSpecialty().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnReferSpecialtyClick();
			}
		});
		this.form.btnSeenCompleteHCP().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSeenCompleteHCPClick();
			}
		});
		this.form.btnAssessmentDetails().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnAssessmentDetailsClick();
			}
		});
		this.form.btnViewPatientSummary().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnViewPatientSummaryClick();
			}
		});
		this.form.chkAwaitingReview().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onChkAwaitingReviewValueChanged();
			}
		});
		this.form.btnClear().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnClearClick();
			}
		});
		this.form.btnSearch().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSearchClick();
			}
		});
		this.form.dteDischargeTo().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteDischargeToValueChanged();
			}
		});
		this.form.dteDischargeFrom().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onDteDischargeFromValueChanged();
			}
		});
		this.form.cmbPriority().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbPriorityValueSet(value);
			}
		});
		this.form.cmbConsultantSpecialty().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbConsultantSpecialtyValueSet(value);
			}
		});
		this.form.cmbSpecialty().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpecialtyValueSet(value);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbPresentingProblemLookup();
		bindcmbSourceOfReferralLookup();
		bindcmbOutcomeLookup();
		bindcmbPriorityLookup();
		bindcmbConsultantSpecialtyLookup();
		bindcmbSpecialtyLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbPresentingProblemLookup();
		bindcmbSourceOfReferralLookup();
		bindcmbOutcomeLookup();
		bindcmbPriorityLookup();
		bindcmbConsultantSpecialtyLookup();
		bindcmbSpecialtyLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbPresentingProblemLookupValue();
		defaultcmbSourceOfReferralLookupValue();
		defaultcmbOutcomeLookupValue();
		defaultcmbPriorityLookupValue();
		defaultcmbConsultantSpecialtyLookupValue();
		defaultcmbSpecialtyLookupValue();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
