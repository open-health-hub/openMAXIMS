//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.rtadialog;


import ims.core.vo.PersonAddress;
import ims.core.vo.PersonName;
import ims.emergency.forms.rtadialog.GenForm.GroupDriverOwnerEnumeration;
import ims.emergency.forms.rtadialog.GenForm.GroupPoliceEnumeration;
import ims.emergency.vo.RTAVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

import java.util.ArrayList;



public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if(args != null && args.length == 1 && args[0] != null && args[0] instanceof FormMode)
		{
			form.setMode((FormMode) args[0]);
			populateScreenFromData(form.getGlobalContext().Emergency.getRTA());
			
		}
		
	}
	
	private void populateScreenFromData(RTAVo record)
	{
		clear();
		if(	record == null)
		{
			if(	form.getMode().equals(FormMode.EDIT))
			{
				form.txtPoliceId().setEnabled(false);
				form.cmbPoliceStation().setEnabled(false);
			}
			return;
		}
		
		form.cmbProtectionDevice().setValue(record.getProtectionDevice());
		form.cmbRTAPatientType().setValue(record.getRTAType());
		if( Boolean.TRUE.equals(record.getIsDriverOwner()))
			form.GroupDriverOwner().setValue(GroupDriverOwnerEnumeration.rdoYes);
		else
			form.GroupDriverOwner().setValue(GroupDriverOwnerEnumeration.rdoNo);
		
		PersonName driverName = record.getDriverName();
		if(	driverName != null)
		{
			//WDEV-17390
			form.txtDriversName().setValue(driverName.getSurname());
			form.txtDriversForename().setValue(driverName.getForename());	
		}	
		PersonAddress driverAdress = record.getDriverAddress();
		if(	driverAdress != null)
		{
			form.txtAddress1().setValue(driverAdress.getAddressBuildingName());
			form.txtAddress2().setValue(driverAdress.getAddressBuildingNumber());
			form.txtAddress3().setValue(driverAdress.getAddressLocality());
			form.txtAddress4().setValue(driverAdress.getAddressPostTown());
			form.txtPostCode().setValue(driverAdress.getAddressPostCode());
		}
		
		form.txtNotes().setValue(record.getNotes());
		if( Boolean.TRUE.equals(record.getPoliceInvolved()))
		{
			form.GroupPolice().setValue(GroupPoliceEnumeration.rdoYesP);
			if(	form.getMode().equals(FormMode.EDIT))
			{
				form.txtPoliceId().setEnabled(true);
				form.cmbPoliceStation().setEnabled(true);
			}
		}
		else
		{
			form.GroupPolice().setValue(GroupPoliceEnumeration.rdoNoP);
			if(	form.getMode().equals(FormMode.EDIT))
			{
				form.txtPoliceId().setEnabled(false);
				form.cmbPoliceStation().setEnabled(false);
			}
		}
		form.cmbPoliceStation().setValue(record.getPoliceStation());
		form.txtPoliceId().setValue(record.getPoliceID());

	}
	private void clear()
	{
		form.cmbPoliceStation().setValue(null);
		form.cmbProtectionDevice().setValue(null);
		form.cmbRTAPatientType().setValue(null);
		clearAddress();
		form.txtDriversName().setValue(null);
		form.txtDriversForename().setValue(null);//WDEV-17390
		form.txtNotes().setValue(null);
		form.txtPoliceId().setValue(null);
		
	}
	private void clearAddress()
	{
		form.txtAddress1().setValue(null);
		form.txtAddress2().setValue(null);
		form.txtAddress3().setValue(null);
		form.txtAddress4().setValue(null);
		form.txtPostCode().setValue(null);
	}
	protected void onBtnPatientAddressClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearAddress();
		if(	form.getGlobalContext().Core.getPatientShortIsNotNull())
		{
			PersonAddress driverAdress = form.getGlobalContext().Core.getPatientShort().getAddress();
			if(	driverAdress != null)
			{
				form.txtAddress1().setValue(driverAdress.getAddressBuildingName());
				form.txtAddress2().setValue(driverAdress.getAddressBuildingNumber());
				form.txtAddress3().setValue(driverAdress.getAddressLocality());
				form.txtAddress4().setValue(driverAdress.getAddressPostTown());
				form.txtPostCode().setValue(driverAdress.getAddressPostCode());
			}
		}
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-17371
		String[] errorsUI = getUiErrors();
		if (errorsUI != null)
		{
			engine.showErrors(errorsUI);
			return ;
		}
		
		RTAVo record = populateDataFromScreen(form.getGlobalContext().Emergency.getRTA());

		String[] errors = record.validate(getUiErrors());

		if (errors != null)
		{
			engine.showErrors(errors);
			return ;
		}
		
		form.getGlobalContext().Emergency.setRTA(record);
		engine.close(DialogResult.OK);
	}
	private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
	
		if(form.cmbRTAPatientType().getValue() == null)
		{
			errors.add("RTA Patient Type is mandatory");
			
		}
			
		if( !GroupDriverOwnerEnumeration.rdoYes.equals(form.GroupDriverOwner().getValue()) && !GroupDriverOwnerEnumeration.rdoNo.equals(form.GroupDriverOwner().getValue()))
		{
			errors.add("Is the Driver the Owner is mandatory");
		}
							
		if(errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Attendance Record", searchErrors);
			
			return searchErrors;
		}
		return null;
	}
	
	private RTAVo populateDataFromScreen(RTAVo record)
	{
		if(	record == null)
			record = new RTAVo();
		
		record.setProtectionDevice(form.cmbProtectionDevice().getValue());
		record.setRTAType(form.cmbRTAPatientType().getValue());
		if( GroupDriverOwnerEnumeration.rdoYes.equals(form.GroupDriverOwner().getValue()))
			record.setIsDriverOwner(true);
		else if(	GroupDriverOwnerEnumeration.rdoNo.equals(form.GroupDriverOwner().getValue()))
			record.setIsDriverOwner(false);
		else
			record.setIsDriverOwner(null);
		
		record.setDriverName(createPersonName(record.getDriverName()));//WDEV-17390
		
		PersonAddress prsAddress = record.getDriverAddress();
		if(	prsAddress == null)
			prsAddress = new PersonAddress();
		
		prsAddress.setLine1(form.txtAddress1().getValue());
		prsAddress.setLine2(form.txtAddress2().getValue());
		prsAddress.setLine3(form.txtAddress3().getValue());
		prsAddress.setLine4(form.txtAddress4().getValue());
		prsAddress.setPostCode(form.txtPostCode().getValue());
		record.setDriverAddress(prsAddress);
		record.setNotes(form.txtNotes().getValue());
		
		if(	GroupPoliceEnumeration.rdoYesP.equals(form.GroupPolice().getValue()))
			record.setPoliceInvolved(true);
		else if( 	GroupPoliceEnumeration.rdoNoP.equals(form.GroupPolice().getValue()))
			record.setPoliceInvolved(false);
		else
			record.setPoliceInvolved(null);
		
		record.setPoliceID(form.txtPoliceId().getValue());
		record.setPoliceStation(form.cmbPoliceStation().getValue());
		
		return record;
	}
	
	//WDEV-17390
	private PersonName createPersonName(PersonName prs)
	{
		if(	prs == null)
			prs = new PersonName();
		
		prs.setSurname(form.txtDriversName().getValue());
		prs.setForename(form.txtDriversForename().getValue());
		
		return prs;
	}

	protected void onRadioButtonGroupPoliceValueChanged() throws PresentationLogicException 
	{
		if(	GroupPoliceEnumeration.rdoYesP.equals(form.GroupPolice().getValue()))
		{
			form.txtPoliceId().setEnabled(true);
			form.cmbPoliceStation().setEnabled(true);
		}
		else if( 	GroupPoliceEnumeration.rdoNoP.equals(form.GroupPolice().getValue()))
		{
			form.txtPoliceId().setEnabled(false);
			form.cmbPoliceStation().setEnabled(false);
			form.txtPoliceId().setValue(null);
			form.cmbPoliceStation().setValue(null);
		}
		
	}

	@Override
	//WDEV-16637
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.ABORT);
	}
}
