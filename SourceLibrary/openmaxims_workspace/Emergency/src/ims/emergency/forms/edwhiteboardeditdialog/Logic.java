//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4892.20548)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.edwhiteboardeditdialog;

import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo;
import ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues;
import ims.emergency.vo.enums.EDWhiteBoardEvent;
import ims.emergency.vo.lookups.AttendanceClinicalNoteType;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	
	private static final String	ROW_OBS_REQUIRED	= "Obs Required";
	private static final String	ROW_MEDS_GIVEN		= "Meds Given";
	private static final String	ROW_ECG				= "ECG";
	private static final String	ROW_NPO				= "NPO";
	private static final String	ROW_ISOLATION		= "Isolation";
	private static final String	ROW_COMMENT			= "Comment";
	private static final String	COLUMN_FIELD		= "6";
	private static final String	COLUMN_VALUE		= "7";
	
	
	@Override
	protected void onFormModeChanged()
	{
		// TODO Add your code here.
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{

		if (args!=null && args.length>1 && (args[0]!=null && args[0] instanceof ims.emergency.vo.enums.EDWhiteBoardEvent ) && (args[1]!=null && (args[1] instanceof ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues || args[1] instanceof Boolean) ))
		{
			
			form.getLocalContext().setSelecteEvent((EDWhiteBoardEvent) args[0]);
			
			if ((args[1] instanceof ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues ))
				form.getLocalContext().setSelectedComboCellValue((EDWhiteBoardDynGrdComboValues) args[1]);
			else if (args[1] instanceof Boolean)
				form.getLocalContext().setSelectedCheckBoxValue( (Boolean) args[1]);
		}
		
		form.getLocalContext().setSelectedTracking(domain.getTracking(form.getGlobalContext().Emergency.getTracking()));
		initialize();
		open();
		//doSearch();
		
	}
	private void populateInstanceControls(TrackingForClinicianWorklistAndTriageVo selectedTracking)
	{
		if (selectedTracking==null)
			return;
		
		form.lblPatientNameValue().setValue(selectedTracking.getPatient().getName().toString());
		form.lblIDValue().setValue(selectedTracking.getPatient().getHospnum().getIdValue());
		form.lblAreaValue().setValue(selectedTracking.getCurrentArea()!=null ? selectedTracking.getCurrentArea().getAreaDisplayName():null);
		
		form.dyngrdWhiteBoard().setValue(getRowByEvent(form.getLocalContext().getSelecteEvent()));
		DynamicGridRow row = form.dyngrdWhiteBoard().getSelectedRow();
		
		if (row==null)
			return;
		
		DynamicGridCell cellColumn = row.getCells().get(getColumn(COLUMN_VALUE));
		
		if (row.getValue().equals(ROW_OBS_REQUIRED) || row.getValue().equals(ROW_MEDS_GIVEN))
		{
			cellColumn.setValue(form.getLocalContext().getSelectedComboCellValue());
		}
		else
		{
			cellColumn.setValue(form.getLocalContext().getSelectedCheckBoxValue());
		}
	
	}	
	private String getRowByEvent(EDWhiteBoardEvent selecteEvent)
	{
		if (selecteEvent==null)
			return null;
		
		if (form.getLocalContext().getSelecteEvent().equals(EDWhiteBoardEvent.OBS_REQ_COL_VALUE_CHANGED))
			return ROW_OBS_REQUIRED;
		else if (form.getLocalContext().getSelecteEvent().equals(EDWhiteBoardEvent.MEDS_GIVEN_COL_VALUE_CHANGED))
			return ROW_MEDS_GIVEN;
		else if (form.getLocalContext().getSelecteEvent().equals(EDWhiteBoardEvent.ECG_COL_VALUE_CHANGED))
			return ROW_ECG;
		else if (form.getLocalContext().getSelecteEvent().equals(EDWhiteBoardEvent.NPO_COL_VALUE_CHANGED))
			return ROW_NPO;
		else if (form.getLocalContext().getSelecteEvent().equals(EDWhiteBoardEvent.ISOLATION_COL_VALUE_CHANGED))
			return ROW_ISOLATION;
		
		return null;
	}
	/*
	private DynamicGridRow getColumnByEvent(EDWhiteBoardEvent selecteEvent)
	{
		if (form.getLocalContext().getSelecteEvent().equals(EDWhiteBoardEvent.OBS_REQ_COL_VALUE_CHANGED))
			return getColumn(ROW_OBS_REQUIRED);
		else if (form.getLocalContext().getSelecteEvent().equals(EDWhiteBoardEvent.MEDS_GIVEN_COL_VALUE_CHANGED))
			return getColumn(COLUMN_MEDS_GIVEN);
		else if (form.getLocalContext().getSelecteEvent().equals(EDWhiteBoardEvent.ECG_COL_VALUE_CHANGED))
			return getColumn(COLUMN_ECG);
		else if (form.getLocalContext().getSelecteEvent().equals(EDWhiteBoardEvent.NPO_COL_VALUE_CHANGED))
			return getColumn(COLUMN_NPO);
		else if (form.getLocalContext().getSelecteEvent().equals(EDWhiteBoardEvent.ISOLATION_COL_VALUE_CHANGED))
			return getColumn(COLUMN_ISOLATION);
		
		return null;
	}
	*/
	
	private void open()
	{
		populateInstanceControls(form.getLocalContext().getSelectedTracking());
	}	
	
	/*
	private void doSearch()
	{
		TrackingForClinicianWorklistAndTriageVoCollection trackingPatiens = domain.listTrackingPatients(form.getLocalContext().getAreaSearchValue(),form.getLocalContext().getStatusSearchValue() , null);
		
		populateDynGrid(trackingPatiens);
	}

	private void populateDynGrid(TrackingForClinicianWorklistAndTriageVoCollection trackingPatiens)
	{
		form.dyngrdWhiteBoard().getRows().clear();
		
		if( trackingPatiens == null || trackingPatiens.size() < 1)
			return;
		
		//trackingPatiens.sort(new TrackingComparator());
		
		for(int i = 0; i < trackingPatiens.size();i++)
		{
			TrackingForClinicianWorklistAndTriageVo tempVo = trackingPatiens.get(i);
			if( tempVo != null)
			{
				addRowToDyngrd(tempVo);
				
			}
			
		}
		
		
		
	}
	
	
	private void addRowToDyngrd(TrackingForClinicianWorklistAndTriageVo tempVo)
	{
		if(	tempVo == null)
			return;
			
		DynamicGridRow row = form.dyngrdWhiteBoard().getRows().newRow();
		row.setValue(tempVo);
		
		DynamicGridCell cellObs = row.getCells().newCell(getColumn(COLUMN_OBS_REQUIRED), DynamicCellType.ENUMERATION);
		populateCellCombo(cellObs);
		
		DynamicGridCell cellMeds = row.getCells().newCell(getColumn(COLUMN_MEDS_GIVEN), DynamicCellType.ENUMERATION);
		populateCellCombo(cellMeds);
		
		DynamicGridCell cellECG = row.getCells().newCell(getColumn(COLUMN_ECG), DynamicCellType.BOOL);
		cellECG.setValue(null);
		cellECG.setAutoPostBack(true);
		cellECG.setReadOnly(false);
		
		DynamicGridCell cellNPO = row.getCells().newCell(getColumn(COLUMN_NPO), DynamicCellType.BOOL);
		cellNPO.setValue(null);
		cellNPO.setAutoPostBack(true);
		cellNPO.setReadOnly(false);
		
		DynamicGridCell cellIsolation = row.getCells().newCell(getColumn(COLUMN_ISOLATION), DynamicCellType.BOOL);
		cellIsolation.setValue(null);
		cellIsolation.setAutoPostBack(true);
		cellIsolation.setReadOnly(false);
		
		DynamicGridCell cellComment = row.getCells().newCell(getColumn(COLUMN_COMMENT), DynamicCellType.IMAGEBUTTON);
		cellComment.setValue(form.getImages().Core.Memo);
		cellComment.setAutoPostBack(true);
		cellComment.setReadOnly(false);
		
	}
	*/
	private void populateCellCombo(DynamicGridCell cellMeds)
	{
		cellMeds.getItems().newItem(ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.REQUIRED,ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.REQUIRED.getText(),ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.REQUIRED.getImage());
		cellMeds.getItems().newItem(ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.COMPLETE,ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.COMPLETE.getText(),ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.COMPLETE.getImage());
		cellMeds.getItems().newItem(ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.NOT_REQUIRED,ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.NOT_REQUIRED.getText(),ims.emergency.vo.enums.EDWhiteBoardDynGrdComboValues.NOT_REQUIRED.getImage());
		
		/*
		cellMeds.getItems().newItem("Required","Required", form.getImages().Core.CriticalError);
		cellMeds.getItems().newItem("Completed","Completed", form.getImages().Correspondence.PatientDocumentCreated16);
		cellMeds.getItems().newItem("Not Required","Not Required", form.getImages().Correspondence.NoLetterRequired);
		*/
		cellMeds.setAutoPostBack(true);
		cellMeds.setReadOnly(false);
	}
	private DynamicGridColumn getColumn(String identifier) 
	{
		return form.dyngrdWhiteBoard().getColumns().getByIdentifier(identifier);
	}

	
	
	private void initialize()
	{
		initializeDynamicGridColumns();
		initializeDynamicGridRows();
	}
	private void initializeDynamicGridRows()
	{
		//Obs required
		DynamicGridRow row = form.dyngrdWhiteBoard().getRows().newRow();
		row.setValue(ROW_OBS_REQUIRED);
		DynamicGridCell obsReqField = row.getCells().newCell(getColumn(COLUMN_FIELD), DynamicCellType.STRING);
		obsReqField.setValue(ROW_OBS_REQUIRED);
		DynamicGridCell obsReqValue = row.getCells().newCell(getColumn(COLUMN_VALUE), DynamicCellType.ENUMERATION);
		populateCellCombo(obsReqValue);
		obsReqValue.setValue(null);
		
		//Meds Given
		row = form.dyngrdWhiteBoard().getRows().newRow();
		row.setValue(ROW_MEDS_GIVEN);
		DynamicGridCell medsGivenField = row.getCells().newCell(getColumn(COLUMN_FIELD), DynamicCellType.STRING);
		medsGivenField.setValue(ROW_MEDS_GIVEN);
		DynamicGridCell medsGivenValue = row.getCells().newCell(getColumn(COLUMN_VALUE), DynamicCellType.ENUMERATION);
		populateCellCombo(medsGivenValue);
		medsGivenValue.setValue(null);
		
		//ECG
		row = form.dyngrdWhiteBoard().getRows().newRow();
		row.setValue(ROW_ECG);
		DynamicGridCell ecgField = row.getCells().newCell(getColumn(COLUMN_FIELD), DynamicCellType.STRING);
		ecgField.setValue(ROW_ECG);
		DynamicGridCell ecgValue = row.getCells().newCell(getColumn(COLUMN_VALUE), DynamicCellType.BOOL);
		ecgValue.setValue(null);
		
		//NPO
		row = form.dyngrdWhiteBoard().getRows().newRow();
		row.setValue(ROW_NPO);
		DynamicGridCell npoField = row.getCells().newCell(getColumn(COLUMN_FIELD), DynamicCellType.STRING);
		npoField.setValue(ROW_NPO);
		DynamicGridCell npoValue = row.getCells().newCell(getColumn(COLUMN_VALUE), DynamicCellType.BOOL);
		npoValue.setValue(null);
		
		//Isolation
		row = form.dyngrdWhiteBoard().getRows().newRow();
		row.setValue(ROW_ISOLATION);
		DynamicGridCell isolationField = row.getCells().newCell(getColumn(COLUMN_FIELD), DynamicCellType.STRING);
		isolationField.setValue(ROW_ISOLATION);
		DynamicGridCell isolationValue = row.getCells().newCell(getColumn(COLUMN_VALUE), DynamicCellType.BOOL);
		isolationValue.setValue(null);
		
		/*
		//Comment
		row = form.dyngrdWhiteBoard().getRows().newRow();
		row.setValue(ROW_COMMENT);
		DynamicGridCell commentField = row.getCells().newCell(getColumn(COLUMN_FIELD), DynamicCellType.STRING);
		commentField.setValue(ROW_COMMENT);
		DynamicGridCell commentValue = row.getCells().newCell(getColumn(COLUMN_VALUE), DynamicCellType.IMAGEBUTTON);
		commentValue.setValue(form.getImages().Core.Memo);
		*/
		
	}
	private void initializeDynamicGridColumns()
	{
		form.dyngrdWhiteBoard().clear();
		//form.dyngrdWhiteBoard().setHeaderHeight(60);
		
		DynamicGridColumn column = form.dyngrdWhiteBoard().getColumns().newColumn("Field",COLUMN_FIELD);
		column.setWidth(100);
		column.setHeaderAlignment(Alignment.LEFT);
		
		column = form.dyngrdWhiteBoard().getColumns().newColumn("Value",COLUMN_VALUE);
		column.setWidth(150);
		column.setHeaderAlignment(Alignment.LEFT);
		
		
		
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.ABORT);
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	@Override
	protected void onDyngrdWhiteBoardCellButtonClicked(ims.framework.controls.DynamicGridCell cell)
	{
		engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {AttendanceClinicalNoteType.NURSE, null,null});
	}
	@Override
	protected void onDyngrdWhiteBoardRowSelectionChanged(ims.framework.controls.DynamicGridRow row)
	{
		// TODO Add your code here.
	}
	
	@Override
	protected void onDyngrdWhiteBoardCellValueChanged(DynamicGridCell cell)
	{
		form.dyngrdWhiteBoard().setValue(cell.getRow().getValue());
	}
}
