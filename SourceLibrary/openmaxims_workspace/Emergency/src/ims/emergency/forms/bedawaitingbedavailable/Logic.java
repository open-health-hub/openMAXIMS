//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.bedawaitingbedavailable;

import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PasEventShortVo;
import ims.core.vo.lookups.AdmissionType;
import ims.core.vo.lookups.EmergencyAdmissionStatus;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.BedAvailabilityVo;
import ims.emergency.vo.EmergencyAttendanceForTriageLiteVo;
import ims.emergency.vo.PendingEmergencyAdmissionShortVo;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingForBedAvailabilityVo;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		form.ccRequestedBy().isRequired(true);
		form.getLocalContext().setcurrentTracking(domain.getTracking(form.getGlobalContext().Emergency.getTracking()));
		clearControls();
		
		if (form.getLocalContext().getcurrentTracking().getBedAvailabilityIsNotNull())
		{
			form.getLocalContext().setcurrentBedAvailability(form.getLocalContext().getcurrentTracking().getBedAvailability());
			populateScreenFromData(form.getLocalContext().getcurrentBedAvailability(), form.getLocalContext().getcurrentTracking());

		}
		else
		{
			Object mos = domain.getMosUser();

			if (mos == null)
			{
				engine.showMessage("Current User is not a Member of Staff!");
				return;
			}

			if (mos instanceof MemberOfStaffLiteVo)
			{
				form.ccRequestedBy().setValue((MemberOfStaffLiteVo) mos);
			}

			form.dtimAwaitingBed().setValue(new DateTime());
			form.dtimAvailableBed().setEnabled(false);

		}
	
		form.btnRemove().setVisible(form.getLocalContext().getcurrentTracking().getBedAvailabilityIsNotNull());
	}

	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (form.getForms().Emergency.TrackingStatusDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if (removeBed(form.getGlobalContext().Emergency.getTrackingAttendanceStatus()))
				engine.close(DialogResult.OK);
		}
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save(true))
		{
			engine.close(DialogResult.OK);
		}
	}

	@Override
	protected void onBtnRemoveClick() throws PresentationLogicException
	{
		engine.open(form.getForms().Emergency.TrackingStatusDialog);
	}

	
	private boolean removeBed(TrackingAttendanceStatusVo newStatus)
	{
		try 
		{
			if (form.getLocalContext().getcurrentTrackingIsNotNull())
			{
				form.getLocalContext().getcurrentTracking().setCurrentStatus(newStatus);

				PendingEmergencyAdmissionShortVo temppend = null;
				if (form.getLocalContext().getcurrentTracking().getAssociatedPendingEmergencyAdmissionIsNotNull())
				{
					temppend = form.getLocalContext().getcurrentTracking().getAssociatedPendingEmergencyAdmission(); 
					temppend.setAdmissionStatus(EmergencyAdmissionStatus.CANCELLED);
					temppend.setAllocatedWard(null);
				}

				form.getLocalContext().getcurrentTracking().setBedAvailability(null);
				form.getLocalContext().getcurrentTracking().getAttendance().setConclusionDateTime(null);
				form.getLocalContext().getcurrentTracking().getAttendance().setBedTypeRequested(null);

				String[] errors = form.getLocalContext().getcurrentTracking().validate();
				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return false;
				}

				domain.save(null, form.getLocalContext().getcurrentTracking());
				
				return true;
			}
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return true;
		} 
		catch (UniqueKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}

		return false;
	}



	private boolean save(boolean bSave)
	{
		BedAvailabilityVo bedAvailabilityToSave = null;//	WDEV-15162
		
		bedAvailabilityToSave = populateDataFromScreen(form.getLocalContext().getcurrentBedAvailability());

		String[] errors = bedAvailabilityToSave.validate(getUIErrors());
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Check SOE
		if (bedAvailabilityToSave.getID_BedAvailabilityIsNotNull() && domain.isStale(bedAvailabilityToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;

		}

		try
		{
			TrackingForBedAvailabilityVo trackingToSave = form.getLocalContext().getcurrentTracking();

			// Create new current status (Decision To Admit) for tracking
			TrackingAttendanceStatusVo newStatus = new TrackingAttendanceStatusVo();

			newStatus.setPatient(trackingToSave.getPatient());
			newStatus.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
			newStatus.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
			newStatus.setTrackingArea(trackingToSave.getCurrentArea());
			newStatus.setStatusDatetime(new DateTime());
			newStatus.setCreatedBy((MemberOfStaffRefVo) domain.getMosUser());
			newStatus.setStatus(TrackingStatus.DECISION_TO_ADMIT);

			newStatus.setPrevStatus((trackingToSave != null && trackingToSave.getCurrentStatus() != null) ? trackingToSave.getCurrentStatus().getStatus() : null);
			newStatus.setPrevTrackingArea((trackingToSave != null && trackingToSave.getCurrentStatus() != null) ? trackingToSave.getCurrentStatus().getTrackingArea() : null);

			trackingToSave.setCurrentStatus(newStatus);
			trackingToSave.getAttendance().setConclusionDateTime(form.dtimAwaitingBed().getValue());
			trackingToSave.getAttendance().setBedTypeRequested(form.cmbDTABedType().getValue());

			trackingToSave.setBedAvailability(bedAvailabilityToSave);
			
			trackingToSave.setAssociatedPendingEmergencyAdmission(populatePendingAdmission(trackingToSave));

			String[] errors1 = trackingToSave.validate();

			if (errors1 != null && errors1.length > 0)
			{
				engine.showErrors(errors1);
				return false;
			}

			form.getLocalContext().setcurrentBedAvailability(domain.save(null, trackingToSave));
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			engine.close(DialogResult.ABORT);
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("There can only be one BedAvailability record for an attendance!");
			engine.close(DialogResult.ABORT);
			return false;
		}
		
		return true;
	}

	private PendingEmergencyAdmissionShortVo populatePendingAdmission(TrackingForBedAvailabilityVo tracking)
	{
		PendingEmergencyAdmissionShortVo pendingAdmission = tracking.getAssociatedPendingEmergencyAdmission();
		if (pendingAdmission == null)
			pendingAdmission = new PendingEmergencyAdmissionShortVo();
		
		pendingAdmission.setAdmissionStatus(EmergencyAdmissionStatus.DTA);
		pendingAdmission.setDTADateTime(form.dtimAwaitingBed().getValue());
		pendingAdmission.setAdmissionType(AdmissionType.PLANNED);
		
		LocationLiteVo currentLocation = (LocationLiteVo) engine.getCurrentLocation();
		if (currentLocation != null )//WDEV-17615
		{
			//WDEV-17615
			LocationLiteVo currentHospital = domain.getCurrentHospital(currentLocation);
			pendingAdmission.setCurrentLocation(currentHospital);
		}
		
		if (pendingAdmission.getPasEvent() == null)
		{
			PasEventShortVo newPasEvent = new PasEventShortVo();
			
			newPasEvent.setEventDateTime(tracking.getAttendance().getRegistrationDateTime());
			newPasEvent.setPatient(form.getGlobalContext().Core.getPatientShort());
			newPasEvent.setPasEventId(new DateTime().toString());
			
			if (currentLocation != null)//WDEV-17615
			{
				//WDEV-17615
				LocationLiteVo currentHospital = domain.getCurrentHospital(currentLocation);
				newPasEvent.setLocation(currentHospital);
			}
			
			newPasEvent.setSpecialty(Specialty.EMERGENCY);
			
			pendingAdmission.setPasEvent(newPasEvent);
		}
		
		pendingAdmission.setBedTypeRequested(form.cmbDTABedType().getValue());

		return pendingAdmission;
	}


	private BedAvailabilityVo populateDataFromScreen(BedAvailabilityVo bedAvailability)
	{
		if (bedAvailability == null)
			bedAvailability = new BedAvailabilityVo();

		bedAvailability.setPatient(form.getGlobalContext().Core.getPatientShort());
		bedAvailability.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		bedAvailability.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		bedAvailability.setTrackingArea(form.getLocalContext().getcurrentTracking().getCurrentArea());

		bedAvailability.setRequestedBy((MemberOfStaffLiteVo) form.ccRequestedBy().getValue());
		bedAvailability.setAwaitingDateTime(form.dtimAwaitingBed().getValue());
		bedAvailability.setAvailableDateTime(form.dtimAvailableBed().getValue());

		return bedAvailability;
	}

	private String[] getUIErrors()
	{
		ArrayList<String> errors = new ArrayList<String>();

		DateTime attRegistrationDateTime = domain.getAttendanceRegistrationDateTime(form.getGlobalContext().Core.getCurrentCareContext());
		
		if (form.dtimAwaitingBed().getValue() != null && form.dtimAwaitingBed().getValue().isGreaterThan(new DateTime()))
		{
			errors.add("Awaiting Bed Time cannot be set in the future!");
		}
		
		if (form.cmbDTABedType().getValue() == null)
		{
			errors.add("DTA Bed Time is mandatory.");
		}
		
		if (form.dtimAwaitingBed().getValue() != null && attRegistrationDateTime != null && form.dtimAwaitingBed().getValue().isLessThan(attRegistrationDateTime))
		{
			errors.add("Awaiting Bed Time cannot be less than AttendanceRegistration Date/Time!");
		}
		
		if (form.dtimAvailableBed().getValue() != null)
		{
			if (form.dtimAvailableBed().getValue().isGreaterThan(new DateTime()))
			{
				errors.add("Available Bed Time cannot be set in the future!");
			}
			else if (form.dtimAwaitingBed().getValue() != null 
					&& form.dtimAvailableBed().getValue() != null 
					&&	(form.dtimAvailableBed().getValue().getDate().isLessThan(form.dtimAwaitingBed().getValue().getDate()) 
							|| (form.dtimAvailableBed().getValue().getDate().equals(form.dtimAwaitingBed().getValue().getDate()) 
									&& form.dtimAvailableBed().getValue().getTime().isLessThan(form.dtimAwaitingBed().getValue().getTime()))))
			{
				errors.add("Available Bed Time cannot be less than AwaitingBedTime!");
			}
		}

		if (errors.size() > 0)
		{
			String[] UIErrors = new String[errors.size()];
			errors.toArray(UIErrors);
			return UIErrors;
		}

		return null;
	}


	private void clearControls()
	{
		form.ccRequestedBy().setValue(null);
		form.dtimAwaitingBed().setValue(null);
		form.cmbDTABedType().setValue(null);
		form.dtimAvailableBed().setValue(null);
	}

	private void populateScreenFromData(BedAvailabilityVo bedAvailability, TrackingForBedAvailabilityVo tracking)
	{
		if (bedAvailability == null)
			return;

		form.ccRequestedBy().setValue(bedAvailability.getRequestedBy());
		form.dtimAwaitingBed().setValue(bedAvailability.getAwaitingDateTime());
		form.cmbDTABedType().setValue(tracking != null && tracking.getAssociatedPendingEmergencyAdmission() != null ? tracking.getAssociatedPendingEmergencyAdmission().getBedTypeRequested() : null);
		form.dtimAvailableBed().setValue(bedAvailability.getAvailableDateTime());

	}
}
