//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.relevantpmh;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.emergency.vo.EmergencyAttendanceForPatientMedsVo;
import ims.emergency.vo.PatientProblemForRelevantPMHVo;
import ims.emergency.vo.PatientRelevantPMHVo;
import ims.emergency.vo.PatientRelevantPMHVoCollection;
import ims.emergency.vo.TriageForRelvantPMHVo;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.framework.enumerations.FormMode;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public void initialize(CareContextRefVo careContextRef, PatientRefVo patientRefVo, EpisodeOfCareRefVo episodeRefVo)
	{
		form.getLocalContext().setCurrentCareContextRef(careContextRef);
		form.getLocalContext().setSelectedPatientRef(patientRefVo);
		form.getLocalContext().setCurrentPatientEpisode(episodeRefVo);
		open();
	}

	private void PopulateRecordBrowser()//WDEV-17602
	{
		PatientRelevantPMHVoCollection allRelevantPHM = domain.getAllRelevantPMH(form.getLocalContext().getSelectedPatientRef());

		form.recbrPMH().clear();

		for (int i = 0; i < allRelevantPHM.size(); i++)
		{
			PatientRelevantPMHVo PatientRelevantPMH = allRelevantPHM.get(i);

			if (PatientRelevantPMH == null)
				return;

			StringBuffer text = new StringBuffer();

			CareContextRefVo voCareContexPMH = PatientRelevantPMH.getAttendance();
			
			TriageForRelvantPMHVo triage = domain.getTriageByCareContext(PatientRelevantPMH.getAttendance());
			PatientProblemForRelevantPMHVo voPatientProblem = (triage!=null ? triage.getMainPresentingProblem() : null);

			text.append(getTextToDisplayFromEmergencyAttendance(PatientRelevantPMH.getAttendance()));
			
			//WDEV-17127
			PatientRelevantPMHVo voPatientProblemPMH = domain.getRelevantPMH(voCareContexPMH);
			if (voPatientProblemPMH!=null && voPatientProblemPMH.getAuthoringInformationIsNotNull())
			{
				if (voPatientProblemPMH.getAuthoringInformation().getAuthoringDateTimeIsNotNull())
				{
					text.append(voPatientProblemPMH.getAuthoringInformation().getAuthoringDateTime());
					text.append(" - ");
				}
				if (voPatientProblemPMH.getAuthoringInformation().getAuthoringHcpIsNotNull())
				{
					text.append(voPatientProblemPMH.getAuthoringInformation().getAuthoringHcp().getName());
					text.append(" - ");
				}
			}
			
			if (voPatientProblem != null)
			{
				if (voPatientProblem.getPatientProblemIsNotNull())
				{
					text.append(" - ");
					text.append(voPatientProblem.getPatientProblem());
				}
			}
			
			if (voCareContexPMH.equals(form.getLocalContext().getCurrentCareContextRef()))
			{
				form.recbrPMH().newRow(i,PatientRelevantPMH.getAttendance(), text.toString(),Color.Green);
				continue;		
			}
			
			form.recbrPMH().newRow(i, PatientRelevantPMH.getAttendance(), text.toString());
			
		}
		
		//WDEV-17602
		ArrayList collRecBrowser = form.recbrPMH().getValues();
		
		if (!collRecBrowser.contains(form.getLocalContext().getCurrentCareContextRef()))
		{
			form.recbrPMH().newRow(form.getLocalContext().getCurrentCareContextRef(), getTextToDisplayFromEmergencyAttendance(form.getLocalContext().getCurrentCareContextRef()).toString(), Color.Green);
		}
		
		form.recbrPMH().setValue(form.getLocalContext().getCurrentCareContextRef());
	}

	//WDEV-17602
	private StringBuffer getTextToDisplayFromEmergencyAttendance(CareContextRefVo careContextRefVo)
	{
		StringBuffer emergAttText = new StringBuffer();
		EmergencyAttendanceForPatientMedsVo emergAttendance = domain.getEmergencyAttendance(careContextRefVo);
		
		if (emergAttendance != null)
		{		
			if (emergAttendance.getArrivalDateTimeIsNotNull())
			{
				emergAttText.append(emergAttendance.getArrivalDateTime().toString());
			}

			if (emergAttendance.getDischargeDateTimeIsNotNull())
			{
				emergAttText.append(" - ");
				emergAttText.append(emergAttendance.getDischargeDateTime().toString());
			}
		}
		
		return emergAttText;
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-17337
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.CANCEL);
		form.fireCustomControlValueChanged();
		
		open();
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-17337
		form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
		form.fireCustomControlValueChanged();
		
		if (save())
		{
			open();
			form.setMode(FormMode.VIEW);
		}
	}

	private boolean save()
	{
		
		PatientRelevantPMHVo patientRelevantPMH = populateInstanceDataFromScreen(form.getLocalContext().getSelectedRelevantPMH());
		
		String[] errors = null;
		errors = patientRelevantPMH.validate();

		if (errors != null && errors.length > 0)
		{
			engine.showErrors("Error", errors);
			return false;
		}

		//Check SOE
		if ( ! patientRelevantPMH.getID_PatientRelevantPMHIsNotNull() && domain.getRelevantPMH(patientRelevantPMH.getAttendance()) != null)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setSelectedRelevantPMH(null);
			open();
			return false;
		}
		
		try
		{
			patientRelevantPMH = domain.savePatientPMH(patientRelevantPMH);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		return true;
	}

	private PatientRelevantPMHVo populateInstanceDataFromScreen(PatientRelevantPMHVo patientRelevantPMH)
	{
		if (patientRelevantPMH == null)
		{
			patientRelevantPMH = new PatientRelevantPMHVo();
		}

		patientRelevantPMH.setEpisode(form.getLocalContext().getCurrentPatientEpisode());
		patientRelevantPMH.setPatient(form.getLocalContext().getSelectedPatientRef());
		patientRelevantPMH.setAttendance(form.getLocalContext().getCurrentCareContextRef());
		
		patientRelevantPMH.setRelevantPMH(form.richText().getValue());

		AuthoringInformationVo authoringInfo = new AuthoringInformationVo();
		authoringInfo.setAuthoringDateTime(new DateTime());
		authoringInfo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		patientRelevantPMH.setAuthoringInformation(authoringInfo);
		
		return patientRelevantPMH;
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedRelevantPMH(null);
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onRecbrPMHValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		getSelectedInstance();
		updateControlsState();
	}

	private void getSelectedInstance()
	{
		clearInstance();
		
		if (form.recbrPMH().getValue() == null)
			return;

		PatientRelevantPMHVo voPatientProblemPMH = domain.getRelevantPMH(form.recbrPMH().getValue());//WDEV-17602

		form.getLocalContext().setSelectedRelevantPMH(voPatientProblemPMH);

		if (voPatientProblemPMH == null)
		{
			return;
		}

		populateInstanceControls(voPatientProblemPMH);
	}

	private void updateControlsState()
	{
		boolean isCurrentCareContext = false;
		
		if ( form.recbrPMH().getValue() != null)
		{
			isCurrentCareContext = form.recbrPMH().getValue().getID_CareContext().equals(form.getLocalContext().getCurrentCareContextRef().getID_CareContext());//WDEV-17602
		}
		else //WDEV-17602
		{
			isCurrentCareContext=true;
		}
		
		
		form.btnNew().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectedRelevantPMH() == null && isCurrentCareContext);
		form.btnNew().setEnabled(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectedRelevantPMH() == null && isCurrentCareContext && Boolean.TRUE.equals(form.getLocalContext().getisEnabled()));
		form.btnEdit().setVisible(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectedRelevantPMHIsNotNull() && isCurrentCareContext);
		form.btnEdit().setEnabled(form.getMode().equals(FormMode.VIEW) && form.getLocalContext().getSelectedRelevantPMHIsNotNull() && isCurrentCareContext && Boolean.TRUE.equals(form.getLocalContext().getisEnabled()));
	}

	private void clearInstance()
	{
		form.richText().setValue(null);
	}

	private void populateInstanceControls(PatientRelevantPMHVo voPatientProblemPMH)
	{
		form.richText().setValue(voPatientProblemPMH.getRelevantPMH());
	}

	public void open()
	{
		PopulateRecordBrowser();
		getSelectedInstance();
		form.setMode(FormMode.VIEW);
	}

	public void setEnabled(Boolean value)
	{
		form.getLocalContext().setisEnabled(value);
		updateControlsState();
	}

	//WDEV-17337
	public EdAssessment_CustomControlsEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}
	
	//WDEV-17337
	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}
}
