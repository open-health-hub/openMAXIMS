//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Bogdan Tofei using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.trackingareacolumnconfigurationdialog;

import ims.emergency.forms.trackingareacolumnconfigurationdialog.GenForm.grdTrackingAreaColumRow;
import ims.emergency.vo.ColumnDetailVo;
import ims.emergency.vo.ColumnDetailVoCollection;
import ims.emergency.vo.TrackingAreaVo;
import ims.emergency.vo.enums.TrackingAreaColumnConfigEvent;
import ims.emergency.vo.lookups.LookupHelper;
import ims.emergency.vo.lookups.TrackingAreaColumn;
import ims.emergency.vo.lookups.TrackingAreaColumnCollection;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.vo.LookupInstVo;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static int usedSpace;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		usedSpace = 0;
		form.getLocalContext().setCopyAction(null); //wdev-17595
		populateScreenWithLookups();
		populateScreenFromData();
	}

	private void populateScreenFromData()
	{

		if (form.getGlobalContext().Emergency.getTrackingAreaWorkspace() == null)
			return;

		form.txtForArea().setValue(form.getGlobalContext().Emergency.getTrackingAreaWorkspace().getAreaDisplayName());

		ColumnDetailVoCollection trackingColumsCollection = form.getGlobalContext().Emergency.getTrackingAreaWorkspace().getColumns();

		if (trackingColumsCollection == null)
			return;

		for (int i = 0; i < trackingColumsCollection.size(); i++)
			for (int j = 0; j < form.grdTrackingAreaColum().getRows().size(); j++)
			{
				if (trackingColumsCollection.get(i).getColumn().equals(form.grdTrackingAreaColum().getRows().get(j).getValue()))
				{
					form.grdTrackingAreaColum().getRows().get(j).setcolSelect(true);
					form.grdTrackingAreaColum().getRows().get(j).setcolMaskInPublicArea(trackingColumsCollection.get(i).getMaskInPublicArea()!=null ? trackingColumsCollection.get(i).getMaskInPublicArea(): false);//WDEV-17966
					form.grdTrackingAreaColum().getRows().get(j).setcolImage(trackingColumsCollection.get(i).getColumn().getImage());
					if (trackingColumsCollection.get(i).getColWidthIsNotNull())
					{
						form.grdTrackingAreaColum().getRows().get(j).setcolColumnWidth(trackingColumsCollection.get(i).getColWidth());
						usedSpace = usedSpace + trackingColumsCollection.get(i).getColWidth();
					}
					if (trackingColumsCollection.get(i).getColHeaderIsNotNull())
					{
						form.grdTrackingAreaColum().getRows().get(j).setcolColumnHeader(trackingColumsCollection.get(i).getColHeader());
					}
					break;
				}
			}
	}

	private void populateScreenWithLookups()
	{
		form.grdTrackingAreaColum().getRows().clear();
		TrackingAreaColumnCollection lkpAreaCollection = LookupHelper.getTrackingAreaColumn(domain.getLookupService());

		if (lkpAreaCollection == null)
			return;

		for (int i = 0; i < lkpAreaCollection.size(); i++)
		{
			if (lkpAreaCollection.get(i).getID() == TrackingAreaColumn.PATHOLOGY_RESULTS.getID() || lkpAreaCollection.get(i).getID() == TrackingAreaColumn.CLINICAL_IMAGING_RESULTS.getID() || lkpAreaCollection.get(i).getID() == TrackingAreaColumn.RISKS.getID() || lkpAreaCollection.get(i).getID() == TrackingAreaColumn.OUTSTANDING_ORDERS.getID() || lkpAreaCollection.get(i).getID() == TrackingAreaColumn.PATIENT_PREVIOUS_STATUS.getID() || lkpAreaCollection.get(i).getID() == TrackingAreaColumn.LODGED_TYPE.getID() || lkpAreaCollection.get(i).getID() == TrackingAreaColumn.LODGED_DATE_AND_TIME.getID() || lkpAreaCollection.get(i).getID() == TrackingAreaColumn.ROOM.getID() || lkpAreaCollection.get(i).getID() == TrackingAreaColumn.BED.getID()) //WDEV-17454, wdev-17573
				continue;
			
			grdTrackingAreaColumRow newAreaColumn = form.grdTrackingAreaColum().getRows().newRow();
			
			newAreaColumn.setcolColumnHeader(lkpAreaCollection.get(i).getIItemText());
			
			
			newAreaColumn.setcolSelect(false);
			newAreaColumn.setValue(lkpAreaCollection.get(i));
		}
	}

	private String findMapping(TrackingAreaColumn trackingAreaColumn)
	{
		LookupInstVo inst = LookupHelper.getTrackingAreaColumnInstance(domain.getLookupService(), trackingAreaColumn.getID());
		LookupInstVo areaColumn = domain.getMappings(inst);
		if (areaColumn != null)
		{
			for (int i = 0; i < areaColumn.getMappings().size(); i++)
			{
				if (areaColumn.getMappings().get(i).getExtSystem().equals("Maxims Internal"))
				{
					return areaColumn.getMappings().get(i).getExtCode();
				}
			}
		}
		return null;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		TrackingAreaColumnCollection lkpAreaCollection = LookupHelper.getTrackingAreaColumn(domain.getLookupService());
		ColumnDetailVoCollection trackingAreaColumns = new ColumnDetailVoCollection();

		for (int i = 0; i < form.grdTrackingAreaColum().getRows().size(); i++)
		{
			grdTrackingAreaColumRow selectedRow = form.grdTrackingAreaColum().getRows().get(i);

			if (selectedRow.getcolSelect() == true)
			{
				ColumnDetailVo AreaColumn = new ColumnDetailVo();
				AreaColumn.setColHeader(selectedRow.getcolColumnHeader());
				AreaColumn.setColWidth(selectedRow.getcolColumnWidth());
				AreaColumn.setMaskInPublicArea(selectedRow.getcolMaskInPublicArea());//WDEV-17966
				AreaColumn.setColumn((TrackingAreaColumn)form.grdTrackingAreaColum().getRows().get(i).getValue());	//wdev-17573
				trackingAreaColumns.add(AreaColumn);
			}
		}
		//wdev-17595
		if( form.getLocalContext().getCopyActionIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getCopyAction()) )
		{
			form.getLocalContext().setCopyAction(null);
			
			if( trackingAreaColumns != null && trackingAreaColumns.size() > 0 && form.getGlobalContext().Emergency.getTrackingAreaColumnsIsNotNull() && form.getGlobalContext().Emergency.getTrackingAreaColumns().size() > 0)
			{
				ColumnDetailVoCollection trackingAreaColumnsCopied = form.getGlobalContext().Emergency.getTrackingAreaColumns();
				
				ColumnDetailVoCollection newcol = new ColumnDetailVoCollection();
				ColumnDetailVoCollection colforremove = new ColumnDetailVoCollection();
				for(int i = 0; i < trackingAreaColumnsCopied.size();i++ )
				{
					for(int j = 0; j < trackingAreaColumns.size();j++)
					{
						if( trackingAreaColumnsCopied.get(i).getColumn().equals(trackingAreaColumns.get(j).getColumn()))
						{
							ColumnDetailVo tempColumn = trackingAreaColumns.get(j); 
							newcol.add(tempColumn);
							colforremove.add(tempColumn);
							break;
							
						}
					}
				}
				if( trackingAreaColumns != null && trackingAreaColumns.size() > 0 && colforremove != null && colforremove.size() > 0)
				{
					for(int l = 0; l < colforremove.size();l++)
					{
						trackingAreaColumns.remove(colforremove.get(l));
					}
				}
				if( trackingAreaColumns != null && trackingAreaColumns.size() > 0)
				{
					for( int k = 0; k < trackingAreaColumns.size();k++)
					{
						newcol.add(trackingAreaColumns.get(k));
					}
				}
				trackingAreaColumns = new ColumnDetailVoCollection();
				trackingAreaColumns = newcol;
			}
			
		}
		
		//-----------

		if (!form.getGlobalContext().Emergency.getTrackingAreaWorkspaceIsNotNull())
		{
			form.getGlobalContext().Emergency.setTrackingAreaWorkspace(new TrackingAreaVo());
		}

		form.getGlobalContext().Emergency.getTrackingAreaWorkspace().setColumns(trackingAreaColumns);
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onBtnPreviewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		TrackingAreaColumnCollection lkpAreaCollection = LookupHelper.getTrackingAreaColumn(domain.getLookupService());

		if (!form.getGlobalContext().Emergency.getTrackingAreaColumnsIsNotNull())
		{
			form.getGlobalContext().Emergency.setTrackingAreaColumns(new ColumnDetailVoCollection());
		}

		form.getGlobalContext().Emergency.getTrackingAreaColumns().clear();

		for (int i = 0; i < form.grdTrackingAreaColum().getRows().size(); i++)
		{
			grdTrackingAreaColumRow selectedRow = form.grdTrackingAreaColum().getRows().get(i);

			if (selectedRow.getcolSelect() == true)
			{
				ColumnDetailVo AreaColumn = new ColumnDetailVo();
				AreaColumn.setColHeader(selectedRow.getcolColumnHeader());
				AreaColumn.setMaskInPublicArea(selectedRow.getcolMaskInPublicArea());//WDEV-17966
				AreaColumn.setColWidth(selectedRow.getcolColumnWidth());
				AreaColumn.setColumn(lkpAreaCollection.get(i));

				form.getGlobalContext().Emergency.getTrackingAreaColumns().add(AreaColumn);
			}
		}

		engine.open(form.getForms().Emergency.TrackingAreaColumnPreview);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		boolean wasSelected = false;

		if (form.grdTrackingAreaColum().getSelectedRow() != null)
		{
			wasSelected = form.grdTrackingAreaColum().getSelectedRow().getcolSelect();
		}

		if (form.getLocalContext().getSelectedRowIsNotNull())
		{
			form.grdTrackingAreaColum().setValue(form.getLocalContext().getSelectedRow().getColumn());
		}

		if (formName.equals(form.getForms().Emergency.ColumnConfigDialog) && result.equals(DialogResult.OK))
		{
			ColumnDetailVo column = form.getGlobalContext().Emergency.getAreaColumn();

			if (column != null && form.getGlobalContext().Emergency.getAreaColumn().getIsChecked())
			{
				form.grdTrackingAreaColum().getSelectedRow().setcolSelect(column.getIsChecked());
				form.grdTrackingAreaColum().getSelectedRow().setcolMaskInPublicArea(column.getMaskInPublicArea()!=null ? column.getMaskInPublicArea() : false);//WDEV-17966
				form.grdTrackingAreaColum().getSelectedRow().setcolColumnHeader(column.getColHeader());
				form.grdTrackingAreaColum().getSelectedRow().setcolColumnWidth(column.getColWidth());
				form.grdTrackingAreaColum().getSelectedRow().setcolImage(column.getColumn().getImage());
				if (column.getColWidth() != null)
				{
					if (column.getIsChecked())
					{
						usedSpace = usedSpace + form.grdTrackingAreaColum().getSelectedRow().getcolColumnWidth();
					}
					else if (wasSelected && !form.grdTrackingAreaColum().getSelectedRow().getcolSelect())
					{
						usedSpace = usedSpace - form.grdTrackingAreaColum().getSelectedRow().getcolColumnWidth();
					}
				}
			}
			else
			{
				resetColumnConfig();
			}
		}
		//WDEV-14896
		else if (formName.equals(form.getForms().Emergency.CopyAreaWorkspaceConfig) && DialogResult.OK.equals(result))
		{
			repopulateGridWithNewValues(form.getGlobalContext().Emergency.getTrackingAreaColumns());
			form.getLocalContext().setCopyAction(Boolean.TRUE);	//wdev-17595
		}
		else if (!formName.equals(form.getForms().Emergency.TrackingAreaColumnPreview))
		{
			if (form.getLocalContext().getSelectedEventIsNotNull() && form.getLocalContext().getSelectedEvent().equals(TrackingAreaColumnConfigEvent.AREACOLUMNGRIDCHECKED))
			{
				form.grdTrackingAreaColum().getSelectedRow().setcolSelect(false);
			}
			if (form.grdTrackingAreaColum().getSelectedRow() != null && form.grdTrackingAreaColum().getSelectedRow().getcolColumnWidth() != null)
			{
				usedSpace = usedSpace + form.grdTrackingAreaColum().getSelectedRow().getcolColumnWidth();
			}
		}
		
		updateContextMenuState();
	}

	//WDEV-14896
	private void repopulateGridWithNewValues(ColumnDetailVoCollection trackingColumsCollection)
	{
		if (trackingColumsCollection == null)
			return;

		//for (int i=0;i<form.grdTrackingAreaColum().getRows().size();i++)
		//{
		//	form.grdTrackingAreaColum().getRows().get(i).setcolSelect(false);
		//}
		
		for (int i = 0; i < trackingColumsCollection.size(); i++)
			for (int j = 0; j < form.grdTrackingAreaColum().getRows().size(); j++)
			{
				if (trackingColumsCollection.get(i).getColumn().equals(form.grdTrackingAreaColum().getRows().get(j).getValue()))
				{
					form.grdTrackingAreaColum().getRows().get(j).setcolSelect(true);
					form.grdTrackingAreaColum().getRows().get(j).setcolImage(trackingColumsCollection.get(i).getColumn().getImage());
					form.grdTrackingAreaColum().getRows().get(j).setcolMaskInPublicArea(trackingColumsCollection.get(i).getMaskInPublicArea()!=null ? trackingColumsCollection.get(i).getMaskInPublicArea() : false);//WDEV-17966
					if (trackingColumsCollection.get(i).getColWidthIsNotNull())
					{
						form.grdTrackingAreaColum().getRows().get(j).setcolColumnWidth(trackingColumsCollection.get(i).getColWidth());
						usedSpace = usedSpace + trackingColumsCollection.get(i).getColWidth();
					}
					if (trackingColumsCollection.get(i).getColHeaderIsNotNull())
					{
						form.grdTrackingAreaColum().getRows().get(j).setcolColumnHeader(trackingColumsCollection.get(i).getColHeader());
					}
					break;
				}
			}
		
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.TrackingAreaColumn.Edit:
				form.getLocalContext().setSelectedEvent(null);

				if (form.grdTrackingAreaColum().getSelectedRow().getcolSelect() == false)
				{
					getColumnDetails();
				}
				else
				{
					usedSpace = usedSpace - form.grdTrackingAreaColum().getSelectedRow().getcolColumnWidth();
				}
				engine.open(form.getForms().Emergency.ColumnConfigDialog);
				break;
		}
	}

	private void setAreaColumnGlobalContext()
	{
		if (form.getGlobalContext().Emergency.getAreaColumn() == null)
		{
			form.getGlobalContext().Emergency.setAreaColumn(new ColumnDetailVo());
		}

		form.getGlobalContext().Emergency.getAreaColumn().setColHeader(form.grdTrackingAreaColum().getSelectedRow().getcolColumnHeader());
		form.getGlobalContext().Emergency.getAreaColumn().setMaskInPublicArea(form.grdTrackingAreaColum().getSelectedRow().getcolMaskInPublicArea());//WDEV-17966
		form.getGlobalContext().Emergency.getAreaColumn().setIsChecked(form.grdTrackingAreaColum().getSelectedRow().getcolSelect());
		form.getGlobalContext().Emergency.getAreaColumn().setColumn(form.getLocalContext().getSelectedRow().getColumn());

		if (form.grdTrackingAreaColum().getSelectedRow().getcolColumnWidth() != null)
		{
			form.getGlobalContext().Emergency.getAreaColumn().setColWidth(form.grdTrackingAreaColum().getSelectedRow().getcolColumnWidth());
		}
		else
		{
			form.getGlobalContext().Emergency.getAreaColumn().setColWidth(1000 - usedSpace);
		}
	}

	private void updateContextMenuState()
	{
		if (form.grdTrackingAreaColum().getValue() != null)
		{
			form.getContextMenus().Emergency.getTrackingAreaColumnEditItem().setVisible(true);
		}
	}

	protected void onGrdTrackingAreaColumGridCheckBoxClicked(int column, grdTrackingAreaColumRow row, boolean isChecked) throws PresentationLogicException
	{
		if (!form.getLocalContext().getSelectedRowIsNotNull())
		{
			form.getLocalContext().setSelectedRow(new ColumnDetailVo());
		}

		form.getLocalContext().getSelectedRow().setColumn((TrackingAreaColumn) row.getValue());

		if (form.getGlobalContext().Emergency.getAreaColumn() == null)
		{
			form.getGlobalContext().Emergency.setAreaColumn(new ColumnDetailVo());
		}

		if (isChecked)
		{
			form.getLocalContext().setSelectedEvent(TrackingAreaColumnConfigEvent.AREACOLUMNGRIDCHECKED);
			getColumnDetails();
			engine.open(form.getForms().Emergency.ColumnConfigDialog);
		}
		else
		{
			form.getLocalContext().setSelectedEvent(null);
			form.grdTrackingAreaColum().setValue(row.getValue());

			if (form.grdTrackingAreaColum().getSelectedRow().getcolColumnWidth() != null)
			{
				usedSpace = usedSpace - form.grdTrackingAreaColum().getSelectedRow().getcolColumnWidth();
			}
			resetColumnConfig();
		}
	}

	private void getColumnDetails()
	{

		String maximsInternalCode = findMapping(form.getLocalContext().getSelectedRow().getColumn());
		TrackingAreaColumnCollection lkpAreaCollection = LookupHelper.getTrackingAreaColumn(domain.getLookupService());
		int selectedRowIndex = lkpAreaCollection.indexOf(form.getLocalContext().getSelectedRow().getColumn());

		form.getGlobalContext().Emergency.getAreaColumn().setColumn(lkpAreaCollection.get(selectedRowIndex));

		if (maximsInternalCode != "" && maximsInternalCode != null)
		{
			try
			{
				form.getGlobalContext().Emergency.getAreaColumn().setColWidth(Integer.parseInt(maximsInternalCode));
			}
			catch (NumberFormatException e)
			{
				engine.showMessage("Maxims Internal mapping '" + (maximsInternalCode) + "' is not a number ! Column width will default to remaining space. ");
				form.getGlobalContext().Emergency.getAreaColumn().setColWidth(1000 - usedSpace);
			}
		}
		else
		{
			form.getGlobalContext().Emergency.getAreaColumn().setColWidth(1000 - usedSpace);
		}

		form.getGlobalContext().Emergency.getAreaColumn().setColHeader(form.getLocalContext().getSelectedRow().getColumn().getIItemText());
		form.getGlobalContext().Emergency.getAreaColumn().setIsChecked(true);
		form.getGlobalContext().Emergency.getAreaColumn().setMaskInPublicArea(form.getLocalContext().getSelectedRow().getMaskInPublicArea());//WDEV-17966
	}

	private void resetColumnConfig()
	{
		TrackingAreaColumnCollection lkpAreaCollection = LookupHelper.getTrackingAreaColumn(domain.getLookupService());

		form.grdTrackingAreaColum().getSelectedRow().setcolColumnWidth(null);
		form.grdTrackingAreaColum().getSelectedRow().setcolSelect(false);
		form.grdTrackingAreaColum().getSelectedRow().setcolImage(null);
		form.grdTrackingAreaColum().getSelectedRow().setcolMaskInPublicArea(false);//WDEV-17966
		
		for (int i = 0; i < lkpAreaCollection.size(); i++)
		{
			if (lkpAreaCollection.get(i).equals(form.grdTrackingAreaColum().getSelectedRow().getValue()))
			{
				form.grdTrackingAreaColum().getSelectedRow().setcolColumnHeader(lkpAreaCollection.get(i).getIItemText());
			}
		}
	}

	@Override
	protected void onGrdTrackingAreaColumSelectionChanged() throws PresentationLogicException
	{
		if (form.getLocalContext().getSelectedRow() == null)
		{
			form.getLocalContext().setSelectedRow(new ColumnDetailVo());
		}
		form.getLocalContext().getSelectedRow().setColumn((TrackingAreaColumn) form.grdTrackingAreaColum().getValue());
		updateContextMenuState();
		setAreaColumnGlobalContext();
	}

	//WDEV-14896
	@Override
	protected void onBtnCopyClick() throws PresentationLogicException
	{
		if (form.getGlobalContext().Emergency.getTrackingAreaWorkspace().getColumns().size()>0)
		{
			engine.showMessage("There are Columns configured for the current area.\nThe copy is not allowed in this case. ");
			return;
		}
		
		engine.open(form.getForms().Emergency.CopyAreaWorkspaceConfig,new Object[] {Boolean.TRUE});
	}
}
