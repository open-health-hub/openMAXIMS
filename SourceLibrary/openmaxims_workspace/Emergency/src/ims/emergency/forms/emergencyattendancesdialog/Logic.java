//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.emergencyattendancesdialog;

import ims.emergency.forms.emergencyattendancesdialog.GenForm.grdPreviousRow;
import ims.emergency.vo.AttendanceDetailsVo;
import ims.emergency.vo.EpisodeDetailsVo;
import ims.emergency.vo.EpisodeDetailsVoCollection;
import ims.emergency.vo.EpisodeOfcareLiteVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int EMERGENCY_CAS_CARD_REPORT_IMSID = 316; 
	private static final int EMERGENCY_SMALL_LABELS_IMSID = 317; 
	private static final int EMERGENCY_LARGE_LABELS_REPORT_IMSID = 318; 
	private static final int EMERGENCY_GP_LETTER_REPORT_IMSID = 319; 
	private static final String CARE_CONTEXT_SEED = "CareContext_id";

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.btnOK().setEnabled(false);
		EpisodeDetailsVoCollection voCollEpisodeDetails = null;
		if(args != null )
		{
			if((args.length == 1 && args[0] != null && args[0] instanceof Date))
			{
				voCollEpisodeDetails = domain.listEmergencyEpisodeByPatient(form.getGlobalContext().Core.getPatientShort(), (Date)args[0] ,null);
			}
			else if(args.length == 2 && args[0] == null && args[1] != null && args[1] instanceof Date)
			{
				voCollEpisodeDetails = domain.listEmergencyEpisodeByPatient(form.getGlobalContext().Core.getPatientShort(),null, (Date)args[1] );
			}
			else if(args.length == 2 && args[0] != null && args[0] instanceof Date && args[1] != null && args[1] instanceof Date)
			{
				voCollEpisodeDetails = domain.listEmergencyEpisodeByPatient(form.getGlobalContext().Core.getPatientShort(),(Date)args[0], (Date)args[1] );
			}
			else if(args.length == 0)
			{
				voCollEpisodeDetails = domain.listEmergencyEpisodeByPatient(form.getGlobalContext().Core.getPatientShort(),null, null );
			}
			
		}
		else
		{
			voCollEpisodeDetails = domain.listEmergencyEpisodeByPatient(form.getGlobalContext().Core.getPatientShort(),null, null );
		}
		populatePreviousHistoryGrid(voCollEpisodeDetails);
		
		updateControlsState();
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	protected void onBtnOKClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.grdPrevious().getValue() != null && form.grdPrevious().getValue()  instanceof EpisodeDetailsVo)
		{
			form.getGlobalContext().Emergency.setEmergencyEpisodeDetails((EpisodeDetailsVo)form.grdPrevious().getValue());
		}
		engine.close(DialogResult.OK);
	}
	
	private void populatePreviousHistoryGrid(EpisodeDetailsVoCollection emergencyEpisodes) 
	{
		if (emergencyEpisodes == null)
			return;

		form.grdPrevious().getRows().clear();		
		grdPreviousRow  episodeDetailsRow = null, emergencyAttendancesRow = null;
		emergencyEpisodes.sort(new InjuryDateComparator(SortOrder.DESCENDING));
		for (int i = 0; i < emergencyEpisodes.size(); i++)
		{	
			EpisodeDetailsVo voEpisodeDetails = emergencyEpisodes.get(i);
	
			episodeDetailsRow = form.grdPrevious().getRows().newRow(); 	
			EpisodeOfcareLiteVo tempVo = domain.getEpisodeOfCareLite(voEpisodeDetails.getEpisodeOfCare());	//wdev-16070
			episodeDetailsRow.setColumnDateTime(tempVo != null ? tempVo.getStartDate():null);				//wdev-16070
			
			episodeDetailsRow.setColumnPatCategory((voEpisodeDetails.getCategoryIsNotNull() ? voEpisodeDetails.getCategory().getText() + " - ":"") + (voEpisodeDetails.getPresentingComplaintIsNotNull()? voEpisodeDetails.getPresentingComplaint().toString():""));
			
			episodeDetailsRow.setColumnEmergencyNo(voEpisodeDetails.getID_EmergencyEpisode().toString());
			
			//episodeDetailsRow.setCollapsedImage(form.getImages().Core.CareSpell);
			//episodeDetailsRow.setExpandedImage(form.getImages().Core.CareSpell);
			
			//episodeDetailsRow.setBackColor(Color.Bisque);
			episodeDetailsRow.setBold(true);
			episodeDetailsRow.setValue(voEpisodeDetails);
			episodeDetailsRow.setTooltip("DateTime : <b>" + (voEpisodeDetails.getInjuryDateTime()!=null ? voEpisodeDetails.getInjuryDateTime():"") + (voEpisodeDetails.getCategoryIsNotNull() ? "</b><br>Category : <b>" + voEpisodeDetails.getCategory().getText() : "") + (voEpisodeDetails.getID_EmergencyEpisodeIsNotNull() ? "</b><br>Emergency Number: <b>" + voEpisodeDetails.getID_EmergencyEpisode().toString() + "</b>" : ""));//WDEV-17178
			
			if (voEpisodeDetails.getEmergencyAttendancesIsNotNull())
			{
				episodeDetailsRow.setExpanded(true);
				voEpisodeDetails.getEmergencyAttendances().sort(new ArrivalDateComparator(SortOrder.DESCENDING));   //wdev-14420
				for (int j = 0; j < voEpisodeDetails.getEmergencyAttendances().size(); j++)
				{
					AttendanceDetailsVo voEmergencyAttendances = voEpisodeDetails.getEmergencyAttendances().get(j);
					
					emergencyAttendancesRow = episodeDetailsRow.getRows().newRow();
					
					if (voEmergencyAttendances.getDischargeDateTimeIsNotNull())
					{							
						emergencyAttendancesRow.setColumnDateTime(voEmergencyAttendances.getRegistrationDateTime() + " - " + voEmergencyAttendances.getDischargeDateTime());
						emergencyAttendancesRow.setColumnPatCategory(voEmergencyAttendances.getOutcome() != null ? voEmergencyAttendances.getOutcome().getText() :  null);
						emergencyAttendancesRow.setColumnEmergencyNo(voEmergencyAttendances.getID_EmergencyAttendance().toString());
						
						
						emergencyAttendancesRow.setColumnContextType((voEmergencyAttendances.getCareContextIsNotNull() && voEmergencyAttendances.getCareContext().getContextIsNotNull())? voEmergencyAttendances.getCareContext().getContext():null);
						
						//emergencyAttendancesRow.setCollapsedImage(form.getImages().Core.BookOpenEnabled);
						//emergencyAttendancesRow.setBackColor(Color.LightBlue);
						emergencyAttendancesRow.setValue(voEmergencyAttendances);
						emergencyAttendancesRow.setTooltip("DateTime : <b>" + (voEmergencyAttendances.getRegistrationDateTime()!=null ? voEmergencyAttendances.getRegistrationDateTime() : "") + " - " + (voEmergencyAttendances.getDischargeDateTime()!=null ? voEmergencyAttendances.getDischargeDateTime() : "") + (voEmergencyAttendances.getOutcomeIsNotNull() ? "</b><br>Outcome : <b>" + voEmergencyAttendances.getOutcome() : "") + (voEmergencyAttendances.getID_EmergencyAttendanceIsNotNull() ? "</b><br>Emergency Number: <b>" + voEmergencyAttendances.getID_EmergencyAttendance().toString() + "</b><br>Context Type : <b>" + voEmergencyAttendances.getCareContext().getContext().toString() : ""));//WDEV-17178
					}
					else
					{
						emergencyAttendancesRow.setColumnDateTime(voEmergencyAttendances.getArrivalDateTime());
						emergencyAttendancesRow.setColumnPatCategory(voEmergencyAttendances.getOutcome() != null ? voEmergencyAttendances.getOutcome().getText() :  null);
						emergencyAttendancesRow.setColumnEmergencyNo(voEmergencyAttendances.getID_EmergencyAttendance().toString());
						emergencyAttendancesRow.setColumnContextType((voEmergencyAttendances.getCareContextIsNotNull() && voEmergencyAttendances.getCareContext().getContextIsNotNull()) ? voEmergencyAttendances.getCareContext().getContext():null);
						//emergencyAttendancesRow.setCollapsedImage(form.getImages().Core.Alert_RedTriangle2);
						//emergencyAttendancesRow.setBackColor(Color.Pink);
						emergencyAttendancesRow.setValue(voEmergencyAttendances);
						emergencyAttendancesRow.setTooltip("DateTime : <b>" + (voEmergencyAttendances.getRegistrationDateTime()!=null ? voEmergencyAttendances.getRegistrationDateTime():"") + (voEmergencyAttendances.getOutcomeIsNotNull() ? "</b><br>Outcome : <b>" + voEmergencyAttendances.getOutcome() : "") + (voEmergencyAttendances.getID_EmergencyAttendanceIsNotNull() ? "</b><br>Emergency Number: <b>" + voEmergencyAttendances.getID_EmergencyAttendance().toString() + "</b><br>Context Type : <b>" + voEmergencyAttendances.getCareContext().getContext().toString() : ""));
					}
					
					
								
				}
			}
		}		
	}
	
	
	//IF EmergencyAttendance.ArrivalDateTime < NOW() - X  

	/*private Boolean isAttendancesFollowTheRule(AttendanceDetailsVoCollection tempColl)
	{
		if(tempColl == null)
			return false;
		for(AttendanceDetailsVo tempVo :  tempColl)
		{
			if(tempVo != null)
			{
				if(form.getLocalContext().getSheduledUnscheduledIsNotNull() && form.getLocalContext().getSheduledUnscheduled().intValue() == SCHEDULED)
				{
					int numberOfDaysScheduled =	DateTime.daysDiff(new DateTime(),tempVo.getArrivalDateTime());
					if(numberOfDaysScheduled > EMERGENCY_ATTENDANCE_SCHEDULED_RETURN_RULE_DAYS)
						return true;
					
				}
				else if(form.getLocalContext().getSheduledUnscheduledIsNotNull() && form.getLocalContext().getSheduledUnscheduled().intValue() == UNSCHEDULED)
				{
					int numberOfDaysUnScheduled =	DateTime.daysDiff(new DateTime(),tempVo.getArrivalDateTime());
					if(numberOfDaysUnScheduled > EMERGENCY_ATTENDANCE_UNSCHEDULED_RETURN_RULE_DAYS)
						return true;
				}
				
			}
		}
		return false;
	
		
	}*/
	public class ArrivalDateComparator implements Comparator
	{
		private int direction = 1;
		
		public ArrivalDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public ArrivalDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime date1 = null;
			DateTime date2 = null;
			if(ob1 instanceof AttendanceDetailsVo )
			{
				AttendanceDetailsVo ps1 = (AttendanceDetailsVo)ob1;
				date1 = ps1.getArrivalDateTime();
			}
			if(ob2 instanceof AttendanceDetailsVo)
			{
				AttendanceDetailsVo ps2 = (AttendanceDetailsVo)ob2;
				date2 = ps2.getArrivalDateTime();
			}
			if(date1 != null )
				return  date1.compareTo(date2)*direction;
			if(date2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	public class InjuryDateComparator implements Comparator
	{
		private int direction = 1;
		
		public InjuryDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public InjuryDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime date1 = null;
			DateTime date2 = null;
			if(ob1 instanceof EpisodeDetailsVo)
			{
				EpisodeDetailsVo ps1 = (EpisodeDetailsVo)ob1;
				date1 = ps1.getInjuryDateTime();
			}
			if(ob2 instanceof EpisodeDetailsVo)
			{
				EpisodeDetailsVo ps2 = (EpisodeDetailsVo)ob2;
				date2 = ps2.getInjuryDateTime();
			}
			if(date1 != null )
				return  date1.compareTo(date2)*direction;
			if(date2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}

	protected void onGrdPreviousSelectionChanged()	throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onBtnPrintCASCardClick() throws PresentationLogicException 
	{
		if(!(form.grdPrevious().getValue() instanceof AttendanceDetailsVo))
			return;
		
		form.getGlobalContext().Core.setImsReportId(EMERGENCY_CAS_CARD_REPORT_IMSID);
		engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {CARE_CONTEXT_SEED, ((AttendanceDetailsVo) form.grdPrevious().getValue()).getCareContext().getID_CareContext()});
	}

	@Override
	protected void onBtnPrintSmallLabelsClick()	throws PresentationLogicException 
	{
		if(!(form.grdPrevious().getValue() instanceof AttendanceDetailsVo))
			return;
		
		form.getGlobalContext().Core.setImsReportId(EMERGENCY_SMALL_LABELS_IMSID);
		engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {CARE_CONTEXT_SEED, ((AttendanceDetailsVo) form.grdPrevious().getValue()).getCareContext().getID_CareContext()});
	}

	@Override
	protected void onBtnPrintLargeLabelsClick()	throws PresentationLogicException 
	{
		if(!(form.grdPrevious().getValue() instanceof AttendanceDetailsVo))
			return;
		
		form.getGlobalContext().Core.setImsReportId(EMERGENCY_LARGE_LABELS_REPORT_IMSID);
		engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {CARE_CONTEXT_SEED, ((AttendanceDetailsVo) form.grdPrevious().getValue()).getCareContext().getID_CareContext()});
	}

	@Override
	protected void onBtnPrintGPLettersClick() throws PresentationLogicException 
	{
		if(!(form.grdPrevious().getValue() instanceof AttendanceDetailsVo))
			return;
		
		form.getGlobalContext().Core.setImsReportId(EMERGENCY_GP_LETTER_REPORT_IMSID);
		engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {CARE_CONTEXT_SEED, ((AttendanceDetailsVo) form.grdPrevious().getValue()).getCareContext().getID_CareContext()});
	}
	
	private void updateControlsState()
	{
		boolean isEpisodeSelected = form.grdPrevious().getValue() instanceof EpisodeDetailsVo;
		
		form.btnOK().setEnabled(isEpisodeSelected);
		form.btnOK().setVisible(!isAttendanceHistory());
		form.btnCancel().setEnabled(true);
		form.btnCancel().setVisible(!isAttendanceHistory());
		
		form.btnClose().setEnabled(true);
		form.btnClose().setVisible(isAttendanceHistory());
		
		boolean isAttendanceSelected = form.grdPrevious().getValue() instanceof AttendanceDetailsVo;
		
		form.btnPrintCASCard().setEnabled(isAttendanceSelected);
		form.btnPrintSmallLabels().setEnabled(isAttendanceSelected);
		form.btnPrintLargeLabels().setEnabled(isAttendanceSelected);
		form.btnPrintGPLetters().setEnabled(isAttendanceSelected);
	}
	
	private boolean isAttendanceHistory()
	{
		if(engine.getFormName().equals(form.getForms().Emergency.AttendanceHistory))
			return true;
		
		return false;
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.OK);
	}
}
