//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.supportservices;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrSupportServicesLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabPageProfContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbProfessionalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.HcpDisType getValue()
				{
					return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.HcpDisType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbHcpSubTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.HcpDisType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.HcpDisType value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.HcpDisType getValue()
				{
					return (ims.core.vo.lookups.HcpDisType)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.HcpDisType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLocationHcpComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocShortVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocShortVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocShortVo getValue()
				{
					return (ims.core.vo.LocShortVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocShortVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbHcpNameComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.Hcp value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.Hcp value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.Hcp value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.Hcp getValue()
				{
					return (ims.core.vo.Hcp)super.control.getValue();
				}
				public void setValue(ims.core.vo.Hcp value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdProfessionalRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdProfessionalRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColNameOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColName(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColName()
				{
					return (String)super.row.get(0);
				}
				public void setColName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColProfessionServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColProfessionServiceReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColProfessionServiceOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColProfessionService(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColProfessionService()
				{
					return (String)super.row.get(1);
				}
				public void setColProfessionService(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColProfessionServiceTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColWorkPhoneReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColWorkPhoneReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColWorkPhoneOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColWorkPhone(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColWorkPhone()
				{
					return (String)super.row.get(2);
				}
				public void setColWorkPhone(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColWorkPhoneTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColIsActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColIsActiveReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColIsActiveOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColIsActive(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.framework.utils.Image getColIsActive()
				{
					return (ims.framework.utils.Image)super.row.get(3);
				}
				public void setColIsActive(ims.framework.utils.Image value)
				{
					super.row.set(3, value);
				}
				public void setCellColIsActiveTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.core.vo.SupportNetworkProfessionalVo getValue()
				{
					return (ims.core.vo.SupportNetworkProfessionalVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.SupportNetworkProfessionalVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdProfessionalRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdProfessionalRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdProfessionalRow get(int index)
				{
					return new grdProfessionalRow(super.collection.get(index));
				}
				public grdProfessionalRow newRow()
				{
					return new grdProfessionalRow(super.collection.newRow());
				}
				public grdProfessionalRow newRow(boolean autoSelect)
				{
					return new grdProfessionalRow(super.collection.newRow(autoSelect));
				}
				public grdProfessionalRow newRowAt(int index)
				{
					return new grdProfessionalRow(super.collection.newRowAt(index));
				}
				public grdProfessionalRow newRowAt(int index, boolean autoSelect)
				{
					return new grdProfessionalRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdProfessionalGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.core.vo.SupportNetworkProfessionalVo[] getValues()
				{
					ims.core.vo.SupportNetworkProfessionalVo[] listOfValues = new ims.core.vo.SupportNetworkProfessionalVo[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.SupportNetworkProfessionalVo getValue()
				{
					return (ims.core.vo.SupportNetworkProfessionalVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.SupportNetworkProfessionalVo value)
				{
					super.grid.setValue(value);
				}
				public grdProfessionalRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdProfessionalRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdProfessionalRowCollection getRows()
				{
					return new grdProfessionalRowCollection(super.grid.getRows());
				}
				public grdProfessionalRow getRowByValue(ims.core.vo.SupportNetworkProfessionalVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdProfessionalRow(row);
				}
				public void setColNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColProfessionServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColProfessionServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColWorkPhoneHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColWorkPhoneHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColIsActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColIsActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
		
			public static class grpProfFilterRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 96, 8, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "View All", startTabIndex.intValue() + 4);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "View Active", startTabIndex.intValue() + 2);
				}
				public void setText(grpProfFilterEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grpProfFilterEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grpProfFilterEnumeration.None;
						case 0: return grpProfFilterEnumeration.rdoAllProf;
						case 1: return grpProfFilterEnumeration.rdoActiveProf;
					}
					return null;
				}
				public void setValue(grpProfFilterEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grpProfFilterEnumeration.None.id);
				}
				public boolean isEnabled(grpProfFilterEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grpProfFilterEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grpProfFilterEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grpProfFilterEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grpProfFilterEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grpProfFilterEnumeration None = new grpProfFilterEnumeration(-1);
				public static grpProfFilterEnumeration rdoAllProf = new grpProfFilterEnumeration(0);
				public static grpProfFilterEnumeration rdoActiveProf = new grpProfFilterEnumeration(1);
				private grpProfFilterEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grpProfFilterEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 2, 174, 658, 321, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Professional Details", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 3, 391, 657, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ims.framework.FormUiLogic m_customControlAuthForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 18, skipContextValidation);
				//ims.framework.Control m_customControlAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(3), new Integer(391), new Integer(657), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 18), m_customControlAuthForm, instance1 } );
				ims.framework.Control m_customControlAuthControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 18), m_customControlAuthForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlAuthControl);
				Menu[] menus1 = m_customControlAuthForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 10, 216, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Profession:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 10, 248, 36, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 10, 304, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "HCP Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 10, 337, 57, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Location:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 10, 369, 78, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Work Phone:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 249, 216, 54, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Address:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 249, 369, 93, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "E-mail Address:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 249, 337, 85, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Mobile Phone:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 528, 0, 130, 22, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "None at Present", new Integer(1), null, new Integer(1)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 90, 463, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 10, 463, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 571, 463, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 492, 463, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 206, 463, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Inactivate", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 86, 335, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 86, 302, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 86, 367, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 302, 214, 344, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(120), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 337, 335, 309, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 337, 367, 309, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 86, 214, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbProfessionalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbProfessionalTemp);
				cmbProfessionalComboBox cmbProfessional = (cmbProfessionalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProfessionalComboBox.class, m_cmbProfessionalTemp);
				super.addComboBox(cmbProfessional);
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 86, 246, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbHcpSubTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbHcpSubTypeTemp);
				cmbHcpSubTypeComboBox cmbHcpSubType = (cmbHcpSubTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHcpSubTypeComboBox.class, m_cmbHcpSubTypeTemp);
				super.addComboBox(cmbHcpSubType);
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 87, 335, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbLocationHcpTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbLocationHcpTemp);
				cmbLocationHcpComboBox cmbLocationHcp = (cmbLocationHcpComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationHcpComboBox.class, m_cmbLocationHcpTemp);
				super.addComboBox(cmbLocationHcp);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 86, 302, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_qmbHcpNameTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbHcpNameTemp);
				qmbHcpNameComboBox qmbHcpName = (qmbHcpNameComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbHcpNameComboBox.class, m_qmbHcpNameTemp);
				super.addComboBox(qmbHcpName);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 10, 198, 120, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.HIDDEN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"None at Present", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 86, 278, 144, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.HIDDEN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Enter HCP Details:", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 2, 24, 658, 150, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdProfessionalTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuSupportNetworkProfessional, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdProfessionalTemp);
				grdProfessionalGrid grdProfessional = (grdProfessionalGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProfessionalGrid.class, m_grdProfessionalTemp);
				grdProfessional.addStringColumn("Name", 0, 0, 220, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProfessional.setColNameHeaderTooltip("Name");
				grdProfessional.addStringColumn("Profession", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProfessional.setColProfessionServiceHeaderTooltip("Profession");
				grdProfessional.addStringColumn("Work Phone", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdProfessional.setColWorkPhoneHeaderTooltip("Work Phone");
				grdProfessional.addImageColumn("Status", 1, 1, -1, true, 0);
				grdProfessional.setColIsActiveHeaderTooltip("Status");
				super.addGrid(grdProfessional);
		
				// RadioButton Controls
				RadioButton tmpgrpProfFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpgrpProfFilter);
				grpProfFilterRadioButton grpProfFilter = (grpProfFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpProfFilterRadioButton.class, tmpgrpProfFilter);
				grpProfFilter.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grpProfFilter);
			}

			public ims.core.forms.authoringinfo.IComponent customControlAuth()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlAuthValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlAuthVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlAuthVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlAuthEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlAuthEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblNoneAtPresentPro()
			{
				return (Label)super.getControl(10);
			}
			public Button btnProfEdit()
			{
				return (Button)super.getControl(11);
			}
			public Button btnProfNew()
			{
				return (Button)super.getControl(12);
			}
			public Button btnCancelProfessional()
			{
				return (Button)super.getControl(13);
			}
			public Button btnSaveProfessional()
			{
				return (Button)super.getControl(14);
			}
			public Button btnInactivateProfessional()
			{
				return (Button)super.getControl(15);
			}
			public TextBox txtLocation()
			{
				return (TextBox)super.getControl(16);
			}
			public TextBox txtHcpName()
			{
				return (TextBox)super.getControl(17);
			}
			public TextBox txtWorkPh()
			{
				return (TextBox)super.getControl(18);
			}
			public TextBox txtAddressPro()
			{
				return (TextBox)super.getControl(19);
			}
			public TextBox txtMobilePhPro()
			{
				return (TextBox)super.getControl(20);
			}
			public TextBox txtEmailPro()
			{
				return (TextBox)super.getControl(21);
			}
			public cmbProfessionalComboBox cmbProfessional()
			{
				return (cmbProfessionalComboBox)super.getComboBox(0);
			}
			public cmbHcpSubTypeComboBox cmbHcpSubType()
			{
				return (cmbHcpSubTypeComboBox)super.getComboBox(1);
			}
			public cmbLocationHcpComboBox cmbLocationHcp()
			{
				return (cmbLocationHcpComboBox)super.getComboBox(2);
			}
			public qmbHcpNameComboBox qmbHcpName()
			{
				return (qmbHcpNameComboBox)super.getComboBox(3);
			}
			public CheckBox chkNoneAtPresentPro()
			{
				return (CheckBox)super.getControl(26);
			}
			public CheckBox chkSupplyHcp()
			{
				return (CheckBox)super.getControl(27);
			}
			public grdProfessionalGrid grdProfessional()
			{
				return (grdProfessionalGrid)super.getGrid(0);
			}
			public grpProfFilterRadioButton grpProfFilter()
			{
				return (grpProfFilterRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabPageServicesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ServiceLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ServiceLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ServiceLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ServiceLiteVo getValue()
				{
					return (ims.core.vo.ServiceLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ServiceLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLocationServicesComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationServiceVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationServiceVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationServiceVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationServiceVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationServiceVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationServiceVo getValue()
				{
					return (ims.core.vo.LocationServiceVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationServiceVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdServicesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdServicesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColServiceTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColServiceTypeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColServiceTypeOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColServiceType(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColServiceType()
				{
					return (String)super.row.get(0);
				}
				public void setColServiceType(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColServiceTypeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColContactPersonReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColContactPersonReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColContactPersonOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColContactPerson(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColContactPerson()
				{
					return (String)super.row.get(1);
				}
				public void setColContactPerson(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColContactPersonTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPhoneNoReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPhoneNoReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPhoneNoOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColPhoneNo(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColPhoneNo()
				{
					return (String)super.row.get(2);
				}
				public void setColPhoneNo(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColPhoneNoTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColFrequencyReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColFrequencyReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColFrequencyOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColFrequency(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColFrequency()
				{
					return (String)super.row.get(3);
				}
				public void setColFrequency(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColFrequencyTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColIsActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColIsActiveReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColIsActiveOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColIsActive(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.framework.utils.Image getColIsActive()
				{
					return (ims.framework.utils.Image)super.row.get(4);
				}
				public void setColIsActive(ims.framework.utils.Image value)
				{
					super.row.set(4, value);
				}
				public void setCellColIsActiveTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.core.vo.SupportNetworkServicesVo getValue()
				{
					return (ims.core.vo.SupportNetworkServicesVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.SupportNetworkServicesVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdServicesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdServicesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdServicesRow get(int index)
				{
					return new grdServicesRow(super.collection.get(index));
				}
				public grdServicesRow newRow()
				{
					return new grdServicesRow(super.collection.newRow());
				}
				public grdServicesRow newRow(boolean autoSelect)
				{
					return new grdServicesRow(super.collection.newRow(autoSelect));
				}
				public grdServicesRow newRowAt(int index)
				{
					return new grdServicesRow(super.collection.newRowAt(index));
				}
				public grdServicesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdServicesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdServicesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.core.vo.SupportNetworkServicesVo[] getValues()
				{
					ims.core.vo.SupportNetworkServicesVo[] listOfValues = new ims.core.vo.SupportNetworkServicesVo[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.SupportNetworkServicesVo getValue()
				{
					return (ims.core.vo.SupportNetworkServicesVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.SupportNetworkServicesVo value)
				{
					super.grid.setValue(value);
				}
				public grdServicesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdServicesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdServicesRowCollection getRows()
				{
					return new grdServicesRowCollection(super.grid.getRows());
				}
				public grdServicesRow getRowByValue(ims.core.vo.SupportNetworkServicesVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdServicesRow(row);
				}
				public void setColServiceTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColServiceTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColContactPersonHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColContactPersonHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPhoneNoHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPhoneNoHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColFrequencyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColFrequencyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColIsActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColIsActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
		
			public static class grpServiceFilterRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper32.getX(), anchoringHelper32.getY(), anchoringHelper32.getWidth(), "View Active", startTabIndex.intValue() + 1025);
					RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 96, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper33.getX(), anchoringHelper33.getY(), anchoringHelper33.getWidth(), "View All", startTabIndex.intValue() + 1027);
				}
				public void setText(grpServiceFilterEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grpServiceFilterEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grpServiceFilterEnumeration.None;
						case 0: return grpServiceFilterEnumeration.rdoActiveServices;
						case 1: return grpServiceFilterEnumeration.rdoAllServices;
					}
					return null;
				}
				public void setValue(grpServiceFilterEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grpServiceFilterEnumeration.None.id);
				}
				public boolean isEnabled(grpServiceFilterEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grpServiceFilterEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grpServiceFilterEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grpServiceFilterEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grpServiceFilterEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grpServiceFilterEnumeration None = new grpServiceFilterEnumeration(-1);
				public static grpServiceFilterEnumeration rdoActiveServices = new grpServiceFilterEnumeration(0);
				public static grpServiceFilterEnumeration rdoAllServices = new grpServiceFilterEnumeration(1);
				private grpServiceFilterEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grpServiceFilterEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 2, 145, 658, 352, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Service Details", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 2, 401, 660, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ims.framework.FormUiLogic m_customControlAuthSerForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper35.getSize(), instance1, startTabIndex.intValue() + 1045, skipContextValidation);
				//ims.framework.Control m_customControlAuthSerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(2), new Integer(401), new Integer(660), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 1045), m_customControlAuthSerForm, instance1 } );
				ims.framework.Control m_customControlAuthSerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1033),  new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 1045), m_customControlAuthSerForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlAuthSerControl);
				Menu[] menus1 = m_customControlAuthSerForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 528, 0, 130, 22, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "None at Present", new Integer(1), null, new Integer(1)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 10, 185, 50, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 10, 233, 96, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Area / Location:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 10, 265, 95, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Contact Person:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 10, 297, 101, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Contact Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 271, 185, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Frequency:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 271, 235, 54, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Address:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 10, 328, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 90, 465, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 2047), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 10, 465, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 2046), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 571, 465, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 2050), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 492, 465, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 2049), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 206, 465, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 2048), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Inactivate", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 106, 233, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 1039), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 106, 265, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 1041), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(100), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 106, 297, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 1042), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 336, 185, 310, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 1035), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 336, 233, 310, 85, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 1043), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(160), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 106, 328, 536, 72, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 1044), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 106, 185, 150, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 1033), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbServiceTemp);
				cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
				super.addComboBox(cmbService);
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 106, 233, 150, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbLocationServicesTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 1040), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbLocationServicesTemp);
				cmbLocationServicesComboBox cmbLocationServices = (cmbLocationServicesComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationServicesComboBox.class, m_cmbLocationServicesTemp);
				super.addComboBox(cmbLocationServices);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 10, 166, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 1031), ControlState.HIDDEN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"None At Present", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 106, 211, 152, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 1037), ControlState.HIDDEN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Enter Service  Details:", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 2, 24, 658, 120, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdServicesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Emergency.contextMenuSupportNetworkServices, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdServicesTemp);
				grdServicesGrid grdServices = (grdServicesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdServicesGrid.class, m_grdServicesTemp);
				grdServices.addStringColumn("Service", 0, 0, 150, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdServices.setColServiceTypeHeaderTooltip("Service");
				grdServices.addStringColumn("Contact Person", 0, 0, 155, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdServices.setColContactPersonHeaderTooltip("Contact Person");
				grdServices.addStringColumn("Phone Number", 0, 0, 95, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdServices.setColPhoneNoHeaderTooltip("Phone Number");
				grdServices.addStringColumn("Frequency", 0, 0, 95, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdServices.setColFrequencyHeaderTooltip("Frequency");
				grdServices.addImageColumn("Status", 1, 1, -1, true, 0);
				grdServices.setColIsActiveHeaderTooltip("Status");
				super.addGrid(grdServices);
		
				// RadioButton Controls
				RadioButton tmpgrpServiceFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpgrpServiceFilter);
				grpServiceFilterRadioButton grpServiceFilter = (grpServiceFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpServiceFilterRadioButton.class, tmpgrpServiceFilter);
				grpServiceFilter.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grpServiceFilter);
			}

			public ims.core.forms.authoringinfo.IComponent customControlAuthSer()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlAuthSerValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlAuthSerVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlAuthSerVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlAuthSerEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlAuthSerEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblNoneAtPresentSer()
			{
				return (Label)super.getControl(2);
			}
			public Button btnServEdit()
			{
				return (Button)super.getControl(10);
			}
			public Button btnServNew()
			{
				return (Button)super.getControl(11);
			}
			public Button btnCancelServices()
			{
				return (Button)super.getControl(12);
			}
			public Button btnSaveServices()
			{
				return (Button)super.getControl(13);
			}
			public Button btnInactivateService()
			{
				return (Button)super.getControl(14);
			}
			public TextBox txtAreaLoc()
			{
				return (TextBox)super.getControl(15);
			}
			public TextBox txtContactPerson()
			{
				return (TextBox)super.getControl(16);
			}
			public TextBox txtPhoneNoService()
			{
				return (TextBox)super.getControl(17);
			}
			public TextBox txtFrequency()
			{
				return (TextBox)super.getControl(18);
			}
			public TextBox txtAddressService()
			{
				return (TextBox)super.getControl(19);
			}
			public TextBox txtCommentsService()
			{
				return (TextBox)super.getControl(20);
			}
			public cmbServiceComboBox cmbService()
			{
				return (cmbServiceComboBox)super.getComboBox(0);
			}
			public cmbLocationServicesComboBox cmbLocationServices()
			{
				return (cmbLocationServicesComboBox)super.getComboBox(1);
			}
			public CheckBox chkNoneAtPresentSer()
			{
				return (CheckBox)super.getControl(23);
			}
			public CheckBox chkSupplyServiceDetail()
			{
				return (CheckBox)super.getControl(24);
			}
			public grdServicesGrid grdServices()
			{
				return (grdServicesGrid)super.getGrid(0);
			}
			public grpServiceFilterRadioButton grpServiceFilter()
			{
				return (grpServiceFilterRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabPageFamilyContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbRecordingHCPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.MemberOfStaffLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.MemberOfStaffLiteVo getValue()
				{
					return (ims.core.vo.MemberOfStaffLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.MemberOfStaffLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbEmergencyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.SupportNetworkEmergencyContact value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.SupportNetworkEmergencyContact value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.SupportNetworkEmergencyContact value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.SupportNetworkEmergencyContact value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.SupportNetworkEmergencyContact value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.SupportNetworkEmergencyContact getValue()
				{
					return (ims.core.vo.lookups.SupportNetworkEmergencyContact)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.SupportNetworkEmergencyContact value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbRelationshipComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.SupportNetworkRelationship value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.SupportNetworkRelationship value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.SupportNetworkRelationship value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.SupportNetworkRelationship value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.SupportNetworkRelationship value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.SupportNetworkRelationship getValue()
				{
					return (ims.core.vo.lookups.SupportNetworkRelationship)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.SupportNetworkRelationship value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdFamilyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdFamilyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColNameOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColName(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColName()
				{
					return (String)super.row.get(0);
				}
				public void setColName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColRelationshipReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColRelationshipReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColRelationshipOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColRelationship(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColRelationship()
				{
					return (String)super.row.get(1);
				}
				public void setColRelationship(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColRelationshipTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColPhoneReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColPhoneReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColPhoneOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColPhone(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColPhone()
				{
					return (String)super.row.get(2);
				}
				public void setColPhone(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColPhoneTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColMobileReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColMobileReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColMobileOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColMobile(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColMobile()
				{
					return (String)super.row.get(3);
				}
				public void setColMobile(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColMobileTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColStatusReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColStatusOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColStatus(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColStatus()
				{
					return (String)super.row.get(4);
				}
				public void setColStatus(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColStatusTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolActiveReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolActiveReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolActiveOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForcolActive(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.framework.utils.Image getcolActive()
				{
					return (ims.framework.utils.Image)super.row.get(5);
				}
				public void setcolActive(ims.framework.utils.Image value)
				{
					super.row.set(5, value);
				}
				public void setCellcolActiveTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.core.vo.SupportNetworkFamily getValue()
				{
					return (ims.core.vo.SupportNetworkFamily)super.row.getValue();
				}
				public void setValue(ims.core.vo.SupportNetworkFamily value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdFamilyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdFamilyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdFamilyRow get(int index)
				{
					return new grdFamilyRow(super.collection.get(index));
				}
				public grdFamilyRow newRow()
				{
					return new grdFamilyRow(super.collection.newRow());
				}
				public grdFamilyRow newRow(boolean autoSelect)
				{
					return new grdFamilyRow(super.collection.newRow(autoSelect));
				}
				public grdFamilyRow newRowAt(int index)
				{
					return new grdFamilyRow(super.collection.newRowAt(index));
				}
				public grdFamilyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdFamilyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdFamilyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.core.vo.SupportNetworkFamily[] getValues()
				{
					ims.core.vo.SupportNetworkFamily[] listOfValues = new ims.core.vo.SupportNetworkFamily[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.core.vo.SupportNetworkFamily getValue()
				{
					return (ims.core.vo.SupportNetworkFamily)super.grid.getValue();
				}
				public void setValue(ims.core.vo.SupportNetworkFamily value)
				{
					super.grid.setValue(value);
				}
				public grdFamilyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdFamilyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdFamilyRowCollection getRows()
				{
					return new grdFamilyRowCollection(super.grid.getRows());
				}
				public grdFamilyRow getRowByValue(ims.core.vo.SupportNetworkFamily value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdFamilyRow(row);
				}
				public void setColNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColRelationshipHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColRelationshipHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColPhoneHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColPhoneHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColMobileHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColMobileHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolActiveHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolActiveHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
		
			public static class groupFamilyFilterRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 96, 8, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper60.getX(), anchoringHelper60.getY(), anchoringHelper60.getWidth(), "View All", startTabIndex.intValue() + 2054);
					RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper61.getX(), anchoringHelper61.getY(), anchoringHelper61.getWidth(), "View Active", startTabIndex.intValue() + 2052);
				}
				public void setText(groupFamilyFilterEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public groupFamilyFilterEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return groupFamilyFilterEnumeration.None;
						case 0: return groupFamilyFilterEnumeration.rdoAllFamily;
						case 1: return groupFamilyFilterEnumeration.rdoActiveFamily;
					}
					return null;
				}
				public void setValue(groupFamilyFilterEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(groupFamilyFilterEnumeration.None.id);
				}
				public boolean isEnabled(groupFamilyFilterEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(groupFamilyFilterEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(groupFamilyFilterEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(groupFamilyFilterEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class groupFamilyFilterEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static groupFamilyFilterEnumeration None = new groupFamilyFilterEnumeration(-1);
				public static groupFamilyFilterEnumeration rdoAllFamily = new groupFamilyFilterEnumeration(0);
				public static groupFamilyFilterEnumeration rdoActiveFamily = new groupFamilyFilterEnumeration(1);
				private groupFamilyFilterEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((groupFamilyFilterEnumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 2, 144, 658, 352, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Family Details", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 2, 408, 657, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ims.framework.FormUiLogic m_customControlAuthFamilyForm = loader.loadComponent(102228, appForm, startControlID * 10 + 3000, anchoringHelper63.getSize(), instance1, startTabIndex.intValue() + 2075, skipContextValidation);
				//ims.framework.Control m_customControlAuthFamilyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(2), new Integer(408), new Integer(657), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 2075), m_customControlAuthFamilyForm, instance1 } );
				ims.framework.Control m_customControlAuthFamilyControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1061),  new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 2075), m_customControlAuthFamilyForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlAuthFamilyControl);
				Menu[] menus1 = m_customControlAuthFamilyForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 10, 320, 52, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Contact:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 10, 388, 131, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Recording Date/Time:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 10, 364, 95, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Recording User:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 266, 260, 80, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Home Phone:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 266, 286, 85, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Mobile Phone:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 266, 312, 78, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Work Phone:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 266, 337, 93, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "E-mail Address:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 10, 308, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Emergency", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 10, 170, 41, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Name:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 10, 202, 79, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Relationship:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 266, 168, 54, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Address:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 88, 133, 0, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 90, 464, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 3077), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 10, 464, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 3076), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 186, 464, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), new Integer(startTabIndex.intValue() + 3079), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Copy Patient Address", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 354, 463, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), new Integer(startTabIndex.intValue() + 3080), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Reactivate", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 354, 464, 84, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 3081), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Inactivate", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 492, 464, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 3082), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 571, 464, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 3083), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 356, 335, 286, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 2072), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 356, 310, 286, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 2071), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 356, 258, 286, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 2069), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 356, 284, 286, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 2070), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.FALSE, new Integer(30), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 100, 168, 150, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 2058), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(60), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 356, 168, 286, 85, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 2068), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(120), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 138, 386, 504, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 2074), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 138, 362, 504, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				ComboBox m_cmbRecordingHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 2073), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRecordingHCPTemp);
				cmbRecordingHCPComboBox cmbRecordingHCP = (cmbRecordingHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRecordingHCPComboBox.class, m_cmbRecordingHCPTemp);
				super.addComboBox(cmbRecordingHCP);
				RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 100, 310, 150, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbEmergencyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 2066), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbEmergencyTemp);
				cmbEmergencyComboBox cmbEmergency = (cmbEmergencyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbEmergencyComboBox.class, m_cmbEmergencyTemp);
				super.addComboBox(cmbEmergency);
				RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 100, 200, 150, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbRelationshipTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 2060), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbRelationshipTemp);
				cmbRelationshipComboBox cmbRelationship = (cmbRelationshipComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRelationshipComboBox.class, m_cmbRelationshipTemp);
				super.addComboBox(cmbRelationship);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 10, 337, 240, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 2067), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Permission given to discuss issues with them ? ", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 10, 233, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 2062), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Fit and Well ?", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 10, 260, 164, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 2064), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Aware of client's position ?", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 10, 286, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 2065), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Main Carer", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 2, 24, 658, 120, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdFamilyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 2056), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuSupportNetworkFamilyGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdFamilyTemp);
				grdFamilyGrid grdFamily = (grdFamilyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFamilyGrid.class, m_grdFamilyTemp);
				grdFamily.addStringColumn("Name", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFamily.setColNameHeaderTooltip("Name");
				grdFamily.addStringColumn("Relationship", 0, 0, 100, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFamily.setColRelationshipHeaderTooltip("Relationship");
				grdFamily.addStringColumn("Home Phone", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFamily.setColPhoneHeaderTooltip("Home Phone");
				grdFamily.addStringColumn("Mobile Phone", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFamily.setColMobileHeaderTooltip("Mobile Phone");
				grdFamily.addStringColumn("Emergency Contact", 0, 0, 130, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFamily.setColStatusHeaderTooltip("Emergency Contact");
				grdFamily.addImageColumn(" Status", 1, 1, -1, true, 0);
				grdFamily.setcolActiveHeaderTooltip("Status");
				super.addGrid(grdFamily);
		
				// RadioButton Controls
				RadioButton tmpgroupFamilyFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpgroupFamilyFilter);
				groupFamilyFilterRadioButton groupFamilyFilter = (groupFamilyFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(groupFamilyFilterRadioButton.class, tmpgroupFamilyFilter);
				groupFamilyFilter.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(groupFamilyFilter);
			}

			public ims.core.forms.authoringinfo.IComponent customControlAuthFamily()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setcustomControlAuthFamilyValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setcustomControlAuthFamilyVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean iscustomControlAuthFamilyVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setcustomControlAuthFamilyEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean iscustomControlAuthFamilyEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Label lblEmail()
			{
				return (Label)super.getControl(8);
			}
			public Label lbl31()
			{
				return (Label)super.getControl(13);
			}
			public Button btnFamEdit()
			{
				return (Button)super.getControl(14);
			}
			public Button btnFamNew()
			{
				return (Button)super.getControl(15);
			}
			public Button btnCopyPA()
			{
				return (Button)super.getControl(16);
			}
			public Button btnReactivate()
			{
				return (Button)super.getControl(17);
			}
			public Button btnInactive()
			{
				return (Button)super.getControl(18);
			}
			public Button btnSaveFamily()
			{
				return (Button)super.getControl(19);
			}
			public Button btnCancelFamily()
			{
				return (Button)super.getControl(20);
			}
			public TextBox txtEmailAddress()
			{
				return (TextBox)super.getControl(21);
			}
			public TextBox txtWorkPhone()
			{
				return (TextBox)super.getControl(22);
			}
			public TextBox txtHomePhone()
			{
				return (TextBox)super.getControl(23);
			}
			public TextBox txtMobilrPhone()
			{
				return (TextBox)super.getControl(24);
			}
			public TextBox txtName()
			{
				return (TextBox)super.getControl(25);
			}
			public TextBox txtFamilyAddress()
			{
				return (TextBox)super.getControl(26);
			}
			public DateTimeControl dtimRecordingDateTime()
			{
				return (DateTimeControl)super.getControl(27);
			}
			public cmbRecordingHCPComboBox cmbRecordingHCP()
			{
				return (cmbRecordingHCPComboBox)super.getComboBox(0);
			}
			public cmbEmergencyComboBox cmbEmergency()
			{
				return (cmbEmergencyComboBox)super.getComboBox(1);
			}
			public cmbRelationshipComboBox cmbRelationship()
			{
				return (cmbRelationshipComboBox)super.getComboBox(2);
			}
			public CheckBox chkPermission()
			{
				return (CheckBox)super.getControl(31);
			}
			public CheckBox chkFit()
			{
				return (CheckBox)super.getControl(32);
			}
			public CheckBox chkAware()
			{
				return (CheckBox)super.getControl(33);
			}
			public CheckBox chkCarer()
			{
				return (CheckBox)super.getControl(34);
			}
			public grdFamilyGrid grdFamily()
			{
				return (grdFamilyGrid)super.getGrid(0);
			}
			public groupFamilyFilterRadioButton groupFamilyFilter()
			{
				return (groupFamilyFilterRadioButton)super.getRadioButton(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 672, 542, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageProf = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Professional", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageProfContainer m_tabPageProfContainer = (tabPageProfContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageProfContainer.class, m_tabPageProf, factory);
			super.addContainer(m_tabPageProf, m_tabPageProfContainer);
			ims.framework.utils.SizeInfo m_tabPageProfDesignSize = new ims.framework.utils.SizeInfo(672, 542);
			ims.framework.utils.SizeInfo m_tabPageProfRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper98.getWidth(), anchoringHelper98.getHeight());
			m_tabPageProfContainer.setContext(form, appForm, m_tabPageProf, loader, form_images_local, contextMenus, startControlID, m_tabPageProfDesignSize, m_tabPageProfRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 672, 542, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageServices = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Services", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageServicesContainer m_tabPageServicesContainer = (tabPageServicesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageServicesContainer.class, m_tabPageServices, factory);
			super.addContainer(m_tabPageServices, m_tabPageServicesContainer);
			ims.framework.utils.SizeInfo m_tabPageServicesDesignSize = new ims.framework.utils.SizeInfo(672, 542);
			ims.framework.utils.SizeInfo m_tabPageServicesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper99.getWidth(), anchoringHelper99.getHeight());
			m_tabPageServicesContainer.setContext(form, appForm, m_tabPageServices, loader, form_images_local, contextMenus, startControlID, m_tabPageServicesDesignSize, m_tabPageServicesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 672, 542, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPageFamily = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Family", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPageFamilyContainer m_tabPageFamilyContainer = (tabPageFamilyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPageFamilyContainer.class, m_tabPageFamily, factory);
			super.addContainer(m_tabPageFamily, m_tabPageFamilyContainer);
			ims.framework.utils.SizeInfo m_tabPageFamilyDesignSize = new ims.framework.utils.SizeInfo(672, 542);
			ims.framework.utils.SizeInfo m_tabPageFamilyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper100.getWidth(), anchoringHelper100.getHeight());
			m_tabPageFamilyContainer.setContext(form, appForm, m_tabPageFamily, loader, form_images_local, contextMenus, startControlID, m_tabPageFamilyDesignSize, m_tabPageFamilyRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabPageProf().setVisible(false);
			tabPageServices().setVisible(false);
			tabPageFamily().setVisible(false);
		}
		public void settabPageProfEnabled(boolean value)
		{
			tabPageProf().setEnabled(value);
		}
		public void settabPageServicesEnabled(boolean value)
		{
			tabPageServices().setEnabled(value);
		}
		public void settabPageFamilyEnabled(boolean value)
		{
			tabPageFamily().setEnabled(value);
		}
		public void showtabPageProf()
		{
			tabPageServices().setVisible(false);
			tabPageFamily().setVisible(false);
			tabPageProf().setVisible(true);
		}
		public void showtabPageServices()
		{
			tabPageProf().setVisible(false);
			tabPageFamily().setVisible(false);
			tabPageServices().setVisible(true);
		}
		public void showtabPageFamily()
		{
			tabPageProf().setVisible(false);
			tabPageServices().setVisible(false);
			tabPageFamily().setVisible(true);
		}

		public tabPageProfContainer tabPageProf()
		{
			return (tabPageProfContainer)super.layers.get(0);
		}
		public tabPageServicesContainer tabPageServices()
		{
			return (tabPageServicesContainer)super.layers.get(1);
		}
		public tabPageFamilyContainer tabPageFamily()
		{
			return (tabPageFamilyContainer)super.layers.get(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(672, 528);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuSupportNetworkFamilyGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuSupportNetworkFamilyGridNewItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuSupportNetworkFamilyGrid.add(contextMenus.contextMenuSupportNetworkFamilyGridNewItem);
		contextMenus.contextMenuSupportNetworkFamilyGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuSupportNetworkFamilyGrid.add(contextMenus.contextMenuSupportNetworkFamilyGridUpdateItem);
		contextMenus.contextMenuSupportNetworkFamilyGridNewFromNextofkinItem = factory.createMenuItem(startControlID.intValue() + 3, "New - From Next of kin", true, false, new Integer(102273), true, false);
		contextMenus.contextMenuSupportNetworkFamilyGrid.add(contextMenus.contextMenuSupportNetworkFamilyGridNewFromNextofkinItem);
		contextMenus.contextMenuSupportNetworkFamilyGridCOPY_ALL_PREVIOUS_FAMILYItem = factory.createMenuItem(startControlID.intValue() + 4, "Copy All Previous Support Sevices", true, false, new Integer(102334), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1490001)))
			contextMenus.contextMenuSupportNetworkFamilyGrid.add(contextMenus.contextMenuSupportNetworkFamilyGridCOPY_ALL_PREVIOUS_FAMILYItem);
		form.registerMenu(contextMenus.contextMenuSupportNetworkFamilyGrid);
		contextMenus.Emergency.contextMenuSupportNetworkProfessional = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Emergency.contextMenuSupportNetworkProfessionalADDItem = factory.createMenuItem(startControlID.intValue() + 5, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4670001)))
			contextMenus.Emergency.contextMenuSupportNetworkProfessional.add(contextMenus.Emergency.contextMenuSupportNetworkProfessionalADDItem);
		contextMenus.Emergency.contextMenuSupportNetworkProfessionalEDITItem = factory.createMenuItem(startControlID.intValue() + 6, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4670002)))
			contextMenus.Emergency.contextMenuSupportNetworkProfessional.add(contextMenus.Emergency.contextMenuSupportNetworkProfessionalEDITItem);
		contextMenus.Emergency.contextMenuSupportNetworkProfessionalCOPY_ALL_PREVIOUS_PROFItem = factory.createMenuItem(startControlID.intValue() + 7, "Copy All Previous Support Sevices", true, false, new Integer(102334), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4670003)))
			contextMenus.Emergency.contextMenuSupportNetworkProfessional.add(contextMenus.Emergency.contextMenuSupportNetworkProfessionalCOPY_ALL_PREVIOUS_PROFItem);
		form.registerMenu(contextMenus.Emergency.contextMenuSupportNetworkProfessional);
		contextMenus.Emergency.contextMenuSupportNetworkServices = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.Emergency.contextMenuSupportNetworkServicesADDItem = factory.createMenuItem(startControlID.intValue() + 8, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4680001)))
			contextMenus.Emergency.contextMenuSupportNetworkServices.add(contextMenus.Emergency.contextMenuSupportNetworkServicesADDItem);
		contextMenus.Emergency.contextMenuSupportNetworkServicesEDITItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4680002)))
			contextMenus.Emergency.contextMenuSupportNetworkServices.add(contextMenus.Emergency.contextMenuSupportNetworkServicesEDITItem);
		contextMenus.Emergency.contextMenuSupportNetworkServicesCOPY_ALL_PREVIOUS_SERVItem = factory.createMenuItem(startControlID.intValue() + 10, "Copy All Previous Support Sevices", true, false, new Integer(102334), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4680003)))
			contextMenus.Emergency.contextMenuSupportNetworkServices.add(contextMenus.Emergency.contextMenuSupportNetworkServicesCOPY_ALL_PREVIOUS_SERVItem);
		form.registerMenu(contextMenus.Emergency.contextMenuSupportNetworkServices);


		// Layer Clasess
		lyrSupportServicesLayer m_lyrSupportServicesLayer = (lyrSupportServicesLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSupportServicesLayer.class, this, factory);
		super.addLayer(m_lyrSupportServicesLayer);
		m_lyrSupportServicesLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrSupportServicesLayer lyrSupportServices()
	{
		return (lyrSupportServicesLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				YesNoDialog = new LocalFormName(102107);
			}
			public final FormName YesNoDialog;
		}

		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(16), new Integer(16));
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image AnswerBox_No;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedFamilyRecord = new ims.framework.ContextVariable("SelectedFamilyRecord", prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier + "");
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_NextOfKin = new ims.framework.ContextVariable("NextOfKin", prefix + "_lv_Emergency.SupportServices.__internal_x_context__NextOfKin_" + componentIdentifier + "");
			cxl_CareContextRef = new ims.framework.ContextVariable("CareContextRef", prefix + "_lv_Emergency.SupportServices.__internal_x_context__CareContextRef_" + componentIdentifier + "");
			cxl_EpisodeOfCareRef = new ims.framework.ContextVariable("EpisodeOfCareRef", prefix + "_lv_Emergency.SupportServices.__internal_x_context__EpisodeOfCareRef_" + componentIdentifier + "");
			cxl_PatientRef = new ims.framework.ContextVariable("PatientRef", prefix + "_lv_Emergency.SupportServices.__internal_x_context__PatientRef_" + componentIdentifier + "");
			cxl_SelectedSupportNetworkService = new ims.framework.ContextVariable("SelectedSupportNetworkService", prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkService_" + componentIdentifier + "");
			cxl_SelectedSupportNetworkProfessional = new ims.framework.ContextVariable("SelectedSupportNetworkProfessional", prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkProfessional_" + componentIdentifier + "");
			cxl_PatientNoSupportNetworkServicesInfo = new ims.framework.ContextVariable("PatientNoSupportNetworkServicesInfo", prefix + "_lv_Emergency.SupportServices.__internal_x_context__PatientNoSupportNetworkServicesInfo_" + componentIdentifier + "");
			cxl_PatientNoSupportNetworkStatusInfo = new ims.framework.ContextVariable("PatientNoSupportNetworkStatusInfo", prefix + "_lv_Emergency.SupportServices.__internal_x_context__PatientNoSupportNetworkStatusInfo_" + componentIdentifier + "");
			cxl_ActiveProfessionals = new ims.framework.ContextVariable("ActiveProfessionals", prefix + "_lv_Emergency.SupportServices.__internal_x_context__ActiveProfessionals_" + componentIdentifier + "");
			cxl_ActiveSupports = new ims.framework.ContextVariable("ActiveSupports", prefix + "_lv_Emergency.SupportServices.__internal_x_context__ActiveSupports_" + componentIdentifier + "");
			cxl_voMemberOfStaffShort = new ims.framework.ContextVariable("voMemberOfStaffShort", prefix + "_lv_Emergency.SupportServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier + "");
			cxl_PreviousSupportServiceRecordExists = new ims.framework.ContextVariable("PreviousSupportServiceRecordExists", prefix + "_lv_Emergency.SupportServices.__internal_x_context__PreviousSupportServiceRecordExists_" + componentIdentifier + "");
			cxl_isEnabled = new ims.framework.ContextVariable("isEnabled", prefix + "_lv_Emergency.SupportServices.__internal_x_context__isEnabled_" + componentIdentifier + "");
			cxl_SelectedEvent = new ims.framework.ContextVariable("SelectedEvent", prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedEvent_" + componentIdentifier + "");
		}
		
		public boolean getSelectedFamilyRecordIsNotNull()
		{
			return !cxl_SelectedFamilyRecord.getValueIsNull(context);
		}
		public ims.core.vo.SupportNetworkFamily getSelectedFamilyRecord()
		{
			return (ims.core.vo.SupportNetworkFamily)cxl_SelectedFamilyRecord.getValue(context);
		}
		public void setSelectedFamilyRecord(ims.core.vo.SupportNetworkFamily value)
		{
			cxl_SelectedFamilyRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedFamilyRecord = null;
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.emergency.vo.DischargeServicesAndAdviceVo getSelectedRecord()
		{
			return (ims.emergency.vo.DischargeServicesAndAdviceVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.emergency.vo.DischargeServicesAndAdviceVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getNextOfKinIsNotNull()
		{
			return !cxl_NextOfKin.getValueIsNull(context);
		}
		public ims.core.vo.NextOfKin getNextOfKin()
		{
			return (ims.core.vo.NextOfKin)cxl_NextOfKin.getValue(context);
		}
		public void setNextOfKin(ims.core.vo.NextOfKin value)
		{
			cxl_NextOfKin.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_NextOfKin = null;
		public boolean getCareContextRefIsNotNull()
		{
			return !cxl_CareContextRef.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getCareContextRef()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_CareContextRef.getValue(context);
		}
		public void setCareContextRef(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CareContextRef' RefVo context variable.");
			if(value == null)
				cxl_CareContextRef.setValue(context, null);
			else
				cxl_CareContextRef.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CareContextRef = null;
		public boolean getEpisodeOfCareRefIsNotNull()
		{
			return !cxl_EpisodeOfCareRef.getValueIsNull(context);
		}
		public ims.core.admin.vo.EpisodeOfCareRefVo getEpisodeOfCareRef()
		{
			return (ims.core.admin.vo.EpisodeOfCareRefVo)cxl_EpisodeOfCareRef.getValue(context);
		}
		public void setEpisodeOfCareRef(ims.core.admin.vo.EpisodeOfCareRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'EpisodeOfCareRef' RefVo context variable.");
			if(value == null)
				cxl_EpisodeOfCareRef.setValue(context, null);
			else
				cxl_EpisodeOfCareRef.setValue(context, new ims.core.admin.vo.EpisodeOfCareRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_EpisodeOfCareRef = null;
		public boolean getPatientRefIsNotNull()
		{
			return !cxl_PatientRef.getValueIsNull(context);
		}
		public ims.core.patient.vo.PatientRefVo getPatientRef()
		{
			return (ims.core.patient.vo.PatientRefVo)cxl_PatientRef.getValue(context);
		}
		public void setPatientRef(ims.core.patient.vo.PatientRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'PatientRef' RefVo context variable.");
			if(value == null)
				cxl_PatientRef.setValue(context, null);
			else
				cxl_PatientRef.setValue(context, new ims.core.patient.vo.PatientRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_PatientRef = null;
		public boolean getSelectedSupportNetworkServiceIsNotNull()
		{
			return !cxl_SelectedSupportNetworkService.getValueIsNull(context);
		}
		public ims.core.vo.SupportNetworkServicesVo getSelectedSupportNetworkService()
		{
			return (ims.core.vo.SupportNetworkServicesVo)cxl_SelectedSupportNetworkService.getValue(context);
		}
		public void setSelectedSupportNetworkService(ims.core.vo.SupportNetworkServicesVo value)
		{
			cxl_SelectedSupportNetworkService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSupportNetworkService = null;
		public boolean getSelectedSupportNetworkProfessionalIsNotNull()
		{
			return !cxl_SelectedSupportNetworkProfessional.getValueIsNull(context);
		}
		public ims.core.vo.SupportNetworkProfessionalVo getSelectedSupportNetworkProfessional()
		{
			return (ims.core.vo.SupportNetworkProfessionalVo)cxl_SelectedSupportNetworkProfessional.getValue(context);
		}
		public void setSelectedSupportNetworkProfessional(ims.core.vo.SupportNetworkProfessionalVo value)
		{
			cxl_SelectedSupportNetworkProfessional.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSupportNetworkProfessional = null;
		public boolean getPatientNoSupportNetworkServicesInfoIsNotNull()
		{
			return !cxl_PatientNoSupportNetworkServicesInfo.getValueIsNull(context);
		}
		public ims.core.vo.PatientNoSupportNetworkServicesInfoVo getPatientNoSupportNetworkServicesInfo()
		{
			return (ims.core.vo.PatientNoSupportNetworkServicesInfoVo)cxl_PatientNoSupportNetworkServicesInfo.getValue(context);
		}
		public void setPatientNoSupportNetworkServicesInfo(ims.core.vo.PatientNoSupportNetworkServicesInfoVo value)
		{
			cxl_PatientNoSupportNetworkServicesInfo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientNoSupportNetworkServicesInfo = null;
		public boolean getPatientNoSupportNetworkStatusInfoIsNotNull()
		{
			return !cxl_PatientNoSupportNetworkStatusInfo.getValueIsNull(context);
		}
		public ims.core.vo.PatientNoSupportNetworkStatusInfoVo getPatientNoSupportNetworkStatusInfo()
		{
			return (ims.core.vo.PatientNoSupportNetworkStatusInfoVo)cxl_PatientNoSupportNetworkStatusInfo.getValue(context);
		}
		public void setPatientNoSupportNetworkStatusInfo(ims.core.vo.PatientNoSupportNetworkStatusInfoVo value)
		{
			cxl_PatientNoSupportNetworkStatusInfo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientNoSupportNetworkStatusInfo = null;
		public boolean getActiveProfessionalsIsNotNull()
		{
			return !cxl_ActiveProfessionals.getValueIsNull(context);
		}
		public Boolean getActiveProfessionals()
		{
			return (Boolean)cxl_ActiveProfessionals.getValue(context);
		}
		public void setActiveProfessionals(Boolean value)
		{
			cxl_ActiveProfessionals.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActiveProfessionals = null;
		public boolean getActiveSupportsIsNotNull()
		{
			return !cxl_ActiveSupports.getValueIsNull(context);
		}
		public Boolean getActiveSupports()
		{
			return (Boolean)cxl_ActiveSupports.getValue(context);
		}
		public void setActiveSupports(Boolean value)
		{
			cxl_ActiveSupports.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActiveSupports = null;
		public boolean getvoMemberOfStaffShortIsNotNull()
		{
			return !cxl_voMemberOfStaffShort.getValueIsNull(context);
		}
		public ims.core.vo.MemberOfStaffShortVo getvoMemberOfStaffShort()
		{
			return (ims.core.vo.MemberOfStaffShortVo)cxl_voMemberOfStaffShort.getValue(context);
		}
		public void setvoMemberOfStaffShort(ims.core.vo.MemberOfStaffShortVo value)
		{
			cxl_voMemberOfStaffShort.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voMemberOfStaffShort = null;
		public boolean getPreviousSupportServiceRecordExistsIsNotNull()
		{
			return !cxl_PreviousSupportServiceRecordExists.getValueIsNull(context);
		}
		public Boolean getPreviousSupportServiceRecordExists()
		{
			return (Boolean)cxl_PreviousSupportServiceRecordExists.getValue(context);
		}
		public void setPreviousSupportServiceRecordExists(Boolean value)
		{
			cxl_PreviousSupportServiceRecordExists.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousSupportServiceRecordExists = null;
		public boolean getisEnabledIsNotNull()
		{
			return !cxl_isEnabled.getValueIsNull(context);
		}
		public Boolean getisEnabled()
		{
			return (Boolean)cxl_isEnabled.getValue(context);
		}
		public void setisEnabled(Boolean value)
		{
			cxl_isEnabled.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isEnabled = null;
		public boolean getSelectedEventIsNotNull()
		{
			return !cxl_SelectedEvent.getValueIsNull(context);
		}
		public ims.emergency.vo.enums.EdAssessment_CustomControlsEvents getSelectedEvent()
		{
			return (ims.emergency.vo.enums.EdAssessment_CustomControlsEvents)cxl_SelectedEvent.getValue(context);
		}
		public void setSelectedEvent(ims.emergency.vo.enums.EdAssessment_CustomControlsEvents value)
		{
			cxl_SelectedEvent.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedEvent = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public EmergencyNamespace Emergency = new EmergencyNamespace();
		public final class SupportNetworkFamilyGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int New = 1;
			public static final int Update = 2;
			public static final int NewFromNextofkin = 3;
			public static final int COPY_ALL_PREVIOUS_FAMILY = 4;
		}
		public void disableAllSupportNetworkFamilyGridMenuItems()
		{
			this.contextMenuSupportNetworkFamilyGridNewItem.setEnabled(false);
			this.contextMenuSupportNetworkFamilyGridUpdateItem.setEnabled(false);
			this.contextMenuSupportNetworkFamilyGridNewFromNextofkinItem.setEnabled(false);
			this.contextMenuSupportNetworkFamilyGridCOPY_ALL_PREVIOUS_FAMILYItem.setEnabled(false);
		}
		public void hideAllSupportNetworkFamilyGridMenuItems()
		{
			this.contextMenuSupportNetworkFamilyGridNewItem.setVisible(false);
			this.contextMenuSupportNetworkFamilyGridUpdateItem.setVisible(false);
			this.contextMenuSupportNetworkFamilyGridNewFromNextofkinItem.setVisible(false);
			this.contextMenuSupportNetworkFamilyGridCOPY_ALL_PREVIOUS_FAMILYItem.setVisible(false);
		}
		private Menu contextMenuSupportNetworkFamilyGrid;
		public MenuItem getSupportNetworkFamilyGridNewItem()
		{
			return this.contextMenuSupportNetworkFamilyGridNewItem;
		}
		private MenuItem contextMenuSupportNetworkFamilyGridNewItem;
		public MenuItem getSupportNetworkFamilyGridUpdateItem()
		{
			return this.contextMenuSupportNetworkFamilyGridUpdateItem;
		}
		private MenuItem contextMenuSupportNetworkFamilyGridUpdateItem;
		public MenuItem getSupportNetworkFamilyGridNewFromNextofkinItem()
		{
			return this.contextMenuSupportNetworkFamilyGridNewFromNextofkinItem;
		}
		private MenuItem contextMenuSupportNetworkFamilyGridNewFromNextofkinItem;
		public ReadOnlyMenuItem getSupportNetworkFamilyGridCOPY_ALL_PREVIOUS_FAMILYItem()
		{
			return this.contextMenuSupportNetworkFamilyGridCOPY_ALL_PREVIOUS_FAMILYItem;
		}
		private MenuItem contextMenuSupportNetworkFamilyGridCOPY_ALL_PREVIOUS_FAMILYItem;
		public final class EmergencyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class SupportNetworkProfessional implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 5;
				public static final int EDIT = 6;
				public static final int COPY_ALL_PREVIOUS_PROF = 7;
			}
			public void disableAllSupportNetworkProfessionalMenuItems()
			{
				this.contextMenuSupportNetworkProfessionalADDItem.setEnabled(false);
				this.contextMenuSupportNetworkProfessionalEDITItem.setEnabled(false);
				this.contextMenuSupportNetworkProfessionalCOPY_ALL_PREVIOUS_PROFItem.setEnabled(false);
			}
			public void hideAllSupportNetworkProfessionalMenuItems()
			{
				this.contextMenuSupportNetworkProfessionalADDItem.setVisible(false);
				this.contextMenuSupportNetworkProfessionalEDITItem.setVisible(false);
				this.contextMenuSupportNetworkProfessionalCOPY_ALL_PREVIOUS_PROFItem.setVisible(false);
			}
			private Menu contextMenuSupportNetworkProfessional;
			public ReadOnlyMenuItem getSupportNetworkProfessionalADDItem()
			{
				return this.contextMenuSupportNetworkProfessionalADDItem;
			}
			private MenuItem contextMenuSupportNetworkProfessionalADDItem;
			public ReadOnlyMenuItem getSupportNetworkProfessionalEDITItem()
			{
				return this.contextMenuSupportNetworkProfessionalEDITItem;
			}
			private MenuItem contextMenuSupportNetworkProfessionalEDITItem;
			public ReadOnlyMenuItem getSupportNetworkProfessionalCOPY_ALL_PREVIOUS_PROFItem()
			{
				return this.contextMenuSupportNetworkProfessionalCOPY_ALL_PREVIOUS_PROFItem;
			}
			private MenuItem contextMenuSupportNetworkProfessionalCOPY_ALL_PREVIOUS_PROFItem;
			public final class SupportNetworkServices implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 8;
				public static final int EDIT = 9;
				public static final int COPY_ALL_PREVIOUS_SERV = 10;
			}
			public void disableAllSupportNetworkServicesMenuItems()
			{
				this.contextMenuSupportNetworkServicesADDItem.setEnabled(false);
				this.contextMenuSupportNetworkServicesEDITItem.setEnabled(false);
				this.contextMenuSupportNetworkServicesCOPY_ALL_PREVIOUS_SERVItem.setEnabled(false);
			}
			public void hideAllSupportNetworkServicesMenuItems()
			{
				this.contextMenuSupportNetworkServicesADDItem.setVisible(false);
				this.contextMenuSupportNetworkServicesEDITItem.setVisible(false);
				this.contextMenuSupportNetworkServicesCOPY_ALL_PREVIOUS_SERVItem.setVisible(false);
			}
			private Menu contextMenuSupportNetworkServices;
			public ReadOnlyMenuItem getSupportNetworkServicesADDItem()
			{
				return this.contextMenuSupportNetworkServicesADDItem;
			}
			private MenuItem contextMenuSupportNetworkServicesADDItem;
			public ReadOnlyMenuItem getSupportNetworkServicesEDITItem()
			{
				return this.contextMenuSupportNetworkServicesEDITItem;
			}
			private MenuItem contextMenuSupportNetworkServicesEDITItem;
			public ReadOnlyMenuItem getSupportNetworkServicesCOPY_ALL_PREVIOUS_SERVItem()
			{
				return this.contextMenuSupportNetworkServicesCOPY_ALL_PREVIOUS_SERVItem;
			}
			private MenuItem contextMenuSupportNetworkServicesCOPY_ALL_PREVIOUS_SERVItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[133];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-ID", "ID_Location");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-TYPE", "Type");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_COE.SupportNetworkSelectedLocation", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-ID", "ID_SupportNetworkFamily");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-CARERNAME", "CarerName");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-CARERRELATIONSHIP", "CarerRelationship");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-CARERADDRESS", "CarerAddress");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-CARERHOMEPHONE", "CarerHomePhone");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-CARERMOBILEPHONE", "CarerMobilePhone");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-CARERWORKPHONE", "CarerWorkPhone");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-CAREREMAIL", "CarerEmail");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-ISMAINCARER", "IsMainCarer");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-EMERGENCYCONTACTORDER", "EmergencyContactOrder");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-ISCURRENTLYACTIVEFAMILYSUPPORT", "IsCurrentlyActiveFamilySupport");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-DISCUSSPROGRESS", "DiscussProgress");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-PATIENT", "Patient");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-FITANDWELL", "FitAndWell");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-AWARECLIENTPOSITION", "AwareClientPosition");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-PERMISSIONTOCONTACT", "PermissionToContact");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedFamilyRecord_" + componentIdentifier, "BO-1003100005-INACTIVATINGDATETIME", "InactivatingDateTime");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1086100026-ID", "ID_DischargeServicesAndAdvice");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1086100026-PATIENT", "Patient");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1086100026-EPISODE", "Episode");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1086100026-ATTENDANCE", "Attendance");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1086100026-TRANSPORTARRANGEDTYPE", "TransportArrangedType");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1086100026-TRANSPORTDATETIME", "TransportDateTime");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1086100026-COMMENTS", "Comments");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1086100026-BOOKINGNO", "BookingNo");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__NextOfKin_" + componentIdentifier, "BO-1001100002-ID", "ID_Relative");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__NextOfKin_" + componentIdentifier, "BO-1001100002-RELATIONSHIP", "Relationship");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__NextOfKin_" + componentIdentifier, "BO-1001100001-TEMPFIELD", "TempField");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__CareContextRef_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__EpisodeOfCareRef_" + componentIdentifier, "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__PatientRef_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkService_" + componentIdentifier, "BO-1003100011-ID", "ID_SupportNetworkServices");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkService_" + componentIdentifier, "BO-1003100011-FREQUENCYOFSERVICE", "FrequencyOfService");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkService_" + componentIdentifier, "BO-1003100011-COMMENTS", "Comments");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkService_" + componentIdentifier, "BO-1003100011-ISCURRENTLYACTIVE", "IsCurrentlyActive");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkProfessional_" + componentIdentifier, "BO-1003100006-ID", "ID_SupportNetworkProfessional");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkProfessional_" + componentIdentifier, "BO-1003100006-ISCURRACTIVEPROFSUPP", "IsCurrActiveProfSupp");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkProfessional_" + componentIdentifier, "BO-1003100006-ISADMISSIONHCP", "IsAdmissionHCP");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkProfessional_" + componentIdentifier, "BO-1003100006-HCPSUBTYPE", "HcpSubType");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__SelectedSupportNetworkProfessional_" + componentIdentifier, "BO-1003100006-PROFESSION", "Profession");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__PatientNoSupportNetworkServicesInfo_" + componentIdentifier, "BO-1003100087-ID", "ID_PatientNoSupportNetworkServicesInfo");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__PatientNoSupportNetworkServicesInfo_" + componentIdentifier, "BO-1003100087-PATIENT", "Patient");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__PatientNoSupportNetworkServicesInfo_" + componentIdentifier, "BO-1003100087-SUPPORTNETWORKSERVICESTATUS", "SupportNetworkServiceStatus");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__PatientNoSupportNetworkStatusInfo_" + componentIdentifier, "BO-1003100086-ID", "ID_PatientNoSupportNetworkStatusInfo");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__PatientNoSupportNetworkStatusInfo_" + componentIdentifier, "BO-1003100086-PATIENT", "Patient");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__PatientNoSupportNetworkStatusInfo_" + componentIdentifier, "BO-1003100086-SUPPORTNETWORKSTATUS", "SupportNetworkStatus");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-INITIALS", "Initials");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-STAFFTYPE", "StaffType");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-ISACTIVE", "IsActive");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-SDSROLEID", "SdsRoleId");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Emergency.SupportServices.__internal_x_context__voMemberOfStaffShort_" + componentIdentifier, "BO-1006100006-CANREFERPATIENT", "CanReferPatient");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
