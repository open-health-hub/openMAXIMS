//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.allocatecubicle;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.vo.CubicleAllocationShortVo;
import ims.emergency.vo.CubicleAllocationShortVoCollection;
import ims.emergency.vo.CubicleAllocationVo;
import ims.emergency.vo.TrackingAreaCubiclesVo;
import ims.emergency.vo.TrackingAreaLiteVo;
import ims.emergency.vo.TrackingCubicleRoomBedVo;
import ims.emergency.vo.TrackingForAllocateCubicleVo;
import ims.emergency.vo.TrackingLiteVo;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		if( form.getGlobalContext().Emergency.getTracking() != null)
			form.getLocalContext().setCurrentTracking(domain.getTracking(form.getGlobalContext().Emergency.getTracking()));
		//initializeCubiclesRoomsBedsCombo();  //wdev-16011
		open();
		
		//wdev-17430
		if(	form.recbrAllocateCubicle().getValue() == null)
			newInstanceNewClick();		
		else
		{
			if( form.getGlobalContext().Emergency.getTracking() != null)
			{
				TrackingLiteVo tempLiteVo = domain.getTrackingLiteVo(form.getGlobalContext().Emergency.getTracking());
				if( tempLiteVo != null && tempLiteVo.getCurrentAreaIsNotNull() )
				{
					if( !Boolean.TRUE.equals(domain.isAllocateCubicleForCurrentTrackingArea(tempLiteVo.getCurrentArea())))
					{
						newInstanceNewClick();
					}
				}
			}
		}
		//------------
	}
	private void open()
	{
		clear();
		CubicleAllocationShortVoCollection tempColl = domain.listCubicleAllocationShortVo(form.getGlobalContext().Core.getCurrentCareContext());
		populateRecordBrowser(tempColl);
		if(	form.recbrAllocateCubicle().getValue() != null)
			recordBrowserSelectChanged();
				
		form.setMode(FormMode.VIEW);
		
	}
	//wdev-16011
	private void initializeCubiclesRoomsBedsCombo()
	{
		form.cmbCubicle().clear();
		if( form.getLocalContext().getCurrentTrackingIsNotNull())
		{
			TrackingAreaCubiclesVo tempVo = domain.getTrackingAreaCubicles(form.getLocalContext().getCurrentTracking().getCurrentArea());
			if( tempVo != null && tempVo.getCubiclesRoomsBedsIsNotNull())
			{
				for(int i = 0;i < tempVo.getCubiclesRoomsBeds().size();i++)
				{
					form.cmbCubicle().newRow(tempVo.getCubiclesRoomsBeds().get(i), tempVo.getCubiclesRoomsBeds().get(i).getCubicleRoomBedName());
				}
			}
			
		}
	}
	private void initialize()
	{
		
		form.getLocalContext().setCurrentCubicleAllocation(null);
		form.getLocalContext().setCurrentTracking(null);
		
	}
	private void populateRecordBrowser(CubicleAllocationShortVoCollection tempColl)
	{
		if(	tempColl == null || tempColl.size() == 0)
			return;
		
		tempColl.sort(new AllocatedDateComparator(SortOrder.DESCENDING));		
		for(int i = 0; i < tempColl.size();i++)
		{
			CubicleAllocationShortVo tempVo = tempColl.get(i);
			if(tempVo != null)
			{
				String s1 = tempVo.getAllocatedCubicleDateTimeIsNotNull() ? tempVo.getAllocatedCubicleDateTime().toString():"";
				String s2 = tempVo.getCubicleRoomBed() != null ? tempVo.getCubicleRoomBed().getCubicleRoomBedName():"";
				String s3 = (tempVo.getTrackingAreaIsNotNull() && tempVo.getTrackingArea().getAreaDisplayNameIsNotNull()) ? tempVo.getTrackingArea().getAreaDisplayName():"";
				String s4 = tempVo.getAllocatedByIsNotNull() ? tempVo.getAllocatedBy().getName().toString():"";
				String s5 = s1+" - "+s2+" - "+s3+" - "+s4 ;
				form.recbrAllocateCubicle().newRow(tempVo, s5);
			}
		}
		if(	form.getLocalContext().getCurrentCubicleAllocationIsNotNull() && form.getLocalContext().getCurrentCubicleAllocation().getID_CubicleAllocationIsNotNull())
			form.recbrAllocateCubicle().setValue(getCunicleShort(tempColl,form.getLocalContext().getCurrentCubicleAllocation()));
		else
			form.recbrAllocateCubicle().setValue(tempColl.get(0));
	}
	private CubicleAllocationShortVo getCunicleShort(CubicleAllocationShortVoCollection tempColl,CubicleAllocationVo cubic)
	{
		if(tempColl == null || tempColl.size() == 0 )
			return null;
		for(int i = 0; i < tempColl.size();i++)
		{
			CubicleAllocationShortVo tempVo = tempColl.get(i);
			if(tempVo!= null)
			{
				if(cubic.getID_CubicleAllocationIsNotNull() && cubic.getID_CubicleAllocation().equals(tempVo.getID_CubicleAllocation()))
					return tempVo;
			}
		}
		return null;
	}
	private void clear()
	{
		form.recbrAllocateCubicle().clear();
		clearControlDetails();
	}
	private void clearControlDetails()
	{
		form.ccAllocatedBy().clear();
		form.dtimAllocatedCubicle().setValue(null);
		form.cmbCubicle().setValue(null);
		form.lblNameOfTrackingArea().setValue(null);
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.setMode(FormMode.VIEW);
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if( save())
			open();
	}
	private boolean save()
	{
		TrackingForAllocateCubicleVo trackinrecord =  null;
		String[] uiErrors = getUiErrors();
		if (uiErrors != null)
		{
			engine.showErrors(uiErrors);
			return false;
		}
		CubicleAllocationVo record = populateDataFromScreen(form.getLocalContext().getCurrentCubicleAllocation());
		String[] errors = record.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);			
			return false;
		}
		//verify if is new record and the patient is in ED
		if( record.getID_CubicleAllocation() == null && form.getLocalContext().getCurrentTrackingIsNotNull() && !Boolean.TRUE.equals(form.getLocalContext().getCurrentTracking().getIsDischarged()))
		{
			trackinrecord = form.getLocalContext().getCurrentTracking();
			trackinrecord.setCurrentCubicle(record);
			errors = trackinrecord.validate();
			if(errors != null && errors.length > 0)
			{
				engine.showErrors(errors);			
				return false;
			}
		}
		
		//WDEV-17469 -> verify if Cubicle was removed from configuration by another user
		TrackingAreaCubiclesVo cubicles = domain.getTrackingAreaCubicles(form.getLocalContext().getCurrentTracking().getCurrentArea());
		
		if (cubicles != null && cubicles.getCubiclesRoomsBeds() != null && (! cubicles.getCubiclesRoomsBeds().contains(form.cmbCubicle().getValue())))
		{
			engine.showMessage("Selected Cubicle/Room/Bed was removed from Configuration. Please select another.");
			return false;
		}
		
		try 
		{
			if( trackinrecord != null)
				record = domain.saveCubicleAllocation(null,trackinrecord);
			else
				record = domain.saveCubicleAllocation(record,null);
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			if( form.getGlobalContext().Emergency.getTracking() != null)
				form.getLocalContext().setCurrentTracking(domain.getTracking(form.getGlobalContext().Emergency.getTracking()));
		}
		form.getLocalContext().setCurrentCubicleAllocation(record);
		return true;
		
	}
	private CubicleAllocationVo populateDataFromScreen(CubicleAllocationVo record )
	{
		if(	record == null)
			record = new CubicleAllocationVo();
		
		//HcpLiteVo hcpVo = (HcpLiteVo) form.ccAllocatedBy().getValue();
		record.setAllocatedBy((MemberOfStaffLiteVo) form.ccAllocatedBy().getValue());
		
		record.setAllocatedCubicleDateTime(form.dtimAllocatedCubicle().getValue());
		record.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		record.setCubicleRoomBed(form.cmbCubicle().getValue());			//wdev-16011
		record.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		record.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		//wdev-16011	
		if( !record.getTrackingAreaIsNotNull() && form.getLocalContext().getCurrentTrackingIsNotNull())
		{
			record.setTrackingArea(form.getLocalContext().getCurrentTracking().getCurrentArea());
		}
		
		return record;
		
	}
	private String[] getUiErrors() 
	{
		ArrayList<String> errors = new ArrayList<String>();
	
		if(	form.ccAllocatedBy().getValue() == null)
		{
			errors.add("Allocated by is mandatory ");
			
		}
		if(	form.dtimAllocatedCubicle().getValue() == null)
		{
			errors.add("Allocated Cubicle Date/Time is mandatory ");
		}
		if(	form.dtimAllocatedCubicle().getValue() != null )
		{
			if(	form.dtimAllocatedCubicle().getValue().isGreaterThan(new DateTime()))
				errors.add(" Allocated Cubicle Date/Time cannot be in the future ");
			
			DateTime dt = domain.getAttendanceRegistrationDateTime(form.getGlobalContext().Core.getCurrentCareContext());
			if(	form.getGlobalContext().Core.getCurrentCareContext() != null && form.dtimAllocatedCubicle().getValue().isLessThan(dt))
				errors.add(" The Allocated date time entered should be after or equal to the registration date time for the selected attendance ");
		}
		
		if(	form.cmbCubicle().getValue() == null)
		{
			errors.add(" Cubicle/Room/Bed is mandatory ");		//wdev-16011
		}
					
		if(errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			engine.showErrors("Invalid Attendance Record", searchErrors);
			
			return searchErrors;
		}
		return null;
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstanceNewClick();		//wdev-17430
	}
	//wdev-17430
	private void newInstanceNewClick()
	{
		clear();
		
		form.getLocalContext().setCurrentTracking(domain.getTracking(form.getGlobalContext().Emergency.getTracking())); //WDEV-15827
		form.getLocalContext().setCurrentCubicleAllocation(new CubicleAllocationVo());
		
		MemberOfStaffLiteVo temp = null;
		
		if(domain.getMosUser() instanceof MemberOfStaffLiteVo)
		{
			temp = (MemberOfStaffLiteVo) domain.getMosUser();
		}
		
		form.ccAllocatedBy().setValue(temp);
		
		if(form.getLocalContext().getCurrentTrackingIsNotNull())
		{
			TrackingAreaLiteVo trackingArea = form.getLocalContext().getCurrentTracking().getCurrentArea();
			form.lblNameOfTrackingArea().setValue(trackingArea != null ? trackingArea.getAreaDisplayName():"");
		}
		else
		{
			form.lblNameOfTrackingArea().setValue("");
		}
		
		form.dtimAllocatedCubicle().setValue(new DateTime());
		initializeCubiclesRoomsBedsCombo();				//wdev-16011
		
		//wdev-16068
		if(	form.cmbCubicle().getValues().size() == 1)
		{
			TrackingCubicleRoomBedVo tempvo = (TrackingCubicleRoomBedVo) form.cmbCubicle().getValues().get(0);
			form.cmbCubicle().setValue(tempvo);
		}
		//----------------
		form.setMode(FormMode.EDIT);
	}
	
	//-----------
	
	protected void onRecbrAllocateCubicleValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recordBrowserSelectChanged();
	}
	private void recordBrowserSelectChanged()
	{
		
		form.getLocalContext().setCurrentCubicleAllocation(domain.getCubicleAllocation(form.recbrAllocateCubicle().getValue()));
		populateScreenFromData(form.getLocalContext().getCurrentCubicleAllocation());
		
	}
	private void populateScreenFromData(CubicleAllocationVo cubic)
	{
		clearControlDetails();
		if(cubic != null)
		{
			form.ccAllocatedBy().setValue(cubic.getAllocatedBy());
			form.dtimAllocatedCubicle().setValue(cubic.getAllocatedCubicleDateTime());
			form.cmbCubicle().setValue(cubic.getCubicleRoomBed());	//wdev-16011
			form.lblNameOfTrackingArea().setValue(cubic.getTrackingAreaIsNotNull()? cubic.getTrackingArea().getAreaDisplayName():"");
			//wdev-16011
			form.cmbCubicle().clear();
			if( cubic.getTrackingAreaIsNotNull())
			{
				
				
					TrackingAreaCubiclesVo tempVo = domain.getTrackingAreaCubicles(cubic.getTrackingArea());
					if( tempVo != null && tempVo.getCubiclesRoomsBedsIsNotNull())
					{
						for(int i = 0;i < tempVo.getCubiclesRoomsBeds().size();i++)
						{
							form.cmbCubicle().newRow(tempVo.getCubiclesRoomsBeds().get(i), tempVo.getCubiclesRoomsBeds().get(i).getCubicleRoomBedName());
						}
					}
					form.cmbCubicle().setValue(cubic.getCubicleRoomBed());
					
				
			}
			//---------
			
		}
	}
	
	protected void onFormModeChanged() 
	{
		updateControlsState();
		
	}
	private void updateControlsState()
	{
		form.ccAllocatedBy().isRequired(form.getMode().equals(FormMode.EDIT));
	
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(form.recbrAllocateCubicle().getValue() != null);
		}
	}
	public class AllocatedDateComparator implements Comparator
	{
		private int direction = 1;
		
		public AllocatedDateComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public AllocatedDateComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime date1 = null;
			DateTime date2 = null;
			if(ob1 instanceof CubicleAllocationShortVo)
			{
				CubicleAllocationShortVo ps1 = (CubicleAllocationShortVo)ob1;
				date1 = ps1.getAllocatedCubicleDateTime();
			}
			if(ob2 instanceof CubicleAllocationShortVo)
			{
				CubicleAllocationShortVo ps2 = (CubicleAllocationShortVo)ob2;
				date2 = ps2.getAllocatedCubicleDateTime();
			}
			if(date1 != null )
				return  date1.compareTo(date2)*direction;
			if(date2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	
	protected void onBtnCloseClick() throws PresentationLogicException 
	{
		engine.close(DialogResult.CANCEL);
		
	}

	
}
