//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.triage;

import ims.admin.vo.AppImageVo;
import ims.clinical.vo.ClinicalProblemShortVo;
import ims.clinical.vo.ClinicalProblemShortVoCollection;
import ims.configuration.EnvironmentConfig;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EmergencyAttendanceRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AppDBImageVo;
import ims.core.vo.Hcp;
import ims.core.vo.NurseVo;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.Sex;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.configuration.vo.TrackingAreaRefVo;
import ims.emergency.forms.triage.GenForm.GroupClinicianReviewEnumeration;
import ims.emergency.forms.triage.GenForm.grdAttendanceHistoryRow;
import ims.emergency.forms.triage.GenForm.grdProblemRow;
import ims.emergency.helper.EmergencyDisplayHelper;
import ims.emergency.vo.EmergencyAttendanceForTriageLiteVo;
import ims.emergency.vo.EmergencyAttendanceForTriageVo;
import ims.emergency.vo.EmergencyEpisodeForTriageLiteVo;
import ims.emergency.vo.EmergencyEpisodeForTriageVo;
import ims.emergency.vo.EmergencyEpisodeForTriageVoCollection;
import ims.emergency.vo.EpisodeOfcareLiteVo;
import ims.emergency.vo.PatientForTriageVo;
import ims.emergency.vo.SeenByHCPVo;
import ims.emergency.vo.TrackingAttendanceStatusVo;
import ims.emergency.vo.TrackingForClinicianWorklistAndTriageVo;
import ims.emergency.vo.TrackingForTriageVo;
import ims.emergency.vo.TrackingListForTriageVo;
import ims.emergency.vo.TrackingListForTriageVoCollection;
import ims.emergency.vo.TrackingRefVo;
import ims.emergency.vo.TriageForTriageVo;
import ims.emergency.vo.TriagePriorityKpConfigVo;
import ims.emergency.vo.TriageProtocolAssessmentForTriageVo;
import ims.emergency.vo.TriageProtocolAssessmentForTriageVoCollection;
import ims.emergency.vo.enums.DischargeDetails_CustomEvents;
import ims.emergency.vo.lookups.TrackingStatus;
import ims.emergency.vo.lookups.TriagePriority;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellTable;
import ims.framework.controls.DynamicGridCellTable.TableCell;
import ims.framework.controls.DynamicGridCellTable.TableCellOptions;
import ims.framework.controls.DynamicGridCellTable.TableCellType;
import ims.framework.controls.DynamicGridCellTable.TableRow;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.controls.Timer;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.Align;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FontFamily;
import ims.framework.enumerations.FontWeight;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Base64;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.icps.instantiation.vo.PatientICPRefVo;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String	COLUMN_NAME			= "0";
	private static final int EMERGENCY_PATIENT_SUMMARY = 320; 
	private static final String CARE_CONTEXT_SEED = "CareContext_id";
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize(args);// 	WDEV-16012
		open();
	}

	private void initialize(Object[] args) // 	WDEV-16012
	{
		// 	WDEV-16012
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof Boolean)
			{
				form.getLocalContext().setShowReturnToList((Boolean) args[0]);
			}
		}
		
		if(engine.getCurrentLocation() != null)
		{
			form.getLocalContext().setAttendanceKPIConfig(domain.getAttendanceKPIConfigForTriage(engine.getCurrentLocation()));
		}
		
		Object user = domain.getHcpLiteUser();
		if(user instanceof HcpRefVo)
		{
			form.getLocalContext().setLoggedHcp((HcpRefVo) user);
		}
		
		form.GroupClinicianReview().setValue(GroupClinicianReviewEnumeration.rdoAll);
		createPatientGridColumns();
		
		form.lyrPatientTriage().tabTriagePathway().ccICP().initialize();
		
		if(ConfigFlag.UI.ED_TRIAGE_AUTO_REFRESH_TIME_MINUTES.getValue() > 0)
		{
			form.getTimers().gettimerTriage().setInterval(ConfigFlag.UI.ED_TRIAGE_AUTO_REFRESH_TIME_MINUTES.getValue() * 60);
			form.getTimers().gettimerTriage().setEnabled(true);
		}
		
		form.getLocalContext().setAllocatedNurse(null);   //wdev-15930	
	}

	private void createPatientGridColumns() 
	{
		DynamicGridColumn columnName = form.dyngrdPatients().getColumns().newColumn("Name", COLUMN_NAME);
		columnName.setWidth(298);
	}

	private void open() 
	{
		searchTriagePatients();
		selectedInstance();
		updateControlsState();
	}

	private void searchTriagePatients() 
	{
		clearScreen();
		HcpRefVo hcp = null;
		if(form.getLocalContext().getLoggedHcpIsNotNull() && GroupClinicianReviewEnumeration.rdoMyAllocated.equals(form.GroupClinicianReview().getValue()))
		{
			hcp = form.getLocalContext().getLoggedHcp();
		}
		
		TrackingListForTriageVoCollection patients = domain.listPatientsWaiting(engine.getCurrentLocation(), TrackingStatus.WAITING_TO_BE_TRIAGED, hcp);
		
		if(patients == null)
			return;
		
		populatePatientsWaitingForTriage(patients.sort(new TriageLOSComparator(SortOrder.DESCENDING)));
	}

	private void clearScreen() 
	{
		form.dyngrdPatients().getRows().clear();
		form.lblPresentingComplaint().setValue(null);
		form.qmbPresentingProblem().clear();
		form.imgTriagePriority().setValue(null);
		form.lblDiscriminator().setValue(null);
		form.lyrPatientTriage().tabNotes().ccNotes().clear();
		form.grdProblem().getRows().clear();
		form.ccAlert().clear();
		form.ccAllergy().clear();
		form.grdAttendanceHistory().getRows().clear();
		form.dtimIncidentTime().setValue(null);
		form.dtimArrivalTime().setValue(null);
		form.dtimRegistrationTime().setValue(null);
		form.txtLOS().setValue(null);//WDEV-15818
		form.dtimTriageStartTime().setValue(null);
		form.dtimTriageEndTime().setValue(null);
		form.dtimTriageBreachTime().setValue(null);
	}

	private void populatePatientsWaitingForTriage(TrackingListForTriageVoCollection patients) 
	{
		form.dyngrdPatients().getRows().clear();
		deletePatientImages();
		
		if(patients == null)
			return;
		
		Integer totalLOS = 0;
		
		for(TrackingListForTriageVo patient : patients)
		{
			Integer los = addPatientRow(patient);
			
			if(los != null)
			{
				totalLOS += los;
			}
		}
		
		Integer averageTime = totalLOS/patients.size();
		form.lblAverageTime().setValue("Average Time to be Seen : " + EmergencyDisplayHelper.minutesToHoursAndMinutes(averageTime));//WDEV-15818
		
		form.dyngrdPatients().setValue(form.getLocalContext().getSelectedTriagePatient());
	}
	
	private void deletePatientImages() 
	{
		List<String> importedFiles = form.getLocalContext().getPatientImagesList();
		
		if (importedFiles != null && importedFiles.size() > 0)
		{
			for (Iterator<String> iterator = importedFiles.iterator(); iterator.hasNext();) 
			{
				String file = ((String) iterator.next()).replace("/", "\\");
				File f = new File(file);
				f.delete();											
			}
		}
	}

	private AppImageVo getPatientImage(TrackingListForTriageVo tracking) throws IOException
	{
		if (tracking == null || tracking.getPatient() == null)
			return null;
		
		String sessionID = engine.getSessionId();
		
		AppDBImageVo dbImageVo =  tracking.getPatient().getPhoto();
		
		//Existing Patient with no image
		if (dbImageVo == null)
		{
			// NoPatientImage	
			AppImageVo imageVo = new AppImageVo();
			imageVo.setImagePath(form.getImages().Core.NoPatientImage.getImagePath());
			
			return imageVo;
		}
		
		String encodedImage = dbImageVo.getImageData();
		String type = dbImageVo.getImageType().getText();	  		  		  	
  	
		return decodeFromBase64(encodedImage, sessionID, type);
	}
	
	private AppImageVo decodeFromBase64(String content, String sessionID, String imageType) throws IOException
	{
		byte[] decBytes = Base64.decode(content);

		if (decBytes == null || (decBytes != null && decBytes.length == 0)) 
		{
			engine.showMessage("Base64 image size is zero");
			return null;
		}
		 
	    String str = generateName();
	    String image = EnvironmentConfig.getBaseUri() + ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "." + imageType.toLowerCase();		
		
		try
		{		
			FileOutputStream fos = new FileOutputStream(image);				
			fos.write(decBytes);
			fos.close();	
			
			AppImageVo imageVo = new AppImageVo();
			imageVo.setImagePath(((ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + str + "." + imageType.toLowerCase()).replace("\\", "/")));
			return imageVo;
		}		
		catch(FileNotFoundException exception) {			
			System.out.println("FileNotFoundException : " + exception);
		}		
		catch(IOException ioexception) {						
			System.out.println("IOException : " + ioexception);
		}
						
		return null;			
	}
	
	private String generateName() 
	{
		String str = "";

		try
		{
			//Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			//Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			//Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}
	
	private Integer addPatientRow(TrackingListForTriageVo tracking) 
	{
		if(tracking == null)
			return null;
		
		AppImageVo patientImage = null;
		
		try 
		{
			patientImage = getPatientImage(tracking);
			
			if(tracking != null && tracking.getPatient() != null && tracking.getPatient().getPhoto() != null)
			{
				addPatientToLocalCollection(patientImage);
			}
		}
		catch (IOException e) 
		{		
		} 
		
		Integer LOS = null;
		
		if(tracking.getAttendance() != null && tracking.getAttendance().getRegistrationDateTime() != null)
		{
			LOS = calculateDateDiffInMinutes(new DateTime(), tracking.getAttendance().getRegistrationDateTime());
		}
		
		Color losFontColor = null;
		Color surnameBackgroudColor = null;
		Color losBackgroudColor = null;
		Color flashingTextColour = null;		//wdev-16138
		if(LOS != null && form.getLocalContext().getAttendanceKPIConfig() != null)
		{
			if(form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPI() != null && form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI() != null)
			{
				if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPI() && LOS < form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI())
				{
					losFontColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPITextColour();   				//wdev-16138
					surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIBackgroundColour();	//wdev-16138
					flashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachWarningKPIFlashingTextColour();		//wdev-16138
				}
				else if(LOS >= form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachedKPI())
				{
					//surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPITextColour();				//wdev-16138
					//losBackgroudColor = Color.Black;
					losFontColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPITextColour();   						//wdev-16138
					surnameBackgroudColor = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIBackgroundColour();			//wdev-16138
					losBackgroudColor = Color.Black;
					flashingTextColour = form.getLocalContext().getAttendanceKPIConfig().getAwaitingTriageBreachKPIFlashingTextColour();			//wdev-16138
				}
			}
		}
		
		DynamicGridRow row = form.dyngrdPatients().getRows().newRow();
		
		DynamicGridCell cellLabel = row.getCells().newCell(form.dyngrdPatients().getColumns().getByIdentifier(COLUMN_NAME), DynamicCellType.TABLE);
		DynamicGridCellTable helper = new DynamicGridCellTable(cellLabel);		
		helper.setBorder(4);		
		
		TableRow  tableRow = helper.getRows().newRow();
		
		TableCell tableCell = tableRow.getCells().newCell();
					tableCell.setType(TableCellType.IMAGE);		
					tableCell.setRowSpan(2);
					tableCell.setValue(patientImage);
					tableCell.setWidth(50);
					
		//Patient Name								
		TableCellOptions cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(losFontColor != null ? losFontColor : Color.Black);
						 cellOptions.setFontFamily(FontFamily.ARIAL);
						 cellOptions.setFontSize(16);
						 cellOptions.setFontWeight(FontWeight.BOLDER);	
						 cellOptions.setAlign(Align.CENTER);
					
						 //if(surnameBackgroudColor != null)
						 //{
							 
						 cellOptions.setTextAndBackgroundBlink(losFontColor,flashingTextColour,surnameBackgroudColor, surnameBackgroudColor);	//wdev-16138
						 cellOptions.setBackgroundColor(surnameBackgroudColor);		//wdev-16138
						 cellOptions.setTextColor(losFontColor);					//wdev-16138
						 //}

		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(130);		
		tableCell.setColSpan(3);		
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getNameIsNotNull())
		{
			tableCell.setValue(tracking.getPatient().getName().getSurname().toUpperCase() + ", " + (tracking.getPatient().getName().getForenameIsNotNull() ? tracking.getPatient().getName().getForename():"")); 		//wdev-15939
			tableCell.setTooltip(tracking.getPatient().getName().getSurname().toUpperCase() + ", " + (tracking.getPatient().getName().getForenameIsNotNull() ? tracking.getPatient().getName().getForename():""));		//wdev-15939
		}
								
		//Hospital No
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(13);
						 cellOptions.setAlign(Align.RIGHT);
		tableCell.setOptions(cellOptions);
		tableCell.setColSpan(2);
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getHospnum() != null)
		{
			tableCell.setValue(tracking.getPatient().getHospnum().getIdValue());
			tableCell.setTooltip(tracking.getPatient().getHospnum().getIdValue());
		}		
		tableCell.setColSpan(2);
		//UrgencyImage
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setValue(getImageForUrgency(tracking));
		tableCell.setWidth(30);
		
		//DOB
		tableRow = helper.getRows().newRow();
		
		//dd/mm/yyyy
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		cellOptions = new TableCellOptions();		
						 cellOptions.setTextColor(Color.Black);
						 cellOptions.setFontFamily(FontFamily.CALIBRI);
						 cellOptions.setFontSize(11);								 
		tableCell.setOptions(cellOptions);
		tableCell.setWidth(110);
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getDobIsNotNull())
		{
			tableCell.setValue(tracking.getPatient().getDob().toString() + (tracking.getAttendance() != null && tracking.getAttendance().getAgeAtAttendance() != null ? " (" + tracking.getAttendance().getAgeAtAttendance() + ")" : ""));
			tableCell.setTooltip(tracking.getPatient().getDob().toString() + (tracking.getAttendance() != null && tracking.getAttendance().getAgeAtAttendance() != null ? " (" + tracking.getAttendance().getAgeAtAttendance() + ")" : ""));
		}
		
		//Gender
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		if (tracking.getPatientIsNotNull() && tracking.getPatient().getSex() != null)
		{
			if(tracking.getPatient().getSex().equals(Sex.MALE))
			{
				tableCell.setValue(form.getImages().Emergency.Male);
			}
			else if(tracking.getPatient().getSex().equals(Sex.FEMALE))
			{
				tableCell.setValue(form.getImages().Emergency.Female);
			}			
		}		
		
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(10);
		//LOS
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.STRING);
		
		
		cellOptions = new TableCellOptions();	
							 
		 if(losFontColor == null && losBackgroudColor == null)
		 {
			 cellOptions.setTextColor(Color.Black);
		 }
		 else
		 {
			 cellOptions.setTextColor(losFontColor != null ? losFontColor : Color.White);
		 }
		 
		 cellOptions.setFontFamily(FontFamily.CALIBRI);
		 cellOptions.setFontSize(11);
		 cellOptions.setFontWeight(FontWeight.BOLD);
		 
		 if(losBackgroudColor != null)
		 {
			 cellOptions.setBackgroundColor(losBackgroudColor);
		 }
							 
		tableCell.setOptions(cellOptions);
		
		if(LOS != null)
		{
			tableCell.setValue(EmergencyDisplayHelper.minutesToHoursAndMinutes(LOS));//WDEV-15818
			tableCell.setTooltip(EmergencyDisplayHelper.minutesToHoursAndMinutes(LOS));//WDEV-15818
		}
		tableCell.setWidth(70);
		
		//Alert
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		tableCell.setValue(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAlerts()) ? form.getImages().Core.Alert48 : null);
		
		//Alert
		tableCell = tableRow.getCells().newCell();
		tableCell.setType(TableCellType.IMAGE);
		tableCell.setWidth(24);
		tableCell.setValue(tracking.getPatient() != null && Boolean.TRUE.equals(tracking.getPatient().getHasAllergies()) ? form.getImages().Core.Allergies48 : null);
		
		helper.renderValue();
		cellLabel.setValue(helper);
		cellLabel.setReadOnly(true);
		
		row.setValue(tracking);
		
		return LOS;
	}

	private void addPatientToLocalCollection(AppImageVo patientImage) 
	{
		if(patientImage == null)
			return;
		
		List<String> imagesColl = form.getLocalContext().getPatientImagesList();
		
		if (imagesColl == null)
			imagesColl = new ArrayList<String>();
		
		if (EnvironmentConfig.getFileUploadMountpoint() != null && EnvironmentConfig.getFileUploadMountpoint() != "")
		{
			imagesColl.add(EnvironmentConfig.getFileUploadMountpoint() + patientImage.getImagePath());
		}
		else
		{
			imagesColl.add(EnvironmentConfig.getBaseUri() + patientImage.getImagePath());
		}
		
		form.getLocalContext().setPatientImagesList(imagesColl);
	}
	
	private Image getImageForUrgency(TrackingListForTriageVo tracking) 
	{
		if(tracking == null || tracking.getAttendance() == null || tracking.getAttendance().getUrgencyLevel() == null)
			return  null;
		
		Image urgency = null;
		
		urgency = tracking.getAttendance().getUrgencyLevel().getImage();
		
		return urgency;
	}

	@Override
	protected void onDyngrdPatientsRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException 
	{
		form.lyrPatientTriage().showtabNotes();
		
		selectedInstance();
		updateControlsState();
	}

	private void selectedInstance() 
	{
		form.getLocalContext().setHistoryMode(false);
		
		form.getLocalContext().setSelectedTriagePatient(null);
		
		if(form.dyngrdPatients().getValue() instanceof TrackingRefVo)
		{
			form.getGlobalContext().Emergency.setTracking((TrackingRefVo) form.dyngrdPatients().getValue());
			form.getLocalContext().setSelectedTriagePatient(domain.getTrackingForTriage((TrackingRefVo) form.dyngrdPatients().getValue()));
		}
		else if(form.getGlobalContext().Core.getCurrentCareContext() != null)
		{
			TrackingForTriageVo TrackingForTriage = domain.getTrackingForTriageByCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			
			//WDEV-15951
			if (TrackingForTriage != null && TrackingForTriage.getAttendanceIsNotNull() && TrackingForTriage.getAttendance().getDischargeDateTimeIsNotNull())
			{
				form.getLocalContext().setHistoryMode(true); //wdev-16064
			}
			
			form.getLocalContext().setSelectedTriagePatient(TrackingForTriage);
			form.getGlobalContext().Emergency.setTracking(form.getLocalContext().getSelectedTriagePatient());
			form.dyngrdPatients().setValue(form.getLocalContext().getSelectedTriagePatient());
			
		}
		
		if(form.getLocalContext().getSelectedTriagePatient() != null)
		{
			form.getGlobalContext().Emergency.setTriage(form.getLocalContext().getSelectedTriagePatient().getTriageDetails());
			
			if(form.getLocalContext().getSelectedTriagePatient().getEpisode() != null)
			{
				form.getLocalContext().setCurrentEpisode((EmergencyEpisodeForTriageLiteVo) form.getLocalContext().getSelectedTriagePatient().getEpisode().clone());
			}
			if(form.getLocalContext().getSelectedTriagePatient().getAttendance() != null && form.getLocalContext().getSelectedTriagePatient().getAttendance().getDischargeDateTime() == null)
			{
				form.getLocalContext().setCurrentAttendance((EmergencyAttendanceForTriageLiteVo) form.getLocalContext().getSelectedTriagePatient().getAttendance().clone());
			}
		}
		
		populateScreenFromData();
	}

	private void populateScreenFromData() 
	{
		if(form.getLocalContext().getSelectedTriagePatient() == null)
			return;
		
		PatientForTriageVo patient = form.getLocalContext().getSelectedTriagePatient().getPatient();
		EpisodeOfCareRefVo episode = form.getLocalContext().getSelectedTriagePatient().getEpisode().getEpisodeOfCare();
		CareContextRefVo careContext = form.getLocalContext().getSelectedTriagePatient().getAttendance().getCareContext();
		PatientICPRefVo icp = form.getLocalContext().getSelectedTriagePatient().getTriageDetails() != null ? form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriagePathway() : null;
		
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(patient));//WDEV-15815
		form.getGlobalContext().Core.setEpisodeofCareShort(domain.getEpisodeOfCare(episode));
		form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContext(careContext));
		
		populateOtherDetails(patient);
		initializePatientTriageLayer(patient, episode, careContext, icp);
	}

	private void populateOtherDetails(PatientForTriageVo patient) 
	{
		populateOtherProblems();
		
		form.ccAllergy().refresh();
		form.ccAlert().refresh();
		
		populateAttendanceHistory(patient);
		
		form.imgTriagePriority().setValue(getPriorityImageByTriagePriority());
		form.lblPresentingComplaint().setValue((form.getLocalContext().getSelectedTriagePatient() != null && form.getLocalContext().getSelectedTriagePatient().getEpisode().getPresentingComplaint() != null) ? form.getLocalContext().getSelectedTriagePatient().getEpisode().getPresentingComplaint().getText() : "");
		form.qmbPresentingProblem().clear();
		
		if(form.getLocalContext().getSelectedTriagePatient() != null && form.getLocalContext().getSelectedTriagePatient().getTriageDetails() != null && form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getMainPresentingProblem() != null)
		{
			ClinicalProblemShortVo problem = form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getMainPresentingProblem().getProblem();
			
			if(problem != null)
			{
				form.qmbPresentingProblem().newRow(problem, problem.getPCName());
				form.qmbPresentingProblem().setValue(problem);
			}
		}
		
		form.lblDiscriminator().setValue((form.getLocalContext().getSelectedTriagePatient() != null && form.getLocalContext().getSelectedTriagePatient().getTriageDetails() != null && form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriageAssessment() != null && form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriageAssessment().getDiscriminator() != null && form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriageAssessment().getDiscriminator().getDiscriminator() != null) ? form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriageAssessment().getDiscriminator().getDiscriminator().getDiscriminatorName() : "");
		
		populateAttendanceTimes();
	}

	private void populateOtherProblems() 
	{
		form.grdProblem().getRows().clear();
		
		if(form.getGlobalContext().Core.getCurrentCareContext() == null)
			return;
		
		TriageProtocolAssessmentForTriageVoCollection otherProblems = domain.listOtherProblems(form.getGlobalContext().Core.getCurrentCareContext());
		
		for(TriageProtocolAssessmentForTriageVo otherProblem : otherProblems)
		{
			addOtherProblemRow(otherProblem);
		}
	}

	private void addOtherProblemRow(TriageProtocolAssessmentForTriageVo otherProblem) 
	{
		if(otherProblem == null)
			return;
		
		grdProblemRow row = form.grdProblem().getRows().newRow();
		
		row.setColOtherProblems(otherProblem.getPatientProblem() != null ? otherProblem.getPatientProblem().getPatientProblem() : null);
		row.setColDiscriminator((otherProblem.getDiscriminator() != null && otherProblem.getDiscriminator().getDiscriminator() != null) ? otherProblem.getDiscriminator().getDiscriminator().getDiscriminatorName() : null);
		
		row.setValue(otherProblem);
	}

	private Image getPriorityImageByTriagePriority() 
	{
		if(form.getLocalContext().getSelectedTriagePatient() == null || form.getLocalContext().getSelectedTriagePatient().getTriageDetails() == null)
			return null;
		
		if(TriagePriority.PRIORITY1.equals(form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P1;
		else if(TriagePriority.PRIORITY2.equals(form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P2;
		else if(TriagePriority.PRIORITY3.equals(form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P3;
		else if(TriagePriority.PRIORITY4.equals(form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P4;
		else if(TriagePriority.PRIORITY5.equals(form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriagePriority()))
			return form.getImages().Emergency.Triage_Priority_P5;
		
		return null;
	}

	private void populateAttendanceTimes() 
	{
		if(form.getLocalContext().getSelectedTriagePatient() == null)
			return;
		
		form.dtimIncidentTime().setValue(form.getLocalContext().getSelectedTriagePatient().getEpisode() != null ? form.getLocalContext().getSelectedTriagePatient().getEpisode().getInjuryDateTime() : null);
		form.dtimArrivalTime().setValue(form.getLocalContext().getSelectedTriagePatient().getAttendance() != null ? form.getLocalContext().getSelectedTriagePatient().getAttendance().getArrivalDateTime() : null);
		form.dtimRegistrationTime().setValue(form.getLocalContext().getSelectedTriagePatient().getAttendance() != null ? form.getLocalContext().getSelectedTriagePatient().getAttendance().getRegistrationDateTime() : null);
		form.dtimTriageStartTime().setValue(form.getLocalContext().getSelectedTriagePatient().getTriageDetails() != null ? form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getTriageStartDateTime() : null);
		form.dtimTriageEndTime().setValue(form.getLocalContext().getSelectedTriagePatient().getTriageDetails() != null ? form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getTriageCompletionTime() : null);
		
		form.txtLOS().setValue(EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimRegistrationTime().getValue())));//WDEV-15818
		form.dtimTriageBreachTime().setValue(calculateBreachTime(form.dtimTriageStartTime().getValue()));
	}

	private DateTime calculateBreachTime(DateTime triageStartTime)
	{
		if(triageStartTime == null)
			return null;
		
		if(form.getLocalContext().getSelectedTriagePatient() == null || form.getLocalContext().getSelectedTriagePatient().getTriageDetails() == null ||  form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriagePriority() == null)
			return null;
		
		if(form.getLocalContext().getAttendanceKPIConfig() == null || form.getLocalContext().getAttendanceKPIConfig().getTriagePriorityKPIs() == null)
			return null;
		
		Integer priorityBreachedKPI = null;
			
		for(TriagePriorityKpConfigVo priorityConfig : form.getLocalContext().getAttendanceKPIConfig().getTriagePriorityKPIs())
		{
			if(form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriagePriority().equals(priorityConfig.getTriagePriority()))
			{
				priorityBreachedKPI = priorityConfig.getPriorityBreachedKPI();
				break;
			}
		}
		
		if(priorityBreachedKPI == null)
			return null;
		
		return ((DateTime) triageStartTime.clone()).addMinutes(priorityBreachedKPI);
	}

	private Integer calculateDateDiffInMinutes(DateTime currentTime, DateTime registrationDateTime) 
	{
		if(currentTime == null || registrationDateTime == null)
			return null;
		
		long currentTimeInMillis = currentTime.getJavaDate().getTime();
		long registrationDateTimeInMillis = registrationDateTime.getJavaDate().getTime();
		
		return (int)(((currentTimeInMillis < registrationDateTimeInMillis ? registrationDateTimeInMillis - currentTimeInMillis : currentTimeInMillis - registrationDateTimeInMillis)/1000)/60);
	}

	private void populateAttendanceHistory(PatientForTriageVo patient) 
	{
		form.grdAttendanceHistory().getRows().clear();
		form.getLocalContext().setCountOfPreviousAttendances(new Integer(0));		//wdev-16072
		
		if(patient == null)
			return;
		
		EmergencyEpisodeForTriageVoCollection attendanceHistory = domain.listAttendanceHistory(patient);
		
		if(attendanceHistory == null)
		{
			form.lbl16().setValue("Attendance History");							//wdev-16072
			return;
		}
		
		for(EmergencyEpisodeForTriageVo emergencyEpisode : attendanceHistory)
		{
			addEmergencyEpisodeRow(emergencyEpisode);
			//wdev-16072
			int nrPreviousAttendances = form.getLocalContext().getCountOfPreviousAttendances();	
			nrPreviousAttendances += 1;
			form.getLocalContext().setCountOfPreviousAttendances(nrPreviousAttendances);
			//wdev-16072
		}
		
		form.grdAttendanceHistory().setValue(null);
		if(form.getLocalContext().getSelectedTriagePatient() != null)
		{
			form.grdAttendanceHistory().setValue(form.getLocalContext().getSelectedTriagePatient().getAttendance());
		}
		
		form.grdAttendanceHistory().resetScrollPosition();
		//wdev-16072
		if( form.getLocalContext().getCountOfPreviousAttendances() > 1)
		{
			Integer nrcount = new Integer(form.getLocalContext().getCountOfPreviousAttendances() -1 );
			form.lbl16().setValue("Attendance History - "+nrcount.toString() + " previous" );				
		}
		else
		{
			form.lbl16().setValue("Attendance History");
		}
		//-----------------end wdev-16072
	}

	private void addEmergencyEpisodeRow(EmergencyEpisodeForTriageVo emergencyEpisode) 
	{
		if(emergencyEpisode == null)
			return;
		
		grdAttendanceHistoryRow row = form.grdAttendanceHistory().getRows().newRow();
		EpisodeOfcareLiteVo tempVo = domain.getEpisodeOfCareLite(emergencyEpisode.getEpisodeOfCare());	//wdev-16070
		row.setColID(emergencyEpisode.getID_EmergencyEpisode().toString() + (tempVo != null ? " - " +tempVo.getStartDate().toString() : ""));	//wdev-16070
		row.setBold(true);
		
		row.setValue((EmergencyEpisodeForTriageLiteVo) emergencyEpisode);
		
		if(emergencyEpisode.getEmergencyAttendances() == null)
			return;
		
		row.setExpanded(true);
		
		for(EmergencyAttendanceForTriageVo emergencyAttendance : emergencyEpisode.getEmergencyAttendances())
		{
			addEmergencyAttendanceRow(row, emergencyAttendance);
		}
	}

	private void addEmergencyAttendanceRow(grdAttendanceHistoryRow row,	EmergencyAttendanceForTriageVo emergencyAttendance) 
	{
		if(row == null || emergencyAttendance == null)
			return;
		
		grdAttendanceHistoryRow childRow = row.getRows().newRow();
		childRow.setColID(emergencyAttendance.getID_EmergencyAttendance().toString() + (emergencyAttendance.getRegistrationDateTimeIsNotNull() ? " - " + emergencyAttendance.getRegistrationDateTime().toString() : ""));
		childRow.setValue((EmergencyAttendanceForTriageLiteVo) emergencyAttendance);
	}

	private void initializePatientTriageLayer(PatientForTriageVo patient, EpisodeOfCareRefVo episode, CareContextRefVo careContext, PatientICPRefVo icp) 
	{
		form.lyrPatientTriage().tabNotes().ccNotes().initialize(patient, episode, careContext, form.qmbPresentingProblem().getValue());
		
		//WDEV-15996
		if (ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue()==false)
		{
			form.lyrPatientTriage().tabObs().ccVitalSigns().initialize();
		}
		else
		{
			initializeObsLayerTabs();
		}
		
		TrackingForClinicianWorklistAndTriageVo trackVo = domain.getTrckinGForClonicianWorklosAndTriage(form.getLocalContext().getSelectedTriagePatient());  //wdev-17819
		form.lyrPatientTriage().tabPatientMeds().ccPatientMeds().initialize(patient, careContext, episode,trackVo);	//wdev-17819
		form.lyrPatientTriage().tabRelevantPMH().ccRelevantPMH().initialize(careContext, patient, episode);
		form.lyrPatientTriage().tabSupport().ccSupp().initialize(careContext, episode, patient);
		form.lyrPatientTriage().tabTriagePathway().ccICP().setValue(icp);
		form.lyrPatientTriage().tabDischarge().ccDischarge().setValue(careContext, form.qmbPresentingProblem().getValue());
		
		
	}

	//WDEV-15996
	private void initializeObsLayerTabs()
	{
		if (form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().isVisible())
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().initialize();
		}
		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().isVisible())
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().initialize();
		}
		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().isVisible())
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().initialize();
		}
		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().isVisible())
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().initialize();
		}
		else if (form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().isVisible())
		{
			form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().initialize();	
		}
	}

	private void updateControlsState() 
	{
		clearToolTips();	//wdev-17349	
		setTooltips(); 		//WDEV-15820
		
		boolean isTriageCreated = form.getLocalContext().getSelectedTriagePatientIsNotNull() && form.getLocalContext().getSelectedTriagePatient().getTriageDetailsIsNotNull();
		boolean isHistoryMode = Boolean.TRUE.equals(form.getLocalContext().getHistoryMode());
		
		form.qmbPresentingProblem().setVisible(isTriageCreated);
		form.qmbPresentingProblem().setEnabled(isTriageCreated && !isHistoryMode && form.qmbPresentingProblem().getValue() == null);
		form.imgTriagePriority().setVisible(getPriorityImageByTriagePriority() != null && isTriageCreated && form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriagePriority() != null);
		form.btnEditMainProblem().setVisible(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && form.qmbPresentingProblem().getValue() != null && !isHistoryMode);
		
		form.lyrPatientTriage().tabNotes().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()));
		
		//WDEV-15996
		form.lyrPatientTriage().tabObs().setHeaderVisible(!ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());
		form.lyrPatientTriage().tabObs().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && !ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());
		
		form.lyrPatientTriage().tabObs2().setHeaderVisible(ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());
		form.lyrPatientTriage().tabObs2().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());
		form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());
		form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());
		form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());
		form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());
		form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && ConfigFlag.UI.DISPLAY_EXTENDED_OBS_DATA_SET.getValue());
		
		form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().setEnabled(isTriageCreated && !isHistoryMode);
		form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().setEnabled(isTriageCreated && !isHistoryMode);
		form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().setEnabled(isTriageCreated && !isHistoryMode);
		form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().setEnabled(isTriageCreated && !isHistoryMode);
		form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().setEnabled(isTriageCreated && !isHistoryMode);
		//end WDEV-15996
		
		
		form.lyrPatientTriage().tabPatientMeds().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()));
		form.lyrPatientTriage().tabRelevantPMH().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()));
		form.lyrPatientTriage().tabSupport().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()));
		form.lyrPatientTriage().tabTriagePathway().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()));
		form.lyrPatientTriage().tabDischarge().setHeaderEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()));
		form.lyrPatientTriage().tabNotes().ccNotes().setEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && !isHistoryMode);
		form.lyrPatientTriage().tabObs().ccVitalSigns().setEnabled(isTriageCreated && !isHistoryMode);
		form.lyrPatientTriage().tabTriagePathway().ccICP().setReadOnly(!(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && !isHistoryMode));
		form.lyrPatientTriage().tabPatientMeds().ccPatientMeds().setEnabled(isTriageCreated && !isHistoryMode);
		form.lyrPatientTriage().tabRelevantPMH().ccRelevantPMH().setEnabled(isTriageCreated && !isHistoryMode);
		form.lyrPatientTriage().tabSupport().ccSupp().setEnabled(isTriageCreated && !isHistoryMode);
		form.lyrPatientTriage().tabDischarge().ccDischarge().setReadOnly(! (isTriageCreated && !isHistoryMode));
		
		form.ccAllergy().setEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && !isHistoryMode);
		form.ccAlert().setEnabled(isTriageCreated && FormMode.VIEW.equals(form.getMode()) && !isHistoryMode);
		
		form.btnStartTriage().setVisible(form.getLocalContext().getSelectedTriagePatient() != null && form.getLocalContext().getSelectedTriagePatient().getTriageDetails() == null && !isHistoryMode);
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnViewHistory().setVisible(form.getLocalContext().getSelectedTriagePatient() != null);
			form.btnPatientSummary().setVisible(form.getLocalContext().getSelectedTriagePatient() != null);
			form.btnReferToSpecialty().setVisible(form.getLocalContext().getSelectedTriagePatient() != null && !isHistoryMode);
			form.btnMovePatient().setVisible(form.getLocalContext().getSelectedTriagePatient() != null && !isHistoryMode && (form.getLocalContext().getSelectedTriagePatient().getIsDischarged() == null || Boolean.FALSE.equals(form.getLocalContext().getSelectedTriagePatient().getIsDischarged())));
		}
		
		form.getContextMenus().Emergency.getOtherProblemsTriageMenuADDItem().setVisible(isTriageCreated && !isHistoryMode && FormMode.VIEW.equals(form.getMode()));
		form.getContextMenus().Emergency.getOtherProblemsTriageMenuEDITItem().setVisible(isTriageCreated && !isHistoryMode && FormMode.VIEW.equals(form.getMode()) && form.grdProblem().getValue() != null);
		
		form.lnkReturnToList().setVisible(Boolean.TRUE.equals(form.getLocalContext().getShowReturnToList()));// 	WDEV-16012
	}

	private void setTooltips()
	{
		if (form.dtimIncidentTime().getValue() != null)
		{
			String incidentTime = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimIncidentTime().getValue()));  //wdev-17349
			if( incidentTime == null )
				incidentTime = "0 m";
			form.dtimIncidentTime().setTooltip("Time since Incident: " + incidentTime);		//wdev-17349
		}
		
		if (form.dtimArrivalTime().getValue() != null)
		{
			String arrivalTime = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimArrivalTime().getValue())); 	//wdev-17349
			
			if( arrivalTime == null )	//wdev-17349
				arrivalTime = "0 m";
			form.dtimArrivalTime().setTooltip("Time since Arrival: " + arrivalTime);
		}
		
		if (form.dtimRegistrationTime().getValue() != null)
		{
			String registration = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimRegistrationTime().getValue()));	//wdev-17349
			if( registration == null )
				registration = "0 m";
			form.dtimRegistrationTime().setTooltip("Time since Registration: " + registration);
		}
		
		if (form.dtimTriageStartTime().getValue() != null)
		{
			String triageStartTime = EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimTriageStartTime().getValue())); //wdev-17349
			if( triageStartTime == null )
				triageStartTime = "0 m";
			form.dtimTriageStartTime().setTooltip("Time since Triage Start: " + triageStartTime); 
		}
		
		if (form.dtimTriageEndTime().getValue() != null)
		{
			form.dtimTriageEndTime().setTooltip("Time since Triage End: " + EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimTriageEndTime().getValue())));
		}
		
		if (form.dtimTriageBreachTime().getValue() != null)
		{
			form.dtimTriageBreachTime().setTooltip("Time since Triage Breached: " + EmergencyDisplayHelper.minutesToHoursAndMinutes(calculateDateDiffInMinutes(new DateTime(), form.dtimTriageBreachTime().getValue())));
		}
	}
	//wdev-17349
	private void clearToolTips()
	{
		form.dtimIncidentTime().setTooltip(" ");
		form.dtimArrivalTime().setTooltip(" ");
		form.dtimRegistrationTime().setTooltip(" ");
		form.dtimTriageStartTime().setTooltip(" ");
		form.dtimTriageEndTime().setTooltip(" ");
		form.dtimTriageBreachTime().setTooltip(" ");
		
	}

	@Override
	protected void onCcVitalSignsValueChanged()	throws PresentationLogicException 
	{
		FormMode vitalSignMode = form.lyrPatientTriage().tabObs().ccVitalSigns().getMode();
		form.setMode(vitalSignMode);
		
		form.getTimers().gettimerTriage().setEnabled(FormMode.VIEW.equals(vitalSignMode));
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}

	@Override
	protected void onGrdProblemSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onQmbPresentingProblemValueChanged()	throws PresentationLogicException 
	{
		if(form.qmbPresentingProblem().getValue() == null || form.getLocalContext().getSelectedTriagePatient() == null || form.getLocalContext().getSelectedTriagePatient().getTriageDetails() == null)
			return;
		
		form.getGlobalContext().Emergency.setMainPresentingProblem(form.qmbPresentingProblem().getValue());
		form.getGlobalContext().Emergency.setTriageProtocolAssessment(null);
		
		engine.open(form.getForms().Emergency.TriageProtocolAssessment, new Object[] {form.getLocalContext().getSelectedTriagePatient().getEpisode().getPresentingComplaint()});
	}

	@Override
	protected void onQmbPresentingProblemTextSubmited(String value)throws PresentationLogicException 
	{
		listPresentingProblems(value);
	}
	
	private void listPresentingProblems(String problemText) 
	{
		form.qmbPresentingProblem().clear();
		
		ClinicalProblemShortVoCollection problems = domain.listClinicalProblems(problemText);
		
		if(problems == null || problems.size() == 0)
			return;
		
		for(ClinicalProblemShortVo problem : problems)
		{
			if(problem == null)
				continue;
			
			form.qmbPresentingProblem().newRow(problem, problem.getPCName());
		}
		
		form.qmbPresentingProblem().showOpened();
	}

	@Override
	protected void onBtnStartTriageClick() throws PresentationLogicException 
	{
		//wdev-15930
		form.getLocalContext().setAllocatedNurse(null);	
		
		if(domain.getHcpUser() instanceof Hcp)
		{
			Hcp temp = (Hcp)domain.getHcpUser();
			if(temp != null)
			{
				HcpDisType hcptype =getParentNodeHcp(temp.getHcpType()); 
				if( hcptype != null && hcptype.equals(HcpDisType.NURSING))
					form.getLocalContext().setAllocatedNurse(new SeenByHCPVo());//wdev-16816
			}
		}
		//---------
		if( saveTracking())
		{
			open();
			//wdev-15930
			if( form.getLocalContext().getAllocatedNurse() == null )
				engine.open(form.getForms().Emergency.EDSeenByAndCompleteDialog, new Object[]{Boolean.TRUE});	//wdev-15930	//WDEV-16816
		}
	}
	//wdev-15930
	private HcpDisType getParentNodeHcp(HcpDisType hcpvo)
	{
		if(hcpvo == null)
			return null;
		if(hcpvo.getParent() == null)
			return hcpvo;
		else
			return getParentNodeHcp(hcpvo.getParent());
		
	}

	private boolean saveTracking() 
	{
		if(form.getLocalContext().getSelectedTriagePatient() == null)
			return false;
		
		TrackingForTriageVo tracking = populateTrackingWithTriage((TrackingForTriageVo) form.getLocalContext().getSelectedTriagePatient().clone());
		
		if(tracking == null)
			return false;
		
		//wdev-15930
		SeenByHCPVo allocNurseVo = populateAllocatedNurse();	//wdev-15930 //wdev-16816
		form.getLocalContext().setAllocatedNurse(allocNurseVo) ;
				
		String[] errors = tracking.validate();	
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setSelectedTriagePatient(domain.saveTracking(tracking,form.getLocalContext().getAllocatedNurse())); //wdev-15930
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
		}
		
		return true;
	}
	//wdev-15930 //WDEV-16816
	private SeenByHCPVo populateAllocatedNurse()
	{
		if( form.getLocalContext().getAllocatedNurseIsNotNull())
		{
			SeenByHCPVo tempVo = form.getLocalContext().getAllocatedNurse();
			tempVo.setPatient(form.getLocalContext().getSelectedTriagePatient().getPatient());
			tempVo.setAttendance(form.getLocalContext().getSelectedTriagePatient().getAttendance().getCareContext());
			tempVo.setEpisode(form.getLocalContext().getSelectedTriagePatient().getEpisode().getEpisodeOfCare());
			tempVo.setTrackingArea(form.getLocalContext().getSelectedTriagePatient().getCurrentArea());
			tempVo.setAllocatedDateTime(new DateTime());
			tempVo.setSeenDateTime(new DateTime());
			if(domain.getHcpUser() instanceof NurseVo)
			{
				NurseVo tempHcpVo = (NurseVo) domain.getHcpUser();
				tempVo.setAllocatedNurse(tempHcpVo);
			}
			
			return tempVo;
			
		}
		
		return null;
	}

	private TrackingForTriageVo populateTrackingWithTriage(TrackingForTriageVo tracking) 
	{
		if(tracking == null)
			return null;
		
		if(tracking.getTriageDetails() == null)
		{
			tracking.setTriageDetails(createNewTriage(tracking.getCurrentArea()));
		}
		
		return tracking;
	}

	private TriageForTriageVo createNewTriage(TrackingAreaRefVo currentArea) 
	{
		TriageForTriageVo triage = new TriageForTriageVo();
		triage.setPatient(form.getGlobalContext().Core.getPatientShort());
		triage.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		triage.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		triage.setTriageStartDateTime(new DateTime());
		triage.setTrackingArea(currentArea);
		
		return triage;
	}

	@Override
	protected void onRadioButtonGroupClinicianReviewValueChanged()	throws PresentationLogicException 
	{
		clearContexts();
		form.lyrPatientTriage().showtabNotes();
		
		searchTriagePatients();
		updateControlsState();
	}

	private void clearContexts() 
	{
		clearGlobalContexts();
		form.getLocalContext().setSelectedTriagePatient(null);
		form.getLocalContext().setCurrentAttendance(null);
		form.getLocalContext().setCurrentEpisode(null);
	}

	@Override
	protected void onDyngrdPatientsCellButtonClicked(DynamicGridCell cell) 
	{
		if(cell.getValue() != null && cell.getValue() instanceof DynamicGridCellTable)
		{
			DynamicGridCellTable helper = (DynamicGridCellTable)cell.getValue();
			if(helper.getFiredCell() != null && helper.getFiredCell().getIdentifier() != null)
			{
				if (helper.getFiredCell().getIdentifier() instanceof Integer)
	            {
					String identifier = (String)helper.getFiredCell().getIdentifier();
	                engine.showMessage("Cell with identifier " + identifier + " was fired");
	            }
			}
		}
	}

	@Override
	protected void onBtnReferToSpecialtyClick()	throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.EDReferralToSpecialtyDialog);//WDEV-16777
	}

	@Override
	protected void onBtnMovePatientClick() throws PresentationLogicException 
	{
		if(form.getLocalContext().getSelectedTriagePatient() == null)
			return;
		
		form.getLocalContext().setOldTrackingArea(form.getLocalContext().getSelectedTriagePatient().getCurrentArea());
		engine.open(form.getForms().Emergency.SendToAreaDialog, new Object[] {Boolean.TRUE});
	}

	@Override
	protected void onBtnViewHistoryClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.AttendanceHistory);
	}

	@Override
	protected void onBtnPatientSummaryClick() throws PresentationLogicException 
	{
		if(form.getLocalContext().getSelectedTriagePatient() == null)
			return;
		
		form.getGlobalContext().Core.setImsReportId(EMERGENCY_PATIENT_SUMMARY);
		engine.open(form.getForms().Core.PrintReportByIMSId, new Object[] {CARE_CONTEXT_SEED, form.getLocalContext().getSelectedTriagePatient().getAttendance().getCareContext().getID_CareContext()});
	}

	@Override
	protected void onBtnTrackingSummaryClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.TrackingSummary);
	}

	@Override
	protected void onBtnTrackingClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().Emergency.Tracking);
	}

	@Override
	protected void onGrdAttendanceHistorySelectionChanged()	throws PresentationLogicException 
	{
		selectedAttendanceHistory();
	}

	private void selectedAttendanceHistory() 
	{
		form.getLocalContext().setHistoryMode(false);
		
			
		if(form.grdAttendanceHistory().getValue() instanceof EmergencyAttendanceForTriageLiteVo)
		{
			if (form.getLocalContext().getCurrentAttendance() == null) //WDEV-15951, wdev-16751
			{
				EmergencyAttendanceForTriageLiteVo attendance = domain.getEmergencyAttendance((EmergencyAttendanceRefVo) form.grdAttendanceHistory().getValue());
				
				if (attendance.getDischargeDateTime() == null)
				{
					form.getLocalContext().setCurrentAttendance(attendance);
				}
			}
			
			if(!form.grdAttendanceHistory().getValue().equals(form.getLocalContext().getCurrentAttendance()))
			{
				form.getLocalContext().setHistoryMode(true);
				form.getLocalContext().setMessageBoxIdForOldEmergencyAttendance(engine.showMessage("Do you wish to view the triage details for the attendance on " + ((EmergencyAttendanceForTriageLiteVo) form.grdAttendanceHistory().getValue()).getRegistrationDateTime(), "" , MessageButtons.YESNO, MessageIcon.QUESTION));
			}
			else
			{
				form.getLocalContext().setSelectedTriagePatient(domain.geTrackingForTriageByAttendanceId((EmergencyAttendanceForTriageLiteVo) form.grdAttendanceHistory().getValue()));
				form.dyngrdPatients().setValue(form.getLocalContext().getSelectedTriagePatient());
				
				populateScreenFromData();
				updateControlsState();
			}
		}
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if(form.getLocalContext().getMessageBoxIdForOldEmergencyAttendanceIsNotNull() && form.getLocalContext().getMessageBoxIdForOldEmergencyAttendance().equals(messageBoxId))
		{
			if(DialogResult.YES.equals(result) && form.grdAttendanceHistory().getValue() instanceof EmergencyAttendanceForTriageLiteVo)
			{
				form.getLocalContext().setSelectedTriagePatient(domain.geTrackingForTriageByAttendanceId((EmergencyAttendanceForTriageLiteVo) form.grdAttendanceHistory().getValue()));
				form.dyngrdPatients().setValue(form.getLocalContext().getSelectedTriagePatient());
				form.getLocalContext().setCurrentAttendance(null);
				
				populateScreenFromData();
				updateControlsState();
			}
			else if (DialogResult.NO.equals(result) && form.grdAttendanceHistory().getValue() instanceof EmergencyAttendanceForTriageLiteVo)//WDEV-15868
			{
				form.getLocalContext().setHistoryMode(false);
				form.grdAttendanceHistory().setValue(form.getLocalContext().getSelectedTriagePatient().getAttendance());
			}
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		//WDEV-15951
		if (form.getLocalContext().getHistoryMode() == null)
		{
			form.getLocalContext().setHistoryMode(false);
		}
		
		if(form.getForms().Emergency.SendToAreaDialog.equals(formName))
		{
			if(DialogResult.OK.equals(result))
			{
				if(hasCurentTrackingPriority())
				{
					saveTrackingWithWaitingToBeSeenStatus();
					clearGlobalContexts();
				}
			}
		}
		
		open();
	}
	
	private void saveTrackingWithWaitingToBeSeenStatus() 
	{
		if(form.getLocalContext().getSelectedTriagePatient() == null)
			return;
		
		form.getLocalContext().setSelectedTriagePatient(domain.getTrackingForTriage(form.getLocalContext().getSelectedTriagePatient()));
		TrackingForTriageVo tracking = populateTrackingWithWaitingToBeSeenStatus((TrackingForTriageVo) form.getLocalContext().getSelectedTriagePatient().clone());
		
		if(tracking == null)
			return;
		
		String[] errors = tracking.validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		try 
		{
			form.getLocalContext().setSelectedTriagePatient(domain.saveTracking(tracking,null));	//wdev-15930
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
	}

	private TrackingForTriageVo populateTrackingWithWaitingToBeSeenStatus(TrackingForTriageVo tracking) 
	{
		if(tracking == null)
			return null;
		
		tracking.setCurrentStatus(createTrackingStatus(TrackingStatus.WAITING_TO_BE_SEEN_BY_A_MEDIC));
		
		return tracking;
	}

	private TrackingAttendanceStatusVo createTrackingStatus(TrackingStatus waitingToBeSeenByAMedic) 
	{
		TrackingAttendanceStatusVo status = new TrackingAttendanceStatusVo();
		
		status.setPatient(form.getGlobalContext().Core.getPatientShort());
		status.setEpisode(form.getGlobalContext().Core.getEpisodeofCareShort());
		status.setAttendance(form.getGlobalContext().Core.getCurrentCareContext());
		status.setTrackingArea(form.getLocalContext().getOldTrackingArea());
		status.setStatusDatetime(new DateTime());
		
		Object mos = domain.getMosUser();
		if(mos instanceof MemberOfStaffRefVo)
		{
			status.setCreatedBy((MemberOfStaffRefVo) mos);
		}
		
		status.setStatus(waitingToBeSeenByAMedic);
		//WDEV-16777
		status.setPrevStatus((form.getLocalContext().getSelectedTriagePatient()!=null && form.getLocalContext().getSelectedTriagePatient().getCurrentStatus()!=null  ) ? form.getLocalContext().getSelectedTriagePatient().getCurrentStatus().getStatus() : null);
		
		return status;
	}

	private boolean hasCurentTrackingPriority() 
	{
		if(form.getLocalContext().getSelectedTriagePatient() != null && form.getLocalContext().getSelectedTriagePatient().getTriageDetails() != null && form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriagePriority() != null)
			return true;
		
		return false;
	}

	class TriageLOSComparator implements Comparator<TrackingListForTriageVo>
	{
		private int order =1;
		public TriageLOSComparator()
		{
			order = 1;
		}
		public TriageLOSComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order)?-1:1;
		}
		public int compare(TrackingListForTriageVo o1, TrackingListForTriageVo o2)
		{
			if (o1 != null && o1.getAttendance() != null && o1.getAttendance().getRegistrationDateTime() != null && o2!=null && o2.getAttendance() != null && o2.getAttendance().getRegistrationDateTime() != null)
			{
				Integer LOS1 = calculateDateDiffInMinutes(new DateTime(), o1.getAttendance().getRegistrationDateTime());
				Integer LOS2 = calculateDateDiffInMinutes(new DateTime(), o2.getAttendance().getRegistrationDateTime());
				
				return order*LOS1.compareTo(LOS2);
			}
			if (o1 == null || o1.getAttendance() == null || o1.getAttendance().getRegistrationDateTime() == null)
				return -1*order;
			if (o2 == null || o2.getAttendance() == null || o2.getAttendance().getRegistrationDateTime() == null)
				return order;
			
			return 0;
		}	
	}

	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException 
	{
		System.out.println("Triage timer = " + ConfigFlag.UI.ED_TRIAGE_AUTO_REFRESH_TIME_MINUTES.getValue());
		open();
	}

	@Override
	protected void onCcDischargeValueChanged() throws PresentationLogicException 
	{
		if(DischargeDetails_CustomEvents.FORMMODECHANGED.equals(form.lyrPatientTriage().tabDischarge().ccDischarge().getCustomEvent()))
		{
			FormMode dischargeMode = form.lyrPatientTriage().tabDischarge().ccDischarge().getMode();
			form.setMode(dischargeMode);
			
			form.getTimers().gettimerTriage().setEnabled(FormMode.VIEW.equals(dischargeMode));
			
			Boolean isDischarged = form.lyrPatientTriage().tabDischarge().ccDischarge().getRecordedDischarge();
			
			if(isDischarged)
			{
				clearGlobalContexts();
			}
			
			if(FormMode.VIEW.equals(form.getMode()))
			{
				open();
				
				if(form.getLocalContext().getSelectedTriagePatient() == null)
				{
					form.lyrPatientTriage().showtabNotes();
				}
			}
			
			form.lyrPatientTriage().tabDischarge().ccDischarge().clearCustomEvent();
		}
	}

	private void clearGlobalContexts() 
	{
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().Core.setEpisodeofCareShort(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().Emergency.setTracking(null);
		form.getGlobalContext().Emergency.setTriage(null);
	}

	@Override
	protected void onCcPatientMedsValueChanged() throws PresentationLogicException 
	{
		FormMode patMedsMode = form.lyrPatientTriage().tabPatientMeds().ccPatientMeds().getMode();
		form.setMode(patMedsMode);
		
		form.getTimers().gettimerTriage().setEnabled(FormMode.VIEW.equals(patMedsMode));
	}

	@Override
	protected void onCcRelevantPMHValueChanged() throws PresentationLogicException 
	{
		FormMode relevPMHMode = form.lyrPatientTriage().tabRelevantPMH().ccRelevantPMH().getMode();
		form.setMode(relevPMHMode);
		
		form.getTimers().gettimerTriage().setEnabled(FormMode.VIEW.equals(relevPMHMode));
	}

	@Override
	protected void onCcSuppValueChanged() throws PresentationLogicException 
	{
		FormMode suppMode = form.lyrPatientTriage().tabSupport().ccSupp().getMode();
		form.setMode(suppMode);
		
		form.getTimers().gettimerTriage().setEnabled(FormMode.VIEW.equals(suppMode));
	}

	@Override
	protected void onBtnEditMainProblemClick() throws PresentationLogicException 
	{
		if(form.getLocalContext().getSelectedTriagePatient() == null || form.getLocalContext().getSelectedTriagePatient().getTriageDetails() == null || form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriageAssessment() == null)
			return;
		
		form.getGlobalContext().Emergency.setMainPresentingProblem(null);
		form.getGlobalContext().Emergency.setTriageProtocolAssessment(form.getLocalContext().getSelectedTriagePatient().getTriageDetails().getCurrentTriageAssessment());
		engine.open(form.getForms().Emergency.TriageProtocolAssessment);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.OtherProblemsTriageMenu.ADD:
				form.getGlobalContext().Emergency.setMainPresentingProblem(null);
				form.getGlobalContext().Emergency.setTriageProtocolAssessment(null);
				engine.open(form.getForms().Emergency.TriageProtocolAssessment);
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.OtherProblemsTriageMenu.EDIT:
				form.getGlobalContext().Emergency.setMainPresentingProblem(null);
				form.getGlobalContext().Emergency.setTriageProtocolAssessment(form.grdProblem().getValue());
				engine.open(form.getForms().Emergency.TriageProtocolAssessment);
			break;
		}
	}

	@Override
	protected void onCcAlertValueChanged() throws PresentationLogicException 
	{
		open();
	}

	@Override
	protected void onCcAllergyValueChanged() throws PresentationLogicException 
	{
		open();
	}

	@Override
	protected void onFormClosing(CancelArgs args) throws PresentationLogicException 
	{
		deletePatientImages();
	}

	// 	WDEV-16012
	@Override
	protected void onLnkReturnToListClick() throws PresentationLogicException 
	{
		FormName previousForm = engine.getPreviousNonDialogFormName();
		
		if(previousForm != null)
		{
			engine.open(previousForm);
		}
	}

	//WDEV-15996
	@Override
	protected void onlyrPatientTriageTabChanged(LayerBridge tab)
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
    		if (tab.equals(form.lyrPatientTriage().tabObs2()))
    		{
    			//form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().initialize();
    			initializeObsLayerTabs();
    		}
    		updateControlsState();
		}
	}

	//WDEV-15996
	@Override
	protected void onlyrObs2TabChanged(LayerBridge tab)
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
    		if (tab.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns()))
    		{
    			form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().initialize();
    		}
    		else if (tab.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis()))
    		{
    			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().initialize();
    		}
    		else if (tab.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox()))
    		{
    			form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().initialize();
    		}
    		else if (tab.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG()))
    		{
    			form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().initialize();
    		}
    		else if (tab.equals(form.lyrPatientTriage().tabObs2().lyrObs2().tabOther()))
    		{
    			form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().initialize();
    		}
    		updateControlsState();
		}
	}

	//WDEV-15996
	@Override
	protected void onCcVitalSignsObsValueChanged() throws PresentationLogicException
	{
		FormMode vitalSignsObsMode = form.lyrPatientTriage().tabObs2().lyrObs2().tabVitalSigns().ccVitalSignsObs().getMode();
		form.setMode(vitalSignsObsMode);
		
		form.getTimers().gettimerTriage().setEnabled(FormMode.VIEW.equals(vitalSignsObsMode));
	}

	//WDEV-15996
	@Override
	protected void onCcUrinalysisValueChanged() throws PresentationLogicException
	{
		FormMode urinalysisMode = form.lyrPatientTriage().tabObs2().lyrObs2().tabUrinalysis().ccUrinalysis().getMode();
		form.setMode(urinalysisMode);
		
		form.getTimers().gettimerTriage().setEnabled(FormMode.VIEW.equals(urinalysisMode));
	}

	//WDEV-15996
	@Override
	protected void onCcUrineToxValueChanged() throws PresentationLogicException
	{
		FormMode urineToxMode = form.lyrPatientTriage().tabObs2().lyrObs2().tabUrineTox().ccUrineTox().getMode();
		form.setMode(urineToxMode);
		
		form.getTimers().gettimerTriage().setEnabled(FormMode.VIEW.equals(urineToxMode));
	}

	//WDEV-15996
	@Override
	protected void onCcHCGValueChanged() throws PresentationLogicException
	{
		FormMode hcgMode = form.lyrPatientTriage().tabObs2().lyrObs2().tabHCG().ccHCG().getMode();
		form.setMode(hcgMode);
		
		form.getTimers().gettimerTriage().setEnabled(FormMode.VIEW.equals(hcgMode));
	}

	//WDEV-15996
	@Override
	protected void onCcPatientAssessmentValueChanged() throws PresentationLogicException
	{
		FormMode patAssessmentMode = form.lyrPatientTriage().tabObs2().lyrObs2().tabOther().ccPatientAssessment().getMode();
		form.setMode(patAssessmentMode);
		
		form.getTimers().gettimerTriage().setEnabled(FormMode.VIEW.equals(patAssessmentMode));
	}
}
