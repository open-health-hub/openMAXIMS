//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4785.23502)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.attendancenotescc;

import ims.clinical.configuration.vo.ClinicalProblemRefVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.CareContextShortVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.domain.exceptions.StaleObjectException;
import ims.emergency.forms.attendancenotescc.GenForm.GroupRadioFilterEnumeration;
import ims.emergency.vo.AttendanceClinicalNotesVo;
import ims.emergency.vo.AttendanceClinicalNotesVoCollection;
import ims.emergency.vo.AttendanceNotesSearchCriteriaVo;
import ims.emergency.vo.enums.EdAssessment_CustomControlsEvents;
import ims.emergency.vo.lookups.AttendanceClinicalNoteType;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			doRIE();
			
			//WDEV-17337
			form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.RIE);
			form.fireCustomControlValueChanged();
		}
		
		//open();
		doSearch();
		if(formName.equals(form.getForms().Emergency.AttendanceClinicalNoteDialog))
		{
			form.grdNotes().setValue(form.getGlobalContext().Emergency.getAttendanceClinicalNotes());
			
			//WDEV-17337
			if (DialogResult.OK.equals(result))
			{
				form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
				form.fireCustomControlValueChanged();
			}
			else
			{
				form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.CANCEL);
				form.fireCustomControlValueChanged();
			}
			
		}
		
		updateControlsState();
	}
	
	private void doRIE() 
	{
		boolean isStale = false;
		if(form.getLocalContext().getRIERecord() instanceof AttendanceClinicalNotesVo)
		{
			if(domain.isStale((AttendanceClinicalNotesVo)form.getLocalContext().getRIERecord()))
			{
				isStale = true;
			}
		}
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		try 
		{
			domain.markAsRie(form.getLocalContext().getRIERecord(), engine.getFormName(), form.getLocalContext().getPatient().getID_Patient(), null, form.getLocalContext().getCareContext().getID_CareContext(), form.getGlobalContext().Core.getRieMessage());
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}
	
	@Override
	protected void onBtnRIEClick() throws ims.framework.exceptions.PresentationLogicException
	{
		markAsRIE();
	}

	private void markAsRIE() 
	{
		if(form.grdNotes().getValue() == null)
			return;
		
		form.getLocalContext().setRIERecord(form.grdNotes().getValue());
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		editAttendanceClinicalNote();
	}
	@Override
	protected void onGrdNotesSelectionChanged()
	{
		updateControlsState();
	}
	@Override
	protected void onBtnNoteClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newAttendanceClinicalNote();
	}
	
	private void newAttendanceClinicalNote()
	{
		form.getGlobalContext().Emergency.setAttendanceClinicalNotes(null);
		if (form.getForms().Emergency.EDTriageWorklistToAssessmentForm.equals(form.getLocalContext().getparentFormName()))
		{
			engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {AttendanceClinicalNoteType.TRIAGE, null, form.getLocalContext().getPresentingProblem()});
		}
		else if (form.getForms().Emergency.EDClinicianWorklistToAssessmentForm.equals(form.getLocalContext().getparentFormName()))
		{
			//WDEV-17270
			engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {AttendanceClinicalNoteType.MEDIC, null, form.getLocalContext().getPresentingProblem()});
		}
		
	}
	
	private void editAttendanceClinicalNote()
	{
		form.getGlobalContext().Emergency.setAttendanceClinicalNotes(form.grdNotes().getValue());
		engine.open(form.getForms().Emergency.NoteCorrectionDialog,new Object[] {form.grdNotes().getValue()});  //wdev-17113
		//engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog);
		//engine.open(form.getForms().Emergency.AttendanceClinicalNoteDialog, new Object[] {AttendanceClinicalNoteType.TRIAGE});
	}
	
	
	public void initialize(PatientRefVo patient, EpisodeOfCareRefVo episodeOfCare, CareContextRefVo careContext, ClinicalProblemRefVo presentingProblem, FormName parentFormName)
	{
		form.getLocalContext().setIsEnabled(true);
		
		form.getLocalContext().setPatient(patient);
		form.getLocalContext().setEpisodeOfCare(episodeOfCare);
		form.getLocalContext().setCareContext(careContext);
		form.getLocalContext().setPresentingProblem(presentingProblem);
		form.getLocalContext().setparentFormName(parentFormName);
		
		form.ccInterventionDiagnosisInvestigations().initialize(patient, episodeOfCare, careContext, false);
		populateAttendanceCombo(domain.getCareContextsByPatient(patient));
		loadHcpDisciplines();//WDEV-17264
		
		//WDEV-17260
		Object hcp = domain.getHcpLiteUser();
		if (hcp !=null && hcp instanceof HcpLiteVo)
		{
			form.getLocalContext().setLoggedHCP((HcpRefVo) hcp);
			//HcpLiteVo hcpLite = (HcpLiteVo)hcp;//WDEV-17227
			//form.cmbDiscipline().setValue(hcpLite.getHcpType());//WDEV-17227
			//form.cmbSpecialty().setValue(domain.getSpecialtyForHCP(hcpLite, hcpLite.getHcpType()));//WDEV-17227
		}
		
		//WDEV-17227
		/*
		if (form.getForms().Emergency.EDTriageWorklistToAssessmentForm.equals(form.getLocalContext().getparentFormName()))
		{
			form.cmbNoteType().setValue(AttendanceClinicalNoteType.TRIAGE);
		}
		else if (form.getForms().Emergency.EDClinicianWorklistToAssessmentForm.equals(form.getLocalContext().getparentFormName()))
		{
			form.cmbNoteType().setValue(AttendanceClinicalNoteType.MEDIC);
		}
	
		*/
		
		clearSearchControls();
		// Populate search criteria to screen from persistent global context
		
		if (form.getGlobalContext().Emergency.getAttendanceNotesSearchCriteria()!=null)
		{
			populateSearchControls(form.getGlobalContext().Emergency.getAttendanceNotesSearchCriteria());
			form.cmbAttendance().setValue(form.getGlobalContext().Core.getCurrentCareContext());
		}
		else
		{
			defaultValueForSearchControle();
		}
		//end WDEV-17227
		
		doSearch();
	}
	
	//WDEV-17264
	private void loadHcpDisciplines()
	{
		form.cmbDiscipline().clear();
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(domain.getLookupService());
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).isActive() == true && lookupCollection.get(x).getParent() == null)
				form.cmbDiscipline().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	
	//WDEV-17227
	private void defaultValueForSearchControle()
	{
		form.GroupRadioFilter().setValue(GroupRadioFilterEnumeration.rdoLatestFirst);
		form.cmbAttendance().setValue(form.getGlobalContext().Core.getCurrentCareContext());
	}
	//WDEV-17227
	private void populateSearchControls(AttendanceNotesSearchCriteriaVo attendanceNotesSearchCriteria)
	{
		clearSearchControls();
		if (attendanceNotesSearchCriteria==null)
		{
			return;
		}
		
		form.cmbDiscipline().setValue(attendanceNotesSearchCriteria.getDiscipline());
		form.cmbNoteType().setValue(attendanceNotesSearchCriteria.getNoteType());
		form.cmbSpecialty().setValue(attendanceNotesSearchCriteria.getSpecialty());
		form.GroupRadioFilter().setValue(Boolean.TRUE.equals(attendanceNotesSearchCriteria.getLatestFirst()) ? GroupRadioFilterEnumeration.rdoLatestFirst  :GroupRadioFilterEnumeration.rdoOldestFirst);
	}
	private void populateAttendanceCombo(CareContextShortVoCollection collCareContext)
	{
		form.cmbAttendance().clear();
		if (collCareContext==null || collCareContext.size()==0)
			return;
		
		for (int i=0;i<collCareContext.size();i++)
		{
			CareContextShortVo careContex = collCareContext.get(i);
			form.cmbAttendance().newRow(careContex, getTextToDisplayInAttendanceCombo(careContex));
		}
	}
	
	private String getTextToDisplayInAttendanceCombo(CareContextShortVo careContex)
	{
		if (careContex==null)
			return null;
		
		return (careContex.getStartDateTimeIsNotNull() ? careContex.getStartDateTime():"")
			   +(careContex.getResponsibleHCPIsNotNull() ? " - "+careContex.getResponsibleHCP().getIHcpName()  : "")
			   +(careContex.getEndDateTimeIsNotNull() ? " - "+careContex.getEndDateTime() : "");
	}

	private void populateGrid(AttendanceClinicalNotesVoCollection collAttendanceClinicalNotes) 
	{
		form.grdNotes().getRows().clear();

		if (collAttendanceClinicalNotes == null || collAttendanceClinicalNotes.size() == 0)
			return;
		
		for(AttendanceClinicalNotesVo note : collAttendanceClinicalNotes)
		{
			if(note == null)
				continue;
			
			addNoteRow(note);
		}
	}

	private void addNoteRow(AttendanceClinicalNotesVo note) 
	{
		if(note == null)
			return;
		
		ims.emergency.forms.attendancenotescc.GenForm.grdNotesRow row = form.grdNotes().getRows().newRow();
		
		StringBuffer sb = new StringBuffer();
		
		if(note.getAuthoringInformationIsNotNull())
		{
			sb.append("<b>" + note.getAuthoringInformation().getAuthoringDateTime());
			
			if(note.getAuthoringInformation().getAuthoringHcpIsNotNull())
			{
				if(sb.length() > 0)
					sb.append(" - ");
				
				sb.append(note.getAuthoringInformation().getAuthoringHcp().getIHcpName());
			}
			
			sb.append("</b>");
		}
		
		sb.append("<br><br>");
		sb.append(note.getClinicalNote());
		
		row.setColNote(Boolean.TRUE.equals(note.getIsCorrected()) ? "<s>" + sb.toString() + "</s>" : sb.toString());//WDEV-17234
		//wdev-17113
		if( Boolean.TRUE.equals(note.getIsCorrected()) )
		{
			StringBuffer sb1 = new StringBuffer();
			String hcp = "<b>" + "Correcting HCP : " +  "</b>";			//wdev-17317
			String datec = "<b>" +  "Correction Date/Time : " + "</b>";
			if(note.getCorrectedAuthoringInformationIsNotNull())
			{
				hcp +=  note.getCorrectedAuthoringInformation().getAuthoringHcp().getName().toString();
				datec += note.getCorrectedAuthoringInformation().getAuthoringDateTime().toString();
			}
			
			sb1.append(hcp);
			sb1.append("<br>");
			sb1.append(datec );
			sb1.append("<br>");
			sb1.append("<b>" + "Correction Comments : "+ "</b>" + (note.getCorrectionComments() != null ? note.getCorrectionComments():""));
			row.setTooltip(sb1.toString());
			
			row.setBackColor(ConfigFlag.UI.CORRECTION_ROW_COLOUR.getValue());
		}
		row.setValue(note);
	}

	private void updateControlsState() 
	{
		boolean noteWasCreatedByCurrentUser = form.grdNotes().getValue()!=null && form.grdNotes().getValue().getAuthoringInformation()!=null && form.grdNotes().getValue().getAuthoringInformation().getAuthoringHcp()!=null && form.grdNotes().getValue().getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getLoggedHCP()); //WDEV-17260
		form.btnNote().setVisible(true);
		form.btnNote().setEnabled(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()));
		form.btnEdit().setEnabled(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdNotes().getValue() != null && !Boolean.TRUE.equals(form.grdNotes().getValue().getIsCorrected()) && (noteWasCreatedByCurrentUser || userHasRightToCorrect(form.grdNotes().getValue()))); //wdev-17113 //WDEV-17260 //WDEV-17304
		form.btnRIE().setEnabled(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdNotes().getValue() != null);
		
		form.ccInterventionDiagnosisInvestigations().setEnabled(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()));
		
		form.getContextMenus().Emergency.getAttendanceClinicalNoteMenuNEWItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()));
		form.getContextMenus().Emergency.getAttendanceClinicalNoteMenuEDITItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdNotes().getValue() != null && !Boolean.TRUE.equals(form.grdNotes().getValue().getIsCorrected()) && (noteWasCreatedByCurrentUser || (userHasRightToCorrect(form.grdNotes().getValue()))));  //wdev-17113 //WDEV-17260 //WDEV-17304
		form.getContextMenus().Emergency.getAttendanceClinicalNoteMenuRIEItem().setVisible(form.getLocalContext().getCareContextIsNotNull() && Boolean.TRUE.equals(form.getLocalContext().getIsEnabled()) && form.grdNotes().getValue() != null);
		
		//WDEV-17219
		form.GroupRadioFilter().setEnabled(form.getLocalContext().getCareContextIsNotNull());
		form.cmbAttendance().setEnabled(form.getLocalContext().getCareContextIsNotNull());
		form.cmbNoteType().setEnabled(form.getLocalContext().getCareContextIsNotNull());
		form.cmbDiscipline().setEnabled(form.getLocalContext().getCareContextIsNotNull());
		form.cmbSpecialty().setEnabled(form.getLocalContext().getCareContextIsNotNull());
		
		form.imbSearch().setEnabled(form.getLocalContext().getCareContextIsNotNull());
		form.imbClear().setEnabled(form.getLocalContext().getCareContextIsNotNull());
	}

	//WDEV-17260 //WDEV-17304
	private boolean userHasRightToCorrect(AttendanceClinicalNotesVo attendanceClinicalNotesVo)
	{	
		if (form.getForms().Emergency.EDTriageWorklistToAssessmentForm.equals(form.getLocalContext().getparentFormName()))
		{
			return AttendanceClinicalNoteType.TRIAGE.equals(attendanceClinicalNotesVo.getNoteType()) && engine.hasRight(AppRight.ED_ALLOW_CORRECTION_OF_ANY_TRIAGE_NOTE); //WDEV-17304
		}
		else if (form.getForms().Emergency.EDClinicianWorklistToAssessmentForm.equals(form.getLocalContext().getparentFormName()))
		{
			return AttendanceClinicalNoteType.MEDIC.equals(attendanceClinicalNotesVo.getNoteType()) && engine.hasRight(AppRight.ED_ALLOW_CORRECTION_OF_ANY_MEDIC_NOTE);//WDEV-17304
		}
		
		return false;
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.AttendanceClinicalNoteMenu.NEW:
				newAttendanceClinicalNote();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.AttendanceClinicalNoteMenu.EDIT:
				editAttendanceClinicalNote();
			break;
			
			case GenForm.ContextMenus.EmergencyNamespace.AttendanceClinicalNoteMenu.RIE:
				markAsRIE();
				break;
		}
	}
	
	public void setEnabled(Boolean value)
	{
		form.getLocalContext().setIsEnabled(value);
		updateControlsState();
	}

	public void clear() //WDEV-17688
	{
		form.grdNotes().getRows().clear();
		clearSearchControls();//WDEV-17227

		updateControlsState();
	}
	
	//WDEV-17227
	private void clearSearchControls()
	{
		form.cmbAttendance().setValue(null);
		form.cmbNoteType().setValue(null);
		form.cmbDiscipline().setValue(null);
		form.cmbSpecialty().setValue(null);
	}
	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		clear();
		//WDEV-17227
		form.getGlobalContext().Emergency.setAttendanceNotesSearchCriteria(null);
		defaultValueForSearchControle();
	}
	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		form.getGlobalContext().Emergency.setAttendanceNotesSearchCriteria(populateSearchCriteriaFromScreen());//WDEV-17227
		doSearch();	
		
		if (form.grdNotes().getRows().size() == 0)
			engine.showMessage("No records found.");
	}
	
	//WDEV-17227
	private AttendanceNotesSearchCriteriaVo populateSearchCriteriaFromScreen()
	{
		AttendanceNotesSearchCriteriaVo searchCriteriaVo=new AttendanceNotesSearchCriteriaVo();
		searchCriteriaVo.setDiscipline(form.cmbDiscipline().getValue());
		searchCriteriaVo.setSpecialty(form.cmbSpecialty().getValue());
		searchCriteriaVo.setNoteType(form.cmbNoteType().getValue());
		searchCriteriaVo.setLatestFirst(GroupRadioFilterEnumeration.rdoLatestFirst.equals(form.GroupRadioFilter().getValue()) ? Boolean.TRUE: Boolean.FALSE);
		return searchCriteriaVo;
	}
	private void doSearch()
	{
		populateGrid(domain.listNotes(form.getLocalContext().getPatient(), form.getLocalContext().getEpisodeOfCare(),form.cmbAttendance().getValue(),
				form.cmbNoteType().getValue(),form.cmbDiscipline().getValue(),form.cmbSpecialty().getValue(),(form.GroupRadioFilter().getValue().equals(GroupRadioFilterEnumeration.rdoLatestFirst) ? true:false)));
		
		updateControlsState();
	}
	
	public void refresh() 
	{
		doSearch();
		form.ccInterventionDiagnosisInvestigations().refresh();
		updateControlsState();
	}
	
	//WDEV-17337
	public EdAssessment_CustomControlsEvents getSelectedEvent()
	{
		return form.getLocalContext().getSelectedEvent();
	}
	
	//WDEV-17337
	public void resetSelectedEvent()
	{
		form.getLocalContext().setSelectedEvent(null);
	}
	
	//WDEV-17337
	protected void onCcInterventionDiagnosisInvestigationsValueChanged() throws PresentationLogicException
	{
		if (EdAssessment_CustomControlsEvents.SAVE.equals(form.ccInterventionDiagnosisInvestigations().getSelectedEvent()))
		{
			form.getLocalContext().setSelectedEvent(EdAssessment_CustomControlsEvents.SAVE);
			form.fireCustomControlValueChanged();
			
			form.ccInterventionDiagnosisInvestigations().resetSelectedEvent();
		}
		
	}
	
	//WDEV-17337
	public void refreshMainPresentingProblem(ClinicalProblemRefVo clinicalProblemRef)
	{
		form.getLocalContext().setPresentingProblem(clinicalProblemRef);
	}
}
