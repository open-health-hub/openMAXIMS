//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.forms.systemreviewnotesdialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrSystemReviewLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tab1Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem1Form = loader.loadComponent(129198, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
				//ims.framework.Control m_ccSystem1Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_ccSystem1Form, instance1 } );
				ims.framework.Control m_ccSystem1Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_ccSystem1Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem1Control);
				Menu[] menus1 = m_ccSystem1Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem1()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem1ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem1Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem1Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem1Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem1Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab2Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem2Form = loader.loadComponent(129198, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1002, skipContextValidation);
				//ims.framework.Control m_ccSystem2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1002), m_ccSystem2Form, instance1 } );
				ims.framework.Control m_ccSystem2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1002), m_ccSystem2Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem2Control);
				Menu[] menus1 = m_ccSystem2Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem2()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem2ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem2Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem2Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem2Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem2Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab3Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem3Form = loader.loadComponent(129198, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 2003, skipContextValidation);
				//ims.framework.Control m_ccSystem3Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2003), m_ccSystem3Form, instance1 } );
				ims.framework.Control m_ccSystem3Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2003), m_ccSystem3Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem3Control);
				Menu[] menus1 = m_ccSystem3Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem3()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem3ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem3Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem3Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem3Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem3Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab4Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem4Form = loader.loadComponent(129198, appForm, startControlID * 10 + 4000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 3004, skipContextValidation);
				//ims.framework.Control m_ccSystem4Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3004), m_ccSystem4Form, instance1 } );
				ims.framework.Control m_ccSystem4Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3004), m_ccSystem4Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem4Control);
				Menu[] menus1 = m_ccSystem4Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem4()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem4ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem4Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem4Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem4Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem4Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab5Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem5Form = loader.loadComponent(129198, appForm, startControlID * 10 + 5000, anchoringHelper5.getSize(), instance1, startTabIndex.intValue() + 4005, skipContextValidation);
				//ims.framework.Control m_ccSystem5Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4005), m_ccSystem5Form, instance1 } );
				ims.framework.Control m_ccSystem5Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4005), m_ccSystem5Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem5Control);
				Menu[] menus1 = m_ccSystem5Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem5()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem5ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem5Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem5Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem5Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem5Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab6Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem6Form = loader.loadComponent(129198, appForm, startControlID * 10 + 6000, anchoringHelper6.getSize(), instance1, startTabIndex.intValue() + 5006, skipContextValidation);
				//ims.framework.Control m_ccSystem6Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5006), m_ccSystem6Form, instance1 } );
				ims.framework.Control m_ccSystem6Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5006), m_ccSystem6Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem6Control);
				Menu[] menus1 = m_ccSystem6Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem6()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem6ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem6Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem6Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem6Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem6Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab7Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem7Form = loader.loadComponent(129198, appForm, startControlID * 10 + 7000, anchoringHelper7.getSize(), instance1, startTabIndex.intValue() + 6007, skipContextValidation);
				//ims.framework.Control m_ccSystem7Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 6007), m_ccSystem7Form, instance1 } );
				ims.framework.Control m_ccSystem7Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 6007), m_ccSystem7Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem7Control);
				Menu[] menus1 = m_ccSystem7Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem7()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem7ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem7Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem7Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem7Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem7Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab8Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem8Form = loader.loadComponent(129198, appForm, startControlID * 10 + 8000, anchoringHelper8.getSize(), instance1, startTabIndex.intValue() + 7008, skipContextValidation);
				//ims.framework.Control m_ccSystem8Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 7008), m_ccSystem8Form, instance1 } );
				ims.framework.Control m_ccSystem8Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 7008), m_ccSystem8Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem8Control);
				Menu[] menus1 = m_ccSystem8Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem8()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem8ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem8Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem8Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem8Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem8Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab9Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem9Form = loader.loadComponent(129198, appForm, startControlID * 10 + 9000, anchoringHelper9.getSize(), instance1, startTabIndex.intValue() + 8009, skipContextValidation);
				//ims.framework.Control m_ccSystem9Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8009), m_ccSystem9Form, instance1 } );
				ims.framework.Control m_ccSystem9Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1017),  new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8009), m_ccSystem9Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem9Control);
				Menu[] menus1 = m_ccSystem9Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem9()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem9ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem9Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem9Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem9Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem9Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab10Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem10Form = loader.loadComponent(129198, appForm, startControlID * 10 + 10000, anchoringHelper10.getSize(), instance1, startTabIndex.intValue() + 9010, skipContextValidation);
				//ims.framework.Control m_ccSystem10Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 9010), m_ccSystem10Form, instance1 } );
				ims.framework.Control m_ccSystem10Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019),  new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 9010), m_ccSystem10Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem10Control);
				Menu[] menus1 = m_ccSystem10Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem10()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem10ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem10Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem10Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem10Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem10Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab11Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem11Form = loader.loadComponent(129198, appForm, startControlID * 10 + 11000, anchoringHelper11.getSize(), instance1, startTabIndex.intValue() + 10011, skipContextValidation);
				//ims.framework.Control m_ccSystem11Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 10011), m_ccSystem11Form, instance1 } );
				ims.framework.Control m_ccSystem11Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1021),  new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 10011), m_ccSystem11Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem11Control);
				Menu[] menus1 = m_ccSystem11Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem11()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem11ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem11Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem11Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem11Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem11Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tab12Container extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 1008, 336, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccSystem12Form = loader.loadComponent(129198, appForm, startControlID * 10 + 12000, anchoringHelper12.getSize(), instance1, startTabIndex.intValue() + 11012, skipContextValidation);
				//ims.framework.Control m_ccSystem12Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(4), new Integer(8), new Integer(1008), new Integer(336), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 11012), m_ccSystem12Form, instance1 } );
				ims.framework.Control m_ccSystem12Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1023),  new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 11012), m_ccSystem12Form, instance1, Boolean.FALSE } );
				super.addControl(m_ccSystem12Control);
				Menu[] menus1 = m_ccSystem12Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.emergency.forms.systemsreviewcc.IComponent ccSystem12()
			{
				return (ims.emergency.forms.systemsreviewcc.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSystem12ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSystem12Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSystem12Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSystem12Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSystem12Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system1", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab1Container m_tab1Container = (tab1Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab1Container.class, m_tab1, factory);
			super.addContainer(m_tab1, m_tab1Container);
			ims.framework.utils.SizeInfo m_tab1DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
			m_tab1Container.setContext(form, appForm, m_tab1, loader, startControlID, m_tab1DesignSize, m_tab1RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab2 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system2", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab2Container m_tab2Container = (tab2Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab2Container.class, m_tab2, factory);
			super.addContainer(m_tab2, m_tab2Container);
			ims.framework.utils.SizeInfo m_tab2DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab2RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
			m_tab2Container.setContext(form, appForm, m_tab2, loader, startControlID, m_tab2DesignSize, m_tab2RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab3 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system3", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab3Container m_tab3Container = (tab3Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab3Container.class, m_tab3, factory);
			super.addContainer(m_tab3, m_tab3Container);
			ims.framework.utils.SizeInfo m_tab3DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab3RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
			m_tab3Container.setContext(form, appForm, m_tab3, loader, startControlID, m_tab3DesignSize, m_tab3RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab4 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system4", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab4Container m_tab4Container = (tab4Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab4Container.class, m_tab4, factory);
			super.addContainer(m_tab4, m_tab4Container);
			ims.framework.utils.SizeInfo m_tab4DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab4RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
			m_tab4Container.setContext(form, appForm, m_tab4, loader, startControlID, m_tab4DesignSize, m_tab4RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab5 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system5", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab5Container m_tab5Container = (tab5Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab5Container.class, m_tab5, factory);
			super.addContainer(m_tab5, m_tab5Container);
			ims.framework.utils.SizeInfo m_tab5DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab5RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
			m_tab5Container.setContext(form, appForm, m_tab5, loader, startControlID, m_tab5DesignSize, m_tab5RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab6 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system6", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab6Container m_tab6Container = (tab6Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab6Container.class, m_tab6, factory);
			super.addContainer(m_tab6, m_tab6Container);
			ims.framework.utils.SizeInfo m_tab6DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab6RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper18.getWidth(), anchoringHelper18.getHeight());
			m_tab6Container.setContext(form, appForm, m_tab6, loader, startControlID, m_tab6DesignSize, m_tab6RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab7 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system7", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab7Container m_tab7Container = (tab7Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab7Container.class, m_tab7, factory);
			super.addContainer(m_tab7, m_tab7Container);
			ims.framework.utils.SizeInfo m_tab7DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab7RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
			m_tab7Container.setContext(form, appForm, m_tab7, loader, startControlID, m_tab7DesignSize, m_tab7RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab8 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system8", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab8Container m_tab8Container = (tab8Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab8Container.class, m_tab8, factory);
			super.addContainer(m_tab8, m_tab8Container);
			ims.framework.utils.SizeInfo m_tab8DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab8RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
			m_tab8Container.setContext(form, appForm, m_tab8, loader, startControlID, m_tab8DesignSize, m_tab8RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab9 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system9", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab9Container m_tab9Container = (tab9Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab9Container.class, m_tab9, factory);
			super.addContainer(m_tab9, m_tab9Container);
			ims.framework.utils.SizeInfo m_tab9DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab9RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
			m_tab9Container.setContext(form, appForm, m_tab9, loader, startControlID, m_tab9DesignSize, m_tab9RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab10 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system10", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab10Container m_tab10Container = (tab10Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab10Container.class, m_tab10, factory);
			super.addContainer(m_tab10, m_tab10Container);
			ims.framework.utils.SizeInfo m_tab10DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab10RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
			m_tab10Container.setContext(form, appForm, m_tab10, loader, startControlID, m_tab10DesignSize, m_tab10RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab11 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system11", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab11Container m_tab11Container = (tab11Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab11Container.class, m_tab11, factory);
			super.addContainer(m_tab11, m_tab11Container);
			ims.framework.utils.SizeInfo m_tab11DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab11RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper23.getWidth(), anchoringHelper23.getHeight());
			m_tab11Container.setContext(form, appForm, m_tab11, loader, startControlID, m_tab11DesignSize, m_tab11RuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 2, 8, 1024, 376, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tab12 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"system12", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tab12Container m_tab12Container = (tab12Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tab12Container.class, m_tab12, factory);
			super.addContainer(m_tab12, m_tab12Container);
			ims.framework.utils.SizeInfo m_tab12DesignSize = new ims.framework.utils.SizeInfo(1024, 376);
			ims.framework.utils.SizeInfo m_tab12RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper24.getWidth(), anchoringHelper24.getHeight());
			m_tab12Container.setContext(form, appForm, m_tab12, loader, startControlID, m_tab12DesignSize, m_tab12RuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
		}
		public void settab1Enabled(boolean value)
		{
			tab1().setEnabled(value);
		}
		public void settab2Enabled(boolean value)
		{
			tab2().setEnabled(value);
		}
		public void settab3Enabled(boolean value)
		{
			tab3().setEnabled(value);
		}
		public void settab4Enabled(boolean value)
		{
			tab4().setEnabled(value);
		}
		public void settab5Enabled(boolean value)
		{
			tab5().setEnabled(value);
		}
		public void settab6Enabled(boolean value)
		{
			tab6().setEnabled(value);
		}
		public void settab7Enabled(boolean value)
		{
			tab7().setEnabled(value);
		}
		public void settab8Enabled(boolean value)
		{
			tab8().setEnabled(value);
		}
		public void settab9Enabled(boolean value)
		{
			tab9().setEnabled(value);
		}
		public void settab10Enabled(boolean value)
		{
			tab10().setEnabled(value);
		}
		public void settab11Enabled(boolean value)
		{
			tab11().setEnabled(value);
		}
		public void settab12Enabled(boolean value)
		{
			tab12().setEnabled(value);
		}
		public void showtab1()
		{
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
			tab1().setVisible(true);
		}
		public void showtab2()
		{
			tab1().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
			tab2().setVisible(true);
		}
		public void showtab3()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
			tab3().setVisible(true);
		}
		public void showtab4()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
			tab4().setVisible(true);
		}
		public void showtab5()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
			tab5().setVisible(true);
		}
		public void showtab6()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
			tab6().setVisible(true);
		}
		public void showtab7()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
			tab7().setVisible(true);
		}
		public void showtab8()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
			tab8().setVisible(true);
		}
		public void showtab9()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
			tab9().setVisible(true);
		}
		public void showtab10()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(false);
			tab10().setVisible(true);
		}
		public void showtab11()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab12().setVisible(false);
			tab11().setVisible(true);
		}
		public void showtab12()
		{
			tab1().setVisible(false);
			tab2().setVisible(false);
			tab3().setVisible(false);
			tab4().setVisible(false);
			tab5().setVisible(false);
			tab6().setVisible(false);
			tab7().setVisible(false);
			tab8().setVisible(false);
			tab9().setVisible(false);
			tab10().setVisible(false);
			tab11().setVisible(false);
			tab12().setVisible(true);
		}

		public tab1Container tab1()
		{
			return (tab1Container)super.layers.get(0);
		}
		public tab2Container tab2()
		{
			return (tab2Container)super.layers.get(1);
		}
		public tab3Container tab3()
		{
			return (tab3Container)super.layers.get(2);
		}
		public tab4Container tab4()
		{
			return (tab4Container)super.layers.get(3);
		}
		public tab5Container tab5()
		{
			return (tab5Container)super.layers.get(4);
		}
		public tab6Container tab6()
		{
			return (tab6Container)super.layers.get(5);
		}
		public tab7Container tab7()
		{
			return (tab7Container)super.layers.get(6);
		}
		public tab8Container tab8()
		{
			return (tab8Container)super.layers.get(7);
		}
		public tab9Container tab9()
		{
			return (tab9Container)super.layers.get(8);
		}
		public tab10Container tab10()
		{
			return (tab10Container)super.layers.get(9);
		}
		public tab11Container tab11()
		{
			return (tab11Container)super.layers.get(10);
		}
		public tab12Container tab12()
		{
			return (tab12Container)super.layers.get(11);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Emergency.SystemReviewCollection", "_cv_Emergency.SystemReviewCollection").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Emergency.SystemReviewCollection' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(1032, 424);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));


		// Layer Clasess
		lyrSystemReviewLayer m_lyrSystemReviewLayer = (lyrSystemReviewLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSystemReviewLayer.class, this, factory);
		super.addLayer(m_lyrSystemReviewLayer);
		m_lyrSystemReviewLayer.setContext(form, appForm, control, loader, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 951, 392, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 12014), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 872, 392, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 12013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}


	public lyrSystemReviewLayer lyrSystemReview()
	{
		return (lyrSystemReviewLayer)super.getLayer(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(12);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(13);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
