//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by George Cristian Josan using IMS Development Environment (version 1.80 build 4471.18200)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.attendanceresultlist;

import ims.configuration.gen.ConfigFlag;
import ims.emergency.forms.attendanceresultlist.GenForm.grdClinicalImagingRow;
import ims.emergency.forms.attendanceresultlist.GenForm.grdPathologyRow;
import ims.emergency.forms.attendanceresultlist.GenForm.grdPathologyRowCollection;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTimeFormat;
import ims.ocrr.vo.NewResultInvestigationVo;
import ims.ocrr.vo.OcsPathRadResultVo;
import ims.ocrr.vo.OcsPathRadResultVoCollection;
import ims.ocrr.vo.PathologyResultListShortVo;
import ims.ocrr.vo.PathologyResultListShortVoCollection;
import ims.ocrr.vo.PathologySpecimenLiteVo;
import ims.ocrr.vo.RadiologyResultListVo;
import ims.ocrr.vo.RadiologyResultListVoCollection;
import ims.ocrr.vo.ResultCommentsLiteVo;
import ims.ocrr.vo.ResultCommentsLiteVoCollection;
import ims.ocrr.vo.lookups.AuthorisationOrderStatus;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.OrderInvStatus;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers
	//-----------------------------------------------------------------------------------------------------------------------------------------

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		
		search();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		search();
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		search();
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		clear();
	}

	@Override
	protected void onGrdPathologySelectionChanged()
	{
		if (form.grdPathology().getSelectedRow() != null)
		{
			if (hasResults(form.grdPathology().getSelectedRow()))
			{
				viewPathologyResults();
			}
			else
			{
				viewPathologySelectedOrder();
			}
		}
	}

	private void viewPathologySelectedOrder()
	{
		if (form.grdPathology().getSelectedRow() != null
				&& form.grdPathology().getValue() != null)
		{
			PathologyResultListShortVo result = (PathologyResultListShortVo) form.grdPathology().getSelectedRow().getValue().getOrderInvestigation();
			
			if (result.getOrderDetails() != null)
			{
				form.getGlobalContext().OCRR.setResultDisplayDate(result.getDisplayDateTime().getDate());
				form.getGlobalContext().OCRR.PathologyResults.setOrder(result.getOrderDetails());
				
				if (AuthorisationOrderStatus.AWAITING_AUTHORISATION.equals(result.getOrderDetails().getAuthorisationOrderStatus()))
				{
					form.getGlobalContext().OCRR.setOrderAwaitingAuthorisation(result.getOrderDetails());
				}
				
				engine.open(form.getForms().OCRR.OrderSummaryDialog, true);
			}
		}
	}

	private void viewPathologyResults()
	{
		if (form.grdPathology().getSelectedRow() != null
				&& form.grdPathology().getValue() != null)
		{
			PathologyResultListShortVo result = (PathologyResultListShortVo) form.grdPathology().getSelectedRow().getValue().getOrderInvestigation();
			
			form.getGlobalContext().OCRR.setResultDisplayDate(result.getDisplayDateTime().getDate());
			form.getGlobalContext().OCRR.setSelectedPathRadResults(getSelectedPathologyInvestigations());
			form.getGlobalContext().OCRR.setCurrentPathRadResult(getCurrentInvestigation());
			
			engine.open(form.getForms().OCRR.ResultDialog, false);
		}
	}


	private OcsPathRadResultVo getCurrentInvestigation()
	{
		if (form.grdPathology().getSelectedRow() == null || form.grdPathology().getValue() == null)
			return null;
		
		PathologyResultListShortVo parentResult = (PathologyResultListShortVo) form.grdPathology().getSelectedRow().getValue().getOrderInvestigation();
		
		if (isStatusResulted(parentResult.getOrdInvCurrentStatus().getOrdInvStatus()))
			return form.grdPathology().getSelectedRow().getValue();
		
		
		grdPathologyRowCollection childRows = form.grdPathology().getSelectedRow().getRows();
		
		for (int i = 0; i < childRows.size(); i++)
		{
			grdPathologyRow childRow = childRows.get(i);
			
			PathologyResultListShortVo childResult = (PathologyResultListShortVo) childRow.getValue().getOrderInvestigation();
			
			if (isStatusResulted(childResult.getOrdInvCurrentStatus().getOrdInvStatus()))
				return childRow.getValue();
		}

		return null;
	}

	private OcsPathRadResultVoCollection getSelectedPathologyInvestigations()
	{
		OcsPathRadResultVoCollection results = new OcsPathRadResultVoCollection();

		for (int i = 0; i < form.grdPathology().getRows().size(); i++)
		{
			grdPathologyRow pathologyRow = form.grdPathology().getRows().get(i);

			PathologyResultListShortVo pathologyResult = pathologyRow.getColResultsDetails();

			if (pathologyResult != null && pathologyResult.getResultDetails() != null && pathologyResult.getResultDetails().getPathologyResultDetails() != null)
			{
				results.add(pathologyRow.getValue());
			}
			else if (pathologyRow.getRows() != null)
			{
				for (int j = 0; j < pathologyRow.getRows().size(); j++)
				{
					PathologyResultListShortVo pathChildResult = pathologyRow.getRows().get(j).getColResultsDetails();
					
					if (pathChildResult != null && pathChildResult.getResultDetails() != null && pathChildResult.getResultDetails().getPathologyResultDetails() != null)
					{
						results.add(pathologyRow.getRows().get(j).getValue());
					}
				}
			}
		}

		return results;
	}
	
	private OcsPathRadResultVoCollection getSelectedRadiologyResults()
	{
		OcsPathRadResultVoCollection results = new OcsPathRadResultVoCollection();
		
		for (int i = 0; i < form.grdClinicalImaging().getRows().size(); i++)
		{
			grdClinicalImagingRow radiologyRow = form.grdClinicalImaging().getRows().get(i);
			
			if (hasResults(radiologyRow))
			{
				results.add(radiologyRow.getValue());
			}
		}

		return results;
	}



	private boolean hasResults(grdPathologyRow selectedRow)
	{
		PathologyResultListShortVo resultParent = (PathologyResultListShortVo) selectedRow.getValue().getOrderInvestigation();
		
		if (isStatusResulted(resultParent.getOrdInvCurrentStatus().getOrdInvStatus()))
			return true;
		
		for (int i = 0; i < selectedRow.getRows().size(); i++)
		{
			grdPathologyRow childRow = selectedRow.getRows().get(i);
			
			PathologyResultListShortVo result = (PathologyResultListShortVo) childRow.getValue().getOrderInvestigation();
			
			if (isStatusResulted(result.getOrdInvCurrentStatus().getOrdInvStatus()))
				return true;
		}

		return false;
	}

	private boolean hasResults(grdClinicalImagingRow selectedRow)
	{
		RadiologyResultListVo result = (RadiologyResultListVo) selectedRow.getValue().getOrderInvestigation();
		
		return (result.getResultDetails() != null && result.getResultDetails().getClinicalResultDetails() != null);
	}

	private boolean isStatusResulted(OrderInvStatus status)
	{
		if (OrderInvStatus.NEW_RESULT.equals(status))
			return true;
		
		if (OrderInvStatus.CHECKED.equals(status))
			return true;
		
		if (OrderInvStatus.SEEN.equals(status))
			return true;
		
		if (OrderInvStatus.UPDATED_RESULT.equals(status))
			return true;
		
		if (OrderInvStatus.UNSEEN.equals(status))
			return true;
		
		if (OrderInvStatus.REVIEW.equals(status))
			return true;
		
		if (OrderInvStatus.COMPLETE.equals(status))
			return true;
		
		if (OrderInvStatus.RESULTED.equals(status))
			return true;

		return false;
	}

	@Override
	protected void onGrdClinicalImagingSelectionChanged()
	{
		if (form.grdClinicalImaging().getSelectedRow() != null)
		{
			if (hasResults(form.grdClinicalImaging().getSelectedRow()))
			{
				viewClinicalImagingResults();
			}
			else
			{
				viewClinicalImagingSelectOrder();
			}
		}
	}

	
	private void viewClinicalImagingSelectOrder()
	{
		form.getGlobalContext().OCRR.setCurrentPathRadResult(form.grdClinicalImaging().getValue());
		
		RadiologyResultListVo result = (RadiologyResultListVo) form.grdClinicalImaging().getValue().getOrderInvestigation();
		
		form.getGlobalContext().OCRR.PathologyResults.setOrder(result.getOrderDetails());
		form.getGlobalContext().OCRR.setLastUpdatedPathRadResult(null);

		if (AuthorisationOrderStatus.AWAITING_AUTHORISATION.equals(result.getOrderDetails().getAuthorisationOrderStatus()))
		{
			form.getGlobalContext().OCRR.setOrderAwaitingAuthorisation(result.getOrderDetails());
		}
		
		engine.open(form.getForms().OCRR.OrderSummaryDialog);
	}

	private void viewClinicalImagingResults()
	{
		form.getGlobalContext().OCRR.setSelectedPathRadResults(getSelectedRadiologyResults());
		form.getGlobalContext().OCRR.setCurrentPathRadResult(form.grdClinicalImaging().getValue());
		form.getGlobalContext().OCRR.setLastUpdatedPathRadResult(null);
		
		engine.open(form.getForms().OCRR.ResultDialog, false);
	}

	
	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Form Presentation functions
	//-----------------------------------------------------------------------------------------------------------------------------------------
	
	public void initialize()
	{
		// Populate 'Date from' and 'Date to' from GC CareContext
		// GC is mandatory and StartDateTime is mandatory for CareContext
		form.dteFrom().setValue(form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime() != null ? form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getDate() : null);
		form.dteTo().setValue(form.getGlobalContext().Core.getCurrentCareContext().getEndDateTime() != null ? form.getGlobalContext().Core.getCurrentCareContext().getEndDateTime().getDate() : new Date());
		
		form.btnClose().setVisible(engine.isDialog());//WDEV-17323
	}
	
	public void search()
	{
		String[] errors = validateSearchCriteria();
		
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return;
		}
		
		PathologyResultListShortVoCollection pathologyResults = domain.listPathology(form.getGlobalContext().Core.getPatientShort(), form.dteFrom().getValue(), form.dteTo().getValue());

		RadiologyResultListVoCollection clinicalImagingResults = domain.listClinicalImaging(form.getGlobalContext().Core.getPatientShort(), form.dteFrom().getValue(), form.dteTo().getValue());

		if ((pathologyResults == null || pathologyResults.size() == 0) && (clinicalImagingResults == null || clinicalImagingResults.size() == 0))
		{
			engine.showMessage("No results found.");
		}
		
		populatePathologyResults(pathologyResults);
		
		populateClinicalImagingResults(clinicalImagingResults);
	}
	
	private String[] validateSearchCriteria()
	{
		ArrayList<String> searchErrors = new ArrayList<String>();
		
		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null)
		{
			if (form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
			{
				searchErrors.add("From date cannot be set after To date.");
			}
		}
		
		return searchErrors.toArray(new String[searchErrors.size()]);
	}

	public void clear()
	{
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		
		clearInstanceControls();
	}
	
	public void clearInstanceControls()
	{
		form.grdPathology().getRows().clear();
		form.grdClinicalImaging().getRows().clear();
	}
	

	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Functions used to populate results to Pathology grid
	//-----------------------------------------------------------------------------------------------------------------------------------------

	private void populatePathologyResults(PathologyResultListShortVoCollection pathologyResults)
	{
		form.grdPathology().getRows().clear();
		
		if (pathologyResults == null)
			return;
		
		for (PathologyResultListShortVo result : pathologyResults)
		{
			grdPathologyRow parentRow = createOrFindSpecimenGridRow(result);
			
			if (parentRow == null)
				continue;
			
			grdPathologyRow row = null;
			
			if (parentRow.getColTestName() == null)
			{
				row = parentRow;
			}
			else
			{
				row = parentRow.getRows().newRow();
				row.setSelectable(false);
			}
			
			// Build row value OcsPathRadResultVo
			OcsPathRadResultVo valueResult = new OcsPathRadResultVo();
			
			valueResult.setCategory(Category.PATHOLOGY);
			valueResult.setOrderInvestigation(result);
			valueResult.setDescription(getDescriptionString(result.getInvestigation()));
			
			row.setValue(valueResult);
			
			
			// Set row columns
			
			// Specimen worklist item date to collect
			if (result.getDateRequested() != null)
			{
				row.setColDateRequested(result.getDateRequested().toString());
				row.setTooltipForColDateRequested(result.getDateRequested().toString());
			}
			
			// Date and Time display flag
			if (result.getDisplayFlag() != null)
			{
				row.setColDateTimeImage(result.getDisplayFlag().getImage());
				row.setTooltipForColDateTimeImage(result.getDisplayFlag().getText());
			}

			
			row.setColResultsDetails(result);
			
			// Test Name
			if (result.getInvestigation() != null
				&& result.getInvestigation().getInvestigationIndex() != null)
			{
				row.setColTestName(result.getInvestigation().getInvestigationIndex().getName());
			}
			
			// Specimen column
			String displaySpecimenSource = getSpecimenDisplayValue(result);  //wdev-15780
			
			row.setColSpecimen(displaySpecimenSource);
			row.setTooltipForColSpecimen(displaySpecimenSource);
			
			// Result status
			if (result.getResultStatus() != null)
				row.setColProvisionalFinal(result.getResultStatus().getText());
			
			// ABN
			if (result.getResultDetails() != null && result.getResultDetails().getPathologyResultDetails() != null && result.getResultDetails().getPathologyResultDetails().get(0) != null
				&& Boolean.TRUE.equals(result.getResultDetails().getPathologyResultDetails().get(0).getIsAbnormal()))
			{
				row.setColABN(form.getImages().Core.CriticalError);
				row.setTooltipForColABN("Abnormal Result");
			}
			
			
			Date dateUnseen = new Date().addDay(-1 * ConfigFlag.DOM.OCS_NEWRES_UNSEEN_CUTOFF.getValue());
			
			String displayStatusTooltip = getPathologyStatusTooltipValue(result, dateUnseen); 
			
			// Status
			OrderInvStatus currentStatus = result.getOrdInvCurrentStatus().getOrdInvStatus();
			
			if (currentStatus != null)
			{
				result.getOrdInvCurrentStatus().getOrdInvStatus();
				
				row.setColStatus(currentStatus.getImage());
				row.setTooltipForColStatus(displayStatusTooltip);
				
				boolean resultNewOrUpdated = (OrderInvStatus.NEW_RESULT.equals(currentStatus) || OrderInvStatus.UPDATED_RESULT.equals(currentStatus)) && result.getRepDateTime().getDate().isLessThan(dateUnseen);
				boolean resultForReview = OrderInvStatus.REVIEW.equals(currentStatus) && result.getOrdInvCurrentStatus().getChangeDateTime().getDate().isLessThan(dateUnseen);
				
				row.setBold(result.getRepDateTime() != null && dateUnseen != null && (resultNewOrUpdated || resultForReview));
			}
			
			// Discipline
			if (result.getInvestigation() != null
				&& result.getInvestigation().getProviderService() != null
				&& result.getInvestigation().getProviderService().getLocationService() != null
				&& result.getInvestigation().getProviderService().getLocationService().getService() != null)
			{
				row.setColDiscipline(result.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
			}
			
			// Ordering Location & Clinician (or GP)
			if (result.getOrderDetails() != null)
			{
				row.setColOrderingLocation(result.getOrderDetails().getCorrectLocation());
				row.setTooltipForColOrderingLocation(result.getOrderDetails().getCorrectLocation());
				
				row.setColClinician(result.getOrderDetails().getCorrectClinician());
				row.setTooltipForColClinician(result.getOrderDetails().getCorrectClinician());
			}
		}
	}


	private String getPathologyStatusTooltipValue(PathologyResultListShortVo result, Date dateUnseen)
	{
		if (result == null)
			return null;
		
		StringBuffer displayString = new StringBuffer();

		
		OrderInvStatus currentStatus = result.getOrdInvCurrentStatus().getOrdInvStatus();
		
		if (currentStatus != null)
		{
			displayString.append("<b>Current status: </b>").append(currentStatus.getText());
			
			if (OrderInvStatus.CANCELLED.equals(currentStatus)
				&& result.getOrdInvCurrentStatus().getStatusReason() != null
				&& result.getOrdInvCurrentStatus().getStatusReason().length() > 0)
			{
				displayString.append("<br><b>Current status reason: </b>").append(result.getOrdInvCurrentStatus().getStatusReason());
			}
			
			displayString.append("<br><b>Date changed: </b>").append(result.getOrdInvCurrentStatus().getChangeDateTime());

			if (result.getOrdInvCurrentStatus().getChangeUser() != null)
			{
				displayString.append("<br><b>Changed by: </b>").append(result.getOrdInvCurrentStatus().getChangeUser().toString());
			}
			
			if (result.getRepDateTime() != null && dateUnseen != null)
			{
				if (OrderInvStatus.NEW_RESULT.equals(currentStatus) || OrderInvStatus.UPDATED_RESULT.equals(currentStatus))
				{
					if (result.getRepDateTime().getDate().isLessThan(dateUnseen))
					{
						displayString.append("<br>Unseen");
					}
				}
				else if (OrderInvStatus.REVIEW.equals(currentStatus))
				{
					if (result.getOrdInvCurrentStatus().getChangeDateTime().getDate().isLessThan(dateUnseen))
					{
						displayString.append("<br>Requires Attention");
					}
					else
					{
						displayString.append("<br>").append(OrderInvStatus.REVIEW.toString());
					}
				}
			}
		}
		
		if (result.getSpecimen() != null && result.getSpecimen().size()>0 && result.getSpecimen().get(0) != null && result.getSpecimen().get(0).getResultConclusionComments() != null && result.getSpecimen().get(0).getResultConclusionComments().size() > 0) //WDEV-14677
		{
			ResultCommentsLiteVoCollection comments = result.getSpecimen().get(0).getResultConclusionComments();
			
			comments.sort(SortOrder.DESCENDING);
			ResultCommentsLiteVo lastComment = comments.get(0);
			
			displayString.append("<br><b>").append(lastComment.getAuthoringInformation().getAuthoringDateTime().toString()).append(" ");
			displayString.append(lastComment.getAuthoringInformation().getAuthoringHcp().getName().toString()).append(":</b> ").append(lastComment.getComment());
			
			// Append corrections
			if (lastComment.getCorrectingDateTime() != null)
			{
				displayString.append("<br><b>Corrected ").append(lastComment.getCorrectingDateTime().toString()).append(" ");
				displayString.append(lastComment.getCorrectingHcp().getName().toString()).append(":</b> ").append(lastComment.getCorrectionReason());
			}
		}
		
		return displayString.toString();
	}

	private grdPathologyRow createOrFindSpecimenGridRow(PathologyResultListShortVo result)
	{
		if (result == null)
			return null;
		
		// Attempt to find a specimen row
		if (result.getSpecimen() != null && result.getSpecimen().size() > 0)
		{
			for (int i = 0; i < form.grdPathology().getRows().size(); i++)
			{
				grdPathologyRow row = form.grdPathology().getRows().get(i);

				PathologyResultListShortVo rowValue = (PathologyResultListShortVo) row.getValue().getOrderInvestigation();

				if (rowValue != null && rowValue.getSpecimen() != null && rowValue.getSpecimen().size() > 0)
				{
					for (PathologySpecimenLiteVo resultSpecimen : result.getSpecimen())
					{
						for (PathologySpecimenLiteVo rowSpecimen : rowValue.getSpecimen())
						{
							if (resultSpecimen.equals(rowSpecimen))
								return row;
						}
					}
				}
			}
		}
		
		// If no row was found for the specimen of the current result - create a new row
		grdPathologyRow newRow = form.grdPathology().getRows().newRow();
		
		// Set row columns
		
		// Specimen column
		String displaySpecimenSource = getSpecimenDisplayValue(result);  //wdev-15780
		
		newRow.setColSpecimen(displaySpecimenSource);
		newRow.setTooltipForColSpecimen(displaySpecimenSource);
		
		// Date and Time display flag
		if (result.getDisplayFlag() != null)
		{
			newRow.setColDateTimeImage(result.getDisplayFlag().getImage());
			newRow.setTooltipForColDateTimeImage(result.getDisplayFlag().getText());
		}
		
		// Date and Time
		if (result.getDisplayDateTime() != null)
		{
			newRow.setColDateTime(result.getDisplayDateTime().toString());
			newRow.setTooltipForColDateTime("<b>OCS Number</b>:" + result.getPlacerOrdNum());
		}
		
		// Specimen worklist item date to collect
		if (result.getDateRequested() != null)
		{
			newRow.setColDateRequested(result.getDateRequested().toString());
			newRow.setTooltipForColDateRequested(result.getDateRequested().toString());
		}
		
		// Result status
		if (result.getResultStatus() != null)
		{
			newRow.setColProvisionalFinal(result.getResultStatus().getText());
		}
		
		// Discipline
		if (result.getInvestigation() != null
			&& result.getInvestigation().getProviderService() != null
			&& result.getInvestigation().getProviderService().getLocationService() != null
			&& result.getInvestigation().getProviderService().getLocationService().getService() != null)
		{
			newRow.setColDiscipline(result.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
		}
		
		// Ordering Location & Clinician (or GP)
		if (result.getOrderDetails() != null)
		{
			newRow.setColOrderingLocation(result.getOrderDetails().getCorrectLocation());
			newRow.setTooltipForColOrderingLocation(result.getOrderDetails().getCorrectLocation());
			
			newRow.setColClinician(result.getOrderDetails().getCorrectClinician());
			newRow.setTooltipForColClinician(result.getOrderDetails().getCorrectClinician());
		}
		
		
		// Set the row value (build OcsPathRadResultVo)
		OcsPathRadResultVo valueResult = new OcsPathRadResultVo();
		
		valueResult.setCategory(Category.PATHOLOGY);
		valueResult.setOrderInvestigation(result);
		valueResult.setDescription(getDescriptionString(result.getInvestigation()));
		
		newRow.setValue(valueResult);
		
		newRow.setExpanded(true);
		
		
		return newRow;
	}


	private String getDescriptionString(NewResultInvestigationVo investigation)
	{
		if (investigation == null || investigation.getInvestigationIndex() == null)
			return "<not set>";
		
		return investigation.getInvestigationIndex().getName();
	}

	//private String getSpecimenDisplayValue(PathologySpecimenLiteVo specimen)
	//wdev-15780
	private String getSpecimenDisplayValue(PathologyResultListShortVo result)  
	{
		if (result == null || result.getSpecimen() == null || (result.getSpecimen()!=null && result.getSpecimen().size()>0 && result.getSpecimen().get(0) != null && result.getSpecimen().get(0).getSpecimenSource() == null && result.getResultSpecimenType() == null)) //wdev-15780 //WDEV-14677
			return "[No specimen source]";
		
		StringBuilder display = new StringBuilder();
		
		if (result.getResultSpecimenType() != null)  //wdev-15780
		{
			display.append(result.getResultSpecimenType().getText());			//wdev-15780
		}
		else if (result.getSpecimen()!=null && result.getSpecimen().size()>0 && result.getSpecimen().get(0) != null && result.getSpecimen().get(0).getSpecimenSource() != null) //WDEV-14677
		{ 
			display.append(result.getSpecimen().get(0).getSpecimenSource().getText()); //wdev-15780
		}
		
		if (result.getSpecimen()!=null && result.getSpecimen().size()>0 && result.getSpecimen().get(0) != null && result.getSpecimen().get(0).getSiteCd() != null)  //wdev-15780  //WDEV-14677
		{
			display.append(" - ").append(result.getSpecimen().get(0).getSiteCd().getText()); //wdev-15780
		}
		
		return display.toString();
	}


	//-----------------------------------------------------------------------------------------------------------------------------------------
	//	Functions used to populate results to Clinical Imaging grid
	//-----------------------------------------------------------------------------------------------------------------------------------------

	private void populateClinicalImagingResults(RadiologyResultListVoCollection clinicalImagingResults)
	{
		form.grdClinicalImaging().getRows().clear();
		
		if (clinicalImagingResults == null)
			return;
		
		for (RadiologyResultListVo result : clinicalImagingResults)
		{
			// Create a new row
			grdClinicalImagingRow row = form.grdClinicalImaging().getRows().newRow();
			
			// Set row value
			OcsPathRadResultVo valueResult = new OcsPathRadResultVo();
			
			valueResult.setCategory(Category.CLINICALIMAGING);
			valueResult.setOrderInvestigation(result);
			valueResult.setDescription(getDescriptionString(result.getInvestigation()));
			
			row.setValue(valueResult);
			
			// Set row columns
			// Display date & time
			row.setColDateTime(result.getDisplayDateTime().toString(DateTimeFormat.STANDARD));
			row.setColDateTime(result.getDisplayDateTime().toString(DateTimeFormat.STANDARD));
			
			// Investigation name
			row.setColExamName(result.getInvestigation().getInvestigationIndex().getName());
			if (result.getOrdInvXOStatusHistory() != null)
			{
				row.setTooltipForColExamName(result.getOrdInvXOStatusHistory().generateXoStatusTooltip());
			}
			
			// Set department
			if (result.getInvestigation().getProviderService() != null && result.getInvestigation().getProviderService().getLocationService() != null)
			{
				row.setColDepartment(result.getInvestigation().getProviderService().getLocationService().getService().getServiceName());
			}
			
			// Set patient location
			if (result.getOrderDetails() != null)
			{
				row.setColPatientLocation(result.getOrderDetails().getCorrectLocation());
				row.setTooltipForColPatientLocation(result.getOrderDetails().getCorrectLocation());
			}
			
			// Set order clinician
			if (result.getOrderDetails() != null)
			{
				row.setColClinician(result.getOrderDetails().getCorrectClinician());
				row.setTooltipForColClinician(result.getOrderDetails().getCorrectClinician());
			}
			
			if (result.getResultStatus() != null)
			{
				row.setColStatus(result.getResultStatus().getText());
				row.setTooltipForColStatus(result.getResultStatus().getText());
			}
			
			if (result.getDisplayFlag() != null)
			{
				row.setColImage(result.getDisplayFlag().getImage());
				row.setTooltipForColImage(result.getDisplayFlag().getText());
			}
			

			Date dateUnseen = new Date().addDay(-1 * ConfigFlag.DOM.OCS_NEWRES_UNSEEN_CUTOFF.getValue());
			
			String displayStatusTooltip = getClinicalImagingtStatusTooltipValue(result, dateUnseen);

			
			OrderInvStatus currentStatus = result.getOrdInvCurrentStatus().getOrdInvStatus();
			if (currentStatus != null)
			{
				row.setColInvStatus(currentStatus.getImage());
				row.setTooltipForColInvStatus(displayStatusTooltip);
			}
			
			if (!ConfigFlag.UI.HIDE_APPOINTMENT_TIME_FOR_RADIOLOGY.getValue())
			{
				if (result.getAppointmentDate() != null) row.setColApptDate(result.getAppointmentDate().getDate().toString());
			}
			
			boolean resultNewOrUpdated = (OrderInvStatus.NEW_RESULT.equals(result.getOrdInvCurrentStatus().getOrdInvStatus()) || OrderInvStatus.UPDATED_RESULT.equals(result.getOrdInvCurrentStatus().getOrdInvStatus())) && result.getRepDateTime().getDate().isLessThan(dateUnseen);
			boolean resultForReview = OrderInvStatus.REVIEW.equals(result.getOrdInvCurrentStatus().getOrdInvStatus()) && result.getOrdInvCurrentStatus().getChangeDateTime().getDate().isLessThan(dateUnseen);
			
			row.setBold(result.getRepDateTime() != null && dateUnseen != null && (resultNewOrUpdated || resultForReview));
		}
	}

	private String getClinicalImagingtStatusTooltipValue(RadiologyResultListVo result, Date dateUnseen)
	{
		if (result == null)
			return null;
		
		StringBuffer displayString = new StringBuffer();

		
		OrderInvStatus currentStatus = result.getOrdInvCurrentStatus().getOrdInvStatus();
		
		if (currentStatus != null)
		{
			displayString.append("<b>Current status: </b>").append(currentStatus.getText());
			
			if (OrderInvStatus.CANCELLED.equals(currentStatus)
				&& result.getOrdInvCurrentStatus().getStatusReason() != null
				&& result.getOrdInvCurrentStatus().getStatusReason().length() > 0)
			{
				displayString.append("<br><b>Current status reason: </b>").append(result.getOrdInvCurrentStatus().getStatusReason());
			}
			
			displayString.append("<br><b>Date changed: </b>").append(result.getOrdInvCurrentStatus().getChangeDateTime());

			if (result.getOrdInvCurrentStatus().getChangeUser() != null)
			{
				displayString.append("<br><b>Changed by: </b>").append(result.getOrdInvCurrentStatus().getChangeUser().toString());
			}
			
			if (result.getRepDateTime() != null && dateUnseen != null)
			{
				if (OrderInvStatus.NEW_RESULT.equals(currentStatus) || OrderInvStatus.UPDATED_RESULT.equals(currentStatus))
				{
					if (result.getRepDateTime().getDate().isLessThan(dateUnseen))
					{
						displayString.append("<br>Unseen");
					}
				}
				else if (OrderInvStatus.REVIEW.equals(currentStatus))
				{
					if (result.getOrdInvCurrentStatus().getChangeDateTime().getDate().isLessThan(dateUnseen))
					{
						displayString.append("<br>Requires Attention");
					}
					else
					{
						displayString.append("<br>").append(OrderInvStatus.REVIEW.toString());
					}
				}
			}
		}
		

		ResultCommentsLiteVoCollection comments = result.getResultConclusionComments();
		
		if (comments != null && comments.size() > 0)
		{
			comments.sort(SortOrder.DESCENDING);
			ResultCommentsLiteVo lastComment = comments.get(0);
			
			displayString.append("<br><b>").append(lastComment.getAuthoringInformation().getAuthoringDateTime().toString()).append(" ");
			displayString.append(lastComment.getAuthoringInformation().getAuthoringHcp().getName().toString()).append(":</b> ").append(lastComment.getComment());
			
			if (lastComment.getCorrectingDateTime() != null)
			{
				displayString.append("<br><b>Corrected ").append(lastComment.getCorrectingDateTime().toString()).append(" ");
				displayString.append(lastComment.getCorrectingHcp().getName().toString() + ":<b> " + lastComment.getCorrectionReason());
			}
		}
		
		return displayString.toString();
	}

	//WDEV-17323
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.ABORT);
	}
}
