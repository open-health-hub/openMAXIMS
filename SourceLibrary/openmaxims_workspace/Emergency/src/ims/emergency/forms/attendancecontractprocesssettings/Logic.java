//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 4876.20447)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.attendancecontractprocesssettings;

import java.util.ArrayList;

import ims.emergency.vo.AtteandanceReqContrJobSettingsVo;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IDynamicFormDataOperations;

public class Logic extends BaseLogic implements IDynamicFormDataOperations
{
	private static final long serialVersionUID = 1L;

	protected void OnFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		loadData();		
		updateControlStatus();
	}
	
	private void updateControlStatus() 
	{
		form.chkTimePeriod().setVisible(false);
		form.chkAll().setVisible(false);
		form.dtimFrom().setVisible(false);
		form.dtimTo().setVisible(false);
		form.lbl3().setVisible(false);
		form.lbl4().setVisible(false);
		form.btnCount().setVisible(false);
		form.intCount().setVisible(false);
		form.intMaxRecords().setVisible(false);
		form.lbl4().setVisible(false);
		form.lbl5().setVisible(false);
		form.intMaxRecords().setVisible(false);
	}

	private void loadData() throws PresentationLogicException
	{
		AtteandanceReqContrJobSettingsVo record = domain.getConfiguration(form.getGlobalContext().Admin.getCurrentJobConfiguration());
		form.getLocalContext().setrecord(record);
		populateScreenFromData(record);
		
		//TODO default to all records for now. improve for next release.
		form.chkAll().setValue(true);		
		//form.chkAll().setValue(record != null && record.getAllRecords());
		
		if (record != null && record.getFromDateIsNotNull() && record.getToDateIsNotNull())
		{
			form.chkTimePeriod().setValue(true);
			form.dtimFrom().setValue(record.getFromDate());
			form.dtimTo().setValue(record.getToDate());
		}
		else
		{
			form.chkTimePeriod().setValue(false);
		}
		
		if (record != null)
		{
			form.txtServer().setValue(record.getServer());
			form.intPort().setValue(record.getServerPort());
			form.intMaxRecords().setValue(record.getMaxRecords());
			form.intCount().setValue(null);
		}
		
		onChkTimePeriodValueChanged();
		
	}
	
	public AtteandanceReqContrJobSettingsVo getData()
	{
		AtteandanceReqContrJobSettingsVo record = populateDataFromScreen(form.getLocalContext().getrecord());
		record.setConfiguredJob(form.getGlobalContext().Admin.getCurrentJobConfiguration());
		record.setAllRecords(form.chkAll().getValue());
		if (form.chkTimePeriod().getValue() &&
				form.dtimFrom().getValue() != null &&
					form.dtimTo().getValue() != null &&
						form.dtimFrom().getValue().isLessOrEqualThan(form.dtimTo().getValue()))
		{			
			record.setFromDate(form.dtimFrom().getValue());
			record.setToDate(form.dtimTo().getValue());
		}
		else
		{
			record.setFromDate(null);
			record.setToDate(null);
		}
		
		record.setServer(form.txtServer().getValue());
		record.setServerPort(form.intPort().getValue());
		record.setMaxRecords(form.intMaxRecords().getValue());
		
		return record;
	}

	public void saveData() throws Exception 
	{	
		AtteandanceReqContrJobSettingsVo record = getData();		
		
		String[] errors = record.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			throw new Exception("Validation Errors");
		}
		
		domain.saveConfiguration(record);		
	}
	
	protected void onChkTimePeriodValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.chkTimePeriod().getValue())
		{
			form.dtimFrom().setEnabled(true);
			form.dtimTo().setEnabled(true);
		}
		else
		{
			form.dtimFrom().setEnabled(false);
			form.dtimTo().setEnabled(false);
			
			form.dtimFrom().setValue(null);
			form.dtimTo().setValue(null);
		}

	}

	public String[] validateData() 
	{	
		return getData().validate();
	}
}
