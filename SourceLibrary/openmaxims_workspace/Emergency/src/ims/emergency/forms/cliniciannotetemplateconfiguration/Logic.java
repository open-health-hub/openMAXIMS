//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2012 IMS MAXIMS. All rights reserved.

package ims.emergency.forms.cliniciannotetemplateconfiguration;

import ims.clinical.vo.ClinicalProblemVo;
import ims.clinical.vo.ClinicalProblemVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.domain.exceptions.StaleObjectException;

import ims.emergency.forms.cliniciannotetemplateconfiguration.GenForm.grdPresentingProbRow;
import ims.emergency.vo.ClinicianNoteDefaultTextConfigVo;
import ims.emergency.vo.ClinicianNoteDefaultTextConfigVoCollection;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbSearchStatus().setValue(PreActiveActiveInactiveStatus.ACTIVE);
		open();
	}

	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
		form.setMode(FormMode.VIEW);
		if (!form.getLocalContext().getselectedClinicianNoteIsNotNull())
		{
			clearInstanceControls();
		}
	}

	private void doSearch() throws PresentationLogicException
	{

		ClinicianNoteDefaultTextConfigVoCollection coll = domain.listClinicianNotes(form.qmbSearchPresentingProblem().getValue(), form.cmbSearchStatus().getValue());

		clearControls();
		form.getLocalContext().setselectedClinicianNote(null);// -----------
		if (coll == null || coll.size() == 0)
		{
			engine.showMessage("There are no Records for the Search Criteria Provided");
			return;
		}

		populateScreenFromData(coll);

	}

	private void populateScreenFromData(ClinicianNoteDefaultTextConfigVoCollection coll) throws PresentationLogicException
	{
		if (coll == null)
			return;

		for (int i = 0; i < coll.size(); i++)
		{
			ClinicianNoteDefaultTextConfigVo clinicianNote = coll.get(i);

			grdPresentingProbRow row = form.grdPresentingProb().getRows().newRow();
			row.setcolPresProbl(clinicianNote.getProblem().getPCName());
			row.setcolDefaultClinician(clinicianNote.getDefaultClinicianNote());
			row.setTooltipForcolDefaultClinician(clinicianNote.getDefaultClinicianNote());
			row.setcolStatus(clinicianNote.getStatus().toString());
			row.setValue(clinicianNote);
		}

		if (form.getLocalContext().getselectedClinicianNote() != null)
		{
			form.getLocalContext().setselectedClinicianNote(domain.getClinicianNote(form.getLocalContext().getselectedClinicianNote()));
			form.grdPresentingProb().setValue(form.getLocalContext().getselectedClinicianNote());
		}

		populateInstanceControlsFromData(form.getLocalContext().getselectedClinicianNote());
	}

	private void clearControls()
	{
		form.grdPresentingProb().setValue(null);
		form.grdPresentingProb().getRows().clear();

		clearInstanceControls();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			open();
		}
	}

	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onImbClearClick() throws PresentationLogicException
	{
		form.qmbSearchPresentingProblem().clear();
		form.grdPresentingProb().getRows().clear();
		form.cmbSearchStatus().setValue(null);
		form.getLocalContext().setselectedClinicianNote(null);
		clearControls();
		updateControlsState();
		
	}

	@Override
	protected void onImbSearchClick() throws PresentationLogicException
	{
		clearControls();
		updateControlsState();
		doSearch();
		
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.EmergencyNamespace.ClinicianNoteTemplateConfig.New:
				newInstance();
				break;
			case GenForm.ContextMenus.EmergencyNamespace.ClinicianNoteTemplateConfig.Edit:
				updateInstance();
				break;
		}
	}

	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		doSearch();
		form.setMode(FormMode.VIEW);
	}

	public void clearInstanceControls()
	{
		form.ctnDetails().qmbPresentingProblem().clear();
		form.ctnDetails().richNote().setValue(null);
		form.ctnDetails().cmbStatus().setValue(null);

	}

	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setselectedClinicianNote(null);// clear local context
		form.grdPresentingProb().setValue(null);// clear selection in grid
		clearInstanceControls();// clear container
		form.setMode(FormMode.EDIT);
	}

	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		ClinicianNoteDefaultTextConfigVo clinicianNoteToSave = populateDataFromScreen(form.getLocalContext().getselectedClinicianNote());

		String[] errors = clinicianNoteToSave.validate();
		if (errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}

		// Check SOE
		if (clinicianNoteToSave.getID_ClinicianNoteDefaultTextConfigIsNotNull() && domain.isStale(clinicianNoteToSave))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setselectedClinicianNote(null);
			open();
			return false;
		}

		// check if an active ClinicianNote already exists for the selected problem
		if (PreActiveActiveInactiveStatus.ACTIVE.equals(clinicianNoteToSave.getStatus()))
		{
			if (presentingProblHaveActiveClinicianNote(clinicianNoteToSave))
			{
				engine.showMessage("An active note already exists for the selected problem.", "", MessageButtons.OK, MessageIcon.WARNING);
				return false;
			}
		}

		try
		{
			form.getLocalContext().setselectedClinicianNote(domain.saveClinicianNote(clinicianNoteToSave));
		}

		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		return true;
	}

	private boolean presentingProblHaveActiveClinicianNote(ClinicianNoteDefaultTextConfigVo clinicianNoteToSave)
	{
		ClinicianNoteDefaultTextConfigVoCollection clinicianNote = domain.listClinicianNotes(clinicianNoteToSave.getProblem(), PreActiveActiveInactiveStatus.ACTIVE);

		clinicianNote.remove(clinicianNoteToSave);

		if (clinicianNote.size() == 0)
			return false;

		return true;
	}

	private ClinicianNoteDefaultTextConfigVo populateDataFromScreen(ClinicianNoteDefaultTextConfigVo clinicianNote)
	{
		if (clinicianNote == null)
		{
			clinicianNote = new ClinicianNoteDefaultTextConfigVo();
		}

		clinicianNote.setProblem(form.ctnDetails().qmbPresentingProblem().getValue());
		clinicianNote.setDefaultClinicianNote(form.ctnDetails().richNote().getValue());
		clinicianNote.setStatus(form.ctnDetails().cmbStatus().getValue());

		return clinicianNote;
	}

	public void updateControlsState()
	{
		form.ctnDetails().setCollapsed(!((form.grdPresentingProb().getValue() != null && form.getMode().equals(FormMode.VIEW)) || form.getMode().equals(FormMode.EDIT)));

		if (form.getMode() == FormMode.VIEW)
		{
			form.btnEdit().setVisible(form.grdPresentingProb().getValue() != null);
			form.btnEdit().setEnabled(form.grdPresentingProb().getValue() != null);
		}

		if (form.getMode() == FormMode.EDIT)
		{
			removePreactiveOrActiveLookup();
		}

		form.getContextMenus().Emergency.getClinicianNoteTemplateConfigNewItem().setVisible(form.getMode().equals(FormMode.VIEW));
		form.getContextMenus().Emergency.getClinicianNoteTemplateConfigEditItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.grdPresentingProb().getValue() instanceof ClinicianNoteDefaultTextConfigVo);
	}

	private void removePreactiveOrActiveLookup()
	{
		PreActiveActiveInactiveStatus status = form.ctnDetails().cmbStatus().getValue();
		form.ctnDetails().cmbStatus().clear();
		PreActiveActiveInactiveStatusCollection lookupColl = LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
		for (int i = 0; lookupColl != null && i < lookupColl.size(); i++)
		{
			if (isStatusActive() && lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE))
				continue;
			if (isStatusInactive() && (lookupColl.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE) || lookupColl.get(i).equals(PreActiveActiveInactiveStatus.ACTIVE)))
				continue;

			form.ctnDetails().cmbStatus().newRow(lookupColl.get(i), lookupColl.get(i).toString(), lookupColl.get(i).getImage(), lookupColl.get(i).getColor());
		}
		form.ctnDetails().cmbStatus().setValue(status);

	}

	private boolean isStatusInactive()
	{
		ClinicianNoteDefaultTextConfigVo ClinicianNoteTemplate = form.getLocalContext().getselectedClinicianNote();
		return ClinicianNoteTemplate != null && ClinicianNoteTemplate.getStatusIsNotNull() && ClinicianNoteTemplate.getStatus().equals(PreActiveActiveInactiveStatus.INACTIVE);
	}

	private boolean isStatusActive()
	{
		ClinicianNoteDefaultTextConfigVo ClinicianNoteTemplate = form.getLocalContext().getselectedClinicianNote();
		return ClinicianNoteTemplate != null && ClinicianNoteTemplate.getStatusIsNotNull() && ClinicianNoteTemplate.getStatus().equals(PreActiveActiveInactiveStatus.ACTIVE);
	}

	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onQmbPresentingProblemTextSubmited(String value) throws PresentationLogicException
	{
		listPresentingProblemSearch(value);
	}

	private void listPresentingProblemSearch(String value)
	{
		ClinicalProblemVoCollection coll = null;

		coll = domain.listProblems(value);

		form.ctnDetails().qmbPresentingProblem().setValue(null);
		form.ctnDetails().qmbPresentingProblem().clear();

		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				ClinicalProblemVo vo = coll.get(i);
				form.ctnDetails().qmbPresentingProblem().newRow(vo, vo.getPCName());
			}
		}

		if (coll.size() == 1)
		{
			form.ctnDetails().qmbPresentingProblem().setValue(coll.get(0));
		}

		if (coll.size() > 1)
		{
			form.ctnDetails().qmbPresentingProblem().showOpened();
		}
	}

	@Override
	protected void onQmbSearchPresentingProblemTextSubmited(String value) throws PresentationLogicException
	{
		listProblemSearch(value);

	}

	private void listProblemSearch(String value)
	{
		ClinicalProblemVoCollection coll = null;

		coll = domain.listProblems(value);

		form.qmbSearchPresentingProblem().setValue(null);
		form.qmbSearchPresentingProblem().clear();

		if (coll != null)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				ClinicalProblemVo vo = coll.get(i);
				form.qmbSearchPresentingProblem().newRow(vo, vo.getPCName());
			}
		}

		if (coll.size() == 1)
		{
			form.qmbSearchPresentingProblem().setValue(coll.get(0));
		}

		if (coll.size() > 1)
		{
			form.qmbSearchPresentingProblem().showOpened();
		}

	}

	protected void onGrdPresentingProbSelectionChanged() throws PresentationLogicException
	{
		getSelectInstance();
		updateControlsState();

	}

	private void getSelectInstance() throws PresentationLogicException
	{
		if (form.grdPresentingProb().getValue() instanceof ClinicianNoteDefaultTextConfigVo)
		{
			ClinicianNoteDefaultTextConfigVo selectedClinicianNote = null;

			selectedClinicianNote = domain.getClinicianNote(form.grdPresentingProb().getValue());

			// Check SOE
			if (form.grdPresentingProb().getValue().getID_ClinicianNoteDefaultTextConfigIsNotNull() && domain.isStale(form.grdPresentingProb().getValue()))
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}

			form.getLocalContext().setselectedClinicianNote(selectedClinicianNote);
			populateInstanceControlsFromData(selectedClinicianNote);
		}
	}

	private void populateInstanceControlsFromData(ClinicianNoteDefaultTextConfigVo selectedClinicianNote)
	{
		clearInstanceControls();

		if (selectedClinicianNote == null)
			return;

		if (selectedClinicianNote.getDefaultClinicianNoteIsNotNull())
		{
			form.ctnDetails().qmbPresentingProblem().newRow(selectedClinicianNote.getProblem(), selectedClinicianNote.getProblem().getPCName());
			form.ctnDetails().qmbPresentingProblem().setValue(selectedClinicianNote.getProblem());
			form.ctnDetails().richNote().setValue(selectedClinicianNote.getDefaultClinicianNote());
			form.ctnDetails().cmbStatus().setValue(selectedClinicianNote.getStatus());
		}
	}

}
