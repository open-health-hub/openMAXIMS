//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.45 build 2438.24331)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.oncology.forms.careplanrevise;

import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.forms.careplanrevise.GenForm;
import ims.oncology.forms.careplanrevise.GenForm.gridActualModalityRow;
import ims.oncology.forms.careplanrevise.GenForm.gridPlannedModRow;
import ims.oncology.vo.CancerCarePlanVo;
import ims.oncology.vo.CancerMDTMeetingVoCollection;
import ims.oncology.vo.TreatmentModalitiesVo;
import ims.oncology.vo.TreatmentModalitiesVoCollection;
import ims.oncology.vo.lookups.CarePlanCurrentStatus;
import ims.oncology.vo.lookups.CarePlanTreatmentModality;
import ims.oncology.vo.lookups.CarePlanTreatmentModalityCollection;
import ims.oncology.vo.lookups.LookupHelper;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	private void open() throws FormOpenException 
	{
		clearScreen();
		clearGrids();
		setupFormControls();
		loadAssociatedMdtCombo();
		populateScreenFromData();
		updateControlState(true);
	}
	
	private void loadAssociatedMdtCombo() 
	{
		CancerMDTMeetingVoCollection voMdtMeetingColl = domain.listCancerMDTMeeting(form.getGlobalContext().Core.getEpisodeofCareShort());
		if(voMdtMeetingColl != null && voMdtMeetingColl.size() > 0)
		{
			for (int i =0; i < voMdtMeetingColl.size();i++)
			{
				StringBuffer associatedMDTText = new StringBuffer();
				associatedMDTText.append("MDT Meeting - MDT Meeting Date: ");
				if(voMdtMeetingColl.get(i).getDateIsNotNull())
					associatedMDTText.append(voMdtMeetingColl.get(i).getDate());
				associatedMDTText.append("    MDT Location: ");
				if(voMdtMeetingColl.get(i).getMDTLocationIsNotNull())
					associatedMDTText.append(voMdtMeetingColl.get(i).getMDTLocation());
				associatedMDTText.append("    Co-Morbidity Assessment: ");
				if(voMdtMeetingColl.get(i).getCoMorbidityAssessmentIsNotNull())
					associatedMDTText.append(voMdtMeetingColl.get(i).getCoMorbidityAssessment());
				form.cmbAssociatedMDT().newRow(voMdtMeetingColl.get(i), associatedMDTText.toString());
			}
		}
		
	}
	private void clearScreen() 
	{
		form.txtRevision().setValue(null);
		form.dteCarePlan().setValue(null);
		form.qmbConsultantHcp().setValue(null);
		form.cmbTreatIntent().setValue(null);
		form.cmbRecurrence().setValue(null);
		form.txtNotes().setValue(null);
		form.cmbStatus().setValue(null);
		form.dteAgreedDate().setValue(null);
		form.txtReason().setValue(null);
		form.cmbAssociatedMDT().setValue(null);
		form.chklistAntiCancerReason().setValues(null);
	}
	private void clearGrids() 
	{
		form.gridPlannedMod().getRows().clear();
		form.gridActualModality().getRows().clear();
		form.gridCurrentCarePlan().getRows().clear();
	}
	private void setupFormControls() 
	{
		form.txtReason().setEnabled(false);
		form.chklistAntiCancerReason().setEnabled(false);
		
		form.gridPlannedMod().setEnabled(true);
		form.gridPlannedMod().isEnabled();
		form.gridPlannedMod().setReadOnly(false);
		
		form.chklistAntiCancerReason().setEnabled(false);
	}
	private void populateScreenFromData() throws FormOpenException 
	{
		CancerCarePlanVo voCancerCarePlan = form.getGlobalContext().Oncology.getvoCancerCarePlan();
		if(voCancerCarePlan == null)
			return;
		
		loadPlannedModalityGrid();
		
		if(voCancerCarePlan.getCarePlanDateIsNotNull())
			form.dteCarePlan().setValue(voCancerCarePlan.getCarePlanDate());
		if(voCancerCarePlan.getConsultantInChargeIsNotNull())
		{
			form.qmbConsultantHcp().newRow(voCancerCarePlan.getConsultantInCharge(), voCancerCarePlan.getConsultantInCharge().getName().toString());
			form.qmbConsultantHcp().setValue(voCancerCarePlan.getConsultantInCharge());
		}
		if(voCancerCarePlan.getCarePlanIntentIsNotNull())
			form.cmbTreatIntent().setValue(voCancerCarePlan.getCarePlanIntent());
		if(voCancerCarePlan.getRecurrenceIndicatorIsNotNull())
			form.cmbRecurrence().setValue(voCancerCarePlan.getRecurrenceIndicator());
	}
	private void loadPlannedModalityGrid() throws FormOpenException 
	{
		CancerCarePlanVo voCancerCarePlan = form.getGlobalContext().Oncology.getvoCancerCarePlan();
		if(voCancerCarePlan == null)
			return;
		
		TreatmentModalitiesVoCollection collCarePlanModalityVo = voCancerCarePlan.getTreatmentModalities();
		for (int i=0; i < collCarePlanModalityVo.size();i++)
		{						
			TreatmentModalitiesVo voTreatmentModalities = collCarePlanModalityVo.get(i);					
			if (voTreatmentModalities != null && voTreatmentModalities.getCompletedDate() == null)
			{
				GenForm.gridCurrentCarePlanRow rowCurrentPlan = form.gridCurrentCarePlan().getRows().newRow();
				if(rowCurrentPlan != null)
				{
					if (voTreatmentModalities.getTreatmentModalityIsNotNull())
						rowCurrentPlan.setColModality(voTreatmentModalities.getTreatmentModality().toString());
					
					rowCurrentPlan.setValue(voTreatmentModalities.getTreatmentModality());
				}
			}
		}
		form.gridPlannedMod().getRows().clear();
		CarePlanTreatmentModalityCollection collkup = LookupHelper.getCarePlanTreatmentModality(domain.getLookupService());
		if (collkup != null && collkup.size() > 0)
		{
			form.gridPlannedMod().getRows().clear();
			for(int i=0; i < collkup.size();i++)
			{
				GenForm.gridPlannedModRow row = form.gridPlannedMod().getRows().newRow();
				row.setValue(collkup.get(i));
				row.setColModality(collkup.get(i).toString());
				row.setColSequenceReadOnly(true);
			}
		}
		else
		{
			throw new FormOpenException("The CarePlanTreatmentModality lookups MUST be populated before this form can be used.");
		}	
	
	}
	
	/**
	 * @return
	 */
	private boolean isNoAntiCancerSelectedinPlannedGrid() 
	{
		for(int i=0;i<form.gridPlannedMod().getRows().size();i++)
		{
			gridPlannedModRow row = form.gridPlannedMod().getRows().get(i);
			
			if(row.getValue().getId() == CarePlanTreatmentModality.NOANTICANCERTREATMENT.getId())
			{
				if(row.getColSelect())
					return true;
				else
					return false;
			}
		}
		return false;
	}
	
	protected void OnStatusChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.cmbStatus().getValue() == null || (!form.cmbStatus().getValue().equals(CarePlanCurrentStatus.AGREEDSAMEASMDT) && !form.cmbStatus().getValue().equals(CarePlanCurrentStatus.AGREEDDIFFTOMDT)))
		{
			form.gridActualModality().getRows().clear();
			form.gridActualModality().setEnabled(false);
			form.gridPlannedMod().setEnabled(true);
			form.gridPlannedMod().setReadOnly(false);
			form.txtReason().setValue(null);
			form.txtReason().setEnabled(false);
			form.dteAgreedDate().setValue(null);
			form.dteAgreedDate().setEnabled(false);
			
			//check No Anti-Cancer Value if it has a value in planned grid enable chklistAntiCancerReason
			if(isNoAntiCancerSelectedinPlannedGrid())
			{
				form.chklistAntiCancerReason().setEnabled(true);
			}	
			else
			{
				form.chklistAntiCancerReason().setValues(null);
				form.chklistAntiCancerReason().setEnabled(false);
			}
		}
		else if(form.cmbStatus().getValue().equals(ims.oncology.vo.lookups.CarePlanCurrentStatus.AGREEDSAMEASMDT))
		{
			if(validatePlannedGridEntry())
			{
				form.gridPlannedMod().setEnabled(false);
				form.gridPlannedMod().setReadOnly(true);
				form.txtReason().setEnabled(false);

				form.gridActualModality().getRows().clear();
				
				GenForm.gridPlannedModRow rowPlanned;
				TreatmentModalitiesVoCollection collCarePlanModalityVo = new TreatmentModalitiesVoCollection();
				
				for(int i=0;i<form.gridPlannedMod().getRows().size();i++)
				{
					rowPlanned = form.gridPlannedMod().getRows().get(i);
					if (rowPlanned.getColSelect())
					{
						TreatmentModalitiesVo voTreatmentModalities = new TreatmentModalitiesVo();					
						voTreatmentModalities.setTreatmentModality(rowPlanned.getValue());
						voTreatmentModalities.setMDTSequence(rowPlanned.getColSequence());
						
						collCarePlanModalityVo.add(voTreatmentModalities);				
					}
				}
				for (int i=0; i < collCarePlanModalityVo.size();i++)
				{						
					TreatmentModalitiesVo voTreatmentModalities = collCarePlanModalityVo.get(i);					
					if (voTreatmentModalities != null)
					{
						GenForm.gridActualModalityRow rowActual = form.gridActualModality().getRows().newRow();

						if (voTreatmentModalities.getTreatmentModalityIsNotNull())
							rowActual.setColModality(voTreatmentModalities.getTreatmentModality().toString());
					
						if (voTreatmentModalities.getMDTSequenceIsNotNull())
							rowActual.setColSequence(voTreatmentModalities.getMDTSequence());
						
						rowActual.setValue(voTreatmentModalities.getTreatmentModality());
						rowActual.setColSelect(true);
					}
				}
				form.dteAgreedDate().setEnabled(true);
				
				//check No Anti-Cancer Value if it has a value in planned grid enable chklistAntiCancerReason
				if(isNoAntiCancerSelectedinPlannedGrid())
					form.chklistAntiCancerReason().setEnabled(true);
				else
				{
					form.chklistAntiCancerReason().setValues(null);
					form.chklistAntiCancerReason().setEnabled(false);
				}
			}
			else
			{
				engine.showErrors(new String[]{"Invalid selection and sequence supplied for 'Modality - MDT Agreed' grid.\nEach selected item must have a sequence."});
				form.cmbStatus().setValue(null);
			}
		}
		else if(form.cmbStatus().getValue().equals(ims.oncology.vo.lookups.CarePlanCurrentStatus.AGREEDDIFFTOMDT))
		{
			form.gridPlannedMod().setEnabled(false);
			form.gridPlannedMod().setReadOnly(true);
			form.gridActualModality().setEnabled(true);
			form.gridActualModality().setReadOnly(false);
			
			loadModalityPatientAgreedGrid();
			form.dteAgreedDate().setEnabled(true);
			
			form.txtReason().setEnabled(true);
			
			form.chklistAntiCancerReason().setValues(null);
			form.chklistAntiCancerReason().setEnabled(false);
		}
	}

	private boolean validatePlannedGridEntry()	
	{
		int validCount = 0;
		int selectCount = 0;
		for(int i=0;i<form.gridPlannedMod().getRows().size(); i++)
		{
			gridPlannedModRow row = form.gridPlannedMod().getRows().get(i);
			if(row.getColSelect() && row.getColSequence() != null)
				validCount++;
			
			if(row.getColSelect() || row.getColSequence() != null)
				selectCount++;
		}
		
		return validCount > 0 && validCount == selectCount;
	}
	
	protected void onBtnMoveCurrentCPClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.gridCurrentCarePlan().getSelectedRow() != null)
		{
			TreatmentModalitiesVo voCarePlanModality = new TreatmentModalitiesVo();
			voCarePlanModality.setTreatmentModality(form.gridCurrentCarePlan().getSelectedRow().getValue());

			if(voCarePlanModality.getTreatmentModalityIsNotNull())
			{
				GenForm.gridPlannedModRow rowPlanned;
				for(int i=0;i<form.gridPlannedMod().getRows().size();i++)
				{
					rowPlanned = form.gridPlannedMod().getRows().get(i);
					
					if(voCarePlanModality.getTreatmentModality().getId() == rowPlanned.getValue().getId())
					{
						form.gridPlannedMod().getRows().get(i).setColSelect(true);
						form.gridPlannedMod().getRows().get(i).setColSequenceReadOnly(false);
						form.gridCurrentCarePlan().removeSelectedRow();
						break;
					}
				}
			}
		}
	}
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.cmbStatus().getValue() != null)
		{
			if(form.cmbStatus().getValue().getId() == CarePlanCurrentStatus.AGREEDSAMEASMDT.getId() || form.cmbStatus().getValue().getId() == CarePlanCurrentStatus.AGREEDDIFFTOMDT.getId())
			{
				if(form.dteAgreedDate().getValue() == null)
				{
					engine.showMessage("An Agreed Date must be provide before proceeding.");
					return;
				}
			}
		}
		populateDataFromScreen();
		
		CancerCarePlanVo voCarePlan = form.getLocalContext().getvoCancerCarePlan();
		voCarePlan.setIsCurrent(Boolean.TRUE);
		
		String[] errors = voCarePlan.validate();
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		try 
		{
			form.getLocalContext().setvoCancerCarePlan(domain.saveCancerCarePlan(voCarePlan));
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
		}
		//Set the old Cancer Care Plan Record as not current and save.
		voCarePlan = form.getGlobalContext().Oncology.getvoCancerCarePlan();
		voCarePlan.setIsCurrent(Boolean.FALSE);
		errors = voCarePlan.validate();
		if(errors != null)
		{	
			engine.showErrors("Validation Errors", errors);
			return;
		}
		try 
		{
			domain.saveCancerCarePlan(voCarePlan);
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
		}

		engine.close(DialogResult.OK);		
	}
	private void populateDataFromScreen() 
	{
		CancerCarePlanVo voCarePlan = new CancerCarePlanVo();
		
		populateDataFromModalityGrids();
		
		voCarePlan = form.getLocalContext().getvoCancerCarePlan();
		
		voCarePlan.setCarePlanDate(form.dteCarePlan().getValue());
		voCarePlan.setConsultantInCharge(form.qmbConsultantHcp().getValue());
		voCarePlan.setCarePlanNotes(form.txtNotes().getValue());
		voCarePlan.setCarePlanIntent(form.cmbTreatIntent().getValue());
		voCarePlan.setRecurrenceIndicator(form.cmbRecurrence().getValue());
		voCarePlan.setCurrentStatus(form.cmbStatus().getValue());
		voCarePlan.setAgreedDate(form.dteAgreedDate().getValue());
		voCarePlan.setReasonForRevision(form.txtRevision().getValue());
		
		voCarePlan.setNoAntiCancerTxReason(form.chklistAntiCancerReason().getValues());
		voCarePlan.setReasonPatientPlanDiffMDT(form.txtReason().getValue());
		
		if (!voCarePlan.getEpisodeOfCareIsNotNull())
		{
			voCarePlan.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		}
		voCarePlan.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		
		if(!voCarePlan.getCareContextIsNotNull())
		{
			voCarePlan.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		if(!voCarePlan.getClinicalContactIsNotNull())
			voCarePlan.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		
		if(form.cmbAssociatedMDT().getValue() != null)
		{
			voCarePlan.setMdtMeeting(form.cmbAssociatedMDT().getValue());
			voCarePlan.setHasAssociatedMDTMeeting(Boolean.TRUE);
		}
		else
		{
			voCarePlan.setMdtMeeting(null);
			voCarePlan.setHasAssociatedMDTMeeting(Boolean.FALSE);
		}

		form.getLocalContext().setvoCancerCarePlan(voCarePlan);
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);		
	}
	protected void onQmbConsultantHcpTextSubmited(String value) throws PresentationLogicException 
	{
		form.qmbConsultantHcp().clear();
		HcpLiteVoCollection voHCPColl = domain.listHcps(value);
		
		if(voHCPColl != null)
		{
			for (int i = 0; i < voHCPColl.size(); i++)
			{
				form.qmbConsultantHcp().newRow(voHCPColl.get(i), voHCPColl.get(i).toString());
			}
			if (voHCPColl.size() == 1)
			{
				form.qmbConsultantHcp().setValue(voHCPColl.get(0));
			}
			else if (voHCPColl.size() > 1)
			{
				form.qmbConsultantHcp().showOpened();		
			}
		}
	}
	private void updateControlState(boolean bEnabled) 
	{
		form.dteCarePlan().setEnabled(bEnabled);
		form.qmbConsultantHcp().setEnabled(bEnabled);
		form.cmbTreatIntent().setEnabled(bEnabled);
		form.cmbRecurrence().setEnabled(bEnabled);
		form.txtNotes().setEnabled(bEnabled);
		form.txtRevision().setEnabled(bEnabled);
		
		form.cmbStatus().setEnabled(bEnabled);
		
		form.gridActualModality().setEnabled(!bEnabled);		
		form.gridActualModality().setReadOnly(!bEnabled);	
		
		form.dteAgreedDate().setEnabled(!bEnabled);
		form.txtReason().setEnabled(!bEnabled);
		
		form.chklistAntiCancerReason().setEnabled(!bEnabled);

		form.gridPlannedMod().setEnabled(bEnabled);		
		form.gridPlannedMod().setReadOnly(!bEnabled);	
		form.gridPlannedMod().isEnabled();
	}
	private void loadModalityPatientAgreedGrid() throws FormOpenException 
	{
		form.gridActualModality().getRows().clear();
		CarePlanTreatmentModalityCollection collkup = LookupHelper.getCarePlanTreatmentModality(domain.getLookupService());
		if (collkup != null && collkup.size() > 0)
		{
			form.gridActualModality().getRows().clear();
			for(int i=0; i < collkup.size();i++)
			{
				GenForm.gridActualModalityRow row = form.gridActualModality().getRows().newRow();
				row.setValue(collkup.get(i));
				row.setColModality(collkup.get(i).toString());
			}
		}
		else
		{
			throw new FormOpenException("The CarePlanTreatmentModality lookups MUST be populated before this form can be used.");
		}			
	}
	private void populateDataFromModalityGrids() 
	{
		CancerCarePlanVo voCarePlan = form.getLocalContext().getvoCancerCarePlan();
		if(voCarePlan == null)
			voCarePlan = new CancerCarePlanVo();

		TreatmentModalitiesVoCollection collCarePlanModalityVo = new TreatmentModalitiesVoCollection();

		if(form.cmbStatus().getValue() == null)
		{
			GenForm.gridPlannedModRow rowPlanned;
			for(int i=0;i<form.gridPlannedMod().getRows().size();i++)
			{
				rowPlanned = form.gridPlannedMod().getRows().get(i);
				if (rowPlanned.getColSelect())
				{
					TreatmentModalitiesVo voTreatmentModalities = new TreatmentModalitiesVo();					

					voTreatmentModalities.setPatientAgreed(YesNo.YES);
					voTreatmentModalities.setPatientSequence(rowPlanned.getColSequence());
					voTreatmentModalities.setIsMDTModality(Boolean.TRUE);
					voTreatmentModalities.setMDTSequence(rowPlanned.getColSequence());
					voTreatmentModalities.setTreatmentModality(rowPlanned.getValue());
					voTreatmentModalities.setIsCommenced(Boolean.TRUE);
					
					collCarePlanModalityVo.add(voTreatmentModalities);				
				}
			}
		}
		else if(form.cmbStatus().getValue().equals(ims.oncology.vo.lookups.CarePlanCurrentStatus.AGREEDSAMEASMDT))
		{
			GenForm.gridPlannedModRow rowPlanned;
			for(int i=0;i<form.gridPlannedMod().getRows().size();i++)
			{
				rowPlanned = form.gridPlannedMod().getRows().get(i);
				if (rowPlanned.getColSelect())
				{
					TreatmentModalitiesVo voTreatmentModalities = new TreatmentModalitiesVo();					

					voTreatmentModalities.setPatientAgreed(YesNo.YES);
					voTreatmentModalities.setPatientSequence(rowPlanned.getColSequence());
					voTreatmentModalities.setIsMDTModality(Boolean.TRUE);
					voTreatmentModalities.setMDTSequence(rowPlanned.getColSequence());
					voTreatmentModalities.setTreatmentModality(rowPlanned.getValue());
					voTreatmentModalities.setIsCommenced(Boolean.TRUE);
					
					collCarePlanModalityVo.add(voTreatmentModalities);				
				}
			}
		}
		else if(form.cmbStatus().getValue().equals(ims.oncology.vo.lookups.CarePlanCurrentStatus.AGREEDDIFFTOMDT))
		{
			GenForm.gridActualModalityRow rowActual;
			for(int i=0;i<form.gridActualModality().getRows().size();i++)
			{
				rowActual = form.gridActualModality().getRows().get(i);
				if(rowActual.getColSelect())
				{
					GenForm.gridPlannedModRow rowPlanned;
					for(int x=0;x<form.gridPlannedMod().getRows().size();x++)
					{
						rowPlanned = form.gridPlannedMod().getRows().get(x);
						
						if(rowActual.getValue().getId() == rowPlanned.getValue().getId())
						{
							TreatmentModalitiesVo voTreatmentModalities = new TreatmentModalitiesVo();					

								//If modalitity selected on the MDTAgreedGRid also selected on the patientagreedGRID
								if(rowPlanned.getColSelect() && rowActual.getColSelect())
								{
									voTreatmentModalities.setPatientAgreed(YesNo.YES);
									voTreatmentModalities.setPatientSequence(rowActual.getColSequence());
									voTreatmentModalities.setIsMDTModality(Boolean.TRUE);
									voTreatmentModalities.setMDTSequence(rowPlanned.getColSequence());
								}
								//If modalities selected on the MDTAgreedGrid but NOT ticked on the patientagreedGrid
								else if(rowPlanned.getColSelect() && !rowActual.getColSelect())
								{
									voTreatmentModalities.setPatientAgreed(YesNo.NO);
									voTreatmentModalities.setPatientSequence(null);
									voTreatmentModalities.setIsMDTModality(Boolean.TRUE);
									voTreatmentModalities.setMDTSequence(null);
								}
								//If modalities NOT selected on the MDTAgreedGrid but ticked on the patientagreedGrid
								else if(!rowPlanned.getColSelect() && rowActual.getColSelect())
								{
									voTreatmentModalities.setPatientAgreed(YesNo.YES);
									voTreatmentModalities.setPatientSequence(rowActual.getColSequence());
									voTreatmentModalities.setIsMDTModality(Boolean.FALSE);
									voTreatmentModalities.setMDTSequence(null);
								}
								voTreatmentModalities.setTreatmentModality(rowActual.getValue());
								voTreatmentModalities.setIsCommenced(Boolean.TRUE);

								collCarePlanModalityVo.add(voTreatmentModalities);				
						}
					}		
				}
			}
		}
		voCarePlan.setTreatmentModalities(collCarePlanModalityVo);
		form.getLocalContext().setvoCancerCarePlan(voCarePlan);
	}
	protected void onGridPlannedModGridCheckBoxClicked(int column, gridPlannedModRow row, boolean isChecked) throws PresentationLogicException 
	{
		if(row.getColSelect())
			row.setColSequenceReadOnly(false);
		else
		{
			row.setColSequenceReadOnly(true);
			row.setColSequence(null);
		}
		
		if(row.getValue().getId() == CarePlanTreatmentModality.NOANTICANCERTREATMENT.getId())
		{
			if(isChecked)
			{
				form.chklistAntiCancerReason().setEnabled(true);
			}
			else
			{
				form.chklistAntiCancerReason().setValues(null);
				form.chklistAntiCancerReason().setEnabled(false);
			}
		}
	}
	protected void onGridActualModalityGridCheckBoxClicked(int column, gridActualModalityRow row, boolean isChecked) throws PresentationLogicException 
	{
		if(row.getColSelect())
			row.setColSequenceReadOnly(false);
		else
		{
			row.setColSequenceReadOnly(true);
			row.setColSequence(null);
		}
		
		if(row.getValue().getId() == CarePlanTreatmentModality.NOANTICANCERTREATMENT.getId())
		{
			if(isChecked)
			{
				form.chklistAntiCancerReason().setEnabled(true);
			}
			else
			{
				form.chklistAntiCancerReason().setValues(null);
				form.chklistAntiCancerReason().setEnabled(false);
			}
		}
	}
}
