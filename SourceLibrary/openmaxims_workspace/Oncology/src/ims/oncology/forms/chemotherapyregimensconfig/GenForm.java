//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.chemotherapyregimensconfig;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class qmbRegimenComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.oncology.vo.lookups.RegimenAcronym value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.oncology.vo.lookups.RegimenAcronym value)
		{
			return super.control.removeRow(value);
		}
		public ims.oncology.vo.lookups.RegimenAcronym getValue()
		{
			return (ims.oncology.vo.lookups.RegimenAcronym)super.control.getValue();
		}
		public void setValue(ims.oncology.vo.lookups.RegimenAcronym value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdMerdicationsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMerdicationsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColMedicationReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColMedicationReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColMedicationOpened()
		{
			super.row.showOpened(0);
		}
		public String getColMedication()
		{
			return (String)super.row.get(0);
		}
		public void setColMedication(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColMedicationTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.MedicationLiteVo getValue()
		{
			return (ims.core.vo.MedicationLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.MedicationLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdMerdicationsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMerdicationsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMerdicationsRow get(int index)
		{
			return new grdMerdicationsRow(super.collection.get(index));
		}
		public grdMerdicationsRow newRow()
		{
			return new grdMerdicationsRow(super.collection.newRow());
		}
		public grdMerdicationsRow newRow(boolean autoSelect)
		{
			return new grdMerdicationsRow(super.collection.newRow(autoSelect));
		}
		public grdMerdicationsRow newRowAt(int index)
		{
			return new grdMerdicationsRow(super.collection.newRowAt(index));
		}
		public grdMerdicationsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMerdicationsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMerdicationsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.core.vo.MedicationLiteVoCollection getValues()
		{
			ims.core.vo.MedicationLiteVoCollection listOfValues = new ims.core.vo.MedicationLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.MedicationLiteVo getValue()
		{
			return (ims.core.vo.MedicationLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.MedicationLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdMerdicationsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMerdicationsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMerdicationsRowCollection getRows()
		{
			return new grdMerdicationsRowCollection(super.grid.getRows());
		}
		public grdMerdicationsRow getRowByValue(ims.core.vo.MedicationLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMerdicationsRow(row);
		}
		public void setColMedicationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColMedicationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grdRegimensRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdRegimensRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColRegimenReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColRegimenReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColRegimenOpened()
		{
			super.row.showOpened(0);
		}
		public String getColRegimen()
		{
			return (String)super.row.get(0);
		}
		public void setColRegimen(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColRegimenTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColActiveReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColActiveReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColActiveOpened()
		{
			super.row.showOpened(1);
		}
		public ims.framework.utils.Image getColActive()
		{
			return (ims.framework.utils.Image)super.row.get(1);
		}
		public void setColActive(ims.framework.utils.Image value)
		{
			super.row.set(1, value);
		}
		public void setCellColActiveTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.oncology.vo.ChemoRegimensDrugConfigVo getValue()
		{
			return (ims.oncology.vo.ChemoRegimensDrugConfigVo)super.row.getValue();
		}
		public void setValue(ims.oncology.vo.ChemoRegimensDrugConfigVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdRegimensRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdRegimensRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdRegimensRow get(int index)
		{
			return new grdRegimensRow(super.collection.get(index));
		}
		public grdRegimensRow newRow()
		{
			return new grdRegimensRow(super.collection.newRow());
		}
		public grdRegimensRow newRow(boolean autoSelect)
		{
			return new grdRegimensRow(super.collection.newRow(autoSelect));
		}
		public grdRegimensRow newRowAt(int index)
		{
			return new grdRegimensRow(super.collection.newRowAt(index));
		}
		public grdRegimensRow newRowAt(int index, boolean autoSelect)
		{
			return new grdRegimensRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdRegimensGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public ims.oncology.vo.ChemoRegimensDrugConfigVoCollection getValues()
		{
			ims.oncology.vo.ChemoRegimensDrugConfigVoCollection listOfValues = new ims.oncology.vo.ChemoRegimensDrugConfigVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.oncology.vo.ChemoRegimensDrugConfigVo getValue()
		{
			return (ims.oncology.vo.ChemoRegimensDrugConfigVo)super.grid.getValue();
		}
		public void setValue(ims.oncology.vo.ChemoRegimensDrugConfigVo value)
		{
			super.grid.setValue(value);
		}
		public grdRegimensRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdRegimensRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdRegimensRowCollection getRows()
		{
			return new grdRegimensRowCollection(super.grid.getRows());
		}
		public grdRegimensRow getRowByValue(ims.oncology.vo.ChemoRegimensDrugConfigVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdRegimensRow(row);
		}
		public void setColRegimenHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColRegimenHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColActiveHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColActiveHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}

	public static class grpRegimenFilterRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 280, 40, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Exact Match", startTabIndex.intValue() + 4);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 192, 40, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Contains", startTabIndex.intValue() + 3);
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 80, 40, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Begins With", startTabIndex.intValue() + 2);
		}
		public void setText(grpRegimenFilterEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public grpRegimenFilterEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return grpRegimenFilterEnumeration.None;
				case 0: return grpRegimenFilterEnumeration.rdoExact;
				case 1: return grpRegimenFilterEnumeration.rdoContains;
				case 2: return grpRegimenFilterEnumeration.rdoBegins;
			}
			return null;
		}
		public void setValue(grpRegimenFilterEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(grpRegimenFilterEnumeration.None.id);
		}
		public boolean isEnabled(grpRegimenFilterEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(grpRegimenFilterEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(grpRegimenFilterEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(grpRegimenFilterEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class grpRegimenFilterEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static grpRegimenFilterEnumeration None = new grpRegimenFilterEnumeration(-1);
		public static grpRegimenFilterEnumeration rdoExact = new grpRegimenFilterEnumeration(0);
		public static grpRegimenFilterEnumeration rdoContains = new grpRegimenFilterEnumeration(1);
		public static grpRegimenFilterEnumeration rdoBegins = new grpRegimenFilterEnumeration(2);
		private grpRegimenFilterEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((grpRegimenFilterEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(64);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Oncology.contextMenuChemoRegimenConfigMedication = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Oncology.contextMenuChemoRegimenConfigMedicationADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Medication", true, false, new Integer(102179), true, false);
		contextMenus.Oncology.contextMenuChemoRegimenConfigMedication.add(contextMenus.Oncology.contextMenuChemoRegimenConfigMedicationADDItem);
		contextMenus.Oncology.contextMenuChemoRegimenConfigMedicationREMOVEItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove Medication", true, false, new Integer(102300), true, false);
		contextMenus.Oncology.contextMenuChemoRegimenConfigMedication.add(contextMenus.Oncology.contextMenuChemoRegimenConfigMedicationREMOVEItem);
		form.registerMenu(contextMenus.Oncology.contextMenuChemoRegimenConfigMedication);
		contextMenus.Oncology.contextMenuChemoRegimenConfigRegimen = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Oncology.contextMenuChemoRegimenConfigRegimenNEWItem = factory.createMenuItem(startControlID.intValue() + 3, "New", true, false, new Integer(102179), true, false);
		contextMenus.Oncology.contextMenuChemoRegimenConfigRegimen.add(contextMenus.Oncology.contextMenuChemoRegimenConfigRegimenNEWItem);
		contextMenus.Oncology.contextMenuChemoRegimenConfigRegimenEDITItem = factory.createMenuItem(startControlID.intValue() + 4, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.Oncology.contextMenuChemoRegimenConfigRegimen.add(contextMenus.Oncology.contextMenuChemoRegimenConfigRegimenEDITItem);
		form.registerMenu(contextMenus.Oncology.contextMenuChemoRegimenConfigRegimen);


		// Panel Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 384, 832, 208, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"", new Integer(2), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 444, 118, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Linked Medications:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 418, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Regimen:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Regimen:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 684, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 80, 16, 432, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(400), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 88, 416, 736, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbRegimenTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbRegimenTemp);
		qmbRegimenComboBox qmbRegimen = (qmbRegimenComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbRegimenComboBox.class, m_qmbRegimenTemp);
		super.addComboBox(qmbRegimen);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 664, 40, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Active Only", Boolean.FALSE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 464, 808, 109, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdMerdicationsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Oncology.contextMenuChemoRegimenConfigMedication, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdMerdicationsTemp);
		grdMerdicationsGrid grdMerdications = (grdMerdicationsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMerdicationsGrid.class, m_grdMerdicationsTemp);
		grdMerdications.addStringColumn("Medication(s)", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdMerdications);
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 74, 832, 304, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdRegimensTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.EDITABLE, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.Oncology.contextMenuChemoRegimenConfigRegimen, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdRegimensTemp);
		grdRegimensGrid grdRegimens = (grdRegimensGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRegimensGrid.class, m_grdRegimensTemp);
		grdRegimens.addStringColumn("Regimens", 0, 0, 750, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdRegimens.addImageColumn("Active", 0, 1, -1, true, 0);
		super.addGrid(grdRegimens);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 800, 10, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 760, 10, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpgrpRegimenFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpgrpRegimenFilter);
		grpRegimenFilterRadioButton grpRegimenFilter = (grpRegimenFilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpRegimenFilterRadioButton.class, tmpgrpRegimenFilter);
		grpRegimenFilter.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(grpRegimenFilter);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(6);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(7);
	}
	public TextBox txtRegimenFilter()
	{
		return (TextBox)super.getControl(8);
	}
	public qmbRegimenComboBox qmbRegimen()
	{
		return (qmbRegimenComboBox)super.getComboBox(0);
	}
	public CheckBox chkActiveOnly()
	{
		return (CheckBox)super.getControl(10);
	}
	public grdMerdicationsGrid grdMerdications()
	{
		return (grdMerdicationsGrid)super.getGrid(0);
	}
	public grdRegimensGrid grdRegimens()
	{
		return (grdRegimensGrid)super.getGrid(1);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(13);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(14);
	}
	public grpRegimenFilterRadioButton grpRegimenFilter()
	{
		return (grpRegimenFilterRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Oncology = new OncologyForms();
		}
		public final class OncologyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OncologyForms()
			{
				SearchRegimenMedication = new LocalFormName(125126);
			}
			public final FormName SearchRegimenMedication;
		}

		public OncologyForms Oncology;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				AnswerBox_Yes = new ImageHelper(102101, "Images/Core/answer_yes.png", new Integer(16), new Integer(16));
				AnswerBox_No = new ImageHelper(102100, "Images/Core/answer_no.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image AnswerBox_Yes;
			public final ims.framework.utils.Image AnswerBox_No;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentSelectedRecord = new ims.framework.ContextVariable("CurrentSelectedRecord", prefix + "_lv_Oncology.ChemotherapyRegimensConfig.__internal_x_context__CurrentSelectedRecord_" + componentIdentifier + "");
			cxl_SearchCriteria = new ims.framework.ContextVariable("SearchCriteria", prefix + "_lv_Oncology.ChemotherapyRegimensConfig.__internal_x_context__SearchCriteria_" + componentIdentifier + "");
		}
		
		public boolean getCurrentSelectedRecordIsNotNull()
		{
			return !cxl_CurrentSelectedRecord.getValueIsNull(context);
		}
		public ims.oncology.vo.ChemoRegimensDrugConfigVo getCurrentSelectedRecord()
		{
			return (ims.oncology.vo.ChemoRegimensDrugConfigVo)cxl_CurrentSelectedRecord.getValue(context);
		}
		public void setCurrentSelectedRecord(ims.oncology.vo.ChemoRegimensDrugConfigVo value)
		{
			cxl_CurrentSelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentSelectedRecord = null;
		public boolean getSearchCriteriaIsNotNull()
		{
			return !cxl_SearchCriteria.getValueIsNull(context);
		}
		public java.lang.Object getSearchCriteria()
		{
			return cxl_SearchCriteria.getValue(context);
		}
		public void setSearchCriteria(java.lang.Object value)
		{
			cxl_SearchCriteria.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SearchCriteria = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public OncologyNamespace Oncology = new OncologyNamespace();
		public final class OncologyNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ChemoRegimenConfigMedication implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int REMOVE = 2;
			}
			public void disableAllChemoRegimenConfigMedicationMenuItems()
			{
				this.contextMenuChemoRegimenConfigMedicationADDItem.setEnabled(false);
				this.contextMenuChemoRegimenConfigMedicationREMOVEItem.setEnabled(false);
			}
			public void hideAllChemoRegimenConfigMedicationMenuItems()
			{
				this.contextMenuChemoRegimenConfigMedicationADDItem.setVisible(false);
				this.contextMenuChemoRegimenConfigMedicationREMOVEItem.setVisible(false);
			}
			private Menu contextMenuChemoRegimenConfigMedication;
			public MenuItem getChemoRegimenConfigMedicationADDItem()
			{
				return this.contextMenuChemoRegimenConfigMedicationADDItem;
			}
			private MenuItem contextMenuChemoRegimenConfigMedicationADDItem;
			public MenuItem getChemoRegimenConfigMedicationREMOVEItem()
			{
				return this.contextMenuChemoRegimenConfigMedicationREMOVEItem;
			}
			private MenuItem contextMenuChemoRegimenConfigMedicationREMOVEItem;
			public final class ChemoRegimenConfigRegimen implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 3;
				public static final int EDIT = 4;
			}
			public void disableAllChemoRegimenConfigRegimenMenuItems()
			{
				this.contextMenuChemoRegimenConfigRegimenNEWItem.setEnabled(false);
				this.contextMenuChemoRegimenConfigRegimenEDITItem.setEnabled(false);
			}
			public void hideAllChemoRegimenConfigRegimenMenuItems()
			{
				this.contextMenuChemoRegimenConfigRegimenNEWItem.setVisible(false);
				this.contextMenuChemoRegimenConfigRegimenEDITItem.setVisible(false);
			}
			private Menu contextMenuChemoRegimenConfigRegimen;
			public MenuItem getChemoRegimenConfigRegimenNEWItem()
			{
				return this.contextMenuChemoRegimenConfigRegimenNEWItem;
			}
			private MenuItem contextMenuChemoRegimenConfigRegimenNEWItem;
			public MenuItem getChemoRegimenConfigRegimenEDITItem()
			{
				return this.contextMenuChemoRegimenConfigRegimenEDITItem;
			}
			private MenuItem contextMenuChemoRegimenConfigRegimenEDITItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[79];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedMedication", "BO-1003100024-ID", "ID_Medication");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedMedication", "BO-1003100024-MEDICATIONNAME", "MedicationName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedMedication", "BO-1003100024-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedMedication", "BO-1003100024-ISCONTROLLEDDRUG", "IsControlledDrug");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedMedication", "BO-1003100024-FREQUENCYDEFAULT", "FrequencyDefault");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedMedication", "BO-1003100024-NOOFDAYSSUPPLYDEFAULT", "NoOfDaysSupplyDefault");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyRegimensConfig.__internal_x_context__CurrentSelectedRecord_" + componentIdentifier, "BO-1075100021-ID", "ID_ChemoRegimensDrugConfig");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.ChemotherapyRegimensConfig.__internal_x_context__CurrentSelectedRecord_" + componentIdentifier, "BO-1075100021-REGIMEN", "Regimen");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
