//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.oncology.forms.chemotherapyregimensconfig;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.MedicationLiteVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.oncology.forms.chemotherapyregimensconfig.GenForm.grdMerdicationsRow;
import ims.oncology.forms.chemotherapyregimensconfig.GenForm.grdRegimensRow;
import ims.oncology.forms.chemotherapyregimensconfig.GenForm.grpRegimenFilterEnumeration;
import ims.oncology.vo.ChemoRegimensDrugConfigVo;
import ims.oncology.vo.ChemoRegimensDrugConfigVoCollection;
import ims.oncology.vo.lookups.RegimenAcronym;
import ims.oncology.vo.lookups.RegimenAcronymCollection;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	// ----------------------------------------------------------------------------------------------------------
	// Enumeration utility class
	// ----------------------------------------------------------------------------------------------------------

	/**
	 * Enumeration utility class used to determine how regimen text should be searched
	 * 		- BEGINS	- for "Begins with" search pattern in Regimen name
	 * 		- CONTAINS	- for "Contains" search pattern in Regimen name
	 * 		- EXACT		- for "Exact match" search pattern in Regimen name    
	 */
	public enum SearchPattern
	{
		NONE		(grpRegimenFilterEnumeration.None, -1),
		BEGINS		(grpRegimenFilterEnumeration.rdoBegins, 0),
		CONTAINS	(grpRegimenFilterEnumeration.rdoContains, 1),
		EXACT		(grpRegimenFilterEnumeration.rdoExact, 2);
		
		
		private int value;
		private grpRegimenFilterEnumeration selection;
		
		
		private SearchPattern(grpRegimenFilterEnumeration userSelection, int value)
		{
			this.selection = userSelection;
			this.value = value;
		}
		
		
		public int getIntValue()
		{
			return this.value;
		}
		
		public grpRegimenFilterEnumeration getUserSelection()
		{
			return this.selection;
		}
		
		
		public static SearchPattern getSearchPattern(grpRegimenFilterEnumeration userSelection)
		{
			if (grpRegimenFilterEnumeration.rdoBegins.equals(userSelection))
				return SearchPattern.BEGINS;
			
			if (grpRegimenFilterEnumeration.rdoContains.equals(userSelection))
				return SearchPattern.CONTAINS;
			
			if (grpRegimenFilterEnumeration.rdoExact.equals(userSelection))
				return SearchPattern.EXACT;
			
			return NONE;
		}
		
		public static SearchPattern getSearchPattern(int value)
		{
			switch (value)
			{
				case 0:
					return BEGINS;
					
				case 1:
					return CONTAINS;
					
				case 2:
					return EXACT;
					
					
				default:
					return NONE;
			}
		}
	}

	/**
	 
	 * Utility class used to keep search criteria
	 */
	private class SearchCriteria
	{
		private String regimenName;
		private boolean activeOnly;
		private SearchPattern pattern;
		
		public SearchCriteria(String regimenName, boolean activeOnly, SearchPattern pattern)
		{
			this.regimenName = regimenName;
			this.activeOnly = activeOnly;
			this.pattern = pattern;
		}
	}
	

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();

	}
	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName.equals(form.getForms().Oncology.SearchRegimenMedication) && result.equals(DialogResult.OK))
		{
			if(form.getGlobalContext().Oncology.getSelectedMedicationIsNotNull())
				addMedicationRow(form.getGlobalContext().Oncology.getSelectedMedication());
			
		}
	}
	
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Check if there is search criteria provided
		if (!validateSearchCriteria())
		{
			engine.showMessage("Please provide some search criteria");
			return;
		}
				 
		form.getLocalContext().setSearchCriteria(new SearchCriteria(form.txtRegimenFilter().getValue().trim(), form.chkActiveOnly().getValue(), SearchPattern.getSearchPattern(form.grpRegimenFilter().getValue())));
	
		clearMedicationControls();
		form.grdRegimens().getRows().clear();
	
		form.getLocalContext().setCurrentSelectedRecord(null);
		
		search((SearchCriteria) form.getLocalContext().getSearchCriteria(), true);
		
		
	}
	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case ims.oncology.forms.chemotherapyregimensconfig.GenForm.ContextMenus.OncologyNamespace.ChemoRegimenConfigMedication.ADD:
				addMedication();
				updateContextMenu();
			break;
			case ims.oncology.forms.chemotherapyregimensconfig.GenForm.ContextMenus.OncologyNamespace.ChemoRegimenConfigMedication.REMOVE:
				form.grdMerdications().removeSelectedRow();
				updateContextMenu();
				
			break;
			case ims.oncology.forms.chemotherapyregimensconfig.GenForm.ContextMenus.OncologyNamespace.ChemoRegimenConfigRegimen.EDIT:
				updateInstance();
				updateContextMenu();
			break;
			case ims.oncology.forms.chemotherapyregimensconfig.GenForm.ContextMenus.OncologyNamespace.ChemoRegimenConfigRegimen.NEW:
				newInstance();
				updateContextMenu();
			break;
		}
	}
	private void addMedication()
	{
		engine.open(form.getForms().Oncology.SearchRegimenMedication);
	}
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		
		search((SearchCriteria) form.getLocalContext().getSearchCriteria(), false);
		selectionChanged();
		
		form.setMode(FormMode.VIEW);
		updateControlsState();
		updateContextMenu();
	}
	
	protected void onFormModeChanged() 
	{

		updateContextMenu();
		updateControlsState();
		
	}
	private boolean validateSearchCriteria()
	{
		if (form.txtRegimenFilter().getValue() == null || form.txtRegimenFilter().getValue().trim().length() == 0)
			return false;
		
		return true;
	}
	private void search(SearchCriteria criteria, boolean showNoResultsMessage) throws PresentationLogicException
	{
		ChemoRegimensDrugConfigVoCollection searchResults = domain.listChemoRegimenDrugConfig(criteria != null ? criteria.regimenName : null, criteria != null ? criteria.activeOnly : null,criteria != null ? criteria.pattern.getIntValue() : null);
		
		if (showNoResultsMessage && (searchResults == null || searchResults.size() == 0))
		{
			engine.showMessage("No results found for search criteria");
		}
		
		populateRegimenGrid(searchResults);
		updateContextMenu();
		updateControlsState(); 
		
		
	}
	
	private void clearScreen()
	{
		clearSearchControlsandRegimenGrid();
		clearMedicationControls();
	}
	private void clearSearchControlsandRegimenGrid()
	{
		form.grpRegimenFilter().setValue(ims.oncology.forms.chemotherapyregimensconfig.GenForm.grpRegimenFilterEnumeration.rdoBegins);
		form.txtRegimenFilter().setValue(null);
		form.chkActiveOnly().setValue(null);
		form.grdRegimens().getRows().clear();
	}
	private void clearMedicationControls()
	{
		form.qmbRegimen().clear();
		form.grdMerdications().getRows().clear();
	}
	private void populateRegimenGrid(ChemoRegimensDrugConfigVoCollection list) 
	{
		if(list == null || list.size() == 0)
			return;
		
		form.grdRegimens().getRows().clear();
		
		for(int i=0; i<list.size(); i++)
		{
			addRow(list.get(i));
		}
	}
	private void addRow(ChemoRegimensDrugConfigVo chemoregimensconfigvo) 
	{
		if(chemoregimensconfigvo == null)
			return;
		
		grdRegimensRow row = form.grdRegimens().getRows().newRow(chemoregimensconfigvo.equals(form.getLocalContext().getCurrentSelectedRecord()));
		
		row.setColRegimen(chemoregimensconfigvo.getRegimenIsNotNull() ? chemoregimensconfigvo.getRegimen().toString(): null);
		
		if (chemoregimensconfigvo.getRegimenIsNotNull() )
		{	
			if ( chemoregimensconfigvo.getRegimen().isActive()== true)
				 row.setColActive(form.getImages().Core.AnswerBox_Yes);
			else
				 row.setColActive(form.getImages().Core.AnswerBox_No);
				
			
		}
			
		row.setValue(chemoregimensconfigvo);
	}
	
		
	public void clearInstanceControls() {
		// TODO Auto-generated method stub
		
	}
	
	public void newInstance() throws PresentationLogicException 
	{
		form.getLocalContext().setCurrentSelectedRecord(null);
		form.grdRegimens().setValue(null);
		clearMedicationControls();
		form.setMode(FormMode.EDIT);
		form.qmbRegimen().setEnabled(true); //WDEV-17668
	}
	
	public boolean save() throws PresentationLogicException 
	{
		ChemoRegimensDrugConfigVo record = populateDataFromScreen(form.getLocalContext().getCurrentSelectedRecord());
		
		String[] errors = record.validate(validateUIRules());
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setCurrentSelectedRecord(domain.save(record));
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		form.getLocalContext().setSearchCriteria(new SearchCriteria(form.qmbRegimen().getValue().getText(), false, SearchPattern.EXACT));
		return true;
	}
	public String[] validateUIRules()
	{
		// Create a new list of arrays
		ArrayList<String> listOfErrors = new ArrayList<String>();

		if (form.qmbRegimen().getValue() == null && !form.getLocalContext().getCurrentSelectedRecordIsNotNull())
		{
			listOfErrors.add("Regimen is mandatory");
		}
		if (form.grdMerdications().getRows().size() < 1)
		// WDEV-16570	
			listOfErrors.add("At least one linked medication must be added");
			

		// Check to see if any errors were found
		int errorCount = listOfErrors.size();

		if (errorCount == 0)
			return null;

		// Transform the error list into an array
		String[] errors = new String[errorCount];

		for (int i = 0; i < errorCount; i++)
		{
			errors[i] = listOfErrors.get(i);
		}

		// Return the array of errors
		return errors;
	}
	private ChemoRegimensDrugConfigVo populateDataFromScreen(ChemoRegimensDrugConfigVo value)
	{
		if(value == null)
			value = new ChemoRegimensDrugConfigVo();

		if(value.getRegimen() == null)
			value.setRegimen(form.qmbRegimen().getValue());
		MedicationLiteVoCollection tempColl = new MedicationLiteVoCollection();
		for(int i = 0; i < form.grdMerdications().getRows().size();i++)
		{
			tempColl.add(form.grdMerdications().getRows().get(i).getValue());
		}
		
		value.setLinkedDrug(tempColl);
		
		return value;
	}
	public void updateControlsState() 
	{
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnEdit().setVisible(form.grdRegimens().getValue() != null);
			form.btnEdit().setEnabled(form.grdRegimens().getValue() != null);
		}
	}
	
	public void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
		form.qmbRegimen().setEnabled(false);
	}
	
	protected void onGrdRegimensSelectionChanged() throws PresentationLogicException 
	{
		selectionChanged();
		
	}
	private void selectionChanged() 
	{
		form.getLocalContext().setCurrentSelectedRecord(domain.getChemoRegimensConfig(form.grdRegimens().getValue()));
		form.qmbRegimen().clear();
		if(form.getLocalContext().getCurrentSelectedRecord() != null && form.getLocalContext().getCurrentSelectedRecord().getRegimenIsNotNull())
		{
			form.qmbRegimen().newRow(form.getLocalContext().getCurrentSelectedRecord().getRegimen(), form.getLocalContext().getCurrentSelectedRecord().getRegimen().getText());
			form.qmbRegimen().setValue(form.getLocalContext().getCurrentSelectedRecord().getRegimen());
		}
		populateMedicationFromData(form.getLocalContext().getCurrentSelectedRecord());
		updateControlsState();
		updateContextMenu();
	}
	private void populateMedicationFromData(ChemoRegimensDrugConfigVo record)
	{
		form.grdMerdications().getRows().clear();
		if(record == null)
			return;
		MedicationLiteVoCollection tempcoll = record.getLinkedDrug();
		if(tempcoll == null)
			return;
		for(int i = 0; i < tempcoll.size();i++)
		{
			addMedicationRow(tempcoll.get(i));
		}
	}
	
	private void addMedicationRow(MedicationLiteVo medicationVo) 
	{
		if(medicationVo == null)
			return;
		
		grdMerdicationsRow row = form.grdMerdications().getRows().newRow();
		
		row.setColMedication(medicationVo.getMedicationName());
		
			
		row.setValue(medicationVo);
	}
	private void updateContextMenu()
	{
		form.getContextMenus().Oncology.hideAllChemoRegimenConfigRegimenMenuItems();
		form.getContextMenus().Oncology.hideAllChemoRegimenConfigMedicationMenuItems();
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.getContextMenus().Oncology.getChemoRegimenConfigRegimenNEWItem().setVisible(true);
			form.getContextMenus().Oncology.getChemoRegimenConfigRegimenEDITItem().setVisible(form.grdRegimens().getValue() != null);
			
		}
		if(FormMode.EDIT.equals(form.getMode()))
		{
			form.getContextMenus().Oncology.getChemoRegimenConfigMedicationADDItem().setVisible(true);
			form.getContextMenus().Oncology.getChemoRegimenConfigMedicationREMOVEItem().setVisible(form.grdMerdications().getValue() != null);
		}
	}
	public void initialize() throws FormOpenException
	{
		// Clear local context (set to default values) variables
		form.getLocalContext().setCurrentSelectedRecord(null);
		form.getLocalContext().setSearchCriteria(null);
		
		// Clear screen
		clearScreen();
		
		// Set default search pattern && 'Active Only' value
		form.grpRegimenFilter().setValue(grpRegimenFilterEnumeration.rdoBegins);
		form.chkActiveOnly().setValue(Boolean.TRUE);
	}
	private void bindRegimens(String textName, RegimenAcronym selectedValue)
	{
		// Clear RegimenAcronym combo box
		form.qmbRegimen().clear();
		
		// Get RegimenAcronym records from domain
		RegimenAcronymCollection unusedRegimen = domain.listUnusedRegimen(textName, selectedValue);
		
		if (unusedRegimen == null)
		{
			form.qmbRegimen().showOpened();
			return;
		}
		
		for (int i = 0; i < unusedRegimen.size(); i++)
		{
			form.qmbRegimen().newRow(unusedRegimen.get(i), unusedRegimen.get(i).getText());
		}
		
		form.qmbRegimen().showOpened();
	}

	
	protected void onQmbRegimenTextSubmited(String value) throws PresentationLogicException 
	{
		bindRegimens(value, form.qmbRegimen().getValue());
		
	}

	
	protected void onImbClearClick() throws PresentationLogicException 
	{
		clearScreen();
		updateControlsState();
		updateContextMenu();	
		form.getLocalContext().setSearchCriteria(null);
		
	}

	
	protected void onGrdMerdicationsSelectionChanged()	throws PresentationLogicException 
	{
		updateContextMenu();
		
	}
	
}
