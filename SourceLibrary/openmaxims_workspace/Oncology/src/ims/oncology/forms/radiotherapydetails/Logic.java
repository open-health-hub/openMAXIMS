//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.53 build 2648.15910)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.oncology.forms.radiotherapydetails;

import ims.ccosched.vo.PatTreatPlanActionLiteVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.oncology.forms.radiotherapydetails.GenForm.gridRadiotherapyDetailsRow;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabBrachytherapyContainer.grdDosesRow;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabDetailsContainer.ConcurrentChemotherapyEnumeration;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabTeletherapyContainer.AdjacentFieldsEnumeration;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabTeletherapyContainer.GeneralAnaestheticEnumeration;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabTeletherapyContainer.HyperfractionationEnumeration;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabTeletherapyContainer.MultiplePlanningEnumeration;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabTeletherapyContainer.PreOperativeEnumeration;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabTeletherapyContainer.RetreatmentEnumeration;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabTeletherapyContainer.SupraclavicularDetailsEnumeration;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabTeletherapyContainer.grdAdjacentFieldsRow;
import ims.oncology.forms.radiotherapydetails.GenForm.lyrDetailsLayer.tabTeletherapyContainer.grdPhaseDetailsRow;
import ims.oncology.vo.AdjacentFieldPhaseVo;
import ims.oncology.vo.AdjacentFieldPhaseVoCollection;
import ims.oncology.vo.BrachyTxTreatmentDetailsVo;
import ims.oncology.vo.BrachyTxTreatmentDetailsVoCollection;
import ims.oncology.vo.BrachytherapyDetailsVo;
import ims.oncology.vo.PatTreatmentPlanRadiotherapyDialogVoCollection;
import ims.oncology.vo.RadiotherapyDetailsShortVo;
import ims.oncology.vo.RadiotherapyDetailsShortVoCollection;
import ims.oncology.vo.RadiotherapyDetailsVo;
import ims.oncology.vo.TeletherapyDetailsVo;
import ims.oncology.vo.TeletherapyPhaseVo;
import ims.oncology.vo.TeletherapyPhaseVoCollection;
import ims.oncology.vo.lookups.DiseaseStatus;
import ims.oncology.vo.lookups.RadiotherapyType;
import ims.oncology.vo.lookups.TreatmentHospital;
import ims.vo.LookupInstVo;
import ims.vo.LookupTypeVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Event handlers region
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * Form open event handler
	 */
	@Override
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		// Initialise form (set local context, initialise context menu options, etc.)
		initialize();

		// Refresh screen (list data from domain, get selected record, etc.)
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		// Update controls and context menu options
		updateControlsState();
	}

	@Override
	protected void onGridRadiotherapyDetailsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Update local context selection
		form.getLocalContext().setSelectedRecord(domain.get(form.gridRadiotherapyDetails().getValue()));

		// Populate instance controls
		populateScreenFromData(form.getLocalContext().getSelectedRecord());

		// Update EDIT and context menu options
		updateControlsState();
		
		//wdev-11473
		form.lyrDetails().showtabDetails();
	}

	@Override
	protected void onBNewClick() throws PresentationLogicException
	{
		newInstance();
	}

	@Override
	protected void onBEditClick() throws PresentationLogicException
	{
		updateInstance();
	}

	@Override
	protected void onBSaveClick() throws PresentationLogicException
	{
		if(save())
			open();
	}

	@Override
	protected void onBCancelClick() throws PresentationLogicException
	{
		// Refresh screen
		open();
	}

	@Override
	protected void onCmbRadiotherapyTypeValueChanged() throws PresentationLogicException
	{
		radioTherapyChanged();
	}

	private void radioTherapyChanged()
	{
		clearTeletherapyTab();
		clearBrachytherapyTab();
		
		updateControlsState();
	}

	/**
	 * Context menu item click event handler
	 */
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsMenu.NEW:
				newInstance();
			break;

			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsMenu.EDIT:
				updateInstance();
			break;
			
			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsPhaseMenu.ADD:
				newPhaseInstance();
			break;
			
			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsPhaseMenu.EDIT:
				updatePhaseInstance();
			break;
			
			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsPhaseMenu.REMOVE:
				removePhaseInstance();
			break;
			
			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsAdjacentMenu.ADD:
				newAdjacentInstance();
			break;
			
			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsAdjacentMenu.EDIT:
				updateAdjacentInstance();
			break;
			
			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsAdjacentMenu.REMOVE:
				removeAdjacentInstance();
			break;
			
			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsDoseMenu.ADD:
				newDoseInstance();
			break;
			
			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsDoseMenu.EDIT:
				updateDoseInstance();
			break;
			
			case GenForm.ContextMenus.OncologyNamespace.RadioTherapyDetailsDoseMenu.REMOVE:
				removeDoseInstance();
			break;
		}
		
		updateControlsState();
	}

	private void removeDoseInstance() 
	{
		makeAllGridsReadOnly();
		
		if(form.lyrDetails().tabBrachytherapy().grdDoses().getSelectedRow() != null)
		{
			form.lyrDetails().tabBrachytherapy().grdDoses().getRows().remove(form.lyrDetails().tabBrachytherapy().grdDoses().getSelectedRowIndex());
		}
	}

	private void updateDoseInstance() 
	{
		makeAllGridsReadOnly();
		
		if(form.lyrDetails().tabBrachytherapy().grdDoses().getSelectedRow() != null)
		{
			form.lyrDetails().tabBrachytherapy().grdDoses().getSelectedRow().setReadOnly(false);
		}
	}

	private void newDoseInstance() 
	{
		makeAllGridsReadOnly();
		
		grdDosesRow row = form.lyrDetails().tabBrachytherapy().grdDoses().getRows().newRow(true);
		row.setReadOnly(false);
	}

	private void removeAdjacentInstance() 
	{
		makeAllGridsReadOnly();
		
		if(form.lyrDetails().tabTeletherapy().grdAdjacentFields().getSelectedRow() != null)
		{
			form.lyrDetails().tabTeletherapy().grdAdjacentFields().getRows().remove(form.lyrDetails().tabTeletherapy().grdAdjacentFields().getSelectedRowIndex());
		}
	}

	private void updateAdjacentInstance() 
	{
		makeAllGridsReadOnly();
		
		if(form.lyrDetails().tabTeletherapy().grdAdjacentFields().getSelectedRow() != null)
		{
			form.lyrDetails().tabTeletherapy().grdAdjacentFields().getSelectedRow().setReadOnly(false);
		}
	}

	private void newAdjacentInstance() 
	{
		makeAllGridsReadOnly();
		
		grdAdjacentFieldsRow row = form.lyrDetails().tabTeletherapy().grdAdjacentFields().getRows().newRow(true);
		row.setReadOnly(false);
	}

	private void removePhaseInstance() 
	{
		makeAllGridsReadOnly();
		
		if(form.lyrDetails().tabTeletherapy().grdPhaseDetails().getSelectedRow() != null)
		{
			form.lyrDetails().tabTeletherapy().grdPhaseDetails().getRows().remove(form.lyrDetails().tabTeletherapy().grdPhaseDetails().getSelectedRowIndex());
		}
	}

	private void updatePhaseInstance() 
	{
		makeAllGridsReadOnly();
		
		if(form.lyrDetails().tabTeletherapy().grdPhaseDetails() != null)
		{
			form.lyrDetails().tabTeletherapy().grdPhaseDetails().getSelectedRow().setReadOnly(false);
		}
	}

	private void newPhaseInstance() 
	{
		makeAllGridsReadOnly();
		
		grdPhaseDetailsRow row = form.lyrDetails().tabTeletherapy().grdPhaseDetails().getRows().newRow(true);
		row.setReadOnly(false);
	}

	// -----------------------------------------------------------------------------------------------------------------------------------------------------
	// Form presentation function
	// -----------------------------------------------------------------------------------------------------------------------------------------------------

	private void initialize()
	{
		form.lyrDetails().showtabDetails();

		// WDEV-5193
		form.lyrDetails().tabDetails().customConsultant().initialize(MosType.MEDIC);
		form.lyrDetails().tabDetails().customConsultant().isRequired(true);
		
		//form.lyrDetails().tabDetails().ccPrescribing().setLabels(AuthoringLabelType.PRESCRIBING);
		//form.lyrDetails().tabDetails().ccPrescribing().initializeComponent(HcpDisType.MEDICAL);
		form.lyrDetails().tabDetails().ccPrescribingHCP().initialize(MosType.MEDIC);	//wdev-13110
		
		bindDiseaseStatus();
	}

	private void bindDiseaseStatus() 
	{
		form.lyrDetails().tabDetails().cmbDiseaseStatus().clear();
		
		ims.oncology.vo.lookups.DiseaseStatusCollection lookupCollection = domain.listDiseaseStatus();
		
		if(lookupCollection == null)
			return;
		
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			DiseaseStatus status = lookupCollection.get(x);
			
			if(status != null && status.getParent() == null)
			{
				form.lyrDetails().tabDetails().cmbDiseaseStatus().newRow(status, status.getText(), status.getImage(), status.getTextColor());
			}
		}
	}

	private void open()
	{
		// Clear screen
		clearScreen();

		// List radiotherapy records - retrieved from domain - to screen
		populateRadiotherapyGrid(domain.list(form.getGlobalContext().Core.getEpisodeofCareShort()));

		// Retrieve selection from domain
		form.getLocalContext().setSelectedRecord(domain.get(form.getLocalContext().getSelectedRecord()));

		// Reselect in grid
		form.gridRadiotherapyDetails().setValue(form.getLocalContext().getSelectedRecord());

		// Populate instance controls
		populateScreenFromData(form.getLocalContext().getSelectedRecord());
		
		//form.lyrDetails().showtabDetails();

		// Set form to VIEW mode
		form.setMode(FormMode.VIEW);
	}

	private void populateRadiotherapyGrid(RadiotherapyDetailsShortVoCollection listRadiotherapies)
	{
		// Clear radiotherapy grid
		form.gridRadiotherapyDetails().getRows().clear();

		// Check if records list is valid
		if (listRadiotherapies == null)
			return;

		// Iterate records collection and add them to the grid
		for (RadiotherapyDetailsShortVo radiotherapy : listRadiotherapies)
		{
			// Check if the radiotherapy is not null
			if (radiotherapy == null)
				continue;

			setRadiotherapyGridRow(form.gridRadiotherapyDetails().getRows().newRow(), radiotherapy);
		}
	}

	private void setRadiotherapyGridRow(gridRadiotherapyDetailsRow row, RadiotherapyDetailsShortVo radiotherapy)
	{
		// Check parameters
		if (row == null)
			throw new CodingRuntimeException("Fatal Error - Can not populate radiotherapy to null row");

		if (radiotherapy == null)
			throw new CodingRuntimeException("Major logical error - Can not populate a null value to row");

		// Set columns data
		row.setcolStartDate(radiotherapy.getStartDate());
		row.setcolType(radiotherapy.getRadiotherapyTypeIsNotNull() ? radiotherapy.getRadiotherapyType().getText() : "");
		row.setcolConsultant(radiotherapy.getTreatingConsultantIsNotNull() ? radiotherapy.getTreatingConsultant().toString() : "");
		row.setcolDectotrest(radiotherapy.getDateDecisionToTreat());
		row.setcolTreatSite(radiotherapy.getAnatomicalTreatmentSiteIsNotNull() ? radiotherapy.getAnatomicalTreatmentSite().getText() : "");
		row.setcolIntent(radiotherapy.getTreatementIntentIsNotNull() ? radiotherapy.getTreatementIntent().getText() : "");

		// Set row value
		row.setValue(radiotherapy);
	}

	private void clearScreen()
	{
		// Clear grid
		form.gridRadiotherapyDetails().getRows().clear();

		// Clear instance controls
		clearInstanceControls();
	}

	private void clearInstanceControls()
	{
		// Clear Details tab
		clearDetailsTab();

		// Clear Teletherapy tab
		clearTeletherapyTab();

		// Clear Brachytherapy tab
		clearBrachytherapyTab();
	}

	private void clearDetailsTab()
	{
		form.lyrDetails().tabDetails().cmbRadiotherapyType().setValue(null);
		form.lyrDetails().tabDetails().cmbHospital().setValue(null);
		form.lyrDetails().tabDetails().customConsultant().clear();
		form.lyrDetails().tabDetails().dteDecisionTreat().setValue(null);
		form.lyrDetails().tabDetails().cmbPerformance().setValue(null);
		form.lyrDetails().tabDetails().cmbAnatomicalSite().setValue(null);
		form.lyrDetails().tabDetails().cmbTreatIntent().setValue(null);
		form.lyrDetails().tabDetails().decPrescribedDose().setValue(null);
		form.lyrDetails().tabDetails().intPrescribedFractions().setValue(null);
		form.lyrDetails().tabDetails().intPrescribedDuration().setValue(null);
		form.lyrDetails().tabDetails().ConcurrentChemotherapy().setValue(null);
		
		//form.lyrDetails().tabDetails().ccPrescribing().setValue(null);
		form.lyrDetails().tabDetails().ccPrescribingHCP().setValue(null); 	//wdev-13110
		form.lyrDetails().tabDetails().dtePrescribing().setValue(null);		//wdev-13110
		
		form.lyrDetails().tabDetails().dteStart().setValue(null);
		form.lyrDetails().tabDetails().dteEnd().setValue(null);
		form.lyrDetails().tabDetails().intDuration().setValue(null);
		form.lyrDetails().tabDetails().intTreatmentCategory().setValue(null);
		form.lyrDetails().tabDetails().cmbDiseaseStatus().setValue(null);
		form.lyrDetails().tabDetails().cmbDiseaseTreatment().setValue(null);
		form.lyrDetails().tabDetails().cmbReason1().setValue(null);
		form.lyrDetails().tabDetails().cmbReason2().setValue(null);
		form.lyrDetails().tabDetails().cmbCourseStatus().setValue(null);
	}

	private void clearTeletherapyTab()
	{
		form.lyrDetails().tabTeletherapy().grdPhaseDetails().getRows().clear();
		
		form.lyrDetails().tabTeletherapy().intPrescriptionPoint().setValue(null);
		form.lyrDetails().tabTeletherapy().decActualDose().setValue(null);
		form.lyrDetails().tabTeletherapy().intActualFractions().setValue(null);
		form.lyrDetails().tabTeletherapy().intNoofPhases().setValue(null);
		form.lyrDetails().tabTeletherapy().SupraclavicularDetails().setValue(null);
		form.lyrDetails().tabTeletherapy().decDose().setValue(null);
		form.lyrDetails().tabTeletherapy().intFractions().setValue(null);
		form.lyrDetails().tabTeletherapy().AdjacentFields().setValue(null);
		
		form.lyrDetails().tabTeletherapy().grdAdjacentFields().getRows().clear();
		
		form.lyrDetails().tabTeletherapy().Retreatment().setValue(null);
		form.lyrDetails().tabTeletherapy().Hyperfractionation().setValue(null);
		form.lyrDetails().tabTeletherapy().cmbSpecialTechnique().setValue(null);
		form.lyrDetails().tabTeletherapy().PreOperative().setValue(null);
		form.lyrDetails().tabTeletherapy().GeneralAnaesthetic().setValue(null);
		form.lyrDetails().tabTeletherapy().cmbRadiationType().setValue(null);
		form.lyrDetails().tabTeletherapy().cmbBeamEnergy().setValue(null);
		form.lyrDetails().tabTeletherapy().cmbNoFields().setValue(null);
		form.lyrDetails().tabTeletherapy().cmbPlanningComplexity().setValue(null);
		form.lyrDetails().tabTeletherapy().MultiplePlanning().setValue(null);
	}

	private void clearBrachytherapyTab()
	{
		form.lyrDetails().tabBrachytherapy().cmbBrachytherapyType().setValue(null);
		form.lyrDetails().tabBrachytherapy().cmbPrescriptionPoint().setValue(null);
		form.lyrDetails().tabBrachytherapy().cmbUnit().setValue(null);
		
		form.lyrDetails().tabBrachytherapy().grdDoses().getRows().clear();
		form.lyrDetails().tabBrachytherapy().decTotalDose().setValue(null);
		
		form.lyrDetails().tabBrachytherapy().intActualNoofTreatments().setValue(null);
		form.lyrDetails().tabBrachytherapy().cmbActualDoseRate().setValue(null);
		form.lyrDetails().tabBrachytherapy().intTreatmentLength().setValue(null);
		form.lyrDetails().tabBrachytherapy().cmbDeliveryType().setValue(null);
		form.lyrDetails().tabBrachytherapy().cmbIsotypeType().setValue(null);
		form.lyrDetails().tabBrachytherapy().cmbUnsealedSource().setValue(null);
		form.lyrDetails().tabBrachytherapy().cmbPatientType().setValue(null);
	}

	private void updateControlsState()
	{
		// Separate states by mode (some controls have the state hard set for some modes)
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.bEdit().setVisible(form.gridRadiotherapyDetails().getValue() != null);
			form.lyrDetails().tabDetails().customConsultant().setEnabled(false);     //wdev-13301
		}
		else if(FormMode.EDIT.equals(form.getMode()))
		{
			boolean isEnable = form.getLocalContext().getSelectedRecordIsNotNull() ? false : true;
			form.lyrDetails().tabDetails().cmbRadiotherapyType().setEnabled(isEnable);
			
			form.lyrDetails().tabDetails().cmbDiseaseTreatment().setEnabled(form.lyrDetails().tabDetails().cmbDiseaseStatus().getValue() != null);
			
			form.lyrDetails().tabTeletherapy().intFractions().setEnabled(SupraclavicularDetailsEnumeration.rdoSDYes.equals(form.lyrDetails().tabTeletherapy().SupraclavicularDetails().getValue()));
			form.lyrDetails().tabTeletherapy().decDose().setEnabled(SupraclavicularDetailsEnumeration.rdoSDYes.equals(form.lyrDetails().tabTeletherapy().SupraclavicularDetails().getValue()));
			
			if(form.lyrDetails().tabTeletherapy().SupraclavicularDetails().getValue() == null || SupraclavicularDetailsEnumeration.rdoSDNo.equals(form.lyrDetails().tabTeletherapy().SupraclavicularDetails().getValue()))
			{
				form.lyrDetails().tabTeletherapy().intFractions().setValue(null);
				form.lyrDetails().tabTeletherapy().decDose().setValue(null);
			}
			
			form.lyrDetails().tabTeletherapy().grdAdjacentFields().setEnabled(AdjacentFieldsEnumeration.rdoAFYes.equals(form.lyrDetails().tabTeletherapy().AdjacentFields().getValue()));
			form.lyrDetails().tabTeletherapy().grdAdjacentFields().setReadOnly(!AdjacentFieldsEnumeration.rdoAFYes.equals(form.lyrDetails().tabTeletherapy().AdjacentFields().getValue()));
			
			if(form.lyrDetails().tabTeletherapy().AdjacentFields().getValue() == null || AdjacentFieldsEnumeration.rdoAFNo.equals(form.lyrDetails().tabTeletherapy().AdjacentFields().getValue()))
			{
				form.lyrDetails().tabTeletherapy().grdAdjacentFields().getRows().clear();
			}
			form.lyrDetails().tabDetails().customConsultant().setEnabled(true);     //wdev-13301
		}
		
		form.lyrDetails().tabTeletherapy().setHeaderVisible(RadiotherapyType.TELETHERAPY.equals(form.lyrDetails().tabDetails().cmbRadiotherapyType().getValue()));
		form.lyrDetails().tabBrachytherapy().setHeaderVisible(RadiotherapyType.BRACHYTHERAPY.equals(form.lyrDetails().tabDetails().cmbRadiotherapyType().getValue()));
		
		//form.lyrDetails().tabDetails().ccPrescribing().setMode(form.getMode());
		form.lyrDetails().tabDetails().customConsultant().setMode(form.getMode());
		
		// Update context menu options
		updateContextMenuState();
	}
	
	private void makeAllGridsReadOnly()
	{
		for(int i=0; i<form.lyrDetails().tabTeletherapy().grdPhaseDetails().getRows().size(); i++)
		{
			form.lyrDetails().tabTeletherapy().grdPhaseDetails().getRows().get(i).setReadOnly(true);
		}
		
		for(int i=0; i<form.lyrDetails().tabTeletherapy().grdAdjacentFields().getRows().size(); i++)
		{
			form.lyrDetails().tabTeletherapy().grdAdjacentFields().getRows().get(i).setReadOnly(true);
		}
		
		for(int i=0; i<form.lyrDetails().tabBrachytherapy().grdDoses().getRows().size(); i++)
		{
			form.lyrDetails().tabBrachytherapy().grdDoses().getRows().get(i).setReadOnly(true);
		}
	}

	private void updateContextMenuState()
	{
		form.getContextMenus().Oncology.getRadioTherapyDetailsMenuNEWItem().setVisible(FormMode.VIEW.equals(form.getMode()));
		form.getContextMenus().Oncology.getRadioTherapyDetailsMenuEDITItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.gridRadiotherapyDetails().getValue() != null); 
		
		form.getContextMenus().Oncology.getRadioTherapyDetailsPhaseMenuADDItem().setVisible(FormMode.EDIT.equals(form.getMode()) && RadiotherapyType.TELETHERAPY.equals(form.lyrDetails().tabDetails().cmbRadiotherapyType().getValue()));
		form.getContextMenus().Oncology.getRadioTherapyDetailsAdjacentMenuADDItem().setVisible(FormMode.EDIT.equals(form.getMode()) && RadiotherapyType.TELETHERAPY.equals(form.lyrDetails().tabDetails().cmbRadiotherapyType().getValue()));
		form.getContextMenus().Oncology.getRadioTherapyDetailsDoseMenuADDItem().setVisible(FormMode.EDIT.equals(form.getMode()) && RadiotherapyType.BRACHYTHERAPY.equals(form.lyrDetails().tabDetails().cmbRadiotherapyType().getValue()));
		
		form.getContextMenus().Oncology.getRadioTherapyDetailsPhaseMenuEDITItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabTeletherapy().grdPhaseDetails().getSelectedRow()!= null);
		form.getContextMenus().Oncology.getRadioTherapyDetailsAdjacentMenuEDITItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabTeletherapy().grdAdjacentFields().getSelectedRow() != null);
		form.getContextMenus().Oncology.getRadioTherapyDetailsDoseMenuEDITItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabBrachytherapy().grdDoses().getSelectedRow() != null);
		
		form.getContextMenus().Oncology.getRadioTherapyDetailsPhaseMenuREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabTeletherapy().grdPhaseDetails().getSelectedRow() != null);
		form.getContextMenus().Oncology.getRadioTherapyDetailsAdjacentMenuREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabTeletherapy().grdAdjacentFields().getSelectedRow() != null);
		form.getContextMenus().Oncology.getRadioTherapyDetailsDoseMenuREMOVEItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrDetails().tabBrachytherapy().grdDoses().getSelectedRow() != null);
	}

	private void newInstance()
	{
		form.getLocalContext().setSelectedRecord(null);
		form.gridRadiotherapyDetails().setValue(null);
		form.getGlobalContext().Oncology.setRadiotherapyPatTreatmentPlanAction(null);
		
		clearInstanceControls();

		form.lyrDetails().showtabDetails();
		
		Object mos = domain.getHcpLiteUser();
		
		if(mos instanceof HcpLiteVo)
		{
			HcpLiteVo hcp = (HcpLiteVo) mos;
			HcpDisType hcptype =getParentNodeHcp(hcp.getHcpType());		//wdev-13110 
			if( hcptype != null && hcptype.equals(HcpDisType.MEDICAL))	//wdev-13110
				form.lyrDetails().tabDetails().ccPrescribingHCP().setValue((MedicVo)domain.getMedic(hcp));
			
			
		}
		
		LookupInstVo lookup = domain.getLookupService().getDefaultInstance(form.getForms().Oncology.RadioTherapyDetails.getID(), new LookupTypeVo(TreatmentHospital.TYPE_ID));
		
		if(lookup != null)
		{
			form.lyrDetails().tabDetails().cmbHospital().setValue(TreatmentHospital.buildLookup(lookup.getBean()));
		}
		
		form.setMode(FormMode.EDIT);
		
		if(ConfigFlag.UI.BED_INFO_UI_TYPE.getValue().equals("CCO"))
		{
			PatTreatmentPlanRadiotherapyDialogVoCollection voColl;
			try 
			{
				voColl = domain.listActivePatTreatMentPlans(form.getGlobalContext().Core.getPatientShort(), form.getGlobalContext().Core.getEpisodeofCareShort());
			} 
			catch (NumberFormatException e) 
			{
				engine.showMessage(e.getMessage());
				return;
			} 
			
			for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
			{
				PatTreatPlanActionLiteVoCollection voActionsColl = voColl.get(i).getActions();
				
				for (int x = 0 ; voActionsColl != null && x < voActionsColl.size() ; x++)
				{
					if( voActionsColl.get(x).getActiveIsNotNull()
						&& voActionsColl.get(x).getActive())
					{
						engine.open(form.getForms().Oncology.PatientsTreatmentPlanActionsDialog);
						break;
					}
				}
			}
		}
	}
	//wdev-13110
	private HcpDisType getParentNodeHcp(HcpDisType hcpvo)
	{
		if(hcpvo == null)
			return null;
		if(hcpvo.getParent() == null)
			return hcpvo;
		else
			return getParentNodeHcp(hcpvo.getParent());
		
	}

	private void updateInstance()
	{
		//form.lyrDetails().showtabDetails();
		form.setMode(FormMode.EDIT);
	}

	private boolean save()
	{
		try
		{
			RadiotherapyDetailsVo record = populateDataFromScreen(form.getLocalContext().getSelectedRecord());

			String[] errors = validateUIRules();
			errors = record.validate(errors);

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			if (record.getID_RadiotherapyDetails() == null
				&& form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanActionIsNotNull()
				&& form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction().getID_PatActionIsNotNull()
				&& domain.checkIfChosenPlanLinked(form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction()))
			{
				engine.showMessage("The chosen action plan is already linked to another record. Please select a different action plan record.","Warning", MessageButtons.OK, MessageIcon.WARNING);
				open();
				return false;
			}
			form.getLocalContext().setSelectedRecord(domain.save(record));

			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			open();
			return false;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			e.printStackTrace();
			return false;
		}
	}

	private String[] validateUIRules()
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if (form.lyrDetails().tabDetails().dteDecisionTreat().getValue() != null && form.lyrDetails().tabDetails().dteDecisionTreat().getValue().isGreaterThan(new Date()))
			errors.add("Date Decision to Treat can not be set in the future.");

		if (form.lyrDetails().tabDetails().dteStart().getValue() != null && form.lyrDetails().tabDetails().dteEnd().getValue() != null && form.lyrDetails().tabDetails().dteStart().getValue().isGreaterThan(form.lyrDetails().tabDetails().dteEnd().getValue()))
			errors.add("Actual Start Date can not be greater than Actual End Date.");
		
		if (errors.size() == 0)
			return null;

		return errors.toArray(new String[errors.size()]);
	}

	protected void populateScreenFromData(RadiotherapyDetailsVo record)
	{
		if (record == null)
			return;

		clearInstanceControls();
		
		populateDetailsTabFromData(record);

		populateTeletherapyTabFromData(record.getTeletherapyDetails());

		populateBrachytherapyTabFromData(record.getBrachytherapyDetails());
	}

	private void populateBrachytherapyTabFromData(BrachytherapyDetailsVo brachytherapyDetails) 
	{
		if (brachytherapyDetails == null)
			return;
		
		form.lyrDetails().tabBrachytherapy().cmbBrachytherapyType().setValue(brachytherapyDetails.getBrachytherapyType());
		form.lyrDetails().tabBrachytherapy().cmbPrescriptionPoint().setValue(brachytherapyDetails.getPrescriptionPoint());
		form.lyrDetails().tabBrachytherapy().cmbUnit().setValue(brachytherapyDetails.getUnit());
		
		populateDosesGridFromData(brachytherapyDetails.getTreatmentDetails());
		form.lyrDetails().tabBrachytherapy().decTotalDose().setValue(brachytherapyDetails.getTotalDose());
		
		form.lyrDetails().tabBrachytherapy().intActualNoofTreatments().setValue(brachytherapyDetails.getActualNrTreatments());
		form.lyrDetails().tabBrachytherapy().cmbActualDoseRate().setValue(brachytherapyDetails.getActualDoseRate());
		form.lyrDetails().tabBrachytherapy().intTreatmentLength().setValue(brachytherapyDetails.getTreatmentLength());
		form.lyrDetails().tabBrachytherapy().cmbDeliveryType().setValue(brachytherapyDetails.getBrachyDeliveryType());
		form.lyrDetails().tabBrachytherapy().cmbIsotypeType().setValue(brachytherapyDetails.getBrachyTherapyIsotopeType());
		form.lyrDetails().tabBrachytherapy().cmbUnsealedSource().setValue(brachytherapyDetails.getBrachyTherapyUnsealedSourceType());
		form.lyrDetails().tabBrachytherapy().cmbPatientType().setValue(brachytherapyDetails.getPatientType());
	}

	private void populateDosesGridFromData(BrachyTxTreatmentDetailsVoCollection treatmentDetails) 
	{
		if(treatmentDetails == null)
			return;
		
		for(BrachyTxTreatmentDetailsVo dose : treatmentDetails)
		{
			addDoseRow(dose);
		}
	}

	private void addDoseRow(BrachyTxTreatmentDetailsVo dose) 
	{
		if(dose == null)
			return;
		
		grdDosesRow row = form.lyrDetails().tabBrachytherapy().grdDoses().getRows().newRow();
		
		row.setColDate(dose.getTreatmentDate());
		row.setColDose(dose.getDose());
		row.setColAnaesthetic(YesNo.YES.equals(dose.getGeneralAnaesthetic()) ? true : false);
		row.setReadOnly(true);
		
		row.setValue(dose);
	}

	private void populateTeletherapyTabFromData(TeletherapyDetailsVo teletherapyDetails)
	{
		if(teletherapyDetails == null)
			return;
		
		populatePhaseDetails(teletherapyDetails.getPhaseDetails());
		
		form.lyrDetails().tabTeletherapy().intPrescriptionPoint().setValue(teletherapyDetails.getPerscriptionPoint());
		form.lyrDetails().tabTeletherapy().decActualDose().setValue(teletherapyDetails.getActualDose());
		form.lyrDetails().tabTeletherapy().intActualFractions().setValue(teletherapyDetails.getActualFractions());
		form.lyrDetails().tabTeletherapy().intNoofPhases().setValue(teletherapyDetails.getActualPhases());
		form.lyrDetails().tabTeletherapy().SupraclavicularDetails().setValue(YesNo.YES.equals(teletherapyDetails.getAnterior()) ? SupraclavicularDetailsEnumeration.rdoSDYes : (YesNo.NO.equals(teletherapyDetails.getAnterior()) ? SupraclavicularDetailsEnumeration.rdoSDNo : null));
		form.lyrDetails().tabTeletherapy().decDose().setValue(teletherapyDetails.getAnteriorDose());
		form.lyrDetails().tabTeletherapy().intFractions().setValue(teletherapyDetails.getAnteriorFractions());
		form.lyrDetails().tabTeletherapy().AdjacentFields().setValue(YesNo.YES.equals(teletherapyDetails.getHasAdjacentFields()) ? AdjacentFieldsEnumeration.rdoAFYes : (YesNo.NO.equals(teletherapyDetails.getHasAdjacentFields()) ? AdjacentFieldsEnumeration.rdoAFNo : null));
		
		populateAdjacentDetails(teletherapyDetails.getAdjacentFieldDetails());
		
		form.lyrDetails().tabTeletherapy().Retreatment().setValue(YesNo.YES.equals(teletherapyDetails.getRetreatment()) ? RetreatmentEnumeration.rdoRYes : (YesNo.NO.equals(teletherapyDetails.getRetreatment()) ? RetreatmentEnumeration.rdoRNo : null));
		form.lyrDetails().tabTeletherapy().Hyperfractionation().setValue(YesNo.YES.equals(teletherapyDetails.getHyperfractionation()) ? HyperfractionationEnumeration.rdoHYes : (YesNo.NO.equals(teletherapyDetails.getHyperfractionation()) ? HyperfractionationEnumeration.rdoHNo : null));
		form.lyrDetails().tabTeletherapy().cmbSpecialTechnique().setValue(teletherapyDetails.getSpecialTechnique());
		form.lyrDetails().tabTeletherapy().PreOperative().setValue(YesNo.YES.equals(teletherapyDetails.getPreoperative()) ? PreOperativeEnumeration.rdoPOYes : (YesNo.NO.equals(teletherapyDetails.getPreoperative()) ? PreOperativeEnumeration.rdoPONo : null));
		form.lyrDetails().tabTeletherapy().GeneralAnaesthetic().setValue(YesNo.YES.equals(teletherapyDetails.getGeneralAnaesthetic()) ? GeneralAnaestheticEnumeration.rdoGAYes : (YesNo.NO.equals(teletherapyDetails.getGeneralAnaesthetic()) ? GeneralAnaestheticEnumeration.rdoGANo : null));
		form.lyrDetails().tabTeletherapy().cmbRadiationType().setValue(teletherapyDetails.getBeamType());
		form.lyrDetails().tabTeletherapy().cmbBeamEnergy().setValue(teletherapyDetails.getBeamEnergy());
		form.lyrDetails().tabTeletherapy().cmbNoFields().setValue(teletherapyDetails.getNoOfFields());
		form.lyrDetails().tabTeletherapy().cmbPlanningComplexity().setValue(teletherapyDetails.getComplexityGroup());
		form.lyrDetails().tabTeletherapy().MultiplePlanning().setValue(YesNo.YES.equals(teletherapyDetails.getMultiplePlanning()) ? MultiplePlanningEnumeration.rdoMPYes : (YesNo.NO.equals(teletherapyDetails.getMultiplePlanning()) ? MultiplePlanningEnumeration.rdoMPNo : null));
	}

	private void populateAdjacentDetails(AdjacentFieldPhaseVoCollection adjacentFieldDetails) 
	{
		if(adjacentFieldDetails == null)
			return;
		
		for(AdjacentFieldPhaseVo field : adjacentFieldDetails)
		{
			addAdjacentRow(field);
		}
	}

	private void addAdjacentRow(AdjacentFieldPhaseVo field) 
	{
		if(field == null)
			return;
		
		grdAdjacentFieldsRow row = form.lyrDetails().tabTeletherapy().grdAdjacentFields().getRows().newRow();
		
		row.setColPhase(field.getPhase());
		row.setColDose1(field.getDose1());
		row.setColTxt1(field.getFractions1());
		row.setColDose2(field.getDose2());
		row.setColTxt2(field.getFractions2());
		row.setReadOnly(true);
		
		row.setValue(field);
	}

	private void populatePhaseDetails(TeletherapyPhaseVoCollection phaseDetails) 
	{
		if(phaseDetails == null)
			return;
		
		for(TeletherapyPhaseVo phase : phaseDetails)
		{
			addPhaseRow(phase);
		}
	}

	private void addPhaseRow(TeletherapyPhaseVo phase) 
	{
		if(phase == null)
			return;
		
		grdPhaseDetailsRow row = form.lyrDetails().tabTeletherapy().grdPhaseDetails().getRows().newRow();
		
		row.setColPhase(phase.getPhase());
		row.setColDose(phase.getDose());
		row.setColFractions(phase.getFractions());
		row.setReadOnly(true);
		
		row.setValue(phase);
	}

	private void populateDetailsTabFromData(RadiotherapyDetailsVo record) 
	{
		form.lyrDetails().tabDetails().cmbRadiotherapyType().setValue(record.getRadiotherapyType());
		form.lyrDetails().tabDetails().cmbHospital().setValue(record.getTreatingHospital());
		form.lyrDetails().tabDetails().customConsultant().setValue(record.getTreatingConsultant());
		form.lyrDetails().tabDetails().dteDecisionTreat().setValue(record.getDateDecisionToTreat());
		form.lyrDetails().tabDetails().cmbPerformance().setValue(record.getPerformanceStatusAtDDT());
		form.lyrDetails().tabDetails().cmbAnatomicalSite().setValue(record.getAnatomicalTreatmentSite());
		form.lyrDetails().tabDetails().cmbTreatIntent().setValue(record.getTreatementIntent());
		form.lyrDetails().tabDetails().decPrescribedDose().setValue(record.getPrescribedDose());
		form.lyrDetails().tabDetails().intPrescribedFractions().setValue(record.getPrescribedFractions());
		form.lyrDetails().tabDetails().intPrescribedDuration().setValue(record.getPrescribedDuration());
		form.lyrDetails().tabDetails().ConcurrentChemotherapy().setValue(YesNo.YES.equals(record.getConcurrentChemotherapy()) ? ConcurrentChemotherapyEnumeration.rdoCChemotherapyYes : (YesNo.NO.equals(record.getConcurrentChemotherapy()) ? ConcurrentChemotherapyEnumeration.rdoCChemotherapyNo : null));
		
		//form.lyrDetails().tabDetails().ccPrescribing().setValue(record.getAuthoringInformation());
		form.lyrDetails().tabDetails().ccPrescribingHCP().setValue(record.getPrescribingHCP());	//wdev-	13110	
		form.lyrDetails().tabDetails().dtePrescribing().setValue(record.getPrescribedDate());	//wdev-13110
		
		form.lyrDetails().tabDetails().dteStart().setValue(record.getStartDate());
		form.lyrDetails().tabDetails().dteEnd().setValue(record.getEndDate());
		form.lyrDetails().tabDetails().intDuration().setValue(updateActualDuration());
		
		form.lyrDetails().tabDetails().intTreatmentCategory().setValue(record.getTreatmentCategory());
		form.lyrDetails().tabDetails().cmbDiseaseStatus().setValue(record.getDiseaseStatus());
		comboDiseaseStatusValueChanged();	//wdev-12756
		form.lyrDetails().tabDetails().cmbDiseaseTreatment().setValue(record.getDiseaseTreatment());
		form.lyrDetails().tabDetails().cmbReason1().setValue(record.getReasonDelay1());
		form.lyrDetails().tabDetails().cmbReason2().setValue(record.getReasonDelay2());
		form.lyrDetails().tabDetails().cmbCourseStatus().setValue(record.getTreatmentCourseStatus());
	}

	private RadiotherapyDetailsVo populateDataFromScreen(RadiotherapyDetailsVo record)
	{
		if (record == null)
		{
			record = new RadiotherapyDetailsVo();

			record.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			record.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}

		record.setRadiotherapyType(form.lyrDetails().tabDetails().cmbRadiotherapyType().getValue());
		record.setTreatingHospital(form.lyrDetails().tabDetails().cmbHospital().getValue());
		record.setTreatingConsultant(form.lyrDetails().tabDetails().customConsultant().getValue());
		record.setDateDecisionToTreat(form.lyrDetails().tabDetails().dteDecisionTreat().getValue());
		record.setPerformanceStatusAtDDT(form.lyrDetails().tabDetails().cmbPerformance().getValue());
		record.setAnatomicalTreatmentSite(form.lyrDetails().tabDetails().cmbAnatomicalSite().getValue());
		record.setTreatementIntent(form.lyrDetails().tabDetails().cmbTreatIntent().getValue());
		record.setPrescribedDose(form.lyrDetails().tabDetails().decPrescribedDose().getValue());
		record.setPrescribedFractions(form.lyrDetails().tabDetails().intPrescribedFractions().getValue());
		record.setPrescribedDuration(form.lyrDetails().tabDetails().intPrescribedDuration().getValue());
		record.setConcurrentChemotherapy(ConcurrentChemotherapyEnumeration.rdoCChemotherapyYes.equals(form.lyrDetails().tabDetails().ConcurrentChemotherapy().getValue()) ? YesNo.YES : (ConcurrentChemotherapyEnumeration.rdoCChemotherapyNo.equals(form.lyrDetails().tabDetails().ConcurrentChemotherapy().getValue()) ? YesNo.NO : null));
		
		//record.setAuthoringInformation(form.lyrDetails().tabDetails().ccPrescribing().getValue());
		record.setPrescribingHCP((MedicVo) form.lyrDetails().tabDetails().ccPrescribingHCP().getValue());	//wdev-13110
		record.setPrescribedDate(form.lyrDetails().tabDetails().dtePrescribing().getValue());				//wdev-13110
		record.setStartDate(form.lyrDetails().tabDetails().dteStart().getValue());
		record.setEndDate(form.lyrDetails().tabDetails().dteEnd().getValue());
		record.setTreatmentCategory(form.lyrDetails().tabDetails().intTreatmentCategory().getValue());
		record.setDiseaseStatus(form.lyrDetails().tabDetails().cmbDiseaseStatus().getValue());
		record.setDiseaseTreatment(form.lyrDetails().tabDetails().cmbDiseaseTreatment().getValue());
		record.setReasonDelay1(form.lyrDetails().tabDetails().cmbReason1().getValue());
		record.setReasonDelay2(form.lyrDetails().tabDetails().cmbReason2().getValue());
		record.setTreatmentCourseStatus(form.lyrDetails().tabDetails().cmbCourseStatus().getValue());
		
		record.setTeletherapyDetails(RadiotherapyType.TELETHERAPY.equals(form.lyrDetails().tabDetails().cmbRadiotherapyType().getValue()) ? populateDataFromTeletherapyTab(record.getTeletherapyDetails()) : null);
		record.setBrachytherapyDetails(RadiotherapyType.BRACHYTHERAPY.equals(form.lyrDetails().tabDetails().cmbRadiotherapyType().getValue()) ? populateDataFromBrachyttherapyTab(record.getBrachytherapyDetails()) : null);

		record.setAssociatedTreatmentPlanAction(form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction()); //wdev-13394

		return record;
	}

	private BrachytherapyDetailsVo populateDataFromBrachyttherapyTab(BrachytherapyDetailsVo brachytherapyDetailsVo) 
	{
		if(brachytherapyDetailsVo == null)
			brachytherapyDetailsVo= new BrachytherapyDetailsVo();
		
		brachytherapyDetailsVo.setBrachytherapyType(form.lyrDetails().tabBrachytherapy().cmbBrachytherapyType().getValue());
		brachytherapyDetailsVo.setPrescriptionPoint(form.lyrDetails().tabBrachytherapy().cmbPrescriptionPoint().getValue());
		brachytherapyDetailsVo.setUnit(form.lyrDetails().tabBrachytherapy().cmbUnit().getValue());
		brachytherapyDetailsVo.setTreatmentDetails(populateDataFromDosesGrid());
		brachytherapyDetailsVo.setTotalDose(form.lyrDetails().tabBrachytherapy().decTotalDose().getValue());
		brachytherapyDetailsVo.setActualNrTreatments(form.lyrDetails().tabBrachytherapy().intActualNoofTreatments().getValue());
		brachytherapyDetailsVo.setActualDoseRate(form.lyrDetails().tabBrachytherapy().cmbActualDoseRate().getValue());
		brachytherapyDetailsVo.setTreatmentLength(form.lyrDetails().tabBrachytherapy().intTreatmentLength().getValue());
		brachytherapyDetailsVo.setBrachyDeliveryType(form.lyrDetails().tabBrachytherapy().cmbDeliveryType().getValue());
		brachytherapyDetailsVo.setBrachyTherapyIsotopeType(form.lyrDetails().tabBrachytherapy().cmbIsotypeType().getValue());
		brachytherapyDetailsVo.setBrachyTherapyUnsealedSourceType(form.lyrDetails().tabBrachytherapy().cmbUnsealedSource().getValue());
		brachytherapyDetailsVo.setPatientType(form.lyrDetails().tabBrachytherapy().cmbPatientType().getValue());
		brachytherapyDetailsVo.setActualDuration(form.lyrDetails().tabDetails().intDuration().getValue());
		
		return brachytherapyDetailsVo;
			
	}

	private BrachyTxTreatmentDetailsVoCollection populateDataFromDosesGrid() 
	{
		BrachyTxTreatmentDetailsVoCollection dosesColl = new BrachyTxTreatmentDetailsVoCollection();
		
		for(int i=0; i<form.lyrDetails().tabBrachytherapy().grdDoses().getRows().size(); i++)
		{
			grdDosesRow row = form.lyrDetails().tabBrachytherapy().grdDoses().getRows().get(i);
			
			if(row.getColDate() != null || row.getColDose() != null || row.getColAnaesthetic())
			{
				BrachyTxTreatmentDetailsVo dose = (row.getValue() instanceof BrachyTxTreatmentDetailsVo) ? row.getValue() : new BrachyTxTreatmentDetailsVo();
				
				dose.setTreatmentDate(row.getColDate());
				dose.setDose(row.getColDose());
				dose.setGeneralAnaesthetic(row.getColAnaesthetic() ? YesNo.YES : YesNo.NO);
				
				dosesColl.add(dose);
			}
		}
		
		return dosesColl.size() > 0 ? dosesColl : null;
	}

	private TeletherapyDetailsVo populateDataFromTeletherapyTab(TeletherapyDetailsVo teletherapyDetails) 
	{
		if(teletherapyDetails == null)
			teletherapyDetails = new TeletherapyDetailsVo();
		
		teletherapyDetails.setPhaseDetails(populateDataFromPhaseGrid());
		teletherapyDetails.setPerscriptionPoint(form.lyrDetails().tabTeletherapy().intPrescriptionPoint().getValue());
		teletherapyDetails.setActualDose(form.lyrDetails().tabTeletherapy().decActualDose().getValue());
		teletherapyDetails.setActualFractions(form.lyrDetails().tabTeletherapy().intActualFractions().getValue());
		teletherapyDetails.setActualPhases(form.lyrDetails().tabTeletherapy().intNoofPhases().getValue());
		teletherapyDetails.setAnterior(SupraclavicularDetailsEnumeration.rdoSDYes.equals(form.lyrDetails().tabTeletherapy().SupraclavicularDetails().getValue()) ? YesNo.YES  : (SupraclavicularDetailsEnumeration.rdoSDNo.equals(form.lyrDetails().tabTeletherapy().SupraclavicularDetails().getValue()) ? YesNo.NO : null));
		teletherapyDetails.setAnteriorDose(form.lyrDetails().tabTeletherapy().decDose().getValue());
		teletherapyDetails.setAnteriorFractions(form.lyrDetails().tabTeletherapy().intFractions().getValue());
		teletherapyDetails.setHasAdjacentFields(AdjacentFieldsEnumeration.rdoAFYes.equals(form.lyrDetails().tabTeletherapy().AdjacentFields().getValue()) ? YesNo.YES : (AdjacentFieldsEnumeration.rdoAFNo.equals(form.lyrDetails().tabTeletherapy().AdjacentFields().getValue()) ? YesNo.NO : null));
		teletherapyDetails.setAdjacentFieldDetails(populateDataFromAdjacentGrid());
		teletherapyDetails.setRetreatment(RetreatmentEnumeration.rdoRYes.equals(form.lyrDetails().tabTeletherapy().Retreatment().getValue()) ? YesNo.YES : (RetreatmentEnumeration.rdoRNo.equals(form.lyrDetails().tabTeletherapy().Retreatment().getValue()) ? YesNo.NO : null));
		teletherapyDetails.setHyperfractionation(HyperfractionationEnumeration.rdoHYes.equals(form.lyrDetails().tabTeletherapy().Hyperfractionation().getValue()) ? YesNo.YES : (HyperfractionationEnumeration.rdoHNo.equals(form.lyrDetails().tabTeletherapy().Hyperfractionation().getValue()) ? YesNo.NO : null));
		teletherapyDetails.setSpecialTechnique(form.lyrDetails().tabTeletherapy().cmbSpecialTechnique().getValue());
		teletherapyDetails.setPreoperative(PreOperativeEnumeration.rdoPOYes.equals(form.lyrDetails().tabTeletherapy().PreOperative().getValue()) ? YesNo.YES : (PreOperativeEnumeration.rdoPONo.equals(form.lyrDetails().tabTeletherapy().PreOperative().getValue()) ? YesNo.NO : null));
		teletherapyDetails.setGeneralAnaesthetic(GeneralAnaestheticEnumeration.rdoGAYes.equals(form.lyrDetails().tabTeletherapy().GeneralAnaesthetic().getValue()) ? YesNo.YES : (GeneralAnaestheticEnumeration.rdoGANo.equals(form.lyrDetails().tabTeletherapy().GeneralAnaesthetic().getValue()) ? YesNo.NO : null));
		teletherapyDetails.setBeamType(form.lyrDetails().tabTeletherapy().cmbRadiationType().getValue());
		teletherapyDetails.setBeamEnergy(form.lyrDetails().tabTeletherapy().cmbBeamEnergy().getValue());
		teletherapyDetails.setNoOfFields(form.lyrDetails().tabTeletherapy().cmbNoFields().getValue());
		teletherapyDetails.setComplexityGroup(form.lyrDetails().tabTeletherapy().cmbPlanningComplexity().getValue());
		teletherapyDetails.setMultiplePlanning(MultiplePlanningEnumeration.rdoMPYes.equals(form.lyrDetails().tabTeletherapy().MultiplePlanning().getValue()) ? YesNo.YES : (MultiplePlanningEnumeration.rdoMPNo.equals(form.lyrDetails().tabTeletherapy().MultiplePlanning().getValue()) ? YesNo.NO : null));
		teletherapyDetails.setActualDuration(form.lyrDetails().tabDetails().intDuration().getValue());
		
		return teletherapyDetails;
	}

	private AdjacentFieldPhaseVoCollection populateDataFromAdjacentGrid() 
	{
		AdjacentFieldPhaseVoCollection adjacentFields = new AdjacentFieldPhaseVoCollection();
		
		for(int i=0; i<form.lyrDetails().tabTeletherapy().grdAdjacentFields().getRows().size(); i++)
		{
			grdAdjacentFieldsRow row = form.lyrDetails().tabTeletherapy().grdAdjacentFields().getRows().get(i);
			
			if(row.getColPhase() != null || row.getColDose1() != null || row.getColTxt1() != null || row.getColDose2() != null || row.getColTxt2() != null)
			{
				AdjacentFieldPhaseVo field = (row.getValue() instanceof AdjacentFieldPhaseVo) ? row.getValue() : new AdjacentFieldPhaseVo();
				
				field.setPhase(row.getColPhase());
				field.setDose1(row.getColDose1());
				field.setFractions1(row.getColTxt1());
				field.setDose2(row.getColDose2());
				field.setFractions2(row.getColTxt2());
				
				adjacentFields.add(field);
			}
		}
		
		return adjacentFields.size() > 0 ? adjacentFields : null;
	}

	private TeletherapyPhaseVoCollection populateDataFromPhaseGrid() 
	{
		TeletherapyPhaseVoCollection phaseColl = new TeletherapyPhaseVoCollection();
		
		for(int i=0; i<form.lyrDetails().tabTeletherapy().grdPhaseDetails().getRows().size(); i++)
		{
			grdPhaseDetailsRow row = form.lyrDetails().tabTeletherapy().grdPhaseDetails().getRows().get(i);
			
			if(row.getColPhase() != null || row.getColDose() != null || row.getColFractions() != null)
			{
				TeletherapyPhaseVo phase = (row.getValue() instanceof TeletherapyPhaseVo) ? row.getValue() : new TeletherapyPhaseVo();
				
				phase.setPhase(row.getColPhase());
				phase.setDose(row.getColDose());
				phase.setFractions(row.getColFractions());
				
				phaseColl.add(phase);
			}
		}
		
		return phaseColl.size() > 0 ? phaseColl : null;
	}

	@Override
	protected void onCmbDiseaseStatusValueChanged()	throws PresentationLogicException 
	{
		comboDiseaseStatusValueChanged();
	}
	private void comboDiseaseStatusValueChanged()
	{
		form.lyrDetails().tabDetails().cmbDiseaseTreatment().clear();
		
		if(form.lyrDetails().tabDetails().cmbDiseaseStatus().getValue() == null)
		{
			updateControlsState();
			return;
		}
		
		ims.oncology.vo.lookups.DiseaseStatusCollection lookupCollection = domain.listDiseaseStatusByParent(form.lyrDetails().tabDetails().cmbDiseaseStatus().getValue());
		
		if(lookupCollection == null)
		{
			updateControlsState();     //wdev-13110
			return;
		}
			
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			DiseaseStatus status = lookupCollection.get(x);
			
			if(status != null && status.getParent() == null)
			{
				form.lyrDetails().tabDetails().cmbDiseaseTreatment().newRow(status, status.getText(), status.getImage(), status.getTextColor());
			}
		}
		
		updateControlsState();
	}

	@Override
	protected void onRadioButtonAdjacentFieldsValueChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onRadioButtonSupraclavicularDetailsValueChanged() throws PresentationLogicException 
	{
		updateControlsState();
	}

	@Override
	protected void onDteStartValueChanged() throws PresentationLogicException 
	{
		form.lyrDetails().tabDetails().intDuration().setValue(updateActualDuration());
	}

	private Integer updateActualDuration() 
	{
		if(form.lyrDetails().tabDetails().dteStart().getValue() != null && form.lyrDetails().tabDetails().dteEnd().getValue() != null)
		{
			long duration = Date.daysBetween(form.lyrDetails().tabDetails().dteStart().getValue(), form.lyrDetails().tabDetails().dteEnd().getValue());
				
			return ((int) duration);
		}
		
		return null;
	}

	@Override
	protected void onDteEndValueChanged() throws PresentationLogicException 
	{
		form.lyrDetails().tabDetails().intDuration().setValue(updateActualDuration());
	}

	@Override
	protected void onGrdPhaseDetailsSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
		makeAllGridsReadOnly();
	}

	@Override
	protected void onGrdAdjacentFieldsSelectionChanged() throws PresentationLogicException 
	{
		updateControlsState();
		makeAllGridsReadOnly();
	}

	@Override
	protected void onGrdDosesSelectionChanged()	throws PresentationLogicException 
	{
		updateControlsState();
		makeAllGridsReadOnly();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Oncology.PatientsTreatmentPlanActionsDialog))
		{
			if(result == DialogResult.OK && form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanActionIsNotNull())
			{
				if (form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction().getActivityIsNotNull())
				{
					if( form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction().getActivity().getID_SchedActivity().equals(-202))//Teletherapy / External Beam
						form.lyrDetails().tabDetails().cmbRadiotherapyType().setValue(RadiotherapyType.TELETHERAPY);
					else if(form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction().getActivity().getID_SchedActivity().equals(-204))//Brachytherapy
						form.lyrDetails().tabDetails().cmbRadiotherapyType().setValue(RadiotherapyType.BRACHYTHERAPY);
					
					if (form.lyrDetails().tabDetails().cmbRadiotherapyType().getValue() != null)
						radioTherapyChanged();

				}
				
				form.lyrDetails().tabDetails().customConsultant().setValue(form.getGlobalContext().Oncology.getRadiotherapyPatTreatmentPlanAction().getTreatingConsultant());
				
				form.lyrDetails().tabDetails().dteDecisionTreat().setValue(form.getGlobalContext().Oncology.getDecisionTreatFromDialog());
			}
		}
	}
}
