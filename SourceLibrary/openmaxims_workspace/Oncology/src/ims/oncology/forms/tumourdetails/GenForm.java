//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.tumourdetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrMainLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabTumourDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrPrognosticTNMLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabTNMContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre Treatment Staging:", new Integer(1), null, new Integer(0)}));
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 784, 120, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public DynamicGrid dynGrdPreTreatment()
					{
						return (DynamicGrid)super.getControl(1);
					}
				}
				public static class tabPrognosticTabContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					public boolean isInitialized()
					{
						return super.container.isInitialized();
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Pre Treatment Staging:", new Integer(1), null, new Integer(0)}));
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 784, 120, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public DynamicGrid dyngrdPrognosticPreTreatment()
					{
						return (DynamicGrid)super.getControl(1);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID ");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 304, 808, 176, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabTNM = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Overall Staging", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabTNMContainer m_tabTNMContainer = (tabTNMContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTNMContainer.class, m_tabTNM, factory);
					super.addContainer(m_tabTNM, m_tabTNMContainer);
					ims.framework.utils.SizeInfo m_tabTNMDesignSize = new ims.framework.utils.SizeInfo(808, 176);
					ims.framework.utils.SizeInfo m_tabTNMRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper5.getWidth(), anchoringHelper5.getHeight());
					m_tabTNMContainer.setContext(form, appForm, m_tabTNM, loader, form_images_local, startControlID, m_tabTNMDesignSize, m_tabTNMRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 304, 808, 176, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPrognosticTab = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Overall Prognostic Grouping", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
					tabPrognosticTabContainer m_tabPrognosticTabContainer = (tabPrognosticTabContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPrognosticTabContainer.class, m_tabPrognosticTab, factory);
					super.addContainer(m_tabPrognosticTab, m_tabPrognosticTabContainer);
					ims.framework.utils.SizeInfo m_tabPrognosticTabDesignSize = new ims.framework.utils.SizeInfo(808, 176);
					ims.framework.utils.SizeInfo m_tabPrognosticTabRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper6.getWidth(), anchoringHelper6.getHeight());
					m_tabPrognosticTabContainer.setContext(form, appForm, m_tabPrognosticTab, loader, form_images_local, startControlID, m_tabPrognosticTabDesignSize, m_tabPrognosticTabRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabTNM().setVisible(false);
					tabPrognosticTab().setVisible(false);
				}
				public void settabTNMEnabled(boolean value)
				{
					tabTNM().setEnabled(value);
				}
				public void settabPrognosticTabEnabled(boolean value)
				{
					tabPrognosticTab().setEnabled(value);
				}
				public void showtabTNM()
				{
					tabPrognosticTab().setVisible(false);
					tabTNM().setVisible(true);
				}
				public void showtabPrognosticTab()
				{
					tabTNM().setVisible(false);
					tabPrognosticTab().setVisible(true);
				}
		
				public tabTNMContainer tabTNM()
				{
					return (tabTNMContainer)super.layers.get(0);
				}
				public tabPrognosticTabContainer tabPrognosticTab()
				{
					return (tabPrognosticTabContainer)super.layers.get(1);
				}
			}
			public static class cmbPNValueComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPMValueComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTValueComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbNValueComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbMValueComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPTValueComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbBasisOfDiagnosisComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.DiagnosisBasisofDiagnosis value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.DiagnosisBasisofDiagnosis value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.DiagnosisBasisofDiagnosis value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.DiagnosisBasisofDiagnosis value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.DiagnosisBasisofDiagnosis value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.DiagnosisBasisofDiagnosis getValue()
				{
					return (ims.core.vo.lookups.DiagnosisBasisofDiagnosis)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.DiagnosisBasisofDiagnosis value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbVersionComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo getValue()
				{
					return (ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TNMStagingClassificationVersionLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTumourGroupComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourGroupLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourGroupLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourGroupLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourGroupLiteVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourGroupLiteVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourGroupLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTumourSiteComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourSiteLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourSiteLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourSiteLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourSiteLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourSiteLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourSiteLiteVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourSiteLiteVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourSiteLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbBenignComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.YesNoUnknown value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.YesNoUnknown value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.YesNoUnknown getValue()
				{
					return (ims.core.vo.lookups.YesNoUnknown)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.YesNoUnknown value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbLateralityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.LateralityLRB value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.LateralityLRB value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.LateralityLRB getValue()
				{
					return (ims.core.vo.lookups.LateralityLRB)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.LateralityLRB value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTumourStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.TumourStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.TumourStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.TumourStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.TumourStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.TumourStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.TumourStatus getValue()
				{
					return (ims.oncology.vo.lookups.TumourStatus)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.TumourStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSerumMarkerComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourSerumMarkersLiteVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourSerumMarkersLiteVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSourceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.oncology.vo.lookups.DifferentatationSource value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.oncology.vo.lookups.DifferentatationSource value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.oncology.vo.lookups.DifferentatationSource value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.oncology.vo.lookups.DifferentatationSource value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.oncology.vo.lookups.DifferentatationSource value)
				{
					return super.control.removeRow(value);
				}
				public ims.oncology.vo.lookups.DifferentatationSource getValue()
				{
					return (ims.oncology.vo.lookups.DifferentatationSource)super.control.getValue();
				}
				public void setValue(ims.oncology.vo.lookups.DifferentatationSource value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTumourHistologyGradeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.HistopathologicGradeVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.HistopathologicGradeVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.HistopathologicGradeVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.HistopathologicGradeVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.HistopathologicGradeVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.HistopathologicGradeVo getValue()
				{
					return (ims.clinicaladmin.vo.HistopathologicGradeVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.HistopathologicGradeVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTumourHistologyTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.clinicaladmin.vo.TumourHistologyLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.clinicaladmin.vo.TumourHistologyLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.clinicaladmin.vo.TumourHistologyLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.clinicaladmin.vo.TumourHistologyLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.clinicaladmin.vo.TumourHistologyLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.clinicaladmin.vo.TumourHistologyLiteVo getValue()
				{
					return (ims.clinicaladmin.vo.TumourHistologyLiteVo)super.control.getValue();
				}
				public void setValue(ims.clinicaladmin.vo.TumourHistologyLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 88, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Linked Diagnosis", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 408, 216, 408, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper8.getSize(), instance1, startTabIndex.intValue() + 22, skipContextValidation);
				//ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(408), new Integer(216), new Integer(408), new Integer(56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 22), m_ccAuthoringForm, instance1 } );
				ims.framework.Control m_ccAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 22), m_ccAuthoringForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAuthoringControl);
				Menu[] menus1 = m_ccAuthoringForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Layer Clasess
				lyrPrognosticTNMLayer m_lyrPrognosticTNMLayer = (lyrPrognosticTNMLayer)LayerFlyweightFactory.getInstance().createLayer(lyrPrognosticTNMLayer.class, this, factory);
				super.addLayer(m_lyrPrognosticTNMLayer);
				m_lyrPrognosticTNMLayer.setContext(form, appForm, control, loader, form_images_local, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 669, 513, 35, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 669, 491, 35, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 490, 126, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Pathological Staging:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 136, 490, 22, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "pT:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 309, 490, 24, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "pN:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 486, 490, 26, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "pM:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 514, 117, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Integrated Staging:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 144, 514, 15, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "T:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 317, 514, 17, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "N:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 494, 514, 18, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "M:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 16, 106, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Version Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 136, 64, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 640, 64, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 640, 40, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 136, 39, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 24, 40, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnosis:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 24, 64, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Authoring HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 528, 64, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 528, 40, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Diagnosed:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 154, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tumour Site:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 130, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tumour Group:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 16, 178, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Laterality:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 16, 202, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Benign:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 226, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tumour Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 16, 250, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "End Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 416, 178, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Serum Marker:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 416, 154, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 416, 130, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Histology Grade:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 416, 202, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Basis of Diagnosis:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 416, 106, 93, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Histology Type:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 136, 272, 264, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "  Recurrence", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 704, 512, 112, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 1034), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 704, 488, 112, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 1030), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 136, 248, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 333, 488, 147, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbPNValueTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1028), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(7)});
				addControl(m_cmbPNValueTemp);
				cmbPNValueComboBox cmbPNValue = (cmbPNValueComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPNValueComboBox.class, m_cmbPNValueTemp);
				super.addComboBox(cmbPNValue);
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 512, 488, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbPMValueTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(7)});
				addControl(m_cmbPMValueTemp);
				cmbPMValueComboBox cmbPMValue = (cmbPMValueComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPMValueComboBox.class, m_cmbPMValueTemp);
				super.addComboBox(cmbPMValue);
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 160, 512, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbTValueTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 1031), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(7)});
				addControl(m_cmbTValueTemp);
				cmbTValueComboBox cmbTValue = (cmbTValueComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTValueComboBox.class, m_cmbTValueTemp);
				super.addComboBox(cmbTValue);
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 333, 512, 147, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbNValueTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 1032), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(7)});
				addControl(m_cmbNValueTemp);
				cmbNValueComboBox cmbNValue = (cmbNValueComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbNValueComboBox.class, m_cmbNValueTemp);
				super.addComboBox(cmbNValue);
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 512, 512, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbMValueTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 1033), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(7)});
				addControl(m_cmbMValueTemp);
				cmbMValueComboBox cmbMValue = (cmbMValueComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMValueComboBox.class, m_cmbMValueTemp);
				super.addComboBox(cmbMValue);
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 160, 488, 144, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				ComboBox m_cmbPTValueTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(7)});
				addControl(m_cmbPTValueTemp);
				cmbPTValueComboBox cmbPTValue = (cmbPTValueComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPTValueComboBox.class, m_cmbPTValueTemp);
				super.addComboBox(cmbPTValue);
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 568, 200, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbBasisOfDiagnosisTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbBasisOfDiagnosisTemp);
				cmbBasisOfDiagnosisComboBox cmbBasisOfDiagnosis = (cmbBasisOfDiagnosisComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBasisOfDiagnosisComboBox.class, m_cmbBasisOfDiagnosisTemp);
				super.addComboBox(cmbBasisOfDiagnosis);
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 136, 104, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbVersionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbVersionTemp);
				cmbVersionComboBox cmbVersion = (cmbVersionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbVersionComboBox.class, m_cmbVersionTemp);
				super.addComboBox(cmbVersion);
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 136, 128, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTumourGroupTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTumourGroupTemp);
				cmbTumourGroupComboBox cmbTumourGroup = (cmbTumourGroupComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTumourGroupComboBox.class, m_cmbTumourGroupTemp);
				super.addComboBox(cmbTumourGroup);
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 136, 152, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTumourSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTumourSiteTemp);
				cmbTumourSiteComboBox cmbTumourSite = (cmbTumourSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTumourSiteComboBox.class, m_cmbTumourSiteTemp);
				super.addComboBox(cmbTumourSite);
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 136, 200, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbBenignTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbBenignTemp);
				cmbBenignComboBox cmbBenign = (cmbBenignComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBenignComboBox.class, m_cmbBenignTemp);
				super.addComboBox(cmbBenign);
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 136, 176, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbLateralityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbLateralityTemp);
				cmbLateralityComboBox cmbLaterality = (cmbLateralityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLateralityComboBox.class, m_cmbLateralityTemp);
				super.addComboBox(cmbLaterality);
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 136, 224, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTumourStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTumourStatusTemp);
				cmbTumourStatusComboBox cmbTumourStatus = (cmbTumourStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTumourStatusComboBox.class, m_cmbTumourStatusTemp);
				super.addComboBox(cmbTumourStatus);
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 568, 176, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbSerumMarkerTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSerumMarkerTemp);
				cmbSerumMarkerComboBox cmbSerumMarker = (cmbSerumMarkerComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSerumMarkerComboBox.class, m_cmbSerumMarkerTemp);
				super.addComboBox(cmbSerumMarker);
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 568, 152, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbSourceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSourceTemp);
				cmbSourceComboBox cmbSource = (cmbSourceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceComboBox.class, m_cmbSourceTemp);
				super.addComboBox(cmbSource);
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 568, 128, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbTumourHistologyGradeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(10)});
				addControl(m_cmbTumourHistologyGradeTemp);
				cmbTumourHistologyGradeComboBox cmbTumourHistologyGrade = (cmbTumourHistologyGradeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTumourHistologyGradeComboBox.class, m_cmbTumourHistologyGradeTemp);
				super.addComboBox(cmbTumourHistologyGrade);
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 568, 104, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbTumourHistologyTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(10)});
				addControl(m_cmbTumourHistologyTypeTemp);
				cmbTumourHistologyTypeComboBox cmbTumourHistologyType = (cmbTumourHistologyTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTumourHistologyTypeComboBox.class, m_cmbTumourHistologyTypeTemp);
				super.addComboBox(cmbTumourHistologyType);
			}

			public ims.core.forms.authoringinfo.IComponent ccAuthoring()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccAuthoringVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccAuthoringVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccAuthoringEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccAuthoringEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public lyrPrognosticTNMLayer lyrPrognosticTNM()
			{
				return (lyrPrognosticTNMLayer)super.getLayer(0);
			}
			public Label lblDiagnosisAuthoringHCP()
			{
				return (Label)super.getControl(15);
			}
			public Label lblDiagnosisStatus()
			{
				return (Label)super.getControl(16);
			}
			public Label lblDateDiagnosed()
			{
				return (Label)super.getControl(17);
			}
			public Label lblDiagnosisDescription()
			{
				return (Label)super.getControl(18);
			}
			public Button btnRecurrence()
			{
				return (Button)super.getControl(34);
			}
			public DateControl dteIntegrated()
			{
				return (DateControl)super.getControl(35);
			}
			public DateControl dtePathological()
			{
				return (DateControl)super.getControl(36);
			}
			public DateControl dteEnd()
			{
				return (DateControl)super.getControl(37);
			}
			public cmbPNValueComboBox cmbPNValue()
			{
				return (cmbPNValueComboBox)super.getComboBox(0);
			}
			public cmbPMValueComboBox cmbPMValue()
			{
				return (cmbPMValueComboBox)super.getComboBox(1);
			}
			public cmbTValueComboBox cmbTValue()
			{
				return (cmbTValueComboBox)super.getComboBox(2);
			}
			public cmbNValueComboBox cmbNValue()
			{
				return (cmbNValueComboBox)super.getComboBox(3);
			}
			public cmbMValueComboBox cmbMValue()
			{
				return (cmbMValueComboBox)super.getComboBox(4);
			}
			public cmbPTValueComboBox cmbPTValue()
			{
				return (cmbPTValueComboBox)super.getComboBox(5);
			}
			public cmbBasisOfDiagnosisComboBox cmbBasisOfDiagnosis()
			{
				return (cmbBasisOfDiagnosisComboBox)super.getComboBox(6);
			}
			public cmbVersionComboBox cmbVersion()
			{
				return (cmbVersionComboBox)super.getComboBox(7);
			}
			public cmbTumourGroupComboBox cmbTumourGroup()
			{
				return (cmbTumourGroupComboBox)super.getComboBox(8);
			}
			public cmbTumourSiteComboBox cmbTumourSite()
			{
				return (cmbTumourSiteComboBox)super.getComboBox(9);
			}
			public cmbBenignComboBox cmbBenign()
			{
				return (cmbBenignComboBox)super.getComboBox(10);
			}
			public cmbLateralityComboBox cmbLaterality()
			{
				return (cmbLateralityComboBox)super.getComboBox(11);
			}
			public cmbTumourStatusComboBox cmbTumourStatus()
			{
				return (cmbTumourStatusComboBox)super.getComboBox(12);
			}
			public cmbSerumMarkerComboBox cmbSerumMarker()
			{
				return (cmbSerumMarkerComboBox)super.getComboBox(13);
			}
			public cmbSourceComboBox cmbSource()
			{
				return (cmbSourceComboBox)super.getComboBox(14);
			}
			public cmbTumourHistologyGradeComboBox cmbTumourHistologyGrade()
			{
				return (cmbTumourHistologyGradeComboBox)super.getComboBox(15);
			}
			public cmbTumourHistologyTypeComboBox cmbTumourHistologyType()
			{
				return (cmbTumourHistologyTypeComboBox)super.getComboBox(16);
			}
		}
		public static class tabAssessmentContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 504, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccTumourGroupAssessmentForm = loader.loadComponent(127109, appForm, startControlID * 10 + 2000, anchoringHelper60.getSize(), instance1, startTabIndex.intValue() + 1036, skipContextValidation);
				//ims.framework.Control m_ccTumourGroupAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(8), new Integer(8), new Integer(808), new Integer(504), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1036), m_ccTumourGroupAssessmentForm, instance1 } );
				ims.framework.Control m_ccTumourGroupAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1061),  new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1036), m_ccTumourGroupAssessmentForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccTumourGroupAssessmentControl);
				Menu[] menus1 = m_ccTumourGroupAssessmentForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.assessment.forms.structuralassessment.IComponent ccTumourGroupAssessment()
			{
				return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccTumourGroupAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccTumourGroupAssessmentVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccTumourGroupAssessmentVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccTumourGroupAssessmentEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccTumourGroupAssessmentEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabTumourDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Primary Tumour Details", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabTumourDetailsContainer m_tabTumourDetailsContainer = (tabTumourDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTumourDetailsContainer.class, m_tabTumourDetails, factory);
			super.addContainer(m_tabTumourDetails, m_tabTumourDetailsContainer);
			ims.framework.utils.SizeInfo m_tabTumourDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 560);
			ims.framework.utils.SizeInfo m_tabTumourDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper61.getWidth(), anchoringHelper61.getHeight());
			m_tabTumourDetailsContainer.setContext(form, appForm, m_tabTumourDetails, loader, form_images_local, startControlID, m_tabTumourDetailsDesignSize, m_tabTumourDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 832, 560, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAssessment = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Assessment", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAssessmentContainer m_tabAssessmentContainer = (tabAssessmentContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAssessmentContainer.class, m_tabAssessment, factory);
			super.addContainer(m_tabAssessment, m_tabAssessmentContainer);
			ims.framework.utils.SizeInfo m_tabAssessmentDesignSize = new ims.framework.utils.SizeInfo(832, 560);
			ims.framework.utils.SizeInfo m_tabAssessmentRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper62.getWidth(), anchoringHelper62.getHeight());
			m_tabAssessmentContainer.setContext(form, appForm, m_tabAssessment, loader, form_images_local, startControlID, m_tabAssessmentDesignSize, m_tabAssessmentRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabTumourDetails().setVisible(false);
			tabAssessment().setVisible(false);
		}
		public void settabTumourDetailsEnabled(boolean value)
		{
			tabTumourDetails().setEnabled(value);
		}
		public void settabAssessmentEnabled(boolean value)
		{
			tabAssessment().setEnabled(value);
		}
		public void showtabTumourDetails()
		{
			tabAssessment().setVisible(false);
			tabTumourDetails().setVisible(true);
		}
		public void showtabAssessment()
		{
			tabTumourDetails().setVisible(false);
			tabAssessment().setVisible(true);
		}

		public tabTumourDetailsContainer tabTumourDetails()
		{
			return (tabTumourDetailsContainer)super.layers.get(0);
		}
		public tabAssessmentContainer tabAssessment()
		{
			return (tabAssessmentContainer)super.layers.get(1);
		}
	}
	public static class recbrPrimaryTumourDetailsRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.oncology.vo.PrimaryTumourDetailsLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.oncology.vo.PrimaryTumourDetailsLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.oncology.vo.PrimaryTumourDetailsLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.oncology.vo.PrimaryTumourDetailsLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.oncology.vo.PrimaryTumourDetailsLiteVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.oncology.vo.PrimaryTumourDetailsLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.oncology.vo.PrimaryTumourDetailsLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.oncology.vo.PrimaryTumourDetailsLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.oncology.vo.PrimaryTumourDetailsLiteVo getValue()
		{
			return (ims.oncology.vo.PrimaryTumourDetailsLiteVo)super.control.getValue();
		}
		public void setValue(ims.oncology.vo.PrimaryTumourDetailsLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.EpisodeofCareShort", "_cvp_Core.EpisodeofCareShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.EpisodeofCareShort' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyrMainLayer m_lyrMainLayer = (lyrMainLayer)LayerFlyweightFactory.getInstance().createLayer(lyrMainLayer.class, this, factory);
		super.addLayer(m_lyrMainLayer);
		m_lyrMainLayer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 2039), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 2037), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 2043), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 2041), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrPrimaryTumourDetailsTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrPrimaryTumourDetailsTemp);
		recbrPrimaryTumourDetailsRecordBrowser recbrPrimaryTumourDetails = (recbrPrimaryTumourDetailsRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrPrimaryTumourDetailsRecordBrowser.class, m_recbrPrimaryTumourDetailsTemp);
		super.addRecordBrowser(recbrPrimaryTumourDetails);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrMainLayer lyrMain()
	{
		return (lyrMainLayer)super.getLayer(0);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(2);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public recbrPrimaryTumourDetailsRecordBrowser recbrPrimaryTumourDetails()
	{
		return (recbrPrimaryTumourDetailsRecordBrowser)super.getRecordBrowser(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			ClinicalAdmin = new ClinicalAdminForms();
			Oncology = new OncologyForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				DiagnosisComplications_Dialog = new LocalFormName(123130);
			}
			public final FormName DiagnosisComplications_Dialog;
		}
		public final class ClinicalAdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalAdminForms()
			{
				TumourDetailsRecurrence = new LocalFormName(104126);
			}
			public final FormName TumourDetailsRecurrence;
		}
		public final class OncologyForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OncologyForms()
			{
				ChooseDiagnosisBasisDialog = new LocalFormName(125141);
			}
			public final FormName ChooseDiagnosisBasisDialog;
		}

		public ClinicalForms Clinical;
		public ClinicalAdminForms ClinicalAdmin;
		public OncologyForms Oncology;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			Oncology = new OncologyImages();
			Core = new CoreImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Pencil = new ImageHelper(103151, "Images/Admin/pencil2.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Pencil;
		}
		public final class OncologyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OncologyImages()
			{
				RecurrenceDetails = new ImageHelper(125107, "Images/Oncology/recurrence_data.bmp", new Integer(19), new Integer(19));
				RecurrenceNODetails = new ImageHelper(125106, "Images/Oncology/recurrence_no_data.bmp", new Integer(19), new Integer(19));
				RecurrenceDetailsLHS = new ImageHelper(125109, "Images/Oncology/recurrenceLHS3.GIF", new Integer(19), new Integer(19));
				RecurrencenodatdLHS = new ImageHelper(125110, "Images/Oncology/recurrencenodataLHS.bmp", new Integer(19), new Integer(19));
			}
			public final ims.framework.utils.Image RecurrenceDetails;
			public final ims.framework.utils.Image RecurrenceNODetails;
			public final ims.framework.utils.Image RecurrenceDetailsLHS;
			public final ims.framework.utils.Image RecurrencenodatdLHS;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				AssociationsLHS = new ImageHelper(102266, "Images/Core/AssociationsLHS.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image AssociationsLHS;
		}
		public final AdminImages Admin;
		public final OncologyImages Oncology;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedDiagnosisForPrimaryTumourDetails = new ims.framework.ContextVariable("SelectedDiagnosisForPrimaryTumourDetails", prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedDiagnosisForPrimaryTumourDetails_" + componentIdentifier + "");
			cxl_SelectedGroup = new ims.framework.ContextVariable("SelectedGroup", prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier + "");
			cxl_SelectedSite = new ims.framework.ContextVariable("SelectedSite", prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedSite_" + componentIdentifier + "");
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_CurrentEditableRecord = new ims.framework.ContextVariable("CurrentEditableRecord", prefix + "_lv_Oncology.TumourDetails.__internal_x_context__CurrentEditableRecord_" + componentIdentifier + "");
			cxl_UnendedRecordsExist = new ims.framework.ContextVariable("UnendedRecordsExist", prefix + "_lv_Oncology.TumourDetails.__internal_x_context__UnendedRecordsExist_" + componentIdentifier + "");
			cxl_DataWasImported = new ims.framework.ContextVariable("DataWasImported", prefix + "_lv_Oncology.TumourDetails.__internal_x_context__DataWasImported_" + componentIdentifier + "");
			cxl_HistologyPopulatedFrom = new ims.framework.ContextVariable("HistologyPopulatedFrom", prefix + "_lv_Oncology.TumourDetails.__internal_x_context__HistologyPopulatedFrom_" + componentIdentifier + "");
			cxl_PretreatmentOverallPopulatedFrom = new ims.framework.ContextVariable("PretreatmentOverallPopulatedFrom", prefix + "_lv_Oncology.TumourDetails.__internal_x_context__PretreatmentOverallPopulatedFrom_" + componentIdentifier + "");
		}
		
		public boolean getSelectedDiagnosisForPrimaryTumourDetailsIsNotNull()
		{
			return !cxl_SelectedDiagnosisForPrimaryTumourDetails.getValueIsNull(context);
		}
		public ims.oncology.vo.PatientDiagnosisForPrimaryTumourVo getSelectedDiagnosisForPrimaryTumourDetails()
		{
			return (ims.oncology.vo.PatientDiagnosisForPrimaryTumourVo)cxl_SelectedDiagnosisForPrimaryTumourDetails.getValue(context);
		}
		public void setSelectedDiagnosisForPrimaryTumourDetails(ims.oncology.vo.PatientDiagnosisForPrimaryTumourVo value)
		{
			cxl_SelectedDiagnosisForPrimaryTumourDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedDiagnosisForPrimaryTumourDetails = null;
		public boolean getSelectedGroupIsNotNull()
		{
			return !cxl_SelectedGroup.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourGroupListForPrimaryTumourDetailsVo getSelectedGroup()
		{
			return (ims.clinicaladmin.vo.TumourGroupListForPrimaryTumourDetailsVo)cxl_SelectedGroup.getValue(context);
		}
		public void setSelectedGroup(ims.clinicaladmin.vo.TumourGroupListForPrimaryTumourDetailsVo value)
		{
			cxl_SelectedGroup.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedGroup = null;
		public boolean getSelectedSiteIsNotNull()
		{
			return !cxl_SelectedSite.getValueIsNull(context);
		}
		public ims.clinicaladmin.vo.TumourSiteListForPrimaryTumourDetailsVo getSelectedSite()
		{
			return (ims.clinicaladmin.vo.TumourSiteListForPrimaryTumourDetailsVo)cxl_SelectedSite.getValue(context);
		}
		public void setSelectedSite(ims.clinicaladmin.vo.TumourSiteListForPrimaryTumourDetailsVo value)
		{
			cxl_SelectedSite.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSite = null;
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.oncology.vo.PrimaryTumourDetailsVo getSelectedRecord()
		{
			return (ims.oncology.vo.PrimaryTumourDetailsVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.oncology.vo.PrimaryTumourDetailsVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getCurrentEditableRecordIsNotNull()
		{
			return !cxl_CurrentEditableRecord.getValueIsNull(context);
		}
		public ims.oncology.vo.PrimaryTumourDetailsRefVo getCurrentEditableRecord()
		{
			return (ims.oncology.vo.PrimaryTumourDetailsRefVo)cxl_CurrentEditableRecord.getValue(context);
		}
		public void setCurrentEditableRecord(ims.oncology.vo.PrimaryTumourDetailsRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'CurrentEditableRecord' RefVo context variable.");
			if(value == null)
				cxl_CurrentEditableRecord.setValue(context, null);
			else
				cxl_CurrentEditableRecord.setValue(context, new ims.oncology.vo.PrimaryTumourDetailsRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_CurrentEditableRecord = null;
		public boolean getUnendedRecordsExistIsNotNull()
		{
			return !cxl_UnendedRecordsExist.getValueIsNull(context);
		}
		public Boolean getUnendedRecordsExist()
		{
			return (Boolean)cxl_UnendedRecordsExist.getValue(context);
		}
		public void setUnendedRecordsExist(Boolean value)
		{
			cxl_UnendedRecordsExist.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UnendedRecordsExist = null;
		public boolean getDataWasImportedIsNotNull()
		{
			return !cxl_DataWasImported.getValueIsNull(context);
		}
		public Boolean getDataWasImported()
		{
			return (Boolean)cxl_DataWasImported.getValue(context);
		}
		public void setDataWasImported(Boolean value)
		{
			cxl_DataWasImported.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DataWasImported = null;
		public boolean getHistologyPopulatedFromIsNotNull()
		{
			return !cxl_HistologyPopulatedFrom.getValueIsNull(context);
		}
		public Integer getHistologyPopulatedFrom()
		{
			return (Integer)cxl_HistologyPopulatedFrom.getValue(context);
		}
		public void setHistologyPopulatedFrom(Integer value)
		{
			cxl_HistologyPopulatedFrom.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HistologyPopulatedFrom = null;
		public boolean getPretreatmentOverallPopulatedFromIsNotNull()
		{
			return !cxl_PretreatmentOverallPopulatedFrom.getValueIsNull(context);
		}
		public Integer getPretreatmentOverallPopulatedFrom()
		{
			return (Integer)cxl_PretreatmentOverallPopulatedFrom.getValue(context);
		}
		public void setPretreatmentOverallPopulatedFrom(Integer value)
		{
			cxl_PretreatmentOverallPopulatedFrom.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PretreatmentOverallPopulatedFrom = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[135];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-ISCOMORBIDITY", "IsComorbidity");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-ISCOMPLICATION", "IsComplication");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-DATERESOLVED", "DateResolved");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-DATEONSET", "DateOnset");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-DIAGLATERALITY", "DiagLaterality");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-SITETEXT", "SiteText");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-ISPMH", "IsPMH");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-ISCANCERDIAGNOSIS", "IsCancerDiagnosis");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-SITE", "Site");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-ISRESOLVED", "IsResolved");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-RESOLVEDHCP", "ResolvedHCP");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-NOTES", "Notes");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-SPECIALTY", "Specialty");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-EXCLUDEFROMOTHERS", "ExcludefromOthers");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-DIAGCONFIRMEDSTATUS", "DiagConfirmedStatus");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Oncology.SelectedDiagnosisForPrimaryTumourDetails", "BO-1003100016-DIAGCONFIRMEDDATETIME", "DiagConfirmedDateTime");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedDiagnosisForPrimaryTumourDetails_" + componentIdentifier, "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedDiagnosisForPrimaryTumourDetails_" + componentIdentifier, "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedDiagnosisForPrimaryTumourDetails_" + componentIdentifier, "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedDiagnosisForPrimaryTumourDetails_" + componentIdentifier, "BO-1003100016-DIAGLATERALITY", "DiagLaterality");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier, "BO-1074100009-ID", "ID_TumourGroup");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier, "BO-1074100009-GROUPNAME", "GroupName");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESOVER45", "TnmRequiresOver45");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier, "BO-1074100009-ISACTIVE", "IsActive");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier, "BO-1074100009-HASTNM", "HasTNM");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier, "BO-1074100009-ASSESSMENT", "Assessment");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier, "BO-1074100009-ISPROGNOSTICGROUPINGRELEVANT", "IsPrognosticGroupingRelevant");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESDIFF", "TnmRequiresDiff");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESHISTO", "TnmRequiresHisto");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedGroup_" + componentIdentifier, "BO-1074100009-TNMREQUIRESSMARKERS", "TnmRequiresSMarkers");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedSite_" + componentIdentifier, "BO-1074100010-ID", "ID_TumourSite");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedSite_" + componentIdentifier, "BO-1074100010-NAME", "Name");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedSite_" + componentIdentifier, "BO-1074100010-ISACTIVE", "IsActive");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedSite_" + componentIdentifier, "BO-1074100010-HASSITESPECIFICTNM", "HasSiteSpecificTNM");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedSite_" + componentIdentifier, "BO-1074100010-HASSITESPECIFICHISTOLOGY", "HasSiteSpecificHistology");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedSite_" + componentIdentifier, "BO-1074100010-DESCRIPTION", "Description");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-ID", "ID_PrimaryTumourDetails");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-TUMOURLATERALITY", "TumourLaterality");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-ISCURRENT", "IsCurrent");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-ENDDATE", "EndDate");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-EPISODEOFCARE", "EpisodeOfCare");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-BENIGN", "Benign");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-TUMOURSTATUS", "TumourStatus");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-HISTOLOGYSOURCE", "HistologySource");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-DIFFERENTATATIONSOURCE", "DifferentatationSource");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-PRETREATMENTTCERT", "PreTreatmentTCert");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-PRETREATMENTNCERT", "PreTreatmentNCert");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-PRETREATMENTMCERT", "PreTreatmentMCert");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-PRETREATMENTOVERALLCERT", "PreTreatmentOverAllCert");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-BASISOFDIAGNOSIS", "BasisofDiagnosis");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-OVER45STATUS", "Over45Status");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-MOVEDTOPROGNOSTIC", "MovedToPrognostic");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-PROGNOSTICGROUPINGCERT", "PrognosticGroupingCert");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-PROGNOSTICTCERT", "PrognosticTCert");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-PROGNOSTICNCERT", "PrognosticNCert");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-PROGNOSTICMCERT", "PrognosticMCert");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-PATHOLOGICALDATE", "PathologicalDate");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1074100007-INTEGRATEDDATE", "IntegratedDate");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.TumourDetails.__internal_x_context__CurrentEditableRecord_" + componentIdentifier, "BO-1074100007-ID", "ID_PrimaryTumourDetails");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
