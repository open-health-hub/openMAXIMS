//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3832.22959)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.oncology.forms.cancercontact;

import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.Hcp;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MedicVo;
import ims.core.vo.NurseVo;
import ims.core.vo.TherapistVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.HcpDisType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.oncology.forms.cancercontact.GenForm.lyr1Layer.tabPageSummaryContainer.grdContactsRow;
import ims.oncology.vo.CancerContactSearchCriteriaVo;
import ims.oncology.vo.CancerContactsVo;
import ims.oncology.vo.CancerContactsVoCollection;
import ims.oncology.vo.ContactTypesByDisciplineItemRefVoCollection;
import ims.oncology.vo.ContactTypesByDisciplineItemVo;
import ims.oncology.vo.ContactTypesByDisciplineVo;

import java.util.ArrayList;
public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		if (form.getGlobalContext().Oncology.getCancerContactSearchCriteriaVoIsNotNull())
			open();
		form.setMode(FormMode.VIEW);		
	}
	
	private void initialise()
	{
		form.setMode(FormMode.VIEW);
		form.lyr1().tabPageDetails().btnEdit().setVisible(false);
		form.lyr1().tabPageDetails().ccHcp().initialize(MosType.HCP);
		form.lyr1().tabPageSummary().ccSearchHCP().initialize(MosType.HCP);
		form.lyr1().tabPageDetails().ccHcp().isRequired(Boolean.TRUE);
		
		loadHcpDisciplines();
	}

	private void loadHcpDisciplines()
	{
		form.lyr1().tabPageSummary().cmbSearchDisipline().clear();
		form.lyr1().tabPageDetails().cmbDiscipline().clear();
		
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(domain.getLookupService());
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			if (lookupCollection.get(x).getParent() != null)
			{
				form.lyr1().tabPageSummary().cmbSearchDisipline().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
				//WDEV-16105
				form.lyr1().tabPageDetails().cmbDiscipline().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
			}
		}
	}

	private void open() 
	{
		populateSearchCriteriaControls();
		search();
		form.setMode(FormMode.VIEW);		
	}

	private void populateSearchCriteriaControls()
	{
		CancerContactSearchCriteriaVo voSearchCriteria = form.getGlobalContext().Oncology.getCancerContactSearchCriteriaVo();
		if (voSearchCriteria == null)
			voSearchCriteria = new CancerContactSearchCriteriaVo();
		
		form.lyr1().tabPageSummary().ccSearchHCP().setValue(voSearchCriteria.getHcpLite());
		form.lyr1().tabPageSummary().cmbSearchDisipline().setValue(voSearchCriteria.getHCPDiscipline());
		form.lyr1().tabPageSummary().dteSearchFrom().setValue(voSearchCriteria.getDateFrom());
		form.lyr1().tabPageSummary().dteSearchTo().setValue(voSearchCriteria.getDateTo());
	}

	private void search() 
	{
		clearScreen();
		form.lyr1().tabPageSummary().grdContacts().getRows().clear();
		
		
		if (form.lyr1().tabPageSummary().dteSearchFrom().getValue() != null
			&& form.lyr1().tabPageSummary().dteSearchTo().getValue() != null
			&& form.lyr1().tabPageSummary().dteSearchFrom().getValue().isGreaterThan(form.lyr1().tabPageSummary().dteSearchTo().getValue()))
		{
			engine.showMessage("The From date is greater then the To date. Please modify and search again.");
			return;
		}
		
		if (form.getGlobalContext().Core.getEpisodeofCareShortIsNotNull())
		{
			clearInstanceControls();
			CancerContactSearchCriteriaVo voCriteria = populateSearchCriteria();
			if (voCriteria.countFieldsWithValue() > 1)
				populateListControl(domain.listCAContacts(voCriteria));
			else 			
				engine.showMessage("Please enter some search criteria.");
		}
	}

	private CancerContactSearchCriteriaVo populateSearchCriteria() 
	{
		CancerContactSearchCriteriaVo voSearchCriteria = new CancerContactSearchCriteriaVo();
		voSearchCriteria.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		voSearchCriteria.setCareContextRef(form.getGlobalContext().Core.getCurrentCareContext());
		voSearchCriteria.setHcpLite((HcpLiteVo) form.lyr1().tabPageSummary().ccSearchHCP().getValue());
		voSearchCriteria.setHCPDiscipline(form.lyr1().tabPageSummary().cmbSearchDisipline().getValue());
		voSearchCriteria.setDateFrom(form.lyr1().tabPageSummary().dteSearchFrom().getValue());
		voSearchCriteria.setDateTo(form.lyr1().tabPageSummary().dteSearchTo().getValue());
		
		return voSearchCriteria;
	}

	private void populateInstanceControls(CancerContactsVo voCancerContact) 
	{
		clearInstanceControls();
		
		
		if(voCancerContact != null)
		{
			//WDEV-15590
			if (voCancerContact.getSystemInformationIsNotNull())
			{
				form.lyr1().tabPageDetails().txtRecordingBy().setValue(voCancerContact.getSystemInformation().getCreationUser());
				form.lyr1().tabPageDetails().dtimRecordingDateTime().setValue(voCancerContact.getSystemInformation().getCreationDateTime());
			}
			
			if(voCancerContact.getContactHCPIsNotNull())
				form.lyr1().tabPageDetails().ccHcp().setValue(voCancerContact.getContactHCP());
			if(voCancerContact.getHCPDisciplineIsNotNull())
			{
				form.lyr1().tabPageDetails().cmbDiscipline().setValue(voCancerContact.getHCPDiscipline());
				populateDisciplineTree(domain.loadDisciplineContacts(voCancerContact.getHCPDiscipline()),voCancerContact.getContactTypes());
			}

			if(voCancerContact.getContactDateTimeIsNotNull())
				form.lyr1().tabPageDetails().dtimDateTime().setValue(voCancerContact.getContactDateTime());
			if(voCancerContact.getUnitsRequiredIsNotNull())
				form.lyr1().tabPageDetails().decRequired().setValue(voCancerContact.getUnitsRequired());
			if(voCancerContact.getUnitsGivenIsNotNull())
				form.lyr1().tabPageDetails().decGiven().setValue(voCancerContact.getUnitsGiven());
			if(voCancerContact.getCommentIsNotNull())
				form.lyr1().tabPageDetails().txtNotes().setValue(voCancerContact.getComment());
			
			if (form.getMode().equals(FormMode.EDIT))
			{
				for(int i = 0 ; voCancerContact.getContactTypesIsNotNull() && i < voCancerContact.getContactTypes().size() ; i++)
				{
					TreeNode node = form.lyr1().tabPageDetails().treContactTypes().getNodeByValue(voCancerContact.getContactTypes().get(i));
					if (node != null)
						node.setChecked(true);
					else
					{
						//Contact Type could have been saved and subsequently marked as Inactive....
						
						//TODO So need to handle the inactive Types now.
					}
				}
			}
		}
	}
	
	private void clearScreen() 
	{
		form.lyr1().tabPageSummary().grdContacts().getRows().clear();

		form.lyr1().tabPageSummary().grdContacts().getRows().clear();
		
		clearInstanceControls();
	}
	
	private void clearInstanceControls() 
	{
		form.lyr1().tabPageDetails().ccHcp().clear();
		form.lyr1().tabPageDetails().ccHcp().setValue(null);
		
		form.lyr1().tabPageDetails().cmbDiscipline().setValue(null);
		form.lyr1().tabPageDetails().dtimDateTime().setValue(null);
		form.lyr1().tabPageDetails().decGiven().setValue(null);
		form.lyr1().tabPageDetails().decRequired().setValue(null);
		form.lyr1().tabPageDetails().txtNotes().setValue(null);
		form.lyr1().tabPageDetails().txtRecordingBy().setValue(null);
		form.lyr1().tabPageDetails().dtimRecordingDateTime().setValue(null);
		
		form.lyr1().tabPageDetails().treContactTypes().clear();
		form.lyr1().tabPageDetails().treContactTypes().setValue(null);
	}

	private void populateListControl(CancerContactsVoCollection voContactscollection) 
	{
		clearScreen();
		
		if (voContactscollection != null
			&& voContactscollection.size() > 0)
		{
			form.getGlobalContext().Oncology.setCancerContactSearchCriteriaVo(populateSearchCriteria());
			
			for (int i =0; i < voContactscollection.size();i++)
			{
				grdContactsRow row = form.lyr1().tabPageSummary().grdContacts().getRows().newRow();
				
				row.setValue(voContactscollection.get(i));	
				
				if(voContactscollection.get(i).getContactHCPIsNotNull())
					row.setColHCP(voContactscollection.get(i).getContactHCP().getName().toString());
				if(voContactscollection.get(i).getHCPDisciplineIsNotNull())
					row.setColDisp(voContactscollection.get(i).getHCPDiscipline().toString());
				if(voContactscollection.get(i).getContactDateTimeIsNotNull())
					row.setColDate(voContactscollection.get(i).getContactDateTime().toString());
			}
		}
		else
			engine.showMessage("No records found for your search criteria");		//wdev-11272
	}

	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Oncology.setCancerContactSearchCriteriaVo(null);
		populateSearchCriteriaControls();
		form.lyr1().tabPageSummary().grdContacts().getRows().clear();
		clearInstanceControls();
		form.getLocalContext().setSelectedRecord(null);
		if (form.getMode().equals(FormMode.VIEW))
			form.lyr1().tabPageDetails().btnEdit().setVisible(false);
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
		if (form.getMode().equals(FormMode.VIEW))
			form.lyr1().tabPageDetails().btnEdit().setVisible(false);

	}
	
	private void loadHcpDiscipline(HcpDisType type)
	{
		form.lyr1().tabPageDetails().cmbDiscipline().clear();
		ims.core.vo.lookups.HcpDisTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getHcpDisType(domain.getLookupService());
		for (int x = 0; x < lookupCollection.size(); x++)
		{
			if (type != null
				&& lookupCollection.get(x).equals(type))
			{
				form.lyr1().tabPageDetails().cmbDiscipline().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
				form.lyr1().tabPageDetails().cmbDiscipline().setValue(type);
			}
		}
	}
	@Override
	protected void onGrdContactsSelectionChanged()
	{
		form.getLocalContext().setSelectedRecord(form.lyr1().tabPageSummary().grdContacts().getValue());
		populateInstanceControls(domain.getCAContact(form.lyr1().tabPageSummary().grdContacts().getValue()));
		form.lyr1().tabPageDetails().btnEdit().setVisible(true);
		form.lyr1().tabPageDetails().btnEdit().setEnabled(true);
		form.lyr1().showtabPageDetails();
	}

	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	
	private void newInstance() 
	{
		clearInstanceControls();
	
		//WDEV-15590
		form.lyr1().tabPageDetails().txtRecordingBy().setValue(domain.getLoggedInUser().getUsername());
		
		form.getLocalContext().setSelectedRecord(null);
		form.lyr1().tabPageSummary().grdContacts().setValue(null);
		form.setMode(FormMode.EDIT);
		if (domain.getHcpLiteUser() != null)
			form.lyr1().tabPageDetails().ccHcp().setValue((HcpLiteVo)domain.getHcpLiteUser());
		ccHCPValueChanged();
	}
	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	private void updateInstance() 
	{
		if (form.getLocalContext().getSelectedRecordIsNotNull())
			form.setMode(FormMode.EDIT);
		
		populateInstanceControls(domain.getCAContact(form.getLocalContext().getSelectedRecord()));
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		populateInstanceControls(form.getLocalContext().getSelectedRecord());
		if (form.getLocalContext().getSelectedRecordIsNotNull()
			&& form.getLocalContext().getSelectedRecord().getID_CancerContactsIsNotNull())
			form.lyr1().tabPageDetails().btnEdit().setVisible(true);
		else
			form.lyr1().tabPageDetails().btnEdit().setVisible(false);
			
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			if (form.getGlobalContext().Oncology.getCancerContactSearchCriteriaVoIsNotNull())
				open();
			form.setMode(FormMode.VIEW);
			populateInstanceControls(form.getLocalContext().getSelectedRecord());
			form.lyr1().tabPageDetails().btnEdit().setVisible(form.getLocalContext().getSelectedRecordIsNotNull());
		}
	}
	
	private boolean save() 
	{
		String[] arrErrors = validateUIRules();
		if (arrErrors != null)
		{	
			engine.showErrors(arrErrors);
			return false;
		}
		
		CancerContactsVo voCancerContact = populateInstanceData();
		
		//validate Vo
		arrErrors = voCancerContact.validate();
		if (arrErrors != null)
		{	
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			form.getLocalContext().setSelectedRecord(domain.saveCAContact(voCancerContact));
		}
		catch(StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			populateInstanceControls(domain.getCAContact(voCancerContact));
			return false;
		} 
		catch (DomainInterfaceException e)
		{
			engine.showErrors(new String[]{e.getMessage()});
			return false;
		}
		
		return true;
	}
	private String[] validateUIRules() 
	{
		ArrayList screenErrors = new ArrayList();
		
		if(form.lyr1().tabPageDetails().ccHcp().getValue() == null)
			screenErrors.add("Please enter a value for HCP.");

		if(form.lyr1().tabPageDetails().cmbDiscipline().getValue() == null)
			screenErrors.add("Please enter a value for HCP Discipline.");
		
		if(form.lyr1().tabPageDetails().dtimDateTime().getValue() == null)
			screenErrors.add("Please enter a value for DateTime.");
		
		//wdev-12767
		if(form.lyr1().tabPageDetails().dtimDateTime().getValue() != null && form.lyr1().tabPageDetails().dtimDateTime().getValue().isGreaterThan(new DateTime()))
			screenErrors.add("The DateTime cannot be in the future.");
		//---------------
		int errorCount = screenErrors.size();
		if(errorCount == 0)
		{
			return null;
		}
		String[] result = new String[errorCount];
		screenErrors.toArray(result);
		
		return result;
	}
	
	private CancerContactsVo populateInstanceData() 
	{
		CancerContactsVo voCancerContact = form.getLocalContext().getSelectedRecord();
		
		if(voCancerContact == null)
		{
			voCancerContact = new CancerContactsVo();
			
			// Set EpisodeOfCare and CareContext only when creating a CancerContact
			voCancerContact.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			voCancerContact.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}

		//WDEV-15590
		//voCancerContact.setRecordingInfo(form.lyr1().tabPageDetails().ccRecordingInfo().getValue());
		
		voCancerContact.setContactHCP((HcpLiteVo) form.lyr1().tabPageDetails().ccHcp().getValue());
		voCancerContact.setHCPDiscipline(form.lyr1().tabPageDetails().cmbDiscipline().getValue());
		voCancerContact.setContactDateTime(form.lyr1().tabPageDetails().dtimDateTime().getValue());
		voCancerContact.setUnitsRequired(form.lyr1().tabPageDetails().decRequired().getValue());
		voCancerContact.setUnitsGiven(form.lyr1().tabPageDetails().decGiven().getValue());
		voCancerContact.setComment(form.lyr1().tabPageDetails().txtNotes().getValue());
		
		ContactTypesByDisciplineItemRefVoCollection voColl = new ContactTypesByDisciplineItemRefVoCollection();
		for (int i = 0 ; i < form.lyr1().tabPageDetails().treContactTypes().getNodes().size() ; i++)
		{
			addChildNodes(voColl, form.lyr1().tabPageDetails().treContactTypes().getNodes().get(i));
		}

		voCancerContact.setContactTypes(voColl);
		
		return voCancerContact;
	}

	private void addChildNodes(ContactTypesByDisciplineItemRefVoCollection voColl, TreeNode node) 
	{
		if (node.isChecked())
			voColl.add((ContactTypesByDisciplineItemVo)node.getValue());
		
		if (node.getNodes().size() > 0 )
		{
			for (int i = 0 ; i < node.getNodes().size() ; i++)
			{
				addChildNodes(voColl, node.getNodes().get(i));
			}
		}
	}

	@Override
	protected void onCcHcpValueChanged() throws PresentationLogicException
	{
		ccHCPValueChanged();
	}
	
	private void ccHCPValueChanged() 
	{
		if (form.lyr1().tabPageDetails().ccHcp().getValue() != null)
		{
			form.lyr1().tabPageDetails().treContactTypes().clear();

			if (form.lyr1().tabPageDetails().ccHcp().getValue() != null
				&& form.lyr1().tabPageDetails().ccHcp().getValue() instanceof HcpLiteVo)
			{
				Hcp voHcp = domain.getHCP((HcpRefVo)form.lyr1().tabPageDetails().ccHcp().getValue());
				if (voHcp instanceof MedicVo)
					form.lyr1().tabPageDetails().cmbDiscipline().setValue(((MedicVo) voHcp).getMedicType());
				else if (voHcp instanceof NurseVo)
					form.lyr1().tabPageDetails().cmbDiscipline().setValue(((NurseVo) voHcp).getNurseType());
				else if (voHcp instanceof TherapistVo)
					form.lyr1().tabPageDetails().cmbDiscipline().setValue(((TherapistVo) voHcp).getTherapistType());
				else 
					form.lyr1().tabPageDetails().cmbDiscipline().setValue(voHcp.getHcpType());
			}
			disciplineChanged();
		}
	}

	private void populateDisciplineTree(ContactTypesByDisciplineVo vo, ContactTypesByDisciplineItemRefVoCollection voColl) 
	{
		form.lyr1().tabPageDetails().treContactTypes().clear();

		for (int j = 0 ; vo != null && vo.getContactTypesIsNotNull() && j < vo.getContactTypes().size() ; j++)
			addChildNode(vo.getContactTypes().get(j), voColl);
		
		if (form.getMode().equals(FormMode.VIEW)) 
			removeUntickedNodes();

		if (form.getMode().equals(FormMode.EDIT)) 
			removeUnusedParentNodes(vo);
	}

	private void removeUnusedParentNodes(ContactTypesByDisciplineVo voDisp) 
	{
		for (int i = 0 ; i < form.lyr1().tabPageDetails().treContactTypes().getNodes().size() ; i++)
		{
			if(removeUnusedParentNodes(form.lyr1().tabPageDetails().treContactTypes().getNodes().get(i), voDisp))// If true decrement counter
				i--;
		}
	}

	private boolean removeUnusedParentNodes(TreeNode node, ContactTypesByDisciplineVo voDisp)
	{
		if (node.getNodes().size() > 0 )
		{
			for (int i = 0 ; i < node.getNodes().size() ; i++)
			{
				if(removeUnusedParentNodes(node.getNodes().get(i),voDisp)) // If true decrement counter 
					i--;
			}
		}

		boolean bRemoved = false;
		if (!node.isChecked())
		{
			if (node.getNodes().size() == 0)
			{
				boolean bIsAConfiguredParentNode = false;
				
				for (int i = 0 ; i < voDisp.getContactTypes().size() ; i++)
				{
					if (node.getValue() instanceof ContactTypesByDisciplineItemVo
						&& ((ContactTypesByDisciplineItemVo)node.getValue()).equals(voDisp.getContactTypes().get(i).getParent()))
						bIsAConfiguredParentNode = true;
				}
				
				if (bIsAConfiguredParentNode) 
				{
					form.lyr1().tabPageDetails().treContactTypes().getNodes().remove(node);
					bRemoved = true;
				}
			}
		}
		
		return bRemoved;
	}

	private void removeUntickedNodes() 
	{
		for (int i = 0 ; i < form.lyr1().tabPageDetails().treContactTypes().getNodes().size() ; i++)
		{
			if (removeUntickedNodes(form.lyr1().tabPageDetails().treContactTypes().getNodes().get(i)))
				i--;
		}
	}

	private boolean removeUntickedNodes(TreeNode node) 
	{
		if (node.getNodes().size() > 0 )
		{
			for (int j = 0 ; j < node.getNodes().size() ; j++)
			{
				if(removeUntickedNodes(node.getNodes().get(j))) 
					j--;
			}
		}
		if (!node.isChecked())
		{
			if (node.getNodes().size() == 0)
			{
				if (node.getParent() != null) 
				{
					TreeNode parentNode = node.getParent();
					parentNode.getNodes().remove(node);
					
					return true;
				}
				else
				{
					form.lyr1().tabPageDetails().treContactTypes().getNodes().remove(node);
					return true;
				}
			}
		}
		
		return false;
	}

	private TreeNode addChildNode(ContactTypesByDisciplineItemVo vo, ContactTypesByDisciplineItemRefVoCollection voColl) 
	{
		boolean bTick = false;
		if (voColl != null)
		{
			for (int i = 0 ;i < voColl.size() ; i++)
			{
				if (vo.equals(voColl.get(i)))
					bTick = true;
			}
		}
		
		TreeNode childNode = null;
		TreeNode parentNode = null;
		
		if( vo.getActive()
			|| (vo.getActive().equals(Boolean.FALSE)
					&& bTick))
		{
			if (vo.getParentIsNotNull()
				&& form.lyr1().tabPageDetails().treContactTypes().getNodes().getNodeByValue(vo.getParent()) != null)
			{
				childNode = form.lyr1().tabPageDetails().treContactTypes().getNodes().getNodeByValue(vo.getParent()).getNodes().add(vo, vo.getContactType());
				parentNode = form.lyr1().tabPageDetails().treContactTypes().getNodes().getNodeByValue(vo.getParent());
			}
			else
				childNode = form.lyr1().tabPageDetails().treContactTypes().getNodes().add(vo, vo.getContactType());
				
			childNode.setExpanded(true);
			childNode.setChecked(bTick);
			if (parentNode != null)
				parentNode.setCheckBoxVisible(false);
		}

		return childNode;
	}

	@Override
	protected void onCmbDisciplineValueChanged() throws PresentationLogicException 
	{
		disciplineChanged();
	}

	private void disciplineChanged() 
	{
		if (form.lyr1().tabPageDetails().cmbDiscipline().getValue() != null)
			populateDisciplineTree(domain.loadDisciplineContacts(form.lyr1().tabPageDetails().cmbDiscipline().getValue()), null);
	}

	//wdev-13301
	protected void onFormModeChanged() 
	{
		updateControlsState();
		
	}
	//wdev-13301
	private void updateControlsState()
	{
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.lyr1().tabPageDetails().ccHcp().setEnabled(false);
		}
		else
		{
			form.lyr1().tabPageDetails().ccHcp().setEnabled(true);
		}
		
		form.lyr1().tabPageSummary().setHeaderEnabled(form.getMode().equals(FormMode.VIEW)); //WDEV-16105
	}

}
