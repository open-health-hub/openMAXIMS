//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.chemocycledrugdetails;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.oncology.domain.ChemoCycleDrugDetails.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.oncology.domain.ChemoCycleDrugDetails domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbProviderOrganisationValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbProviderOrganisation().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.ChemoProviderOrg existingInstance = (ims.oncology.vo.lookups.ChemoProviderOrg)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbProviderOrganisationLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.oncology.vo.lookups.ChemoProviderOrg)
		{
			ims.oncology.vo.lookups.ChemoProviderOrg instance = (ims.oncology.vo.lookups.ChemoProviderOrg)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbProviderOrganisationLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.oncology.vo.lookups.ChemoProviderOrg existingInstance = (ims.oncology.vo.lookups.ChemoProviderOrg)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbProviderOrganisation().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbProviderOrganisationLookup()
	{
		this.form.cmbProviderOrganisation().clear();
		ims.oncology.vo.lookups.ChemoProviderOrgCollection lookupCollection = ims.oncology.vo.lookups.LookupHelper.getChemoProviderOrg(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbProviderOrganisation().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbProviderOrganisationLookupValue(int id)
	{
		ims.oncology.vo.lookups.ChemoProviderOrg instance = ims.oncology.vo.lookups.LookupHelper.getChemoProviderOrgInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbProviderOrganisation().setValue(instance);
	}
	protected final void defaultcmbProviderOrganisationLookupValue()
	{
		this.form.cmbProviderOrganisation().setValue((ims.oncology.vo.lookups.ChemoProviderOrg)domain.getLookupService().getDefaultInstance(ims.oncology.vo.lookups.ChemoProviderOrg.class, engine.getFormName().getID(), ims.oncology.vo.lookups.ChemoProviderOrg.TYPE_ID));
	}
	protected final void oncmbRouteValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbRoute().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MedicationRoute existingInstance = (ims.core.vo.lookups.MedicationRoute)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbRouteLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.MedicationRoute)
		{
			ims.core.vo.lookups.MedicationRoute instance = (ims.core.vo.lookups.MedicationRoute)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbRouteLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MedicationRoute existingInstance = (ims.core.vo.lookups.MedicationRoute)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbRoute().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbRouteLookup()
	{
		this.form.cmbRoute().clear();
		ims.core.vo.lookups.MedicationRouteCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMedicationRoute(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbRoute().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbRouteLookupValue(int id)
	{
		ims.core.vo.lookups.MedicationRoute instance = ims.core.vo.lookups.LookupHelper.getMedicationRouteInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbRoute().setValue(instance);
	}
	protected final void defaultcmbRouteLookupValue()
	{
		this.form.cmbRoute().setValue((ims.core.vo.lookups.MedicationRoute)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.MedicationRoute.class, engine.getFormName().getID(), ims.core.vo.lookups.MedicationRoute.TYPE_ID));
	}
	protected final void oncmbDoseValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbDose().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MedicationDoseUnit existingInstance = (ims.core.vo.lookups.MedicationDoseUnit)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDoseLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.MedicationDoseUnit)
		{
			ims.core.vo.lookups.MedicationDoseUnit instance = (ims.core.vo.lookups.MedicationDoseUnit)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDoseLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.MedicationDoseUnit existingInstance = (ims.core.vo.lookups.MedicationDoseUnit)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbDose().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDoseLookup()
	{
		this.form.cmbDose().clear();
		ims.core.vo.lookups.MedicationDoseUnitCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getMedicationDoseUnit(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbDose().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDoseLookupValue(int id)
	{
		ims.core.vo.lookups.MedicationDoseUnit instance = ims.core.vo.lookups.LookupHelper.getMedicationDoseUnitInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbDose().setValue(instance);
	}
	protected final void defaultcmbDoseLookupValue()
	{
		this.form.cmbDose().setValue((ims.core.vo.lookups.MedicationDoseUnit)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.MedicationDoseUnit.class, engine.getFormName().getID(), ims.core.vo.lookups.MedicationDoseUnit.TYPE_ID));
	}
	protected void clearScreen()
	{
		this.form.dteCycleStart().setValue(null);
		this.form.intCycleDuration().setValue(null);
		this.form.intCycleNumber().setValue(null);
	}
	protected void populateScreenFromData(ims.oncology.vo.ChemotherapyCycleDetailsVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.dteCycleStart().setValue(value.getCycleStartDateIsNotNull() ? value.getCycleStartDate() : null);
		this.form.intCycleDuration().setValue(value.getCycleDurationIsNotNull() ? value.getCycleDuration() : null);
		this.form.intCycleNumber().setValue(value.getCycleNumberIsNotNull() ? value.getCycleNumber() : null);
	}
	protected ims.oncology.vo.ChemotherapyCycleDetailsVo populateDataFromScreen(ims.oncology.vo.ChemotherapyCycleDetailsVo value)
	{
		if(value == null)
			value = new ims.oncology.vo.ChemotherapyCycleDetailsVo();

		value.setCycleStartDate(this.form.dteCycleStart().getValue());
		value.setCycleDuration(this.form.intCycleDuration().getValue());
		value.setCycleNumber(this.form.intCycleNumber().getValue());

		return value;
	}
	protected ims.oncology.vo.ChemotherapyCycleDetailsVo populateDataFromScreen()
	{
		return populateDataFromScreen(new ims.oncology.vo.ChemotherapyCycleDetailsVo());
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.oncology.domain.ChemoCycleDrugDetails domain;
}
