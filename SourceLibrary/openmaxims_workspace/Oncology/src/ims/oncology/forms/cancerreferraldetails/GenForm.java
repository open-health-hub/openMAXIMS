//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.cancerreferraldetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbReasonReferralComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ReasonForReferral value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ReasonForReferral value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ReasonForReferral value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ReasonForReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ReasonForReferral value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ReasonForReferral getValue()
		{
			return (ims.core.vo.lookups.ReasonForReferral)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ReasonForReferral value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCancerStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.CancerStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.CancerStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.CancerStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.CancerStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.CancerStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.CancerStatus getValue()
		{
			return (ims.core.vo.lookups.CancerStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.CancerStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbUrgntReferralTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.UrgentCancerReferralType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.UrgentCancerReferralType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.UrgentCancerReferralType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.UrgentCancerReferralType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.UrgentCancerReferralType value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.UrgentCancerReferralType getValue()
		{
			return (ims.core.vo.lookups.UrgentCancerReferralType)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.UrgentCancerReferralType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbDelayReasonFirstSeenComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.DelayReasonGPUrgentReferral value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.DelayReasonGPUrgentReferral value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.DelayReasonGPUrgentReferral value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.DelayReasonGPUrgentReferral value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.DelayReasonGPUrgentReferral value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.DelayReasonGPUrgentReferral getValue()
		{
			return (ims.clinical.vo.lookups.DelayReasonGPUrgentReferral)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.DelayReasonGPUrgentReferral value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSpecialtyCodeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.SpecialtyFunctionCode value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.SpecialtyFunctionCode value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.SpecialtyFunctionCode value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.SpecialtyFunctionCode value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.SpecialtyFunctionCode value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.SpecialtyFunctionCode getValue()
		{
			return (ims.clinical.vo.lookups.SpecialtyFunctionCode)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.SpecialtyFunctionCode value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbPriorityComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ReferralPriority value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ReferralPriority value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ReferralPriority value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ReferralPriority value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ReferralPriority value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ReferralPriority getValue()
		{
			return (ims.core.vo.lookups.ReferralPriority)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ReferralPriority value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSourceofReferralComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.ReferralSource value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.ReferralSource value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.ReferralSource value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.ReferralSource value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.ReferralSource value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.ReferralSource getValue()
		{
			return (ims.clinical.vo.lookups.ReferralSource)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.ReferralSource value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbReferredToComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.MemberOfStaffShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.MemberOfStaffShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.MemberOfStaffShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.MemberOfStaffShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.MemberOfStaffShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.MemberOfStaffShortVo getValue()
		{
			return (ims.core.vo.MemberOfStaffShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.MemberOfStaffShortVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbReferredByComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.ValueObject value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.vo.ValueObject value)
		{
			return super.control.removeRow(value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.control.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class qmbReferringOrgComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.OrgLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.OrgLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.OrgLiteVo getValue()
		{
			return (ims.core.vo.OrgLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.OrgLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdPreceedingReferralsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPreceedingReferralsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColSourceOfReferralReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColSourceOfReferralReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColSourceOfReferralOpened()
		{
			super.row.showOpened(0);
		}
		public String getColSourceOfReferral()
		{
			return (String)super.row.get(0);
		}
		public void setColSourceOfReferral(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColSourceOfReferralTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColRefOrgaReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColRefOrgaReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColRefOrgaOpened()
		{
			super.row.showOpened(1);
		}
		public String getColRefOrga()
		{
			return (String)super.row.get(1);
		}
		public void setColRefOrga(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColRefOrgaTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColReferredToReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColReferredToReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColReferredToOpened()
		{
			super.row.showOpened(2);
		}
		public String getColReferredTo()
		{
			return (String)super.row.get(2);
		}
		public void setColReferredTo(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColReferredToTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColReferralDateReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColReferralDateReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColReferralDateOpened()
		{
			super.row.showOpened(3);
		}
		public String getColReferralDate()
		{
			return (String)super.row.get(3);
		}
		public void setColReferralDate(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColReferralDateTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColDateFirstSeenReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColDateFirstSeenReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColDateFirstSeenOpened()
		{
			super.row.showOpened(4);
		}
		public String getColDateFirstSeen()
		{
			return (String)super.row.get(4);
		}
		public void setColDateFirstSeen(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColDateFirstSeenTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.clinical.vo.ReferralsRecordingVo getValue()
		{
			return (ims.clinical.vo.ReferralsRecordingVo)super.row.getValue();
		}
		public void setValue(ims.clinical.vo.ReferralsRecordingVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPreceedingReferralsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPreceedingReferralsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPreceedingReferralsRow get(int index)
		{
			return new grdPreceedingReferralsRow(super.collection.get(index));
		}
		public grdPreceedingReferralsRow newRow()
		{
			return new grdPreceedingReferralsRow(super.collection.newRow());
		}
		public grdPreceedingReferralsRow newRow(boolean autoSelect)
		{
			return new grdPreceedingReferralsRow(super.collection.newRow(autoSelect));
		}
		public grdPreceedingReferralsRow newRowAt(int index)
		{
			return new grdPreceedingReferralsRow(super.collection.newRowAt(index));
		}
		public grdPreceedingReferralsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPreceedingReferralsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPreceedingReferralsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.clinical.vo.ReferralsRecordingVoCollection getValues()
		{
			ims.clinical.vo.ReferralsRecordingVoCollection listOfValues = new ims.clinical.vo.ReferralsRecordingVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.clinical.vo.ReferralsRecordingVo getValue()
		{
			return (ims.clinical.vo.ReferralsRecordingVo)super.grid.getValue();
		}
		public void setValue(ims.clinical.vo.ReferralsRecordingVo value)
		{
			super.grid.setValue(value);
		}
		public grdPreceedingReferralsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPreceedingReferralsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPreceedingReferralsRowCollection getRows()
		{
			return new grdPreceedingReferralsRowCollection(super.grid.getRows());
		}
		public grdPreceedingReferralsRow getRowByValue(ims.clinical.vo.ReferralsRecordingVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPreceedingReferralsRow(row);
		}
		public void setColSourceOfReferralHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColSourceOfReferralHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColRefOrgaHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColRefOrgaHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColReferredToHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColReferredToHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColReferralDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColReferralDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColDateFirstSeenHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColDateFirstSeenHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedReferral();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 24, 240, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referral Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 440, 264, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording Date / Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 440, 232, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Recording User :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 440, 144, 62, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "referrals):", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 440, 128, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "First Seen (GP cancer", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 208, 119, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason for Referral:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 296, 120, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Preceding Referrals:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 114, 115, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Priority of Referral:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 24, 50, 138, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referring Organisation:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 24, 82, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referred By:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 178, 160, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date of Receipt of Referral:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 24, 146, 136, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date Decision to Refer:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 440, 16, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Referred To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 440, 48, 145, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty Function Code:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 440, 80, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date First Seen:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 440, 112, 144, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Delay Reason Referral to ", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 440, 160, 144, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Delay Reason Comment:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 24, 224, 86, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Urgent Cancer", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 24, 264, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Cancer Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 24, 18, 111, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source of Referral:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 664, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 752, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 112, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 24, 600, 80, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 608, 232, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 440, 184, 392, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 616, 80, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 184, 176, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 184, 144, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 608, 264, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 184, 206, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbReasonReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbReasonReferralTemp);
		cmbReasonReferralComboBox cmbReasonReferral = (cmbReasonReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonReferralComboBox.class, m_cmbReasonReferralTemp);
		super.addComboBox(cmbReasonReferral);
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 184, 262, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbCancerStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbCancerStatusTemp);
		cmbCancerStatusComboBox cmbCancerStatus = (cmbCancerStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCancerStatusComboBox.class, m_cmbCancerStatusTemp);
		super.addComboBox(cmbCancerStatus);
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 184, 234, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbUrgntReferralTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbUrgntReferralTypeTemp);
		cmbUrgntReferralTypeComboBox cmbUrgntReferralType = (cmbUrgntReferralTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbUrgntReferralTypeComboBox.class, m_cmbUrgntReferralTypeTemp);
		super.addComboBox(cmbUrgntReferralType);
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 616, 112, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbDelayReasonFirstSeenTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbDelayReasonFirstSeenTemp);
		cmbDelayReasonFirstSeenComboBox cmbDelayReasonFirstSeen = (cmbDelayReasonFirstSeenComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDelayReasonFirstSeenComboBox.class, m_cmbDelayReasonFirstSeenTemp);
		super.addComboBox(cmbDelayReasonFirstSeen);
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 616, 48, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSpecialtyCodeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSpecialtyCodeTemp);
		cmbSpecialtyCodeComboBox cmbSpecialtyCode = (cmbSpecialtyCodeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyCodeComboBox.class, m_cmbSpecialtyCodeTemp);
		super.addComboBox(cmbSpecialtyCode);
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 184, 112, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbPriorityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbPriorityTemp);
		cmbPriorityComboBox cmbPriority = (cmbPriorityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityComboBox.class, m_cmbPriorityTemp);
		super.addComboBox(cmbPriority);
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 184, 16, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSourceofReferralTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSourceofReferralTemp);
		cmbSourceofReferralComboBox cmbSourceofReferral = (cmbSourceofReferralComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSourceofReferralComboBox.class, m_cmbSourceofReferralTemp);
		super.addComboBox(cmbSourceofReferral);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 616, 16, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbReferredToTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbReferredToTemp);
		qmbReferredToComboBox qmbReferredTo = (qmbReferredToComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbReferredToComboBox.class, m_qmbReferredToTemp);
		super.addComboBox(qmbReferredTo);
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 184, 80, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbReferredByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbReferredByTemp);
		qmbReferredByComboBox qmbReferredBy = (qmbReferredByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbReferredByComboBox.class, m_qmbReferredByTemp);
		super.addComboBox(qmbReferredBy);
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 184, 48, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbReferringOrgTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbReferringOrgTemp);
		qmbReferringOrgComboBox qmbReferringOrg = (qmbReferringOrgComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbReferringOrgComboBox.class, m_qmbReferringOrgTemp);
		super.addComboBox(qmbReferringOrg);

		// Grid Controls
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 24, 320, 808, 272, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdPreceedingReferralsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdPreceedingReferralsTemp);
		grdPreceedingReferralsGrid grdPreceedingReferrals = (grdPreceedingReferralsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPreceedingReferralsGrid.class, m_grdPreceedingReferralsTemp);
		grdPreceedingReferrals.addStringColumn("Source", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPreceedingReferrals.addStringColumn("Referring Organisation", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPreceedingReferrals.addStringColumn("Referred To", 0, 0, 180, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPreceedingReferrals.addStringColumn("Referral Date", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdPreceedingReferrals.addStringColumn("Date First Seen", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdPreceedingReferrals);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public Button btnSave()
	{
		return (Button)super.getControl(20);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(21);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(22);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(23);
	}
	public TextBox txtRecordingUser()
	{
		return (TextBox)super.getControl(24);
	}
	public TextBox txtDelayResonComments()
	{
		return (TextBox)super.getControl(25);
	}
	public DateControl dteFirstSeen()
	{
		return (DateControl)super.getControl(26);
	}
	public DateControl dteRecieptReferral()
	{
		return (DateControl)super.getControl(27);
	}
	public DateControl dteDecisionToRefer()
	{
		return (DateControl)super.getControl(28);
	}
	public DateTimeControl dtimRecordingDate()
	{
		return (DateTimeControl)super.getControl(29);
	}
	public cmbReasonReferralComboBox cmbReasonReferral()
	{
		return (cmbReasonReferralComboBox)super.getComboBox(0);
	}
	public cmbCancerStatusComboBox cmbCancerStatus()
	{
		return (cmbCancerStatusComboBox)super.getComboBox(1);
	}
	public cmbUrgntReferralTypeComboBox cmbUrgntReferralType()
	{
		return (cmbUrgntReferralTypeComboBox)super.getComboBox(2);
	}
	public cmbDelayReasonFirstSeenComboBox cmbDelayReasonFirstSeen()
	{
		return (cmbDelayReasonFirstSeenComboBox)super.getComboBox(3);
	}
	public cmbSpecialtyCodeComboBox cmbSpecialtyCode()
	{
		return (cmbSpecialtyCodeComboBox)super.getComboBox(4);
	}
	public cmbPriorityComboBox cmbPriority()
	{
		return (cmbPriorityComboBox)super.getComboBox(5);
	}
	public cmbSourceofReferralComboBox cmbSourceofReferral()
	{
		return (cmbSourceofReferralComboBox)super.getComboBox(6);
	}
	public qmbReferredToComboBox qmbReferredTo()
	{
		return (qmbReferredToComboBox)super.getComboBox(7);
	}
	public qmbReferredByComboBox qmbReferredBy()
	{
		return (qmbReferredByComboBox)super.getComboBox(8);
	}
	public qmbReferringOrgComboBox qmbReferringOrg()
	{
		return (qmbReferringOrgComboBox)super.getComboBox(9);
	}
	public grdPreceedingReferralsGrid grdPreceedingReferrals()
	{
		return (grdPreceedingReferralsGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				PreceedingReferral = new LocalFormName(123136);
			}
			public final FormName PreceedingReferral;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedReferral = new ims.framework.ContextVariable("SelectedReferral", prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier + "");
			cxl_LoggedInMOS = new ims.framework.ContextVariable("LoggedInMOS", prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__LoggedInMOS_" + componentIdentifier + "");
		}
		
		public boolean getSelectedReferralIsNotNull()
		{
			return !cxl_SelectedReferral.getValueIsNull(context);
		}
		public ims.clinical.vo.ReferralsRecordingVo getSelectedReferral()
		{
			return (ims.clinical.vo.ReferralsRecordingVo)cxl_SelectedReferral.getValue(context);
		}
		public void setSelectedReferral(ims.clinical.vo.ReferralsRecordingVo value)
		{
			cxl_SelectedReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedReferral = null;
		public boolean getLoggedInMOSIsNotNull()
		{
			return !cxl_LoggedInMOS.getValueIsNull(context);
		}
		public ims.core.vo.MemberOfStaffShortVo getLoggedInMOS()
		{
			return (ims.core.vo.MemberOfStaffShortVo)cxl_LoggedInMOS.getValue(context);
		}
		public void setLoggedInMOS(ims.core.vo.MemberOfStaffShortVo value)
		{
			cxl_LoggedInMOS.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LoggedInMOS = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[122];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-ID", "ID_ReferralsRecording");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-REFERRALTYPE", "ReferralType");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-REFERRALSOURCE", "ReferralSource");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-DATESENT", "DateSent");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-DETAILS", "Details");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-DATEFIRSTSEEN", "DateFirstSeen");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-DATERECEIVED", "DateReceived");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-REFERRALPRIORITY", "ReferralPriority");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-REASONFORREFERRAL", "ReasonForReferral");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-SPECIALTYFUNCTIONCODE", "SpecialtyFunctionCode");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-REFERRALCATEGORY", "ReferralCategory");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-PRIMARYPRECEEDING", "PrimaryPreceeding");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-CARESPELL", "CareSpell");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-CARECONTEXT", "CareContext");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-CLINICALCONTACT", "ClinicalContact");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-REFERRALSTATUS", "ReferralStatus");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-URGENTCANCERREFERRALTYPE", "UrgentCancerReferralType");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-CANCERSTATUS", "CancerStatus");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-DELAYREASONGPURGENTREFERRAL", "DelayReasonGPUrgentReferral");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-DELAYREASONTEXT", "DelayReasonText");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-DISCIPLINE", "Discipline");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPreceedingReferralVo", "BO-1072100062-REASONFORREFERRALTEXT", "ReasonForReferralText");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-ID", "ID_ReferralsRecording");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-REFERRALTYPE", "ReferralType");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-REFERRALSOURCE", "ReferralSource");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-DATESENT", "DateSent");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-DETAILS", "Details");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-DATEFIRSTSEEN", "DateFirstSeen");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-DATERECEIVED", "DateReceived");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-REFERRALPRIORITY", "ReferralPriority");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-REASONFORREFERRAL", "ReasonForReferral");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-SPECIALTYFUNCTIONCODE", "SpecialtyFunctionCode");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-REFERRALCATEGORY", "ReferralCategory");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-PRIMARYPRECEEDING", "PrimaryPreceeding");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-CARESPELL", "CareSpell");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-CARECONTEXT", "CareContext");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-CLINICALCONTACT", "ClinicalContact");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-REFERRALSTATUS", "ReferralStatus");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-URGENTCANCERREFERRALTYPE", "UrgentCancerReferralType");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-CANCERSTATUS", "CancerStatus");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-DELAYREASONGPURGENTREFERRAL", "DelayReasonGPUrgentReferral");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-DELAYREASONTEXT", "DelayReasonText");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-DISCIPLINE", "Discipline");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__SelectedReferral_" + componentIdentifier, "BO-1072100062-REASONFORREFERRALTEXT", "ReasonForReferralText");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__LoggedInMOS_" + componentIdentifier, "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__LoggedInMOS_" + componentIdentifier, "BO-1006100006-INITIALS", "Initials");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__LoggedInMOS_" + componentIdentifier, "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__LoggedInMOS_" + componentIdentifier, "BO-1006100006-STAFFTYPE", "StaffType");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__LoggedInMOS_" + componentIdentifier, "BO-1006100006-ISACTIVE", "IsActive");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__LoggedInMOS_" + componentIdentifier, "BO-1006100006-SDSROLEID", "SdsRoleId");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_Oncology.CancerreferralDetails.__internal_x_context__LoggedInMOS_" + componentIdentifier, "BO-1006100006-CANREFERPATIENT", "CanReferPatient");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
