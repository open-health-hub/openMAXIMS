//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.forms.histopathologyreport;

import ims.framework.delegates.*;

abstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode
{
	abstract protected void bindcmbSpecimenNatureLookup();
	abstract protected void defaultcmbSpecimenNatureLookupValue();
	abstract protected void bindcmbReportStatusLookup();
	abstract protected void defaultcmbReportStatusLookupValue();
	abstract protected void bindcmbInvTypeLookup();
	abstract protected void defaultcmbInvTypeLookupValue();
	abstract protected void bindcmbExcisionMargLookup();
	abstract protected void defaultcmbExcisionMargLookupValue();
	abstract protected void bindcmbVascLymphInvasionLookup();
	abstract protected void defaultcmbVascLymphInvasionLookupValue();
	abstract protected void bindcmbSynchronousTumourLookup();
	abstract protected void defaultcmbSynchronousTumourLookupValue();
	abstract protected void onFormModeChanged();
	abstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnReviseClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnUpdateClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbSpecimenNatureValueSet(Object value);
	abstract protected void oncmbReportStatusValueSet(Object value);
	abstract protected void oncmbInvTypeValueSet(Object value);
	abstract protected void onImbDiagnosisSelectClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void oncmbExcisionMargValueSet(Object value);
	abstract protected void oncmbVascLymphInvasionValueSet(Object value);
	abstract protected void oncmbSynchronousTumourValueSet(Object value);
	abstract protected void onCmbPathologicalMValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbPathologicalNValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onCmbPathologicalTValueChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onBtnFavouritesClick() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onGrdDetailsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException;
	abstract protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException;

	public final void setContext(ims.framework.UIEngine engine, GenForm form)
	{
		this.engine = engine;
		this.form = form;

		this.form.setFormModeChangedEvent(new FormModeChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle()
			{
				onFormModeChanged();
			}
		});
		this.form.setFormOpenEvent(new FormOpen()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException
			{
				bindLookups();
				onFormOpen(args);
			}
		});
		this.form.setFormDialogClosedEvent(new FormDialogClosed()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
			{
				onFormDialogClosed(formName, result);
			}
		});
		this.form.btnRevise().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnReviseClick();
			}
		});
		this.form.btnCancel().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnCancelClick();
			}
		});
		this.form.btnSave().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnSaveClick();
			}
		});
		this.form.btnUpdate().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnUpdateClick();
			}
		});
		this.form.btnNew().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnNewClick();
			}
		});
		this.form.lyrDetails().tabGenDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabGenDetailsActivated();
			}
		});
		this.form.lyrDetails().tabTumDetails().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabTumDetailsActivated();
			}
		});
		this.form.lyrDetails().tabTNM().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabTNMActivated();
			}
		});
		this.form.lyrDetails().tabSpecimenSpecific().setTabActivatedEvent(new ims.framework.delegates.TabActivated()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onlyrDetailstabSpecimenSpecificActivated();
			}
		});
		this.form.lyrDetails().tabGenDetails().cmbSpecimenNature().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSpecimenNatureValueSet(value);
			}
		});
		this.form.lyrDetails().tabGenDetails().cmbReportStatus().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbReportStatusValueSet(value);
			}
		});
		this.form.lyrDetails().tabGenDetails().cmbInvType().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbInvTypeValueSet(value);
			}
		});
		this.form.lyrDetails().tabTumDetails().imbDiagnosisSelect().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onImbDiagnosisSelectClick();
			}
		});
		this.form.lyrDetails().tabTumDetails().cmbExcisionMarg().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbExcisionMargValueSet(value);
			}
		});
		this.form.lyrDetails().tabTumDetails().cmbVascLymphInvasion().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbVascLymphInvasionValueSet(value);
			}
		});
		this.form.lyrDetails().tabTumDetails().cmbSynchronousTumour().setValueSetEvent(new ComboBoxValueSet()
		{
			private static final long serialVersionUID = 1L;
			public void handle(Object value)
			{
				oncmbSynchronousTumourValueSet(value);
			}
		});
		this.form.lyrDetails().tabTNM().cmbPathologicalM().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbPathologicalMValueChanged();
			}
		});
		this.form.lyrDetails().tabTNM().cmbPathologicalN().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbPathologicalNValueChanged();
			}
		});
		this.form.lyrDetails().tabTNM().cmbPathologicalT().setValueChangedEvent(new ValueChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onCmbPathologicalTValueChanged();
			}
		});
		this.form.lyrDetails().tabSpecimenSpecific().btnFavourites().setClickEvent(new Click()
		{
			private static final long serialVersionUID = 1L;
			public void handle() throws ims.framework.exceptions.PresentationLogicException
			{
				onBtnFavouritesClick();
			}
		});
		this.form.grdDetails().setSelectionChangedEvent(new GridSelectionChanged()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.enumerations.MouseButton mouseButton) throws ims.framework.exceptions.PresentationLogicException
			{
				onGrdDetailsSelectionChanged();
			}
		});
		this.form.getContextMenus().Oncology.getHistopatholgyReportADDItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.HistopatholgyReport.ADD, sender);
			}
		});
		this.form.getContextMenus().Oncology.getHistopatholgyReportUPDATEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.HistopatholgyReport.UPDATE, sender);
			}
		});
		this.form.getContextMenus().Oncology.getHistopatholgyReportREVISEItem().setClickEvent(new ims.framework.delegates.MenuItemClick()
		{
			private static final long serialVersionUID = 1L;
			public void handle(ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
			{
				onContextMenuItemClick(GenForm.ContextMenus.OncologyNamespace.HistopatholgyReport.REVISE, sender);
			}
		});
	}
	protected void bindLookups()
	{
		bindcmbSpecimenNatureLookup();
		bindcmbReportStatusLookup();
		bindcmbInvTypeLookup();
		bindcmbExcisionMargLookup();
		bindcmbVascLymphInvasionLookup();
		bindcmbSynchronousTumourLookup();
	}
	protected void rebindAllLookups()
	{
		bindcmbSpecimenNatureLookup();
		bindcmbReportStatusLookup();
		bindcmbInvTypeLookup();
		bindcmbExcisionMargLookup();
		bindcmbVascLymphInvasionLookup();
		bindcmbSynchronousTumourLookup();
	}
	protected void defaultAllLookupValues()
	{
		defaultcmbSpecimenNatureLookupValue();
		defaultcmbReportStatusLookupValue();
		defaultcmbInvTypeLookupValue();
		defaultcmbExcisionMargLookupValue();
		defaultcmbVascLymphInvasionLookupValue();
		defaultcmbSynchronousTumourLookupValue();
	}
	private void onlyrDetailstabGenDetailsActivated()
	{
		this.form.lyrDetails().showtabGenDetails();
	}
	private void onlyrDetailstabTumDetailsActivated()
	{
		this.form.lyrDetails().showtabTumDetails();
	}
	private void onlyrDetailstabTNMActivated()
	{
		this.form.lyrDetails().showtabTNM();
	}
	private void onlyrDetailstabSpecimenSpecificActivated()
	{
		this.form.lyrDetails().showtabSpecimenSpecific();
	}

	public void free()
	{
		this.engine = null;
		this.form = null;
	}
	protected ims.framework.UIEngine engine;
	protected GenForm form;
}
