//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.53 build 2648.15910)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.oncology.domain.impl;

import ims.admin.domain.MosSearch;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.MosSearchImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.ccosched.vo.PatTreatPlanActionLiteVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.place.domain.objects.LocSite;
import ims.core.vo.LocSiteLiteVoCollection;
import ims.core.vo.MedicVo;
import ims.core.vo.MedicVoCollection;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.domain.LocSiteLiteVoAssembler;
import ims.core.vo.domain.MedicVoAssembler;
import ims.core.vo.lookups.LocationType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.hibernate3.IMSCriteria;
import ims.domain.lookups.LookupInstance;
import ims.framework.exceptions.CodingRuntimeException;
import ims.oncology.domain.PatientsTreatmentPlanActionsDialog;
import ims.oncology.domain.base.impl.BaseRadioTherapyDetailsImpl;
import ims.oncology.domain.objects.RadiotherapyDetails;
import ims.oncology.vo.PatTreatmentPlanRadiotherapyDialogVoCollection;
import ims.oncology.vo.RadiotherapyDetailsRefVo;
import ims.oncology.vo.RadiotherapyDetailsShortVoCollection;
import ims.oncology.vo.RadiotherapyDetailsVo;
import ims.oncology.vo.domain.RadiotherapyDetailsShortVoAssembler;
import ims.oncology.vo.domain.RadiotherapyDetailsVoAssembler;
import ims.oncology.vo.lookups.DiseaseStatus;
import ims.oncology.vo.lookups.DiseaseStatusCollection;

import java.util.ArrayList;
import java.util.List;

public class RadioTherapyDetailsImpl extends BaseRadioTherapyDetailsImpl
{

	private static final long serialVersionUID = 1L;

	public RadiotherapyDetailsShortVoCollection list(EpisodeOfCareRefVo episodeOfCare)
	{
		// Check parameter
		if (episodeOfCare == null || !episodeOfCare.getID_EpisodeOfCareIsNotNull())
			throw new DomainRuntimeException("Can not search for radiotherapy records for an invalid episode of care");

		// Build query (for complex queries - that depend on conditions - remember to change to StringBuilder)
		String query = "from RadiotherapyDetails as rtd where rtd.episodeOfCare.id = :EP_ID order by rtd.startDate asc";//WDEV-15546

		// Build parameters (names and values)
		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		paramNames.add("EP_ID");
		paramValues.add(episodeOfCare.getID_EpisodeOfCare());

		// Query database, pass results to AssemblerVO, return VO collection results
		return RadiotherapyDetailsShortVoAssembler.createRadiotherapyDetailsShortVoCollectionFromRadiotherapyDetails(getDomainFactory().find(query, paramNames, paramValues));
	}

	public RadiotherapyDetailsVo save(RadiotherapyDetailsVo record) throws DomainInterfaceException, StaleObjectException
	{
		if (record == null)
			throw new DomainRuntimeException("Invalid record");

		if (!record.isValidated())
			throw new CodingRuntimeException("Record not validated");

		DomainFactory factory = getDomainFactory();
		RadiotherapyDetails domainRecord = RadiotherapyDetailsVoAssembler.extractRadiotherapyDetails(factory, record);

		factory.save(domainRecord);

		return RadiotherapyDetailsVoAssembler.create(domainRecord);
	}

	public MemberOfStaffShortVoCollection listMembersOfStaff(MemberOfStaffShortVo filter)
	{
		MosSearch mosSearch = (MosSearch) getDomainImpl(MosSearchImpl.class);
		return mosSearch.listMembersOfStaff(filter);
	}

	public RadiotherapyDetailsVo get(RadiotherapyDetailsRefVo record)
	{
		if (record == null || !record.getID_RadiotherapyDetailsIsNotNull())
			return null;

		RadiotherapyDetails domainRecord = (RadiotherapyDetails) getDomainFactory().getDomainObject(RadiotherapyDetails.class, record.getID_RadiotherapyDetails().intValue());

		return RadiotherapyDetailsVoAssembler.create(domainRecord);
	}

	public LocSiteLiteVoCollection listLocSite(String locationName)
	{
		OrganisationAndLocation locSite = (OrganisationAndLocation) getDomainImpl(OrganisationAndLocationImpl.class);
		return locSite.listLocSite(locationName);
	}

	public LocSiteLiteVoCollection listHospitals(String locationName)
	{
		DomainFactory factory = getDomainFactory();
		IMSCriteria imsc = new IMSCriteria(LocSite.class, factory);
		imsc.equal("type", getDomLookup(LocationType.HOSP));
		imsc.like("name", locationName + "%");
		List<?> locations = imsc.find();
		if (locations != null)
			return LocSiteLiteVoAssembler.createLocSiteLiteVoCollectionFromLocSite(locations);
		else
			return null;
	}

	public DiseaseStatusCollection listDiseaseStatus() 
	{
		DomainFactory factory = getDomainFactory();
		String query = "from LookupInstance as l where l.type.id = :LookupId and l.parent is null and l.active = 1 order by l.order";
		
		List<?> list = factory.find(query, new String[] {"LookupId"}, new Object[] {new Integer(DiseaseStatus.TYPE_ID)});
		
		if(list == null || list.isEmpty())
			return null;
		
		DiseaseStatusCollection coll = new DiseaseStatusCollection();
		
		for(Object look : list)
		{
			if(look instanceof LookupInstance)
			{
				LookupInstance disease = (LookupInstance) look;
				coll.add(new DiseaseStatus(disease.getId(), disease.getText(), disease.isActive(), null, disease.getImage(), disease.getColor(), disease.getOrder()));
			}
		}
		
		return coll;
	}

	public DiseaseStatusCollection listDiseaseStatusByParent(DiseaseStatus diseaseParent) 
	{
		if(diseaseParent == null )
			throw new CodingRuntimeException("Can not list DiseaseStatus childrens for null DiseaseStatus parent.");
		
		DomainFactory factory = getDomainFactory();
		String query = "from LookupInstance as l where l.type.id = :LookupId and l.parent.id = :Parent and l.active = 1 order by l.order";
		
		List<?> list = factory.find(query, new String[] {"LookupId", "Parent"}, new Object[] {new Integer(DiseaseStatus.TYPE_ID), diseaseParent.getID()});
		
		if(list == null || list.isEmpty())
			return null;
		
		DiseaseStatusCollection coll = new DiseaseStatusCollection();
		
		for(Object look : list)
		{
			if(look instanceof LookupInstance)
			{
				LookupInstance disease = (LookupInstance) look;
				coll.add(new DiseaseStatus(disease.getId(), disease.getText(), disease.isActive(), null, disease.getImage(), disease.getColor(), disease.getOrder()));
			}
		}
		
		return coll;
	}

	//wdev-13110
	public MedicVo getMedic(HcpRefVo hcpId) 
	{
		if(hcpId == null)
			throw new CodingRuntimeException("HCP id must not be null ");
		
		

		DomainFactory factory = getDomainFactory();
		String hql = "from Medic as m1_1 where m1_1.id = :idHCP";
		List list = factory.find(hql, new String[] {"idHCP"}, new Object[] {hcpId.getID_Hcp()});
		if(list != null && list.size() > 0)
		{
			MedicVoCollection voColl =  MedicVoAssembler.createMedicVoCollectionFromMedic(list);
			if(voColl != null && voColl.size() > 0)
				return voColl.get(0);
		}
		return null;
	}

	public PatTreatmentPlanRadiotherapyDialogVoCollection listActivePatTreatMentPlans(PatientRefVo patient, EpisodeOfCareRefVo episode) 
	{
		PatientsTreatmentPlanActionsDialog impl = (PatientsTreatmentPlanActionsDialog) getDomainImpl(PatientsTreatmentPlanActionsDialogImpl.class);
		return impl.listActivePatTreatMentPlans(patient, episode);
	}

	public Boolean checkIfChosenPlanLinked(PatTreatPlanActionLiteVo patAction)
	{
		if (patAction == null || patAction.getID_PatAction() == null)
			throw new DomainRuntimeException("Can checkIfChosenPlanLinked as Action is null");
			
		DomainFactory factory = getDomainFactory();
		String hql;
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		hql = "select actions.id from RadiotherapyDetails as cd left join cd.associatedTreatmentPlanAction as actions where actions.id = :actID and cd.associatedTreatmentPlanAction is not null)"; 
		markers.add("actID");
		values.add(patAction.getID_PatAction());

		List ops = factory.find(hql, markers, values);
		if (ops != null && ops.size() > 0)
			return true;
		else
			return false;
	}

}
