//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Billy Mahon using IMS Development Environment (version 1.45 build 2418.19363)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.oncology.domain.impl;

import ims.admin.domain.HcpAdmin;
import ims.admin.domain.OrganisationAndLocation;
import ims.admin.domain.impl.HcpAdminImpl;
import ims.admin.domain.impl.OrganisationAndLocationImpl;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.vo.HcpCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PersonName;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.oncology.domain.base.impl.BaseMDTDetailsImpl;
import ims.oncology.domain.objects.CancerCarePlan;
import ims.oncology.domain.objects.CancerMDTMeeting;
import ims.oncology.vo.CancerCarePlanShortVoCollection;
import ims.oncology.vo.CancerMDTMeetingVo;
import ims.oncology.vo.CancerMDTMeetingVoCollection;
import ims.oncology.vo.domain.CancerCarePlanShortVoAssembler;
import ims.oncology.vo.domain.CancerMDTMeetingVoAssembler;


public class MDTDetailsImpl extends BaseMDTDetailsImpl
{
	private static final long serialVersionUID = 1L;

	public CancerMDTMeetingVo saveMDTDetails(CancerMDTMeetingVo voCancerMDTMeeting) throws StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();	
		
		if (!voCancerMDTMeeting.isValidated())
		{
			throw new DomainRuntimeException("This CancerMDTMeeting Record has not been validated");
		}
		
		CancerMDTMeeting domCancerMdt = null;
		CancerCarePlan domCancerCarePlan = null;
		
		if(voCancerMDTMeeting.getID_CancerMDTMeetingIsNotNull())
		{
			//clearing associations
			domCancerMdt = (CancerMDTMeeting) factory.getDomainObject(voCancerMDTMeeting);
			domCancerCarePlan = domCancerMdt.getAssociatedCarePlan();
			if(domCancerCarePlan != null)
				domCancerCarePlan.setMdtMeeting(null);
			domCancerMdt.setAssociatedCarePlan(null);
		}

		domCancerMdt =  CancerMDTMeetingVoAssembler.extractCancerMDTMeeting(factory, voCancerMDTMeeting);		
		if(voCancerMDTMeeting.getAssociatedCarePlanIsNotNull())
		{
			domCancerCarePlan = CancerCarePlanShortVoAssembler.extractCancerCarePlan(factory, voCancerMDTMeeting.getAssociatedCarePlan());
			domCancerCarePlan.setMdtMeeting(domCancerMdt);
			factory.save(domCancerCarePlan);
		}
	
		factory.save(domCancerMdt);
		return CancerMDTMeetingVoAssembler.create(domCancerMdt);
	}


	public CancerMDTMeetingVoCollection listCancerMDTMeeting(EpisodeOfCareRefVo episodeOfCare)
	{
		if (episodeOfCare == null || !episodeOfCare.getID_EpisodeOfCareIsNotNull())
			throw new DomainRuntimeException("Can not search after null or invalid ");
		
		String hql = " from CancerMDTMeeting cMDTM where cMDTM.episodeOfCare.id = " + episodeOfCare.getID_EpisodeOfCare() + "order by cMDTM.date asc "; //wdev-10471
		
		return CancerMDTMeetingVoAssembler.createCancerMDTMeetingVoCollectionFromCancerMDTMeeting(getDomainFactory().find(hql));
	}

	public LocationLiteVoCollection listActiveLocations() 
	{
		OrganisationAndLocation orgLoc = (OrganisationAndLocation)getDomainImpl(OrganisationAndLocationImpl.class);
		return orgLoc.listActiveLocSiteLite();
	}

	public HcpCollection listHcps(String text) 
	{
		if(text == null || text.length() == 0)
			throw new DomainRuntimeException("Filter not supplied");
			
		HcpFilter filter = new HcpFilter();
		filter.setQueryName(new PersonName());
		filter.getQueryName().setSurname(text);
		
		HcpAdmin impl = (HcpAdmin) getDomainImpl(HcpAdminImpl.class);
		return impl.listHCPs(filter);
	}

	public CancerCarePlanShortVoCollection listCancerCarePlanByEpisodeOfCare(EpisodeOfCareRefVo episodeOfCare)
	{
		if (episodeOfCare == null || !episodeOfCare.getID_EpisodeOfCareIsNotNull())
			throw new DomainRuntimeException("Can not search after a null or invalid episodeofCare");
		
		String hql = " from CancerCarePlan ccp where ccp.episodeOfCare.id = " + episodeOfCare.getID_EpisodeOfCare();
		
		return CancerCarePlanShortVoAssembler.createCancerCarePlanShortVoCollectionFromCancerCarePlan(getDomainFactory().find(hql));
	}
}
