//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3915.17670)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.oncology.domain.impl;

import ims.domain.DomainFactory;
import ims.framework.exceptions.CodingRuntimeException;
import ims.oncology.domain.base.impl.BaseInternalReferralComponentImpl;
import ims.oncology.domain.objects.InternalReferral;
import ims.oncology.vo.domain.InternalReferralVoAssembler;

public class InternalReferralNewImpl extends BaseInternalReferralComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.oncology.vo.InternalReferralVo getInternalReferral(ims.oncology.vo.InternalReferralRefVo voIRRef)
	{
		DomainFactory factory = getDomainFactory();
		return InternalReferralVoAssembler.create((InternalReferral)factory.getDomainObject((InternalReferral.class), voIRRef.getID_InternalReferral()));
	}

	public ims.oncology.vo.InternalReferralVo saveInternalReferral(ims.oncology.vo.InternalReferralVo voInternalReferral) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		if (!voInternalReferral.isValidated())
			throw new CodingRuntimeException("InternalReferral has not been validated");
		if(voInternalReferral == null)
			throw new CodingRuntimeException("Cannot save null InternalReferral");
		
		DomainFactory factory = getDomainFactory();
		
		InternalReferral doIR = InternalReferralVoAssembler.extractInternalReferral(factory, voInternalReferral);
		factory.save(doIR);
		return (InternalReferralVoAssembler.create(doIR));		
	}
}
