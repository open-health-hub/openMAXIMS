//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.vo;


public class ClinicalOutcomeConfigSearchVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ClinicalOutcomeConfigSearchVo()
	{
	}
	public ClinicalOutcomeConfigSearchVo(ims.clinicaladmin.vo.beans.ClinicalOutcomeConfigSearchVoBean bean)
	{
		this.category = bean.getCategory() == null ? null : ims.clinical.vo.lookups.ClinicalOutcomeCategory.buildLookup(bean.getCategory());
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.clinicaloutcome = bean.getClinicalOutcome();
		this.code = bean.getCode();
		this.activeonly = bean.getActiveOnly();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinicaladmin.vo.beans.ClinicalOutcomeConfigSearchVoBean bean)
	{
		this.category = bean.getCategory() == null ? null : ims.clinical.vo.lookups.ClinicalOutcomeCategory.buildLookup(bean.getCategory());
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.clinicaloutcome = bean.getClinicalOutcome();
		this.code = bean.getCode();
		this.activeonly = bean.getActiveOnly();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinicaladmin.vo.beans.ClinicalOutcomeConfigSearchVoBean bean = null;
		if(map != null)
			bean = (ims.clinicaladmin.vo.beans.ClinicalOutcomeConfigSearchVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinicaladmin.vo.beans.ClinicalOutcomeConfigSearchVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getCategoryIsNotNull()
	{
		return this.category != null;
	}
	public ims.clinical.vo.lookups.ClinicalOutcomeCategory getCategory()
	{
		return this.category;
	}
	public void setCategory(ims.clinical.vo.lookups.ClinicalOutcomeCategory value)
	{
		this.isValidated = false;
		this.category = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.lookups.Specialty getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getClinicalOutcomeIsNotNull()
	{
		return this.clinicaloutcome != null;
	}
	public String getClinicalOutcome()
	{
		return this.clinicaloutcome;
	}
	public static int getClinicalOutcomeMaxLength()
	{
		return 255;
	}
	public void setClinicalOutcome(String value)
	{
		this.isValidated = false;
		this.clinicaloutcome = value;
	}
	public boolean getCodeIsNotNull()
	{
		return this.code != null;
	}
	public String getCode()
	{
		return this.code;
	}
	public static int getCodeMaxLength()
	{
		return 255;
	}
	public void setCode(String value)
	{
		this.isValidated = false;
		this.code = value;
	}
	public boolean getActiveOnlyIsNotNull()
	{
		return this.activeonly != null;
	}
	public Boolean getActiveOnly()
	{
		return this.activeonly;
	}
	public void setActiveOnly(Boolean value)
	{
		this.isValidated = false;
		this.activeonly = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ClinicalOutcomeConfigSearchVo clone = new ClinicalOutcomeConfigSearchVo();
		
		if(this.category == null)
			clone.category = null;
		else
			clone.category = (ims.clinical.vo.lookups.ClinicalOutcomeCategory)this.category.clone();
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		clone.clinicaloutcome = this.clinicaloutcome;
		clone.code = this.code;
		clone.activeonly = this.activeonly;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ClinicalOutcomeConfigSearchVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ClinicalOutcomeConfigSearchVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		ClinicalOutcomeConfigSearchVo compareObj = (ClinicalOutcomeConfigSearchVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getClinicalOutcome() == null && compareObj.getClinicalOutcome() != null)
				return -1;
			if(this.getClinicalOutcome() != null && compareObj.getClinicalOutcome() == null)
				return 1;
			if(this.getClinicalOutcome() != null && compareObj.getClinicalOutcome() != null)
			{
				if(caseInsensitive)
					retVal = this.getClinicalOutcome().toLowerCase().compareTo(compareObj.getClinicalOutcome().toLowerCase());
				else
					retVal = this.getClinicalOutcome().compareTo(compareObj.getClinicalOutcome());
			}
		}
		if (retVal == 0)
		{
			if(this.getCategory() == null && compareObj.getCategory() != null)
				return -1;
			if(this.getCategory() != null && compareObj.getCategory() == null)
				return 1;
			if(this.getCategory() != null && compareObj.getCategory() != null)
				retVal = this.getCategory().compareTo(compareObj.getCategory());
		}
		if (retVal == 0)
		{
			if(this.getSpecialty() == null && compareObj.getSpecialty() != null)
				return -1;
			if(this.getSpecialty() != null && compareObj.getSpecialty() == null)
				return 1;
			if(this.getSpecialty() != null && compareObj.getSpecialty() != null)
				retVal = this.getSpecialty().compareTo(compareObj.getSpecialty());
		}
		if (retVal == 0)
		{
			if(this.getCode() == null && compareObj.getCode() != null)
				return -1;
			if(this.getCode() != null && compareObj.getCode() == null)
				return 1;
			if(this.getCode() != null && compareObj.getCode() != null)
			{
				if(caseInsensitive)
					retVal = this.getCode().toLowerCase().compareTo(compareObj.getCode().toLowerCase());
				else
					retVal = this.getCode().compareTo(compareObj.getCode());
			}
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.category != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.clinicaloutcome != null)
			count++;
		if(this.code != null)
			count++;
		if(this.activeonly != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.clinical.vo.lookups.ClinicalOutcomeCategory category;
	protected ims.core.vo.lookups.Specialty specialty;
	protected String clinicaloutcome;
	protected String code;
	protected Boolean activeonly;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
