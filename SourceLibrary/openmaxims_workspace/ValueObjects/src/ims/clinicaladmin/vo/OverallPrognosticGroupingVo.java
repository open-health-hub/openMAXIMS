//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinicaladmin.vo;

/**
 * Linked to Oncology.Configuration.PrognosticGrouping business object (ID: 1075100019).
 */
public class OverallPrognosticGroupingVo extends ims.clinicaladmin.vo.OverallPrognosticGroupingLiteVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public OverallPrognosticGroupingVo()
	{
	}
	public OverallPrognosticGroupingVo(Integer id, int version)
	{
		super(id, version);
	}
	public OverallPrognosticGroupingVo(ims.clinicaladmin.vo.beans.OverallPrognosticGroupingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.prognosticgroup = bean.getPrognosticGroup() == null ? null : ims.oncology.vo.lookups.PrognosticGroup.buildLookup(bean.getPrognosticGroup());
		this.isactive = bean.getIsActive();
		this.tgroup = bean.getTGroup() == null ? null : new ims.oncology.configuration.vo.TumourGroupRefVo(new Integer(bean.getTGroup().getId()), bean.getTGroup().getVersion());
		this.tsite = bean.getTSite() == null ? null : new ims.oncology.configuration.vo.TumourSiteRefVo(new Integer(bean.getTSite().getId()), bean.getTSite().getVersion());
		this.tval = bean.getTVal() == null ? null : bean.getTVal().buildVo();
		this.nval = bean.getNVal() == null ? null : bean.getNVal().buildVo();
		this.mval = bean.getMVal() == null ? null : bean.getMVal().buildVo();
		this.histval = bean.getHistVal() == null ? null : bean.getHistVal().buildVo();
		this.serummarkerval = bean.getSerumMarkerVal() == null ? null : bean.getSerumMarkerVal().buildVo();
		this.diffval = bean.getDiffVal() == null ? null : bean.getDiffVal().buildVo();
		this.o45 = bean.getO45();
		this.prognosticlocationval = bean.getPrognosticLocationVal() == null ? null : bean.getPrognosticLocationVal().buildVo();
		this.prognosticriskval = bean.getPrognosticRiskVal() == null ? null : bean.getPrognosticRiskVal().buildVo();
		this.prognosticpsaval = bean.getPrognosticPSAVal() == null ? null : bean.getPrognosticPSAVal().buildVo();
		this.prognosticgleasonval = bean.getPrognosticGleasonVal() == null ? null : bean.getPrognosticGleasonVal().buildVo();
		this.issaved = bean.getIsSaved();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinicaladmin.vo.beans.OverallPrognosticGroupingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.prognosticgroup = bean.getPrognosticGroup() == null ? null : ims.oncology.vo.lookups.PrognosticGroup.buildLookup(bean.getPrognosticGroup());
		this.isactive = bean.getIsActive();
		this.tgroup = bean.getTGroup() == null ? null : new ims.oncology.configuration.vo.TumourGroupRefVo(new Integer(bean.getTGroup().getId()), bean.getTGroup().getVersion());
		this.tsite = bean.getTSite() == null ? null : new ims.oncology.configuration.vo.TumourSiteRefVo(new Integer(bean.getTSite().getId()), bean.getTSite().getVersion());
		this.tval = bean.getTVal() == null ? null : bean.getTVal().buildVo(map);
		this.nval = bean.getNVal() == null ? null : bean.getNVal().buildVo(map);
		this.mval = bean.getMVal() == null ? null : bean.getMVal().buildVo(map);
		this.histval = bean.getHistVal() == null ? null : bean.getHistVal().buildVo(map);
		this.serummarkerval = bean.getSerumMarkerVal() == null ? null : bean.getSerumMarkerVal().buildVo(map);
		this.diffval = bean.getDiffVal() == null ? null : bean.getDiffVal().buildVo(map);
		this.o45 = bean.getO45();
		this.prognosticlocationval = bean.getPrognosticLocationVal() == null ? null : bean.getPrognosticLocationVal().buildVo(map);
		this.prognosticriskval = bean.getPrognosticRiskVal() == null ? null : bean.getPrognosticRiskVal().buildVo(map);
		this.prognosticpsaval = bean.getPrognosticPSAVal() == null ? null : bean.getPrognosticPSAVal().buildVo(map);
		this.prognosticgleasonval = bean.getPrognosticGleasonVal() == null ? null : bean.getPrognosticGleasonVal().buildVo(map);
		this.issaved = bean.getIsSaved();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinicaladmin.vo.beans.OverallPrognosticGroupingVoBean bean = null;
		if(map != null)
			bean = (ims.clinicaladmin.vo.beans.OverallPrognosticGroupingVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinicaladmin.vo.beans.OverallPrognosticGroupingVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("TGROUP"))
			return getTGroup();
		if(fieldName.equals("TSITE"))
			return getTSite();
		if(fieldName.equals("TVAL"))
			return getTVal();
		if(fieldName.equals("NVAL"))
			return getNVal();
		if(fieldName.equals("MVAL"))
			return getMVal();
		if(fieldName.equals("HISTVAL"))
			return getHistVal();
		if(fieldName.equals("SERUMMARKERVAL"))
			return getSerumMarkerVal();
		if(fieldName.equals("DIFFVAL"))
			return getDiffVal();
		if(fieldName.equals("O45"))
			return getO45();
		if(fieldName.equals("PROGNOSTICLOCATIONVAL"))
			return getPrognosticLocationVal();
		if(fieldName.equals("PROGNOSTICRISKVAL"))
			return getPrognosticRiskVal();
		if(fieldName.equals("PROGNOSTICPSAVAL"))
			return getPrognosticPSAVal();
		if(fieldName.equals("PROGNOSTICGLEASONVAL"))
			return getPrognosticGleasonVal();
		if(fieldName.equals("ISSAVED"))
			return getIsSaved();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getTGroupIsNotNull()
	{
		return this.tgroup != null;
	}
	public ims.oncology.configuration.vo.TumourGroupRefVo getTGroup()
	{
		return this.tgroup;
	}
	public void setTGroup(ims.oncology.configuration.vo.TumourGroupRefVo value)
	{
		this.isValidated = false;
		this.tgroup = value;
	}
	public boolean getTSiteIsNotNull()
	{
		return this.tsite != null;
	}
	public ims.oncology.configuration.vo.TumourSiteRefVo getTSite()
	{
		return this.tsite;
	}
	public void setTSite(ims.oncology.configuration.vo.TumourSiteRefVo value)
	{
		this.isValidated = false;
		this.tsite = value;
	}
	public boolean getTValIsNotNull()
	{
		return this.tval != null;
	}
	public ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo getTVal()
	{
		return this.tval;
	}
	public void setTVal(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
	{
		this.isValidated = false;
		this.tval = value;
	}
	public boolean getNValIsNotNull()
	{
		return this.nval != null;
	}
	public ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo getNVal()
	{
		return this.nval;
	}
	public void setNVal(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
	{
		this.isValidated = false;
		this.nval = value;
	}
	public boolean getMValIsNotNull()
	{
		return this.mval != null;
	}
	public ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo getMVal()
	{
		return this.mval;
	}
	public void setMVal(ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo value)
	{
		this.isValidated = false;
		this.mval = value;
	}
	public boolean getHistValIsNotNull()
	{
		return this.histval != null;
	}
	public ims.clinicaladmin.vo.TumourGroupHistologyVo getHistVal()
	{
		return this.histval;
	}
	public void setHistVal(ims.clinicaladmin.vo.TumourGroupHistologyVo value)
	{
		this.isValidated = false;
		this.histval = value;
	}
	public boolean getSerumMarkerValIsNotNull()
	{
		return this.serummarkerval != null;
	}
	public ims.clinicaladmin.vo.TumourSerumMarkersLiteVo getSerumMarkerVal()
	{
		return this.serummarkerval;
	}
	public void setSerumMarkerVal(ims.clinicaladmin.vo.TumourSerumMarkersLiteVo value)
	{
		this.isValidated = false;
		this.serummarkerval = value;
	}
	public boolean getDiffValIsNotNull()
	{
		return this.diffval != null;
	}
	public ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo getDiffVal()
	{
		return this.diffval;
	}
	public void setDiffVal(ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo value)
	{
		this.isValidated = false;
		this.diffval = value;
	}
	public boolean getO45IsNotNull()
	{
		return this.o45 != null;
	}
	public String getO45()
	{
		return this.o45;
	}
	public static int getO45MaxLength()
	{
		return 1;
	}
	public void setO45(String value)
	{
		this.isValidated = false;
		this.o45 = value;
	}
	public boolean getPrognosticLocationValIsNotNull()
	{
		return this.prognosticlocationval != null;
	}
	public ims.oncology.vo.PrognosticLocationConfigVo getPrognosticLocationVal()
	{
		return this.prognosticlocationval;
	}
	public void setPrognosticLocationVal(ims.oncology.vo.PrognosticLocationConfigVo value)
	{
		this.isValidated = false;
		this.prognosticlocationval = value;
	}
	public boolean getPrognosticRiskValIsNotNull()
	{
		return this.prognosticriskval != null;
	}
	public ims.clinicaladmin.vo.PrognosticRiskConfigVo getPrognosticRiskVal()
	{
		return this.prognosticriskval;
	}
	public void setPrognosticRiskVal(ims.clinicaladmin.vo.PrognosticRiskConfigVo value)
	{
		this.isValidated = false;
		this.prognosticriskval = value;
	}
	public boolean getPrognosticPSAValIsNotNull()
	{
		return this.prognosticpsaval != null;
	}
	public ims.clinicaladmin.vo.PSAConfigVo getPrognosticPSAVal()
	{
		return this.prognosticpsaval;
	}
	public void setPrognosticPSAVal(ims.clinicaladmin.vo.PSAConfigVo value)
	{
		this.isValidated = false;
		this.prognosticpsaval = value;
	}
	public boolean getPrognosticGleasonValIsNotNull()
	{
		return this.prognosticgleasonval != null;
	}
	public ims.clinicaladmin.vo.GleasonConfigLiteVo getPrognosticGleasonVal()
	{
		return this.prognosticgleasonval;
	}
	public void setPrognosticGleasonVal(ims.clinicaladmin.vo.GleasonConfigLiteVo value)
	{
		this.isValidated = false;
		this.prognosticgleasonval = value;
	}
	public boolean getIsSavedIsNotNull()
	{
		return this.issaved != null;
	}
	public Boolean getIsSaved()
	{
		return this.issaved;
	}
	public void setIsSaved(Boolean value)
	{
		this.isValidated = false;
		this.issaved = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.prognosticgroup == null)
			listOfErrors.add("PrognosticGroup is mandatory");
		if(this.o45 != null)
			if(this.o45.length() > 1)
				listOfErrors.add("The length of the field [o45] in the value object [ims.clinicaladmin.vo.OverallPrognosticGroupingVo] is too big. It should be less or equal to 1");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		OverallPrognosticGroupingVo clone = new OverallPrognosticGroupingVo(this.id, this.version);
		
		if(this.prognosticgroup == null)
			clone.prognosticgroup = null;
		else
			clone.prognosticgroup = (ims.oncology.vo.lookups.PrognosticGroup)this.prognosticgroup.clone();
		clone.isactive = this.isactive;
		clone.tgroup = this.tgroup;
		clone.tsite = this.tsite;
		if(this.tval == null)
			clone.tval = null;
		else
			clone.tval = (ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo)this.tval.clone();
		if(this.nval == null)
			clone.nval = null;
		else
			clone.nval = (ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo)this.nval.clone();
		if(this.mval == null)
			clone.mval = null;
		else
			clone.mval = (ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo)this.mval.clone();
		if(this.histval == null)
			clone.histval = null;
		else
			clone.histval = (ims.clinicaladmin.vo.TumourGroupHistologyVo)this.histval.clone();
		if(this.serummarkerval == null)
			clone.serummarkerval = null;
		else
			clone.serummarkerval = (ims.clinicaladmin.vo.TumourSerumMarkersLiteVo)this.serummarkerval.clone();
		if(this.diffval == null)
			clone.diffval = null;
		else
			clone.diffval = (ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo)this.diffval.clone();
		clone.o45 = this.o45;
		if(this.prognosticlocationval == null)
			clone.prognosticlocationval = null;
		else
			clone.prognosticlocationval = (ims.oncology.vo.PrognosticLocationConfigVo)this.prognosticlocationval.clone();
		if(this.prognosticriskval == null)
			clone.prognosticriskval = null;
		else
			clone.prognosticriskval = (ims.clinicaladmin.vo.PrognosticRiskConfigVo)this.prognosticriskval.clone();
		if(this.prognosticpsaval == null)
			clone.prognosticpsaval = null;
		else
			clone.prognosticpsaval = (ims.clinicaladmin.vo.PSAConfigVo)this.prognosticpsaval.clone();
		if(this.prognosticgleasonval == null)
			clone.prognosticgleasonval = null;
		else
			clone.prognosticgleasonval = (ims.clinicaladmin.vo.GleasonConfigLiteVo)this.prognosticgleasonval.clone();
		clone.issaved = this.issaved;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(OverallPrognosticGroupingVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A OverallPrognosticGroupingVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((OverallPrognosticGroupingVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((OverallPrognosticGroupingVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.tgroup != null)
			count++;
		if(this.tsite != null)
			count++;
		if(this.tval != null)
			count++;
		if(this.nval != null)
			count++;
		if(this.mval != null)
			count++;
		if(this.histval != null)
			count++;
		if(this.serummarkerval != null)
			count++;
		if(this.diffval != null)
			count++;
		if(this.o45 != null)
			count++;
		if(this.prognosticlocationval != null)
			count++;
		if(this.prognosticriskval != null)
			count++;
		if(this.prognosticpsaval != null)
			count++;
		if(this.prognosticgleasonval != null)
			count++;
		if(this.issaved != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 14;
	}
	protected ims.oncology.configuration.vo.TumourGroupRefVo tgroup;
	protected ims.oncology.configuration.vo.TumourSiteRefVo tsite;
	protected ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo tval;
	protected ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo nval;
	protected ims.clinicaladmin.vo.TumourGroupSiteTNMValueListVo mval;
	protected ims.clinicaladmin.vo.TumourGroupHistologyVo histval;
	protected ims.clinicaladmin.vo.TumourSerumMarkersLiteVo serummarkerval;
	protected ims.clinicaladmin.vo.TumourGroupHistopathologyGradeVo diffval;
	protected String o45;
	protected ims.oncology.vo.PrognosticLocationConfigVo prognosticlocationval;
	protected ims.clinicaladmin.vo.PrognosticRiskConfigVo prognosticriskval;
	protected ims.clinicaladmin.vo.PSAConfigVo prognosticpsaval;
	protected ims.clinicaladmin.vo.GleasonConfigLiteVo prognosticgleasonval;
	protected Boolean issaved;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
