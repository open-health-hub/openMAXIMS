//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocs_if.vo;

/**
 * Linked to OCRR.OrderingResults.OrderSpecimen business object (ID: 1070100010).
 */
public class IfOrdSpecLiteVo extends ims.ocrr.orderingresults.vo.OrderSpecimenRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public IfOrdSpecLiteVo()
	{
	}
	public IfOrdSpecLiteVo(Integer id, int version)
	{
		super(id, version);
	}
	public IfOrdSpecLiteVo(ims.ocs_if.vo.beans.IfOrdSpecLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.colldatetimeplacer = bean.getCollDateTimePlacer() == null ? null : bean.getCollDateTimePlacer().buildDateTime();
		this.colldatetimefiller = bean.getCollDateTimeFiller() == null ? null : bean.getCollDateTimeFiller().buildDateTime();
		this.coltimefillersupplied = bean.getColTimeFillerSupplied();
		this.collenddatetimeplacer = bean.getCollEndDateTimePlacer() == null ? null : bean.getCollEndDateTimePlacer().buildDateTime();
		this.collenddatetimefiller = bean.getCollEndDateTimeFiller() == null ? null : bean.getCollEndDateTimeFiller().buildDateTime();
		this.sitetext = bean.getSiteText();
		this.specimensource = bean.getSpecimenSource() == null ? null : ims.ocrr.vo.lookups.SpecimenType.buildLookup(bean.getSpecimenSource());
		this.discipline = bean.getDiscipline() == null ? null : bean.getDiscipline().buildVo();
		this.collectingmos = bean.getCollectingMos() == null ? null : bean.getCollectingMos().buildVo();
		this.ispatientcollect = bean.getIsPatientCollect();
		this.isawaitingcollection = bean.getIsAwaitingCollection();
		this.receiveddatetime = bean.getReceivedDateTime() == null ? null : bean.getReceivedDateTime().buildDateTime();
		this.receivedtimesupplied = bean.getReceivedTimeSupplied();
		this.fillerordnum = bean.getFillerOrdNum();
		this.collectorcomment = bean.getCollectorComment();
		this.sitecd = bean.getSiteCd() == null ? null : ims.ocrr.vo.lookups.SpecimenSite.buildLookup(bean.getSiteCd());
		this.wasprocessed = bean.getWasProcessed();
		this.placerordnum = bean.getPlacerOrdNum();
		this.dftspecimenresulted = bean.getDftSpecimenResulted() == null ? null : bean.getDftSpecimenResulted().buildDateTime();
		this.dftspecimenresultedtimesupplied = bean.getDftSpecimenResultedTimeSupplied();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.ocs_if.vo.beans.IfOrdSpecLiteVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.colldatetimeplacer = bean.getCollDateTimePlacer() == null ? null : bean.getCollDateTimePlacer().buildDateTime();
		this.colldatetimefiller = bean.getCollDateTimeFiller() == null ? null : bean.getCollDateTimeFiller().buildDateTime();
		this.coltimefillersupplied = bean.getColTimeFillerSupplied();
		this.collenddatetimeplacer = bean.getCollEndDateTimePlacer() == null ? null : bean.getCollEndDateTimePlacer().buildDateTime();
		this.collenddatetimefiller = bean.getCollEndDateTimeFiller() == null ? null : bean.getCollEndDateTimeFiller().buildDateTime();
		this.sitetext = bean.getSiteText();
		this.specimensource = bean.getSpecimenSource() == null ? null : ims.ocrr.vo.lookups.SpecimenType.buildLookup(bean.getSpecimenSource());
		this.discipline = bean.getDiscipline() == null ? null : bean.getDiscipline().buildVo(map);
		this.collectingmos = bean.getCollectingMos() == null ? null : bean.getCollectingMos().buildVo(map);
		this.ispatientcollect = bean.getIsPatientCollect();
		this.isawaitingcollection = bean.getIsAwaitingCollection();
		this.receiveddatetime = bean.getReceivedDateTime() == null ? null : bean.getReceivedDateTime().buildDateTime();
		this.receivedtimesupplied = bean.getReceivedTimeSupplied();
		this.fillerordnum = bean.getFillerOrdNum();
		this.collectorcomment = bean.getCollectorComment();
		this.sitecd = bean.getSiteCd() == null ? null : ims.ocrr.vo.lookups.SpecimenSite.buildLookup(bean.getSiteCd());
		this.wasprocessed = bean.getWasProcessed();
		this.placerordnum = bean.getPlacerOrdNum();
		this.dftspecimenresulted = bean.getDftSpecimenResulted() == null ? null : bean.getDftSpecimenResulted().buildDateTime();
		this.dftspecimenresultedtimesupplied = bean.getDftSpecimenResultedTimeSupplied();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.ocs_if.vo.beans.IfOrdSpecLiteVoBean bean = null;
		if(map != null)
			bean = (ims.ocs_if.vo.beans.IfOrdSpecLiteVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.ocs_if.vo.beans.IfOrdSpecLiteVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("COLLDATETIMEPLACER"))
			return getCollDateTimePlacer();
		if(fieldName.equals("COLLDATETIMEFILLER"))
			return getCollDateTimeFiller();
		if(fieldName.equals("COLTIMEFILLERSUPPLIED"))
			return getColTimeFillerSupplied();
		if(fieldName.equals("COLLENDDATETIMEPLACER"))
			return getCollEndDateTimePlacer();
		if(fieldName.equals("COLLENDDATETIMEFILLER"))
			return getCollEndDateTimeFiller();
		if(fieldName.equals("SITETEXT"))
			return getSiteText();
		if(fieldName.equals("SPECIMENSOURCE"))
			return getSpecimenSource();
		if(fieldName.equals("DISCIPLINE"))
			return getDiscipline();
		if(fieldName.equals("COLLECTINGMOS"))
			return getCollectingMos();
		if(fieldName.equals("ISPATIENTCOLLECT"))
			return getIsPatientCollect();
		if(fieldName.equals("ISAWAITINGCOLLECTION"))
			return getIsAwaitingCollection();
		if(fieldName.equals("RECEIVEDDATETIME"))
			return getReceivedDateTime();
		if(fieldName.equals("RECEIVEDTIMESUPPLIED"))
			return getReceivedTimeSupplied();
		if(fieldName.equals("FILLERORDNUM"))
			return getFillerOrdNum();
		if(fieldName.equals("COLLECTORCOMMENT"))
			return getCollectorComment();
		if(fieldName.equals("SITECD"))
			return getSiteCd();
		if(fieldName.equals("WASPROCESSED"))
			return getWasProcessed();
		if(fieldName.equals("PLACERORDNUM"))
			return getPlacerOrdNum();
		if(fieldName.equals("DFTSPECIMENRESULTED"))
			return getDftSpecimenResulted();
		if(fieldName.equals("DFTSPECIMENRESULTEDTIMESUPPLIED"))
			return getDftSpecimenResultedTimeSupplied();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getCollDateTimePlacerIsNotNull()
	{
		return this.colldatetimeplacer != null;
	}
	public ims.framework.utils.DateTime getCollDateTimePlacer()
	{
		return this.colldatetimeplacer;
	}
	public void setCollDateTimePlacer(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.colldatetimeplacer = value;
	}
	public boolean getCollDateTimeFillerIsNotNull()
	{
		return this.colldatetimefiller != null;
	}
	public ims.framework.utils.DateTime getCollDateTimeFiller()
	{
		return this.colldatetimefiller;
	}
	public void setCollDateTimeFiller(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.colldatetimefiller = value;
	}
	public boolean getColTimeFillerSuppliedIsNotNull()
	{
		return this.coltimefillersupplied != null;
	}
	public Boolean getColTimeFillerSupplied()
	{
		return this.coltimefillersupplied;
	}
	public void setColTimeFillerSupplied(Boolean value)
	{
		this.isValidated = false;
		this.coltimefillersupplied = value;
	}
	public boolean getCollEndDateTimePlacerIsNotNull()
	{
		return this.collenddatetimeplacer != null;
	}
	public ims.framework.utils.DateTime getCollEndDateTimePlacer()
	{
		return this.collenddatetimeplacer;
	}
	public void setCollEndDateTimePlacer(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.collenddatetimeplacer = value;
	}
	public boolean getCollEndDateTimeFillerIsNotNull()
	{
		return this.collenddatetimefiller != null;
	}
	public ims.framework.utils.DateTime getCollEndDateTimeFiller()
	{
		return this.collenddatetimefiller;
	}
	public void setCollEndDateTimeFiller(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.collenddatetimefiller = value;
	}
	public boolean getSiteTextIsNotNull()
	{
		return this.sitetext != null;
	}
	public String getSiteText()
	{
		return this.sitetext;
	}
	public static int getSiteTextMaxLength()
	{
		return 255;
	}
	public void setSiteText(String value)
	{
		this.isValidated = false;
		this.sitetext = value;
	}
	public boolean getSpecimenSourceIsNotNull()
	{
		return this.specimensource != null;
	}
	public ims.ocrr.vo.lookups.SpecimenType getSpecimenSource()
	{
		return this.specimensource;
	}
	public void setSpecimenSource(ims.ocrr.vo.lookups.SpecimenType value)
	{
		this.isValidated = false;
		this.specimensource = value;
	}
	public boolean getDisciplineIsNotNull()
	{
		return this.discipline != null;
	}
	public ims.core.vo.ServiceLiteVo getDiscipline()
	{
		return this.discipline;
	}
	public void setDiscipline(ims.core.vo.ServiceLiteVo value)
	{
		this.isValidated = false;
		this.discipline = value;
	}
	public boolean getCollectingMosIsNotNull()
	{
		return this.collectingmos != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getCollectingMos()
	{
		return this.collectingmos;
	}
	public void setCollectingMos(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.collectingmos = value;
	}
	public boolean getIsPatientCollectIsNotNull()
	{
		return this.ispatientcollect != null;
	}
	public Boolean getIsPatientCollect()
	{
		return this.ispatientcollect;
	}
	public void setIsPatientCollect(Boolean value)
	{
		this.isValidated = false;
		this.ispatientcollect = value;
	}
	public boolean getIsAwaitingCollectionIsNotNull()
	{
		return this.isawaitingcollection != null;
	}
	public Boolean getIsAwaitingCollection()
	{
		return this.isawaitingcollection;
	}
	public void setIsAwaitingCollection(Boolean value)
	{
		this.isValidated = false;
		this.isawaitingcollection = value;
	}
	public boolean getReceivedDateTimeIsNotNull()
	{
		return this.receiveddatetime != null;
	}
	public ims.framework.utils.DateTime getReceivedDateTime()
	{
		return this.receiveddatetime;
	}
	public void setReceivedDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.receiveddatetime = value;
	}
	public boolean getReceivedTimeSuppliedIsNotNull()
	{
		return this.receivedtimesupplied != null;
	}
	public Boolean getReceivedTimeSupplied()
	{
		return this.receivedtimesupplied;
	}
	public void setReceivedTimeSupplied(Boolean value)
	{
		this.isValidated = false;
		this.receivedtimesupplied = value;
	}
	public boolean getFillerOrdNumIsNotNull()
	{
		return this.fillerordnum != null;
	}
	public String getFillerOrdNum()
	{
		return this.fillerordnum;
	}
	public static int getFillerOrdNumMaxLength()
	{
		return 20;
	}
	public void setFillerOrdNum(String value)
	{
		this.isValidated = false;
		this.fillerordnum = value;
	}
	public boolean getCollectorCommentIsNotNull()
	{
		return this.collectorcomment != null;
	}
	public String getCollectorComment()
	{
		return this.collectorcomment;
	}
	public static int getCollectorCommentMaxLength()
	{
		return 500;
	}
	public void setCollectorComment(String value)
	{
		this.isValidated = false;
		this.collectorcomment = value;
	}
	public boolean getSiteCdIsNotNull()
	{
		return this.sitecd != null;
	}
	public ims.ocrr.vo.lookups.SpecimenSite getSiteCd()
	{
		return this.sitecd;
	}
	public void setSiteCd(ims.ocrr.vo.lookups.SpecimenSite value)
	{
		this.isValidated = false;
		this.sitecd = value;
	}
	public boolean getWasProcessedIsNotNull()
	{
		return this.wasprocessed != null;
	}
	public Boolean getWasProcessed()
	{
		return this.wasprocessed;
	}
	public void setWasProcessed(Boolean value)
	{
		this.isValidated = false;
		this.wasprocessed = value;
	}
	public boolean getPlacerOrdNumIsNotNull()
	{
		return this.placerordnum != null;
	}
	public String getPlacerOrdNum()
	{
		return this.placerordnum;
	}
	public static int getPlacerOrdNumMaxLength()
	{
		return 20;
	}
	public void setPlacerOrdNum(String value)
	{
		this.isValidated = false;
		this.placerordnum = value;
	}
	public boolean getDftSpecimenResultedIsNotNull()
	{
		return this.dftspecimenresulted != null;
	}
	public ims.framework.utils.DateTime getDftSpecimenResulted()
	{
		return this.dftspecimenresulted;
	}
	public void setDftSpecimenResulted(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.dftspecimenresulted = value;
	}
	public boolean getDftSpecimenResultedTimeSuppliedIsNotNull()
	{
		return this.dftspecimenresultedtimesupplied != null;
	}
	public Boolean getDftSpecimenResultedTimeSupplied()
	{
		return this.dftspecimenresultedtimesupplied;
	}
	public void setDftSpecimenResultedTimeSupplied(Boolean value)
	{
		this.isValidated = false;
		this.dftspecimenresultedtimesupplied = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.discipline != null)
		{
			if(!this.discipline.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.collectingmos != null)
		{
			if(!this.collectingmos.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.sitetext != null)
			if(this.sitetext.length() > 255)
				listOfErrors.add("The length of the field [sitetext] in the value object [ims.ocs_if.vo.IfOrdSpecLiteVo] is too big. It should be less or equal to 255");
		if(this.specimensource == null)
			listOfErrors.add("SpecimenSource is mandatory");
		if(this.discipline == null)
			listOfErrors.add("Discipline is mandatory");
		if(this.discipline != null)
		{
			String[] listOfOtherErrors = this.discipline.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.collectingmos != null)
		{
			String[] listOfOtherErrors = this.collectingmos.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.ispatientcollect == null)
			listOfErrors.add("IsPatientCollect is mandatory");
		if(this.isawaitingcollection == null)
			listOfErrors.add("IsAwaitingCollection is mandatory");
		if(this.fillerordnum != null)
			if(this.fillerordnum.length() > 20)
				listOfErrors.add("The length of the field [fillerordnum] in the value object [ims.ocs_if.vo.IfOrdSpecLiteVo] is too big. It should be less or equal to 20");
		if(this.collectorcomment != null)
			if(this.collectorcomment.length() > 500)
				listOfErrors.add("The length of the field [collectorcomment] in the value object [ims.ocs_if.vo.IfOrdSpecLiteVo] is too big. It should be less or equal to 500");
		if(this.placerordnum == null || this.placerordnum.length() == 0)
			listOfErrors.add("PlacerOrdNum is mandatory");
		else if(this.placerordnum.length() > 20)
			listOfErrors.add("The length of the field [placerordnum] in the value object [ims.ocs_if.vo.IfOrdSpecLiteVo] is too big. It should be less or equal to 20");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		IfOrdSpecLiteVo clone = new IfOrdSpecLiteVo(this.id, this.version);
		
		if(this.colldatetimeplacer == null)
			clone.colldatetimeplacer = null;
		else
			clone.colldatetimeplacer = (ims.framework.utils.DateTime)this.colldatetimeplacer.clone();
		if(this.colldatetimefiller == null)
			clone.colldatetimefiller = null;
		else
			clone.colldatetimefiller = (ims.framework.utils.DateTime)this.colldatetimefiller.clone();
		clone.coltimefillersupplied = this.coltimefillersupplied;
		if(this.collenddatetimeplacer == null)
			clone.collenddatetimeplacer = null;
		else
			clone.collenddatetimeplacer = (ims.framework.utils.DateTime)this.collenddatetimeplacer.clone();
		if(this.collenddatetimefiller == null)
			clone.collenddatetimefiller = null;
		else
			clone.collenddatetimefiller = (ims.framework.utils.DateTime)this.collenddatetimefiller.clone();
		clone.sitetext = this.sitetext;
		if(this.specimensource == null)
			clone.specimensource = null;
		else
			clone.specimensource = (ims.ocrr.vo.lookups.SpecimenType)this.specimensource.clone();
		if(this.discipline == null)
			clone.discipline = null;
		else
			clone.discipline = (ims.core.vo.ServiceLiteVo)this.discipline.clone();
		if(this.collectingmos == null)
			clone.collectingmos = null;
		else
			clone.collectingmos = (ims.core.vo.MemberOfStaffLiteVo)this.collectingmos.clone();
		clone.ispatientcollect = this.ispatientcollect;
		clone.isawaitingcollection = this.isawaitingcollection;
		if(this.receiveddatetime == null)
			clone.receiveddatetime = null;
		else
			clone.receiveddatetime = (ims.framework.utils.DateTime)this.receiveddatetime.clone();
		clone.receivedtimesupplied = this.receivedtimesupplied;
		clone.fillerordnum = this.fillerordnum;
		clone.collectorcomment = this.collectorcomment;
		if(this.sitecd == null)
			clone.sitecd = null;
		else
			clone.sitecd = (ims.ocrr.vo.lookups.SpecimenSite)this.sitecd.clone();
		clone.wasprocessed = this.wasprocessed;
		clone.placerordnum = this.placerordnum;
		if(this.dftspecimenresulted == null)
			clone.dftspecimenresulted = null;
		else
			clone.dftspecimenresulted = (ims.framework.utils.DateTime)this.dftspecimenresulted.clone();
		clone.dftspecimenresultedtimesupplied = this.dftspecimenresultedtimesupplied;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(IfOrdSpecLiteVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A IfOrdSpecLiteVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((IfOrdSpecLiteVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((IfOrdSpecLiteVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.colldatetimeplacer != null)
			count++;
		if(this.colldatetimefiller != null)
			count++;
		if(this.coltimefillersupplied != null)
			count++;
		if(this.collenddatetimeplacer != null)
			count++;
		if(this.collenddatetimefiller != null)
			count++;
		if(this.sitetext != null)
			count++;
		if(this.specimensource != null)
			count++;
		if(this.discipline != null)
			count++;
		if(this.collectingmos != null)
			count++;
		if(this.ispatientcollect != null)
			count++;
		if(this.isawaitingcollection != null)
			count++;
		if(this.receiveddatetime != null)
			count++;
		if(this.receivedtimesupplied != null)
			count++;
		if(this.fillerordnum != null)
			count++;
		if(this.collectorcomment != null)
			count++;
		if(this.sitecd != null)
			count++;
		if(this.wasprocessed != null)
			count++;
		if(this.placerordnum != null)
			count++;
		if(this.dftspecimenresulted != null)
			count++;
		if(this.dftspecimenresultedtimesupplied != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 20;
	}
	protected ims.framework.utils.DateTime colldatetimeplacer;
	protected ims.framework.utils.DateTime colldatetimefiller;
	protected Boolean coltimefillersupplied;
	protected ims.framework.utils.DateTime collenddatetimeplacer;
	protected ims.framework.utils.DateTime collenddatetimefiller;
	protected String sitetext;
	protected ims.ocrr.vo.lookups.SpecimenType specimensource;
	protected ims.core.vo.ServiceLiteVo discipline;
	protected ims.core.vo.MemberOfStaffLiteVo collectingmos;
	protected Boolean ispatientcollect;
	protected Boolean isawaitingcollection;
	protected ims.framework.utils.DateTime receiveddatetime;
	protected Boolean receivedtimesupplied;
	protected String fillerordnum;
	protected String collectorcomment;
	protected ims.ocrr.vo.lookups.SpecimenSite sitecd;
	protected Boolean wasprocessed;
	protected String placerordnum;
	protected ims.framework.utils.DateTime dftspecimenresulted;
	protected Boolean dftspecimenresultedtimesupplied;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
