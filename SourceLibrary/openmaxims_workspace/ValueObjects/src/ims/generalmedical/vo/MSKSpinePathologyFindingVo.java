//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.generalmedical.vo;

/**
 * Linked to medical.MskSpinePath business object (ID: 1023100008).
 */
public class MSKSpinePathologyFindingVo extends ims.medical.vo.MskSpinePathRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public MSKSpinePathologyFindingVo()
	{
	}
	public MSKSpinePathologyFindingVo(Integer id, int version)
	{
		super(id, version);
	}
	public MSKSpinePathologyFindingVo(ims.generalmedical.vo.beans.MSKSpinePathologyFindingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.modeofinjury = bean.getModeOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury.buildLookup(bean.getModeOfInjury());
		this.typeofinjury = bean.getTypeOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury.buildLookup(bean.getTypeOfInjury());
		this.mechanismofinjury = bean.getMechanismOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury.buildLookup(bean.getMechanismOfInjury());
		this.isprimarypathology = bean.getIsPrimaryPathology();
		this.isproblem = bean.getIsProblem();
		this.pathsite = bean.getPathSite() == null ? null : bean.getPathSite().buildVo();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo();
		this.isactive = bean.getIsActive();
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo();
		this.authoringhcp = bean.getAuthoringHCP() == null ? null : bean.getAuthoringHCP().buildVo();
		this.authoringdatetime = bean.getAuthoringDateTime() == null ? null : bean.getAuthoringDateTime().buildDateTime();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.generalmedical.vo.beans.MSKSpinePathologyFindingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.modeofinjury = bean.getModeOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury.buildLookup(bean.getModeOfInjury());
		this.typeofinjury = bean.getTypeOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury.buildLookup(bean.getTypeOfInjury());
		this.mechanismofinjury = bean.getMechanismOfInjury() == null ? null : ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury.buildLookup(bean.getMechanismOfInjury());
		this.isprimarypathology = bean.getIsPrimaryPathology();
		this.isproblem = bean.getIsProblem();
		this.pathsite = bean.getPathSite() == null ? null : bean.getPathSite().buildVo(map);
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo(map);
		this.isactive = bean.getIsActive();
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo(map);
		this.authoringhcp = bean.getAuthoringHCP() == null ? null : bean.getAuthoringHCP().buildVo(map);
		this.authoringdatetime = bean.getAuthoringDateTime() == null ? null : bean.getAuthoringDateTime().buildDateTime();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.generalmedical.vo.beans.MSKSpinePathologyFindingVoBean bean = null;
		if(map != null)
			bean = (ims.generalmedical.vo.beans.MSKSpinePathologyFindingVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.generalmedical.vo.beans.MSKSpinePathologyFindingVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("MODEOFINJURY"))
			return getModeOfInjury();
		if(fieldName.equals("TYPEOFINJURY"))
			return getTypeOfInjury();
		if(fieldName.equals("MECHANISMOFINJURY"))
			return getMechanismOfInjury();
		if(fieldName.equals("ISPRIMARYPATHOLOGY"))
			return getIsPrimaryPathology();
		if(fieldName.equals("ISPROBLEM"))
			return getIsProblem();
		if(fieldName.equals("PATHSITE"))
			return getPathSite();
		if(fieldName.equals("CLINICALCONTACT"))
			return getClinicalContact();
		if(fieldName.equals("ISACTIVE"))
			return getIsActive();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("AUTHORINGHCP"))
			return getAuthoringHCP();
		if(fieldName.equals("AUTHORINGDATETIME"))
			return getAuthoringDateTime();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getModeOfInjuryIsNotNull()
	{
		return this.modeofinjury != null;
	}
	public ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury getModeOfInjury()
	{
		return this.modeofinjury;
	}
	public void setModeOfInjury(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
	{
		this.isValidated = false;
		this.modeofinjury = value;
	}
	public boolean getTypeOfInjuryIsNotNull()
	{
		return this.typeofinjury != null;
	}
	public ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury getTypeOfInjury()
	{
		return this.typeofinjury;
	}
	public void setTypeOfInjury(ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury value)
	{
		this.isValidated = false;
		this.typeofinjury = value;
	}
	public boolean getMechanismOfInjuryIsNotNull()
	{
		return this.mechanismofinjury != null;
	}
	public ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury getMechanismOfInjury()
	{
		return this.mechanismofinjury;
	}
	public void setMechanismOfInjury(ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury value)
	{
		this.isValidated = false;
		this.mechanismofinjury = value;
	}
	public boolean getIsPrimaryPathologyIsNotNull()
	{
		return this.isprimarypathology != null;
	}
	public Boolean getIsPrimaryPathology()
	{
		return this.isprimarypathology;
	}
	public void setIsPrimaryPathology(Boolean value)
	{
		this.isValidated = false;
		this.isprimarypathology = value;
	}
	public boolean getIsProblemIsNotNull()
	{
		return this.isproblem != null;
	}
	public Boolean getIsProblem()
	{
		return this.isproblem;
	}
	public void setIsProblem(Boolean value)
	{
		this.isValidated = false;
		this.isproblem = value;
	}
	public boolean getPathSiteIsNotNull()
	{
		return this.pathsite != null;
	}
	public ims.core.vo.VertebrallevelVo getPathSite()
	{
		return this.pathsite;
	}
	public void setPathSite(ims.core.vo.VertebrallevelVo value)
	{
		this.isValidated = false;
		this.pathsite = value;
	}
	public boolean getClinicalContactIsNotNull()
	{
		return this.clinicalcontact != null;
	}
	public ims.core.vo.ClinicalContactShortVo getClinicalContact()
	{
		return this.clinicalcontact;
	}
	public void setClinicalContact(ims.core.vo.ClinicalContactShortVo value)
	{
		this.isValidated = false;
		this.clinicalcontact = value;
	}
	public boolean getIsActiveIsNotNull()
	{
		return this.isactive != null;
	}
	public Boolean getIsActive()
	{
		return this.isactive;
	}
	public void setIsActive(Boolean value)
	{
		this.isValidated = false;
		this.isactive = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.vo.CareContextShortVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.vo.CareContextShortVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getAuthoringHCPIsNotNull()
	{
		return this.authoringhcp != null;
	}
	public ims.core.vo.HcpLiteVo getAuthoringHCP()
	{
		return this.authoringhcp;
	}
	public void setAuthoringHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.authoringhcp = value;
	}
	public boolean getAuthoringDateTimeIsNotNull()
	{
		return this.authoringdatetime != null;
	}
	public ims.framework.utils.DateTime getAuthoringDateTime()
	{
		return this.authoringdatetime;
	}
	public void setAuthoringDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.authoringdatetime = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.pathsite != null)
		{
			if(!this.pathsite.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.authoringhcp != null)
		{
			if(!this.authoringhcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.pathsite != null)
		{
			String[] listOfOtherErrors = this.pathsite.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.authoringhcp == null)
			listOfErrors.add("AuthoringHCP is mandatory");
		if(this.authoringhcp != null)
		{
			String[] listOfOtherErrors = this.authoringhcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.authoringdatetime == null)
			listOfErrors.add("AuthoringDateTime is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		MSKSpinePathologyFindingVo clone = new MSKSpinePathologyFindingVo(this.id, this.version);
		
		if(this.modeofinjury == null)
			clone.modeofinjury = null;
		else
			clone.modeofinjury = (ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury)this.modeofinjury.clone();
		if(this.typeofinjury == null)
			clone.typeofinjury = null;
		else
			clone.typeofinjury = (ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury)this.typeofinjury.clone();
		if(this.mechanismofinjury == null)
			clone.mechanismofinjury = null;
		else
			clone.mechanismofinjury = (ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury)this.mechanismofinjury.clone();
		clone.isprimarypathology = this.isprimarypathology;
		clone.isproblem = this.isproblem;
		if(this.pathsite == null)
			clone.pathsite = null;
		else
			clone.pathsite = (ims.core.vo.VertebrallevelVo)this.pathsite.clone();
		if(this.clinicalcontact == null)
			clone.clinicalcontact = null;
		else
			clone.clinicalcontact = (ims.core.vo.ClinicalContactShortVo)this.clinicalcontact.clone();
		clone.isactive = this.isactive;
		if(this.carecontext == null)
			clone.carecontext = null;
		else
			clone.carecontext = (ims.core.vo.CareContextShortVo)this.carecontext.clone();
		if(this.authoringhcp == null)
			clone.authoringhcp = null;
		else
			clone.authoringhcp = (ims.core.vo.HcpLiteVo)this.authoringhcp.clone();
		if(this.authoringdatetime == null)
			clone.authoringdatetime = null;
		else
			clone.authoringdatetime = (ims.framework.utils.DateTime)this.authoringdatetime.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(MSKSpinePathologyFindingVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A MSKSpinePathologyFindingVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		MSKSpinePathologyFindingVo compareObj = (MSKSpinePathologyFindingVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_MskSpinePath() == null && compareObj.getID_MskSpinePath() != null)
				return -1;
			if(this.getID_MskSpinePath() != null && compareObj.getID_MskSpinePath() == null)
				return 1;
			if(this.getID_MskSpinePath() != null && compareObj.getID_MskSpinePath() != null)
				retVal = this.getID_MskSpinePath().compareTo(compareObj.getID_MskSpinePath());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.modeofinjury != null)
			count++;
		if(this.typeofinjury != null)
			count++;
		if(this.mechanismofinjury != null)
			count++;
		if(this.isprimarypathology != null)
			count++;
		if(this.isproblem != null)
			count++;
		if(this.pathsite != null)
			count++;
		if(this.clinicalcontact != null)
			count++;
		if(this.isactive != null)
			count++;
		if(this.carecontext != null)
			count++;
		if(this.authoringhcp != null)
			count++;
		if(this.authoringdatetime != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 11;
	}
	protected ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury modeofinjury;
	protected ims.spinalinjuries.vo.lookups.InjuryClassTypeOfInjury typeofinjury;
	protected ims.spinalinjuries.vo.lookups.InjuryClassModeofInjury mechanismofinjury;
	protected Boolean isprimarypathology;
	protected Boolean isproblem;
	protected ims.core.vo.VertebrallevelVo pathsite;
	protected ims.core.vo.ClinicalContactShortVo clinicalcontact;
	protected Boolean isactive;
	protected ims.core.vo.CareContextShortVo carecontext;
	protected ims.core.vo.HcpLiteVo authoringhcp;
	protected ims.framework.utils.DateTime authoringdatetime;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
