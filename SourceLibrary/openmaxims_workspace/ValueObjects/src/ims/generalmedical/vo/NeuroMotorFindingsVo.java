//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.generalmedical.vo;

/**
 * Linked to medical.NeuExamMotor business object (ID: 1023100005).
 */
public class NeuroMotorFindingsVo extends ims.generalmedical.vo.NeuroMotorFindingsShortVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public NeuroMotorFindingsVo()
	{
	}
	public NeuroMotorFindingsVo(Integer id, int version)
	{
		super(id, version);
	}
	public NeuroMotorFindingsVo(ims.generalmedical.vo.beans.NeuroMotorFindingsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.authoringcp = bean.getAuthoringCP() == null ? null : bean.getAuthoringCP().buildVo();
		this.authoringdatetime = bean.getAuthoringDateTime() == null ? null : bean.getAuthoringDateTime().buildDateTime();
		this.rootfinding = ims.generalmedical.vo.NeuroMotorRootValueVoCollection.buildFromBeanCollection(bean.getRootFinding());
		this.rightmotorlevel = bean.getRightMotorLevel() == null ? null : bean.getRightMotorLevel().buildVo();
		this.leftmotorlevel = bean.getLeftMotorLevel() == null ? null : bean.getLeftMotorLevel().buildVo();
		this.isproblem = bean.getIsProblem();
		this.overallasiaright = bean.getOverallAsiaRight();
		this.overallasialeft = bean.getOverAllAsiaLeft();
		this.llasiaright = bean.getLLAsiaRight();
		this.llasialeft = bean.getLLAsiaLeft();
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.motorareafindings = ims.generalmedical.vo.NeuroMotorAreaFindingVoCollection.buildFromBeanCollection(bean.getMotorAreaFindings());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.generalmedical.vo.beans.NeuroMotorFindingsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : bean.getClinicalContact().buildVo(map);
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.authoringcp = bean.getAuthoringCP() == null ? null : bean.getAuthoringCP().buildVo(map);
		this.authoringdatetime = bean.getAuthoringDateTime() == null ? null : bean.getAuthoringDateTime().buildDateTime();
		this.rootfinding = ims.generalmedical.vo.NeuroMotorRootValueVoCollection.buildFromBeanCollection(bean.getRootFinding());
		this.rightmotorlevel = bean.getRightMotorLevel() == null ? null : bean.getRightMotorLevel().buildVo(map);
		this.leftmotorlevel = bean.getLeftMotorLevel() == null ? null : bean.getLeftMotorLevel().buildVo(map);
		this.isproblem = bean.getIsProblem();
		this.overallasiaright = bean.getOverallAsiaRight();
		this.overallasialeft = bean.getOverAllAsiaLeft();
		this.llasiaright = bean.getLLAsiaRight();
		this.llasialeft = bean.getLLAsiaLeft();
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.motorareafindings = ims.generalmedical.vo.NeuroMotorAreaFindingVoCollection.buildFromBeanCollection(bean.getMotorAreaFindings());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.generalmedical.vo.beans.NeuroMotorFindingsVoBean bean = null;
		if(map != null)
			bean = (ims.generalmedical.vo.beans.NeuroMotorFindingsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.generalmedical.vo.beans.NeuroMotorFindingsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("ROOTFINDING"))
			return getRootFinding();
		if(fieldName.equals("RIGHTMOTORLEVEL"))
			return getRightMotorLevel();
		if(fieldName.equals("LEFTMOTORLEVEL"))
			return getLeftMotorLevel();
		if(fieldName.equals("ISPROBLEM"))
			return getIsProblem();
		if(fieldName.equals("OVERALLASIARIGHT"))
			return getOverallAsiaRight();
		if(fieldName.equals("OVERALLASIALEFT"))
			return getOverAllAsiaLeft();
		if(fieldName.equals("LLASIARIGHT"))
			return getLLAsiaRight();
		if(fieldName.equals("LLASIALEFT"))
			return getLLAsiaLeft();
		if(fieldName.equals("SYSINFO"))
			return getSysInfo();
		if(fieldName.equals("MOTORAREAFINDINGS"))
			return getMotorAreaFindings();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getRootFindingIsNotNull()
	{
		return this.rootfinding != null;
	}
	public ims.generalmedical.vo.NeuroMotorRootValueVoCollection getRootFinding()
	{
		return this.rootfinding;
	}
	public void setRootFinding(ims.generalmedical.vo.NeuroMotorRootValueVoCollection value)
	{
		this.isValidated = false;
		this.rootfinding = value;
	}
	public boolean getRightMotorLevelIsNotNull()
	{
		return this.rightmotorlevel != null;
	}
	public ims.core.vo.VertebrallevelVo getRightMotorLevel()
	{
		return this.rightmotorlevel;
	}
	public void setRightMotorLevel(ims.core.vo.VertebrallevelVo value)
	{
		this.isValidated = false;
		this.rightmotorlevel = value;
	}
	public boolean getLeftMotorLevelIsNotNull()
	{
		return this.leftmotorlevel != null;
	}
	public ims.core.vo.VertebrallevelVo getLeftMotorLevel()
	{
		return this.leftmotorlevel;
	}
	public void setLeftMotorLevel(ims.core.vo.VertebrallevelVo value)
	{
		this.isValidated = false;
		this.leftmotorlevel = value;
	}
	public boolean getIsProblemIsNotNull()
	{
		return this.isproblem != null;
	}
	public Boolean getIsProblem()
	{
		return this.isproblem;
	}
	public void setIsProblem(Boolean value)
	{
		this.isValidated = false;
		this.isproblem = value;
	}
	public boolean getOverallAsiaRightIsNotNull()
	{
		return this.overallasiaright != null;
	}
	public Integer getOverallAsiaRight()
	{
		return this.overallasiaright;
	}
	public void setOverallAsiaRight(Integer value)
	{
		this.isValidated = false;
		this.overallasiaright = value;
	}
	public boolean getOverAllAsiaLeftIsNotNull()
	{
		return this.overallasialeft != null;
	}
	public Integer getOverAllAsiaLeft()
	{
		return this.overallasialeft;
	}
	public void setOverAllAsiaLeft(Integer value)
	{
		this.isValidated = false;
		this.overallasialeft = value;
	}
	public boolean getLLAsiaRightIsNotNull()
	{
		return this.llasiaright != null;
	}
	public Integer getLLAsiaRight()
	{
		return this.llasiaright;
	}
	public void setLLAsiaRight(Integer value)
	{
		this.isValidated = false;
		this.llasiaright = value;
	}
	public boolean getLLAsiaLeftIsNotNull()
	{
		return this.llasialeft != null;
	}
	public Integer getLLAsiaLeft()
	{
		return this.llasialeft;
	}
	public void setLLAsiaLeft(Integer value)
	{
		this.isValidated = false;
		this.llasialeft = value;
	}
	public boolean getSysInfoIsNotNull()
	{
		return this.sysinfo != null;
	}
	public ims.vo.SystemInformation getSysInfo()
	{
		return this.sysinfo;
	}
	public void setSysInfo(ims.vo.SystemInformation value)
	{
		this.isValidated = false;
		this.sysinfo = value;
	}
	public boolean getMotorAreaFindingsIsNotNull()
	{
		return this.motorareafindings != null;
	}
	public ims.generalmedical.vo.NeuroMotorAreaFindingVoCollection getMotorAreaFindings()
	{
		return this.motorareafindings;
	}
	public void setMotorAreaFindings(ims.generalmedical.vo.NeuroMotorAreaFindingVoCollection value)
	{
		this.isValidated = false;
		this.motorareafindings = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.clinicalcontact != null)
		{
			if(!this.clinicalcontact.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.authoringcp != null)
		{
			if(!this.authoringcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.rootfinding != null)
		{
			if(!this.rootfinding.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.rightmotorlevel != null)
		{
			if(!this.rightmotorlevel.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.leftmotorlevel != null)
		{
			if(!this.leftmotorlevel.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.motorareafindings != null)
		{
			if(!this.motorareafindings.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.clinicalcontact != null)
		{
			String[] listOfOtherErrors = this.clinicalcontact.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.authoringcp == null)
			listOfErrors.add("Authoring HCP is mandatory");
		if(this.authoringcp != null)
		{
			String[] listOfOtherErrors = this.authoringcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.authoringdatetime == null)
			listOfErrors.add("AuthoringDateTime is mandatory");
		if(this.rootfinding != null)
		{
			String[] listOfOtherErrors = this.rootfinding.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.rightmotorlevel != null)
		{
			String[] listOfOtherErrors = this.rightmotorlevel.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.leftmotorlevel != null)
		{
			String[] listOfOtherErrors = this.leftmotorlevel.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.motorareafindings != null)
		{
			String[] listOfOtherErrors = this.motorareafindings.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		NeuroMotorFindingsVo clone = new NeuroMotorFindingsVo(this.id, this.version);
		
		if(this.clinicalcontact == null)
			clone.clinicalcontact = null;
		else
			clone.clinicalcontact = (ims.core.vo.ClinicalContactShortVo)this.clinicalcontact.clone();
		clone.carecontext = this.carecontext;
		if(this.authoringcp == null)
			clone.authoringcp = null;
		else
			clone.authoringcp = (ims.core.vo.HcpLiteVo)this.authoringcp.clone();
		if(this.authoringdatetime == null)
			clone.authoringdatetime = null;
		else
			clone.authoringdatetime = (ims.framework.utils.DateTime)this.authoringdatetime.clone();
		if(this.rootfinding == null)
			clone.rootfinding = null;
		else
			clone.rootfinding = (ims.generalmedical.vo.NeuroMotorRootValueVoCollection)this.rootfinding.clone();
		if(this.rightmotorlevel == null)
			clone.rightmotorlevel = null;
		else
			clone.rightmotorlevel = (ims.core.vo.VertebrallevelVo)this.rightmotorlevel.clone();
		if(this.leftmotorlevel == null)
			clone.leftmotorlevel = null;
		else
			clone.leftmotorlevel = (ims.core.vo.VertebrallevelVo)this.leftmotorlevel.clone();
		clone.isproblem = this.isproblem;
		clone.overallasiaright = this.overallasiaright;
		clone.overallasialeft = this.overallasialeft;
		clone.llasiaright = this.llasiaright;
		clone.llasialeft = this.llasialeft;
		if(this.sysinfo == null)
			clone.sysinfo = null;
		else
			clone.sysinfo = (ims.vo.SystemInformation)this.sysinfo.clone();
		if(this.motorareafindings == null)
			clone.motorareafindings = null;
		else
			clone.motorareafindings = (ims.generalmedical.vo.NeuroMotorAreaFindingVoCollection)this.motorareafindings.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(NeuroMotorFindingsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A NeuroMotorFindingsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		NeuroMotorFindingsVo compareObj = (NeuroMotorFindingsVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getSysInfo() == null && compareObj.getSysInfo() != null)
				return -1;
			if(this.getSysInfo() != null && compareObj.getSysInfo() == null)
				return 1;
			if(this.getSysInfo() != null && compareObj.getSysInfo() != null)
				retVal = this.getSysInfo().compareTo(compareObj.getSysInfo());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.rootfinding != null)
			count++;
		if(this.rightmotorlevel != null)
			count++;
		if(this.leftmotorlevel != null)
			count++;
		if(this.isproblem != null)
			count++;
		if(this.overallasiaright != null)
			count++;
		if(this.overallasialeft != null)
			count++;
		if(this.llasiaright != null)
			count++;
		if(this.llasialeft != null)
			count++;
		if(this.sysinfo != null)
			count++;
		if(this.motorareafindings != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 10;
	}
	protected ims.generalmedical.vo.NeuroMotorRootValueVoCollection rootfinding;
	protected ims.core.vo.VertebrallevelVo rightmotorlevel;
	protected ims.core.vo.VertebrallevelVo leftmotorlevel;
	protected Boolean isproblem;
	protected Integer overallasiaright;
	protected Integer overallasialeft;
	protected Integer llasiaright;
	protected Integer llasialeft;
	protected ims.vo.SystemInformation sysinfo;
	protected ims.generalmedical.vo.NeuroMotorAreaFindingVoCollection motorareafindings;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
