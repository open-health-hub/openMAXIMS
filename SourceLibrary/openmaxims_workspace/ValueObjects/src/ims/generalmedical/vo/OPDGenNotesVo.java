//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.generalmedical.vo;

/**
 * Linked to medical.OPDGenNotes business object (ID: 1023100025).
 */
public class OPDGenNotesVo extends ims.medical.vo.OPDGenNotesRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public OPDGenNotesVo()
	{
	}
	public OPDGenNotesVo(Integer id, int version)
	{
		super(id, version);
	}
	public OPDGenNotesVo(ims.generalmedical.vo.beans.OPDGenNotesVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.autonomicdysreflexia = bean.getAutonomicDysreflexia() == null ? null : ims.core.vo.lookups.AutonomicDysreflexia.buildLookup(bean.getAutonomicDysreflexia());
		this.modashworth = bean.getModAshworth();
		this.spastype = bean.getSpasType();
		this.painscale = bean.getPainScale();
		this.gennotes = bean.getGenNotes();
		this.evidencesyringomyelia = bean.getEvidenceSyringomyelia();
		this.planaction = bean.getPlanAction();
		this.opdnext = bean.getOPDNext();
		this.opdnextunits = bean.getOpdNextUnits() == null ? null : ims.core.vo.lookups.TimeWeeksMonthsYears.buildLookup(bean.getOpdNextUnits());
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.generalmedical.vo.beans.OPDGenNotesVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.autonomicdysreflexia = bean.getAutonomicDysreflexia() == null ? null : ims.core.vo.lookups.AutonomicDysreflexia.buildLookup(bean.getAutonomicDysreflexia());
		this.modashworth = bean.getModAshworth();
		this.spastype = bean.getSpasType();
		this.painscale = bean.getPainScale();
		this.gennotes = bean.getGenNotes();
		this.evidencesyringomyelia = bean.getEvidenceSyringomyelia();
		this.planaction = bean.getPlanAction();
		this.opdnext = bean.getOPDNext();
		this.opdnextunits = bean.getOpdNextUnits() == null ? null : ims.core.vo.lookups.TimeWeeksMonthsYears.buildLookup(bean.getOpdNextUnits());
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo(map);
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.generalmedical.vo.beans.OPDGenNotesVoBean bean = null;
		if(map != null)
			bean = (ims.generalmedical.vo.beans.OPDGenNotesVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.generalmedical.vo.beans.OPDGenNotesVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("AUTONOMICDYSREFLEXIA"))
			return getAutonomicDysreflexia();
		if(fieldName.equals("MODASHWORTH"))
			return getModAshworth();
		if(fieldName.equals("SPASTYPE"))
			return getSpasType();
		if(fieldName.equals("PAINSCALE"))
			return getPainScale();
		if(fieldName.equals("GENNOTES"))
			return getGenNotes();
		if(fieldName.equals("EVIDENCESYRINGOMYELIA"))
			return getEvidenceSyringomyelia();
		if(fieldName.equals("PLANACTION"))
			return getPlanAction();
		if(fieldName.equals("OPDNEXT"))
			return getOPDNext();
		if(fieldName.equals("OPDNEXTUNITS"))
			return getOpdNextUnits();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("AUTHORINGINFORMATION"))
			return getAuthoringInformation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAutonomicDysreflexiaIsNotNull()
	{
		return this.autonomicdysreflexia != null;
	}
	public ims.core.vo.lookups.AutonomicDysreflexia getAutonomicDysreflexia()
	{
		return this.autonomicdysreflexia;
	}
	public void setAutonomicDysreflexia(ims.core.vo.lookups.AutonomicDysreflexia value)
	{
		this.isValidated = false;
		this.autonomicdysreflexia = value;
	}
	public boolean getModAshworthIsNotNull()
	{
		return this.modashworth != null;
	}
	public String getModAshworth()
	{
		return this.modashworth;
	}
	public static int getModAshworthMaxLength()
	{
		return 100;
	}
	public void setModAshworth(String value)
	{
		this.isValidated = false;
		this.modashworth = value;
	}
	public boolean getSpasTypeIsNotNull()
	{
		return this.spastype != null;
	}
	public String getSpasType()
	{
		return this.spastype;
	}
	public static int getSpasTypeMaxLength()
	{
		return 255;
	}
	public void setSpasType(String value)
	{
		this.isValidated = false;
		this.spastype = value;
	}
	public boolean getPainScaleIsNotNull()
	{
		return this.painscale != null;
	}
	public String getPainScale()
	{
		return this.painscale;
	}
	public static int getPainScaleMaxLength()
	{
		return 100;
	}
	public void setPainScale(String value)
	{
		this.isValidated = false;
		this.painscale = value;
	}
	public boolean getGenNotesIsNotNull()
	{
		return this.gennotes != null;
	}
	public String getGenNotes()
	{
		return this.gennotes;
	}
	public static int getGenNotesMaxLength()
	{
		return 500;
	}
	public void setGenNotes(String value)
	{
		this.isValidated = false;
		this.gennotes = value;
	}
	public boolean getEvidenceSyringomyeliaIsNotNull()
	{
		return this.evidencesyringomyelia != null;
	}
	public String getEvidenceSyringomyelia()
	{
		return this.evidencesyringomyelia;
	}
	public static int getEvidenceSyringomyeliaMaxLength()
	{
		return 500;
	}
	public void setEvidenceSyringomyelia(String value)
	{
		this.isValidated = false;
		this.evidencesyringomyelia = value;
	}
	public boolean getPlanActionIsNotNull()
	{
		return this.planaction != null;
	}
	public String getPlanAction()
	{
		return this.planaction;
	}
	public static int getPlanActionMaxLength()
	{
		return 2000;
	}
	public void setPlanAction(String value)
	{
		this.isValidated = false;
		this.planaction = value;
	}
	public boolean getOPDNextIsNotNull()
	{
		return this.opdnext != null;
	}
	public Integer getOPDNext()
	{
		return this.opdnext;
	}
	public void setOPDNext(Integer value)
	{
		this.isValidated = false;
		this.opdnext = value;
	}
	public boolean getOpdNextUnitsIsNotNull()
	{
		return this.opdnextunits != null;
	}
	public ims.core.vo.lookups.TimeWeeksMonthsYears getOpdNextUnits()
	{
		return this.opdnextunits;
	}
	public void setOpdNextUnits(ims.core.vo.lookups.TimeWeeksMonthsYears value)
	{
		this.isValidated = false;
		this.opdnextunits = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.vo.CareContextShortVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.vo.CareContextShortVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getAuthoringInformationIsNotNull()
	{
		return this.authoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInformation()
	{
		return this.authoringinformation;
	}
	public void setAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinformation = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.modashworth != null)
			if(this.modashworth.length() > 100)
				listOfErrors.add("The length of the field [modashworth] in the value object [ims.generalmedical.vo.OPDGenNotesVo] is too big. It should be less or equal to 100");
		if(this.painscale != null)
			if(this.painscale.length() > 100)
				listOfErrors.add("The length of the field [painscale] in the value object [ims.generalmedical.vo.OPDGenNotesVo] is too big. It should be less or equal to 100");
		if(this.gennotes != null)
			if(this.gennotes.length() > 500)
				listOfErrors.add("The length of the field [gennotes] in the value object [ims.generalmedical.vo.OPDGenNotesVo] is too big. It should be less or equal to 500");
		if(this.evidencesyringomyelia != null)
			if(this.evidencesyringomyelia.length() > 500)
				listOfErrors.add("The length of the field [evidencesyringomyelia] in the value object [ims.generalmedical.vo.OPDGenNotesVo] is too big. It should be less or equal to 500");
		if(this.planaction != null)
			if(this.planaction.length() > 2000)
				listOfErrors.add("The length of the field [planaction] in the value object [ims.generalmedical.vo.OPDGenNotesVo] is too big. It should be less or equal to 2000");
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		OPDGenNotesVo clone = new OPDGenNotesVo(this.id, this.version);
		
		if(this.autonomicdysreflexia == null)
			clone.autonomicdysreflexia = null;
		else
			clone.autonomicdysreflexia = (ims.core.vo.lookups.AutonomicDysreflexia)this.autonomicdysreflexia.clone();
		clone.modashworth = this.modashworth;
		clone.spastype = this.spastype;
		clone.painscale = this.painscale;
		clone.gennotes = this.gennotes;
		clone.evidencesyringomyelia = this.evidencesyringomyelia;
		clone.planaction = this.planaction;
		clone.opdnext = this.opdnext;
		if(this.opdnextunits == null)
			clone.opdnextunits = null;
		else
			clone.opdnextunits = (ims.core.vo.lookups.TimeWeeksMonthsYears)this.opdnextunits.clone();
		if(this.carecontext == null)
			clone.carecontext = null;
		else
			clone.carecontext = (ims.core.vo.CareContextShortVo)this.carecontext.clone();
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(OPDGenNotesVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A OPDGenNotesVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		OPDGenNotesVo compareObj = (OPDGenNotesVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_OPDGenNotes() == null && compareObj.getID_OPDGenNotes() != null)
				return -1;
			if(this.getID_OPDGenNotes() != null && compareObj.getID_OPDGenNotes() == null)
				return 1;
			if(this.getID_OPDGenNotes() != null && compareObj.getID_OPDGenNotes() != null)
				retVal = this.getID_OPDGenNotes().compareTo(compareObj.getID_OPDGenNotes());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.autonomicdysreflexia != null)
			count++;
		if(this.modashworth != null)
			count++;
		if(this.spastype != null)
			count++;
		if(this.painscale != null)
			count++;
		if(this.gennotes != null)
			count++;
		if(this.evidencesyringomyelia != null)
			count++;
		if(this.planaction != null)
			count++;
		if(this.opdnext != null)
			count++;
		if(this.opdnextunits != null)
			count++;
		if(this.carecontext != null)
			count++;
		if(this.authoringinformation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 11;
	}
	protected ims.core.vo.lookups.AutonomicDysreflexia autonomicdysreflexia;
	protected String modashworth;
	protected String spastype;
	protected String painscale;
	protected String gennotes;
	protected String evidencesyringomyelia;
	protected String planaction;
	protected Integer opdnext;
	protected ims.core.vo.lookups.TimeWeeksMonthsYears opdnextunits;
	protected ims.core.vo.CareContextShortVo carecontext;
	protected ims.core.vo.AuthoringInformationVo authoringinformation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
