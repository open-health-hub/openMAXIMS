//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.generalmedical.vo;

/**
 * Linked to medical.OPDSpasAssLimbs business object (ID: 1031100009).
 */
public class OPDSpasAssLimbsVo extends ims.medical.vo.OPDSpasAssLimbsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public OPDSpasAssLimbsVo()
	{
	}
	public OPDSpasAssLimbsVo(Integer id, int version)
	{
		super(id, version);
	}
	public OPDSpasAssLimbsVo(ims.generalmedical.vo.beans.OPDSpasAssLimbsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.joint = bean.getJoint() == null ? null : bean.getJoint().buildVo();
		this.movement = bean.getMovement() == null ? null : ims.spinalinjuries.vo.lookups.MskJointsMovements.buildLookup(bean.getMovement());
		this.activeromleft = bean.getActiveRomLeft();
		this.activeromright = bean.getActiveRomRight();
		this.passiveromleft = bean.getPassiveRomLeft();
		this.passiveromright = bean.getPassiveRomRight();
		this.toneleft = bean.getToneLeft() == null ? null : ims.spinalinjuries.vo.lookups.SpasAssToneQualititative.buildLookup(bean.getToneLeft());
		this.toneright = bean.getToneRight() == null ? null : ims.spinalinjuries.vo.lookups.SpasAssToneQualititative.buildLookup(bean.getToneRight());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.generalmedical.vo.beans.OPDSpasAssLimbsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.joint = bean.getJoint() == null ? null : bean.getJoint().buildVo(map);
		this.movement = bean.getMovement() == null ? null : ims.spinalinjuries.vo.lookups.MskJointsMovements.buildLookup(bean.getMovement());
		this.activeromleft = bean.getActiveRomLeft();
		this.activeromright = bean.getActiveRomRight();
		this.passiveromleft = bean.getPassiveRomLeft();
		this.passiveromright = bean.getPassiveRomRight();
		this.toneleft = bean.getToneLeft() == null ? null : ims.spinalinjuries.vo.lookups.SpasAssToneQualititative.buildLookup(bean.getToneLeft());
		this.toneright = bean.getToneRight() == null ? null : ims.spinalinjuries.vo.lookups.SpasAssToneQualititative.buildLookup(bean.getToneRight());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.generalmedical.vo.beans.OPDSpasAssLimbsVoBean bean = null;
		if(map != null)
			bean = (ims.generalmedical.vo.beans.OPDSpasAssLimbsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.generalmedical.vo.beans.OPDSpasAssLimbsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("JOINT"))
			return getJoint();
		if(fieldName.equals("MOVEMENT"))
			return getMovement();
		if(fieldName.equals("ACTIVEROMLEFT"))
			return getActiveRomLeft();
		if(fieldName.equals("ACTIVEROMRIGHT"))
			return getActiveRomRight();
		if(fieldName.equals("PASSIVEROMLEFT"))
			return getPassiveRomLeft();
		if(fieldName.equals("PASSIVEROMRIGHT"))
			return getPassiveRomRight();
		if(fieldName.equals("TONELEFT"))
			return getToneLeft();
		if(fieldName.equals("TONERIGHT"))
			return getToneRight();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getJointIsNotNull()
	{
		return this.joint != null;
	}
	public ims.core.vo.MskJointVo getJoint()
	{
		return this.joint;
	}
	public void setJoint(ims.core.vo.MskJointVo value)
	{
		this.isValidated = false;
		this.joint = value;
	}
	public boolean getMovementIsNotNull()
	{
		return this.movement != null;
	}
	public ims.spinalinjuries.vo.lookups.MskJointsMovements getMovement()
	{
		return this.movement;
	}
	public void setMovement(ims.spinalinjuries.vo.lookups.MskJointsMovements value)
	{
		this.isValidated = false;
		this.movement = value;
	}
	public boolean getActiveRomLeftIsNotNull()
	{
		return this.activeromleft != null;
	}
	public Integer getActiveRomLeft()
	{
		return this.activeromleft;
	}
	public void setActiveRomLeft(Integer value)
	{
		this.isValidated = false;
		this.activeromleft = value;
	}
	public boolean getActiveRomRightIsNotNull()
	{
		return this.activeromright != null;
	}
	public Integer getActiveRomRight()
	{
		return this.activeromright;
	}
	public void setActiveRomRight(Integer value)
	{
		this.isValidated = false;
		this.activeromright = value;
	}
	public boolean getPassiveRomLeftIsNotNull()
	{
		return this.passiveromleft != null;
	}
	public Integer getPassiveRomLeft()
	{
		return this.passiveromleft;
	}
	public void setPassiveRomLeft(Integer value)
	{
		this.isValidated = false;
		this.passiveromleft = value;
	}
	public boolean getPassiveRomRightIsNotNull()
	{
		return this.passiveromright != null;
	}
	public Integer getPassiveRomRight()
	{
		return this.passiveromright;
	}
	public void setPassiveRomRight(Integer value)
	{
		this.isValidated = false;
		this.passiveromright = value;
	}
	public boolean getToneLeftIsNotNull()
	{
		return this.toneleft != null;
	}
	public ims.spinalinjuries.vo.lookups.SpasAssToneQualititative getToneLeft()
	{
		return this.toneleft;
	}
	public void setToneLeft(ims.spinalinjuries.vo.lookups.SpasAssToneQualititative value)
	{
		this.isValidated = false;
		this.toneleft = value;
	}
	public boolean getToneRightIsNotNull()
	{
		return this.toneright != null;
	}
	public ims.spinalinjuries.vo.lookups.SpasAssToneQualititative getToneRight()
	{
		return this.toneright;
	}
	public void setToneRight(ims.spinalinjuries.vo.lookups.SpasAssToneQualititative value)
	{
		this.isValidated = false;
		this.toneright = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.joint != null)
		{
			if(!this.joint.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.joint != null)
		{
			String[] listOfOtherErrors = this.joint.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		OPDSpasAssLimbsVo clone = new OPDSpasAssLimbsVo(this.id, this.version);
		
		if(this.joint == null)
			clone.joint = null;
		else
			clone.joint = (ims.core.vo.MskJointVo)this.joint.clone();
		if(this.movement == null)
			clone.movement = null;
		else
			clone.movement = (ims.spinalinjuries.vo.lookups.MskJointsMovements)this.movement.clone();
		clone.activeromleft = this.activeromleft;
		clone.activeromright = this.activeromright;
		clone.passiveromleft = this.passiveromleft;
		clone.passiveromright = this.passiveromright;
		if(this.toneleft == null)
			clone.toneleft = null;
		else
			clone.toneleft = (ims.spinalinjuries.vo.lookups.SpasAssToneQualititative)this.toneleft.clone();
		if(this.toneright == null)
			clone.toneright = null;
		else
			clone.toneright = (ims.spinalinjuries.vo.lookups.SpasAssToneQualititative)this.toneright.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(OPDSpasAssLimbsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A OPDSpasAssLimbsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		OPDSpasAssLimbsVo compareObj = (OPDSpasAssLimbsVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_OPDSpasAssLimbs() == null && compareObj.getID_OPDSpasAssLimbs() != null)
				return -1;
			if(this.getID_OPDSpasAssLimbs() != null && compareObj.getID_OPDSpasAssLimbs() == null)
				return 1;
			if(this.getID_OPDSpasAssLimbs() != null && compareObj.getID_OPDSpasAssLimbs() != null)
				retVal = this.getID_OPDSpasAssLimbs().compareTo(compareObj.getID_OPDSpasAssLimbs());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.joint != null)
			count++;
		if(this.movement != null)
			count++;
		if(this.activeromleft != null)
			count++;
		if(this.activeromright != null)
			count++;
		if(this.passiveromleft != null)
			count++;
		if(this.passiveromright != null)
			count++;
		if(this.toneleft != null)
			count++;
		if(this.toneright != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.core.vo.MskJointVo joint;
	protected ims.spinalinjuries.vo.lookups.MskJointsMovements movement;
	protected Integer activeromleft;
	protected Integer activeromright;
	protected Integer passiveromleft;
	protected Integer passiveromright;
	protected ims.spinalinjuries.vo.lookups.SpasAssToneQualititative toneleft;
	protected ims.spinalinjuries.vo.lookups.SpasAssToneQualititative toneright;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
