//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.vo;

/**
 * Linked to OCRR.OrderingResults.OcsOrderSession business object (ID: 1070100000).
 */
public class OcsOrderSummaryVo extends ims.ocrr.orderingresults.vo.OcsOrderSessionRefVo implements ims.vo.ImsCloneable, Comparable, ims.vo.interfaces.IQuestionNotes
{
	private static final long serialVersionUID = 1L;

	public OcsOrderSummaryVo()
	{
	}
	public OcsOrderSummaryVo(Integer id, int version)
	{
		super(id, version);
	}
	public OcsOrderSummaryVo(ims.ocrr.vo.beans.OcsOrderSummaryVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.responsibleclinician = bean.getResponsibleClinician() == null ? null : bean.getResponsibleClinician().buildVo();
		this.patientlocation = bean.getPatientLocation() == null ? null : bean.getPatientLocation().buildVo();
		this.specimens = ims.ocrr.vo.PathologySpecimenVoCollection.buildFromBeanCollection(bean.getSpecimens());
		this.investigations = ims.ocrr.vo.OrderInvestigationListVoCollection.buildFromBeanCollection(bean.getInvestigations());
		this.clinicalinfo = bean.getClinicalInfo() == null ? null : bean.getClinicalInfo().buildVo();
		this.additclinnotes = bean.getAdditClinNotes();
		this.summaryclinicalinformation = bean.getSummaryClinicalInformation();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.ocrr.vo.beans.OcsOrderSummaryVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.responsibleclinician = bean.getResponsibleClinician() == null ? null : bean.getResponsibleClinician().buildVo(map);
		this.patientlocation = bean.getPatientLocation() == null ? null : bean.getPatientLocation().buildVo(map);
		this.specimens = ims.ocrr.vo.PathologySpecimenVoCollection.buildFromBeanCollection(bean.getSpecimens());
		this.investigations = ims.ocrr.vo.OrderInvestigationListVoCollection.buildFromBeanCollection(bean.getInvestigations());
		this.clinicalinfo = bean.getClinicalInfo() == null ? null : bean.getClinicalInfo().buildVo(map);
		this.additclinnotes = bean.getAdditClinNotes();
		this.summaryclinicalinformation = bean.getSummaryClinicalInformation();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.ocrr.vo.beans.OcsOrderSummaryVoBean bean = null;
		if(map != null)
			bean = (ims.ocrr.vo.beans.OcsOrderSummaryVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.ocrr.vo.beans.OcsOrderSummaryVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("RESPONSIBLECLINICIAN"))
			return getResponsibleClinician();
		if(fieldName.equals("PATIENTLOCATION"))
			return getPatientLocation();
		if(fieldName.equals("SPECIMENS"))
			return getSpecimens();
		if(fieldName.equals("INVESTIGATIONS"))
			return getInvestigations();
		if(fieldName.equals("CLINICALINFO"))
			return getClinicalInfo();
		if(fieldName.equals("ADDITCLINNOTES"))
			return getAdditClinNotes();
		if(fieldName.equals("SUMMARYCLINICALINFORMATION"))
			return getSummaryClinicalInformation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientShort getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientShort value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getResponsibleClinicianIsNotNull()
	{
		return this.responsibleclinician != null;
	}
	public ims.core.vo.Hcp getResponsibleClinician()
	{
		return this.responsibleclinician;
	}
	public void setResponsibleClinician(ims.core.vo.Hcp value)
	{
		this.isValidated = false;
		this.responsibleclinician = value;
	}
	public boolean getPatientLocationIsNotNull()
	{
		return this.patientlocation != null;
	}
	public ims.core.vo.LocationLiteVo getPatientLocation()
	{
		return this.patientlocation;
	}
	public void setPatientLocation(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.patientlocation = value;
	}
	public boolean getSpecimensIsNotNull()
	{
		return this.specimens != null;
	}
	public ims.ocrr.vo.PathologySpecimenVoCollection getSpecimens()
	{
		return this.specimens;
	}
	public void setSpecimens(ims.ocrr.vo.PathologySpecimenVoCollection value)
	{
		this.isValidated = false;
		this.specimens = value;
	}
	public boolean getInvestigationsIsNotNull()
	{
		return this.investigations != null;
	}
	public ims.ocrr.vo.OrderInvestigationListVoCollection getInvestigations()
	{
		return this.investigations;
	}
	public void setInvestigations(ims.ocrr.vo.OrderInvestigationListVoCollection value)
	{
		this.isValidated = false;
		this.investigations = value;
	}
	public boolean getClinicalInfoIsNotNull()
	{
		return this.clinicalinfo != null;
	}
	public ims.ocrr.vo.OcsQASessionVo getClinicalInfo()
	{
		return this.clinicalinfo;
	}
	public void setClinicalInfo(ims.ocrr.vo.OcsQASessionVo value)
	{
		this.isValidated = false;
		this.clinicalinfo = value;
	}
	public boolean getAdditClinNotesIsNotNull()
	{
		return this.additclinnotes != null;
	}
	public String getAdditClinNotes()
	{
		return this.additclinnotes;
	}
	public static int getAdditClinNotesMaxLength()
	{
		return 4000;
	}
	public void setAdditClinNotes(String value)
	{
		this.isValidated = false;
		this.additclinnotes = value;
	}
	public boolean getSummaryClinicalInformationIsNotNull()
	{
		return this.summaryclinicalinformation != null;
	}
	public String getSummaryClinicalInformation()
	{
		return this.summaryclinicalinformation;
	}
	public static int getSummaryClinicalInformationMaxLength()
	{
		return 2000;
	}
	public void setSummaryClinicalInformation(String value)
	{
		this.isValidated = false;
		this.summaryclinicalinformation = value;
	}
	/**
	* IQuestionNotes Interface methods
	*/
	public String[] getReOrderMessages() 
	{
		if(investigations == null)
				return null;
			
		java.util.ArrayList<String> messages = new java.util.ArrayList<String>();
	
		for(ims.ocrr.vo.OrderInvestigationListVo investigation : investigations)
		{
			if(investigation == null)
				continue;
				
			if(investigation.getReorderReason() != null && investigation.getReorderReason().length() > 0)
			{
				messages.add("<b>" + investigation.getInvestigation().getInvestigationIndex().getName() + "</b> : " + investigation.getReorderReason());
			}
		}
			
		if(messages.size() == 0)
			return null;
			
		java.util.Collections.sort(messages, new java.util.Comparator<String>() 
											{
												public int compare(String strA, String strB) 
												{
													return strA.compareToIgnoreCase(strB);
												}
											});
			
		String[] messagesArray = new String[messages.size()];
		messages.toArray(messagesArray);
			
		return messagesArray;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.patient != null)
		{
			if(!this.patient.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.responsibleclinician != null)
		{
			if(!this.responsibleclinician.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.patientlocation != null)
		{
			if(!this.patientlocation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.specimens != null)
		{
			if(!this.specimens.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.investigations != null)
		{
			if(!this.investigations.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.clinicalinfo != null)
		{
			if(!this.clinicalinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.patient != null)
		{
			String[] listOfOtherErrors = this.patient.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.responsibleclinician != null)
		{
			String[] listOfOtherErrors = this.responsibleclinician.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.patientlocation != null)
		{
			String[] listOfOtherErrors = this.patientlocation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.specimens != null)
		{
			String[] listOfOtherErrors = this.specimens.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.investigations == null || this.investigations.size() == 0)
			listOfErrors.add("Investigations are mandatory");
		if(this.investigations != null)
		{
			String[] listOfOtherErrors = this.investigations.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.clinicalinfo != null)
		{
			String[] listOfOtherErrors = this.clinicalinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.summaryclinicalinformation != null)
			if(this.summaryclinicalinformation.length() > 2000)
				listOfErrors.add("The length of the field [summaryclinicalinformation] in the value object [ims.ocrr.vo.OcsOrderSummaryVo] is too big. It should be less or equal to 2000");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		OcsOrderSummaryVo clone = new OcsOrderSummaryVo(this.id, this.version);
		
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientShort)this.patient.clone();
		if(this.responsibleclinician == null)
			clone.responsibleclinician = null;
		else
			clone.responsibleclinician = (ims.core.vo.Hcp)this.responsibleclinician.clone();
		if(this.patientlocation == null)
			clone.patientlocation = null;
		else
			clone.patientlocation = (ims.core.vo.LocationLiteVo)this.patientlocation.clone();
		if(this.specimens == null)
			clone.specimens = null;
		else
			clone.specimens = (ims.ocrr.vo.PathologySpecimenVoCollection)this.specimens.clone();
		if(this.investigations == null)
			clone.investigations = null;
		else
			clone.investigations = (ims.ocrr.vo.OrderInvestigationListVoCollection)this.investigations.clone();
		if(this.clinicalinfo == null)
			clone.clinicalinfo = null;
		else
			clone.clinicalinfo = (ims.ocrr.vo.OcsQASessionVo)this.clinicalinfo.clone();
		clone.additclinnotes = this.additclinnotes;
		clone.summaryclinicalinformation = this.summaryclinicalinformation;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(OcsOrderSummaryVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A OcsOrderSummaryVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((OcsOrderSummaryVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((OcsOrderSummaryVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.responsibleclinician != null)
			count++;
		if(this.patientlocation != null)
			count++;
		if(this.specimens != null)
			count++;
		if(this.investigations != null)
			count++;
		if(this.clinicalinfo != null)
			count++;
		if(this.additclinnotes != null)
			count++;
		if(this.summaryclinicalinformation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.core.vo.PatientShort patient;
	protected ims.core.vo.Hcp responsibleclinician;
	protected ims.core.vo.LocationLiteVo patientlocation;
	protected ims.ocrr.vo.PathologySpecimenVoCollection specimens;
	protected ims.ocrr.vo.OrderInvestigationListVoCollection investigations;
	protected ims.ocrr.vo.OcsQASessionVo clinicalinfo;
	protected String additclinnotes;
	protected String summaryclinicalinformation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
