//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.vo;

/**
 * Linked to Oncology.ChemotherapyDetails business object (ID: 1074100004).
 */
public class ChemotherapyDetailsListVo extends ims.oncology.vo.ChemotherapyDetailsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ChemotherapyDetailsListVo()
	{
	}
	public ChemotherapyDetailsListVo(Integer id, int version)
	{
		super(id, version);
	}
	public ChemotherapyDetailsListVo(ims.ocrr.vo.beans.ChemotherapyDetailsListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.treatingconsultant = bean.getTreatingConsultant() == null ? null : bean.getTreatingConsultant().buildVo();
		this.regimenacronym = bean.getRegimenAcronym() == null ? null : ims.oncology.vo.lookups.RegimenAcronym.buildLookup(bean.getRegimenAcronym());
		this.cancertreatementintent = bean.getCancerTreatementIntent() == null ? null : ims.oncology.vo.lookups.CancerTreatmentIntent.buildLookup(bean.getCancerTreatementIntent());
		this.datedecisiontotreat = bean.getDateDecisionToTreat() == null ? null : bean.getDateDecisionToTreat().buildDate();
		this.treatmentresponse = bean.getTreatmentResponse() == null ? null : ims.oncology.vo.lookups.DrugProgramResponse.buildLookup(bean.getTreatmentResponse());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.ocrr.vo.beans.ChemotherapyDetailsListVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.treatingconsultant = bean.getTreatingConsultant() == null ? null : bean.getTreatingConsultant().buildVo(map);
		this.regimenacronym = bean.getRegimenAcronym() == null ? null : ims.oncology.vo.lookups.RegimenAcronym.buildLookup(bean.getRegimenAcronym());
		this.cancertreatementintent = bean.getCancerTreatementIntent() == null ? null : ims.oncology.vo.lookups.CancerTreatmentIntent.buildLookup(bean.getCancerTreatementIntent());
		this.datedecisiontotreat = bean.getDateDecisionToTreat() == null ? null : bean.getDateDecisionToTreat().buildDate();
		this.treatmentresponse = bean.getTreatmentResponse() == null ? null : ims.oncology.vo.lookups.DrugProgramResponse.buildLookup(bean.getTreatmentResponse());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.ocrr.vo.beans.ChemotherapyDetailsListVoBean bean = null;
		if(map != null)
			bean = (ims.ocrr.vo.beans.ChemotherapyDetailsListVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.ocrr.vo.beans.ChemotherapyDetailsListVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("STARTDATE"))
			return getStartDate();
		if(fieldName.equals("TREATINGCONSULTANT"))
			return getTreatingConsultant();
		if(fieldName.equals("REGIMENACRONYM"))
			return getRegimenAcronym();
		if(fieldName.equals("CANCERTREATEMENTINTENT"))
			return getCancerTreatementIntent();
		if(fieldName.equals("DATEDECISIONTOTREAT"))
			return getDateDecisionToTreat();
		if(fieldName.equals("TREATMENTRESPONSE"))
			return getTreatmentResponse();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getStartDateIsNotNull()
	{
		return this.startdate != null;
	}
	public ims.framework.utils.Date getStartDate()
	{
		return this.startdate;
	}
	public void setStartDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.startdate = value;
	}
	public boolean getTreatingConsultantIsNotNull()
	{
		return this.treatingconsultant != null;
	}
	public ims.core.vo.HcpLiteVo getTreatingConsultant()
	{
		return this.treatingconsultant;
	}
	public void setTreatingConsultant(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.treatingconsultant = value;
	}
	public boolean getRegimenAcronymIsNotNull()
	{
		return this.regimenacronym != null;
	}
	public ims.oncology.vo.lookups.RegimenAcronym getRegimenAcronym()
	{
		return this.regimenacronym;
	}
	public void setRegimenAcronym(ims.oncology.vo.lookups.RegimenAcronym value)
	{
		this.isValidated = false;
		this.regimenacronym = value;
	}
	public boolean getCancerTreatementIntentIsNotNull()
	{
		return this.cancertreatementintent != null;
	}
	public ims.oncology.vo.lookups.CancerTreatmentIntent getCancerTreatementIntent()
	{
		return this.cancertreatementintent;
	}
	public void setCancerTreatementIntent(ims.oncology.vo.lookups.CancerTreatmentIntent value)
	{
		this.isValidated = false;
		this.cancertreatementintent = value;
	}
	public boolean getDateDecisionToTreatIsNotNull()
	{
		return this.datedecisiontotreat != null;
	}
	public ims.framework.utils.Date getDateDecisionToTreat()
	{
		return this.datedecisiontotreat;
	}
	public void setDateDecisionToTreat(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.datedecisiontotreat = value;
	}
	public boolean getTreatmentResponseIsNotNull()
	{
		return this.treatmentresponse != null;
	}
	public ims.oncology.vo.lookups.DrugProgramResponse getTreatmentResponse()
	{
		return this.treatmentresponse;
	}
	public void setTreatmentResponse(ims.oncology.vo.lookups.DrugProgramResponse value)
	{
		this.isValidated = false;
		this.treatmentresponse = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.treatingconsultant == null)
			listOfErrors.add("TreatingConsultant is mandatory");
		if(this.regimenacronym == null)
			listOfErrors.add("RegimenAcronym is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ChemotherapyDetailsListVo clone = new ChemotherapyDetailsListVo(this.id, this.version);
		
		if(this.startdate == null)
			clone.startdate = null;
		else
			clone.startdate = (ims.framework.utils.Date)this.startdate.clone();
		if(this.treatingconsultant == null)
			clone.treatingconsultant = null;
		else
			clone.treatingconsultant = (ims.core.vo.HcpLiteVo)this.treatingconsultant.clone();
		if(this.regimenacronym == null)
			clone.regimenacronym = null;
		else
			clone.regimenacronym = (ims.oncology.vo.lookups.RegimenAcronym)this.regimenacronym.clone();
		if(this.cancertreatementintent == null)
			clone.cancertreatementintent = null;
		else
			clone.cancertreatementintent = (ims.oncology.vo.lookups.CancerTreatmentIntent)this.cancertreatementintent.clone();
		if(this.datedecisiontotreat == null)
			clone.datedecisiontotreat = null;
		else
			clone.datedecisiontotreat = (ims.framework.utils.Date)this.datedecisiontotreat.clone();
		if(this.treatmentresponse == null)
			clone.treatmentresponse = null;
		else
			clone.treatmentresponse = (ims.oncology.vo.lookups.DrugProgramResponse)this.treatmentresponse.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ChemotherapyDetailsListVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ChemotherapyDetailsListVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ChemotherapyDetailsListVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ChemotherapyDetailsListVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.startdate != null)
			count++;
		if(this.treatingconsultant != null)
			count++;
		if(this.regimenacronym != null)
			count++;
		if(this.cancertreatementintent != null)
			count++;
		if(this.datedecisiontotreat != null)
			count++;
		if(this.treatmentresponse != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.framework.utils.Date startdate;
	protected ims.core.vo.HcpLiteVo treatingconsultant;
	protected ims.oncology.vo.lookups.RegimenAcronym regimenacronym;
	protected ims.oncology.vo.lookups.CancerTreatmentIntent cancertreatementintent;
	protected ims.framework.utils.Date datedecisiontotreat;
	protected ims.oncology.vo.lookups.DrugProgramResponse treatmentresponse;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
