//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.vo;

/**
 * Linked to OCRR.OrderingResults.OcsOrderSession business object (ID: 1070100000).
 */
public class OcsOrderVo extends ims.ocrr.vo.OcsOrderShortVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public OcsOrderVo()
	{
	}
	public OcsOrderVo(Integer id, int version)
	{
		super(id, version);
	}
	public OcsOrderVo(ims.ocrr.vo.beans.OcsOrderVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.orderedby = bean.getOrderedBy() == null ? null : bean.getOrderedBy().buildVo();
		this.responsibleclinician = bean.getResponsibleClinician() == null ? null : bean.getResponsibleClinician().buildVo();
		this.responsiblegp = bean.getResponsibleGp() == null ? null : bean.getResponsibleGp().buildVo();
		this.patientlocation = bean.getPatientLocation() == null ? null : bean.getPatientLocation().buildVo();
		this.patientclinic = bean.getPatientClinic() == null ? null : bean.getPatientClinic().buildVo();
		this.additclinnotes = bean.getAdditClinNotes();
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo();
		this.orderinghospital = bean.getOrderingHospital() == null ? null : new ims.core.resource.place.vo.LocSiteRefVo(new Integer(bean.getOrderingHospital().getId()), bean.getOrderingHospital().getVersion());
		this.outpatientdept = bean.getOutpatientDept() == null ? null : bean.getOutpatientDept().buildVo();
		this.authorisationorderstatus = bean.getAuthorisationOrderStatus() == null ? null : ims.ocrr.vo.lookups.AuthorisationOrderStatus.buildLookup(bean.getAuthorisationOrderStatus());
		this.clinicaltrial = bean.getClinicalTrial();
		this.clinicaltrialtxt = bean.getClinicalTrialTxt();
		this.patmobility = bean.getPatMobility() == null ? null : ims.ocrr.vo.lookups.OrderPatMobility.buildLookup(bean.getPatMobility());
		this.ordercategory = bean.getOrderCategory() == null ? null : ims.ocrr.vo.lookups.OrderCategory.buildLookup(bean.getOrderCategory());
		this.specimens = ims.ocrr.vo.OrderSpecimenVoCollection.buildFromBeanCollection(bean.getSpecimens());
		this.investigations = ims.ocrr.vo.OrderInvestigationVoCollection.buildFromBeanCollection(bean.getInvestigations());
		this.wasprocessed = bean.getWasProcessed();
		this.clinicalinfo = bean.getClinicalInfo() == null ? null : bean.getClinicalInfo().buildVo();
		this.reportto = ims.ocrr.vo.OcsReportToVoCollection.buildFromBeanCollection(bean.getReportTo());
		this.summaryclinicalinformation = bean.getSummaryClinicalInformation();
		this.bleepextnumber = bean.getBleepExtNumber();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.ocrr.vo.beans.OcsOrderVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.orderedby = bean.getOrderedBy() == null ? null : bean.getOrderedBy().buildVo(map);
		this.responsibleclinician = bean.getResponsibleClinician() == null ? null : bean.getResponsibleClinician().buildVo(map);
		this.responsiblegp = bean.getResponsibleGp() == null ? null : bean.getResponsibleGp().buildVo(map);
		this.patientlocation = bean.getPatientLocation() == null ? null : bean.getPatientLocation().buildVo(map);
		this.patientclinic = bean.getPatientClinic() == null ? null : bean.getPatientClinic().buildVo(map);
		this.additclinnotes = bean.getAdditClinNotes();
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.carecontext = bean.getCareContext() == null ? null : bean.getCareContext().buildVo(map);
		this.orderinghospital = bean.getOrderingHospital() == null ? null : new ims.core.resource.place.vo.LocSiteRefVo(new Integer(bean.getOrderingHospital().getId()), bean.getOrderingHospital().getVersion());
		this.outpatientdept = bean.getOutpatientDept() == null ? null : bean.getOutpatientDept().buildVo(map);
		this.authorisationorderstatus = bean.getAuthorisationOrderStatus() == null ? null : ims.ocrr.vo.lookups.AuthorisationOrderStatus.buildLookup(bean.getAuthorisationOrderStatus());
		this.clinicaltrial = bean.getClinicalTrial();
		this.clinicaltrialtxt = bean.getClinicalTrialTxt();
		this.patmobility = bean.getPatMobility() == null ? null : ims.ocrr.vo.lookups.OrderPatMobility.buildLookup(bean.getPatMobility());
		this.ordercategory = bean.getOrderCategory() == null ? null : ims.ocrr.vo.lookups.OrderCategory.buildLookup(bean.getOrderCategory());
		this.specimens = ims.ocrr.vo.OrderSpecimenVoCollection.buildFromBeanCollection(bean.getSpecimens());
		this.investigations = ims.ocrr.vo.OrderInvestigationVoCollection.buildFromBeanCollection(bean.getInvestigations());
		this.wasprocessed = bean.getWasProcessed();
		this.clinicalinfo = bean.getClinicalInfo() == null ? null : bean.getClinicalInfo().buildVo(map);
		this.reportto = ims.ocrr.vo.OcsReportToVoCollection.buildFromBeanCollection(bean.getReportTo());
		this.summaryclinicalinformation = bean.getSummaryClinicalInformation();
		this.bleepextnumber = bean.getBleepExtNumber();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.ocrr.vo.beans.OcsOrderVoBean bean = null;
		if(map != null)
			bean = (ims.ocrr.vo.beans.OcsOrderVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.ocrr.vo.beans.OcsOrderVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CLINICALTRIAL"))
			return getClinicalTrial();
		if(fieldName.equals("CLINICALTRIALTXT"))
			return getClinicalTrialTxt();
		if(fieldName.equals("PATMOBILITY"))
			return getPatMobility();
		if(fieldName.equals("ORDERCATEGORY"))
			return getOrderCategory();
		if(fieldName.equals("SPECIMENS"))
			return getSpecimens();
		if(fieldName.equals("INVESTIGATIONS"))
			return getInvestigations();
		if(fieldName.equals("WASPROCESSED"))
			return getWasProcessed();
		if(fieldName.equals("CLINICALINFO"))
			return getClinicalInfo();
		if(fieldName.equals("REPORTTO"))
			return getReportTo();
		if(fieldName.equals("SUMMARYCLINICALINFORMATION"))
			return getSummaryClinicalInformation();
		if(fieldName.equals("BLEEPEXTNUMBER"))
			return getBleepExtNumber();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getClinicalTrialIsNotNull()
	{
		return this.clinicaltrial != null;
	}
	public Boolean getClinicalTrial()
	{
		return this.clinicaltrial;
	}
	public void setClinicalTrial(Boolean value)
	{
		this.isValidated = false;
		this.clinicaltrial = value;
	}
	public boolean getClinicalTrialTxtIsNotNull()
	{
		return this.clinicaltrialtxt != null;
	}
	public String getClinicalTrialTxt()
	{
		return this.clinicaltrialtxt;
	}
	public static int getClinicalTrialTxtMaxLength()
	{
		return 150;
	}
	public void setClinicalTrialTxt(String value)
	{
		this.isValidated = false;
		this.clinicaltrialtxt = value;
	}
	public boolean getPatMobilityIsNotNull()
	{
		return this.patmobility != null;
	}
	public ims.ocrr.vo.lookups.OrderPatMobility getPatMobility()
	{
		return this.patmobility;
	}
	public void setPatMobility(ims.ocrr.vo.lookups.OrderPatMobility value)
	{
		this.isValidated = false;
		this.patmobility = value;
	}
	public boolean getOrderCategoryIsNotNull()
	{
		return this.ordercategory != null;
	}
	public ims.ocrr.vo.lookups.OrderCategory getOrderCategory()
	{
		return this.ordercategory;
	}
	public void setOrderCategory(ims.ocrr.vo.lookups.OrderCategory value)
	{
		this.isValidated = false;
		this.ordercategory = value;
	}
	public boolean getSpecimensIsNotNull()
	{
		return this.specimens != null;
	}
	public ims.ocrr.vo.OrderSpecimenVoCollection getSpecimens()
	{
		return this.specimens;
	}
	public void setSpecimens(ims.ocrr.vo.OrderSpecimenVoCollection value)
	{
		this.isValidated = false;
		this.specimens = value;
	}
	public boolean getInvestigationsIsNotNull()
	{
		return this.investigations != null;
	}
	public ims.ocrr.vo.OrderInvestigationVoCollection getInvestigations()
	{
		return this.investigations;
	}
	public void setInvestigations(ims.ocrr.vo.OrderInvestigationVoCollection value)
	{
		this.isValidated = false;
		this.investigations = value;
	}
	public boolean getWasProcessedIsNotNull()
	{
		return this.wasprocessed != null;
	}
	public Boolean getWasProcessed()
	{
		return this.wasprocessed;
	}
	public void setWasProcessed(Boolean value)
	{
		this.isValidated = false;
		this.wasprocessed = value;
	}
	public boolean getClinicalInfoIsNotNull()
	{
		return this.clinicalinfo != null;
	}
	public ims.ocrr.vo.OcsQASessionVo getClinicalInfo()
	{
		return this.clinicalinfo;
	}
	public void setClinicalInfo(ims.ocrr.vo.OcsQASessionVo value)
	{
		this.isValidated = false;
		this.clinicalinfo = value;
	}
	public boolean getReportToIsNotNull()
	{
		return this.reportto != null;
	}
	public ims.ocrr.vo.OcsReportToVoCollection getReportTo()
	{
		return this.reportto;
	}
	public void setReportTo(ims.ocrr.vo.OcsReportToVoCollection value)
	{
		this.isValidated = false;
		this.reportto = value;
	}
	public boolean getSummaryClinicalInformationIsNotNull()
	{
		return this.summaryclinicalinformation != null;
	}
	public String getSummaryClinicalInformation()
	{
		return this.summaryclinicalinformation;
	}
	public static int getSummaryClinicalInformationMaxLength()
	{
		return 2000;
	}
	public void setSummaryClinicalInformation(String value)
	{
		this.isValidated = false;
		this.summaryclinicalinformation = value;
	}
	public boolean getBleepExtNumberIsNotNull()
	{
		return this.bleepextnumber != null;
	}
	public String getBleepExtNumber()
	{
		return this.bleepextnumber;
	}
	public static int getBleepExtNumberMaxLength()
	{
		return 50;
	}
	public void setBleepExtNumber(String value)
	{
		this.isValidated = false;
		this.bleepextnumber = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.specimens != null)
		{
			if(!this.specimens.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.investigations != null)
		{
			if(!this.investigations.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.clinicalinfo != null)
		{
			if(!this.clinicalinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.reportto != null)
		{
			if(!this.reportto.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.clinicaltrial == null)
			listOfErrors.add("ClinicalTrial is mandatory");
		if(this.clinicaltrialtxt != null)
			if(this.clinicaltrialtxt.length() > 150)
				listOfErrors.add("The length of the field [clinicaltrialtxt] in the value object [ims.ocrr.vo.OcsOrderVo] is too big. It should be less or equal to 150");
		if(this.specimens != null)
		{
			String[] listOfOtherErrors = this.specimens.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.investigations == null || this.investigations.size() == 0)
			listOfErrors.add("Investigations are mandatory");
		if(this.investigations != null)
		{
			String[] listOfOtherErrors = this.investigations.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.wasprocessed == null)
			listOfErrors.add("wasProcessed is mandatory");
		if(this.clinicalinfo != null)
		{
			String[] listOfOtherErrors = this.clinicalinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.reportto != null)
		{
			String[] listOfOtherErrors = this.reportto.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.summaryclinicalinformation != null)
			if(this.summaryclinicalinformation.length() > 2000)
				listOfErrors.add("The length of the field [summaryclinicalinformation] in the value object [ims.ocrr.vo.OcsOrderVo] is too big. It should be less or equal to 2000");
		if(this.bleepextnumber != null)
			if(this.bleepextnumber.length() > 50)
				listOfErrors.add("The length of the field [bleepextnumber] in the value object [ims.ocrr.vo.OcsOrderVo] is too big. It should be less or equal to 50");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		OcsOrderVo clone = new OcsOrderVo(this.id, this.version);
		
		clone.clinicalcontact = this.clinicalcontact;
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientShort)this.patient.clone();
		if(this.orderedby == null)
			clone.orderedby = null;
		else
			clone.orderedby = (ims.core.vo.MemberOfStaffLiteVo)this.orderedby.clone();
		if(this.responsibleclinician == null)
			clone.responsibleclinician = null;
		else
			clone.responsibleclinician = (ims.core.vo.HcpLiteVo)this.responsibleclinician.clone();
		if(this.responsiblegp == null)
			clone.responsiblegp = null;
		else
			clone.responsiblegp = (ims.core.vo.GpLiteVo)this.responsiblegp.clone();
		if(this.patientlocation == null)
			clone.patientlocation = null;
		else
			clone.patientlocation = (ims.core.vo.LocationLiteVo)this.patientlocation.clone();
		if(this.patientclinic == null)
			clone.patientclinic = null;
		else
			clone.patientclinic = (ims.core.vo.ClinicLiteVo)this.patientclinic.clone();
		clone.additclinnotes = this.additclinnotes;
		if(this.sysinfo == null)
			clone.sysinfo = null;
		else
			clone.sysinfo = (ims.vo.SystemInformation)this.sysinfo.clone();
		if(this.carecontext == null)
			clone.carecontext = null;
		else
			clone.carecontext = (ims.core.vo.CareContextPasVo)this.carecontext.clone();
		clone.orderinghospital = this.orderinghospital;
		if(this.outpatientdept == null)
			clone.outpatientdept = null;
		else
			clone.outpatientdept = (ims.core.vo.LocationLiteVo)this.outpatientdept.clone();
		if(this.authorisationorderstatus == null)
			clone.authorisationorderstatus = null;
		else
			clone.authorisationorderstatus = (ims.ocrr.vo.lookups.AuthorisationOrderStatus)this.authorisationorderstatus.clone();
		clone.clinicaltrial = this.clinicaltrial;
		clone.clinicaltrialtxt = this.clinicaltrialtxt;
		if(this.patmobility == null)
			clone.patmobility = null;
		else
			clone.patmobility = (ims.ocrr.vo.lookups.OrderPatMobility)this.patmobility.clone();
		if(this.ordercategory == null)
			clone.ordercategory = null;
		else
			clone.ordercategory = (ims.ocrr.vo.lookups.OrderCategory)this.ordercategory.clone();
		if(this.specimens == null)
			clone.specimens = null;
		else
			clone.specimens = (ims.ocrr.vo.OrderSpecimenVoCollection)this.specimens.clone();
		if(this.investigations == null)
			clone.investigations = null;
		else
			clone.investigations = (ims.ocrr.vo.OrderInvestigationVoCollection)this.investigations.clone();
		clone.wasprocessed = this.wasprocessed;
		if(this.clinicalinfo == null)
			clone.clinicalinfo = null;
		else
			clone.clinicalinfo = (ims.ocrr.vo.OcsQASessionVo)this.clinicalinfo.clone();
		if(this.reportto == null)
			clone.reportto = null;
		else
			clone.reportto = (ims.ocrr.vo.OcsReportToVoCollection)this.reportto.clone();
		clone.summaryclinicalinformation = this.summaryclinicalinformation;
		clone.bleepextnumber = this.bleepextnumber;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(OcsOrderVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A OcsOrderVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		OcsOrderVo compareObj = (OcsOrderVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_OcsOrderSession() == null && compareObj.getID_OcsOrderSession() != null)
				return -1;
			if(this.getID_OcsOrderSession() != null && compareObj.getID_OcsOrderSession() == null)
				return 1;
			if(this.getID_OcsOrderSession() != null && compareObj.getID_OcsOrderSession() != null)
				retVal = this.getID_OcsOrderSession().compareTo(compareObj.getID_OcsOrderSession());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.clinicaltrial != null)
			count++;
		if(this.clinicaltrialtxt != null)
			count++;
		if(this.patmobility != null)
			count++;
		if(this.ordercategory != null)
			count++;
		if(this.specimens != null)
			count++;
		if(this.investigations != null)
			count++;
		if(this.wasprocessed != null)
			count++;
		if(this.clinicalinfo != null)
			count++;
		if(this.reportto != null)
			count++;
		if(this.summaryclinicalinformation != null)
			count++;
		if(this.bleepextnumber != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 11;
	}
	protected Boolean clinicaltrial;
	protected String clinicaltrialtxt;
	protected ims.ocrr.vo.lookups.OrderPatMobility patmobility;
	protected ims.ocrr.vo.lookups.OrderCategory ordercategory;
	protected ims.ocrr.vo.OrderSpecimenVoCollection specimens;
	protected ims.ocrr.vo.OrderInvestigationVoCollection investigations;
	protected Boolean wasprocessed;
	protected ims.ocrr.vo.OcsQASessionVo clinicalinfo;
	protected ims.ocrr.vo.OcsReportToVoCollection reportto;
	protected String summaryclinicalinformation;
	protected String bleepextnumber;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
