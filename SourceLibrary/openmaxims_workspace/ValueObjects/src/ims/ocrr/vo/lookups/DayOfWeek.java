//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.vo.lookups;

import ims.framework.cn.data.TreeNode;
import java.util.ArrayList;
import ims.framework.utils.Image;
import ims.framework.utils.Color;

public class DayOfWeek extends ims.vo.LookupInstVo implements TreeNode
{
	private static final long serialVersionUID = 1L;

	public DayOfWeek()
	{
		super();
	}
	public DayOfWeek(int id)
	{
		super(id, "", true);
	}
	public DayOfWeek(int id, String text, boolean active)
	{
		super(id, text, active, null, null, null);
	}
	public DayOfWeek(int id, String text, boolean active, DayOfWeek parent, Image image)
	{
		super(id, text, active, parent, image);
	}
	public DayOfWeek(int id, String text, boolean active, DayOfWeek parent, Image image, Color color)
	{
		super(id, text, active, parent, image, color);
	}
	public DayOfWeek(int id, String text, boolean active, DayOfWeek parent, Image image, Color color, int order)
	{
		super(id, text, active, parent, image, color, order);
	}
	public static DayOfWeek buildLookup(ims.vo.LookupInstanceBean bean)
	{
		return new DayOfWeek(bean.getId(), bean.getText(), bean.isActive());
	}
	public String toString()
	{
		if(getText() != null)
			return getText();
		return "";
	}
	public TreeNode getParentNode()
	{
		return (DayOfWeek)super.getParentInstance();
	}
	public DayOfWeek getParent()
	{
		return (DayOfWeek)super.getParentInstance();
	}
	public void setParent(DayOfWeek parent)
	{
		super.setParentInstance(parent);
	}
	public TreeNode[] getChildren()
	{
		ArrayList children = super.getChildInstances();
		DayOfWeek[] typedChildren = new DayOfWeek[children.size()];
		for (int i = 0; i < children.size(); i++)
		{
			typedChildren[i] = (DayOfWeek)children.get(i);
		}
		return typedChildren;
	}
	public int addChild(TreeNode child)
	{
		if (child instanceof DayOfWeek)
		{
			super.addChild((DayOfWeek)child);
		}
		return super.getChildInstances().size();
	}
	public int removeChild(TreeNode child)
	{
		if (child instanceof DayOfWeek)
		{
			super.removeChild((DayOfWeek)child);
		}
		return super.getChildInstances().size();
	}
	public Image getExpandedImage()
	{
		return super.getImage();
	}
	public Image getCollapsedImage()
	{
		return super.getImage();
	}
	public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()
	{
		DayOfWeekCollection result = new DayOfWeekCollection();
		result.add(MONDAY);
		result.add(TUESDAY);
		result.add(WEDNESDAY);
		result.add(THURSDAY);
		result.add(FRIDAY);
		result.add(SATURDAY);
		result.add(SUNDAY);
		result.add(PUBLICHOLIDAY);
		return result;
	}
	public static DayOfWeek[] getNegativeInstances()
	{
		DayOfWeek[] instances = new DayOfWeek[8];
		instances[0] = MONDAY;
		instances[1] = TUESDAY;
		instances[2] = WEDNESDAY;
		instances[3] = THURSDAY;
		instances[4] = FRIDAY;
		instances[5] = SATURDAY;
		instances[6] = SUNDAY;
		instances[7] = PUBLICHOLIDAY;
		return instances;
	}
	public static String[] getNegativeInstanceNames()
	{
		String[] negativeInstances = new String[8];
		negativeInstances[0] = "MONDAY";
		negativeInstances[1] = "TUESDAY";
		negativeInstances[2] = "WEDNESDAY";
		negativeInstances[3] = "THURSDAY";
		negativeInstances[4] = "FRIDAY";
		negativeInstances[5] = "SATURDAY";
		negativeInstances[6] = "SUNDAY";
		negativeInstances[7] = "PUBLICHOLIDAY";
		return negativeInstances;
	}
	public static DayOfWeek getNegativeInstance(String name)
	{
		if(name == null)
			return null;
		String[] negativeInstances = getNegativeInstanceNames();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].equals(name))
				return getNegativeInstances()[i];
		}
		return null;
	}
	public static DayOfWeek getNegativeInstance(Integer id)
	{
		if(id == null)
			return null;
		DayOfWeek[] negativeInstances = getNegativeInstances();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].getID() == id)
				return negativeInstances[i];
		}
		return null;
	}
	public int getTypeId()
	{
		return TYPE_ID;
	}
	public static final int TYPE_ID = 1161042;
	public static final DayOfWeek MONDAY = new DayOfWeek(-845, "MONDAY", true, null, null, Color.Default);
	public static final DayOfWeek TUESDAY = new DayOfWeek(-846, "TUESDAY", true, null, null, Color.Default);
	public static final DayOfWeek WEDNESDAY = new DayOfWeek(-847, "WEDNESDAY", true, null, null, Color.Default);
	public static final DayOfWeek THURSDAY = new DayOfWeek(-848, "THURSDAY", true, null, null, Color.Default);
	public static final DayOfWeek FRIDAY = new DayOfWeek(-849, "FRIDAY", true, null, null, Color.Default);
	public static final DayOfWeek SATURDAY = new DayOfWeek(-850, "SATURDAY", true, null, null, Color.Default);
	public static final DayOfWeek SUNDAY = new DayOfWeek(-851, "SUNDAY", true, null, null, Color.Default);
	public static final DayOfWeek PUBLICHOLIDAY = new DayOfWeek(-852, "PUBLICHOLIDAY", true, null, null, Color.Default);
}
