//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.vo;

/**
 * Linked to OCRR.OrderingResults.OcsOrderSession business object (ID: 1070100000).
 */
public class OcsOrderInvVo extends ims.ocrr.orderingresults.vo.OcsOrderSessionRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public OcsOrderInvVo()
	{
	}
	public OcsOrderInvVo(Integer id, int version)
	{
		super(id, version);
	}
	public OcsOrderInvVo(ims.ocrr.vo.beans.OcsOrderInvVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo();
		this.orderedby = bean.getOrderedBy() == null ? null : bean.getOrderedBy().buildVo();
		this.patientclinic = bean.getPatientClinic() == null ? null : bean.getPatientClinic().buildVo();
		this.patientlocation = bean.getPatientLocation() == null ? null : bean.getPatientLocation().buildVo();
		this.investigations = ims.ocrr.vo.OrderInvestigationOcsOrderVoCollection.buildFromBeanCollection(bean.getInvestigations());
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.outpatientdepartment = bean.getOutpatientDepartment() == null ? null : bean.getOutpatientDepartment().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.ocrr.vo.beans.OcsOrderInvVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : bean.getPatient().buildVo(map);
		this.orderedby = bean.getOrderedBy() == null ? null : bean.getOrderedBy().buildVo(map);
		this.patientclinic = bean.getPatientClinic() == null ? null : bean.getPatientClinic().buildVo(map);
		this.patientlocation = bean.getPatientLocation() == null ? null : bean.getPatientLocation().buildVo(map);
		this.investigations = ims.ocrr.vo.OrderInvestigationOcsOrderVoCollection.buildFromBeanCollection(bean.getInvestigations());
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.outpatientdepartment = bean.getOutpatientDepartment() == null ? null : bean.getOutpatientDepartment().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.ocrr.vo.beans.OcsOrderInvVoBean bean = null;
		if(map != null)
			bean = (ims.ocrr.vo.beans.OcsOrderInvVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.ocrr.vo.beans.OcsOrderInvVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("ORDEREDBY"))
			return getOrderedBy();
		if(fieldName.equals("PATIENTCLINIC"))
			return getPatientClinic();
		if(fieldName.equals("PATIENTLOCATION"))
			return getPatientLocation();
		if(fieldName.equals("INVESTIGATIONS"))
			return getInvestigations();
		if(fieldName.equals("SYSINFO"))
			return getSysInfo();
		if(fieldName.equals("OUTPATIENTDEPARTMENT"))
			return getOutpatientDepartment();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.vo.PatientShort getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.vo.PatientShort value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getOrderedByIsNotNull()
	{
		return this.orderedby != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getOrderedBy()
	{
		return this.orderedby;
	}
	public void setOrderedBy(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.orderedby = value;
	}
	public boolean getPatientClinicIsNotNull()
	{
		return this.patientclinic != null;
	}
	public ims.core.vo.ClinicLiteVo getPatientClinic()
	{
		return this.patientclinic;
	}
	public void setPatientClinic(ims.core.vo.ClinicLiteVo value)
	{
		this.isValidated = false;
		this.patientclinic = value;
	}
	public boolean getPatientLocationIsNotNull()
	{
		return this.patientlocation != null;
	}
	public ims.core.vo.LocationLiteVo getPatientLocation()
	{
		return this.patientlocation;
	}
	public void setPatientLocation(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.patientlocation = value;
	}
	public boolean getInvestigationsIsNotNull()
	{
		return this.investigations != null;
	}
	public ims.ocrr.vo.OrderInvestigationOcsOrderVoCollection getInvestigations()
	{
		return this.investigations;
	}
	public void setInvestigations(ims.ocrr.vo.OrderInvestigationOcsOrderVoCollection value)
	{
		this.isValidated = false;
		this.investigations = value;
	}
	public boolean getSysInfoIsNotNull()
	{
		return this.sysinfo != null;
	}
	public ims.vo.SystemInformation getSysInfo()
	{
		return this.sysinfo;
	}
	public void setSysInfo(ims.vo.SystemInformation value)
	{
		this.isValidated = false;
		this.sysinfo = value;
	}
	public boolean getOutpatientDepartmentIsNotNull()
	{
		return this.outpatientdepartment != null;
	}
	public ims.core.vo.LocationLiteVo getOutpatientDepartment()
	{
		return this.outpatientdepartment;
	}
	public void setOutpatientDepartment(ims.core.vo.LocationLiteVo value)
	{
		this.isValidated = false;
		this.outpatientdepartment = value;
	}
	/**
	* toString
	*/
		public String toString()
		{
			StringBuffer text = new StringBuffer();
			
			if(this.getSysInfoIsNotNull() && this.getSysInfo().getCreationDateTime() != null)
				text.append(this.getSysInfo().getCreationDateTime().toString());
			
			if(this.getInvestigationsIsNotNull())
			{
				for(int i=0;i<this.getInvestigations().size();i++)
				{
					if(i == 0)
						text.append(" - ");
					
					OrderInvestigationOcsOrderVo voOrderInv = this.getInvestigations().get(i);
					if(voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull())
					{
						text.append(voOrderInv.getInvestigation().getInvestigationIndex().getName());
						if(i > 0 && this.getInvestigations().size() - i > 0)
							text.append(",");
					}
				}
			}
			return text.toString();		
		}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.patient != null)
		{
			if(!this.patient.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.orderedby != null)
		{
			if(!this.orderedby.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.patientclinic != null)
		{
			if(!this.patientclinic.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.patientlocation != null)
		{
			if(!this.patientlocation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.investigations != null)
		{
			if(!this.investigations.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.patient != null)
		{
			String[] listOfOtherErrors = this.patient.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.orderedby != null)
		{
			String[] listOfOtherErrors = this.orderedby.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.patientclinic != null)
		{
			String[] listOfOtherErrors = this.patientclinic.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.patientlocation != null)
		{
			String[] listOfOtherErrors = this.patientlocation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.investigations == null || this.investigations.size() == 0)
			listOfErrors.add("Investigations are mandatory");
		if(this.investigations != null)
		{
			String[] listOfOtherErrors = this.investigations.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		OcsOrderInvVo clone = new OcsOrderInvVo(this.id, this.version);
		
		if(this.patient == null)
			clone.patient = null;
		else
			clone.patient = (ims.core.vo.PatientShort)this.patient.clone();
		if(this.orderedby == null)
			clone.orderedby = null;
		else
			clone.orderedby = (ims.core.vo.MemberOfStaffLiteVo)this.orderedby.clone();
		if(this.patientclinic == null)
			clone.patientclinic = null;
		else
			clone.patientclinic = (ims.core.vo.ClinicLiteVo)this.patientclinic.clone();
		if(this.patientlocation == null)
			clone.patientlocation = null;
		else
			clone.patientlocation = (ims.core.vo.LocationLiteVo)this.patientlocation.clone();
		if(this.investigations == null)
			clone.investigations = null;
		else
			clone.investigations = (ims.ocrr.vo.OrderInvestigationOcsOrderVoCollection)this.investigations.clone();
		if(this.sysinfo == null)
			clone.sysinfo = null;
		else
			clone.sysinfo = (ims.vo.SystemInformation)this.sysinfo.clone();
		if(this.outpatientdepartment == null)
			clone.outpatientdepartment = null;
		else
			clone.outpatientdepartment = (ims.core.vo.LocationLiteVo)this.outpatientdepartment.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(OcsOrderInvVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A OcsOrderInvVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((OcsOrderInvVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((OcsOrderInvVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.orderedby != null)
			count++;
		if(this.patientclinic != null)
			count++;
		if(this.patientlocation != null)
			count++;
		if(this.investigations != null)
			count++;
		if(this.sysinfo != null)
			count++;
		if(this.outpatientdepartment != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected ims.core.vo.PatientShort patient;
	protected ims.core.vo.MemberOfStaffLiteVo orderedby;
	protected ims.core.vo.ClinicLiteVo patientclinic;
	protected ims.core.vo.LocationLiteVo patientlocation;
	protected ims.ocrr.vo.OrderInvestigationOcsOrderVoCollection investigations;
	protected ims.vo.SystemInformation sysinfo;
	protected ims.core.vo.LocationLiteVo outpatientdepartment;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
