//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.clinical.CommunityServices business object (ID: 1003100077).
 */
public class CommunityServiceVo extends ims.core.clinical.vo.CommunityServicesRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public CommunityServiceVo()
	{
	}
	public CommunityServiceVo(Integer id, int version)
	{
		super(id, version);
	}
	public CommunityServiceVo(ims.core.vo.beans.CommunityServiceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.locationservice = bean.getLocationService() == null ? null : bean.getLocationService().buildVo();
		this.currentfrequency = bean.getCurrentFrequency();
		this.comments = bean.getComments();
		this.iscurrentlyactive = bean.getIsCurrentlyActive();
		this.suppliedservice = bean.getSuppliedService() == null ? null : bean.getSuppliedService().buildVo();
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.dischargefrequency = bean.getDischargeFrequency();
		this.isdischargeservice = bean.getIsDischargeService();
		this.isserviceinplace = bean.getIsServiceInPlace();
		this.confirmeddate = bean.getConfirmedDate() == null ? null : bean.getConfirmedDate().buildDate();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.CommunityServiceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.locationservice = bean.getLocationService() == null ? null : bean.getLocationService().buildVo(map);
		this.currentfrequency = bean.getCurrentFrequency();
		this.comments = bean.getComments();
		this.iscurrentlyactive = bean.getIsCurrentlyActive();
		this.suppliedservice = bean.getSuppliedService() == null ? null : bean.getSuppliedService().buildVo(map);
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.dischargefrequency = bean.getDischargeFrequency();
		this.isdischargeservice = bean.getIsDischargeService();
		this.isserviceinplace = bean.getIsServiceInPlace();
		this.confirmeddate = bean.getConfirmedDate() == null ? null : bean.getConfirmedDate().buildDate();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.CommunityServiceVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.CommunityServiceVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.CommunityServiceVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("AUTHORINGINFORMATION"))
			return getAuthoringInformation();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("CLINICALCONTACT"))
			return getClinicalContact();
		if(fieldName.equals("LOCATIONSERVICE"))
			return getLocationService();
		if(fieldName.equals("CURRENTFREQUENCY"))
			return getCurrentFrequency();
		if(fieldName.equals("COMMENTS"))
			return getComments();
		if(fieldName.equals("ISCURRENTLYACTIVE"))
			return getIsCurrentlyActive();
		if(fieldName.equals("SUPPLIEDSERVICE"))
			return getSuppliedService();
		if(fieldName.equals("SERVICE"))
			return getService();
		if(fieldName.equals("DISCHARGEFREQUENCY"))
			return getDischargeFrequency();
		if(fieldName.equals("ISDISCHARGESERVICE"))
			return getIsDischargeService();
		if(fieldName.equals("ISSERVICEINPLACE"))
			return getIsServiceInPlace();
		if(fieldName.equals("CONFIRMEDDATE"))
			return getConfirmedDate();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAuthoringInformationIsNotNull()
	{
		return this.authoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInformation()
	{
		return this.authoringinformation;
	}
	public void setAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinformation = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.admin.vo.CareContextRefVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getClinicalContactIsNotNull()
	{
		return this.clinicalcontact != null;
	}
	public ims.core.admin.vo.ClinicalContactRefVo getClinicalContact()
	{
		return this.clinicalcontact;
	}
	public void setClinicalContact(ims.core.admin.vo.ClinicalContactRefVo value)
	{
		this.isValidated = false;
		this.clinicalcontact = value;
	}
	public boolean getLocationServiceIsNotNull()
	{
		return this.locationservice != null;
	}
	public ims.core.vo.LocationServiceVo getLocationService()
	{
		return this.locationservice;
	}
	public void setLocationService(ims.core.vo.LocationServiceVo value)
	{
		this.isValidated = false;
		this.locationservice = value;
	}
	public boolean getCurrentFrequencyIsNotNull()
	{
		return this.currentfrequency != null;
	}
	public String getCurrentFrequency()
	{
		return this.currentfrequency;
	}
	public static int getCurrentFrequencyMaxLength()
	{
		return 255;
	}
	public void setCurrentFrequency(String value)
	{
		this.isValidated = false;
		this.currentfrequency = value;
	}
	public boolean getCommentsIsNotNull()
	{
		return this.comments != null;
	}
	public String getComments()
	{
		return this.comments;
	}
	public static int getCommentsMaxLength()
	{
		return 255;
	}
	public void setComments(String value)
	{
		this.isValidated = false;
		this.comments = value;
	}
	public boolean getIsCurrentlyActiveIsNotNull()
	{
		return this.iscurrentlyactive != null;
	}
	public Boolean getIsCurrentlyActive()
	{
		return this.iscurrentlyactive;
	}
	public void setIsCurrentlyActive(Boolean value)
	{
		this.isValidated = false;
		this.iscurrentlyactive = value;
	}
	public boolean getSuppliedServiceIsNotNull()
	{
		return this.suppliedservice != null;
	}
	public ims.core.vo.SuppNetworkServiceProfessionDetailVo getSuppliedService()
	{
		return this.suppliedservice;
	}
	public void setSuppliedService(ims.core.vo.SuppNetworkServiceProfessionDetailVo value)
	{
		this.isValidated = false;
		this.suppliedservice = value;
	}
	public boolean getServiceIsNotNull()
	{
		return this.service != null;
	}
	public ims.core.vo.ServiceLiteVo getService()
	{
		return this.service;
	}
	public void setService(ims.core.vo.ServiceLiteVo value)
	{
		this.isValidated = false;
		this.service = value;
	}
	public boolean getDischargeFrequencyIsNotNull()
	{
		return this.dischargefrequency != null;
	}
	public String getDischargeFrequency()
	{
		return this.dischargefrequency;
	}
	public static int getDischargeFrequencyMaxLength()
	{
		return 255;
	}
	public void setDischargeFrequency(String value)
	{
		this.isValidated = false;
		this.dischargefrequency = value;
	}
	public boolean getIsDischargeServiceIsNotNull()
	{
		return this.isdischargeservice != null;
	}
	public Boolean getIsDischargeService()
	{
		return this.isdischargeservice;
	}
	public void setIsDischargeService(Boolean value)
	{
		this.isValidated = false;
		this.isdischargeservice = value;
	}
	public boolean getIsServiceInPlaceIsNotNull()
	{
		return this.isserviceinplace != null;
	}
	public Boolean getIsServiceInPlace()
	{
		return this.isserviceinplace;
	}
	public void setIsServiceInPlace(Boolean value)
	{
		this.isValidated = false;
		this.isserviceinplace = value;
	}
	public boolean getConfirmedDateIsNotNull()
	{
		return this.confirmeddate != null;
	}
	public ims.framework.utils.Date getConfirmedDate()
	{
		return this.confirmeddate;
	}
	public void setConfirmedDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.confirmeddate = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.locationservice != null)
		{
			if(!this.locationservice.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.suppliedservice != null)
		{
			if(!this.suppliedservice.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.service != null)
		{
			if(!this.service.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.locationservice != null)
		{
			String[] listOfOtherErrors = this.locationservice.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.suppliedservice != null)
		{
			String[] listOfOtherErrors = this.suppliedservice.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.service != null)
		{
			String[] listOfOtherErrors = this.service.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		CommunityServiceVo clone = new CommunityServiceVo(this.id, this.version);
		
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		clone.carecontext = this.carecontext;
		clone.clinicalcontact = this.clinicalcontact;
		if(this.locationservice == null)
			clone.locationservice = null;
		else
			clone.locationservice = (ims.core.vo.LocationServiceVo)this.locationservice.clone();
		clone.currentfrequency = this.currentfrequency;
		clone.comments = this.comments;
		clone.iscurrentlyactive = this.iscurrentlyactive;
		if(this.suppliedservice == null)
			clone.suppliedservice = null;
		else
			clone.suppliedservice = (ims.core.vo.SuppNetworkServiceProfessionDetailVo)this.suppliedservice.clone();
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceLiteVo)this.service.clone();
		clone.dischargefrequency = this.dischargefrequency;
		clone.isdischargeservice = this.isdischargeservice;
		clone.isserviceinplace = this.isserviceinplace;
		if(this.confirmeddate == null)
			clone.confirmeddate = null;
		else
			clone.confirmeddate = (ims.framework.utils.Date)this.confirmeddate.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(CommunityServiceVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A CommunityServiceVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((CommunityServiceVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((CommunityServiceVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.authoringinformation != null)
			count++;
		if(this.carecontext != null)
			count++;
		if(this.clinicalcontact != null)
			count++;
		if(this.locationservice != null)
			count++;
		if(this.currentfrequency != null)
			count++;
		if(this.comments != null)
			count++;
		if(this.iscurrentlyactive != null)
			count++;
		if(this.suppliedservice != null)
			count++;
		if(this.service != null)
			count++;
		if(this.dischargefrequency != null)
			count++;
		if(this.isdischargeservice != null)
			count++;
		if(this.isserviceinplace != null)
			count++;
		if(this.confirmeddate != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 13;
	}
	protected ims.core.vo.AuthoringInformationVo authoringinformation;
	protected ims.core.admin.vo.CareContextRefVo carecontext;
	protected ims.core.admin.vo.ClinicalContactRefVo clinicalcontact;
	protected ims.core.vo.LocationServiceVo locationservice;
	protected String currentfrequency;
	protected String comments;
	protected Boolean iscurrentlyactive;
	protected ims.core.vo.SuppNetworkServiceProfessionDetailVo suppliedservice;
	protected ims.core.vo.ServiceLiteVo service;
	protected String dischargefrequency;
	protected Boolean isdischargeservice;
	protected Boolean isserviceinplace;
	protected ims.framework.utils.Date confirmeddate;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
