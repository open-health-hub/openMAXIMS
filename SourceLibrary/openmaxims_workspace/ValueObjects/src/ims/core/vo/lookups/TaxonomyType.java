//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo.lookups;

import ims.framework.cn.data.TreeNode;
import java.util.ArrayList;
import ims.framework.utils.Image;
import ims.framework.utils.Color;

public class TaxonomyType extends ims.vo.LookupInstVo implements TreeNode
{
	private static final long serialVersionUID = 1L;

	public TaxonomyType()
	{
		super();
	}
	public TaxonomyType(int id)
	{
		super(id, "", true);
	}
	public TaxonomyType(int id, String text, boolean active)
	{
		super(id, text, active, null, null, null);
	}
	public TaxonomyType(int id, String text, boolean active, TaxonomyType parent, Image image)
	{
		super(id, text, active, parent, image);
	}
	public TaxonomyType(int id, String text, boolean active, TaxonomyType parent, Image image, Color color)
	{
		super(id, text, active, parent, image, color);
	}
	public TaxonomyType(int id, String text, boolean active, TaxonomyType parent, Image image, Color color, int order)
	{
		super(id, text, active, parent, image, color, order);
	}
	public static TaxonomyType buildLookup(ims.vo.LookupInstanceBean bean)
	{
		return new TaxonomyType(bean.getId(), bean.getText(), bean.isActive());
	}
	public String toString()
	{
		if(getText() != null)
			return getText();
		return "";
	}
	public TreeNode getParentNode()
	{
		return (TaxonomyType)super.getParentInstance();
	}
	public TaxonomyType getParent()
	{
		return (TaxonomyType)super.getParentInstance();
	}
	public void setParent(TaxonomyType parent)
	{
		super.setParentInstance(parent);
	}
	public TreeNode[] getChildren()
	{
		ArrayList children = super.getChildInstances();
		TaxonomyType[] typedChildren = new TaxonomyType[children.size()];
		for (int i = 0; i < children.size(); i++)
		{
			typedChildren[i] = (TaxonomyType)children.get(i);
		}
		return typedChildren;
	}
	public int addChild(TreeNode child)
	{
		if (child instanceof TaxonomyType)
		{
			super.addChild((TaxonomyType)child);
		}
		return super.getChildInstances().size();
	}
	public int removeChild(TreeNode child)
	{
		if (child instanceof TaxonomyType)
		{
			super.removeChild((TaxonomyType)child);
		}
		return super.getChildInstances().size();
	}
	public Image getExpandedImage()
	{
		return super.getImage();
	}
	public Image getCollapsedImage()
	{
		return super.getImage();
	}
	public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()
	{
		TaxonomyTypeCollection result = new TaxonomyTypeCollection();
		result.add(READ3);
		result.add(ICD10);
		result.add(ICD9);
		result.add(SNOMED);
		result.add(EXCH);
		result.add(NOMI);
		result.add(ICAB);
		result.add(PAS);
		result.add(RAD);
		result.add(PATH);
		result.add(NAT_CONS_CODE);
		result.add(NAT_GP_CODE);
		result.add(SDSID);
		result.add(NAT_LOC_CODE);
		result.add(NAT_SPEC_CODE);
		result.add(NAT_TREAT_CODE);
		result.add(ASSESSMENTSCORING);
		result.add(REPORTS);
		result.add(OPCS4);
		result.add(PCG);
		result.add(ENDOSCOPY);
		result.add(VTM);
		result.add(VMP);
		result.add(AMP);
		result.add(ACTIVITY_TYPE);
		result.add(ACTIVITY_CODE);
		result.add(TWO_WEEK_WAIT);
		result.add(PHARMACY);
		result.add(WORKLIST_MAPPING);
		result.add(INVESTIGATION);
		result.add(MAXIMS_INTERNAL);
		result.add(CDS);
		result.add(CLEARSPAN);
		result.add(HARVEST);
		result.add(CLINICAL_OUTCOME_CODE);
		result.add(EDRM);
		result.add(MAXIMS);
		result.add(ANE);
		result.add(WEB_SERVICE);
		result.add(OPWL);
		result.add(ICD03);
		result.add(DISPLAY_TEXT);
		result.add(CLINICAL_MAPPING);
		result.add(PCT);
		result.add(CCG);
		result.add(PASCONTRACT);
		return result;
	}
	public static TaxonomyType[] getNegativeInstances()
	{
		TaxonomyType[] instances = new TaxonomyType[46];
		instances[0] = READ3;
		instances[1] = ICD10;
		instances[2] = ICD9;
		instances[3] = SNOMED;
		instances[4] = EXCH;
		instances[5] = NOMI;
		instances[6] = ICAB;
		instances[7] = PAS;
		instances[8] = RAD;
		instances[9] = PATH;
		instances[10] = NAT_CONS_CODE;
		instances[11] = NAT_GP_CODE;
		instances[12] = SDSID;
		instances[13] = NAT_LOC_CODE;
		instances[14] = NAT_SPEC_CODE;
		instances[15] = NAT_TREAT_CODE;
		instances[16] = ASSESSMENTSCORING;
		instances[17] = REPORTS;
		instances[18] = OPCS4;
		instances[19] = PCG;
		instances[20] = ENDOSCOPY;
		instances[21] = VTM;
		instances[22] = VMP;
		instances[23] = AMP;
		instances[24] = ACTIVITY_TYPE;
		instances[25] = ACTIVITY_CODE;
		instances[26] = TWO_WEEK_WAIT;
		instances[27] = PHARMACY;
		instances[28] = WORKLIST_MAPPING;
		instances[29] = INVESTIGATION;
		instances[30] = MAXIMS_INTERNAL;
		instances[31] = CDS;
		instances[32] = CLEARSPAN;
		instances[33] = HARVEST;
		instances[34] = CLINICAL_OUTCOME_CODE;
		instances[35] = EDRM;
		instances[36] = MAXIMS;
		instances[37] = ANE;
		instances[38] = WEB_SERVICE;
		instances[39] = OPWL;
		instances[40] = ICD03;
		instances[41] = DISPLAY_TEXT;
		instances[42] = CLINICAL_MAPPING;
		instances[43] = PCT;
		instances[44] = CCG;
		instances[45] = PASCONTRACT;
		return instances;
	}
	public static String[] getNegativeInstanceNames()
	{
		String[] negativeInstances = new String[46];
		negativeInstances[0] = "READ3";
		negativeInstances[1] = "ICD10";
		negativeInstances[2] = "ICD9";
		negativeInstances[3] = "SNOMED";
		negativeInstances[4] = "EXCH";
		negativeInstances[5] = "NOMI";
		negativeInstances[6] = "ICAB";
		negativeInstances[7] = "PAS";
		negativeInstances[8] = "RAD";
		negativeInstances[9] = "PATH";
		negativeInstances[10] = "NAT_CONS_CODE";
		negativeInstances[11] = "NAT_GP_CODE";
		negativeInstances[12] = "SDSID";
		negativeInstances[13] = "NAT_LOC_CODE";
		negativeInstances[14] = "NAT_SPEC_CODE";
		negativeInstances[15] = "NAT_TREAT_CODE";
		negativeInstances[16] = "ASSESSMENTSCORING";
		negativeInstances[17] = "REPORTS";
		negativeInstances[18] = "OPCS4";
		negativeInstances[19] = "PCG";
		negativeInstances[20] = "ENDOSCOPY";
		negativeInstances[21] = "VTM";
		negativeInstances[22] = "VMP";
		negativeInstances[23] = "AMP";
		negativeInstances[24] = "ACTIVITY_TYPE";
		negativeInstances[25] = "ACTIVITY_CODE";
		negativeInstances[26] = "TWO_WEEK_WAIT";
		negativeInstances[27] = "PHARMACY";
		negativeInstances[28] = "WORKLIST_MAPPING";
		negativeInstances[29] = "INVESTIGATION";
		negativeInstances[30] = "MAXIMS_INTERNAL";
		negativeInstances[31] = "CDS";
		negativeInstances[32] = "CLEARSPAN";
		negativeInstances[33] = "HARVEST";
		negativeInstances[34] = "CLINICAL_OUTCOME_CODE";
		negativeInstances[35] = "EDRM";
		negativeInstances[36] = "MAXIMS";
		negativeInstances[37] = "ANE";
		negativeInstances[38] = "WEB_SERVICE";
		negativeInstances[39] = "OPWL";
		negativeInstances[40] = "ICD03";
		negativeInstances[41] = "DISPLAY_TEXT";
		negativeInstances[42] = "CLINICAL_MAPPING";
		negativeInstances[43] = "PCT";
		negativeInstances[44] = "CCG";
		negativeInstances[45] = "PASCONTRACT";
		return negativeInstances;
	}
	public static TaxonomyType getNegativeInstance(String name)
	{
		if(name == null)
			return null;
		String[] negativeInstances = getNegativeInstanceNames();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].equals(name))
				return getNegativeInstances()[i];
		}
		return null;
	}
	public static TaxonomyType getNegativeInstance(Integer id)
	{
		if(id == null)
			return null;
		TaxonomyType[] negativeInstances = getNegativeInstances();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].getID() == id)
				return negativeInstances[i];
		}
		return null;
	}
	public int getTypeId()
	{
		return TYPE_ID;
	}
	public static final int TYPE_ID = 1021047;
	public static final TaxonomyType READ3 = new TaxonomyType(-47, "Read3", true, null, null, Color.Black);
	public static final TaxonomyType ICD10 = new TaxonomyType(-279, "ICD10", true, null, null, Color.Default);
	public static final TaxonomyType ICD9 = new TaxonomyType(-514, "ICD 9", true, null, null, Color.Default);
	public static final TaxonomyType SNOMED = new TaxonomyType(-829, "Snomed", true, null, null, Color.Default);
	public static final TaxonomyType EXCH = new TaxonomyType(-513, "Exchequer", true, null, null, Color.Default);
	public static final TaxonomyType NOMI = new TaxonomyType(-525, "Nominal Codes", true, null, null, Color.Default);
	public static final TaxonomyType ICAB = new TaxonomyType(-609, "Choose and Book", true, null, null, Color.Default);
	public static final TaxonomyType PAS = new TaxonomyType(-286, "PAS", true, null, null, Color.Default);
	public static final TaxonomyType RAD = new TaxonomyType(-823, "Radiology System", true, null, null, Color.Default);
	public static final TaxonomyType PATH = new TaxonomyType(-822, "Pathology System", true, null, null, Color.Default);
	public static final TaxonomyType NAT_CONS_CODE = new TaxonomyType(-826, "National Consultant Code", true, null, null, Color.Default);
	public static final TaxonomyType NAT_GP_CODE = new TaxonomyType(-827, "National GP Code", true, null, null, Color.Default);
	public static final TaxonomyType SDSID = new TaxonomyType(-824, "SDS Id", true, null, null, Color.Default);
	public static final TaxonomyType NAT_LOC_CODE = new TaxonomyType(-828, "National Location Code", true, null, null, Color.Default);
	public static final TaxonomyType NAT_SPEC_CODE = new TaxonomyType(-915, "NAT_SPEC_CODE", true, null, null, Color.Default);
	public static final TaxonomyType NAT_TREAT_CODE = new TaxonomyType(-916, "NAT_TREAT_CODE", true, null, null, Color.Default);
	public static final TaxonomyType ASSESSMENTSCORING = new TaxonomyType(-1323, "Assessment Scoring", true, null, null, Color.Default);
	public static final TaxonomyType REPORTS = new TaxonomyType(-1475, "Report", true, null, null, Color.Default);
	public static final TaxonomyType OPCS4 = new TaxonomyType(-1513, "OPCS4", true, null, null, Color.Default);
	public static final TaxonomyType PCG = new TaxonomyType(-1540, "Primary Care Group", true, null, null, Color.Default);
	public static final TaxonomyType ENDOSCOPY = new TaxonomyType(-1559, "Endoscopy System", true, null, null, Color.Default);
	public static final TaxonomyType VTM = new TaxonomyType(-1577, "VTM", true, null, null, Color.Default);
	public static final TaxonomyType VMP = new TaxonomyType(-1584, "VMP", true, null, null, Color.Default);
	public static final TaxonomyType AMP = new TaxonomyType(-1585, "AMP", true, null, null, Color.Default);
	public static final TaxonomyType ACTIVITY_TYPE = new TaxonomyType(-1591, "Activity Type", true, null, null, Color.Default);
	public static final TaxonomyType ACTIVITY_CODE = new TaxonomyType(-1592, "Activity Code", true, null, null, Color.Default);
	public static final TaxonomyType TWO_WEEK_WAIT = new TaxonomyType(-1708, "Two Week Wait", true, null, null, Color.Default);
	public static final TaxonomyType PHARMACY = new TaxonomyType(-1761, "Pharmacy System", true, null, null, Color.Default);
	public static final TaxonomyType WORKLIST_MAPPING = new TaxonomyType(-1771, "Worklist Mapping", true, null, null, Color.Default);
	public static final TaxonomyType INVESTIGATION = new TaxonomyType(-1773, "Investigation", true, null, null, Color.Default);
	public static final TaxonomyType MAXIMS_INTERNAL = new TaxonomyType(-1811, "Maxims Internal", true, null, null, Color.Default);
	public static final TaxonomyType CDS = new TaxonomyType(-1850, "CDS", true, null, null, Color.Default);
	public static final TaxonomyType CLEARSPAN = new TaxonomyType(-2108, "CLEARSPAN", true, null, null, Color.Default);
	public static final TaxonomyType HARVEST = new TaxonomyType(-2113, "HARVEST", true, null, null, Color.Default);
	public static final TaxonomyType CLINICAL_OUTCOME_CODE = new TaxonomyType(-2144, "Clinical Outcome Code", true, null, null, Color.Default);
	public static final TaxonomyType EDRM = new TaxonomyType(-2177, "Electronic Document and Records Management System", true, null, null, Color.Default);
	public static final TaxonomyType MAXIMS = new TaxonomyType(-2180, "MAXIMS", true, null, null, Color.Default);
	public static final TaxonomyType ANE = new TaxonomyType(-2181, "A&E System", true, null, null, Color.Default);
	public static final TaxonomyType WEB_SERVICE = new TaxonomyType(-2214, "Web Service Mapping", true, null, null, Color.Default);
	public static final TaxonomyType OPWL = new TaxonomyType(-2378, "OPWL", true, null, null, Color.Default);
	public static final TaxonomyType ICD03 = new TaxonomyType(-2423, "ICD03", true, null, null, Color.Default);
	public static final TaxonomyType DISPLAY_TEXT = new TaxonomyType(-2429, "Display Text", true, null, null, Color.Default);
	public static final TaxonomyType CLINICAL_MAPPING = new TaxonomyType(-2485, "Clinical Mapping", true, null, null, Color.Default);
	public static final TaxonomyType PCT = new TaxonomyType(-2486, "PCT Code", true, null, null, Color.Default);
	public static final TaxonomyType CCG = new TaxonomyType(-2489, "CCG Mapping", true, null, null, Color.Default);
	public static final TaxonomyType PASCONTRACT = new TaxonomyType(-2554, "Pas Contract Allocation", true, null, null, Color.Default);
}
