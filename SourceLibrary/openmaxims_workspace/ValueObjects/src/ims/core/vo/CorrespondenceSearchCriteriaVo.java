//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;


public class CorrespondenceSearchCriteriaVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public CorrespondenceSearchCriteriaVo()
	{
	}
	public CorrespondenceSearchCriteriaVo(ims.core.vo.beans.CorrespondenceSearchCriteriaVoBean bean)
	{
		this.authoringhcp = bean.getAuthoringHCP() == null ? null : bean.getAuthoringHCP().buildVo();
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo();
		this.datefrom = bean.getDateFrom() == null ? null : bean.getDateFrom().buildDate();
		this.dateto = bean.getDateTo() == null ? null : bean.getDateTo().buildDate();
		this.correspondancetype = bean.getCorrespondanceType() == null ? null : ims.clinical.vo.lookups.ClinicalCorrespondenceType.buildLookup(bean.getCorrespondanceType());
		this.correspondancestatus = bean.getCorrespondanceStatus() == null ? null : ims.clinical.vo.lookups.CorrespondenceStatus.buildLookup(bean.getCorrespondanceStatus());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.CorrespondenceSearchCriteriaVoBean bean)
	{
		this.authoringhcp = bean.getAuthoringHCP() == null ? null : bean.getAuthoringHCP().buildVo(map);
		this.responsiblehcp = bean.getResponsibleHCP() == null ? null : bean.getResponsibleHCP().buildVo(map);
		this.datefrom = bean.getDateFrom() == null ? null : bean.getDateFrom().buildDate();
		this.dateto = bean.getDateTo() == null ? null : bean.getDateTo().buildDate();
		this.correspondancetype = bean.getCorrespondanceType() == null ? null : ims.clinical.vo.lookups.ClinicalCorrespondenceType.buildLookup(bean.getCorrespondanceType());
		this.correspondancestatus = bean.getCorrespondanceStatus() == null ? null : ims.clinical.vo.lookups.CorrespondenceStatus.buildLookup(bean.getCorrespondanceStatus());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.CorrespondenceSearchCriteriaVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.CorrespondenceSearchCriteriaVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.CorrespondenceSearchCriteriaVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getAuthoringHCPIsNotNull()
	{
		return this.authoringhcp != null;
	}
	public ims.core.vo.HcpLiteVo getAuthoringHCP()
	{
		return this.authoringhcp;
	}
	public void setAuthoringHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.authoringhcp = value;
	}
	public boolean getResponsibleHCPIsNotNull()
	{
		return this.responsiblehcp != null;
	}
	public ims.core.vo.HcpLiteVo getResponsibleHCP()
	{
		return this.responsiblehcp;
	}
	public void setResponsibleHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.responsiblehcp = value;
	}
	public boolean getDateFromIsNotNull()
	{
		return this.datefrom != null;
	}
	public ims.framework.utils.Date getDateFrom()
	{
		return this.datefrom;
	}
	public void setDateFrom(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.datefrom = value;
	}
	public boolean getDateToIsNotNull()
	{
		return this.dateto != null;
	}
	public ims.framework.utils.Date getDateTo()
	{
		return this.dateto;
	}
	public void setDateTo(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateto = value;
	}
	public boolean getCorrespondanceTypeIsNotNull()
	{
		return this.correspondancetype != null;
	}
	public ims.clinical.vo.lookups.ClinicalCorrespondenceType getCorrespondanceType()
	{
		return this.correspondancetype;
	}
	public void setCorrespondanceType(ims.clinical.vo.lookups.ClinicalCorrespondenceType value)
	{
		this.isValidated = false;
		this.correspondancetype = value;
	}
	public boolean getCorrespondanceStatusIsNotNull()
	{
		return this.correspondancestatus != null;
	}
	public ims.clinical.vo.lookups.CorrespondenceStatus getCorrespondanceStatus()
	{
		return this.correspondancestatus;
	}
	public void setCorrespondanceStatus(ims.clinical.vo.lookups.CorrespondenceStatus value)
	{
		this.isValidated = false;
		this.correspondancestatus = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof CorrespondenceSearchCriteriaVo))
			return false;
		CorrespondenceSearchCriteriaVo compareObj = (CorrespondenceSearchCriteriaVo)obj;
		if(this.getAuthoringHCP() == null && compareObj.getAuthoringHCP() != null)
			return false;
		if(this.getAuthoringHCP() != null && compareObj.getAuthoringHCP() == null)
			return false;
		if(this.getAuthoringHCP() != null && compareObj.getAuthoringHCP() != null)
			return this.getAuthoringHCP().equals(compareObj.getAuthoringHCP());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.authoringhcp != null)
		{
			if(!this.authoringhcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.responsiblehcp != null)
		{
			if(!this.responsiblehcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.authoringhcp != null)
		{
			String[] listOfOtherErrors = this.authoringhcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.responsiblehcp != null)
		{
			String[] listOfOtherErrors = this.responsiblehcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		CorrespondenceSearchCriteriaVo clone = new CorrespondenceSearchCriteriaVo();
		
		if(this.authoringhcp == null)
			clone.authoringhcp = null;
		else
			clone.authoringhcp = (ims.core.vo.HcpLiteVo)this.authoringhcp.clone();
		if(this.responsiblehcp == null)
			clone.responsiblehcp = null;
		else
			clone.responsiblehcp = (ims.core.vo.HcpLiteVo)this.responsiblehcp.clone();
		if(this.datefrom == null)
			clone.datefrom = null;
		else
			clone.datefrom = (ims.framework.utils.Date)this.datefrom.clone();
		if(this.dateto == null)
			clone.dateto = null;
		else
			clone.dateto = (ims.framework.utils.Date)this.dateto.clone();
		if(this.correspondancetype == null)
			clone.correspondancetype = null;
		else
			clone.correspondancetype = (ims.clinical.vo.lookups.ClinicalCorrespondenceType)this.correspondancetype.clone();
		if(this.correspondancestatus == null)
			clone.correspondancestatus = null;
		else
			clone.correspondancestatus = (ims.clinical.vo.lookups.CorrespondenceStatus)this.correspondancestatus.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(CorrespondenceSearchCriteriaVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A CorrespondenceSearchCriteriaVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		CorrespondenceSearchCriteriaVo compareObj = (CorrespondenceSearchCriteriaVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getAuthoringHCP() == null && compareObj.getAuthoringHCP() != null)
				return -1;
			if(this.getAuthoringHCP() != null && compareObj.getAuthoringHCP() == null)
				return 1;
			if(this.getAuthoringHCP() != null && compareObj.getAuthoringHCP() != null)
				retVal = this.getAuthoringHCP().compareTo(compareObj.getAuthoringHCP());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.authoringhcp != null)
			count++;
		if(this.responsiblehcp != null)
			count++;
		if(this.datefrom != null)
			count++;
		if(this.dateto != null)
			count++;
		if(this.correspondancetype != null)
			count++;
		if(this.correspondancestatus != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.core.vo.HcpLiteVo authoringhcp;
	protected ims.core.vo.HcpLiteVo responsiblehcp;
	protected ims.framework.utils.Date datefrom;
	protected ims.framework.utils.Date dateto;
	protected ims.clinical.vo.lookups.ClinicalCorrespondenceType correspondancetype;
	protected ims.clinical.vo.lookups.CorrespondenceStatus correspondancestatus;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
