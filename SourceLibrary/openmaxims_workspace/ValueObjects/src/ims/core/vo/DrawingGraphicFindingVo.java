//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to Assessment.Configuration.DrawingGraphicFinding business object (ID: 1028100011).
 */
public class DrawingGraphicFindingVo extends ims.assessment.configuration.vo.DrawingGraphicFindingRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public DrawingGraphicFindingVo()
	{
	}
	public DrawingGraphicFindingVo(Integer id, int version)
	{
		super(id, version);
	}
	public DrawingGraphicFindingVo(ims.core.vo.beans.DrawingGraphicFindingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.description = bean.getDescription();
		this.displaytext = bean.getDisplayText();
		this.colour = bean.getColour() == null ? null : bean.getColour().buildColor();
		this.image = bean.getImage() == null ? null : bean.getImage().buildVo();
		this.issinglemark = bean.getIsSingleMark();
		this.activestatus = bean.getActiveStatus() == null ? null : ims.core.vo.lookups.PreActiveActiveInactiveStatus.buildLookup(bean.getActiveStatus());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.DrawingGraphicFindingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.description = bean.getDescription();
		this.displaytext = bean.getDisplayText();
		this.colour = bean.getColour() == null ? null : bean.getColour().buildColor();
		this.image = bean.getImage() == null ? null : bean.getImage().buildVo(map);
		this.issinglemark = bean.getIsSingleMark();
		this.activestatus = bean.getActiveStatus() == null ? null : ims.core.vo.lookups.PreActiveActiveInactiveStatus.buildLookup(bean.getActiveStatus());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.DrawingGraphicFindingVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.DrawingGraphicFindingVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.DrawingGraphicFindingVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("DESCRIPTION"))
			return getDescription();
		if(fieldName.equals("DISPLAYTEXT"))
			return getDisplayText();
		if(fieldName.equals("COLOUR"))
			return getColour();
		if(fieldName.equals("IMAGE"))
			return getImage();
		if(fieldName.equals("ISSINGLEMARK"))
			return getIsSingleMark();
		if(fieldName.equals("ACTIVESTATUS"))
			return getActiveStatus();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getDescriptionIsNotNull()
	{
		return this.description != null;
	}
	public String getDescription()
	{
		return this.description;
	}
	public static int getDescriptionMaxLength()
	{
		return 70;
	}
	public void setDescription(String value)
	{
		this.isValidated = false;
		this.description = value;
	}
	public boolean getDisplayTextIsNotNull()
	{
		return this.displaytext != null;
	}
	public String getDisplayText()
	{
		return this.displaytext;
	}
	public static int getDisplayTextMaxLength()
	{
		return 70;
	}
	public void setDisplayText(String value)
	{
		this.isValidated = false;
		this.displaytext = value;
	}
	public boolean getColourIsNotNull()
	{
		return this.colour != null;
	}
	public ims.framework.utils.Color getColour()
	{
		return this.colour;
	}
	public void setColour(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.colour = value;
	}
	public boolean getImageIsNotNull()
	{
		return this.image != null;
	}
	public ims.admin.vo.AppImageVo getImage()
	{
		return this.image;
	}
	public void setImage(ims.admin.vo.AppImageVo value)
	{
		this.isValidated = false;
		this.image = value;
	}
	public boolean getIsSingleMarkIsNotNull()
	{
		return this.issinglemark != null;
	}
	public Boolean getIsSingleMark()
	{
		return this.issinglemark;
	}
	public void setIsSingleMark(Boolean value)
	{
		this.isValidated = false;
		this.issinglemark = value;
	}
	public boolean getActiveStatusIsNotNull()
	{
		return this.activestatus != null;
	}
	public ims.core.vo.lookups.PreActiveActiveInactiveStatus getActiveStatus()
	{
		return this.activestatus;
	}
	public void setActiveStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
	{
		this.isValidated = false;
		this.activestatus = value;
	}
	public String toString()
	{
		StringBuffer sb = new StringBuffer();
		if(this.displaytext != null)
			sb.append(this.displaytext);
		return sb.toString();
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.image != null)
		{
			if(!this.image.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.description != null)
			if(this.description.length() > 70)
				listOfErrors.add("The length of the field [description] in the value object [ims.core.vo.DrawingGraphicFindingVo] is too big. It should be less or equal to 70");
		if(this.displaytext == null || this.displaytext.length() == 0)
			listOfErrors.add("Finding Name is mandatory");
		else if(this.displaytext.length() > 70)
			listOfErrors.add("The length of the field [displaytext] in the value object [ims.core.vo.DrawingGraphicFindingVo] is too big. It should be less or equal to 70");
		if(this.image != null)
		{
			String[] listOfOtherErrors = this.image.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.activestatus == null)
			listOfErrors.add("Status is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		DrawingGraphicFindingVo clone = new DrawingGraphicFindingVo(this.id, this.version);
		
		clone.description = this.description;
		clone.displaytext = this.displaytext;
		if(this.colour == null)
			clone.colour = null;
		else
			clone.colour = (ims.framework.utils.Color)this.colour.clone();
		if(this.image == null)
			clone.image = null;
		else
			clone.image = (ims.admin.vo.AppImageVo)this.image.clone();
		clone.issinglemark = this.issinglemark;
		if(this.activestatus == null)
			clone.activestatus = null;
		else
			clone.activestatus = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)this.activestatus.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(DrawingGraphicFindingVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A DrawingGraphicFindingVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		DrawingGraphicFindingVo compareObj = (DrawingGraphicFindingVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_DrawingGraphicFinding() == null && compareObj.getID_DrawingGraphicFinding() != null)
				return -1;
			if(this.getID_DrawingGraphicFinding() != null && compareObj.getID_DrawingGraphicFinding() == null)
				return 1;
			if(this.getID_DrawingGraphicFinding() != null && compareObj.getID_DrawingGraphicFinding() != null)
				retVal = this.getID_DrawingGraphicFinding().compareTo(compareObj.getID_DrawingGraphicFinding());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.description != null)
			count++;
		if(this.displaytext != null)
			count++;
		if(this.colour != null)
			count++;
		if(this.image != null)
			count++;
		if(this.issinglemark != null)
			count++;
		if(this.activestatus != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected String description;
	protected String displaytext;
	protected ims.framework.utils.Color colour;
	protected ims.admin.vo.AppImageVo image;
	protected Boolean issinglemark;
	protected ims.core.vo.lookups.PreActiveActiveInactiveStatus activestatus;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
