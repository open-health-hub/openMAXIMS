//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.clinical.PatientDiagnosis business object (ID: 1003100016).
 */
public class PatientDiagnosisWebServiceVo extends ims.core.vo.PatientDiagnosisWebServiceListVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientDiagnosisWebServiceVo()
	{
	}
	public PatientDiagnosisWebServiceVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientDiagnosisWebServiceVo(ims.core.vo.beans.PatientDiagnosisWebServiceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.diagnosis = bean.getDiagnosis() == null ? null : bean.getDiagnosis().buildVo();
		this.diagnosisdescription = bean.getDiagnosisDescription();
		this.diagnoseddate = bean.getDiagnosedDate() == null ? null : bean.getDiagnosedDate().buildPartialDate();
		this.dateonset = bean.getDateOnset() == null ? null : bean.getDateOnset().buildDate();
		this.sourceofinformation = bean.getSourceofInformation() == null ? null : ims.core.vo.lookups.SourceofInformation.buildLookup(bean.getSourceofInformation());
		this.diagnosedby = bean.getDiagnosedBy() == null ? null : bean.getDiagnosedBy().buildVo();
		this.isresolved = bean.getIsResolved();
		this.dateresolved = bean.getDateResolved() == null ? null : bean.getDateResolved().buildDate();
		this.resolvedhcp = bean.getResolvedHCP() == null ? null : bean.getResolvedHCP().buildVo();
		this.iscomplication = bean.getIsComplication();
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo();
		this.notes = bean.getNotes();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.diagconfirmedstatus = bean.getDiagConfirmedStatus() == null ? null : ims.core.vo.lookups.ConfirmedStatus.buildLookup(bean.getDiagConfirmedStatus());
		this.diagconfirmedby = bean.getDiagConfirmedBy() == null ? null : bean.getDiagConfirmedBy().buildVo();
		this.diagconfirmeddatetime = bean.getDiagConfirmedDateTime() == null ? null : bean.getDiagConfirmedDateTime().buildDateTime();
		this.iscancerdiagnosis = bean.getIsCancerDiagnosis();
		this.authoringinfo = bean.getAuthoringInfo() == null ? null : bean.getAuthoringInfo().buildVo();
		this.diaglaterality = bean.getDiagLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getDiagLaterality());
		this.site = bean.getSite() == null ? null : ims.clinical.vo.lookups.Site.buildLookup(bean.getSite());
		this.sitetext = bean.getSiteText();
		this.informedofdiagnosis = ims.core.vo.lookups.DiagnosisInformedOfDiagnosisCollection.buildFromBeanCollection(bean.getInformedOfDiagnosis());
		this.basisofdiagnosis = ims.core.vo.lookups.DiagnosisBasisofDiagnosisCollection.buildFromBeanCollection(bean.getBasisofDiagnosis());
		this.ispmh = bean.getIsPMH();
		this.iscomorbidity = bean.getIsComorbidity();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PatientDiagnosisWebServiceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.diagnosis = bean.getDiagnosis() == null ? null : bean.getDiagnosis().buildVo(map);
		this.diagnosisdescription = bean.getDiagnosisDescription();
		this.diagnoseddate = bean.getDiagnosedDate() == null ? null : bean.getDiagnosedDate().buildPartialDate();
		this.dateonset = bean.getDateOnset() == null ? null : bean.getDateOnset().buildDate();
		this.sourceofinformation = bean.getSourceofInformation() == null ? null : ims.core.vo.lookups.SourceofInformation.buildLookup(bean.getSourceofInformation());
		this.diagnosedby = bean.getDiagnosedBy() == null ? null : bean.getDiagnosedBy().buildVo(map);
		this.isresolved = bean.getIsResolved();
		this.dateresolved = bean.getDateResolved() == null ? null : bean.getDateResolved().buildDate();
		this.resolvedhcp = bean.getResolvedHCP() == null ? null : bean.getResolvedHCP().buildVo(map);
		this.iscomplication = bean.getIsComplication();
		this.currentstatus = bean.getCurrentStatus() == null ? null : bean.getCurrentStatus().buildVo(map);
		this.notes = bean.getNotes();
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.diagconfirmedstatus = bean.getDiagConfirmedStatus() == null ? null : ims.core.vo.lookups.ConfirmedStatus.buildLookup(bean.getDiagConfirmedStatus());
		this.diagconfirmedby = bean.getDiagConfirmedBy() == null ? null : bean.getDiagConfirmedBy().buildVo(map);
		this.diagconfirmeddatetime = bean.getDiagConfirmedDateTime() == null ? null : bean.getDiagConfirmedDateTime().buildDateTime();
		this.iscancerdiagnosis = bean.getIsCancerDiagnosis();
		this.authoringinfo = bean.getAuthoringInfo() == null ? null : bean.getAuthoringInfo().buildVo(map);
		this.diaglaterality = bean.getDiagLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getDiagLaterality());
		this.site = bean.getSite() == null ? null : ims.clinical.vo.lookups.Site.buildLookup(bean.getSite());
		this.sitetext = bean.getSiteText();
		this.informedofdiagnosis = ims.core.vo.lookups.DiagnosisInformedOfDiagnosisCollection.buildFromBeanCollection(bean.getInformedOfDiagnosis());
		this.basisofdiagnosis = ims.core.vo.lookups.DiagnosisBasisofDiagnosisCollection.buildFromBeanCollection(bean.getBasisofDiagnosis());
		this.ispmh = bean.getIsPMH();
		this.iscomorbidity = bean.getIsComorbidity();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PatientDiagnosisWebServiceVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PatientDiagnosisWebServiceVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PatientDiagnosisWebServiceVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("SOURCEOFINFORMATION"))
			return getSourceofInformation();
		if(fieldName.equals("DIAGNOSEDBY"))
			return getDiagnosedBy();
		if(fieldName.equals("ISRESOLVED"))
			return getIsResolved();
		if(fieldName.equals("DATERESOLVED"))
			return getDateResolved();
		if(fieldName.equals("RESOLVEDHCP"))
			return getResolvedHCP();
		if(fieldName.equals("ISCOMPLICATION"))
			return getIsComplication();
		if(fieldName.equals("CURRENTSTATUS"))
			return getCurrentStatus();
		if(fieldName.equals("NOTES"))
			return getNotes();
		if(fieldName.equals("SPECIALTY"))
			return getSpecialty();
		if(fieldName.equals("DIAGCONFIRMEDSTATUS"))
			return getDiagConfirmedStatus();
		if(fieldName.equals("DIAGCONFIRMEDBY"))
			return getDiagConfirmedBy();
		if(fieldName.equals("DIAGCONFIRMEDDATETIME"))
			return getDiagConfirmedDateTime();
		if(fieldName.equals("ISCANCERDIAGNOSIS"))
			return getIsCancerDiagnosis();
		if(fieldName.equals("AUTHORINGINFO"))
			return getAuthoringInfo();
		if(fieldName.equals("DIAGLATERALITY"))
			return getDiagLaterality();
		if(fieldName.equals("SITE"))
			return getSite();
		if(fieldName.equals("SITETEXT"))
			return getSiteText();
		if(fieldName.equals("INFORMEDOFDIAGNOSIS"))
			return getInformedOfDiagnosis();
		if(fieldName.equals("BASISOFDIAGNOSIS"))
			return getBasisofDiagnosis();
		if(fieldName.equals("ISPMH"))
			return getIsPMH();
		if(fieldName.equals("ISCOMORBIDITY"))
			return getIsComorbidity();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getSourceofInformationIsNotNull()
	{
		return this.sourceofinformation != null;
	}
	public ims.core.vo.lookups.SourceofInformation getSourceofInformation()
	{
		return this.sourceofinformation;
	}
	public void setSourceofInformation(ims.core.vo.lookups.SourceofInformation value)
	{
		this.isValidated = false;
		this.sourceofinformation = value;
	}
	public boolean getDiagnosedByIsNotNull()
	{
		return this.diagnosedby != null;
	}
	public ims.core.vo.HcpLiteVo getDiagnosedBy()
	{
		return this.diagnosedby;
	}
	public void setDiagnosedBy(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.diagnosedby = value;
	}
	public boolean getIsResolvedIsNotNull()
	{
		return this.isresolved != null;
	}
	public Boolean getIsResolved()
	{
		return this.isresolved;
	}
	public void setIsResolved(Boolean value)
	{
		this.isValidated = false;
		this.isresolved = value;
	}
	public boolean getDateResolvedIsNotNull()
	{
		return this.dateresolved != null;
	}
	public ims.framework.utils.Date getDateResolved()
	{
		return this.dateresolved;
	}
	public void setDateResolved(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateresolved = value;
	}
	public boolean getResolvedHCPIsNotNull()
	{
		return this.resolvedhcp != null;
	}
	public ims.core.vo.MedicLiteVo getResolvedHCP()
	{
		return this.resolvedhcp;
	}
	public void setResolvedHCP(ims.core.vo.MedicLiteVo value)
	{
		this.isValidated = false;
		this.resolvedhcp = value;
	}
	public boolean getIsComplicationIsNotNull()
	{
		return this.iscomplication != null;
	}
	public Boolean getIsComplication()
	{
		return this.iscomplication;
	}
	public void setIsComplication(Boolean value)
	{
		this.isValidated = false;
		this.iscomplication = value;
	}
	public boolean getCurrentStatusIsNotNull()
	{
		return this.currentstatus != null;
	}
	public ims.clinical.vo.PatientDiagnosisStatusVo getCurrentStatus()
	{
		return this.currentstatus;
	}
	public void setCurrentStatus(ims.clinical.vo.PatientDiagnosisStatusVo value)
	{
		this.isValidated = false;
		this.currentstatus = value;
	}
	public boolean getNotesIsNotNull()
	{
		return this.notes != null;
	}
	public String getNotes()
	{
		return this.notes;
	}
	public static int getNotesMaxLength()
	{
		return 500;
	}
	public void setNotes(String value)
	{
		this.isValidated = false;
		this.notes = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.lookups.Specialty getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getDiagConfirmedStatusIsNotNull()
	{
		return this.diagconfirmedstatus != null;
	}
	public ims.core.vo.lookups.ConfirmedStatus getDiagConfirmedStatus()
	{
		return this.diagconfirmedstatus;
	}
	public void setDiagConfirmedStatus(ims.core.vo.lookups.ConfirmedStatus value)
	{
		this.isValidated = false;
		this.diagconfirmedstatus = value;
	}
	public boolean getDiagConfirmedByIsNotNull()
	{
		return this.diagconfirmedby != null;
	}
	public ims.core.vo.HcpLiteVo getDiagConfirmedBy()
	{
		return this.diagconfirmedby;
	}
	public void setDiagConfirmedBy(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.diagconfirmedby = value;
	}
	public boolean getDiagConfirmedDateTimeIsNotNull()
	{
		return this.diagconfirmeddatetime != null;
	}
	public ims.framework.utils.DateTime getDiagConfirmedDateTime()
	{
		return this.diagconfirmeddatetime;
	}
	public void setDiagConfirmedDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.diagconfirmeddatetime = value;
	}
	public boolean getIsCancerDiagnosisIsNotNull()
	{
		return this.iscancerdiagnosis != null;
	}
	public Boolean getIsCancerDiagnosis()
	{
		return this.iscancerdiagnosis;
	}
	public void setIsCancerDiagnosis(Boolean value)
	{
		this.isValidated = false;
		this.iscancerdiagnosis = value;
	}
	public boolean getAuthoringInfoIsNotNull()
	{
		return this.authoringinfo != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInfo()
	{
		return this.authoringinfo;
	}
	public void setAuthoringInfo(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinfo = value;
	}
	public boolean getDiagLateralityIsNotNull()
	{
		return this.diaglaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getDiagLaterality()
	{
		return this.diaglaterality;
	}
	public void setDiagLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.diaglaterality = value;
	}
	public boolean getSiteIsNotNull()
	{
		return this.site != null;
	}
	public ims.clinical.vo.lookups.Site getSite()
	{
		return this.site;
	}
	public void setSite(ims.clinical.vo.lookups.Site value)
	{
		this.isValidated = false;
		this.site = value;
	}
	public boolean getSiteTextIsNotNull()
	{
		return this.sitetext != null;
	}
	public String getSiteText()
	{
		return this.sitetext;
	}
	public static int getSiteTextMaxLength()
	{
		return 255;
	}
	public void setSiteText(String value)
	{
		this.isValidated = false;
		this.sitetext = value;
	}
	public boolean getInformedOfDiagnosisIsNotNull()
	{
		return this.informedofdiagnosis != null;
	}
	public ims.core.vo.lookups.DiagnosisInformedOfDiagnosisCollection getInformedOfDiagnosis()
	{
		return this.informedofdiagnosis;
	}
	public void setInformedOfDiagnosis(ims.core.vo.lookups.DiagnosisInformedOfDiagnosisCollection value)
	{
		this.isValidated = false;
		this.informedofdiagnosis = value;
	}
	public boolean getBasisofDiagnosisIsNotNull()
	{
		return this.basisofdiagnosis != null;
	}
	public ims.core.vo.lookups.DiagnosisBasisofDiagnosisCollection getBasisofDiagnosis()
	{
		return this.basisofdiagnosis;
	}
	public void setBasisofDiagnosis(ims.core.vo.lookups.DiagnosisBasisofDiagnosisCollection value)
	{
		this.isValidated = false;
		this.basisofdiagnosis = value;
	}
	public boolean getIsPMHIsNotNull()
	{
		return this.ispmh != null;
	}
	public Boolean getIsPMH()
	{
		return this.ispmh;
	}
	public void setIsPMH(Boolean value)
	{
		this.isValidated = false;
		this.ispmh = value;
	}
	public boolean getIsComorbidityIsNotNull()
	{
		return this.iscomorbidity != null;
	}
	public Boolean getIsComorbidity()
	{
		return this.iscomorbidity;
	}
	public void setIsComorbidity(Boolean value)
	{
		this.isValidated = false;
		this.iscomorbidity = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.diagnosedby != null)
		{
			if(!this.diagnosedby.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.resolvedhcp != null)
		{
			if(!this.resolvedhcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentstatus != null)
		{
			if(!this.currentstatus.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.diagconfirmedby != null)
		{
			if(!this.diagconfirmedby.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.authoringinfo != null)
		{
			if(!this.authoringinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.diagnosisdescription == null || this.diagnosisdescription.length() == 0)
			listOfErrors.add("DiagnosisDescription is mandatory");
		else if(this.diagnosisdescription.length() > 255)
			listOfErrors.add("The length of the field [diagnosisdescription] in the value object [ims.core.vo.PatientDiagnosisWebServiceVo] is too big. It should be less or equal to 255");
		if(this.sourceofinformation == null)
			listOfErrors.add("SourceofInformation is mandatory");
		if(this.diagnosedby != null)
		{
			String[] listOfOtherErrors = this.diagnosedby.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.resolvedhcp != null)
		{
			String[] listOfOtherErrors = this.resolvedhcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentstatus != null)
		{
			String[] listOfOtherErrors = this.currentstatus.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.notes != null)
			if(this.notes.length() > 500)
				listOfErrors.add("The length of the field [notes] in the value object [ims.core.vo.PatientDiagnosisWebServiceVo] is too big. It should be less or equal to 500");
		if(this.diagconfirmedby != null)
		{
			String[] listOfOtherErrors = this.diagconfirmedby.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.authoringinfo != null)
		{
			String[] listOfOtherErrors = this.authoringinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.sitetext != null)
			if(this.sitetext.length() > 255)
				listOfErrors.add("The length of the field [sitetext] in the value object [ims.core.vo.PatientDiagnosisWebServiceVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientDiagnosisWebServiceVo clone = new PatientDiagnosisWebServiceVo(this.id, this.version);
		
		if(this.diagnosis == null)
			clone.diagnosis = null;
		else
			clone.diagnosis = (ims.core.vo.DiagLiteVo)this.diagnosis.clone();
		clone.diagnosisdescription = this.diagnosisdescription;
		if(this.diagnoseddate == null)
			clone.diagnoseddate = null;
		else
			clone.diagnoseddate = (ims.framework.utils.PartialDate)this.diagnoseddate.clone();
		if(this.dateonset == null)
			clone.dateonset = null;
		else
			clone.dateonset = (ims.framework.utils.Date)this.dateonset.clone();
		if(this.sourceofinformation == null)
			clone.sourceofinformation = null;
		else
			clone.sourceofinformation = (ims.core.vo.lookups.SourceofInformation)this.sourceofinformation.clone();
		if(this.diagnosedby == null)
			clone.diagnosedby = null;
		else
			clone.diagnosedby = (ims.core.vo.HcpLiteVo)this.diagnosedby.clone();
		clone.isresolved = this.isresolved;
		if(this.dateresolved == null)
			clone.dateresolved = null;
		else
			clone.dateresolved = (ims.framework.utils.Date)this.dateresolved.clone();
		if(this.resolvedhcp == null)
			clone.resolvedhcp = null;
		else
			clone.resolvedhcp = (ims.core.vo.MedicLiteVo)this.resolvedhcp.clone();
		clone.iscomplication = this.iscomplication;
		if(this.currentstatus == null)
			clone.currentstatus = null;
		else
			clone.currentstatus = (ims.clinical.vo.PatientDiagnosisStatusVo)this.currentstatus.clone();
		clone.notes = this.notes;
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		if(this.diagconfirmedstatus == null)
			clone.diagconfirmedstatus = null;
		else
			clone.diagconfirmedstatus = (ims.core.vo.lookups.ConfirmedStatus)this.diagconfirmedstatus.clone();
		if(this.diagconfirmedby == null)
			clone.diagconfirmedby = null;
		else
			clone.diagconfirmedby = (ims.core.vo.HcpLiteVo)this.diagconfirmedby.clone();
		if(this.diagconfirmeddatetime == null)
			clone.diagconfirmeddatetime = null;
		else
			clone.diagconfirmeddatetime = (ims.framework.utils.DateTime)this.diagconfirmeddatetime.clone();
		clone.iscancerdiagnosis = this.iscancerdiagnosis;
		if(this.authoringinfo == null)
			clone.authoringinfo = null;
		else
			clone.authoringinfo = (ims.core.vo.AuthoringInformationVo)this.authoringinfo.clone();
		if(this.diaglaterality == null)
			clone.diaglaterality = null;
		else
			clone.diaglaterality = (ims.core.vo.lookups.LateralityLRB)this.diaglaterality.clone();
		if(this.site == null)
			clone.site = null;
		else
			clone.site = (ims.clinical.vo.lookups.Site)this.site.clone();
		clone.sitetext = this.sitetext;
		if(this.informedofdiagnosis == null)
			clone.informedofdiagnosis = null;
		else
			clone.informedofdiagnosis = (ims.core.vo.lookups.DiagnosisInformedOfDiagnosisCollection)this.informedofdiagnosis.clone();
		if(this.basisofdiagnosis == null)
			clone.basisofdiagnosis = null;
		else
			clone.basisofdiagnosis = (ims.core.vo.lookups.DiagnosisBasisofDiagnosisCollection)this.basisofdiagnosis.clone();
		clone.ispmh = this.ispmh;
		clone.iscomorbidity = this.iscomorbidity;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientDiagnosisWebServiceVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientDiagnosisWebServiceVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientDiagnosisWebServiceVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientDiagnosisWebServiceVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.sourceofinformation != null)
			count++;
		if(this.diagnosedby != null)
			count++;
		if(this.isresolved != null)
			count++;
		if(this.dateresolved != null)
			count++;
		if(this.resolvedhcp != null)
			count++;
		if(this.iscomplication != null)
			count++;
		if(this.currentstatus != null)
			count++;
		if(this.notes != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.diagconfirmedstatus != null)
			count++;
		if(this.diagconfirmedby != null)
			count++;
		if(this.diagconfirmeddatetime != null)
			count++;
		if(this.iscancerdiagnosis != null)
			count++;
		if(this.authoringinfo != null)
			count++;
		if(this.diaglaterality != null)
			count++;
		if(this.site != null)
			count++;
		if(this.sitetext != null)
			count++;
		if(this.informedofdiagnosis != null)
			count++;
		if(this.basisofdiagnosis != null)
			count++;
		if(this.ispmh != null)
			count++;
		if(this.iscomorbidity != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 21;
	}
	protected ims.core.vo.lookups.SourceofInformation sourceofinformation;
	protected ims.core.vo.HcpLiteVo diagnosedby;
	protected Boolean isresolved;
	protected ims.framework.utils.Date dateresolved;
	protected ims.core.vo.MedicLiteVo resolvedhcp;
	protected Boolean iscomplication;
	protected ims.clinical.vo.PatientDiagnosisStatusVo currentstatus;
	protected String notes;
	protected ims.core.vo.lookups.Specialty specialty;
	protected ims.core.vo.lookups.ConfirmedStatus diagconfirmedstatus;
	protected ims.core.vo.HcpLiteVo diagconfirmedby;
	protected ims.framework.utils.DateTime diagconfirmeddatetime;
	protected Boolean iscancerdiagnosis;
	protected ims.core.vo.AuthoringInformationVo authoringinfo;
	protected ims.core.vo.lookups.LateralityLRB diaglaterality;
	protected ims.clinical.vo.lookups.Site site;
	protected String sitetext;
	protected ims.core.vo.lookups.DiagnosisInformedOfDiagnosisCollection informedofdiagnosis;
	protected ims.core.vo.lookups.DiagnosisBasisofDiagnosisCollection basisofdiagnosis;
	protected Boolean ispmh;
	protected Boolean iscomorbidity;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
