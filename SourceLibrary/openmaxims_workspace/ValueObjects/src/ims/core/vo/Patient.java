//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.patient.Patient business object (ID: 1001100000).
 */
public class Patient extends ims.core.vo.PatientShort implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public Patient()
	{
	}
	public Patient(Integer id, int version)
	{
		super(id, version);
	}
	public Patient(ims.core.vo.beans.PatientBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName() == null ? null : bean.getName().buildVo();
		this.sex = bean.getSex() == null ? null : ims.core.vo.lookups.Sex.buildLookup(bean.getSex());
		this.age = bean.getAge();
		this.agetext = bean.getAgeText();
		this.address = bean.getAddress() == null ? null : bean.getAddress().buildVo();
		this.dob = bean.getDob() == null ? null : bean.getDob().buildPartialDate();
		this.dod = bean.getDod() == null ? null : bean.getDod().buildDate();
		this.ward = bean.getWard() == null ? null : bean.getWard().buildVo();
		this.religion = bean.getReligion() == null ? null : ims.core.vo.lookups.Religion.buildLookup(bean.getReligion());
		this.hasallergies = bean.getHasAllergies();
		this.hasalerts = bean.getHasAlerts();
		this.identifiers = ims.core.vo.PatientIdCollection.buildFromBeanCollection(bean.getIdentifiers());
		this.isactive = bean.getIsActive();
		this.associatedpatient = bean.getAssociatedPatient() == null ? null : bean.getAssociatedPatient().buildVo();
		this.commchannels = ims.core.vo.CommChannelVoCollection.buildFromBeanCollection(bean.getCommChannels());
		this.ethnicorigin = bean.getEthnicOrigin() == null ? null : ims.core.vo.lookups.EthnicOrigin.buildLookup(bean.getEthnicOrigin());
		this.maritalstatus = bean.getMaritalStatus() == null ? null : ims.core.vo.lookups.MaritalStatus.buildLookup(bean.getMaritalStatus());
		this.scn = bean.getSCN();
		this.sourceofinformation = bean.getSourceOfInformation() == null ? null : ims.core.vo.lookups.RegistrationSourceOfInfo.buildLookup(bean.getSourceOfInformation());
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.hasactivealerts = bean.getHasActiveAlerts();
		this.timeofdeath = bean.getTimeOfDeath() == null ? null : bean.getTimeOfDeath().buildTime();
		this.isquickregistrationpatient = bean.getIsQuickRegistrationPatient();
		this.ocsnotification = bean.getOCSNotification() == null ? null : bean.getOCSNotification().buildVo();
		this.currentresponsibleconsultant = bean.getCurrentResponsibleConsultant() == null ? null : new ims.core.resource.people.vo.MedicRefVo(new Integer(bean.getCurrentResponsibleConsultant().getId()), bean.getCurrentResponsibleConsultant().getVersion());
		this.gp = bean.getGp() == null ? null : bean.getGp().buildVo();
		this.occupation = bean.getOccupation() == null ? null : ims.core.vo.lookups.Occupation.buildLookup(bean.getOccupation());
		this.language = bean.getLanguage() == null ? null : ims.core.vo.lookups.Language.buildLookup(bean.getLanguage());
		this.nok = bean.getNok() == null ? null : bean.getNok().buildVo();
		this.insurance = bean.getInsurance() == null ? null : bean.getInsurance().buildVo();
		this.othernames = ims.core.vo.PersonNameCollection.buildFromBeanCollection(bean.getOtherNames());
		this.addresses = ims.core.vo.PersonAddressCollection.buildFromBeanCollection(bean.getAddresses());
		this.gpsurgery = bean.getGpSurgery() == null ? null : bean.getGpSurgery().buildVo();
		this.patientalerts = ims.core.vo.PatientAlertLiteVoCollection.buildFromBeanCollection(bean.getPatientAlerts());
		this.clientparent = bean.getClientParent() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getClientParent().getId()), bean.getClientParent().getVersion());
		this.photo = bean.getPhoto() == null ? null : bean.getPhoto().buildVo();
		this.savealias = bean.getSaveAlias();
		this.cancelsd_appts = bean.getCancelSD_APPTS();
		this.homefolderlocation = bean.getHomeFolderLocation() == null ? null : ims.core.vo.lookups.HomeFolderLocation.buildLookup(bean.getHomeFolderLocation());
		this.harccode = bean.getHARCCode();
		this.prefcommlanguage = bean.getPrefCommLanguage() == null ? null : ims.core.vo.lookups.PreferredCommunicationLanguage.buildLookup(bean.getPrefCommLanguage());
		this.practice = bean.getPractice() == null ? null : bean.getPractice().buildVo();
		this.copypatientoncorrespondence = bean.getCopyPatientOnCorrespondence();
		this.copypatientoncorrespondencedate = bean.getCopyPatientOnCorrespondenceDate() == null ? null : bean.getCopyPatientOnCorrespondenceDate().buildDate();
		this.currentmedicalinsurance = bean.getCurrentMedicalInsurance() == null ? null : bean.getCurrentMedicalInsurance().buildVo();
		this.mrnstatus = bean.getMRNStatus() == null ? null : ims.core.vo.lookups.MRNStatus.buildLookup(bean.getMRNStatus());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.PatientBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName() == null ? null : bean.getName().buildVo(map);
		this.sex = bean.getSex() == null ? null : ims.core.vo.lookups.Sex.buildLookup(bean.getSex());
		this.age = bean.getAge();
		this.agetext = bean.getAgeText();
		this.address = bean.getAddress() == null ? null : bean.getAddress().buildVo(map);
		this.dob = bean.getDob() == null ? null : bean.getDob().buildPartialDate();
		this.dod = bean.getDod() == null ? null : bean.getDod().buildDate();
		this.ward = bean.getWard() == null ? null : bean.getWard().buildVo(map);
		this.religion = bean.getReligion() == null ? null : ims.core.vo.lookups.Religion.buildLookup(bean.getReligion());
		this.hasallergies = bean.getHasAllergies();
		this.hasalerts = bean.getHasAlerts();
		this.identifiers = ims.core.vo.PatientIdCollection.buildFromBeanCollection(bean.getIdentifiers());
		this.isactive = bean.getIsActive();
		this.associatedpatient = bean.getAssociatedPatient() == null ? null : bean.getAssociatedPatient().buildVo(map);
		this.commchannels = ims.core.vo.CommChannelVoCollection.buildFromBeanCollection(bean.getCommChannels());
		this.ethnicorigin = bean.getEthnicOrigin() == null ? null : ims.core.vo.lookups.EthnicOrigin.buildLookup(bean.getEthnicOrigin());
		this.maritalstatus = bean.getMaritalStatus() == null ? null : ims.core.vo.lookups.MaritalStatus.buildLookup(bean.getMaritalStatus());
		this.scn = bean.getSCN();
		this.sourceofinformation = bean.getSourceOfInformation() == null ? null : ims.core.vo.lookups.RegistrationSourceOfInfo.buildLookup(bean.getSourceOfInformation());
		this.sysinfo = bean.getSysInfo() == null ? null : bean.getSysInfo().buildSystemInformation();
		this.hasactivealerts = bean.getHasActiveAlerts();
		this.timeofdeath = bean.getTimeOfDeath() == null ? null : bean.getTimeOfDeath().buildTime();
		this.isquickregistrationpatient = bean.getIsQuickRegistrationPatient();
		this.ocsnotification = bean.getOCSNotification() == null ? null : bean.getOCSNotification().buildVo(map);
		this.currentresponsibleconsultant = bean.getCurrentResponsibleConsultant() == null ? null : new ims.core.resource.people.vo.MedicRefVo(new Integer(bean.getCurrentResponsibleConsultant().getId()), bean.getCurrentResponsibleConsultant().getVersion());
		this.gp = bean.getGp() == null ? null : bean.getGp().buildVo(map);
		this.occupation = bean.getOccupation() == null ? null : ims.core.vo.lookups.Occupation.buildLookup(bean.getOccupation());
		this.language = bean.getLanguage() == null ? null : ims.core.vo.lookups.Language.buildLookup(bean.getLanguage());
		this.nok = bean.getNok() == null ? null : bean.getNok().buildVo(map);
		this.insurance = bean.getInsurance() == null ? null : bean.getInsurance().buildVo(map);
		this.othernames = ims.core.vo.PersonNameCollection.buildFromBeanCollection(bean.getOtherNames());
		this.addresses = ims.core.vo.PersonAddressCollection.buildFromBeanCollection(bean.getAddresses());
		this.gpsurgery = bean.getGpSurgery() == null ? null : bean.getGpSurgery().buildVo(map);
		this.patientalerts = ims.core.vo.PatientAlertLiteVoCollection.buildFromBeanCollection(bean.getPatientAlerts());
		this.clientparent = bean.getClientParent() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getClientParent().getId()), bean.getClientParent().getVersion());
		this.photo = bean.getPhoto() == null ? null : bean.getPhoto().buildVo(map);
		this.savealias = bean.getSaveAlias();
		this.cancelsd_appts = bean.getCancelSD_APPTS();
		this.homefolderlocation = bean.getHomeFolderLocation() == null ? null : ims.core.vo.lookups.HomeFolderLocation.buildLookup(bean.getHomeFolderLocation());
		this.harccode = bean.getHARCCode();
		this.prefcommlanguage = bean.getPrefCommLanguage() == null ? null : ims.core.vo.lookups.PreferredCommunicationLanguage.buildLookup(bean.getPrefCommLanguage());
		this.practice = bean.getPractice() == null ? null : bean.getPractice().buildVo(map);
		this.copypatientoncorrespondence = bean.getCopyPatientOnCorrespondence();
		this.copypatientoncorrespondencedate = bean.getCopyPatientOnCorrespondenceDate() == null ? null : bean.getCopyPatientOnCorrespondenceDate().buildDate();
		this.currentmedicalinsurance = bean.getCurrentMedicalInsurance() == null ? null : bean.getCurrentMedicalInsurance().buildVo(map);
		this.mrnstatus = bean.getMRNStatus() == null ? null : ims.core.vo.lookups.MRNStatus.buildLookup(bean.getMRNStatus());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.PatientBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.PatientBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.PatientBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("GP"))
			return getGp();
		if(fieldName.equals("OCCUPATION"))
			return getOccupation();
		if(fieldName.equals("LANGUAGE"))
			return getLanguage();
		if(fieldName.equals("NOK"))
			return getNok();
		if(fieldName.equals("INSURANCE"))
			return getInsurance();
		if(fieldName.equals("OTHERNAMES"))
			return getOtherNames();
		if(fieldName.equals("ADDRESSES"))
			return getAddresses();
		if(fieldName.equals("GPSURGERY"))
			return getGpSurgery();
		if(fieldName.equals("PATIENTALERTS"))
			return getPatientAlerts();
		if(fieldName.equals("CLIENTPARENT"))
			return getClientParent();
		if(fieldName.equals("PHOTO"))
			return getPhoto();
		if(fieldName.equals("SAVEALIAS"))
			return getSaveAlias();
		if(fieldName.equals("CANCELSD_APPTS"))
			return getCancelSD_APPTS();
		if(fieldName.equals("HOMEFOLDERLOCATION"))
			return getHomeFolderLocation();
		if(fieldName.equals("HARCCODE"))
			return getHARCCode();
		if(fieldName.equals("PREFCOMMLANGUAGE"))
			return getPrefCommLanguage();
		if(fieldName.equals("PRACTICE"))
			return getPractice();
		if(fieldName.equals("COPYPATIENTONCORRESPONDENCE"))
			return getCopyPatientOnCorrespondence();
		if(fieldName.equals("COPYPATIENTONCORRESPONDENCEDATE"))
			return getCopyPatientOnCorrespondenceDate();
		if(fieldName.equals("CURRENTMEDICALINSURANCE"))
			return getCurrentMedicalInsurance();
		if(fieldName.equals("MRNSTATUS"))
			return getMRNStatus();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getGpIsNotNull()
	{
		return this.gp != null;
	}
	public ims.core.vo.GpShortVo getGp()
	{
		return this.gp;
	}
	public void setGp(ims.core.vo.GpShortVo value)
	{
		this.isValidated = false;
		this.gp = value;
	}
	public boolean getOccupationIsNotNull()
	{
		return this.occupation != null;
	}
	public ims.core.vo.lookups.Occupation getOccupation()
	{
		return this.occupation;
	}
	public void setOccupation(ims.core.vo.lookups.Occupation value)
	{
		this.isValidated = false;
		this.occupation = value;
	}
	public boolean getLanguageIsNotNull()
	{
		return this.language != null;
	}
	public ims.core.vo.lookups.Language getLanguage()
	{
		return this.language;
	}
	public void setLanguage(ims.core.vo.lookups.Language value)
	{
		this.isValidated = false;
		this.language = value;
	}
	public boolean getNokIsNotNull()
	{
		return this.nok != null;
	}
	public ims.core.vo.NextOfKin getNok()
	{
		return this.nok;
	}
	public void setNok(ims.core.vo.NextOfKin value)
	{
		this.isValidated = false;
		this.nok = value;
	}
	public boolean getInsuranceIsNotNull()
	{
		return this.insurance != null;
	}
	public ims.core.vo.InsuranceVo getInsurance()
	{
		return this.insurance;
	}
	public void setInsurance(ims.core.vo.InsuranceVo value)
	{
		this.isValidated = false;
		this.insurance = value;
	}
	public boolean getOtherNamesIsNotNull()
	{
		return this.othernames != null;
	}
	public ims.core.vo.PersonNameCollection getOtherNames()
	{
		return this.othernames;
	}
	public void setOtherNames(ims.core.vo.PersonNameCollection value)
	{
		this.isValidated = false;
		this.othernames = value;
	}
	public boolean getAddressesIsNotNull()
	{
		return this.addresses != null;
	}
	public ims.core.vo.PersonAddressCollection getAddresses()
	{
		return this.addresses;
	}
	public void setAddresses(ims.core.vo.PersonAddressCollection value)
	{
		this.isValidated = false;
		this.addresses = value;
	}
	public boolean getGpSurgeryIsNotNull()
	{
		return this.gpsurgery != null;
	}
	public ims.core.vo.LocSiteShortVo getGpSurgery()
	{
		return this.gpsurgery;
	}
	public void setGpSurgery(ims.core.vo.LocSiteShortVo value)
	{
		this.isValidated = false;
		this.gpsurgery = value;
	}
	public boolean getPatientAlertsIsNotNull()
	{
		return this.patientalerts != null;
	}
	public ims.core.vo.PatientAlertLiteVoCollection getPatientAlerts()
	{
		return this.patientalerts;
	}
	public void setPatientAlerts(ims.core.vo.PatientAlertLiteVoCollection value)
	{
		this.isValidated = false;
		this.patientalerts = value;
	}
	public boolean getClientParentIsNotNull()
	{
		return this.clientparent != null;
	}
	public ims.core.patient.vo.PatientRefVo getClientParent()
	{
		return this.clientparent;
	}
	public void setClientParent(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.clientparent = value;
	}
	public boolean getPhotoIsNotNull()
	{
		return this.photo != null;
	}
	public ims.core.vo.AppDBImageVo getPhoto()
	{
		return this.photo;
	}
	public void setPhoto(ims.core.vo.AppDBImageVo value)
	{
		this.isValidated = false;
		this.photo = value;
	}
	public boolean getSaveAliasIsNotNull()
	{
		return this.savealias != null;
	}
	public String getSaveAlias()
	{
		return this.savealias;
	}
	public static int getSaveAliasMaxLength()
	{
		return 255;
	}
	public void setSaveAlias(String value)
	{
		this.isValidated = false;
		this.savealias = value;
	}
	public boolean getCancelSD_APPTSIsNotNull()
	{
		return this.cancelsd_appts != null;
	}
	public Boolean getCancelSD_APPTS()
	{
		return this.cancelsd_appts;
	}
	public void setCancelSD_APPTS(Boolean value)
	{
		this.isValidated = false;
		this.cancelsd_appts = value;
	}
	public boolean getHomeFolderLocationIsNotNull()
	{
		return this.homefolderlocation != null;
	}
	public ims.core.vo.lookups.HomeFolderLocation getHomeFolderLocation()
	{
		return this.homefolderlocation;
	}
	public void setHomeFolderLocation(ims.core.vo.lookups.HomeFolderLocation value)
	{
		this.isValidated = false;
		this.homefolderlocation = value;
	}
	public boolean getHARCCodeIsNotNull()
	{
		return this.harccode != null;
	}
	public String getHARCCode()
	{
		return this.harccode;
	}
	public static int getHARCCodeMaxLength()
	{
		return 255;
	}
	public void setHARCCode(String value)
	{
		this.isValidated = false;
		this.harccode = value;
	}
	public boolean getPrefCommLanguageIsNotNull()
	{
		return this.prefcommlanguage != null;
	}
	public ims.core.vo.lookups.PreferredCommunicationLanguage getPrefCommLanguage()
	{
		return this.prefcommlanguage;
	}
	public void setPrefCommLanguage(ims.core.vo.lookups.PreferredCommunicationLanguage value)
	{
		this.isValidated = false;
		this.prefcommlanguage = value;
	}
	public boolean getPracticeIsNotNull()
	{
		return this.practice != null;
	}
	public ims.core.vo.OrganisationWithSitesVo getPractice()
	{
		return this.practice;
	}
	public void setPractice(ims.core.vo.OrganisationWithSitesVo value)
	{
		this.isValidated = false;
		this.practice = value;
	}
	public boolean getCopyPatientOnCorrespondenceIsNotNull()
	{
		return this.copypatientoncorrespondence != null;
	}
	public Boolean getCopyPatientOnCorrespondence()
	{
		return this.copypatientoncorrespondence;
	}
	public void setCopyPatientOnCorrespondence(Boolean value)
	{
		this.isValidated = false;
		this.copypatientoncorrespondence = value;
	}
	public boolean getCopyPatientOnCorrespondenceDateIsNotNull()
	{
		return this.copypatientoncorrespondencedate != null;
	}
	public ims.framework.utils.Date getCopyPatientOnCorrespondenceDate()
	{
		return this.copypatientoncorrespondencedate;
	}
	public void setCopyPatientOnCorrespondenceDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.copypatientoncorrespondencedate = value;
	}
	public boolean getCurrentMedicalInsuranceIsNotNull()
	{
		return this.currentmedicalinsurance != null;
	}
	public ims.core.vo.PatientMedicalInsuranceVo getCurrentMedicalInsurance()
	{
		return this.currentmedicalinsurance;
	}
	public void setCurrentMedicalInsurance(ims.core.vo.PatientMedicalInsuranceVo value)
	{
		this.isValidated = false;
		this.currentmedicalinsurance = value;
	}
	public boolean getMRNStatusIsNotNull()
	{
		return this.mrnstatus != null;
	}
	public ims.core.vo.lookups.MRNStatus getMRNStatus()
	{
		return this.mrnstatus;
	}
	public void setMRNStatus(ims.core.vo.lookups.MRNStatus value)
	{
		this.isValidated = false;
		this.mrnstatus = value;
	}
	/**
	* getName - Gets the name from the collection of names by identifer type
	*/
	public ims.core.vo.PersonName getName(ims.core.vo.lookups.NameType nameType)
	{
		if (othernames == null) 
			return null;
	
		for (int i = 0; i < othernames.size(); i++)
		{
			ims.core.vo.PersonName name = othernames.get(i);		
			if (name != null && name.getNameType() != null && name.getNameType().equals(nameType))
			{
				return name;
			}
		}
	
		return null;
	}
	/**
	* getMaidenName - return the maiden name details from otherNames
	*/
	public ims.core.vo.PersonName getMaidenName()
	{
		return getName(ims.core.vo.lookups.NameType.MAIDEN);
	}
	/**
	* setMaidenName - sets the maiden name
	*/
	public void setMaidenName(String surname, String forename)
	{
		ims.core.vo.PersonName name = new PersonName();
		name.setSurname(surname);
		name.setForename(forename);
		setMaidenName(name);
	}
	/**
	* setMaidenName - if Maiden Name exists update details else add a miden name to otherNames
	*/
	public void setMaidenName(ims.core.vo.PersonName name)
	{
		if (name == null)
		{
			removeNameType(ims.core.vo.lookups.NameType.MAIDEN);
			return;
		}
		ims.core.vo.PersonName maidenName = getMaidenName();
		if (maidenName != null)
		{
			maidenName.setSurname(name.getSurname());
			maidenName.setForename(name.getForename());
		}
		else
		{
			if (othernames == null) othernames = new ims.core.vo.PersonNameCollection();
			
			name.setNameType(ims.core.vo.lookups.NameType.MAIDEN);
			othernames.add(name);
		}
	}
	/**
	* removeNameType
	*/
	public void removeNameType(ims.core.vo.lookups.NameType nameType)
	{
		if (othernames == null) 
			return;
		
		for (int i =0; i < othernames.size(); i++)
		{	
			ims.core.vo.PersonName name = othernames.get(i);
			if (name.getNameType()!=null && name.getNameType().equals(nameType))
			{
				othernames.remove(i);
				return;
			}
		}
	}
	/**
	* validateNTPFPatient : as it suggests very specific and only for NTPF
	*/
	public String[] validateNTPFPatient() 
	{
		java.util.ArrayList arrListErrors = new java.util.ArrayList();
	
		if (this.name != null)
		{
			if (this.name.surname == null)
				arrListErrors.add(new String("Surname is a mandatory field"));
			else if (this.name.surname.equals(""))
				arrListErrors.add(new String("Surname is a mandatory field"));
			
			if (this.name.forename == null)
				arrListErrors.add(new String("Forename is a mandatory field"));
			else if (this.name.forename.equals(""))
				arrListErrors.add(new String("Forename is a mandatory field"));
		}
	
		if (this.sex == null)
			arrListErrors.add(new String("Sex is a mandatory field"));
	
		Boolean bShowMessage = Boolean.FALSE;
		Boolean bShowDodMessage = Boolean.FALSE;
		if ((this.dob != null) && (this.dob.toString() != "__/__/____"))
		{
			if (this.dob.isDate())
			{
				if (this.dob.toDate().isGreaterThan(new ims.framework.utils.Date()))
					bShowMessage = Boolean.TRUE;
	
				if (this.dod != null)
				{
					if (this.dob.toDate().isGreaterThan(this.dod))
						bShowDodMessage = Boolean.TRUE;
				}
			}
			else
			{
				if (this.dob.getYear().intValue() > new ims.framework.utils.Date().getYear())
					bShowMessage = Boolean.TRUE;
				else if ((this.dob.getYear().intValue() == new ims.framework.utils.Date().getYear()) 
					&& (this.dob.getMonth() != null)
					&& (this.dob.getMonth().intValue() > new ims.framework.utils.Date().getMonth()))
					bShowMessage = Boolean.TRUE;
			}
		}
	
		if (bShowMessage.booleanValue())
			arrListErrors.add(new String("DOB cannot be in the future."));
		if (bShowDodMessage.booleanValue())
			arrListErrors.add(new String("DOD cannot be before DOB."));
	
		String[] arrErrors = new String[arrListErrors.toArray().length];
		for (int i = 0; i < arrListErrors.toArray().length; i++)
			arrErrors[i] = (String) arrListErrors.toArray()[i];
	
		String[] patErrors = this.validate();
		if (patErrors != null || arrErrors.length > 0)
		{
			int length = 0;
			if (patErrors != null)
				length = patErrors.length;
	
			String[] errors = new String[length + arrErrors.length];
	
			for (int i = 0; i < length; i++)
				errors[i] = patErrors[i];
	
			for (int i = 0; i < arrErrors.length; i++)
			{
				errors[length] = arrErrors[i];
				length += 1;
			}
	
			if (errors.length > 0)
				return errors;
			else
				return null;
		}
		return null;
	}
	/**
	* getPatientInfoButtonText : Return the string for the Info Button.
	*/
	public String getPatientInfoButtonText()
			{
				calculateAge();
		
				java.lang.StringBuffer sb = new java.lang.StringBuffer("");
		
				if (this.dod != null)
					sb.append(ims.configuration.ConfigFlag.UI.RIP_INFO_PREFIX.getValue());
		
				sb.append("<font color=\"#FF0000\"><b><u>Demographic Details</b></u></font><br><b>Name:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ");
				if (this.getName() != null)
					sb.append(this.getName().toString());
				sb.append("<br> <b>Address:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
				if (this.address != null)
					sb.append(this.address.toDisplayString());
				// WDEV-8205
				boolean homePhoneDisplayed = false;
				if (!ims.configuration.ConfigFlag.UI.DEMOGRAPHICS_TYPE.getValue().equals("UK") && (this.address != null) && (this.address.phone != null) && this.address.phone.trim().length() > 0)// WDEV-12085
				{
					sb.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><b>Home Tel:</b>&nbsp;&nbsp;&nbsp;&nbsp;");
					homePhoneDisplayed = true;// WDEV-12085
					sb.append(this.address.phone);
				}
		
				if (this.getCommChannels() != null)
				{
					for (int i = 0; i < this.getCommChannels().size(); i++)
					{
						ims.core.vo.CommChannelVo voComChannel = this.getCommChannels().get(i);
		
						if (voComChannel != null && voComChannel.getChannelType() != null && voComChannel.getCommValue() != null)
						{
							// WDEV-8205
							if (!homePhoneDisplayed || !voComChannel.channeltype.equals(ims.core.vo.lookups.ChannelType.HOME_PHONE))
							{
								sb.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><b>");
								sb.append(voComChannel.getChannelType().toString());
								sb.append(":</b>&nbsp;&nbsp;&nbsp;");
								sb.append(voComChannel.getCommValue());
							}
						}
					}
				}
				sb.append("<br><b>Sex:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
				if (this.sex != null)
					sb.append(this.sex.toString());
				else
					sb.append(" Sex Unknown ");
				sb.append("<br><b>DOB:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
				if (this.dob != null)
					sb.append(dob.toString(ims.framework.utils.DateFormat.STANDARD));
				else
					sb.append("DOB Unknown ");
				sb.append("<br><b>Age:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
				if (this.dob != null)
					sb.append(calculateAgeText());
		
				sb.append("<br><br><font color=\"#FF0000\"><b><u>Identifiers</u></b></font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
				if (this.getIdentifiers() != null)
				{
					for (int i = 0; i < this.getIdentifiers().size(); i++)
					{
						ims.core.vo.PatientId id2 = this.getIdentifiers().get(i);
		
						if (id2 != null && id2.getType() != null && id2.getValue() != null)
						{
							sb.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><b>");
							sb.append(id2.getType().toString());
							sb.append(":</b>&nbsp;&nbsp;&nbsp;");
							sb.append(id2.getValue());
						}
					}
				}
		
				sb.append("<br><br><font color=\"#FF0000\"><b><u>Registered GP:</u></b></font><br><b>Name:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
				if ((this.gp != null) && (this.gp.name != null))
					sb.append(this.gp.name.toString());
		
				sb.append("<br><b>National Code:</b>&nbsp;&nbsp;&nbsp;");
				if ((this.gp != null) && (this.gp.getNationalCode() != null))
					sb.append(this.gp.getNationalCode());
		
				if (Boolean.FALSE.equals(ims.configuration.gen.ConfigFlag.DOM.GP_USE_SURGERIES.getValue()))
				{
					OrganisationWithSitesVo gpPractice = this.practice;
		
					if ((this.practice == null) && (this.gp != null) && (this.gp.practices != null))
					{
						gpPractice = this.gp.practices.get(0).getPractice();
					}
		
					if (gpPractice != null)
					{
						sb.append("<br><b>Practice Address:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
						sb.append(gpPractice.getAddress() == null ? "" : gpPractice.getAddress().toDisplayString());
					}
		
					if (this.gp != null)
					{
						if (this.gp.commchannels != null)
						{
							CommChannelVo gpGenPhone = this.gp.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.GEN_PHONE);
							CommChannelVo gpHomePhone = this.gp.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.HOME_PHONE);
							CommChannelVo gpWorkPhone = this.gp.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.WORK_PHONE);
							CommChannelVo gpMobilePhone = this.gp.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.MOBILE);
							CommChannelVo gpFaxPhone = this.gp.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.FAX);
		
							if (gpGenPhone != null)
							{
								sb.append("<br><b>GP General Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(gpGenPhone.toString());
							}
							else if (gpPractice != null && gpPractice.getCommChannelsIsNotNull())
							{
								CommChannelVo practiceGeneralPhone = gpPractice.getCommunicationChannel(ims.core.vo.lookups.ChannelType.GEN_PHONE);
		
								if (practiceGeneralPhone != null)
								{
									sb.append("<br><b>Practice General Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
									sb.append(practiceGeneralPhone.toString());
								}
							}
		
							if (gpHomePhone != null)
							{
								sb.append("<br><b>GP Home Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(gpHomePhone.toString());
							}
							else if (gpPractice != null && gpPractice.getCommChannelsIsNotNull())
							{
								CommChannelVo practiceHomePhone = gpPractice.getCommunicationChannel(ims.core.vo.lookups.ChannelType.HOME_PHONE);
		
								if (practiceHomePhone != null)
								{
									sb.append("<br><b>Practice Home Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
									sb.append(practiceHomePhone.toString());
								}
							}
		
							if (gpMobilePhone != null)
							{
								sb.append("<br><b>GP Mobile Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(gpMobilePhone.toString());
							}
							else if (gpPractice != null && gpPractice.getCommChannelsIsNotNull())
							{
								CommChannelVo practiceMobilePhone = gpPractice.getCommunicationChannel(ims.core.vo.lookups.ChannelType.MOBILE);
		
								if (practiceMobilePhone != null)
								{
									sb.append("<br><b>Practice Mobile Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
									sb.append(practiceMobilePhone.toString());
								}
							}
		
							if (gpWorkPhone != null)
							{
								sb.append("<br><b>GP Work Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(gpWorkPhone.toString());
							}
							else if (gpPractice != null && gpPractice.getCommChannelsIsNotNull())
							{
								CommChannelVo practiceWorkPhone = gpPractice.getCommunicationChannel(ims.core.vo.lookups.ChannelType.WORK_PHONE);
		
								if (practiceWorkPhone != null)
								{
									sb.append("<br><b>Practice Work Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
									sb.append(practiceWorkPhone.toString());
								}
							}
		
							if (gpFaxPhone != null)
							{
								sb.append("<br><b>GP Fax Number:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(gpFaxPhone);
							}
							else if (gpPractice != null && gpPractice.getCommChannelsIsNotNull())
							{
								CommChannelVo practiceFaxPhone = gpPractice.getCommunicationChannel(ims.core.vo.lookups.ChannelType.FAX);
		
								if (practiceFaxPhone != null)
								{
									sb.append("<br><b>Practice Fax Number:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
									sb.append(practiceFaxPhone.toString());
								}
							}
						}
						else if (gpPractice != null && gpPractice.getCommChannelsIsNotNull())
						{
							CommChannelVo practiceGeneralPhone = gpPractice.getCommunicationChannel(ims.core.vo.lookups.ChannelType.GEN_PHONE);
							CommChannelVo practiceHomePhone = gpPractice.getCommunicationChannel(ims.core.vo.lookups.ChannelType.HOME_PHONE);
							CommChannelVo practiceWorkPhone = gpPractice.getCommunicationChannel(ims.core.vo.lookups.ChannelType.WORK_PHONE);
							CommChannelVo practiceMobilePhone = gpPractice.getCommunicationChannel(ims.core.vo.lookups.ChannelType.MOBILE);
							CommChannelVo practiceFaxPhone = gpPractice.getCommunicationChannel(ims.core.vo.lookups.ChannelType.FAX);
		
							if (practiceGeneralPhone != null)
							{
								sb.append("<br><b>Practice General Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(practiceGeneralPhone.toString());
							}
		
							if (practiceHomePhone != null)
							{
								sb.append("<br><b>Practice Home Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(practiceHomePhone.toString());
							}
		
							if (practiceMobilePhone != null)
							{
								sb.append("<br><b>Practice Mobile Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(practiceMobilePhone.toString());
							}
		
							if (practiceWorkPhone != null)
							{
								sb.append("<br><b>Practice Work Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(practiceWorkPhone.toString());
							}
		
							if (practiceFaxPhone != null)
							{
								sb.append("<br><b>Practice Fax Number:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(practiceFaxPhone.toString());
							}
						}
					}
				}
				else
				{
					if (this.gpsurgery != null)
					{
						sb.append("<br><b>Surgery Address:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
						sb.append(this.gpsurgery.address == null ? "" : this.gpsurgery.address.toDisplayString());
					}
		
					if (this.gp != null)
					{
						if (this.gp.commchannels != null)
						{
							CommChannelVo gpGenPhone = this.gp.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.GEN_PHONE);
							CommChannelVo gpHomePhone = this.gp.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.HOME_PHONE);
							CommChannelVo gpWorkPhone = this.gp.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.WORK_PHONE);
							CommChannelVo gpMobilePhone = this.gp.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.MOBILE);
							CommChannelVo gpFaxPhone = this.gp.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.FAX);
		
							if (gpGenPhone != null)
							{
								sb.append("<br><b>GP General Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(gpGenPhone.toString());
							}
							else if (this.gpsurgery != null && this.gpsurgery.commchannels != null)
							{
								CommChannelVo surgeryGeneralPhone = this.gpsurgery.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.GEN_PHONE);
		
								if (surgeryGeneralPhone != null)
								{
									sb.append("<br><b>Surgery General Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
									sb.append(surgeryGeneralPhone.toString());
								}
							}
		
							if (gpHomePhone != null)
							{
								sb.append("<br><b>GP Home Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(gpHomePhone.toString());
							}
							else if (this.gpsurgery != null && this.gpsurgery.commchannels != null)
							{
								CommChannelVo surgeryHomePhone = this.gpsurgery.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.HOME_PHONE);
		
								if (surgeryHomePhone != null)
								{
									sb.append("<br><b>Surgery Home Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
									sb.append(surgeryHomePhone.toString());
								}
							}
		
							if (gpMobilePhone != null)
							{
								sb.append("<br><b>GP Mobile Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(gpMobilePhone.toString());
							}
							else if (this.gpsurgery != null && this.gpsurgery.commchannels != null)
							{
								CommChannelVo surgeryMobilePhone = this.gpsurgery.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.MOBILE);
		
								if (surgeryMobilePhone != null)
								{
									sb.append("<br><b>Surgery Mobile Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
									sb.append(surgeryMobilePhone.toString());
								}
							}
		
							if (gpWorkPhone != null)
							{
								sb.append("<br><b>GP Work Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(gpWorkPhone.toString());
							}
							else if (this.gpsurgery != null && this.gpsurgery.commchannels != null)
							{
								CommChannelVo surgeryWorkPhone = this.gpsurgery.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.WORK_PHONE);
		
								if (surgeryWorkPhone != null)
								{
									sb.append("<br><b>Surgery Work Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
									sb.append(surgeryWorkPhone.toString());
								}
							}
		
							if (gpFaxPhone != null)
							{
								sb.append("<br><b>GP Fax Number:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(gpFaxPhone);
							}
							else if (this.gpsurgery != null && this.gpsurgery.commchannels != null)
							{
								CommChannelVo surgeryFaxPhone = this.gpsurgery.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.FAX);
		
								if (surgeryFaxPhone != null)
								{
									sb.append("<br><b>Surgery Fax Number:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
									sb.append(surgeryFaxPhone.toString());
								}
							}
						}
						else if (this.gpsurgery != null && this.gpsurgery.commchannels != null)
						{
							CommChannelVo surgeryGeneralPhone = this.gpsurgery.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.GEN_PHONE);
							CommChannelVo surgeryHomePhone = this.gpsurgery.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.HOME_PHONE);
							CommChannelVo surgeryWorkPhone = this.gpsurgery.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.WORK_PHONE);
							CommChannelVo surgeryMobilePhone = this.gpsurgery.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.MOBILE);
							CommChannelVo surgeryFaxPhone = this.gpsurgery.commchannels.getCommunicationChannel(ims.core.vo.lookups.ChannelType.FAX);
		
							if (surgeryGeneralPhone != null)
							{
								sb.append("<br><b>Surgery General Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(surgeryGeneralPhone.toString());
							}
		
							if (surgeryHomePhone != null)
							{
								sb.append("<br><b>Surgery Home Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(surgeryHomePhone.toString());
							}
		
							if (surgeryMobilePhone != null)
							{
								sb.append("<br><b>Surgery Mobile Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(surgeryMobilePhone.toString());
							}
		
							if (surgeryWorkPhone != null)
							{
								sb.append("<br><b>Surgery Work Phone:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(surgeryWorkPhone.toString());
							}
		
							if (surgeryFaxPhone != null)
							{
								sb.append("<br><b>Surgery Fax Number:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
								sb.append(surgeryFaxPhone.toString());
							}
						}
					}
				}
		
				return sb.toString();
			}
	
	/**
	* upperCaseIdentifierValues
	*/
	public void upperCaseIdentifierValues()
	{
		for(int i=0; this.identifiers != null && i<this.identifiers.size();i++)
		{
			this.identifiers.get(i).setValue(this.identifiers.get(i).getIdValue().toUpperCase());
		}
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.name != null)
		{
			if(!this.name.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.address != null)
		{
			if(!this.address.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.ward != null)
		{
			if(!this.ward.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.identifiers != null)
		{
			if(!this.identifiers.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.associatedpatient != null)
		{
			if(!this.associatedpatient.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.commchannels != null)
		{
			if(!this.commchannels.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.nok != null)
		{
			if(!this.nok.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.insurance != null)
		{
			if(!this.insurance.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.othernames != null)
		{
			if(!this.othernames.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.addresses != null)
		{
			if(!this.addresses.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.patientalerts != null)
		{
			if(!this.patientalerts.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.photo != null)
		{
			if(!this.photo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.currentmedicalinsurance != null)
		{
			if(!this.currentmedicalinsurance.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name != null)
		{
			String[] listOfOtherErrors = this.name.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.address != null)
		{
			String[] listOfOtherErrors = this.address.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.ward != null)
		{
			String[] listOfOtherErrors = this.ward.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.identifiers != null)
		{
			String[] listOfOtherErrors = this.identifiers.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.associatedpatient != null)
		{
			String[] listOfOtherErrors = this.associatedpatient.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.commchannels != null)
		{
			String[] listOfOtherErrors = this.commchannels.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.nok != null)
		{
			String[] listOfOtherErrors = this.nok.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.insurance != null)
		{
			String[] listOfOtherErrors = this.insurance.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.othernames != null)
		{
			String[] listOfOtherErrors = this.othernames.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.addresses != null)
		{
			String[] listOfOtherErrors = this.addresses.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.patientalerts != null)
		{
			String[] listOfOtherErrors = this.patientalerts.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.photo != null)
		{
			String[] listOfOtherErrors = this.photo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.currentmedicalinsurance != null)
		{
			String[] listOfOtherErrors = this.currentmedicalinsurance.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		Patient clone = new Patient(this.id, this.version);
		
		if(this.name == null)
			clone.name = null;
		else
			clone.name = (ims.core.vo.PersonName)this.name.clone();
		if(this.sex == null)
			clone.sex = null;
		else
			clone.sex = (ims.core.vo.lookups.Sex)this.sex.clone();
		clone.age = this.age;
		clone.agetext = this.agetext;
		if(this.address == null)
			clone.address = null;
		else
			clone.address = (ims.core.vo.PersonAddress)this.address.clone();
		if(this.dob == null)
			clone.dob = null;
		else
			clone.dob = (ims.framework.utils.PartialDate)this.dob.clone();
		if(this.dod == null)
			clone.dod = null;
		else
			clone.dod = (ims.framework.utils.Date)this.dod.clone();
		if(this.ward == null)
			clone.ward = null;
		else
			clone.ward = (ims.core.vo.LocationLiteVo)this.ward.clone();
		if(this.religion == null)
			clone.religion = null;
		else
			clone.religion = (ims.core.vo.lookups.Religion)this.religion.clone();
		clone.hasallergies = this.hasallergies;
		clone.hasalerts = this.hasalerts;
		if(this.identifiers == null)
			clone.identifiers = null;
		else
			clone.identifiers = (ims.core.vo.PatientIdCollection)this.identifiers.clone();
		clone.isactive = this.isactive;
		if(this.associatedpatient == null)
			clone.associatedpatient = null;
		else
			clone.associatedpatient = (ims.core.vo.PatientShort)this.associatedpatient.clone();
		if(this.commchannels == null)
			clone.commchannels = null;
		else
			clone.commchannels = (ims.core.vo.CommChannelVoCollection)this.commchannels.clone();
		if(this.ethnicorigin == null)
			clone.ethnicorigin = null;
		else
			clone.ethnicorigin = (ims.core.vo.lookups.EthnicOrigin)this.ethnicorigin.clone();
		if(this.maritalstatus == null)
			clone.maritalstatus = null;
		else
			clone.maritalstatus = (ims.core.vo.lookups.MaritalStatus)this.maritalstatus.clone();
		clone.scn = this.scn;
		if(this.sourceofinformation == null)
			clone.sourceofinformation = null;
		else
			clone.sourceofinformation = (ims.core.vo.lookups.RegistrationSourceOfInfo)this.sourceofinformation.clone();
		if(this.sysinfo == null)
			clone.sysinfo = null;
		else
			clone.sysinfo = (ims.vo.SystemInformation)this.sysinfo.clone();
		clone.hasactivealerts = this.hasactivealerts;
		if(this.timeofdeath == null)
			clone.timeofdeath = null;
		else
			clone.timeofdeath = (ims.framework.utils.Time)this.timeofdeath.clone();
		clone.isquickregistrationpatient = this.isquickregistrationpatient;
		if(this.ocsnotification == null)
			clone.ocsnotification = null;
		else
			clone.ocsnotification = (ims.core.vo.PatientNotificationsFillerOnlyVo)this.ocsnotification.clone();
		clone.currentresponsibleconsultant = this.currentresponsibleconsultant;
		if(this.gp == null)
			clone.gp = null;
		else
			clone.gp = (ims.core.vo.GpShortVo)this.gp.clone();
		if(this.occupation == null)
			clone.occupation = null;
		else
			clone.occupation = (ims.core.vo.lookups.Occupation)this.occupation.clone();
		if(this.language == null)
			clone.language = null;
		else
			clone.language = (ims.core.vo.lookups.Language)this.language.clone();
		if(this.nok == null)
			clone.nok = null;
		else
			clone.nok = (ims.core.vo.NextOfKin)this.nok.clone();
		if(this.insurance == null)
			clone.insurance = null;
		else
			clone.insurance = (ims.core.vo.InsuranceVo)this.insurance.clone();
		if(this.othernames == null)
			clone.othernames = null;
		else
			clone.othernames = (ims.core.vo.PersonNameCollection)this.othernames.clone();
		if(this.addresses == null)
			clone.addresses = null;
		else
			clone.addresses = (ims.core.vo.PersonAddressCollection)this.addresses.clone();
		if(this.gpsurgery == null)
			clone.gpsurgery = null;
		else
			clone.gpsurgery = (ims.core.vo.LocSiteShortVo)this.gpsurgery.clone();
		if(this.patientalerts == null)
			clone.patientalerts = null;
		else
			clone.patientalerts = (ims.core.vo.PatientAlertLiteVoCollection)this.patientalerts.clone();
		clone.clientparent = this.clientparent;
		if(this.photo == null)
			clone.photo = null;
		else
			clone.photo = (ims.core.vo.AppDBImageVo)this.photo.clone();
		clone.savealias = this.savealias;
		clone.cancelsd_appts = this.cancelsd_appts;
		if(this.homefolderlocation == null)
			clone.homefolderlocation = null;
		else
			clone.homefolderlocation = (ims.core.vo.lookups.HomeFolderLocation)this.homefolderlocation.clone();
		clone.harccode = this.harccode;
		if(this.prefcommlanguage == null)
			clone.prefcommlanguage = null;
		else
			clone.prefcommlanguage = (ims.core.vo.lookups.PreferredCommunicationLanguage)this.prefcommlanguage.clone();
		if(this.practice == null)
			clone.practice = null;
		else
			clone.practice = (ims.core.vo.OrganisationWithSitesVo)this.practice.clone();
		clone.copypatientoncorrespondence = this.copypatientoncorrespondence;
		if(this.copypatientoncorrespondencedate == null)
			clone.copypatientoncorrespondencedate = null;
		else
			clone.copypatientoncorrespondencedate = (ims.framework.utils.Date)this.copypatientoncorrespondencedate.clone();
		if(this.currentmedicalinsurance == null)
			clone.currentmedicalinsurance = null;
		else
			clone.currentmedicalinsurance = (ims.core.vo.PatientMedicalInsuranceVo)this.currentmedicalinsurance.clone();
		if(this.mrnstatus == null)
			clone.mrnstatus = null;
		else
			clone.mrnstatus = (ims.core.vo.lookups.MRNStatus)this.mrnstatus.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(Patient.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A Patient object cannot be compared an Object of type " + obj.getClass().getName());
		}
		Patient compareObj = (Patient)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getName() == null && compareObj.getName() != null)
				return -1;
			if(this.getName() != null && compareObj.getName() == null)
				return 1;
			if(this.getName() != null && compareObj.getName() != null)
				retVal = this.getName().compareTo(compareObj.getName());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.gp != null)
			count++;
		if(this.occupation != null)
			count++;
		if(this.language != null)
			count++;
		if(this.nok != null)
			count++;
		if(this.insurance != null)
			count++;
		if(this.othernames != null)
			count++;
		if(this.addresses != null)
			count++;
		if(this.gpsurgery != null)
			count++;
		if(this.patientalerts != null)
			count++;
		if(this.clientparent != null)
			count++;
		if(this.photo != null)
			count++;
		if(this.savealias != null)
			count++;
		if(this.cancelsd_appts != null)
			count++;
		if(this.homefolderlocation != null)
			count++;
		if(this.harccode != null)
			count++;
		if(this.prefcommlanguage != null)
			count++;
		if(this.practice != null)
			count++;
		if(this.copypatientoncorrespondence != null)
			count++;
		if(this.copypatientoncorrespondencedate != null)
			count++;
		if(this.currentmedicalinsurance != null)
			count++;
		if(this.mrnstatus != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 21;
	}
	protected ims.core.vo.GpShortVo gp;
	protected ims.core.vo.lookups.Occupation occupation;
	protected ims.core.vo.lookups.Language language;
	protected ims.core.vo.NextOfKin nok;
	protected ims.core.vo.InsuranceVo insurance;
	protected ims.core.vo.PersonNameCollection othernames;
	protected ims.core.vo.PersonAddressCollection addresses;
	protected ims.core.vo.LocSiteShortVo gpsurgery;
	protected ims.core.vo.PatientAlertLiteVoCollection patientalerts;
	protected ims.core.patient.vo.PatientRefVo clientparent;
	protected ims.core.vo.AppDBImageVo photo;
	protected String savealias;
	protected Boolean cancelsd_appts;
	protected ims.core.vo.lookups.HomeFolderLocation homefolderlocation;
	protected String harccode;
	protected ims.core.vo.lookups.PreferredCommunicationLanguage prefcommlanguage;
	protected ims.core.vo.OrganisationWithSitesVo practice;
	protected Boolean copypatientoncorrespondence;
	protected ims.framework.utils.Date copypatientoncorrespondencedate;
	protected ims.core.vo.PatientMedicalInsuranceVo currentmedicalinsurance;
	protected ims.core.vo.lookups.MRNStatus mrnstatus;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
