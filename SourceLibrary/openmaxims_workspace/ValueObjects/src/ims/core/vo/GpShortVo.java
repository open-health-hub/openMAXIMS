//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.resource.people.Gp business object (ID: 1006100001).
 */
public class GpShortVo extends ims.core.vo.GpLiteVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public GpShortVo()
	{
	}
	public GpShortVo(Integer id, int version)
	{
		super(id, version);
	}
	public GpShortVo(ims.core.vo.beans.GpShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName() == null ? null : bean.getName().buildVo();
		this.codemappings = ims.core.vo.TaxonomyMapCollection.buildFromBeanCollection(bean.getCodeMappings());
		this.commchannels = ims.core.vo.CommChannelVoCollection.buildFromBeanCollection(bean.getCommChannels());
		this.practices = ims.core.vo.GpToPracticesVoCollection.buildFromBeanCollection(bean.getPractices());
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.GPStatus.buildLookup(bean.getStatus());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.GpShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName() == null ? null : bean.getName().buildVo(map);
		this.codemappings = ims.core.vo.TaxonomyMapCollection.buildFromBeanCollection(bean.getCodeMappings());
		this.commchannels = ims.core.vo.CommChannelVoCollection.buildFromBeanCollection(bean.getCommChannels());
		this.practices = ims.core.vo.GpToPracticesVoCollection.buildFromBeanCollection(bean.getPractices());
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.GPStatus.buildLookup(bean.getStatus());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.GpShortVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.GpShortVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.GpShortVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PRACTICES"))
			return getPractices();
		if(fieldName.equals("STATUS"))
			return getStatus();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPracticesIsNotNull()
	{
		return this.practices != null;
	}
	public ims.core.vo.GpToPracticesVoCollection getPractices()
	{
		return this.practices;
	}
	public void setPractices(ims.core.vo.GpToPracticesVoCollection value)
	{
		this.isValidated = false;
		this.practices = value;
	}
	public boolean getStatusIsNotNull()
	{
		return this.status != null;
	}
	public ims.core.vo.lookups.GPStatus getStatus()
	{
		return this.status;
	}
	public void setStatus(ims.core.vo.lookups.GPStatus value)
	{
		this.isValidated = false;
		this.status = value;
	}
	public String toString()
	{
		StringBuffer sb = new StringBuffer();
		if(this.name != null)
			sb.append(this.name);
		return sb.toString();
	}
	/**
	* removeCommChannel
	*/
	public void removeCommChannel(ims.core.vo.lookups.ChannelType commType)
	{
		if (commchannels == null) 
			return;
		
		for (int i =0; i < commchannels.size(); i++)
		{	
			ims.core.vo.CommChannelVo chan = commchannels.get(i);
			if (chan.getChannelType().equals(commType))
			{
				commchannels.remove(i);
				return;
			}
		}
	}
	/**
	* getCommChannel
	*/
	public ims.core.vo.CommChannelVo getCommChannel(ims.core.vo.lookups.ChannelType commType)
	{
		if (commchannels == null) return null;
		for (int i = 0; i < commchannels.size(); i++)
		{
			ims.core.vo.CommChannelVo chan = commchannels.get(i);
			if (chan.getChannelType().equals(commType))
			{
				return chan;
			}
		}
		return null;		
	}
	/**
	* setCommChannel
	*/
	public void setCommChannel(ims.core.vo.lookups.ChannelType commType, String val)
	{
		if (val == null)
		{
			removeCommChannel(commType);
			return;
		}
		ims.core.vo.CommChannelVo chan =  getCommChannel(commType);
		if (chan != null)
		{
			chan.setCommValue(val);
		}
		else
		{
			if (commchannels == null) commchannels = new ims.core.vo.CommChannelVoCollection();
			chan = new ims.core.vo.CommChannelVo();
			chan.setChannelType(commType);
			chan.setCommValue(val);
			commchannels.add(chan);
		}
	}
	/**
	* getMobile
	*/
	public String getMobile()
	{
		ims.core.vo.CommChannelVo chan = getCommChannel(ims.core.vo.lookups.ChannelType.MOBILE);
		if (chan == null) return null;
		else return chan.getCommValue();
	}
	
	/**
	* setMobile
	*/
	public void setMobile(String mobile)
	{
		setCommChannel(ims.core.vo.lookups.ChannelType.MOBILE, mobile);
	}
	
	/**
	* getEmailAddress
	*/
	public String getEmailAddress()
	{
		ims.core.vo.CommChannelVo chan = getCommChannel(ims.core.vo.lookups.ChannelType.EMAIL);
		if (chan == null) return null;
		else return chan.getCommValue();
	}
	
	/**
	* setEmailAddress
	*/
	public void setEmailAddress(String email)
	{
		setCommChannel(ims.core.vo.lookups.ChannelType.EMAIL, email);
	}
	
	
	/**
	* getPracticeForGPCode
	*/
	/**
	* getPracticeForGPCode
	*/
	public ims.core.vo.OrganisationWithSitesVo getPracticeForGPCode(String strGPCode)
	{
		if (practices == null) return null;
		for (int i = 0; i < practices.size(); i++)
		{
			if (practices.get(i).getGpCode().equals(strGPCode))
				return practices.get(i).getPractice();
		}
		
		return null;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.name != null)
		{
			if(!this.name.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.codemappings != null)
		{
			if(!this.codemappings.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.commchannels != null)
		{
			if(!this.commchannels.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.practices != null)
		{
			if(!this.practices.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name != null)
		{
			String[] listOfOtherErrors = this.name.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.codemappings != null)
		{
			String[] listOfOtherErrors = this.codemappings.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.commchannels != null)
		{
			String[] listOfOtherErrors = this.commchannels.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.practices != null)
		{
			String[] listOfOtherErrors = this.practices.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		GpShortVo clone = new GpShortVo(this.id, this.version);
		
		if(this.name == null)
			clone.name = null;
		else
			clone.name = (ims.core.vo.PersonName)this.name.clone();
		if(this.codemappings == null)
			clone.codemappings = null;
		else
			clone.codemappings = (ims.core.vo.TaxonomyMapCollection)this.codemappings.clone();
		if(this.commchannels == null)
			clone.commchannels = null;
		else
			clone.commchannels = (ims.core.vo.CommChannelVoCollection)this.commchannels.clone();
		if(this.practices == null)
			clone.practices = null;
		else
			clone.practices = (ims.core.vo.GpToPracticesVoCollection)this.practices.clone();
		if(this.status == null)
			clone.status = null;
		else
			clone.status = (ims.core.vo.lookups.GPStatus)this.status.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(GpShortVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A GpShortVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		GpShortVo compareObj = (GpShortVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getName() == null && compareObj.getName() != null)
				return -1;
			if(this.getName() != null && compareObj.getName() == null)
				return 1;
			if(this.getName() != null && compareObj.getName() != null)
				retVal = this.getName().compareTo(compareObj.getName());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.practices != null)
			count++;
		if(this.status != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 2;
	}
	protected ims.core.vo.GpToPracticesVoCollection practices;
	protected ims.core.vo.lookups.GPStatus status;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
