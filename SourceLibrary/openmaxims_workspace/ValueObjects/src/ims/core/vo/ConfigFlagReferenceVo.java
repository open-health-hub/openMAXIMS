//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.configuration.ConfigFlagReference business object (ID: 1028100067).
 */
public class ConfigFlagReferenceVo extends ims.core.configuration.vo.ConfigFlagReferenceRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ConfigFlagReferenceVo()
	{
	}
	public ConfigFlagReferenceVo(Integer id, int version)
	{
		super(id, version);
	}
	public ConfigFlagReferenceVo(ims.core.vo.beans.ConfigFlagReferenceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.flaggroupname = bean.getFlagGroupName();
		this.flagname = bean.getFlagName();
		this.module = bean.getModule();
		if(bean.getForms() != null)
		{
			this.forms = new ims.core.configuration.vo.AppFormRefVoCollection();
			for(int forms_i = 0; forms_i < bean.getForms().length; forms_i++)
			{
				this.forms.add(new ims.core.configuration.vo.AppFormRefVo(new Integer(bean.getForms()[forms_i].getId()), bean.getForms()[forms_i].getVersion()));
			}
		}
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.ConfigFlagReferenceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.flaggroupname = bean.getFlagGroupName();
		this.flagname = bean.getFlagName();
		this.module = bean.getModule();
		if(bean.getForms() != null)
		{
			this.forms = new ims.core.configuration.vo.AppFormRefVoCollection();
			for(int forms_i = 0; forms_i < bean.getForms().length; forms_i++)
			{
				this.forms.add(new ims.core.configuration.vo.AppFormRefVo(new Integer(bean.getForms()[forms_i].getId()), bean.getForms()[forms_i].getVersion()));
			}
		}
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.ConfigFlagReferenceVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.ConfigFlagReferenceVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.ConfigFlagReferenceVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("FLAGGROUPNAME"))
			return getFlagGroupName();
		if(fieldName.equals("FLAGNAME"))
			return getFlagName();
		if(fieldName.equals("MODULE"))
			return getModule();
		if(fieldName.equals("FORMS"))
			return getForms();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getFlagGroupNameIsNotNull()
	{
		return this.flaggroupname != null;
	}
	public String getFlagGroupName()
	{
		return this.flaggroupname;
	}
	public static int getFlagGroupNameMaxLength()
	{
		return 255;
	}
	public void setFlagGroupName(String value)
	{
		this.isValidated = false;
		this.flaggroupname = value;
	}
	public boolean getFlagNameIsNotNull()
	{
		return this.flagname != null;
	}
	public String getFlagName()
	{
		return this.flagname;
	}
	public static int getFlagNameMaxLength()
	{
		return 255;
	}
	public void setFlagName(String value)
	{
		this.isValidated = false;
		this.flagname = value;
	}
	public boolean getModuleIsNotNull()
	{
		return this.module != null;
	}
	public String getModule()
	{
		return this.module;
	}
	public static int getModuleMaxLength()
	{
		return 50;
	}
	public void setModule(String value)
	{
		this.isValidated = false;
		this.module = value;
	}
	public boolean getFormsIsNotNull()
	{
		return this.forms != null;
	}
	public ims.core.configuration.vo.AppFormRefVoCollection getForms()
	{
		return this.forms;
	}
	public void setForms(ims.core.configuration.vo.AppFormRefVoCollection value)
	{
		this.isValidated = false;
		this.forms = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.flaggroupname != null)
			if(this.flaggroupname.length() > 255)
				listOfErrors.add("The length of the field [flaggroupname] in the value object [ims.core.vo.ConfigFlagReferenceVo] is too big. It should be less or equal to 255");
		if(this.flagname == null || this.flagname.length() == 0)
			listOfErrors.add("FlagName is mandatory");
		else if(this.flagname.length() > 255)
			listOfErrors.add("The length of the field [flagname] in the value object [ims.core.vo.ConfigFlagReferenceVo] is too big. It should be less or equal to 255");
		if(this.module != null)
			if(this.module.length() > 50)
				listOfErrors.add("The length of the field [module] in the value object [ims.core.vo.ConfigFlagReferenceVo] is too big. It should be less or equal to 50");
		if(this.forms == null || this.forms.size() == 0)
			listOfErrors.add("Forms are mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ConfigFlagReferenceVo clone = new ConfigFlagReferenceVo(this.id, this.version);
		
		clone.flaggroupname = this.flaggroupname;
		clone.flagname = this.flagname;
		clone.module = this.module;
		clone.forms = this.forms;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ConfigFlagReferenceVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ConfigFlagReferenceVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ConfigFlagReferenceVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ConfigFlagReferenceVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.flaggroupname != null)
			count++;
		if(this.flagname != null)
			count++;
		if(this.module != null)
			count++;
		if(this.forms != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 4;
	}
	protected String flaggroupname;
	protected String flagname;
	protected String module;
	protected ims.core.configuration.vo.AppFormRefVoCollection forms;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
