//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.core.vo;

/**
 * Linked to core.resource.people.ClinicalTeam business object (ID: 1006100003).
 */
public class ClinicalTeamVo extends ims.core.resource.people.vo.ClinicalTeamRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ClinicalTeamVo()
	{
	}
	public ClinicalTeamVo(Integer id, int version)
	{
		super(id, version);
	}
	public ClinicalTeamVo(ims.core.vo.beans.ClinicalTeamVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.teamname = bean.getTeamName();
		this.teamtype = bean.getTeamType() == null ? null : ims.core.vo.lookups.ClinicalTeamType.buildLookup(bean.getTeamType());
		this.teammembers = ims.core.vo.ClinicalTeamMemberVoCollection.buildFromBeanCollection(bean.getTeamMembers());
		this.leadhcp = bean.getLeadHCP() == null ? null : bean.getLeadHCP().buildVo();
		this.isactive = bean.getIsActive();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.core.vo.beans.ClinicalTeamVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.teamname = bean.getTeamName();
		this.teamtype = bean.getTeamType() == null ? null : ims.core.vo.lookups.ClinicalTeamType.buildLookup(bean.getTeamType());
		this.teammembers = ims.core.vo.ClinicalTeamMemberVoCollection.buildFromBeanCollection(bean.getTeamMembers());
		this.leadhcp = bean.getLeadHCP() == null ? null : bean.getLeadHCP().buildVo(map);
		this.isactive = bean.getIsActive();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.core.vo.beans.ClinicalTeamVoBean bean = null;
		if(map != null)
			bean = (ims.core.vo.beans.ClinicalTeamVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.core.vo.beans.ClinicalTeamVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("TEAMNAME"))
			return getTeamName();
		if(fieldName.equals("TEAMTYPE"))
			return getTeamType();
		if(fieldName.equals("TEAMMEMBERS"))
			return getTeamMembers();
		if(fieldName.equals("LEADHCP"))
			return getLeadHCP();
		if(fieldName.equals("ISACTIVE"))
			return getIsActive();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getTeamNameIsNotNull()
	{
		return this.teamname != null;
	}
	public String getTeamName()
	{
		return this.teamname;
	}
	public static int getTeamNameMaxLength()
	{
		return 50;
	}
	public void setTeamName(String value)
	{
		this.isValidated = false;
		this.teamname = value;
	}
	public boolean getTeamTypeIsNotNull()
	{
		return this.teamtype != null;
	}
	public ims.core.vo.lookups.ClinicalTeamType getTeamType()
	{
		return this.teamtype;
	}
	public void setTeamType(ims.core.vo.lookups.ClinicalTeamType value)
	{
		this.isValidated = false;
		this.teamtype = value;
	}
	public boolean getTeamMembersIsNotNull()
	{
		return this.teammembers != null;
	}
	public ims.core.vo.ClinicalTeamMemberVoCollection getTeamMembers()
	{
		return this.teammembers;
	}
	public void setTeamMembers(ims.core.vo.ClinicalTeamMemberVoCollection value)
	{
		this.isValidated = false;
		this.teammembers = value;
	}
	public boolean getLeadHCPIsNotNull()
	{
		return this.leadhcp != null;
	}
	public ims.core.vo.HcpLiteVo getLeadHCP()
	{
		return this.leadhcp;
	}
	public void setLeadHCP(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.leadhcp = value;
	}
	public boolean getIsActiveIsNotNull()
	{
		return this.isactive != null;
	}
	public Boolean getIsActive()
	{
		return this.isactive;
	}
	public void setIsActive(Boolean value)
	{
		this.isValidated = false;
		this.isactive = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.teammembers != null)
		{
			if(!this.teammembers.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.leadhcp != null)
		{
			if(!this.leadhcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.teamname == null || this.teamname.length() == 0)
			listOfErrors.add("TeamName is mandatory");
		else if(this.teamname.length() > 50)
			listOfErrors.add("The length of the field [teamname] in the value object [ims.core.vo.ClinicalTeamVo] is too big. It should be less or equal to 50");
		if(this.teamtype == null)
			listOfErrors.add("TeamType is mandatory");
		if(this.teammembers != null)
		{
			String[] listOfOtherErrors = this.teammembers.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.leadhcp != null)
		{
			String[] listOfOtherErrors = this.leadhcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.isactive == null)
			listOfErrors.add("IsActive is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ClinicalTeamVo clone = new ClinicalTeamVo(this.id, this.version);
		
		clone.teamname = this.teamname;
		if(this.teamtype == null)
			clone.teamtype = null;
		else
			clone.teamtype = (ims.core.vo.lookups.ClinicalTeamType)this.teamtype.clone();
		if(this.teammembers == null)
			clone.teammembers = null;
		else
			clone.teammembers = (ims.core.vo.ClinicalTeamMemberVoCollection)this.teammembers.clone();
		if(this.leadhcp == null)
			clone.leadhcp = null;
		else
			clone.leadhcp = (ims.core.vo.HcpLiteVo)this.leadhcp.clone();
		clone.isactive = this.isactive;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ClinicalTeamVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ClinicalTeamVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ClinicalTeamVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ClinicalTeamVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.teamname != null)
			count++;
		if(this.teamtype != null)
			count++;
		if(this.teammembers != null)
			count++;
		if(this.leadhcp != null)
			count++;
		if(this.isactive != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected String teamname;
	protected ims.core.vo.lookups.ClinicalTeamType teamtype;
	protected ims.core.vo.ClinicalTeamMemberVoCollection teammembers;
	protected ims.core.vo.HcpLiteVo leadhcp;
	protected Boolean isactive;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
