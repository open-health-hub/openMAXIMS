//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;


public class AppointmentBookingSearchFilterVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AppointmentBookingSearchFilterVo()
	{
	}
	public AppointmentBookingSearchFilterVo(ims.scheduling.vo.beans.AppointmentBookingSearchFilterVoBean bean)
	{
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.enddate = bean.getEndDate() == null ? null : bean.getEndDate().buildDate();
		this.clinic = bean.getClinic();
		this.activity = bean.getActivity() == null ? null : bean.getActivity().buildVo();
		this.firstavailableapp = bean.getFirstAvailableApp();
		this.specialty = bean.getSpecialty();
		this.location = bean.getLocation();
		this.hcp = bean.getHcp();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.AppointmentBookingSearchFilterVoBean bean)
	{
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.enddate = bean.getEndDate() == null ? null : bean.getEndDate().buildDate();
		this.clinic = bean.getClinic();
		this.activity = bean.getActivity() == null ? null : bean.getActivity().buildVo(map);
		this.firstavailableapp = bean.getFirstAvailableApp();
		this.specialty = bean.getSpecialty();
		this.location = bean.getLocation();
		this.hcp = bean.getHcp();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.AppointmentBookingSearchFilterVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.AppointmentBookingSearchFilterVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.AppointmentBookingSearchFilterVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getStartDateIsNotNull()
	{
		return this.startdate != null;
	}
	public ims.framework.utils.Date getStartDate()
	{
		return this.startdate;
	}
	public void setStartDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.startdate = value;
	}
	public boolean getEndDateIsNotNull()
	{
		return this.enddate != null;
	}
	public ims.framework.utils.Date getEndDate()
	{
		return this.enddate;
	}
	public void setEndDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.enddate = value;
	}
	public boolean getClinicIsNotNull()
	{
		return this.clinic != null;
	}
	public Integer getClinic()
	{
		return this.clinic;
	}
	public void setClinic(Integer value)
	{
		this.isValidated = false;
		this.clinic = value;
	}
	public boolean getActivityIsNotNull()
	{
		return this.activity != null;
	}
	public ims.core.vo.ActivityVo getActivity()
	{
		return this.activity;
	}
	public void setActivity(ims.core.vo.ActivityVo value)
	{
		this.isValidated = false;
		this.activity = value;
	}
	public boolean getFirstAvailableAppIsNotNull()
	{
		return this.firstavailableapp != null;
	}
	public Boolean getFirstAvailableApp()
	{
		return this.firstavailableapp;
	}
	public void setFirstAvailableApp(Boolean value)
	{
		this.isValidated = false;
		this.firstavailableapp = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public Integer getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(Integer value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getLocationIsNotNull()
	{
		return this.location != null;
	}
	public Integer getLocation()
	{
		return this.location;
	}
	public void setLocation(Integer value)
	{
		this.isValidated = false;
		this.location = value;
	}
	public boolean getHcpIsNotNull()
	{
		return this.hcp != null;
	}
	public String getHcp()
	{
		return this.hcp;
	}
	public static int getHcpMaxLength()
	{
		return 255;
	}
	public void setHcp(String value)
	{
		this.isValidated = false;
		this.hcp = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof AppointmentBookingSearchFilterVo))
			return false;
		AppointmentBookingSearchFilterVo compareObj = (AppointmentBookingSearchFilterVo)obj;
		if(this.getActivity() == null && compareObj.getActivity() != null)
			return false;
		if(this.getActivity() != null && compareObj.getActivity() == null)
			return false;
		if(this.getActivity() != null && compareObj.getActivity() != null)
			if(!this.getActivity().equals(compareObj.getActivity()))
				return false;
		if(this.getSpecialty() == null && compareObj.getSpecialty() != null)
			return false;
		if(this.getSpecialty() != null && compareObj.getSpecialty() == null)
			return false;
		if(this.getSpecialty() != null && compareObj.getSpecialty() != null)
			return this.getSpecialty().equals(compareObj.getSpecialty());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AppointmentBookingSearchFilterVo clone = new AppointmentBookingSearchFilterVo();
		
		if(this.startdate == null)
			clone.startdate = null;
		else
			clone.startdate = (ims.framework.utils.Date)this.startdate.clone();
		if(this.enddate == null)
			clone.enddate = null;
		else
			clone.enddate = (ims.framework.utils.Date)this.enddate.clone();
		clone.clinic = this.clinic;
		if(this.activity == null)
			clone.activity = null;
		else
			clone.activity = (ims.core.vo.ActivityVo)this.activity.clone();
		clone.firstavailableapp = this.firstavailableapp;
		clone.specialty = this.specialty;
		clone.location = this.location;
		clone.hcp = this.hcp;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AppointmentBookingSearchFilterVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AppointmentBookingSearchFilterVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		AppointmentBookingSearchFilterVo compareObj = (AppointmentBookingSearchFilterVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getStartDate() == null && compareObj.getStartDate() != null)
				return -1;
			if(this.getStartDate() != null && compareObj.getStartDate() == null)
				return 1;
			if(this.getStartDate() != null && compareObj.getStartDate() != null)
				retVal = this.getStartDate().compareTo(compareObj.getStartDate());
		}
		if (retVal == 0)
		{
			if(this.getEndDate() == null && compareObj.getEndDate() != null)
				return -1;
			if(this.getEndDate() != null && compareObj.getEndDate() == null)
				return 1;
			if(this.getEndDate() != null && compareObj.getEndDate() != null)
				retVal = this.getEndDate().compareTo(compareObj.getEndDate());
		}
		if (retVal == 0)
		{
			if(this.getClinic() == null && compareObj.getClinic() != null)
				return -1;
			if(this.getClinic() != null && compareObj.getClinic() == null)
				return 1;
			if(this.getClinic() != null && compareObj.getClinic() != null)
				retVal = this.getClinic().compareTo(compareObj.getClinic());
		}
		if (retVal == 0)
		{
			if(this.getActivity() == null && compareObj.getActivity() != null)
				return -1;
			if(this.getActivity() != null && compareObj.getActivity() == null)
				return 1;
			if(this.getActivity() != null && compareObj.getActivity() != null)
				retVal = this.getActivity().compareTo(compareObj.getActivity());
		}
		if (retVal == 0)
		{
			if(this.getFirstAvailableApp() == null && compareObj.getFirstAvailableApp() != null)
				return -1;
			if(this.getFirstAvailableApp() != null && compareObj.getFirstAvailableApp() == null)
				return 1;
			if(this.getFirstAvailableApp() != null && compareObj.getFirstAvailableApp() != null)
				retVal = this.getFirstAvailableApp().compareTo(compareObj.getFirstAvailableApp());
		}
		if (retVal == 0)
		{
			if(this.getSpecialty() == null && compareObj.getSpecialty() != null)
				return -1;
			if(this.getSpecialty() != null && compareObj.getSpecialty() == null)
				return 1;
			if(this.getSpecialty() != null && compareObj.getSpecialty() != null)
				retVal = this.getSpecialty().compareTo(compareObj.getSpecialty());
		}
		if (retVal == 0)
		{
			if(this.getLocation() == null && compareObj.getLocation() != null)
				return -1;
			if(this.getLocation() != null && compareObj.getLocation() == null)
				return 1;
			if(this.getLocation() != null && compareObj.getLocation() != null)
				retVal = this.getLocation().compareTo(compareObj.getLocation());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.startdate != null)
			count++;
		if(this.enddate != null)
			count++;
		if(this.clinic != null)
			count++;
		if(this.activity != null)
			count++;
		if(this.firstavailableapp != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.location != null)
			count++;
		if(this.hcp != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected ims.framework.utils.Date startdate;
	protected ims.framework.utils.Date enddate;
	protected Integer clinic;
	protected ims.core.vo.ActivityVo activity;
	protected Boolean firstavailableapp;
	protected Integer specialty;
	protected Integer location;
	protected String hcp;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
