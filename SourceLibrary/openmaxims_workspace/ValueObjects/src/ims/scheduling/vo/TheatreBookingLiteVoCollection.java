//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import ims.framework.enumerations.SortOrder;

/**
 * Linked to Scheduling.TheatreBooking business object (ID: 1090100011).
 */
public class TheatreBookingLiteVoCollection extends ims.vo.ValueObjectCollection implements ims.vo.ImsCloneable, Iterable<TheatreBookingLiteVo>
{
	private static final long serialVersionUID = 1L;

	private ArrayList<TheatreBookingLiteVo> col = new ArrayList<TheatreBookingLiteVo>();
	public String getBoClassName()
	{
		return "ims.scheduling.domain.objects.TheatreBooking";
	}
	public boolean add(TheatreBookingLiteVo value)
	{
		if(value == null)
			return false;
		if(this.col.indexOf(value) < 0)
		{
			return this.col.add(value);
		}
		return false;
	}
	public boolean add(int index, TheatreBookingLiteVo value)
	{
		if(value == null)
			return false;
		if(this.col.indexOf(value) < 0)
		{
			this.col.add(index, value);
			return true;
		}
		return false;
	}
	public void clear()
	{
		this.col.clear();
	}
	public void remove(int index)
	{
		this.col.remove(index);
	}
	public int size()
	{
		return this.col.size();
	}
	public int indexOf(TheatreBookingLiteVo instance)
	{
		return col.indexOf(instance);
	}
	public TheatreBookingLiteVo get(int index)
	{
		return this.col.get(index);
	}
	public boolean set(int index, TheatreBookingLiteVo value)
	{
		if(value == null)
			return false;
		this.col.set(index, value);
		return true;
	}
	public void remove(TheatreBookingLiteVo instance)
	{
		if(instance != null)
		{
			int index = indexOf(instance);
			if(index >= 0)
				remove(index);
		}
	}
	public boolean contains(TheatreBookingLiteVo instance)
	{
		return indexOf(instance) >= 0;
	}
	public Object clone()
	{
		TheatreBookingLiteVoCollection clone = new TheatreBookingLiteVoCollection();
		
		for(int x = 0; x < this.col.size(); x++)
		{
			if(this.col.get(x) != null)
				clone.col.add((TheatreBookingLiteVo)this.col.get(x).clone());
			else
				clone.col.add(null);
		}
		
		return clone;
	}
	public boolean isValidated()
	{
		for(int x = 0; x < col.size(); x++)
			if(!this.col.get(x).isValidated())
				return false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(col.size() == 0)
			return null;
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		for(int x = 0; x < col.size(); x++)
		{
			String[] listOfOtherErrors = this.col.get(x).validate();
			if(listOfOtherErrors != null)
			{
				for(int y = 0; y < listOfOtherErrors.length; y++)
				{
					listOfErrors.add(listOfOtherErrors[y]);
				}
			}
		}
		
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
			return null;
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		return result;
	}
	public TheatreBookingLiteVoCollection sort()
	{
		return sort(SortOrder.ASCENDING);
	}
	public TheatreBookingLiteVoCollection sort(boolean caseInsensitive)
	{
		return sort(SortOrder.ASCENDING, caseInsensitive);
	}
	public TheatreBookingLiteVoCollection sort(SortOrder order)
	{
		return sort(new TheatreBookingLiteVoComparator(order));
	}
	public TheatreBookingLiteVoCollection sort(SortOrder order, boolean caseInsensitive)
	{
		return sort(new TheatreBookingLiteVoComparator(order, caseInsensitive));
	}
	@SuppressWarnings("unchecked")
	public TheatreBookingLiteVoCollection sort(Comparator comparator)
	{
		Collections.sort(col, comparator);
		return this;
	}
	public ims.scheduling.vo.TheatreBookingRefVoCollection toRefVoCollection()
	{
		ims.scheduling.vo.TheatreBookingRefVoCollection result = new ims.scheduling.vo.TheatreBookingRefVoCollection();
		for(int x = 0; x < this.col.size(); x++)
		{
			result.add(this.col.get(x));
		}
		return result;
	}
	public TheatreBookingLiteVo[] toArray()
	{
		TheatreBookingLiteVo[] arr = new TheatreBookingLiteVo[col.size()];
		col.toArray(arr);
		return arr;
	}
	public Iterator<TheatreBookingLiteVo> iterator()
	{
		return col.iterator();
	}
	@Override
	protected ArrayList getTypedCollection()
	{
		return col;
	}
	private class TheatreBookingLiteVoComparator implements Comparator
	{
		private int direction = 1;
		private boolean caseInsensitive = true;
		public TheatreBookingLiteVoComparator()
		{
			this(SortOrder.ASCENDING);
		}
		public TheatreBookingLiteVoComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
		}
		public TheatreBookingLiteVoComparator(SortOrder order, boolean caseInsensitive)
		{
			if (order == SortOrder.DESCENDING)
			{
				direction = -1;
			}
			this.caseInsensitive = caseInsensitive;
		}
		public int compare(Object obj1, Object obj2)
		{
			TheatreBookingLiteVo voObj1 = (TheatreBookingLiteVo)obj1;
			TheatreBookingLiteVo voObj2 = (TheatreBookingLiteVo)obj2;
			return direction*(voObj1.compareTo(voObj2, this.caseInsensitive));
		}
		public boolean equals(Object obj)
		{
			return false;
		}
	}
	public ims.scheduling.vo.beans.TheatreBookingLiteVoBean[] getBeanCollection()
	{
		return getBeanCollectionArray();
	}
	public ims.scheduling.vo.beans.TheatreBookingLiteVoBean[] getBeanCollectionArray()
	{
		ims.scheduling.vo.beans.TheatreBookingLiteVoBean[] result = new ims.scheduling.vo.beans.TheatreBookingLiteVoBean[col.size()];
		for(int i = 0; i < col.size(); i++)
		{
			TheatreBookingLiteVo vo = ((TheatreBookingLiteVo)col.get(i));
			result[i] = (ims.scheduling.vo.beans.TheatreBookingLiteVoBean)vo.getBean();
		}
		return result;
	}
	public static TheatreBookingLiteVoCollection buildFromBeanCollection(java.util.Collection beans)
	{
		TheatreBookingLiteVoCollection coll = new TheatreBookingLiteVoCollection();
		if(beans == null)
			return coll;
		java.util.Iterator iter = beans.iterator();
		while (iter.hasNext())
		{
			coll.add(((ims.scheduling.vo.beans.TheatreBookingLiteVoBean)iter.next()).buildVo());
		}
		return coll;
	}
	public static TheatreBookingLiteVoCollection buildFromBeanCollection(ims.scheduling.vo.beans.TheatreBookingLiteVoBean[] beans)
	{
		TheatreBookingLiteVoCollection coll = new TheatreBookingLiteVoCollection();
		if(beans == null)
			return coll;
		for(int x = 0; x < beans.length; x++)
		{
			coll.add(beans[x].buildVo());
		}
		return coll;
	}
}
