//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;


public class BookTheatreSlotDialogVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public BookTheatreSlotDialogVo()
	{
	}
	public BookTheatreSlotDialogVo(ims.scheduling.vo.beans.BookTheatreSlotDialogVoBean bean)
	{
		this.appointmentduration = bean.getAppointmentDuration();
		this.kpidate = bean.getKPIDate() == null ? null : bean.getKPIDate().buildDate();
		this.parentchildslot = bean.getParentChildSlot() == null ? null : bean.getParentChildSlot().buildVo();
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo();
		this.anaesthetictypetodefault = bean.getAnaestheticTypeToDefault() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getAnaestheticTypeToDefault());
		this.theatreappttorebook = bean.getTheatreApptToRebook() == null ? null : bean.getTheatreApptToRebook().buildVo();
		// Interface field type not supported.
		// Interface field type not supported.
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.BookTheatreSlotDialogVoBean bean)
	{
		this.appointmentduration = bean.getAppointmentDuration();
		this.kpidate = bean.getKPIDate() == null ? null : bean.getKPIDate().buildDate();
		this.parentchildslot = bean.getParentChildSlot() == null ? null : bean.getParentChildSlot().buildVo(map);
		this.session = bean.getSession() == null ? null : bean.getSession().buildVo(map);
		this.anaesthetictypetodefault = bean.getAnaestheticTypeToDefault() == null ? null : ims.clinical.vo.lookups.AnaestheticType.buildLookup(bean.getAnaestheticTypeToDefault());
		this.theatreappttorebook = bean.getTheatreApptToRebook() == null ? null : bean.getTheatreApptToRebook().buildVo(map);
		// Interface field type not supported.
		// Interface field type not supported.
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.BookTheatreSlotDialogVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.BookTheatreSlotDialogVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.BookTheatreSlotDialogVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getAppointmentDurationIsNotNull()
	{
		return this.appointmentduration != null;
	}
	public Integer getAppointmentDuration()
	{
		return this.appointmentduration;
	}
	public void setAppointmentDuration(Integer value)
	{
		this.isValidated = false;
		this.appointmentduration = value;
	}
	public boolean getKPIDateIsNotNull()
	{
		return this.kpidate != null;
	}
	public ims.framework.utils.Date getKPIDate()
	{
		return this.kpidate;
	}
	public void setKPIDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.kpidate = value;
	}
	public boolean getParentChildSlotIsNotNull()
	{
		return this.parentchildslot != null;
	}
	public ims.scheduling.vo.SessionParentChildSlotVo getParentChildSlot()
	{
		return this.parentchildslot;
	}
	public void setParentChildSlot(ims.scheduling.vo.SessionParentChildSlotVo value)
	{
		this.isValidated = false;
		this.parentchildslot = value;
	}
	public boolean getSessionIsNotNull()
	{
		return this.session != null;
	}
	public ims.scheduling.vo.SessionTheatreVo getSession()
	{
		return this.session;
	}
	public void setSession(ims.scheduling.vo.SessionTheatreVo value)
	{
		this.isValidated = false;
		this.session = value;
	}
	public boolean getAnaestheticTypeToDefaultIsNotNull()
	{
		return this.anaesthetictypetodefault != null;
	}
	public ims.clinical.vo.lookups.AnaestheticType getAnaestheticTypeToDefault()
	{
		return this.anaesthetictypetodefault;
	}
	public void setAnaestheticTypeToDefault(ims.clinical.vo.lookups.AnaestheticType value)
	{
		this.isValidated = false;
		this.anaesthetictypetodefault = value;
	}
	public boolean getTheatreApptToRebookIsNotNull()
	{
		return this.theatreappttorebook != null;
	}
	public ims.scheduling.vo.BookingAppointmentTheatreVo getTheatreApptToRebook()
	{
		return this.theatreappttorebook;
	}
	public void setTheatreApptToRebook(ims.scheduling.vo.BookingAppointmentTheatreVo value)
	{
		this.isValidated = false;
		this.theatreappttorebook = value;
	}
	public boolean getProcedureToDefaultIsNotNull()
	{
		return this.proceduretodefault != null;
	}
	public ims.vo.interfaces.IGenericItem getProcedureToDefault()
	{
		return this.proceduretodefault;
	}
	public void setProcedureToDefault(ims.vo.interfaces.IGenericItem value)
	{
		this.isValidated = false;
		this.proceduretodefault = value;
	}
	public boolean getConsultantToDefaultIsNotNull()
	{
		return this.consultanttodefault != null;
	}
	public ims.vo.interfaces.IMos getConsultantToDefault()
	{
		return this.consultanttodefault;
	}
	public void setConsultantToDefault(ims.vo.interfaces.IMos value)
	{
		this.isValidated = false;
		this.consultanttodefault = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof BookTheatreSlotDialogVo))
			return false;
		BookTheatreSlotDialogVo compareObj = (BookTheatreSlotDialogVo)obj;
		if(this.getKPIDate() == null && compareObj.getKPIDate() != null)
			return false;
		if(this.getKPIDate() != null && compareObj.getKPIDate() == null)
			return false;
		if(this.getKPIDate() != null && compareObj.getKPIDate() != null)
			return this.getKPIDate().equals(compareObj.getKPIDate());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		BookTheatreSlotDialogVo clone = new BookTheatreSlotDialogVo();
		
		clone.appointmentduration = this.appointmentduration;
		if(this.kpidate == null)
			clone.kpidate = null;
		else
			clone.kpidate = (ims.framework.utils.Date)this.kpidate.clone();
		if(this.parentchildslot == null)
			clone.parentchildslot = null;
		else
			clone.parentchildslot = (ims.scheduling.vo.SessionParentChildSlotVo)this.parentchildslot.clone();
		if(this.session == null)
			clone.session = null;
		else
			clone.session = (ims.scheduling.vo.SessionTheatreVo)this.session.clone();
		if(this.anaesthetictypetodefault == null)
			clone.anaesthetictypetodefault = null;
		else
			clone.anaesthetictypetodefault = (ims.clinical.vo.lookups.AnaestheticType)this.anaesthetictypetodefault.clone();
		if(this.theatreappttorebook == null)
			clone.theatreappttorebook = null;
		else
			clone.theatreappttorebook = (ims.scheduling.vo.BookingAppointmentTheatreVo)this.theatreappttorebook.clone();
		clone.proceduretodefault = this.proceduretodefault;
		clone.consultanttodefault = this.consultanttodefault;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(BookTheatreSlotDialogVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A BookTheatreSlotDialogVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		BookTheatreSlotDialogVo compareObj = (BookTheatreSlotDialogVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getKPIDate() == null && compareObj.getKPIDate() != null)
				return -1;
			if(this.getKPIDate() != null && compareObj.getKPIDate() == null)
				return 1;
			if(this.getKPIDate() != null && compareObj.getKPIDate() != null)
				retVal = this.getKPIDate().compareTo(compareObj.getKPIDate());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.appointmentduration != null)
			count++;
		if(this.kpidate != null)
			count++;
		if(this.parentchildslot != null)
			count++;
		if(this.session != null)
			count++;
		if(this.anaesthetictypetodefault != null)
			count++;
		if(this.theatreappttorebook != null)
			count++;
		if(this.proceduretodefault != null)
			count++;
		if(this.consultanttodefault != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected Integer appointmentduration;
	protected ims.framework.utils.Date kpidate;
	protected ims.scheduling.vo.SessionParentChildSlotVo parentchildslot;
	protected ims.scheduling.vo.SessionTheatreVo session;
	protected ims.clinical.vo.lookups.AnaestheticType anaesthetictypetodefault;
	protected ims.scheduling.vo.BookingAppointmentTheatreVo theatreappttorebook;
	protected ims.vo.interfaces.IGenericItem proceduretodefault;
	protected ims.vo.interfaces.IMos consultanttodefault;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
