//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Sch_Profile business object (ID: 1005100001).
 */
public class Sch_ProfileVo extends ims.scheduling.vo.ProfileShortVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public Sch_ProfileVo()
	{
	}
	public Sch_ProfileVo(Integer id, int version)
	{
		super(id, version);
	}
	public Sch_ProfileVo(ims.scheduling.vo.beans.Sch_ProfileVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.description = bean.getDescription();
		this.prfcategory = bean.getPrfCategory() == null ? null : ims.scheduling.vo.lookups.Sched_Prfile_Cat.buildLookup(bean.getPrfCategory());
		this.prftype = bean.getPrftype() == null ? null : ims.scheduling.vo.lookups.Sched_Profile_Type.buildLookup(bean.getPrftype());
		this.efffrm = bean.getEffFrm() == null ? null : bean.getEffFrm().buildDate();
		this.effto = bean.getEffTo() == null ? null : bean.getEffTo().buildDate();
		this.isactive = bean.getIsActive();
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.lastactualgendate = bean.getLastActualGenDate() == null ? null : bean.getLastActualGenDate().buildDate();
		this.lastgendate = bean.getLastGenDate() == null ? null : bean.getLastGenDate().buildDate();
		this.schlocation = bean.getSchLocation() == null ? null : bean.getSchLocation().buildVo();
		this.isfixed = bean.getIsFixed();
		this.isundercontract = bean.getIsUnderContract();
		this.intervaltype = bean.getIntervalType() == null ? null : ims.scheduling.vo.lookups.Profile_Interval_Type.buildLookup(bean.getIntervalType());
		this.intervalsize = bean.getIntervalSize();
		this.isschmon = bean.getIsSchMon();
		this.isschtue = bean.getIsSchTue();
		this.isschwed = bean.getIsSchWed();
		this.isschthur = bean.getIsSchThur();
		this.isschfri = bean.getIsSchFri();
		this.isschsat = bean.getIsSchSat();
		this.isschsun = bean.getIsSchSun();
		this.isfirstinstance = bean.getIsFirstInstance();
		this.issecondinstance = bean.getIsSecondInstance();
		this.isthirdinstance = bean.getIsThirdInstance();
		this.isfourthinstance = bean.getIsFourthInstance();
		this.isfifthinstance = bean.getIsFifthInstance();
		this.minint = bean.getMinInt();
		this.roundatttime = bean.getRoundAttTime();
		this.lastappinterval = bean.getLastAppInterval();
		this.starttm = bean.getStartTm() == null ? null : bean.getStartTm().buildTime();
		this.endtm = bean.getEndTm() == null ? null : bean.getEndTm().buildTime();
		this.pasclinic = bean.getPASClinic() == null ? null : ims.scheduling.vo.lookups.SchedPASClinic.buildLookup(bean.getPASClinic());
		this.maxnoappts = bean.getMaxNoAppts();
		this.bookingrights = ims.scheduling.vo.Profile_BookRightsVoCollection.buildFromBeanCollection(bean.getBookingRights());
		this.listowners = ims.scheduling.vo.Profile_ListOwnerVoCollection.buildFromBeanCollection(bean.getListOwners());
		this.exclusiondates = ims.scheduling.vo.Profile_Exc_DateVoCollection.buildFromBeanCollection(bean.getExclusionDates());
		this.exclusiontimes = ims.scheduling.vo.Profile_Exc_TimeVoCollection.buildFromBeanCollection(bean.getExclusionTimes());
		this.consmediatype = bean.getConsMediaType() == null ? null : ims.scheduling.vo.lookups.ConsultationMediaType.buildLookup(bean.getConsMediaType());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.Sch_ProfileVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.description = bean.getDescription();
		this.prfcategory = bean.getPrfCategory() == null ? null : ims.scheduling.vo.lookups.Sched_Prfile_Cat.buildLookup(bean.getPrfCategory());
		this.prftype = bean.getPrftype() == null ? null : ims.scheduling.vo.lookups.Sched_Profile_Type.buildLookup(bean.getPrftype());
		this.efffrm = bean.getEffFrm() == null ? null : bean.getEffFrm().buildDate();
		this.effto = bean.getEffTo() == null ? null : bean.getEffTo().buildDate();
		this.isactive = bean.getIsActive();
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.lastactualgendate = bean.getLastActualGenDate() == null ? null : bean.getLastActualGenDate().buildDate();
		this.lastgendate = bean.getLastGenDate() == null ? null : bean.getLastGenDate().buildDate();
		this.schlocation = bean.getSchLocation() == null ? null : bean.getSchLocation().buildVo(map);
		this.isfixed = bean.getIsFixed();
		this.isundercontract = bean.getIsUnderContract();
		this.intervaltype = bean.getIntervalType() == null ? null : ims.scheduling.vo.lookups.Profile_Interval_Type.buildLookup(bean.getIntervalType());
		this.intervalsize = bean.getIntervalSize();
		this.isschmon = bean.getIsSchMon();
		this.isschtue = bean.getIsSchTue();
		this.isschwed = bean.getIsSchWed();
		this.isschthur = bean.getIsSchThur();
		this.isschfri = bean.getIsSchFri();
		this.isschsat = bean.getIsSchSat();
		this.isschsun = bean.getIsSchSun();
		this.isfirstinstance = bean.getIsFirstInstance();
		this.issecondinstance = bean.getIsSecondInstance();
		this.isthirdinstance = bean.getIsThirdInstance();
		this.isfourthinstance = bean.getIsFourthInstance();
		this.isfifthinstance = bean.getIsFifthInstance();
		this.minint = bean.getMinInt();
		this.roundatttime = bean.getRoundAttTime();
		this.lastappinterval = bean.getLastAppInterval();
		this.starttm = bean.getStartTm() == null ? null : bean.getStartTm().buildTime();
		this.endtm = bean.getEndTm() == null ? null : bean.getEndTm().buildTime();
		this.pasclinic = bean.getPASClinic() == null ? null : ims.scheduling.vo.lookups.SchedPASClinic.buildLookup(bean.getPASClinic());
		this.maxnoappts = bean.getMaxNoAppts();
		this.bookingrights = ims.scheduling.vo.Profile_BookRightsVoCollection.buildFromBeanCollection(bean.getBookingRights());
		this.listowners = ims.scheduling.vo.Profile_ListOwnerVoCollection.buildFromBeanCollection(bean.getListOwners());
		this.exclusiondates = ims.scheduling.vo.Profile_Exc_DateVoCollection.buildFromBeanCollection(bean.getExclusionDates());
		this.exclusiontimes = ims.scheduling.vo.Profile_Exc_TimeVoCollection.buildFromBeanCollection(bean.getExclusionTimes());
		this.consmediatype = bean.getConsMediaType() == null ? null : ims.scheduling.vo.lookups.ConsultationMediaType.buildLookup(bean.getConsMediaType());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.Sch_ProfileVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.Sch_ProfileVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.Sch_ProfileVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("SCHLOCATION"))
			return getSchLocation();
		if(fieldName.equals("ISFIXED"))
			return getIsFixed();
		if(fieldName.equals("ISUNDERCONTRACT"))
			return getIsUnderContract();
		if(fieldName.equals("INTERVALTYPE"))
			return getIntervalType();
		if(fieldName.equals("INTERVALSIZE"))
			return getIntervalSize();
		if(fieldName.equals("ISSCHMON"))
			return getIsSchMon();
		if(fieldName.equals("ISSCHTUE"))
			return getIsSchTue();
		if(fieldName.equals("ISSCHWED"))
			return getIsSchWed();
		if(fieldName.equals("ISSCHTHUR"))
			return getIsSchThur();
		if(fieldName.equals("ISSCHFRI"))
			return getIsSchFri();
		if(fieldName.equals("ISSCHSAT"))
			return getIsSchSat();
		if(fieldName.equals("ISSCHSUN"))
			return getIsSchSun();
		if(fieldName.equals("ISFIRSTINSTANCE"))
			return getIsFirstInstance();
		if(fieldName.equals("ISSECONDINSTANCE"))
			return getIsSecondInstance();
		if(fieldName.equals("ISTHIRDINSTANCE"))
			return getIsThirdInstance();
		if(fieldName.equals("ISFOURTHINSTANCE"))
			return getIsFourthInstance();
		if(fieldName.equals("ISFIFTHINSTANCE"))
			return getIsFifthInstance();
		if(fieldName.equals("MININT"))
			return getMinInt();
		if(fieldName.equals("ROUNDATTTIME"))
			return getRoundAttTime();
		if(fieldName.equals("LASTAPPINTERVAL"))
			return getLastAppInterval();
		if(fieldName.equals("STARTTM"))
			return getStartTm();
		if(fieldName.equals("ENDTM"))
			return getEndTm();
		if(fieldName.equals("PASCLINIC"))
			return getPASClinic();
		if(fieldName.equals("MAXNOAPPTS"))
			return getMaxNoAppts();
		if(fieldName.equals("BOOKINGRIGHTS"))
			return getBookingRights();
		if(fieldName.equals("LISTOWNERS"))
			return getListOwners();
		if(fieldName.equals("EXCLUSIONDATES"))
			return getExclusionDates();
		if(fieldName.equals("EXCLUSIONTIMES"))
			return getExclusionTimes();
		if(fieldName.equals("CONSMEDIATYPE"))
			return getConsMediaType();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getSchLocationIsNotNull()
	{
		return this.schlocation != null;
	}
	public ims.core.vo.LocShortVo getSchLocation()
	{
		return this.schlocation;
	}
	public void setSchLocation(ims.core.vo.LocShortVo value)
	{
		this.isValidated = false;
		this.schlocation = value;
	}
	public boolean getIsFixedIsNotNull()
	{
		return this.isfixed != null;
	}
	public Boolean getIsFixed()
	{
		return this.isfixed;
	}
	public void setIsFixed(Boolean value)
	{
		this.isValidated = false;
		this.isfixed = value;
	}
	public boolean getIsUnderContractIsNotNull()
	{
		return this.isundercontract != null;
	}
	public Boolean getIsUnderContract()
	{
		return this.isundercontract;
	}
	public void setIsUnderContract(Boolean value)
	{
		this.isValidated = false;
		this.isundercontract = value;
	}
	public boolean getIntervalTypeIsNotNull()
	{
		return this.intervaltype != null;
	}
	public ims.scheduling.vo.lookups.Profile_Interval_Type getIntervalType()
	{
		return this.intervaltype;
	}
	public void setIntervalType(ims.scheduling.vo.lookups.Profile_Interval_Type value)
	{
		this.isValidated = false;
		this.intervaltype = value;
	}
	public boolean getIntervalSizeIsNotNull()
	{
		return this.intervalsize != null;
	}
	public Integer getIntervalSize()
	{
		return this.intervalsize;
	}
	public void setIntervalSize(Integer value)
	{
		this.isValidated = false;
		this.intervalsize = value;
	}
	public boolean getIsSchMonIsNotNull()
	{
		return this.isschmon != null;
	}
	public Boolean getIsSchMon()
	{
		return this.isschmon;
	}
	public void setIsSchMon(Boolean value)
	{
		this.isValidated = false;
		this.isschmon = value;
	}
	public boolean getIsSchTueIsNotNull()
	{
		return this.isschtue != null;
	}
	public Boolean getIsSchTue()
	{
		return this.isschtue;
	}
	public void setIsSchTue(Boolean value)
	{
		this.isValidated = false;
		this.isschtue = value;
	}
	public boolean getIsSchWedIsNotNull()
	{
		return this.isschwed != null;
	}
	public Boolean getIsSchWed()
	{
		return this.isschwed;
	}
	public void setIsSchWed(Boolean value)
	{
		this.isValidated = false;
		this.isschwed = value;
	}
	public boolean getIsSchThurIsNotNull()
	{
		return this.isschthur != null;
	}
	public Boolean getIsSchThur()
	{
		return this.isschthur;
	}
	public void setIsSchThur(Boolean value)
	{
		this.isValidated = false;
		this.isschthur = value;
	}
	public boolean getIsSchFriIsNotNull()
	{
		return this.isschfri != null;
	}
	public Boolean getIsSchFri()
	{
		return this.isschfri;
	}
	public void setIsSchFri(Boolean value)
	{
		this.isValidated = false;
		this.isschfri = value;
	}
	public boolean getIsSchSatIsNotNull()
	{
		return this.isschsat != null;
	}
	public Boolean getIsSchSat()
	{
		return this.isschsat;
	}
	public void setIsSchSat(Boolean value)
	{
		this.isValidated = false;
		this.isschsat = value;
	}
	public boolean getIsSchSunIsNotNull()
	{
		return this.isschsun != null;
	}
	public Boolean getIsSchSun()
	{
		return this.isschsun;
	}
	public void setIsSchSun(Boolean value)
	{
		this.isValidated = false;
		this.isschsun = value;
	}
	public boolean getIsFirstInstanceIsNotNull()
	{
		return this.isfirstinstance != null;
	}
	public Boolean getIsFirstInstance()
	{
		return this.isfirstinstance;
	}
	public void setIsFirstInstance(Boolean value)
	{
		this.isValidated = false;
		this.isfirstinstance = value;
	}
	public boolean getIsSecondInstanceIsNotNull()
	{
		return this.issecondinstance != null;
	}
	public Boolean getIsSecondInstance()
	{
		return this.issecondinstance;
	}
	public void setIsSecondInstance(Boolean value)
	{
		this.isValidated = false;
		this.issecondinstance = value;
	}
	public boolean getIsThirdInstanceIsNotNull()
	{
		return this.isthirdinstance != null;
	}
	public Boolean getIsThirdInstance()
	{
		return this.isthirdinstance;
	}
	public void setIsThirdInstance(Boolean value)
	{
		this.isValidated = false;
		this.isthirdinstance = value;
	}
	public boolean getIsFourthInstanceIsNotNull()
	{
		return this.isfourthinstance != null;
	}
	public Boolean getIsFourthInstance()
	{
		return this.isfourthinstance;
	}
	public void setIsFourthInstance(Boolean value)
	{
		this.isValidated = false;
		this.isfourthinstance = value;
	}
	public boolean getIsFifthInstanceIsNotNull()
	{
		return this.isfifthinstance != null;
	}
	public Boolean getIsFifthInstance()
	{
		return this.isfifthinstance;
	}
	public void setIsFifthInstance(Boolean value)
	{
		this.isValidated = false;
		this.isfifthinstance = value;
	}
	public boolean getMinIntIsNotNull()
	{
		return this.minint != null;
	}
	public Integer getMinInt()
	{
		return this.minint;
	}
	public void setMinInt(Integer value)
	{
		this.isValidated = false;
		this.minint = value;
	}
	public boolean getRoundAttTimeIsNotNull()
	{
		return this.roundatttime != null;
	}
	public Integer getRoundAttTime()
	{
		return this.roundatttime;
	}
	public void setRoundAttTime(Integer value)
	{
		this.isValidated = false;
		this.roundatttime = value;
	}
	public boolean getLastAppIntervalIsNotNull()
	{
		return this.lastappinterval != null;
	}
	public Integer getLastAppInterval()
	{
		return this.lastappinterval;
	}
	public void setLastAppInterval(Integer value)
	{
		this.isValidated = false;
		this.lastappinterval = value;
	}
	public boolean getStartTmIsNotNull()
	{
		return this.starttm != null;
	}
	public ims.framework.utils.Time getStartTm()
	{
		return this.starttm;
	}
	public void setStartTm(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.starttm = value;
	}
	public boolean getEndTmIsNotNull()
	{
		return this.endtm != null;
	}
	public ims.framework.utils.Time getEndTm()
	{
		return this.endtm;
	}
	public void setEndTm(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.endtm = value;
	}
	public boolean getPASClinicIsNotNull()
	{
		return this.pasclinic != null;
	}
	public ims.scheduling.vo.lookups.SchedPASClinic getPASClinic()
	{
		return this.pasclinic;
	}
	public void setPASClinic(ims.scheduling.vo.lookups.SchedPASClinic value)
	{
		this.isValidated = false;
		this.pasclinic = value;
	}
	public boolean getMaxNoApptsIsNotNull()
	{
		return this.maxnoappts != null;
	}
	public Integer getMaxNoAppts()
	{
		return this.maxnoappts;
	}
	public void setMaxNoAppts(Integer value)
	{
		this.isValidated = false;
		this.maxnoappts = value;
	}
	public boolean getBookingRightsIsNotNull()
	{
		return this.bookingrights != null;
	}
	public ims.scheduling.vo.Profile_BookRightsVoCollection getBookingRights()
	{
		return this.bookingrights;
	}
	public void setBookingRights(ims.scheduling.vo.Profile_BookRightsVoCollection value)
	{
		this.isValidated = false;
		this.bookingrights = value;
	}
	public boolean getListOwnersIsNotNull()
	{
		return this.listowners != null;
	}
	public ims.scheduling.vo.Profile_ListOwnerVoCollection getListOwners()
	{
		return this.listowners;
	}
	public void setListOwners(ims.scheduling.vo.Profile_ListOwnerVoCollection value)
	{
		this.isValidated = false;
		this.listowners = value;
	}
	public boolean getExclusionDatesIsNotNull()
	{
		return this.exclusiondates != null;
	}
	public ims.scheduling.vo.Profile_Exc_DateVoCollection getExclusionDates()
	{
		return this.exclusiondates;
	}
	public void setExclusionDates(ims.scheduling.vo.Profile_Exc_DateVoCollection value)
	{
		this.isValidated = false;
		this.exclusiondates = value;
	}
	public boolean getExclusionTimesIsNotNull()
	{
		return this.exclusiontimes != null;
	}
	public ims.scheduling.vo.Profile_Exc_TimeVoCollection getExclusionTimes()
	{
		return this.exclusiontimes;
	}
	public void setExclusionTimes(ims.scheduling.vo.Profile_Exc_TimeVoCollection value)
	{
		this.isValidated = false;
		this.exclusiontimes = value;
	}
	public boolean getConsMediaTypeIsNotNull()
	{
		return this.consmediatype != null;
	}
	public ims.scheduling.vo.lookups.ConsultationMediaType getConsMediaType()
	{
		return this.consmediatype;
	}
	public void setConsMediaType(ims.scheduling.vo.lookups.ConsultationMediaType value)
	{
		this.isValidated = false;
		this.consmediatype = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.service != null)
		{
			if(!this.service.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.schlocation != null)
		{
			if(!this.schlocation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.bookingrights != null)
		{
			if(!this.bookingrights.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.listowners != null)
		{
			if(!this.listowners.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.exclusiondates != null)
		{
			if(!this.exclusiondates.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.exclusiontimes != null)
		{
			if(!this.exclusiontimes.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name == null || this.name.length() == 0)
			listOfErrors.add("Name is mandatory");
		else if(this.name.length() > 100)
			listOfErrors.add("The length of the field [name] in the value object [ims.scheduling.vo.Sch_ProfileVo] is too big. It should be less or equal to 100");
		if(this.description != null)
			if(this.description.length() > 255)
				listOfErrors.add("The length of the field [description] in the value object [ims.scheduling.vo.Sch_ProfileVo] is too big. It should be less or equal to 255");
		if(this.prfcategory == null)
			listOfErrors.add("Category is mandatory");
		if(this.prftype == null)
			listOfErrors.add("Type is mandatory");
		if(this.efffrm == null)
			listOfErrors.add("Start Date is mandatory");
		if(this.service == null)
			listOfErrors.add("Service is mandatory");
		if(this.service != null)
		{
			String[] listOfOtherErrors = this.service.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.schlocation == null)
			listOfErrors.add("Location is mandatory");
		if(this.schlocation != null)
		{
			String[] listOfOtherErrors = this.schlocation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.isfixed == null)
			listOfErrors.add("isFixed is mandatory");
		if(this.intervaltype == null)
			listOfErrors.add("Interval Type is mandatory");
		if(this.intervalsize == null)
			listOfErrors.add("Interval Size is mandatory");
		if(this.intervalsize != null && (this.intervalsize.intValue() < 1 || this.intervalsize.intValue() > 1000000000))
			listOfErrors.add("Interval Size cannot be lass than 1");
		if(this.starttm == null)
			listOfErrors.add("Profile Details Start Time is mandatory");
		if(this.endtm == null)
			listOfErrors.add("End Time is mandatory");
		if(this.bookingrights != null)
		{
			String[] listOfOtherErrors = this.bookingrights.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.listowners != null)
		{
			String[] listOfOtherErrors = this.listowners.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.exclusiondates != null)
		{
			String[] listOfOtherErrors = this.exclusiondates.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.exclusiontimes != null)
		{
			String[] listOfOtherErrors = this.exclusiontimes.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		Sch_ProfileVo clone = new Sch_ProfileVo(this.id, this.version);
		
		clone.name = this.name;
		clone.description = this.description;
		if(this.prfcategory == null)
			clone.prfcategory = null;
		else
			clone.prfcategory = (ims.scheduling.vo.lookups.Sched_Prfile_Cat)this.prfcategory.clone();
		if(this.prftype == null)
			clone.prftype = null;
		else
			clone.prftype = (ims.scheduling.vo.lookups.Sched_Profile_Type)this.prftype.clone();
		if(this.efffrm == null)
			clone.efffrm = null;
		else
			clone.efffrm = (ims.framework.utils.Date)this.efffrm.clone();
		if(this.effto == null)
			clone.effto = null;
		else
			clone.effto = (ims.framework.utils.Date)this.effto.clone();
		clone.isactive = this.isactive;
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceShortVo)this.service.clone();
		if(this.lastactualgendate == null)
			clone.lastactualgendate = null;
		else
			clone.lastactualgendate = (ims.framework.utils.Date)this.lastactualgendate.clone();
		if(this.lastgendate == null)
			clone.lastgendate = null;
		else
			clone.lastgendate = (ims.framework.utils.Date)this.lastgendate.clone();
		if(this.schlocation == null)
			clone.schlocation = null;
		else
			clone.schlocation = (ims.core.vo.LocShortVo)this.schlocation.clone();
		clone.isfixed = this.isfixed;
		clone.isundercontract = this.isundercontract;
		if(this.intervaltype == null)
			clone.intervaltype = null;
		else
			clone.intervaltype = (ims.scheduling.vo.lookups.Profile_Interval_Type)this.intervaltype.clone();
		clone.intervalsize = this.intervalsize;
		clone.isschmon = this.isschmon;
		clone.isschtue = this.isschtue;
		clone.isschwed = this.isschwed;
		clone.isschthur = this.isschthur;
		clone.isschfri = this.isschfri;
		clone.isschsat = this.isschsat;
		clone.isschsun = this.isschsun;
		clone.isfirstinstance = this.isfirstinstance;
		clone.issecondinstance = this.issecondinstance;
		clone.isthirdinstance = this.isthirdinstance;
		clone.isfourthinstance = this.isfourthinstance;
		clone.isfifthinstance = this.isfifthinstance;
		clone.minint = this.minint;
		clone.roundatttime = this.roundatttime;
		clone.lastappinterval = this.lastappinterval;
		if(this.starttm == null)
			clone.starttm = null;
		else
			clone.starttm = (ims.framework.utils.Time)this.starttm.clone();
		if(this.endtm == null)
			clone.endtm = null;
		else
			clone.endtm = (ims.framework.utils.Time)this.endtm.clone();
		if(this.pasclinic == null)
			clone.pasclinic = null;
		else
			clone.pasclinic = (ims.scheduling.vo.lookups.SchedPASClinic)this.pasclinic.clone();
		clone.maxnoappts = this.maxnoappts;
		if(this.bookingrights == null)
			clone.bookingrights = null;
		else
			clone.bookingrights = (ims.scheduling.vo.Profile_BookRightsVoCollection)this.bookingrights.clone();
		if(this.listowners == null)
			clone.listowners = null;
		else
			clone.listowners = (ims.scheduling.vo.Profile_ListOwnerVoCollection)this.listowners.clone();
		if(this.exclusiondates == null)
			clone.exclusiondates = null;
		else
			clone.exclusiondates = (ims.scheduling.vo.Profile_Exc_DateVoCollection)this.exclusiondates.clone();
		if(this.exclusiontimes == null)
			clone.exclusiontimes = null;
		else
			clone.exclusiontimes = (ims.scheduling.vo.Profile_Exc_TimeVoCollection)this.exclusiontimes.clone();
		if(this.consmediatype == null)
			clone.consmediatype = null;
		else
			clone.consmediatype = (ims.scheduling.vo.lookups.ConsultationMediaType)this.consmediatype.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(Sch_ProfileVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A Sch_ProfileVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		Sch_ProfileVo compareObj = (Sch_ProfileVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_Sch_Profile() == null && compareObj.getID_Sch_Profile() != null)
				return -1;
			if(this.getID_Sch_Profile() != null && compareObj.getID_Sch_Profile() == null)
				return 1;
			if(this.getID_Sch_Profile() != null && compareObj.getID_Sch_Profile() != null)
				retVal = this.getID_Sch_Profile().compareTo(compareObj.getID_Sch_Profile());
		}
		if (retVal == 0)
		{
			if(this.getName() == null && compareObj.getName() != null)
				return -1;
			if(this.getName() != null && compareObj.getName() == null)
				return 1;
			if(this.getName() != null && compareObj.getName() != null)
			{
				if(caseInsensitive)
					retVal = this.getName().toLowerCase().compareTo(compareObj.getName().toLowerCase());
				else
					retVal = this.getName().compareTo(compareObj.getName());
			}
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.schlocation != null)
			count++;
		if(this.isfixed != null)
			count++;
		if(this.isundercontract != null)
			count++;
		if(this.intervaltype != null)
			count++;
		if(this.intervalsize != null)
			count++;
		if(this.isschmon != null)
			count++;
		if(this.isschtue != null)
			count++;
		if(this.isschwed != null)
			count++;
		if(this.isschthur != null)
			count++;
		if(this.isschfri != null)
			count++;
		if(this.isschsat != null)
			count++;
		if(this.isschsun != null)
			count++;
		if(this.isfirstinstance != null)
			count++;
		if(this.issecondinstance != null)
			count++;
		if(this.isthirdinstance != null)
			count++;
		if(this.isfourthinstance != null)
			count++;
		if(this.isfifthinstance != null)
			count++;
		if(this.minint != null)
			count++;
		if(this.roundatttime != null)
			count++;
		if(this.lastappinterval != null)
			count++;
		if(this.starttm != null)
			count++;
		if(this.endtm != null)
			count++;
		if(this.pasclinic != null)
			count++;
		if(this.maxnoappts != null)
			count++;
		if(this.bookingrights != null)
			count++;
		if(this.listowners != null)
			count++;
		if(this.exclusiondates != null)
			count++;
		if(this.exclusiontimes != null)
			count++;
		if(this.consmediatype != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 29;
	}
	protected ims.core.vo.LocShortVo schlocation;
	protected Boolean isfixed;
	protected Boolean isundercontract;
	protected ims.scheduling.vo.lookups.Profile_Interval_Type intervaltype;
	protected Integer intervalsize;
	protected Boolean isschmon;
	protected Boolean isschtue;
	protected Boolean isschwed;
	protected Boolean isschthur;
	protected Boolean isschfri;
	protected Boolean isschsat;
	protected Boolean isschsun;
	protected Boolean isfirstinstance;
	protected Boolean issecondinstance;
	protected Boolean isthirdinstance;
	protected Boolean isfourthinstance;
	protected Boolean isfifthinstance;
	protected Integer minint;
	protected Integer roundatttime;
	protected Integer lastappinterval;
	protected ims.framework.utils.Time starttm;
	protected ims.framework.utils.Time endtm;
	protected ims.scheduling.vo.lookups.SchedPASClinic pasclinic;
	protected Integer maxnoappts;
	protected ims.scheduling.vo.Profile_BookRightsVoCollection bookingrights;
	protected ims.scheduling.vo.Profile_ListOwnerVoCollection listowners;
	protected ims.scheduling.vo.Profile_Exc_DateVoCollection exclusiondates;
	protected ims.scheduling.vo.Profile_Exc_TimeVoCollection exclusiontimes;
	protected ims.scheduling.vo.lookups.ConsultationMediaType consmediatype;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
