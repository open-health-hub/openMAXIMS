//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Sch_Session business object (ID: 1055100010).
 */
public class SessionIntermediateVo extends ims.scheduling.vo.Sch_SessionRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public SessionIntermediateVo()
	{
	}
	public SessionIntermediateVo(Integer id, int version)
	{
		super(id, version);
	}
	public SessionIntermediateVo(ims.scheduling.vo.beans.SessionIntermediateVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.schlocation = bean.getSchLocation() == null ? null : bean.getSchLocation().buildVo();
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.remainingslots = bean.getRemainingSlots();
		this.totalslots = bean.getTotalSlots();
		this.theatretype = bean.getTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getTheatreType());
		this.isfixed = bean.getIsFixed();
		this.starttm = bean.getStartTm() == null ? null : bean.getStartTm().buildTime();
		this.endtm = bean.getEndTm() == null ? null : bean.getEndTm().buildTime();
		this.remainingtime = bean.getRemainingTime();
		this.sessiondate = bean.getSessionDate() == null ? null : bean.getSessionDate().buildDate();
		this.exclusiontimes = ims.scheduling.vo.Session_Exc_TimesVoCollection.buildFromBeanCollection(bean.getExclusionTimes());
		this.maxcontinuousavailablemins = bean.getMaxContinuousAvailableMins();
		this.consmediatype = bean.getConsMediaType() == null ? null : ims.scheduling.vo.lookups.ConsultationMediaType.buildLookup(bean.getConsMediaType());
		this.sessionstatus = bean.getSessionStatus() == null ? null : ims.scheduling.vo.lookups.Session_Status_and_Reason.buildLookup(bean.getSessionStatus());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.SessionIntermediateVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.schlocation = bean.getSchLocation() == null ? null : bean.getSchLocation().buildVo(map);
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.remainingslots = bean.getRemainingSlots();
		this.totalslots = bean.getTotalSlots();
		this.theatretype = bean.getTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getTheatreType());
		this.isfixed = bean.getIsFixed();
		this.starttm = bean.getStartTm() == null ? null : bean.getStartTm().buildTime();
		this.endtm = bean.getEndTm() == null ? null : bean.getEndTm().buildTime();
		this.remainingtime = bean.getRemainingTime();
		this.sessiondate = bean.getSessionDate() == null ? null : bean.getSessionDate().buildDate();
		this.exclusiontimes = ims.scheduling.vo.Session_Exc_TimesVoCollection.buildFromBeanCollection(bean.getExclusionTimes());
		this.maxcontinuousavailablemins = bean.getMaxContinuousAvailableMins();
		this.consmediatype = bean.getConsMediaType() == null ? null : ims.scheduling.vo.lookups.ConsultationMediaType.buildLookup(bean.getConsMediaType());
		this.sessionstatus = bean.getSessionStatus() == null ? null : ims.scheduling.vo.lookups.Session_Status_and_Reason.buildLookup(bean.getSessionStatus());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.SessionIntermediateVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.SessionIntermediateVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.SessionIntermediateVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("NAME"))
			return getName();
		if(fieldName.equals("SCHLOCATION"))
			return getSchLocation();
		if(fieldName.equals("SERVICE"))
			return getService();
		if(fieldName.equals("REMAININGSLOTS"))
			return getRemainingSlots();
		if(fieldName.equals("TOTALSLOTS"))
			return getTotalSlots();
		if(fieldName.equals("THEATRETYPE"))
			return getTheatreType();
		if(fieldName.equals("ISFIXED"))
			return getIsFixed();
		if(fieldName.equals("STARTTM"))
			return getStartTm();
		if(fieldName.equals("ENDTM"))
			return getEndTm();
		if(fieldName.equals("REMAININGTIME"))
			return getRemainingTime();
		if(fieldName.equals("SESSIONDATE"))
			return getSessionDate();
		if(fieldName.equals("EXCLUSIONTIMES"))
			return getExclusionTimes();
		if(fieldName.equals("MAXCONTINUOUSAVAILABLEMINS"))
			return getMaxContinuousAvailableMins();
		if(fieldName.equals("CONSMEDIATYPE"))
			return getConsMediaType();
		if(fieldName.equals("SESSIONSTATUS"))
			return getSessionStatus();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getNameIsNotNull()
	{
		return this.name != null;
	}
	public String getName()
	{
		return this.name;
	}
	public static int getNameMaxLength()
	{
		return 100;
	}
	public void setName(String value)
	{
		this.isValidated = false;
		this.name = value;
	}
	public boolean getSchLocationIsNotNull()
	{
		return this.schlocation != null;
	}
	public ims.core.vo.LocShortVo getSchLocation()
	{
		return this.schlocation;
	}
	public void setSchLocation(ims.core.vo.LocShortVo value)
	{
		this.isValidated = false;
		this.schlocation = value;
	}
	public boolean getServiceIsNotNull()
	{
		return this.service != null;
	}
	public ims.core.vo.ServiceShortVo getService()
	{
		return this.service;
	}
	public void setService(ims.core.vo.ServiceShortVo value)
	{
		this.isValidated = false;
		this.service = value;
	}
	public boolean getRemainingSlotsIsNotNull()
	{
		return this.remainingslots != null;
	}
	public Integer getRemainingSlots()
	{
		return this.remainingslots;
	}
	public void setRemainingSlots(Integer value)
	{
		this.isValidated = false;
		this.remainingslots = value;
	}
	public boolean getTotalSlotsIsNotNull()
	{
		return this.totalslots != null;
	}
	public Integer getTotalSlots()
	{
		return this.totalslots;
	}
	public void setTotalSlots(Integer value)
	{
		this.isValidated = false;
		this.totalslots = value;
	}
	public boolean getTheatreTypeIsNotNull()
	{
		return this.theatretype != null;
	}
	public ims.scheduling.vo.lookups.TheatreType getTheatreType()
	{
		return this.theatretype;
	}
	public void setTheatreType(ims.scheduling.vo.lookups.TheatreType value)
	{
		this.isValidated = false;
		this.theatretype = value;
	}
	public boolean getIsFixedIsNotNull()
	{
		return this.isfixed != null;
	}
	public Boolean getIsFixed()
	{
		return this.isfixed;
	}
	public void setIsFixed(Boolean value)
	{
		this.isValidated = false;
		this.isfixed = value;
	}
	public boolean getStartTmIsNotNull()
	{
		return this.starttm != null;
	}
	public ims.framework.utils.Time getStartTm()
	{
		return this.starttm;
	}
	public void setStartTm(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.starttm = value;
	}
	public boolean getEndTmIsNotNull()
	{
		return this.endtm != null;
	}
	public ims.framework.utils.Time getEndTm()
	{
		return this.endtm;
	}
	public void setEndTm(ims.framework.utils.Time value)
	{
		this.isValidated = false;
		this.endtm = value;
	}
	public boolean getRemainingTimeIsNotNull()
	{
		return this.remainingtime != null;
	}
	public Integer getRemainingTime()
	{
		return this.remainingtime;
	}
	public void setRemainingTime(Integer value)
	{
		this.isValidated = false;
		this.remainingtime = value;
	}
	public boolean getSessionDateIsNotNull()
	{
		return this.sessiondate != null;
	}
	public ims.framework.utils.Date getSessionDate()
	{
		return this.sessiondate;
	}
	public void setSessionDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.sessiondate = value;
	}
	public boolean getExclusionTimesIsNotNull()
	{
		return this.exclusiontimes != null;
	}
	public ims.scheduling.vo.Session_Exc_TimesVoCollection getExclusionTimes()
	{
		return this.exclusiontimes;
	}
	public void setExclusionTimes(ims.scheduling.vo.Session_Exc_TimesVoCollection value)
	{
		this.isValidated = false;
		this.exclusiontimes = value;
	}
	public boolean getMaxContinuousAvailableMinsIsNotNull()
	{
		return this.maxcontinuousavailablemins != null;
	}
	public Integer getMaxContinuousAvailableMins()
	{
		return this.maxcontinuousavailablemins;
	}
	public void setMaxContinuousAvailableMins(Integer value)
	{
		this.isValidated = false;
		this.maxcontinuousavailablemins = value;
	}
	public boolean getConsMediaTypeIsNotNull()
	{
		return this.consmediatype != null;
	}
	public ims.scheduling.vo.lookups.ConsultationMediaType getConsMediaType()
	{
		return this.consmediatype;
	}
	public void setConsMediaType(ims.scheduling.vo.lookups.ConsultationMediaType value)
	{
		this.isValidated = false;
		this.consmediatype = value;
	}
	public boolean getSessionStatusIsNotNull()
	{
		return this.sessionstatus != null;
	}
	public ims.scheduling.vo.lookups.Session_Status_and_Reason getSessionStatus()
	{
		return this.sessionstatus;
	}
	public void setSessionStatus(ims.scheduling.vo.lookups.Session_Status_and_Reason value)
	{
		this.isValidated = false;
		this.sessionstatus = value;
	}
	/**
	* incrementRemainingSlots : when appt is un-booked/cancelled  increase remaining slots
	*/
	public void incrementRemainingSlots(int incrementBy)
	{
		this.remainingslots = new Integer(this.remainingslots.intValue() + incrementBy);
		if(this.remainingslots.intValue() > this.totalslots.intValue())
			this.remainingslots = this.totalslots;
	}
	/**
	* decrementRemainingSlots : when appt is booked reduce remaining slots
	*/
	public void decrementRemainingSlots(int decrementBy)
	{
		this.remainingslots = new Integer(this.remainingslots.intValue() - decrementBy);
		if(this.remainingslots.intValue() < 0)
			this.remainingslots = new Integer(0);
	}
	/**
	* getAppropiateSessionSlotStatus() - returns the relevant status for the slot depending on session's status
	*/
	public ims.scheduling.vo.lookups.Status_Reason getAppropiateSessionSlotStatus()
	{
		if (ims.scheduling.vo.lookups.Session_Status_and_Reason.BLOCKED.equals(this.sessionstatus))
			return ims.scheduling.vo.lookups.Status_Reason.BLOCKED;
		else if (ims.scheduling.vo.lookups.Session_Status_and_Reason.CANCELLED.equals(this.sessionstatus))
			return ims.scheduling.vo.lookups.Status_Reason.CANCELLED;
		return ims.scheduling.vo.lookups.Status_Reason.SLOTOPENED;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.schlocation != null)
		{
			if(!this.schlocation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.service != null)
		{
			if(!this.service.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.exclusiontimes != null)
		{
			if(!this.exclusiontimes.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name != null)
			if(this.name.length() > 100)
				listOfErrors.add("The length of the field [name] in the value object [ims.scheduling.vo.SessionIntermediateVo] is too big. It should be less or equal to 100");
		if(this.schlocation != null)
		{
			String[] listOfOtherErrors = this.schlocation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.service != null)
		{
			String[] listOfOtherErrors = this.service.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.remainingslots == null)
			listOfErrors.add("RemainingSlots is mandatory");
		if(this.totalslots == null)
			listOfErrors.add("TotalSlots is mandatory");
		if(this.exclusiontimes != null)
		{
			String[] listOfOtherErrors = this.exclusiontimes.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		SessionIntermediateVo clone = new SessionIntermediateVo(this.id, this.version);
		
		clone.name = this.name;
		if(this.schlocation == null)
			clone.schlocation = null;
		else
			clone.schlocation = (ims.core.vo.LocShortVo)this.schlocation.clone();
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceShortVo)this.service.clone();
		clone.remainingslots = this.remainingslots;
		clone.totalslots = this.totalslots;
		if(this.theatretype == null)
			clone.theatretype = null;
		else
			clone.theatretype = (ims.scheduling.vo.lookups.TheatreType)this.theatretype.clone();
		clone.isfixed = this.isfixed;
		if(this.starttm == null)
			clone.starttm = null;
		else
			clone.starttm = (ims.framework.utils.Time)this.starttm.clone();
		if(this.endtm == null)
			clone.endtm = null;
		else
			clone.endtm = (ims.framework.utils.Time)this.endtm.clone();
		clone.remainingtime = this.remainingtime;
		if(this.sessiondate == null)
			clone.sessiondate = null;
		else
			clone.sessiondate = (ims.framework.utils.Date)this.sessiondate.clone();
		if(this.exclusiontimes == null)
			clone.exclusiontimes = null;
		else
			clone.exclusiontimes = (ims.scheduling.vo.Session_Exc_TimesVoCollection)this.exclusiontimes.clone();
		clone.maxcontinuousavailablemins = this.maxcontinuousavailablemins;
		if(this.consmediatype == null)
			clone.consmediatype = null;
		else
			clone.consmediatype = (ims.scheduling.vo.lookups.ConsultationMediaType)this.consmediatype.clone();
		if(this.sessionstatus == null)
			clone.sessionstatus = null;
		else
			clone.sessionstatus = (ims.scheduling.vo.lookups.Session_Status_and_Reason)this.sessionstatus.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(SessionIntermediateVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A SessionIntermediateVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((SessionIntermediateVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((SessionIntermediateVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.name != null)
			count++;
		if(this.schlocation != null)
			count++;
		if(this.service != null)
			count++;
		if(this.remainingslots != null)
			count++;
		if(this.totalslots != null)
			count++;
		if(this.theatretype != null)
			count++;
		if(this.isfixed != null)
			count++;
		if(this.starttm != null)
			count++;
		if(this.endtm != null)
			count++;
		if(this.remainingtime != null)
			count++;
		if(this.sessiondate != null)
			count++;
		if(this.exclusiontimes != null)
			count++;
		if(this.maxcontinuousavailablemins != null)
			count++;
		if(this.consmediatype != null)
			count++;
		if(this.sessionstatus != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 15;
	}
	protected String name;
	protected ims.core.vo.LocShortVo schlocation;
	protected ims.core.vo.ServiceShortVo service;
	protected Integer remainingslots;
	protected Integer totalslots;
	protected ims.scheduling.vo.lookups.TheatreType theatretype;
	protected Boolean isfixed;
	protected ims.framework.utils.Time starttm;
	protected ims.framework.utils.Time endtm;
	protected Integer remainingtime;
	protected ims.framework.utils.Date sessiondate;
	protected ims.scheduling.vo.Session_Exc_TimesVoCollection exclusiontimes;
	protected Integer maxcontinuousavailablemins;
	protected ims.scheduling.vo.lookups.ConsultationMediaType consmediatype;
	protected ims.scheduling.vo.lookups.Session_Status_and_Reason sessionstatus;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
