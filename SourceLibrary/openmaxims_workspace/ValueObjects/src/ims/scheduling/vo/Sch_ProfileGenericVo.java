//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.scheduling.vo;

/**
 * Linked to Scheduling.Sch_Profile business object (ID: 1005100001).
 */
public class Sch_ProfileGenericVo extends ims.scheduling.vo.Sch_ProfileVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public Sch_ProfileGenericVo()
	{
	}
	public Sch_ProfileGenericVo(Integer id, int version)
	{
		super(id, version);
	}
	public Sch_ProfileGenericVo(ims.scheduling.vo.beans.Sch_ProfileGenericVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.description = bean.getDescription();
		this.prfcategory = bean.getPrfCategory() == null ? null : ims.scheduling.vo.lookups.Sched_Prfile_Cat.buildLookup(bean.getPrfCategory());
		this.prftype = bean.getPrftype() == null ? null : ims.scheduling.vo.lookups.Sched_Profile_Type.buildLookup(bean.getPrftype());
		this.efffrm = bean.getEffFrm() == null ? null : bean.getEffFrm().buildDate();
		this.effto = bean.getEffTo() == null ? null : bean.getEffTo().buildDate();
		this.isactive = bean.getIsActive();
		this.service = bean.getService() == null ? null : bean.getService().buildVo();
		this.lastactualgendate = bean.getLastActualGenDate() == null ? null : bean.getLastActualGenDate().buildDate();
		this.lastgendate = bean.getLastGenDate() == null ? null : bean.getLastGenDate().buildDate();
		this.schlocation = bean.getSchLocation() == null ? null : bean.getSchLocation().buildVo();
		this.isfixed = bean.getIsFixed();
		this.isundercontract = bean.getIsUnderContract();
		this.intervaltype = bean.getIntervalType() == null ? null : ims.scheduling.vo.lookups.Profile_Interval_Type.buildLookup(bean.getIntervalType());
		this.intervalsize = bean.getIntervalSize();
		this.isschmon = bean.getIsSchMon();
		this.isschtue = bean.getIsSchTue();
		this.isschwed = bean.getIsSchWed();
		this.isschthur = bean.getIsSchThur();
		this.isschfri = bean.getIsSchFri();
		this.isschsat = bean.getIsSchSat();
		this.isschsun = bean.getIsSchSun();
		this.isfirstinstance = bean.getIsFirstInstance();
		this.issecondinstance = bean.getIsSecondInstance();
		this.isthirdinstance = bean.getIsThirdInstance();
		this.isfourthinstance = bean.getIsFourthInstance();
		this.isfifthinstance = bean.getIsFifthInstance();
		this.minint = bean.getMinInt();
		this.roundatttime = bean.getRoundAttTime();
		this.lastappinterval = bean.getLastAppInterval();
		this.starttm = bean.getStartTm() == null ? null : bean.getStartTm().buildTime();
		this.endtm = bean.getEndTm() == null ? null : bean.getEndTm().buildTime();
		this.pasclinic = bean.getPASClinic() == null ? null : ims.scheduling.vo.lookups.SchedPASClinic.buildLookup(bean.getPASClinic());
		this.maxnoappts = bean.getMaxNoAppts();
		this.bookingrights = ims.scheduling.vo.Profile_BookRightsVoCollection.buildFromBeanCollection(bean.getBookingRights());
		this.listowners = ims.scheduling.vo.Profile_ListOwnerVoCollection.buildFromBeanCollection(bean.getListOwners());
		this.exclusiondates = ims.scheduling.vo.Profile_Exc_DateVoCollection.buildFromBeanCollection(bean.getExclusionDates());
		this.exclusiontimes = ims.scheduling.vo.Profile_Exc_TimeVoCollection.buildFromBeanCollection(bean.getExclusionTimes());
		this.consmediatype = bean.getConsMediaType() == null ? null : ims.scheduling.vo.lookups.ConsultationMediaType.buildLookup(bean.getConsMediaType());
		this.profileslots = ims.scheduling.vo.Profile_SlotGenericVoCollection.buildFromBeanCollection(bean.getProfileSlots());
		this.directoryofservices = ims.scheduling.vo.DirectoryOfServiceVoCollection.buildFromBeanCollection(bean.getDirectoryOfServices());
		this.theatredetails = ims.scheduling.vo.TheatreDetailLiteVoCollection.buildFromBeanCollection(bean.getTheatreDetails());
		this.istheatreprofile = bean.getIsTheatreProfile();
		this.theatretype = bean.getTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getTheatreType());
		this.profileactivities = ims.scheduling.vo.ProfileActivityVoCollection.buildFromBeanCollection(bean.getProfileActivities());
		this.profiletheatreslots = ims.scheduling.vo.ProfileTheatreTCISlotVoCollection.buildFromBeanCollection(bean.getProfileTheatreSlots());
		this.slottype = bean.getSlotType() == null ? null : ims.scheduling.vo.lookups.SlotType.buildLookup(bean.getSlotType());
		this.parentchildslots = ims.scheduling.vo.ProfileParentChildSlotVoCollection.buildFromBeanCollection(bean.getParentChildSlots());
		this.anaesthetictype = ims.clinical.vo.lookups.AnaestheticTypeCollection.buildFromBeanCollection(bean.getAnaestheticType());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.scheduling.vo.beans.Sch_ProfileGenericVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.description = bean.getDescription();
		this.prfcategory = bean.getPrfCategory() == null ? null : ims.scheduling.vo.lookups.Sched_Prfile_Cat.buildLookup(bean.getPrfCategory());
		this.prftype = bean.getPrftype() == null ? null : ims.scheduling.vo.lookups.Sched_Profile_Type.buildLookup(bean.getPrftype());
		this.efffrm = bean.getEffFrm() == null ? null : bean.getEffFrm().buildDate();
		this.effto = bean.getEffTo() == null ? null : bean.getEffTo().buildDate();
		this.isactive = bean.getIsActive();
		this.service = bean.getService() == null ? null : bean.getService().buildVo(map);
		this.lastactualgendate = bean.getLastActualGenDate() == null ? null : bean.getLastActualGenDate().buildDate();
		this.lastgendate = bean.getLastGenDate() == null ? null : bean.getLastGenDate().buildDate();
		this.schlocation = bean.getSchLocation() == null ? null : bean.getSchLocation().buildVo(map);
		this.isfixed = bean.getIsFixed();
		this.isundercontract = bean.getIsUnderContract();
		this.intervaltype = bean.getIntervalType() == null ? null : ims.scheduling.vo.lookups.Profile_Interval_Type.buildLookup(bean.getIntervalType());
		this.intervalsize = bean.getIntervalSize();
		this.isschmon = bean.getIsSchMon();
		this.isschtue = bean.getIsSchTue();
		this.isschwed = bean.getIsSchWed();
		this.isschthur = bean.getIsSchThur();
		this.isschfri = bean.getIsSchFri();
		this.isschsat = bean.getIsSchSat();
		this.isschsun = bean.getIsSchSun();
		this.isfirstinstance = bean.getIsFirstInstance();
		this.issecondinstance = bean.getIsSecondInstance();
		this.isthirdinstance = bean.getIsThirdInstance();
		this.isfourthinstance = bean.getIsFourthInstance();
		this.isfifthinstance = bean.getIsFifthInstance();
		this.minint = bean.getMinInt();
		this.roundatttime = bean.getRoundAttTime();
		this.lastappinterval = bean.getLastAppInterval();
		this.starttm = bean.getStartTm() == null ? null : bean.getStartTm().buildTime();
		this.endtm = bean.getEndTm() == null ? null : bean.getEndTm().buildTime();
		this.pasclinic = bean.getPASClinic() == null ? null : ims.scheduling.vo.lookups.SchedPASClinic.buildLookup(bean.getPASClinic());
		this.maxnoappts = bean.getMaxNoAppts();
		this.bookingrights = ims.scheduling.vo.Profile_BookRightsVoCollection.buildFromBeanCollection(bean.getBookingRights());
		this.listowners = ims.scheduling.vo.Profile_ListOwnerVoCollection.buildFromBeanCollection(bean.getListOwners());
		this.exclusiondates = ims.scheduling.vo.Profile_Exc_DateVoCollection.buildFromBeanCollection(bean.getExclusionDates());
		this.exclusiontimes = ims.scheduling.vo.Profile_Exc_TimeVoCollection.buildFromBeanCollection(bean.getExclusionTimes());
		this.consmediatype = bean.getConsMediaType() == null ? null : ims.scheduling.vo.lookups.ConsultationMediaType.buildLookup(bean.getConsMediaType());
		this.profileslots = ims.scheduling.vo.Profile_SlotGenericVoCollection.buildFromBeanCollection(bean.getProfileSlots());
		this.directoryofservices = ims.scheduling.vo.DirectoryOfServiceVoCollection.buildFromBeanCollection(bean.getDirectoryOfServices());
		this.theatredetails = ims.scheduling.vo.TheatreDetailLiteVoCollection.buildFromBeanCollection(bean.getTheatreDetails());
		this.istheatreprofile = bean.getIsTheatreProfile();
		this.theatretype = bean.getTheatreType() == null ? null : ims.scheduling.vo.lookups.TheatreType.buildLookup(bean.getTheatreType());
		this.profileactivities = ims.scheduling.vo.ProfileActivityVoCollection.buildFromBeanCollection(bean.getProfileActivities());
		this.profiletheatreslots = ims.scheduling.vo.ProfileTheatreTCISlotVoCollection.buildFromBeanCollection(bean.getProfileTheatreSlots());
		this.slottype = bean.getSlotType() == null ? null : ims.scheduling.vo.lookups.SlotType.buildLookup(bean.getSlotType());
		this.parentchildslots = ims.scheduling.vo.ProfileParentChildSlotVoCollection.buildFromBeanCollection(bean.getParentChildSlots());
		this.anaesthetictype = ims.clinical.vo.lookups.AnaestheticTypeCollection.buildFromBeanCollection(bean.getAnaestheticType());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.scheduling.vo.beans.Sch_ProfileGenericVoBean bean = null;
		if(map != null)
			bean = (ims.scheduling.vo.beans.Sch_ProfileGenericVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.scheduling.vo.beans.Sch_ProfileGenericVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PROFILESLOTS"))
			return getProfileSlots();
		if(fieldName.equals("DIRECTORYOFSERVICES"))
			return getDirectoryOfServices();
		if(fieldName.equals("THEATREDETAILS"))
			return getTheatreDetails();
		if(fieldName.equals("ISTHEATREPROFILE"))
			return getIsTheatreProfile();
		if(fieldName.equals("THEATRETYPE"))
			return getTheatreType();
		if(fieldName.equals("PROFILEACTIVITIES"))
			return getProfileActivities();
		if(fieldName.equals("PROFILETHEATRESLOTS"))
			return getProfileTheatreSlots();
		if(fieldName.equals("SLOTTYPE"))
			return getSlotType();
		if(fieldName.equals("PARENTCHILDSLOTS"))
			return getParentChildSlots();
		if(fieldName.equals("ANAESTHETICTYPE"))
			return getAnaestheticType();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getProfileSlotsIsNotNull()
	{
		return this.profileslots != null;
	}
	public ims.scheduling.vo.Profile_SlotGenericVoCollection getProfileSlots()
	{
		return this.profileslots;
	}
	public void setProfileSlots(ims.scheduling.vo.Profile_SlotGenericVoCollection value)
	{
		this.isValidated = false;
		this.profileslots = value;
	}
	public boolean getDirectoryOfServicesIsNotNull()
	{
		return this.directoryofservices != null;
	}
	public ims.scheduling.vo.DirectoryOfServiceVoCollection getDirectoryOfServices()
	{
		return this.directoryofservices;
	}
	public void setDirectoryOfServices(ims.scheduling.vo.DirectoryOfServiceVoCollection value)
	{
		this.isValidated = false;
		this.directoryofservices = value;
	}
	public boolean getTheatreDetailsIsNotNull()
	{
		return this.theatredetails != null;
	}
	public ims.scheduling.vo.TheatreDetailLiteVoCollection getTheatreDetails()
	{
		return this.theatredetails;
	}
	public void setTheatreDetails(ims.scheduling.vo.TheatreDetailLiteVoCollection value)
	{
		this.isValidated = false;
		this.theatredetails = value;
	}
	public boolean getIsTheatreProfileIsNotNull()
	{
		return this.istheatreprofile != null;
	}
	public Boolean getIsTheatreProfile()
	{
		return this.istheatreprofile;
	}
	public void setIsTheatreProfile(Boolean value)
	{
		this.isValidated = false;
		this.istheatreprofile = value;
	}
	public boolean getTheatreTypeIsNotNull()
	{
		return this.theatretype != null;
	}
	public ims.scheduling.vo.lookups.TheatreType getTheatreType()
	{
		return this.theatretype;
	}
	public void setTheatreType(ims.scheduling.vo.lookups.TheatreType value)
	{
		this.isValidated = false;
		this.theatretype = value;
	}
	public boolean getProfileActivitiesIsNotNull()
	{
		return this.profileactivities != null;
	}
	public ims.scheduling.vo.ProfileActivityVoCollection getProfileActivities()
	{
		return this.profileactivities;
	}
	public void setProfileActivities(ims.scheduling.vo.ProfileActivityVoCollection value)
	{
		this.isValidated = false;
		this.profileactivities = value;
	}
	public boolean getProfileTheatreSlotsIsNotNull()
	{
		return this.profiletheatreslots != null;
	}
	public ims.scheduling.vo.ProfileTheatreTCISlotVoCollection getProfileTheatreSlots()
	{
		return this.profiletheatreslots;
	}
	public void setProfileTheatreSlots(ims.scheduling.vo.ProfileTheatreTCISlotVoCollection value)
	{
		this.isValidated = false;
		this.profiletheatreslots = value;
	}
	public boolean getSlotTypeIsNotNull()
	{
		return this.slottype != null;
	}
	public ims.scheduling.vo.lookups.SlotType getSlotType()
	{
		return this.slottype;
	}
	public void setSlotType(ims.scheduling.vo.lookups.SlotType value)
	{
		this.isValidated = false;
		this.slottype = value;
	}
	public boolean getParentChildSlotsIsNotNull()
	{
		return this.parentchildslots != null;
	}
	public ims.scheduling.vo.ProfileParentChildSlotVoCollection getParentChildSlots()
	{
		return this.parentchildslots;
	}
	public void setParentChildSlots(ims.scheduling.vo.ProfileParentChildSlotVoCollection value)
	{
		this.isValidated = false;
		this.parentchildslots = value;
	}
	public boolean getAnaestheticTypeIsNotNull()
	{
		return this.anaesthetictype != null;
	}
	public ims.clinical.vo.lookups.AnaestheticTypeCollection getAnaestheticType()
	{
		return this.anaesthetictype;
	}
	public void setAnaestheticType(ims.clinical.vo.lookups.AnaestheticTypeCollection value)
	{
		this.isValidated = false;
		this.anaesthetictype = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.service != null)
		{
			if(!this.service.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.schlocation != null)
		{
			if(!this.schlocation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.bookingrights != null)
		{
			if(!this.bookingrights.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.listowners != null)
		{
			if(!this.listowners.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.exclusiondates != null)
		{
			if(!this.exclusiondates.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.exclusiontimes != null)
		{
			if(!this.exclusiontimes.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.profileslots != null)
		{
			if(!this.profileslots.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.directoryofservices != null)
		{
			if(!this.directoryofservices.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.theatredetails != null)
		{
			if(!this.theatredetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.profileactivities != null)
		{
			if(!this.profileactivities.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.profiletheatreslots != null)
		{
			if(!this.profiletheatreslots.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.parentchildslots != null)
		{
			if(!this.parentchildslots.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name == null || this.name.length() == 0)
			listOfErrors.add("Name is mandatory");
		else if(this.name.length() > 100)
			listOfErrors.add("The length of the field [name] in the value object [ims.scheduling.vo.Sch_ProfileGenericVo] is too big. It should be less or equal to 100");
		if(this.description != null)
			if(this.description.length() > 255)
				listOfErrors.add("The length of the field [description] in the value object [ims.scheduling.vo.Sch_ProfileGenericVo] is too big. It should be less or equal to 255");
		if(this.prfcategory == null)
			listOfErrors.add("Category is mandatory");
		if(this.prftype == null)
			listOfErrors.add("Type is mandatory");
		if(this.efffrm == null)
			listOfErrors.add("Start Date is mandatory");
		if(this.service == null)
			listOfErrors.add("Service is mandatory");
		if(this.service != null)
		{
			String[] listOfOtherErrors = this.service.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.schlocation == null)
			listOfErrors.add("Location is mandatory");
		if(this.schlocation != null)
		{
			String[] listOfOtherErrors = this.schlocation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.isfixed == null)
			listOfErrors.add("isFixed is mandatory");
		if(this.intervaltype == null)
			listOfErrors.add("Interval Type is mandatory");
		if(this.intervalsize == null)
			listOfErrors.add("Interval Size is mandatory");
		if(this.intervalsize != null && (this.intervalsize.intValue() < 1 || this.intervalsize.intValue() > 1000000000))
			listOfErrors.add("Interval Size cannot be lass than 1");
		if(this.starttm == null)
			listOfErrors.add("Profile Details Start Time is mandatory");
		if(this.endtm == null)
			listOfErrors.add("End Time is mandatory");
		if(this.bookingrights != null)
		{
			String[] listOfOtherErrors = this.bookingrights.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.listowners != null)
		{
			String[] listOfOtherErrors = this.listowners.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.exclusiondates != null)
		{
			String[] listOfOtherErrors = this.exclusiondates.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.exclusiontimes != null)
		{
			String[] listOfOtherErrors = this.exclusiontimes.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.profileslots != null)
		{
			String[] listOfOtherErrors = this.profileslots.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.directoryofservices != null)
		{
			String[] listOfOtherErrors = this.directoryofservices.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.theatredetails != null)
		{
			String[] listOfOtherErrors = this.theatredetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.profileactivities != null)
		{
			String[] listOfOtherErrors = this.profileactivities.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.profiletheatreslots != null)
		{
			String[] listOfOtherErrors = this.profiletheatreslots.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.parentchildslots != null)
		{
			String[] listOfOtherErrors = this.parentchildslots.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		Sch_ProfileGenericVo clone = new Sch_ProfileGenericVo(this.id, this.version);
		
		clone.name = this.name;
		clone.description = this.description;
		if(this.prfcategory == null)
			clone.prfcategory = null;
		else
			clone.prfcategory = (ims.scheduling.vo.lookups.Sched_Prfile_Cat)this.prfcategory.clone();
		if(this.prftype == null)
			clone.prftype = null;
		else
			clone.prftype = (ims.scheduling.vo.lookups.Sched_Profile_Type)this.prftype.clone();
		if(this.efffrm == null)
			clone.efffrm = null;
		else
			clone.efffrm = (ims.framework.utils.Date)this.efffrm.clone();
		if(this.effto == null)
			clone.effto = null;
		else
			clone.effto = (ims.framework.utils.Date)this.effto.clone();
		clone.isactive = this.isactive;
		if(this.service == null)
			clone.service = null;
		else
			clone.service = (ims.core.vo.ServiceShortVo)this.service.clone();
		if(this.lastactualgendate == null)
			clone.lastactualgendate = null;
		else
			clone.lastactualgendate = (ims.framework.utils.Date)this.lastactualgendate.clone();
		if(this.lastgendate == null)
			clone.lastgendate = null;
		else
			clone.lastgendate = (ims.framework.utils.Date)this.lastgendate.clone();
		if(this.schlocation == null)
			clone.schlocation = null;
		else
			clone.schlocation = (ims.core.vo.LocShortVo)this.schlocation.clone();
		clone.isfixed = this.isfixed;
		clone.isundercontract = this.isundercontract;
		if(this.intervaltype == null)
			clone.intervaltype = null;
		else
			clone.intervaltype = (ims.scheduling.vo.lookups.Profile_Interval_Type)this.intervaltype.clone();
		clone.intervalsize = this.intervalsize;
		clone.isschmon = this.isschmon;
		clone.isschtue = this.isschtue;
		clone.isschwed = this.isschwed;
		clone.isschthur = this.isschthur;
		clone.isschfri = this.isschfri;
		clone.isschsat = this.isschsat;
		clone.isschsun = this.isschsun;
		clone.isfirstinstance = this.isfirstinstance;
		clone.issecondinstance = this.issecondinstance;
		clone.isthirdinstance = this.isthirdinstance;
		clone.isfourthinstance = this.isfourthinstance;
		clone.isfifthinstance = this.isfifthinstance;
		clone.minint = this.minint;
		clone.roundatttime = this.roundatttime;
		clone.lastappinterval = this.lastappinterval;
		if(this.starttm == null)
			clone.starttm = null;
		else
			clone.starttm = (ims.framework.utils.Time)this.starttm.clone();
		if(this.endtm == null)
			clone.endtm = null;
		else
			clone.endtm = (ims.framework.utils.Time)this.endtm.clone();
		if(this.pasclinic == null)
			clone.pasclinic = null;
		else
			clone.pasclinic = (ims.scheduling.vo.lookups.SchedPASClinic)this.pasclinic.clone();
		clone.maxnoappts = this.maxnoappts;
		if(this.bookingrights == null)
			clone.bookingrights = null;
		else
			clone.bookingrights = (ims.scheduling.vo.Profile_BookRightsVoCollection)this.bookingrights.clone();
		if(this.listowners == null)
			clone.listowners = null;
		else
			clone.listowners = (ims.scheduling.vo.Profile_ListOwnerVoCollection)this.listowners.clone();
		if(this.exclusiondates == null)
			clone.exclusiondates = null;
		else
			clone.exclusiondates = (ims.scheduling.vo.Profile_Exc_DateVoCollection)this.exclusiondates.clone();
		if(this.exclusiontimes == null)
			clone.exclusiontimes = null;
		else
			clone.exclusiontimes = (ims.scheduling.vo.Profile_Exc_TimeVoCollection)this.exclusiontimes.clone();
		if(this.consmediatype == null)
			clone.consmediatype = null;
		else
			clone.consmediatype = (ims.scheduling.vo.lookups.ConsultationMediaType)this.consmediatype.clone();
		if(this.profileslots == null)
			clone.profileslots = null;
		else
			clone.profileslots = (ims.scheduling.vo.Profile_SlotGenericVoCollection)this.profileslots.clone();
		if(this.directoryofservices == null)
			clone.directoryofservices = null;
		else
			clone.directoryofservices = (ims.scheduling.vo.DirectoryOfServiceVoCollection)this.directoryofservices.clone();
		if(this.theatredetails == null)
			clone.theatredetails = null;
		else
			clone.theatredetails = (ims.scheduling.vo.TheatreDetailLiteVoCollection)this.theatredetails.clone();
		clone.istheatreprofile = this.istheatreprofile;
		if(this.theatretype == null)
			clone.theatretype = null;
		else
			clone.theatretype = (ims.scheduling.vo.lookups.TheatreType)this.theatretype.clone();
		if(this.profileactivities == null)
			clone.profileactivities = null;
		else
			clone.profileactivities = (ims.scheduling.vo.ProfileActivityVoCollection)this.profileactivities.clone();
		if(this.profiletheatreslots == null)
			clone.profiletheatreslots = null;
		else
			clone.profiletheatreslots = (ims.scheduling.vo.ProfileTheatreTCISlotVoCollection)this.profiletheatreslots.clone();
		if(this.slottype == null)
			clone.slottype = null;
		else
			clone.slottype = (ims.scheduling.vo.lookups.SlotType)this.slottype.clone();
		if(this.parentchildslots == null)
			clone.parentchildslots = null;
		else
			clone.parentchildslots = (ims.scheduling.vo.ProfileParentChildSlotVoCollection)this.parentchildslots.clone();
		if(this.anaesthetictype == null)
			clone.anaesthetictype = null;
		else
			clone.anaesthetictype = (ims.clinical.vo.lookups.AnaestheticTypeCollection)this.anaesthetictype.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(Sch_ProfileGenericVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A Sch_ProfileGenericVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		Sch_ProfileGenericVo compareObj = (Sch_ProfileGenericVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_Sch_Profile() == null && compareObj.getID_Sch_Profile() != null)
				return -1;
			if(this.getID_Sch_Profile() != null && compareObj.getID_Sch_Profile() == null)
				return 1;
			if(this.getID_Sch_Profile() != null && compareObj.getID_Sch_Profile() != null)
				retVal = this.getID_Sch_Profile().compareTo(compareObj.getID_Sch_Profile());
		}
		if (retVal == 0)
		{
			if(this.getName() == null && compareObj.getName() != null)
				return -1;
			if(this.getName() != null && compareObj.getName() == null)
				return 1;
			if(this.getName() != null && compareObj.getName() != null)
			{
				if(caseInsensitive)
					retVal = this.getName().toLowerCase().compareTo(compareObj.getName().toLowerCase());
				else
					retVal = this.getName().compareTo(compareObj.getName());
			}
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.profileslots != null)
			count++;
		if(this.directoryofservices != null)
			count++;
		if(this.theatredetails != null)
			count++;
		if(this.istheatreprofile != null)
			count++;
		if(this.theatretype != null)
			count++;
		if(this.profileactivities != null)
			count++;
		if(this.profiletheatreslots != null)
			count++;
		if(this.slottype != null)
			count++;
		if(this.parentchildslots != null)
			count++;
		if(this.anaesthetictype != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 10;
	}
	protected ims.scheduling.vo.Profile_SlotGenericVoCollection profileslots;
	protected ims.scheduling.vo.DirectoryOfServiceVoCollection directoryofservices;
	protected ims.scheduling.vo.TheatreDetailLiteVoCollection theatredetails;
	protected Boolean istheatreprofile;
	protected ims.scheduling.vo.lookups.TheatreType theatretype;
	protected ims.scheduling.vo.ProfileActivityVoCollection profileactivities;
	protected ims.scheduling.vo.ProfileTheatreTCISlotVoCollection profiletheatreslots;
	protected ims.scheduling.vo.lookups.SlotType slottype;
	protected ims.scheduling.vo.ProfileParentChildSlotVoCollection parentchildslots;
	protected ims.clinical.vo.lookups.AnaestheticTypeCollection anaesthetictype;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
