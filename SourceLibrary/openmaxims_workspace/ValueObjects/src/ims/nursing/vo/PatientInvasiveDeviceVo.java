//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.vo;

/**
 * Linked to clinical.PatientInvasiveDevice business object (ID: 1072100043).
 */
public class PatientInvasiveDeviceVo extends ims.nursing.vo.PatientInvasiveDeviceShortVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientInvasiveDeviceVo()
	{
	}
	public PatientInvasiveDeviceVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientInvasiveDeviceVo(ims.nursing.vo.beans.PatientInvasiveDeviceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.invasivedevice = bean.getInvasiveDevice() == null ? null : bean.getInvasiveDevice().buildVo();
		this.inserteddatetime = bean.getInsertedDateTime() == null ? null : bean.getInsertedDateTime().buildDateTime();
		this.insertedhcp = bean.getInsertedHCP() == null ? null : bean.getInsertedHCP().buildVo();
		this.vipscore = ims.nursing.vo.PatientInvasiveDeviceVipVoCollection.buildFromBeanCollection(bean.getVIPScore());
		this.removaldatetime = bean.getRemovalDateTime() == null ? null : bean.getRemovalDateTime().buildDateTime();
		this.removalhcp = bean.getRemovalHCP() == null ? null : bean.getRemovalHCP().buildVo();
		this.targetremovaldatetime = bean.getTargetRemovalDateTime() == null ? null : bean.getTargetRemovalDateTime().buildDateTime();
		this.site = bean.getSite();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.type = bean.getType() == null ? null : new ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo(new Integer(bean.getType().getId()), bean.getType().getVersion());
		this.size = bean.getSize() == null ? null : new ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo(new Integer(bean.getSize().getId()), bean.getSize().getVersion());
		this.comment = bean.getComment();
		this.removalreason = bean.getRemovalReason() == null ? null : ims.clinical.vo.lookups.InvasiveDeviceRemovalReason.buildLookup(bean.getRemovalReason());
		this.sentforculture = bean.getSentForCulture() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getSentForCulture());
		this.result = bean.getResult();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.nursing.vo.beans.PatientInvasiveDeviceVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.invasivedevice = bean.getInvasiveDevice() == null ? null : bean.getInvasiveDevice().buildVo(map);
		this.inserteddatetime = bean.getInsertedDateTime() == null ? null : bean.getInsertedDateTime().buildDateTime();
		this.insertedhcp = bean.getInsertedHCP() == null ? null : bean.getInsertedHCP().buildVo(map);
		this.vipscore = ims.nursing.vo.PatientInvasiveDeviceVipVoCollection.buildFromBeanCollection(bean.getVIPScore());
		this.removaldatetime = bean.getRemovalDateTime() == null ? null : bean.getRemovalDateTime().buildDateTime();
		this.removalhcp = bean.getRemovalHCP() == null ? null : bean.getRemovalHCP().buildVo(map);
		this.targetremovaldatetime = bean.getTargetRemovalDateTime() == null ? null : bean.getTargetRemovalDateTime().buildDateTime();
		this.site = bean.getSite();
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.type = bean.getType() == null ? null : new ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo(new Integer(bean.getType().getId()), bean.getType().getVersion());
		this.size = bean.getSize() == null ? null : new ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo(new Integer(bean.getSize().getId()), bean.getSize().getVersion());
		this.comment = bean.getComment();
		this.removalreason = bean.getRemovalReason() == null ? null : ims.clinical.vo.lookups.InvasiveDeviceRemovalReason.buildLookup(bean.getRemovalReason());
		this.sentforculture = bean.getSentForCulture() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getSentForCulture());
		this.result = bean.getResult();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.nursing.vo.beans.PatientInvasiveDeviceVoBean bean = null;
		if(map != null)
			bean = (ims.nursing.vo.beans.PatientInvasiveDeviceVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.nursing.vo.beans.PatientInvasiveDeviceVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CLINICALCONTACT"))
			return getClinicalContact();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("AUTHORINGINFORMATION"))
			return getAuthoringInformation();
		if(fieldName.equals("TYPE"))
			return getType();
		if(fieldName.equals("SIZE"))
			return getSize();
		if(fieldName.equals("COMMENT"))
			return getComment();
		if(fieldName.equals("REMOVALREASON"))
			return getRemovalReason();
		if(fieldName.equals("SENTFORCULTURE"))
			return getSentForCulture();
		if(fieldName.equals("RESULT"))
			return getResult();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getClinicalContactIsNotNull()
	{
		return this.clinicalcontact != null;
	}
	public ims.core.admin.vo.ClinicalContactRefVo getClinicalContact()
	{
		return this.clinicalcontact;
	}
	public void setClinicalContact(ims.core.admin.vo.ClinicalContactRefVo value)
	{
		this.isValidated = false;
		this.clinicalcontact = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.admin.vo.CareContextRefVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getAuthoringInformationIsNotNull()
	{
		return this.authoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInformation()
	{
		return this.authoringinformation;
	}
	public void setAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinformation = value;
	}
	public boolean getTypeIsNotNull()
	{
		return this.type != null;
	}
	public ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo getType()
	{
		return this.type;
	}
	public void setType(ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo value)
	{
		this.isValidated = false;
		this.type = value;
	}
	public boolean getSizeIsNotNull()
	{
		return this.size != null;
	}
	public ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo getSize()
	{
		return this.size;
	}
	public void setSize(ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo value)
	{
		this.isValidated = false;
		this.size = value;
	}
	public boolean getCommentIsNotNull()
	{
		return this.comment != null;
	}
	public String getComment()
	{
		return this.comment;
	}
	public static int getCommentMaxLength()
	{
		return 255;
	}
	public void setComment(String value)
	{
		this.isValidated = false;
		this.comment = value;
	}
	public boolean getRemovalReasonIsNotNull()
	{
		return this.removalreason != null;
	}
	public ims.clinical.vo.lookups.InvasiveDeviceRemovalReason getRemovalReason()
	{
		return this.removalreason;
	}
	public void setRemovalReason(ims.clinical.vo.lookups.InvasiveDeviceRemovalReason value)
	{
		this.isValidated = false;
		this.removalreason = value;
	}
	public boolean getSentForCultureIsNotNull()
	{
		return this.sentforculture != null;
	}
	public ims.core.vo.lookups.YesNo getSentForCulture()
	{
		return this.sentforculture;
	}
	public void setSentForCulture(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.sentforculture = value;
	}
	public boolean getResultIsNotNull()
	{
		return this.result != null;
	}
	public String getResult()
	{
		return this.result;
	}
	public static int getResultMaxLength()
	{
		return 255;
	}
	public void setResult(String value)
	{
		this.isValidated = false;
		this.result = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.insertedhcp != null)
		{
			if(!this.insertedhcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.vipscore != null)
		{
			if(!this.vipscore.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.removalhcp != null)
		{
			if(!this.removalhcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.invasivedevice == null)
			listOfErrors.add("InvasiveDevice is mandatory");
		if(this.inserteddatetime == null)
			listOfErrors.add("InsertedDateTime is mandatory");
		if(this.insertedhcp == null)
			listOfErrors.add("InsertedHCP is mandatory");
		if(this.insertedhcp != null)
		{
			String[] listOfOtherErrors = this.insertedhcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.vipscore != null)
		{
			String[] listOfOtherErrors = this.vipscore.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.removalhcp != null)
		{
			String[] listOfOtherErrors = this.removalhcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.targetremovaldatetime == null)
			listOfErrors.add("TargetRemovalDateTime is mandatory");
		if(this.site != null)
			if(this.site.length() > 50)
				listOfErrors.add("The length of the field [site] in the value object [ims.nursing.vo.PatientInvasiveDeviceVo] is too big. It should be less or equal to 50");
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.comment != null)
			if(this.comment.length() > 255)
				listOfErrors.add("The length of the field [comment] in the value object [ims.nursing.vo.PatientInvasiveDeviceVo] is too big. It should be less or equal to 255");
		if(this.result != null)
			if(this.result.length() > 255)
				listOfErrors.add("The length of the field [result] in the value object [ims.nursing.vo.PatientInvasiveDeviceVo] is too big. It should be less or equal to 255");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientInvasiveDeviceVo clone = new PatientInvasiveDeviceVo(this.id, this.version);
		
		if(this.invasivedevice == null)
			clone.invasivedevice = null;
		else
			clone.invasivedevice = (ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo)this.invasivedevice.clone();
		if(this.inserteddatetime == null)
			clone.inserteddatetime = null;
		else
			clone.inserteddatetime = (ims.framework.utils.DateTime)this.inserteddatetime.clone();
		if(this.insertedhcp == null)
			clone.insertedhcp = null;
		else
			clone.insertedhcp = (ims.core.vo.HcpLiteVo)this.insertedhcp.clone();
		if(this.vipscore == null)
			clone.vipscore = null;
		else
			clone.vipscore = (ims.nursing.vo.PatientInvasiveDeviceVipVoCollection)this.vipscore.clone();
		if(this.removaldatetime == null)
			clone.removaldatetime = null;
		else
			clone.removaldatetime = (ims.framework.utils.DateTime)this.removaldatetime.clone();
		if(this.removalhcp == null)
			clone.removalhcp = null;
		else
			clone.removalhcp = (ims.core.vo.HcpLiteVo)this.removalhcp.clone();
		if(this.targetremovaldatetime == null)
			clone.targetremovaldatetime = null;
		else
			clone.targetremovaldatetime = (ims.framework.utils.DateTime)this.targetremovaldatetime.clone();
		clone.site = this.site;
		clone.clinicalcontact = this.clinicalcontact;
		clone.carecontext = this.carecontext;
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		clone.type = this.type;
		clone.size = this.size;
		clone.comment = this.comment;
		if(this.removalreason == null)
			clone.removalreason = null;
		else
			clone.removalreason = (ims.clinical.vo.lookups.InvasiveDeviceRemovalReason)this.removalreason.clone();
		if(this.sentforculture == null)
			clone.sentforculture = null;
		else
			clone.sentforculture = (ims.core.vo.lookups.YesNo)this.sentforculture.clone();
		clone.result = this.result;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientInvasiveDeviceVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientInvasiveDeviceVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((PatientInvasiveDeviceVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((PatientInvasiveDeviceVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.clinicalcontact != null)
			count++;
		if(this.carecontext != null)
			count++;
		if(this.authoringinformation != null)
			count++;
		if(this.type != null)
			count++;
		if(this.size != null)
			count++;
		if(this.comment != null)
			count++;
		if(this.removalreason != null)
			count++;
		if(this.sentforculture != null)
			count++;
		if(this.result != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 9;
	}
	protected ims.core.admin.vo.ClinicalContactRefVo clinicalcontact;
	protected ims.core.admin.vo.CareContextRefVo carecontext;
	protected ims.core.vo.AuthoringInformationVo authoringinformation;
	protected ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo type;
	protected ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo size;
	protected String comment;
	protected ims.clinical.vo.lookups.InvasiveDeviceRemovalReason removalreason;
	protected ims.core.vo.lookups.YesNo sentforculture;
	protected String result;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
