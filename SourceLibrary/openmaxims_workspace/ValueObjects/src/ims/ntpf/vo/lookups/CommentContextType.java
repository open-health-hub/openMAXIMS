//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ntpf.vo.lookups;

import ims.framework.cn.data.TreeNode;
import java.util.ArrayList;
import ims.framework.utils.Image;
import ims.framework.utils.Color;

public class CommentContextType extends ims.vo.LookupInstVo implements TreeNode
{
	private static final long serialVersionUID = 1L;

	public CommentContextType()
	{
		super();
	}
	public CommentContextType(int id)
	{
		super(id, "", true);
	}
	public CommentContextType(int id, String text, boolean active)
	{
		super(id, text, active, null, null, null);
	}
	public CommentContextType(int id, String text, boolean active, CommentContextType parent, Image image)
	{
		super(id, text, active, parent, image);
	}
	public CommentContextType(int id, String text, boolean active, CommentContextType parent, Image image, Color color)
	{
		super(id, text, active, parent, image, color);
	}
	public CommentContextType(int id, String text, boolean active, CommentContextType parent, Image image, Color color, int order)
	{
		super(id, text, active, parent, image, color, order);
	}
	public static CommentContextType buildLookup(ims.vo.LookupInstanceBean bean)
	{
		return new CommentContextType(bean.getId(), bean.getText(), bean.isActive());
	}
	public String toString()
	{
		if(getText() != null)
			return getText();
		return "";
	}
	public TreeNode getParentNode()
	{
		return (CommentContextType)super.getParentInstance();
	}
	public CommentContextType getParent()
	{
		return (CommentContextType)super.getParentInstance();
	}
	public void setParent(CommentContextType parent)
	{
		super.setParentInstance(parent);
	}
	public TreeNode[] getChildren()
	{
		ArrayList children = super.getChildInstances();
		CommentContextType[] typedChildren = new CommentContextType[children.size()];
		for (int i = 0; i < children.size(); i++)
		{
			typedChildren[i] = (CommentContextType)children.get(i);
		}
		return typedChildren;
	}
	public int addChild(TreeNode child)
	{
		if (child instanceof CommentContextType)
		{
			super.addChild((CommentContextType)child);
		}
		return super.getChildInstances().size();
	}
	public int removeChild(TreeNode child)
	{
		if (child instanceof CommentContextType)
		{
			super.removeChild((CommentContextType)child);
		}
		return super.getChildInstances().size();
	}
	public Image getExpandedImage()
	{
		return super.getImage();
	}
	public Image getCollapsedImage()
	{
		return super.getImage();
	}
	public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()
	{
		CommentContextTypeCollection result = new CommentContextTypeCollection();
		result.add(LO_CALL_CONTEXT);
		result.add(GENERAL_LOCALL);
		result.add(FAXNOTE);
		result.add(CASEREFERRAL);
		result.add(PATIENT_ALERT);
		result.add(GENERAL);
		result.add(DISCHARGE);
		result.add(COMPLICATIONS);
		result.add(INVOICE);
		result.add(INVOICE_APPROVAL);
		result.add(OUTLIER);
		result.add(INVOICE_NON_CARE);
		result.add(CASEVIEW);
		return result;
	}
	public static CommentContextType[] getNegativeInstances()
	{
		CommentContextType[] instances = new CommentContextType[13];
		instances[0] = LO_CALL_CONTEXT;
		instances[1] = GENERAL_LOCALL;
		instances[2] = FAXNOTE;
		instances[3] = CASEREFERRAL;
		instances[4] = PATIENT_ALERT;
		instances[5] = GENERAL;
		instances[6] = DISCHARGE;
		instances[7] = COMPLICATIONS;
		instances[8] = INVOICE;
		instances[9] = INVOICE_APPROVAL;
		instances[10] = OUTLIER;
		instances[11] = INVOICE_NON_CARE;
		instances[12] = CASEVIEW;
		return instances;
	}
	public static String[] getNegativeInstanceNames()
	{
		String[] negativeInstances = new String[13];
		negativeInstances[0] = "LO_CALL_CONTEXT";
		negativeInstances[1] = "GENERAL_LOCALL";
		negativeInstances[2] = "FAXNOTE";
		negativeInstances[3] = "CASEREFERRAL";
		negativeInstances[4] = "PATIENT_ALERT";
		negativeInstances[5] = "GENERAL";
		negativeInstances[6] = "DISCHARGE";
		negativeInstances[7] = "COMPLICATIONS";
		negativeInstances[8] = "INVOICE";
		negativeInstances[9] = "INVOICE_APPROVAL";
		negativeInstances[10] = "OUTLIER";
		negativeInstances[11] = "INVOICE_NON_CARE";
		negativeInstances[12] = "CASEVIEW";
		return negativeInstances;
	}
	public static CommentContextType getNegativeInstance(String name)
	{
		if(name == null)
			return null;
		String[] negativeInstances = getNegativeInstanceNames();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].equals(name))
				return getNegativeInstances()[i];
		}
		return null;
	}
	public static CommentContextType getNegativeInstance(Integer id)
	{
		if(id == null)
			return null;
		CommentContextType[] negativeInstances = getNegativeInstances();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].getID() == id)
				return negativeInstances[i];
		}
		return null;
	}
	public int getTypeId()
	{
		return TYPE_ID;
	}
	public static final int TYPE_ID = 1101036;
	public static final CommentContextType LO_CALL_CONTEXT = new CommentContextType(-304, "Lo-Call", true, null, null, Color.Default);
	public static final CommentContextType GENERAL_LOCALL = new CommentContextType(-527, "General", true, CommentContextType.LO_CALL_CONTEXT, null, Color.Default);
	public static final CommentContextType FAXNOTE = new CommentContextType(-529, "Liason Officer Fax Note", true, CommentContextType.LO_CALL_CONTEXT, null, Color.Default);
	public static final CommentContextType CASEREFERRAL = new CommentContextType(-308, "Case Referral", true, null, null, Color.Default);
	public static final CommentContextType PATIENT_ALERT = new CommentContextType(-510, "Patient Alert", true, CommentContextType.CASEREFERRAL, null, Color.Default);
	public static final CommentContextType GENERAL = new CommentContextType(-523, "General", true, CommentContextType.CASEREFERRAL, null, Color.Default);
	public static final CommentContextType DISCHARGE = new CommentContextType(-312, "Discharge", true, null, null, Color.Default);
	public static final CommentContextType COMPLICATIONS = new CommentContextType(-463, "Complications", true, CommentContextType.DISCHARGE, null, Color.Default);
	public static final CommentContextType INVOICE = new CommentContextType(-313, "Invoice", true, null, null, Color.Default);
	public static final CommentContextType INVOICE_APPROVAL = new CommentContextType(-315, "Invoice Approval", true, null, null, Color.Default);
	public static final CommentContextType OUTLIER = new CommentContextType(-319, "Outlier", true, null, null, Color.Default);
	public static final CommentContextType INVOICE_NON_CARE = new CommentContextType(-504, "Invoice Non-Care", true, null, null, Color.Default);
	public static final CommentContextType CASEVIEW = new CommentContextType(-779, "Case View", true, null, null, Color.Default);
}
