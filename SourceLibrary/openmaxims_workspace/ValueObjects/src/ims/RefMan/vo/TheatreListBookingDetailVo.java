// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;


public class TheatreListBookingDetailVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public TheatreListBookingDetailVo()
	{
	}
	public TheatreListBookingDetailVo(ims.RefMan.vo.beans.TheatreListBookingDetailVoBean bean)
	{
		this.tcitime = bean.getTCITime();
		this.proceduretext = bean.getProcedureText();
		this.theatretext = bean.getTheatreText();
		this.los = bean.getLOS();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.TheatreListBookingDetailVoBean bean)
	{
		this.tcitime = bean.getTCITime();
		this.proceduretext = bean.getProcedureText();
		this.theatretext = bean.getTheatreText();
		this.los = bean.getLOS();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.TheatreListBookingDetailVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.TheatreListBookingDetailVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.TheatreListBookingDetailVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getTCITimeIsNotNull()
	{
		return this.tcitime != null;
	}
	public String getTCITime()
	{
		return this.tcitime;
	}
	public static int getTCITimeMaxLength()
	{
		return 255;
	}
	public void setTCITime(String value)
	{
		this.isValidated = false;
		this.tcitime = value;
	}
	public boolean getProcedureTextIsNotNull()
	{
		return this.proceduretext != null;
	}
	public String getProcedureText()
	{
		return this.proceduretext;
	}
	public static int getProcedureTextMaxLength()
	{
		return 255;
	}
	public void setProcedureText(String value)
	{
		this.isValidated = false;
		this.proceduretext = value;
	}
	public boolean getTheatreTextIsNotNull()
	{
		return this.theatretext != null;
	}
	public String getTheatreText()
	{
		return this.theatretext;
	}
	public static int getTheatreTextMaxLength()
	{
		return 255;
	}
	public void setTheatreText(String value)
	{
		this.isValidated = false;
		this.theatretext = value;
	}
	public boolean getLOSIsNotNull()
	{
		return this.los != null;
	}
	public Integer getLOS()
	{
		return this.los;
	}
	public void setLOS(Integer value)
	{
		this.isValidated = false;
		this.los = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof TheatreListBookingDetailVo))
			return false;
		TheatreListBookingDetailVo compareObj = (TheatreListBookingDetailVo)obj;
		if(this.getProcedureText() == null && compareObj.getProcedureText() != null)
			return false;
		if(this.getProcedureText() != null && compareObj.getProcedureText() == null)
			return false;
		if(this.getProcedureText() != null && compareObj.getProcedureText() != null)
			return this.getProcedureText().equals(compareObj.getProcedureText());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		TheatreListBookingDetailVo clone = new TheatreListBookingDetailVo();
		
		clone.tcitime = this.tcitime;
		clone.proceduretext = this.proceduretext;
		clone.theatretext = this.theatretext;
		clone.los = this.los;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(TheatreListBookingDetailVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A TheatreListBookingDetailVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		TheatreListBookingDetailVo compareObj = (TheatreListBookingDetailVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getProcedureText() == null && compareObj.getProcedureText() != null)
				return -1;
			if(this.getProcedureText() != null && compareObj.getProcedureText() == null)
				return 1;
			if(this.getProcedureText() != null && compareObj.getProcedureText() != null)
			{
				if(caseInsensitive)
					retVal = this.getProcedureText().toLowerCase().compareTo(compareObj.getProcedureText().toLowerCase());
				else
					retVal = this.getProcedureText().compareTo(compareObj.getProcedureText());
			}
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.tcitime != null)
			count++;
		if(this.proceduretext != null)
			count++;
		if(this.theatretext != null)
			count++;
		if(this.los != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 4;
	}
	protected String tcitime;
	protected String proceduretext;
	protected String theatretext;
	protected Integer los;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
