// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.FurtherManagement business object (ID: 1096100018).
 */
public class FurtherManagementDetailsVo extends ims.RefMan.vo.FurtherManagementRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public FurtherManagementDetailsVo()
	{
	}
	public FurtherManagementDetailsVo(Integer id, int version)
	{
		super(id, version);
	}
	public FurtherManagementDetailsVo(ims.RefMan.vo.beans.FurtherManagementDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.followuptype = bean.getFollowupType() == null ? null : ims.RefMan.vo.lookups.FollowupManagementType.buildLookup(bean.getFollowupType());
		this.furthermanagementbycats = bean.getFurtherManagementByCATS();
		this.nooftltsessions = bean.getNoOfTltSessions();
		this.tltnotes = bean.getTLTNotes();
		this.anotherconsultationappt = bean.getAnotherConsultationAppt() == null ? null : ims.RefMan.vo.lookups.AnotherConsultationAppt.buildLookup(bean.getAnotherConsultationAppt());
		this.procedure = bean.getProcedure() == null ? null : bean.getProcedure().buildVo();
		this.procedurenoofdays = bean.getProcedureNoOfDays();
		this.medicallyincomplete = bean.getMedicallyIncomplete() == null ? null : ims.RefMan.vo.lookups.MedicallyIncomplete.buildLookup(bean.getMedicallyIncomplete());
		this.incompletenoofdays = bean.getIncompleteNoOfDays();
		this.tlttype = bean.getTLTType() == null ? null : ims.RefMan.vo.lookups.TLTType.buildLookup(bean.getTLTType());
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.recordinginformation = bean.getRecordingInformation() == null ? null : bean.getRecordingInformation().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.FurtherManagementDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.followuptype = bean.getFollowupType() == null ? null : ims.RefMan.vo.lookups.FollowupManagementType.buildLookup(bean.getFollowupType());
		this.furthermanagementbycats = bean.getFurtherManagementByCATS();
		this.nooftltsessions = bean.getNoOfTltSessions();
		this.tltnotes = bean.getTLTNotes();
		this.anotherconsultationappt = bean.getAnotherConsultationAppt() == null ? null : ims.RefMan.vo.lookups.AnotherConsultationAppt.buildLookup(bean.getAnotherConsultationAppt());
		this.procedure = bean.getProcedure() == null ? null : bean.getProcedure().buildVo(map);
		this.procedurenoofdays = bean.getProcedureNoOfDays();
		this.medicallyincomplete = bean.getMedicallyIncomplete() == null ? null : ims.RefMan.vo.lookups.MedicallyIncomplete.buildLookup(bean.getMedicallyIncomplete());
		this.incompletenoofdays = bean.getIncompleteNoOfDays();
		this.tlttype = bean.getTLTType() == null ? null : ims.RefMan.vo.lookups.TLTType.buildLookup(bean.getTLTType());
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.recordinginformation = bean.getRecordingInformation() == null ? null : bean.getRecordingInformation().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.FurtherManagementDetailsVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.FurtherManagementDetailsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.FurtherManagementDetailsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("FOLLOWUPTYPE"))
			return getFollowupType();
		if(fieldName.equals("FURTHERMANAGEMENTBYCATS"))
			return getFurtherManagementByCATS();
		if(fieldName.equals("NOOFTLTSESSIONS"))
			return getNoOfTltSessions();
		if(fieldName.equals("TLTNOTES"))
			return getTLTNotes();
		if(fieldName.equals("ANOTHERCONSULTATIONAPPT"))
			return getAnotherConsultationAppt();
		if(fieldName.equals("PROCEDURE"))
			return getProcedure();
		if(fieldName.equals("PROCEDURENOOFDAYS"))
			return getProcedureNoOfDays();
		if(fieldName.equals("MEDICALLYINCOMPLETE"))
			return getMedicallyIncomplete();
		if(fieldName.equals("INCOMPLETENOOFDAYS"))
			return getIncompleteNoOfDays();
		if(fieldName.equals("TLTTYPE"))
			return getTLTType();
		if(fieldName.equals("AUTHORINGINFORMATION"))
			return getAuthoringInformation();
		if(fieldName.equals("RECORDINGINFORMATION"))
			return getRecordingInformation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getFollowupTypeIsNotNull()
	{
		return this.followuptype != null;
	}
	public ims.RefMan.vo.lookups.FollowupManagementType getFollowupType()
	{
		return this.followuptype;
	}
	public void setFollowupType(ims.RefMan.vo.lookups.FollowupManagementType value)
	{
		this.isValidated = false;
		this.followuptype = value;
	}
	public boolean getFurtherManagementByCATSIsNotNull()
	{
		return this.furthermanagementbycats != null;
	}
	public String getFurtherManagementByCATS()
	{
		return this.furthermanagementbycats;
	}
	public static int getFurtherManagementByCATSMaxLength()
	{
		return 3000;
	}
	public void setFurtherManagementByCATS(String value)
	{
		this.isValidated = false;
		this.furthermanagementbycats = value;
	}
	public boolean getNoOfTltSessionsIsNotNull()
	{
		return this.nooftltsessions != null;
	}
	public Integer getNoOfTltSessions()
	{
		return this.nooftltsessions;
	}
	public void setNoOfTltSessions(Integer value)
	{
		this.isValidated = false;
		this.nooftltsessions = value;
	}
	public boolean getTLTNotesIsNotNull()
	{
		return this.tltnotes != null;
	}
	public String getTLTNotes()
	{
		return this.tltnotes;
	}
	public static int getTLTNotesMaxLength()
	{
		return 3000;
	}
	public void setTLTNotes(String value)
	{
		this.isValidated = false;
		this.tltnotes = value;
	}
	public boolean getAnotherConsultationApptIsNotNull()
	{
		return this.anotherconsultationappt != null;
	}
	public ims.RefMan.vo.lookups.AnotherConsultationAppt getAnotherConsultationAppt()
	{
		return this.anotherconsultationappt;
	}
	public void setAnotherConsultationAppt(ims.RefMan.vo.lookups.AnotherConsultationAppt value)
	{
		this.isValidated = false;
		this.anotherconsultationappt = value;
	}
	public boolean getProcedureIsNotNull()
	{
		return this.procedure != null;
	}
	public ims.core.vo.ProcedureLiteVo getProcedure()
	{
		return this.procedure;
	}
	public void setProcedure(ims.core.vo.ProcedureLiteVo value)
	{
		this.isValidated = false;
		this.procedure = value;
	}
	public boolean getProcedureNoOfDaysIsNotNull()
	{
		return this.procedurenoofdays != null;
	}
	public Integer getProcedureNoOfDays()
	{
		return this.procedurenoofdays;
	}
	public void setProcedureNoOfDays(Integer value)
	{
		this.isValidated = false;
		this.procedurenoofdays = value;
	}
	public boolean getMedicallyIncompleteIsNotNull()
	{
		return this.medicallyincomplete != null;
	}
	public ims.RefMan.vo.lookups.MedicallyIncomplete getMedicallyIncomplete()
	{
		return this.medicallyincomplete;
	}
	public void setMedicallyIncomplete(ims.RefMan.vo.lookups.MedicallyIncomplete value)
	{
		this.isValidated = false;
		this.medicallyincomplete = value;
	}
	public boolean getIncompleteNoOfDaysIsNotNull()
	{
		return this.incompletenoofdays != null;
	}
	public Integer getIncompleteNoOfDays()
	{
		return this.incompletenoofdays;
	}
	public void setIncompleteNoOfDays(Integer value)
	{
		this.isValidated = false;
		this.incompletenoofdays = value;
	}
	public boolean getTLTTypeIsNotNull()
	{
		return this.tlttype != null;
	}
	public ims.RefMan.vo.lookups.TLTType getTLTType()
	{
		return this.tlttype;
	}
	public void setTLTType(ims.RefMan.vo.lookups.TLTType value)
	{
		this.isValidated = false;
		this.tlttype = value;
	}
	public boolean getAuthoringInformationIsNotNull()
	{
		return this.authoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInformation()
	{
		return this.authoringinformation;
	}
	public void setAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinformation = value;
	}
	public boolean getRecordingInformationIsNotNull()
	{
		return this.recordinginformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getRecordingInformation()
	{
		return this.recordinginformation;
	}
	public void setRecordingInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.recordinginformation = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.procedure != null)
		{
			if(!this.procedure.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.recordinginformation != null)
		{
			if(!this.recordinginformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.followuptype == null)
			listOfErrors.add("FollowupType is mandatory");
		if(this.furthermanagementbycats != null)
			if(this.furthermanagementbycats.length() > 3000)
				listOfErrors.add("The length of the field [furthermanagementbycats] in the value object [ims.RefMan.vo.FurtherManagementDetailsVo] is too big. It should be less or equal to 3000");
		if(this.tltnotes != null)
			if(this.tltnotes.length() > 3000)
				listOfErrors.add("The length of the field [tltnotes] in the value object [ims.RefMan.vo.FurtherManagementDetailsVo] is too big. It should be less or equal to 3000");
		if(this.procedure != null)
		{
			String[] listOfOtherErrors = this.procedure.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.recordinginformation == null)
			listOfErrors.add("RecordingInformation is mandatory");
		if(this.recordinginformation != null)
		{
			String[] listOfOtherErrors = this.recordinginformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		FurtherManagementDetailsVo clone = new FurtherManagementDetailsVo(this.id, this.version);
		
		if(this.followuptype == null)
			clone.followuptype = null;
		else
			clone.followuptype = (ims.RefMan.vo.lookups.FollowupManagementType)this.followuptype.clone();
		clone.furthermanagementbycats = this.furthermanagementbycats;
		clone.nooftltsessions = this.nooftltsessions;
		clone.tltnotes = this.tltnotes;
		if(this.anotherconsultationappt == null)
			clone.anotherconsultationappt = null;
		else
			clone.anotherconsultationappt = (ims.RefMan.vo.lookups.AnotherConsultationAppt)this.anotherconsultationappt.clone();
		if(this.procedure == null)
			clone.procedure = null;
		else
			clone.procedure = (ims.core.vo.ProcedureLiteVo)this.procedure.clone();
		clone.procedurenoofdays = this.procedurenoofdays;
		if(this.medicallyincomplete == null)
			clone.medicallyincomplete = null;
		else
			clone.medicallyincomplete = (ims.RefMan.vo.lookups.MedicallyIncomplete)this.medicallyincomplete.clone();
		clone.incompletenoofdays = this.incompletenoofdays;
		if(this.tlttype == null)
			clone.tlttype = null;
		else
			clone.tlttype = (ims.RefMan.vo.lookups.TLTType)this.tlttype.clone();
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		if(this.recordinginformation == null)
			clone.recordinginformation = null;
		else
			clone.recordinginformation = (ims.core.vo.AuthoringInformationVo)this.recordinginformation.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(FurtherManagementDetailsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A FurtherManagementDetailsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((FurtherManagementDetailsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((FurtherManagementDetailsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.followuptype != null)
			count++;
		if(this.furthermanagementbycats != null)
			count++;
		if(this.nooftltsessions != null)
			count++;
		if(this.tltnotes != null)
			count++;
		if(this.anotherconsultationappt != null)
			count++;
		if(this.procedure != null)
			count++;
		if(this.procedurenoofdays != null)
			count++;
		if(this.medicallyincomplete != null)
			count++;
		if(this.incompletenoofdays != null)
			count++;
		if(this.tlttype != null)
			count++;
		if(this.authoringinformation != null)
			count++;
		if(this.recordinginformation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 12;
	}
	protected ims.RefMan.vo.lookups.FollowupManagementType followuptype;
	protected String furthermanagementbycats;
	protected Integer nooftltsessions;
	protected String tltnotes;
	protected ims.RefMan.vo.lookups.AnotherConsultationAppt anotherconsultationappt;
	protected ims.core.vo.ProcedureLiteVo procedure;
	protected Integer procedurenoofdays;
	protected ims.RefMan.vo.lookups.MedicallyIncomplete medicallyincomplete;
	protected Integer incompletenoofdays;
	protected ims.RefMan.vo.lookups.TLTType tlttype;
	protected ims.core.vo.AuthoringInformationVo authoringinformation;
	protected ims.core.vo.AuthoringInformationVo recordinginformation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
