// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.ReferralCodingItem business object (ID: 1096100038).
 */
public class ReferralCodingItemVo extends ims.RefMan.vo.ReferralCodingItemRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ReferralCodingItemVo()
	{
	}
	public ReferralCodingItemVo(Integer id, int version)
	{
		super(id, version);
	}
	public ReferralCodingItemVo(ims.RefMan.vo.beans.ReferralCodingItemVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patientprocedure = bean.getPatientProcedure() == null ? null : bean.getPatientProcedure().buildVo();
		this.patientdiagnosis = bean.getPatientDiagnosis() == null ? null : bean.getPatientDiagnosis().buildVo();
		this.opcs4 = bean.getOPCS4();
		this.icd10 = bean.getICD10();
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.ReferralCodingItemVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patientprocedure = bean.getPatientProcedure() == null ? null : bean.getPatientProcedure().buildVo(map);
		this.patientdiagnosis = bean.getPatientDiagnosis() == null ? null : bean.getPatientDiagnosis().buildVo(map);
		this.opcs4 = bean.getOPCS4();
		this.icd10 = bean.getICD10();
		this.proclaterality = bean.getProcLaterality() == null ? null : ims.core.vo.lookups.LateralityLRB.buildLookup(bean.getProcLaterality());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.ReferralCodingItemVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.ReferralCodingItemVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.ReferralCodingItemVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENTPROCEDURE"))
			return getPatientProcedure();
		if(fieldName.equals("PATIENTDIAGNOSIS"))
			return getPatientDiagnosis();
		if(fieldName.equals("OPCS4"))
			return getOPCS4();
		if(fieldName.equals("ICD10"))
			return getICD10();
		if(fieldName.equals("PROCLATERALITY"))
			return getProcLaterality();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientProcedureIsNotNull()
	{
		return this.patientprocedure != null;
	}
	public ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo getPatientProcedure()
	{
		return this.patientprocedure;
	}
	public void setPatientProcedure(ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo value)
	{
		this.isValidated = false;
		this.patientprocedure = value;
	}
	public boolean getPatientDiagnosisIsNotNull()
	{
		return this.patientdiagnosis != null;
	}
	public ims.core.vo.PatientDiagnosisShortVo getPatientDiagnosis()
	{
		return this.patientdiagnosis;
	}
	public void setPatientDiagnosis(ims.core.vo.PatientDiagnosisShortVo value)
	{
		this.isValidated = false;
		this.patientdiagnosis = value;
	}
	public boolean getOPCS4IsNotNull()
	{
		return this.opcs4 != null;
	}
	public String getOPCS4()
	{
		return this.opcs4;
	}
	public static int getOPCS4MaxLength()
	{
		return 25;
	}
	public void setOPCS4(String value)
	{
		this.isValidated = false;
		this.opcs4 = value;
	}
	public boolean getICD10IsNotNull()
	{
		return this.icd10 != null;
	}
	public String getICD10()
	{
		return this.icd10;
	}
	public static int getICD10MaxLength()
	{
		return 25;
	}
	public void setICD10(String value)
	{
		this.isValidated = false;
		this.icd10 = value;
	}
	public boolean getProcLateralityIsNotNull()
	{
		return this.proclaterality != null;
	}
	public ims.core.vo.lookups.LateralityLRB getProcLaterality()
	{
		return this.proclaterality;
	}
	public void setProcLaterality(ims.core.vo.lookups.LateralityLRB value)
	{
		this.isValidated = false;
		this.proclaterality = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.opcs4 != null)
			if(this.opcs4.length() > 25)
				listOfErrors.add("The length of the field [opcs4] in the value object [ims.RefMan.vo.ReferralCodingItemVo] is too big. It should be less or equal to 25");
		if(this.icd10 != null)
			if(this.icd10.length() > 25)
				listOfErrors.add("The length of the field [icd10] in the value object [ims.RefMan.vo.ReferralCodingItemVo] is too big. It should be less or equal to 25");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ReferralCodingItemVo clone = new ReferralCodingItemVo(this.id, this.version);
		
		if(this.patientprocedure == null)
			clone.patientprocedure = null;
		else
			clone.patientprocedure = (ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo)this.patientprocedure.clone();
		if(this.patientdiagnosis == null)
			clone.patientdiagnosis = null;
		else
			clone.patientdiagnosis = (ims.core.vo.PatientDiagnosisShortVo)this.patientdiagnosis.clone();
		clone.opcs4 = this.opcs4;
		clone.icd10 = this.icd10;
		if(this.proclaterality == null)
			clone.proclaterality = null;
		else
			clone.proclaterality = (ims.core.vo.lookups.LateralityLRB)this.proclaterality.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ReferralCodingItemVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ReferralCodingItemVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ReferralCodingItemVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ReferralCodingItemVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patientprocedure != null)
			count++;
		if(this.patientdiagnosis != null)
			count++;
		if(this.opcs4 != null)
			count++;
		if(this.icd10 != null)
			count++;
		if(this.proclaterality != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo patientprocedure;
	protected ims.core.vo.PatientDiagnosisShortVo patientdiagnosis;
	protected String opcs4;
	protected String icd10;
	protected ims.core.vo.lookups.LateralityLRB proclaterality;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
