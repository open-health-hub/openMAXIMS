// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to core.configuration.ElectiveListConfiguration business object (ID: 1028100072).
 */
public class WaitingListConfigVo extends ims.core.configuration.vo.ElectiveListConfigurationRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public WaitingListConfigVo()
	{
	}
	public WaitingListConfigVo(Integer id, int version)
	{
		super(id, version);
	}
	public WaitingListConfigVo(ims.RefMan.vo.beans.WaitingListConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.waitinglistname = bean.getWaitingListName();
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.enddate = bean.getEndDate() == null ? null : bean.getEndDate().buildDate();
		this.service = bean.getService() == null ? null : new ims.core.clinical.vo.ServiceRefVo(new Integer(bean.getService().getId()), bean.getService().getVersion());
		this.waitinglistcode = bean.getWaitingListCode();
		this.isactive = bean.getIsActive();
		if(bean.getHCPs() != null)
		{
			this.hcps = new ims.core.configuration.vo.ElectiveListConsultationConfigurationRefVoCollection();
			for(int hcps_i = 0; hcps_i < bean.getHCPs().length; hcps_i++)
			{
				this.hcps.add(new ims.core.configuration.vo.ElectiveListConsultationConfigurationRefVo(new Integer(bean.getHCPs()[hcps_i].getId()), bean.getHCPs()[hcps_i].getVersion()));
			}
		}
		if(bean.getListLocations() != null)
		{
			this.listlocations = new ims.core.configuration.vo.ElectiveListHospitalConfigurationRefVoCollection();
			for(int listlocations_i = 0; listlocations_i < bean.getListLocations().length; listlocations_i++)
			{
				this.listlocations.add(new ims.core.configuration.vo.ElectiveListHospitalConfigurationRefVo(new Integer(bean.getListLocations()[listlocations_i].getId()), bean.getListLocations()[listlocations_i].getVersion()));
			}
		}
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.WaitingListConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.waitinglistname = bean.getWaitingListName();
		this.startdate = bean.getStartDate() == null ? null : bean.getStartDate().buildDate();
		this.enddate = bean.getEndDate() == null ? null : bean.getEndDate().buildDate();
		this.service = bean.getService() == null ? null : new ims.core.clinical.vo.ServiceRefVo(new Integer(bean.getService().getId()), bean.getService().getVersion());
		this.waitinglistcode = bean.getWaitingListCode();
		this.isactive = bean.getIsActive();
		if(bean.getHCPs() != null)
		{
			this.hcps = new ims.core.configuration.vo.ElectiveListConsultationConfigurationRefVoCollection();
			for(int hcps_i = 0; hcps_i < bean.getHCPs().length; hcps_i++)
			{
				this.hcps.add(new ims.core.configuration.vo.ElectiveListConsultationConfigurationRefVo(new Integer(bean.getHCPs()[hcps_i].getId()), bean.getHCPs()[hcps_i].getVersion()));
			}
		}
		if(bean.getListLocations() != null)
		{
			this.listlocations = new ims.core.configuration.vo.ElectiveListHospitalConfigurationRefVoCollection();
			for(int listlocations_i = 0; listlocations_i < bean.getListLocations().length; listlocations_i++)
			{
				this.listlocations.add(new ims.core.configuration.vo.ElectiveListHospitalConfigurationRefVo(new Integer(bean.getListLocations()[listlocations_i].getId()), bean.getListLocations()[listlocations_i].getVersion()));
			}
		}
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.WaitingListConfigVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.WaitingListConfigVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.WaitingListConfigVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("WAITINGLISTNAME"))
			return getWaitingListName();
		if(fieldName.equals("STARTDATE"))
			return getStartDate();
		if(fieldName.equals("ENDDATE"))
			return getEndDate();
		if(fieldName.equals("SERVICE"))
			return getService();
		if(fieldName.equals("WAITINGLISTCODE"))
			return getWaitingListCode();
		if(fieldName.equals("ISACTIVE"))
			return getIsActive();
		if(fieldName.equals("HCPS"))
			return getHCPs();
		if(fieldName.equals("LISTLOCATIONS"))
			return getListLocations();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getWaitingListNameIsNotNull()
	{
		return this.waitinglistname != null;
	}
	public String getWaitingListName()
	{
		return this.waitinglistname;
	}
	public static int getWaitingListNameMaxLength()
	{
		return 150;
	}
	public void setWaitingListName(String value)
	{
		this.isValidated = false;
		this.waitinglistname = value;
	}
	public boolean getStartDateIsNotNull()
	{
		return this.startdate != null;
	}
	public ims.framework.utils.Date getStartDate()
	{
		return this.startdate;
	}
	public void setStartDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.startdate = value;
	}
	public boolean getEndDateIsNotNull()
	{
		return this.enddate != null;
	}
	public ims.framework.utils.Date getEndDate()
	{
		return this.enddate;
	}
	public void setEndDate(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.enddate = value;
	}
	public boolean getServiceIsNotNull()
	{
		return this.service != null;
	}
	public ims.core.clinical.vo.ServiceRefVo getService()
	{
		return this.service;
	}
	public void setService(ims.core.clinical.vo.ServiceRefVo value)
	{
		this.isValidated = false;
		this.service = value;
	}
	public boolean getWaitingListCodeIsNotNull()
	{
		return this.waitinglistcode != null;
	}
	public String getWaitingListCode()
	{
		return this.waitinglistcode;
	}
	public static int getWaitingListCodeMaxLength()
	{
		return 20;
	}
	public void setWaitingListCode(String value)
	{
		this.isValidated = false;
		this.waitinglistcode = value;
	}
	public boolean getIsActiveIsNotNull()
	{
		return this.isactive != null;
	}
	public Boolean getIsActive()
	{
		return this.isactive;
	}
	public void setIsActive(Boolean value)
	{
		this.isValidated = false;
		this.isactive = value;
	}
	public boolean getHCPsIsNotNull()
	{
		return this.hcps != null;
	}
	public ims.core.configuration.vo.ElectiveListConsultationConfigurationRefVoCollection getHCPs()
	{
		return this.hcps;
	}
	public void setHCPs(ims.core.configuration.vo.ElectiveListConsultationConfigurationRefVoCollection value)
	{
		this.isValidated = false;
		this.hcps = value;
	}
	public boolean getListLocationsIsNotNull()
	{
		return this.listlocations != null;
	}
	public ims.core.configuration.vo.ElectiveListHospitalConfigurationRefVoCollection getListLocations()
	{
		return this.listlocations;
	}
	public void setListLocations(ims.core.configuration.vo.ElectiveListHospitalConfigurationRefVoCollection value)
	{
		this.isValidated = false;
		this.listlocations = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.waitinglistname == null || this.waitinglistname.length() == 0)
			listOfErrors.add("WaitingListName is mandatory");
		else if(this.waitinglistname.length() > 150)
			listOfErrors.add("The length of the field [waitinglistname] in the value object [ims.RefMan.vo.WaitingListConfigVo] is too big. It should be less or equal to 150");
		if(this.startdate == null)
			listOfErrors.add("StartDate is mandatory");
		if(this.service == null)
			listOfErrors.add("Service is mandatory");
		if(this.waitinglistcode != null)
			if(this.waitinglistcode.length() > 20)
				listOfErrors.add("The length of the field [waitinglistcode] in the value object [ims.RefMan.vo.WaitingListConfigVo] is too big. It should be less or equal to 20");
		if(this.isactive == null)
			listOfErrors.add("IsActive is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		WaitingListConfigVo clone = new WaitingListConfigVo(this.id, this.version);
		
		clone.waitinglistname = this.waitinglistname;
		if(this.startdate == null)
			clone.startdate = null;
		else
			clone.startdate = (ims.framework.utils.Date)this.startdate.clone();
		if(this.enddate == null)
			clone.enddate = null;
		else
			clone.enddate = (ims.framework.utils.Date)this.enddate.clone();
		clone.service = this.service;
		clone.waitinglistcode = this.waitinglistcode;
		clone.isactive = this.isactive;
		clone.hcps = this.hcps;
		clone.listlocations = this.listlocations;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(WaitingListConfigVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A WaitingListConfigVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((WaitingListConfigVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((WaitingListConfigVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.waitinglistname != null)
			count++;
		if(this.startdate != null)
			count++;
		if(this.enddate != null)
			count++;
		if(this.service != null)
			count++;
		if(this.waitinglistcode != null)
			count++;
		if(this.isactive != null)
			count++;
		if(this.hcps != null)
			count++;
		if(this.listlocations != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 8;
	}
	protected String waitinglistname;
	protected ims.framework.utils.Date startdate;
	protected ims.framework.utils.Date enddate;
	protected ims.core.clinical.vo.ServiceRefVo service;
	protected String waitinglistcode;
	protected Boolean isactive;
	protected ims.core.configuration.vo.ElectiveListConsultationConfigurationRefVoCollection hcps;
	protected ims.core.configuration.vo.ElectiveListHospitalConfigurationRefVoCollection listlocations;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
