// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.TrackStatusConfig business object (ID: 1096100052).
 */
public class TrackingStatusConfigVo extends ims.RefMan.vo.TrackStatusConfigRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public TrackingStatusConfigVo()
	{
	}
	public TrackingStatusConfigVo(Integer id, int version)
	{
		super(id, version);
	}
	public TrackingStatusConfigVo(ims.RefMan.vo.beans.TrackingStatusConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.timeintopacu = bean.getTimeintoPACU() == null ? null : bean.getTimeintoPACU().buildColor();
		this.timestartanaesthetist = bean.getTimeStartAnaesthetist() == null ? null : bean.getTimeStartAnaesthetist().buildColor();
		this.theatrein = bean.getTheatreIn() == null ? null : bean.getTheatreIn().buildColor();
		this.surgerystart = bean.getSurgeryStart() == null ? null : bean.getSurgeryStart().buildColor();
		this.surgeryfinish = bean.getSurgeryFinish() == null ? null : bean.getSurgeryFinish().buildColor();
		this.timeintorecovery = bean.getTimeIntoRecovery() == null ? null : bean.getTimeIntoRecovery().buildColor();
		this.timeoutofrecovery = bean.getTimeOutOfRecovery() == null ? null : bean.getTimeOutOfRecovery().buildColor();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.TrackingStatusConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.timeintopacu = bean.getTimeintoPACU() == null ? null : bean.getTimeintoPACU().buildColor();
		this.timestartanaesthetist = bean.getTimeStartAnaesthetist() == null ? null : bean.getTimeStartAnaesthetist().buildColor();
		this.theatrein = bean.getTheatreIn() == null ? null : bean.getTheatreIn().buildColor();
		this.surgerystart = bean.getSurgeryStart() == null ? null : bean.getSurgeryStart().buildColor();
		this.surgeryfinish = bean.getSurgeryFinish() == null ? null : bean.getSurgeryFinish().buildColor();
		this.timeintorecovery = bean.getTimeIntoRecovery() == null ? null : bean.getTimeIntoRecovery().buildColor();
		this.timeoutofrecovery = bean.getTimeOutOfRecovery() == null ? null : bean.getTimeOutOfRecovery().buildColor();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.TrackingStatusConfigVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.TrackingStatusConfigVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.TrackingStatusConfigVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("TIMEINTOPACU"))
			return getTimeintoPACU();
		if(fieldName.equals("TIMESTARTANAESTHETIST"))
			return getTimeStartAnaesthetist();
		if(fieldName.equals("THEATREIN"))
			return getTheatreIn();
		if(fieldName.equals("SURGERYSTART"))
			return getSurgeryStart();
		if(fieldName.equals("SURGERYFINISH"))
			return getSurgeryFinish();
		if(fieldName.equals("TIMEINTORECOVERY"))
			return getTimeIntoRecovery();
		if(fieldName.equals("TIMEOUTOFRECOVERY"))
			return getTimeOutOfRecovery();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getTimeintoPACUIsNotNull()
	{
		return this.timeintopacu != null;
	}
	public ims.framework.utils.Color getTimeintoPACU()
	{
		return this.timeintopacu;
	}
	public void setTimeintoPACU(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.timeintopacu = value;
	}
	public boolean getTimeStartAnaesthetistIsNotNull()
	{
		return this.timestartanaesthetist != null;
	}
	public ims.framework.utils.Color getTimeStartAnaesthetist()
	{
		return this.timestartanaesthetist;
	}
	public void setTimeStartAnaesthetist(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.timestartanaesthetist = value;
	}
	public boolean getTheatreInIsNotNull()
	{
		return this.theatrein != null;
	}
	public ims.framework.utils.Color getTheatreIn()
	{
		return this.theatrein;
	}
	public void setTheatreIn(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.theatrein = value;
	}
	public boolean getSurgeryStartIsNotNull()
	{
		return this.surgerystart != null;
	}
	public ims.framework.utils.Color getSurgeryStart()
	{
		return this.surgerystart;
	}
	public void setSurgeryStart(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.surgerystart = value;
	}
	public boolean getSurgeryFinishIsNotNull()
	{
		return this.surgeryfinish != null;
	}
	public ims.framework.utils.Color getSurgeryFinish()
	{
		return this.surgeryfinish;
	}
	public void setSurgeryFinish(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.surgeryfinish = value;
	}
	public boolean getTimeIntoRecoveryIsNotNull()
	{
		return this.timeintorecovery != null;
	}
	public ims.framework.utils.Color getTimeIntoRecovery()
	{
		return this.timeintorecovery;
	}
	public void setTimeIntoRecovery(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.timeintorecovery = value;
	}
	public boolean getTimeOutOfRecoveryIsNotNull()
	{
		return this.timeoutofrecovery != null;
	}
	public ims.framework.utils.Color getTimeOutOfRecovery()
	{
		return this.timeoutofrecovery;
	}
	public void setTimeOutOfRecovery(ims.framework.utils.Color value)
	{
		this.isValidated = false;
		this.timeoutofrecovery = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.timeintopacu == null)
			listOfErrors.add("TimeintoPACU is mandatory");
		if(this.timestartanaesthetist == null)
			listOfErrors.add("TimeStartAnaesthetist is mandatory");
		if(this.theatrein == null)
			listOfErrors.add("TheatreIn is mandatory");
		if(this.surgerystart == null)
			listOfErrors.add("SurgeryStart is mandatory");
		if(this.surgeryfinish == null)
			listOfErrors.add("SurgeryFinish is mandatory");
		if(this.timeintorecovery == null)
			listOfErrors.add("TimeIntoRecovery is mandatory");
		if(this.timeoutofrecovery == null)
			listOfErrors.add("TimeOutOfRecovery is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		TrackingStatusConfigVo clone = new TrackingStatusConfigVo(this.id, this.version);
		
		if(this.timeintopacu == null)
			clone.timeintopacu = null;
		else
			clone.timeintopacu = (ims.framework.utils.Color)this.timeintopacu.clone();
		if(this.timestartanaesthetist == null)
			clone.timestartanaesthetist = null;
		else
			clone.timestartanaesthetist = (ims.framework.utils.Color)this.timestartanaesthetist.clone();
		if(this.theatrein == null)
			clone.theatrein = null;
		else
			clone.theatrein = (ims.framework.utils.Color)this.theatrein.clone();
		if(this.surgerystart == null)
			clone.surgerystart = null;
		else
			clone.surgerystart = (ims.framework.utils.Color)this.surgerystart.clone();
		if(this.surgeryfinish == null)
			clone.surgeryfinish = null;
		else
			clone.surgeryfinish = (ims.framework.utils.Color)this.surgeryfinish.clone();
		if(this.timeintorecovery == null)
			clone.timeintorecovery = null;
		else
			clone.timeintorecovery = (ims.framework.utils.Color)this.timeintorecovery.clone();
		if(this.timeoutofrecovery == null)
			clone.timeoutofrecovery = null;
		else
			clone.timeoutofrecovery = (ims.framework.utils.Color)this.timeoutofrecovery.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(TrackingStatusConfigVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A TrackingStatusConfigVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((TrackingStatusConfigVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((TrackingStatusConfigVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.timeintopacu != null)
			count++;
		if(this.timestartanaesthetist != null)
			count++;
		if(this.theatrein != null)
			count++;
		if(this.surgerystart != null)
			count++;
		if(this.surgeryfinish != null)
			count++;
		if(this.timeintorecovery != null)
			count++;
		if(this.timeoutofrecovery != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected ims.framework.utils.Color timeintopacu;
	protected ims.framework.utils.Color timestartanaesthetist;
	protected ims.framework.utils.Color theatrein;
	protected ims.framework.utils.Color surgerystart;
	protected ims.framework.utils.Color surgeryfinish;
	protected ims.framework.utils.Color timeintorecovery;
	protected ims.framework.utils.Color timeoutofrecovery;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
