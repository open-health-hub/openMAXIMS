// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.vo;

/**
 * Linked to RefMan.ElectiveListStatus business object (ID: 1096100066).
 */
public class ElectiveListStatusVo extends ims.RefMan.vo.ElectiveListStatusRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ElectiveListStatusVo()
	{
	}
	public ElectiveListStatusVo(Integer id, int version)
	{
		super(id, version);
	}
	public ElectiveListStatusVo(ims.RefMan.vo.beans.ElectiveListStatusVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.authoringuser = bean.getAuthoringUser() == null ? null : bean.getAuthoringUser().buildVo();
		this.statusdatetime = bean.getStatusDateTime() == null ? null : bean.getStatusDateTime().buildDateTime();
		this.statuscomment = bean.getStatusComment();
		this.electiveliststatus = bean.getElectiveListStatus() == null ? null : ims.core.vo.lookups.WaitingListStatus.buildLookup(bean.getElectiveListStatus());
		this.removalreason = bean.getRemovalReason() == null ? null : ims.RefMan.vo.lookups.ElectiveListStatusReason.buildLookup(bean.getRemovalReason());
		this.removalotherreason = bean.getRemovalOtherReason() == null ? null : ims.RefMan.vo.lookups.RemovalOtherReason.buildLookup(bean.getRemovalOtherReason());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.RefMan.vo.beans.ElectiveListStatusVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.authoringuser = bean.getAuthoringUser() == null ? null : bean.getAuthoringUser().buildVo(map);
		this.statusdatetime = bean.getStatusDateTime() == null ? null : bean.getStatusDateTime().buildDateTime();
		this.statuscomment = bean.getStatusComment();
		this.electiveliststatus = bean.getElectiveListStatus() == null ? null : ims.core.vo.lookups.WaitingListStatus.buildLookup(bean.getElectiveListStatus());
		this.removalreason = bean.getRemovalReason() == null ? null : ims.RefMan.vo.lookups.ElectiveListStatusReason.buildLookup(bean.getRemovalReason());
		this.removalotherreason = bean.getRemovalOtherReason() == null ? null : ims.RefMan.vo.lookups.RemovalOtherReason.buildLookup(bean.getRemovalOtherReason());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.RefMan.vo.beans.ElectiveListStatusVoBean bean = null;
		if(map != null)
			bean = (ims.RefMan.vo.beans.ElectiveListStatusVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.RefMan.vo.beans.ElectiveListStatusVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("AUTHORINGUSER"))
			return getAuthoringUser();
		if(fieldName.equals("STATUSDATETIME"))
			return getStatusDateTime();
		if(fieldName.equals("STATUSCOMMENT"))
			return getStatusComment();
		if(fieldName.equals("ELECTIVELISTSTATUS"))
			return getElectiveListStatus();
		if(fieldName.equals("REMOVALREASON"))
			return getRemovalReason();
		if(fieldName.equals("REMOVALOTHERREASON"))
			return getRemovalOtherReason();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAuthoringUserIsNotNull()
	{
		return this.authoringuser != null;
	}
	public ims.core.vo.MemberOfStaffLiteVo getAuthoringUser()
	{
		return this.authoringuser;
	}
	public void setAuthoringUser(ims.core.vo.MemberOfStaffLiteVo value)
	{
		this.isValidated = false;
		this.authoringuser = value;
	}
	public boolean getStatusDateTimeIsNotNull()
	{
		return this.statusdatetime != null;
	}
	public ims.framework.utils.DateTime getStatusDateTime()
	{
		return this.statusdatetime;
	}
	public void setStatusDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.statusdatetime = value;
	}
	public boolean getStatusCommentIsNotNull()
	{
		return this.statuscomment != null;
	}
	public String getStatusComment()
	{
		return this.statuscomment;
	}
	public static int getStatusCommentMaxLength()
	{
		return 1500;
	}
	public void setStatusComment(String value)
	{
		this.isValidated = false;
		this.statuscomment = value;
	}
	public boolean getElectiveListStatusIsNotNull()
	{
		return this.electiveliststatus != null;
	}
	public ims.core.vo.lookups.WaitingListStatus getElectiveListStatus()
	{
		return this.electiveliststatus;
	}
	public void setElectiveListStatus(ims.core.vo.lookups.WaitingListStatus value)
	{
		this.isValidated = false;
		this.electiveliststatus = value;
	}
	public boolean getRemovalReasonIsNotNull()
	{
		return this.removalreason != null;
	}
	public ims.RefMan.vo.lookups.ElectiveListStatusReason getRemovalReason()
	{
		return this.removalreason;
	}
	public void setRemovalReason(ims.RefMan.vo.lookups.ElectiveListStatusReason value)
	{
		this.isValidated = false;
		this.removalreason = value;
	}
	public boolean getRemovalOtherReasonIsNotNull()
	{
		return this.removalotherreason != null;
	}
	public ims.RefMan.vo.lookups.RemovalOtherReason getRemovalOtherReason()
	{
		return this.removalotherreason;
	}
	public void setRemovalOtherReason(ims.RefMan.vo.lookups.RemovalOtherReason value)
	{
		this.isValidated = false;
		this.removalotherreason = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.statusdatetime == null)
			listOfErrors.add("StatusDateTime is mandatory");
		if(this.statuscomment != null)
			if(this.statuscomment.length() > 1500)
				listOfErrors.add("The length of the field [statuscomment] in the value object [ims.RefMan.vo.ElectiveListStatusVo] is too big. It should be less or equal to 1500");
		if(this.electiveliststatus == null)
			listOfErrors.add("ElectiveListStatus is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ElectiveListStatusVo clone = new ElectiveListStatusVo(this.id, this.version);
		
		if(this.authoringuser == null)
			clone.authoringuser = null;
		else
			clone.authoringuser = (ims.core.vo.MemberOfStaffLiteVo)this.authoringuser.clone();
		if(this.statusdatetime == null)
			clone.statusdatetime = null;
		else
			clone.statusdatetime = (ims.framework.utils.DateTime)this.statusdatetime.clone();
		clone.statuscomment = this.statuscomment;
		if(this.electiveliststatus == null)
			clone.electiveliststatus = null;
		else
			clone.electiveliststatus = (ims.core.vo.lookups.WaitingListStatus)this.electiveliststatus.clone();
		if(this.removalreason == null)
			clone.removalreason = null;
		else
			clone.removalreason = (ims.RefMan.vo.lookups.ElectiveListStatusReason)this.removalreason.clone();
		if(this.removalotherreason == null)
			clone.removalotherreason = null;
		else
			clone.removalotherreason = (ims.RefMan.vo.lookups.RemovalOtherReason)this.removalotherreason.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ElectiveListStatusVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ElectiveListStatusVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ElectiveListStatusVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ElectiveListStatusVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.authoringuser != null)
			count++;
		if(this.statusdatetime != null)
			count++;
		if(this.statuscomment != null)
			count++;
		if(this.electiveliststatus != null)
			count++;
		if(this.removalreason != null)
			count++;
		if(this.removalotherreason != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.core.vo.MemberOfStaffLiteVo authoringuser;
	protected ims.framework.utils.DateTime statusdatetime;
	protected String statuscomment;
	protected ims.core.vo.lookups.WaitingListStatus electiveliststatus;
	protected ims.RefMan.vo.lookups.ElectiveListStatusReason removalreason;
	protected ims.RefMan.vo.lookups.RemovalOtherReason removalotherreason;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
