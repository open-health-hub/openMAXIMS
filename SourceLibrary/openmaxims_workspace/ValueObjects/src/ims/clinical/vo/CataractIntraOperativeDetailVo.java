//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to core.clinical.CataractIntraOperative business object (ID: 1072100087).
 */
public class CataractIntraOperativeDetailVo extends ims.core.clinical.vo.CataractIntraOperativeRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public CataractIntraOperativeDetailVo()
	{
	}
	public CataractIntraOperativeDetailVo(Integer id, int version)
	{
		super(id, version);
	}
	public CataractIntraOperativeDetailVo(ims.clinical.vo.beans.CataractIntraOperativeDetailVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.medications = ims.core.vo.PatientMedicationLiteVoCollection.buildFromBeanCollection(bean.getMedications());
		this.skinpreperationused = ims.clinical.vo.SkinPreperationVoCollection.buildFromBeanCollection(bean.getSkinPreperationUsed());
		this.localanaestheticused = ims.clinical.vo.LocalAnaestheticAdministeredVoCollection.buildFromBeanCollection(bean.getLocalAnaestheticUsed());
		this.dressings = ims.clinical.vo.lookups.CataractDressingsCollection.buildFromBeanCollection(bean.getDressings());
		this.swabneedlecount = bean.getSwabNeedleCount();
		this.wasswabneedlecountcorrect = bean.getWasSwabNeedleCountCorrect() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getWasSwabNeedleCountCorrect());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.CataractIntraOperativeDetailVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.medications = ims.core.vo.PatientMedicationLiteVoCollection.buildFromBeanCollection(bean.getMedications());
		this.skinpreperationused = ims.clinical.vo.SkinPreperationVoCollection.buildFromBeanCollection(bean.getSkinPreperationUsed());
		this.localanaestheticused = ims.clinical.vo.LocalAnaestheticAdministeredVoCollection.buildFromBeanCollection(bean.getLocalAnaestheticUsed());
		this.dressings = ims.clinical.vo.lookups.CataractDressingsCollection.buildFromBeanCollection(bean.getDressings());
		this.swabneedlecount = bean.getSwabNeedleCount();
		this.wasswabneedlecountcorrect = bean.getWasSwabNeedleCountCorrect() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getWasSwabNeedleCountCorrect());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.CataractIntraOperativeDetailVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.CataractIntraOperativeDetailVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.CataractIntraOperativeDetailVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("MEDICATIONS"))
			return getMedications();
		if(fieldName.equals("SKINPREPERATIONUSED"))
			return getSkinPreperationUsed();
		if(fieldName.equals("LOCALANAESTHETICUSED"))
			return getLocalAnaestheticUsed();
		if(fieldName.equals("DRESSINGS"))
			return getDressings();
		if(fieldName.equals("SWABNEEDLECOUNT"))
			return getSwabNeedleCount();
		if(fieldName.equals("WASSWABNEEDLECOUNTCORRECT"))
			return getWasSwabNeedleCountCorrect();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getMedicationsIsNotNull()
	{
		return this.medications != null;
	}
	public ims.core.vo.PatientMedicationLiteVoCollection getMedications()
	{
		return this.medications;
	}
	public void setMedications(ims.core.vo.PatientMedicationLiteVoCollection value)
	{
		this.isValidated = false;
		this.medications = value;
	}
	public boolean getSkinPreperationUsedIsNotNull()
	{
		return this.skinpreperationused != null;
	}
	public ims.clinical.vo.SkinPreperationVoCollection getSkinPreperationUsed()
	{
		return this.skinpreperationused;
	}
	public void setSkinPreperationUsed(ims.clinical.vo.SkinPreperationVoCollection value)
	{
		this.isValidated = false;
		this.skinpreperationused = value;
	}
	public boolean getLocalAnaestheticUsedIsNotNull()
	{
		return this.localanaestheticused != null;
	}
	public ims.clinical.vo.LocalAnaestheticAdministeredVoCollection getLocalAnaestheticUsed()
	{
		return this.localanaestheticused;
	}
	public void setLocalAnaestheticUsed(ims.clinical.vo.LocalAnaestheticAdministeredVoCollection value)
	{
		this.isValidated = false;
		this.localanaestheticused = value;
	}
	public boolean getDressingsIsNotNull()
	{
		return this.dressings != null;
	}
	public ims.clinical.vo.lookups.CataractDressingsCollection getDressings()
	{
		return this.dressings;
	}
	public void setDressings(ims.clinical.vo.lookups.CataractDressingsCollection value)
	{
		this.isValidated = false;
		this.dressings = value;
	}
	public boolean getSwabNeedleCountIsNotNull()
	{
		return this.swabneedlecount != null;
	}
	public Integer getSwabNeedleCount()
	{
		return this.swabneedlecount;
	}
	public void setSwabNeedleCount(Integer value)
	{
		this.isValidated = false;
		this.swabneedlecount = value;
	}
	public boolean getWasSwabNeedleCountCorrectIsNotNull()
	{
		return this.wasswabneedlecountcorrect != null;
	}
	public ims.core.vo.lookups.YesNo getWasSwabNeedleCountCorrect()
	{
		return this.wasswabneedlecountcorrect;
	}
	public void setWasSwabNeedleCountCorrect(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.wasswabneedlecountcorrect = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.medications != null)
		{
			if(!this.medications.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.skinpreperationused != null)
		{
			if(!this.skinpreperationused.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.localanaestheticused != null)
		{
			if(!this.localanaestheticused.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.medications != null)
		{
			String[] listOfOtherErrors = this.medications.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.skinpreperationused != null)
		{
			String[] listOfOtherErrors = this.skinpreperationused.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.localanaestheticused != null)
		{
			String[] listOfOtherErrors = this.localanaestheticused.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		CataractIntraOperativeDetailVo clone = new CataractIntraOperativeDetailVo(this.id, this.version);
		
		if(this.medications == null)
			clone.medications = null;
		else
			clone.medications = (ims.core.vo.PatientMedicationLiteVoCollection)this.medications.clone();
		if(this.skinpreperationused == null)
			clone.skinpreperationused = null;
		else
			clone.skinpreperationused = (ims.clinical.vo.SkinPreperationVoCollection)this.skinpreperationused.clone();
		if(this.localanaestheticused == null)
			clone.localanaestheticused = null;
		else
			clone.localanaestheticused = (ims.clinical.vo.LocalAnaestheticAdministeredVoCollection)this.localanaestheticused.clone();
		if(this.dressings == null)
			clone.dressings = null;
		else
			clone.dressings = (ims.clinical.vo.lookups.CataractDressingsCollection)this.dressings.clone();
		clone.swabneedlecount = this.swabneedlecount;
		if(this.wasswabneedlecountcorrect == null)
			clone.wasswabneedlecountcorrect = null;
		else
			clone.wasswabneedlecountcorrect = (ims.core.vo.lookups.YesNo)this.wasswabneedlecountcorrect.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(CataractIntraOperativeDetailVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A CataractIntraOperativeDetailVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((CataractIntraOperativeDetailVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((CataractIntraOperativeDetailVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.medications != null)
			count++;
		if(this.skinpreperationused != null)
			count++;
		if(this.localanaestheticused != null)
			count++;
		if(this.dressings != null)
			count++;
		if(this.swabneedlecount != null)
			count++;
		if(this.wasswabneedlecountcorrect != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.core.vo.PatientMedicationLiteVoCollection medications;
	protected ims.clinical.vo.SkinPreperationVoCollection skinpreperationused;
	protected ims.clinical.vo.LocalAnaestheticAdministeredVoCollection localanaestheticused;
	protected ims.clinical.vo.lookups.CataractDressingsCollection dressings;
	protected Integer swabneedlecount;
	protected ims.core.vo.lookups.YesNo wasswabneedlecountcorrect;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
