//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to core.clinical.IntraOperativeDetails business object (ID: 1072100082).
 */
public class IntraOperativeDetailsVo extends ims.core.clinical.vo.IntraOperativeDetailsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public IntraOperativeDetailsVo()
	{
	}
	public IntraOperativeDetailsVo(Integer id, int version)
	{
		super(id, version);
	}
	public IntraOperativeDetailsVo(ims.clinical.vo.beans.IntraOperativeDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.skinpreparationused = ims.clinical.vo.lookups.SkinPreparationusedCollection.buildFromBeanCollection(bean.getSkinPreparationUsed());
		this.dressing = ims.clinical.vo.lookups.DressingCollection.buildFromBeanCollection(bean.getDressing());
		this.mlsofwateriballoon = bean.getMlsOfWaterIballoon();
		this.nationaljointregistrycompleted = bean.getNationalJointRegistryCompleted() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getNationalJointRegistryCompleted());
		this.diathermyplatedetail = bean.getDiathermyPlateDetail() == null ? null : bean.getDiathermyPlateDetail().buildVo();
		this.limbcare = bean.getLimbCare() == null ? null : bean.getLimbCare().buildVo();
		this.drains = bean.getDrains() == null ? null : bean.getDrains().buildVo();
		this.skinclosure = ims.clinical.vo.lookups.SkinClosureCollection.buildFromBeanCollection(bean.getSkinClosure());
		this.localanastheticused = ims.clinical.vo.LocalAnaestheticAdministeredVoCollection.buildFromBeanCollection(bean.getLocalAnastheticUsed());
		this.patientposition = bean.getPatientPosition() == null ? null : ims.core.vo.lookups.PatientPosition.buildLookup(bean.getPatientPosition());
		this.tourniquetdetail = bean.getTourniquetDetail() == null ? null : bean.getTourniquetDetail().buildVo();
		this.specimentype = bean.getSpecimenType();
		this.histopathology = bean.getHistopathology();
		this.microbiology = bean.getMicrobiology();
		this.haematology = bean.getHaematology();
		this.cytology = bean.getCytology();
		this.catheterdetail = bean.getCatheterDetail() == null ? null : bean.getCatheterDetail().buildVo();
		this.otherskinpreparationused = bean.getOtherSkinPreparationUsed();
		this.nationaljointregistrycompletedby = bean.getNationalJointRegistryCompletedBy() == null ? null : bean.getNationalJointRegistryCompletedBy().buildVo();
		this.diathermyplatedetailsitetwo = bean.getDiathermyPlateDetailSiteTwo() == null ? null : bean.getDiathermyPlateDetailSiteTwo().buildVo();
		this.swabcount = bean.getSwabCount() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getSwabCount());
		this.needlecount = bean.getNeedleCount() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getNeedleCount());
		this.instrumentcount = bean.getInstrumentCount() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getInstrumentCount());
		this.scrubnurse = bean.getScrubNurse() == null ? null : bean.getScrubNurse().buildVo();
		this.circulatingnurse = bean.getCirculatingNurse() == null ? null : bean.getCirculatingNurse().buildVo();
		this.countcomments = bean.getCountComments();
		this.tabledevices = ims.clinical.vo.TableDeviceVoCollection.buildFromBeanCollection(bean.getTableDevices());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.IntraOperativeDetailsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.skinpreparationused = ims.clinical.vo.lookups.SkinPreparationusedCollection.buildFromBeanCollection(bean.getSkinPreparationUsed());
		this.dressing = ims.clinical.vo.lookups.DressingCollection.buildFromBeanCollection(bean.getDressing());
		this.mlsofwateriballoon = bean.getMlsOfWaterIballoon();
		this.nationaljointregistrycompleted = bean.getNationalJointRegistryCompleted() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getNationalJointRegistryCompleted());
		this.diathermyplatedetail = bean.getDiathermyPlateDetail() == null ? null : bean.getDiathermyPlateDetail().buildVo(map);
		this.limbcare = bean.getLimbCare() == null ? null : bean.getLimbCare().buildVo(map);
		this.drains = bean.getDrains() == null ? null : bean.getDrains().buildVo(map);
		this.skinclosure = ims.clinical.vo.lookups.SkinClosureCollection.buildFromBeanCollection(bean.getSkinClosure());
		this.localanastheticused = ims.clinical.vo.LocalAnaestheticAdministeredVoCollection.buildFromBeanCollection(bean.getLocalAnastheticUsed());
		this.patientposition = bean.getPatientPosition() == null ? null : ims.core.vo.lookups.PatientPosition.buildLookup(bean.getPatientPosition());
		this.tourniquetdetail = bean.getTourniquetDetail() == null ? null : bean.getTourniquetDetail().buildVo(map);
		this.specimentype = bean.getSpecimenType();
		this.histopathology = bean.getHistopathology();
		this.microbiology = bean.getMicrobiology();
		this.haematology = bean.getHaematology();
		this.cytology = bean.getCytology();
		this.catheterdetail = bean.getCatheterDetail() == null ? null : bean.getCatheterDetail().buildVo(map);
		this.otherskinpreparationused = bean.getOtherSkinPreparationUsed();
		this.nationaljointregistrycompletedby = bean.getNationalJointRegistryCompletedBy() == null ? null : bean.getNationalJointRegistryCompletedBy().buildVo(map);
		this.diathermyplatedetailsitetwo = bean.getDiathermyPlateDetailSiteTwo() == null ? null : bean.getDiathermyPlateDetailSiteTwo().buildVo(map);
		this.swabcount = bean.getSwabCount() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getSwabCount());
		this.needlecount = bean.getNeedleCount() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getNeedleCount());
		this.instrumentcount = bean.getInstrumentCount() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getInstrumentCount());
		this.scrubnurse = bean.getScrubNurse() == null ? null : bean.getScrubNurse().buildVo(map);
		this.circulatingnurse = bean.getCirculatingNurse() == null ? null : bean.getCirculatingNurse().buildVo(map);
		this.countcomments = bean.getCountComments();
		this.tabledevices = ims.clinical.vo.TableDeviceVoCollection.buildFromBeanCollection(bean.getTableDevices());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.IntraOperativeDetailsVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.IntraOperativeDetailsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.IntraOperativeDetailsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("SKINPREPARATIONUSED"))
			return getSkinPreparationUsed();
		if(fieldName.equals("DRESSING"))
			return getDressing();
		if(fieldName.equals("MLSOFWATERIBALLOON"))
			return getMlsOfWaterIballoon();
		if(fieldName.equals("NATIONALJOINTREGISTRYCOMPLETED"))
			return getNationalJointRegistryCompleted();
		if(fieldName.equals("DIATHERMYPLATEDETAIL"))
			return getDiathermyPlateDetail();
		if(fieldName.equals("LIMBCARE"))
			return getLimbCare();
		if(fieldName.equals("DRAINS"))
			return getDrains();
		if(fieldName.equals("SKINCLOSURE"))
			return getSkinClosure();
		if(fieldName.equals("LOCALANASTHETICUSED"))
			return getLocalAnastheticUsed();
		if(fieldName.equals("PATIENTPOSITION"))
			return getPatientPosition();
		if(fieldName.equals("TOURNIQUETDETAIL"))
			return getTourniquetDetail();
		if(fieldName.equals("SPECIMENTYPE"))
			return getSpecimenType();
		if(fieldName.equals("HISTOPATHOLOGY"))
			return getHistopathology();
		if(fieldName.equals("MICROBIOLOGY"))
			return getMicrobiology();
		if(fieldName.equals("HAEMATOLOGY"))
			return getHaematology();
		if(fieldName.equals("CYTOLOGY"))
			return getCytology();
		if(fieldName.equals("CATHETERDETAIL"))
			return getCatheterDetail();
		if(fieldName.equals("OTHERSKINPREPARATIONUSED"))
			return getOtherSkinPreparationUsed();
		if(fieldName.equals("NATIONALJOINTREGISTRYCOMPLETEDBY"))
			return getNationalJointRegistryCompletedBy();
		if(fieldName.equals("DIATHERMYPLATEDETAILSITETWO"))
			return getDiathermyPlateDetailSiteTwo();
		if(fieldName.equals("SWABCOUNT"))
			return getSwabCount();
		if(fieldName.equals("NEEDLECOUNT"))
			return getNeedleCount();
		if(fieldName.equals("INSTRUMENTCOUNT"))
			return getInstrumentCount();
		if(fieldName.equals("SCRUBNURSE"))
			return getScrubNurse();
		if(fieldName.equals("CIRCULATINGNURSE"))
			return getCirculatingNurse();
		if(fieldName.equals("COUNTCOMMENTS"))
			return getCountComments();
		if(fieldName.equals("TABLEDEVICES"))
			return getTableDevices();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getSkinPreparationUsedIsNotNull()
	{
		return this.skinpreparationused != null;
	}
	public ims.clinical.vo.lookups.SkinPreparationusedCollection getSkinPreparationUsed()
	{
		return this.skinpreparationused;
	}
	public void setSkinPreparationUsed(ims.clinical.vo.lookups.SkinPreparationusedCollection value)
	{
		this.isValidated = false;
		this.skinpreparationused = value;
	}
	public boolean getDressingIsNotNull()
	{
		return this.dressing != null;
	}
	public ims.clinical.vo.lookups.DressingCollection getDressing()
	{
		return this.dressing;
	}
	public void setDressing(ims.clinical.vo.lookups.DressingCollection value)
	{
		this.isValidated = false;
		this.dressing = value;
	}
	public boolean getMlsOfWaterIballoonIsNotNull()
	{
		return this.mlsofwateriballoon != null;
	}
	public Integer getMlsOfWaterIballoon()
	{
		return this.mlsofwateriballoon;
	}
	public void setMlsOfWaterIballoon(Integer value)
	{
		this.isValidated = false;
		this.mlsofwateriballoon = value;
	}
	public boolean getNationalJointRegistryCompletedIsNotNull()
	{
		return this.nationaljointregistrycompleted != null;
	}
	public ims.core.vo.lookups.YesNo getNationalJointRegistryCompleted()
	{
		return this.nationaljointregistrycompleted;
	}
	public void setNationalJointRegistryCompleted(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.nationaljointregistrycompleted = value;
	}
	public boolean getDiathermyPlateDetailIsNotNull()
	{
		return this.diathermyplatedetail != null;
	}
	public ims.clinical.vo.DiathermyPlateDetailVo getDiathermyPlateDetail()
	{
		return this.diathermyplatedetail;
	}
	public void setDiathermyPlateDetail(ims.clinical.vo.DiathermyPlateDetailVo value)
	{
		this.isValidated = false;
		this.diathermyplatedetail = value;
	}
	public boolean getLimbCareIsNotNull()
	{
		return this.limbcare != null;
	}
	public ims.clinical.vo.LimbCareVo getLimbCare()
	{
		return this.limbcare;
	}
	public void setLimbCare(ims.clinical.vo.LimbCareVo value)
	{
		this.isValidated = false;
		this.limbcare = value;
	}
	public boolean getDrainsIsNotNull()
	{
		return this.drains != null;
	}
	public ims.clinical.vo.DrainsVo getDrains()
	{
		return this.drains;
	}
	public void setDrains(ims.clinical.vo.DrainsVo value)
	{
		this.isValidated = false;
		this.drains = value;
	}
	public boolean getSkinClosureIsNotNull()
	{
		return this.skinclosure != null;
	}
	public ims.clinical.vo.lookups.SkinClosureCollection getSkinClosure()
	{
		return this.skinclosure;
	}
	public void setSkinClosure(ims.clinical.vo.lookups.SkinClosureCollection value)
	{
		this.isValidated = false;
		this.skinclosure = value;
	}
	public boolean getLocalAnastheticUsedIsNotNull()
	{
		return this.localanastheticused != null;
	}
	public ims.clinical.vo.LocalAnaestheticAdministeredVoCollection getLocalAnastheticUsed()
	{
		return this.localanastheticused;
	}
	public void setLocalAnastheticUsed(ims.clinical.vo.LocalAnaestheticAdministeredVoCollection value)
	{
		this.isValidated = false;
		this.localanastheticused = value;
	}
	public boolean getPatientPositionIsNotNull()
	{
		return this.patientposition != null;
	}
	public ims.core.vo.lookups.PatientPosition getPatientPosition()
	{
		return this.patientposition;
	}
	public void setPatientPosition(ims.core.vo.lookups.PatientPosition value)
	{
		this.isValidated = false;
		this.patientposition = value;
	}
	public boolean getTourniquetDetailIsNotNull()
	{
		return this.tourniquetdetail != null;
	}
	public ims.clinical.vo.TourniquetDetailVo getTourniquetDetail()
	{
		return this.tourniquetdetail;
	}
	public void setTourniquetDetail(ims.clinical.vo.TourniquetDetailVo value)
	{
		this.isValidated = false;
		this.tourniquetdetail = value;
	}
	public boolean getSpecimenTypeIsNotNull()
	{
		return this.specimentype != null;
	}
	public String getSpecimenType()
	{
		return this.specimentype;
	}
	public static int getSpecimenTypeMaxLength()
	{
		return 255;
	}
	public void setSpecimenType(String value)
	{
		this.isValidated = false;
		this.specimentype = value;
	}
	public boolean getHistopathologyIsNotNull()
	{
		return this.histopathology != null;
	}
	public Boolean getHistopathology()
	{
		return this.histopathology;
	}
	public void setHistopathology(Boolean value)
	{
		this.isValidated = false;
		this.histopathology = value;
	}
	public boolean getMicrobiologyIsNotNull()
	{
		return this.microbiology != null;
	}
	public Boolean getMicrobiology()
	{
		return this.microbiology;
	}
	public void setMicrobiology(Boolean value)
	{
		this.isValidated = false;
		this.microbiology = value;
	}
	public boolean getHaematologyIsNotNull()
	{
		return this.haematology != null;
	}
	public Boolean getHaematology()
	{
		return this.haematology;
	}
	public void setHaematology(Boolean value)
	{
		this.isValidated = false;
		this.haematology = value;
	}
	public boolean getCytologyIsNotNull()
	{
		return this.cytology != null;
	}
	public Boolean getCytology()
	{
		return this.cytology;
	}
	public void setCytology(Boolean value)
	{
		this.isValidated = false;
		this.cytology = value;
	}
	public boolean getCatheterDetailIsNotNull()
	{
		return this.catheterdetail != null;
	}
	public ims.clinical.vo.CatheterDetailVo getCatheterDetail()
	{
		return this.catheterdetail;
	}
	public void setCatheterDetail(ims.clinical.vo.CatheterDetailVo value)
	{
		this.isValidated = false;
		this.catheterdetail = value;
	}
	public boolean getOtherSkinPreparationUsedIsNotNull()
	{
		return this.otherskinpreparationused != null;
	}
	public String getOtherSkinPreparationUsed()
	{
		return this.otherskinpreparationused;
	}
	public static int getOtherSkinPreparationUsedMaxLength()
	{
		return 125;
	}
	public void setOtherSkinPreparationUsed(String value)
	{
		this.isValidated = false;
		this.otherskinpreparationused = value;
	}
	public boolean getNationalJointRegistryCompletedByIsNotNull()
	{
		return this.nationaljointregistrycompletedby != null;
	}
	public ims.core.vo.NurseVo getNationalJointRegistryCompletedBy()
	{
		return this.nationaljointregistrycompletedby;
	}
	public void setNationalJointRegistryCompletedBy(ims.core.vo.NurseVo value)
	{
		this.isValidated = false;
		this.nationaljointregistrycompletedby = value;
	}
	public boolean getDiathermyPlateDetailSiteTwoIsNotNull()
	{
		return this.diathermyplatedetailsitetwo != null;
	}
	public ims.clinical.vo.DiathermyPlateDetailVo getDiathermyPlateDetailSiteTwo()
	{
		return this.diathermyplatedetailsitetwo;
	}
	public void setDiathermyPlateDetailSiteTwo(ims.clinical.vo.DiathermyPlateDetailVo value)
	{
		this.isValidated = false;
		this.diathermyplatedetailsitetwo = value;
	}
	public boolean getSwabCountIsNotNull()
	{
		return this.swabcount != null;
	}
	public ims.core.vo.lookups.YesNo getSwabCount()
	{
		return this.swabcount;
	}
	public void setSwabCount(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.swabcount = value;
	}
	public boolean getNeedleCountIsNotNull()
	{
		return this.needlecount != null;
	}
	public ims.core.vo.lookups.YesNo getNeedleCount()
	{
		return this.needlecount;
	}
	public void setNeedleCount(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.needlecount = value;
	}
	public boolean getInstrumentCountIsNotNull()
	{
		return this.instrumentcount != null;
	}
	public ims.core.vo.lookups.YesNo getInstrumentCount()
	{
		return this.instrumentcount;
	}
	public void setInstrumentCount(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.instrumentcount = value;
	}
	public boolean getScrubNurseIsNotNull()
	{
		return this.scrubnurse != null;
	}
	public ims.core.vo.NurseVo getScrubNurse()
	{
		return this.scrubnurse;
	}
	public void setScrubNurse(ims.core.vo.NurseVo value)
	{
		this.isValidated = false;
		this.scrubnurse = value;
	}
	public boolean getCirculatingNurseIsNotNull()
	{
		return this.circulatingnurse != null;
	}
	public ims.core.vo.NurseVo getCirculatingNurse()
	{
		return this.circulatingnurse;
	}
	public void setCirculatingNurse(ims.core.vo.NurseVo value)
	{
		this.isValidated = false;
		this.circulatingnurse = value;
	}
	public boolean getCountCommentsIsNotNull()
	{
		return this.countcomments != null;
	}
	public String getCountComments()
	{
		return this.countcomments;
	}
	public static int getCountCommentsMaxLength()
	{
		return 255;
	}
	public void setCountComments(String value)
	{
		this.isValidated = false;
		this.countcomments = value;
	}
	public boolean getTableDevicesIsNotNull()
	{
		return this.tabledevices != null;
	}
	public ims.clinical.vo.TableDeviceVoCollection getTableDevices()
	{
		return this.tabledevices;
	}
	public void setTableDevices(ims.clinical.vo.TableDeviceVoCollection value)
	{
		this.isValidated = false;
		this.tabledevices = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.diathermyplatedetail != null)
		{
			if(!this.diathermyplatedetail.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.limbcare != null)
		{
			if(!this.limbcare.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.drains != null)
		{
			if(!this.drains.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.localanastheticused != null)
		{
			if(!this.localanastheticused.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.tourniquetdetail != null)
		{
			if(!this.tourniquetdetail.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.catheterdetail != null)
		{
			if(!this.catheterdetail.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.nationaljointregistrycompletedby != null)
		{
			if(!this.nationaljointregistrycompletedby.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.diathermyplatedetailsitetwo != null)
		{
			if(!this.diathermyplatedetailsitetwo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.tabledevices != null)
		{
			if(!this.tabledevices.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.diathermyplatedetail != null)
		{
			String[] listOfOtherErrors = this.diathermyplatedetail.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.limbcare != null)
		{
			String[] listOfOtherErrors = this.limbcare.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.drains != null)
		{
			String[] listOfOtherErrors = this.drains.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.localanastheticused != null)
		{
			String[] listOfOtherErrors = this.localanastheticused.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.tourniquetdetail != null)
		{
			String[] listOfOtherErrors = this.tourniquetdetail.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.specimentype != null)
			if(this.specimentype.length() > 255)
				listOfErrors.add("The length of the field [specimentype] in the value object [ims.clinical.vo.IntraOperativeDetailsVo] is too big. It should be less or equal to 255");
		if(this.catheterdetail != null)
		{
			String[] listOfOtherErrors = this.catheterdetail.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.otherskinpreparationused != null)
			if(this.otherskinpreparationused.length() > 125)
				listOfErrors.add("The length of the field [otherskinpreparationused] in the value object [ims.clinical.vo.IntraOperativeDetailsVo] is too big. It should be less or equal to 125");
		if(this.nationaljointregistrycompletedby != null)
		{
			String[] listOfOtherErrors = this.nationaljointregistrycompletedby.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.diathermyplatedetailsitetwo != null)
		{
			String[] listOfOtherErrors = this.diathermyplatedetailsitetwo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.countcomments != null)
			if(this.countcomments.length() > 255)
				listOfErrors.add("The length of the field [countcomments] in the value object [ims.clinical.vo.IntraOperativeDetailsVo] is too big. It should be less or equal to 255");
		if(this.tabledevices != null)
		{
			String[] listOfOtherErrors = this.tabledevices.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		IntraOperativeDetailsVo clone = new IntraOperativeDetailsVo(this.id, this.version);
		
		if(this.skinpreparationused == null)
			clone.skinpreparationused = null;
		else
			clone.skinpreparationused = (ims.clinical.vo.lookups.SkinPreparationusedCollection)this.skinpreparationused.clone();
		if(this.dressing == null)
			clone.dressing = null;
		else
			clone.dressing = (ims.clinical.vo.lookups.DressingCollection)this.dressing.clone();
		clone.mlsofwateriballoon = this.mlsofwateriballoon;
		if(this.nationaljointregistrycompleted == null)
			clone.nationaljointregistrycompleted = null;
		else
			clone.nationaljointregistrycompleted = (ims.core.vo.lookups.YesNo)this.nationaljointregistrycompleted.clone();
		if(this.diathermyplatedetail == null)
			clone.diathermyplatedetail = null;
		else
			clone.diathermyplatedetail = (ims.clinical.vo.DiathermyPlateDetailVo)this.diathermyplatedetail.clone();
		if(this.limbcare == null)
			clone.limbcare = null;
		else
			clone.limbcare = (ims.clinical.vo.LimbCareVo)this.limbcare.clone();
		if(this.drains == null)
			clone.drains = null;
		else
			clone.drains = (ims.clinical.vo.DrainsVo)this.drains.clone();
		if(this.skinclosure == null)
			clone.skinclosure = null;
		else
			clone.skinclosure = (ims.clinical.vo.lookups.SkinClosureCollection)this.skinclosure.clone();
		if(this.localanastheticused == null)
			clone.localanastheticused = null;
		else
			clone.localanastheticused = (ims.clinical.vo.LocalAnaestheticAdministeredVoCollection)this.localanastheticused.clone();
		if(this.patientposition == null)
			clone.patientposition = null;
		else
			clone.patientposition = (ims.core.vo.lookups.PatientPosition)this.patientposition.clone();
		if(this.tourniquetdetail == null)
			clone.tourniquetdetail = null;
		else
			clone.tourniquetdetail = (ims.clinical.vo.TourniquetDetailVo)this.tourniquetdetail.clone();
		clone.specimentype = this.specimentype;
		clone.histopathology = this.histopathology;
		clone.microbiology = this.microbiology;
		clone.haematology = this.haematology;
		clone.cytology = this.cytology;
		if(this.catheterdetail == null)
			clone.catheterdetail = null;
		else
			clone.catheterdetail = (ims.clinical.vo.CatheterDetailVo)this.catheterdetail.clone();
		clone.otherskinpreparationused = this.otherskinpreparationused;
		if(this.nationaljointregistrycompletedby == null)
			clone.nationaljointregistrycompletedby = null;
		else
			clone.nationaljointregistrycompletedby = (ims.core.vo.NurseVo)this.nationaljointregistrycompletedby.clone();
		if(this.diathermyplatedetailsitetwo == null)
			clone.diathermyplatedetailsitetwo = null;
		else
			clone.diathermyplatedetailsitetwo = (ims.clinical.vo.DiathermyPlateDetailVo)this.diathermyplatedetailsitetwo.clone();
		if(this.swabcount == null)
			clone.swabcount = null;
		else
			clone.swabcount = (ims.core.vo.lookups.YesNo)this.swabcount.clone();
		if(this.needlecount == null)
			clone.needlecount = null;
		else
			clone.needlecount = (ims.core.vo.lookups.YesNo)this.needlecount.clone();
		if(this.instrumentcount == null)
			clone.instrumentcount = null;
		else
			clone.instrumentcount = (ims.core.vo.lookups.YesNo)this.instrumentcount.clone();
		if(this.scrubnurse == null)
			clone.scrubnurse = null;
		else
			clone.scrubnurse = (ims.core.vo.NurseVo)this.scrubnurse.clone();
		if(this.circulatingnurse == null)
			clone.circulatingnurse = null;
		else
			clone.circulatingnurse = (ims.core.vo.NurseVo)this.circulatingnurse.clone();
		clone.countcomments = this.countcomments;
		if(this.tabledevices == null)
			clone.tabledevices = null;
		else
			clone.tabledevices = (ims.clinical.vo.TableDeviceVoCollection)this.tabledevices.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(IntraOperativeDetailsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A IntraOperativeDetailsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((IntraOperativeDetailsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((IntraOperativeDetailsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.skinpreparationused != null)
			count++;
		if(this.dressing != null)
			count++;
		if(this.mlsofwateriballoon != null)
			count++;
		if(this.nationaljointregistrycompleted != null)
			count++;
		if(this.diathermyplatedetail != null)
			count++;
		if(this.limbcare != null)
			count++;
		if(this.drains != null)
			count++;
		if(this.skinclosure != null)
			count++;
		if(this.localanastheticused != null)
			count++;
		if(this.patientposition != null)
			count++;
		if(this.tourniquetdetail != null)
			count++;
		if(this.specimentype != null)
			count++;
		if(this.histopathology != null)
			count++;
		if(this.microbiology != null)
			count++;
		if(this.haematology != null)
			count++;
		if(this.cytology != null)
			count++;
		if(this.catheterdetail != null)
			count++;
		if(this.otherskinpreparationused != null)
			count++;
		if(this.nationaljointregistrycompletedby != null)
			count++;
		if(this.diathermyplatedetailsitetwo != null)
			count++;
		if(this.swabcount != null)
			count++;
		if(this.needlecount != null)
			count++;
		if(this.instrumentcount != null)
			count++;
		if(this.scrubnurse != null)
			count++;
		if(this.circulatingnurse != null)
			count++;
		if(this.countcomments != null)
			count++;
		if(this.tabledevices != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 27;
	}
	protected ims.clinical.vo.lookups.SkinPreparationusedCollection skinpreparationused;
	protected ims.clinical.vo.lookups.DressingCollection dressing;
	protected Integer mlsofwateriballoon;
	protected ims.core.vo.lookups.YesNo nationaljointregistrycompleted;
	protected ims.clinical.vo.DiathermyPlateDetailVo diathermyplatedetail;
	protected ims.clinical.vo.LimbCareVo limbcare;
	protected ims.clinical.vo.DrainsVo drains;
	protected ims.clinical.vo.lookups.SkinClosureCollection skinclosure;
	protected ims.clinical.vo.LocalAnaestheticAdministeredVoCollection localanastheticused;
	protected ims.core.vo.lookups.PatientPosition patientposition;
	protected ims.clinical.vo.TourniquetDetailVo tourniquetdetail;
	protected String specimentype;
	protected Boolean histopathology;
	protected Boolean microbiology;
	protected Boolean haematology;
	protected Boolean cytology;
	protected ims.clinical.vo.CatheterDetailVo catheterdetail;
	protected String otherskinpreparationused;
	protected ims.core.vo.NurseVo nationaljointregistrycompletedby;
	protected ims.clinical.vo.DiathermyPlateDetailVo diathermyplatedetailsitetwo;
	protected ims.core.vo.lookups.YesNo swabcount;
	protected ims.core.vo.lookups.YesNo needlecount;
	protected ims.core.vo.lookups.YesNo instrumentcount;
	protected ims.core.vo.NurseVo scrubnurse;
	protected ims.core.vo.NurseVo circulatingnurse;
	protected String countcomments;
	protected ims.clinical.vo.TableDeviceVoCollection tabledevices;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
