//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to core.clinical.AreaofNeedsNotingDetail business object (ID: 1003100064).
 */
public class AreaOfNeedsNotingDetailVo extends ims.core.clinical.vo.AreaofNeedsNotingDetailRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AreaOfNeedsNotingDetailVo()
	{
	}
	public AreaOfNeedsNotingDetailVo(Integer id, int version)
	{
		super(id, version);
	}
	public AreaOfNeedsNotingDetailVo(ims.clinical.vo.beans.AreaOfNeedsNotingDetailVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.areaofneed = bean.getAreaofNeed() == null ? null : ims.core.vo.lookups.AreaOfNeed.buildLookup(bean.getAreaofNeed());
		this.therapynote = bean.getTherapyNote();
		this.summarynote = bean.getSummaryNote();
		this.systeminformation = bean.getSystemInformation() == null ? null : bean.getSystemInformation().buildSystemInformation();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.AreaOfNeedsNotingDetailVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.areaofneed = bean.getAreaofNeed() == null ? null : ims.core.vo.lookups.AreaOfNeed.buildLookup(bean.getAreaofNeed());
		this.therapynote = bean.getTherapyNote();
		this.summarynote = bean.getSummaryNote();
		this.systeminformation = bean.getSystemInformation() == null ? null : bean.getSystemInformation().buildSystemInformation();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.AreaOfNeedsNotingDetailVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.AreaOfNeedsNotingDetailVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.AreaOfNeedsNotingDetailVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("AREAOFNEED"))
			return getAreaofNeed();
		if(fieldName.equals("THERAPYNOTE"))
			return getTherapyNote();
		if(fieldName.equals("SUMMARYNOTE"))
			return getSummaryNote();
		if(fieldName.equals("SYSTEMINFORMATION"))
			return getSystemInformation();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAreaofNeedIsNotNull()
	{
		return this.areaofneed != null;
	}
	public ims.core.vo.lookups.AreaOfNeed getAreaofNeed()
	{
		return this.areaofneed;
	}
	public void setAreaofNeed(ims.core.vo.lookups.AreaOfNeed value)
	{
		this.isValidated = false;
		this.areaofneed = value;
	}
	public boolean getTherapyNoteIsNotNull()
	{
		return this.therapynote != null;
	}
	public String getTherapyNote()
	{
		return this.therapynote;
	}
	public static int getTherapyNoteMaxLength()
	{
		return 2000;
	}
	public void setTherapyNote(String value)
	{
		this.isValidated = false;
		this.therapynote = value;
	}
	public boolean getSummaryNoteIsNotNull()
	{
		return this.summarynote != null;
	}
	public String getSummaryNote()
	{
		return this.summarynote;
	}
	public static int getSummaryNoteMaxLength()
	{
		return 2000;
	}
	public void setSummaryNote(String value)
	{
		this.isValidated = false;
		this.summarynote = value;
	}
	public boolean getSystemInformationIsNotNull()
	{
		return this.systeminformation != null;
	}
	public ims.vo.SystemInformation getSystemInformation()
	{
		return this.systeminformation;
	}
	public void setSystemInformation(ims.vo.SystemInformation value)
	{
		this.isValidated = false;
		this.systeminformation = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.therapynote != null)
			if(this.therapynote.length() > 2000)
				listOfErrors.add("Therapy Note cannot exceed 2000 charachters");
		if(this.summarynote != null)
			if(this.summarynote.length() > 2000)
				listOfErrors.add("Summary Note cannot exceed 2000 charachters");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AreaOfNeedsNotingDetailVo clone = new AreaOfNeedsNotingDetailVo(this.id, this.version);
		
		if(this.areaofneed == null)
			clone.areaofneed = null;
		else
			clone.areaofneed = (ims.core.vo.lookups.AreaOfNeed)this.areaofneed.clone();
		clone.therapynote = this.therapynote;
		clone.summarynote = this.summarynote;
		if(this.systeminformation == null)
			clone.systeminformation = null;
		else
			clone.systeminformation = (ims.vo.SystemInformation)this.systeminformation.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AreaOfNeedsNotingDetailVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AreaOfNeedsNotingDetailVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		AreaOfNeedsNotingDetailVo compareObj = (AreaOfNeedsNotingDetailVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getSystemInformation() == null && compareObj.getSystemInformation() != null)
				return -1;
			if(this.getSystemInformation() != null && compareObj.getSystemInformation() == null)
				return 1;
			if(this.getSystemInformation() != null && compareObj.getSystemInformation() != null)
				retVal = this.getSystemInformation().compareTo(compareObj.getSystemInformation());
		}
		if (retVal == 0)
		{
			if(this.getAreaofNeed() == null && compareObj.getAreaofNeed() != null)
				return -1;
			if(this.getAreaofNeed() != null && compareObj.getAreaofNeed() == null)
				return 1;
			if(this.getAreaofNeed() != null && compareObj.getAreaofNeed() != null)
				retVal = this.getAreaofNeed().compareTo(compareObj.getAreaofNeed());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.areaofneed != null)
			count++;
		if(this.therapynote != null)
			count++;
		if(this.summarynote != null)
			count++;
		if(this.systeminformation != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 4;
	}
	protected ims.core.vo.lookups.AreaOfNeed areaofneed;
	protected String therapynote;
	protected String summarynote;
	protected ims.vo.SystemInformation systeminformation;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
