//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to clinical.PatientGoal business object (ID: 1072100019).
 */
public class PatientGoalShortVo extends ims.clinical.vo.PatientGoalRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientGoalShortVo()
	{
	}
	public PatientGoalShortVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientGoalShortVo(ims.clinical.vo.beans.PatientGoalShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.goaltype = bean.getGoalType() == null ? null : ims.clinical.vo.lookups.GoalTerm.buildLookup(bean.getGoalType());
		this.areaofneed = bean.getAreaOfNeed() == null ? null : ims.clinical.vo.lookups.GoalAreaOfNeed.buildLookup(bean.getAreaOfNeed());
		this.goaltext = bean.getGoalText();
		this.createddatetime = bean.getCreatedDateTime() == null ? null : bean.getCreatedDateTime().buildDateTime();
		this.dateachieved = bean.getDateAchieved() == null ? null : bean.getDateAchieved().buildDate();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.PatientGoalShortVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.goaltype = bean.getGoalType() == null ? null : ims.clinical.vo.lookups.GoalTerm.buildLookup(bean.getGoalType());
		this.areaofneed = bean.getAreaOfNeed() == null ? null : ims.clinical.vo.lookups.GoalAreaOfNeed.buildLookup(bean.getAreaOfNeed());
		this.goaltext = bean.getGoalText();
		this.createddatetime = bean.getCreatedDateTime() == null ? null : bean.getCreatedDateTime().buildDateTime();
		this.dateachieved = bean.getDateAchieved() == null ? null : bean.getDateAchieved().buildDate();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.PatientGoalShortVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.PatientGoalShortVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.PatientGoalShortVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("GOALTYPE"))
			return getGoalType();
		if(fieldName.equals("AREAOFNEED"))
			return getAreaOfNeed();
		if(fieldName.equals("GOALTEXT"))
			return getGoalText();
		if(fieldName.equals("CREATEDDATETIME"))
			return getCreatedDateTime();
		if(fieldName.equals("DATEACHIEVED"))
			return getDateAchieved();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getGoalTypeIsNotNull()
	{
		return this.goaltype != null;
	}
	public ims.clinical.vo.lookups.GoalTerm getGoalType()
	{
		return this.goaltype;
	}
	public void setGoalType(ims.clinical.vo.lookups.GoalTerm value)
	{
		this.isValidated = false;
		this.goaltype = value;
	}
	public boolean getAreaOfNeedIsNotNull()
	{
		return this.areaofneed != null;
	}
	public ims.clinical.vo.lookups.GoalAreaOfNeed getAreaOfNeed()
	{
		return this.areaofneed;
	}
	public void setAreaOfNeed(ims.clinical.vo.lookups.GoalAreaOfNeed value)
	{
		this.isValidated = false;
		this.areaofneed = value;
	}
	public boolean getGoalTextIsNotNull()
	{
		return this.goaltext != null;
	}
	public String getGoalText()
	{
		return this.goaltext;
	}
	public static int getGoalTextMaxLength()
	{
		return 255;
	}
	public void setGoalText(String value)
	{
		this.isValidated = false;
		this.goaltext = value;
	}
	public boolean getCreatedDateTimeIsNotNull()
	{
		return this.createddatetime != null;
	}
	public ims.framework.utils.DateTime getCreatedDateTime()
	{
		return this.createddatetime;
	}
	public void setCreatedDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.createddatetime = value;
	}
	public boolean getDateAchievedIsNotNull()
	{
		return this.dateachieved != null;
	}
	public ims.framework.utils.Date getDateAchieved()
	{
		return this.dateachieved;
	}
	public void setDateAchieved(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateachieved = value;
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.admin.vo.CareContextRefVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.goaltype == null)
			listOfErrors.add("GoalType is mandatory");
		if(this.areaofneed == null)
			listOfErrors.add("AreaOfNeed is mandatory");
		if(this.goaltext != null)
			if(this.goaltext.length() > 255)
				listOfErrors.add("The length of the field [goaltext] in the value object [ims.clinical.vo.PatientGoalShortVo] is too big. It should be less or equal to 255");
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientGoalShortVo clone = new PatientGoalShortVo(this.id, this.version);
		
		if(this.goaltype == null)
			clone.goaltype = null;
		else
			clone.goaltype = (ims.clinical.vo.lookups.GoalTerm)this.goaltype.clone();
		if(this.areaofneed == null)
			clone.areaofneed = null;
		else
			clone.areaofneed = (ims.clinical.vo.lookups.GoalAreaOfNeed)this.areaofneed.clone();
		clone.goaltext = this.goaltext;
		if(this.createddatetime == null)
			clone.createddatetime = null;
		else
			clone.createddatetime = (ims.framework.utils.DateTime)this.createddatetime.clone();
		if(this.dateachieved == null)
			clone.dateachieved = null;
		else
			clone.dateachieved = (ims.framework.utils.Date)this.dateachieved.clone();
		clone.carecontext = this.carecontext;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientGoalShortVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientGoalShortVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PatientGoalShortVo compareObj = (PatientGoalShortVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_PatientGoal() == null && compareObj.getID_PatientGoal() != null)
				return -1;
			if(this.getID_PatientGoal() != null && compareObj.getID_PatientGoal() == null)
				return 1;
			if(this.getID_PatientGoal() != null && compareObj.getID_PatientGoal() != null)
				retVal = this.getID_PatientGoal().compareTo(compareObj.getID_PatientGoal());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.goaltype != null)
			count++;
		if(this.areaofneed != null)
			count++;
		if(this.goaltext != null)
			count++;
		if(this.createddatetime != null)
			count++;
		if(this.dateachieved != null)
			count++;
		if(this.carecontext != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.clinical.vo.lookups.GoalTerm goaltype;
	protected ims.clinical.vo.lookups.GoalAreaOfNeed areaofneed;
	protected String goaltext;
	protected ims.framework.utils.DateTime createddatetime;
	protected ims.framework.utils.Date dateachieved;
	protected ims.core.admin.vo.CareContextRefVo carecontext;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
