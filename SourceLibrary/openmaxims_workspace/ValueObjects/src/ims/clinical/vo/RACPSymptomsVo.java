//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to clinical.RACPSymptoms business object (ID: 1072100073).
 */
public class RACPSymptomsVo extends ims.clinical.vo.RACPSymptomsRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public RACPSymptomsVo()
	{
	}
	public RACPSymptomsVo(Integer id, int version)
	{
		super(id, version);
	}
	public RACPSymptomsVo(ims.clinical.vo.beans.RACPSymptomsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.rapcsymptom = bean.getRAPCSymptom() == null ? null : ims.core.vo.lookups.RACPSymptom.buildLookup(bean.getRAPCSymptom());
		this.racpcfinding = bean.getRACPCFinding() == null ? null : ims.core.vo.lookups.RACPSymptom.buildLookup(bean.getRACPCFinding());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.RACPSymptomsVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.rapcsymptom = bean.getRAPCSymptom() == null ? null : ims.core.vo.lookups.RACPSymptom.buildLookup(bean.getRAPCSymptom());
		this.racpcfinding = bean.getRACPCFinding() == null ? null : ims.core.vo.lookups.RACPSymptom.buildLookup(bean.getRACPCFinding());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.RACPSymptomsVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.RACPSymptomsVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.RACPSymptomsVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("RAPCSYMPTOM"))
			return getRAPCSymptom();
		if(fieldName.equals("RACPCFINDING"))
			return getRACPCFinding();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getRAPCSymptomIsNotNull()
	{
		return this.rapcsymptom != null;
	}
	public ims.core.vo.lookups.RACPSymptom getRAPCSymptom()
	{
		return this.rapcsymptom;
	}
	public void setRAPCSymptom(ims.core.vo.lookups.RACPSymptom value)
	{
		this.isValidated = false;
		this.rapcsymptom = value;
	}
	public boolean getRACPCFindingIsNotNull()
	{
		return this.racpcfinding != null;
	}
	public ims.core.vo.lookups.RACPSymptom getRACPCFinding()
	{
		return this.racpcfinding;
	}
	public void setRACPCFinding(ims.core.vo.lookups.RACPSymptom value)
	{
		this.isValidated = false;
		this.racpcfinding = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.rapcsymptom == null)
			listOfErrors.add("RAPCSymptom is mandatory");
		if(this.racpcfinding == null)
			listOfErrors.add("RACPCFinding is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		RACPSymptomsVo clone = new RACPSymptomsVo(this.id, this.version);
		
		if(this.rapcsymptom == null)
			clone.rapcsymptom = null;
		else
			clone.rapcsymptom = (ims.core.vo.lookups.RACPSymptom)this.rapcsymptom.clone();
		if(this.racpcfinding == null)
			clone.racpcfinding = null;
		else
			clone.racpcfinding = (ims.core.vo.lookups.RACPSymptom)this.racpcfinding.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(RACPSymptomsVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A RACPSymptomsVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((RACPSymptomsVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((RACPSymptomsVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.rapcsymptom != null)
			count++;
		if(this.racpcfinding != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 2;
	}
	protected ims.core.vo.lookups.RACPSymptom rapcsymptom;
	protected ims.core.vo.lookups.RACPSymptom racpcfinding;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
