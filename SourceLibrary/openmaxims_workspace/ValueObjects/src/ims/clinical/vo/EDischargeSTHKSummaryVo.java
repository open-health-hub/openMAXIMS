//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.clinical.vo;

/**
 * Linked to eDischarge.Summary business object (ID: 1099100018).
 */
public class EDischargeSTHKSummaryVo extends ims.edischarge.vo.SummaryRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public EDischargeSTHKSummaryVo()
	{
	}
	public EDischargeSTHKSummaryVo(Integer id, int version)
	{
		super(id, version);
	}
	public EDischargeSTHKSummaryVo(ims.clinical.vo.beans.EDischargeSTHKSummaryVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.admissiondatetime = bean.getAdmissionDateTime() == null ? null : bean.getAdmissionDateTime().buildDateTime();
		this.ttastatus = bean.getTTAStatus() == null ? null : ims.clinical.vo.lookups.TTAStatus.buildLookup(bean.getTTAStatus());
		this.hashadanyproceduresperformed = bean.getHasHadAnyProceduresPerformed() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getHasHadAnyProceduresPerformed());
		this.additonalclinicalinfo = bean.getAdditonalClinicalInfo() == null ? null : ims.clinical.vo.lookups.AdditonalClinicalInformation.buildLookup(bean.getAdditonalClinicalInfo());
		this.summarydetails = ims.clinical.vo.EDischargeSTHKSummaryDetailVoCollection.buildFromBeanCollection(bean.getSummaryDetails());
		this.dischargeletterstatus = bean.getDischargeLetterStatus() == null ? null : ims.clinical.vo.lookups.DischargeLetterStatus.buildLookup(bean.getDischargeLetterStatus());
		this.dischargesupplementaryletterstatus = bean.getDischargeSupplementaryLetterStatus() == null ? null : ims.clinical.vo.lookups.DischargeSupplementaryLetterStatus.buildLookup(bean.getDischargeSupplementaryLetterStatus());
		this.dischargedocuments = ims.core.vo.PatientDocumentVoCollection.buildFromBeanCollection(bean.getDischargeDocuments());
		this.dischargedetails = bean.getDischargeDetails() == null ? null : new ims.edischarge.vo.DischargeDetailsRefVo(new Integer(bean.getDischargeDetails().getId()), bean.getDischargeDetails().getVersion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.clinical.vo.beans.EDischargeSTHKSummaryVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.carecontext = bean.getCareContext() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getCareContext().getId()), bean.getCareContext().getVersion());
		this.admissiondatetime = bean.getAdmissionDateTime() == null ? null : bean.getAdmissionDateTime().buildDateTime();
		this.ttastatus = bean.getTTAStatus() == null ? null : ims.clinical.vo.lookups.TTAStatus.buildLookup(bean.getTTAStatus());
		this.hashadanyproceduresperformed = bean.getHasHadAnyProceduresPerformed() == null ? null : ims.core.vo.lookups.YesNo.buildLookup(bean.getHasHadAnyProceduresPerformed());
		this.additonalclinicalinfo = bean.getAdditonalClinicalInfo() == null ? null : ims.clinical.vo.lookups.AdditonalClinicalInformation.buildLookup(bean.getAdditonalClinicalInfo());
		this.summarydetails = ims.clinical.vo.EDischargeSTHKSummaryDetailVoCollection.buildFromBeanCollection(bean.getSummaryDetails());
		this.dischargeletterstatus = bean.getDischargeLetterStatus() == null ? null : ims.clinical.vo.lookups.DischargeLetterStatus.buildLookup(bean.getDischargeLetterStatus());
		this.dischargesupplementaryletterstatus = bean.getDischargeSupplementaryLetterStatus() == null ? null : ims.clinical.vo.lookups.DischargeSupplementaryLetterStatus.buildLookup(bean.getDischargeSupplementaryLetterStatus());
		this.dischargedocuments = ims.core.vo.PatientDocumentVoCollection.buildFromBeanCollection(bean.getDischargeDocuments());
		this.dischargedetails = bean.getDischargeDetails() == null ? null : new ims.edischarge.vo.DischargeDetailsRefVo(new Integer(bean.getDischargeDetails().getId()), bean.getDischargeDetails().getVersion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.clinical.vo.beans.EDischargeSTHKSummaryVoBean bean = null;
		if(map != null)
			bean = (ims.clinical.vo.beans.EDischargeSTHKSummaryVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.clinical.vo.beans.EDischargeSTHKSummaryVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CARECONTEXT"))
			return getCareContext();
		if(fieldName.equals("ADMISSIONDATETIME"))
			return getAdmissionDateTime();
		if(fieldName.equals("TTASTATUS"))
			return getTTAStatus();
		if(fieldName.equals("HASHADANYPROCEDURESPERFORMED"))
			return getHasHadAnyProceduresPerformed();
		if(fieldName.equals("ADDITONALCLINICALINFO"))
			return getAdditonalClinicalInfo();
		if(fieldName.equals("SUMMARYDETAILS"))
			return getSummaryDetails();
		if(fieldName.equals("DISCHARGELETTERSTATUS"))
			return getDischargeLetterStatus();
		if(fieldName.equals("DISCHARGESUPPLEMENTARYLETTERSTATUS"))
			return getDischargeSupplementaryLetterStatus();
		if(fieldName.equals("DISCHARGEDOCUMENTS"))
			return getDischargeDocuments();
		if(fieldName.equals("DISCHARGEDETAILS"))
			return getDischargeDetails();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getCareContextIsNotNull()
	{
		return this.carecontext != null;
	}
	public ims.core.admin.vo.CareContextRefVo getCareContext()
	{
		return this.carecontext;
	}
	public void setCareContext(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.carecontext = value;
	}
	public boolean getAdmissionDateTimeIsNotNull()
	{
		return this.admissiondatetime != null;
	}
	public ims.framework.utils.DateTime getAdmissionDateTime()
	{
		return this.admissiondatetime;
	}
	public void setAdmissionDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.admissiondatetime = value;
	}
	public boolean getTTAStatusIsNotNull()
	{
		return this.ttastatus != null;
	}
	public ims.clinical.vo.lookups.TTAStatus getTTAStatus()
	{
		return this.ttastatus;
	}
	public void setTTAStatus(ims.clinical.vo.lookups.TTAStatus value)
	{
		this.isValidated = false;
		this.ttastatus = value;
	}
	public boolean getHasHadAnyProceduresPerformedIsNotNull()
	{
		return this.hashadanyproceduresperformed != null;
	}
	public ims.core.vo.lookups.YesNo getHasHadAnyProceduresPerformed()
	{
		return this.hashadanyproceduresperformed;
	}
	public void setHasHadAnyProceduresPerformed(ims.core.vo.lookups.YesNo value)
	{
		this.isValidated = false;
		this.hashadanyproceduresperformed = value;
	}
	public boolean getAdditonalClinicalInfoIsNotNull()
	{
		return this.additonalclinicalinfo != null;
	}
	public ims.clinical.vo.lookups.AdditonalClinicalInformation getAdditonalClinicalInfo()
	{
		return this.additonalclinicalinfo;
	}
	public void setAdditonalClinicalInfo(ims.clinical.vo.lookups.AdditonalClinicalInformation value)
	{
		this.isValidated = false;
		this.additonalclinicalinfo = value;
	}
	public boolean getSummaryDetailsIsNotNull()
	{
		return this.summarydetails != null;
	}
	public ims.clinical.vo.EDischargeSTHKSummaryDetailVoCollection getSummaryDetails()
	{
		return this.summarydetails;
	}
	public void setSummaryDetails(ims.clinical.vo.EDischargeSTHKSummaryDetailVoCollection value)
	{
		this.isValidated = false;
		this.summarydetails = value;
	}
	public boolean getDischargeLetterStatusIsNotNull()
	{
		return this.dischargeletterstatus != null;
	}
	public ims.clinical.vo.lookups.DischargeLetterStatus getDischargeLetterStatus()
	{
		return this.dischargeletterstatus;
	}
	public void setDischargeLetterStatus(ims.clinical.vo.lookups.DischargeLetterStatus value)
	{
		this.isValidated = false;
		this.dischargeletterstatus = value;
	}
	public boolean getDischargeSupplementaryLetterStatusIsNotNull()
	{
		return this.dischargesupplementaryletterstatus != null;
	}
	public ims.clinical.vo.lookups.DischargeSupplementaryLetterStatus getDischargeSupplementaryLetterStatus()
	{
		return this.dischargesupplementaryletterstatus;
	}
	public void setDischargeSupplementaryLetterStatus(ims.clinical.vo.lookups.DischargeSupplementaryLetterStatus value)
	{
		this.isValidated = false;
		this.dischargesupplementaryletterstatus = value;
	}
	public boolean getDischargeDocumentsIsNotNull()
	{
		return this.dischargedocuments != null;
	}
	public ims.core.vo.PatientDocumentVoCollection getDischargeDocuments()
	{
		return this.dischargedocuments;
	}
	public void setDischargeDocuments(ims.core.vo.PatientDocumentVoCollection value)
	{
		this.isValidated = false;
		this.dischargedocuments = value;
	}
	public boolean getDischargeDetailsIsNotNull()
	{
		return this.dischargedetails != null;
	}
	public ims.edischarge.vo.DischargeDetailsRefVo getDischargeDetails()
	{
		return this.dischargedetails;
	}
	public void setDischargeDetails(ims.edischarge.vo.DischargeDetailsRefVo value)
	{
		this.isValidated = false;
		this.dischargedetails = value;
	}
	/**
	* isSummaryRecordComplete
	*/
	public boolean isSummaryRecordComplete()
	{
		boolean bDetailsComplete = true;
		for (int i =0 ; this.getSummaryDetailsIsNotNull() &&  i < this.getSummaryDetails().size() ; i++)
		{
			if (! (this.getSummaryDetails().get(i).getProgressStatusIsNotNull()
				&& this.getSummaryDetails().get(i).getProgressStatus().equals(ims.clinical.vo.lookups.EDischargeSummarySectionStatus.COMPLETED)))
				bDetailsComplete = false;
		}
			
		if (bDetailsComplete
			&& this.getTTAStatusIsNotNull()
			&& (this.getTTAStatus().equals(ims.clinical.vo.lookups.TTAStatus.NOT_REQUIRED)
					|| this.getTTAStatus().equals(ims.clinical.vo.lookups.TTAStatus.COMPLETED)) )
			return true;
			
		return false;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.summarydetails != null)
		{
			if(!this.summarydetails.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.dischargedocuments != null)
		{
			if(!this.dischargedocuments.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.carecontext == null)
			listOfErrors.add("CareContext is mandatory");
		if(this.admissiondatetime == null)
			listOfErrors.add("AdmissionDateTime is mandatory");
		if(this.summarydetails != null)
		{
			String[] listOfOtherErrors = this.summarydetails.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.dischargeletterstatus == null)
			listOfErrors.add("DischargeLetterStatus is mandatory");
		if(this.dischargedocuments != null)
		{
			String[] listOfOtherErrors = this.dischargedocuments.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		EDischargeSTHKSummaryVo clone = new EDischargeSTHKSummaryVo(this.id, this.version);
		
		clone.carecontext = this.carecontext;
		if(this.admissiondatetime == null)
			clone.admissiondatetime = null;
		else
			clone.admissiondatetime = (ims.framework.utils.DateTime)this.admissiondatetime.clone();
		if(this.ttastatus == null)
			clone.ttastatus = null;
		else
			clone.ttastatus = (ims.clinical.vo.lookups.TTAStatus)this.ttastatus.clone();
		if(this.hashadanyproceduresperformed == null)
			clone.hashadanyproceduresperformed = null;
		else
			clone.hashadanyproceduresperformed = (ims.core.vo.lookups.YesNo)this.hashadanyproceduresperformed.clone();
		if(this.additonalclinicalinfo == null)
			clone.additonalclinicalinfo = null;
		else
			clone.additonalclinicalinfo = (ims.clinical.vo.lookups.AdditonalClinicalInformation)this.additonalclinicalinfo.clone();
		if(this.summarydetails == null)
			clone.summarydetails = null;
		else
			clone.summarydetails = (ims.clinical.vo.EDischargeSTHKSummaryDetailVoCollection)this.summarydetails.clone();
		if(this.dischargeletterstatus == null)
			clone.dischargeletterstatus = null;
		else
			clone.dischargeletterstatus = (ims.clinical.vo.lookups.DischargeLetterStatus)this.dischargeletterstatus.clone();
		if(this.dischargesupplementaryletterstatus == null)
			clone.dischargesupplementaryletterstatus = null;
		else
			clone.dischargesupplementaryletterstatus = (ims.clinical.vo.lookups.DischargeSupplementaryLetterStatus)this.dischargesupplementaryletterstatus.clone();
		if(this.dischargedocuments == null)
			clone.dischargedocuments = null;
		else
			clone.dischargedocuments = (ims.core.vo.PatientDocumentVoCollection)this.dischargedocuments.clone();
		clone.dischargedetails = this.dischargedetails;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(EDischargeSTHKSummaryVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A EDischargeSTHKSummaryVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((EDischargeSTHKSummaryVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((EDischargeSTHKSummaryVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.carecontext != null)
			count++;
		if(this.admissiondatetime != null)
			count++;
		if(this.ttastatus != null)
			count++;
		if(this.hashadanyproceduresperformed != null)
			count++;
		if(this.additonalclinicalinfo != null)
			count++;
		if(this.summarydetails != null)
			count++;
		if(this.dischargeletterstatus != null)
			count++;
		if(this.dischargesupplementaryletterstatus != null)
			count++;
		if(this.dischargedocuments != null)
			count++;
		if(this.dischargedetails != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected ims.core.admin.vo.CareContextRefVo carecontext;
	protected ims.framework.utils.DateTime admissiondatetime;
	protected ims.clinical.vo.lookups.TTAStatus ttastatus;
	protected ims.core.vo.lookups.YesNo hashadanyproceduresperformed;
	protected ims.clinical.vo.lookups.AdditonalClinicalInformation additonalclinicalinfo;
	protected ims.clinical.vo.EDischargeSTHKSummaryDetailVoCollection summarydetails;
	protected ims.clinical.vo.lookups.DischargeLetterStatus dischargeletterstatus;
	protected ims.clinical.vo.lookups.DischargeSupplementaryLetterStatus dischargesupplementaryletterstatus;
	protected ims.core.vo.PatientDocumentVoCollection dischargedocuments;
	protected ims.edischarge.vo.DischargeDetailsRefVo dischargedetails;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
