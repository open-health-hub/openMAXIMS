//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.vo;

/**
 * Linked to coe.assessment.Personal Hygiene Feet business object (ID: 1012100036).
 */
public class PersonalHygieneFeetVo extends ims.coe.assessment.vo.PersonalHygieneFeetRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PersonalHygieneFeetVo()
	{
	}
	public PersonalHygieneFeetVo(Integer id, int version)
	{
		super(id, version);
	}
	public PersonalHygieneFeetVo(ims.coe.vo.beans.PersonalHygieneFeetVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.conditionoffeet = bean.getConditionOfFeet() == null ? null : ims.coe.vo.lookups.ConditionOfFeet.buildLookup(bean.getConditionOfFeet());
		this.patientbathefeet = bean.getPatientBatheFeet() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getPatientBatheFeet());
		this.patientattendchiropodist = bean.getPatientAttendChiropodist() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getPatientAttendChiropodist());
		this.referraltochiropodist = bean.getReferralToChiropodist() == null ? null : bean.getReferralToChiropodist().buildDate();
		this.feetfindings = ims.coe.vo.FeetFindingsCollection.buildFromBeanCollection(bean.getFeetFindings());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.coe.vo.beans.PersonalHygieneFeetVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.conditionoffeet = bean.getConditionOfFeet() == null ? null : ims.coe.vo.lookups.ConditionOfFeet.buildLookup(bean.getConditionOfFeet());
		this.patientbathefeet = bean.getPatientBatheFeet() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getPatientBatheFeet());
		this.patientattendchiropodist = bean.getPatientAttendChiropodist() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getPatientAttendChiropodist());
		this.referraltochiropodist = bean.getReferralToChiropodist() == null ? null : bean.getReferralToChiropodist().buildDate();
		this.feetfindings = ims.coe.vo.FeetFindingsCollection.buildFromBeanCollection(bean.getFeetFindings());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.coe.vo.beans.PersonalHygieneFeetVoBean bean = null;
		if(map != null)
			bean = (ims.coe.vo.beans.PersonalHygieneFeetVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.coe.vo.beans.PersonalHygieneFeetVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CONDITIONOFFEET"))
			return getConditionOfFeet();
		if(fieldName.equals("PATIENTBATHEFEET"))
			return getPatientBatheFeet();
		if(fieldName.equals("PATIENTATTENDCHIROPODIST"))
			return getPatientAttendChiropodist();
		if(fieldName.equals("REFERRALTOCHIROPODIST"))
			return getReferralToChiropodist();
		if(fieldName.equals("FEETFINDINGS"))
			return getFeetFindings();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getConditionOfFeetIsNotNull()
	{
		return this.conditionoffeet != null;
	}
	public ims.coe.vo.lookups.ConditionOfFeet getConditionOfFeet()
	{
		return this.conditionoffeet;
	}
	public void setConditionOfFeet(ims.coe.vo.lookups.ConditionOfFeet value)
	{
		this.isValidated = false;
		this.conditionoffeet = value;
	}
	public boolean getPatientBatheFeetIsNotNull()
	{
		return this.patientbathefeet != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getPatientBatheFeet()
	{
		return this.patientbathefeet;
	}
	public void setPatientBatheFeet(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.patientbathefeet = value;
	}
	public boolean getPatientAttendChiropodistIsNotNull()
	{
		return this.patientattendchiropodist != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getPatientAttendChiropodist()
	{
		return this.patientattendchiropodist;
	}
	public void setPatientAttendChiropodist(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.patientattendchiropodist = value;
	}
	public boolean getReferralToChiropodistIsNotNull()
	{
		return this.referraltochiropodist != null;
	}
	public ims.framework.utils.Date getReferralToChiropodist()
	{
		return this.referraltochiropodist;
	}
	public void setReferralToChiropodist(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.referraltochiropodist = value;
	}
	public boolean getFeetFindingsIsNotNull()
	{
		return this.feetfindings != null;
	}
	public ims.coe.vo.FeetFindingsCollection getFeetFindings()
	{
		return this.feetfindings;
	}
	public void setFeetFindings(ims.coe.vo.FeetFindingsCollection value)
	{
		this.isValidated = false;
		this.feetfindings = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.feetfindings != null)
		{
			if(!this.feetfindings.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.feetfindings != null)
		{
			String[] listOfOtherErrors = this.feetfindings.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PersonalHygieneFeetVo clone = new PersonalHygieneFeetVo(this.id, this.version);
		
		if(this.conditionoffeet == null)
			clone.conditionoffeet = null;
		else
			clone.conditionoffeet = (ims.coe.vo.lookups.ConditionOfFeet)this.conditionoffeet.clone();
		if(this.patientbathefeet == null)
			clone.patientbathefeet = null;
		else
			clone.patientbathefeet = (ims.core.vo.lookups.YesNoUnknown)this.patientbathefeet.clone();
		if(this.patientattendchiropodist == null)
			clone.patientattendchiropodist = null;
		else
			clone.patientattendchiropodist = (ims.core.vo.lookups.YesNoUnknown)this.patientattendchiropodist.clone();
		if(this.referraltochiropodist == null)
			clone.referraltochiropodist = null;
		else
			clone.referraltochiropodist = (ims.framework.utils.Date)this.referraltochiropodist.clone();
		if(this.feetfindings == null)
			clone.feetfindings = null;
		else
			clone.feetfindings = (ims.coe.vo.FeetFindingsCollection)this.feetfindings.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PersonalHygieneFeetVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PersonalHygieneFeetVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PersonalHygieneFeetVo compareObj = (PersonalHygieneFeetVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_PersonalHygieneFeet() == null && compareObj.getID_PersonalHygieneFeet() != null)
				return -1;
			if(this.getID_PersonalHygieneFeet() != null && compareObj.getID_PersonalHygieneFeet() == null)
				return 1;
			if(this.getID_PersonalHygieneFeet() != null && compareObj.getID_PersonalHygieneFeet() != null)
				retVal = this.getID_PersonalHygieneFeet().compareTo(compareObj.getID_PersonalHygieneFeet());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.conditionoffeet != null)
			count++;
		if(this.patientbathefeet != null)
			count++;
		if(this.patientattendchiropodist != null)
			count++;
		if(this.referraltochiropodist != null)
			count++;
		if(this.feetfindings != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.coe.vo.lookups.ConditionOfFeet conditionoffeet;
	protected ims.core.vo.lookups.YesNoUnknown patientbathefeet;
	protected ims.core.vo.lookups.YesNoUnknown patientattendchiropodist;
	protected ims.framework.utils.Date referraltochiropodist;
	protected ims.coe.vo.FeetFindingsCollection feetfindings;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
