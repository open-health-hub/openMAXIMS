//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.vo;

/**
 * Linked to nursing.assessment.Assessment Component business object (ID: 1015100001).
 */
public class AssessmentBowels extends ims.nursing.vo.AssessmentComponent implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AssessmentBowels()
	{
	}
	public AssessmentBowels(Integer id, int version)
	{
		super(id, version);
	}
	public AssessmentBowels(ims.coe.vo.beans.AssessmentBowelsBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.iscomplete = bean.getIsComplete();
		this.assessmentinfo = ims.nursing.vo.AssessmentInfoCollection.buildFromBeanCollection(bean.getAssessmentInfo());
		this.copy = bean.getCopy();
		this.componenttype = bean.getComponentType() == null ? null : ims.nursing.vo.lookups.AssessmentComponentType.buildLookup(bean.getComponentType());
		this.lastassessmentinfo = bean.getLastAssessmentInfo() == null ? null : bean.getLastAssessmentInfo().buildVo();
		this.careplantemplate = ims.nursing.vo.CarePlanTemplateCollection.buildFromBeanCollection(bean.getCarePlanTemplate());
		this.careplans = ims.nursing.vo.CarePlanCollection.buildFromBeanCollection(bean.getCarePlans());
		this.bowelostomy = bean.getBowelOstomy() == null ? null : bean.getBowelOstomy().buildVo();
		this.diarrhoea = bean.getDiarrhoea() == null ? null : bean.getDiarrhoea().buildVo();
		this.bowelsopen = bean.getBowelsOpen() == null ? null : ims.coe.vo.lookups.BowelsOpen.buildLookup(bean.getBowelsOpen());
		this.constipation = bean.getConstipation() == null ? null : bean.getConstipation().buildVo();
		this.bowelmedication = ims.coe.vo.BowelMedicationCollection.buildFromBeanCollection(bean.getBowelMedication());
		this.alternativesused = bean.getAlternativesUsed();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.coe.vo.beans.AssessmentBowelsBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.iscomplete = bean.getIsComplete();
		this.assessmentinfo = ims.nursing.vo.AssessmentInfoCollection.buildFromBeanCollection(bean.getAssessmentInfo());
		this.copy = bean.getCopy();
		this.componenttype = bean.getComponentType() == null ? null : ims.nursing.vo.lookups.AssessmentComponentType.buildLookup(bean.getComponentType());
		this.lastassessmentinfo = bean.getLastAssessmentInfo() == null ? null : bean.getLastAssessmentInfo().buildVo(map);
		this.careplantemplate = ims.nursing.vo.CarePlanTemplateCollection.buildFromBeanCollection(bean.getCarePlanTemplate());
		this.careplans = ims.nursing.vo.CarePlanCollection.buildFromBeanCollection(bean.getCarePlans());
		this.bowelostomy = bean.getBowelOstomy() == null ? null : bean.getBowelOstomy().buildVo(map);
		this.diarrhoea = bean.getDiarrhoea() == null ? null : bean.getDiarrhoea().buildVo(map);
		this.bowelsopen = bean.getBowelsOpen() == null ? null : ims.coe.vo.lookups.BowelsOpen.buildLookup(bean.getBowelsOpen());
		this.constipation = bean.getConstipation() == null ? null : bean.getConstipation().buildVo(map);
		this.bowelmedication = ims.coe.vo.BowelMedicationCollection.buildFromBeanCollection(bean.getBowelMedication());
		this.alternativesused = bean.getAlternativesUsed();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.coe.vo.beans.AssessmentBowelsBean bean = null;
		if(map != null)
			bean = (ims.coe.vo.beans.AssessmentBowelsBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.coe.vo.beans.AssessmentBowelsBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("BOWELOSTOMY"))
			return getBowelOstomy();
		if(fieldName.equals("DIARRHOEA"))
			return getDiarrhoea();
		if(fieldName.equals("BOWELSOPEN"))
			return getBowelsOpen();
		if(fieldName.equals("CONSTIPATION"))
			return getConstipation();
		if(fieldName.equals("BOWELMEDICATION"))
			return getBowelMedication();
		if(fieldName.equals("ALTERNATIVESUSED"))
			return getAlternativesUsed();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getBowelOstomyIsNotNull()
	{
		return this.bowelostomy != null;
	}
	public ims.nursing.vo.BowelOstomyVo getBowelOstomy()
	{
		return this.bowelostomy;
	}
	public void setBowelOstomy(ims.nursing.vo.BowelOstomyVo value)
	{
		this.isValidated = false;
		this.bowelostomy = value;
	}
	public boolean getDiarrhoeaIsNotNull()
	{
		return this.diarrhoea != null;
	}
	public ims.nursing.vo.DiarrhoeaVo getDiarrhoea()
	{
		return this.diarrhoea;
	}
	public void setDiarrhoea(ims.nursing.vo.DiarrhoeaVo value)
	{
		this.isValidated = false;
		this.diarrhoea = value;
	}
	public boolean getBowelsOpenIsNotNull()
	{
		return this.bowelsopen != null;
	}
	public ims.coe.vo.lookups.BowelsOpen getBowelsOpen()
	{
		return this.bowelsopen;
	}
	public void setBowelsOpen(ims.coe.vo.lookups.BowelsOpen value)
	{
		this.isValidated = false;
		this.bowelsopen = value;
	}
	public boolean getConstipationIsNotNull()
	{
		return this.constipation != null;
	}
	public ims.nursing.vo.ConstipationVo getConstipation()
	{
		return this.constipation;
	}
	public void setConstipation(ims.nursing.vo.ConstipationVo value)
	{
		this.isValidated = false;
		this.constipation = value;
	}
	public boolean getBowelMedicationIsNotNull()
	{
		return this.bowelmedication != null;
	}
	public ims.coe.vo.BowelMedicationCollection getBowelMedication()
	{
		return this.bowelmedication;
	}
	public void setBowelMedication(ims.coe.vo.BowelMedicationCollection value)
	{
		this.isValidated = false;
		this.bowelmedication = value;
	}
	public boolean getAlternativesUsedIsNotNull()
	{
		return this.alternativesused != null;
	}
	public String getAlternativesUsed()
	{
		return this.alternativesused;
	}
	public static int getAlternativesUsedMaxLength()
	{
		return 255;
	}
	public void setAlternativesUsed(String value)
	{
		this.isValidated = false;
		this.alternativesused = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.assessmentinfo != null)
		{
			if(!this.assessmentinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.lastassessmentinfo != null)
		{
			if(!this.lastassessmentinfo.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.careplantemplate != null)
		{
			if(!this.careplantemplate.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.careplans != null)
		{
			if(!this.careplans.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.bowelostomy != null)
		{
			if(!this.bowelostomy.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.diarrhoea != null)
		{
			if(!this.diarrhoea.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.constipation != null)
		{
			if(!this.constipation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.bowelmedication != null)
		{
			if(!this.bowelmedication.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.assessmentinfo != null)
		{
			String[] listOfOtherErrors = this.assessmentinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.lastassessmentinfo != null)
		{
			String[] listOfOtherErrors = this.lastassessmentinfo.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.careplantemplate != null)
		{
			String[] listOfOtherErrors = this.careplantemplate.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.careplans != null)
		{
			String[] listOfOtherErrors = this.careplans.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.bowelostomy != null)
		{
			String[] listOfOtherErrors = this.bowelostomy.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.diarrhoea != null)
		{
			String[] listOfOtherErrors = this.diarrhoea.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.constipation != null)
		{
			String[] listOfOtherErrors = this.constipation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.bowelmedication != null)
		{
			String[] listOfOtherErrors = this.bowelmedication.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AssessmentBowels clone = new AssessmentBowels(this.id, this.version);
		
		clone.iscomplete = this.iscomplete;
		if(this.assessmentinfo == null)
			clone.assessmentinfo = null;
		else
			clone.assessmentinfo = (ims.nursing.vo.AssessmentInfoCollection)this.assessmentinfo.clone();
		clone.copy = this.copy;
		if(this.componenttype == null)
			clone.componenttype = null;
		else
			clone.componenttype = (ims.nursing.vo.lookups.AssessmentComponentType)this.componenttype.clone();
		if(this.lastassessmentinfo == null)
			clone.lastassessmentinfo = null;
		else
			clone.lastassessmentinfo = (ims.nursing.vo.AssessmentInfo)this.lastassessmentinfo.clone();
		if(this.careplantemplate == null)
			clone.careplantemplate = null;
		else
			clone.careplantemplate = (ims.nursing.vo.CarePlanTemplateCollection)this.careplantemplate.clone();
		if(this.careplans == null)
			clone.careplans = null;
		else
			clone.careplans = (ims.nursing.vo.CarePlanCollection)this.careplans.clone();
		if(this.bowelostomy == null)
			clone.bowelostomy = null;
		else
			clone.bowelostomy = (ims.nursing.vo.BowelOstomyVo)this.bowelostomy.clone();
		if(this.diarrhoea == null)
			clone.diarrhoea = null;
		else
			clone.diarrhoea = (ims.nursing.vo.DiarrhoeaVo)this.diarrhoea.clone();
		if(this.bowelsopen == null)
			clone.bowelsopen = null;
		else
			clone.bowelsopen = (ims.coe.vo.lookups.BowelsOpen)this.bowelsopen.clone();
		if(this.constipation == null)
			clone.constipation = null;
		else
			clone.constipation = (ims.nursing.vo.ConstipationVo)this.constipation.clone();
		if(this.bowelmedication == null)
			clone.bowelmedication = null;
		else
			clone.bowelmedication = (ims.coe.vo.BowelMedicationCollection)this.bowelmedication.clone();
		clone.alternativesused = this.alternativesused;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AssessmentBowels.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AssessmentBowels object cannot be compared an Object of type " + obj.getClass().getName());
		}
		AssessmentBowels compareObj = (AssessmentBowels)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_AssessmentComponent() == null && compareObj.getID_AssessmentComponent() != null)
				return -1;
			if(this.getID_AssessmentComponent() != null && compareObj.getID_AssessmentComponent() == null)
				return 1;
			if(this.getID_AssessmentComponent() != null && compareObj.getID_AssessmentComponent() != null)
				retVal = this.getID_AssessmentComponent().compareTo(compareObj.getID_AssessmentComponent());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.bowelostomy != null)
			count++;
		if(this.diarrhoea != null)
			count++;
		if(this.bowelsopen != null)
			count++;
		if(this.constipation != null)
			count++;
		if(this.bowelmedication != null)
			count++;
		if(this.alternativesused != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 6;
	}
	protected ims.nursing.vo.BowelOstomyVo bowelostomy;
	protected ims.nursing.vo.DiarrhoeaVo diarrhoea;
	protected ims.coe.vo.lookups.BowelsOpen bowelsopen;
	protected ims.nursing.vo.ConstipationVo constipation;
	protected ims.coe.vo.BowelMedicationCollection bowelmedication;
	protected String alternativesused;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
