//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.coe.vo;

/**
 * Linked to coe.assessment.Accommodation Housing business object (ID: 1012100002).
 */
public class AccommodationHousingVo extends ims.coe.assessment.vo.AccommodationHousingRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AccommodationHousingVo()
	{
	}
	public AccommodationHousingVo(Integer id, int version)
	{
		super(id, version);
	}
	public AccommodationHousingVo(ims.coe.vo.beans.AccommodationHousingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.currentlivingarrangements = bean.getCurrentLivingArrangements() == null ? null : ims.coe.vo.lookups.AccommodationLivingArrangements.buildLookup(bean.getCurrentLivingArrangements());
		this.currentlivingarrangementsnotes = bean.getCurrentLivingArrangementsNotes();
		this.accommodation = bean.getAccommodation() == null ? null : ims.coe.vo.lookups.AccommodationHousing.buildLookup(bean.getAccommodation());
		this.accommodationnotes = bean.getAccommodationNotes();
		this.assisstancetoothers = bean.getAssisstanceToOthers() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getAssisstanceToOthers());
		this.assistancetoothersnotes = bean.getAssistanceToOthersNotes();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.coe.vo.beans.AccommodationHousingVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.currentlivingarrangements = bean.getCurrentLivingArrangements() == null ? null : ims.coe.vo.lookups.AccommodationLivingArrangements.buildLookup(bean.getCurrentLivingArrangements());
		this.currentlivingarrangementsnotes = bean.getCurrentLivingArrangementsNotes();
		this.accommodation = bean.getAccommodation() == null ? null : ims.coe.vo.lookups.AccommodationHousing.buildLookup(bean.getAccommodation());
		this.accommodationnotes = bean.getAccommodationNotes();
		this.assisstancetoothers = bean.getAssisstanceToOthers() == null ? null : ims.core.vo.lookups.YesNoUnknown.buildLookup(bean.getAssisstanceToOthers());
		this.assistancetoothersnotes = bean.getAssistanceToOthersNotes();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.coe.vo.beans.AccommodationHousingVoBean bean = null;
		if(map != null)
			bean = (ims.coe.vo.beans.AccommodationHousingVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.coe.vo.beans.AccommodationHousingVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CURRENTLIVINGARRANGEMENTS"))
			return getCurrentLivingArrangements();
		if(fieldName.equals("CURRENTLIVINGARRANGEMENTSNOTES"))
			return getCurrentLivingArrangementsNotes();
		if(fieldName.equals("ACCOMMODATION"))
			return getAccommodation();
		if(fieldName.equals("ACCOMMODATIONNOTES"))
			return getAccommodationNotes();
		if(fieldName.equals("ASSISSTANCETOOTHERS"))
			return getAssisstanceToOthers();
		if(fieldName.equals("ASSISTANCETOOTHERSNOTES"))
			return getAssistanceToOthersNotes();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getCurrentLivingArrangementsIsNotNull()
	{
		return this.currentlivingarrangements != null;
	}
	public ims.coe.vo.lookups.AccommodationLivingArrangements getCurrentLivingArrangements()
	{
		return this.currentlivingarrangements;
	}
	public void setCurrentLivingArrangements(ims.coe.vo.lookups.AccommodationLivingArrangements value)
	{
		this.isValidated = false;
		this.currentlivingarrangements = value;
	}
	public boolean getCurrentLivingArrangementsNotesIsNotNull()
	{
		return this.currentlivingarrangementsnotes != null;
	}
	public String getCurrentLivingArrangementsNotes()
	{
		return this.currentlivingarrangementsnotes;
	}
	public static int getCurrentLivingArrangementsNotesMaxLength()
	{
		return 255;
	}
	public void setCurrentLivingArrangementsNotes(String value)
	{
		this.isValidated = false;
		this.currentlivingarrangementsnotes = value;
	}
	public boolean getAccommodationIsNotNull()
	{
		return this.accommodation != null;
	}
	public ims.coe.vo.lookups.AccommodationHousing getAccommodation()
	{
		return this.accommodation;
	}
	public void setAccommodation(ims.coe.vo.lookups.AccommodationHousing value)
	{
		this.isValidated = false;
		this.accommodation = value;
	}
	public boolean getAccommodationNotesIsNotNull()
	{
		return this.accommodationnotes != null;
	}
	public String getAccommodationNotes()
	{
		return this.accommodationnotes;
	}
	public static int getAccommodationNotesMaxLength()
	{
		return 255;
	}
	public void setAccommodationNotes(String value)
	{
		this.isValidated = false;
		this.accommodationnotes = value;
	}
	public boolean getAssisstanceToOthersIsNotNull()
	{
		return this.assisstancetoothers != null;
	}
	public ims.core.vo.lookups.YesNoUnknown getAssisstanceToOthers()
	{
		return this.assisstancetoothers;
	}
	public void setAssisstanceToOthers(ims.core.vo.lookups.YesNoUnknown value)
	{
		this.isValidated = false;
		this.assisstancetoothers = value;
	}
	public boolean getAssistanceToOthersNotesIsNotNull()
	{
		return this.assistancetoothersnotes != null;
	}
	public String getAssistanceToOthersNotes()
	{
		return this.assistancetoothersnotes;
	}
	public static int getAssistanceToOthersNotesMaxLength()
	{
		return 255;
	}
	public void setAssistanceToOthersNotes(String value)
	{
		this.isValidated = false;
		this.assistancetoothersnotes = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AccommodationHousingVo clone = new AccommodationHousingVo(this.id, this.version);
		
		if(this.currentlivingarrangements == null)
			clone.currentlivingarrangements = null;
		else
			clone.currentlivingarrangements = (ims.coe.vo.lookups.AccommodationLivingArrangements)this.currentlivingarrangements.clone();
		clone.currentlivingarrangementsnotes = this.currentlivingarrangementsnotes;
		if(this.accommodation == null)
			clone.accommodation = null;
		else
			clone.accommodation = (ims.coe.vo.lookups.AccommodationHousing)this.accommodation.clone();
		clone.accommodationnotes = this.accommodationnotes;
		if(this.assisstancetoothers == null)
			clone.assisstancetoothers = null;
		else
			clone.assisstancetoothers = (ims.core.vo.lookups.YesNoUnknown)this.assisstancetoothers.clone();
		clone.assistancetoothersnotes = this.assistancetoothersnotes;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AccommodationHousingVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AccommodationHousingVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((AccommodationHousingVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((AccommodationHousingVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.currentlivingarrangements != null)
			count++;
		if(this.currentlivingarrangementsnotes != null)
			count++;
		if(this.accommodation != null)
			count++;
		if(this.accommodationnotes != null)
			count++;
		if(this.assisstancetoothers != null)
			count++;
		if(this.assistancetoothersnotes != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.coe.vo.lookups.AccommodationLivingArrangements currentlivingarrangements;
	protected String currentlivingarrangementsnotes;
	protected ims.coe.vo.lookups.AccommodationHousing accommodation;
	protected String accommodationnotes;
	protected ims.core.vo.lookups.YesNoUnknown assisstancetoothers;
	protected String assistancetoothersnotes;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
