//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.assessment.vo;

/**
 * Linked to Assessment.Instantiation.PatientAssessmentData business object (ID: 1003100050).
 */
public class PatientAssessmentDataVo extends ims.assessment.instantiation.vo.PatientAssessmentDataRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientAssessmentDataVo()
	{
	}
	public PatientAssessmentDataVo(Integer id, int version)
	{
		super(id, version);
	}
	public PatientAssessmentDataVo(ims.assessment.vo.beans.PatientAssessmentDataVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.userassessment = bean.getUserAssessment() == null ? null : bean.getUserAssessment().buildVo();
		this.graphic = bean.getGraphic() == null ? null : bean.getGraphic().buildVo();
		this.graphicfindings = ims.assessment.vo.PatientGraphicAssessmentVoCollection.buildFromBeanCollection(bean.getGraphicFindings());
		this.answergroups = ims.assessment.vo.PatientAssessmentGroupVoCollection.buildFromBeanCollection(bean.getAnswerGroups());
		this.groupquestionwidth = bean.getGroupQuestionWidth();
		this.graphicquestion = ims.assessment.vo.PatientGraphicAssessmentQuestionAnswerVoCollection.buildFromBeanCollection(bean.getGraphicQuestion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.assessment.vo.beans.PatientAssessmentDataVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.userassessment = bean.getUserAssessment() == null ? null : bean.getUserAssessment().buildVo(map);
		this.graphic = bean.getGraphic() == null ? null : bean.getGraphic().buildVo(map);
		this.graphicfindings = ims.assessment.vo.PatientGraphicAssessmentVoCollection.buildFromBeanCollection(bean.getGraphicFindings());
		this.answergroups = ims.assessment.vo.PatientAssessmentGroupVoCollection.buildFromBeanCollection(bean.getAnswerGroups());
		this.groupquestionwidth = bean.getGroupQuestionWidth();
		this.graphicquestion = ims.assessment.vo.PatientGraphicAssessmentQuestionAnswerVoCollection.buildFromBeanCollection(bean.getGraphicQuestion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.assessment.vo.beans.PatientAssessmentDataVoBean bean = null;
		if(map != null)
			bean = (ims.assessment.vo.beans.PatientAssessmentDataVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.assessment.vo.beans.PatientAssessmentDataVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("USERASSESSMENT"))
			return getUserAssessment();
		if(fieldName.equals("GRAPHIC"))
			return getGraphic();
		if(fieldName.equals("GRAPHICFINDINGS"))
			return getGraphicFindings();
		if(fieldName.equals("ANSWERGROUPS"))
			return getAnswerGroups();
		if(fieldName.equals("GROUPQUESTIONWIDTH"))
			return getGroupQuestionWidth();
		if(fieldName.equals("GRAPHICQUESTION"))
			return getGraphicQuestion();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getUserAssessmentIsNotNull()
	{
		return this.userassessment != null;
	}
	public ims.assessment.vo.UserAssessmentVo getUserAssessment()
	{
		return this.userassessment;
	}
	public void setUserAssessment(ims.assessment.vo.UserAssessmentVo value)
	{
		this.isValidated = false;
		this.userassessment = value;
	}
	public boolean getGraphicIsNotNull()
	{
		return this.graphic != null;
	}
	public ims.assessment.vo.GraphicAssessmentVo getGraphic()
	{
		return this.graphic;
	}
	public void setGraphic(ims.assessment.vo.GraphicAssessmentVo value)
	{
		this.isValidated = false;
		this.graphic = value;
	}
	public boolean getGraphicFindingsIsNotNull()
	{
		return this.graphicfindings != null;
	}
	public ims.assessment.vo.PatientGraphicAssessmentVoCollection getGraphicFindings()
	{
		return this.graphicfindings;
	}
	public void setGraphicFindings(ims.assessment.vo.PatientGraphicAssessmentVoCollection value)
	{
		this.isValidated = false;
		this.graphicfindings = value;
	}
	public boolean getAnswerGroupsIsNotNull()
	{
		return this.answergroups != null;
	}
	public ims.assessment.vo.PatientAssessmentGroupVoCollection getAnswerGroups()
	{
		return this.answergroups;
	}
	public void setAnswerGroups(ims.assessment.vo.PatientAssessmentGroupVoCollection value)
	{
		this.isValidated = false;
		this.answergroups = value;
	}
	public boolean getGroupQuestionWidthIsNotNull()
	{
		return this.groupquestionwidth != null;
	}
	public Integer getGroupQuestionWidth()
	{
		return this.groupquestionwidth;
	}
	public void setGroupQuestionWidth(Integer value)
	{
		this.isValidated = false;
		this.groupquestionwidth = value;
	}
	public boolean getGraphicQuestionIsNotNull()
	{
		return this.graphicquestion != null;
	}
	public ims.assessment.vo.PatientGraphicAssessmentQuestionAnswerVoCollection getGraphicQuestion()
	{
		return this.graphicquestion;
	}
	public void setGraphicQuestion(ims.assessment.vo.PatientGraphicAssessmentQuestionAnswerVoCollection value)
	{
		this.isValidated = false;
		this.graphicquestion = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.graphicfindings != null)
		{
			if(!this.graphicfindings.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.answergroups != null)
		{
			if(!this.answergroups.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.graphicquestion != null)
		{
			if(!this.graphicquestion.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.graphicfindings != null)
		{
			String[] listOfOtherErrors = this.graphicfindings.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.answergroups != null)
		{
			String[] listOfOtherErrors = this.answergroups.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.groupquestionwidth != null && (this.groupquestionwidth.intValue() < 50 || this.groupquestionwidth.intValue() > 600))
			listOfErrors.add("The field [groupquestionwidth] in the value object [ims.assessment.vo.PatientAssessmentDataVo] has an invalid value. The valid range of values is between 50 and 600");
		if(this.graphicquestion != null)
		{
			String[] listOfOtherErrors = this.graphicquestion.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientAssessmentDataVo clone = new PatientAssessmentDataVo(this.id, this.version);
		
		if(this.userassessment == null)
			clone.userassessment = null;
		else
			clone.userassessment = (ims.assessment.vo.UserAssessmentVo)this.userassessment.clone();
		if(this.graphic == null)
			clone.graphic = null;
		else
			clone.graphic = (ims.assessment.vo.GraphicAssessmentVo)this.graphic.clone();
		if(this.graphicfindings == null)
			clone.graphicfindings = null;
		else
			clone.graphicfindings = (ims.assessment.vo.PatientGraphicAssessmentVoCollection)this.graphicfindings.clone();
		if(this.answergroups == null)
			clone.answergroups = null;
		else
			clone.answergroups = (ims.assessment.vo.PatientAssessmentGroupVoCollection)this.answergroups.clone();
		clone.groupquestionwidth = this.groupquestionwidth;
		if(this.graphicquestion == null)
			clone.graphicquestion = null;
		else
			clone.graphicquestion = (ims.assessment.vo.PatientGraphicAssessmentQuestionAnswerVoCollection)this.graphicquestion.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientAssessmentDataVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientAssessmentDataVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PatientAssessmentDataVo compareObj = (PatientAssessmentDataVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_PatientAssessmentData() == null && compareObj.getID_PatientAssessmentData() != null)
				return -1;
			if(this.getID_PatientAssessmentData() != null && compareObj.getID_PatientAssessmentData() == null)
				return 1;
			if(this.getID_PatientAssessmentData() != null && compareObj.getID_PatientAssessmentData() != null)
				retVal = this.getID_PatientAssessmentData().compareTo(compareObj.getID_PatientAssessmentData());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.userassessment != null)
			count++;
		if(this.graphic != null)
			count++;
		if(this.graphicfindings != null)
			count++;
		if(this.answergroups != null)
			count++;
		if(this.groupquestionwidth != null)
			count++;
		if(this.graphicquestion != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected ims.assessment.vo.UserAssessmentVo userassessment;
	protected ims.assessment.vo.GraphicAssessmentVo graphic;
	protected ims.assessment.vo.PatientGraphicAssessmentVoCollection graphicfindings;
	protected ims.assessment.vo.PatientAssessmentGroupVoCollection answergroups;
	protected Integer groupquestionwidth;
	protected ims.assessment.vo.PatientGraphicAssessmentQuestionAnswerVoCollection graphicquestion;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
