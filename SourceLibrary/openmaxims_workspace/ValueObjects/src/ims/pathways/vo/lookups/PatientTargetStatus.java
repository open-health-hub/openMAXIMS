//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.pathways.vo.lookups;

import ims.framework.cn.data.TreeNode;
import java.util.ArrayList;
import ims.framework.utils.Image;
import ims.framework.utils.Color;

public class PatientTargetStatus extends ims.vo.LookupInstVo implements TreeNode
{
	private static final long serialVersionUID = 1L;

	public PatientTargetStatus()
	{
		super();
	}
	public PatientTargetStatus(int id)
	{
		super(id, "", true);
	}
	public PatientTargetStatus(int id, String text, boolean active)
	{
		super(id, text, active, null, null, null);
	}
	public PatientTargetStatus(int id, String text, boolean active, PatientTargetStatus parent, Image image)
	{
		super(id, text, active, parent, image);
	}
	public PatientTargetStatus(int id, String text, boolean active, PatientTargetStatus parent, Image image, Color color)
	{
		super(id, text, active, parent, image, color);
	}
	public PatientTargetStatus(int id, String text, boolean active, PatientTargetStatus parent, Image image, Color color, int order)
	{
		super(id, text, active, parent, image, color, order);
	}
	public static PatientTargetStatus buildLookup(ims.vo.LookupInstanceBean bean)
	{
		return new PatientTargetStatus(bean.getId(), bean.getText(), bean.isActive());
	}
	public String toString()
	{
		if(getText() != null)
			return getText();
		return "";
	}
	public TreeNode getParentNode()
	{
		return (PatientTargetStatus)super.getParentInstance();
	}
	public PatientTargetStatus getParent()
	{
		return (PatientTargetStatus)super.getParentInstance();
	}
	public void setParent(PatientTargetStatus parent)
	{
		super.setParentInstance(parent);
	}
	public TreeNode[] getChildren()
	{
		ArrayList children = super.getChildInstances();
		PatientTargetStatus[] typedChildren = new PatientTargetStatus[children.size()];
		for (int i = 0; i < children.size(); i++)
		{
			typedChildren[i] = (PatientTargetStatus)children.get(i);
		}
		return typedChildren;
	}
	public int addChild(TreeNode child)
	{
		if (child instanceof PatientTargetStatus)
		{
			super.addChild((PatientTargetStatus)child);
		}
		return super.getChildInstances().size();
	}
	public int removeChild(TreeNode child)
	{
		if (child instanceof PatientTargetStatus)
		{
			super.removeChild((PatientTargetStatus)child);
		}
		return super.getChildInstances().size();
	}
	public Image getExpandedImage()
	{
		return super.getImage();
	}
	public Image getCollapsedImage()
	{
		return super.getImage();
	}
	public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()
	{
		PatientTargetStatusCollection result = new PatientTargetStatusCollection();
		result.add(INSCOPE);
		result.add(NOTINSCOPE);
		result.add(TARGETACHIEVED);
		result.add(EVENTSCHEDULED);
		result.add(EVENTCANCELLED);
		result.add(DNA);
		result.add(CLOCKSTOP);
		result.add(PAUSE);
		result.add(UNPAUSE);
		result.add(INSCOPE_PREV_PATHWAY);
		result.add(RECALCULATE_ONLY);
		return result;
	}
	public static PatientTargetStatus[] getNegativeInstances()
	{
		PatientTargetStatus[] instances = new PatientTargetStatus[11];
		instances[0] = INSCOPE;
		instances[1] = NOTINSCOPE;
		instances[2] = TARGETACHIEVED;
		instances[3] = EVENTSCHEDULED;
		instances[4] = EVENTCANCELLED;
		instances[5] = DNA;
		instances[6] = CLOCKSTOP;
		instances[7] = PAUSE;
		instances[8] = UNPAUSE;
		instances[9] = INSCOPE_PREV_PATHWAY;
		instances[10] = RECALCULATE_ONLY;
		return instances;
	}
	public static String[] getNegativeInstanceNames()
	{
		String[] negativeInstances = new String[11];
		negativeInstances[0] = "INSCOPE";
		negativeInstances[1] = "NOTINSCOPE";
		negativeInstances[2] = "TARGETACHIEVED";
		negativeInstances[3] = "EVENTSCHEDULED";
		negativeInstances[4] = "EVENTCANCELLED";
		negativeInstances[5] = "DNA";
		negativeInstances[6] = "CLOCKSTOP";
		negativeInstances[7] = "PAUSE";
		negativeInstances[8] = "UNPAUSE";
		negativeInstances[9] = "INSCOPE_PREV_PATHWAY";
		negativeInstances[10] = "RECALCULATE_ONLY";
		return negativeInstances;
	}
	public static PatientTargetStatus getNegativeInstance(String name)
	{
		if(name == null)
			return null;
		String[] negativeInstances = getNegativeInstanceNames();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].equals(name))
				return getNegativeInstances()[i];
		}
		return null;
	}
	public static PatientTargetStatus getNegativeInstance(Integer id)
	{
		if(id == null)
			return null;
		PatientTargetStatus[] negativeInstances = getNegativeInstances();
		for (int i = 0; i < negativeInstances.length; i++)
		{
			if(negativeInstances[i].getID() == id)
				return negativeInstances[i];
		}
		return null;
	}
	public int getTypeId()
	{
		return TYPE_ID;
	}
	public static final int TYPE_ID = 1321004;
	public static final PatientTargetStatus INSCOPE = new PatientTargetStatus(-1310, "In Scope", true, null, null, Color.Default);
	public static final PatientTargetStatus NOTINSCOPE = new PatientTargetStatus(-1311, "Not In Scope", true, null, null, Color.Default);
	public static final PatientTargetStatus TARGETACHIEVED = new PatientTargetStatus(-1312, "Target Achieved", true, null, null, Color.Default);
	public static final PatientTargetStatus EVENTSCHEDULED = new PatientTargetStatus(-1324, "Event Scheduled", true, null, null, Color.Default);
	public static final PatientTargetStatus EVENTCANCELLED = new PatientTargetStatus(-1326, "Event Cancelled", true, null, null, Color.Default);
	public static final PatientTargetStatus DNA = new PatientTargetStatus(-1325, "DNA", true, null, null, Color.Default);
	public static final PatientTargetStatus CLOCKSTOP = new PatientTargetStatus(-1343, "Clock Stop", true, null, null, Color.Default);
	public static final PatientTargetStatus PAUSE = new PatientTargetStatus(-1627, "Target Paused", true, null, null, Color.Default);
	public static final PatientTargetStatus UNPAUSE = new PatientTargetStatus(-1628, "Target Unpaused", true, null, null, Color.Default);
	public static final PatientTargetStatus INSCOPE_PREV_PATHWAY = new PatientTargetStatus(-1809, "Inscope for Previous Pathway (not current)", true, null, null, Color.Default);
	public static final PatientTargetStatus RECALCULATE_ONLY = new PatientTargetStatus(-1849, "Recalculate Target Date - do not modify status", true, null, null, Color.Default);
}
