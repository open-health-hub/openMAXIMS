//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to emergency.Configuration.ColumnDetail business object (ID: 1087100002).
 */
public class ColumnDetailVo extends ims.emergency.configuration.vo.ColumnDetailRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ColumnDetailVo()
	{
	}
	public ColumnDetailVo(Integer id, int version)
	{
		super(id, version);
	}
	public ColumnDetailVo(ims.emergency.vo.beans.ColumnDetailVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.colheader = bean.getColHeader();
		this.colwidth = bean.getColWidth();
		this.displayimage = bean.getDisplayImage();
		this.image = bean.getImage() == null ? null : new ims.core.configuration.vo.AppImageRefVo(new Integer(bean.getImage().getId()), bean.getImage().getVersion());
		this.column = bean.getColumn() == null ? null : ims.emergency.vo.lookups.TrackingAreaColumn.buildLookup(bean.getColumn());
		this.ischecked = bean.getIsChecked();
		this.maskinpublicarea = bean.getMaskInPublicArea();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.ColumnDetailVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.colheader = bean.getColHeader();
		this.colwidth = bean.getColWidth();
		this.displayimage = bean.getDisplayImage();
		this.image = bean.getImage() == null ? null : new ims.core.configuration.vo.AppImageRefVo(new Integer(bean.getImage().getId()), bean.getImage().getVersion());
		this.column = bean.getColumn() == null ? null : ims.emergency.vo.lookups.TrackingAreaColumn.buildLookup(bean.getColumn());
		this.ischecked = bean.getIsChecked();
		this.maskinpublicarea = bean.getMaskInPublicArea();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.ColumnDetailVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.ColumnDetailVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.ColumnDetailVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("COLHEADER"))
			return getColHeader();
		if(fieldName.equals("COLWIDTH"))
			return getColWidth();
		if(fieldName.equals("DISPLAYIMAGE"))
			return getDisplayImage();
		if(fieldName.equals("IMAGE"))
			return getImage();
		if(fieldName.equals("COLUMN"))
			return getColumn();
		if(fieldName.equals("ISCHECKED"))
			return getIsChecked();
		if(fieldName.equals("MASKINPUBLICAREA"))
			return getMaskInPublicArea();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getColHeaderIsNotNull()
	{
		return this.colheader != null;
	}
	public String getColHeader()
	{
		return this.colheader;
	}
	public static int getColHeaderMaxLength()
	{
		return 50;
	}
	public void setColHeader(String value)
	{
		this.isValidated = false;
		this.colheader = value;
	}
	public boolean getColWidthIsNotNull()
	{
		return this.colwidth != null;
	}
	public Integer getColWidth()
	{
		return this.colwidth;
	}
	public void setColWidth(Integer value)
	{
		this.isValidated = false;
		this.colwidth = value;
	}
	public boolean getDisplayImageIsNotNull()
	{
		return this.displayimage != null;
	}
	public Boolean getDisplayImage()
	{
		return this.displayimage;
	}
	public void setDisplayImage(Boolean value)
	{
		this.isValidated = false;
		this.displayimage = value;
	}
	public boolean getImageIsNotNull()
	{
		return this.image != null;
	}
	public ims.core.configuration.vo.AppImageRefVo getImage()
	{
		return this.image;
	}
	public void setImage(ims.core.configuration.vo.AppImageRefVo value)
	{
		this.isValidated = false;
		this.image = value;
	}
	public boolean getColumnIsNotNull()
	{
		return this.column != null;
	}
	public ims.emergency.vo.lookups.TrackingAreaColumn getColumn()
	{
		return this.column;
	}
	public void setColumn(ims.emergency.vo.lookups.TrackingAreaColumn value)
	{
		this.isValidated = false;
		this.column = value;
	}
	public boolean getIsCheckedIsNotNull()
	{
		return this.ischecked != null;
	}
	public Boolean getIsChecked()
	{
		return this.ischecked;
	}
	public void setIsChecked(Boolean value)
	{
		this.isValidated = false;
		this.ischecked = value;
	}
	public boolean getMaskInPublicAreaIsNotNull()
	{
		return this.maskinpublicarea != null;
	}
	public Boolean getMaskInPublicArea()
	{
		return this.maskinpublicarea;
	}
	public void setMaskInPublicArea(Boolean value)
	{
		this.isValidated = false;
		this.maskinpublicarea = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.colheader == null || this.colheader.length() == 0)
			listOfErrors.add("ColHeader is mandatory");
		else if(this.colheader.length() > 50)
			listOfErrors.add("The length of the field [colheader] in the value object [ims.emergency.vo.ColumnDetailVo] is too big. It should be less or equal to 50");
		if(this.colwidth == null)
			listOfErrors.add("ColWidth is mandatory");
		if(this.column == null)
			listOfErrors.add("Column is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ColumnDetailVo clone = new ColumnDetailVo(this.id, this.version);
		
		clone.colheader = this.colheader;
		clone.colwidth = this.colwidth;
		clone.displayimage = this.displayimage;
		clone.image = this.image;
		if(this.column == null)
			clone.column = null;
		else
			clone.column = (ims.emergency.vo.lookups.TrackingAreaColumn)this.column.clone();
		clone.ischecked = this.ischecked;
		clone.maskinpublicarea = this.maskinpublicarea;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ColumnDetailVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ColumnDetailVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ColumnDetailVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ColumnDetailVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.colheader != null)
			count++;
		if(this.colwidth != null)
			count++;
		if(this.displayimage != null)
			count++;
		if(this.image != null)
			count++;
		if(this.column != null)
			count++;
		if(this.ischecked != null)
			count++;
		if(this.maskinpublicarea != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected String colheader;
	protected Integer colwidth;
	protected Boolean displayimage;
	protected ims.core.configuration.vo.AppImageRefVo image;
	protected ims.emergency.vo.lookups.TrackingAreaColumn column;
	protected Boolean ischecked;
	protected Boolean maskinpublicarea;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
