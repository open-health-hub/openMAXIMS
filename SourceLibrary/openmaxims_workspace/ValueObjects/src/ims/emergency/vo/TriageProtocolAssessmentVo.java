//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to emergency.TriageProtocolAssessment business object (ID: 1086100018).
 */
public class TriageProtocolAssessmentVo extends ims.emergency.vo.TriageProtocolAssessmentRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public TriageProtocolAssessmentVo()
	{
	}
	public TriageProtocolAssessmentVo(Integer id, int version)
	{
		super(id, version);
	}
	public TriageProtocolAssessmentVo(ims.emergency.vo.beans.TriageProtocolAssessmentVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisode().getId()), bean.getEpisode().getVersion());
		this.attendance = bean.getAttendance() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getAttendance().getId()), bean.getAttendance().getVersion());
		this.triagepriority = bean.getTriagePriority() == null ? null : ims.emergency.vo.lookups.TriagePriority.buildLookup(bean.getTriagePriority());
		this.patientproblem = bean.getPatientProblem() == null ? null : bean.getPatientProblem().buildVo();
		this.ismain = bean.getIsMain();
		this.triageprotocol = bean.getTriageProtocol() == null ? null : new ims.emergency.configuration.vo.ManchesterTriageProtocolConfigurationRefVo(new Integer(bean.getTriageProtocol().getId()), bean.getTriageProtocol().getVersion());
		this.discriminator = bean.getDiscriminator() == null ? null : bean.getDiscriminator().buildVo();
		this.assessmentdatetime = bean.getAssessmentDateTime() == null ? null : bean.getAssessmentDateTime().buildDateTime();
		this.assessmentnurse = bean.getAssessmentNurse() == null ? null : bean.getAssessmentNurse().buildVo();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.TriageProtocolAssessmentVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisode().getId()), bean.getEpisode().getVersion());
		this.attendance = bean.getAttendance() == null ? null : new ims.core.admin.vo.CareContextRefVo(new Integer(bean.getAttendance().getId()), bean.getAttendance().getVersion());
		this.triagepriority = bean.getTriagePriority() == null ? null : ims.emergency.vo.lookups.TriagePriority.buildLookup(bean.getTriagePriority());
		this.patientproblem = bean.getPatientProblem() == null ? null : bean.getPatientProblem().buildVo(map);
		this.ismain = bean.getIsMain();
		this.triageprotocol = bean.getTriageProtocol() == null ? null : new ims.emergency.configuration.vo.ManchesterTriageProtocolConfigurationRefVo(new Integer(bean.getTriageProtocol().getId()), bean.getTriageProtocol().getVersion());
		this.discriminator = bean.getDiscriminator() == null ? null : bean.getDiscriminator().buildVo(map);
		this.assessmentdatetime = bean.getAssessmentDateTime() == null ? null : bean.getAssessmentDateTime().buildDateTime();
		this.assessmentnurse = bean.getAssessmentNurse() == null ? null : bean.getAssessmentNurse().buildVo(map);
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.TriageProtocolAssessmentVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.TriageProtocolAssessmentVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.TriageProtocolAssessmentVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("EPISODE"))
			return getEpisode();
		if(fieldName.equals("ATTENDANCE"))
			return getAttendance();
		if(fieldName.equals("TRIAGEPRIORITY"))
			return getTriagePriority();
		if(fieldName.equals("PATIENTPROBLEM"))
			return getPatientProblem();
		if(fieldName.equals("ISMAIN"))
			return getIsMain();
		if(fieldName.equals("TRIAGEPROTOCOL"))
			return getTriageProtocol();
		if(fieldName.equals("DISCRIMINATOR"))
			return getDiscriminator();
		if(fieldName.equals("ASSESSMENTDATETIME"))
			return getAssessmentDateTime();
		if(fieldName.equals("ASSESSMENTNURSE"))
			return getAssessmentNurse();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getEpisodeIsNotNull()
	{
		return this.episode != null;
	}
	public ims.core.admin.vo.EpisodeOfCareRefVo getEpisode()
	{
		return this.episode;
	}
	public void setEpisode(ims.core.admin.vo.EpisodeOfCareRefVo value)
	{
		this.isValidated = false;
		this.episode = value;
	}
	public boolean getAttendanceIsNotNull()
	{
		return this.attendance != null;
	}
	public ims.core.admin.vo.CareContextRefVo getAttendance()
	{
		return this.attendance;
	}
	public void setAttendance(ims.core.admin.vo.CareContextRefVo value)
	{
		this.isValidated = false;
		this.attendance = value;
	}
	public boolean getTriagePriorityIsNotNull()
	{
		return this.triagepriority != null;
	}
	public ims.emergency.vo.lookups.TriagePriority getTriagePriority()
	{
		return this.triagepriority;
	}
	public void setTriagePriority(ims.emergency.vo.lookups.TriagePriority value)
	{
		this.isValidated = false;
		this.triagepriority = value;
	}
	public boolean getPatientProblemIsNotNull()
	{
		return this.patientproblem != null;
	}
	public ims.core.vo.PatientProblemVo getPatientProblem()
	{
		return this.patientproblem;
	}
	public void setPatientProblem(ims.core.vo.PatientProblemVo value)
	{
		this.isValidated = false;
		this.patientproblem = value;
	}
	public boolean getIsMainIsNotNull()
	{
		return this.ismain != null;
	}
	public Boolean getIsMain()
	{
		return this.ismain;
	}
	public void setIsMain(Boolean value)
	{
		this.isValidated = false;
		this.ismain = value;
	}
	public boolean getTriageProtocolIsNotNull()
	{
		return this.triageprotocol != null;
	}
	public ims.emergency.configuration.vo.ManchesterTriageProtocolConfigurationRefVo getTriageProtocol()
	{
		return this.triageprotocol;
	}
	public void setTriageProtocol(ims.emergency.configuration.vo.ManchesterTriageProtocolConfigurationRefVo value)
	{
		this.isValidated = false;
		this.triageprotocol = value;
	}
	public boolean getDiscriminatorIsNotNull()
	{
		return this.discriminator != null;
	}
	public ims.emergency.vo.ProtocolDiscriminatorLiteVo getDiscriminator()
	{
		return this.discriminator;
	}
	public void setDiscriminator(ims.emergency.vo.ProtocolDiscriminatorLiteVo value)
	{
		this.isValidated = false;
		this.discriminator = value;
	}
	public boolean getAssessmentDateTimeIsNotNull()
	{
		return this.assessmentdatetime != null;
	}
	public ims.framework.utils.DateTime getAssessmentDateTime()
	{
		return this.assessmentdatetime;
	}
	public void setAssessmentDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.assessmentdatetime = value;
	}
	public boolean getAssessmentNurseIsNotNull()
	{
		return this.assessmentnurse != null;
	}
	public ims.core.vo.HcpLiteVo getAssessmentNurse()
	{
		return this.assessmentnurse;
	}
	public void setAssessmentNurse(ims.core.vo.HcpLiteVo value)
	{
		this.isValidated = false;
		this.assessmentnurse = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.patientproblem != null)
		{
			if(!this.patientproblem.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.discriminator != null)
		{
			if(!this.discriminator.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.episode == null)
			listOfErrors.add("Episode is mandatory");
		if(this.attendance == null)
			listOfErrors.add("Attendance is mandatory");
		if(this.triagepriority == null)
			listOfErrors.add("TriagePriority is mandatory");
		if(this.patientproblem == null)
			listOfErrors.add("Presenting Problem is mandatory");
		if(this.patientproblem != null)
		{
			String[] listOfOtherErrors = this.patientproblem.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.discriminator != null)
		{
			String[] listOfOtherErrors = this.discriminator.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.assessmentdatetime == null)
			listOfErrors.add("Assessment Date Time is mandatory");
		if(this.assessmentnurse == null)
			listOfErrors.add("Assessment HCP is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		TriageProtocolAssessmentVo clone = new TriageProtocolAssessmentVo(this.id, this.version);
		
		clone.patient = this.patient;
		clone.episode = this.episode;
		clone.attendance = this.attendance;
		if(this.triagepriority == null)
			clone.triagepriority = null;
		else
			clone.triagepriority = (ims.emergency.vo.lookups.TriagePriority)this.triagepriority.clone();
		if(this.patientproblem == null)
			clone.patientproblem = null;
		else
			clone.patientproblem = (ims.core.vo.PatientProblemVo)this.patientproblem.clone();
		clone.ismain = this.ismain;
		clone.triageprotocol = this.triageprotocol;
		if(this.discriminator == null)
			clone.discriminator = null;
		else
			clone.discriminator = (ims.emergency.vo.ProtocolDiscriminatorLiteVo)this.discriminator.clone();
		if(this.assessmentdatetime == null)
			clone.assessmentdatetime = null;
		else
			clone.assessmentdatetime = (ims.framework.utils.DateTime)this.assessmentdatetime.clone();
		if(this.assessmentnurse == null)
			clone.assessmentnurse = null;
		else
			clone.assessmentnurse = (ims.core.vo.HcpLiteVo)this.assessmentnurse.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(TriageProtocolAssessmentVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A TriageProtocolAssessmentVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((TriageProtocolAssessmentVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((TriageProtocolAssessmentVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.episode != null)
			count++;
		if(this.attendance != null)
			count++;
		if(this.triagepriority != null)
			count++;
		if(this.patientproblem != null)
			count++;
		if(this.ismain != null)
			count++;
		if(this.triageprotocol != null)
			count++;
		if(this.discriminator != null)
			count++;
		if(this.assessmentdatetime != null)
			count++;
		if(this.assessmentnurse != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.core.admin.vo.EpisodeOfCareRefVo episode;
	protected ims.core.admin.vo.CareContextRefVo attendance;
	protected ims.emergency.vo.lookups.TriagePriority triagepriority;
	protected ims.core.vo.PatientProblemVo patientproblem;
	protected Boolean ismain;
	protected ims.emergency.configuration.vo.ManchesterTriageProtocolConfigurationRefVo triageprotocol;
	protected ims.emergency.vo.ProtocolDiscriminatorLiteVo discriminator;
	protected ims.framework.utils.DateTime assessmentdatetime;
	protected ims.core.vo.HcpLiteVo assessmentnurse;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
