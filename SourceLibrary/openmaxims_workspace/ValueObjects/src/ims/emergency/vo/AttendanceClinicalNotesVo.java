//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.emergency.vo;

/**
 * Linked to emergency.AttendanceClinicalNotes business object (ID: 1086100035).
 */
public class AttendanceClinicalNotesVo extends ims.emergency.vo.AttendanceClinicalNotesRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public AttendanceClinicalNotesVo()
	{
	}
	public AttendanceClinicalNotesVo(Integer id, int version)
	{
		super(id, version);
	}
	public AttendanceClinicalNotesVo(ims.emergency.vo.beans.AttendanceClinicalNotesVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisode().getId()), bean.getEpisode().getVersion());
		this.attendance = bean.getAttendance() == null ? null : bean.getAttendance().buildVo();
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo();
		this.clinicalnote = bean.getClinicalNote();
		this.notetype = bean.getNoteType() == null ? null : ims.emergency.vo.lookups.AttendanceClinicalNoteType.buildLookup(bean.getNoteType());
		this.discipline = bean.getDiscipline() == null ? null : ims.core.vo.lookups.HcpDisType.buildLookup(bean.getDiscipline());
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.iscorrected = bean.getIsCorrected();
		this.correctedauthoringinformation = bean.getCorrectedAuthoringInformation() == null ? null : bean.getCorrectedAuthoringInformation().buildVo();
		this.correctioncomments = bean.getCorrectionComments();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.emergency.vo.beans.AttendanceClinicalNotesVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.patient = bean.getPatient() == null ? null : new ims.core.patient.vo.PatientRefVo(new Integer(bean.getPatient().getId()), bean.getPatient().getVersion());
		this.episode = bean.getEpisode() == null ? null : new ims.core.admin.vo.EpisodeOfCareRefVo(new Integer(bean.getEpisode().getId()), bean.getEpisode().getVersion());
		this.attendance = bean.getAttendance() == null ? null : bean.getAttendance().buildVo(map);
		this.authoringinformation = bean.getAuthoringInformation() == null ? null : bean.getAuthoringInformation().buildVo(map);
		this.clinicalnote = bean.getClinicalNote();
		this.notetype = bean.getNoteType() == null ? null : ims.emergency.vo.lookups.AttendanceClinicalNoteType.buildLookup(bean.getNoteType());
		this.discipline = bean.getDiscipline() == null ? null : ims.core.vo.lookups.HcpDisType.buildLookup(bean.getDiscipline());
		this.specialty = bean.getSpecialty() == null ? null : ims.core.vo.lookups.Specialty.buildLookup(bean.getSpecialty());
		this.iscorrected = bean.getIsCorrected();
		this.correctedauthoringinformation = bean.getCorrectedAuthoringInformation() == null ? null : bean.getCorrectedAuthoringInformation().buildVo(map);
		this.correctioncomments = bean.getCorrectionComments();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.emergency.vo.beans.AttendanceClinicalNotesVoBean bean = null;
		if(map != null)
			bean = (ims.emergency.vo.beans.AttendanceClinicalNotesVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.emergency.vo.beans.AttendanceClinicalNotesVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("PATIENT"))
			return getPatient();
		if(fieldName.equals("EPISODE"))
			return getEpisode();
		if(fieldName.equals("ATTENDANCE"))
			return getAttendance();
		if(fieldName.equals("AUTHORINGINFORMATION"))
			return getAuthoringInformation();
		if(fieldName.equals("CLINICALNOTE"))
			return getClinicalNote();
		if(fieldName.equals("NOTETYPE"))
			return getNoteType();
		if(fieldName.equals("DISCIPLINE"))
			return getDiscipline();
		if(fieldName.equals("SPECIALTY"))
			return getSpecialty();
		if(fieldName.equals("ISCORRECTED"))
			return getIsCorrected();
		if(fieldName.equals("CORRECTEDAUTHORINGINFORMATION"))
			return getCorrectedAuthoringInformation();
		if(fieldName.equals("CORRECTIONCOMMENTS"))
			return getCorrectionComments();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getPatientIsNotNull()
	{
		return this.patient != null;
	}
	public ims.core.patient.vo.PatientRefVo getPatient()
	{
		return this.patient;
	}
	public void setPatient(ims.core.patient.vo.PatientRefVo value)
	{
		this.isValidated = false;
		this.patient = value;
	}
	public boolean getEpisodeIsNotNull()
	{
		return this.episode != null;
	}
	public ims.core.admin.vo.EpisodeOfCareRefVo getEpisode()
	{
		return this.episode;
	}
	public void setEpisode(ims.core.admin.vo.EpisodeOfCareRefVo value)
	{
		this.isValidated = false;
		this.episode = value;
	}
	public boolean getAttendanceIsNotNull()
	{
		return this.attendance != null;
	}
	public ims.core.vo.CareContextShortVo getAttendance()
	{
		return this.attendance;
	}
	public void setAttendance(ims.core.vo.CareContextShortVo value)
	{
		this.isValidated = false;
		this.attendance = value;
	}
	public boolean getAuthoringInformationIsNotNull()
	{
		return this.authoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getAuthoringInformation()
	{
		return this.authoringinformation;
	}
	public void setAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.authoringinformation = value;
	}
	public boolean getClinicalNoteIsNotNull()
	{
		return this.clinicalnote != null;
	}
	public String getClinicalNote()
	{
		return this.clinicalnote;
	}
	public static int getClinicalNoteMaxLength()
	{
		return 10000;
	}
	public void setClinicalNote(String value)
	{
		this.isValidated = false;
		this.clinicalnote = value;
	}
	public boolean getNoteTypeIsNotNull()
	{
		return this.notetype != null;
	}
	public ims.emergency.vo.lookups.AttendanceClinicalNoteType getNoteType()
	{
		return this.notetype;
	}
	public void setNoteType(ims.emergency.vo.lookups.AttendanceClinicalNoteType value)
	{
		this.isValidated = false;
		this.notetype = value;
	}
	public boolean getDisciplineIsNotNull()
	{
		return this.discipline != null;
	}
	public ims.core.vo.lookups.HcpDisType getDiscipline()
	{
		return this.discipline;
	}
	public void setDiscipline(ims.core.vo.lookups.HcpDisType value)
	{
		this.isValidated = false;
		this.discipline = value;
	}
	public boolean getSpecialtyIsNotNull()
	{
		return this.specialty != null;
	}
	public ims.core.vo.lookups.Specialty getSpecialty()
	{
		return this.specialty;
	}
	public void setSpecialty(ims.core.vo.lookups.Specialty value)
	{
		this.isValidated = false;
		this.specialty = value;
	}
	public boolean getIsCorrectedIsNotNull()
	{
		return this.iscorrected != null;
	}
	public Boolean getIsCorrected()
	{
		return this.iscorrected;
	}
	public void setIsCorrected(Boolean value)
	{
		this.isValidated = false;
		this.iscorrected = value;
	}
	public boolean getCorrectedAuthoringInformationIsNotNull()
	{
		return this.correctedauthoringinformation != null;
	}
	public ims.core.vo.AuthoringInformationVo getCorrectedAuthoringInformation()
	{
		return this.correctedauthoringinformation;
	}
	public void setCorrectedAuthoringInformation(ims.core.vo.AuthoringInformationVo value)
	{
		this.isValidated = false;
		this.correctedauthoringinformation = value;
	}
	public boolean getCorrectionCommentsIsNotNull()
	{
		return this.correctioncomments != null;
	}
	public String getCorrectionComments()
	{
		return this.correctioncomments;
	}
	public static int getCorrectionCommentsMaxLength()
	{
		return 10000;
	}
	public void setCorrectionComments(String value)
	{
		this.isValidated = false;
		this.correctioncomments = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.authoringinformation != null)
		{
			if(!this.authoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.correctedauthoringinformation != null)
		{
			if(!this.correctedauthoringinformation.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.patient == null)
			listOfErrors.add("Patient is mandatory");
		if(this.episode == null)
			listOfErrors.add("Episode is mandatory");
		if(this.attendance == null)
			listOfErrors.add("Attendance is mandatory");
		if(this.authoringinformation == null)
			listOfErrors.add("AuthoringInformation is mandatory");
		if(this.authoringinformation != null)
		{
			String[] listOfOtherErrors = this.authoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.clinicalnote == null || this.clinicalnote.length() == 0)
			listOfErrors.add("ClinicalNote is mandatory");
		if(this.notetype == null)
			listOfErrors.add("NoteType is mandatory");
		if(this.discipline == null)
			listOfErrors.add("Discipline is mandatory");
		if(this.correctedauthoringinformation != null)
		{
			String[] listOfOtherErrors = this.correctedauthoringinformation.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AttendanceClinicalNotesVo clone = new AttendanceClinicalNotesVo(this.id, this.version);
		
		clone.patient = this.patient;
		clone.episode = this.episode;
		if(this.attendance == null)
			clone.attendance = null;
		else
			clone.attendance = (ims.core.vo.CareContextShortVo)this.attendance.clone();
		if(this.authoringinformation == null)
			clone.authoringinformation = null;
		else
			clone.authoringinformation = (ims.core.vo.AuthoringInformationVo)this.authoringinformation.clone();
		clone.clinicalnote = this.clinicalnote;
		if(this.notetype == null)
			clone.notetype = null;
		else
			clone.notetype = (ims.emergency.vo.lookups.AttendanceClinicalNoteType)this.notetype.clone();
		if(this.discipline == null)
			clone.discipline = null;
		else
			clone.discipline = (ims.core.vo.lookups.HcpDisType)this.discipline.clone();
		if(this.specialty == null)
			clone.specialty = null;
		else
			clone.specialty = (ims.core.vo.lookups.Specialty)this.specialty.clone();
		clone.iscorrected = this.iscorrected;
		if(this.correctedauthoringinformation == null)
			clone.correctedauthoringinformation = null;
		else
			clone.correctedauthoringinformation = (ims.core.vo.AuthoringInformationVo)this.correctedauthoringinformation.clone();
		clone.correctioncomments = this.correctioncomments;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AttendanceClinicalNotesVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AttendanceClinicalNotesVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((AttendanceClinicalNotesVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((AttendanceClinicalNotesVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.patient != null)
			count++;
		if(this.episode != null)
			count++;
		if(this.attendance != null)
			count++;
		if(this.authoringinformation != null)
			count++;
		if(this.clinicalnote != null)
			count++;
		if(this.notetype != null)
			count++;
		if(this.discipline != null)
			count++;
		if(this.specialty != null)
			count++;
		if(this.iscorrected != null)
			count++;
		if(this.correctedauthoringinformation != null)
			count++;
		if(this.correctioncomments != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 11;
	}
	protected ims.core.patient.vo.PatientRefVo patient;
	protected ims.core.admin.vo.EpisodeOfCareRefVo episode;
	protected ims.core.vo.CareContextShortVo attendance;
	protected ims.core.vo.AuthoringInformationVo authoringinformation;
	protected String clinicalnote;
	protected ims.emergency.vo.lookups.AttendanceClinicalNoteType notetype;
	protected ims.core.vo.lookups.HcpDisType discipline;
	protected ims.core.vo.lookups.Specialty specialty;
	protected Boolean iscorrected;
	protected ims.core.vo.AuthoringInformationVo correctedauthoringinformation;
	protected String correctioncomments;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
