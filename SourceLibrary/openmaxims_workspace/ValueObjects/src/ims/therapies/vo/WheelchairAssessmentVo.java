//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.therapies.vo;

/**
 * Linked to therapies.MobilityTransfers.WheelchairAssessment business object (ID: 1019100047).
 */
public class WheelchairAssessmentVo extends ims.therapies.mobilitytransfers.vo.WheelchairAssessmentRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public WheelchairAssessmentVo()
	{
	}
	public WheelchairAssessmentVo(Integer id, int version)
	{
		super(id, version);
	}
	public WheelchairAssessmentVo(ims.therapies.vo.beans.WheelchairAssessmentVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.authoringdatetime = bean.getAuthoringDateTime() == null ? null : bean.getAuthoringDateTime().buildDateTime();
		this.authoringcp = bean.getAuthoringCP() == null ? null : bean.getAuthoringCP().buildVo();
		this.chairtype = bean.getChairType() == null ? null : ims.spinalinjuries.vo.lookups.WheelchairType.buildLookup(bean.getChairType());
		this.surfacedistance = ims.therapies.vo.WheelchairSurfaceDistanceVoCollection.buildFromBeanCollection(bean.getSurfaceDistance());
		this.powerchairskillsassess = ims.therapies.vo.PowerchairSkillsAssessmentVoCollection.buildFromBeanCollection(bean.getPowerchairSkillsAssess());
		this.wheelchairskillsassess = ims.therapies.vo.WheelchairSkillsAssessmentVoCollection.buildFromBeanCollection(bean.getWheelchairSkillsAssess());
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.therapies.vo.beans.WheelchairAssessmentVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.authoringdatetime = bean.getAuthoringDateTime() == null ? null : bean.getAuthoringDateTime().buildDateTime();
		this.authoringcp = bean.getAuthoringCP() == null ? null : bean.getAuthoringCP().buildVo(map);
		this.chairtype = bean.getChairType() == null ? null : ims.spinalinjuries.vo.lookups.WheelchairType.buildLookup(bean.getChairType());
		this.surfacedistance = ims.therapies.vo.WheelchairSurfaceDistanceVoCollection.buildFromBeanCollection(bean.getSurfaceDistance());
		this.powerchairskillsassess = ims.therapies.vo.PowerchairSkillsAssessmentVoCollection.buildFromBeanCollection(bean.getPowerchairSkillsAssess());
		this.wheelchairskillsassess = ims.therapies.vo.WheelchairSkillsAssessmentVoCollection.buildFromBeanCollection(bean.getWheelchairSkillsAssess());
		this.clinicalcontact = bean.getClinicalContact() == null ? null : new ims.core.admin.vo.ClinicalContactRefVo(new Integer(bean.getClinicalContact().getId()), bean.getClinicalContact().getVersion());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.therapies.vo.beans.WheelchairAssessmentVoBean bean = null;
		if(map != null)
			bean = (ims.therapies.vo.beans.WheelchairAssessmentVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.therapies.vo.beans.WheelchairAssessmentVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("AUTHORINGDATETIME"))
			return getAuthoringDateTime();
		if(fieldName.equals("AUTHORINGCP"))
			return getAuthoringCP();
		if(fieldName.equals("CHAIRTYPE"))
			return getChairType();
		if(fieldName.equals("SURFACEDISTANCE"))
			return getSurfaceDistance();
		if(fieldName.equals("POWERCHAIRSKILLSASSESS"))
			return getPowerchairSkillsAssess();
		if(fieldName.equals("WHEELCHAIRSKILLSASSESS"))
			return getWheelchairSkillsAssess();
		if(fieldName.equals("CLINICALCONTACT"))
			return getClinicalContact();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getAuthoringDateTimeIsNotNull()
	{
		return this.authoringdatetime != null;
	}
	public ims.framework.utils.DateTime getAuthoringDateTime()
	{
		return this.authoringdatetime;
	}
	public void setAuthoringDateTime(ims.framework.utils.DateTime value)
	{
		this.isValidated = false;
		this.authoringdatetime = value;
	}
	public boolean getAuthoringCPIsNotNull()
	{
		return this.authoringcp != null;
	}
	public ims.core.vo.Hcp getAuthoringCP()
	{
		return this.authoringcp;
	}
	public void setAuthoringCP(ims.core.vo.Hcp value)
	{
		this.isValidated = false;
		this.authoringcp = value;
	}
	public boolean getChairTypeIsNotNull()
	{
		return this.chairtype != null;
	}
	public ims.spinalinjuries.vo.lookups.WheelchairType getChairType()
	{
		return this.chairtype;
	}
	public void setChairType(ims.spinalinjuries.vo.lookups.WheelchairType value)
	{
		this.isValidated = false;
		this.chairtype = value;
	}
	public boolean getSurfaceDistanceIsNotNull()
	{
		return this.surfacedistance != null;
	}
	public ims.therapies.vo.WheelchairSurfaceDistanceVoCollection getSurfaceDistance()
	{
		return this.surfacedistance;
	}
	public void setSurfaceDistance(ims.therapies.vo.WheelchairSurfaceDistanceVoCollection value)
	{
		this.isValidated = false;
		this.surfacedistance = value;
	}
	public boolean getPowerchairSkillsAssessIsNotNull()
	{
		return this.powerchairskillsassess != null;
	}
	public ims.therapies.vo.PowerchairSkillsAssessmentVoCollection getPowerchairSkillsAssess()
	{
		return this.powerchairskillsassess;
	}
	public void setPowerchairSkillsAssess(ims.therapies.vo.PowerchairSkillsAssessmentVoCollection value)
	{
		this.isValidated = false;
		this.powerchairskillsassess = value;
	}
	public boolean getWheelchairSkillsAssessIsNotNull()
	{
		return this.wheelchairskillsassess != null;
	}
	public ims.therapies.vo.WheelchairSkillsAssessmentVoCollection getWheelchairSkillsAssess()
	{
		return this.wheelchairskillsassess;
	}
	public void setWheelchairSkillsAssess(ims.therapies.vo.WheelchairSkillsAssessmentVoCollection value)
	{
		this.isValidated = false;
		this.wheelchairskillsassess = value;
	}
	public boolean getClinicalContactIsNotNull()
	{
		return this.clinicalcontact != null;
	}
	public ims.core.admin.vo.ClinicalContactRefVo getClinicalContact()
	{
		return this.clinicalcontact;
	}
	public void setClinicalContact(ims.core.admin.vo.ClinicalContactRefVo value)
	{
		this.isValidated = false;
		this.clinicalcontact = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.authoringcp != null)
		{
			if(!this.authoringcp.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.surfacedistance != null)
		{
			if(!this.surfacedistance.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.powerchairskillsassess != null)
		{
			if(!this.powerchairskillsassess.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.wheelchairskillsassess != null)
		{
			if(!this.wheelchairskillsassess.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.authoringdatetime == null)
			listOfErrors.add("AuthoringDateTime is mandatory");
		if(this.authoringcp == null)
			listOfErrors.add("AuthoringCP is mandatory");
		if(this.authoringcp != null)
		{
			String[] listOfOtherErrors = this.authoringcp.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.chairtype == null)
			listOfErrors.add("Please enter Wheelchair Type.");
		if(this.surfacedistance != null)
		{
			String[] listOfOtherErrors = this.surfacedistance.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.powerchairskillsassess != null)
		{
			String[] listOfOtherErrors = this.powerchairskillsassess.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.wheelchairskillsassess != null)
		{
			String[] listOfOtherErrors = this.wheelchairskillsassess.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.clinicalcontact == null)
			listOfErrors.add("ClinicalContact is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		WheelchairAssessmentVo clone = new WheelchairAssessmentVo(this.id, this.version);
		
		if(this.authoringdatetime == null)
			clone.authoringdatetime = null;
		else
			clone.authoringdatetime = (ims.framework.utils.DateTime)this.authoringdatetime.clone();
		if(this.authoringcp == null)
			clone.authoringcp = null;
		else
			clone.authoringcp = (ims.core.vo.Hcp)this.authoringcp.clone();
		if(this.chairtype == null)
			clone.chairtype = null;
		else
			clone.chairtype = (ims.spinalinjuries.vo.lookups.WheelchairType)this.chairtype.clone();
		if(this.surfacedistance == null)
			clone.surfacedistance = null;
		else
			clone.surfacedistance = (ims.therapies.vo.WheelchairSurfaceDistanceVoCollection)this.surfacedistance.clone();
		if(this.powerchairskillsassess == null)
			clone.powerchairskillsassess = null;
		else
			clone.powerchairskillsassess = (ims.therapies.vo.PowerchairSkillsAssessmentVoCollection)this.powerchairskillsassess.clone();
		if(this.wheelchairskillsassess == null)
			clone.wheelchairskillsassess = null;
		else
			clone.wheelchairskillsassess = (ims.therapies.vo.WheelchairSkillsAssessmentVoCollection)this.wheelchairskillsassess.clone();
		clone.clinicalcontact = this.clinicalcontact;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(WheelchairAssessmentVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A WheelchairAssessmentVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		WheelchairAssessmentVo compareObj = (WheelchairAssessmentVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID_WheelchairAssessment() == null && compareObj.getID_WheelchairAssessment() != null)
				return -1;
			if(this.getID_WheelchairAssessment() != null && compareObj.getID_WheelchairAssessment() == null)
				return 1;
			if(this.getID_WheelchairAssessment() != null && compareObj.getID_WheelchairAssessment() != null)
				retVal = this.getID_WheelchairAssessment().compareTo(compareObj.getID_WheelchairAssessment());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.authoringdatetime != null)
			count++;
		if(this.authoringcp != null)
			count++;
		if(this.chairtype != null)
			count++;
		if(this.surfacedistance != null)
			count++;
		if(this.powerchairskillsassess != null)
			count++;
		if(this.wheelchairskillsassess != null)
			count++;
		if(this.clinicalcontact != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 7;
	}
	protected ims.framework.utils.DateTime authoringdatetime;
	protected ims.core.vo.Hcp authoringcp;
	protected ims.spinalinjuries.vo.lookups.WheelchairType chairtype;
	protected ims.therapies.vo.WheelchairSurfaceDistanceVoCollection surfacedistance;
	protected ims.therapies.vo.PowerchairSkillsAssessmentVoCollection powerchairskillsassess;
	protected ims.therapies.vo.WheelchairSkillsAssessmentVoCollection wheelchairskillsassess;
	protected ims.core.admin.vo.ClinicalContactRefVo clinicalcontact;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
