//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.dtomove.vo;

/**
 * Linked to dto_move.Action business object (ID: 1105100008).
 */
public class ActionVo extends ims.dto_move.vo.ActionRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public ActionVo()
	{
	}
	public ActionVo(Integer id, int version)
	{
		super(id, version);
	}
	public ActionVo(ims.dtomove.vo.beans.ActionVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.description = bean.getDescription();
		this.timerequired = bean.getTimeRequired();
		this.intervalrequired = bean.getIntervalRequired();
		this.patreq = bean.getPatReq();
		this.schedflag = bean.getSchedFlag();
		this.active = bean.getActive();
		this.activityaction = ims.dtomove.vo.ActivityActionVoCollection.buildFromBeanCollection(bean.getActivityAction());
		this.actionhrg = ims.dtomove.vo.ActionHRGVoCollection.buildFromBeanCollection(bean.getActionHrg());
		this.actionreason = bean.getActionReason();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.dtomove.vo.beans.ActionVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.description = bean.getDescription();
		this.timerequired = bean.getTimeRequired();
		this.intervalrequired = bean.getIntervalRequired();
		this.patreq = bean.getPatReq();
		this.schedflag = bean.getSchedFlag();
		this.active = bean.getActive();
		this.activityaction = ims.dtomove.vo.ActivityActionVoCollection.buildFromBeanCollection(bean.getActivityAction());
		this.actionhrg = ims.dtomove.vo.ActionHRGVoCollection.buildFromBeanCollection(bean.getActionHrg());
		this.actionreason = bean.getActionReason();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.dtomove.vo.beans.ActionVoBean bean = null;
		if(map != null)
			bean = (ims.dtomove.vo.beans.ActionVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.dtomove.vo.beans.ActionVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("NAME"))
			return getName();
		if(fieldName.equals("DESCRIPTION"))
			return getDescription();
		if(fieldName.equals("TIMEREQUIRED"))
			return getTimeRequired();
		if(fieldName.equals("INTERVALREQUIRED"))
			return getIntervalRequired();
		if(fieldName.equals("PATREQ"))
			return getPatReq();
		if(fieldName.equals("SCHEDFLAG"))
			return getSchedFlag();
		if(fieldName.equals("ACTIVE"))
			return getActive();
		if(fieldName.equals("ACTIVITYACTION"))
			return getActivityAction();
		if(fieldName.equals("ACTIONHRG"))
			return getActionHrg();
		if(fieldName.equals("ACTIONREASON"))
			return getActionReason();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getNameIsNotNull()
	{
		return this.name != null;
	}
	public String getName()
	{
		return this.name;
	}
	public static int getNameMaxLength()
	{
		return 50;
	}
	public void setName(String value)
	{
		this.isValidated = false;
		this.name = value;
	}
	public boolean getDescriptionIsNotNull()
	{
		return this.description != null;
	}
	public String getDescription()
	{
		return this.description;
	}
	public static int getDescriptionMaxLength()
	{
		return 100;
	}
	public void setDescription(String value)
	{
		this.isValidated = false;
		this.description = value;
	}
	public boolean getTimeRequiredIsNotNull()
	{
		return this.timerequired != null;
	}
	public Integer getTimeRequired()
	{
		return this.timerequired;
	}
	public void setTimeRequired(Integer value)
	{
		this.isValidated = false;
		this.timerequired = value;
	}
	public boolean getIntervalRequiredIsNotNull()
	{
		return this.intervalrequired != null;
	}
	public Integer getIntervalRequired()
	{
		return this.intervalrequired;
	}
	public void setIntervalRequired(Integer value)
	{
		this.isValidated = false;
		this.intervalrequired = value;
	}
	public boolean getPatReqIsNotNull()
	{
		return this.patreq != null;
	}
	public String getPatReq()
	{
		return this.patreq;
	}
	public static int getPatReqMaxLength()
	{
		return 1;
	}
	public void setPatReq(String value)
	{
		this.isValidated = false;
		this.patreq = value;
	}
	public boolean getSchedFlagIsNotNull()
	{
		return this.schedflag != null;
	}
	public String getSchedFlag()
	{
		return this.schedflag;
	}
	public static int getSchedFlagMaxLength()
	{
		return 1;
	}
	public void setSchedFlag(String value)
	{
		this.isValidated = false;
		this.schedflag = value;
	}
	public boolean getActiveIsNotNull()
	{
		return this.active != null;
	}
	public String getActive()
	{
		return this.active;
	}
	public static int getActiveMaxLength()
	{
		return 1;
	}
	public void setActive(String value)
	{
		this.isValidated = false;
		this.active = value;
	}
	public boolean getActivityActionIsNotNull()
	{
		return this.activityaction != null;
	}
	public ims.dtomove.vo.ActivityActionVoCollection getActivityAction()
	{
		return this.activityaction;
	}
	public void setActivityAction(ims.dtomove.vo.ActivityActionVoCollection value)
	{
		this.isValidated = false;
		this.activityaction = value;
	}
	public boolean getActionHrgIsNotNull()
	{
		return this.actionhrg != null;
	}
	public ims.dtomove.vo.ActionHRGVoCollection getActionHrg()
	{
		return this.actionhrg;
	}
	public void setActionHrg(ims.dtomove.vo.ActionHRGVoCollection value)
	{
		this.isValidated = false;
		this.actionhrg = value;
	}
	public boolean getActionReasonIsNotNull()
	{
		return this.actionreason != null;
	}
	public Integer getActionReason()
	{
		return this.actionreason;
	}
	public void setActionReason(Integer value)
	{
		this.isValidated = false;
		this.actionreason = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name != null)
			if(this.name.length() > 50)
				listOfErrors.add("The length of the field [name] in the value object [ims.dtomove.vo.ActionVo] is too big. It should be less or equal to 50");
		if(this.description != null)
			if(this.description.length() > 100)
				listOfErrors.add("The length of the field [description] in the value object [ims.dtomove.vo.ActionVo] is too big. It should be less or equal to 100");
		if(this.patreq != null)
			if(this.patreq.length() > 1)
				listOfErrors.add("The length of the field [patreq] in the value object [ims.dtomove.vo.ActionVo] is too big. It should be less or equal to 1");
		if(this.schedflag != null)
			if(this.schedflag.length() > 1)
				listOfErrors.add("The length of the field [schedflag] in the value object [ims.dtomove.vo.ActionVo] is too big. It should be less or equal to 1");
		if(this.active != null)
			if(this.active.length() > 1)
				listOfErrors.add("The length of the field [active] in the value object [ims.dtomove.vo.ActionVo] is too big. It should be less or equal to 1");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		ActionVo clone = new ActionVo(this.id, this.version);
		
		clone.name = this.name;
		clone.description = this.description;
		clone.timerequired = this.timerequired;
		clone.intervalrequired = this.intervalrequired;
		clone.patreq = this.patreq;
		clone.schedflag = this.schedflag;
		clone.active = this.active;
		if(this.activityaction == null)
			clone.activityaction = null;
		else
			clone.activityaction = (ims.dtomove.vo.ActivityActionVoCollection)this.activityaction.clone();
		if(this.actionhrg == null)
			clone.actionhrg = null;
		else
			clone.actionhrg = (ims.dtomove.vo.ActionHRGVoCollection)this.actionhrg.clone();
		clone.actionreason = this.actionreason;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(ActionVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A ActionVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((ActionVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((ActionVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.name != null)
			count++;
		if(this.description != null)
			count++;
		if(this.timerequired != null)
			count++;
		if(this.intervalrequired != null)
			count++;
		if(this.patreq != null)
			count++;
		if(this.schedflag != null)
			count++;
		if(this.active != null)
			count++;
		if(this.activityaction != null)
			count++;
		if(this.actionhrg != null)
			count++;
		if(this.actionreason != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 10;
	}
	protected String name;
	protected String description;
	protected Integer timerequired;
	protected Integer intervalrequired;
	protected String patreq;
	protected String schedflag;
	protected String active;
	protected ims.dtomove.vo.ActivityActionVoCollection activityaction;
	protected ims.dtomove.vo.ActionHRGVoCollection actionhrg;
	protected Integer actionreason;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
