//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.vo;


public class InternalReferralListFilterVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public InternalReferralListFilterVo()
	{
	}
	public InternalReferralListFilterVo(ims.oncology.vo.beans.InternalReferralListFilterVoBean bean)
	{
		this.datefrom = bean.getDateFrom() == null ? null : bean.getDateFrom().buildDate();
		this.dateto = bean.getDateTo() == null ? null : bean.getDateTo().buildDate();
		this.referraltype = bean.getReferralType() == null ? null : ims.oncology.vo.lookups.InternalReferralTypeAndReason.buildLookup(bean.getReferralType());
		this.referredby = bean.getReferredBy() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getReferredBy().getId()), bean.getReferredBy().getVersion());
		this.activeonly = bean.getActiveOnly();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.oncology.vo.beans.InternalReferralListFilterVoBean bean)
	{
		this.datefrom = bean.getDateFrom() == null ? null : bean.getDateFrom().buildDate();
		this.dateto = bean.getDateTo() == null ? null : bean.getDateTo().buildDate();
		this.referraltype = bean.getReferralType() == null ? null : ims.oncology.vo.lookups.InternalReferralTypeAndReason.buildLookup(bean.getReferralType());
		this.referredby = bean.getReferredBy() == null ? null : new ims.core.resource.people.vo.HcpRefVo(new Integer(bean.getReferredBy().getId()), bean.getReferredBy().getVersion());
		this.activeonly = bean.getActiveOnly();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.oncology.vo.beans.InternalReferralListFilterVoBean bean = null;
		if(map != null)
			bean = (ims.oncology.vo.beans.InternalReferralListFilterVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.oncology.vo.beans.InternalReferralListFilterVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getDateFromIsNotNull()
	{
		return this.datefrom != null;
	}
	public ims.framework.utils.Date getDateFrom()
	{
		return this.datefrom;
	}
	public void setDateFrom(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.datefrom = value;
	}
	public boolean getDateToIsNotNull()
	{
		return this.dateto != null;
	}
	public ims.framework.utils.Date getDateTo()
	{
		return this.dateto;
	}
	public void setDateTo(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dateto = value;
	}
	public boolean getReferralTypeIsNotNull()
	{
		return this.referraltype != null;
	}
	public ims.oncology.vo.lookups.InternalReferralTypeAndReason getReferralType()
	{
		return this.referraltype;
	}
	public void setReferralType(ims.oncology.vo.lookups.InternalReferralTypeAndReason value)
	{
		this.isValidated = false;
		this.referraltype = value;
	}
	public boolean getReferredByIsNotNull()
	{
		return this.referredby != null;
	}
	public ims.core.resource.people.vo.HcpRefVo getReferredBy()
	{
		return this.referredby;
	}
	public void setReferredBy(ims.core.resource.people.vo.HcpRefVo value)
	{
		this.isValidated = false;
		this.referredby = value;
	}
	public boolean getActiveOnlyIsNotNull()
	{
		return this.activeonly != null;
	}
	public Boolean getActiveOnly()
	{
		return this.activeonly;
	}
	public void setActiveOnly(Boolean value)
	{
		this.isValidated = false;
		this.activeonly = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof InternalReferralListFilterVo))
			return false;
		InternalReferralListFilterVo compareObj = (InternalReferralListFilterVo)obj;
		if(this.getReferralType() == null && compareObj.getReferralType() != null)
			return false;
		if(this.getReferralType() != null && compareObj.getReferralType() == null)
			return false;
		if(this.getReferralType() != null && compareObj.getReferralType() != null)
			return this.getReferralType().equals(compareObj.getReferralType());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		InternalReferralListFilterVo clone = new InternalReferralListFilterVo();
		
		if(this.datefrom == null)
			clone.datefrom = null;
		else
			clone.datefrom = (ims.framework.utils.Date)this.datefrom.clone();
		if(this.dateto == null)
			clone.dateto = null;
		else
			clone.dateto = (ims.framework.utils.Date)this.dateto.clone();
		if(this.referraltype == null)
			clone.referraltype = null;
		else
			clone.referraltype = (ims.oncology.vo.lookups.InternalReferralTypeAndReason)this.referraltype.clone();
		clone.referredby = this.referredby;
		clone.activeonly = this.activeonly;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(InternalReferralListFilterVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A InternalReferralListFilterVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		InternalReferralListFilterVo compareObj = (InternalReferralListFilterVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getDateFrom() == null && compareObj.getDateFrom() != null)
				return -1;
			if(this.getDateFrom() != null && compareObj.getDateFrom() == null)
				return 1;
			if(this.getDateFrom() != null && compareObj.getDateFrom() != null)
				retVal = this.getDateFrom().compareTo(compareObj.getDateFrom());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.datefrom != null)
			count++;
		if(this.dateto != null)
			count++;
		if(this.referraltype != null)
			count++;
		if(this.referredby != null)
			count++;
		if(this.activeonly != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected ims.framework.utils.Date datefrom;
	protected ims.framework.utils.Date dateto;
	protected ims.oncology.vo.lookups.InternalReferralTypeAndReason referraltype;
	protected ims.core.resource.people.vo.HcpRefVo referredby;
	protected Boolean activeonly;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
