//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.oncology.vo;

/**
 * Linked to Oncology.Configuration.TNMStagingClassificationVersion business object (ID: 1075100012).
 */
public class TNMStagingClassificationVersionVo extends ims.oncology.configuration.vo.TNMStagingClassificationVersionRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public TNMStagingClassificationVersionVo()
	{
	}
	public TNMStagingClassificationVersionVo(Integer id, int version)
	{
		super(id, version);
	}
	public TNMStagingClassificationVersionVo(ims.oncology.vo.beans.TNMStagingClassificationVersionVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.versionnumber = bean.getVersionNumber();
		this.versiondescription = bean.getVersionDescription();
		this.activefrom = bean.getActiveFrom() == null ? null : bean.getActiveFrom().buildDate();
		this.activeto = bean.getActiveTo() == null ? null : bean.getActiveTo().buildDate();
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.PreActiveActiveInactiveStatus.buildLookup(bean.getStatus());
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.oncology.vo.beans.TNMStagingClassificationVersionVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.versionnumber = bean.getVersionNumber();
		this.versiondescription = bean.getVersionDescription();
		this.activefrom = bean.getActiveFrom() == null ? null : bean.getActiveFrom().buildDate();
		this.activeto = bean.getActiveTo() == null ? null : bean.getActiveTo().buildDate();
		this.status = bean.getStatus() == null ? null : ims.core.vo.lookups.PreActiveActiveInactiveStatus.buildLookup(bean.getStatus());
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.oncology.vo.beans.TNMStagingClassificationVersionVoBean bean = null;
		if(map != null)
			bean = (ims.oncology.vo.beans.TNMStagingClassificationVersionVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.oncology.vo.beans.TNMStagingClassificationVersionVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("VERSIONNUMBER"))
			return getVersionNumber();
		if(fieldName.equals("VERSIONDESCRIPTION"))
			return getVersionDescription();
		if(fieldName.equals("ACTIVEFROM"))
			return getActiveFrom();
		if(fieldName.equals("ACTIVETO"))
			return getActiveTo();
		if(fieldName.equals("STATUS"))
			return getStatus();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getVersionNumberIsNotNull()
	{
		return this.versionnumber != null;
	}
	public String getVersionNumber()
	{
		return this.versionnumber;
	}
	public static int getVersionNumberMaxLength()
	{
		return 55;
	}
	public void setVersionNumber(String value)
	{
		this.isValidated = false;
		this.versionnumber = value;
	}
	public boolean getVersionDescriptionIsNotNull()
	{
		return this.versiondescription != null;
	}
	public String getVersionDescription()
	{
		return this.versiondescription;
	}
	public static int getVersionDescriptionMaxLength()
	{
		return 1500;
	}
	public void setVersionDescription(String value)
	{
		this.isValidated = false;
		this.versiondescription = value;
	}
	public boolean getActiveFromIsNotNull()
	{
		return this.activefrom != null;
	}
	public ims.framework.utils.Date getActiveFrom()
	{
		return this.activefrom;
	}
	public void setActiveFrom(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.activefrom = value;
	}
	public boolean getActiveToIsNotNull()
	{
		return this.activeto != null;
	}
	public ims.framework.utils.Date getActiveTo()
	{
		return this.activeto;
	}
	public void setActiveTo(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.activeto = value;
	}
	public boolean getStatusIsNotNull()
	{
		return this.status != null;
	}
	public ims.core.vo.lookups.PreActiveActiveInactiveStatus getStatus()
	{
		return this.status;
	}
	public void setStatus(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
	{
		this.isValidated = false;
		this.status = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.versionnumber == null || this.versionnumber.length() == 0)
			listOfErrors.add("Version Number is mandatory");
		else if(this.versionnumber.length() > 55)
			listOfErrors.add("The length of the field [versionnumber] in the value object [ims.oncology.vo.TNMStagingClassificationVersionVo] is too big. It should be less or equal to 55");
		if(this.versiondescription != null)
			if(this.versiondescription.length() > 1500)
				listOfErrors.add("The length of the field [versiondescription] in the value object [ims.oncology.vo.TNMStagingClassificationVersionVo] is too big. It should be less or equal to 1500");
		if(this.status == null)
			listOfErrors.add("Status is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		TNMStagingClassificationVersionVo clone = new TNMStagingClassificationVersionVo(this.id, this.version);
		
		clone.versionnumber = this.versionnumber;
		clone.versiondescription = this.versiondescription;
		if(this.activefrom == null)
			clone.activefrom = null;
		else
			clone.activefrom = (ims.framework.utils.Date)this.activefrom.clone();
		if(this.activeto == null)
			clone.activeto = null;
		else
			clone.activeto = (ims.framework.utils.Date)this.activeto.clone();
		if(this.status == null)
			clone.status = null;
		else
			clone.status = (ims.core.vo.lookups.PreActiveActiveInactiveStatus)this.status.clone();
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(TNMStagingClassificationVersionVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A TNMStagingClassificationVersionVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((TNMStagingClassificationVersionVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((TNMStagingClassificationVersionVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.versionnumber != null)
			count++;
		if(this.versiondescription != null)
			count++;
		if(this.activefrom != null)
			count++;
		if(this.activeto != null)
			count++;
		if(this.status != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 5;
	}
	protected String versionnumber;
	protected String versiondescription;
	protected ims.framework.utils.Date activefrom;
	protected ims.framework.utils.Date activeto;
	protected ims.core.vo.lookups.PreActiveActiveInactiveStatus status;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
