//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.vo;

/**
 * Linked to core.configuration.AppTopButtonConfig business object (ID: 1028100036).
 */
public class AppTopButtonConfigVo extends ims.admin.vo.AppTopButtonConfigShortVo implements ims.vo.ImsCloneable, Comparable, ims.framework.interfaces.ITopButtonConfig
{
	private static final long serialVersionUID = 1L;

	public AppTopButtonConfigVo()
	{
	}
	public AppTopButtonConfigVo(Integer id, int version)
	{
		super(id, version);
	}
	public AppTopButtonConfigVo(ims.admin.vo.beans.AppTopButtonConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.buttons = ims.admin.vo.AppTopButtonVoCollection.buildFromBeanCollection(bean.getButtons());
		this.sections = ims.admin.vo.AppTopButtonSectionVoCollection.buildFromBeanCollection(bean.getSections());
		this.nocolumns = bean.getNoColumns();
		this.includepatienthistory = bean.getIncludePatientHistory();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.admin.vo.beans.AppTopButtonConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.name = bean.getName();
		this.buttons = ims.admin.vo.AppTopButtonVoCollection.buildFromBeanCollection(bean.getButtons());
		this.sections = ims.admin.vo.AppTopButtonSectionVoCollection.buildFromBeanCollection(bean.getSections());
		this.nocolumns = bean.getNoColumns();
		this.includepatienthistory = bean.getIncludePatientHistory();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.admin.vo.beans.AppTopButtonConfigVoBean bean = null;
		if(map != null)
			bean = (ims.admin.vo.beans.AppTopButtonConfigVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.admin.vo.beans.AppTopButtonConfigVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("BUTTONS"))
			return getButtons();
		if(fieldName.equals("SECTIONS"))
			return getSections();
		if(fieldName.equals("NOCOLUMNS"))
			return getNoColumns();
		if(fieldName.equals("INCLUDEPATIENTHISTORY"))
			return getIncludePatientHistory();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getButtonsIsNotNull()
	{
		return this.buttons != null;
	}
	public ims.admin.vo.AppTopButtonVoCollection getButtons()
	{
		return this.buttons;
	}
	public void setButtons(ims.admin.vo.AppTopButtonVoCollection value)
	{
		this.isValidated = false;
		this.buttons = value;
	}
	public boolean getSectionsIsNotNull()
	{
		return this.sections != null;
	}
	public ims.admin.vo.AppTopButtonSectionVoCollection getSections()
	{
		return this.sections;
	}
	public void setSections(ims.admin.vo.AppTopButtonSectionVoCollection value)
	{
		this.isValidated = false;
		this.sections = value;
	}
	public boolean getNoColumnsIsNotNull()
	{
		return this.nocolumns != null;
	}
	public Integer getNoColumns()
	{
		return this.nocolumns;
	}
	public void setNoColumns(Integer value)
	{
		this.isValidated = false;
		this.nocolumns = value;
	}
	public boolean getIncludePatientHistoryIsNotNull()
	{
		return this.includepatienthistory != null;
	}
	public Boolean getIncludePatientHistory()
	{
		return this.includepatienthistory;
	}
	public void setIncludePatientHistory(Boolean value)
	{
		this.isValidated = false;
		this.includepatienthistory = value;
	}
	/**
	* ITopButtonConfig
	*/
		public ims.framework.interfaces.ITopButton[] getITopButtonConfigButtons() 
		{
			if(buttons == null)
				return new ims.framework.interfaces.ITopButton[0];
			
			ims.framework.interfaces.ITopButton[] result = new ims.framework.interfaces.ITopButton[buttons.size()];		
			for(int x = 0; x < buttons.size(); x++)
			{
				result[x] = buttons.get(x);
			}
			
			return result;
		}	
		public ims.framework.interfaces.ITopButtonSection[] getITopButtonConfigSections() 
		{
			if(sections == null)
				return new ims.framework.interfaces.ITopButtonSection[0];
			
			ims.framework.interfaces.ITopButtonSection[] result = new ims.framework.interfaces.ITopButtonSection[sections.size()];		
			for(int x = 0; x < sections.size(); x++)
			{
				result[x] = sections.get(x);
			}
			
			return result;
		}
		public int getITopButtonConfigNoColumns() 
		{
			return nocolumns == null ? 1 : nocolumns.intValue();
		}
		public boolean getITopButtonConfigIncludePatientSelectionHistory()
		{
			return includepatienthistory == null ? true : includepatienthistory.booleanValue();
		}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		if(this.buttons != null)
		{
			if(!this.buttons.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		if(this.sections != null)
		{
			if(!this.sections.isValidated())
			{
				this.isBusy = false;
				return false;
			}
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.name == null || this.name.length() == 0)
			listOfErrors.add("Name is mandatory");
		else if(this.name.length() > 255)
			listOfErrors.add("The length of the field [name] in the value object [ims.admin.vo.AppTopButtonConfigVo] is too big. It should be less or equal to 255");
		if(this.buttons == null || this.buttons.size() == 0)
			listOfErrors.add("Buttons are mandatory");
		if(this.buttons != null)
		{
			String[] listOfOtherErrors = this.buttons.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.sections != null)
		{
			String[] listOfOtherErrors = this.sections.validate();
			if(listOfOtherErrors != null)
			{
				for(int x = 0; x < listOfOtherErrors.length; x++)
				{
					listOfErrors.add(listOfOtherErrors[x]);
				}
			}
		}
		if(this.nocolumns == null)
			listOfErrors.add("NoColumns is mandatory");
		if(this.includepatienthistory == null)
			listOfErrors.add("IncludePatientHistory is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		AppTopButtonConfigVo clone = new AppTopButtonConfigVo(this.id, this.version);
		
		clone.name = this.name;
		if(this.buttons == null)
			clone.buttons = null;
		else
			clone.buttons = (ims.admin.vo.AppTopButtonVoCollection)this.buttons.clone();
		if(this.sections == null)
			clone.sections = null;
		else
			clone.sections = (ims.admin.vo.AppTopButtonSectionVoCollection)this.sections.clone();
		clone.nocolumns = this.nocolumns;
		clone.includepatienthistory = this.includepatienthistory;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(AppTopButtonConfigVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A AppTopButtonConfigVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((AppTopButtonConfigVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((AppTopButtonConfigVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = super.countFieldsWithValue();
		if(this.buttons != null)
			count++;
		if(this.sections != null)
			count++;
		if(this.nocolumns != null)
			count++;
		if(this.includepatienthistory != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return super.countValueObjectFields() + 4;
	}
	protected ims.admin.vo.AppTopButtonVoCollection buttons;
	protected ims.admin.vo.AppTopButtonSectionVoCollection sections;
	protected Integer nocolumns;
	protected Boolean includepatienthistory;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
