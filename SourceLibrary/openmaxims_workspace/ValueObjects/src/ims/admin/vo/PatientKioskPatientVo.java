//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.vo;


public class PatientKioskPatientVo extends ims.vo.ValueObject implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public PatientKioskPatientVo()
	{
	}
	public PatientKioskPatientVo(ims.admin.vo.beans.PatientKioskPatientVoBean bean)
	{
		this.displayname = bean.getDisplayName();
		this.dob = bean.getDOB() == null ? null : bean.getDOB().buildDate();
		this.gender = bean.getGender() == null ? null : ims.core.vo.lookups.Sex.buildLookup(bean.getGender());
		this.postcode = bean.getPostCode();
		this.surname = bean.getSurname();
		this.id = bean.getID();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.admin.vo.beans.PatientKioskPatientVoBean bean)
	{
		this.displayname = bean.getDisplayName();
		this.dob = bean.getDOB() == null ? null : bean.getDOB().buildDate();
		this.gender = bean.getGender() == null ? null : ims.core.vo.lookups.Sex.buildLookup(bean.getGender());
		this.postcode = bean.getPostCode();
		this.surname = bean.getSurname();
		this.id = bean.getID();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.admin.vo.beans.PatientKioskPatientVoBean bean = null;
		if(map != null)
			bean = (ims.admin.vo.beans.PatientKioskPatientVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.admin.vo.beans.PatientKioskPatientVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public boolean getDisplayNameIsNotNull()
	{
		return this.displayname != null;
	}
	public String getDisplayName()
	{
		return this.displayname;
	}
	public static int getDisplayNameMaxLength()
	{
		return 255;
	}
	public void setDisplayName(String value)
	{
		this.isValidated = false;
		this.displayname = value;
	}
	public boolean getDOBIsNotNull()
	{
		return this.dob != null;
	}
	public ims.framework.utils.Date getDOB()
	{
		return this.dob;
	}
	public void setDOB(ims.framework.utils.Date value)
	{
		this.isValidated = false;
		this.dob = value;
	}
	public boolean getGenderIsNotNull()
	{
		return this.gender != null;
	}
	public ims.core.vo.lookups.Sex getGender()
	{
		return this.gender;
	}
	public void setGender(ims.core.vo.lookups.Sex value)
	{
		this.isValidated = false;
		this.gender = value;
	}
	public boolean getPostCodeIsNotNull()
	{
		return this.postcode != null;
	}
	public String getPostCode()
	{
		return this.postcode;
	}
	public static int getPostCodeMaxLength()
	{
		return 255;
	}
	public void setPostCode(String value)
	{
		this.isValidated = false;
		this.postcode = value;
	}
	public boolean getSurnameIsNotNull()
	{
		return this.surname != null;
	}
	public String getSurname()
	{
		return this.surname;
	}
	public static int getSurnameMaxLength()
	{
		return 255;
	}
	public void setSurname(String value)
	{
		this.isValidated = false;
		this.surname = value;
	}
	public boolean getIDIsNotNull()
	{
		return this.id != null;
	}
	public Integer getID()
	{
		return this.id;
	}
	public void setID(Integer value)
	{
		this.isValidated = false;
		this.id = value;
	}
	public final String getIItemText()
	{
		return toString();
	}
	public final Integer getBoId() 
	{
		return null;
	}
	public final String getBoClassName()
	{
		return null;
	}
	public String toString()
	{
		StringBuffer sb = new StringBuffer();
		if(this.displayname != null)
			sb.append(this.displayname);
		return sb.toString();
	}
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(!(obj instanceof PatientKioskPatientVo))
			return false;
		PatientKioskPatientVo compareObj = (PatientKioskPatientVo)obj;
		if(this.getID() == null && compareObj.getID() != null)
			return false;
		if(this.getID() != null && compareObj.getID() == null)
			return false;
		if(this.getID() != null && compareObj.getID() != null)
			if(!this.getID().equals(compareObj.getID()))
				return false;
		if(this.getDOB() == null && compareObj.getDOB() != null)
			return false;
		if(this.getDOB() != null && compareObj.getDOB() == null)
			return false;
		if(this.getDOB() != null && compareObj.getDOB() != null)
			if(!this.getDOB().equals(compareObj.getDOB()))
				return false;
		if(this.getGender() == null && compareObj.getGender() != null)
			return false;
		if(this.getGender() != null && compareObj.getGender() == null)
			return false;
		if(this.getGender() != null && compareObj.getGender() != null)
			if(!this.getGender().equals(compareObj.getGender()))
				return false;
		if(this.getPostCode() == null && compareObj.getPostCode() != null)
			return false;
		if(this.getPostCode() != null && compareObj.getPostCode() == null)
			return false;
		if(this.getPostCode() != null && compareObj.getPostCode() != null)
			if(!this.getPostCode().equals(compareObj.getPostCode()))
				return false;
		if(this.getDisplayName() == null && compareObj.getDisplayName() != null)
			return false;
		if(this.getDisplayName() != null && compareObj.getDisplayName() == null)
			return false;
		if(this.getDisplayName() != null && compareObj.getDisplayName() != null)
			if(!this.getDisplayName().equals(compareObj.getDisplayName()))
				return false;
		if(this.getSurname() == null && compareObj.getSurname() != null)
			return false;
		if(this.getSurname() != null && compareObj.getSurname() == null)
			return false;
		if(this.getSurname() != null && compareObj.getSurname() != null)
			return this.getSurname().equals(compareObj.getSurname());
		return super.equals(obj);
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.displayname == null || this.displayname.length() == 0)
			listOfErrors.add("DisplayName is mandatory");
		if(this.dob == null)
			listOfErrors.add("DOB is mandatory");
		if(this.gender == null)
			listOfErrors.add("Gender is mandatory");
		if(this.postcode == null || this.postcode.length() == 0)
			listOfErrors.add("PostCode is mandatory");
		if(this.surname == null || this.surname.length() == 0)
			listOfErrors.add("Surname is mandatory");
		if(this.id == null)
			listOfErrors.add("ID is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		PatientKioskPatientVo clone = new PatientKioskPatientVo();
		
		clone.displayname = this.displayname;
		if(this.dob == null)
			clone.dob = null;
		else
			clone.dob = (ims.framework.utils.Date)this.dob.clone();
		if(this.gender == null)
			clone.gender = null;
		else
			clone.gender = (ims.core.vo.lookups.Sex)this.gender.clone();
		clone.postcode = this.postcode;
		clone.surname = this.surname;
		clone.id = this.id;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(PatientKioskPatientVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A PatientKioskPatientVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		PatientKioskPatientVo compareObj = (PatientKioskPatientVo)obj;
		int retVal = 0;
		if (retVal == 0)
		{
			if(this.getID() == null && compareObj.getID() != null)
				return -1;
			if(this.getID() != null && compareObj.getID() == null)
				return 1;
			if(this.getID() != null && compareObj.getID() != null)
				retVal = this.getID().compareTo(compareObj.getID());
		}
		return retVal;
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.displayname != null)
			count++;
		if(this.dob != null)
			count++;
		if(this.gender != null)
			count++;
		if(this.postcode != null)
			count++;
		if(this.surname != null)
			count++;
		if(this.id != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected String displayname;
	protected ims.framework.utils.Date dob;
	protected ims.core.vo.lookups.Sex gender;
	protected String postcode;
	protected String surname;
	protected Integer id;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
