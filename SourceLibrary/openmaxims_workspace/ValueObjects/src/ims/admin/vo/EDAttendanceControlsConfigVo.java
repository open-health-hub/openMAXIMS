//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.admin.vo;

/**
 * Linked to core.admin.EDAttendenceControlsConfig business object (ID: 1004100062).
 */
public class EDAttendanceControlsConfigVo extends ims.core.admin.vo.EDAttendenceControlsConfigRefVo implements ims.vo.ImsCloneable, Comparable
{
	private static final long serialVersionUID = 1L;

	public EDAttendanceControlsConfigVo()
	{
	}
	public EDAttendanceControlsConfigVo(Integer id, int version)
	{
		super(id, version);
	}
	public EDAttendanceControlsConfigVo(ims.admin.vo.beans.EDAttendanceControlsConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.controlimsid = bean.getControlIMSID();
		this.controldescriptiononform = bean.getControlDescriptionOnForm();
		this.controltype = bean.getControlType() == null ? null : ims.admin.vo.lookups.EDAttendenceControlType.buildLookup(bean.getControlType());
		this.isvisible = bean.getIsVisible();
		this.iseditable = bean.getIsEditable();
		this.isrequired = bean.getIsRequired();
	}
	public void populate(ims.vo.ValueObjectBeanMap map, ims.admin.vo.beans.EDAttendanceControlsConfigVoBean bean)
	{
		this.id = bean.getId();
		this.version = bean.getVersion();
		this.controlimsid = bean.getControlIMSID();
		this.controldescriptiononform = bean.getControlDescriptionOnForm();
		this.controltype = bean.getControlType() == null ? null : ims.admin.vo.lookups.EDAttendenceControlType.buildLookup(bean.getControlType());
		this.isvisible = bean.getIsVisible();
		this.iseditable = bean.getIsEditable();
		this.isrequired = bean.getIsRequired();
	}
	public ims.vo.ValueObjectBean getBean()
	{
		return this.getBean(new ims.vo.ValueObjectBeanMap());
	}
	public ims.vo.ValueObjectBean getBean(ims.vo.ValueObjectBeanMap map)
	{
		ims.admin.vo.beans.EDAttendanceControlsConfigVoBean bean = null;
		if(map != null)
			bean = (ims.admin.vo.beans.EDAttendanceControlsConfigVoBean)map.getValueObjectBean(this);
		if (bean == null)
		{
			bean = new ims.admin.vo.beans.EDAttendanceControlsConfigVoBean();
			map.addValueObjectBean(this, bean);
			bean.populate(map, this);
		}
		return bean;
	}
	public Object getFieldValueByFieldName(String fieldName)
	{
		if(fieldName == null)
			throw new ims.framework.exceptions.CodingRuntimeException("Invalid field name");
		fieldName = fieldName.toUpperCase();
		if(fieldName.equals("CONTROLIMSID"))
			return getControlIMSID();
		if(fieldName.equals("CONTROLDESCRIPTIONONFORM"))
			return getControlDescriptionOnForm();
		if(fieldName.equals("CONTROLTYPE"))
			return getControlType();
		if(fieldName.equals("ISVISIBLE"))
			return getIsVisible();
		if(fieldName.equals("ISEDITABLE"))
			return getIsEditable();
		if(fieldName.equals("ISREQUIRED"))
			return getIsRequired();
		return super.getFieldValueByFieldName(fieldName);
	}
	public boolean getControlIMSIDIsNotNull()
	{
		return this.controlimsid != null;
	}
	public String getControlIMSID()
	{
		return this.controlimsid;
	}
	public static int getControlIMSIDMaxLength()
	{
		return 20;
	}
	public void setControlIMSID(String value)
	{
		this.isValidated = false;
		this.controlimsid = value;
	}
	public boolean getControlDescriptionOnFormIsNotNull()
	{
		return this.controldescriptiononform != null;
	}
	public String getControlDescriptionOnForm()
	{
		return this.controldescriptiononform;
	}
	public static int getControlDescriptionOnFormMaxLength()
	{
		return 255;
	}
	public void setControlDescriptionOnForm(String value)
	{
		this.isValidated = false;
		this.controldescriptiononform = value;
	}
	public boolean getControlTypeIsNotNull()
	{
		return this.controltype != null;
	}
	public ims.admin.vo.lookups.EDAttendenceControlType getControlType()
	{
		return this.controltype;
	}
	public void setControlType(ims.admin.vo.lookups.EDAttendenceControlType value)
	{
		this.isValidated = false;
		this.controltype = value;
	}
	public boolean getIsVisibleIsNotNull()
	{
		return this.isvisible != null;
	}
	public Boolean getIsVisible()
	{
		return this.isvisible;
	}
	public void setIsVisible(Boolean value)
	{
		this.isValidated = false;
		this.isvisible = value;
	}
	public boolean getIsEditableIsNotNull()
	{
		return this.iseditable != null;
	}
	public Boolean getIsEditable()
	{
		return this.iseditable;
	}
	public void setIsEditable(Boolean value)
	{
		this.isValidated = false;
		this.iseditable = value;
	}
	public boolean getIsRequiredIsNotNull()
	{
		return this.isrequired != null;
	}
	public Boolean getIsRequired()
	{
		return this.isrequired;
	}
	public void setIsRequired(Boolean value)
	{
		this.isValidated = false;
		this.isrequired = value;
	}
	public boolean isValidated()
	{
		if(this.isBusy)
			return true;
		this.isBusy = true;
	
		if(!this.isValidated)
		{
			this.isBusy = false;
			return false;
		}
		this.isBusy = false;
		return true;
	}
	public String[] validate()
	{
		return validate(null);
	}
	public String[] validate(String[] existingErrors)
	{
		if(this.isBusy)
			return null;
		this.isBusy = true;
	
		java.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();
		if(existingErrors != null)
		{
			for(int x = 0; x < existingErrors.length; x++)
			{
				listOfErrors.add(existingErrors[x]);
			}
		}
		if(this.controlimsid == null || this.controlimsid.length() == 0)
			listOfErrors.add("ControlIMSID is mandatory");
		else if(this.controlimsid.length() > 20)
			listOfErrors.add("The length of the field [controlimsid] in the value object [ims.admin.vo.EDAttendanceControlsConfigVo] is too big. It should be less or equal to 20");
		if(this.controldescriptiononform == null || this.controldescriptiononform.length() == 0)
			listOfErrors.add("ControlDescriptionOnForm is mandatory");
		else if(this.controldescriptiononform.length() > 255)
			listOfErrors.add("The length of the field [controldescriptiononform] in the value object [ims.admin.vo.EDAttendanceControlsConfigVo] is too big. It should be less or equal to 255");
		if(this.controltype == null)
			listOfErrors.add("ControlType is mandatory");
		if(this.isvisible == null)
			listOfErrors.add("IsVisible is mandatory");
		if(this.iseditable == null)
			listOfErrors.add("IsEditable is mandatory");
		if(this.isrequired == null)
			listOfErrors.add("IsRequired is mandatory");
		int errorCount = listOfErrors.size();
		if(errorCount == 0)
		{
			this.isBusy = false;
			this.isValidated = true;
			return null;
		}
		String[] result = new String[errorCount];
		for(int x = 0; x < errorCount; x++)
			result[x] = (String)listOfErrors.get(x);
		this.isBusy = false;
		this.isValidated = false;
		return result;
	}
	public void clearIDAndVersion()
	{
		this.id = null;
		this.version = 0;
	}
	public Object clone()
	{
		if(this.isBusy)
			return this;
		this.isBusy = true;
	
		EDAttendanceControlsConfigVo clone = new EDAttendanceControlsConfigVo(this.id, this.version);
		
		clone.controlimsid = this.controlimsid;
		clone.controldescriptiononform = this.controldescriptiononform;
		if(this.controltype == null)
			clone.controltype = null;
		else
			clone.controltype = (ims.admin.vo.lookups.EDAttendenceControlType)this.controltype.clone();
		clone.isvisible = this.isvisible;
		clone.iseditable = this.iseditable;
		clone.isrequired = this.isrequired;
		clone.isValidated = this.isValidated;
		
		this.isBusy = false;
		return clone;
	}
	public int compareTo(Object obj)
	{
		return compareTo(obj, true);
	}
	public int compareTo(Object obj, boolean caseInsensitive)
	{
		if (obj == null)
		{
			return -1;
		}
		if(caseInsensitive); // this is to avoid eclipse warning only.
		if (!(EDAttendanceControlsConfigVo.class.isAssignableFrom(obj.getClass())))
		{
			throw new ClassCastException("A EDAttendanceControlsConfigVo object cannot be compared an Object of type " + obj.getClass().getName());
		}
		if (this.id == null)
			return 1;
		if (((EDAttendanceControlsConfigVo)obj).getBoId() == null)
			return -1;
		return this.id.compareTo(((EDAttendanceControlsConfigVo)obj).getBoId());
	}
	public synchronized static int generateValueObjectUniqueID()
	{
		return ims.vo.ValueObject.generateUniqueID();
	}
	public int countFieldsWithValue()
	{
		int count = 0;
		if(this.controlimsid != null)
			count++;
		if(this.controldescriptiononform != null)
			count++;
		if(this.controltype != null)
			count++;
		if(this.isvisible != null)
			count++;
		if(this.iseditable != null)
			count++;
		if(this.isrequired != null)
			count++;
		return count;
	}
	public int countValueObjectFields()
	{
		return 6;
	}
	protected String controlimsid;
	protected String controldescriptiononform;
	protected ims.admin.vo.lookups.EDAttendenceControlType controltype;
	protected Boolean isvisible;
	protected Boolean iseditable;
	protected Boolean isrequired;
	private boolean isValidated = false;
	private boolean isBusy = false;
}
