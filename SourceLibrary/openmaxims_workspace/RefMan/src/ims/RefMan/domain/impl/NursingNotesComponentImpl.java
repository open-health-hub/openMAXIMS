// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 4115.21811)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;
import ims.RefMan.domain.base.impl.BaseNursingNotesComponentImpl;
import ims.RefMan.domain.objects.NursingNotes;
import ims.RefMan.vo.NursingNotesVo;
import ims.RefMan.vo.domain.NursingNotesVoAssembler;
import ims.core.clinical.domain.objects.PatientAllergy;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.AllergenVo;
import ims.core.vo.AllergenVoCollection;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.MedicationLiteVoCollection;
import ims.core.vo.PatientAllergyForNursingNotesVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.lookups.AllergenType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public class NursingNotesComponentImpl extends BaseNursingNotesComponentImpl
{

	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.NursingNotesVo getNursingNotes(ims.RefMan.vo.CatsReferralRefVo catsReferralRef)
	{
		if (catsReferralRef == null || !catsReferralRef.getID_CatsReferralIsNotNull())
			throw new DomainRuntimeException("Invalid cats referral provided");
		String hql = "select nn from NursingNotes as nn left join nn.catsReferral as cr where (cr.id = :catRef and nn.isRIE is null)";
		List<?> find = getDomainFactory().find(hql,"catRef",catsReferralRef.getID_CatsReferral());
		if (find == null || find.size() == 0)
			return null;
		return NursingNotesVoAssembler.create((NursingNotes) find.get(0));
	}

	//WDEV-16887
	public NursingNotesVo save(NursingNotesVo record,PatientAllergyForNursingNotesVoCollection allergiesForRemoval)	throws StaleObjectException
	{
		if (record == null)
			throw new DomainRuntimeException("Cannot save null record");
		if (!record.isValidated())
			throw new DomainRuntimeException("Record is not validated");

		if (!record.getID_NursingNotesIsNotNull())
		{
			String hql = "select count(nn.id) from NursingNotes as nn left join nn.catsReferral as cr where  (cr.id = :catId and nn.isRIE is null)"; 
			long count = getDomainFactory().countWithHQL(hql, new String[]{"catId"}, new Object[]{record.getCatsReferral().getID_CatsReferral()});
			if (count > 0 )
				throw new StaleObjectException(null);
		}

		DomainFactory df = getDomainFactory();

		if (record.getID_NursingNotesIsNotNull() && allergiesForRemoval != null && allergiesForRemoval.size() >0)
		{	
			for (int j=0;j<allergiesForRemoval.size(); j++)
			{	
				PatientAllergy allergyDO =  (PatientAllergy) df.getDomainObject(PatientAllergy.class, allergiesForRemoval.get(j).getID_PatientAllergy());
				allergyDO.setIsCurrentlyActiveAllergy(Boolean.FALSE);
				df.save(allergyDO);
			}
		}
		NursingNotes nurDO = NursingNotesVoAssembler.extractNursingNotes(df, record);
		df.save(nurDO);
		return NursingNotesVoAssembler.create(nurDO);

	}
	
	//	WDEV-12337
	public MedicationLiteVoCollection listMedications(String filter,String ignored) throws DomainInterfaceException
	{
		if(filter == null)
			return null;

		filter = filter.trim().toUpperCase();

		if(filter == null || filter.length() == 0)
			return null;

		DomainFactory factory = getDomainFactory();
		Connection conection = factory.getJdbcConnection();

		StringBuffer sql = new StringBuffer();

		sql.append("select a.id, a.medication from core_medication2 a LEFT OUTER JOIN core_medication2_keywords k ON a.id = k.id where (k.keyword like ? or a.medication like ?) and a.isactive = 1 ");

		if (ignored != null && ignored.trim().length() > 0)
		{
			sql.append(" and a.id not in ("+ignored+")");
		}

		sql.append(" order by upper(a.medication)");

		MedicationLiteVoCollection medicationColl = new MedicationLiteVoCollection();
		PreparedStatement ps;
		try 
		{
			ps = conection.prepareCall(sql.toString());
			ps.setString(1, filter + "%");
			ps.setString(2, filter + "%");

			ResultSet rs = ps.executeQuery();

			while( rs.next() )
			{
				MedicationLiteVo vo = new MedicationLiteVo();
				vo.setID_Medication(Integer.valueOf(rs.getString(1)));
				vo.setMedicationName(rs.getString(2));
				medicationColl.add(vo);
			}
		}
		catch (SQLException e) 
		{
			e.printStackTrace();
		}

		return medicationColl;
	}

	//	WDEV-12337
	public DiagLiteVoCollection listDiagnosis(String filter,String ignored) throws DomainInterfaceException
	{
		if(filter == null)
			return null;

		filter = filter.trim().toUpperCase();

		if(filter == null || filter.length() == 0)
			return null;

		DomainFactory factory = getDomainFactory();
		Connection conection = factory.getJdbcConnection();

		StringBuffer sql = new StringBuffer();

		//        sql.append("select a.id, a.diagnosisn from shcl_diagnosishotli as s1 LEFT OUTER JOIN shcl_diagnosishotl2 as s2 ON s1.id = s2.shcl_diagnosishotli_hotlistite LEFT OUTER JOIN core_diagnosis a ON s2.diagnosis = a.id LEFT OUTER JOIN core_diagnosis_keywords k ON a.id = k.id where k.keyword like ? and a.isactive = 1 and s1.lkp_specialty = -1522 ");
		sql.append("select a.id, a.diagnosisn from core_diagnosis a LEFT OUTER JOIN core_diagnosis_keywords k ON a.id = k.id where (k.keyword like ? or a.diagnosisn like ?) and a.isactive = 1 ");

		if (ignored != null && ignored.trim().length() > 0)
		{
			sql.append(" and a.id not in ("+ignored+")");
		}

		sql.append(" order by upper(a.diagnosisn)");

		DiagLiteVoCollection diagnosisColl = new DiagLiteVoCollection();
		PreparedStatement ps;
		try 
		{
			ps = conection.prepareCall(sql.toString());
			ps.setString(1, filter + "%");
			ps.setString(2, filter + "%");

			ResultSet rs = ps.executeQuery();

			while( rs.next() )
			{
				DiagLiteVo vo = new DiagLiteVo();
				vo.setID_Diagnosis(Integer.valueOf(rs.getString(1)));
				vo.setDiagnosisName(rs.getString(2));
				diagnosisColl.add(vo);
			}
		}
		catch (SQLException e) 
		{
			e.printStackTrace();
		}

		return diagnosisColl;
	}

	//	WDEV-12337
	public AllergenVoCollection listAllergens(String filter,String ignored) throws DomainInterfaceException
	{
		if(filter == null)
			return null;

		filter = filter.trim().toUpperCase();

		if(filter == null || filter.length() == 0)
			return null;

		DomainFactory factory = getDomainFactory();
		Connection conection = factory.getJdbcConnection();

		StringBuffer sql = new StringBuffer();

		sql.append("select a.id, a.allergenna, type.id , type.text from core_allergen a LEFT OUTER JOIN core_allergen_keywords k ON a.id = k.id LEFT OUTER JOIN applookup_instance type ON a.lkp_allergenty = type.id where (k.keyword like ? or a.allergenna like ?) and a.isactive = 1 ");

		if (ignored != null && ignored.trim().length() > 0)
		{
			sql.append(" and a.id not in ("+ignored+")");
		}

		sql.append(" order by upper(a.allergenna)");

		AllergenVoCollection allergenColl = new AllergenVoCollection();
		PreparedStatement ps;
		try 
		{
			ps = conection.prepareCall(sql.toString());
			ps.setString(1, filter + "%");
			ps.setString(2, filter + "%");

			ResultSet rs = ps.executeQuery();

			while( rs.next() )
			{
				AllergenVo vo = new AllergenVo();
				vo.setID_Allergen(Integer.valueOf(rs.getString(1)));
				vo.setAllergenName(rs.getString(2));
				vo.setAllergenType((rs.getString(3) != null && rs.getString(4) != null) ? new AllergenType(Integer.valueOf(rs.getString(3)), rs.getString(4), true) : null);
				allergenColl.add(vo);
			}
		}
		catch (SQLException e) 
		{
			e.printStackTrace();
		}

		return allergenColl;
	}

	//WDEV-12791
	public PatientShort getPatient(PatientRefVo patient)
	{
		if(patient == null || patient.getID_Patient() == null)
			throw new CodingRuntimeException("Can not get patient on null Id.");

		return PatientShortAssembler.create((Patient) getDomainFactory().getDomainObject(Patient.class,  patient.getID_Patient()));
	}

}
