// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.BookTheatre;
import ims.RefMan.domain.base.impl.BaseBookTheatreSlotImpl;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ReferralERODVo;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.vo.enums.CciType;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.scheduling.domain.DirectoryOfServiceAdmin;
import ims.scheduling.domain.MoveAppointmentDialog;
import ims.scheduling.domain.impl.DirectoryOfServiceAdminImpl;
import ims.scheduling.domain.impl.MoveAppointmentDialogImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.domain.objects.SessionParentChildSlot;
import ims.scheduling.vo.BookingAppointmentTheatreLiteVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.domain.BookingAppointmentTheatreLiteVoAssembler;
import ims.scheduling.vo.domain.SessionParentChildSlotVoAssembler;
import ims.scheduling.vo.lookups.Status_Reason;

public class BookTheatreSlotImpl extends BaseBookTheatreSlotImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listActiveCanBeScheduledService
	*/
	public ims.core.vo.ServiceLiteVoCollection listActiveCanBeScheduledService()
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.listActiveCanBeScheduledService();
	}

	/**
	* list sessions for scheduling
	*/
	public ims.scheduling.vo.SessionTheatreVoCollection listSession(ims.framework.utils.Date startDate, ims.framework.utils.Date endDate, ims.core.clinical.vo.ServiceRefVo service, ims.core.resource.place.vo.LocationRefVo location, ims.vo.interfaces.IMos consultant, ims.vo.interfaces.IGenericItem procedure, ims.scheduling.vo.lookups.TheatreType theatreType, Integer timeRequired, Boolean allowOverBook, ims.clinical.vo.lookups.AnaestheticType anaestheticType)
	{
		MoveAppointmentDialog impl = (MoveAppointmentDialog) getDomainImpl(MoveAppointmentDialogImpl.class);
		return impl.listSession(startDate, endDate, service, location, consultant, procedure, theatreType, timeRequired, allowOverBook, anaestheticType);
	}

	/**
	* list Booking appointments for a session
	*/
	public ims.scheduling.vo.BookingAppointmentTheatreVoCollection listBookingAppointment(ims.scheduling.vo.Sch_SessionRefVo session)
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.listBookingAppointment(session);
	}

	/**
	* check Booking Rights for this Role and Session
	*/
	public Boolean hasBookingRights(ims.framework.interfaces.IAppRole role, ims.scheduling.vo.Sch_SessionRefVo session)
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.hasBookingRights(role, session);
	}

	/**
	* listLocationLite
	*/
	public ims.core.vo.LocationLiteVoCollection listLocationLite()
	{
		DirectoryOfServiceAdmin impl = (DirectoryOfServiceAdmin) getDomainImpl(DirectoryOfServiceAdminImpl.class);
		return impl.listLocationLiteByName(null);
	}

	/**
	* getReferralDetail
	*/
	public ims.RefMan.vo.ReferralBookingVo getReferralDetail(ims.RefMan.vo.CatsReferralRefVo catsReferral)
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.getReferralDetail(catsReferral);
	}

	/**
	* for rebooking used same Sch_booking
	*/
	public ims.scheduling.vo.Sch_BookingTheatreVo getSch_BookingByAppt(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.getSch_BookingByAppt(appt);
	}

	/**
	* getBookingAppointment
	*/
	public ims.scheduling.vo.BookingAppointmentTheatreVo getBookingAppointment(ims.scheduling.vo.Booking_AppointmentRefVo appt)
	{
		// TODO: Add your code here and change the return value.
		return null;
	}

	/**
	* Runs a search based on a given filter string, CciType and Boolean. Returns the results as a collection of IGenericItem interfaces
	*/
	public ims.vo.interfaces.IGenericItem[] listProcedures(String filter)
	{
		CCIAdmin impl = (CCIAdmin) getDomainImpl(CCIAdminImpl.class);
		return impl.listIGenericItems(filter, CciType.PROCEDURE, true);
	}

	public ims.icp.vo.PatientICPFullVo getPatientICP(ims.core.admin.vo.CareContextRefVo careCOntextRefVo)
	{
		// TODO: Add your code here and change the return value.
		return null;
	}

	public ims.icp.vo.PatientICPFullVo savePatientICP(ims.icp.vo.PatientICPFullVo pateintICPVo) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		// TODO: Add your code here and change the return value.
		return null;
	}

	/**
	* getSuitableForSurgeryAssessmentByCareContext
	*/
	public ims.RefMan.vo.SuitableForSurgeryAssessmentMinVo getSuitableForSurgeryAssessmentByCareContext(ims.core.admin.vo.CareContextRefVo careContext)
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.getSuitableForSurgeryAssessmentByCareContext(careContext);
	}

	public ims.RefMan.vo.FitForSurgeryAssessmentLiteVo getLatestFitForSurgeryAssessment(ims.RefMan.vo.CatsReferralRefVo referral)
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.getLatestFitForSurgeryAssessment(referral);
	}

	/**
	* countNonCancelledAppointmentsForSession
	*/
	public Integer countNonCancelledAppointmentsForSession(ims.scheduling.vo.Sch_SessionRefVo session)
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.countNonCancelledAppointmentsForSession(session);
	}

	public void addSlotToSession(SessionTheatreVo voSession, SessionParentChildSlotVo voSlot) throws StaleObjectException
	{
		if (voSession == null || voSlot == null)
			throw new CodingRuntimeException("voSession or voSlot is null in method addSlotToSession");

		DomainFactory factory = getDomainFactory();
		
		Sch_Session doSession = (Sch_Session) factory.getDomainObject(voSession);
		
		SessionParentChildSlot doSlot = SessionParentChildSlotVoAssembler.extractSessionParentChildSlot(factory, voSlot);
		doSlot.setStatus(getDomLookup(Status_Reason.SLOTOPENED));
		doSlot.setSession(doSession);
		doSlot.setSessDateTime(doSession.getSessionDate());
		
		doSession.getParentChildSlots().add(doSlot);
		factory.save(doSession);
	}

	//wdev-13814
	public BookingAppointmentTheatreLiteVo getBookingAppointmentTheatre(Booking_AppointmentRefVo recordRef) 
	{
		if( recordRef == null || recordRef.getID_Booking_Appointment() == null)
			return null;
		
		return BookingAppointmentTheatreLiteVoAssembler.create( (Booking_Appointment) getDomainFactory().getDomainObject(Booking_Appointment.class,recordRef.getID_Booking_Appointment()));
	
	}

	public ReferralERODVo getLastTheatreEROD(CatsReferralRefVo catsReferral)
	{
		BookTheatre impl = (BookTheatre) getDomainImpl(BookTheatreImpl.class);
		return impl.getLastTheatreEROD(catsReferral);
	}
}
