// This code was generated by Sean Nesbitt using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import java.util.ArrayList;
import java.util.List;

import ims.RefMan.domain.base.impl.BaseAppointmentOutcomeDiagnosisSelectionDialogImpl;
import ims.clinical.vo.domain.PatientDiagnosisOpNotesVoAssembler;
import ims.core.patient.vo.PatientRefVo;
import ims.domain.DomainFactory;

public class AppointmentOutcomeDiagnosisSelectionDialogImpl extends BaseAppointmentOutcomeDiagnosisSelectionDialogImpl
{

	private static final long serialVersionUID = 1L;

	public ims.clinical.vo.PatientDiagnosisOpNotesVoCollection listPatientDiagnosis(ims.core.patient.vo.PatientRefVo patientRefVo)
	{
		return PatientDiagnosisOpNotesVoAssembler.createPatientDiagnosisOpNotesVoCollectionFromPatientDiagnosis(listDiagnosesForPatient(patientRefVo, true, false, false)).sort();
	}
	
	private List listDiagnosesForPatient(PatientRefVo patrefvo, boolean boolDiagnosis, boolean boolComplication, boolean boolExcludeResolved)
	{
		DomainFactory factory = getDomainFactory();
		
		String hql = new String();
		hql = " from PatientDiagnosis patdiag ";
 
		StringBuffer condStr = new StringBuffer();
		String andStr = " ";
	
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
	
		condStr.append(andStr + " patdiag.episodeOfCare.careSpell.patient.id = :patientId");
		markers.add("patientId");
		values.add(patrefvo.getID_Patient());
		andStr = " and ";			

		if ( (!boolComplication) && (boolDiagnosis) )//List all Diagnosis 
		{
			condStr.append(andStr + " (patdiag.isComplication = :complication OR patdiag.isComplication is null) ");
			markers.add("complication");
			values.add(Boolean.FALSE);
		}
		else if ( (boolComplication) && (!boolDiagnosis) )//List all Complications 
		{
			condStr.append(andStr + " patdiag.isComplication = :complication");
			markers.add("complication");
			values.add(Boolean.TRUE);
		}
		
		if (boolExcludeResolved)
		{
			condStr.append(andStr + " patdiag.isResolved = :excresolved");
			markers.add("excresolved");
			values.add(Boolean.FALSE);
		}

		hql += " where ";

		hql += condStr.toString();
		List list = factory.find(hql,markers,values);
		return list;		
	}
	
}
