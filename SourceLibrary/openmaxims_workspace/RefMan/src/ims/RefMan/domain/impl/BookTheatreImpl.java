// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3397.19184)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.base.impl.BaseBookTheatreImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.FitForSurgeryAssesment;
import ims.RefMan.domain.objects.ReferralEROD;
import ims.RefMan.domain.objects.SuitableForSurgeryAssessment;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.FitForSurgeryAssessmentLiteVo;
import ims.RefMan.vo.ReferralBookingVo;
import ims.RefMan.vo.ReferralERODVo;
import ims.RefMan.vo.ReferralLetterDetailsBookingVo;
import ims.RefMan.vo.SuitableForSurgeryAssessmentMinVo;
import ims.RefMan.vo.domain.FitForSurgeryAssessmentLiteVoAssembler;
import ims.RefMan.vo.domain.ReferralERODVoAssembler;
import ims.RefMan.vo.domain.ReferralLetterDetailsBookingVoAssembler;
import ims.RefMan.vo.domain.SuitableForSurgeryAssessmentMinVoAssembler;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.clinicaladmin.domain.CCIAdmin;
import ims.clinicaladmin.domain.impl.CCIAdminImpl;
import ims.clinicaladmin.vo.enums.CciType;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.ServiceShortVo;
import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.ServiceCategory;
import ims.core.vo.lookups.YesNo;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.interfaces.IAppRole;
import ims.framework.utils.Date;
import ims.icp.vo.PatientICPFullVo;
import ims.icp.vo.PatientICPFullVoCollection;
import ims.icp.vo.domain.PatientICPFullVoAssembler;
import ims.icps.instantiation.domain.objects.PatientICP;
import ims.ocrr.vo.domain.OrderInvestigationBookingVoAssembler;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.scheduling.domain.DirectoryOfServiceAdmin;
import ims.scheduling.domain.ExclusionDates;
import ims.scheduling.domain.SessionAdmin;
import ims.scheduling.domain.impl.DirectoryOfServiceAdminImpl;
import ims.scheduling.domain.impl.ExclusionDatesImpl;
import ims.scheduling.domain.impl.SessionAdminImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.Sch_Booking;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.domain.objects.Sch_Session_Appointment_Order;
import ims.scheduling.domain.objects.SessionSlotStatus;
import ims.scheduling.domain.objects.SessionTheatreProceduresRemanining;
import ims.scheduling.domain.objects.SessionTheatreTCISlot;
import ims.scheduling.domain.objects.TheatreProcedure;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.ExclusionDatesVo;
import ims.scheduling.vo.Sch_BookingTheatreVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionTheatreTCISlotLiteVo;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.SessionTheatreVoCollection;
import ims.scheduling.vo.domain.BookingAppointmentLiteVoAssembler;
import ims.scheduling.vo.domain.BookingAppointmentTheatreVoAssembler;
import ims.scheduling.vo.domain.Sch_BookingTheatreVoAssembler;
import ims.scheduling.vo.domain.SessionTheatreTCISlotLiteVoAssembler;
import ims.scheduling.vo.domain.SessionTheatreVoAssembler;
import ims.scheduling.vo.lookups.Session_Status_and_Reason;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;
import ims.vo.interfaces.IGenericItem;
import ims.vo.interfaces.IMos;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class BookTheatreImpl extends BaseBookTheatreImpl
{
	private static final long	serialVersionUID	= 1L;

	public ims.core.vo.ServiceLiteVoCollection listActiveCanBeScheduledService()
	{
		return ServiceLiteVoAssembler.createServiceLiteVoCollectionFromService(getDomainFactory().find("from Service service where (service.isActive = 1 and service.canBeScheduled = 1 and service.serviceCategory.id != '" + ServiceCategory.RADIOLOGY_MODALITY.getID() + "')"));
	}

	public ims.scheduling.vo.Sch_BookingTheatreVo saveTheatreBooking(ims.scheduling.vo.Sch_BookingTheatreVo voBooking, CatsReferralRefVo catsRef, SessionTheatreTCISlotLiteVo voSessTheatreSlot,TheatreType theatreType) throws ims.domain.exceptions.DomainInterfaceException, ims.domain.exceptions.StaleObjectException
	{
		if (voBooking == null)
			throw new CodingRuntimeException("voBooking is null in method saveBooking");
	
		DomainFactory factory = getDomainFactory();
		
		if (ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue())
		{
			if (catsRef != null && catsRef.getID_CatsReferralIsNotNull())
			{
				
			String hql = "select count(patICP.id) from PatientICP as patICP left join patICP.careContext as careC," +
					" CatsReferral as cats left join cats.careContext as catsCC " +
					"where (cats.id = :catsId and patICP.completedDateTime is not null and catsCC.id = careC.id)";
			long count = getDomainFactory().countWithHQL(hql,new String[]{"catsId"},new Object[]{catsRef.getID_CatsReferral()});
			if (count > 0 )
				throw new DomainInterfaceException("Can not book an appointment on a referral that has a linked ICP that is Closed");
			}
		}
		
		
		Sch_Booking doBooking = Sch_BookingTheatreVoAssembler.extractSch_Booking(factory, voBooking);

		// If CatsReferral record is in scope ie. Appointment booked through UI
		// associate the created appointments with the catsReferral record and
		// patient from cats referral with booking
		CatsReferral doCatsReferral = null;
		if (catsRef != null && catsRef.getID_CatsReferralIsNotNull())
		{
			doCatsReferral = (CatsReferral) factory.getDomainObject(catsRef);
			doBooking.setPatient(doCatsReferral.getPatient());
		}
		
		boolean icabBooking = false;

		// If this is a new patient (from gateway) we will need to save the
		// patient first
		if (doBooking.getPatient().getId() == null)
		{
			factory.save(doBooking.getPatient());
		}

		// WDEV-5727 - consultation appt
		Booking_Appointment doConsultationAppt = null;
		if (doCatsReferral != null)
			doConsultationAppt = doCatsReferral.getConsultationAppt();

		int procedureMinsUsed = 0;
		Sch_Session doTheatreSession = null;
		if (doBooking.getAppointments() != null)
		{
			Iterator it = doBooking.getAppointments().iterator();
			Booking_Appointment doEarliestAppt = null;
			while (it.hasNext())
			{
				Booking_Appointment doBookAppt = (Booking_Appointment) it.next();

				if(doTheatreSession == null)
					doTheatreSession = doBookAppt.getSession();
				
				//WDEV-11964
				getDomainFactory().refresh(doTheatreSession);
					
				// Set patient at this level if not already set
				if (doBookAppt.getPatient() == null)
					doBookAppt.setPatient(doBooking.getPatient());


				if (doEarliestAppt != null && doEarliestAppt.getAppointmentDate().before(doBookAppt.getAppointmentDate()))
					doEarliestAppt = doBookAppt;

				if (doEarliestAppt == null)
					doEarliestAppt = doBookAppt;

				// WDEV-5727 - consultation appt
				if (doConsultationAppt == null)
				{
					if (doBookAppt.getSession().getService() != null)
					{
						if (doBookAppt.getSession().getService().getServiceCategory().equals(getDomLookup(ServiceCategory.CLINICAL)))
							doConsultationAppt = doBookAppt;
					}
				}
				
				//WDEV-5984
				if (doCatsReferral != null)
				{
					if(doCatsReferral.getReferralDetails() != null && doCatsReferral.getReferralDetails().getTransportRequired() != null && doCatsReferral.getReferralDetails().getTransportRequired().equals(getDomLookup(YesNo.YES)))
					{
						if(doBookAppt.getId() == null) //for every new appt
						{
							doBookAppt.setIsTransportRequired(true);
						}
					}	
				}
				
				//go through the sessions configured TheatreProcedures and if they have a limit - subtract 1 from the NumberOfProceduresLeft
				//also subtract duration of procedure from Remaining Mins
				if(doBookAppt.getTheatreBooking() != null)
				{
					//WDEV-10182 - only save this text on booking (not rebook)
				//wdev-10481	if(!isRebook)
				//wdev-10481	{
						if(doCatsReferral != null && doCatsReferral.getCareContext() != null)
						{
							CareContextRefVo voCCRef = new CareContextRefVo(doCatsReferral.getCareContext().getId(), doCatsReferral.getCareContext().getVersion());
							doBookAppt.getTheatreBooking().setSuitableForSurgeryProcedure(getLastSuitableForSurgeryAssessmentProcedureTextByCareContext(voCCRef));								
						}
				//wdev-10481	}
					
					if(doBookAppt.getTheatreBooking().getProcedure() != null)
					{
						if(doBookAppt.getSession().getTheatreProceduresRemaining() != null && doBookAppt.getSession().getTheatreProceduresRemaining().getProcedureDetails() != null)
						{
							Iterator it1 = doBookAppt.getSession().getTheatreProceduresRemaining().getProcedureDetails().iterator();
							while(it1.hasNext())
							{
								TheatreProcedure doTheatreProc = (TheatreProcedure) it1.next();
								if(doTheatreProc.getProcedure() != null)
								{
									if(doTheatreProc.getProcedure().getId().equals(doBookAppt.getTheatreBooking().getProcedure().getId()) && (doTheatreProc.isIsLimited() != null && doTheatreProc.isIsLimited())) //WDEV-11777
										if(doTheatreProc.getNumberOfProceduresLeft() != null && !doTheatreProc.getNumberOfProceduresLeft().equals(new Integer(0)))
											doTheatreProc.setNumberOfProceduresLeft(new Integer(doTheatreProc.getNumberOfProceduresLeft().intValue() - 1));									
								}
							}
						}	
						
						if(doBookAppt.getCustomProcedureDuration() != null)
							procedureMinsUsed += doBookAppt.getCustomProcedureDuration();
						else if(doBookAppt.getTheatreBooking().getProcedure().getDurationInMins() != null)
							procedureMinsUsed += doBookAppt.getTheatreBooking().getProcedure().getDurationInMins().intValue();
					}	
				}
			}
			
			if(procedureMinsUsed > 0 && doTheatreSession!= null && doTheatreSession.getTheatreProceduresRemaining() != null && doTheatreSession.getTheatreProceduresRemaining().getRemainingTimeInMins() != null && !doTheatreSession.getTheatreProceduresRemaining().getRemainingTimeInMins().equals(new Integer(0)))
				doTheatreSession.getTheatreProceduresRemaining().setRemainingTimeInMins(new Integer(doTheatreSession.getTheatreProceduresRemaining().getRemainingTimeInMins().intValue() - procedureMinsUsed ) );
			
			doBooking.setFirstAppointment(doEarliestAppt);

			// if the first appointment is no longer associated with this
			// booking ie. was cancelled
			if (!doBooking.getAppointments().contains(doEarliestAppt))
			{
				doBooking.setFirstAppointment(null);
			}
		}

		try
		{
			factory.save(doBooking);
		}
		catch(StaleObjectException ex)
		{
			//WDEV-11964
			if(ex != null && ex.getStaleObject() instanceof SessionTheatreProceduresRemanining)
			{
				//attempt to do the booking again in this scenario
				SessionTheatreProceduresRemanining doSessTheatreProcRem = (SessionTheatreProceduresRemanining) ex.getStaleObject();
				factory.refresh(doSessTheatreProcRem);
				
				//check if persisted slot is still available
				SessionTheatreTCISlot doSlot = (SessionTheatreTCISlot) factory.getDomainObject(voSessTheatreSlot);
				if(doSlot.getAppointment() == null)
					doSessTheatreProcRem.setRemainingTimeInMins(new Integer(doTheatreSession.getTheatreProceduresRemaining().getRemainingTimeInMins().intValue() - procedureMinsUsed));
				else
					throw new StaleObjectException(doSessTheatreProcRem);
				
				factory.save(doBooking);
			}
		}
		
		if (doCatsReferral != null)
		{
			doCatsReferral.getAppointments().addAll(doBooking.getAppointments());
			// WDEV-5727 - consultation appt
			doCatsReferral.setConsultationAppt(doConsultationAppt);
			// WDEV-5727 - has appointments
			doCatsReferral.setHasAppointments(true);
			
			doCatsReferral.setHasTheatreAppt(true);//wdev-7607
			if( theatreType != null && theatreType.equals(TheatreType.OP_CASE))		//wdev-13765
				doCatsReferral.setHasOPProcAwaitingAppt(Boolean.FALSE);             //wdev-13765

			factory.save(doCatsReferral);

			// WDEV-12157
			// Update the CatsReferral status (hasCancelled appointments field)
			SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
			impl.updateCatsReferralAdditionalInvStatus(catsRef);
 
			updateActiveMonitoring(catsRef);
		}
		
		//WDEV-7528 - maintain SessionAppointmentOrder
		if(doTheatreSession != null)
		{
			Sch_Session_Appointment_Order doSessApptOrder = Sch_Session_Appointment_Order.getSch_Session_Appointment_OrderFromSession(factory, doTheatreSession.getId());
			if(doSessApptOrder == null)
			{
				doSessApptOrder = new Sch_Session_Appointment_Order();
				doSessApptOrder.setSession(doTheatreSession);	
			}
			
			Iterator it1 = doBooking.getAppointments().iterator();
			while(it1.hasNext())
			{
				Booking_Appointment doAppt =  (Booking_Appointment) it1.next();
				
				
				//WDEV-8271
				removeApptFromExistingSessionApptOrder(doAppt);
				
				if(!alreadyExists(doSessApptOrder, doAppt))
					doSessApptOrder.getAppointments().add(doAppt);
			}
			
			factory.save(doSessApptOrder);
		}
		
		//WDEV-11777 - update the SessionTheatreSlot record
		if(voSessTheatreSlot != null)
		{
			SessionTheatreTCISlot doSessionTheatreSlot = SessionTheatreTCISlotLiteVoAssembler.extractSessionTheatreTCISlot(factory, voSessTheatreSlot);
			
			//get the one(first) appointment from the collection
			if(doBooking.getAppointments() != null)
			{
				Iterator it = doBooking.getAppointments().iterator();
				Booking_Appointment doBookedAppt = (Booking_Appointment) it.next();
				bookAppointmentIntoTheatreSlot(doBookedAppt, doSessionTheatreSlot);		
			}
	
			factory.save(doSessionTheatreSlot);
		}
	
		return Sch_BookingTheatreVoAssembler.create(doBooking);
	}

	/**
	 * @param doAppt
	 * @param doSessionTheatreSlot
	 */
	private SessionTheatreTCISlot bookAppointmentIntoTheatreSlot(Booking_Appointment doAppt, SessionTheatreTCISlot doSessionTheatreSlot)
	{
		if (doSessionTheatreSlot == null)
			throw new CodingRuntimeException("doSessionTheatreSlot is null in method bookAppointmentIntoTheatreSlot");
		if (doAppt == null)
			throw new CodingRuntimeException("doAppt is null in method bookAppointmentIntoTheatreSlot");

		doSessionTheatreSlot.setAppointment(doAppt);

		doSessionTheatreSlot.setStatus(getDomLookup(Status_Reason.BOOKED));
		doSessionTheatreSlot.setStatusReason(getDomLookup(Status_Reason.BOOKED));

		SessionSlotStatus doStat = new SessionSlotStatus();
		doStat.setDateTime(new java.util.Date());
		doStat.setStatus(doSessionTheatreSlot.getStatus());
		doStat.setStatusReason(doSessionTheatreSlot.getStatusReason());
		doSessionTheatreSlot.getStatusReasonHistory().add(doStat);

		return doSessionTheatreSlot;
	}

	//WDEV-12918 changed visibility
	public void removeApptFromExistingSessionApptOrder(Booking_Appointment doAppt) throws StaleObjectException
	{
		String hql = "from Sch_Session_Appointment_Order sap where sap.id = (select ssap.id from Sch_Session_Appointment_Order as ssap left join ssap.appointments as appt where (appt.id = " + doAppt.getId() + "))";

		List existingSessApptOrder = getDomainFactory().find(hql);
		if (existingSessApptOrder != null && existingSessApptOrder.size() == 1)
		{
			Sch_Session_Appointment_Order doSessApptOrder = (Sch_Session_Appointment_Order) existingSessApptOrder.get(0);

			// WDEV - 8271 - proxy class comparison here was failing
			// need to build new appts list as remove was failing
			List newlstAppts = new ArrayList();
			Iterator it = doSessApptOrder.getAppointments().iterator();
			while (it.hasNext())
			{
				Booking_Appointment doSessAppt = (Booking_Appointment) it.next();
				if (!doSessAppt.getId().equals(doAppt.getId()))
				{
					newlstAppts.add(doSessAppt);
				}
			}
			doSessApptOrder.getAppointments().clear();
			doSessApptOrder.setAppointments(newlstAppts);

			getDomainFactory().save(doSessApptOrder);
		}

	}

	//WDEV-12918 changed visibility
	// fixing idx and assembler null pointer problem
	public Boolean alreadyExists(Sch_Session_Appointment_Order doSessApptOrder, Booking_Appointment doAppt)
	{
		for (int i = 0; doSessApptOrder != null && doSessApptOrder.getAppointments() != null && i < doSessApptOrder.getAppointments().size(); i++)
		{
			if (doSessApptOrder.getAppointments().get(i) != null && ((Booking_Appointment) doSessApptOrder.getAppointments().get(i)).getId() != null && doAppt != null && doAppt.getId() != null && (((Booking_Appointment) doSessApptOrder.getAppointments().get(i)).getId().equals(doAppt.getId())))
				return true;
		}

		return false;
	}

	/**
	 * list Booking appointments for a session
	 */
	public ims.scheduling.vo.BookingAppointmentTheatreVoCollection listBookingAppointment(ims.scheduling.vo.Sch_SessionRefVo session)
	{
		DomainFactory factory = getDomainFactory();
		return BookingAppointmentTheatreVoAssembler.createBookingAppointmentTheatreVoCollectionFromBooking_Appointment(factory.find(" from Booking_Appointment book where book.session.id = :sessionId", new String[]{"sessionId"}, new Object[]{session.getID_Sch_Session()})).sort();
	}

	/**
	 * check Booking Rights for this Role and Session
	 */
	public Boolean hasBookingRights(IAppRole role, Sch_SessionRefVo session)
	{
		if (role == null)
			throw new CodingRuntimeException("role is null in method hasBookingRights");
		if (session == null || session.getID_Sch_Session() == null)
			throw new CodingRuntimeException("session is null or id not provided in method hasBookingRights");

		DomainFactory factory = getDomainFactory();
		String hql = "select count(bookRight.id) from Sch_Session as session left join session.bookingRights as bookRight where (session.id = :idSession and bookRight.role.id = :idRole)";

		int count = -1;
		List lstCount = factory.find(hql, new String[]{"idSession", "idRole"}, new Object[]{session.getID_Sch_Session(), role.getId()});
		Iterator it = lstCount.iterator();
		if (it.hasNext())
		{
			Long res = (Long) it.next();
			count = res.intValue();
		}

		return count > 0;
	}

	/**
	 * listLocationLite
	 */
	public ims.core.vo.LocationLiteVoCollection listLocationLite()
	{
		DirectoryOfServiceAdmin impl = (DirectoryOfServiceAdmin) getDomainImpl(DirectoryOfServiceAdminImpl.class);
		return impl.listLocationLiteByName(null);
	}

	/**
	 * getReferralDetail - Referral Booking Vo contains all the data for the top
	 * panel (Referral Details) - in the Booking Screen for CARE_UK
	 */
	public ims.RefMan.vo.ReferralBookingVo getReferralDetail(ims.RefMan.vo.CatsReferralRefVo catsReferral)
	{
		if (catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provide for method getReferralDetail");

		DomainFactory factory = getDomainFactory();

		ReferralBookingVo voReferralBooking = new ReferralBookingVo();

		CatsReferral doCatsRef = (CatsReferral) factory.getDomainObject(catsReferral);
		if (doCatsRef != null)
		{
			// WDEV-8144
			voReferralBooking.setIsFitForSurgery(doCatsRef.isIsFitForSurgery());
			if (doCatsRef.getCareContext() != null)
				voReferralBooking.setCareContext(new CareContextRefVo(doCatsRef.getCareContext().getId(), doCatsRef.getCareContext().getVersion()));

			java.util.Date triageDateTime = doCatsRef.getTriageDateTime();
			if (triageDateTime != null)
				voReferralBooking.setTriageDateTime(new ims.framework.utils.DateTime(triageDateTime));

			ReferralLetterDetailsBookingVo voReferralLetterDetail = ReferralLetterDetailsBookingVoAssembler.create(doCatsRef.getReferralDetails());

			if (voReferralLetterDetail != null)
			{
				// WDEV-11713-Start
				if (doCatsRef.getContract() != null)
				{
					voReferralLetterDetail.setDayTo1stApp(doCatsRef.getContract().getDaysTo1stAppt());
					voReferralLetterDetail.setDaysToRTTBreachDate(doCatsRef.getContract().getDaysToRTTBreachDate());
				}
				// WDEV-11713-End
				// WDEV-10473
				if (voReferralLetterDetail.getDateOfReferralIsNotNull())
				{
					ExclusionDatesVo voExDate = listExclusionDates();
					// WDEV-8017 - kpi days within 13 weeks
					Date[] arrDates = null;
					if (voReferralLetterDetail.getDayTo1stAppIsNotNull())// WDEV-11713
						arrDates = ExclusionDatesVo.getKPIDays(voReferralLetterDetail.getDateOfReferral(), voReferralLetterDetail.getDaysToRTTBreachDate(), voExDate != null ? voExDate.getDates() : null, true);// WDEV-11713 & WDEV-12918
					voReferralLetterDetail.setKPIDays(arrDates);
					// WDEV-9539 superceding - kpi within 13 weeks
					voReferralLetterDetail.setEndXdayKPI((ExclusionDatesVo.addBusinessDays(voReferralLetterDetail.getDateOfReferral(), voReferralLetterDetail.getDaysToRTTBreachDate(), voExDate != null ? voExDate.getDates() : null, true)));// WDEV-11713 & WDEV-12918
				}
				voReferralBooking.setReferralLetterDetail(voReferralLetterDetail);
			}
		}

		// Theatre CurrentAppts - theatre appts with status of Booked for
		// Referral
		List theatreAppts = factory.find("select appt from CatsReferral as catsRef join catsRef.appointments as appt where (catsRef.id = :idCatsRef and appt.apptStatus = :bookedStatus and appt.theatreBooking <> null )", new String[]{"idCatsRef", "bookedStatus"}, new Object[]{catsReferral.getID_CatsReferral(), getDomLookup(Status_Reason.BOOKED)});
		voReferralBooking.setCurrentAppointments(BookingAppointmentLiteVoAssembler.createBookingAppointmentLiteVoCollectionFromBooking_Appointment(theatreAppts));

		// TheatreAppts Requiring Rebook for Referral
		List rebookTheatreAppts = factory.find("select appt from CatsReferral as catsRef join catsRef.appointments as appt where (catsRef.id = :idCatsRef and appt.requiresRebook = 1 and appt.theatreBooking <> null )", new String[]{"idCatsRef"}, new Object[]{catsReferral.getID_CatsReferral()});
		voReferralBooking.setAppointmentsRequiringRebook(BookingAppointmentLiteVoAssembler.createBookingAppointmentLiteVoCollectionFromBooking_Appointment(rebookTheatreAppts));

		// Clinical Appts - WDEV-7653
		List clinAppts = factory.find("select appt from CatsReferral as catsRef join catsRef.appointments as appt where (catsRef.id = :idCatsRef and appt.theatreBooking is null )", new String[]{"idCatsRef"}, new Object[]{catsReferral.getID_CatsReferral()});
		voReferralBooking.setOtherAppointments(BookingAppointmentLiteVoAssembler.createBookingAppointmentLiteVoCollectionFromBooking_Appointment(clinAppts));

		// Invs Requiring an appt - For the CatsReferral - orderInvestigations
		// that are in the InvestigationOrders Collection and not in the
		// collection of OrderInvAppt
		List ordInvs = listInvsRequiringAppt(catsReferral, factory);
		voReferralBooking.setOrdersRequiringAppt(OrderInvestigationBookingVoAssembler.createOrderInvestigationBookingVoCollectionFromOrderInvestigation(ordInvs));
		
		voReferralBooking.setReferralEROD(getLastTheatreEROD(catsReferral));
		
		return voReferralBooking;
	}

	// Invs Requiring an appt - For the CatsReferral - orderInvestigations that
	// are in the InvestigationOrders Collection and not in the collection of
	// OrderInvAppt
	private List listInvsRequiringAppt(ims.RefMan.vo.CatsReferralRefVo catsReferral, DomainFactory factory)
	{
		String hql = "select ordInv from CatsReferral as catsRef " + "join catsRef.investigationOrders as ocsOrder join ocsOrder.investigations as ordInv left join ordInv.investigation.providerService as provService left join provService.locationService.service as service " + "where (catsRef.id = :idCatsRef and (service.canBeScheduled = 1  ) " + "and ordInv.id not in " + "(select ordInv1.id from CatsReferral as catsRef1 " + "join  catsRef1.orderInvAppts as ordInvAppt " + "join ordInvAppt.orderInvestigation as ordInv1" + " where catsRef1.id = :idCatsRef) and ordInv.ordInvCurrentStatus.ordInvStatus.id not in (:cancelled,:cancelledrequest))";
		return factory.find(hql, new String[]{"idCatsRef", "cancelled", "cancelledrequest"}, new Object[]{catsReferral.getID_CatsReferral(), OrderInvStatus.CANCELLED.getID(), OrderInvStatus.CANCEL_REQUEST.getID()});
	}

	/**
	 * listExclusionDates
	 */
	public ims.scheduling.vo.ExclusionDatesVo listExclusionDates()
	{
		ExclusionDates impl = (ExclusionDates) getDomainImpl(ExclusionDatesImpl.class);
		return impl.listExclusionDates();
	}

	public Sch_BookingTheatreVo getSch_BookingByAppt(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provude for method getSch_BookingByAppt");

		List bookings = getDomainFactory().find("select book from Sch_Booking book left join book.appointments as appt where appt.id = '" + appt.getID_Booking_Appointment() + "'");
		if (bookings != null && bookings.size() == 1)
			return Sch_BookingTheatreVoAssembler.create((Sch_Booking) bookings.get(0));

		return null;

	}

	public BookingAppointmentTheatreVo getBookingAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided for method getBookingAppointment");

		return BookingAppointmentTheatreVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(appt));
	}

	public ServiceShortVoCollection listActiveService()
	{
		DirectoryOfServiceAdmin impl = (DirectoryOfServiceAdmin) getDomainImpl(DirectoryOfServiceAdminImpl.class);
		ServiceShortVo voService = new ServiceShortVo();
		voService.setIsActive(Boolean.TRUE);
		return impl.listService(voService);
	}

	// procedures
	public ims.vo.interfaces.IGenericItem[] listProcedures(String filter)
	{
		CCIAdmin impl = (CCIAdmin) getDomainImpl(CCIAdminImpl.class);
		return impl.listIGenericItems(filter, CciType.PROCEDURE, true);
	}

	public Date getCurrentMonth(ServiceRefVo service, LocationRefVo location, IMos consultant, IGenericItem procedure, TheatreType theatreType)
	{
		if (procedure == null)
			throw new DomainRuntimeException("Not all mandatory search params set in method getCurrentMonth");

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		String listOwnerJoin = "";
		String listOwnerCriteria = "";
		String serviceCriteria = "";
		String locationCriteria = "";
		String theatreTypeCriteria = "";

		markers.add("procId");
		markers.add("open");
		markers.add("today");

		values.add(procedure.getIGenericItemInfoID());
		values.add(getDomLookup(Session_Status_and_Reason.OPEN));
		values.add(new Date().getDate());

		if (consultant != null)
		{
			listOwnerJoin = " left join session.listOwners as listOwn ";
			listOwnerCriteria = " and (listOwn.hcp.id = :hcpId) ";
			markers.add("hcpId");
			values.add(consultant.getIMosHcpId());
		}
		if (service != null)
		{
			markers.add("idService");
			values.add(service.getID_Service());
			serviceCriteria = " and session.service.id = :idService";
		}
		if (location != null)
		{
			markers.add("idLocation");
			values.add(location.getID_Location());
			locationCriteria = " and session.schLocation.id = :idLocation";
		}
		if (theatreType != null)
		{
			markers.add("theatType");
			values.add(getDomLookup(theatreType));
			theatreTypeCriteria = " and session.theatreType = :theatType";
		}

		DomainFactory factory = getDomainFactory();

		List date = factory.find(" Select min (session.sessionDate) from Sch_Session as session " + " left join session.theatreProceduresRemaining as theatreSlot left join theatreSlot.procedureDetails as proc" + listOwnerJoin + " where ( proc.procedure.id = :procId) " + serviceCriteria + locationCriteria + listOwnerCriteria + theatreTypeCriteria + " and session.sessionStatus = :open and session.sessionDate >= :today  and session.isTheatreSession = TRUE ", markers, values, 1000);// WDEV-11777

		if (date != null && date.get(0) != null)
			return new ims.framework.utils.Date((java.util.Date) date.get(0));

		return null;
	}

	public SessionTheatreVoCollection listSession(Date startDate, Date endDate, ServiceRefVo service, LocationRefVo location, IMos consultant, IGenericItem procedure, TheatreType theatreType, Integer timeRequired, Boolean allowOverBook)
	{
		// all params must be set
		if (startDate == null || endDate == null || procedure == null)
			throw new DomainRuntimeException("Not all mandatory search params set in method listSession");

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Serializable> values = new ArrayList<Serializable>();

		String listOwnerJoin = "";
		String listOwnerCriteria = "";
		String serviceCriteria = "";
		String locationCriteria = "";
		String theatreTypeCriteria = "";
		String timeRequiredCriteria = "";

		// mandatory fields
		markers.add("procId");
		markers.add("open");
		markers.add("startDate");
		markers.add("endDate");

		values.add(procedure.getIGenericItemInfoID());
		values.add(getDomLookup(Session_Status_and_Reason.OPEN));
		values.add(startDate.getDate());
		values.add(endDate.getDate());

		// WDEV-9946
		if (consultant != null && consultant.getIMosHcpId() != null)
		{
			listOwnerJoin = " left join session.listOwners as listOwn ";
			listOwnerCriteria = " and (listOwn.hcp.id = :hcpId) ";
			markers.add("hcpId");
			values.add(consultant.getIMosHcpId());
		}
		if (service != null)
		{
			markers.add("idService");
			values.add(service.getID_Service());
			serviceCriteria = " and session.service.id = :idService";
		}
		if (location != null)
		{
			markers.add("idLocation");
			values.add(location.getID_Location());
			locationCriteria = " and session.schLocation.id = :idLocation";
		}
		if (theatreType != null)
		{
			markers.add("theatType");
			values.add(getDomLookup(theatreType));
			theatreTypeCriteria = " and session.theatreType = :theatType";

			// WDEV-7505
			if (!theatreType.equals(TheatreType.BOTH))
			{
				theatreTypeCriteria = " and ( session.theatreType = :theatType or session.theatreType = :bothType ) ";
				markers.add("bothType");
				values.add(getDomLookup(TheatreType.BOTH));
			}
		}
		// WDEV-9539
		// only do filtering on time remaining if we are not overbooking
		if (!allowOverBook)
		{
			if (timeRequired != null)
			{
				markers.add("timeRequired");
				values.add(timeRequired);
				timeRequiredCriteria = " and theatreProcRemaining.remainingTimeInMins >= :timeRequired ";
			}
		}

		DomainFactory factory = getDomainFactory();
		SessionTheatreVoCollection voCollSessionShort = new SessionTheatreVoCollection();

		markers.add("openId");
		values.add(Status_Reason.SLOTOPENED.getID());

		List sessions = factory.find(" Select distinct session from Sch_Session as session " + " left join session.theatreProceduresRemaining as theatreProcRemaining " + "left join theatreProcRemaining.procedureDetails as proc " + "left join session.theatreSlots as tSlot " + listOwnerJoin + " where ( proc.procedure.id = :procId) " + serviceCriteria + locationCriteria + listOwnerCriteria + theatreTypeCriteria + timeRequiredCriteria + " and session.sessionStatus = :open and session.sessionDate >= :startDate and session.sessionDate <= :endDate and session.isTheatreSession = TRUE and (tSlot.status.id = :openId or tSlot is null) ", markers, values, 1000);// wdev-11777

		voCollSessionShort = SessionTheatreVoAssembler.createSessionTheatreVoCollectionFromSch_Session(sessions);

		return voCollSessionShort.sort();
	}

	public PatientICPFullVo getPatientICP(CareContextRefVo careCOntextRefVo)
	{
		if (careCOntextRefVo != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from PatientICP pICP where ");
			String andStr = " ";

			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();

			hql.append(andStr + " pICP.careContext.id = :pICPID");
			markers.add("pICPID");
			values.add(careCOntextRefVo.getID_CareContext());
			andStr = " and ";

			hql.append(andStr + " pICP.completedDateTime = null");
			andStr = " and ";

			List listAdditional = factory.find(hql.toString(), markers, values);
			if (listAdditional != null && listAdditional.size() > 0)
			{
				PatientICPFullVoCollection voColl = PatientICPFullVoAssembler.createPatientICPFullVoCollectionFromPatientICP(listAdditional);
				if (voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}

	public PatientICPFullVo savePatientICP(PatientICPFullVo pateintICPVo) throws DomainInterfaceException, StaleObjectException
	{
		if (pateintICPVo == null)
			throw new CodingRuntimeException("Invalid patientICPVo");
		if (!pateintICPVo.isValidated())
			throw new CodingRuntimeException("patientICPVo not validated");

		DomainFactory factory = getDomainFactory();
		PatientICP domainObject = PatientICPFullVoAssembler.extractPatientICP(factory, pateintICPVo);

		factory.save(domainObject);

		return PatientICPFullVoAssembler.create(domainObject);
	}

	public SuitableForSurgeryAssessmentMinVo getSuitableForSurgeryAssessmentByCareContext(CareContextRefVo careContext)
	{
		if (careContext == null || careContext.getID_CareContext() == null)
			throw new CodingRuntimeException("careContext is null or id not provided in method getSuitableForSurgeryAssessmentByCareContext");

		List assessments = getDomainFactory().find("from SuitableForSurgeryAssessment sfsa where sfsa.careContext.id = " + careContext.getID_CareContext() + " and (sfsa.isRIE is null or sfsa.isRIE = false) order by sfsa.systemInformation.creationDateTime desc "); // WDEV-8144
																																																																		// fix
		if (assessments != null && assessments.size() > 0)
			return SuitableForSurgeryAssessmentMinVoAssembler.create((SuitableForSurgeryAssessment) assessments.get(0));

		return null;
	}

	//WDEV-12918 changed visibility
	public String getLastSuitableForSurgeryAssessmentProcedureTextByCareContext(CareContextRefVo careContext)
	{
		if (careContext == null)
			throw new CodingRuntimeException("careContext is null in method getLastSuitableForSurgeryAssessmentProcedureTextByCareContext");

		String ret = null;

		String hql = "select pp.procedureDescription from SuitableForSurgeryAssessment as ssa right join ssa.procedure as pp where ssa.careContext.id = " + careContext.getID_CareContext() + " and (ssa.isRIE is null or ssa.isRIE = false) order by ssa.systemInformation.creationDateTime desc ";
		List procs = getDomainFactory().find(hql);
		if (procs != null && procs.size() > 0)
		{
			ret = (String) procs.get(0);
		}

		return ret;
	}

	/**
	 * WDEV-11777 countNonCancelledAppointmentsForSession
	 */
	public Integer countNonCancelledAppointmentsForSession(Sch_SessionRefVo session)
	{
		if (session == null || session.getID_Sch_Session() == null)
			throw new CodingRuntimeException("session is null or id not provided in method countNonCancelledAppointmentsForSession");

		List lstCount = getDomainFactory().find("select count(appt.id) from Booking_Appointment appt where appt.session.id = " + session.getID_Sch_Session() + " and appt.apptStatus.id <> " + Integer.valueOf(Status_Reason.CANCELLED.getID()));

		int count = 0;
		if (lstCount != null)
		{
			Iterator it = lstCount.iterator();
			if (it.hasNext())
			{
				Long res = (Long) it.next();
				count = res.intValue();
			}
		}

		return count;
	}

	/**
	 * WDEV-12080 - Function used to retrieve the latest
	 */
	public FitForSurgeryAssessmentLiteVo getLatestFitForSurgeryAssessment(CatsReferralRefVo referral)
	{
		// Check referral - while it might be passed from a mandatory GC now,
		// that might change
		if (referral == null || !referral.getID_CatsReferralIsNotNull())
			throw new DomainRuntimeException("CatsReferral can not be null");

		ArrayList<String> paramNames = new ArrayList<String>();
		ArrayList<Object> paramValues = new ArrayList<Object>();

		String query = "select fit from FitForSurgeryAssesment as fit left join fit.careContext as fitCare," + " CatsReferral as cats left join cats.careContext as catsCare where fitCare.id = catsCare.id and cats.id = :ID" + " order by fit.systemInformation.creationDateTime desc";

		paramNames.add("ID");
		paramValues.add(referral.getID_CatsReferral());

		return FitForSurgeryAssessmentLiteVoAssembler.create((FitForSurgeryAssesment) getDomainFactory().findFirst(query, paramNames, paramValues));
	}

	/**
	 *  WDEV-12157
	 *  Update Active Monitoring Appointment required status for CatsReferral
	 */
	//WDEV-12918 changed visibility
	public void updateActiveMonitoring(CatsReferralRefVo catsReferral) throws StaleObjectException 
	{
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);
		if (doCatsReferral.getCurrentStatus() != null
			&& doCatsReferral.getCurrentStatus().getReferralStatus().equals(getDomLookup(ReferralApptStatus.ACTIVE_MONITORING))
			&& doCatsReferral.isIsActiveMonitorApptRequired().booleanValue())
		{
			doCatsReferral.setIsActiveMonitorApptRequired(Boolean.FALSE);

			factory.save(doCatsReferral);
		}
	}

	//wdev-13765
	public SessionTheatreVo getSessionTheatre(Sch_SessionRefVo sessionRef) 
	{
		DomainFactory factory = getDomainFactory();
		
		if( sessionRef == null || sessionRef.getID_Sch_Session() == null )
			return null;
		 

		String hql = "from Sch_Session as s1_1 where (s1_1.id = :sessionID)";
		List list =  factory.find(hql, new String[]{"sessionID"}, new Object[]{sessionRef.getID_Sch_Session()});
		if(list != null && list.size() > 0)
		{
			SessionTheatreVoCollection tempColl = SessionTheatreVoAssembler.createSessionTheatreVoCollectionFromSch_Session(list);
			if(tempColl != null && tempColl.size() > 0)
			{
				return tempColl.get(0);
			}
		}
		return null;
		
		
	}

	public ReferralERODVo getLastTheatreEROD(CatsReferralRefVo catsReferral)
	{
		if(catsReferral == null || catsReferral == null)
			return null;
		
		DomainFactory factory = getDomainFactory();
		List lastTheatreErod = factory.find("select theaErod from CatsReferral as cats left join cats.electiveEROD as theaErod where cats.id = :CatsReferralId and (theaErod.isRIE is null or theaErod.isRIE = 0) and theaErod.sequence = (select max(theaErodSec.sequence) from CatsReferral as catsSec left join catsSec.electiveEROD as theaErodSec where catsSec.id = :CatsReferralId and (theaErodSec.isRIE is null or theaErodSec.isRIE = 0))", new String[] {"CatsReferralId"}, new Object[] {catsReferral.getID_CatsReferral()});
			
		if(lastTheatreErod != null && lastTheatreErod.size() > 0 && lastTheatreErod.get(0) instanceof ReferralEROD)
		{
			return ReferralERODVoAssembler.create((ReferralEROD) lastTheatreErod.get(0));
		}
			
		return null;
	}
}
