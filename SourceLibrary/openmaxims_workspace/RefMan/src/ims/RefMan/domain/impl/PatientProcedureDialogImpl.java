// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4084.19189)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.ClinicalNotesCustomControl;
import ims.RefMan.domain.base.impl.BasePatientProcedureDialogImpl;
import ims.RefMan.vo.CatsReferralForClinicalNotesVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ReferralClinicalNotesVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.domain.DomainFactory;
import ims.domain.exceptions.StaleObjectException;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class PatientProcedureDialogImpl extends BasePatientProcedureDialogImpl
{
	private static final long serialVersionUID = 1L;

	public Boolean saveReferralClinicalNotes(ReferralClinicalNotesVo referralClinicalNotes) throws StaleObjectException
	{
		ClinicalNotesCustomControl impl = (ClinicalNotesCustomControl) getDomainImpl(ClinicalNotesCustomControlImpl.class);
		return impl.saveReferralClinicalNotes(referralClinicalNotes);
	}

	public CatsReferralForClinicalNotesVo getReferral(CatsReferralRefVo referral)
	{
		ClinicalNotesCustomControl impl = (ClinicalNotesCustomControl) getDomainImpl(ClinicalNotesCustomControlImpl.class);
		return impl.getReferral(referral);
	}

	public ProcedureLiteVoCollection listProcedures(String searchProcedure, String listOfExistingProcedures)
	{
		if(searchProcedure == null)
			return null;
		
		searchProcedure = searchProcedure.trim().toUpperCase();
		
		if(searchProcedure == null || searchProcedure.length() == 0)
			return null;
		
		DomainFactory factory = getDomainFactory();
        Connection conection = factory.getJdbcConnection();
        
        StringBuffer sql = new StringBuffer();
        
        sql.append("select p.id, p.proceduren from core_procedure p LEFT OUTER JOIN core_procedure_keywords k ON p.id = k.id where (k.keyword like ? or p.proceduren like ?) and p.isactive = 1 ");
        
        if (listOfExistingProcedures != null && listOfExistingProcedures.trim().length() > 0)
		{
        	sql.append(" and p.id not in ("+listOfExistingProcedures+")");
		}
        
        sql.append(" order by upper(p.proceduren)");
        
        ProcedureLiteVoCollection procedureColl = new ProcedureLiteVoCollection();
        PreparedStatement ps;
        
        try 
        {
        	ps = conection.prepareCall(sql.toString());
        	ps.setString(1, searchProcedure + "%");
        	ps.setString(2, searchProcedure + "%");
        
        	ResultSet rs = ps.executeQuery();
        
        	while(rs.next())
        	{
        		ProcedureLiteVo vo = new ProcedureLiteVo();
        		vo.setID_Procedure(Integer.valueOf(rs.getString(1)));
        		vo.setProcedureName(rs.getString(2));
        		procedureColl.add(vo);
        	}
        }
        catch (SQLException e) 
        {
        	e.printStackTrace();
        }
        
        return procedureColl;
	}

	public ReferralClinicalNotesVo getReferralClinicalNotes(CatsReferralRefVo referral)
	{
		ClinicalNotesCustomControl impl = (ClinicalNotesCustomControl) getDomainImpl(ClinicalNotesCustomControlImpl.class);
		return impl.getReferralClinicalNotes(referral);
	}
}
