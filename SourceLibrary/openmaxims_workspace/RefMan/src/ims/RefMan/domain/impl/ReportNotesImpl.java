// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3625.26452)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;

import ims.RefMan.domain.ReferralWizard;
import ims.RefMan.domain.base.impl.BaseCorrespondenceNotesImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.ReportNote;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.CorrespondenceNoteVo;
import ims.RefMan.vo.CorrespondenceNoteVoCollection;
import ims.RefMan.vo.ReportNoteRefVo;
import ims.RefMan.vo.ReportsRequiredForPrintingVo;
import ims.RefMan.vo.ReportsRequiredForPrintingVoCollection;
import ims.RefMan.vo.domain.CatsReferralWizardVoAssembler;
import ims.RefMan.vo.domain.CorrespondenceNoteVoAssembler;
import ims.RefMan.vo.lookups.ReportNoteStatus;
import ims.RefMan.vo.lookups.ReportNoteType;
import ims.domain.DomainFactory;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;

import java.util.ArrayList;
import java.util.List;

public class ReportNotesImpl extends BaseCorrespondenceNotesImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* listReportNotes
	*/
	public ims.RefMan.vo.CorrespondenceNoteVoCollection listReportNotes(ims.RefMan.vo.CatsReferralRefVo catsRefVo)
	{
		if(catsRefVo == null || catsRefVo.getID_CatsReferral() == null) {
			throw new CodingRuntimeException("CatsReferralVo is null or id not provided");
		}
		
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer("select notes from ReportNote as notes left join notes.catsReferral as cats left join notes.noteStatus as status");
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<Integer> values = new ArrayList<Integer>();
		
		hql.append("  where cats.id = :idCatsRefferal");
		names.add("idCatsRefferal");
		values.add(catsRefVo.getID_CatsReferral());	
		
		hql.append("  and status.id in ( " + ReportNoteStatus.DRAFT.getID() + " ," +  ReportNoteStatus.ACTIVE.getID() + ")");		
		
		List<?> result = factory.find(hql.toString(),names,values);
		
		if (result != null && result.size() > 0) {
			CorrespondenceNoteVoCollection voColl = CorrespondenceNoteVoAssembler.createCorrespondenceNoteVoCollectionFromReportNote(result);
			if(voColl != null && voColl.size() > 0) 
			{
				voColl.sort(SortOrder.DESCENDING);
				return voColl;
			}
		}
		
		return null;
	}

	public ims.RefMan.vo.CorrespondenceNoteVo saveReportNote(ims.RefMan.vo.CorrespondenceNoteVo note, Boolean shouldRemoveType, ReportNoteType removeType) throws ims.domain.exceptions.StaleObjectException
	{	
		if(note == null) {
			throw new CodingRuntimeException("ReportNoteVo is null");
		}			
		

		//On save of a Report Note record if the status is ACTIVE please add the "Report Note Type" selected 
		//to the CATSReferral.ReportsRequired collection if it is not already in the collection
		/**
		 * WDEV-9569 It seems we have to save Reports Required every time, if not we risk to get unsynchronized.
		 * Issues fixed:
		 * 1).When we edit a report and change the status from active to passive and we also change the reportnotetype 
		 * we will try to remove the new reportnotetype , leaving the old one in the list.
		 * 2).When we have 2 active record of the same reportnotetype and change one of them from active to passive, we will 
		 * remove the reportnotetype although it should not be removed.
		 * 
		 */
		DomainFactory factory = getDomainFactory();
		
		if (note.getCatsReferralIsNotNull())
		{
			CatsReferralWizardVo currentCatsReferral = getCatsReferral(note.getCatsReferral());
			ReportsRequiredForPrintingVoCollection reportsRequired = currentCatsReferral.getReportsRequired();
			if(reportsRequired == null)
				reportsRequired = new ReportsRequiredForPrintingVoCollection();
			
			//should save the CatsReferralWizardVo ?
			boolean save = false;
			//if Note is active 
			if (ReportNoteStatus.ACTIVE.equals(note.getNoteStatus()))
			{
				//and the Required reports doesn't have already this type , add it 
				boolean bFound = false;
				for (int j = 0 ; reportsRequired != null && j < reportsRequired.size() ; j++)
				{
					if (reportsRequired.get(j).getReportsRequired().equals(note.getNoteType())
						&& reportsRequired.get(j).getPrintedDate() == null)
						bFound = true;
					
					//if a matching report type and already printed, set the info to mark as needs printing.
					if (reportsRequired.get(j).getReportsRequired().equals(note.getNoteType())
						&& reportsRequired.get(j).getPrintedDateIsNotNull())
					{
						reportsRequired.get(j).setPrintedDate(null);
						reportsRequired.get(j).setPrintedBy(null);
						
						bFound = true;
						save = true;
					}
				}
				if (!bFound)
				{
					ReportsRequiredForPrintingVo voReportReq = new ReportsRequiredForPrintingVo();
					voReportReq.setReportsRequired(note.getNoteType());
					
					reportsRequired.add(voReportReq);
					save = true;
				}
			}
			else
			{
				//if it is draft, is not new ,there are no active notes of this type and the reports require contain this type
				//remove the type
				if (note.getID_ReportNoteIsNotNull() && shouldRemoveType)
				{
					for (int j = 0 ; reportsRequired != null && j < reportsRequired.size() ; j++)
					{
						if (reportsRequired.get(j).getReportsRequired().equals(note.getNoteType()))
						{
							reportsRequired.remove(j);
							save = true;
						}
					}
				}
			}
			if (removeType != null)
			{
				for (int i = 0 ; i < reportsRequired.size() ; i++)
				{
					if (removeType.equals(reportsRequired.get(i).getReportsRequired()))
					{
						reportsRequired.remove(i);
						save = true;
						break;
					}
				}
			}
			if (save)
			{
				CatsReferral catsReferral = CatsReferralWizardVoAssembler.extractCatsReferral(factory,currentCatsReferral);
				factory.save(catsReferral);
				
			}
		}
		
		ReportNote doReportNote = CorrespondenceNoteVoAssembler.extractReportNote(factory, note);				
		factory.save(doReportNote);	
		
		CorrespondenceNoteVo reportNoteForPreview = (CorrespondenceNoteVo) note.clone();
		reportNoteForPreview.setID_ReportNote(null);
		reportNoteForPreview.setNoteStatus(ReportNoteStatus.PREVIEW);
		ReportNote doReportNoteForPreview = CorrespondenceNoteVoAssembler.extractReportNote(factory, reportNoteForPreview);				
		factory.save(doReportNoteForPreview);
		
		return CorrespondenceNoteVoAssembler.create(doReportNote);
	}
	
	public ims.RefMan.vo.CorrespondenceNoteVo getReportNote(ReportNoteRefVo note)
	{
		if (note == null)
			throw new RuntimeException("Cannot get ReportNoteVo for null ReportNoteRefVo");

		ReportNote doReportNote = (ReportNote) getDomainFactory().getDomainObject(ReportNote.class, note.getID_ReportNote());
		return CorrespondenceNoteVoAssembler.create(doReportNote);		
	}

	public CatsReferralWizardVo getCatsReferral(CatsReferralRefVo voCatsRef)
	{
		ReferralWizard impl = (ReferralWizard) getDomainImpl(ReferralWizardImpl.class);
		return impl.getCatsReferral(voCatsRef);
	}
	
}
