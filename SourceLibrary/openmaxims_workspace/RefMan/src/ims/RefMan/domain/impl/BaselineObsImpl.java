// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.64 build 3155.28032)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.domain.impl;

import ims.admin.domain.MosAdmin;
import ims.admin.domain.MosSearch;
import ims.admin.domain.impl.MosAdminImpl;
import ims.admin.domain.impl.MosSearchImpl;
import ims.admin.helper.Keywords;
import ims.RefMan.domain.base.impl.BaseBaselineObsComponentImpl;
import ims.RefMan.domain.objects.NursingNotes;
import ims.RefMan.vo.BaselineObservationsVoCollection;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.PresentationReferralSummaryVo;
import ims.RefMan.vo.PresentationReferralSummaryVoCollection;
import ims.RefMan.vo.domain.BaselineObservationsVoAssembler;
import ims.RefMan.vo.domain.PresentationReferralSummaryVoAssembler;
import ims.core.resource.people.domain.objects.Hcp;
import ims.core.resource.people.domain.objects.MemberOfStaff;
import ims.core.vo.AllergenVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.MemberOfStaffShortVoCollection;
import ims.core.vo.MemberOfStaffVo;
import ims.core.vo.domain.AllergenVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.MemberOfStaffVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.exceptions.CodingRuntimeException;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class BaselineObsImpl extends BaseBaselineObsComponentImpl
{

	private static final long serialVersionUID = 1L;

	/**
	* saveBaselineObs
	*/
	public ims.RefMan.vo.BaselineObservationsVo saveBaselineObs(ims.RefMan.vo.BaselineObservationsVo voBaselineObs) throws ims.domain.exceptions.StaleObjectException
	{
		if(voBaselineObs == null)
			throw new CodingRuntimeException("Invalid voBaselineObs");
		if(!voBaselineObs.isValidated())
			throw new CodingRuntimeException("voBaselineObs not validated");
		
		DomainFactory factory = getDomainFactory();
		NursingNotes domainObject = BaselineObservationsVoAssembler.extractNursingNotes(factory, voBaselineObs);
		
		factory.save(domainObject);
		
		return BaselineObservationsVoAssembler.create(domainObject);
	}

	/**
	* get BaselineObs
	*/
	public ims.RefMan.vo.BaselineObservationsVo getBaselineObs(ims.RefMan.vo.CatsReferralRefVo voCATSReferralRef)
	{
		if(voCATSReferralRef != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from BaselineObservations bl where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " bl.catsReferral.id = :cats");
 			markers.add("cats");
			values.add(voCATSReferralRef.getID_CatsReferral());
			andStr = " and ";	

			List listAdditional = factory.find(hql.toString(), markers,values);
			if(listAdditional != null && listAdditional.size() > 0)
			{ 
				BaselineObservationsVoCollection voColl = BaselineObservationsVoAssembler.createBaselineObservationsVoCollectionFromNursingNotes(listAdditional);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}

	public MemberOfStaffShortVoCollection listMOS(MemberOfStaffShortVo voMOSFilter) 
	{
		MosSearch mosSearch = (MosSearch)getDomainImpl(MosSearchImpl.class);
		return mosSearch.listMembersOfStaff(voMOSFilter);
	}

	public MemberOfStaffVo getMemberOfStaff(MemberOfStaffShortVo mos)
	 {
		MosAdmin mosAdmin = (MosAdmin)getDomainImpl(MosAdminImpl.class);
		return mosAdmin.getMemberOfStaff(mos);
	}

	public HcpLiteVo getHCP(MemberOfStaffShortVo voMOS) 
	{
		DomainFactory factory = getDomainFactory();
		String hql = " from Hcp h " +
		" where h.mos.id = :mosid";

		List hcpList = factory.find(hql,new String[]{"mosid"}, new Object[]{voMOS.getID_MemberOfStaff()});

		if (hcpList == null || hcpList.size() == 0)
			return null;

		return HcpLiteVoAssembler.create((Hcp)hcpList.get(0));
	}

	public MemberOfStaffVo getMos(HcpLiteVo voHCP) 
	{
		DomainFactory factory = getDomainFactory();
		String hql = " from MemberOfStaff m " +
		" where m.hcp.id = :hcpid";

		List mosList = factory.find(hql,new String[]{"hcpid"}, new Object[]{voHCP.getID_Hcp()});

		if (mosList == null || mosList.size() == 0)
			return null;

		return MemberOfStaffVoAssembler.create((MemberOfStaff)mosList.get(0));
	}

	public PresentationReferralSummaryVo getPresentationReferralSummary(CatsReferralRefVo catsRefVo) 
	{
		if(catsRefVo != null)
		{
			DomainFactory factory = getDomainFactory();
			StringBuffer hql = new StringBuffer(" from PresentationReferralSummary presRS where "); 
			String andStr = " ";
		
			ArrayList<String> markers = new ArrayList<String>();
			ArrayList<Serializable> values = new ArrayList<Serializable>();
		
			hql.append(andStr + " presRS.catsReferral.id = :cats");
 			markers.add("cats");
			values.add(catsRefVo.getID_CatsReferral());
			andStr = " and ";	

			List listAdditional = factory.find(hql.toString(), markers,values);
			if(listAdditional != null && listAdditional.size() > 0)
			{ 
				PresentationReferralSummaryVoCollection voColl = PresentationReferralSummaryVoAssembler.createPresentationReferralSummaryVoCollectionFromPresentationReferralSummary(listAdditional);
				if(voColl != null && voColl.size() > 0)
					return voColl.get(0);
			}
		}
		return null;
	}

	public AllergenVoCollection listActiveAllergies(String filter) throws DomainInterfaceException 
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" from ");
		
		hql.append("Allergen x ");
		hql.append(" join x.keywords as kw");
		
		ArrayList names = new ArrayList();
		ArrayList values = new ArrayList();
		
		hql.append(" where x.isActive = :isActive");
		names.add("isActive");
		values.add(Boolean.TRUE);	
		
		List resultsList = Keywords.searchByKeywords(factory, filter, hql.toString(), names, values);
		if (resultsList.size() > 0)
			return AllergenVoAssembler.createAllergenVoCollectionFromAllergen(resultsList).sort();
		else
			return null;
	}


}
