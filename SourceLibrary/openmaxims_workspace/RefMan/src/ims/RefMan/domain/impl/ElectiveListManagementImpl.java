// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4972.23166)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.domain.impl;


import ims.admin.vo.ElectiveListConfigLiteVoCollection;
import ims.admin.vo.domain.ElectiveListConfigLiteVoAssembler;
import ims.admin.vo.domain.ServiceForElectiveListConfigVoAssembler;
import ims.RefMan.domain.BookAppointment;
import ims.RefMan.domain.ReferralAppointmentDetailsComponent;
import ims.RefMan.domain.ReferralStatusList;
import ims.RefMan.domain.base.impl.BaseElectiveListManagementImpl;
import ims.RefMan.domain.objects.CatsReferral;
import ims.RefMan.domain.objects.PatientElectiveList;
import ims.RefMan.domain.objects.ReferralEROD;
import ims.RefMan.vo.CatsReferralERODWithElectiveOnlyVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralVo;
import ims.RefMan.vo.PatientElectiveListDetailsToSaveVo;
import ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo;
import ims.RefMan.vo.PatientElectiveListRefVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.RefMan.vo.domain.CatsReferralERODWithElectiveOnlyVoAssembler;
import ims.RefMan.vo.domain.CatsReferralVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListDetailsToSaveVoAssembler;
import ims.RefMan.vo.domain.PatientElectiveListForTCIDetailsDialogVoAssembler;
import ims.RefMan.vo.domain.PatientElevectiveListManagementVoAssembler;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ERODStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.domain.ClinicalCoding;
import ims.clinical.domain.impl.ClinicalCodingImpl;
import ims.core.admin.domain.objects.CareContext;
import ims.core.admin.domain.objects.EpisodeOfCare;
import ims.core.admin.vo.CareContextRefVo;
import ims.core.admin.vo.EpisodeOfCareRefVo;
import ims.core.patient.domain.objects.Patient;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.EpisodeofCareShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.domain.CareContextShortVoAssembler;
import ims.core.vo.domain.EpisodeofCareShortVoAssembler;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.core.vo.domain.PatientShortAssembler;
import ims.core.vo.domain.ProcedureLiteVoAssembler;
import ims.core.vo.domain.ServiceLiteVoAssembler;
import ims.core.vo.lookups.MedicGrade;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.domain.hibernate3.IMSCriteria;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.domain.PatientAppointmentManagement;
import ims.scheduling.domain.SessionAdmin;
import ims.scheduling.domain.impl.PatientAppointmentManagementImpl;
import ims.scheduling.domain.impl.SessionAdminImpl;
import ims.scheduling.domain.objects.Booking_Appointment;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.domain.objects.Session_Slot;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionServiceAndSlotActivityVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.Session_SlotRefVo;
import ims.scheduling.vo.domain.BookingAppointmentTheatreVoAssembler;
import ims.scheduling.vo.domain.SessionShortVoAssembler;
import ims.scheduling.vo.domain.SessionSlotVoAssembler;

import java.util.ArrayList;
import java.util.List;

public class ElectiveListManagementImpl extends BaseElectiveListManagementImpl
{

	private static final long serialVersionUID = 1L;

	public ims.RefMan.vo.PatientElevectiveListManagementVoCollection getElectiveListEntries(ims.admin.vo.ServiceForElectiveListConfigVo service, String electivelistname, String electivelistcode, ims.core.vo.HcpLiteVo consultant, ims.framework.utils.Date datefrom, ims.framework.utils.Date dateto, ims.core.vo.lookups.WaitingListStatus status, Boolean showAdmitted, Boolean showSuspended, Boolean show28Day, ProcedureLiteVo procedure) //wdev-18596, wdev-18662
	{
		if (service == null && electivelistname == null && electivelistcode == null && consultant == null && datefrom == null && dateto == null && status == null && procedure == null )
			throw new CodingRuntimeException("At least one search criteria must be provided");

		DomainFactory factory = getDomainFactory();

		StringBuffer hqlConditions = new StringBuffer();
		
		StringBuffer hql = new StringBuffer("select p1_1 from PatientElectiveList as p1_1 left join p1_1.electiveList as w1_1 left join p1_1.electiveListStatus as e1_1 left join e1_1.electiveListStatus as l1_1 left join p1_1.tCIDetails as p2_1 left join p2_1.currentOutcome as t2_1 left join t2_1.outcome as l2_1");
		
		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();

		String andStr = "";
		if( service != null)
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" w1_1.service.id = :Service ");
			markers.add("Service");
			values.add(service.getID_Service());
			andStr = " and ";
		}
		if( electivelistname != null )
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" UPPER(w1_1.waitingListName) like :WaitingListName ");
			markers.add("WaitingListName");
			values.add(electivelistname.toUpperCase()+"%");
			andStr = " and ";
		}
		if( electivelistcode != null )
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" UPPER(w1_1.waitingListCode) like :WaitingListCode ");
			markers.add("WaitingListCode");
			values.add(electivelistcode.toUpperCase()+"%");
			andStr = " and ";
		}
		if( consultant != null )
		{
			hql.append(" left join p1_1.consultant as consultants ");
			hqlConditions.append(andStr);
			hqlConditions.append(" consultants.id = :consultantId");
			markers.add("consultantId");
			values.add(consultant.getID_Hcp());
			andStr = " and ";
		}
		//wdev-18662
		if( procedure != null )
		{
			hql.append(" left join p1_1.primaryProcedure as proc_1 ");
			hqlConditions.append(andStr);
			hqlConditions.append(" proc_1.id = :ProcedureId");
			markers.add("ProcedureId");
			values.add(procedure.getID_Procedure());
			andStr = " and ";
		}
		if( status != null )
		{
			if( WaitingListStatus.REQUIRES_TCI.equals(status)) //WDEV-19107
			{
				if( datefrom != null )
				{
					hqlConditions.append(andStr);
					hqlConditions.append(" p1_1.dateOnList >= :dateFrom ");
					markers.add("dateFrom");
					DateTime fromDateTime = new DateTime(datefrom, new Time(0, 0));
					values.add(fromDateTime.getJavaDate());
					andStr = " and ";
				}

				if( dateto != null)
				{
					hqlConditions.append(andStr);
					hqlConditions.append(" p1_1.dateOnList <= :dateTo ");
					markers.add("dateTo");
					DateTime toDateTime = new DateTime( dateto, new Time(0, 0));
					values.add(toDateTime.getJavaDate());
					andStr = " and ";
				}

				hqlConditions.append(andStr);
				hqlConditions.append(" (e1_1.electiveListStatus.id = :Status or e1_1.electiveListStatus.id = :Status1) ");
				markers.add("Status");
				markers.add("Status1");
				values.add(getDomLookup(WaitingListStatus.CREATED).getId());
				values.add(getDomLookup(WaitingListStatus.REQUIRES_TCI).getId());
				andStr = " and ";
			}

			else 
			{	
				if ( WaitingListStatus.TCI_GIVEN.equals(status))
				{
					if( datefrom != null )
					{
						hqlConditions.append(andStr);
						hqlConditions.append(" p2_1.tCIDate >= :dateFrom ");
						markers.add("dateFrom");
						DateTime fromDateTime = new DateTime(datefrom, new Time(0, 0));
						values.add(fromDateTime.getJavaDate());
						andStr = " and ";
					}

					if( dateto != null)
					{
						hqlConditions.append(andStr);
						hqlConditions.append(" p2_1.tCIDate <= :dateTo ");
						markers.add("dateTo");
						DateTime toDateTime = new DateTime( dateto, new Time(0, 0));
						values.add(toDateTime.getJavaDate());
						andStr = " and ";
					}
				}
				else
				{
					if( datefrom != null )
					{
						hqlConditions.append(andStr);
						hqlConditions.append(" p1_1.dateOnList >= :dateFrom ");
						markers.add("dateFrom");
						DateTime fromDateTime = new DateTime(datefrom, new Time(0, 0));
						values.add(fromDateTime.getJavaDate());
						andStr = " and ";
					}

					if( dateto != null)
					{
						hqlConditions.append(andStr);
						hqlConditions.append(" p1_1.dateOnList <= :dateTo ");
						markers.add("dateTo");
						DateTime toDateTime = new DateTime( dateto, new Time(0, 0));
						values.add(toDateTime.getJavaDate());
						andStr = " and ";
					}
				}
				
				hqlConditions.append(andStr); 
				hqlConditions.append(" e1_1.electiveListStatus.id = :Status ");
				markers.add("Status");
				values.add(status.getID());
				andStr = " and ";
			}	
		}
		else
		{
			if( datefrom != null )
			{
				hqlConditions.append(andStr);
				hqlConditions.append(" p1_1.dateOnList >= :dateFrom ");
				markers.add("dateFrom");
				DateTime fromDateTime = new DateTime(datefrom, new Time(0, 0));
				values.add(fromDateTime.getJavaDate());
				andStr = " and ";
			}

			if( dateto != null)
			{
				hqlConditions.append(andStr);
				hqlConditions.append(" p1_1.dateOnList <= :dateTo ");
				markers.add("dateTo");
				DateTime toDateTime = new DateTime( dateto, new Time(0, 0));
				values.add(toDateTime.getJavaDate());
				andStr = " and ";
			}
			
			hqlConditions.append(andStr);
			hqlConditions.append(" (e1_1.electiveListStatus.id = :Status or e1_1.electiveListStatus.id = :Status1) ");
			markers.add("Status");
			markers.add("Status1");
			values.add(getDomLookup(WaitingListStatus.CREATED).getId());
			values.add(getDomLookup(WaitingListStatus.REQUIRES_TCI).getId());
			andStr = " and ";
		}
		if( Boolean.TRUE.equals(showAdmitted))
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" (l2_1.id = :Status) ");
			markers.add("Status");
			values.add(getDomLookup(AdmissionOfferOutcome.PATIENT_ADMITTED_TREATMENT_DEFERRED_5).getId());
			andStr = " and ";
		}
		if( Boolean.TRUE.equals(showSuspended))
		{
			hqlConditions.append(andStr);
			//wdev-18361
			hqlConditions.append(" (p1_1.currentSuspensionEndDate is not null  and p1_1.currentSuspensionEndDate <= :enddate) ");   
			markers.add("enddate");
			DateTime toDateTime = new DateTime();
			values.add(toDateTime.getJavaDate());
			andStr = " and ";
		}
		
		//wdev-18596
		if( Boolean.TRUE.equals(show28Day))
		{
			hqlConditions.append(andStr);
			hqlConditions.append(" (p1_1.tCIDetails is null and p1_1.requiresTCIBy <= :add28Days) ");   
			markers.add("add28Days");
			DateTime add28Day = (new DateTime()).addDays(28);
			values.add(add28Day.getJavaDate());
			andStr = " and ";
		}
		String strOrder = "";
		
		if (Boolean.TRUE.equals(show28Day))
		{
			strOrder="order by p1_1.requiresTCIBy asc";
		}
		else
		{
			strOrder="order by p1_1.dateOnList desc";
		}
		
		if (hqlConditions.length() > 0)
		{
			hqlConditions.insert(0, " where (");
			hqlConditions.append(" ) ");
		}

		List<?> list = factory.find(hql.toString() + hqlConditions.toString() + strOrder, markers, values, 2000);//wdev-18596

		if (list == null || list.size() == 0)
			return null;
		
		
		return PatientElevectiveListManagementVoAssembler.createPatientElevectiveListManagementVoCollectionFromPatientElectiveList(list);
	}

	public ims.admin.vo.ServiceForElectiveListConfigVoCollection listServices(String name)
	{
		StringBuilder hqlBuilder = new StringBuilder("select s1_1 from Service as s1_1 where s1_1.upperName like :servName and s1_1.isActive = 1 ");
		
		List <?> dos = getDomainFactory().find(hqlBuilder.toString(),"servName",name.toUpperCase()+"%");
		
		if (dos == null || dos.size() == 0)
			return null;
		
		return ServiceForElectiveListConfigVoAssembler.createServiceForElectiveListConfigVoCollectionFromService(dos); 
	}

	public ims.core.vo.HcpLiteVoCollection listConsultants(String name)
	{
		if(name == null || (name != null && name.length() == 0))
			throw new DomainRuntimeException("Can not search on null name.");
		
		StringBuffer hqlConditions = new StringBuffer();

		ArrayList<String> markers = new ArrayList<String>();
		ArrayList<Object> values = new ArrayList<Object>();
		
		String hql = "select medic.mos.hcp from Medic as medic where medic.isActive = 1 and (medic.mos.name.upperSurname like :hcpSname or medic.mos.name.upperForename like :hcpFname) and medic.grade.id =:idMedicGrade";
		markers.add("hcpSname");
		values.add(name.toUpperCase() + "%");
		
		markers.add("hcpFname");
		values.add(name.toUpperCase() + "%");
		
		markers.add("idMedicGrade");
		values.add(getDomLookup(MedicGrade.CONS).getId());

		DomainFactory factory = getDomainFactory();
		List<?> list = factory.find((hql + hqlConditions.toString() + " order by medic.mos.name.upperSurname , medic.mos.name.upperForename asc").toString(), markers, values,400);
		 
		if (list != null && list.size() > 0)
			return HcpLiteVoAssembler.createHcpLiteVoCollectionFromHcp(list);
			
		return null;
	}

	public PatientElectiveListForTCIDetailsDialogVo save(PatientElectiveListForTCIDetailsDialogVo record) throws StaleObjectException, UniqueKeyViolationException
	{
		DomainFactory factory = getDomainFactory();
		PatientElectiveList doPatientElectiveList = PatientElectiveListForTCIDetailsDialogVoAssembler.extractPatientElectiveList(factory, record);
		if( doPatientElectiveList != null)
			factory.save(doPatientElectiveList);
		
		return PatientElectiveListForTCIDetailsDialogVoAssembler.create(doPatientElectiveList);
	}

	public PatientElectiveListForTCIDetailsDialogVo getPatientElecticeList(PatientElectiveListRefVo record)
	{
		DomainFactory factory = getDomainFactory();
		PatientElectiveList doPatientElectiveList = (PatientElectiveList)factory.getDomainObject(PatientElectiveList.class, record.getID_PatientElectiveList());
		return PatientElectiveListForTCIDetailsDialogVoAssembler.create(doPatientElectiveList);
	}

	public CatsReferralERODWithElectiveOnlyVo getCatsReferralErod(CatsReferralRefVo catsRef)
	{
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral)factory.getDomainObject(CatsReferral.class, catsRef.getID_CatsReferral());
		return CatsReferralERODWithElectiveOnlyVoAssembler.create(doCatsReferral);

	}

	public SessionServiceAndSlotActivityVo getServiceAndActivityByAppt(Booking_AppointmentRefVo appt, Boolean isFlexible)
	{
		PatientAppointmentManagement impl = (PatientAppointmentManagement)getDomainImpl(PatientAppointmentManagementImpl.class);
		return impl.getServiceAndActivityByAppt(appt, isFlexible);
	}
	
	public SessionSlotVo getSessionSlot(Session_SlotRefVo slotRef)
	{
		if (slotRef == null || !slotRef.getID_Session_SlotIsNotNull())
			throw new DomainRuntimeException("Invalid Session Slot reference provided.");
		return SessionSlotVoAssembler.create((Session_Slot) getDomainFactory().getDomainObject(Session_Slot.class, slotRef.getID_Session_Slot()));
	
	}

	public CatsReferralListVo getCatsReferral(CatsReferralRefVo voReferralRef)
	{
		ReferralStatusList impl = (ReferralStatusList) getDomainImpl(ReferralStatusListImpl.class);
		return impl.getCatsReferral(voReferralRef);		
	}

	public Booking_AppointmentVo cancelAppt(Booking_AppointmentVo appt, ActionRequestType requestType, String requestSource) throws StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		return impl.cancelAppt(appt, requestType, requestSource);
	}

	public void updateCatsReferralAdditionalInvStatus(CatsReferralRefVo catsReferral) throws StaleObjectException
	{
		SessionAdmin impl = (SessionAdmin) getDomainImpl(SessionAdminImpl.class);
		impl.updateCatsReferralAdditionalInvStatus(catsReferral);	
		
	}

	public void updateCatsReferralCancelStatus(CatsReferralRefVo catsReferral) throws StaleObjectException
	{
		ReferralAppointmentDetailsComponent impl = (ReferralAppointmentDetailsComponent) getDomainImpl(ReferralAppointmentDetailsComponentImpl.class);
		impl.updateCatsReferralCancelStatus(catsReferral);
		
	}

	public CatsReferralRefVo getCatsReferralForAppointment(Booking_AppointmentRefVo appt)
	{
		if(appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provide for getCatsReferralForAppointment");
		
		DomainFactory factory = getDomainFactory();
		List<?> catsRefId = factory.find("select catsRef.id from CatsReferral as catsRef left join catsRef.appointments as bookAppt where (bookAppt.id = '" + appt.getID_Booking_Appointment() + "')");
		if(catsRefId != null)
		{
			Integer val = (Integer) catsRefId.get(0);
			if(val != null && val.intValue() > 0)
			{
				return new CatsReferralRefVo(val, 0);
			}
		}	
		return null;
	}
	
	public PatientShort getPatient(PatientRefVo patient)
	{
		if (patient!=null)
			if (patient.getID_Patient()!=null)
			{
				IMSCriteria imsc=new IMSCriteria(Patient.class,getDomainFactory());
				imsc.equal("this.id", patient.getID_Patient());
				List<?> patients = imsc.find();
				if (patients.size()>0)
					return PatientShortAssembler.create((Patient) patients.get(0));
				return null;
			}
		return null;
	}

	public SessionShortVo getSessionShortVo(Sch_SessionRefVo sessVo)
	{
		if(sessVo == null)
			throw new CodingRuntimeException("sessVo is null");
		
		DomainFactory factory = getDomainFactory();
		Sch_Session doSch_Session = (Sch_Session)factory.getDomainObject(Sch_Session.class, sessVo.getID_Sch_Session());
		return SessionShortVoAssembler.create(doSch_Session);
	}

	public Booking_AppointmentVo getBookingAppointment(Booking_AppointmentRefVo appt)
	{
		BookAppointment impl = (BookAppointment) getDomainImpl(BookAppointmentImpl.class);
		return impl.getBookingAppointment(appt);
	}

	public void cancelReferralEROD(CatsReferralRefVo catsReferral, Booking_AppointmentRefVo apptRef) throws StaleObjectException
	{
		if(catsReferral == null || catsReferral.getID_CatsReferral() == null)
			throw new CodingRuntimeException("catsReferral is null or id not provided in method cancelReferralEROD");
		
		if(apptRef == null || apptRef.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("apptRef is null or id not provided in method getTheatreAppointment");
		
		DomainFactory factory = getDomainFactory();
		CatsReferral doCatsReferral = (CatsReferral) factory.getDomainObject(catsReferral);
		
		if(doCatsReferral.getElectiveEROD() == null)
			return;
		
		ReferralEROD doErod = null;
		
		for(int i=0; i<doCatsReferral.getElectiveEROD().size(); i++)
		{
			if(doCatsReferral.getElectiveEROD().get(i) instanceof ReferralEROD)
			{
				if(((ReferralEROD) doCatsReferral.getElectiveEROD().get(i)).getAppointment() != null && ((ReferralEROD) doCatsReferral.getElectiveEROD().get(i)).getAppointment().getId().equals(apptRef.getID_Booking_Appointment()))
				{
					doErod = (ReferralEROD) doCatsReferral.getElectiveEROD().get(i);
					doCatsReferral.getElectiveEROD().remove(doErod);
					break;
				}
			}
		}
		
		if(doErod != null)
		{
			doErod.setErodStatus(getDomLookup(ERODStatus.CANCELLED));
		
			if(doCatsReferral.getElectiveERODHistory() == null)
				doCatsReferral.setElectiveERODHistory(new java.util.ArrayList());
		
			doCatsReferral.getElectiveERODHistory().add(doErod);
		
			factory.save(doCatsReferral);
		}
		
	}

	public BookingAppointmentTheatreVo getTheatreAppointment(Booking_AppointmentRefVo appt)
	{
		if (appt == null || appt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getTheatreAppointment");
		
		return BookingAppointmentTheatreVoAssembler.create((Booking_Appointment) getDomainFactory().getDomainObject(appt));
	}

	public TheatreProcedureServiceAndConsultantLiteVo getTheatreServiceProcedureAndConsultant(Booking_AppointmentRefVo voAppt)
	{
		if (voAppt == null || voAppt.getID_Booking_Appointment() == null)
			throw new CodingRuntimeException("appt is null or id not provided in method getTheatreServiceProcedureAndConsultant");
		
		TheatreProcedureServiceAndConsultantLiteVo voPsc = null;
		
		Booking_Appointment doAppt = (Booking_Appointment)getDomainFactory().getDomainObject(voAppt);
		if(doAppt != null)
		{
			ServiceLiteVo voService = ServiceLiteVoAssembler.create(doAppt.getSession() != null ? doAppt.getSession().getService() : null);
			ProcedureLiteVo voProc = ProcedureLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getProcedure() : null);
			HcpLiteVo voMos = HcpLiteVoAssembler.create(doAppt.getTheatreBooking() != null ? doAppt.getTheatreBooking().getConsultant() : null);
			
			voPsc = new TheatreProcedureServiceAndConsultantLiteVo();
			voPsc.setService(voService);
			voPsc.setProcedure(voProc);
			voPsc.setConsultant(voMos);
		}
		
		return voPsc;
	}

	public CatsReferralVo getCatsReferralVo(CatsReferralRefVo voCatsRef)
	{
		if( voCatsRef == null )
			return null;
		
		return CatsReferralVoAssembler.create((CatsReferral)getDomainFactory().getDomainObject(CatsReferral.class, voCatsRef.getID_CatsReferral()));
	}

	public EpisodeofCareShortVo getEpisodeofCareShortVo(EpisodeOfCareRefVo episode)
	{
		if( episode == null )
			return null;
		
		return EpisodeofCareShortVoAssembler.create((EpisodeOfCare)getDomainFactory().getDomainObject(EpisodeOfCare.class, episode.getID_EpisodeOfCare()));
	}

	public CareContextShortVo getCareContextShortVo(CareContextRefVo voCareContextRef)
	{
		if (voCareContextRef == null)
			throw new RuntimeException("Cannot get CareContextShortVo for null CareContextRefVo");

		CareContext doCareContext = (CareContext) getDomainFactory().getDomainObject(CareContext.class, voCareContextRef.getID_CareContext());
		return CareContextShortVoAssembler.create(doCareContext);
	}

	public ElectiveListConfigLiteVoCollection getElectiveListConfigurations(String value)
	{
		StringBuilder hqlBuilder = new StringBuilder("from ElectiveListConfiguration as e1_1 where (e1_1.waitingListName like :waitinglistname and e1_1.isActive = 1) order by e1_1.waitingListName asc");
		
		 
		List <?> dos = getDomainFactory().find(hqlBuilder.toString(),"waitinglistname",value.toUpperCase()+"%");
		
		if (dos == null || dos.size() == 0)
			return null;
		
		return ElectiveListConfigLiteVoAssembler.createElectiveListConfigLiteVoCollectionFromElectiveListConfiguration(dos); 

	}

	//wdev-18361
	public PatientElectiveListDetailsToSaveVo getPatientElectiveListDetailsToSaveVo(PatientElectiveListRefVo record)
	{
		if( record == null )
			throw new RuntimeException("Cannot get PatientElectiveListRefVo for null PatientElectiveListRefVo");
		
		PatientElectiveList doPatientElectiveList = (PatientElectiveList) getDomainFactory().getDomainObject(PatientElectiveList.class, record.getID_PatientElectiveList());
		return PatientElectiveListDetailsToSaveVoAssembler.create(doPatientElectiveList);
	}

	
    //wdev-18662
	public ProcedureLiteVoCollection listProcedures(String name) throws DomainInterfaceException
	{
		ClinicalCoding impl = (ClinicalCoding) getDomainImpl(ClinicalCodingImpl.class);
		return impl.listProcLiteVo(name);
	}

	
}
