// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3631.21133)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.printcorrespondencenotedialog;

import ims.RefMan.forms.printcorrespondencenotedialog.GenForm.grdReportTypesRow;
import ims.RefMan.vo.AppointmentClinicalNotesVo;
import ims.RefMan.vo.AppointmentClinicalNotesVoCollection;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.ReportsRequiredForPrintingVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellDecoratorMode;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.PrinterScope;
import ims.framework.enumerations.SystemLogLevel;
import ims.framework.enumerations.SystemLogType;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;

import java.security.SecureRandom;

import org.apache.log4j.Logger;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	private static final Logger		LOG		= Logger.getLogger(Logic.class);

	private static final int COL_TYPE = 1;
	private static final int COL_USER = 2;
	private static final int COL_DATETIME = 3;
	private static final int COL_NOTE = 4;
	private static final int COL_STATUS = 5;
	private static final int COL_SELECT = 6;	
	private static final int NEW_ROW_IDENTIFIER = 7;	

	private void initialisePrinters()
	{
		ILocation locs = domain.getCurrentLocation();
		form.txtLocation().setValue(locs != null ? locs.getName() : "No location selected");

		// WDEV-12536
		form.ccPrinter().initialize(locs, PrinterScope.DEFAULT);
	}

	private void open()
	{
		CatsReferralRefVo currentCatsReferral = form.getGlobalContext().RefMan.getCatsReferral();
		
		CatsReferralWizardVo voCats = domain.getCatsReferral(currentCatsReferral);
		AppointmentClinicalNotesVoCollection currentNotes = domain.listReportNotes(currentCatsReferral);		
		populateScreen(currentNotes, voCats);		
	}

	private void populateScreen(AppointmentClinicalNotesVoCollection currentNotes, CatsReferralWizardVo voCats) 
	{	
		form.grdReportTypes().getRows().clear();
		if (voCats != null) 
		{
			for (int i = 0; voCats.getReportsRequiredIsNotNull() && i < voCats.getReportsRequired().size(); i++) 
			{
				grdReportTypesRow row = form.grdReportTypes().getRows().newRow();
				row.setColNoteType(voCats.getReportsRequired().get(i).getReportsRequiredIsNotNull() ? voCats.getReportsRequired().get(i).getReportsRequired().getText() : "");
				row.setColSelect(false);
				row.setValue(voCats.getReportsRequired().get(i));
			}
		}

		form.dyngrdNotes().getRows().clear();
		if (currentNotes != null) 
		{
			for (int j = 0; j < currentNotes.size(); j++) 
				newNote(form.dyngrdNotes().getRows().newRow(), currentNotes.get(j), false); 
		}
	}	
	
	private void newNote(DynamicGridRow row, AppointmentClinicalNotesVo note, boolean isEditMode) 
	{	
		if (row == null) 
			throw new CodingRuntimeException("DynamicGridRow is null");
		
		if (note == null)
			row.setIdentifier(NEW_ROW_IDENTIFIER);
		
		DynamicGridColumn 	coll;
		DynamicGridCell 	cell;
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_TYPE);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);
		cell.setValue(note != null ? (note.getNoteTypeIsNotNull() ? note.getNoteType().getText() : null)  : null);		
		cell.setReadOnly(false);		
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_USER);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);		
		cell.setValue(note != null ? (note.getAuthoringInformationIsNotNull() ? (note.getAuthoringInformation().getAuthoringHcpIsNotNull() ? (note.getAuthoringInformation().getAuthoringHcp().getName() != null ? note.getAuthoringInformation().getAuthoringHcp().getName().toString() : null) : null ) : null)  : domain.getHcpLiteUser() != null ? ((HcpLiteVo)domain.getHcpLiteUser()).getName() != null ? ((HcpLiteVo)domain.getHcpLiteUser()).getName().toString() : null : null);
		cell.setReadOnly(true);			
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_DATETIME);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);		
		cell.setValue(note != null ? (note.getAuthoringInformationIsNotNull() ? note.getAuthoringInformation().getAuthoringDateTime().toString() : (new DateTime()).toString())  : (new DateTime()).toString());		
		cell.setReadOnly(true);			
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_NOTE);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);						
		cell.setValue(note != null ? note.getClinicalNote().replaceAll("\n", "<br>") : null);
		cell.setDecoratorType(DynamicCellDecoratorMode.NEVER);	
		cell.setReadOnly(true);
		cell.setStringMaxLength(3000);
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_STATUS);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);
		cell.setValue(note != null ? (note.getNoteStatusIsNotNull() ? note.getNoteStatus().getText() : null)  : null);		
		cell.setReadOnly(true);
							
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_SELECT);
		cell = row.getCells().newCell(coll, DynamicCellType.BOOL);
		cell.setReadOnly(false);
							
		row.setValue(note);		
	}

	@Override
	protected void onGrdReportTypesSelectionChanged()
	{
	}
	
	@Override
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (! printReport())
			return;
		
		open();
	}
	
	private String generateName()
	  {	
		  String str = "";
		  
		  try
		  {
			  //Get Random Segment
		      SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(prng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
			  
			  //Get CurrentTimeMillis() segment
		      str += Long.toHexString(System.currentTimeMillis());
		      while (str.length () < 12)
	          {
	              str = '0' + str;
	          }

			  //Get Random Segment
		      SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
		      str += Integer.toHexString(secondPrng.nextInt());
		      while (str.length () < 8)
	          {	
	              str = '0' + str;
	          }

		      //Get IdentityHash() segment
		      str += Long.toHexString(System.identityHashCode((Object) this));
		      while (str.length() < 8)
		      {
		          str = '0' + str; 
		      }	  
		      //Get Third Random Segment
		      byte bytes[] = new byte[16]; 
		      SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
		      thirdPrng.nextBytes(bytes);
		      str += Integer.toHexString(thirdPrng.nextInt());
		      while (str.length () < 8)
	          {
	              str = '0' + str;
	          }
		  }
		  catch(java.security.NoSuchAlgorithmException ex)
		  {
		      ex.getMessage();
		  }
		  
		  return str;
	  }

	private DynamicGridColumn getColumn(Integer identifier)
	{
		return form.dyngrdNotes().getColumns().getByIdentifier(identifier);
	}

	
	private boolean printReport() 
	{
		StringBuffer sb = new StringBuffer(); 

		// WDEV-12536
		if (form.ccPrinter().getSelectedPrinter() == null)
			sb.append("No printer selected\n\n");
		
		int nCountNotes = 0;
		boolean bCopyTo = false;
		
		for(int y = 0 ; y < form.dyngrdNotes().getRows().size() ; y++)
		{
			if(form.dyngrdNotes().getRows().get(y).getCells().get(getColumn(COL_SELECT)).getValue().equals(Boolean.TRUE))
				nCountNotes++;
			
			if ( form.dyngrdNotes().getRows().get(y).getCells().get(getColumn(COL_SELECT)).getValue().equals(Boolean.TRUE)
				&& ( ( ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToGPIsNotNull() && ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToGP())
				||   ( ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToPatientIsNotNull() && ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToPatient() )
				||   ( ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToSecondaryCareIsNotNull() ) && ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToSecondaryCare() ) )
				bCopyTo = true;
		}
		
		if (nCountNotes == 0)
			sb.append("No Report Note Type selected\n\n");

		if ( ! bCopyTo && nCountNotes > 0)
			sb.append("No 'Copy Report To' information exists for the Report Notes selected.\n\n");

		int nCountType = 0;
		for(int y = 0 ; y < form.grdReportTypes().getRows().size() ; y++)
		{
			if(form.grdReportTypes().getRows().get(y).getColSelect())
			{
				form.grdReportTypes().setValue(form.grdReportTypes().getRows().get(y).getValue());
				form.getLocalContext().setSelectedNoteType(form.grdReportTypes().getRows().get(y).getValue());
				nCountType++;
			}
		}
		if (nCountType == 0)
			sb.append("No Notes selected");

		if (sb.length() > 0)
		{
			catchErrors(sb.toString(), SystemLogLevel.ERROR);
			return false;
		}
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		String urlPdfUploadServer = ConfigFlag.GEN.PDF_UPLOAD_URL.getValue();
		if (urlPdfUploadServer == "")
		{
			catchErrors("PDF_UPLOAD_URL flag need to be set",SystemLogLevel.ERROR);
			return false;
		}
		
		String fileName = generateName()+".pdf";
		
		CatsReferralRefVo voCatsReferral = form.getGlobalContext().RefMan.getCatsReferral();
		Object[] obj = null;
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		String patientDocumentName = null;
		DocumentCategory patientDocumentCategory = null;
		patientDocumentName = "Report Notes";
		patientDocumentCategory = DocumentCategory.CORRESPONDANCE_NOTES;
//		patientDocumentCategory = DocumentCategory.DISCHARGE_REPORTS;
		
		for (int x = 0 ; x < form.grdReportTypes().getRows().size() ; x++)
		{
			if (form.grdReportTypes().getRows().get(x).getColSelect())
				obj = domain.getReportAndTemplate(form.grdReportTypes().getRows().get(x).getValue().getReportsRequired());
		}
		if (obj != null && ((String)obj[2]).length() > 0)
			patientDocumentName = (String)obj[2];
			
		client.addSeed(new SeedValue("CatsReferral_id",  voCatsReferral.getID_CatsReferral(), Integer.class));
		
		for (int i = 0 ; i < form.dyngrdNotes().getRows().size() ; i ++)
		{
			if (form.dyngrdNotes().getRows().get(i).getValue() instanceof AppointmentClinicalNotesVo
				&& form.dyngrdNotes().getRows().get(i).getCells().get(getColumn(COL_SELECT)).getValue().equals(Boolean.TRUE))
				client.addSeed(new SeedValue("ReportNoteIDS",  ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(i).getValue()).getID_AppointmentClinicalNotes(), Integer.class));
		}
		
		
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return false;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return false;
		}
				
		try
		{
			// WDEV-12536
			String url = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, "PDF", form.ccPrinter().getSelectedPrinter().getIPrinterName(), 1);
			if (url != null)
			{
				engine.openUrl(url);
			}						
			
			byte[] buffer = client.buildReport((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
						
			if (buffer == null ||
					(buffer != null &&
							buffer.length == 0)) 
			{
				catchErrors("PDF size is zero", SystemLogLevel.ERROR);
				return false;
			}							
			
			try 
			{
				engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), buffer, fileName,  ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue());
			}
			catch (Exception e)
			{
				catchErrors(e.toString(), SystemLogLevel.ERROR);
				return false; 
			} 
				
			save(fileName, patientDocumentName, patientDocumentCategory);		
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return false;
		}	
		
		return true;
	}

	private ServerDocumentVo populateServetDocumentVo(String fileName) 
	{
		DateTime date = new DateTime();
		int year = date.getDate().getYear();
		int month = date.getDate().getMonth();
		int day = date.getDate().getDay();
		
		ServerDocumentVo vo = new ServerDocumentVo();				
		String filePath = year + "/" + month + "/" + day + "/" + fileName;			
		vo.setFileName(filePath);
		vo.setFileType(FileType.PDF);		
		return vo;		
	}	
	
	private PatientDocumentVo populatePatientDocumentVo(ServerDocumentVo serverDocumentVo, String patientDocumentName, DocumentCategory patientDocumentCategory)
	{
		PatientDocumentVo vo = new PatientDocumentVo();
		vo.setPatient(form.getGlobalContext().Core.getPatientShort());
		vo.setEpisodeofCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		vo.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		vo.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		vo.setReferral(null);
				
		vo.setName(patientDocumentName);
		vo.setServerDocument(serverDocumentVo);
		vo.setCreationType(DocumentCreationType.GENERATED);
		vo.setCategory(patientDocumentCategory);
		
		vo.setRecordingUser((MemberOfStaffRefVo)domain.getMosUser(engine.getLoggedInUser().getUsername()));
		vo.setRecordingDateTime(new DateTime());
		vo.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
		return vo;
	}


	private boolean save(String fileName, String patientDocumentName, DocumentCategory patientDocumentCategory) 
	{
		PatientDocumentVo vo = populatePatientDocumentVo(populateServetDocumentVo(fileName), patientDocumentName, patientDocumentCategory);	
		
		String[] str = vo.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			return false;
		}
						
		CatsReferralWizardVo voCats = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		ReportsRequiredForPrintingVo voReport = form.getLocalContext().getSelectedNoteType();

		for (int j = 0 ; voCats.getReportsRequired() != null && j < voCats.getReportsRequired().size() ; j++)
		{
			if (voCats.getReportsRequired().get(j).getReportsRequired().equals(voReport.getReportsRequired()))
			{
				if (voCats.getReportsRequired().get(j).getPrintedDate() == null)// 	WDEV-15477
				{
					voCats.getReportsRequired().get(j).setPrintedDate(new DateTime());// 	WDEV-15477
					voCats.getReportsRequired().get(j).setPrintedBy((MemberOfStaffRefVo)domain.getMosUser(engine.getLoggedInUser().getUsername()));// 	WDEV-15477
					//voCats.getReportsRequired().set(j, voReport);
				}
			}
		}
		str = voCats.validate(str);
		if(str != null)
		{
			engine.showErrors(str);
			return false;
		}
		
		try 
		{
			domain.savePatientDocument(vo, voCats);			
		} 
		catch (StaleObjectException e) 
		{			
			catchErrors(e.toString(), SystemLogLevel.ERROR);
			return false;
		}
				
		return true;		
	}
	

	private void catchErrors(String error, SystemLogLevel level) 
	{
		if (level.equals(SystemLogLevel.ERROR)) {
			engine.showMessage(error);
		}
		
		LOG.error(error);
		engine.createSystemLogEntry(SystemLogType.FILE_UPLOADING, level, error);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}	
	
	private void initializeDynamicGrid()
	{
		form.dyngrdNotes().clear();
		form.dyngrdNotes().setSelectable(true);	
		DynamicGridColumn column;
		
		column = form.dyngrdNotes().getColumns().newColumn("Type", COL_TYPE);
		column.setWidth(120);
		column.setCanGrow(true);
		
		column = form.dyngrdNotes().getColumns().newColumn("Authoring HCP ", COL_USER);
		column.setWidth(150);
		column.setCanGrow(true);
		
		
		column = form.dyngrdNotes().getColumns().newColumn("Authoring DateTime", COL_DATETIME);
		column.setWidth(120);		
		column.setCanGrow(false);
						
		column = form.dyngrdNotes().getColumns().newColumn("Report Text ", COL_NOTE);
		column.setWidth(377);//WDEV-13787
		column.setCanGrow(true);
		
		column = form.dyngrdNotes().getColumns().newColumn("Status", COL_STATUS);
		column.setWidth(60);
		column.setCanGrow(true);				

		column = form.dyngrdNotes().getColumns().newColumn("Select", COL_SELECT);
		column.setWidth(-1);
		column.setCanGrow(true);				
	}

	@Override
	protected void onGrdReportTypesGridButtonClicked(int column, grdReportTypesRow row) throws PresentationLogicException 
	{
	}

	@Override
	protected void onFormOpen() throws PresentationLogicException 
	{
		initializeDynamicGrid();
		
		initialisePrinters();

		open();
	}

	@Override
	protected void onGrdReportTypesGridCheckBoxClicked(int column, grdReportTypesRow row, boolean isChecked) throws PresentationLogicException 
	{
		for (int i = 0 ; i < form.grdReportTypes().getRows().size() ; i++)
		{
			if ( !row.getValue().equals(form.grdReportTypes().getRows().get(i).getValue()))
				form.grdReportTypes().getRows().get(i).setColSelect(false);
		}
		
	}

	@Override
	protected void onBtnPreviewClick() throws PresentationLogicException 
	{
		StringBuffer sb = new StringBuffer(); 

		int nCountNotes = 0;
		boolean bCopyTo = false;
		
		for(int y = 0 ; y < form.dyngrdNotes().getRows().size() ; y++)
		{
			if(form.dyngrdNotes().getRows().get(y).getCells().get(getColumn(COL_SELECT)).getValue().equals(Boolean.TRUE))
				nCountNotes++;
			
			if ( form.dyngrdNotes().getRows().get(y).getCells().get(getColumn(COL_SELECT)).getValue().equals(Boolean.TRUE)
				&& ( ( ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToGPIsNotNull() && ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToGP())
				||   ( ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToPatientIsNotNull() && ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToPatient() )
				||   ( ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToSecondaryCareIsNotNull() ) && ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(y).getValue()).getCopyToSecondaryCare() ) )
				bCopyTo = true;
		}
		
		if (nCountNotes == 0)
			sb.append("No Report Note Type selected\n\n");

		if ( ! bCopyTo && nCountNotes > 0)
			sb.append("No 'Copy Report To' information exists for the Report Notes selected.\n\n");

		
		int nCountType = 0;
		for(int y = 0 ; y < form.grdReportTypes().getRows().size() ; y++)
		{
			if(form.grdReportTypes().getRows().get(y).getColSelect())
			{
				form.grdReportTypes().setValue(form.grdReportTypes().getRows().get(y).getValue());
				form.getLocalContext().setSelectedNoteType(form.grdReportTypes().getRows().get(y).getValue());
				nCountType++;
			}
		}
		if (nCountType == 0)
			sb.append("No Notes selected");

		if (sb.length() > 0)
		{
			catchErrors(sb.toString(), SystemLogLevel.ERROR);
			return;
		}
		
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		String urlPdfUploadServer = ConfigFlag.GEN.PDF_UPLOAD_URL.getValue();
		if (urlPdfUploadServer == "")
		{
			catchErrors("PDF_UPLOAD_URL flag need to be set",SystemLogLevel.ERROR);
			return;
		}
		
		CatsReferralRefVo voCatsReferral = form.getGlobalContext().RefMan.getCatsReferral();
		Object[] obj = null;
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
		
		for (int x = 0 ; x < form.grdReportTypes().getRows().size() ; x++)
		{
			if (form.grdReportTypes().getRows().get(x).getColSelect())
				obj = domain.getReportAndTemplate(form.grdReportTypes().getRows().get(x).getValue().getReportsRequired());
		}

		client.addSeed(new SeedValue("CatsReferral_id",  voCatsReferral.getID_CatsReferral(), Integer.class));
		
		for (int i = 0 ; i < form.dyngrdNotes().getRows().size() ; i ++)
		{
			if (form.dyngrdNotes().getRows().get(i).getValue() instanceof AppointmentClinicalNotesVo
				&& form.dyngrdNotes().getRows().get(i).getCells().get(getColumn(COL_SELECT)).getValue().equals(Boolean.TRUE))
				client.addSeed(new SeedValue("ReportNoteIDS",  ((AppointmentClinicalNotesVo)form.dyngrdNotes().getRows().get(i).getValue()).getID_AppointmentClinicalNotes(), Integer.class));
		}

		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
				
		try
		{					
			String url = client.buildReportAsUrl((String)obj[0], (String)obj[1], urlReportServer, "PDF", "", 1);
			if (url != null)
			{
				engine.openUrl(url);
			}						
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}	
	}

}
