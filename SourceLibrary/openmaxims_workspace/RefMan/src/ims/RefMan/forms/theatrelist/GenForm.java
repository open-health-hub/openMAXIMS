// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.theatrelist;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbSessionTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.TheatreType value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.TheatreType getValue()
		{
			return (ims.scheduling.vo.lookups.TheatreType)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.TheatreType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocShortMappingsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocShortMappingsVo getValue()
		{
			return (ims.core.vo.LocShortMappingsVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocShortMappingsVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbTheatreComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.SessionShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.SessionShortVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.SessionShortVo getValue()
		{
			return (ims.scheduling.vo.SessionShortVo)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.SessionShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdTheatreRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTheatreRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolICPReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolICPReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolICPOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolICP(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Image getcolICP()
		{
			return (ims.framework.utils.Image)super.row.get(0);
		}
		public void setcolICP(ims.framework.utils.Image value)
		{
			super.row.set(0, value);
		}
		public void setCellcolICPTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolHospnumReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolHospnumReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolHospnumOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolHospnum(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolHospnum()
		{
			return (String)super.row.get(1);
		}
		public void setcolHospnum(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolHospnumTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolSurnameReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolSurnameReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolSurnameOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolSurname(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolSurname()
		{
			return (String)super.row.get(2);
		}
		public void setcolSurname(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolSurnameTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolForenameReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolForenameReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolForenameOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolForename(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolForename()
		{
			return (String)super.row.get(3);
		}
		public void setcolForename(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolForenameTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolSexReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolSexReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolSexOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolSex(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolSex()
		{
			return (String)super.row.get(4);
		}
		public void setcolSex(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolSexTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setcolDobReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean iscolDobReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showcolDobOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForcolDob(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getcolDob()
		{
			return (String)super.row.get(5);
		}
		public void setcolDob(String value)
		{
			super.row.set(5, value);
		}
		public void setCellcolDobTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setcolTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean iscolTimeReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showcolTimeOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForcolTime(String value)
		{
			super.row.setTooltip(6, value);
		}
		public String getcolTime()
		{
			return (String)super.row.get(6);
		}
		public void setcolTime(String value)
		{
			super.row.set(6, value);
		}
		public void setCellcolTimeTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setcolProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean iscolProcedureReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showcolProcedureOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForcolProcedure(String value)
		{
			super.row.setTooltip(7, value);
		}
		public String getcolProcedure()
		{
			return (String)super.row.get(7);
		}
		public void setcolProcedure(String value)
		{
			super.row.set(7, value);
		}
		public void setCellcolProcedureTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setcolStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean iscolStatusReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showcolStatusOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForcolStatus(String value)
		{
			super.row.setTooltip(8, value);
		}
		public String getcolStatus()
		{
			return (String)super.row.get(8);
		}
		public void setcolStatus(String value)
		{
			super.row.set(8, value);
		}
		public void setCellcolStatusTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setcolAnaestheticReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean iscolAnaestheticReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showcolAnaestheticOpened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForcolAnaesthetic(String value)
		{
			super.row.setTooltip(9, value);
		}
		public String getcolAnaesthetic()
		{
			return (String)super.row.get(9);
		}
		public void setcolAnaesthetic(String value)
		{
			super.row.set(9, value);
		}
		public void setCellcolAnaestheticTooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setColIntoPacuReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean isColIntoPacuReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showColIntoPacuOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForColIntoPacu(String value)
		{
			super.row.setTooltip(10, value);
		}
		public String getColIntoPacu()
		{
			return (String)super.row.get(10);
		}
		public void setColIntoPacu(String value)
		{
			super.row.set(10, value);
		}
		public void setCellColIntoPacuTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public void setColAnaesStartReadOnly(boolean value)
		{
			super.row.setReadOnly(11, value);
		}
		public boolean isColAnaesStartReadOnly()
		{
			return super.row.isReadOnly(11);
		}
		public void showColAnaesStartOpened()
		{
			super.row.showOpened(11);
		}
		public void setTooltipForColAnaesStart(String value)
		{
			super.row.setTooltip(11, value);
		}
		public String getColAnaesStart()
		{
			return (String)super.row.get(11);
		}
		public void setColAnaesStart(String value)
		{
			super.row.set(11, value);
		}
		public void setCellColAnaesStartTooltip(String value)
		{
			super.row.setTooltip(11, value);
		}
		public void setColInTheatreReadOnly(boolean value)
		{
			super.row.setReadOnly(12, value);
		}
		public boolean isColInTheatreReadOnly()
		{
			return super.row.isReadOnly(12);
		}
		public void showColInTheatreOpened()
		{
			super.row.showOpened(12);
		}
		public void setTooltipForColInTheatre(String value)
		{
			super.row.setTooltip(12, value);
		}
		public String getColInTheatre()
		{
			return (String)super.row.get(12);
		}
		public void setColInTheatre(String value)
		{
			super.row.set(12, value);
		}
		public void setCellColInTheatreTooltip(String value)
		{
			super.row.setTooltip(12, value);
		}
		public void setColSurgeryStartReadOnly(boolean value)
		{
			super.row.setReadOnly(13, value);
		}
		public boolean isColSurgeryStartReadOnly()
		{
			return super.row.isReadOnly(13);
		}
		public void showColSurgeryStartOpened()
		{
			super.row.showOpened(13);
		}
		public void setTooltipForColSurgeryStart(String value)
		{
			super.row.setTooltip(13, value);
		}
		public String getColSurgeryStart()
		{
			return (String)super.row.get(13);
		}
		public void setColSurgeryStart(String value)
		{
			super.row.set(13, value);
		}
		public void setCellColSurgeryStartTooltip(String value)
		{
			super.row.setTooltip(13, value);
		}
		public void setColSurgeyEndReadOnly(boolean value)
		{
			super.row.setReadOnly(14, value);
		}
		public boolean isColSurgeyEndReadOnly()
		{
			return super.row.isReadOnly(14);
		}
		public void showColSurgeyEndOpened()
		{
			super.row.showOpened(14);
		}
		public void setTooltipForColSurgeyEnd(String value)
		{
			super.row.setTooltip(14, value);
		}
		public String getColSurgeyEnd()
		{
			return (String)super.row.get(14);
		}
		public void setColSurgeyEnd(String value)
		{
			super.row.set(14, value);
		}
		public void setCellColSurgeyEndTooltip(String value)
		{
			super.row.setTooltip(14, value);
		}
		public void setColIntoRecoveryReadOnly(boolean value)
		{
			super.row.setReadOnly(15, value);
		}
		public boolean isColIntoRecoveryReadOnly()
		{
			return super.row.isReadOnly(15);
		}
		public void showColIntoRecoveryOpened()
		{
			super.row.showOpened(15);
		}
		public void setTooltipForColIntoRecovery(String value)
		{
			super.row.setTooltip(15, value);
		}
		public String getColIntoRecovery()
		{
			return (String)super.row.get(15);
		}
		public void setColIntoRecovery(String value)
		{
			super.row.set(15, value);
		}
		public void setCellColIntoRecoveryTooltip(String value)
		{
			super.row.setTooltip(15, value);
		}
		public void setColOutRecoveryReadOnly(boolean value)
		{
			super.row.setReadOnly(16, value);
		}
		public boolean isColOutRecoveryReadOnly()
		{
			return super.row.isReadOnly(16);
		}
		public void showColOutRecoveryOpened()
		{
			super.row.showOpened(16);
		}
		public void setTooltipForColOutRecovery(String value)
		{
			super.row.setTooltip(16, value);
		}
		public String getColOutRecovery()
		{
			return (String)super.row.get(16);
		}
		public void setColOutRecovery(String value)
		{
			super.row.set(16, value);
		}
		public void setCellColOutRecoveryTooltip(String value)
		{
			super.row.setTooltip(16, value);
		}
		public ims.RefMan.vo.TheatreListBookingAppointmentVo getValue()
		{
			return (ims.RefMan.vo.TheatreListBookingAppointmentVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.TheatreListBookingAppointmentVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTheatreRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTheatreRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTheatreRow get(int index)
		{
			return new grdTheatreRow(super.collection.get(index));
		}
		public grdTheatreRow newRow()
		{
			return new grdTheatreRow(super.collection.newRow());
		}
		public grdTheatreRow newRow(boolean autoSelect)
		{
			return new grdTheatreRow(super.collection.newRow(autoSelect));
		}
		public grdTheatreRow newRowAt(int index)
		{
			return new grdTheatreRow(super.collection.newRowAt(index));
		}
		public grdTheatreRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTheatreRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTheatreGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		public void setcolHospnumCaption(String value)
		{
			this.grid.setColumnCaption(1, value);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.TheatreListBookingAppointmentVoCollection getValues()
		{
			ims.RefMan.vo.TheatreListBookingAppointmentVoCollection listOfValues = new ims.RefMan.vo.TheatreListBookingAppointmentVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.TheatreListBookingAppointmentVo getValue()
		{
			return (ims.RefMan.vo.TheatreListBookingAppointmentVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.TheatreListBookingAppointmentVo value)
		{
			super.grid.setValue(value);
		}
		public grdTheatreRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTheatreRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTheatreRowCollection getRows()
		{
			return new grdTheatreRowCollection(super.grid.getRows());
		}
		public grdTheatreRow getRowByValue(ims.RefMan.vo.TheatreListBookingAppointmentVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTheatreRow(row);
		}
		public void setcolICPHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolICPHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolHospnumHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolHospnumHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolSurnameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolSurnameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolForenameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolForenameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolSexHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolSexHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setcolDobHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getcolDobHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setcolTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getcolTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setcolProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getcolProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setcolStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getcolStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setcolAnaestheticHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getcolAnaestheticHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setColIntoPacuHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getColIntoPacuHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
		public void setColAnaesStartHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(11, value);
		}
		public String getColAnaesStartHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(11);
		}
		public void setColInTheatreHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(12, value);
		}
		public String getColInTheatreHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(12);
		}
		public void setColSurgeryStartHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(13, value);
		}
		public String getColSurgeryStartHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(13);
		}
		public void setColSurgeyEndHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(14, value);
		}
		public String getColSurgeyEndHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(14);
		}
		public void setColIntoRecoveryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(15, value);
		}
		public String getColIntoRecoveryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(15);
		}
		public void setColOutRecoveryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(16, value);
		}
		public String getColOutRecoveryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(16);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.TheatreListFilterVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.TheatreListFilterVo' of the global context variable 'RefMan.TheatreListFilterVo' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		form.setDarkHeight(95);
		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(1056, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Timers
		timers = new Timers();
		timers.timerSearch = factory.createTimer(0, 10, false);
		form.addTimer(timers.timerSearch);

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuTheatreListMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuTheatreListMenuADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Admit Patient", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4080001)))
			contextMenus.RefMan.contextMenuTheatreListMenu.add(contextMenus.RefMan.contextMenuTheatreListMenuADDItem);
		contextMenus.RefMan.contextMenuTheatreListMenuUPDATEItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.RefMan.contextMenuTheatreListMenu.add(contextMenus.RefMan.contextMenuTheatreListMenuUPDATEItem);
		contextMenus.RefMan.contextMenuTheatreListMenuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 3, "DNA Patient", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4080002)))
			contextMenus.RefMan.contextMenuTheatreListMenu.add(contextMenus.RefMan.contextMenuTheatreListMenuREMOVEItem);
		contextMenus.RefMan.contextMenuTheatreListMenuEDIT_VIEW_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 4, "View/Edit Actions", true, false, new Integer(118107), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4080003)))
			contextMenus.RefMan.contextMenuTheatreListMenu.add(contextMenus.RefMan.contextMenuTheatreListMenuEDIT_VIEW_ACTIONSItem);
		contextMenus.RefMan.contextMenuTheatreListMenuRETURNTOTHEATREItem = factory.createMenuItem(startControlID.intValue() + 5, "Return to Theatre", true, false, new Integer(102187), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4080004)))
			contextMenus.RefMan.contextMenuTheatreListMenu.add(contextMenus.RefMan.contextMenuTheatreListMenuRETURNTOTHEATREItem);
		contextMenus.RefMan.contextMenuTheatreListMenuATTACHICPTOBOOKINGItem = factory.createMenuItem(startControlID.intValue() + 6, "Attach ICP to Booking", true, false, new Integer(102334), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4080005)))
			contextMenus.RefMan.contextMenuTheatreListMenu.add(contextMenus.RefMan.contextMenuTheatreListMenuATTACHICPTOBOOKINGItem);
		contextMenus.RefMan.contextMenuTheatreListMenuCANCEL_THEATRE_APPTItem = factory.createMenuItem(startControlID.intValue() + 7, "Cancel Theatre Appointment", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(4080006)))
			contextMenus.RefMan.contextMenuTheatreListMenu.add(contextMenus.RefMan.contextMenuTheatreListMenuCANCEL_THEATRE_APPTItem);
		form.registerMenu(contextMenus.RefMan.contextMenuTheatreListMenu);


		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 128, 40, 496, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccListOwnerForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(128), new Integer(40), new Integer(496), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccListOwnerForm, instance1 } );
		ims.framework.Control m_ccListOwnerControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccListOwnerForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccListOwnerControl);
		Menu[] menus1 = m_ccListOwnerForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 632, 40, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Theatre Session Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "List Owner:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 632, 16, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Theatre Session:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 2, 600, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Order Theatre List", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 957, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Admit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 776, 16, 152, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 776, 40, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbSessionTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSessionTypeTemp);
		cmbSessionTypeComboBox cmbSessionType = (cmbSessionTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSessionTypeComboBox.class, m_cmbSessionTypeTemp);
		super.addComboBox(cmbSessionType);
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 128, 16, 480, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 128, 64, 800, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbTheatreTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbTheatreTemp);
		cmbTheatreComboBox cmbTheatre = (cmbTheatreComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTheatreComboBox.class, m_cmbTheatreTemp);
		super.addComboBox(cmbTheatre);

		// Grid Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 2, 104, 1030, 488, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdTheatreTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(52), Boolean.TRUE, contextMenus.RefMan.contextMenuTheatreListMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdTheatreTemp);
		grdTheatreGrid grdTheatre = (grdTheatreGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTheatreGrid.class, m_grdTheatreTemp);
		grdTheatre.addImageColumn(" ", 0, 0, 25, true, 0);
		grdTheatre.addStringColumn("Hospital No.", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Surname", 0, 0, 90, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Forename", 0, 0, 95, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Sex", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("D.O.B", 0, 0, 66, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Time", 0, 0, 57, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Procedure", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Status", 0, 0, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Anaes. Type", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Into PACU", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Anaes. Start", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Theatre In", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Surgery Start", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Surgery End", 0, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Into Rec.", 1, 0, 50, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatre.addStringColumn("Out Rec.", 1, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdTheatre);

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 1000, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.TimerStartEnabled24, this.getImages().Core.TimerStartDisabled24, "Click button to start the automatic refresh of Theatre List", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 968, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 936, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccListOwner()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
	}
	public void setccListOwnerValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
	}
	public void setccListOwnerVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setVisible(value);
	}
	public boolean isccListOwnerVisible()
	{
		return ((ims.framework.Control)super.getControl(0)).isVisible();
	}
	public void setccListOwnerEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(0)).setEnabled(value);
	}
	public boolean isccListOwnerEnabled()
	{
		return ((ims.framework.Control)super.getControl(0)).isEnabled();
	}
	public Label lbl5()
	{
		return (Label)super.getControl(1);
	}
	public Label lbl4()
	{
		return (Label)super.getControl(5);
	}
	public Button btnSortTheatre()
	{
		return (Button)super.getControl(6);
	}
	public Button btnAdmit()
	{
		return (Button)super.getControl(7);
	}
	public DateControl dteTheatre()
	{
		return (DateControl)super.getControl(8);
	}
	public cmbSessionTypeComboBox cmbSessionType()
	{
		return (cmbSessionTypeComboBox)super.getComboBox(0);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(1);
	}
	public cmbTheatreComboBox cmbTheatre()
	{
		return (cmbTheatreComboBox)super.getComboBox(2);
	}
	public grdTheatreGrid grdTheatre()
	{
		return (grdTheatreGrid)super.getGrid(0);
	}
	public ImageButton imbAutoRefresh()
	{
		return (ImageButton)super.getControl(13);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(14);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(15);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			RefMan = new RefManForms();
			Scheduling = new SchedulingForms();
			ICP = new ICPForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				IntraOperativeCareRecord = new LocalFormName(134155);
			}
			public final FormName IntraOperativeCareRecord;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				TheatreAdmissionDialog = new LocalFormName(134156);
				ArrivalSeenTimeDialog = new LocalFormName(134186);
				PatientICPForTheatreBookingDlg = new LocalFormName(134215);
				BookTheatreDialog = new LocalFormName(134159);
				BookTheatreSlot = new LocalFormName(134208);
			}
			public final FormName TheatreAdmissionDialog;
			public final FormName ArrivalSeenTimeDialog;
			public final FormName PatientICPForTheatreBookingDlg;
			public final FormName BookTheatreDialog;
			public final FormName BookTheatreSlot;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				SortTheatreAppointments = new LocalFormName(114174);
				SortFixedTheatreAppointments = new LocalFormName(114106);
				CancelAppointmentDialog = new LocalFormName(114160);
			}
			public final FormName SortTheatreAppointments;
			public final FormName SortFixedTheatreAppointments;
			public final FormName CancelAppointmentDialog;
		}
		public final class ICPForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPForms()
			{
				PatientICP = new LocalFormName(118100);
			}
			public final FormName PatientICP;
		}

		public ClinicalForms Clinical;
		public RefManForms RefMan;
		public SchedulingForms Scheduling;
		public ICPForms ICP;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Emergency = new EmergencyImages();
			Admin = new AdminImages();
			ICP = new ICPImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				User = new ImageHelper(102316, "Images/Core/user.ico", new Integer(16), new Integer(16));
				TimerStartEnabled24 = new ImageHelper(102308, "Images/Core/sinc_24x24.png", new Integer(24), new Integer(24));
				TimerStartDisabled24 = new ImageHelper(102310, "Images/Core/sinc_disabled_24x24.png", new Integer(24), new Integer(24));
				TimerStopEnabled24 = new ImageHelper(102309, "Images/Core/close_24x24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image User;
			public final ims.framework.utils.Image TimerStartEnabled24;
			public final ims.framework.utils.Image TimerStartDisabled24;
			public final ims.framework.utils.Image TimerStopEnabled24;
		}
		public final class EmergencyImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private EmergencyImages()
			{
				NurseEnabled16 = new ImageHelper(129103, "Images/Emergency/Nurse 1.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image NurseEnabled16;
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Specialty01 = new ImageHelper(103163, "Images/Admin/Specialty.jpg", new Integer(16), new Integer(16));
				Audit = new ImageHelper(103157, "Images/Admin/Audit.gif", new Integer(16), new Integer(16));
				AdminAction24 = new ImageHelper(103211, "Images/Admin/patient_information_24.png", new Integer(24), new Integer(24));
				Doctor24 = new ImageHelper(103209, "Images/Admin/doctor_24.png", new Integer(24), new Integer(24));
				Stethoscope24 = new ImageHelper(103210, "Images/Admin/stethoscope_24.png", new Integer(24), new Integer(24));
				Nurse24 = new ImageHelper(103208, "Images/Admin/nurse_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Specialty01;
			public final ims.framework.utils.Image Audit;
			public final ims.framework.utils.Image AdminAction24;
			public final ims.framework.utils.Image Doctor24;
			public final ims.framework.utils.Image Stethoscope24;
			public final ims.framework.utils.Image Nurse24;
		}
		public final class ICPImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ICPImages()
			{
				ICP = new ImageHelper(118104, "Images/ICP/ICP.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ICP;
		}
		public final CoreImages Core;
		public final EmergencyImages Emergency;
		public final AdminImages Admin;
		public final ICPImages ICP;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_MessageBoxID = new ims.framework.ContextVariable("MessageBoxID", prefix + "_lv_RefMan.TheatreList.__internal_x_context__MessageBoxID_" + componentIdentifier + "");
			cxl_TrackingStatusConfig = new ims.framework.ContextVariable("TrackingStatusConfig", prefix + "_lv_RefMan.TheatreList.__internal_x_context__TrackingStatusConfig_" + componentIdentifier + "");
			cxl_WasTimerEnabled = new ims.framework.ContextVariable("WasTimerEnabled", prefix + "_lv_RefMan.TheatreList.__internal_x_context__WasTimerEnabled_" + componentIdentifier + "");
		}
		
		public boolean getMessageBoxIDIsNotNull()
		{
			return !cxl_MessageBoxID.getValueIsNull(context);
		}
		public Integer getMessageBoxID()
		{
			return (Integer)cxl_MessageBoxID.getValue(context);
		}
		public void setMessageBoxID(Integer value)
		{
			cxl_MessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxID = null;
		public boolean getTrackingStatusConfigIsNotNull()
		{
			return !cxl_TrackingStatusConfig.getValueIsNull(context);
		}
		public ims.RefMan.vo.TrackingStatusConfigVo getTrackingStatusConfig()
		{
			return (ims.RefMan.vo.TrackingStatusConfigVo)cxl_TrackingStatusConfig.getValue(context);
		}
		public void setTrackingStatusConfig(ims.RefMan.vo.TrackingStatusConfigVo value)
		{
			cxl_TrackingStatusConfig.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TrackingStatusConfig = null;
		public boolean getWasTimerEnabledIsNotNull()
		{
			return !cxl_WasTimerEnabled.getValueIsNull(context);
		}
		public Boolean getWasTimerEnabled()
		{
			return (Boolean)cxl_WasTimerEnabled.getValue(context);
		}
		public void setWasTimerEnabled(Boolean value)
		{
			cxl_WasTimerEnabled.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WasTimerEnabled = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class TheatreListMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int UPDATE = 2;
				public static final int REMOVE = 3;
				public static final int EDIT_VIEW_ACTIONS = 4;
				public static final int RETURNTOTHEATRE = 5;
				public static final int ATTACHICPTOBOOKING = 6;
				public static final int CANCEL_THEATRE_APPT = 7;
			}
			public void disableAllTheatreListMenuMenuItems()
			{
				this.contextMenuTheatreListMenuADDItem.setEnabled(false);
				this.contextMenuTheatreListMenuUPDATEItem.setEnabled(false);
				this.contextMenuTheatreListMenuREMOVEItem.setEnabled(false);
				this.contextMenuTheatreListMenuEDIT_VIEW_ACTIONSItem.setEnabled(false);
				this.contextMenuTheatreListMenuRETURNTOTHEATREItem.setEnabled(false);
				this.contextMenuTheatreListMenuATTACHICPTOBOOKINGItem.setEnabled(false);
				this.contextMenuTheatreListMenuCANCEL_THEATRE_APPTItem.setEnabled(false);
			}
			public void hideAllTheatreListMenuMenuItems()
			{
				this.contextMenuTheatreListMenuADDItem.setVisible(false);
				this.contextMenuTheatreListMenuUPDATEItem.setVisible(false);
				this.contextMenuTheatreListMenuREMOVEItem.setVisible(false);
				this.contextMenuTheatreListMenuEDIT_VIEW_ACTIONSItem.setVisible(false);
				this.contextMenuTheatreListMenuRETURNTOTHEATREItem.setVisible(false);
				this.contextMenuTheatreListMenuATTACHICPTOBOOKINGItem.setVisible(false);
				this.contextMenuTheatreListMenuCANCEL_THEATRE_APPTItem.setVisible(false);
			}
			private Menu contextMenuTheatreListMenu;
			public ReadOnlyMenuItem getTheatreListMenuADDItem()
			{
				return this.contextMenuTheatreListMenuADDItem;
			}
			private MenuItem contextMenuTheatreListMenuADDItem;
			public ReadOnlyMenuItem getTheatreListMenuUPDATEItem()
			{
				return this.contextMenuTheatreListMenuUPDATEItem;
			}
			private MenuItem contextMenuTheatreListMenuUPDATEItem;
			public ReadOnlyMenuItem getTheatreListMenuREMOVEItem()
			{
				return this.contextMenuTheatreListMenuREMOVEItem;
			}
			private MenuItem contextMenuTheatreListMenuREMOVEItem;
			public ReadOnlyMenuItem getTheatreListMenuEDIT_VIEW_ACTIONSItem()
			{
				return this.contextMenuTheatreListMenuEDIT_VIEW_ACTIONSItem;
			}
			private MenuItem contextMenuTheatreListMenuEDIT_VIEW_ACTIONSItem;
			public ReadOnlyMenuItem getTheatreListMenuRETURNTOTHEATREItem()
			{
				return this.contextMenuTheatreListMenuRETURNTOTHEATREItem;
			}
			private MenuItem contextMenuTheatreListMenuRETURNTOTHEATREItem;
			public ReadOnlyMenuItem getTheatreListMenuATTACHICPTOBOOKINGItem()
			{
				return this.contextMenuTheatreListMenuATTACHICPTOBOOKINGItem;
			}
			private MenuItem contextMenuTheatreListMenuATTACHICPTOBOOKINGItem;
			public ReadOnlyMenuItem getTheatreListMenuCANCEL_THEATRE_APPTItem()
			{
				return this.contextMenuTheatreListMenuCANCEL_THEATRE_APPTItem;
			}
			private MenuItem contextMenuTheatreListMenuCANCEL_THEATRE_APPTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}


	public final class Timers implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private Timer timerSearch;
		public Timer gettimerSearch()
		{
			return timerSearch;
		}
		public void enableAll()
		{
			timerSearch.setEnabled(true);
		}
		public void disableAll()
		{
			timerSearch.setEnabled(false);
		}
	}
	private Timers timers;
	public Timers getTimers()
	{
		return this.timers;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[178];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-ID", "ID_Location");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-TYPE", "Type");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.HospitalLoc", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ID", "ID_CatsReferral");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CARECONTEXT", "CareContext");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISCAB", "IsCAB");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-DISCHARGEDATE", "DischargeDate");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISFINALREPORTREQUIRED", "IsFinalReportRequired");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-TRIAGEDATETIME", "TriageDateTime");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISACCEPTEDONCAB", "IsAcceptedOnCAB");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISREFERRALREJECTEDONCAB", "IsReferralRejectedOnCAB");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASPATIENTREJECTIONLETTERSENT", "WasPatientRejectionLetterSent");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASPATIENTPROVIDERCANCELLATIONLETTERSENT", "WasPatientProviderCancellationLetterSent");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-REQUIRESDISCHARGEREP", "RequiresDischargeRep");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASDNAAPPTSFORREVIEW", "HasDNAApptsForReview");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASCANCELLEDAPPTSFORREVIEW", "HasCancelledApptsForReview");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISSECONDARYREPORTREQUIRED", "IsSecondaryReportRequired");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASFURTHERMANAGEMENTDETAILSREVIEWED", "WasFurtherManagementDetailsReviewed");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ONWARDREFERRALREASON", "OnwardReferralReason");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-DISCHARGETOGPDETAILSREVIEWSTATUS", "DischargeToGPDetailsReviewStatus");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISACTIVEMONITORAPPTREQUIRED", "IsActiveMonitorApptRequired");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CATSREPORTSENTDATE", "CATSReportSentDate");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PROCEDUREFORPOSTOPREVIEW", "ProcedureForPostOpReview");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-REFERRALCATEGORY", "ReferralCategory");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISONWARDREFERRALTRIAGE", "IsOnwardReferralTriage");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-URGENCY", "Urgency");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PATHWAYID", "PathwayID");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-RTTCLOCKIMPACT", "RTTClockImpact");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CONSUPGRADEDATE", "ConsUpgradeDate");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[133] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ID", "ID_Service");
			fields[134] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[135] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[136] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[137] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SPECIALTY", "Specialty");
			fields[138] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[139] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[140] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[141] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[142] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[143] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-LOS", "LOS");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-ID", "ID_CATSReferralStatus");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-REFERRALSTATUS", "ReferralStatus");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-AUTHORINGUSER", "AuthoringUser");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-STATUSDATETIME", "StatusDateTime");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-COMMENT", "Comment");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-SECONDOPINIONCATEGORY", "SecondOpinionCategory");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-CUSTOMPROCEDUREDURATION", "CustomProcedureDuration");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTTCITIME", "AppointmentTCITime");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PASEVENT", "PASEvent");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_ICP.PatientICPRecord", "BO-1100100000-ID", "ID_PatientICP");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_RefMan.TheatreBookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreList.__internal_x_context__TrackingStatusConfig_" + componentIdentifier, "BO-1096100052-ID", "ID_TrackStatusConfig");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreList.__internal_x_context__TrackingStatusConfig_" + componentIdentifier, "BO-1096100052-TIMEINTOPACU", "TimeintoPACU");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreList.__internal_x_context__TrackingStatusConfig_" + componentIdentifier, "BO-1096100052-TIMESTARTANAESTHETIST", "TimeStartAnaesthetist");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreList.__internal_x_context__TrackingStatusConfig_" + componentIdentifier, "BO-1096100052-THEATREIN", "TheatreIn");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreList.__internal_x_context__TrackingStatusConfig_" + componentIdentifier, "BO-1096100052-SURGERYSTART", "SurgeryStart");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreList.__internal_x_context__TrackingStatusConfig_" + componentIdentifier, "BO-1096100052-SURGERYFINISH", "SurgeryFinish");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreList.__internal_x_context__TrackingStatusConfig_" + componentIdentifier, "BO-1096100052-TIMEINTORECOVERY", "TimeIntoRecovery");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreList.__internal_x_context__TrackingStatusConfig_" + componentIdentifier, "BO-1096100052-TIMEOUTOFRECOVERY", "TimeOutOfRecovery");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
