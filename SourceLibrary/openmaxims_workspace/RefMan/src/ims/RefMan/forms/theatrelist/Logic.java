// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3401.14277)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.theatrelist;

import ims.RefMan.forms.theatrelist.GenForm.grdTheatreRow;
import ims.RefMan.vo.CatsReferralForTheatreListVo;
import ims.RefMan.vo.CatsReferralRttDateForTheatreListVo;
import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.PatientElectiveListForDNAAppointmentsVo;
import ims.RefMan.vo.TCIForPatientElectiveListAppointmentDNAVo;
import ims.RefMan.vo.TCIOutcomeForAppointmentDNAVo;
import ims.RefMan.vo.TheatreListBookingAppointmentVo;
import ims.RefMan.vo.TheatreListBookingAppointmentVoCollection;
import ims.RefMan.vo.TheatreListBookingDetailVo;
import ims.RefMan.vo.TheatreListFilterVo;
import ims.RefMan.vo.TheatreProcedureServiceAndConsultantLiteVo;
import ims.RefMan.vo.TheatreTrackingIdleConfigVo;
import ims.RefMan.vo.TrackingStatusConfigVo;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.clinical.vo.IntraOperativeCareRecordSchedulingVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientShort;
import ims.core.vo.ProcedureVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.controls.Timer;
import ims.framework.delegates.CancelArgs;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.BookingAppointmentTheatreVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.Sch_Session_Appointment_OrderVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionTheatreTCISlotLiteVo;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.vo.interfaces.IMos;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		if (form.getGlobalContext().RefMan.getTheatreListFilterVoIsNotNull())
			refreshSearchCriteria();
	}
	
	private void refreshSearchCriteria() 
	{
		TheatreListFilterVo voCriteria = form.getGlobalContext().RefMan.getTheatreListFilterVo();
		
		form.cmbHospital().setValue(voCriteria.getHospitalIsNotNull() ? (LocShortMappingsVo) voCriteria.getHospital() : null);
		form.ccListOwner().setValue(voCriteria.getListownerIsNotNull() ? (IMos) voCriteria.getListowner() : null);
		form.dteTheatre().setValue(voCriteria.getSessionDate());
		form.cmbSessionType().setValue(voCriteria.getSessionType());

		loadSessions();

		if (voCriteria.getProfileIsNotNull())
		{
			form.cmbTheatre().setValue(voCriteria.getProfile());
			if (form.cmbTheatre().getValue() == null)
			{
				form.cmbTheatre().newRow(voCriteria.getProfile(), voCriteria.getProfile().toString());
				form.cmbTheatre().setValue(voCriteria.getProfile());
			}
				
		}
		
		performSearch();
		
		//WDEV-12173
		if(voCriteria.getWasTimerOnIsNotNull() && voCriteria.getWasTimerOn())
		{
			form.getLocalContext().setWasTimerEnabled(true);
			toggleTimer(false);
		}
	}

	private void initialise()
	{
		form.getContextMenus().RefMan.hideAllTheatreListMenuMenuItems();
		
		/*form.getContextMenus().getGenericGridRemoveItem().setText("DNA Patient");
		form.getContextMenus().getGenericGridAddItem().setText("Admit Patient");
		form.getContextMenus().getGenericGridEDIT_VIEW_ICP_ACTIONSItem().setText("View/Edit Actions");
		*/
		
		form.ccListOwner().initialize(MosType.MEDIC);
		
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue()); 
		form.grdTheatre().setcolHospnumCaption(dispIdType.getText());

		// WDEV-11645
		LocShortMappingsVoCollection voCollHosp = domain.listActiveHospitals(domain.getMosUser() instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) domain.getMosUser() : null);
		if(voCollHosp != null)
		{
			for(LocShortMappingsVo voLoc : voCollHosp)
				form.cmbHospital().newRow(voLoc, voLoc.getName());
		}	
		form.btnAdmit().setEnabled(false);
		
		//WDEV-12173
		form.getLocalContext().setTrackingStatusConfig(domain.getTrackingStatus());
		form.getTimers().gettimerSearch().setInterval(ConfigFlag.UI.THEATRELIST_TIMER_INTERVAL.getValue());
		form.imbAutoRefresh().setEnabled(false);
		form.getLocalContext().setWasTimerEnabled(false);
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.grdTheatre().getRows().clear();
		
		form.btnAdmit().setEnabled(false);
		
		form.ccListOwner().setValue(null);
		form.dteTheatre().setValue(null);
		form.cmbTheatre().setValue(null);
		form.cmbTheatre().clear();
		form.cmbHospital().setValue(null);
		form.cmbSessionType().setValue(null);
		form.getContextMenus().RefMan.hideAllTheatreListMenuMenuItems();
		form.imbAutoRefresh().setEnabled(false);
		
		form.getGlobalContext().RefMan.setTheatreListFilterVo(null);
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		performSearch();
	}

	private void performSearch() 
	{
		boolean searchPerformed = true;
		
		form.grdTheatre().getRows().clear();
		form.getLocalContext().setMessageBoxID(null);

		if(validateSearch())
			loadSlots();
		else
			searchPerformed = false;
		
		updateContextMenus();
		
		form.imbAutoRefresh().setEnabled(searchPerformed);
	}

	private void loadSlots() 
	{
		form.grdTheatre().getRows().clear();

		TheatreListFilterVo voFilter = new TheatreListFilterVo();
		voFilter.setProfile(form.cmbTheatre().getValue());
		voFilter.setSessionDate(form.dteTheatre().getValue());
		voFilter.setListowner((HcpRefVo) form.ccListOwner().getValue());
		voFilter.setHospital(form.cmbHospital().getValue());
		voFilter.setSessionType(form.cmbSessionType().getValue());
		voFilter.setWasTimerOn(form.getLocalContext().getWasTimerEnabled());
		
		form.getGlobalContext().RefMan.setTheatreListFilterVo(voFilter);
		
		TheatreTrackingIdleConfigVo theatreTrackingIdleConfig = domain.getTheatreTrackingIdleConfig();
		if (form.ccListOwner().getValue() != null && form.cmbHospital().getValue() == null 
												  && form.cmbTheatre().getValue() == null && form.cmbSessionType().getValue() == null)
		{
			populateSlots(domain.listAppointments((HcpRefVo) form.ccListOwner().getValue(),(MemberOfStaffRefVo) domain.getMosUser(), form.dteTheatre().getValue()), null,theatreTrackingIdleConfig);
		}
		else
			if(form.cmbTheatre().getValue() != null && form.cmbTheatre().getValue().getID_Sch_Session() != null) //All
		{
			Sch_Session_Appointment_OrderVo voOrder = domain.getSessionOrder(form.cmbTheatre().getValue());
			populateSlots(domain.listAppointments(form.cmbTheatre().getValue()), voOrder,theatreTrackingIdleConfig);
		}
		else
			populateSlots(domain.listAllAppointments(form.getGlobalContext().RefMan.getTheatreListFilterVo()), null,theatreTrackingIdleConfig);
	}


	private void populateSlots(TheatreListBookingAppointmentVoCollection collection, Sch_Session_Appointment_OrderVo voOrder, TheatreTrackingIdleConfigVo theatreTrackingIdleConfig) 
	{
		grdTheatreRow row=null;
		
		form.grdTheatre().getRows().clear();
		form.getContextMenus().RefMan.hideAllTheatreListMenuMenuItems();
	
		if (collection == null || collection.size() == 0)
		{
			engine.showMessage("No matching records found");
			return;
		}
			
		
		Integer voApptId = -1;
		if (voOrder != null)
		{
			for (int i = 0 ; voOrder.getAppointmentsIsNotNull() && i < voOrder.getAppointments().size() ; i++)
			{
				voApptId = voOrder.getAppointments().get(i).getID_Booking_Appointment();
				addRow(voApptId, collection,theatreTrackingIdleConfig);
			}
			
			//WDEV-11870 add dna's and cancels to the bottom of the list
			if(collection != null)
			{
				for (TheatreListBookingAppointmentVo item: collection)
				{
					if(!isItemInOrderedList(voOrder.getAppointments(), item))
					{
						row = form.grdTheatre().getRows().newRow();
						fillRow(row, item,null);
					}
				}
			}
		}
		else
		{
			//WDEV-12918
			collection.sort(SortOrder.ASCENDING);
			for (TheatreListBookingAppointmentVo item: collection)
			{
				row = form.grdTheatre().getRows().newRow();
				fillRow(row, item,theatreTrackingIdleConfig);
			}
		}			

		//if (voOrder == null)
		//	form.grdTheatre().sort(6, SortOrder.ASCENDING);
	}

	private boolean isItemInOrderedList(BookingAppointmentTheatreVoCollection appointments, TheatreListBookingAppointmentVo item)
	{
		if((appointments == null || appointments.size() == 0) || item == null )
			return false;
		
		for(BookingAppointmentTheatreVo lstItem : appointments)
		{
			if(lstItem.getID_Booking_Appointment().equals(item.getID_Booking_Appointment()))
				return true;
		}
		
		return false;
	}

	private void fillRow(grdTheatreRow row, TheatreListBookingAppointmentVo item, TheatreTrackingIdleConfigVo theatreTrackingIdleConfig) 
	{
		PatientShort voPatShort = item.getPatient();
		
		//WDEV-18005
		CatsReferralRttDateForTheatreListVo ReferralWithRttDate = domain.getReferralWithRttDate(item);
		Date RttDate = ((ReferralWithRttDate != null && ReferralWithRttDate.getReferralDetails() != null )? ReferralWithRttDate.getReferralDetails().getEnd18WW() : null);
		String RttDateTooltip = (RttDate != null ? "<b>RTT Breach Date: </b>" + RttDate.toString() : "");
		
		row.setcolICP(item.getICPInfoIsNotNull() ? form.getImages().ICP.ICP : null);
		row.setTooltipForcolICP(RttDateTooltip);

		if (voPatShort.getDisplayId() != null) 
		{
			row.setcolHospnum(voPatShort.getDisplayId().getValue());
		}
		
		row.setTooltipForcolHospnum(RttDateTooltip);
		
		row.setcolSurname(voPatShort.getName().getSurname());
		row.setTooltipForcolSurname(RttDateTooltip);
		row.setcolForename(voPatShort.getName().getForename());
		row.setTooltipForcolForename(RttDateTooltip);
		row.setcolSex(voPatShort.getSexIsNotNull() ? voPatShort.getSex().toString() : "");
		row.setTooltipForcolSex(RttDateTooltip);
		row.setcolDob(voPatShort.getDobIsNotNull() ? voPatShort.getDob().toString() : "");
		row.setTooltipForcolDob(RttDateTooltip);
			
		if(voPatShort.getAssociatedPatientIsNotNull())
			row.setBackColor(ConfigFlag.UI.MERGED_COLOUR.getValue());
			
		if (voPatShort.getDod() != null)
			row.setBackColor(ConfigFlag.UI.RIP_COLOUR.getValue());			

		//WDEV-11777 - display appt time if TCI time is not populated
		if(item.getTheatreBookingIsNotNull())
		{
			if(item.getTheatreBooking().getTCITimeIsNotNull())
				row.setcolTime(item.getTheatreBooking().getTCITime().toString());	
			else if(item.getApptStartTimeIsNotNull())
				row.setcolTime(item.getApptStartTime().toString());
		}
		
		row.setTooltipForcolTime(RttDateTooltip);
			
		//WDEV-10182 - show suitable for surgery text if populated
		if(item.getTheatreBookingIsNotNull())
		{
			
			if(item.getTheatreBooking().getSuitableForSurgeryProcedureIsNotNull())
			{
				row.setcolProcedure(item.getTheatreBooking().getSuitableForSurgeryProcedure());
				row.setTooltipForcolProcedure("<b>Procedure</b> - "+item.getTheatreBooking().getSuitableForSurgeryProcedure() + "<br>" + RttDateTooltip);
			}
			else if(item.getTheatreBooking().getProcedureIsNotNull())
			{
				row.setcolProcedure(item.getTheatreBooking().getProcedure().getProcedureName());
				row.setTooltipForcolProcedure("<b>Procedure</b> - "+item.getTheatreBooking().getProcedure().getProcedureName() + "<br>" + RttDateTooltip);
			}
		}
		else
			row.setTooltipForcolProcedure(RttDateTooltip);
		
		if(item.getApptStatusIsNotNull())
		{
			row.setcolStatus(item.getApptStatus().toString());
		}
		
		row.setTooltipForcolStatus(RttDateTooltip);
			
		// WDEV-12080 - Fill Anaesthetic Type column (check if the values until it aren't null)
		if (item != null && item.getTheatreBookingIsNotNull() && item.getTheatreBooking().getAnaestheticTypeIsNotNull())
		{
			row.setcolAnaesthetic(item.getTheatreBooking().getAnaestheticType().getText());
			row.setTooltipForcolAnaesthetic("<b>Anaesthetic Type</b> - " + item.getTheatreBooking().getAnaestheticType().getText() + "<br>" + RttDateTooltip);
		}
		else
			row.setTooltipForcolAnaesthetic(RttDateTooltip);
		
		//WDEV-11880
		if(item.getApptStatusIsNotNull() && item.getApptStatus().equals(Status_Reason.ADMITTED))
			row.setBackColor(ConfigFlag.UI.THEATRELIST_ADMITTED_ROWCOLOUR.getValue());
		
		//WDEV-12173
		if(item.getIntraOperativeCareRecordIsNotNull())
		{
			if(item.getIntraOperativeCareRecord().size() > 0)
			{
				//reverse Chronological Order
				item.getIntraOperativeCareRecord().sort(SortOrder.DESCENDING);
				
				
				IntraOperativeCareRecordSchedulingVo voIntra = item.getIntraOperativeCareRecord().get(0);
				if(voIntra != null)
				{
					if(voIntra.getIntoPacuTimeIsNotNull() && voIntra.getIntoPacuTime().getTime() != null)
					{
						row.setColIntoPacu(voIntra.getIntoPacuTime().getTime().toString());
						row.setTooltipForColIntoPacu(voIntra.getIntoPacuTime().getDate().toString() + "<br>" + RttDateTooltip);		//wdev-12257
					}
					else
						row.setTooltipForColIntoPacu(RttDateTooltip);
					
					if(voIntra.getAnaesthetistStartTimeIsNotNull() && voIntra.getAnaesthetistStartTime().getTime() != null)
					{
						row.setColAnaesStart(voIntra.getAnaesthetistStartTime().getTime().toString());
						row.setTooltipForColAnaesStart(voIntra.getAnaesthetistStartTime().getDate().toString() + "<br>" + RttDateTooltip);	//wdev-12257
					}
					else
						row.setTooltipForColAnaesStart(RttDateTooltip);
					
					if(voIntra.getInTheatreTimeIsNotNull() && voIntra.getInTheatreTime().getTime() != null)
					{
						row.setColInTheatre(voIntra.getInTheatreTime().getTime().toString());
						row.setTooltipForColInTheatre(voIntra.getInTheatreTime().getDate().toString() + "<br>" + RttDateTooltip);			//wdev-12257
					}
					else
						row.setTooltipForColInTheatre(RttDateTooltip);
					
					if(voIntra.getSurgeryStartTimeIsNotNull() && voIntra.getSurgeryStartTime().getTime() != null)
					{
						row.setColSurgeryStart(voIntra.getSurgeryStartTime().getTime().toString());
						row.setTooltipForColSurgeryStart(voIntra.getSurgeryStartTime().getDate().toString() + "<br>" + RttDateTooltip);		//wdev-12257
					}
					else
						row.setTooltipForColSurgeryStart(RttDateTooltip);
					
					if(voIntra.getSurgeryEndTimeIsNotNull() && voIntra.getSurgeryEndTime().getTime() != null)
					{
						row.setColSurgeyEnd(voIntra.getSurgeryEndTime().getTime().toString());
						row.setTooltipForColSurgeyEnd(voIntra.getSurgeryEndTime().getDate().toString() + "<br>" + RttDateTooltip);			//wdev-12257
					}
					else
						row.setTooltipForColSurgeyEnd(RttDateTooltip);
					
					if(voIntra.getTimeIntoRecoveryIsNotNull() && voIntra.getTimeIntoRecovery().getTime() != null)
					{
						row.setColIntoRecovery(voIntra.getTimeIntoRecovery().getTime().toString());
						row.setTooltipForColIntoRecovery(voIntra.getTimeIntoRecovery().getDate().toString() + "<br>" + RttDateTooltip);		//wdev-12257
					}
					else
						row.setTooltipForColIntoRecovery(RttDateTooltip);
					
					if(voIntra.getTimeOutOfRecoveryIsNotNull() && voIntra.getTimeOutOfRecovery().getTime() != null)
					{
						row.setColOutRecovery(voIntra.getTimeOutOfRecovery().getTime().toString());
						row.setTooltipForColOutRecovery(voIntra.getTimeOutOfRecovery().getDate().toString() + "<br>" + RttDateTooltip);		//wdev-12257
					}
					else
						row.setTooltipForColOutRecovery(RttDateTooltip);
				}
				else
					setTooltipsForIntraOperativeColumns(row, RttDateTooltip);
				
				//may override WDEV-11880 admitted colour set above
				Color intraBackColor = getBackColour(voIntra);
				if(intraBackColor != null)
					row.setBackColor(intraBackColor);
				
				
				if (theatreTrackingIdleConfig!= null)
				{
					if (theatreTrackingIdleConfig.getTimeOfArrivalIdleColourIsNotNull() && theatreTrackingIdleConfig.getTimeOfArrivalIdleMinIsNotNull())
					{
						if (item.getCurrentStatusRecordIsNotNull() && Status_Reason.ADMITTED.equals(item.getCurrentStatusRecord().getStatus()))
						{
							if (item.getCurrentStatusRecord().getStatusChangeDateTimeIsNotNull() && ((new DateTime().getJavaDate().getTime()-item.getCurrentStatusRecord().getStatusChangeDateTime().getJavaDate().getTime())/1000/60)>theatreTrackingIdleConfig.getTimeOfArrivalIdleMin())
							{
								if (!voIntra.getIntoPacuTimeIsNotNull() && !voIntra.getAnaesthetistStartTimeIsNotNull() &&
										!voIntra.getInTheatreTimeIsNotNull() && !voIntra.getSurgeryStartTimeIsNotNull() &&
										!voIntra.getSurgeryEndTimeIsNotNull() && !voIntra.getTimeIntoRecoveryIsNotNull() &&
										!voIntra.getTimeOutOfRecoveryIsNotNull())
								row.setBackColor(theatreTrackingIdleConfig.getTimeOfArrivalIdleColour());
							}
						}
					}
					if (theatreTrackingIdleConfig.getTimeIntoPACUIdleColourIsNotNull() && theatreTrackingIdleConfig.getTimeIntoPACUIdleMinIsNotNull())
					{
						if (voIntra.getIntoPacuTimeIsNotNull() && ((new DateTime().getJavaDate().getTime() - voIntra.getIntoPacuTime().getJavaDate().getTime())/1000/60)>theatreTrackingIdleConfig.getTimeIntoPACUIdleMin())
						{
							if (!voIntra.getAnaesthetistStartTimeIsNotNull() &&
										!voIntra.getInTheatreTimeIsNotNull() && !voIntra.getSurgeryStartTimeIsNotNull() &&
										!voIntra.getSurgeryEndTimeIsNotNull() && !voIntra.getTimeIntoRecoveryIsNotNull() &&
										!voIntra.getTimeOutOfRecoveryIsNotNull())
							{
								row.setBackColor(theatreTrackingIdleConfig.getTimeIntoPACUIdleColour());
							}
						}
					}
					if (theatreTrackingIdleConfig.getTimeToTheatreIdleColourIsNotNull() && theatreTrackingIdleConfig.getTimeToTheatreIdleMinIsNotNull())
					{
						if (voIntra.getSurgeryStartTimeIsNotNull() && ((new DateTime().getJavaDate().getTime() - voIntra.getSurgeryStartTime().getJavaDate().getTime())/1000/60)>theatreTrackingIdleConfig.getTimeToTheatreIdleMin())
						{
							if (!voIntra.getSurgeryEndTimeIsNotNull() && !voIntra.getTimeIntoRecoveryIsNotNull() &&
									!voIntra.getTimeOutOfRecoveryIsNotNull())
							{
								if (voIntra == null || (!voIntra.getSurgeryEndTimeIsNotNull()
															&& !voIntra.getTimeIntoRecoveryIsNotNull()
															&& !voIntra.getTimeOutOfRecoveryIsNotNull()))
								{
									row.setBackColor(theatreTrackingIdleConfig.getTimeToTheatreIdleColour());
								}
							}
							
						}
					}
				}
				
			}
			else
				setTooltipsForIntraOperativeColumns(row, RttDateTooltip);
		}
		else
			setTooltipsForIntraOperativeColumns(row, RttDateTooltip);
		
		// WDEV-12746
		// WDEV-13199 - fixed for appointments in the future (were taken in consideration even if they were not Admitted yet)
		if (!item.getIntraOperativeCareRecordIsNotNull() || item.getIntraOperativeCareRecord().size() == 0)
		{
			if (theatreTrackingIdleConfig != null && theatreTrackingIdleConfig.getTimeOfArrivalIdleMinIsNotNull() && theatreTrackingIdleConfig.getTimeOfArrivalIdleColourIsNotNull())
			{
				if (item.getCurrentStatusRecordIsNotNull() && item.getCurrentStatusRecord().getStatusChangeDateTimeIsNotNull() && Status_Reason.ADMITTED.equals(item.getCurrentStatusRecord().getStatus()))
				{
					if (((new DateTime().getJavaDate().getTime() - ((DateTime) item.getCurrentStatusRecord().getStatusChangeDateTime().clone()).getJavaDate().getTime())/1000/60) > theatreTrackingIdleConfig.getTimeOfArrivalIdleMin())
					{
						row.setBackColor(theatreTrackingIdleConfig.getTimeOfArrivalIdleColour());
					}
				}
			}
		}

		row.setValue(item);
	}

	private void setTooltipsForIntraOperativeColumns(grdTheatreRow row, String rttDateTooltip)
	{
			row.setTooltipForColIntoPacu(rttDateTooltip);
			row.setTooltipForColAnaesStart(rttDateTooltip);
			row.setTooltipForColInTheatre(rttDateTooltip);
			row.setTooltipForColSurgeryStart( rttDateTooltip);
			row.setTooltipForColSurgeyEnd(rttDateTooltip);
			row.setTooltipForColIntoRecovery(rttDateTooltip);
			row.setTooltipForColOutRecovery(rttDateTooltip);
	}

	//WDEV-12173
	private Color getBackColour(IntraOperativeCareRecordSchedulingVo voIntra)
	{
		if(form.getLocalContext().getTrackingStatusConfig() == null)
			return null;
		
		if(voIntra == null)
			return null;
		
		TrackingStatusConfigVo voTrackStatusConfig = form.getLocalContext().getTrackingStatusConfig();
		
		if(voIntra.getTimeOutOfRecoveryIsNotNull())
			return voTrackStatusConfig.getTimeOutOfRecovery();
		else if(voIntra.getTimeIntoRecoveryIsNotNull())
			return voTrackStatusConfig.getTimeIntoRecovery();
		else if(voIntra.getSurgeryEndTimeIsNotNull())
			return voTrackStatusConfig.getSurgeryFinish();
		else if(voIntra.getSurgeryStartTimeIsNotNull())
			return voTrackStatusConfig.getSurgeryStart();
		else if(voIntra.getInTheatreTimeIsNotNull())
			return voTrackStatusConfig.getTheatreIn();
		else if(voIntra.getAnaesthetistStartTimeIsNotNull())
			return voTrackStatusConfig.getTimeStartAnaesthetist();
		else if(voIntra.getIntoPacuTimeIsNotNull())
			return voTrackStatusConfig.getTimeintoPACU();	
		
		return null;
	}

	private void addRow(Integer voApptId, TheatreListBookingAppointmentVoCollection collection, TheatreTrackingIdleConfigVo theatreTrackingIdleConfig) 
	{
		for (TheatreListBookingAppointmentVo item: collection)
		{
			if (item.getID_Booking_Appointment().equals(voApptId))
			{	
				grdTheatreRow row = form.grdTheatre().getRows().newRow();
				fillRow(row, item,theatreTrackingIdleConfig);
			}
			
		}
	}

	private boolean validateSearch()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.dteTheatre().getValue() != null 
				&& ( form.cmbHospital().getValue() != null || form.ccListOwner().getValue() != null))
			return true;
		else
			uiErrors.add("Please select at least a Date and Hospital and/or List Owner");
		
		if(uiErrors.size() > 0)
		{
			engine.showErrors(uiErrors.toArray(new String[0]));
			return false;
		}
		
		return true;
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException
	{
		loadSessions();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		disableRefreshTemporarily();
		
		form.getLocalContext().setMessageBoxID(null);
		Booking_AppointmentVo voAppt;
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.TheatreListMenu.EDIT_VIEW_ACTIONS:
				form.getGlobalContext().ICP.setPatientICPRecord(form.grdTheatre().getSelectedRow().getValue().getICPInfo());
				engine.open(form.getForms().ICP.PatientICP);
			break;
			case GenForm.ContextMenus.RefManNamespace.TheatreListMenu.ADD:
				admit();
			break;
			case GenForm.ContextMenus.RefManNamespace.TheatreListMenu.UPDATE:
				engine.open(form.getForms().Clinical.IntraOperativeCareRecord);
			break;
			//WDEV-9657 - DNA
			case GenForm.ContextMenus.RefManNamespace.TheatreListMenu.REMOVE:
				dnaPatientMenuItem();			
			break;
			
			//WDEV-13307
			case GenForm.ContextMenus.RefManNamespace.TheatreListMenu.RETURNTOTHEATRE:
				returnToTheatre();
			break;
			//wdev-16163
			case GenForm.ContextMenus.RefManNamespace.TheatreListMenu.ATTACHICPTOBOOKING:
				engine.open(form.getForms().RefMan.PatientICPForTheatreBookingDlg,new Object[]{form.grdTheatre().getSelectedRow().getValue()});
			break;
			//--------
			
			case GenForm.ContextMenus.RefManNamespace.TheatreListMenu.CANCEL_THEATRE_APPT:
				voAppt = domain.getBookingAppt(form.grdTheatre().getValue());
				cancelTheatreAppointment(voAppt, form.grdTheatre().getValue());
				break;
		}
	}

	private void cancelTheatreAppointment(Booking_AppointmentVo voAppt, TheatreListBookingAppointmentVo voApptToCancel)
	{
		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;
		
		if (voAppt != null && Status_Reason.BOOKED.equals(voAppt.getApptStatus()) && isTheatreAppt)
		{
			form.getGlobalContext().Scheduling.setBookingAppointmentRef(voAppt);
			TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(voApptToCancel);
			
			if(voPsc != null)
			{
				CatsReferralForTheatreListVo catsReferralForCancelApp = domain.getCatsReferralForCancel(voAppt); 
				form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
				form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
				form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());
				form.getGlobalContext().RefMan.setCatsReferralStatus(catsReferralForCancelApp != null ? catsReferralForCancelApp.getCurrentStatus() : null);
				engine.open(form.getForms().Scheduling.CancelAppointmentDialog, new Object[] {null, isTheatreAppt});
			}
		}
		else if (voAppt != null && voAppt.getApptStatusIsNotNull() && voApptToCancel != null && voAppt.getApptStatusIsNotNull() && ! voAppt.getApptStatus().equals(voApptToCancel.getApptStatus()) )
		{
			engine.showMessage("The appointment's status has already been changed.");
			performSearch();
		}
		
	}

	//WDEV-13307
	private void returnToTheatre() 
	{
		Booking_AppointmentVo voBooking = domain.getBookingAppt(form.grdTheatre().getValue());
		
		//Check can still be re_admitted
		if (!domain.isNotACurrentInpatient(form.getGlobalContext().Core.getPatientShort())
			&& voBooking.getApptStatusIsNotNull()
			&& voBooking.getApptStatus().equals(Status_Reason.BOOKED))
		{
			form.getGlobalContext().RefMan.setTheatreBookingAppointment(voBooking);
			
			TheatreListBookingDetailVo voAdmit = new TheatreListBookingDetailVo();
			voAdmit.setTheatreText(form.grdTheatre().getValue().getTheatreBookingIsNotNull() && form.grdTheatre().getValue().getTheatreBooking().getSessionIsNotNull() ? form.grdTheatre().getValue().getTheatreBooking().getSession().getName() : "");
			
			if(form.grdTheatre().getSelectedRow() != null)
			{
				voAdmit.setTCITime(form.grdTheatre().getSelectedRow().getcolTime());
				voAdmit.setProcedureText(form.grdTheatre().getSelectedRow().getcolProcedure());
			}
			
			ProcedureVo voProc = domain.getProcedureLOS(form.grdTheatre().getValue().getTheatreBooking().getProcedure());
			if(voProc != null)
				voAdmit.setLOS(voProc.getLOS());
			
			form.getGlobalContext().RefMan.setTheatreAdmitDetails(voAdmit);
			
			if (form.cmbHospital().getValue() == null)
			{
				if (form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getTypeIsNotNull()
					&& form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getType().equals(LocationType.HOSP))
					form.getGlobalContext().Core.setHospitalLoc(form.grdTheatre().getSelectedRow().getValue().getSessionIsNotNull() ? form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation() : null);
				else if (form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getTypeIsNotNull()
					&& ! form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getType().equals(LocationType.HOSP))
				{
					if (form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getParentLocation().getType().equals(LocationType.HOSP))
						form.getGlobalContext().Core.setHospitalLoc(form.grdTheatre().getSelectedRow().getValue().getSessionIsNotNull() ? form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getParentLocation() : null);
				}
			}
			else
			{
				form.getGlobalContext().Core.setHospitalLoc(form.cmbHospital().getValue());
			}
			
			if(form.getGlobalContext().Core.getPatientShort() != null)
			{
				InpatientEpisodeVo inpatient = domain.getInpatientEpisode(form.getGlobalContext().Core.getPatientShort());		
				engine.open(form.getForms().RefMan.TheatreAdmissionDialog, new Object[] {inpatient});
			}
		}
		else
		{
			engine.showMessage("The Patient is no longer an Inpatient or the status of the Booking has changed.");
			performSearch();
		}
	}

	/**
	 * 
	 */
	private void disableRefreshTemporarily()
	{
		//kill the refresh timer if it is enabled
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Theatre List");	//WDEV-13307
			form.getLocalContext().setWasTimerEnabled(true);
		}
		else
			form.getLocalContext().setWasTimerEnabled(false);
	}
	
	private void dnaPatientMenuItem()
	{
		Booking_AppointmentVo voBook = domain.getBookingAppt(form.grdTheatre().getValue());
		if (voBook.getApptStatusIsNotNull() && canBeDNAed(voBook.getApptStatus(), voBook.getAppointmentDate(), voBook.getApptStartTime())) //WDEV-11863
		{
			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
					&& domain.hasTCI(voBook))
			{
				form.getLocalContext().setMessageBoxID(engine.showMessage("You are about to mark this record as DNA. Is a new TCI required?", "Warning", MessageButtons.YESNOCANCEL));
			}
			else
			{
				form.getLocalContext().setMessageBoxID(engine.showMessage("Are you sure you want to mark this record as DNA?", "Warning", MessageButtons.YESNO));
			}
		}
		else if (voBook.getApptStatusIsNotNull() && voBook.getApptStatus().equals(Status_Reason.DNA))
		{
			engine.showMessage("This appointment has already been marked as DNA'ed");
			performSearch();
		}
		else if (voBook.getApptStatusIsNotNull() && voBook.getApptStatus().equals(Status_Reason.ADMITTED))
		{
			engine.showMessage("This appointment has already been marked as Admitted");
			performSearch();
		}
	}

	private void dnaPatient(TheatreListBookingAppointmentVo voAppt, boolean requiresNewTCI)
	{
		CatsReferralWizardVo voCats = domain.getCatsReferral(voAppt);
		if (voCats == null)
		{
			engine.showMessage("No CATS Referral Found.");
			return;
		}

		voCats.setHasDNAApptsForReview(true);
		
		voAppt.setApptStatus(Status_Reason.DNA);
		
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		
		//WDEV-12146
		if(voAppt.getSessionIsNotNull())
			voStatus.setApptDate(voAppt.getSession().getSessionDate());
		
		voStatus.setApptTime(voAppt.getApptStartTime());
		voStatus.setStatusChangeDateTime(new DateTime());
		voStatus.setStatus(Status_Reason.DNA);
		
		Appointment_StatusVoCollection voCollStatusHistory = voAppt.getApptStatusHistory();
		if(voCollStatusHistory == null)
			voCollStatusHistory =  new Appointment_StatusVoCollection();
		
		voCollStatusHistory.add(voStatus);
		voAppt.setCurrentStatusRecord(voStatus); 
		voAppt.setApptStatusHistory(voCollStatusHistory);
		
		//WDEV-9091 - starts here
		SessionTheatreTCISlotLiteVo sessionSlot = null;
		
		if(voAppt.getIsCABBooking() == null || Boolean.FALSE.equals(voAppt.getIsCABBooking()))
		{
			voAppt.setRequiresRebook(true);
			
			if(voAppt.getTheatreSlotIsNotNull())
			{
				sessionSlot = domain.getSessionSlot(voAppt.getTheatreSlot());
				sessionSlot.setStatus(Status_Reason.DNA);
				sessionSlot.setAppointment(null);
				sessionSlot.validate();
				
				voAppt.setTheatreSlot(null);
			}
		}
		//WDEV-9091 - ends here
		
		PatientElectiveListForDNAAppointmentsVo patientElectiveList = null;

		if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue()))
		{
			// TODO - Also set TCI to outcome 
			patientElectiveList = domain.getPatientElectiveList(voAppt);
			
			if (patientElectiveList != null)
			{
				TCIForPatientElectiveListAppointmentDNAVo currentTCI = patientElectiveList.getTCIDetails();
				
				// Update the TCI record - should really not be null, since the query is performed after it
				if (currentTCI != null)
				{
    				TCIOutcomeForAppointmentDNAVo outcomeDNA = new TCIOutcomeForAppointmentDNAVo();
    				
    				outcomeDNA.setOutcome(AdmissionOfferOutcome.PATIENT_FAILED_TO_ARRIVE_4);
    				outcomeDNA.setStatusDateTime(new DateTime());
    				outcomeDNA.setChangeBy((MemberOfStaffRefVo) domain.getMosUser());
    				
    				currentTCI.setCurrentOutcome(outcomeDNA);
    				currentTCI.getOutcomeHistory().add(outcomeDNA);
    				currentTCI.setIsActive(Boolean.FALSE);
    				
    				// Add current TCI to history, but do NOT remove it from current field yet.
    				// It will be removed in impl file, after it will be saved.
    				
    				patientElectiveList.getTCIHistory().add(currentTCI);
				}
				
				// Update the status for PatientElective
				if (requiresNewTCI == true)
				{
					ElectiveListStatusVo requiresNewTCIStatus = new ElectiveListStatusVo();
					
					requiresNewTCIStatus.setAuthoringUser((MemberOfStaffLiteVo) domain.getMosUser());
					requiresNewTCIStatus.setStatusDateTime(new DateTime());
					requiresNewTCIStatus.setStatusComment(null);
					requiresNewTCIStatus.setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
					requiresNewTCIStatus.setRemovalReason(null);
					requiresNewTCIStatus.setRemovalOtherReason(null);    					
					
					patientElectiveList.setElectiveListStatus(requiresNewTCIStatus);
					patientElectiveList.getElectiveListStatusHistory().add(requiresNewTCIStatus);
				}
			}
		}
		
		String[] error = voAppt.validate();
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}
		
		error = voCats.validate(error);
		if (error != null)
		{
			engine.showErrors(error);
			return;
		}

		try
		{
			domain.saveTheatreAppointment(voAppt, voCats, sessionSlot, patientElectiveList);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		performSearch();	
	}

	private void admit()
	{
		Booking_AppointmentVo voBooking = domain.getBookingAppt(form.grdTheatre().getValue());
		//Check can still be admitted
		if (domain.isNotACurrentInpatient(form.getGlobalContext().Core.getPatientShort())
			&& voBooking.getApptStatusIsNotNull()
			&& voBooking.getApptStatus().equals(Status_Reason.BOOKED))
		{
			form.getGlobalContext().RefMan.setTheatreBookingAppointment(voBooking);

			TheatreListBookingDetailVo voAdmit = new TheatreListBookingDetailVo();
			
			voAdmit.setTCITime(form.grdTheatre().getSelectedRow().getcolTime());
			voAdmit.setTheatreText(form.grdTheatre().getValue().getTheatreBookingIsNotNull() && form.grdTheatre().getValue().getTheatreBooking().getSessionIsNotNull() ? form.grdTheatre().getValue().getTheatreBooking().getSession().getName() : "");
			voAdmit.setProcedureText(form.grdTheatre().getSelectedRow().getcolProcedure());
			ProcedureVo voProc = domain.getProcedureLOS(form.grdTheatre().getValue().getTheatreBooking().getProcedure());
			voAdmit.setLOS(voProc.getLOS());
			form.getGlobalContext().RefMan.setTheatreAdmitDetails(voAdmit);
			if (form.cmbHospital().getValue() == null)
			{
				if (form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getTypeIsNotNull()
					&& form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getType().equals(LocationType.HOSP))
					form.getGlobalContext().Core.setHospitalLoc(form.grdTheatre().getSelectedRow().getValue().getSessionIsNotNull() ? form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation() : null);
				else if (form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getTypeIsNotNull()
					&& ! form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getType().equals(LocationType.HOSP))
				{
					if (form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getParentLocation().getType().equals(LocationType.HOSP))
						form.getGlobalContext().Core.setHospitalLoc(form.grdTheatre().getSelectedRow().getValue().getSessionIsNotNull() ? form.grdTheatre().getSelectedRow().getValue().getSession().getSchLocation().getParentLocation() : null);
				}
			}
			else 
				form.getGlobalContext().Core.setHospitalLoc(form.cmbHospital().getValue());
		
			engine.open(form.getForms().RefMan.TheatreAdmissionDialog);
		}
		else
		{
			engine.showMessage("The Patient is already Admitted or the status of the Booking has changed.");
			performSearch();
		}
	}

	private void updateContextMenus() 
	{
		form.getContextMenus().RefMan.hideAllTheatreListMenuMenuItems();
		form.btnAdmit().setEnabled(false);
		
		boolean isNotACurrentInpatient = true;//	WDEV-13307
		
		if(form.grdTheatre().getValue() != null)//	WDEV-13307
			isNotACurrentInpatient = domain.isNotACurrentInpatient(form.getGlobalContext().Core.getPatientShort());
			
		boolean canBeAdmitted = form.grdTheatre().getValue() != null
		// WDEV-13199 - Theatre appointments from future days are not allowed to be admitted
		// WDEV-18008 - Theatre appointments from future days are now allowed to be admitted (not more than 5 days);  
		&& ((form.grdTheatre().getValue().getSessionIsNotNull() && form.grdTheatre().getValue().getSession().getSessionDateIsNotNull()) ? new Date().isGreaterOrEqualThan(form.grdTheatre().getValue().getSession().getSessionDate().addDay(-5)) : true)
		&& form.grdTheatre().getValue().getApptStatusIsNotNull()
		&& (form.grdTheatre().getValue().getApptStatus().equals(Status_Reason.ARRIVAL)
			||form.grdTheatre().getValue().getApptStatus().equals(Status_Reason.BOOKED)) 
		&& domain.isReferralAccepted(form.getGlobalContext().Scheduling.getBookingAppointmentRef());
		
		if (canBeAdmitted && isNotACurrentInpatient)//	WDEV-13307
		{
			form.getContextMenus().RefMan.getTheatreListMenuADDItem().setVisible(form.grdTheatre().getValue() != null);
			form.btnAdmit().setEnabled(true);
		}
		
		//WDEV-9657 DNA
		if (form.grdTheatre().getValue() != null && canBeDNAed(form.grdTheatre().getValue().getApptStatus(), form.grdTheatre().getValue().getSessionIsNotNull() ? form.grdTheatre().getValue().getSession().getSessionDate() : null, form.grdTheatre().getValue().getApptStartTime())) //WDEV-11863
			form.getContextMenus().RefMan.getTheatreListMenuREMOVEItem().setVisible(true);

		if (form.grdTheatre().getSelectedRow() != null 
			&& form.grdTheatre().getSelectedRow().getValue() != null 
			&& form.grdTheatre().getSelectedRow().getValue().getICPInfoIsNotNull()
			&& form.grdTheatre().getSelectedRow().getValue().getICPInfo().getID_PatientICPIsNotNull())
		{
			form.getContextMenus().RefMan.getTheatreListMenuEDIT_VIEW_ACTIONSItem().setVisible(true);
		}
		
		form.getContextMenus().RefMan.getTheatreListMenuRETURNTOTHEATREItem().setVisible(canBeAdmitted && !isNotACurrentInpatient);//WDEV-13307
		//wdev-16163
		form.getContextMenus().RefMan.getTheatreListMenuATTACHICPTOBOOKINGItem().setVisible(form.grdTheatre().getValue() != null && !form.grdTheatre().getValue().getICPInfoIsNotNull() && engine.hasRight(AppRight.CAN_ATTACH_APPOINTMENT_TO_ICP) ); 
		//-----------
		
		form.getContextMenus().RefMan.getTheatreListMenuCANCEL_THEATRE_APPTItem().setVisible(form.grdTheatre().getValue() != null && Status_Reason.BOOKED.equals(form.grdTheatre().getValue().getApptStatus()) && Boolean.TRUE.equals(ConfigFlag.UI.CAN_CONFIGURE_THEATRE_PROFILES.getValue()));
	}


	private boolean canBeDNAed(Status_Reason appStatus, Date apptDate, Time apptTime) 
	{
		if(appStatus != null && appStatus.equals(Status_Reason.BOOKED))
		{
			if(apptDate != null)
			{
				if(new Date().isGreaterOrEqualThan(apptDate))
				{
					if(new Date().equals(apptDate))
					{
						if(apptTime != null)
						{
							if(new DateTime().getTime().isGreaterThan(apptTime))
								return true;
						}
					}
					else
						return true;
				}
			}
		}
		
		return false;
	}

	@Override
	protected void onGrdTheatreSelectionChanged() throws PresentationLogicException
	{
		form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.grdTheatre().getValue().getPatient()));
//		form.getGlobalContext().Scheduling.setBookingAppointment(domain.getBookingAppt(form.grdTheatre().getValue()));
		form.getGlobalContext().Scheduling.setBookingAppointmentRef(form.grdTheatre().getValue());

		form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferralRef(form.grdTheatre().getValue()));
		updateContextMenus();
	}

	@Override
	protected void onCcListOwnerValueChanged() throws PresentationLogicException 
	{
		loadSessions();
	}

	private void loadSessions()
	{
		form.cmbTheatre().clear();

		if ((form.cmbHospital().getValue() != null || (form.ccListOwner().getValue() != null && form.ccListOwner().getValue() instanceof IMos))
				&& form.dteTheatre().getValue() != null)	//wdev-11309
		{
			SessionShortVoCollection listSessions = domain.listSession(form.dteTheatre().getValue(), (HcpRefVo) form.ccListOwner().getValue(), form.cmbHospital().getValue(),form.cmbSessionType().getValue());
			for(int i = 0 ; i < listSessions.size() ; i++)
				form.cmbTheatre().newRow(listSessions.get(i), listSessions.get(i).toString());
		}
	}

	@Override
	protected void onDteTheatreValueChanged() throws PresentationLogicException 
	{
		loadSessions();
	}

	@Override
	protected void onBtnAdmitClick() throws PresentationLogicException 
	{
		//WDEV-12173
		disableRefreshTemporarily();
		
		admit();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				Booking_AppointmentVo voAppt = cancelAppt();
				
				if(voAppt == null)
					return;
				
				//rebook
				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull() && form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected() && voAppt.getTheatreBooking() != null)
				{	
					rebookTheatreAppt(domain.getBookingAppt(voAppt));
					return;
				}
			}
		}
		
		performSearch();
		toggleTimer(false);
	}

	private void rebookTheatreAppt(Booking_AppointmentVo voAppt)
	{
		if (isReferralEndOfCare(voAppt))
			return;

		boolean isTheatreAppt = voAppt != null && voAppt.getTheatreBooking() != null;

		 if (voAppt != null && Boolean.TRUE.equals(voAppt.getRequiresRebook()) && isTheatreAppt && (Status_Reason.CANCELLED.equals(voAppt.getApptStatus()) || Status_Reason.DNA.equals(voAppt.getApptStatus())))
		{
			form.getGlobalContext().Scheduling.setTheatreAppointment(domain.getBookingAppointmentTheatre(voAppt));

			if(voAppt.getSessionIsNotNull())
				form.getGlobalContext().Scheduling.setTheatreType(voAppt.getSession().getTheatreType());
			
			TheatreProcedureServiceAndConsultantLiteVo voPsc = domain.getTheatreServiceProcedureAndConsultant(voAppt);
			
			if(voPsc != null)
			{
				form.getGlobalContext().Scheduling.setTheatreService(voPsc.getService());
				form.getGlobalContext().Scheduling.setTheatreProcedure(voPsc.getProcedure());
				form.getGlobalContext().Scheduling.setTheatreConsultant(voPsc.getConsultant());
				
				if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
				{
					engine.open(form.getForms().RefMan.BookTheatreDialog);
				}
				else
				{
					engine.open(form.getForms().RefMan.BookTheatreSlot);
				}
			}
		}
	}

	private boolean isReferralEndOfCare(Booking_AppointmentVo voAppt)
	{
		 CatsReferralForTheatreListVo voRef = domain.getCatsReferralForCancel(voAppt);
		 
		if (voRef.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(voRef.getCurrentStatus().getReferralStatus()))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			return true;
		}
		else
			return false;
	}

	private Booking_AppointmentVo cancelAppt()
	{
		TheatreListBookingAppointmentVo voAppt = form.grdTheatre().getValue();
		
		if(voAppt == null)
			return null;
		
		Booking_AppointmentVo voApptFull = domain.getBookingAppt(voAppt);
			
		if (voApptFull.getApptStatusIsNotNull() && voAppt.getApptStatusIsNotNull() &&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
		{
			engine.showMessage("The Status of the appointment has already been changed.");
			return null;
		}
			
		if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
		{
			// appt status and status history
			voApptFull.setApptStatus(Status_Reason.CANCELLED);
			
			// wdev-6034
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voApptFull.setCurrentStatusRecord(voApptStatus);

			voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull,Status_Reason.CANCELLED, voApptStatus));
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptFull.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				if(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
					voApptFull.setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
			}
		}
		if (voApptFull.getSessionSlotIsNotNull())
			voApptFull.getSessionSlot().setStatus(Status_Reason.SLOTOPENED);
		
		String[] arrErrors = voApptFull.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return null;
		}

		try 
		{
			voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Theatre List");
		
			domain.updateCatsReferralAdditionalInvStatus(form.getGlobalContext().RefMan.getCatsReferral());
			
			domain.updateCatsReferralCancelStatus(form.getGlobalContext().RefMan.getCatsReferral());
			
			if(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue() && voApptFull.getTheatreBooking() != null && form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull() && Boolean.TRUE.equals(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelTCI()))//WDEV-18249
			{
				domain.cancelTCIAndReferralEROD(form.getGlobalContext().RefMan.getCatsReferral(), voApptFull, Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()),Status_Reason.PATIENTCANCELLED.equals(voApptFull.getApptStatusReas()), form.getGlobalContext().Scheduling.getApptCancelStatus().getCancelledForNonMedicalReason());//WDEV-18249,wdev-18419
			}
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return null;
		}
		
		return voApptFull;
	}

	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus)
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		//WDEV-11887
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				//--------------
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
				///-----------
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}

	@Override
	protected void onBtnSortTheatreClick() throws PresentationLogicException
	{
		form.getGlobalContext().Scheduling.setTheatreSession(null);
		if(form.cmbTheatre().getValue() != null)
			form.getGlobalContext().Scheduling.setTheatreSession( form.cmbTheatre().getValue());
		
		//WDEV-12918
		if(ConfigFlag.DOM.THEATRE_SESSION_TYPE.getValue().equals("TCI"))
			engine.open(form.getForms().Scheduling.SortTheatreAppointments);
		else
			engine.open(form.getForms().Scheduling.SortFixedTheatreAppointments);
	}

	@Override
	protected void onCmbSessionTypeValueChanged() throws PresentationLogicException 
	{
		loadSessions();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException 
	{
		if (form.getLocalContext().getMessageBoxID() != null && form.getLocalContext().getMessageBoxID().equals(messageBoxId))
		{
			if (Boolean.TRUE.equals(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue())
					&& domain.hasTCI(form.grdTheatre().getValue()))
			{
				if (DialogResult.YES.equals(result))
					dnaPatient(form.grdTheatre().getValue(), true);
				else if (DialogResult.NO.equals(result))
					dnaPatient(form.grdTheatre().getValue(), false);
			}
			else if (DialogResult.YES.equals(result))
			{
				dnaPatient(form.grdTheatre().getValue(), false);
			}
		}
		
//		if(messageBoxId == form.getLocalContext().getMessageBoxID() && result.equals(DialogResult.YES))
//			dnaPatient(form.grdTheatre().getValue());
		
		toggleTimer(false);
	}

	@Override
	protected void onImbAutoRefreshClick() throws PresentationLogicException
	{
		toggleTimer(true);
	}

	/**
	 * WDEV-12173 this method looks after the state of the timer
	 */
	private void toggleTimer(boolean fromButton)
	{
		if(fromButton && !form.getTimers().gettimerSearch().isEnabled())
		{
			if(!validateSearch())
				return;
		}
		
		boolean reinstateTimer = form.getLocalContext().getWasTimerEnabled();
		
		if(form.getTimers().gettimerSearch().isEnabled())
		{
			form.getTimers().gettimerSearch().setEnabled(false);
			form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStartEnabled24);
			form.imbAutoRefresh().setTooltip("Click button to start the automatic refresh of Theatre List");	
			form.getLocalContext().setWasTimerEnabled(false);
			if(form.getGlobalContext().RefMan.getTheatreListFilterVoIsNotNull())
				form.getGlobalContext().RefMan.getTheatreListFilterVo().setWasTimerOn(false);
		}
		else if(!form.getTimers().gettimerSearch().isEnabled())
		{
			if(fromButton || reinstateTimer)
			{
				form.getTimers().gettimerSearch().setEnabled(true);
				form.imbAutoRefresh().setTooltip("Click button to stop the automatic refresh of Theatre List");
				form.imbAutoRefresh().setEnabledImage(form.getImages().Core.TimerStopEnabled24);
				
				//update the context state
				form.getLocalContext().setWasTimerEnabled(true);
				if(form.getGlobalContext().RefMan.getTheatreListFilterVoIsNotNull())
					form.getGlobalContext().RefMan.getTheatreListFilterVo().setWasTimerOn(true);
				
				//enable the stopping button
				form.imbAutoRefresh().setEnabled(true);
			}
		}

		
		boolean enableControls = !form.getTimers().gettimerSearch().isEnabled();
		
		form.cmbHospital().setEnabled(enableControls);
		form.dteTheatre().setEnabled(enableControls);
		form.ccListOwner().setEnabled(enableControls);
		form.cmbSessionType().setEnabled(enableControls);
		form.cmbTheatre().setEnabled(enableControls);
		form.imbSearch().setEnabled(enableControls);
		form.imbClear().setEnabled(enableControls);
		form.btnSortTheatre().setEnabled(enableControls);
	}


	@Override
	protected void onTimer(Timer timer) throws PresentationLogicException
	{
		performSearch();
	}

	@Override
	protected void onFormClosing(CancelArgs args) throws PresentationLogicException
	{
		//WDEV-12249 kill timer
		form.getTimers().gettimerSearch().setEnabled(false);
	}
}
