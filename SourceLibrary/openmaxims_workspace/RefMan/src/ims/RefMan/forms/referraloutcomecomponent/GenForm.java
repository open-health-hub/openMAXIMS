// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.referraloutcomecomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabFurtherManagementContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbTLTTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.TLTType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.TLTType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.TLTType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.TLTType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.TLTType value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.TLTType getValue()
				{
					return (ims.RefMan.vo.lookups.TLTType)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.TLTType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbMedicallyIncompleteComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.MedicallyIncomplete value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.MedicallyIncomplete value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.MedicallyIncomplete value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.MedicallyIncomplete value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.MedicallyIncomplete value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.MedicallyIncomplete getValue()
				{
					return (ims.RefMan.vo.lookups.MedicallyIncomplete)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.MedicallyIncomplete value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbReasonNOComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.AnotherConsultationAppt value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.AnotherConsultationAppt value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.AnotherConsultationAppt value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.AnotherConsultationAppt value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.AnotherConsultationAppt value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.AnotherConsultationAppt getValue()
				{
					return (ims.RefMan.vo.lookups.AnotherConsultationAppt)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.AnotherConsultationAppt value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbProcedureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.ProcedureLiteVo getValue()
				{
					return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.ProcedureLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class grdFurtherRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdFurtherRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolDateTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolDateTimeOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolDateTime()
				{
					return (String)super.row.get(0);
				}
				public void setcolDateTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolDateTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolNotesReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolNotesReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolNotesOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolNotes()
				{
					return (String)super.row.get(1);
				}
				public void setcolNotes(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolNotesTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.RefMan.vo.FurtherManagementDetailsVo getValue()
				{
					return (ims.RefMan.vo.FurtherManagementDetailsVo)super.row.getValue();
				}
				public void setValue(ims.RefMan.vo.FurtherManagementDetailsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdFurtherRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdFurtherRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdFurtherRow get(int index)
				{
					return new grdFurtherRow(super.collection.get(index));
				}
				public grdFurtherRow newRow()
				{
					return new grdFurtherRow(super.collection.newRow());
				}
				public grdFurtherRow newRow(boolean autoSelect)
				{
					return new grdFurtherRow(super.collection.newRow(autoSelect));
				}
				public grdFurtherRow newRowAt(int index)
				{
					return new grdFurtherRow(super.collection.newRowAt(index));
				}
				public grdFurtherRow newRowAt(int index, boolean autoSelect)
				{
					return new grdFurtherRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdFurtherGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.RefMan.vo.FurtherManagementDetailsVoCollection getValues()
				{
					ims.RefMan.vo.FurtherManagementDetailsVoCollection listOfValues = new ims.RefMan.vo.FurtherManagementDetailsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.RefMan.vo.FurtherManagementDetailsVo getValue()
				{
					return (ims.RefMan.vo.FurtherManagementDetailsVo)super.grid.getValue();
				}
				public void setValue(ims.RefMan.vo.FurtherManagementDetailsVo value)
				{
					super.grid.setValue(value);
				}
				public grdFurtherRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdFurtherRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdFurtherRowCollection getRows()
				{
					return new grdFurtherRowCollection(super.grid.getRows());
				}
				public grdFurtherRow getRowByValue(ims.RefMan.vo.FurtherManagementDetailsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdFurtherRow(row);
				}
				public void setcolDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolNotesHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolNotesHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
		
			public static class Group2RadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 256, 200, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "", startTabIndex.intValue() + 1016);
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 96, 200, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "", startTabIndex.intValue() + 1015);
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 392, 200, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					control.addButton(2, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "", startTabIndex.intValue() + 1017);
				}
				public void setText(Group2Enumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public Group2Enumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return Group2Enumeration.None;
						case 0: return Group2Enumeration.rdoSpecial;
						case 1: return Group2Enumeration.rdoFurther;
						case 2: return Group2Enumeration.rdoTlt;
					}
					return null;
				}
				public void setValue(Group2Enumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(Group2Enumeration.None.id);
				}
				public boolean isEnabled(Group2Enumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(Group2Enumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(Group2Enumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(Group2Enumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class Group2Enumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static Group2Enumeration None = new Group2Enumeration(-1);
				public static Group2Enumeration rdoSpecial = new Group2Enumeration(0);
				public static Group2Enumeration rdoFurther = new Group2Enumeration(1);
				public static Group2Enumeration rdoTlt = new Group2Enumeration(2);
				private Group2Enumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((Group2Enumeration)o).id;
				}
				private int id;
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 300, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccAForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 12, skipContextValidation);
				//ims.framework.Control m_ccAControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(88), new Integer(300), new Integer(56), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 12), m_ccAForm, instance1 } );
				ims.framework.Control m_ccAControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 12), m_ccAForm, instance1, Boolean.TRUE } );
				super.addControl(m_ccAControl);
				Menu[] menus1 = m_ccAForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 248, 62, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Therapist:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 336, 158, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Generate Discharge Report", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 280, 59, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TLT Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 280, 200, 100, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Awaiting Results", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 264, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Incomplete:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 120, 200, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Another Appointment", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Details:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 168, 78, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Management", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 416, 200, 25, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TLT", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 152, 47, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Further", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 232, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Notes for", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 304, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No. of TLT Sessions :", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 232, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 248, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Medically", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 256, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 184, 304, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No. of Days:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 232, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 524, 328, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 3057), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 444, 328, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 3055), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "OK", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 88, 232, 512, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 88, 152, 512, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 88, 280, 512, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTLTTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTLTTypeTemp);
				cmbTLTTypeComboBox cmbTLTType = (cmbTLTTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTLTTypeComboBox.class, m_cmbTLTTypeTemp);
				super.addComboBox(cmbTLTType);
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 176, 256, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbMedicallyIncompleteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbMedicallyIncompleteTemp);
				cmbMedicallyIncompleteComboBox cmbMedicallyIncomplete = (cmbMedicallyIncompleteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMedicallyIncompleteComboBox.class, m_cmbMedicallyIncompleteTemp);
				super.addComboBox(cmbMedicallyIncomplete);
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 88, 232, 328, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbReasonNOTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbReasonNOTemp);
				cmbReasonNOComboBox cmbReasonNO = (cmbReasonNOComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReasonNOComboBox.class, m_cmbReasonNOTemp);
				super.addComboBox(cmbReasonNO);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 88, 256, 512, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbProcedureTemp);
				qmbProcedureComboBox qmbProcedure = (qmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureComboBox.class, m_qmbProcedureTemp);
				super.addComboBox(qmbProcedure);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 336, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 2033), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 592, 72, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdFurtherTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdFurtherTemp);
				grdFurtherGrid grdFurther = (grdFurtherGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFurtherGrid.class, m_grdFurtherTemp);
				grdFurther.addStringColumn("Date/Time", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdFurther.addStringColumn("Type Notes", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdFurther);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 264, 304, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 264, 304, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1024), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 136, 304, 32, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
		
				// RadioButton Controls
				RadioButton tmpGroup2 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
				super.addControl(tmpGroup2);
				Group2RadioButton Group2 = (Group2RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group2RadioButton.class, tmpGroup2);
				Group2.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(Group2);
			}

			public ims.core.forms.authoringinfo.IComponent ccA()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccAValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccAVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccAVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccAEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccAEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Label lblTLTNotes2()
			{
				return (Label)super.getControl(1);
			}
			public Label lblFinal()
			{
				return (Label)super.getControl(2);
			}
			public Label lblTLTType()
			{
				return (Label)super.getControl(3);
			}
			public Label lblMI3()
			{
				return (Label)super.getControl(5);
			}
			public Label lblTLTNotes()
			{
				return (Label)super.getControl(11);
			}
			public Label lblNoTLTSessions()
			{
				return (Label)super.getControl(12);
			}
			public Label lblMI2()
			{
				return (Label)super.getControl(13);
			}
			public Label lblMI1()
			{
				return (Label)super.getControl(14);
			}
			public Label lblPROCEDURE()
			{
				return (Label)super.getControl(15);
			}
			public Label lblNoOfDaysNO()
			{
				return (Label)super.getControl(16);
			}
			public Label lblApptReason()
			{
				return (Label)super.getControl(17);
			}
			public Button btnCancelEdit()
			{
				return (Button)super.getControl(18);
			}
			public Button btnOk()
			{
				return (Button)super.getControl(19);
			}
			public TextBox txtTLTNotes()
			{
				return (TextBox)super.getControl(20);
			}
			public TextBox txtFurtherManagement()
			{
				return (TextBox)super.getControl(21);
			}
			public cmbTLTTypeComboBox cmbTLTType()
			{
				return (cmbTLTTypeComboBox)super.getComboBox(0);
			}
			public cmbMedicallyIncompleteComboBox cmbMedicallyIncomplete()
			{
				return (cmbMedicallyIncompleteComboBox)super.getComboBox(1);
			}
			public cmbReasonNOComboBox cmbReasonNO()
			{
				return (cmbReasonNOComboBox)super.getComboBox(2);
			}
			public qmbProcedureComboBox qmbProcedure()
			{
				return (qmbProcedureComboBox)super.getComboBox(3);
			}
			public CheckBox chkFinal()
			{
				return (CheckBox)super.getControl(26);
			}
			public grdFurtherGrid grdFurther()
			{
				return (grdFurtherGrid)super.getGrid(0);
			}
			public IntBox intIncompNoDays()
			{
				return (IntBox)super.getControl(28);
			}
			public IntBox intNoOfDaysNO()
			{
				return (IntBox)super.getControl(29);
			}
			public IntBox intTlltSessions()
			{
				return (IntBox)super.getControl(30);
			}
			public Group2RadioButton Group2()
			{
				return (Group2RadioButton)super.getRadioButton(0);
			}
		}
		public static class tabActiveMonitoringContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbAMTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.ActiveMonitoringReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.ActiveMonitoringReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.ActiveMonitoringReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.ActiveMonitoringReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.ActiveMonitoringReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.ActiveMonitoringReason getValue()
				{
					return (ims.RefMan.vo.lookups.ActiveMonitoringReason)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.ActiveMonitoringReason value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 392, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccAMAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper35.getSize(), instance1, startTabIndex.intValue() + 1026, skipContextValidation);
				//ims.framework.Control m_ccAMAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(8), new Integer(8), new Integer(392), new Integer(56), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1026), m_ccAMAuthoringForm, instance1 } );
				ims.framework.Control m_ccAMAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1034),  new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 1026), m_ccAMAuthoringForm, instance1, Boolean.TRUE } );
				super.addControl(m_ccAMAuthoringControl);
				Menu[] menus1 = m_ccAMAuthoringForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 32, 336, 158, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Generate Discharge Report", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 16, 96, 124, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "of Active Monitoring:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 16, 208, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comments:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 16, 80, 92, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Start Date time", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 16, 183, 183, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Book the next Appointment By:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 16, 152, 156, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Period of Monitoring Days:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 16, 120, 154, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active Monitoring Reason:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 16, 224, 576, 104, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 2031), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 200, 184, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 2030), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// Date Time Controls
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 200, 80, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 2027), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 200, 120, 392, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbAMTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 2028), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbAMTypeTemp);
				cmbAMTypeComboBox cmbAMType = (cmbAMTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAMTypeComboBox.class, m_cmbAMTypeTemp);
				super.addComboBox(cmbAMType);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 16, 336, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 2032), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 200, 152, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 2029), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(9)}));
			}

			public ims.core.forms.authoringinfo.IComponent ccAMAuthoring()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccAMAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccAMAuthoringVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccAMAuthoringVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccAMAuthoringEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccAMAuthoringEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Label lblAMFinal()
			{
				return (Label)super.getControl(1);
			}
			public Label lbl10()
			{
				return (Label)super.getControl(3);
			}
			public Label lbl14()
			{
				return (Label)super.getControl(5);
			}
			public Label lbl15()
			{
				return (Label)super.getControl(6);
			}
			public TextBox txtAMComments()
			{
				return (TextBox)super.getControl(8);
			}
			public DateControl dteAMApptBy()
			{
				return (DateControl)super.getControl(9);
			}
			public DateTimeControl dtimAMStart()
			{
				return (DateTimeControl)super.getControl(10);
			}
			public cmbAMTypeComboBox cmbAMType()
			{
				return (cmbAMTypeComboBox)super.getComboBox(0);
			}
			public CheckBox chkAMGFinalReport()
			{
				return (CheckBox)super.getControl(12);
			}
			public IntBox intAMPeriod()
			{
				return (IntBox)super.getControl(13);
			}
		}
		public static class tabDischargePatientContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbOnwardRefReasonComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.OnwardReferralReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.OnwardReferralReason value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.OnwardReferralReason getValue()
				{
					return (ims.RefMan.vo.lookups.OnwardReferralReason)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.OnwardReferralReason value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbSecondaryOrganisationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.OrgLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.OrgLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.OrgLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.OrgLiteVo getValue()
				{
					return (ims.core.vo.OrgLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.OrgLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbOtherComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.DischargeOtherType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.DischargeOtherType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.DischargeOtherType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.DischargeOtherType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.DischargeOtherType value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.DischargeOtherType getValue()
				{
					return (ims.RefMan.vo.lookups.DischargeOtherType)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.DischargeOtherType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDischargeTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.DischargeType value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.DischargeType getValue()
				{
					return (ims.RefMan.vo.lookups.DischargeType)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.DischargeType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdDiagnosisRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDiagnosisRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDiagnosisReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDiagnosisReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDiagnosisOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDiagnosis(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDiagnosis()
				{
					return (String)super.row.get(0);
				}
				public void setColDiagnosis(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDiagnosisTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColSelect(String value)
				{
					super.row.setTooltip(1, value);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.PatientDiagnosisLiteVo getValue()
				{
					return (ims.core.vo.PatientDiagnosisLiteVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientDiagnosisLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDiagnosisRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDiagnosisRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDiagnosisRow get(int index)
				{
					return new grdDiagnosisRow(super.collection.get(index));
				}
				public grdDiagnosisRow newRow()
				{
					return new grdDiagnosisRow(super.collection.newRow());
				}
				public grdDiagnosisRow newRow(boolean autoSelect)
				{
					return new grdDiagnosisRow(super.collection.newRow(autoSelect));
				}
				public grdDiagnosisRow newRowAt(int index)
				{
					return new grdDiagnosisRow(super.collection.newRowAt(index));
				}
				public grdDiagnosisRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDiagnosisRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDiagnosisGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.core.vo.PatientDiagnosisLiteVoCollection getValues()
				{
					ims.core.vo.PatientDiagnosisLiteVoCollection listOfValues = new ims.core.vo.PatientDiagnosisLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientDiagnosisLiteVo getValue()
				{
					return (ims.core.vo.PatientDiagnosisLiteVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientDiagnosisLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdDiagnosisRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDiagnosisRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDiagnosisRowCollection getRows()
				{
					return new grdDiagnosisRowCollection(super.grid.getRows());
				}
				public grdDiagnosisRow getRowByValue(ims.core.vo.PatientDiagnosisLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDiagnosisRow(row);
				}
				public void setColDiagnosisHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDiagnosisHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public static class grdInvestigationRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdInvestigationRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColInvestigationReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColInvestigationReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColInvestigationOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColInvestigation(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColInvestigation()
				{
					return (String)super.row.get(0);
				}
				public void setColInvestigation(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColInvestigationTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColSelectReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColSelectReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColSelectOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColSelect(String value)
				{
					super.row.setTooltip(1, value);
				}
				public boolean getColSelect()
				{
					return ((Boolean)super.row.get(1)).booleanValue();
				}
				public void setColSelect(boolean value)
				{
					super.row.set(1, new Boolean(value));
				}
				public void setCellColSelectTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.ocrr.vo.OrderInvestigationListVo getValue()
				{
					return (ims.ocrr.vo.OrderInvestigationListVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.OrderInvestigationListVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdInvestigationRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdInvestigationRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdInvestigationRow get(int index)
				{
					return new grdInvestigationRow(super.collection.get(index));
				}
				public grdInvestigationRow newRow()
				{
					return new grdInvestigationRow(super.collection.newRow());
				}
				public grdInvestigationRow newRow(boolean autoSelect)
				{
					return new grdInvestigationRow(super.collection.newRow(autoSelect));
				}
				public grdInvestigationRow newRowAt(int index)
				{
					return new grdInvestigationRow(super.collection.newRowAt(index));
				}
				public grdInvestigationRow newRowAt(int index, boolean autoSelect)
				{
					return new grdInvestigationRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdInvestigationGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.ocrr.vo.OrderInvestigationListVoCollection getValues()
				{
					ims.ocrr.vo.OrderInvestigationListVoCollection listOfValues = new ims.ocrr.vo.OrderInvestigationListVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.OrderInvestigationListVo getValue()
				{
					return (ims.ocrr.vo.OrderInvestigationListVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.OrderInvestigationListVo value)
				{
					super.grid.setValue(value);
				}
				public grdInvestigationRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdInvestigationRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdInvestigationRowCollection getRows()
				{
					return new grdInvestigationRowCollection(super.grid.getRows());
				}
				public grdInvestigationRow getRowByValue(ims.ocrr.vo.OrderInvestigationListVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdInvestigationRow(row);
				}
				public void setColInvestigationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColInvestigationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColSelectHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColSelectHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 300, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_cc2Form = loader.loadComponent(102228, appForm, startControlID * 10 + 3000, anchoringHelper49.getSize(), instance1, startTabIndex.intValue() + 2037, skipContextValidation);
				//ims.framework.Control m_cc2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(0), new Integer(8), new Integer(300), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2037), m_cc2Form, instance1 } );
				ims.framework.Control m_cc2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1049),  new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2037), m_cc2Form, instance1, Boolean.TRUE } );
				super.addControl(m_cc2Control);
				Menu[] menus1 = m_cc2Form.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 344, 48, 163, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Include in Discharge Report", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 8, 240, 323, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Onward Referral Instructions to Discharge Coordinators", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 8, 176, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reason:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 8, 160, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Onward Referral", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 88, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Date:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 204, 81, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Organisation:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 160, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "If Other:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 130, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Type:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 264, 320, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 3049), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 112, 88, 128, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 3040), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 112, 158, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbOnwardRefReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 3045), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbOnwardRefReasonTemp);
				cmbOnwardRefReasonComboBox cmbOnwardRefReason = (cmbOnwardRefReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOnwardRefReasonComboBox.class, m_cmbOnwardRefReasonTemp);
				super.addComboBox(cmbOnwardRefReason);
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 112, 202, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbSecondaryOrganisationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 3048), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.ASCENDING, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbSecondaryOrganisationTemp);
				cmbSecondaryOrganisationComboBox cmbSecondaryOrganisation = (cmbSecondaryOrganisationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSecondaryOrganisationComboBox.class, m_cmbSecondaryOrganisationTemp);
				super.addComboBox(cmbSecondaryOrganisation);
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 112, 158, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbOtherTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 3047), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbOtherTemp);
				cmbOtherComboBox cmbOther = (cmbOtherComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOtherComboBox.class, m_cmbOtherTemp);
				super.addComboBox(cmbOther);
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 112, 128, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDischargeTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 3043), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbDischargeTypeTemp);
				cmbDischargeTypeComboBox cmbDischargeType = (cmbDischargeTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDischargeTypeComboBox.class, m_cmbDischargeTypeTemp);
				super.addComboBox(cmbDischargeType);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 224, 336, 144, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 3054), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Copy To Secondary Care", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 104, 336, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 3053), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Copy To Patient", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 8, 336, 80, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 3052), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Copy To GP", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 344, 200, 256, 120, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				Grid m_grdDiagnosisTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), new Integer(startTabIndex.intValue() + 3051), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.TRUE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDiagnosisTemp);
				grdDiagnosisGrid grdDiagnosis = (grdDiagnosisGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisGrid.class, m_grdDiagnosisTemp);
				grdDiagnosis.addStringColumn("Diagnosis", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdDiagnosis.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdDiagnosis);
				RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 344, 72, 256, 120, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				Grid m_grdInvestigationTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 3050), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.TRUE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdInvestigationTemp);
				grdInvestigationGrid grdInvestigation = (grdInvestigationGrid)GridFlyweightFactory.getInstance().createGridBridge(grdInvestigationGrid.class, m_grdInvestigationTemp);
				grdInvestigation.addStringColumn("Investigation", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdInvestigation.addBoolColumn("Select", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdInvestigation);
			}

			public ims.core.forms.authoringinfo.IComponent cc2()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcc2ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcc2Visible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscc2Visible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcc2Enabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscc2Enabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public Label lblOnwardReferralInstructions()
			{
				return (Label)super.getControl(2);
			}
			public Label lblOnrefReason2()
			{
				return (Label)super.getControl(3);
			}
			public Label lblOnrefReason1()
			{
				return (Label)super.getControl(4);
			}
			public Label lblSecond()
			{
				return (Label)super.getControl(6);
			}
			public Label lblOTHER()
			{
				return (Label)super.getControl(7);
			}
			public TextBox txtOnwardReferralInstructions()
			{
				return (TextBox)super.getControl(9);
			}
			public DateControl dteDischarge()
			{
				return (DateControl)super.getControl(10);
			}
			public cmbOnwardRefReasonComboBox cmbOnwardRefReason()
			{
				return (cmbOnwardRefReasonComboBox)super.getComboBox(0);
			}
			public cmbSecondaryOrganisationComboBox cmbSecondaryOrganisation()
			{
				return (cmbSecondaryOrganisationComboBox)super.getComboBox(1);
			}
			public cmbOtherComboBox cmbOther()
			{
				return (cmbOtherComboBox)super.getComboBox(2);
			}
			public cmbDischargeTypeComboBox cmbDischargeType()
			{
				return (cmbDischargeTypeComboBox)super.getComboBox(3);
			}
			public CheckBox chkCopyToSecondaryCare()
			{
				return (CheckBox)super.getControl(15);
			}
			public CheckBox chkCopyToPatient()
			{
				return (CheckBox)super.getControl(16);
			}
			public CheckBox chkCopyToGP()
			{
				return (CheckBox)super.getControl(17);
			}
			public grdDiagnosisGrid grdDiagnosis()
			{
				return (grdDiagnosisGrid)super.getGrid(0);
			}
			public grdInvestigationGrid grdInvestigation()
			{
				return (grdInvestigationGrid)super.getGrid(1);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 8, 120, 616, 384, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabFurtherManagement = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Further Management", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabFurtherManagementContainer m_tabFurtherManagementContainer = (tabFurtherManagementContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabFurtherManagementContainer.class, m_tabFurtherManagement, factory);
			super.addContainer(m_tabFurtherManagement, m_tabFurtherManagementContainer);
			ims.framework.utils.SizeInfo m_tabFurtherManagementDesignSize = new ims.framework.utils.SizeInfo(616, 384);
			ims.framework.utils.SizeInfo m_tabFurtherManagementRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper69.getWidth(), anchoringHelper69.getHeight());
			m_tabFurtherManagementContainer.setContext(form, appForm, m_tabFurtherManagement, loader, form_images_local, contextMenus, startControlID, m_tabFurtherManagementDesignSize, m_tabFurtherManagementRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 8, 120, 616, 384, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabActiveMonitoring = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Active Monitoring", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabActiveMonitoringContainer m_tabActiveMonitoringContainer = (tabActiveMonitoringContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabActiveMonitoringContainer.class, m_tabActiveMonitoring, factory);
			super.addContainer(m_tabActiveMonitoring, m_tabActiveMonitoringContainer);
			ims.framework.utils.SizeInfo m_tabActiveMonitoringDesignSize = new ims.framework.utils.SizeInfo(616, 384);
			ims.framework.utils.SizeInfo m_tabActiveMonitoringRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper70.getWidth(), anchoringHelper70.getHeight());
			m_tabActiveMonitoringContainer.setContext(form, appForm, m_tabActiveMonitoring, loader, form_images_local, contextMenus, startControlID, m_tabActiveMonitoringDesignSize, m_tabActiveMonitoringRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 8, 120, 616, 384, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
			Container m_tabDischargePatient = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Discharge Patient", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDischargePatientContainer m_tabDischargePatientContainer = (tabDischargePatientContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDischargePatientContainer.class, m_tabDischargePatient, factory);
			super.addContainer(m_tabDischargePatient, m_tabDischargePatientContainer);
			ims.framework.utils.SizeInfo m_tabDischargePatientDesignSize = new ims.framework.utils.SizeInfo(616, 384);
			ims.framework.utils.SizeInfo m_tabDischargePatientRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper71.getWidth(), anchoringHelper71.getHeight());
			m_tabDischargePatientContainer.setContext(form, appForm, m_tabDischargePatient, loader, form_images_local, contextMenus, startControlID, m_tabDischargePatientDesignSize, m_tabDischargePatientRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabFurtherManagement().setVisible(false);
			tabActiveMonitoring().setVisible(false);
			tabDischargePatient().setVisible(false);
		}
		public void settabFurtherManagementEnabled(boolean value)
		{
			tabFurtherManagement().setEnabled(value);
		}
		public void settabActiveMonitoringEnabled(boolean value)
		{
			tabActiveMonitoring().setEnabled(value);
		}
		public void settabDischargePatientEnabled(boolean value)
		{
			tabDischargePatient().setEnabled(value);
		}
		public void showtabFurtherManagement()
		{
			tabActiveMonitoring().setVisible(false);
			tabDischargePatient().setVisible(false);
			tabFurtherManagement().setVisible(true);
		}
		public void showtabActiveMonitoring()
		{
			tabFurtherManagement().setVisible(false);
			tabDischargePatient().setVisible(false);
			tabActiveMonitoring().setVisible(true);
		}
		public void showtabDischargePatient()
		{
			tabFurtherManagement().setVisible(false);
			tabActiveMonitoring().setVisible(false);
			tabDischargePatient().setVisible(true);
		}

		public tabFurtherManagementContainer tabFurtherManagement()
		{
			return (tabFurtherManagementContainer)super.layers.get(0);
		}
		public tabActiveMonitoringContainer tabActiveMonitoring()
		{
			return (tabActiveMonitoringContainer)super.layers.get(1);
		}
		public tabDischargePatientContainer tabDischargePatient()
		{
			return (tabDischargePatientContainer)super.layers.get(2);
		}
	}

	public static class GrpDischPatientRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 15, 32, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper72.getX(), anchoringHelper72.getY(), anchoringHelper72.getWidth(), "", startTabIndex.intValue() + 2);
			RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 15, 48, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper73.getX(), anchoringHelper73.getY(), anchoringHelper73.getWidth(), "", startTabIndex.intValue() + 4);
			RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 15, 16, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(2, anchoringHelper74.getX(), anchoringHelper74.getY(), anchoringHelper74.getWidth(), "", startTabIndex.intValue() + 1);
		}
		public void setText(GrpDischPatientEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GrpDischPatientEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GrpDischPatientEnumeration.None;
				case 0: return GrpDischPatientEnumeration.rdoDischPatActive;
				case 1: return GrpDischPatientEnumeration.rdoDischPatYES;
				case 2: return GrpDischPatientEnumeration.rdoDischPatNO;
			}
			return null;
		}
		public void setValue(GrpDischPatientEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GrpDischPatientEnumeration.None.id);
		}
		public boolean isEnabled(GrpDischPatientEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GrpDischPatientEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GrpDischPatientEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GrpDischPatientEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GrpDischPatientEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GrpDischPatientEnumeration None = new GrpDischPatientEnumeration(-1);
		public static GrpDischPatientEnumeration rdoDischPatActive = new GrpDischPatientEnumeration(0);
		public static GrpDischPatientEnumeration rdoDischPatYES = new GrpDischPatientEnumeration(1);
		public static GrpDischPatientEnumeration rdoDischPatNO = new GrpDischPatientEnumeration(2);
		private GrpDischPatientEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GrpDischPatientEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(632, 552);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Panel Controls
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 496, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(2), ""}));

		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 144, 76, 166, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Discharge Report Sent Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 39, 32, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active Monitoring", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 39, 16, 394, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Further Management (Another Appointment,  Awaiting Results, TLT)", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 39, 48, 230, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Patient (GP, Secondary Care)", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 512, 73, 112, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Edit Date", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 152, 512, 138, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), new Integer(startTabIndex.intValue() + 3068), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Remove Patient from Active Monitoring", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 272, 512, 120, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), new Integer(startTabIndex.intValue() + 3071), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "GP Discharge Outcome Reviewed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 400, 512, 104, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), new Integer(startTabIndex.intValue() + 3074), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Onward Referral Completed", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 64, 512, 80, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 3065), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Undo Discharge", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 152, 512, 104, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 3059), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Reviewed Further Management", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 512, 16, 112, 25, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Print Prescription", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 512, 43, 112, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Print Disch Report", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 576, 512, 48, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), new Integer(startTabIndex.intValue() + 3079), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 520, 512, 48, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), new Integer(startTabIndex.intValue() + 3077), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 8, 512, 48, 32, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 3062), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 320, 74, 184, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGrpDischPatient = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(0), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGrpDischPatient);
		GrpDischPatientRadioButton GrpDischPatient = (GrpDischPatientRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GrpDischPatientRadioButton.class, tmpGrpDischPatient);
		GrpDischPatient.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GrpDischPatient);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Label lblCATSReportSentDate()
	{
		return (Label)super.getControl(4);
	}
	public Button btnEditDate()
	{
		return (Button)super.getControl(8);
	}
	public Button btnUpdateAM()
	{
		return (Button)super.getControl(9);
	}
	public Button btnGPReviewed()
	{
		return (Button)super.getControl(10);
	}
	public Button btnOnwardReferralCompleted()
	{
		return (Button)super.getControl(11);
	}
	public Button btnUndoDischarge()
	{
		return (Button)super.getControl(12);
	}
	public Button btnReviewed()
	{
		return (Button)super.getControl(13);
	}
	public Button btnPrintPrescriptions()
	{
		return (Button)super.getControl(14);
	}
	public Button btnPrintFinal()
	{
		return (Button)super.getControl(15);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(16);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(17);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(18);
	}
	public DateTimeControl dtim1()
	{
		return (DateTimeControl)super.getControl(19);
	}
	public GrpDischPatientRadioButton GrpDischPatient()
	{
		return (GrpDischPatientRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
			Core = new CoreForms();
			RefMan = new RefManForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				SelectAndOrderDialog = new LocalFormName(116131);
			}
			public final FormName SelectAndOrderDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				SelectMedication = new LocalFormName(102265);
			}
			public final FormName SelectMedication;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				PrinterSelectionDialog = new LocalFormName(134145);
				PrintPrescriptionsDialog = new LocalFormName(134185);
				EditDate = new LocalFormName(134105);
			}
			public final FormName PrinterSelectionDialog;
			public final FormName PrintPrescriptionsDialog;
			public final FormName EditDate;
		}

		public OCRRForms OCRR;
		public CoreForms Core;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				CareContext = new ImageHelper(102252, "Images/Core/CareContext.gif", new Integer(16), new Integer(16));
				CareSpell = new ImageHelper(102253, "Images/Core/CareSpell.gif", new Integer(16), new Integer(16));
				Form = new ImageHelper(102258, "Images/Core/Control_Form.gif", new Integer(16), new Integer(16));
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image CareContext;
			public final ims.framework.utils.Image CareSpell;
			public final ims.framework.utils.Image Form;
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image Delete;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_currentOutcomeVo = new ims.framework.ContextVariable("currentOutcomeVo", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__currentOutcomeVo_" + componentIdentifier + "");
			cxl_CurrentService = new ims.framework.ContextVariable("CurrentService", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier + "");
			cxl_AllSuppliers = new ims.framework.ContextVariable("AllSuppliers", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__AllSuppliers_" + componentIdentifier + "");
			cxl_InvalidOnwardReferral = new ims.framework.ContextVariable("InvalidOnwardReferral", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier + "");
			cxl_bFMDEditable = new ims.framework.ContextVariable("bFMDEditable", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__bFMDEditable_" + componentIdentifier + "");
			cxl_UndoDischarge = new ims.framework.ContextVariable("UndoDischarge", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__UndoDischarge_" + componentIdentifier + "");
			cxl_UndoDischargeMessageBoxId = new ims.framework.ContextVariable("UndoDischargeMessageBoxId", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__UndoDischargeMessageBoxId_" + componentIdentifier + "");
			cxl_MessageBoxId = new ims.framework.ContextVariable("MessageBoxId", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__MessageBoxId_" + componentIdentifier + "");
			cxl_CurrentCatsReferral = new ims.framework.ContextVariable("CurrentCatsReferral", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier + "");
			cxl_DisplayReadOnly = new ims.framework.ContextVariable("DisplayReadOnly", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__DisplayReadOnly_" + componentIdentifier + "");
			cxl_DischargeMessageBoxID = new ims.framework.ContextVariable("DischargeMessageBoxID", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__DischargeMessageBoxID_" + componentIdentifier + "");
			cxl_GenerateCATSReportMessageBoxID = new ims.framework.ContextVariable("GenerateCATSReportMessageBoxID", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__GenerateCATSReportMessageBoxID_" + componentIdentifier + "");
			cxl_GenerateAMCATSReportMessageBoxID = new ims.framework.ContextVariable("GenerateAMCATSReportMessageBoxID", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__GenerateAMCATSReportMessageBoxID_" + componentIdentifier + "");
			cxl_EnableActiveMonitoring = new ims.framework.ContextVariable("EnableActiveMonitoring", prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__EnableActiveMonitoring_" + componentIdentifier + "");
		}
		
		public boolean getcurrentOutcomeVoIsNotNull()
		{
			return !cxl_currentOutcomeVo.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralOutcomeVo getcurrentOutcomeVo()
		{
			return (ims.RefMan.vo.ReferralOutcomeVo)cxl_currentOutcomeVo.getValue(context);
		}
		public void setcurrentOutcomeVo(ims.RefMan.vo.ReferralOutcomeVo value)
		{
			cxl_currentOutcomeVo.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_currentOutcomeVo = null;
		public boolean getCurrentServiceIsNotNull()
		{
			return !cxl_CurrentService.getValueIsNull(context);
		}
		public ims.core.vo.ServiceShortVo getCurrentService()
		{
			return (ims.core.vo.ServiceShortVo)cxl_CurrentService.getValue(context);
		}
		public void setCurrentService(ims.core.vo.ServiceShortVo value)
		{
			cxl_CurrentService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentService = null;
		public boolean getAllSuppliersIsNotNull()
		{
			return !cxl_AllSuppliers.getValueIsNull(context);
		}
		public ims.core.vo.OrgLiteVoCollection getAllSuppliers()
		{
			return (ims.core.vo.OrgLiteVoCollection)cxl_AllSuppliers.getValue(context);
		}
		public void setAllSuppliers(ims.core.vo.OrgLiteVoCollection value)
		{
			cxl_AllSuppliers.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AllSuppliers = null;
		public boolean getInvalidOnwardReferralIsNotNull()
		{
			return !cxl_InvalidOnwardReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.OnwardReferralVo getInvalidOnwardReferral()
		{
			return (ims.RefMan.vo.OnwardReferralVo)cxl_InvalidOnwardReferral.getValue(context);
		}
		public void setInvalidOnwardReferral(ims.RefMan.vo.OnwardReferralVo value)
		{
			cxl_InvalidOnwardReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InvalidOnwardReferral = null;
		public boolean getbFMDEditableIsNotNull()
		{
			return !cxl_bFMDEditable.getValueIsNull(context);
		}
		public Boolean getbFMDEditable()
		{
			return (Boolean)cxl_bFMDEditable.getValue(context);
		}
		public void setbFMDEditable(Boolean value)
		{
			cxl_bFMDEditable.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_bFMDEditable = null;
		public boolean getUndoDischargeIsNotNull()
		{
			return !cxl_UndoDischarge.getValueIsNull(context);
		}
		public Boolean getUndoDischarge()
		{
			return (Boolean)cxl_UndoDischarge.getValue(context);
		}
		public void setUndoDischarge(Boolean value)
		{
			cxl_UndoDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UndoDischarge = null;
		public boolean getUndoDischargeMessageBoxIdIsNotNull()
		{
			return !cxl_UndoDischargeMessageBoxId.getValueIsNull(context);
		}
		public Integer getUndoDischargeMessageBoxId()
		{
			return (Integer)cxl_UndoDischargeMessageBoxId.getValue(context);
		}
		public void setUndoDischargeMessageBoxId(Integer value)
		{
			cxl_UndoDischargeMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UndoDischargeMessageBoxId = null;
		public boolean getMessageBoxIdIsNotNull()
		{
			return !cxl_MessageBoxId.getValueIsNull(context);
		}
		public Integer getMessageBoxId()
		{
			return (Integer)cxl_MessageBoxId.getValue(context);
		}
		public void setMessageBoxId(Integer value)
		{
			cxl_MessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxId = null;
		public boolean getCurrentCatsReferralIsNotNull()
		{
			return !cxl_CurrentCatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralWizardVo getCurrentCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralWizardVo)cxl_CurrentCatsReferral.getValue(context);
		}
		public void setCurrentCatsReferral(ims.RefMan.vo.CatsReferralWizardVo value)
		{
			cxl_CurrentCatsReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentCatsReferral = null;
		public boolean getDisplayReadOnlyIsNotNull()
		{
			return !cxl_DisplayReadOnly.getValueIsNull(context);
		}
		public Boolean getDisplayReadOnly()
		{
			return (Boolean)cxl_DisplayReadOnly.getValue(context);
		}
		public void setDisplayReadOnly(Boolean value)
		{
			cxl_DisplayReadOnly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DisplayReadOnly = null;
		public boolean getDischargeMessageBoxIDIsNotNull()
		{
			return !cxl_DischargeMessageBoxID.getValueIsNull(context);
		}
		public Integer getDischargeMessageBoxID()
		{
			return (Integer)cxl_DischargeMessageBoxID.getValue(context);
		}
		public void setDischargeMessageBoxID(Integer value)
		{
			cxl_DischargeMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DischargeMessageBoxID = null;
		public boolean getGenerateCATSReportMessageBoxIDIsNotNull()
		{
			return !cxl_GenerateCATSReportMessageBoxID.getValueIsNull(context);
		}
		public Integer getGenerateCATSReportMessageBoxID()
		{
			return (Integer)cxl_GenerateCATSReportMessageBoxID.getValue(context);
		}
		public void setGenerateCATSReportMessageBoxID(Integer value)
		{
			cxl_GenerateCATSReportMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GenerateCATSReportMessageBoxID = null;
		public boolean getGenerateAMCATSReportMessageBoxIDIsNotNull()
		{
			return !cxl_GenerateAMCATSReportMessageBoxID.getValueIsNull(context);
		}
		public Integer getGenerateAMCATSReportMessageBoxID()
		{
			return (Integer)cxl_GenerateAMCATSReportMessageBoxID.getValue(context);
		}
		public void setGenerateAMCATSReportMessageBoxID(Integer value)
		{
			cxl_GenerateAMCATSReportMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_GenerateAMCATSReportMessageBoxID = null;
		public boolean getEnableActiveMonitoringIsNotNull()
		{
			return !cxl_EnableActiveMonitoring.getValueIsNull(context);
		}
		public Boolean getEnableActiveMonitoring()
		{
			return (Boolean)cxl_EnableActiveMonitoring.getValue(context);
		}
		public void setEnableActiveMonitoring(Boolean value)
		{
			cxl_EnableActiveMonitoring.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EnableActiveMonitoring = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[147];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-ID", "ID_Medication");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-MEDICATIONNAME", "MedicationName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-ISCONTROLLEDDRUG", "IsControlledDrug");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-FREQUENCYDEFAULT", "FrequencyDefault");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-NOOFDAYSSUPPLYDEFAULT", "NoOfDaysSupplyDefault");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedReferralOutcomeVo", "BO-1096100005-ID", "ID_ReferralOutcome");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedReferralOutcomeVo", "BO-1096100005-CATSREFERRAL", "CatsReferral");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedReferralOutcomeVo", "BO-1096100005-CATSFINALREPORTSTATUS", "CatsFinalReportStatus");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralReports", "BO-1004100035-ID", "ID_CatsReferral");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralReports", "BO-1004100035-ISFINALREPORTREQUIRED", "IsFinalReportRequired");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralReports", "BO-1004100035-CATSREPORTSENTDATE", "CATSReportSentDate");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__currentOutcomeVo_" + componentIdentifier, "BO-1096100005-ID", "ID_ReferralOutcome");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__currentOutcomeVo_" + componentIdentifier, "BO-1096100005-CATSREFERRAL", "CatsReferral");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__currentOutcomeVo_" + componentIdentifier, "BO-1096100005-CATSFINALREPORTSTATUS", "CatsFinalReportStatus");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICENAME", "ServiceName");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SPECIALTY", "Specialty");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICEDESCRIPTION", "ServiceDescription");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ISACTIVE", "IsActive");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ALTERNATESERVICECODE", "AlternateServiceCode");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier, "BO-1096100020-ID", "ID_OnwardReferral");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier, "BO-1096100020-DISCHARGEDATE", "DischargeDate");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier, "BO-1096100020-ONWARDREFERRAL", "OnwardReferral");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier, "BO-1096100020-REJECTEDDATE", "RejectedDate");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier, "BO-1096100020-REJECTIONREASON", "RejectionReason");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier, "BO-1096100020-REJECTEDBY", "RejectedBy");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier, "BO-1096100020-ONWARDREFERRALREASON", "OnwardReferralReason");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier, "BO-1096100020-COPYTOGP", "CopyToGP");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier, "BO-1096100020-COPYTOPATIENT", "CopyToPatient");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__InvalidOnwardReferral_" + componentIdentifier, "BO-1096100020-COPYTOSECONDARYCARE", "CopyToSecondaryCare");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-CARECONTEXT", "CareContext");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISCAB", "IsCAB");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-DISCHARGEDATE", "DischargeDate");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISFINALREPORTREQUIRED", "IsFinalReportRequired");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-TRIAGEDATETIME", "TriageDateTime");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISACCEPTEDONCAB", "IsAcceptedOnCAB");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISREFERRALREJECTEDONCAB", "IsReferralRejectedOnCAB");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-WASPATIENTREJECTIONLETTERSENT", "WasPatientRejectionLetterSent");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-WASPATIENTPROVIDERCANCELLATIONLETTERSENT", "WasPatientProviderCancellationLetterSent");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-REQUIRESDISCHARGEREP", "RequiresDischargeRep");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-HASDNAAPPTSFORREVIEW", "HasDNAApptsForReview");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-HASCANCELLEDAPPTSFORREVIEW", "HasCancelledApptsForReview");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISSECONDARYREPORTREQUIRED", "IsSecondaryReportRequired");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-WASFURTHERMANAGEMENTDETAILSREVIEWED", "WasFurtherManagementDetailsReviewed");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ONWARDREFERRALREASON", "OnwardReferralReason");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-DISCHARGETOGPDETAILSREVIEWSTATUS", "DischargeToGPDetailsReviewStatus");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISACTIVEMONITORAPPTREQUIRED", "IsActiveMonitorApptRequired");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-CATSREPORTSENTDATE", "CATSReportSentDate");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-PROCEDUREFORPOSTOPREVIEW", "ProcedureForPostOpReview");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-REFERRALCATEGORY", "ReferralCategory");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-ISONWARDREFERRALTRIAGE", "IsOnwardReferralTriage");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-URGENCY", "Urgency");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-PATHWAYID", "PathwayID");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-RTTCLOCKIMPACT", "RTTClockImpact");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ReferralOutcomeComponent.__internal_x_context__CurrentCatsReferral_" + componentIdentifier, "BO-1004100035-CONSUPGRADEDATE", "ConsUpgradeDate");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
