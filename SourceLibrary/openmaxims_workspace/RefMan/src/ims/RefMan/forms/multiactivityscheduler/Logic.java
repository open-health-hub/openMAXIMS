// This code was generated by Vasile Purdila using IMS Development Environment (version 1.66 build 3236.16532)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.multiactivityscheduler;

import ims.admin.vo.PrintAgentVo;
import ims.admin.vo.PrintAgentVoCollection;
import ims.admin.vo.ReportSeedParsedVo;
import ims.admin.vo.ReportSeedParsedVoCollection;
import ims.RefMan.forms.multiactivityscheduler.GenForm.grdJobsRow;
import ims.RefMan.helper.Trigger;
import ims.configuration.gen.ConfigFlag;
import ims.configuration.EnvironmentConfig;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.ntpf.vo.lookups.JobType;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.zip.Deflater;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.params.HttpMethodParams;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static String	daily	= "Daily";
	private static String	weekly	= "Weekly";
	private static String	monthly	= "Monthly";
	
	private static final int TIMEOUT = 1000 * 60 * 15;
	private static final int MAX_BUFFER_LIMIT_NO_WARNING = 1024*1024;

	@SuppressWarnings("unchecked")
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbFrequency().newRow(daily, daily);
		form.cmbFrequency().newRow(weekly, weekly);
		form.cmbFrequency().newRow(monthly, monthly);

		ArrayList v = form.cmbType().getValues();
		
		for (Object object : v)
		{
			if(!JobType.MONTHLY_ACTIVITY_REPORT.equals(object))
			{
				form.cmbType().removeRow((JobType) object);
			}
		}
		
		open();
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		
		form.chkActive().setValue(true);
		form.setMode(FormMode.EDIT);
	}
	@Override
	protected void onGrdJobsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		PrintAgentVo printAgentVo = form.grdJobs().getValue();
		
		form.getLocalContext().setJobSettings(printAgentVo);
		displayJobDetails(printAgentVo);

		form.getLocalContext().setLastId(printAgentVo.getID_PrintAgent());

		if (printAgentVo.getIsActive() == null || printAgentVo.getIsActive().booleanValue() == false)
			form.btnRun().setEnabled(false);
		else
			form.btnRun().setEnabled(true);	
		
		form.htmDownload().setHTML("");
		
		if(printAgentVo.getLastSuccessfulRunDateTimeIsNotNull())
		{
			if(ConfigFlag.GEN.BATCH_JOB_EXPORT_FOLDER.getValue() == null || ConfigFlag.GEN.BATCH_JOB_EXPORT_FOLDER.getValue().length() == 0)
			{
				return;
			}
			
			GregorianCalendar cal = new GregorianCalendar();
			cal.setTime(printAgentVo.getLastSuccessfulRunDateTime().getJavaDate());
			
			Integer year = new Integer(cal.get(Calendar.YEAR));
			Integer month = new Integer(cal.get(Calendar.MONTH) + 1);
			
			String fileName = "";
			SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
			String folderName = getOutputFolder();
			
			fileName = folderName + "MonthlyActivityReport_" + year + "_" + month + "_" + df.format(printAgentVo.getLastSuccessfulRunDateTime().getJavaDate()) + ".csv";
			
			File file = new File(fileName);
			
			if(file.exists() == false)
			{
				return;
			}

			String downloadFolderName = getDownloadFolder();
			
			if(downloadFolderName == null)
				return;
			
			String zipPart = "MonthlyActivityReport_" + year + "_" + month + "_" + df.format(printAgentVo.getLastSuccessfulRunDateTime().getJavaDate()) + ".zip";
			String filePart = "MonthlyActivityReport_" + year + "_" + month + "_" + df.format(printAgentVo.getLastSuccessfulRunDateTime().getJavaDate()) + ".csv";
			String zipFileName = downloadFolderName + zipPart;
			byte[] buf = new byte[1024];
			int len;
			
			File zipFile = new File(zipFileName);
			
			if(zipFile.exists() == false)
			{
				try
				{
					FileInputStream in = new FileInputStream(fileName); 
					ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFileName));
				    out.setLevel(Deflater.DEFAULT_COMPRESSION);
				    out.putNextEntry(new ZipEntry(filePart));
				    while ((len = in.read(buf)) > 0) 
				    { 
				    	out.write(buf, 0, len); 
				    } 
				    out.closeEntry();
				    out.close();
				    in.close();
				}
				catch (IllegalArgumentException iae)
				{
				      iae.printStackTrace();
				      engine.showMessage("Error creating zip file :" + iae.toString());
				}
				catch (FileNotFoundException fnfe)
				{
				      fnfe.printStackTrace();
				      engine.showMessage("Error creating zip file :" + fnfe.toString());
				}
				catch (IOException ioe)
				{
				      ioe.printStackTrace();
				      engine.showMessage("Error creating zip file :" + ioe.toString());
				}
			}
			
			form.htmDownload().setHTML("<b><a style=\"float: right\" href='" + engine.getRequestUrl() + "/download/" + zipPart + "'><font color='blue'>" + zipPart + "</font></a><span style=\"float: right\">Download file:  &nbsp;</span></b>");
			form.htmDownload().setEnabled(true);			
		}
	}
	@Override
	protected void onBtnRunClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(ConfigFlag.GEN.QUARTZ_SERVER_URL.getValue() == null || ConfigFlag.GEN.QUARTZ_SERVER_URL.getValue().length() == 0)
		{
			engine.showMessage("QUARTZ_SERVER_URL config flag was not set.");
			return;
		}
		
		if(JobType.MONTHLY_ACTIVITY_REPORT.equals(form.cmbType().getValue()) && Boolean.TRUE.equals(ConfigFlag.GEN.PROMPT_FOR_REPORT_PARAMS.getValue()))
		{
			form.getGlobalContext().Core.setImsReportId(new Integer(129));
			
			engine.open(form.getForms().Core.ReportParamsDialog);
			return;
		}		
		
		runJob();
	}
	private void runJob()
	{
		Integer jobId = form.grdJobs().getValue().getID_PrintAgent();

		HashMap<String, String> map = new HashMap<String, String>();
		
		map.put("action", "run");
		map.put("jobid", jobId.toString());
		map.put("seeds", getSeedsXml());
		
		boolean success = false;
		try
		{
			success = postData(jobId, map);
		}
		catch (MalformedURLException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (IOException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		PrintAgentVo job = domain.getPrintAgent(jobId);
		grdJobsRow row = form.grdJobs().getRowByValue(form.grdJobs().getValue());

		fillJobRow(job, row);

		if(success)
		{
			engine.showMessage("The Job has been submitted !");
		}
	}
	private String getSeedsXml()
	{
		StringBuilder sb = new StringBuilder();
		
		if(form.getGlobalContext().Admin.getReportSeedParsed() == null)
			return "";
		
		sb.append("<seeds>");
		ReportSeedParsedVoCollection voColl = form.getGlobalContext().Admin.getReportSeedParsed();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			ReportSeedParsedVo voSeed = voColl.get(i);
			
			sb.append("<seed>");
				sb.append("<n>");
					sb.append(ims.framework.utils.StringUtils.encodeXML(voSeed.getName()));
				sb.append("</n>");
				sb.append("<v>");
					sb.append(ims.framework.utils.StringUtils.encodeXML(voSeed.getValue()));
				sb.append("</v>");
				sb.append("<t>");
					sb.append(ims.framework.utils.StringUtils.encodeXML(voSeed.getType()));
				sb.append("</t>");
			sb.append("</seed>");
		}
		sb.append("</seeds>");
		
		return sb.toString();
	}
	@Override
	protected void onIntDaysValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onChkSunValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onChkSatValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onChkFriValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onChkThuValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onChkWedValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onChkTueValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onChkMonValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onTimMonthlyTimeValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onIntDayOfMonthValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
		
		if(ConfigFlag.GEN.QUARTZ_SERVER_URL.getValue() == null || ConfigFlag.GEN.QUARTZ_SERVER_URL.getValue().length() == 0)
		{
			engine.showMessage("QUARTZ_SERVER_URL config flag was not set.");
			return;
		}
		
		if(form.cmbFrequency().getValue() == null)
		{
			engine.showMessage("Please set the job frequency !");
			return;
		}
		
		if(form.cmbFrequency().getValue().equals(monthly) && (form.lyrSchedule().tabPageMonthly().intDayOfMonth().getValue() == null || form.lyrSchedule().tabPageMonthly().timMonthlyTime().getValue() == null))
		{
			engine.showMessage("Please set both day and time of month !");
			return;
		}
		
		//WDEV-11181 
		if(form.cmbFrequency().getValue().equals(daily) && form.lyrSchedule().tabPageDaily().intDays().getValue() == null){
			engine.showMessage("Please set avalue for day(s) !");
			return;
		}
		
		if(JobType.MONTHLY_ACTIVITY_REPORT.equals(form.cmbType().getValue()) && (ConfigFlag.GEN.BATCH_JOB_EXPORT_FOLDER.getValue() == null || ConfigFlag.GEN.BATCH_JOB_EXPORT_FOLDER.getValue().length() == 0))
		{
			engine.showMessage("BATCH_JOB_EXPORT_FOLDER config flag was not set.");
			return;
		}		
		
		saveRecord();
		
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}
	@Override
	protected void onDtimStartValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		recalcTrigger();
	}
	@Override
	protected void onCmbFrequencyValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbFrequency().getValue() == null)
		{
			form.lyrSchedule().showtabPageDaily();
			form.lyrSchedule().tabPageDaily().intDays().setValue(null);
			form.lyrSchedule().tabPageDaily().htmLegendDaily().setHTML("");
			form.dtimStart().setValue(null);
		}
		else
		{
			if (form.dtimStart().getValue() == null)
				form.dtimStart().setValue(new DateTime());
			
			if (form.cmbFrequency().getValue().equals(daily))
			{
				form.lyrSchedule().showtabPageDaily();
	
				if (form.lyrSchedule().tabPageDaily().intDays().getValue() == null)
					form.lyrSchedule().tabPageDaily().intDays().setValue(new Integer(1));
			}
			else if (form.cmbFrequency().getValue().equals(weekly))
			{
				form.lyrSchedule().showtabPageWeekly();
	
				if (form.lyrSchedule().tabPageWeekly().intWeeks().getValue() == null)
				{
					form.lyrSchedule().tabPageWeekly().intWeeks().setValue(new Integer(1));
	
					form.lyrSchedule().tabPageWeekly().chkMon().setValue(true);
					form.lyrSchedule().tabPageWeekly().chkTue().setValue(true);
					form.lyrSchedule().tabPageWeekly().chkWed().setValue(true);
					form.lyrSchedule().tabPageWeekly().chkThu().setValue(true);
					form.lyrSchedule().tabPageWeekly().chkFri().setValue(true);
					form.lyrSchedule().tabPageWeekly().chkSat().setValue(true);
					form.lyrSchedule().tabPageWeekly().chkSun().setValue(true);
				}
			}
			else if (form.cmbFrequency().getValue().equals(monthly))
			{
				form.lyrSchedule().tabPageMonthly().intDayOfMonth().setValue(1);
				form.lyrSchedule().tabPageMonthly().timMonthlyTime().setValue((new Time()));
				
				form.lyrSchedule().showtabPageMonthly();
			}
		}
		
		recalcTrigger();
	}
	
	private void clearScreen()
	{
		form.cmbFrequency().setValue(null);
		form.dtimStart().setValue(null);
		form.txtDescription().setValue(null);
		form.chkActive().setValue(false);
		form.cmbType().setValue(null);

		form.lyrSchedule().tabPageDaily().htmLegendDaily().setHTML("");
		form.lyrSchedule().tabPageDaily().intDays().setValue(null);

		form.lyrSchedule().tabPageWeekly().htmLegendWeekly().setHTML("");
		form.lyrSchedule().tabPageWeekly().intWeeks().setValue(null);
		form.lyrSchedule().tabPageWeekly().chkMon().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkTue().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkWed().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkThu().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkFri().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkSat().setValue(false);
		form.lyrSchedule().tabPageWeekly().chkSun().setValue(false);
		
		form.lyrSchedule().tabPageMonthly().htmLegendMonthly().setHTML("");
		form.lyrSchedule().tabPageMonthly().timMonthlyTime().setValue(null);
		form.lyrSchedule().tabPageMonthly().intDayOfMonth().setValue(null);
	}
	
	private void open()
	{
		clearScreen();
		form.setMode(FormMode.VIEW);

		//TODO - this line to be deleted once the download functionality is completed - WDEV-6687
		form.btnDownload().setVisible(false);
		
		PrintAgentVoCollection collPrintAgentVo = null;

		collPrintAgentVo = domain.listPrintAgents();

		displayJobs(collPrintAgentVo);

		if (collPrintAgentVo.size() > 0)
		{
			Integer id = form.getLocalContext().getLastId();

			if (id == null)
			{
				id = form.grdJobs().getRows().get(0).getValue().getID_PrintAgent();
			}

			for (int i = 0; i < form.grdJobs().getRows().size(); i++)
			{
				if (form.grdJobs().getRows().get(i).getValue().getID_PrintAgent().equals(id))
				{
					form.grdJobs().setValue(form.grdJobs().getRows().get(i).getValue());
					try
					{
						onGrdJobsSelectionChanged();
					}
					catch (PresentationLogicException e)
					{
						engine.showMessage("Error selecting the grid row: " + e.toString());
						return;
					}
				}
			}

			form.btnEdit().setVisible(true);
			form.btnRun().setVisible(true);
		}
		else
		{
			form.btnEdit().setVisible(false);
			form.btnRun().setVisible(false);
		}
	}

	private void displayJobs(PrintAgentVoCollection collPrintAgentVo)
	{
		form.grdJobs().getRows().clear();

		for (int i = 0; i < collPrintAgentVo.size(); i++)
		{
			PrintAgentVo job = collPrintAgentVo.get(i);

			grdJobsRow row = form.grdJobs().getRows().newRow();

			fillJobRow(job, row);
		}
	}

	private void fillJobRow(PrintAgentVo job, grdJobsRow row)
	{
		row.setValue(job);
		row.setColumnDescription(job.getDescription());
		if(job.getSysInfoIsNotNull())
			row.setColumnDate(job.getSysInfo().getCreationDateTime().toString());
		row.setColumnLastRun(job.getLastRunDateTimeIsNotNull() ? job.getLastRunDateTime().toString() : "");
		row.setColumnLastSuccessfulRun(job.getLastSuccessfulRunDateTimeIsNotNull() ? job.getLastSuccessfulRunDateTime().toString() : "");

		if (job.getIsActive() == null || job.getIsActive().booleanValue() == false)
			row.setTextColor(Color.DarkGray);

		if (job.getLastRunDateTimeIsNotNull() && job.getLastSuccessfulRunDateTimeIsNotNull() && !job.getLastRunDateTime().equals(job.getLastSuccessfulRunDateTime()))
			row.setTextColor(Color.Red);
		else if (job.getLastRunDateTimeIsNotNull() && !job.getLastSuccessfulRunDateTimeIsNotNull())
			row.setTextColor(Color.Red);
		else if (!job.getLastRunDateTimeIsNotNull() && job.getLastSuccessfulRunDateTimeIsNotNull())
			row.setTextColor(Color.Red);

		Trigger trigger = new Trigger(job.getTrigger(), engine);

		String html = trigger.getHtmlTranslation();
		row.setColumnTrigger(trigger.getTextTranslation());
		row.setTooltipForColumnTrigger(html);
		row.setTooltipForColumnClock(html);

		if (trigger.getFrequency().equals(daily))
		{
			row.setColumnClock(form.getImages().Admin.Calendar_Select_Day);
		}
		else if (trigger.getFrequency().equals(weekly))
		{
			row.setColumnClock(form.getImages().Admin.Calendar_Select_Week);
		}
		else if (trigger.getFrequency().equals(monthly))
		{
			row.setColumnClock(form.getImages().Admin.Calendar_Select_Month);
		}
	}
	
	private void displayJobDetails(PrintAgentVo printAgentVo)
	{
		form.txtDescription().setValue(printAgentVo.getDescription());
		form.chkActive().setValue(printAgentVo.getIsActiveIsNotNull() ? printAgentVo.getIsActive().booleanValue() : false);
		form.cmbType().setValue(printAgentVo.getJobType());

		Trigger trigger = new Trigger(printAgentVo.getTrigger(), engine);

		form.dtimStart().setValue(trigger.getStartDateTime());
		form.cmbFrequency().setValue(trigger.getFrequency());

		if (trigger.getFrequency().equals(daily))
		{
			form.lyrSchedule().showtabPageDaily();

			form.lyrSchedule().tabPageDaily().intDays().setValue(trigger.getDays());
			form.lyrSchedule().tabPageDaily().htmLegendDaily().setHTML(trigger.getHtmlTranslation());
		}
		else if (trigger.getFrequency().equals(weekly))
		{
			form.lyrSchedule().showtabPageWeekly();

			form.lyrSchedule().tabPageWeekly().intWeeks().setValue(trigger.getWeeks());
			form.lyrSchedule().tabPageWeekly().chkMon().setValue(trigger.isMon());
			form.lyrSchedule().tabPageWeekly().chkTue().setValue(trigger.isTue());
			form.lyrSchedule().tabPageWeekly().chkWed().setValue(trigger.isWed());
			form.lyrSchedule().tabPageWeekly().chkThu().setValue(trigger.isThu());
			form.lyrSchedule().tabPageWeekly().chkFri().setValue(trigger.isFri());
			form.lyrSchedule().tabPageWeekly().chkSat().setValue(trigger.isSat());
			form.lyrSchedule().tabPageWeekly().chkSun().setValue(trigger.isSun());
			form.lyrSchedule().tabPageWeekly().htmLegendWeekly().setHTML(trigger.getHtmlTranslation());
		}
		else if (trigger.getFrequency().equals(monthly))
		{
			form.lyrSchedule().showtabPageMonthly();
			
			form.lyrSchedule().tabPageMonthly().intDayOfMonth().setValue(trigger.getDayOfMonth());
			form.lyrSchedule().tabPageMonthly().timMonthlyTime().setValue(trigger.getTimeOfMonth());
			
			form.lyrSchedule().tabPageMonthly().htmLegendMonthly().setHTML(trigger.getHtmlTranslation());
		}
	}
	
	private void recalcTrigger()
	{
		if (form.cmbFrequency().getValue() == null)
			return;

		if (form.dtimStart().getValue() == null)
			return;

		StringBuffer sb = new StringBuffer(100);

		sb.append("&nbsp;At ");

		if (form.cmbFrequency().getValue().equals(daily))
		{
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getTime().toString());
			sb.append("</FONT>");
			sb.append(" every ");

			form.lyrSchedule().tabPageDaily().htmLegendDaily().setHTML("");

			if (form.lyrSchedule().tabPageDaily().intDays().getValue() == null)
				return;

			if (form.lyrSchedule().tabPageDaily().intDays().getValue().intValue() == 1)
				sb.append("day");
			else
			{
				sb.append("<FONT color=#0000FF>");
				sb.append(form.lyrSchedule().tabPageDaily().intDays().getValue().toString());
				sb.append("</FONT>");
				sb.append(" days");
			}

			sb.append(", starting ");
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getDate().toString());
			sb.append("</FONT>");

			form.lyrSchedule().tabPageDaily().htmLegendDaily().setHTML(sb.toString());
		}
		else if (form.cmbFrequency().getValue().equals(weekly))
		{
			String comma = "";
			form.lyrSchedule().tabPageWeekly().htmLegendWeekly().setHTML("");
			
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getTime().toString());
			sb.append("</FONT>");
			sb.append(" every ");

			if (form.lyrSchedule().tabPageWeekly().intWeeks().getValue() == null)
				return;

			if (form.lyrSchedule().tabPageWeekly().chkMon().getValue() == false && form.lyrSchedule().tabPageWeekly().chkTue().getValue() == false && form.lyrSchedule().tabPageWeekly().chkWed().getValue() == false && form.lyrSchedule().tabPageWeekly().chkThu().getValue() == false && form.lyrSchedule().tabPageWeekly().chkFri().getValue() == false && form.lyrSchedule().tabPageWeekly().chkSat().getValue() == false && form.lyrSchedule().tabPageWeekly().chkSun().getValue() == false)
				return;

			if (form.lyrSchedule().tabPageWeekly().chkMon().getValue() == true)
			{
				sb.append("<FONT color=#0000FF>");
				sb.append("Mon");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkTue().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Tue");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkWed().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Wed");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkThu().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Thu");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkFri().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Fri");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkSat().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Sat");
				sb.append("</FONT>");
				comma = ",";
			}
			if (form.lyrSchedule().tabPageWeekly().chkSun().getValue() == true)
			{
				sb.append(comma);
				sb.append("<FONT color=#0000FF>");
				sb.append("Sun");
				sb.append("</FONT>");
				comma = ",";
			}

			if (form.lyrSchedule().tabPageWeekly().intWeeks().getValue().intValue() == 1)
				sb.append(" of every week");
			else
			{
				sb.append(" of every ");
				sb.append("<FONT color=#0000FF>");
				sb.append(form.lyrSchedule().tabPageWeekly().intWeeks().getValue().toString());
				sb.append("</FONT>");
				sb.append(" weeks");
			}

			sb.append(", starting ");
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getDate().toString());
			sb.append("</FONT>");

			form.lyrSchedule().tabPageWeekly().htmLegendWeekly().setHTML(sb.toString());
		}
		else if (form.cmbFrequency().getValue().equals(monthly))
		{
			form.lyrSchedule().tabPageMonthly().htmLegendMonthly().setHTML("");
			
			if (form.lyrSchedule().tabPageMonthly().timMonthlyTime().getValue() == null)
				return;
			if (form.lyrSchedule().tabPageMonthly().intDayOfMonth().getValue() == null)
				return;

			sb.append("<FONT color=#0000FF>");
			sb.append(form.lyrSchedule().tabPageMonthly().timMonthlyTime().getValue().toString());
			sb.append("</FONT>");
			
			sb.append(" on the ");
			sb.append("<FONT color=#0000FF>");
			int dayOfMonth = form.lyrSchedule().tabPageMonthly().intDayOfMonth().getValue();
			sb.append(dayOfMonth);
			
			if(dayOfMonth == 1 || dayOfMonth == 21 || dayOfMonth == 31)
				sb.append("st ");
			else if(dayOfMonth == 2 || dayOfMonth == 22)
				sb.append("nd ");
			else if(dayOfMonth == 3 || dayOfMonth == 23)
				sb.append("rd ");
			else 
				sb.append("th ");
			
			sb.append("</FONT>");
			sb.append("day every month");
			
			sb.append(", starting ");
			sb.append("<FONT color=#0000FF>");
			sb.append(form.dtimStart().getValue().getDate().toString());
			sb.append("</FONT>");

			form.lyrSchedule().tabPageMonthly().htmLegendMonthly().setHTML(sb.toString());
			
		}		
	}
	
	private boolean postData(Integer jobId, HashMap<String, String> content) throws IOException
	{
		/*
		URL url;
		URLConnection urlConn;
		DataOutputStream printout;
		*/
		String qsUrl = ConfigFlag.GEN.QUARTZ_SERVER_URL.getValue();

		if (qsUrl.endsWith("/"))
			qsUrl += "QuartzInitializer";
		else
			qsUrl += "/QuartzInitializer";
		
		///
		HttpClient client = new HttpClient(new MultiThreadedHttpConnectionManager());
        client.getHttpConnectionManager().getParams().setConnectionTimeout(TIMEOUT);		
        client.getParams().setBooleanParameter(HttpMethodParams.USE_EXPECT_CONTINUE, true);
        client.getParams().setIntParameter(HttpMethodParams.BUFFER_WARN_TRIGGER_LIMIT, MAX_BUFFER_LIMIT_NO_WARNING);

        PostMethod post = new PostMethod(qsUrl);
		
        NameValuePair[] data = new NameValuePair[content.keySet().size()];
        java.util.Iterator<String> it = content.keySet().iterator();

        int i = 0;
        while(it.hasNext())
        {
        	String key = it.next();
			data[i] = new NameValuePair(key, content.get(key));
			i++;
        }
        
        post.setRequestBody(data);
		
        int iGetResultCode;
		try
		{
			iGetResultCode = client.executeMethod(post);
			
			if(iGetResultCode != HttpStatus.SC_OK)
	        {
				StringBuffer sb = new StringBuffer(500);
				
				sb.append("buildReport() function returned the error code ");
				sb.append(iGetResultCode);
				sb.append(".\r\n");
				sb.append(new String(getResponseAsByteArray(post)));
				
				engine.showMessage("Failed to update or run the job: " + sb.toString());
				return false;
			}
		} 
		catch (HttpException e)
		{
			engine.showMessage("Failed to update or run the job: " + e.toString());
			return false;
		} 
		catch (IOException e)
		{
			engine.showMessage("Failed to update or run the job: " + e.toString());
			return false;
		}
		finally
		{
			post.releaseConnection();
		}
		
		return true;
		
		///
		/*
		// URL of servlet.
		url = new URL(qsUrl);
		// URL connection channel.
		urlConn = url.openConnection();
		// Let the run-time system (RTS) know that we want input.
		urlConn.setDoInput(true);
		// Let the RTS know that we want to do output.
		urlConn.setDoOutput(true);
		// No caching, we want the real thing.
		urlConn.setUseCaches(false);
		// Specify the content type.
		urlConn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
		// Send POST output.
		printout = new DataOutputStream(urlConn.getOutputStream());
		// String content = "";
		printout.writeBytes(content);
		printout.flush();
		printout.close();

		String err = urlConn.getHeaderField(null);
		// the OK response should be HTTP/1.1 200 OK
		if (err.indexOf("HTTP/1.1 200 OK") == -1)
		{
			engine.showMessage("Failed to update or run the job: " + err);
			return false;
		}
		return true;
		*/
	}
	
	private void saveRecord()
	{
		PrintAgentVo job = populateDataFromScreen();

		String[] err = job.validate();

		if (err != null)
		{
			engine.showErrors(err);
			return;
		}

		if (form.cmbFrequency().getValue().equals(weekly) && form.lyrSchedule().tabPageWeekly().chkMon().getValue() == false && form.lyrSchedule().tabPageWeekly().chkTue().getValue() == false && form.lyrSchedule().tabPageWeekly().chkWed().getValue() == false && form.lyrSchedule().tabPageWeekly().chkThu().getValue() == false && form.lyrSchedule().tabPageWeekly().chkFri().getValue() == false && form.lyrSchedule().tabPageWeekly().chkSat().getValue() == false && form.lyrSchedule().tabPageWeekly().chkSun().getValue() == false)
		{
			engine.showMessage("Please select at least a day of the week !");
			return;
		}
		try
		{
			PrintAgentVo result = domain.savePrintAgent(job);
	
			form.getLocalContext().setLastId(result.getID_PrintAgent());
	
			updateJob(result.getID_PrintAgent());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			job = domain.getPrintAgent(job.getID_PrintAgent());
			grdJobsRow row = form.grdJobs().getRowByValue(form.grdJobs().getValue());

			fillJobRow(job, row);
			displayJobDetails(job);
			form.getLocalContext().setJobSettings(job);

			return;
		}
		catch (DomainRuntimeException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (IOException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}

		open();
	}

	private void updateJob(Integer jobId) throws IOException
	{
		HashMap<String, String> map = new HashMap<String, String>();
		
		map.put("action", "update");
		map.put("jobid", jobId.toString());
		
		postData(jobId, map);
	}

	private PrintAgentVo populateDataFromScreen()
	{
		PrintAgentVo agent = form.getLocalContext().getJobSettings();

		if (agent == null)
			agent = new PrintAgentVo();

		agent.setDescription(form.txtDescription().getValue());
		agent.setTrigger(getTriggerFromScreen());
		agent.setQueryServerUrl(ConfigFlag.GEN.QUERY_SERVER_URL.getValue());
		agent.setReportServerUrl(ConfigFlag.GEN.REPORT_SERVER_URL.getValue());
		agent.setIsActive(new Boolean(form.chkActive().getValue()));
		agent.setJobType(form.cmbType().getValue());
		
		return agent;
	}

	private String getTriggerFromScreen()
	{
		Trigger trigger = new Trigger(engine);

		trigger.setFrequency(form.cmbFrequency().getValue());
		trigger.setStartDateTime(form.dtimStart().getValue());
		trigger.setDays(form.lyrSchedule().tabPageDaily().intDays().getValue());
		trigger.setWeeks(form.lyrSchedule().tabPageWeekly().intWeeks().getValue());
		trigger.setMon(form.lyrSchedule().tabPageWeekly().chkMon().getValue());
		trigger.setTue(form.lyrSchedule().tabPageWeekly().chkTue().getValue());
		trigger.setWed(form.lyrSchedule().tabPageWeekly().chkWed().getValue());
		trigger.setThu(form.lyrSchedule().tabPageWeekly().chkThu().getValue());
		trigger.setFri(form.lyrSchedule().tabPageWeekly().chkFri().getValue());
		trigger.setSat(form.lyrSchedule().tabPageWeekly().chkSat().getValue());
		trigger.setSun(form.lyrSchedule().tabPageWeekly().chkSun().getValue());

		trigger.setDayOfMonth(form.lyrSchedule().tabPageMonthly().intDayOfMonth().getValue());
		trigger.setTimeOfMonth(form.lyrSchedule().tabPageMonthly().timMonthlyTime().getValue());
		
		return trigger.toXML();
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.ReportParamsDialog) && result.equals(DialogResult.OK))
		{
			runJob();
		}
	}
	
	private byte[] getResponseAsByteArray(PostMethod post) throws IOException
	{
		InputStream instream = post.getResponseBodyAsStream();
		
		if (instream != null) 
		{
			long contentLength = post.getResponseContentLength();
			
			// guard below cast from overflow
			if (contentLength > Integer.MAX_VALUE) 
			{ 
				throw new IOException("Content too large to be buffered: "+ contentLength +" bytes");
			}
			
			ByteArrayOutputStream outstream = new ByteArrayOutputStream(contentLength > 0 ? (int) contentLength : 4*1024);
			byte[] buffer = new byte[4096];
			int len;
			while ((len = instream.read(buffer)) > 0) 
			{
			    outstream.write(buffer, 0, len);
			}
			outstream.close();

			return outstream.toByteArray();
        }	
		else
			return null;
	}
	@Override
	protected void onBtnDownloadClick() throws PresentationLogicException
	{
		PrintAgentVo job = form.getLocalContext().getJobSettings();
		
		if(job == null)
		{
			engine.showMessage("Please select a job first !");
			return;
		}
		
		if(job.getLastSuccessfulRunDateTime() == null)
		{
			engine.showMessage("The job has never run succesfully !");
			return;
		}
		
		if(ConfigFlag.GEN.BATCH_JOB_EXPORT_FOLDER.getValue() == null || ConfigFlag.GEN.BATCH_JOB_EXPORT_FOLDER.getValue().length() == 0)
		{
			engine.showMessage("The config flag BATCH_JOB_EXPORT_FOLDER was not set !");
			return;
		}
		
		GregorianCalendar cal = new GregorianCalendar();
		cal.setTime(job.getLastSuccessfulRunDateTime().getJavaDate());
		
		Integer year = new Integer(cal.get(Calendar.YEAR));
		Integer month = new Integer(cal.get(Calendar.MONTH) + 1);
		
		String fileName = "";
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
		String folderName = getOutputFolder();
		
		fileName = folderName + "MonthlyActivityReport_" + year + "_" + month + "_" + df.format(job.getLastSuccessfulRunDateTime().getJavaDate()) + ".csv";
		
		File file = new File(fileName);
		
		if(file.exists() == false)
		{
			engine.showMessage("The file '" + fileName + "' does not exist !");
			return;
		}
		
		System.out.println("Downloading " + fileName + "...");
		
		//engine.
	}
	private String getOutputFolder()
	{
		String folderName = ConfigFlag.GEN.BATCH_JOB_EXPORT_FOLDER.getValue();
		
		if(!(folderName.endsWith("\\") || folderName.endsWith("/")))
		{
			folderName += System.getProperty("file.separator");
		}
		
		return folderName;
	}

	private String getDownloadFolder()  
	{
		if ( EnvironmentConfig.getBaseUri() == null || EnvironmentConfig.getBaseUri().length() == 0)
		{
			return null;				
		}
		
		String folderName = EnvironmentConfig.getBaseUri() + "download/";				
		File folder = new File(folderName);
		
		if(folder.exists() == false)
		{
			boolean bSuccess = folder.mkdir();
			
			if(bSuccess == false)
			{
				System.out.println("I could not create the folder '" + folder.getAbsolutePath() + "' !");
				return null;
			}
		}
		
		return folderName;
	}
	
}
