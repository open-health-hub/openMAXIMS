// This code was generated by Peter Martin using IMS Development Environment (version 1.70 build 3547.20232)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.diagnosisandmanagementcomponent;

import ims.RefMan.forms.diagnosisandmanagementcomponent.GenForm.grdDiagnosisRow;
import ims.RefMan.forms.diagnosisandmanagementcomponent.GenForm.grdProceduresRow;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.DiagnosisManagementLiteVo;
import ims.RefMan.vo.DiagnosisManagementVo;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.CSPrimaryDiagnosisShortVoCollection;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientDiagnosisAtConsultationVo;
import ims.core.vo.PatientDiagnosisAtConsultationVoCollection;
import ims.core.vo.PatientProcedureShortVoCollection;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.lookups.YesNo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	public void initialize(Boolean displayReadOnly, DiagnosisManagementLiteVo value) 
	{
		form.getLocalContext().setDisplayReadOnly(displayReadOnly);
		form.ccLastUpdating().setLabels(AuthoringLabelType.LAST);
		
		initializeScreen();		
		clearScreen();
		DiagnosisManagementVo diagnosis = null;
		if (value != null && value.getCatsReferralIsNotNull()) {	
			diagnosis = domain.getDiagnosis(value);			
			populateScreenFromData(diagnosis);				
			form.ccLastUpdating().setValue(value.getLastAuthoringHCP());
			return;
		}
		
		open();
	}
	public void initializeScreen()
	{

		if(form.getGlobalContext().Core.getPatientShortIsNotNull()){
			form.getLocalContext().setPatientDiagnosisShortVoCollection(domain.listDiagnosis(form.getGlobalContext().Core.getPatientShort()));
			form.getLocalContext().setPatientProcedureShortVoCollection(domain.listProcedures(form.getGlobalContext().Core.getPatientShort(), null));
		}
		form.getLocalContext().setDiagnosisManagementVo(null);		
		form.setMode(FormMode.VIEW);
	}
	private void updateControlState()
	{
		boolean isViewMode = form.getMode().equals(FormMode.VIEW);
		boolean isReadOnlyMode = form.getLocalContext().getDisplayReadOnlyIsNotNull() ? form.getLocalContext().getDisplayReadOnly() : false;
		if (isViewMode) {
			form.btnEdit().setVisible(isViewMode && !isReadOnlyMode);
		}
		if (isReadOnlyMode) {
			form.getContextMenus().RefMan.disableAllAtConsultationDiagnosisGridMenuItems();// wdev-12531
		}
	}
	private void open() 
	{
		form.getGlobalContext().Core.setPatientDiagnosisAtConsultation(null);

		
		CatsReferralRefVo currentCatsReferral = form.getGlobalContext().RefMan.getCatsReferral();
		DiagnosisManagementVo voDiagnosisManagement = domain.getDiagnosisManagementVo(currentCatsReferral);
		form.getLocalContext().setDiagnosisManagementVo(voDiagnosisManagement);
		clearScreen();
		if(voDiagnosisManagement != null)
			populateScreenFromData(voDiagnosisManagement);
		
		form.setMode(FormMode.VIEW);
	}
	
	protected void clearScreen()
	{
		form.richTextSummaryOfInvestigationsAndResults().setValue(null);
		form.richTextAdviceAndInformationGiven().setValue(null);
		form.richTextActionRequiredByGP().setValue(null);
		
		form.grdDiagnosis().getRows().clear();
		form.grdProcedures().getRows().clear();
		form.dteFirstDefinitiveSystem().setVisible(false);
		//wdev-11020
		form.GroupAction().setValue(null);
		form.GroupConsent().setValue(null);
		form.chkFirstDefinitiveSystem().setValue(null);
		form.ccLastUpdating().setValue(null);
		//---------
	}
	protected void populateScreenFromData(DiagnosisManagementVo voDiagnosisManagement)
	{
		clearScreen();
		if(voDiagnosisManagement == null)
			return;

		form.richTextAdviceAndInformationGiven().setValue(voDiagnosisManagement.getAdviceAndInfoGivenIsNotNull() ? voDiagnosisManagement.getAdviceAndInfoGiven(): null);
		form.richTextActionRequiredByGP().setValue(voDiagnosisManagement.getActionRequiredByGPNotesIsNotNull() ? voDiagnosisManagement.getActionRequiredByGPNotes(): null);
		form.richTextSummaryOfInvestigationsAndResults().setValue(voDiagnosisManagement.getInvestigationsAndResultsIsNotNull() ? voDiagnosisManagement.getInvestigationsAndResults(): null);
		
		form.dteFirstDefinitiveSystem().setValue(voDiagnosisManagement.getFirstDefinitiveTreatmentDateIsNotNull() ? voDiagnosisManagement.getFirstDefinitiveTreatmentDate() : null);
		form.chkFirstDefinitiveSystem().setValue(voDiagnosisManagement.getFirstDefinitiveTreatmentDateIsNotNull() ? true : false);
		form.ccLastUpdating().setValue(voDiagnosisManagement.getLastAuthoringHCP());
		
		try {
			onChkFirstDefinitiveSystemValueChanged();
		}
		catch (PresentationLogicException e) 
		{		
			e.printStackTrace();
		}
		
		form.grdProcedures().getRows().clear();
		if(voDiagnosisManagement.getProceduresIsNotNull())
		{
			for (int i = 0; i < voDiagnosisManagement.getProcedures().size(); i++)
			{
				grdProceduresRow row =form.grdProcedures().getRows().newRow();
				
				if(voDiagnosisManagement.getProcedures().get(i).getProcedureDescriptionIsNotNull())
					row.setColProcedures(voDiagnosisManagement.getProcedures().get(i).getProcedureDescription());											
				if(voDiagnosisManagement.getProcedures().get(i).getAuthoringInformationIsNotNull() && voDiagnosisManagement.getProcedures().get(i).getAuthoringInformation().getAuthoringHcpIsNotNull())
					row.setColAuthoringHCP(voDiagnosisManagement.getProcedures().get(i).getAuthoringInformation().getAuthoringHcp().toString());
				if(voDiagnosisManagement.getProcedures().get(i).getProcDateIsNotNull())
					row.setColDate(voDiagnosisManagement.getProcedures().get(i).getProcDate().toString());
				
				row.setValue(voDiagnosisManagement.getProcedures().get(i));
			}
		}
				
		form.grdDiagnosis().getRows().clear();
		if(voDiagnosisManagement.getDiagnosisIsNotNull())
		{
			for (int i = 0; i < voDiagnosisManagement.getDiagnosis().size(); i++)
			{
				grdDiagnosisRow row = null;
				//wdev-10895
				if(voDiagnosisManagement.getDiagnosis().get(i).getIsRIE() != null && voDiagnosisManagement.getDiagnosis().get(i).getIsRIE().equals(Boolean.TRUE))
					continue;
				//------------
				if(isPrimaryDiagnosisActive(voDiagnosisManagement.getDiagnosis().get(i)))
					row =form.grdDiagnosis().getRows().newRowAt(0);
				else
					row =form.grdDiagnosis().getRows().newRow();
				
				if(voDiagnosisManagement.getDiagnosis().get(i).getDiagnosisDescriptionIsNotNull())
					row.setColDiagnosis(voDiagnosisManagement.getDiagnosis().get(i).getDiagnosisDescription());											
				if(voDiagnosisManagement.getDiagnosis().get(i).getAuthoringInfoIsNotNull() && voDiagnosisManagement.getDiagnosis().get(i).getAuthoringInfo().getAuthoringHcpIsNotNull())
					row.setColAuthoringHCP(voDiagnosisManagement.getDiagnosis().get(i).getAuthoringInfo().getAuthoringHcp().toString());
				
				row.setColMain(isPrimaryDiagnosisActive(voDiagnosisManagement.getDiagnosis().get(i)) ? getPrimaryImage() : null);
				
				if(voDiagnosisManagement.getDiagnosis().get(i).getCurrentStatusIsNotNull() && voDiagnosisManagement.getDiagnosis().get(i).getCurrentStatus().getStatusIsNotNull())
					row.setColStatus(voDiagnosisManagement.getDiagnosis().get(i).getCurrentStatus().getStatus().getText());
				
				row.setValue(voDiagnosisManagement.getDiagnosis().get(i));
			}
			form.grdDiagnosis().sort(2);
		}
		
		if(voDiagnosisManagement.getActionRequiredByGPIsNotNull())
			if(voDiagnosisManagement.getActionRequiredByGP().equals(YesNo.YES))
				form.GroupAction().setValue(GenForm.GroupActionEnumeration.rdoActionYes);
			else
				form.GroupAction().setValue(GenForm.GroupActionEnumeration.rdoActionNo);
		
		if(voDiagnosisManagement.getPatientConsentIsNotNull())
			if(voDiagnosisManagement.getPatientConsent().equals(YesNo.YES))
				form.GroupConsent().setValue(GenForm.GroupConsentEnumeration.rdoConsentYes);
			else
				form.GroupConsent().setValue(GenForm.GroupConsentEnumeration.rdoConsentNo);			
	}
	
	private boolean isPrimaryDiagnosisActive(PatientDiagnosisAtConsultationVo voPatDiag)
	{
		if (voPatDiag == null || voPatDiag.getPrimaryForCareSpells() == null)
			return false;

		return isPrimaryDiagnosisActive(voPatDiag, voPatDiag.getPrimaryForCareSpells());
	}
	private boolean isPrimaryDiagnosisActive(PatientDiagnosisRefVo voPatDiagRef, CSPrimaryDiagnosisShortVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			boolean isActive = voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive().booleanValue();
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagRef);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());

			if (isActive && sameDiagnosis && sameCareContext)
				return true;
		}
		return false;
	}

	@Override
	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().RefMan.hideAllAtConsultationDiagnosisGridMenuItems();//wdev-12531 

			form.getContextMenus().RefMan.hideAllAtConsultationProceduresGridMenuItems();//wdev-12531
			
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.VIEW);
		}
		else if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().RefMan.hideAllAtConsultationDiagnosisGridMenuItems();//wdev-12531
			
			form.getContextMenus().RefMan.hideAllAtConsultationProceduresGridMenuItems();//wdev-12531

			form.getContextMenus().RefMan.getAtConsultationDiagnosisGridNEWItem().setVisible(true);//wdev-12531
			form.getContextMenus().RefMan.getAtConsultationProceduresGridNEWItem().setVisible(true);//wdev-12531
			//form.getContextMenus().RefMan.getAtConsultationProceduresGridNEWItem()//wdev-12531.getLIPNewItem().setText("Add");
			
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.EDIT);
		}
		form.dteFirstDefinitiveSystem().setEnabled(form.getMode().equals(FormMode.VIEW) ? false : true);
		updateControlState();
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		form.ccLastUpdating().initializeComponent();
		onRadioButtonGroupActionValueChanged();
		//--------------------------------
		form.grdDiagnosis().setValue(null);
		form.grdProcedures().setValue(null);
		//--------------------------------
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);		
		open(); 
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open(); 
	}
	private boolean save() {
		DiagnosisManagementVo voDiagnosisManagement = form.getLocalContext().getDiagnosisManagementVo();
		if(voDiagnosisManagement==null)
			voDiagnosisManagement = new DiagnosisManagementVo();
				
		voDiagnosisManagement = populateData(voDiagnosisManagement);
				
		if (voDiagnosisManagement == null)
			return false;
		
		String [] errors = voDiagnosisManagement.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try 
		{
			form.getLocalContext().setDiagnosisManagementVo(domain.saveDiagnosisManagementVo(voDiagnosisManagement));
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		
		return true;
	}
	private DiagnosisManagementVo populateData(DiagnosisManagementVo voDiagnosisManagement) 
	{
		if(voDiagnosisManagement == null)
			voDiagnosisManagement = new ims.RefMan.vo.DiagnosisManagementVo();

		if (form.chkFirstDefinitiveSystem().getValue() &&
				form.dteFirstDefinitiveSystem().getValue() == null) 
		{
			engine.showMessage("If First Definitive Treatment is checked DateTime is mandatory");
			return null;
		}
		
		voDiagnosisManagement.setID_DiagnosisManagement(null);
		voDiagnosisManagement.setAdviceAndInfoGiven(form.richTextAdviceAndInformationGiven().getValue());
		voDiagnosisManagement.setActionRequiredByGPNotes(form.richTextActionRequiredByGP().getValue());
		voDiagnosisManagement.setInvestigationsAndResults(form.richTextSummaryOfInvestigationsAndResults().getValue());
		
		if (form.chkFirstDefinitiveSystem().getValue() &&
				form.dteFirstDefinitiveSystem().getValue() != null) 
		{
			voDiagnosisManagement.setFirstDefinitiveTreatmentDate(form.dteFirstDefinitiveSystem().getValue());
		}
		else {
			voDiagnosisManagement.setFirstDefinitiveTreatmentDate(null);
		}
		
		PatientDiagnosisAtConsultationVoCollection  coll = new PatientDiagnosisAtConsultationVoCollection();
		for(int x = 0; x < this.form.grdDiagnosis().getRows().size(); x++)
		{
			coll.add(form.grdDiagnosis().getRows().get(x).getValue());
		}
		if(coll.size()>0)
			voDiagnosisManagement.setDiagnosis(coll);
		else
			voDiagnosisManagement.setDiagnosis(null);
	
		PatientProcedureShortVoCollection collProc = new PatientProcedureShortVoCollection();
		for(int x = 0; x < this.form.grdProcedures().getRows().size(); x++)
		{
			collProc.add(form.grdProcedures().getRows().get(x).getValue());
		}
		if(collProc.size()>0)
			voDiagnosisManagement.setProcedures(collProc);
		else
			voDiagnosisManagement.setProcedures(null);
	
		
		if(form.GroupAction().getValue().equals(GenForm.GroupActionEnumeration.rdoActionYes))
			voDiagnosisManagement.setActionRequiredByGP(YesNo.YES);
		else
			voDiagnosisManagement.setActionRequiredByGP(YesNo.NO);
		
		if(form.GroupConsent().getValue().equals(GenForm.GroupConsentEnumeration.rdoConsentYes))
			voDiagnosisManagement.setPatientConsent(YesNo.YES);
		else
			voDiagnosisManagement.setPatientConsent(YesNo.NO);
		
		voDiagnosisManagement.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		voDiagnosisManagement.setLastAuthoringHCP(form.ccLastUpdating().getValue());
		voDiagnosisManagement.setRecordingInformation(populateRecordinfInfo());
		
		return voDiagnosisManagement;
	}
	
	private AuthoringInformationVo populateRecordinfInfo()
	{
		AuthoringInformationVo authoring = new AuthoringInformationVo();
		authoring.setAuthoringDateTime(new DateTime());
		
		HcpLiteVo hcpVo = new HcpLiteVo();
		hcpVo.setID_Hcp(engine.getLoggedInUser().getHcpId());
		hcpVo.setMos(domain.getMosUser() != null ? (MemberOfStaffLiteVo) domain.getMosUser() : null);
		
		authoring.setAuthoringHcp(hcpVo);
		
		return authoring;
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		if (sender.equals(form.grdDiagnosis()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.RefManNamespace.AtConsultationDiagnosisGrid.NEW://wdev-12531
					addDiagnosis();
					break;
	
				case GenForm.ContextMenus.RefManNamespace.AtConsultationDiagnosisGrid.EDIT://wdev-12531
					updateDiagnosis();
					break;

				case GenForm.ContextMenus.RefManNamespace.AtConsultationDiagnosisGrid.REMOVE://wdev-12531
					removeDiagnosis();
					break;
				default :
			}
		}
		if (sender.equals(form.grdProcedures()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.RefManNamespace.AtConsultationProceduresGrid.NEW://wdev-12531
					if (domain.getHcpLiteUser() == null)
					{
						engine.showMessage("Logged in user is not a HCP.");						
						return;
					}
					PatientProcedureShortVoCollection collProc = new PatientProcedureShortVoCollection();
					for (int i = 0; i < form.grdProcedures().getRows().size(); i++) 
					{
						collProc.add(form.grdProcedures().getRows().get(i).getValue());
					}
					form.getGlobalContext().Core.setProceduresAtConsultation(collProc);
					engine.open(form.getForms().Clinical.ProceduresDialog);
					break;

				case GenForm.ContextMenus.RefManNamespace.AtConsultationProceduresGrid.REMOVE://wdev-12531
					removeProcedures();
					break;
				default :
			}
		}
	}
	
	private void updateDiagnosis()
	{
		if (domain.getHcpLiteUser() == null)
		{
			engine.showMessage("Logged in user is not a HCP.");						
			return;
		}
		
		PatientDiagnosisAtConsultationVoCollection coll = new PatientDiagnosisAtConsultationVoCollection();
		for (int i = 0; i < form.grdDiagnosis().getRows().size(); i++) 
		{
			coll.add(form.grdDiagnosis().getRows().get(i).getValue());
		}
		form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(coll);
		
		//if another Diagnosis is marked as Primary / Main then disable the checkbox in dialog
		boolean bEnable = false;
		for (int i = 0 ; i < form.grdDiagnosis().getRows().size() ; i++)
		{
			if (form.grdDiagnosis().getRows().get(i).getColMain() != null)
			{
				if (i != form.grdDiagnosis().getSelectedRowIndex())
					bEnable = true;
			}
		}

		form.getGlobalContext().Clinical.setDisableMainCheckbox(bEnable);
		form.getGlobalContext().Core.setPatientDiagnosisAtConsultation(form.grdDiagnosis().getSelectedRow().getValue());
		
		engine.open(form.getForms().Clinical.DiagnosisDialog);
	}

	private void addDiagnosis()
	{
		if (domain.getHcpLiteUser() == null)
		{
			engine.showMessage("Logged in user is not a HCP.");						
			return;
		}
		PatientDiagnosisAtConsultationVoCollection coll = new PatientDiagnosisAtConsultationVoCollection();
		for (int i = 0; i < form.grdDiagnosis().getRows().size(); i++) 
		{
			coll.add(form.grdDiagnosis().getRows().get(i).getValue());
		}
		form.getGlobalContext().Core.setPatientDiagnosisAtConsultationList(coll);
		
		//if another Diagnosis is marked as Primary / Main then disable the checkbox in dialog
		boolean bEnable = false;
		for (int i = 0 ; i < form.grdDiagnosis().getRows().size() ; i++)
		{
			if (form.grdDiagnosis().getRows().get(i).getColMain() != null)
					bEnable = true;
		}
		form.getGlobalContext().Clinical.setDisableMainCheckbox(bEnable);
		form.getGlobalContext().Core.setPatientDiagnosisAtConsultation(null);

		engine.open(form.getForms().Clinical.DiagnosisDialog);
	}

	private void removeProcedures() 
	{	
		form.grdProcedures().getRows().remove(form.grdProcedures().getSelectedRowIndex());
		form.getContextMenus().RefMan.getAtConsultationProceduresGridREMOVEItem().setVisible(false);//wdev-12531
		updateContextMenu();

	}
	
	private void removeDiagnosis() 
	{		
		form.grdDiagnosis().getRows().remove(form.grdDiagnosis().getSelectedRowIndex());				
		form.getContextMenus().RefMan.getAtConsultationDiagnosisGridREMOVEItem().setVisible(false);//wdev-12531
		updateContextMenu();
	}
		
	@Override
	protected void onRadioButtonGroupActionValueChanged() throws PresentationLogicException {
		if(form.getMode().equals(FormMode.EDIT)){
			if(form.GroupAction().getValue().equals(GenForm.GroupActionEnumeration.rdoActionYes))
				form.richTextActionRequiredByGP().setEnabled(true);
			else{
				form.richTextActionRequiredByGP().setEnabled(false);
				form.richTextActionRequiredByGP().setValue(null);
			}			
		}		
	}
			
	@Override
	protected void onGrdProceduresSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenu();
	}
	
	private void updateContextMenu() 
	{
		
		boolean isEditMode = form.getMode().equals(FormMode.EDIT) ?  true : false;
		 
		form.getContextMenus().RefMan.getAtConsultationProceduresGridREMOVEItem().setVisible(isEditMode
				&& form.grdProcedures().getSelectedRow() != null 
				&& form.grdProcedures().getSelectedRow().getValue() != null
				&& form.grdProcedures().getSelectedRow().getValue().getID_PatientProcedure() == null ? true : false);		

		//form.getContextMenus().getLIPUpdateItem().setText("Remove");
		
		
		form.getContextMenus().RefMan.getAtConsultationDiagnosisGridEDITItem().setVisible(isEditMode && form.grdDiagnosis().getSelectedRow() != null ? true : false);	//wdev-12531		
		form.getContextMenus().RefMan.getAtConsultationDiagnosisGridREMOVEItem().setVisible(isEditMode 
				&& form.grdDiagnosis().getSelectedRow() != null 
				&& form.grdDiagnosis().getSelectedRow().getValue() != null
				&& form.grdDiagnosis().getSelectedRow().getValue().getID_PatientDiagnosis() == null ? true : false);		//wdev-12531		
	}
	@Override
	protected void onGrdDiagnosisSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenu();
		
	//	boolean isEditMode = form.getMode().equals(FormMode.EDIT) ?  true : false;
	//	form.getContextMenus().getGenericGridRemoveItem().setVisible(isEditMode && form.grdDiagnosis().getSelectedRow() != null ? true : false);		
	}
	
	@Override
	protected void onChkFirstDefinitiveSystemValueChanged()
			throws PresentationLogicException 
	{
		if (form.chkFirstDefinitiveSystem().getValue())
		{
			form.dteFirstDefinitiveSystem().setVisible(true);
		}	
		else
		{
			form.dteFirstDefinitiveSystem().setVisible(false);
		}
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{	
		if(result.equals(DialogResult.OK) && formName.equals(form.getForms().Clinical.DiagnosisDialog))
		{
			if (form.getGlobalContext().Core.getPatientDiagnosisAtConsultationListIsNotNull())
			{
				PatientDiagnosisAtConsultationVoCollection diagnosis = form.getGlobalContext().Core.getPatientDiagnosisAtConsultationList();
				form.grdDiagnosis().getRows().clear();				
				for (int i = 0; i < diagnosis.size(); i++)
				{					
					grdDiagnosisRow row = null;
					if(isPrimaryDiagnosisActive(diagnosis.get(i)))
						row =form.grdDiagnosis().getRows().newRowAt(0);
					else
						row =form.grdDiagnosis().getRows().newRow(true);
				
					if(diagnosis.get(i).getDiagnosisDescriptionIsNotNull())
						row.setColDiagnosis(diagnosis.get(i).getDiagnosisDescription());											
					if(diagnosis.get(i).getAuthoringInfoIsNotNull() && diagnosis.get(i).getAuthoringInfo().getAuthoringHcpIsNotNull())
						row.setColAuthoringHCP(diagnosis.get(i).getAuthoringInfo().getAuthoringHcp().toString());

					row.setColMain(isPrimaryDiagnosisActive(diagnosis.get(i)) ? getPrimaryImage() : null);
					
					if(diagnosis.get(i).getCurrentStatusIsNotNull() && diagnosis.get(i).getCurrentStatus().getStatusIsNotNull())
						row.setColStatus(diagnosis.get(i).getCurrentStatus().getStatus().getText());
					
					row.setValue(diagnosis.get(i));
				}				
			}
		}
		else if(result.equals(DialogResult.OK) && formName.equals(form.getForms().Clinical.ProceduresDialog))
		{
			if (form.getGlobalContext().Core.getProceduresAtConsultationIsNotNull())
			{
				PatientProcedureShortVoCollection procedures = form.getGlobalContext().Core.getProceduresAtConsultation();
				form.grdProcedures().getRows().clear();				
				for (int i = 0; i < procedures.size(); i++)
				{	
					grdProceduresRow row = form.grdProcedures().getRows().newRow(true);
				
					if(procedures.get(i).getProcedureDescriptionIsNotNull())
						row.setColProcedures(procedures.get(i).getProcedureDescription());											
					if(procedures.get(i).getAuthoringInformationIsNotNull() && procedures.get(i).getAuthoringInformation().getAuthoringHcpIsNotNull())
						row.setColAuthoringHCP(procedures.get(i).getAuthoringInformation().getAuthoringHcp().toString());
					if(procedures.get(i).getProcDateIsNotNull())
						row.setColDate(procedures.get(i).getProcDate().toString());
					
					row.setValue(procedures.get(i));
				}				
			}
		}	
		updateContextMenu();
	}
	
	private Image getPrimaryImage()
	{
		return form.getImages().Core.Pin;
	}

	@Override
	protected void onGrdDiagnosisMutableComboBoxSelected(int column,
			grdDiagnosisRow row, Object value)
			throws PresentationLogicException {
		// TODO Auto-generated method stub
		
	}
	@Override
	protected void onBtnSpellCheckClick() throws PresentationLogicException 
	{	
		form.richTextActionRequiredByGP().spellCheck();
		form.richTextAdviceAndInformationGiven().spellCheck();
		form.richTextSummaryOfInvestigationsAndResults().spellCheck();
	}		
}
