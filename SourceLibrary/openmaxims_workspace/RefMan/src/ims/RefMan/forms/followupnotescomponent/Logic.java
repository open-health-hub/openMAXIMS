// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.70 build 3545.21176)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.followupnotescomponent;

import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CatsReferralReportsVo;
import ims.RefMan.vo.FollowUpNoteLiteVo;
import ims.RefMan.vo.FollowUpNoteVo;
import ims.RefMan.vo.FollowUpNoteVoCollection;
import ims.RefMan.vo.lookups.ReportStatus;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.lookups.FollowUpTypeCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellDecoratorMode;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int COL_DATE = 1;
	private static final int COL_USER = 2;
	private static final int COL_NOTES = 3;
	private static final int COL_NOTES_TYPE = 4;
	private static final int NEW_ROW_IDENTIFIER = 5;

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender)
			throws PresentationLogicException 
	{		
		CatsReferralReportsVo catReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());		
		boolean isReporGenerated = false;
		if(catReferral != null && catReferral.getIsFinalReportRequiredIsNotNull() &&
				catReferral.getIsFinalReportRequired().equals(ReportStatus.GENERATED))
		{
			isReporGenerated = true;
		}
		
		switch (menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.FollowUpNotes.Add:
				form.getGlobalContext().RefMan.setEditedFollowUpNote(null);
				engine.open(form.getForms().RefMan.FollowUpNotesDialog, new Object[]{new Boolean(isReporGenerated)});
				break;
			case GenForm.ContextMenus.RefManNamespace.FollowUpNotes.Edit:
				form.getGlobalContext().RefMan.setEditedFollowUpNote((FollowUpNoteVo) form.dyngrdNotes().getSelectedRow().getValue());
				engine.open(form.getForms().RefMan.FollowUpNotesDialog, new Object[]{new Boolean(isReporGenerated)});
				break;	
		}
				
	}
	
	private void newNote(DynamicGridRow row, FollowUpNoteVo note, boolean isEditMode) 
	{			
		if (row == null) {
			throw new CodingRuntimeException("DynamicGridRow is null");
		}
		
		if (note == null) {
			row.setIdentifier(NEW_ROW_IDENTIFIER);
		}
		
		DynamicGridColumn 	coll;
		DynamicGridCell 	cell;
				
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_DATE);
		cell = row.getCells().newCell(coll, DynamicCellType.DATETIME);
		
		cell.setValue(note != null ? (note.getAuthoringInformationIsNotNull() ? note.getAuthoringInformation().getAuthoringDateTime() : null)  : null);		
		cell.setReadOnly(false);
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_USER);
		cell = row.getCells().newCell(coll, DynamicCellType.STRING);
		
		cell.setValue(note != null ? (note.getAuthoringInformationIsNotNull() ? (note.getAuthoringInformation().getAuthoringHcpIsNotNull() ? (note.getAuthoringInformation().getAuthoringHcp().getName() != null ? note.getAuthoringInformation().getAuthoringHcp().getName().toString() : null) : null ) : null)  : domain.getHcpLiteUser() != null ? ((HcpLiteVo)domain.getHcpLiteUser()).getName() != null ? ((HcpLiteVo)domain.getHcpLiteUser()).getName().toString() : null : null);
		cell.setReadOnly(true);
				
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_NOTES_TYPE);
		cell = row.getCells().newCell(coll, DynamicCellType.ENUMERATION);
		cell.getItems().clear();		
		FollowUpTypeCollection voColl = ims.core.vo.lookups.LookupHelper.getFollowUpType(domain.getLookupService());
		for(int i = 0; voColl != null && i < voColl.size(); i++)
		{
			if(voColl.get(i).getParent() == null)
				cell.getItems().newItem(voColl.get(i));
		}		
		
		cell.setValue(note != null ? (note.getFollowUpTypeIsNotNull() ? note.getFollowUpType() : null)  : null);		
		cell.setReadOnly(false);				
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_NOTES);
		cell = row.getCells().newCell(coll, DynamicCellType.WRAPTEXT);				
		
		cell.setValue(note != null ? note.getFollowUpNote() : null);
		cell.setDecoratorType(DynamicCellDecoratorMode.NEVER);	
		cell.setReadOnly(isEditMode ? false : true);		
		cell.setStringMaxLength(3000);
		
		row.setValue(note);			
		row.setReadOnly(!isEditMode);
		
		if (isEditMode) {
			form.getLocalContext().setEditedNote(note);
		}			
	}
	
	public void initialize(Boolean displayReadOnly, FollowUpNoteLiteVo value) 
	{
		initializeDynamicGrid();
		
		form.getLocalContext().setDisplayReadOnly(displayReadOnly);
		
		FollowUpNoteVo note = null;
		if (value != null && value.getCatsReferralIsNotNull()) {
			note = domain.getFollowUpNote(value);
			FollowUpNoteVoCollection notesColl = new FollowUpNoteVoCollection();
			notesColl.add(note);
			populateScreen(notesColl);				
			form.setMode(FormMode.VIEW);
			return;
		}		
		
		open();		
	}

	private void initializeDynamicGrid()
	{
		form.dyngrdNotes().clear();
		form.dyngrdNotes().setSelectable(true);	
		
		DynamicGridColumn column;
		column = form.dyngrdNotes().getColumns().newColumn("Date", COL_DATE);
		column.setWidth(100);		
		column.setCanGrow(false);
		
		column = form.dyngrdNotes().getColumns().newColumn("HCP", COL_USER);
		column.setWidth(200);
		column.setCanGrow(true);
		
		column = form.dyngrdNotes().getColumns().newColumn("Follow-Up Type", COL_NOTES_TYPE);
		column.setWidth(100);
		column.setCanGrow(true);
		
		column = form.dyngrdNotes().getColumns().newColumn("Notes", COL_NOTES);
		column.setWidth(-1);
		column.setCanGrow(true);
	}

	@Override
	protected void onFormModeChanged() 
	{
		if (form.getMode().equals(FormMode.VIEW)) {
			updateContextMenuState();
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.VIEW);
		}
		else {
			form.getContextMenus().RefMan.hideAllFollowUpNotesMenuItems();
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.EDIT);
		}
		form.fireCustomControlValueChanged();
	}
	private void open() 
	{
		form.setMode(FormMode.VIEW);
		CatsReferralRefVo currentCatsReferral = form.getGlobalContext().RefMan.getCatsReferral();
		FollowUpNoteVoCollection currentNotes = domain.listFollowUpNotes(currentCatsReferral);
		
		populateScreen(currentNotes);				
		updateContextMenuState();
	}
	private void populateScreen(FollowUpNoteVoCollection currentNotes) 
	{			
		form.dyngrdNotes().getRows().clear();
		if (currentNotes != null) 
		{
			for (int i = 0; i < currentNotes.size(); i++) 
			{				
				newNote(form.dyngrdNotes().getRows().newRow(), currentNotes.get(i), false); 
			}
		}
	}
	
	private boolean save() 
	{			
		FollowUpNoteVo currentNote = form.getGlobalContext().RefMan.getEditedFollowUpNote();		
		
		String[] str 	= currentNote.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);			
			return false;
		}
		
		try 
		{
			currentNote = domain.saveFollowUpNote(currentNote);				
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(e.toString());			
			return false;
		}		
				
		return true;
	}
	private void updateContextMenuState()
	{
		form.getContextMenus().RefMan.getFollowUpNotesAddItem().setVisible(true);
		form.getContextMenus().RefMan.getFollowUpNotesEditItem().setVisible(form.dyngrdNotes().getSelectedRow() != null ?  true : false);
		
		boolean isReadOnlyMode = form.getLocalContext().getDisplayReadOnlyIsNotNull() ? form.getLocalContext().getDisplayReadOnly() : false;
		boolean isEditMode = form.getMode().equals(FormMode.EDIT);
		if (isReadOnlyMode || isEditMode) {
			form.getContextMenus().RefMan.hideAllFollowUpNotesMenuItems();
		}
	}

	@Override
	protected void onDyngrdNotesRowSelectionChanged(DynamicGridRow row)
			throws PresentationLogicException 
	{		
		updateContextMenuState();	
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result)
			throws PresentationLogicException 
	{
		if(result.equals(DialogResult.OK) && formName.equals(form.getForms().RefMan.FollowUpNotesDialog))
		{
			if (save()) {
				open();
			}
		}
	}
}
