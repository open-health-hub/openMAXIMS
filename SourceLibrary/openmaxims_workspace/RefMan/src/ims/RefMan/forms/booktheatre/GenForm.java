// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.booktheatre;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbTheatreTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.scheduling.vo.lookups.TheatreType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.scheduling.vo.lookups.TheatreType value)
		{
			return super.control.removeRow(value);
		}
		public ims.scheduling.vo.lookups.TheatreType getValue()
		{
			return (ims.scheduling.vo.lookups.TheatreType)super.control.getValue();
		}
		public void setValue(ims.scheduling.vo.lookups.TheatreType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbReferralServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.clinical.vo.ServiceRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.clinical.vo.ServiceRefVo getValue()
		{
			return (ims.core.clinical.vo.ServiceRefVo)super.control.getValue();
		}
		public void setValue(ims.core.clinical.vo.ServiceRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbLocationComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.resource.place.vo.LocationRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.resource.place.vo.LocationRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.resource.place.vo.LocationRefVo getValue()
		{
			return (ims.core.resource.place.vo.LocationRefVo)super.control.getValue();
		}
		public void setValue(ims.core.resource.place.vo.LocationRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbServiceComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.clinical.vo.ServiceRefVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.clinical.vo.ServiceRefVo getValue()
		{
			return (ims.core.clinical.vo.ServiceRefVo)super.control.getValue();
		}
		public void setValue(ims.core.clinical.vo.ServiceRefVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbProcedureComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.interfaces.IGenericItem value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.interfaces.IGenericItem value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.interfaces.IGenericItem value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.interfaces.IGenericItem value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.vo.interfaces.IGenericItem value)
		{
			return super.control.removeRow(value);
		}
		public ims.vo.interfaces.IGenericItem getValue()
		{
			return (ims.vo.interfaces.IGenericItem)super.control.getValue();
		}
		public void setValue(ims.vo.interfaces.IGenericItem value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}
	public static class grdSelectedRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdSelectedRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDummyIdReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDummyIdReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDummyIdOpened()
		{
			super.row.showOpened(0);
		}
		public Integer getColDummyId()
		{
			return (Integer)super.row.get(0);
		}
		public void setColDummyId(Integer value)
		{
			super.row.set(0, value);
		}
		public void setCellColDummyIdTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDateOpened()
		{
			super.row.showOpened(1);
		}
		public String getColDate()
		{
			return (String)super.row.get(1);
		}
		public void setColDate(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColComeInTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColComeInTimeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColComeInTimeOpened()
		{
			super.row.showOpened(2);
		}
		public ims.framework.controls.GridMutableComboBox getColComeInTime()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 2);
		}
		public void setCellColComeInTimeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolErodReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolErodReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolErodOpened()
		{
			super.row.showOpened(3);
		}
		public boolean getcolErod()
		{
			return ((Boolean)super.row.get(3)).booleanValue();
		}
		public void setcolErod(boolean value)
		{
			super.row.set(3, new Boolean(value));
		}
		public void setCellcolErodTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolErodDateReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolErodDateReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolErodDateOpened()
		{
			super.row.showOpened(4);
		}
		public ims.framework.utils.Date getcolErodDate()
		{
			return (ims.framework.utils.Date)super.row.get(4);
		}
		public void setcolErodDate(ims.framework.utils.Date value)
		{
			super.row.set(4, value);
		}
		public void setCellcolErodDateTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColLocationReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColLocationReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColLocationOpened()
		{
			super.row.showOpened(5);
		}
		public String getColLocation()
		{
			return (String)super.row.get(5);
		}
		public void setColLocation(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColLocationTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColSessionReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColSessionReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColSessionOpened()
		{
			super.row.showOpened(6);
		}
		public String getColSession()
		{
			return (String)super.row.get(6);
		}
		public void setColSession(String value)
		{
			super.row.set(6, value);
		}
		public void setCellColSessionTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColConsultantReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColConsultantOpened()
		{
			super.row.showOpened(7);
		}
		public ims.framework.controls.GridMutableComboBox getColConsultant()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 7);
		}
		public void setCellColConsultantTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setColProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean isColProcedureReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showColProcedureOpened()
		{
			super.row.showOpened(8);
		}
		public ims.core.vo.ProcedureLiteVo getColProcedure()
		{
			return (ims.core.vo.ProcedureLiteVo)super.row.get(8);
		}
		public void setColProcedure(ims.core.vo.ProcedureLiteVo value)
		{
			super.row.set(8, value);
		}
		public void setCellColProcedureTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public ims.scheduling.vo.BookingAppointmentTheatreVo getValue()
		{
			return (ims.scheduling.vo.BookingAppointmentTheatreVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.BookingAppointmentTheatreVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdSelectedRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdSelectedRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdSelectedRow get(int index)
		{
			return new grdSelectedRow(super.collection.get(index));
		}
		public grdSelectedRow newRow()
		{
			return new grdSelectedRow(super.collection.newRow());
		}
		public grdSelectedRow newRow(boolean autoSelect)
		{
			return new grdSelectedRow(super.collection.newRow(autoSelect));
		}
		public grdSelectedRow newRowAt(int index)
		{
			return new grdSelectedRow(super.collection.newRowAt(index));
		}
		public grdSelectedRow newRowAt(int index, boolean autoSelect)
		{
			return new grdSelectedRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdSelectedGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.scheduling.vo.BookingAppointmentTheatreVoCollection getValues()
		{
			ims.scheduling.vo.BookingAppointmentTheatreVoCollection listOfValues = new ims.scheduling.vo.BookingAppointmentTheatreVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.BookingAppointmentTheatreVo getValue()
		{
			return (ims.scheduling.vo.BookingAppointmentTheatreVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.BookingAppointmentTheatreVo value)
		{
			super.grid.setValue(value);
		}
		public grdSelectedRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdSelectedRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdSelectedRowCollection getRows()
		{
			return new grdSelectedRowCollection(super.grid.getRows());
		}
		public grdSelectedRow getRowByValue(ims.scheduling.vo.BookingAppointmentTheatreVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdSelectedRow(row);
		}
		public void setColDummyIdHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDummyIdHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColComeInTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColComeInTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolErodHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolErodHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolErodDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolErodDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColLocationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColLocationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColSessionHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColSessionHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setColProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getColProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
	}
	public static class grdTheatreSessionRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdTheatreSessionRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDateOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColDate(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Date getColDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setColDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellColDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColConsultantReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColConsultantReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColConsultantOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColConsultant(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColConsultant()
		{
			return (String)super.row.get(1);
		}
		public void setColConsultant(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColConsultantTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColNoBookedReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColNoBookedReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColNoBookedOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColNoBooked(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColNoBooked()
		{
			return (String)super.row.get(2);
		}
		public void setColNoBooked(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColNoBookedTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColTimeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColTimeOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColTime(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColTime()
		{
			return (String)super.row.get(3);
		}
		public void setColTime(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColTimeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColLocationReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColLocationReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColLocationOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColLocation(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColLocation()
		{
			return (String)super.row.get(4);
		}
		public void setColLocation(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColLocationTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColSelectReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColSelectReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColSelectOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColSelect(String value)
		{
			super.row.setTooltip(5, value);
		}
		public boolean getColSelect()
		{
			return ((Boolean)super.row.get(5)).booleanValue();
		}
		public void setColSelect(boolean value)
		{
			super.row.set(5, new Boolean(value));
		}
		public void setCellColSelectTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.scheduling.vo.TheatreBookingLiteVo getValue()
		{
			return (ims.scheduling.vo.TheatreBookingLiteVo)super.row.getValue();
		}
		public void setValue(ims.scheduling.vo.TheatreBookingLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdTheatreSessionRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdTheatreSessionRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdTheatreSessionRow get(int index)
		{
			return new grdTheatreSessionRow(super.collection.get(index));
		}
		public grdTheatreSessionRow newRow()
		{
			return new grdTheatreSessionRow(super.collection.newRow());
		}
		public grdTheatreSessionRow newRow(boolean autoSelect)
		{
			return new grdTheatreSessionRow(super.collection.newRow(autoSelect));
		}
		public grdTheatreSessionRow newRowAt(int index)
		{
			return new grdTheatreSessionRow(super.collection.newRowAt(index));
		}
		public grdTheatreSessionRow newRowAt(int index, boolean autoSelect)
		{
			return new grdTheatreSessionRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdTheatreSessionGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.scheduling.vo.TheatreBookingLiteVoCollection getValues()
		{
			ims.scheduling.vo.TheatreBookingLiteVoCollection listOfValues = new ims.scheduling.vo.TheatreBookingLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.scheduling.vo.TheatreBookingLiteVo getValue()
		{
			return (ims.scheduling.vo.TheatreBookingLiteVo)super.grid.getValue();
		}
		public void setValue(ims.scheduling.vo.TheatreBookingLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdTheatreSessionRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdTheatreSessionRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdTheatreSessionRowCollection getRows()
		{
			return new grdTheatreSessionRowCollection(super.grid.getRows());
		}
		public grdTheatreSessionRow getRowByValue(ims.scheduling.vo.TheatreBookingLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdTheatreSessionRow(row);
		}
		public void setColDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColConsultantHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColConsultantHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColNoBookedHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColNoBookedHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColLocationHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColLocationHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColSelectHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColSelectHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuBookAppointment = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuBookAppointmentREBOOK_APPTItem = factory.createMenuItem(startControlID.intValue() + 1, "Rebook Appointment", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2520001)))
			contextMenus.RefMan.contextMenuBookAppointment.add(contextMenus.RefMan.contextMenuBookAppointmentREBOOK_APPTItem);
		form.registerMenu(contextMenus.RefMan.contextMenuBookAppointment);
		contextMenus.RefMan.contextMenuBookAppointmentAddSlot = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenuBookAppointmentAddSlotADD_SLOTItem = factory.createMenuItem(startControlID.intValue() + 2, "Add Slot", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2690001)))
			contextMenus.RefMan.contextMenuBookAppointmentAddSlot.add(contextMenus.RefMan.contextMenuBookAppointmentAddSlotADD_SLOTItem);
		form.registerMenu(contextMenus.RefMan.contextMenuBookAppointmentAddSlot);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 456, 0, 376, 376, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Referral Details", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 88, 27, 320, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ims.framework.FormUiLogic m_ccConsultantForm = loader.loadComponent(102256, appForm, startControlID * 10 + 1000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
		//ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(88), new Integer(27), new Integer(320), new Integer(20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccConsultantForm, instance1 } );
		ims.framework.Control m_ccConsultantControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 3), m_ccConsultantForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccConsultantControl);
		Menu[] menus1 = m_ccConsultantForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 360, 97, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "mins", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 120, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 464, 22, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referral Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 464, 97, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "End week KPI:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 464, 47, 147, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referral Letter Received:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 464, 72, 99, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Referral Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 29, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 51, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Location:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 6, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Service:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 568, 61, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Comments:", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 74, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 112, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Theatre List Order", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 560, 600, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 656, 600, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1020), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Book", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 752, 600, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 80, 568, 752, 30, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1018), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 616, 37, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 616, 20, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 616, 95, 176, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 88, 118, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbTheatreTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbTheatreTypeTemp);
		cmbTheatreTypeComboBox cmbTheatreType = (cmbTheatreTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTheatreTypeComboBox.class, m_cmbTheatreTypeTemp);
		super.addComboBox(cmbTheatreType);
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 616, 70, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbReferralServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbReferralServiceTemp);
		cmbReferralServiceComboBox cmbReferralService = (cmbReferralServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbReferralServiceComboBox.class, m_cmbReferralServiceTemp);
		super.addComboBox(cmbReferralService);
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 88, 49, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbLocationTemp);
		cmbLocationComboBox cmbLocation = (cmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbLocationComboBox.class, m_cmbLocationTemp);
		super.addComboBox(cmbLocation);
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 88, 4, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbServiceTemp);
		cmbServiceComboBox cmbService = (cmbServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbServiceComboBox.class, m_cmbServiceTemp);
		super.addComboBox(cmbService);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 88, 72, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_qmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbProcedureTemp);
		qmbProcedureComboBox qmbProcedure = (qmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbProcedureComboBox.class, m_qmbProcedureTemp);
		super.addComboBox(qmbProcedure);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 144, 97, 152, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Change Time Required to :", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 16, 504, 816, 56, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdSelectedTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdSelectedTemp);
		grdSelectedGrid grdSelected = (grdSelectedGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSelectedGrid.class, m_grdSelectedTemp);
		grdSelected.addIntColumn("Dummy", 0, 0, 0, true, true, null, false, 0, true);
		grdSelected.addStringColumn("Date", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSelected.addMutableComboBoxColumn("Come In Time", 0, 0, 90, false, true, false, false, false, true, -1);
		grdSelected.addBoolColumn("EROD", 0, 1, 50, false, true, 0, true);
		grdSelected.addDateColumn("Offered Date", 0, 0, 85, false, true, null, false, 0, true);
		grdSelected.addStringColumn("Location", 0, 0, 140, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSelected.addStringColumn("Theatre Session", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdSelected.addMutableComboBoxColumn("Consultant", 0, 0, 120, false, true, false, false, false, true, -1);
		grdSelected.addStringColumn("Procedure", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdSelected);
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 16, 384, 816, 112, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdTheatreSessionTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuBookAppointmentAddSlot, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdTheatreSessionTemp);
		grdTheatreSessionGrid grdTheatreSession = (grdTheatreSessionGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTheatreSessionGrid.class, m_grdTheatreSessionTemp);
		grdTheatreSession.addDateColumn("Date", 0, 0, 90, true, true, null, false, 1, true);
		grdTheatreSession.addStringColumn("Consultant(s)", 0, 0, 220, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatreSession.addStringColumn("No.", 0, 1, 60, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatreSession.addStringColumn("Time Rem.", 0, 0, 85, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatreSession.addStringColumn("Location", 0, 0, 250, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdTheatreSession.addBoolColumn("Select", 1, 1, -1, false, true, 0, true);
		super.addGrid(grdTheatreSession);

		// Tree Controls
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 472, 136, 336, 232, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.RefMan.contextMenuBookAppointment, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 312, 95, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(4)}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 408, 40, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 408, 8, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));

		// BookingCalendar Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 88, 144, 296, 234, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(BookingCalendar.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.mosquery.IComponent ccConsultant()
	{
		return (ims.core.forms.mosquery.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccConsultantValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccConsultantVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccConsultantVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccConsultantEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccConsultantEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Label lblEWKPI()
	{
		return (Label)super.getControl(5);
	}
	public Button btnViewTheatreListOrder()
	{
		return (Button)super.getControl(13);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(14);
	}
	public Button btnBook()
	{
		return (Button)super.getControl(15);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(16);
	}
	public TextBox txtBookingComments()
	{
		return (TextBox)super.getControl(17);
	}
	public DateControl dteReferralLetter()
	{
		return (DateControl)super.getControl(18);
	}
	public DateControl dteReferral()
	{
		return (DateControl)super.getControl(19);
	}
	public DateControl dteEndDayKPI()
	{
		return (DateControl)super.getControl(20);
	}
	public cmbTheatreTypeComboBox cmbTheatreType()
	{
		return (cmbTheatreTypeComboBox)super.getComboBox(0);
	}
	public cmbReferralServiceComboBox cmbReferralService()
	{
		return (cmbReferralServiceComboBox)super.getComboBox(1);
	}
	public cmbLocationComboBox cmbLocation()
	{
		return (cmbLocationComboBox)super.getComboBox(2);
	}
	public cmbServiceComboBox cmbService()
	{
		return (cmbServiceComboBox)super.getComboBox(3);
	}
	public qmbProcedureComboBox qmbProcedure()
	{
		return (qmbProcedureComboBox)super.getComboBox(4);
	}
	public CheckBox chkChangeTimeRequired()
	{
		return (CheckBox)super.getControl(26);
	}
	public grdSelectedGrid grdSelected()
	{
		return (grdSelectedGrid)super.getGrid(0);
	}
	public grdTheatreSessionGrid grdTheatreSession()
	{
		return (grdTheatreSessionGrid)super.getGrid(1);
	}
	public TreeView treInvAppts()
	{
		return (TreeView)super.getControl(29);
	}
	public IntBox intRequiredProcTime()
	{
		return (IntBox)super.getControl(30);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(31);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(32);
	}
	public BookingCalendar bookingCalendar()
	{
		return (BookingCalendar)super.getControl(33);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				SortTheatreAppointments = new LocalFormName(114174);
				PrintAppointment = new LocalFormName(114163);
			}
			public final FormName SortTheatreAppointments;
			public final FormName PrintAppointment;
		}

		public SchedulingForms Scheduling;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			OCRR = new OCRRImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClosedFolder = new ImageHelper(102135, "Images/Core/closed_folder.png", new Integer(16), new Integer(16));
				OpenFolder = new ImageHelper(102134, "Images/Core/open_folder_simple.png", new Integer(16), new Integer(16));
				Date = new ImageHelper(102236, "Images/Core/Control_MonthCalendar.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClosedFolder;
			public final ims.framework.utils.Image OpenFolder;
			public final ims.framework.utils.Image Date;
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Investigation = new ImageHelper(116105, "Images/OCRR/Investigation.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Investigation;
		}
		public final CoreImages Core;
		public final OCRRImages OCRR;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_Sessions = new ims.framework.ContextVariable("Sessions", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Sessions_" + componentIdentifier + "");
			cxl_SelectedSessions = new ims.framework.ContextVariable("SelectedSessions", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__SelectedSessions_" + componentIdentifier + "");
			cxl_SelectedAppointments = new ims.framework.ContextVariable("SelectedAppointments", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__SelectedAppointments_" + componentIdentifier + "");
			cxl_Patient = new ims.framework.ContextVariable("Patient", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier + "");
			cxl_SessionBookingRights = new ims.framework.ContextVariable("SessionBookingRights", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__SessionBookingRights_" + componentIdentifier + "");
			cxl_CurrentDate = new ims.framework.ContextVariable("CurrentDate", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__CurrentDate_" + componentIdentifier + "");
			cxl_StartDate = new ims.framework.ContextVariable("StartDate", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__StartDate_" + componentIdentifier + "");
			cxl_EndDate = new ims.framework.ContextVariable("EndDate", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__EndDate_" + componentIdentifier + "");
			cxl_Sch_Booking = new ims.framework.ContextVariable("Sch_Booking", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Sch_Booking_" + componentIdentifier + "");
			cxl_KPIDays = new ims.framework.ContextVariable("KPIDays", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__KPIDays_" + componentIdentifier + "");
			cxl_TriageDateTime = new ims.framework.ContextVariable("TriageDateTime", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__TriageDateTime_" + componentIdentifier + "");
			cxl_IsRebookApptSelected = new ims.framework.ContextVariable("IsRebookApptSelected", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__IsRebookApptSelected_" + componentIdentifier + "");
			cxl_ReferralCareContext = new ims.framework.ContextVariable("ReferralCareContext", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__ReferralCareContext_" + componentIdentifier + "");
			cxl_SelectedErodDates = new ims.framework.ContextVariable("SelectedErodDates", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__SelectedErodDates_" + componentIdentifier + "");
			cxl_ApptStatus = new ims.framework.ContextVariable("ApptStatus", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__ApptStatus_" + componentIdentifier + "");
			cxl_KPIMessageBoxId = new ims.framework.ContextVariable("KPIMessageBoxId", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__KPIMessageBoxId_" + componentIdentifier + "");
			cxl_ApptInPastMessageBoxId = new ims.framework.ContextVariable("ApptInPastMessageBoxId", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__ApptInPastMessageBoxId_" + componentIdentifier + "");
			cxl_SuitableForSurgeryDuration = new ims.framework.ContextVariable("SuitableForSurgeryDuration", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__SuitableForSurgeryDuration_" + componentIdentifier + "");
			cxl_AnaestheticType = new ims.framework.ContextVariable("AnaestheticType", prefix + "_lv_RefMan.BookTheatre.__internal_x_context__AnaestheticType_" + componentIdentifier + "");
		}
		
		public boolean getSessionsIsNotNull()
		{
			return !cxl_Sessions.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionTheatreVoCollection getSessions()
		{
			return (ims.scheduling.vo.SessionTheatreVoCollection)cxl_Sessions.getValue(context);
		}
		public void setSessions(ims.scheduling.vo.SessionTheatreVoCollection value)
		{
			cxl_Sessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sessions = null;
		public boolean getSelectedSessionsIsNotNull()
		{
			return !cxl_SelectedSessions.getValueIsNull(context);
		}
		public ims.scheduling.vo.SessionTheatreVoCollection getSelectedSessions()
		{
			return (ims.scheduling.vo.SessionTheatreVoCollection)cxl_SelectedSessions.getValue(context);
		}
		public void setSelectedSessions(ims.scheduling.vo.SessionTheatreVoCollection value)
		{
			cxl_SelectedSessions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedSessions = null;
		public boolean getSelectedAppointmentsIsNotNull()
		{
			return !cxl_SelectedAppointments.getValueIsNull(context);
		}
		public ims.scheduling.vo.BookingAppointmentTheatreVoCollection getSelectedAppointments()
		{
			return (ims.scheduling.vo.BookingAppointmentTheatreVoCollection)cxl_SelectedAppointments.getValue(context);
		}
		public void setSelectedAppointments(ims.scheduling.vo.BookingAppointmentTheatreVoCollection value)
		{
			cxl_SelectedAppointments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedAppointments = null;
		public boolean getPatientIsNotNull()
		{
			return !cxl_Patient.getValueIsNull(context);
		}
		public ims.core.vo.PatientShort getPatient()
		{
			return (ims.core.vo.PatientShort)cxl_Patient.getValue(context);
		}
		public void setPatient(ims.core.vo.PatientShort value)
		{
			cxl_Patient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Patient = null;
		public boolean getSessionBookingRightsIsNotNull()
		{
			return !cxl_SessionBookingRights.getValueIsNull(context);
		}
		public java.util.Map getSessionBookingRights()
		{
			return (java.util.Map)cxl_SessionBookingRights.getValue(context);
		}
		public void setSessionBookingRights(java.util.Map value)
		{
			cxl_SessionBookingRights.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SessionBookingRights = null;
		public boolean getCurrentDateIsNotNull()
		{
			return !cxl_CurrentDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getCurrentDate()
		{
			return (ims.framework.utils.Date)cxl_CurrentDate.getValue(context);
		}
		public void setCurrentDate(ims.framework.utils.Date value)
		{
			cxl_CurrentDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentDate = null;
		public boolean getStartDateIsNotNull()
		{
			return !cxl_StartDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getStartDate()
		{
			return (ims.framework.utils.Date)cxl_StartDate.getValue(context);
		}
		public void setStartDate(ims.framework.utils.Date value)
		{
			cxl_StartDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_StartDate = null;
		public boolean getEndDateIsNotNull()
		{
			return !cxl_EndDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getEndDate()
		{
			return (ims.framework.utils.Date)cxl_EndDate.getValue(context);
		}
		public void setEndDate(ims.framework.utils.Date value)
		{
			cxl_EndDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EndDate = null;
		public boolean getSch_BookingIsNotNull()
		{
			return !cxl_Sch_Booking.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_BookingTheatreVo getSch_Booking()
		{
			return (ims.scheduling.vo.Sch_BookingTheatreVo)cxl_Sch_Booking.getValue(context);
		}
		public void setSch_Booking(ims.scheduling.vo.Sch_BookingTheatreVo value)
		{
			cxl_Sch_Booking.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sch_Booking = null;
		public boolean getKPIDaysIsNotNull()
		{
			return !cxl_KPIDays.getValueIsNull(context);
		}
		public ims.framework.utils.Date[] getKPIDays()
		{
			return (ims.framework.utils.Date[])cxl_KPIDays.getValue(context);
		}
		public void setKPIDays(ims.framework.utils.Date[] value)
		{
			cxl_KPIDays.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_KPIDays = null;
		public boolean getTriageDateTimeIsNotNull()
		{
			return !cxl_TriageDateTime.getValueIsNull(context);
		}
		public ims.framework.utils.DateTime getTriageDateTime()
		{
			return (ims.framework.utils.DateTime)cxl_TriageDateTime.getValue(context);
		}
		public void setTriageDateTime(ims.framework.utils.DateTime value)
		{
			cxl_TriageDateTime.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TriageDateTime = null;
		public boolean getIsRebookApptSelectedIsNotNull()
		{
			return !cxl_IsRebookApptSelected.getValueIsNull(context);
		}
		public Boolean getIsRebookApptSelected()
		{
			return (Boolean)cxl_IsRebookApptSelected.getValue(context);
		}
		public void setIsRebookApptSelected(Boolean value)
		{
			cxl_IsRebookApptSelected.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsRebookApptSelected = null;
		public boolean getReferralCareContextIsNotNull()
		{
			return !cxl_ReferralCareContext.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getReferralCareContext()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_ReferralCareContext.getValue(context);
		}
		public void setReferralCareContext(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'ReferralCareContext' RefVo context variable.");
			if(value == null)
				cxl_ReferralCareContext.setValue(context, null);
			else
				cxl_ReferralCareContext.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_ReferralCareContext = null;
		public boolean getSelectedErodDatesIsNotNull()
		{
			return !cxl_SelectedErodDates.getValueIsNull(context);
		}
		public java.util.Map getSelectedErodDates()
		{
			return (java.util.Map)cxl_SelectedErodDates.getValue(context);
		}
		public void setSelectedErodDates(java.util.Map value)
		{
			cxl_SelectedErodDates.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedErodDates = null;
		public boolean getApptStatusIsNotNull()
		{
			return !cxl_ApptStatus.getValueIsNull(context);
		}
		public ims.scheduling.vo.Appointment_StatusVoCollection getApptStatus()
		{
			return (ims.scheduling.vo.Appointment_StatusVoCollection)cxl_ApptStatus.getValue(context);
		}
		public void setApptStatus(ims.scheduling.vo.Appointment_StatusVoCollection value)
		{
			cxl_ApptStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ApptStatus = null;
		public boolean getKPIMessageBoxIdIsNotNull()
		{
			return !cxl_KPIMessageBoxId.getValueIsNull(context);
		}
		public Integer getKPIMessageBoxId()
		{
			return (Integer)cxl_KPIMessageBoxId.getValue(context);
		}
		public void setKPIMessageBoxId(Integer value)
		{
			cxl_KPIMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_KPIMessageBoxId = null;
		public boolean getApptInPastMessageBoxIdIsNotNull()
		{
			return !cxl_ApptInPastMessageBoxId.getValueIsNull(context);
		}
		public Integer getApptInPastMessageBoxId()
		{
			return (Integer)cxl_ApptInPastMessageBoxId.getValue(context);
		}
		public void setApptInPastMessageBoxId(Integer value)
		{
			cxl_ApptInPastMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ApptInPastMessageBoxId = null;
		public boolean getSuitableForSurgeryDurationIsNotNull()
		{
			return !cxl_SuitableForSurgeryDuration.getValueIsNull(context);
		}
		public Integer getSuitableForSurgeryDuration()
		{
			return (Integer)cxl_SuitableForSurgeryDuration.getValue(context);
		}
		public void setSuitableForSurgeryDuration(Integer value)
		{
			cxl_SuitableForSurgeryDuration.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SuitableForSurgeryDuration = null;
		public boolean getAnaestheticTypeIsNotNull()
		{
			return !cxl_AnaestheticType.getValueIsNull(context);
		}
		public ims.clinical.vo.lookups.AnaestheticType getAnaestheticType()
		{
			return (ims.clinical.vo.lookups.AnaestheticType)cxl_AnaestheticType.getValue(context);
		}
		public void setAnaestheticType(ims.clinical.vo.lookups.AnaestheticType value)
		{
			cxl_AnaestheticType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AnaestheticType = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class BookAppointment implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int REBOOK_APPT = 1;
			}
			public void disableAllBookAppointmentMenuItems()
			{
				this.contextMenuBookAppointmentREBOOK_APPTItem.setEnabled(false);
			}
			public void hideAllBookAppointmentMenuItems()
			{
				this.contextMenuBookAppointmentREBOOK_APPTItem.setVisible(false);
			}
			private Menu contextMenuBookAppointment;
			public ReadOnlyMenuItem getBookAppointmentREBOOK_APPTItem()
			{
				return this.contextMenuBookAppointmentREBOOK_APPTItem;
			}
			private MenuItem contextMenuBookAppointmentREBOOK_APPTItem;
			public final class BookAppointmentAddSlot implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD_SLOT = 2;
			}
			public void disableAllBookAppointmentAddSlotMenuItems()
			{
				this.contextMenuBookAppointmentAddSlotADD_SLOTItem.setEnabled(false);
			}
			public void hideAllBookAppointmentAddSlotMenuItems()
			{
				this.contextMenuBookAppointmentAddSlotADD_SLOTItem.setVisible(false);
			}
			private Menu contextMenuBookAppointmentAddSlot;
			public ReadOnlyMenuItem getBookAppointmentAddSlotADD_SLOTItem()
			{
				return this.contextMenuBookAppointmentAddSlotADD_SLOTItem;
			}
			private MenuItem contextMenuBookAppointmentAddSlotADD_SLOTItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[115];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-LOS", "LOS");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ID", "ID_Service");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SPECIALTY", "Specialty");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-CUSTOMPROCEDUREDURATION", "CustomProcedureDuration");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTTCITIME", "AppointmentTCITime");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PASEVENT", "PASEvent");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ID", "ID_Patient");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SEX", "Sex");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-DOB", "Dob");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-DOD", "Dod");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-RELIGION", "Religion");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ISACTIVE", "IsActive");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SCN", "SCN");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Patient_" + componentIdentifier, "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-ID", "ID_Sch_Booking");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-BOOKINGCOMMENTS", "BookingComments");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatre.__internal_x_context__ReferralCareContext_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
