// This code was generated by Daniel Laffan using IMS Development Environment (version 1.70 build 3397.19184)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.booktheatre;

import ims.RefMan.forms.booktheatre.GenForm.grdSelectedRow;
import ims.RefMan.forms.booktheatre.GenForm.grdTheatreSessionRow;
import ims.RefMan.vo.FitForSurgeryAssessmentLiteVo;
import ims.RefMan.vo.ReferralBookingVo;
import ims.RefMan.vo.SuitableForSurgeryAssessmentMinVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Time;
import ims.icp.vo.PatientICPFullVo;
import ims.ocrr.vo.OrderInvestigationBookingVo;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentLiteVo;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.BookingAppointmentTheatreVoCollection;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentRefVoCollection;
import ims.scheduling.vo.Sch_BookingTheatreVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionTheatreTCISlotLiteVo;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.SessionTheatreVoCollection;
import ims.scheduling.vo.Session_ListOwnerVo;
import ims.scheduling.vo.TheatreBookingLiteVo;
import ims.scheduling.vo.TheatreProcedureLiteVo;
import ims.scheduling.vo.lookups.LookupHelper;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TCITime;
import ims.scheduling.vo.lookups.TCITimeCollection;
import ims.scheduling.vo.lookups.TheatreType;
import ims.vo.interfaces.IGenericItem;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	private static final int CURRENT_APPT_NODE	= 1;
	private static final int REBOOK_APPT_NODE	= 2;
	private static final int INV_NODE			= 3;
	private static final int OTHER_NODE			= 4;
	
	//WDEV-11761 private static final int[][] colors = new int[][]{{0,153,0},{0,192,0},{0,255,0},{157,255,60},{128,255,128},{174,255,174},
	//WDEV-11761												{205,255,155},{255,255,220},{255,255,183},{255,255,128},{255,255,0},
	//WDEV-11761												{209,209,0},{255,128,0},{243,87,20},{255,128,128},{255,89,89},{230,48,48},{255,0,0}};//WDEV-11713

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void initialise()
	{
		//WDEV-9645
		if(engine.isDialog())
		{
			form.setMode(FormMode.VIEW);	
		}
		
		//WDEV-10556 
		form.ccConsultant().initialize(MosType.HCP);
		clearBookingCalendar();

		form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem().setVisible(false);
		form.bookingCalendar().setEnabled(false);
		form.bookingCalendar().setChecksReadOnly(true);

		form.bookingCalendar().setCurrentMonth(new Date());
		loadServices();
		loadLocations();
		//----wdev-9744--------------
		form.getLocalContext().setApptStatus(null);
		//---------------------------
		
		// WDEV-12080 - Get latest FitForSurgeryAssessment
		FitForSurgeryAssessmentLiteVo fitForSurgery = domain.getLatestFitForSurgeryAssessment(form.getGlobalContext().RefMan.getCatsReferral());
		form.getLocalContext().setAnaestheticType(fitForSurgery != null ? fitForSurgery.getAnaestheticType() : null);
	}
	
	private void clearBookingCalendar()
	{
		form.bookingCalendar().clearBookedChecks();
		form.bookingCalendar().clearChecks();
		form.bookingCalendar().clearPercentages();
		form.bookingCalendar().clearNoSessionDates();
		form.bookingCalendar().clearNoSlotDates();
		form.bookingCalendar().clearBackColors();

		Date dateStart = new Date(form.bookingCalendar().getCurrentMonth().getYear(), form.bookingCalendar().getCurrentMonth().getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendar().getCurrentMonth().getYear(), form.bookingCalendar().getCurrentMonth().getMonth(), form.bookingCalendar().getCurrentMonth().getNumberOfDaysInTheMonth());

		while (dateStart.isLessOrEqualThan(dateEnd))
		{
			form.bookingCalendar().addNoSessionDates(new Date(dateStart));
			dateStart.addDay(1);
		}
	}

	private void loadServices()
	{
		form.cmbService().clear();
		ServiceLiteVoCollection voCollServices = domain.listActiveCanBeScheduledService();
		if (voCollServices != null)
		{
			for (int i = 0; i < voCollServices.size(); i++)
				form.cmbService().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}
	}

	private void loadLocations()
	{
		form.cmbLocation().clear();
		LocationLiteVoCollection voCollLoc = domain.listLocationLite();
		if (voCollLoc != null)
		{
			for (LocationLiteVo item : voCollLoc)
				form.cmbLocation().newRow(item, item.getName());
		}
	}
	
	private void open()
	{
		clearSearchCriteria();
		loadReferralDetails();
		form.bookingCalendar().setEnabled(false);
		form.bookingCalendar().setCurrentMonth(new Date());	
		form.getLocalContext().setSch_Booking(new Sch_BookingTheatreVo());
		clearBookingCalendar();
		
		form.btnBook().setEnabled(false);
		form.btnCancel().setEnabled(false);
		
		form.cmbService().setEnabled(true);
		form.qmbProcedure().setEnabled(true);
		form.cmbTheatreType().setEnabled(true);
		form.ccConsultant().setEnabled(true);
		form.imbClear().setEnabled(true);
		form.intRequiredProcTime().setEnabled(false);
		
		repopulateScreen();
	}
	
	private void clearSearchCriteria()
	{
		form.qmbProcedure().setValue(null);
		form.cmbService().setValue(null);
		form.ccConsultant().setValue(null);
		form.cmbLocation().setValue(null);
		form.cmbTheatreType().setValue(null);
		form.intRequiredProcTime().setValue(null);
		form.chkChangeTimeRequired().setValue(false);
	}
	
	private void loadReferralDetails()
	{
		ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
		populateReferralDetailsControlsFromData(voReferral);
	}
	private void populateReferralDetailsControlsFromData(ReferralBookingVo voReferral)
	{
		clearReferralDetails();
		if(voReferral == null)
			return;
		
		//WDEV-8144
		form.getLocalContext().setReferralCareContext(voReferral.getCareContext());
		
		if(voReferral.getReferralLetterDetailIsNotNull())
		{
			form.dteReferral().setValue(voReferral.getReferralLetterDetail().getDateOfReferral());
			form.dteReferralLetter().setValue(voReferral.getReferralLetterDetail().getDateReferralReceived());
			
			if(voReferral.getReferralLetterDetail().getServiceIsNotNull())
			{
				form.cmbReferralService().newRow(voReferral.getReferralLetterDetail().getService(), voReferral.getReferralLetterDetail().getService().getServiceName());
				form.cmbReferralService().setValue(voReferral.getReferralLetterDetail().getService());
			}
			
			form.lblEWKPI().setValue(voReferral.getReferralLetterDetail().getDaysToRTTBreachDateIsNotNull()?"End "+voReferral.getReferralLetterDetail().getDaysToRTTBreachDate()/7+" week KPI:":"End week KPI:");//WDEV-11713
			form.dteEndDayKPI().setValue(voReferral.getReferralLetterDetail().getEndXdayKPI());//WDEV-11713
			form.getLocalContext().setKPIDays(voReferral.getReferralLetterDetail().getKPIDays());	
		}
		
		form.getLocalContext().setTriageDateTime(voReferral.getTriageDateTime());
	
		populateInvApptTree(voReferral);
		
		//WDEV-8144
		if(voReferral.getIsFitForSurgeryIsNotNull() && voReferral.getIsFitForSurgery())
		{
			if(voReferral.getCareContextIsNotNull())
			{
				SuitableForSurgeryAssessmentMinVo voSfSA = domain.getSuitableForSurgeryAssessmentByCareContext(voReferral.getCareContext());
				if(voSfSA != null)
				{
					if(voSfSA.getProcedureIsNotNull() && voSfSA.getProcedure().getProcedureIsNotNull())
					{
						form.qmbProcedure().newRow(voSfSA.getProcedure().getProcedure(), voSfSA.getProcedure().getProcedure().getProcedureName());
						form.qmbProcedure().setValue(voSfSA.getProcedure().getProcedure());
						qmbProcedureValueChanged();	//WDEV-8144
						
						//WDEV-11777 time required from suitable for surgery needs to be displayed
						if(voSfSA.getRequiredDurationInMinsIsNotNull())
						{
							form.intRequiredProcTime().setValue(voSfSA.getRequiredDurationInMins());
							form.getLocalContext().setSuitableForSurgeryDuration(voSfSA.getRequiredDurationInMins());
						}
					}
					
					// WDEV-11981 - default here with the value - ignore authoring HCP
					form.ccConsultant().setValue(voSfSA.getNamedSurgeon());
					
					if(voSfSA.getTheatreTypeIsNotNull())
						form.cmbTheatreType().setValue(voSfSA.getTheatreType());
				}
			}
		}
		
		//WDEV-8295
		if(voReferral.getReferralLetterDetailIsNotNull())
			form.cmbService().setValue(voReferral.getReferralLetterDetail().getService());
	}
	
	private void populateInvApptTree(ReferralBookingVo voReferral)
	{
		if(voReferral.getCurrentAppointmentsIsNotNull() && voReferral.getCurrentAppointments().size() > 0)
		{
			TreeNode apptNode = form.treInvAppts().getNodes().add(CURRENT_APPT_NODE, "Current Appointments");
			apptNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			apptNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(BookingAppointmentLiteVo voAppt : voReferral.getCurrentAppointments())
			{
				TreeNode node = apptNode.getNodes().add(voAppt, voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
			}
			
			apptNode.setExpanded(true);
		}
		if(voReferral.getAppointmentsRequiringRebookIsNotNull() && voReferral.getAppointmentsRequiringRebook().size() > 0)
		{
			TreeNode rebookNode = form.treInvAppts().getNodes().add(REBOOK_APPT_NODE, "Appointments Requiring a Rebook");
			
			rebookNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			rebookNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(BookingAppointmentLiteVo voAppt : voReferral.getAppointmentsRequiringRebook())
			{
				TreeNode node = rebookNode.getNodes().add(voAppt, voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
			}
			
			rebookNode.setExpanded(true);
		}
		if(voReferral.getOrdersRequiringApptIsNotNull() && voReferral.getOrdersRequiringAppt().size() > 0)
		{
			TreeNode invNode = form.treInvAppts().getNodes().add(INV_NODE, "Investigations requiring an Appointment");
			
			invNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			invNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(OrderInvestigationBookingVo voOrderInv : voReferral.getOrdersRequiringAppt())
			{
				TreeNode node = invNode.getNodes().add(voOrderInv, voOrderInv.toString());
				node.setCollapsedImage(form.getImages().OCRR.Investigation);
				node.setExpandedImage(form.getImages().OCRR.Investigation);
			}
			
			invNode.setExpanded(true);
		}
		if(voReferral.getOtherAppointmentsIsNotNull() && voReferral.getOtherAppointments().size() > 0)
		{
			TreeNode clinNode = form.treInvAppts().getNodes().add(OTHER_NODE, "Clinical Appointments");
			
			clinNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			clinNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(BookingAppointmentLiteVo voAppt : voReferral.getOtherAppointments())
			{
				TreeNode node = clinNode.getNodes().add(voAppt, voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
				node.setEnabled(false);
			}
			
			clinNode.setExpanded(true);
		}
	}
	
	private void clearReferralDetails()
	{
		form.dteReferral().setValue(null);
		form.dteReferralLetter().setValue(null);
		form.dteEndDayKPI().setValue(null);
		form.cmbReferralService().clear();
		form.treInvAppts().clear();	
		form.getLocalContext().setReferralCareContext(null);
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria();
		clearScreen(true);
		form.bookingCalendar().setCurrentMonth(new Date());
		form.getLocalContext().setCurrentDate(null);
		clearBookingCalendar();
	}

	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = validateSearchCriteria();
		if(errors == null)
			loadSessions();
		else
			engine.showErrors(errors);		
	}

	private String[] validateSearchCriteria()
	{
		List<String> errors = new ArrayList<String>(); 
		if(form.qmbProcedure().getValue() == null)
			errors.add("Procedure is mandatory");
		if(form.cmbTheatreType().getValue() == null)
			errors.add("Type is mandatory");
		if(form.chkChangeTimeRequired().getValue())
		{
			if(form.intRequiredProcTime().getValue() == null)
				errors.add("(Change Time Required to:) mins is mandatory");
		}
	
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;	
	}

	private void loadSessions()
	{
		clearBookingCalendar();
		form.bookingCalendar().clearNoSessionDates();
		listSessions();
		clearScreen(true);		
		initialiseCalendar();
		form.bookingCalendar().setEnabled(true);
	}
	
	private void listSessions()
	{		
		Date currentDate = domain.getCurrentMonth(form.cmbService().getValue(), form.cmbLocation().getValue(), form.ccConsultant().getValue(), form.qmbProcedure().getValue(), form.cmbTheatreType().getValue());
		if (currentDate != null)	
		{
			if (!form.getLocalContext().getCurrentDateIsNotNull())
			{
				form.bookingCalendar().setCurrentMonth(currentDate);
				form.getLocalContext().setCurrentDate(currentDate);
			}
		}
		
		Date dateStart = new Date(form.bookingCalendar().getCurrentMonth().getYear(), form.bookingCalendar().getCurrentMonth().getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendar().getCurrentMonth().getYear(), form.bookingCalendar().getCurrentMonth().getMonth(), form.bookingCalendar().getCurrentMonth().getNumberOfDaysInTheMonth());
		
		SessionTheatreVoCollection voCollSessionShort = domain.listSession(dateStart, dateEnd, form.cmbService().getValue(), form.cmbLocation().getValue(), form.ccConsultant().getValue(), form.qmbProcedure().getValue(), form.cmbTheatreType().getValue(), form.intRequiredProcTime().getValue(), engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS));
		form.getLocalContext().setSessions(voCollSessionShort);
	}
		
	private void initialiseCalendar()
	{
		SessionTheatreVoCollection voCollSessionShort = form.getLocalContext().getSessions();
		if (voCollSessionShort == null)
			return;

		// go through the sessions for this month and where there are no
		// sessions for a given calendar date
		// call addNoSessionDates which effectively disableds that date on the
		// calendar
		Date dateStart = new Date(form.bookingCalendar().getCurrentMonth().getYear(), form.bookingCalendar().getCurrentMonth().getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendar().getCurrentMonth().getYear(), form.bookingCalendar().getCurrentMonth().getMonth(), form.bookingCalendar().getCurrentMonth().getNumberOfDaysInTheMonth());

		ArrayList<SessionTheatreVo> sessionList = new ArrayList<SessionTheatreVo>();
		for (int i = 0; i < voCollSessionShort.size(); i++)
		{
			sessionList.add(i, voCollSessionShort.get(i));
		}

		int count = 0;
		Date dateSession = dateStart;
		while (dateSession.isLessOrEqualThan(dateEnd))
		{
			SessionTheatreVo voSessionShort = null;
			boolean bFound = false;
			for (int i = 0; i < sessionList.size(); i++)
			{
				voSessionShort = (SessionTheatreVo) sessionList.get(i);
				if (voSessionShort.getSessionDate().equals(dateSession))
				{
					bFound = true;
					form.bookingCalendar().addPercentage(dateSession, calculatePercentage(dateSession));
				}
			}
			if (!bFound)
				form.bookingCalendar().addNoSessionDates(new Date(dateSession));
			else
			{
				count++;
			}
			dateSession.addDay(1);
		}
		
		addColoursForKPIDate();
	}
	
	private int calculatePercentage(Date dateSession)
	{
		SessionTheatreVoCollection voCollSessionShort = form.getLocalContext().getSessions();
		SessionTheatreVoCollection voCollSelectedSessions = new SessionTheatreVoCollection();

		// go through Sessions Collection get matching ones for this day
		for (int i = 0; i < voCollSessionShort.size(); i++)
		{
			if (voCollSessionShort.get(i).getSessionDate().equals(dateSession))
				voCollSelectedSessions.add(voCollSessionShort.get(i));
		}

		int totalMins = 0, remainingMins = 0;
		for (int i = 0; i < voCollSelectedSessions.size(); i++)
		{
			totalMins += calculateDuration( voCollSelectedSessions.get(i).getStartTm(), voCollSelectedSessions.get(i).getEndTm()); 
			if(voCollSelectedSessions.get(i).getTheatreProceduresRemainingIsNotNull())
				remainingMins += voCollSelectedSessions.get(i).getTheatreProceduresRemaining().getRemainingTimeInMins();
		}

		int bookedmins = totalMins - remainingMins;
		return (int) (bookedmins * 100.0f / totalMins);
	}
	
	private int calculateDuration(Time startTm, Time endTm)
	{
		if(startTm == null || endTm == null)
			return 0;
			
		int fromValue = (startTm.getHour() * 60) + startTm.getMinute();
		int toValue = (endTm.getHour() * 60) + endTm.getMinute();
		return toValue - fromValue;
	}

	private void addColoursForKPIDate()
	{
		//WDEV-8017 - 65 days
		Date[] arrDates = form.getLocalContext().getKPIDays();
		if(arrDates == null || arrDates.length == 0)//WDEV-11713
			return;
		//WDEV-11713 Start
		//Get no of weeks
		/*WDEV-11761
		 * int noOfWeeks = (int) Math.ceil((float)arrDates.length/5);
		
		int colorInterval = 18;
		if (noOfWeeks > 1)
			colorInterval = (int) Math.floor(18/(noOfWeeks-1));
		
		if (colorInterval <= 0)
			colorInterval = 1;
		
		
		for (int  i = 0 ; i < arrDates.length ; i++)
		{
				int week = (int) Math.floor(i/5);
				
				int colorIndex = week*colorInterval;
				if (colorIndex > 17 || week == noOfWeeks-1)
				{
					colorIndex = 17;
				}
	
				form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(colors[colorIndex][0],colors[colorIndex][1],colors[colorIndex][2]));
		}*/
		//WDEV-11761 - Start
		int noOfColors = (int) Math.ceil((float)arrDates.length/5);
		float colorGap = 510;
		float realValue = 0;
		if (noOfColors > 2)
		 colorGap = colorGap/(noOfColors-1);
		if (colorGap<1)
			colorGap=1;
		int[] startColor = new int[]{0,255,0};
		int[] middleColor = new int[]{255,255,0};	
		int[] endColor = new int[]{255,0,0};
		
		int[] currColor = startColor;
		int weekForColor = 0;
		for (int  i = 0 ; i < arrDates.length ; i++)
		{
			int colorNo = (int) Math.floor(i/5);
			if (colorNo == 0)
			{
				//First color
				form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(startColor[0],startColor[1],startColor[2]));
				continue;
			}
			if (colorNo+1 >= noOfColors)
			{
				//Red - Last color
				form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(endColor[0],endColor[1],endColor[2]));
				continue;
			}
			//should show yellow color?
			if ((noOfColors%2==1) && (colorNo == noOfColors/2))
			{
				form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(middleColor[0],middleColor[1],middleColor[2]));
				currColor = middleColor;
				realValue = 255;
				continue;
			}
			//Calculate color
			if (weekForColor == colorNo)
			{
				form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(currColor[0],currColor[1],currColor[2]));
			}
			else
			{
				//Calculate next color
				float rest =  colorGap;
				if (currColor[0] < 255)
				{
					rest = realValue + colorGap - 255;
					realValue +=colorGap;
					currColor[0] = (int) realValue;
					if (rest <0)
						rest = 0;
					if (currColor[0] > 255)
					{
						realValue = 255;
						currColor[0] = 255;
					}
					
				}
				if (currColor[0] == 255)
				{
					
					realValue = realValue - rest;
					currColor[1] = (int)realValue;
					
					if (currColor[1] < 0)
						currColor[1]=0;
					
				}
				weekForColor = colorNo;
				form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(currColor[0],currColor[1],currColor[2]));
			}
		}
		
		//WDEV-11761 - End
		
		
		
		//WDEV-11713 Stop
		/*WDEV-11713
		 * if(arrDates.length == 65)
		 
		{
			//every 5 days (week) change the colour
			for(int i=0;i<arrDates.length; i++)
			{
				if(i < 5)
				{
					//Week 1
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(0, 153, 0));
				}
				else if(i > 4 && i < 10)
				{
					//Week 2
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(0, 255, 0));
				}
				else if(i > 9 && i < 15)
				{
					//Week 3
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(157, 255, 60));
				}
				else if(i > 14 && i < 20)
				{
					//Week 4
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(128, 255, 128));
				}
				else if(i > 19 && i < 25)
				{
					//Week 5
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(174, 255, 174));
				}
				else if(i > 24 && i < 30)
				{
					//Week 6
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(255, 255, 183));
				}
				else if(i > 29 && i < 35)
				{
					//Week 7
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(255, 255, 128));
				}
				else if(i > 34 && i < 40)
				{
					//Week 8
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(255, 255, 0));
				}
				else if(i > 39 && i < 45)
				{
					//Week 9
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(255, 128, 0));
				}
				else if(i > 44 && i < 50)
				{
					//Week 10
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(243, 87, 20));
				}
				else if(i > 49 && i < 55)
				{
					//Week 11
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(255, 128, 128));
				}
				else if(i > 54 && i < 60)
				{
					
					//Week 12
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(255, 89, 89));
				}	
				else if(i > 59 && i < 65)
				{
					//Week 13
					form.bookingCalendar().setBackColor(arrDates[i], Color.fromRGB(255, 0, 0));
				}
			}
			
		}*/
	}
	
	private void clearScreen(boolean leaveInstantiatedData)
	{
		form.grdTheatreSession().getRows().clear();
		
		if(!leaveInstantiatedData)
		{
			form.grdSelected().getRows().clear();
			form.txtBookingComments().setValue(null);
		}
		
		form.getContextMenus().RefMan.getBookAppointmentAddSlotADD_SLOTItem().setVisible(false);
	}

	@Override
	protected void onBtnBookClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(!kpiValidateNeeded())
			if(!apptInThePastValidateNeeded())
				doBooking();
	}

	private boolean apptInThePastValidateNeeded()
	{
		boolean isValidationNeeded = false;
		if(ConfigFlag.UI.DISPLAY_WARNING_MESSAGE_IF_BOOKING_IN_PAST.getValue())
		{
			if(isApptInthePast(form.getLocalContext().getSelectedAppointments()))
			{
				form.getLocalContext().setApptInPastMessageBoxId(engine.showMessage("The selected date of the appointment is in the past. Do you wish to continue to book the appointment", "Booking Historical Appointment?", MessageButtons.YESNO));
				isValidationNeeded = true;
			}
		}
		
		return isValidationNeeded;
	}

	private boolean isApptInthePast(BookingAppointmentTheatreVoCollection selectedAppointments)
	{
		if(selectedAppointments != null)
		{
			for(BookingAppointmentTheatreVo voAppt : selectedAppointments)
			{
				if(voAppt.getID_Booking_Appointment() == null || voAppt.getRequiresRebookIsNotNull())
					if(voAppt.getAppointmentDateIsNotNull() && voAppt.getAppointmentDate().isLessThan(new Date()))
						return true;
			}
		}
		
		return false;
	}

	/**
	 * 
	 */
	private boolean kpiValidateNeeded()
	{
		boolean isValidationNeeded = false;
		//WDEV-9539
		if(form.dteEndDayKPI().getValue() != null)
		{
			if(form.getLocalContext().getSelectedAppointmentsIsNotNull())
			{
				if(form.getLocalContext().getSelectedAppointments().size() == 1)
				{
					BookingAppointmentTheatreVo voAppt = form.getLocalContext().getSelectedAppointments().get(0);
					if(voAppt.getAppointmentDateIsNotNull() && voAppt.getAppointmentDate().isGreaterThan(form.dteEndDayKPI().getValue()))
					{
						form.getLocalContext().setKPIMessageBoxId(engine.showMessage("Appointment Date is outside the End 13 week KPI date,\nDo you want to continue?", "Warning", MessageButtons.YESNO));
						isValidationNeeded = true;
					}
				}
			}
		}
		
		return isValidationNeeded;
	}

	/**
	 * 
	 */
	private void doBooking()
	{
		Sch_BookingTheatreVo voBooking = form.getLocalContext().getSch_Booking();
		if(voBooking == null)
			engine.showMessage("Nothing to Book");
			
		voBooking.setPatient(form.getLocalContext().getPatient());
		voBooking.setBookingComments(form.txtBookingComments().getValue());

		voBooking.setAppointments(getSelectedValuesFromSelectedGrid(form.getLocalContext().getSelectedAppointments()));
		
		//WDEV-10182
		Boolean isRebook = form.getLocalContext().getIsRebookApptSelectedIsNotNull() && form.getLocalContext().getIsRebookApptSelected();
		
		if (voBooking.getAppointmentsIsNotNull())
		{
			for (int i = 0; i < voBooking.getAppointments().size(); i++)
			{	
				voBooking.getAppointments().get(i).setApptStatus(Status_Reason.BOOKED);
				voBooking.getAppointments().get(i).setPatient(form.getGlobalContext().Core.getPatientShort());
				
				if((form.chkChangeTimeRequired().getValue() || form.getLocalContext().getSuitableForSurgeryDurationIsNotNull())  && form.intRequiredProcTime().getValue() != null) //WDEV-11928
					voBooking.getAppointments().get(i).setCustomProcedureDuration(form.intRequiredProcTime().getValue());
				
				//if we are rebooking now set the requires rebooking to false for the appt
				if(form.getLocalContext().getIsRebookApptSelectedIsNotNull() && form.getLocalContext().getIsRebookApptSelected())
				{
					if(form.getGlobalContext().Scheduling.getTheatreAppointmentIsNotNull())
					{
						if(voBooking.getAppointments().get(i).equals(form.getGlobalContext().Scheduling.getTheatreAppointment()))
							voBooking.getAppointments().get(i).setRequiresRebook(false);
					}
				}
			}
		}
		else
			return;
		
		//------------------
		String[] arrErodErrors = null;
		for(int i=0;i<form.grdSelected().getRows().size();i++)
		{
			grdSelectedRow row = form.grdSelected().getRows().get(i);
			BookingAppointmentTheatreVo appt = row.getValue();
			//WDEV-11777 - setting the appointment for the slot
			if(row.getColComeInTime().getValue() != null)
			{
				if(row.getColComeInTime().getValue() instanceof SessionTheatreTCISlotLiteVo)
					((SessionTheatreTCISlotLiteVo)row.getColComeInTime().getValue()).setAppointment(appt);
				else if(row.getColComeInTime().getValue() instanceof TCITime)
					appt.getTheatreBooking().setTCITime((TCITime) row.getColComeInTime().getValue());
			}
				
			if(appt != null )
			{
				arrErodErrors = updateAppointmentsWithErodDate(voBooking.getAppointments(), row.getcolErodDate(),row.getcolErod());
				if(arrErodErrors != null)
					break;
			}

		}
			
		if (arrErodErrors != null)
		{
			engine.showErrors(arrErodErrors) ;
			return;
		}


		//------------------
		//wdev-13765
		TheatreType theatreTreatm = null;
		if(form.getGlobalContext().Scheduling.getTheatreSessionIsNotNull())
		{
			SessionTheatreVo tempVO = domain.getSessionTheatre(form.getGlobalContext().Scheduling.getTheatreSession());
			
			if(tempVO != null)
			{
				theatreTreatm = tempVO.getTheatreType();
			}
		}
		
		//---------
		try
		{
			SessionTheatreTCISlotLiteVo slot = null;
			if(form.grdSelected().getRows().get(0).getColComeInTime().getValue() instanceof SessionTheatreTCISlotLiteVo)
				slot = (SessionTheatreTCISlotLiteVo)form.grdSelected().getRows().get(0).getColComeInTime().getValue();
			
			voBooking = domain.saveTheatreBooking(voBooking, form.getGlobalContext().RefMan.getCatsReferral(), slot,theatreTreatm); //WDEV-12918 - rebook param not used anyway  //wdev-13765
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			clearScreen(false);
			open();
			form.setMode(FormMode.VIEW);
			return;
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		
		if(!saveICP(voBooking))
			return;

		clearScreen(false);
		clearContexts();
		open();
		form.setMode(FormMode.VIEW);
		
		//WDEV-8295		
		form.getGlobalContext().Scheduling.setAppointmentIds(getApptIds(voBooking));		
		//WDEV-7528
		form.getGlobalContext().Scheduling.setTheatreSession(voBooking.getAppointments().get(0).getSession());
		engine.open(form.getForms().Scheduling.SortTheatreAppointments);
	}
	//----------------------------wdev-9744
	private String[] updateAppointmentsWithErodDate(BookingAppointmentTheatreVoCollection appointments, Date erodDate,Boolean bEROD)
	{
		ArrayList<String> errors = new ArrayList<String>();
		
		if(appointments == null )
			return null;
		
		if(erodDate == null && bEROD == true)
			errors.add("'Offered Date' is mandatory when EROD is checked");
		else
		{
			for(BookingAppointmentTheatreVo voAppt : appointments)
			{
				//if(voAppt.getSessionSlotIsNotNull() && voAppt.getSessionSlot().equals(sessionSlot))
					if(erodDate == null || erodDate.isGreaterOrEqualThan(new Date()))
					{
						voAppt.setEarliestOfferedDate(erodDate);
						
						updateHistoryStatus(voAppt);
						
					}
					else
					{
						errors.add("'Offered Date' must be greater than or equal to Today");
						break;
					}
			}
		}

		return (String[]) (errors.size() > 0 ? errors.toArray(new String[0]) : null);
	}
	
	private void updateHistoryStatus(BookingAppointmentTheatreVo appoitment)
	{
		if(appoitment == null)
			return;
		
		Appointment_StatusVoCollection tempCol = form.getLocalContext().getApptStatus();
		for(Appointment_StatusVo statusVo : appoitment.getApptStatusHistory())
		{
			for(Appointment_StatusVo statusVo1: tempCol)
			{
				if(statusVo.equals(statusVo1))
					statusVo.setEarliestOfferedDate(appoitment.getEarliestOfferedDate());
			}
		}
	}
	//---------------------
	public java.util.ArrayList getApptIds(Sch_BookingTheatreVo voBooking)
	{
		if(voBooking.getAppointments() == null || voBooking.getAppointments().size() == 0)
			return null;
		
		java.util.ArrayList ids = new java.util.ArrayList();
		for(int i=0;i<voBooking.getAppointments().size();i++)
			ids.add(voBooking.getAppointments().get(i).getID_Booking_Appointment());
		
		return ids;
	}
	

	private boolean saveICP(Sch_BookingTheatreVo voBooking)
	{
		//if no CareContext we cant saveICP
		if(form.getLocalContext().getReferralCareContext() == null)
			return false;
		
		form.getLocalContext().setSelectedAppointments(voBooking.getAppointments());	
		PatientICPFullVo voICP = domain.getPatientICP(form.getLocalContext().getReferralCareContext());
			
		if  (voICP != null)
		{
			Booking_AppointmentRefVoCollection voApptsColl = voICP.getAppointments();
			if (voApptsColl == null)
				voApptsColl = new Booking_AppointmentRefVoCollection();
	
			BookingAppointmentTheatreVoCollection voCollBookAppointments = form.getLocalContext().getSelectedAppointments();
				
			for (int i = 0; i < voCollBookAppointments.size(); i++)
				voApptsColl.add(voCollBookAppointments.get(i));
			
			voICP.setAppointments(voApptsColl);
				
			String[] strErr = voICP.validate();
			if (strErr != null)
			{
				engine.showErrors(strErr);
				return false;
			}
	
			try 
			{
				voICP = domain.savePatientICP(voICP);
			} 
			catch (DomainInterfaceException e) 
			{
				engine.showMessage(e.getMessage());
				return false;
			} 
			catch (StaleObjectException e) 
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				clearScreen(false);
				open();
				form.setMode(FormMode.VIEW);
				return false;
			}
		}
		
		return true;
	}

	private BookingAppointmentTheatreVoCollection getSelectedValuesFromSelectedGrid(BookingAppointmentTheatreVoCollection selectedAppointments)
	{
		List<String> errors = new ArrayList<String>();
		if(selectedAppointments != null)
		{
			for(BookingAppointmentTheatreVo voTheatreAppt : selectedAppointments)
			{
				for(int i=0;i<form.grdSelected().getRows().size();i++)
				{
					grdSelectedRow row = form.grdSelected().getRows().get(i);

					if(row.getValue().equals(voTheatreAppt))
					{
						if(row.getColComeInTime().getValue() == null)
							errors.add("'Come in Time' is mandatory");
						else
						{
							if(row.getColComeInTime().getValue() instanceof SessionTheatreTCISlotLiteVo)
							{
								voTheatreAppt.setApptStartTime(((SessionTheatreTCISlotLiteVo)row.getColComeInTime().getValue()).getToComeInTime());
								//WDEV-11887
								if(voTheatreAppt.getCurrentStatusRecordIsNotNull())
									voTheatreAppt.getCurrentStatusRecord().setApptTime(voTheatreAppt.getApptStartTime());
							}
						}
							
						if(row.getColConsultant().getValue() != null)
							voTheatreAppt.getTheatreBooking().setConsultant(((Session_ListOwnerVo) row.getColConsultant().getValue()).getHcp());
					}
					
					if(row.getcolErod() && row.getcolErodDate() == null)
						errors.add("'Offered Date' is mandatory");
					
				}
			}
		}
		
		if(errors.size() > 0)
		{
			engine.showErrors("Validation Errors", errors.toArray(new String[0]));
			return null;
		}
				
		return selectedAppointments;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearContexts();
		clearScreen(false);
		open();
		form.setMode(FormMode.VIEW);		
	}

	private void clearContexts()
	{
		form.getLocalContext().setIsRebookApptSelected(null); //aciubotaru - WDEV-7860 
		form.getLocalContext().setSch_Booking(null);
		form.getLocalContext().setSelectedAppointments(null);
		form.getLocalContext().setSelectedSessions(null);
		form.getLocalContext().setSuitableForSurgeryDuration(null); //WDEV-11928
		form.getGlobalContext().Scheduling.setTheatreAppointment(null);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.BookAppointment.REBOOK_APPT:
				if(form.treInvAppts().getValue() instanceof BookingAppointmentLiteVo)
				{
					//get the full appointment record to be rebooked and set the appropriate context to reinitialise the screen
					BookingAppointmentTheatreVo voAppt = domain.getBookingAppointment((Booking_AppointmentRefVo)form.treInvAppts().getValue());
					form.getGlobalContext().Scheduling.setTheatreAppointment(voAppt);
					if(voAppt != null)
					{
						if(voAppt.getTheatreBookingIsNotNull())
						{
							form.getGlobalContext().Scheduling.setTheatreProcedure(voAppt.getTheatreBooking().getProcedure());
							form.getGlobalContext().Scheduling.setTheatreConsultant(voAppt.getTheatreBooking().getConsultant());
						}
						if(voAppt.getSessionIsNotNull())
							form.getGlobalContext().Scheduling.setTheatreType(voAppt.getSession().getTheatreType());
						
						reInitialize();	
					}

				}	
			break;
			default:
		}	
	}
	
	private void reInitialize()
	{
		form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem().setVisible(false);
		form.btnBook().setEnabled(false);
		form.btnCancel().setEnabled(true);
		form.bookingCalendar().setEnabled(false);
		form.bookingCalendar().setCurrentMonth(new Date());
		form.txtBookingComments().setValue(null);
		clearSearchCriteria();
		clearBookingCalendar();
		repopulateScreen();
	}
	
	private void repopulateScreen()
	{
		if(form.getGlobalContext().Scheduling.getTheatreAppointment() == null)
			return;
				
		//SITE-508
		form.getGlobalContext().Scheduling.setTheatreAppointment(domain.getBookingAppointment(form.getGlobalContext().Scheduling.getTheatreAppointment()));

		//store the same booking record
		Sch_BookingTheatreVo voBooking = domain.getSch_BookingByAppt(form.getGlobalContext().Scheduling.getTheatreAppointment());
		form.getLocalContext().setSch_Booking(voBooking);
		if(voBooking != null)
			form.txtBookingComments().setValue(voBooking.getBookingComments());
		
		form.cmbService().setValue(form.getGlobalContext().Scheduling.getTheatreService());
		//service
		if(form.cmbService().getValue() == null && form.getGlobalContext().Scheduling.getTheatreService() instanceof ServiceLiteVo)
		{
			form.cmbService().newRow(form.getGlobalContext().Scheduling.getTheatreService(), ((ServiceLiteVo)form.getGlobalContext().Scheduling.getTheatreService()).getServiceName());
			form.cmbService().setValue(form.getGlobalContext().Scheduling.getTheatreService());
		}
		//procedure
		if(form.getGlobalContext().Scheduling.getTheatreProcedureIsNotNull())
		{
			form.qmbProcedure().newRow(form.getGlobalContext().Scheduling.getTheatreProcedure(), form.getGlobalContext().Scheduling.getTheatreProcedure().getProcedureName());
			form.qmbProcedure().setValue(form.getGlobalContext().Scheduling.getTheatreProcedure());
			qmbProcedureValueChanged();				
		}
		
		//WDEV-9643 custom procedure length
		if(form.getGlobalContext().Scheduling.getTheatreAppointmentIsNotNull())
		{
			if(form.getGlobalContext().Scheduling.getTheatreAppointment().getCustomProcedureDurationIsNotNull())
			{
				form.chkChangeTimeRequired().setValue(true);
				form.intRequiredProcTime().setEnabled(true);
				form.intRequiredProcTime().setValue(form.getGlobalContext().Scheduling.getTheatreAppointment().getCustomProcedureDuration());
			}
		}
		
		//consultant
		if(form.getGlobalContext().Scheduling.getTheatreConsultantIsNotNull())
			form.ccConsultant().setValue(form.getGlobalContext().Scheduling.getTheatreConsultant());		
		
		//Theatre Type 
		if(form.getGlobalContext().Scheduling.getTheatreTypeIsNotNull())
			form.cmbTheatreType().setValue(form.getGlobalContext().Scheduling.getTheatreType());		
				
		if(validateSearchCriteria() == null)
		{
			loadSessions();
			//set a flag to say that the appt to be rebooked hasnt yet been selected
			form.getLocalContext().setIsRebookApptSelected(false);
			form.setMode(FormMode.EDIT);
			form.bookingCalendar().setSelectedDay(new Date());
			addTheatreSessions(new Date());
			form.btnCancel().setEnabled(true);
			
			form.cmbService().setEnabled(false);
			form.qmbProcedure().setEnabled(false);
			form.cmbTheatreType().setEnabled(false);
			form.ccConsultant().setEnabled(false);
			form.imbClear().setEnabled(false);
		}
	}

	@Override
	protected void onBookingCalendarDateSelected(Date date) throws PresentationLogicException
	{
		addTheatreSessions(date);
	}

	private void addTheatreSessions(Date selDate)
	{		
		// go through sessions getting ones for the selected date
		SessionTheatreVoCollection voCollSessionShort = form.getLocalContext().getSessions();
		if (voCollSessionShort == null)
			return;

		SessionTheatreVoCollection voCollSelectedSessions = new SessionTheatreVoCollection();
		for (int i = 0; i < voCollSessionShort.size(); i++)
		{
			if (voCollSessionShort.get(i).getSessionDate().equals(selDate))
				voCollSelectedSessions.add(voCollSessionShort.get(i));
		}	

		form.getLocalContext().setSelectedSessions(voCollSelectedSessions);
		loadTheatreSlots();
	}

	private void loadTheatreSlots()
	{
		// WDEV-12080 - Get Anaesthetic type from latest FitForSurgery record
		
		
		SessionTheatreVoCollection voCollSelectedSessions = form.getLocalContext().getSelectedSessions();

		if (voCollSelectedSessions == null || voCollSelectedSessions.size() == 0)
			return;
		
		for(SessionTheatreVo voSession : voCollSelectedSessions)
		{
			boolean hasBookingRights = doesRoleHaveBookingRightsForSession(voSession);
			
			if(voSession.getTheatreProceduresRemainingIsNotNull())
			{
				// Optimization - DO NOT put a domain call inside a for when it's not needed
				String noBooked = domain.countNonCancelledAppointmentsForSession(voSession).toString();

				for(TheatreProcedureLiteVo voTheatreProcedure : voSession.getTheatreProceduresRemaining().getProcedureDetails())
				{
					if(isTheatreSlotAlreadyAdded(voTheatreProcedure.getProcedure(), voSession) || !isProcedureSelectedInSearch(voTheatreProcedure))
						continue;
					grdTheatreSessionRow row = form.grdTheatreSession().getRows().newRow();
					row.setColDate(voSession.getSessionDate());
					row.setColConsultant(getConsultantsListString(voSession));
					
					//WDEV-11777 add count of appts
					row.setColNoBooked(noBooked);
					
					row.setColTime(voSession.getTheatreProceduresRemainingIsNotNull() && voSession.getTheatreProceduresRemaining().getRemainingTimeInMinsIsNotNull() ? voSession.getTheatreProceduresRemaining().formatTimeRemaining() : "");
					
					if(row.getColTime().equals("00hrs 00mins "))
						row.setTextColor(Color.Red);
					
					row.setColLocation(voSession.getSchLocationIsNotNull() ? voSession.getSchLocation().getName() : "");
					row.setColSelectReadOnly(!hasBookingRights);
					if(!hasBookingRights)
						row.setTooltipForColSelect("Role does not have rights to book in this Session");
					
					TheatreBookingLiteVo voBooking = new TheatreBookingLiteVo();
					voBooking.setSession(voSession);
					voBooking.setProcedure(voTheatreProcedure.getProcedure());
					voBooking.setAnaestheticType(form.getLocalContext().getAnaestheticType());  		// WDEV-12080 - Set anaesthetic type to Theatre Booking record
				
					row.setValue(voBooking);
				}
			}
		}
	}
	
	private boolean isProcedureSelectedInSearch(TheatreProcedureLiteVo voTheatreProcedure)
	{
		if (voTheatreProcedure == null)
			throw new CodingRuntimeException("voTheatreProcedure is null in method isProcedureSelectedInSearch");
		
		if(form.qmbProcedure().getValue() != null)
		{
			if(form.qmbProcedure().getValue().getIGenericItemInfoID() != null && voTheatreProcedure.getProcedureIsNotNull() && voTheatreProcedure.getProcedure().getID_ProcedureIsNotNull())
				if(form.qmbProcedure().getValue().getIGenericItemInfoID().equals(voTheatreProcedure.getProcedure().getID_Procedure()))
					return true;
		}
			
		return false;
	}

	private boolean isTheatreSlotAlreadyAdded(ProcedureLiteVo voProcedure, SessionTheatreVo voSession)
	{
		for(int i=0;i<form.grdTheatreSession().getRows().size();i++)
		{
			grdTheatreSessionRow row = form.grdTheatreSession().getRows().get(i);
			if(row.getValue() != null)
			{
				if(row.getValue().getProcedureIsNotNull() &&  row.getValue().getSessionIsNotNull())
				{
					if(voProcedure != null && voSession != null)
					{
						if(row.getValue().getProcedure().equals(voProcedure) && row.getValue().getSession().equals(voSession))
							return true;
					}
				}	
			}
		}
			
		return false;
	}

	private String getConsultantsListString(SessionTheatreVo voSession)
	{
		if (voSession == null || voSession.getListOwners() == null)
			return "";
		
		String strConsultant = "";
		boolean loopAgain = false;
		for(int i=0;i<voSession.getListOwners().size();i++)
		{
			Session_ListOwnerVo voCons = voSession.getListOwners().get(i);
			if(voCons.getHcpIsNotNull())
				strConsultant += voCons.getHcp().toString();
			
			loopAgain = voSession.getListOwners().size() - i > 1;
			if(loopAgain)
				strConsultant += ",";
		}
		
		return strConsultant;
	}

	private Boolean doesRoleHaveBookingRightsForSession(Sch_SessionRefVo voSession)
	{		
		Map map = form.getLocalContext().getSessionBookingRights();
		if(map == null)
			map = new HashMap();
		
		Object entry = map.get(voSession.getID_Sch_Session());
		
		if(entry == null)
		{
			map.put(voSession.getID_Sch_Session(), domain.hasBookingRights(engine.getLoggedInRole(), voSession));
			entry = map.get(voSession.getID_Sch_Session());
		}
		
		form.getLocalContext().setSessionBookingRights(map);
		return (Boolean) entry;
	}

	@Override
	protected void onBookingCalendarMonthSelected(Date date) throws PresentationLogicException
	{
		if(validateSearchCriteria() == null)
		{
			clearBookingCalendar();
			listSessions();
			form.bookingCalendar().clearNoSessionDates();
			initialiseCalendar();
		}		
	}

	@Override
	protected void onGrdTheatreSessionGridCheckBoxClicked(int column, grdTheatreSessionRow row, boolean isChecked) throws PresentationLogicException
	{
		//WDEV-9539
		boolean isErod = false;
		Date erodDate = null;
		if(form.grdSelected().getRows().size() > 0)
		{
			//hold onto this selection and add it into any new selection
			isErod = form.grdSelected().getRows().get(0).getcolErod();
			erodDate = form.grdSelected().getRows().get(0).getcolErodDate();
		}
		
		BookingAppointmentTheatreVoCollection voCollBookAppointments = form.getLocalContext().getSelectedAppointments();
		if (voCollBookAppointments == null)
			voCollBookAppointments = new BookingAppointmentTheatreVoCollection();
		
		form.getGlobalContext().Scheduling.setTheatreSession(null);
		if (row.getColSelect() == true)
		{
			form.getGlobalContext().Scheduling.setTheatreSession(row.getValue().getSession());
			
			//overbooking
			String message = allowBooking(row.getValue().getSession(), row.getValue());
			if(message != null)
			{
				engine.showErrors(new String[]{message});
				row.setColSelect(false);
				loadAppointmentsGrid(voCollBookAppointments, isErod, erodDate);
				return;
			}
				
			clearAllOtherSelections(row);
			
			///////////////////////////////////////////
			//rebook///////////////////////////////////		
			if(form.getLocalContext().getIsRebookApptSelectedIsNotNull() && !form.getLocalContext().getIsRebookApptSelected().booleanValue())
			{
				//rebook appt already selected
				
					form.getLocalContext().setIsRebookApptSelected(true);
	
					if(!form.getGlobalContext().Scheduling.getTheatreAppointmentIsNotNull())
						throw new CodingRuntimeException("Rebook appointment not set in Global Context");			
					
			}
			//end rebook/////////////////////////////////
			/////////////////////////////////////////////
			
			boolean bInListAlready = false;		
			if (row.getValue() instanceof TheatreBookingLiteVo)
			{				
				
				//when rebooking only one appt can be booked this replaces the one in the list with the one selected in the slots grid
				if(form.getLocalContext().getIsRebookApptSelectedIsNotNull() && form.getLocalContext().getIsRebookApptSelected().booleanValue())
				{
								
							voCollBookAppointments.clear();
							voCollBookAppointments.add(createAppointment((BookingAppointmentTheatreVo) form.getGlobalContext().Scheduling.getTheatreAppointment().clone(), row.getValue()));
							loadAppointmentsGrid(voCollBookAppointments,isErod,erodDate);
							return;
						
				}
				
				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					TheatreBookingLiteVo voTheatreBooking = voCollBookAppointments.get(i).getTheatreBooking();
					if(voTheatreBooking != null && voTheatreBooking.getProcedureIsNotNull() && voTheatreBooking.getSessionIsNotNull()) 
					{
						if (voTheatreBooking.getProcedure().equals(row.getValue().getProcedure()) && voTheatreBooking.getSession().equals(row.getValue().getSession()))
							bInListAlready = true;						
					}
				}
				if (!bInListAlready && voCollBookAppointments.size() == 0)
					voCollBookAppointments.add(createAppointment(null, row.getValue()));
				else
				{
					voCollBookAppointments.clear();
					voCollBookAppointments.add(createAppointment(form.getGlobalContext().Scheduling.getTheatreAppointment(), row.getValue()));
					loadAppointmentsGrid(voCollBookAppointments, isErod, erodDate);
				}
			}
		}
		else
		{
			if (row.getValue() instanceof TheatreBookingLiteVo)
			{
				//WDEV-10119,WDEV-10058,WDEV-9012
				if(form.getLocalContext().getIsRebookApptSelectedIsNotNull())
					form.getLocalContext().setIsRebookApptSelected(false);
				
				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					TheatreBookingLiteVo voTheatreBooking = voCollBookAppointments.get(i).getTheatreBooking();
					if(voTheatreBooking != null && voTheatreBooking.getProcedureIsNotNull() && voTheatreBooking.getSessionIsNotNull()) 
					{
						if (voTheatreBooking.getProcedure().equals(row.getValue().getProcedure()) && voTheatreBooking.getSession().equals(row.getValue().getSession()))
							voCollBookAppointments.remove(voCollBookAppointments.get(i));
					}
				}
			}
		}

		loadAppointmentsGrid(voCollBookAppointments,isErod,erodDate);
		
		if (isChecked)
		{
			form.setMode(FormMode.EDIT);
			form.btnCancel().setEnabled(true);
		}
	}
	
	/*
	 * check if limit(if any) has been reached for the procedure selected 
	 */
	private String allowBooking(SessionTheatreVo session, TheatreBookingLiteVo voBooking)
	{
		//if we have an overbooking right we disregard all the checks
		if(engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS))
			return null;
		
		
		if(session != null && voBooking != null)
		{
			if(session.getTheatreProceduresRemainingIsNotNull() && voBooking.getProcedureIsNotNull())
			{
				//if the procedure is limited and the number of procedures left is 0
				for(TheatreProcedureLiteVo voTheatreProc : session.getTheatreProceduresRemaining().getProcedureDetails())
				{
					if(voTheatreProc.getProcedure().equals(voBooking.getProcedure()))
					{
						if(voTheatreProc.getIsLimitedIsNotNull() && voTheatreProc.getIsLimited() && voTheatreProc.getNumberOfProceduresLeftIsNotNull() && voTheatreProc.getNumberOfProceduresLeft() == 0)
							return "Limit has been reached for this procedure.";
					}
				}
				
				Integer customProcedureDuration = null;
				if(form.chkChangeTimeRequired().getValue())
					customProcedureDuration = form.intRequiredProcTime().getValue();
				
				Integer durationToUseForValidation = null;
				if(customProcedureDuration != null)
					durationToUseForValidation = customProcedureDuration;
				//WDEV-11977
				else if(form.getLocalContext().getSuitableForSurgeryDurationIsNotNull())
					durationToUseForValidation = form.getLocalContext().getSuitableForSurgeryDuration();
				else
					durationToUseForValidation = voBooking.getProcedure().getDurationInMins();
				
				//if the time required for the procedure is not available at the TheatreSlot Level
				if(session.getTheatreProceduresRemaining().getRemainingTimeInMinsIsNotNull() && durationToUseForValidation != null)
				{
					if(session.getTheatreProceduresRemaining().getRemainingTimeInMins() < durationToUseForValidation)
					{
						return "Not enough time remaining for this procedure.";
					}
				}	
			}
		}
		return null;
	}

	protected void onTreInvApptsTreeViewSelectionChanged(TreeNode node) throws PresentationLogicException
	{
		form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem().setVisible(false);
		if(form.getMode().equals(FormMode.VIEW))
		{
			if(node != null)
			{
				if(node.getValue() instanceof BookingAppointmentLiteVo &&  node.getParent().equals(form.treInvAppts().getNodeByValue(REBOOK_APPT_NODE)))
					form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem().setVisible(true);
			}			
		}
	}
	
	private void clearAllOtherSelections(grdTheatreSessionRow row)
	{
		//clear the only other appt entry as only allow rebook one appt
		for(int i=0;i<form.grdTheatreSession().getRows().size();i++)
		{
			grdTheatreSessionRow tRow = form.grdTheatreSession().getRows().get(i);
			if(!tRow.isReadOnly() && !tRow.getValue().equals(row.getValue()) && tRow.getColSelect())
				tRow.setColSelect(false);
		}
	}

	private void loadAppointmentsGrid(BookingAppointmentTheatreVoCollection voCollBookAppointments, boolean isErod, Date erodDate)
	{
		form.getLocalContext().setSelectedAppointments(voCollBookAppointments);
		form.grdSelected().getRows().clear();
		
		grdSelectedRow aRow = null;
		BookingAppointmentTheatreVo voBookAppt = null;
		for (int i = 0; i < voCollBookAppointments.size(); i++)
		{
			aRow = form.grdSelected().getRows().newRow();
			voBookAppt = voCollBookAppointments.get(i);
			aRow.setColLocation(voBookAppt.getSessionIsNotNull() && voBookAppt.getSession().getSchLocationIsNotNull() ? voBookAppt.getSession().getSchLocation().getName() : null);
			aRow.setColSession(voBookAppt.getSession().getName());
			
			//WDEV-9539 - screen only ever allows one appt selection
			aRow.setcolErod(voBookAppt.getEarliestOfferedDate() != null/*isErod*/);
			aRow.setcolErodDate(voBookAppt.getEarliestOfferedDate()/*erodDate*/);
			aRow.setcolErodDateReadOnly(voBookAppt.getEarliestOfferedDate() == null/*true*//*!isErod*/);
			
			//for this session we need to get all the session theatre slots and display in the combo
			if(voBookAppt.getSessionIsNotNull() && voBookAppt.getSession().getTheatreSlotsIsNotNull() && voBookAppt.getSession().getTheatreSlots().size() > 0)
			{
				voBookAppt.getSession().getTheatreSlots().sort();
				for(SessionTheatreTCISlotLiteVo voSessTheatreSlot : voBookAppt.getSession().getTheatreSlots())
				{
					//only load slots that have no appointment already
					if(voSessTheatreSlot.getAppointment() == null && (voSessTheatreSlot.getStatusIsNotNull() && voSessTheatreSlot.getStatus().equals(Status_Reason.SLOTOPENED)))
						aRow.getColComeInTime().newRow(voSessTheatreSlot, voSessTheatreSlot.getToComeInTime().toString());
				}
			}
			else
			{
				//load tci lookup (superceded implementation)
				TCITimeCollection collTCI = LookupHelper.getTCITime(domain.getLookupService());
				for(int p=0;p<collTCI.size();p++)
				{
					aRow.getColComeInTime().newRow(collTCI.get(p), collTCI.get(p).getText());
				}
			}
				
			if(voBookAppt.getSession().getListOwnersIsNotNull())
			{
				for(Session_ListOwnerVo voListOwner : voBookAppt.getSession().getListOwners())
					aRow.getColConsultant().newRow(voListOwner, voListOwner.getHcp().toString());
				
				if(voBookAppt.getSession().getListOwners().size() == 1)
					aRow.getColConsultant().setValue(voBookAppt.getSession().getListOwners().get(0));
			}
			
			if(voBookAppt.getTheatreBookingIsNotNull())
				aRow.setColProcedure(voBookAppt.getTheatreBooking().getProcedure());
			
			if(voBookAppt.getAppointmentDateIsNotNull())
				aRow.setColDate(voBookAppt.getAppointmentDate().toString());
			aRow.setValue(voBookAppt);
		}
		
		form.grdSelected().setReadOnly(false);

		if (form.grdSelected().getRows().size() > 0)
			form.btnBook().setEnabled(true);
		else
			form.btnBook().setEnabled(false);		
		
	}

	private BookingAppointmentTheatreVo createAppointment(BookingAppointmentTheatreVo voAppt, TheatreBookingLiteVo value)
	{
		BookingAppointmentTheatreVo voBookAppt = voAppt;
		if(voBookAppt == null)
			voBookAppt = new BookingAppointmentTheatreVo();

		voBookAppt.setSession(value.getSession());		
		voBookAppt.setAppointmentDate(value.getSession().getSessionDate());
		voBookAppt.setApptStatus(Status_Reason.BOOKED);
		voBookAppt.setTheatreBooking(value);
		
		//WDEV-6049
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voBookAppt.getAppointmentDate());
		voStatus.setApptTime(voBookAppt.getApptStartTime());
		voStatus.setStatus(voBookAppt.getApptStatus());
		//---wdev-9744
		voStatus.setEarliestOfferedDate(voBookAppt.getEarliestOfferedDate());
		//------
		voBookAppt.setCurrentStatusRecord(voStatus);
		
		if(voBookAppt.getApptStatusHistory() == null)
			voBookAppt.setApptStatusHistory(new Appointment_StatusVoCollection());
		voBookAppt.getApptStatusHistory().add(voStatus);
		//---------------------------------------------wdev-9744
		Appointment_StatusVoCollection appstatusCol;
		if(form.getLocalContext().getApptStatus() == null)
		{
			form.getLocalContext().setApptStatus(new Appointment_StatusVoCollection());
			appstatusCol = form.getLocalContext().getApptStatus();
		}
		else
			appstatusCol = form.getLocalContext().getApptStatus();
		
		
			appstatusCol.add(voStatus);
			form.getLocalContext().setApptStatus(appstatusCol);
		
		//-----------------------------------------------
		return voBookAppt;
	}

	@Override
	protected void onQmbProcedureTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbProcedure().clear();

		IGenericItem[] procedures = domain.listProcedures(value);
		if(procedures != null)
		{
			for (int i = 0; i < procedures.length; i++)
			{
				if (procedures[i].getIGenericItemInfoName() != null)
					form.qmbProcedure().newRow(procedures[i], procedures[i].getIGenericItemInfoName());
			}
			
			if(procedures.length == 1)
			{
				form.qmbProcedure().setValue(procedures[0]);
				qmbProcedureValueChanged(); //WDEV-11777
			}
			else if(procedures.length > 1)
				form.qmbProcedure().showOpened();
			else
				engine.showErrors(new String[]{"No matching records found"});
		}	
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		//WDEV-9634
		clearContexts();
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onFormModeChanged()
	{
		form.btnClose().setVisible(engine.isDialog() && !form.btnBook().isEnabled());
	}

	@Override
	protected void onBtnViewTheatreListOrderClick() throws PresentationLogicException
	{	
		form.getGlobalContext().Scheduling.setAppointmentIds(null);
		engine.open(form.getForms().Scheduling.SortTheatreAppointments);
	}

	@Override
	protected void onChkChangeTimeRequiredValueChanged() throws PresentationLogicException
	{
		if(form.chkChangeTimeRequired().getValue())
			form.intRequiredProcTime().setEnabled(true);
		else
			form.intRequiredProcTime().setEnabled(false);
	}

	@Override
	protected void onQmbProcedureValueChanged() throws PresentationLogicException
	{
		qmbProcedureValueChanged();		
	}

	/**
	 * 
	 */
	private void qmbProcedureValueChanged()
	{
		form.intRequiredProcTime().setValue(null);
		
		if(form.qmbProcedure().getValue() == null)
			return;
		
		//WDEV-9539
		if(form.qmbProcedure().getValue() instanceof ProcedureLiteVo)
			form.intRequiredProcTime().setValue(((ProcedureLiteVo)form.qmbProcedure().getValue()).getDurationInMins());
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(form.getLocalContext().getKPIMessageBoxIdIsNotNull())
		{
			if(form.getLocalContext().getKPIMessageBoxId().equals(messageBoxId))
			{
				if(result.equals(DialogResult.YES))
				{
					if(!apptInThePastValidateNeeded())
						doBooking();
				}	
			}
		}
		if(form.getLocalContext().getApptInPastMessageBoxIdIsNotNull())
		{
			if(form.getLocalContext().getApptInPastMessageBoxId().equals(messageBoxId))
			{
				if(result.equals(DialogResult.YES))
				{
					doBooking();
				}	
			}
		}
	}

	@Override
	protected void onGrdSelectedGridCheckBoxClicked(int column, grdSelectedRow row, boolean isChecked) throws PresentationLogicException
	{
		row.setcolErodDateReadOnly(!isChecked);
		
		if(!isChecked)
			row.setcolErodDate(null);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		//WDEV-11890
		if(formName.equals(form.getForms().Scheduling.SortTheatreAppointments))
		{
			//dont care about dialog result refresh acreen anyway
			loadReferralDetails();
		}
	}
}
