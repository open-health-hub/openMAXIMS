// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 4027.29767)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.contractconfiguration;

import ims.admin.vo.ConfigLocationLiteVo;
import ims.admin.vo.ConfigLocationLiteVoCollection;
import ims.admin.vo.ServiceVoLiteVo;
import ims.admin.vo.ServiceVoLiteVoCollection;
import ims.RefMan.forms.contractconfiguration.GenForm.grdDetailsRow;
import ims.RefMan.vo.CCGToContractConfigVo;
import ims.RefMan.vo.CCGToContractConfigVoCollection;
import ims.RefMan.vo.ContractConfigKPIHistoryVo;
import ims.RefMan.vo.ContractConfigKPIHistoryVoCollection;
import ims.RefMan.vo.ContractConfigShortVo;
import ims.RefMan.vo.ContractConfigShortVoCollection;
import ims.RefMan.vo.ContractConfigVo;
import ims.RefMan.vo.ContractServiceLocationsConfigVo;
import ims.RefMan.vo.ContractServiceLocationsConfigVoCollection;
import ims.core.vo.OrganisationLiteVo;
import ims.core.vo.OrganisationLiteVoCollection;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.ReferralManagementContractType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormModeChanged()
	{
		form.getLocalContext().setEditKPI(null);
		updateControlsState();
		updateMenuContext();//wdev-13616
	}
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
		
				
		
	}
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearAllScreen();
		updateControlsState();
	}
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		search(true);
	}
	@Override
	protected void onBtnEditKPIClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setEditKPI(true);
		updateControlsState();
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		newInstance();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
		updateMenuContext();//wdev-13616
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onGrdDetailsSelectionChanged()
	{
		selectInstance();
		updateControlsState();
		updateMenuContext();//wdev-13616
	}
	@Override
	protected void onGrdDetailsSelectionCleared() throws ims.framework.exceptions.PresentationLogicException
	{
		selectInstance();
		updateControlsState();
	}
	public void open() throws ims.framework.exceptions.PresentationLogicException
	{
		search();
		form.setMode(FormMode.VIEW);
	}
	@Override
	public void search() 
	{
		search(true);
	}
	public void search(boolean showErrors)
	{
		if (criteriaIsValid())
		{
			searchAndPopulate();
		}
		else
		{
			clear();
			if (showErrors)
				engine.showErrors(new String[]{"Invalid search criteria. At least one field must be filled."});
		}
		updateControlsState();
	}
	private void searchAndPopulate() 
	{
		ContractConfigShortVoCollection contracts = domain.listContracts(form.txtSName().getValue(), form.cmbSOrganisation().getValue(), form.cmbSType().getValue(), form.txtSId().getValue(), form.cmbSStatus().getValue(),form.chkDiagnosticCriteria().getValue(),form.chkNonDiagnosticCriteria().getValue());
		populateListControls(contracts);
		if (form.getLocalContext().getSelectedRecordIsNotNull())
		{
			form.grdDetails().setValue(form.getLocalContext().getSelectedRecord());
			selectInstance();
		}
		updateControlsState();
		if (contracts == null || contracts.size() == 0)
			engine.showMessage("No records that match your search criteria found.", "No results", MessageButtons.OK,MessageIcon.INFORMATION);
		
	}
	private boolean criteriaIsValid() 
	{
		if (form.txtSId().getValue() != null && form.txtSId().getValue().length()>0)
		{
			return true;
		}
		if (form.txtSName().getValue() != null && form.txtSName().getValue().length()>0)
		{
			return true;
		}
		if (form.cmbSOrganisation().getValue()!=null)
		{
			return true;
		}
		if (form.cmbSStatus().getValue()!=null)
		{
			return true;
		}
		if (form.cmbSType().getValue()!=null)
		{
			return true;
		}
		//wdev-12676
		if(Boolean.TRUE.equals(form.chkDiagnosticCriteria().getValue()))
			return true;
		if(Boolean.TRUE.equals(form.chkNonDiagnosticCriteria().getValue()))
			return true;
		//----------
		return false;
	}
	public void clearInstanceControls()
	{
		clearScreen();
		
	}
	
	@Override
	protected void clearScreen() 
	{
		super.clearScreen();
		form.ctnDetails().lyrDetails().tabPage1().intDTRTT().setValue(null);   //wdev-13616
		ArrayList<?> values = form.ctnDetails().lyrDetails().tabPage1().cmbOrganisation().getValues();  //wdev-13616
		if (values != null && values.size() > 0)
		{
			for (int i = values.size()-1 ; i >= 0 ; i--)
			{
				if (values.get(i) instanceof OrganisationLiteVo)
				{
					OrganisationLiteVo org = (OrganisationLiteVo) values.get(i);
					if (!Boolean.TRUE.equals(org.getIsActive()))
					{
						form.ctnDetails().lyrDetails().tabPage1().cmbOrganisation().removeRow(org);   //wdev-13616
					}
				}
			}
		}
		//wdev-12676
		form.ctnDetails().lyrDetails().tabPage1().cmbContractType().setValue(null);  //wdev-13616
		//------------
	}
	public void newInstance() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getLocalContext().setSelectedRecord(null);
		populateScreenFromData(null);
		form.setMode(FormMode.EDIT);
		form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().clear();
		form.getLocalContext().setServiceAndLocation(null); //wdev-13616
		form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().clear();		//wdev-18409
	}
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		ContractConfigVo record = populateDataFromScreen(form.getLocalContext().getSelectedRecord());
		
		//wdev-18409
		if( record.getCCGsForContractIsNotNull() && record.getCCGsForContract().size() > 0 )
		{
			for( int z = 0; z < record.getCCGsForContract().size();z++)
			{
				
				CCGToContractConfigVo sscgvo = record.getCCGsForContract().get(z);
				if( sscgvo != null && sscgvo.getCCGCodeIsNotNull() &&  (!sscgvo.getID_CCGToContractConfigIsNotNull() || Boolean.TRUE.equals(sscgvo.getIsEdited())))
				{
					if( !Boolean.TRUE.equals(domain.existsCCGPCTPCCodesRecords(sscgvo.getCCGCode())) )
					{
						engine.showMessage("CCG Code: " + sscgvo.getCCGCode() + " is invalid ");
						return false;
					}
				}
				
			}
			for( int g = 0; g < form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().size(); g++)
			{
				long isthesameccgcode = 0;
				for( int q = 0; q < record.getCCGsForContract().size();q++)
				{
					
					CCGToContractConfigVo sscgvo = record.getCCGsForContract().get(q);
					//check if the CCG code was already introduced for this contract
					if( sscgvo != null && Boolean.TRUE.equals(sscgvo.getIsActive()) && sscgvo.getCCGCodeIsNotNull() && sscgvo.getCCGCode().equals(form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().get(g).getColumnCCG()))
					{
					
						isthesameccgcode++;
						if( isthesameccgcode > 1)
						{
							engine.showMessage("CCG Code: " + sscgvo.getCCGCode() + " already exists: ");
							return false;
						}
					}
				}
			}
		}
		//-------------
		//wdev-13733
		if(record.getServiceLocationsIsNotNull() && record.getServiceLocations().size() > 0)
		{
			Integer ContrConfId;
			if(record.getID_ContractConfigIsNotNull())
				ContrConfId = record.getID_ContractConfig();
			else
				ContrConfId = 0;
				
			for(int i= 0; i < record.getServiceLocations().size();i++)
			{
				ContractServiceLocationsConfigVo tempVo = record.getServiceLocations().get(i);
				//wdev-18409
				if( tempVo != null )
				
				//-----------
				
				if(tempVo == null || !tempVo.getServiceIsNotNull() || !tempVo.getLocationIsNotNull() || !tempVo.getContractIdIsNotNull())
					continue;
				else
				{
					Integer contractId = domain.countForContractConfig(ContrConfId, tempVo.getService().getID_Service(), tempVo.getLocation().getID_Location(), tempVo.getContractId()); 
					if( contractId != null)
					{
							ContractConfigShortVo tempShortVo = domain.getContractConfig(contractId);
							engine.showMessage("Service: "+tempVo.getService().getServiceName() +", Location: "+ tempVo.getLocation().getName()+", Contract Id: "+ tempVo.getContractId()+ " are used by Contract Name: " + (tempShortVo!= null && tempShortVo.getContractNameIsNotNull() ? tempShortVo.getContractName():"")+",Contract Id: " + (tempShortVo!= null && tempShortVo.getContractIdIsNotNull() ? tempShortVo.getContractId():""));
							return false;
					}
				}
			}
			//wdev-18409
			for(int i= 0; i < record.getServiceLocations().size();i++)
			{
				ContractServiceLocationsConfigVo tempVo = record.getServiceLocations().get(i);
				if( tempVo != null && tempVo.getServiceIsNotNull() && record.getCCGsForContractIsNotNull() && record.getCCGsForContract().size() > 0 )
				{
					for(int x = 0; x < record.getCCGsForContract().size();x++)
					{
						CCGToContractConfigVo checkccGVo = record.getCCGsForContract().get(x);
						if( checkccGVo != null && Boolean.TRUE.equals(checkccGVo.getIsActive()) )
						{
							if( Boolean.TRUE.equals(domain.countContractsWithTheSameServiceForTheSaneCCGCode(record, tempVo.getService(), checkccGVo.getCCGCode())))  //check if exist other contracts linked to the same service that has the same ccg code
							{
								engine.showMessage("CCG Code: " + checkccGVo.getCCGCode() + " is used by other contract linked to "+ tempVo.getService().getServiceName()+ " service");
								return false;
							}
						}
					}
				}
			}
			//-----------
		}
		//-----------
		
		String[] errors = record.validate(validateUIRules());
		if (errors != null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		try 
		{
			form.getLocalContext().setSelectedRecord(domain.save(record));
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showErrors(new String[]{e.getMessage()});
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showErrors(new String[]{ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			open();
			return false;
		}
		
		form.getLocalContext().setRemovedCCG(null);			//wdev-18409
		
		return true;
	}
	public void updateControlsState()
	{
		form.ctnDetails().setCollapsed(form.getMode().equals(FormMode.VIEW)&& form.grdDetails().getValue()==null);
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnEdit().setVisible(true);
			form.btnEdit().setEnabled(form.grdDetails().getValue()!=null);
		}
		else
		{
		
			boolean isActive = form.getLocalContext().getSelectedRecordIsNotNull() && PreActiveActiveInactiveStatus.ACTIVE.equals(form.getLocalContext().getSelectedRecord().getStatus());
			boolean isInactive = form.getLocalContext().getSelectedRecordIsNotNull() && PreActiveActiveInactiveStatus.INACTIVE.equals(form.getLocalContext().getSelectedRecord().getStatus());
			form.ctnDetails().lyrDetails().tabPage1().cmbOrganisation().setEnabled(!isActive && !isInactive); //wdev-13616
			form.ctnDetails().lyrDetails().tabPage1().txtID().setEnabled(!isInactive); //wdev-13616
			form.ctnDetails().lyrDetails().tabPage1().txtName().setEnabled(!isInactive); //wdev-13616
			form.ctnDetails().lyrDetails().tabPage1().cmbStatus().setEnabled(true);     //wdev-13616
			//wdev-12676
			form.ctnDetails().lyrDetails().tabPage1().cmbContractType().setEnabled(true); //wdev-13616
			//--------
			boolean kpiEnabled = (!isInactive && !isActive)||(isActive && Boolean.TRUE.equals(form.getLocalContext().getEditKPI()));
			form.ctnDetails().lyrDetails().tabPage1().intDTRTT().setEnabled(kpiEnabled); //wdev-13616
			form.ctnDetails().lyrDetails().tabPage1().intnoto1().setEnabled(kpiEnabled);  //wdev-13616
			form.ctnDetails().lyrDetails().tabPage1().btnEditKPI().setVisible(isActive && !Boolean.TRUE.equals(form.getLocalContext().getEditKPI())); //wdev-13616
			form.ctnDetails().lyrDetails().tabPage1().btnEditKPI().setEnabled(isActive && !Boolean.TRUE.equals(form.getLocalContext().getEditKPI())); //wdev-13616
			
		}

	}
	public void updateInstance()
	{
		form.setMode(FormMode.EDIT);
	}
	@Override
	public void initialize() throws FormOpenException 
	{
		super.initialize();
		form.cmbSStatus().setValue(PreActiveActiveInactiveStatus.ACTIVE);
		initOrganisationsCombos();
		updateMenuContext(); //wdev-13616
		form.getLocalContext().setServiceAndLocation(null); //wdev-13616
		form.getLocalContext().setRemovedCCG(null);			//wdev-18409
		
	}
	private void initOrganisationsCombos() throws FormOpenException {
		form.cmbSOrganisation().getValues().clear();
		form.ctnDetails().lyrDetails().tabPage1().cmbOrganisation().clear(); //wdev-13616
		OrganisationLiteVoCollection orgs = domain.listActiveOrganisations();
		if (orgs == null || orgs.size() == 0)
			throw new FormOpenException("At least one active organisation must exist.");
		for (int i = 0 ; i < orgs.size() ; i++)
		{
			OrganisationLiteVo org = orgs.get(i);
			if (org==null)
				continue;
			form.cmbSOrganisation().newRow(org, org.getName());
			form.ctnDetails().lyrDetails().tabPage1().cmbOrganisation().newRow(org, org.getName()); //wdev-13616
			
		}
	}
	
	private void populateListControls(ContractConfigShortVoCollection records)
	{
		clear();
		if (records == null || records.size()==0)
			return;
		for (int i = 0 ; i<records.size() ; i++)
		{
			ContractConfigShortVo record = records.get(i);
			if (record == null)
				continue;
			grdDetailsRow newRow = form.grdDetails().getRows().newRow();
			newRow.setColumnID(record.getContractId());
			newRow.setColumnName(record.getContractName());
			newRow.setColumnOrganisation(record.getContractOrganisationIsNotNull()?record.getContractOrganisation().getName():null);
			newRow.setColumnStatus(record.getStatus());
			newRow.setColumnRTT(record.getDaysToRTTBreachDate());
			//wdev-12676
			if(record.getContractTypeIsNotNull() && record.getContractType().equals(ReferralManagementContractType.DIAGNOSTIC))
				newRow.setColumnType(form.getImages().Clinical.PatientWithDiagnosticServices16);
			else if(record.getContractTypeIsNotNull() && record.getContractType().equals(ReferralManagementContractType.NONDIAGNOSTIC))
				newRow.setColumnType(form.getImages().Clinical.PatientSeenByConsultant16);
			else
				newRow.setColumnType(null);
			//-----------
			newRow.setValue(record);
		}
	}
	@Override
	public void clear() 
	{
		super.clear();
		form.grdDetails().getRows().clear();
		clearInstanceControls();
	}
	private void clearSearch()
	{
		form.txtSId().setValue(null);
		form.txtSName().setValue(null);
		form.cmbSType().setValue(null);
		form.cmbSOrganisation().setValue(null);
		form.cmbSStatus().setValue(null);
		//wdev-12676
		form.chkDiagnosticCriteria().setValue(null);
		form.chkNonDiagnosticCriteria().setValue(null);
		//-----------
	}
	private void clearAllScreen()
	{
		clear();
		clearSearch();
	}
	@Override
	protected void populateScreenFromData(ContractConfigVo value) 
	{
		populateStatus(value == null ? null : value.getStatus());
		
		super.populateScreenFromData(value);
		if (value == null)
			return;
		form.ctnDetails().lyrDetails().tabPage1().intDTRTT().setValue(value.getDaysToRTTBreachDateIsNotNull()?(value.getDaysToRTTBreachDate()/7):null); //wdev-13616
		if (value.getContractOrganisationIsNotNull() && !form.ctnDetails().lyrDetails().tabPage1().cmbOrganisation().getValues().contains(value.getContractOrganisation()))  //wdev-13616
		{
			form.ctnDetails().lyrDetails().tabPage1().cmbOrganisation().newRow(value.getContractOrganisation(), value.getContractOrganisation().getName()); //wdev-13616
			form.ctnDetails().lyrDetails().tabPage1().cmbOrganisation().setValue(value.getContractOrganisation()); //wdev-13616
		}
		//wdev-12676
		form.ctnDetails().lyrDetails().tabPage1().cmbContractType().setValue(value.getContractTypeIsNotNull() ? value.getContractType() : null); //wdev-13616
				
		//--------
		//displayTree(Boolean.TRUE.equals(form.ctnDetails().lyrDetails().tabPage2().chkShowActiveOnly().getValue()));  //wdev-13616
		displayTree();  	//wdev-13616
		dispayCCG(value);	//wdev-18409
		
	}
	//wdev-18409
	private void dispayCCG(ContractConfigVo value)
	{
		form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().clear();
		if( value == null || !value.getCCGsForContractIsNotNull() || value.getCCGsForContract().size() == 0)
			return;
		for(int i = 0 ; i < value.getCCGsForContract().size();i++)
		{
			CCGToContractConfigVo  tempVo = value.getCCGsForContract().get(i);
			if( tempVo != null && Boolean.TRUE.equals(tempVo.getIsActive()) )
			{
				ims.RefMan.forms.contractconfiguration.GenForm.ctnDetailsContainer.lyrDetailsLayer.tabPageCCGContainer.grdCCGRow row = form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().newRow();
				row.setColumnCCG(tempVo.getCCGCode());
				row.setValue(tempVo);
				row.setReadOnly(true);
			
			}
		}
	}
	//----------
	@Override
	protected ContractConfigVo populateDataFromScreen(ContractConfigVo value) 
	{
		if (value != null)
		{
			value = (ContractConfigVo) value.clone();
		}
		ContractConfigVo record = super.populateDataFromScreen(value);
		//wdev-12676
		
		record.setContractType(form.ctnDetails().lyrDetails().tabPage1().cmbContractType().getValue()); //wdev-13616
		
		//------
		record.setDaysToRTTBreachDate((form.ctnDetails().lyrDetails().tabPage1().intDTRTT().getValue()==null || form.ctnDetails().lyrDetails().tabPage1().intDTRTT().getValue()<1)?0:form.ctnDetails().lyrDetails().tabPage1().intDTRTT().getValue()*7); //wdev-13616
		
		if (!record.getID_ContractConfigIsNotNull() || Boolean.TRUE.equals(form.getLocalContext().getEditKPI()))
		{
			ContractConfigKPIHistoryVo history = new ContractConfigKPIHistoryVo();
			history.setDateInstantiated(new Date());
			history.setDaysTo1stAppt(record.getDaysTo1stAppt());
			history.setDaysToRTTBreachDate(record.getDaysToRTTBreachDate());
			if (!record.getContractKPIHistoryIsNotNull())
			{
				record.setContractKPIHistory(new ContractConfigKPIHistoryVoCollection());
			}
			record.getContractKPIHistory().add(history);
		}
		//wdev-13616
		ContractServiceLocationsConfigVoCollection tempVoColl = form.getLocalContext().getServiceAndLocation();
		ContractServiceLocationsConfigVoCollection tempNewCoColl = new ContractServiceLocationsConfigVoCollection();
		if(tempVoColl != null)
		{
			for(int i = 0 ;i<tempVoColl.size();i++)
			{
				ContractServiceLocationsConfigVo tempVo =  tempVoColl.get(i);
				if(tempVo == null)
					continue;
				
				tempVo.setContractId(form.ctnDetails().lyrDetails().tabPage1().txtID().getValue());
				if(tempVo.getService() == null )    //wdev-13733
					continue;
				tempNewCoColl.add(tempVo);    //wdev-13733
			}
			form.getLocalContext().setServiceAndLocation(tempNewCoColl);  //wdev-13733
		}
		record.setServiceLocations(form.getLocalContext().getServiceAndLocation());   //wdev-13616
		//wdev-18409
		record = populateDataFromCCGgrid(record);
		//----------
		return record;
	}
	
	//wdev-18409
	private ContractConfigVo populateDataFromCCGgrid(ContractConfigVo record)
	{
		if( record == null )
			return null;
		
		CCGToContractConfigVoCollection tempColl = record.getCCGsForContract();								//take the old CCG colection	
		if( tempColl == null )
			tempColl = new CCGToContractConfigVoCollection();
		
		if( tempColl.size() > 0)
		{
			if( form.getLocalContext().getRemovedCCGIsNotNull())											//check if exists CCG with ID that was removed from grid		
			{
    			for( int j = 0; j <  tempColl.size();j++ )													//loop through the CCG colection of ContractConfigVo 
    			{
    				for( int k = 0; k < form.getLocalContext().getRemovedCCG().size();k++)   				//loop through the removed CCG colection from grid 
    				{
    					CCGToContractConfigVo removedVo  = form.getLocalContext().getRemovedCCG().get(k);	
    					if( removedVo != null && tempColl.get(j) != null  && removedVo.getID_CCGToContractConfig().equals(tempColl.get(j).getID_CCGToContractConfig()) ) //check if CCG vo ID  from record is the same with CCG vo ID that was removed from grid are the same 
    					{
    						tempColl.get(j).setIsActive(false);												//set to FALSE	(means removed)
    					}
    					
    				}
    					
    			}
			}
			
			for( int m = 0; m < form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().size();m++ )
			{
				CCGToContractConfigVo grdVo = form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().get(m).getValue();
				if( grdVo == null || !grdVo.getID_CCGToContractConfigIsNotNull())
				{
					CCGToContractConfigVo newval = new CCGToContractConfigVo();
					newval.setCCGCode(form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().get(m).getColumnCCG());
					newval.setIsActive(true);
					tempColl.add(newval);
				}
				else if( grdVo != null && grdVo.getID_CCGToContractConfigIsNotNull())
				{					
					for(int p = 0; p < tempColl.size();p++)
					{
						CCGToContractConfigVo tempfromColVo = tempColl.get(p);
						if( tempfromColVo != null && tempfromColVo.getID_CCGToContractConfig().equals(grdVo.getID_CCGToContractConfig()))
						{
							tempfromColVo.setCCGCode(form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().get(m).getColumnCCG());
						}
					}
				}
			}
			
		}
		else
		{
			for(int i = 0; i < form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().size();i++)
			{
				if( form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().get(i).getValue() != null && !form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().get(i).getValue().getID_CCGToContractConfigIsNotNull())
				{
					CCGToContractConfigVo tempVo = form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().get(i).getValue();
					tempVo.setCCGCode(form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().get(i).getColumnCCG());
					tempVo.setIsActive(true);
					tempColl.add(tempVo);
				}
				else
				{
					CCGToContractConfigVo newTempVo  = new CCGToContractConfigVo();
					newTempVo.setCCGCode(form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().get(i).getColumnCCG());
					newTempVo.setIsActive(true);
					tempColl.add(newTempVo);
				}
			}
		}
		
		record.setCCGsForContract(tempColl);
		return record;
		
	}
	
	private void selectInstance()
	{
		clearScreen();
		form.getLocalContext().setSelectedRecord(null);
		form.getLocalContext().setServiceAndLocation(null); //wdev-13616
		if (form.grdDetails().getValue() != null)
		{
			form.getLocalContext().setSelectedRecord(domain.getContract(form.grdDetails().getValue()));
			form.getLocalContext().setServiceAndLocation(form.getLocalContext().getSelectedRecord().getServiceLocations()); //wdev-13616
			populateScreenFromData(form.getLocalContext().getSelectedRecord());
		}
	}
	@Override
	public String[] validateUIRules()
	{
		ArrayList<String> errs = new ArrayList<String>();
		if (form.ctnDetails().lyrDetails().tabPage1().intDTRTT().getValue() == null || form.ctnDetails().lyrDetails().tabPage1().intDTRTT().getValue()<1)  //wdev-13616
		{
			errs.add("Weeks To RTT Breach Date must be one or greater");
		}
		if (form.ctnDetails().lyrDetails().tabPage1().intnoto1().getValue() != null && form.ctnDetails().lyrDetails().tabPage1().intnoto1().getValue()<0)   //wdev-13616
		{
			errs.add("Number of days to 1st Appointment must be 0 or greater");
		}
		//wdev-12676
		//if(form.ctnDetails().cmbContractType().getValue() == null)
		//	errs.add("Contract Type is mandatory.");
		//-------
		
		if (errs.size() == 0 )
		{
			return null;
		}
		String[] result = new String[errs.size()];
		errs.toArray(result);
		return result;
	}
	
	private void populateStatus(PreActiveActiveInactiveStatus current)
	{
		form.ctnDetails().lyrDetails().tabPage1().cmbStatus().clear();  //wdev-13616
		if (current== null)
		{
			addLookup(PreActiveActiveInactiveStatus.PREACTIVE);
			addLookup(PreActiveActiveInactiveStatus.ACTIVE);
			return;
		}
		else
		{
			addLookup(current);
			
			if (current.equals(PreActiveActiveInactiveStatus.PREACTIVE))
			{
				addLookup(PreActiveActiveInactiveStatus.ACTIVE);
				addLookup(PreActiveActiveInactiveStatus.INACTIVE);
				return;
			}
			if (current.equals(PreActiveActiveInactiveStatus.ACTIVE))
			{
				addLookup(PreActiveActiveInactiveStatus.INACTIVE);
				return;
			}
			if (current.equals(PreActiveActiveInactiveStatus.INACTIVE))
			{
				addLookup(PreActiveActiveInactiveStatus.PREACTIVE);
				addLookup(PreActiveActiveInactiveStatus.ACTIVE);
			}
		}
	}
	private void addLookup(PreActiveActiveInactiveStatus lookup)
	{
		form.ctnDetails().lyrDetails().tabPage1().cmbStatus().newRow(lookup, lookup.getText(),lookup.getImage(),lookup.getIItemTextColor());  //wdev-13616
	}
	//wdev-13616
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case ims.RefMan.forms.contractconfiguration.GenForm.ContextMenus.RefManNamespace.ServiceLocationMenu.AddService :
				form.getGlobalContext().RefMan.setContractServiceLocationsConfig(form.getLocalContext().getServiceAndLocation());
				engine.open(form.getForms().Admin.ServiceMultipleSelectDialog);
				updateMenuContext();
				
			break;
			case ims.RefMan.forms.contractconfiguration.GenForm.ContextMenus.RefManNamespace.ServiceLocationMenu.RemoveService:
				removeService();
				displayTree();
				updateMenuContext();
			break;
			case ims.RefMan.forms.contractconfiguration.GenForm.ContextMenus.RefManNamespace.ServiceLocationMenu.AddLocation:
				form.getGlobalContext().RefMan.setContractServiceLocationsConfig(form.getLocalContext().getServiceAndLocation());
				/*ServiceVoLiteVo serviceVo = null;
				if(form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode() != null)
				{
					ims.framework.controls.TreeNode parent = form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode();
					while(parent.getParent() != null)
						parent = parent.getParent();
					if(parent.getValue() instanceof ServiceVoLiteVo)
						serviceVo = (ServiceVoLiteVo) parent.getValue();
				}*/
				engine.open(form.getForms().Admin.LocationMultipleSelectDialog,new Object[]{form.ctnDetails().lyrDetails().tabPage1().cmbOrganisation().getValue()});
				updateMenuContext();
				break;
			case ims.RefMan.forms.contractconfiguration.GenForm.ContextMenus.RefManNamespace.ServiceLocationMenu.RemoveLocation:
				removeLocation();
				displayTree();
				updateMenuContext();
			break;
			case ims.RefMan.forms.contractconfiguration.GenForm.ContextMenus.RefManNamespace.CCGContextMenu.ADD:  		//wdev-18409
				 ims.RefMan.forms.contractconfiguration.GenForm.ctnDetailsContainer.lyrDetailsLayer.tabPageCCGContainer.grdCCGRow row = form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getRows().newRow();
				 //row.setReadOnly(false);
				 
				 
			break;
			case ims.RefMan.forms.contractconfiguration.GenForm.ContextMenus.RefManNamespace.CCGContextMenu.EDIT:  		//wdev-18409
				 form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getSelectedRow().setReadOnly(false);
				 if( form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getSelectedRow().getValue() != null )
					 form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getSelectedRow().getValue().setIsEdited(true);
				 
			break;
			case ims.RefMan.forms.contractconfiguration.GenForm.ContextMenus.RefManNamespace.CCGContextMenu.REMOVE:  	//wdev-18409
				 CCGToContractConfigVo  tempVo = form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getSelectedRow().getValue();
				 if( tempVo != null && tempVo.getID_CCGToContractConfigIsNotNull() )
				 {
					 CCGToContractConfigVoCollection tempCollVo =  form.getLocalContext().getRemovedCCG();
					 if( tempCollVo == null )
						 tempCollVo = new CCGToContractConfigVoCollection();
					 tempCollVo.add(tempVo);
					 form.getLocalContext().setRemovedCCG(tempCollVo);
					 
				 }
				 form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().removeSelectedRow();
				 updateMenuContext();
			break;
				
		}
		
	}
	//wdev-13616
	private void removeLocation()
	{
		
		if(form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode() != null && form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue() instanceof ConfigLocationLiteVo)
		{
			ServiceVoLiteVo serVo = null;
			ims.framework.controls.TreeNode parent = form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode();
			while(parent.getParent() != null)
				parent = parent.getParent();
			if(parent.getValue() instanceof ServiceVoLiteVo)
				serVo = (ServiceVoLiteVo) parent.getValue();
				
				
			ConfigLocationLiteVo locationVo = (ConfigLocationLiteVo) form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue();
			if(serVo != null && locationVo != null)
			{
				ContractServiceLocationsConfigVoCollection tempVoColl = form.getLocalContext().getServiceAndLocation();
				boolean deleted = true;
				while(deleted)
				{
					
					deleted = false;
					for(int i = 0; i < tempVoColl.size(); i++ )
					{
						if (serVo != null && tempVoColl.get(i).getServiceIsNotNull() && serVo.getID_Service().equals(tempVoColl.get(i).getService().getID_Service()) && locationVo.getID_Location().equals(tempVoColl.get(i).getLocation().getID_Location()))
						{
														
							tempVoColl.remove(i);
							deleted = true;
							break;
													
						}
					}
				}//end of while
				form.getLocalContext().setServiceAndLocation(tempVoColl);
			}
			
		}
	}
	//wdev-13616
	private void updateMenuContext()
	{
		if(form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().RefMan.hideAllServiceLocationMenuMenuItems();
			form.getContextMenus().RefMan.hideAllCCGContextMenuMenuItems();			//wdev-18409
		}
		else
		{
			
			form.getContextMenus().RefMan.getServiceLocationMenuAddServiceItem().setVisible(true);
			form.getContextMenus().RefMan.getServiceLocationMenuAddLocationItem().setVisible(form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode() != null && (form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue() instanceof  ServiceVoLiteVo || form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode() != null && form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue() instanceof  ConfigLocationLiteVo));
			form.getContextMenus().RefMan.getServiceLocationMenuRemoveServiceItem().setVisible(form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode() != null && form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue() instanceof  ServiceVoLiteVo );
			form.getContextMenus().RefMan.getServiceLocationMenuRemoveLocationItem().setVisible(form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode() != null && form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue() instanceof  ConfigLocationLiteVo);
			
			//wdev-18409
			form.getContextMenus().RefMan.hideAllCCGContextMenuMenuItems();	
			form.getContextMenus().RefMan.getCCGContextMenuADDItem().setVisible(true);
			form.getContextMenus().RefMan.getCCGContextMenuEDITItem().setVisible(form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getSelectedRow() != null);
			form.getContextMenus().RefMan.getCCGContextMenuREMOVEItem().setVisible(form.ctnDetails().lyrDetails().tabPageCCG().grdCCG().getSelectedRow() != null);
			//------------
			
		}
	}
	
	
	
	//wdev-13616
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (formName.equals(form.getForms().Admin.ServiceMultipleSelectDialog) && result.equals(DialogResult.OK))
		{
			populateParentsTree(form.getGlobalContext().RefMan.getServiceContrat());
			updateMenuContext();
		}
		else if(formName.equals(form.getForms().Admin.LocationMultipleSelectDialog) && result.equals(DialogResult.OK))
		{
			populateChildsTree(form.getGlobalContext().RefMan.getLocationContract());
			displayTree();
			updateMenuContext();
		}
		
	}
	//wdev-13616
	void populateChildsTree(ConfigLocationLiteVoCollection tempColl)
	{
		if(tempColl == null || tempColl.size() == 0)
		{
			return;
		}
		for(int i = 0;i < tempColl.size();i++)
		{
			ConfigLocationLiteVo tempVo = tempColl.get(i);
			if(tempVo == null)
				continue;
			if(checkIfLocationIsConectedToService(tempVo))
				continue;
			if(setLocInContractServiceLocWithLocNull(tempVo))
				continue;
			else
			{
				ContractServiceLocationsConfigVoCollection tempContractColl = form.getLocalContext().getServiceAndLocation();
				if(tempContractColl == null)
					tempContractColl = new ContractServiceLocationsConfigVoCollection();
				if(form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode() != null && form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue()!= null )
				{
					ims.framework.controls.TreeNode nodeTree = (ims.framework.controls.TreeNode) form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode();
					while( nodeTree.getParent() != null)
						nodeTree = nodeTree.getParent();   //get the parent (service node)
					
					ServiceVoLiteVo service = (ServiceVoLiteVo) nodeTree.getValue();
					if(service != null)
					{
						ContractServiceLocationsConfigVo tempContractVo = new ContractServiceLocationsConfigVo();
						
						tempContractVo.setService(service);
						tempContractVo.setLocation(tempVo);
						//tempContractVo.setIsActive(Boolean.TRUE);
						tempContractColl.add(tempContractVo);
						form.getLocalContext().setServiceAndLocation(tempContractColl);
					}
				}
				
			}
			
		}
		
	}
	private boolean setLocInContractServiceLocWithLocNull(ConfigLocationLiteVo tempVo)
	{
		if(tempVo == null)
			throw new CodingRuntimeException();
		ContractServiceLocationsConfigVoCollection tempColl = form.getLocalContext().getServiceAndLocation();
		if(tempColl  == null || tempColl.size()==0)
			return false;
		
		for(int i = 0;i<tempColl.size();i++)
		{
			
			ContractServiceLocationsConfigVo contVo = tempColl.get(i);	
			if(form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode() != null && form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue()!= null )
			{
				ims.framework.controls.TreeNode nodeTree = (ims.framework.controls.TreeNode) form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode();
				while( nodeTree.getParent() != null)
					nodeTree = nodeTree.getParent();   //get the parent (service node)
				ServiceVoLiteVo service = (ServiceVoLiteVo) nodeTree.getValue();
				if(service != null && contVo.getServiceIsNotNull() && service.getID_ServiceIsNotNull() && service.getID_Service().equals(contVo.getService().getID_Service()))
				{
					if(contVo.getLocation() == null)
					{
						tempColl.get(i).setLocation(tempVo);
						form.getLocalContext().setServiceAndLocation(tempColl);
						return true;
					}
				}
			}
					
		}
		
		return false;
	}
	//wdev-13616
	private boolean checkIfLocationIsConectedToService(ConfigLocationLiteVo tempVo)
	{
		if(tempVo == null)
			throw new CodingRuntimeException();
		
		ContractServiceLocationsConfigVoCollection tempColl = form.getLocalContext().getServiceAndLocation();
		if(tempColl == null || tempColl.size() == 0)
			return false;
		for(int i = 0;i<tempColl.size();i++)
		{
			ContractServiceLocationsConfigVo contVo = tempColl.get(i);
			if(contVo == null || contVo.getLocation() == null)
				continue;
			
			if(form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode() != null && form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue()!= null )
			{
				ims.framework.controls.TreeNode nodeTree = (ims.framework.controls.TreeNode) form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode();
				while( nodeTree.getParent() != null)
					nodeTree = nodeTree.getParent();   //get the parent (service node)
				
				ServiceVoLiteVo service = (ServiceVoLiteVo) nodeTree.getValue();
				if(service != null && contVo.getServiceIsNotNull() && service.getID_ServiceIsNotNull() && service.getID_Service().equals(contVo.getService().getID_Service()))
				{
					if(tempVo.getID_LocationIsNotNull() && tempVo.getID_Location().equals(contVo.getLocation().getID_Location()))
						return true;
				}
			}
		}
		return false;
		
	}
	//wdev-13616
	void populateParentsTree(ServiceVoLiteVoCollection services)
	{
		if(services == null)
			return;
		for(int i = 0; i < services.size();i++ )
		{
			if(checkIfParentAlreadyExistsinTree(services.get(i)))
				continue;
			
			ContractServiceLocationsConfigVo tempContractVo = new ContractServiceLocationsConfigVo();
			ServiceVoLiteVo temVo = services.get(i);
			tempContractVo.setService(temVo);
			tempContractVo.setLocation(null);
			//tempContractVo.setIsActive(Boolean.TRUE);
			
			ContractServiceLocationsConfigVoCollection tempColl = form.getLocalContext().getServiceAndLocation();
			if(tempColl == null)
				tempColl = new ContractServiceLocationsConfigVoCollection();
			tempColl.add(tempContractVo);
			form.getLocalContext().setServiceAndLocation(tempColl);
			
			form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getNodes().add(temVo, temVo.getServiceName());

			//form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().setValue(temVo);
			form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().setEnabled(true);

		}
	}
	//wdev-13616
	//if the service is already in the tree the method return true else return false
	private boolean checkIfParentAlreadyExistsinTree(ServiceVoLiteVo parent)
	{
		if(parent == null )
			return false;
		
		for (int i = 0; i < form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getNodes().size(); i++)
		{
			Object obj = form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getNodes().get(i).getValue();
			if ((obj != null) && (obj instanceof ServiceVoLiteVo))
			{
				ServiceVoLiteVo serviceVo = (ServiceVoLiteVo) obj;
				if ((serviceVo.getID_ServiceIsNotNull()) && (serviceVo.getID_Service().equals(parent.getID_Service())))
				{
					return true;
				}
			}
		}

		return false;
		
	}
	//wdev-13616
	protected void onTreSericeLocationTreeViewSelectionChanged(	ims.framework.controls.TreeNode node) throws PresentationLogicException 
	{
		updateMenuContext();
		
	}
	//wdev-13616
	private void removeService()
	{
		
		if(form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue() instanceof ServiceVoLiteVo)
		{
			ServiceVoLiteVo serviceVo = (ServiceVoLiteVo) form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getSelectedNode().getValue();
			ContractServiceLocationsConfigVoCollection tempVoColl = form.getLocalContext().getServiceAndLocation();
			boolean deleted = true;
			while(deleted)
			{
				
				deleted = false;
				for(int i = 0; i < tempVoColl.size(); i++ )
				{
					if (serviceVo.getID_Service().equals(tempVoColl.get(i).getService().getID_Service()))
					{
						
							tempVoColl.remove(i);
							deleted = true;
							break;
							
						
					}
				}
			}//end of while
			form.getLocalContext().setServiceAndLocation(tempVoColl);
			
		}
	}
	
	private void displayTree()
	{
		ServiceVoLiteVoCollection serviceCol = new ServiceVoLiteVoCollection();
		ContractServiceLocationsConfigVoCollection servicelocationVoCol = form.getLocalContext().getServiceAndLocation();
		form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().clear();
		if(servicelocationVoCol == null || servicelocationVoCol.size() == 0)
			return;
		
		for(int i = 0; i < servicelocationVoCol.size();i++)
		{
			if(checkSerices(servicelocationVoCol.get(i).getService(),serviceCol))  //check if service was added in tree
				continue;
			else
			{
				serviceCol.add(servicelocationVoCol.get(i).getService());
				ims.framework.controls.TreeNode nodeparent = form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().getNodes().add(servicelocationVoCol.get(i).getService(), servicelocationVoCol.get(i).getService().getServiceName());
								
				for(int j = 0; j < servicelocationVoCol.size();j++)
				{
					if(servicelocationVoCol.get(i).getServiceIsNotNull() && servicelocationVoCol.get(j).getServiceIsNotNull())
					{
						if(servicelocationVoCol.get(i).getService().getID_Service().equals(servicelocationVoCol.get(j).getService().getID_Service()))
						{
							if(servicelocationVoCol.get(j).getLocationIsNotNull())
							{
								nodeparent.getNodes().add(servicelocationVoCol.get(j).getLocation(), servicelocationVoCol.get(j).getLocation().getName());								
							}
						}
					}
				}
			}
		}
		
		form.ctnDetails().lyrDetails().tabPage2().treSericeLocation().expandAll();
	}
	
	//wdev-13616
	private boolean checkSerices(ServiceVoLiteVo service, ServiceVoLiteVoCollection servicecol)
	{
		if (service == null)		// WDEV-13720 - Check for null services
			return true;
		
		if(servicecol == null || servicecol.size() == 0 )
			return false;
		for(int i = 0; i < servicecol.size();i++)
		{
			if(service.getID_Service().equals(servicecol.get(i).getID_Service()))
				return true;
		}
		
		return false;
	}
	//wdev-18409
	protected void onGrdCCGSelectionChanged() throws PresentationLogicException
	{
		updateMenuContext();
		
	}
	
		
	
	
	
	
	
}
