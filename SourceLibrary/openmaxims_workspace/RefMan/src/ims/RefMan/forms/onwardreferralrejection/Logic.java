// This code was generated by Cristian Belciug using IMS Development Environment (version 1.65 build 3225.30788)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.onwardreferralrejection;

import java.util.ArrayList;
import java.util.List;

import ims.RefMan.vo.CatsReferralWizardVo;
import ims.RefMan.vo.OnwardReferralVo;
import ims.RefMan.vo.ReferralOutcomeVo;
import ims.RefMan.vo.lookups.OnwardReferralStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		open();
	}
	
	private void open() throws PresentationLogicException 
	{
		if(form.getGlobalContext().RefMan.getCatsReferralIsNotNull())
		{
			form.getLocalContext().setReferralOutcome(domain.getReferralOutcome(form.getGlobalContext().RefMan.getCatsReferral()));
			populateScreenFromData(form.getLocalContext().getReferralOutcome());
		}
	}
	
	private void populateScreenFromData(ReferralOutcomeVo referralOutcome) throws PresentationLogicException 
	{
		if(referralOutcome == null || (referralOutcome != null && !referralOutcome.getReferralDischargeIsNotNull()) || (referralOutcome != null && referralOutcome.getReferralDischargeIsNotNull() && !referralOutcome.getReferralDischarge().getCurrentOnwardReferralIsNotNull()))
			throw new FormOpenException("CurrentOnwardReferral is not populated.");
		
		clearScreen();
		
		OnwardReferralVo currentOnwardReferral = referralOutcome.getReferralDischarge().getCurrentOnwardReferral();
		form.txtDischargeDate().setValue(currentOnwardReferral.getDischargeDateIsNotNull() ? currentOnwardReferral.getDischargeDate().toString() : null);
		form.txtOnwardReferralOrganisation().setValue(currentOnwardReferral.getOnwardReferralOrgIsNotNull() ? currentOnwardReferral.getOnwardReferralOrg().getName() : null);
		form.txtOnwardReferralInstructions().setValue(currentOnwardReferral.getOnwardReferralIsNotNull() ? currentOnwardReferral.getOnwardReferral() : null);
		form.txtOnwardReferralReason().setValue(currentOnwardReferral.getOnwardReferralReasonIsNotNull() ? currentOnwardReferral.getOnwardReferralReason().getIItemText() : null);
		form.dteRejectedDate().setValue(currentOnwardReferral.getRejectedDateIsNotNull() ? currentOnwardReferral.getRejectedDate() : null);
		form.txtRejectionReason().setValue(currentOnwardReferral.getRejectionReasonIsNotNull() ? currentOnwardReferral.getRejectionReason() : null);
		form.cmbRejectedBy().setValue(currentOnwardReferral.getRejectedByIsNotNull() ? currentOnwardReferral.getRejectedBy() : null);
	}

	private void initialize() 
	{
		form.setMode(FormMode.EDIT);
	}
	
	private void clearScreen() 
	{
		form.txtDischargeDate().setValue(null);
		form.txtOnwardReferralInstructions().setValue(null);
		form.txtOnwardReferralOrganisation().setValue(null);
		form.txtOnwardReferralReason().setValue(null);
		form.txtRejectionReason().setValue(null);
		form.dteRejectedDate().setValue(null);
		form.cmbRejectedBy().setValue(null);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			if(saveOnwardReferralStatus())
				engine.close(DialogResult.OK);
		}
	}

	private boolean saveOnwardReferralStatus() throws PresentationLogicException 
	{
		if(form.getGlobalContext().RefMan.getCatsReferral() != null)
		{
			CatsReferralWizardVo selectedCatsReferral = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			
			//for Edit Reject Onward Referral Details
			if(selectedCatsReferral.getOnwardReferralStatusIsNotNull() && selectedCatsReferral.getOnwardReferralStatus().equals(OnwardReferralStatus.ONWARD_REFERRAL_REJECTED))
			{
				return true;
			}
			
			if(selectedCatsReferral != null)
			{
				selectedCatsReferral.setOnwardReferralStatus(OnwardReferralStatus.ONWARD_REFERRAL_REJECTED);
				selectedCatsReferral.validate();
				
				try 
				{
					selectedCatsReferral = domain.saveCatsReferral(selectedCatsReferral);
				} 
				catch (DomainInterfaceException e) 
				{
					engine.showMessage(e.getMessage());
					return false;
				} 
				catch (StaleObjectException e) 
				{
					engine.showMessage(e.getMessage());
					open();
					return false;
				}
				
				return true;
			}
		}
		
		return false;
	}

	private boolean save() throws PresentationLogicException 
	{
		ReferralOutcomeVo newOutCome = form.getLocalContext().getReferralOutcome();
		OnwardReferralVo newCurrentOnwardReferral = populateDataFromScreen();
		
		String[] errors = validateUIRules();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		populateOnwardReferral(newOutCome, newCurrentOnwardReferral);
		newOutCome.validate();
		
		try 
		{
			form.getLocalContext().setReferralOutcome(domain.saveCurrentOnwardReferral(newOutCome));
		} 
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}

	private void populateOnwardReferral(ReferralOutcomeVo newOutCome, OnwardReferralVo newCurrentOnwardReferral) 
	{
		if(newOutCome == null || (newOutCome != null && !newOutCome.getReferralDischargeIsNotNull()) || (newOutCome != null && newOutCome.getReferralDischargeIsNotNull() && !newOutCome.getReferralDischarge().getCurrentOnwardReferralIsNotNull()))
			return;
		
		if(newCurrentOnwardReferral == null)
			return;
		
		newOutCome.getReferralDischarge().getCurrentOnwardReferral().setRejectedDate(newCurrentOnwardReferral.getRejectedDate());
		newOutCome.getReferralDischarge().getCurrentOnwardReferral().setRejectionReason(newCurrentOnwardReferral.getRejectionReason());
		newOutCome.getReferralDischarge().getCurrentOnwardReferral().setRejectedBy(newCurrentOnwardReferral.getRejectedBy());
	}

	private String[] validateUIRules() 
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.dteRejectedDate().getValue() == null)
		{
			uiErrors.add("Rejected Date is mandatory.");
		}
		
		if(form.cmbRejectedBy().getValue() == null)
		{
			uiErrors.add("Rejected By is mandatory.");
		}
		
		String[] voValidate = new String[uiErrors.size()];
		uiErrors.toArray(voValidate);
		
		return voValidate;
	}

	private OnwardReferralVo populateDataFromScreen() 
	{
		OnwardReferralVo newOnwardReferral = new OnwardReferralVo();
		
		newOnwardReferral.setRejectedDate(form.dteRejectedDate().getValue());
		newOnwardReferral.setRejectionReason(form.txtRejectionReason().getValue());
		newOnwardReferral.setRejectedBy(form.cmbRejectedBy().getValue());
		
		return newOnwardReferral;
	}
}
