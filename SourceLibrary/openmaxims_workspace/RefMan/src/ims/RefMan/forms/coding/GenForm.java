// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.coding;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grd4Row extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grd4Row(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColProcedureReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColProcedureOpened()
		{
			super.row.showOpened(0);
		}
		public String getColProcedure()
		{
			return (String)super.row.get(0);
		}
		public void setColProcedure(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColProcedureTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDateOpened()
		{
			super.row.showOpened(1);
		}
		public String getColDate()
		{
			return (String)super.row.get(1);
		}
		public void setColDate(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grd4RowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grd4RowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grd4Row get(int index)
		{
			return new grd4Row(super.collection.get(index));
		}
		public grd4Row newRow()
		{
			return new grd4Row(super.collection.newRow());
		}
		public grd4Row newRow(boolean autoSelect)
		{
			return new grd4Row(super.collection.newRow(autoSelect));
		}
		public grd4Row newRowAt(int index)
		{
			return new grd4Row(super.collection.newRowAt(index));
		}
		public grd4Row newRowAt(int index, boolean autoSelect)
		{
			return new grd4Row(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grd4Grid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grd4Row getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grd4Row(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grd4RowCollection getRows()
		{
			return new grd4RowCollection(super.grid.getRows());
		}
		public grd4Row getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grd4Row(row);
		}
		public void setColProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grd1Row extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grd1Row(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDiagnosisReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDiagnosisReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDiagnosisOpened()
		{
			super.row.showOpened(0);
		}
		public String getColDiagnosis()
		{
			return (String)super.row.get(0);
		}
		public void setColDiagnosis(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDiagnosisTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDateOpened()
		{
			super.row.showOpened(1);
		}
		public String getColDate()
		{
			return (String)super.row.get(1);
		}
		public void setColDate(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColStatusReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColStatusOpened()
		{
			super.row.showOpened(2);
		}
		public String getColStatus()
		{
			return (String)super.row.get(2);
		}
		public void setColStatus(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColStatusTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grd1RowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grd1RowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grd1Row get(int index)
		{
			return new grd1Row(super.collection.get(index));
		}
		public grd1Row newRow()
		{
			return new grd1Row(super.collection.newRow());
		}
		public grd1Row newRow(boolean autoSelect)
		{
			return new grd1Row(super.collection.newRow(autoSelect));
		}
		public grd1Row newRowAt(int index)
		{
			return new grd1Row(super.collection.newRowAt(index));
		}
		public grd1Row newRowAt(int index, boolean autoSelect)
		{
			return new grd1Row(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grd1Grid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grd1Row getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grd1Row(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grd1RowCollection getRows()
		{
			return new grd1RowCollection(super.grid.getRows());
		}
		public grd1Row getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grd1Row(row);
		}
		public void setColDiagnosisHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDiagnosisHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grd2Row extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grd2Row(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setCoMorbitiesReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isCoMorbitiesReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showCoMorbitiesOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getCoMorbities()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellCoMorbitiesTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.PatientDiagnosisLiteVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grd2RowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grd2RowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grd2Row get(int index)
		{
			return new grd2Row(super.collection.get(index));
		}
		public grd2Row newRow()
		{
			return new grd2Row(super.collection.newRow());
		}
		public grd2Row newRow(boolean autoSelect)
		{
			return new grd2Row(super.collection.newRow(autoSelect));
		}
		public grd2Row newRowAt(int index)
		{
			return new grd2Row(super.collection.newRowAt(index));
		}
		public grd2Row newRowAt(int index, boolean autoSelect)
		{
			return new grd2Row(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grd2Grid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		public ims.core.vo.PatientDiagnosisLiteVoCollection getValues()
		{
			ims.core.vo.PatientDiagnosisLiteVoCollection listOfValues = new ims.core.vo.PatientDiagnosisLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientDiagnosisLiteVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grd2Row getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grd2Row(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grd2RowCollection getRows()
		{
			return new grd2RowCollection(super.grid.getRows());
		}
		public grd2Row getRowByValue(ims.core.vo.PatientDiagnosisLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grd2Row(row);
		}
		public void setCoMorbitiesHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getCoMorbitiesHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public static class grd3Row extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grd3Row(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setAllergyReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isAllergyReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showAllergyOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getAllergy()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellAllergyTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.core.vo.PatientAllergy getValue()
		{
			return (ims.core.vo.PatientAllergy)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientAllergy value)
		{
			super.row.setValue(value);
		}
	}
	public static class grd3RowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grd3RowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grd3Row get(int index)
		{
			return new grd3Row(super.collection.get(index));
		}
		public grd3Row newRow()
		{
			return new grd3Row(super.collection.newRow());
		}
		public grd3Row newRow(boolean autoSelect)
		{
			return new grd3Row(super.collection.newRow(autoSelect));
		}
		public grd3Row newRowAt(int index)
		{
			return new grd3Row(super.collection.newRowAt(index));
		}
		public grd3Row newRowAt(int index, boolean autoSelect)
		{
			return new grd3Row(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grd3Grid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		public ims.core.vo.PatientAllergyCollection getValues()
		{
			ims.core.vo.PatientAllergyCollection listOfValues = new ims.core.vo.PatientAllergyCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientAllergy getValue()
		{
			return (ims.core.vo.PatientAllergy)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientAllergy value)
		{
			super.grid.setValue(value);
		}
		public grd3Row getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grd3Row(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grd3RowCollection getRows()
		{
			return new grd3RowCollection(super.grid.getRows());
		}
		public grd3Row getRowByValue(ims.core.vo.PatientAllergy value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grd3Row(row);
		}
		public void setAllergyHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getAllergyHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuCoMorbidity = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuCoMorbidityaddItemItem = factory.createMenuItem(startControlID.intValue() + 1, "Add", true, false, new Integer(102179), true, false);
		contextMenus.RefMan.contextMenuCoMorbidity.add(contextMenus.RefMan.contextMenuCoMorbidityaddItemItem);
		contextMenus.RefMan.contextMenuCoMorbidityremoveItemItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.RefMan.contextMenuCoMorbidity.add(contextMenus.RefMan.contextMenuCoMorbidityremoveItemItem);
		form.registerMenu(contextMenus.RefMan.contextMenuCoMorbidity);
		contextMenus.RefMan.contextMenuallergyMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenuallergyMenuaddItemItem = factory.createMenuItem(startControlID.intValue() + 3, "Add", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2530001)))
			contextMenus.RefMan.contextMenuallergyMenu.add(contextMenus.RefMan.contextMenuallergyMenuaddItemItem);
		contextMenus.RefMan.contextMenuallergyMenuremoveItemItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2530002)))
			contextMenus.RefMan.contextMenuallergyMenu.add(contextMenus.RefMan.contextMenuallergyMenuremoveItemItem);
		form.registerMenu(contextMenus.RefMan.contextMenuallergyMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 400, 816, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(1), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 32, 816, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 464, 248, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Comorbidities", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 248, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Allergies", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 24, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 672, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 752, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 560, 248, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"None Indicated", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 88, 248, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"None Indicated", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 24, 424, 800, 168, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grd4Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grd4Temp);
		grd4Grid grd4 = (grd4Grid)GridFlyweightFactory.getInstance().createGridBridge(grd4Grid.class, m_grd4Temp);
		grd4.addStringColumn("Procedure", 0, 0, 400, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grd4.addStringColumn("Date", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grd4);
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 56, 800, 160, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grd1Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grd1Temp);
		grd1Grid grd1 = (grd1Grid)GridFlyweightFactory.getInstance().createGridBridge(grd1Grid.class, m_grd1Temp);
		grd1.addStringColumn("Diagnosis", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grd1.addStringColumn("Date", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grd1.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grd1);
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 464, 272, 360, 97, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT);
		Grid m_grd2Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuCoMorbidity, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grd2Temp);
		grd2Grid grd2 = (grd2Grid)GridFlyweightFactory.getInstance().createGridBridge(grd2Grid.class, m_grd2Temp);
		grd2.addMutableComboBoxColumn("Comorbidities", 0, 0, -1, false, true, true, false, true, true, -1);
		super.addGrid(grd2);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 24, 272, 368, 97, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grd3Temp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuallergyMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grd3Temp);
		grd3Grid grd3 = (grd3Grid)GridFlyweightFactory.getInstance().createGridBridge(grd3Grid.class, m_grd3Temp);
		grd3.addMutableComboBoxColumn("Allergy", 0, 0, -1, false, true, true, false, true, true, -1);
		super.addGrid(grd3);
	}


	public Button btnEdit()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public CheckBox chk1()
	{
		return (CheckBox)super.getControl(7);
	}
	public CheckBox chk2()
	{
		return (CheckBox)super.getControl(8);
	}
	public grd4Grid grd4()
	{
		return (grd4Grid)super.getGrid(0);
	}
	public grd1Grid grd1()
	{
		return (grd1Grid)super.getGrid(1);
	}
	public grd2Grid grd2()
	{
		return (grd2Grid)super.getGrid(2);
	}
	public grd3Grid grd3()
	{
		return (grd3Grid)super.getGrid(3);
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class CoMorbidity implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int addItem = 1;
				public static final int removeItem = 2;
			}
			public void disableAllCoMorbidityMenuItems()
			{
				this.contextMenuCoMorbidityaddItemItem.setEnabled(false);
				this.contextMenuCoMorbidityremoveItemItem.setEnabled(false);
			}
			public void hideAllCoMorbidityMenuItems()
			{
				this.contextMenuCoMorbidityaddItemItem.setVisible(false);
				this.contextMenuCoMorbidityremoveItemItem.setVisible(false);
			}
			private Menu contextMenuCoMorbidity;
			public ReadOnlyMenuItem getCoMorbidityaddItemItem()
			{
				return this.contextMenuCoMorbidityaddItemItem;
			}
			private MenuItem contextMenuCoMorbidityaddItemItem;
			public ReadOnlyMenuItem getCoMorbidityremoveItemItem()
			{
				return this.contextMenuCoMorbidityremoveItemItem;
			}
			private MenuItem contextMenuCoMorbidityremoveItemItem;
			public final class allergyMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int addItem = 3;
				public static final int removeItem = 4;
			}
			public void disableAllallergyMenuMenuItems()
			{
				this.contextMenuallergyMenuaddItemItem.setEnabled(false);
				this.contextMenuallergyMenuremoveItemItem.setEnabled(false);
			}
			public void hideAllallergyMenuMenuItems()
			{
				this.contextMenuallergyMenuaddItemItem.setVisible(false);
				this.contextMenuallergyMenuremoveItemItem.setVisible(false);
			}
			private Menu contextMenuallergyMenu;
			public ReadOnlyMenuItem getallergyMenuaddItemItem()
			{
				return this.contextMenuallergyMenuaddItemItem;
			}
			private MenuItem contextMenuallergyMenuaddItemItem;
			public ReadOnlyMenuItem getallergyMenuremoveItemItem()
			{
				return this.contextMenuallergyMenuremoveItemItem;
			}
			private MenuItem contextMenuallergyMenuremoveItemItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private IReportField[] reportFields = null;
}
