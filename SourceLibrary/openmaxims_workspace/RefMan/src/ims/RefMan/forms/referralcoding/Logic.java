// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3618.29606)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.referralcoding;

import ims.RefMan.forms.referralcoding.GenForm.grdCodingRow;
import ims.RefMan.forms.referralcoding.GenForm.grdDiagnosesRow;
import ims.RefMan.forms.referralcoding.GenForm.grdProceduresRow;
import ims.RefMan.vo.DischargeAndPASEventForReferralCodingVoCollection;
import ims.RefMan.vo.ReferralCodingItemVo;
import ims.RefMan.vo.ReferralCodingItemVoCollection;
import ims.RefMan.vo.ReferralCodingVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.PatientDiagnosisRefVo;
import ims.core.patient.vo.PatientRefVo;
import ims.core.vo.CSPrimaryDiagnosisVoCollection;
import ims.core.vo.DiagnosisVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PasEventShortVo;
import ims.core.vo.PatientDiagnosisListVo;
import ims.core.vo.PatientDiagnosisListVoCollection;
import ims.core.vo.PatientDiagnosisShortVo;
import ims.core.vo.PatientProcedureShortWithCareIntraOperativeVo;
import ims.core.vo.PatientProcedureShortWithCareIntraOperativeVoCollection;
import ims.core.vo.PatientProcedureVo;
import ims.core.vo.ProcedureVo;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.LateralityLRB;
import ims.core.vo.lookups.SourceofInformation;
import ims.core.vo.lookups.TaxonomyType;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;
import ims.vo.interfaces.IMos;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		if (domain.getMosUser() == null)
		{
			throw new FormOpenException("Logged in user is not a MOS and will not be able to view or edit data.");
		}

		initializeScreen();
		open(null);
	}
	
	private void initializeScreen() 
	{
		form.getLocalContext().setCurrentCareContext(domain.getCareContext(form.getGlobalContext().RefMan.getCatsReferral()));
		
		form.lblPASEvent().setVisible(false);
		form.cmbPasEvents().setVisible(false);
		if(ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
		{
			form.lblPASEvent().setVisible(true);
			form.cmbPasEvents().setVisible(true);
			form.cmbPasEvents().setRequired(true);
		}
	}

	private void open(ReferralCodingVo voRc) 
	{
		populateDiagnosesGrid();
		populateProceduresGrid();

		if(ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
		{
			fillPASEventCombo(voRc);
			
			fillCodingGrid(Boolean.FALSE, form.cmbPasEvents().getValue());
		}
		else
			fillCodingGrid(Boolean.FALSE, null);
	
		form.setMode(FormMode.VIEW);
	}

	private void fillPASEventCombo(ReferralCodingVo voRc)
	{
		DischargeAndPASEventForReferralCodingVoCollection voColl = domain.listPASEvents(form.getGlobalContext().RefMan.getCatsReferral());
		
		form.cmbPasEvents().clear();
		for (int i = 0 ; voColl != null && i < voColl.size() ; i++)
		{
			StringBuffer sb = new StringBuffer();
			
			if (voColl.get(i).getDischargeEpisodeIsNotNull()
				&& voColl.get(i).getDischargeEpisode().getPasEventIsNotNull())
			{
				sb.append(voColl.get(i).getDischargeEpisode().getPasEvent().getEventDateTimeIsNotNull() ? voColl.get(i).getDischargeEpisode().getPasEvent().getEventDateTime().toString() : "");
				sb.append(" - ");
				sb.append(voColl.get(i).getDischargeEpisode().getDischargeDateTimeIsNotNull() ? voColl.get(i).getDischargeEpisode().getDischargeDateTime().toString() : "");
				
				form.cmbPasEvents().newRow(voColl.get(i).getDischargeEpisode().getPasEvent(), sb.toString());

				if (voRc != null
					&& voRc.getPasEventIsNotNull()
					&& voRc.getPasEvent().getID_PASEventIsNotNull()
					&& voColl.get(i).getDischargeEpisode().getPasEvent().getID_PASEventIsNotNull()
					&& voRc.getPasEvent().getID_PASEvent().equals(voColl.get(i).getDischargeEpisode().getPasEvent().getID_PASEvent()))
					form.cmbPasEvents().setValue(voColl.get(i).getDischargeEpisode().getPasEvent());
			}
			
		}
		if (voColl.size() > 0 && voRc == null)
			if(voColl.get(0) != null && voColl.get(0).getDischargeEpisode() != null)			//wdev-11853
				form.cmbPasEvents().setValue(voColl.get(0).getDischargeEpisode().getPasEvent());
	}

	private boolean fillCodingGrid(Boolean bShowMessage, PasEventShortVo voPasEvent) 
	{
		boolean bReturnValue = true;
		if(voPasEvent != null)
			bReturnValue = populateGridFromPASEvent(bShowMessage, voPasEvent);
		else if( ! ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
			bReturnValue = populateGridFromCatsReferral(bShowMessage);
		
		if (!bReturnValue)
			form.setMode(FormMode.VIEW);
		
		return bReturnValue;
	}

	private boolean populateGridFromPASEvent(Boolean bShowMessage, PasEventShortVo voPasEvent) 
	{
		boolean bReturnValue = true;
		ReferralCodingVo voRC = domain.getReferralCoding(null, voPasEvent);
		if ( ((voRC != null
			&& form.getLocalContext().getCurrentRCVoIsNotNull()
			&& form.getLocalContext().getCurrentRCVo().getVersion_ReferralCoding() != voRC.getVersion_ReferralCoding() )
			 || (voRC != null
				&& form.getLocalContext().getCurrentRCVo() == null))
			&& bShowMessage)
		{
			engine.showMessage("The Referral Coding record has been changed by another user. Please review and edit again.");
			bReturnValue = false;
		}
		else if (voRC != null
			&& form.getLocalContext().getCurrentRCVoIsNotNull()
			&& form.getLocalContext().getCurrentRCVo().getVersion_ReferralCoding() == voRC.getVersion_ReferralCoding()
			&& bShowMessage)
		{
			form.getLocalContext().setCurrentRCVo(voRC);
			return true;
		}
		form.grdCoding().getRows().clear();
		form.getLocalContext().setCurrentRCVo(voRC);
	
		populateRCGrid(voRC);
		
		return bReturnValue;
	}

	private boolean populateGridFromCatsReferral(Boolean bShowMessage) 
	{
		boolean bReturnValue = true;
		ReferralCodingVo voRC = domain.getReferralCoding(form.getGlobalContext().RefMan.getCatsReferral(), null);
		if ( ((voRC != null
			&& form.getLocalContext().getCurrentRCVoIsNotNull()
			&& form.getLocalContext().getCurrentRCVo().getVersion_ReferralCoding() != voRC.getVersion_ReferralCoding() )
			 || (voRC != null
				&& form.getLocalContext().getCurrentRCVo() == null))
			&& bShowMessage)
		{
			engine.showMessage("The Referral Coding record has been changed by another user. Please review and edit again.");
			bReturnValue = false;
		}
		else if (voRC != null
			&& form.getLocalContext().getCurrentRCVoIsNotNull()
			&& form.getLocalContext().getCurrentRCVo().getVersion_ReferralCoding() == voRC.getVersion_ReferralCoding()
			&& bShowMessage)
		{
			form.getLocalContext().setCurrentRCVo(voRC);
			return true;
		}
		form.grdCoding().getRows().clear();
		form.getLocalContext().setCurrentRCVo(voRC);
	
		populateRCGrid(voRC);
		
		return bReturnValue;
	}

	private void populateRCGrid(ReferralCodingVo voRC) 
	{
		if (voRC != null)
		{
			form.dtimRec().setValue(voRC.getAuthoringDateTime());
			if (voRC.getAuthoringMOSIsNotNull()
				&& voRC.getAuthoringMOS().getNameIsNotNull() )
				form.txtMOS().setValue(voRC.getAuthoringMOS().getName().toString());
		}

		for (int i = 0 ; voRC != null && voRC.getCodingItemsIsNotNull() && i < voRC.getCodingItems().size() ; i++)
		{
			ReferralCodingItemVo voItem = voRC.getCodingItems().get(i);
			
			if (voItem.getPatientProcedureIsNotNull())
				addProcedureToCodingGrid(voItem.getPatientProcedure(), voItem.getOPCS4(), voItem.getICD10(), voItem.getProcLaterality(), voItem.getID_ReferralCodingItemIsNotNull()); 
			else if (voItem.getPatientDiagnosisIsNotNull())
				addDiagnosisToCodingGrid(voItem.getPatientDiagnosis(), voItem.getICD10(), voItem.getOPCS4(), voItem.getProcLaterality(), voItem.getID_ReferralCodingItemIsNotNull()); 
			else if (voItem.getOPCS4IsNotNull())
				addOPCS4ProcedureToCodingGrid(voItem.getOPCS4(), voItem.getProcLaterality());
			else if (voItem.getICD10IsNotNull())
				addICD10DiagnosisToCodingGrid(voItem.getICD10(), voItem.getProcLaterality());
		}
		
		form.txtComments().setValue(voRC!=null ? voRC.getComments() : null);//WDEV-18539
	}

	private void addICD10DiagnosisToCodingGrid(String icd10, LateralityLRB lateralityLRB)
	{
		grdCodingRow rowCoding = form.grdCoding().getRows().newRow();
		
		rowCoding.setColDiagProc("");
		rowCoding.setTooltipForColDiagProc("");
		rowCoding.setColDiagVo(null);
		
		rowCoding.setColICD10(icd10);
		rowCoding.setColOPCS4("");
		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColEditOPCSReadOnly(true);
		rowCoding.setColLaterality(lateralityLRB);
		
		rowCoding.setBackColor(Color.Orange);
		rowCoding.setValue(null);
	}

	private void addOPCS4ProcedureToCodingGrid(String string, LateralityLRB lateralityLRB) 
	{
		grdCodingRow rowCoding = form.grdCoding().getRows().newRow();
		
		rowCoding.setColDiagProc("");
		rowCoding.setTooltipForColDiagProc("");
		rowCoding.setColDiagVo(null);
		
		rowCoding.setColICD10("");
		rowCoding.setColOPCS4(string);
		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColLaterality(lateralityLRB);

		rowCoding.setBackColor(Color.LightBlue);
		rowCoding.setValue(null);
	}

	private void populateProceduresGrid() 
	{
		form.grdProcedures().getRows().clear();

		PatientProcedureShortWithCareIntraOperativeVoCollection voCollNONSFSProcedures = domain.listNonSFSProcedures(form.getLocalContext().getCurrentCareContext());

		PatientProcedureShortWithCareIntraOperativeVoCollection voCollProcedures = domain.listProcedureForReferral(form.getLocalContext().getCurrentCareContext());
		if(voCollProcedures != null)
		{
			for(int i=0;i<voCollProcedures.size();i++)
			{
				grdProceduresRow row = form.grdProcedures().getRows().newRow();
				
				if (voCollProcedures.get(i).getProcDateIsNotNull())
					row.setColDate(voCollProcedures.get(i).getProcDate().toString());
				
				if(voCollProcedures.get(i).getProcedure() != null)
				{
					row.setColProc(voCollProcedures.get(i).getProcedure().getProcedureName());
					row.setTooltipForColProc(voCollProcedures.get(i).getProcedure().getProcedureName());
				}
				else if (voCollProcedures.get(i).getProcedureDescriptionIsNotNull())
				{
					row.setColProc(voCollProcedures.get(i).getProcedureDescription());
					row.setTooltipForColProc(voCollProcedures.get(i).getProcedureDescription());
				}
				
				if (voCollProcedures.get(i).getInfoSourceIsNotNull() && !voCollProcedures.get(i).getInfoSource().equals(SourceofInformation.CLINICALCONTACT))
					row.setColPMH(form.getImages().Core.Add);
				else
					row.setColPMH(null);
					
				if (voCollNONSFSProcedures.contains(voCollProcedures.get(i)) )
					row.setBackColor(Color.Green);
				else						
					row.setBackColor(Color.LightBlue);

				// WDEV-15358
				// Set to selectable if the procedure has an intraoperative record, or if it's
				// planned procedure has an intraoperative record
				if (voCollProcedures.get(i).getIntraOperativeRecordIsNotNull() ||
						voCollProcedures.get(i).getPlannedIntraoperativeRecordIsNotNull())
					row.setSelectable(true);
				else
					row.setSelectable(false);
				
				row.setValue(voCollProcedures.get(i));
			}
		}	
	}

	private void populateDiagnosesGrid()
	{
		form.grdDiagnoses().getRows().clear();
		
		PatientDiagnosisListVoCollection voCollDiags = domain.listDiagnosisComplicationsForReferral(form.getLocalContext().getCurrentCareContext());
		if(voCollDiags != null)
		{
			for(int i=0;i<voCollDiags.size();i++)
			{
				grdDiagnosesRow row = form.grdDiagnoses().getRows().newRow();
				
				if (voCollDiags.get(i).getDiagnosedDateIsNotNull())
					row.setColDate(voCollDiags.get(i).getDiagnosedDate().toString());
				
				if(voCollDiags.get(i).getDiagnosisDescriptionIsNotNull())
				{
					row.setColDiag(voCollDiags.get(i).getDiagnosisDescription());
					row.setTooltipForColDiag(voCollDiags.get(i).getDiagnosisDescription());
				}

				if(voCollDiags.get(i).getDiagnosisDescriptionIsNotNull())
					row.setColDiag(voCollDiags.get(i).getDiagnosisDescription());
				
				row.setColPrimary(isPrimaryDiagnosisActive(voCollDiags.get(i)) ? form.getImages().Core.Pin : null);

				if (voCollDiags.get(i).getIsPMHIsNotNull() && voCollDiags.get(i).getIsPMH())
					row.setColPMH(form.getImages().Core.Add);
				else
					row.setColPMH(null);
					
				row.setBackColor(Color.Orange);

				row.setValue(voCollDiags.get(i));
			}
		}	
	}

	private boolean isPrimaryDiagnosisActive(PatientDiagnosisListVo voPatDiagShort)
	{
		if (voPatDiagShort == null)
			return false;

		return isPrimaryDiagnosisActive(voPatDiagShort, voPatDiagShort.getPrimaryForCareSpells());
	}

	private boolean isPrimaryDiagnosisActive(PatientDiagnosisRefVo voPatDiagRef, CSPrimaryDiagnosisVoCollection voColl)
	{
		for (int i = 0; i < voColl.size(); i++)
		{
			boolean isActive = voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive().booleanValue();
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagRef);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getLocalContext().getCurrentCareContext());

			if (isActive && sameDiagnosis && sameCareContext)
				return true;
		}
		return false;
	}

	@Override
	protected void onGrdCodingSelectionChanged()
	{
		updateContextMenus();
		
		for (int i = 0 ; i < form.grdCoding().getRows().size() ; i++)
		{
			grdCodingRow rowDisable = form.grdCoding().getRows().get(i);
			rowDisable.setReadOnly(true);
			rowDisable.setReadOnly(true);
		}

		grdCodingRow rowCoding = form.grdCoding().getSelectedRow();
		rowCoding.setReadOnly(false);
		rowCoding.setReadOnly(false);

	}
	
	@Override
	protected void onGrdProceduresSelectionChanged()
	{
		updateContextMenus();
	}
	
	@Override
	protected void onGrdDiagnosesSelectionChanged()
	{
		updateContextMenus();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		
		if (form.getMode().equals(FormMode.VIEW))
		{
			if(ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
			{
				if (fillCodingGrid(Boolean.TRUE, form.cmbPasEvents().getValue()) == false)
					return;	
			}
			else
			{
				if (fillCodingGrid(Boolean.TRUE, null) == false)
					return;	
			}
		}
		
		switch (menuItemID)
		{
			case GenForm.ContextMenus.LIP.New:
				if(form.grdDiagnoses().getSelectedRow() != null)
					addDiagnosisToCodingGrid(form.grdDiagnoses().getSelectedRow().getValue(), "", "", null, false);
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCodingProcedureMenu.ADD_CODING:
				if(form.grdProcedures().getSelectedRow() != null)
					addProcedureToCodingGrid(form.grdProcedures().getSelectedRow().getValue(), "", "", null, false);
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCodingProcedureMenu.NEW_SFS:
				if(form.grdProcedures().getSelectedRow() != null)
				{
					linkNewSFS(form.grdProcedures().getSelectedRow().getValue());
					return;
				}
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCoding.MOVE_UP:
				if (form.grdCoding().getSelectedRow() != null)
					form.grdCoding().moveUp();
				updateContextMenus();
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCoding.MOVE_DOWN:
				if (form.grdCoding().getSelectedRow() != null)
					form.grdCoding().moveDown();
				updateContextMenus();
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCoding.ADD_ICD10:
				addNewRow(TaxonomyType.ICD10);
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCoding.ADD_OPCS:
				addNewRow(TaxonomyType.OPCS4);
			break;
			case GenForm.ContextMenus.RefManNamespace.ReferralCoding.REMOVE:
				removeRow();
			break;
		}
		form.setMode(FormMode.EDIT);
	}
	
	private void linkNewSFS(PatientProcedureShortWithCareIntraOperativeVo value)
	{	
		if (form.grdProcedures().getValue() != null
			&& form.grdProcedures().getValue().getPlannedProcIsNotNull())
		{
			PatientProcedureVo voProc = new PatientProcedureVo(form.grdProcedures().getValue().getPlannedProc().getID_PatientProcedure(), form.grdProcedures().getValue().getPlannedProc().getVersion_PatientProcedure());
			form.getGlobalContext().Clinical.setPatientProcedureForIntraOperativeDialog(voProc);
			engine.open(form.getForms().RefMan.ReferralCodingProcedureToSFSAssessmentDialog);
		}
	}

	private void removeRow()
	{
		form.grdCoding().getRows().remove(form.grdCoding().getSelectedRowIndex());
		updateContextMenus();
	}

	private void addNewRow(TaxonomyType type)
	{
		TaxonomyMap voTaxonomy = new TaxonomyMap();
		voTaxonomy.setTaxonomyName(type);
		form.getGlobalContext().Core.setTaxonomyMap(voTaxonomy);
		
		form.getLocalContext().setSelectedRow(null);
		
		form.grdCoding().setValue(null);
		
		engine.open(form.getForms().Core.TaxonomySearch);
		
		updateContextMenus();
	}

	private void addToCurrentRow(TaxonomyType type, grdCodingRow row) 
	{
		TaxonomyMap voTaxonomy = new TaxonomyMap();
		voTaxonomy.setTaxonomyName(type);
		form.getGlobalContext().Core.setTaxonomyMap(voTaxonomy);
		
		form.getGlobalContext().Core.setTaxonomySearchForName(row.getColDiagProc() != null ? row.getColDiagProc() : row.getColDiagProc());
		
		form.getLocalContext().setSelectedRow(row);
		engine.open(form.getForms().Core.TaxonomySearch);
		form.setMode(FormMode.EDIT);
	}

	private void addProcedureToCodingGrid(PatientProcedureShortWithCareIntraOperativeVo voProc, String stringOPCS4, String stringICD10, LateralityLRB lateralityLRB, boolean bSavedRecord) 
	{
		grdCodingRow rowCoding = form.grdCoding().getRows().newRow();
		
		rowCoding.setColDiagProc(voProc.getProcedureDescription());
		rowCoding.setTooltipForColDiagProc(voProc.getProcedureDescription());
		if (voProc.getProcedureIsNotNull()
			&& voProc.getProcedure().getID_ProcedureIsNotNull())
		{

			ProcedureVo voProcWithMappings = domain.getProcedureWithTaxonomyMappings(voProc.getProcedure());
			rowCoding.setColProcVo(voProc);
			rowCoding.setColICD10(stringICD10 == "" ? findICD10(voProcWithMappings.getCciMappings()) : stringICD10);
			rowCoding.setColOPCS4(stringOPCS4 == "" ? findOPCS4(voProcWithMappings.getCciMappings()) : stringOPCS4);
		}
		if (voProc != null && voProc.getProcedure() == null)
		{
			rowCoding.setColProcVo(voProc);
			rowCoding.setColICD10(stringICD10);
			rowCoding.setColOPCS4(stringOPCS4);
		}
		
		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColEditOPCSReadOnly(true);
		rowCoding.setBackColor(Color.LightBlue);
		rowCoding.setColLaterality(bSavedRecord ? lateralityLRB : voProc.getProcLaterality());

		rowCoding.setValue(null);

		form.grdProcedures().setValue(null);
		
		form.setMode(FormMode.EDIT);
		
		if (form.getLocalContext().getCurrentRCVo() == null)
		{
			form.dtimRec().setValue(new DateTime());
			if (engine.getLoggedInUser() != null
				&& engine.getLoggedInUser().getUserRealName() != null)
				form.txtMOS().setValue(engine.getLoggedInUser().getUserRealName().toString());
		}

		updateContextMenus();
	}

	private void addDiagnosisToCodingGrid(PatientDiagnosisShortVo voDiag, String stringICD10, String stringOPCS4, LateralityLRB lateralityLRB, boolean bSavedRecord) 
	{
		grdCodingRow rowCoding = form.grdCoding().getRows().newRow();
			
		rowCoding.setColDiagProc(voDiag.getDiagnosisDescription());
		rowCoding.setTooltipForColDiagProc(voDiag.getDiagnosisDescription());
		if (voDiag.getDiagnosisIsNotNull()
			&& voDiag.getDiagnosis().getID_DiagnosisIsNotNull())
		{
			DiagnosisVo voDiagWithMappings = domain.getDiagnosisWithTaxonomyMappings(voDiag.getDiagnosis());
			rowCoding.setColDiagVo(voDiag);
			rowCoding.setColICD10(stringICD10 == "" ? findICD10(voDiagWithMappings.getCciMappings()) : stringICD10);
			rowCoding.setColOPCS4(stringOPCS4 == "" ? findOPCS4(voDiagWithMappings.getCciMappings()) : stringOPCS4);
		}	
		if (voDiag != null && voDiag.getDiagnosis() == null)
		{
			rowCoding.setColDiagVo(voDiag);
			rowCoding.setColICD10(stringICD10);
			rowCoding.setColOPCS4(stringOPCS4);
		}

		rowCoding.setColEditICDReadOnly(true);
		rowCoding.setColEditOPCSReadOnly(true);
		rowCoding.setColLaterality(bSavedRecord ? lateralityLRB : voDiag.getDiagLaterality());

		rowCoding.setBackColor(Color.Orange);
		rowCoding.setValue(null);
			
		form.grdDiagnoses().setValue(null);
			
		form.setMode(FormMode.EDIT);

		if (form.getLocalContext().getCurrentRCVo() == null)
		{
			form.dtimRec().setValue(new DateTime());
			if (engine.getLoggedInUser() != null
				&& engine.getLoggedInUser().getUserRealName() != null)
				form.txtMOS().setValue(engine.getLoggedInUser().getUserRealName().toString());
		}

		updateContextMenus();
	}

	private String findOPCS4(TaxonomyMapCollection cciMappings)
	{
		for (int i = 0 ; cciMappings != null && i < cciMappings.size() ; i++)
		{
			if (cciMappings.get(i).getTaxonomyNameIsNotNull()
				&& cciMappings.get(i).getTaxonomyName().equals(TaxonomyType.OPCS4))
				return cciMappings.get(i).getTaxonomyCode();
		}
		return "";
	}

	private String findICD10(TaxonomyMapCollection cciMappings) 
	{
		for (int i = 0 ; cciMappings != null && i < cciMappings.size() ; i++)
		{
			if (cciMappings.get(i).getTaxonomyNameIsNotNull()
				&& cciMappings.get(i).getTaxonomyName().equals(TaxonomyType.ICD10))
				return cciMappings.get(i).getTaxonomyCode();
		}
		return "";
	}

	private void updateContextMenus() 
	{
		form.getContextMenus().RefMan.hideAllReferralCodingProcedureMenuMenuItems();
		form.getContextMenus().hideAllLIPMenuItems();
		form.getContextMenus().RefMan.hideAllReferralCodingMenuItems();
		form.getContextMenus().RefMan.hideAllReferralCodingProcedureMenuMenuItems();
		
		//Diagnoses
		if (form.grdDiagnoses().getSelectedRow() != null && isDiagNotAlreadyCoded(form.grdDiagnoses().getSelectedRow().getValue()))
		{
			form.getContextMenus().getLIPNewItem().setVisible(true);
			
			if(ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
				form.getContextMenus().getLIPNewItem().setVisible(form.cmbPasEvents().getValue() != null);
			
			form.getContextMenus().getLIPNewItem().setText("Add for coding");
		}

		//Procedures
		if (form.grdProcedures().getSelectedRow() != null  && isProcNotAlreadyCoded(form.grdProcedures().getSelectedRow().getValue())) // WDEV-15443 
		{
			form.getContextMenus().RefMan.getReferralCodingProcedureMenuADD_CODINGItem().setVisible(true);
			
			if(ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
				form.getContextMenus().RefMan.getReferralCodingProcedureMenuADD_CODINGItem().setVisible(form.cmbPasEvents().getValue() != null && !form.grdProcedures().getSelectedRow().getBackColor().equals(Color.Green));

			if(ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
				form.getContextMenus().RefMan.getReferralCodingProcedureMenuNEW_SFSItem().setVisible(form.grdProcedures().getSelectedRow().getBackColor().equals(Color.Green));
		}

		form.getContextMenus().RefMan.getReferralCodingADD_ICD10Item().setVisible(findADiagnosisInGrid() && form.grdCoding().getRows().size() > 0 ? true : false);
		form.getContextMenus().RefMan.getReferralCodingADD_ICD10Item().setEnabled(findADiagnosisInGrid() && form.grdCoding().getRows().size() > 0 ? true : false);
		form.getContextMenus().RefMan.getReferralCodingADD_OPCSItem().setVisible(findAProcedureInGrid() && form.grdCoding().getRows().size() > 0 ? true : false);
		form.getContextMenus().RefMan.getReferralCodingADD_OPCSItem().setEnabled(findAProcedureInGrid() && form.grdCoding().getRows().size() > 0 ? true : false);

		//Coding Items
		if (form.grdCoding().getSelectedRow() != null)
		{
			form.getContextMenus().RefMan.getReferralCodingMOVE_UPItem().setVisible(form.grdCoding().canMoveCurrentUp() ? true : false);
			form.getContextMenus().RefMan.getReferralCodingMOVE_UPItem().setEnabled(form.grdCoding().canMoveCurrentUp() ? true : false);
			form.getContextMenus().RefMan.getReferralCodingMOVE_DOWNItem().setVisible(form.grdCoding().canMoveCurrentDown() ? true : false);
			form.getContextMenus().RefMan.getReferralCodingMOVE_DOWNItem().setEnabled(form.grdCoding().canMoveCurrentDown() ? true : false);
			
			form.getContextMenus().RefMan.getReferralCodingREMOVEItem().setVisible(true);
			form.getContextMenus().RefMan.getReferralCodingREMOVEItem().setEnabled(true);
		}
	}

	private boolean findADiagnosisInGrid() 
	{
		for (int i = 0 ; i < form.grdCoding().getRows().size() ; i++)
		{
			if (form.grdCoding().getRows().get(i).getColDiagVo() != null)
				return true;
		}
		return false;
	}
	private boolean findAProcedureInGrid() 
	{
		for (int i = 0 ; i < form.grdCoding().getRows().size() ; i++)
		{
			if (form.grdCoding().getRows().get(i).getColProcVo() != null)
				return true;
		}
		return false;
	}

	private boolean isProcNotAlreadyCoded(PatientProcedureShortWithCareIntraOperativeVo value) 
	{
		for (int i = 0 ; i < form.grdCoding().getRows().size() ; i++)
		{
			if (form.grdCoding().getRows().get(i).getColProcVo() != null
				&& form.grdCoding().getRows().get(i).getColProcVo().getID_PatientProcedureIsNotNull()
				&& value.getID_PatientProcedure().equals(form.grdCoding().getRows().get(i).getColProcVo().getID_PatientProcedure()))
			return false;
		}
		return true;
	}

	private boolean isDiagNotAlreadyCoded(PatientDiagnosisListVo value)
	{
		for (int i = 0 ; i < form.grdCoding().getRows().size() ; i++)
		{
			if (form.grdCoding().getRows().get(i).getColDiagVo() != null
				&& form.grdCoding().getRows().get(i).getColDiagVo().getID_PatientDiagnosisIsNotNull()
				&& value.getID_PatientDiagnosis().equals(form.grdCoding().getRows().get(i).getColDiagVo().getID_PatientDiagnosis()))
			return false;
		}
		return true;
	}

	@Override
	protected void onGrdCodingGridButtonClicked(int column, grdCodingRow row) throws PresentationLogicException 
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			if(ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
			{
				if (fillCodingGrid(Boolean.TRUE, form.cmbPasEvents().getValue()) == false)
					return;	
			}
			else
			{
				if (fillCodingGrid(Boolean.TRUE, null) == false)
					return;	
			}
		}

		if (column == 4)
			addToCurrentRow(TaxonomyType.ICD10, row);
		else if (column == 6)
			addToCurrentRow(TaxonomyType.OPCS4, row);
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if (result.equals(DialogResult.OK) && formName.equals(form.getForms().RefMan.ReferralCodingProcedureToSFSAssessmentDialog))
		{
			form.grdProcedures().getSelectedRow().setBackColor(Color.LightBlue);
		}
		if (result.equals(DialogResult.OK) && formName.equals(form.getForms().Core.TaxonomySearch))
		{
			if (form.getGlobalContext().Core.getTaxonomyMap().getTaxonomyName().equals(TaxonomyType.ICD10))
			{
				grdCodingRow rowCoding = null;
				
				if (form.getLocalContext().getSelectedRow() != null)
					rowCoding = form.getLocalContext().getSelectedRow();
				else
				{	
					rowCoding = form.grdCoding().getRows().newRow();
				
					rowCoding.setColDiagProc("");
					rowCoding.setTooltipForColDiagProc("");
					rowCoding.setColDiagVo(null);
					rowCoding.setColEditICDReadOnly(true);
					rowCoding.setColEditOPCSReadOnly(true);
					
					rowCoding.setBackColor(Color.Orange);
					rowCoding.setValue(null);
				}
				rowCoding.setColOPCS4("");
				rowCoding.setColICD10(form.getGlobalContext().Core.getTaxonomyMap().getTaxonomyCode());
				form.grdCoding().setValue(null);
			}
			else if (form.getGlobalContext().Core.getTaxonomyMap().getTaxonomyName().equals(TaxonomyType.OPCS4))
			{
				grdCodingRow rowCoding = null;
				if (form.getLocalContext().getSelectedRow() != null)
					rowCoding = form.getLocalContext().getSelectedRow();
				else
				{	
					rowCoding = form.grdCoding().getRows().newRow();
				
					rowCoding.setColDiagProc("");
					rowCoding.setTooltipForColDiagProc("");
					rowCoding.setColProcVo(null);
					
					rowCoding.setColEditICDReadOnly(true);
					rowCoding.setColEditOPCSReadOnly(true);
					
					rowCoding.setBackColor(Color.LightBlue);
					rowCoding.setValue(null);
				}
				rowCoding.setColICD10("");
				rowCoding.setColOPCS4(form.getGlobalContext().Core.getTaxonomyMap().getTaxonomyCode());
				form.grdCoding().setValue(null);
			}
		}
		
		//WDEV-18539
		if (result.equals(DialogResult.OK) && formName.equals(form.getForms().RefMan.SelectPreviousDiagnoses))
		{
			for (int i=0;form.getGlobalContext().RefMan.getSelectedPatientDiagnosisListVoCollectionIsNotNull() && i<form.getGlobalContext().RefMan.getSelectedPatientDiagnosisListVoCollection().size();i++)
			{
				if (isInDiagnosisGrid(form.getGlobalContext().RefMan.getSelectedPatientDiagnosisListVoCollection().get(i)))
					continue;
				
				addRowToDiagnosisGrid(form.getGlobalContext().RefMan.getSelectedPatientDiagnosisListVoCollection().get(i));
			}
		}
		
		updateContextMenus(); //WDEV-17956
	}

	//WDEV-18539
	private boolean isInDiagnosisGrid(PatientDiagnosisListVo patientDiagnosisListVo)
	{
		for (int i=0;i<form.grdDiagnoses().getRows().size();i++)
		{
			if (patientDiagnosisListVo.equals(form.grdDiagnoses().getRows().get(i).getValue()))
					return true;
		}
		
		return false;
	}

	//WDEV-18539
	private void addRowToDiagnosisGrid(PatientDiagnosisListVo patientDiagnosisListVo)
	{
		if (patientDiagnosisListVo==null)
			return;
		
		grdDiagnosesRow row = form.grdDiagnoses().getRows().newRow();
		
		row.setColDiag(patientDiagnosisListVo.getDiagnosisDescription());
		row.setTooltipForColDiag(patientDiagnosisListVo.getDiagnosisDescription());
		
		row.setColDate(patientDiagnosisListVo.getDiagnosedDate() != null ? patientDiagnosisListVo.getDiagnosedDate().toString() : "");
		row.setTooltipForColDate(patientDiagnosisListVo.getDiagnosedDate() != null ? patientDiagnosisListVo.getDiagnosedDate().toString() : "");
		
		row.setColPrimary(isPrimaryDiagnosisActive(patientDiagnosisListVo) ? form.getImages().Core.Pin : null);

		row.setColPMH(patientDiagnosisListVo.getIsPMHIsNotNull() && patientDiagnosisListVo.getIsPMH() ? form.getImages().Core.Add : null);
		
		row.setBackColor(Color.Orange);

		row.setValue(patientDiagnosisListVo);
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		form.dtimRec().setValue(null);
		form.txtMOS().setValue("");
		
		if(ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue()
			&& form.cmbPasEvents().getValue() != null) 
			open(domain.getReferralCoding(null, form.cmbPasEvents().getValue()));
		else
			open(null);
			
		form.setMode(FormMode.VIEW);
		updateContextMenus();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if (form.grdCoding().getRows().size() == 0)
		{
			engine.showMessage("No records to save. Please enter some records in the Coding Grid and save again.");
			return;
		}

		if(ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue()
			&& form.cmbPasEvents().getValue() == null)
		{
			engine.showMessage("You need to choose an Admission to save this Coding record against.");
			return;
		}

		StringBuffer sb = new StringBuffer();
		
		for (int i = 0 ; form.grdCoding().getRows().size() > 0 &&  i < form.grdCoding().getRows().size() ; i++)
		{
			if (form.grdCoding().getRows().get(i).getBackColor().equals(Color.Orange)
				&& (form.grdCoding().getRows().get(i).getColICD10() == null
					|| (form.grdCoding().getRows().get(i).getColICD10() != null 
						&& form.grdCoding().getRows().get(i).getColICD10().toString().trim().equals("")) ) )
			{
				if (form.grdCoding().getRows().get(i).getColDiagProc().toString().length() >0)
					sb.append("Please enter a ICD10 code for the '" + form.grdCoding().getRows().get(i).getColDiagProc() + "' Diagnosis.");
				else
					sb.append("Please enter a ICD10 code for the row with a missing value for Diagnosis.");
				sb.append("\n");
			}
				
			if (form.grdCoding().getRows().get(i).getBackColor().equals(Color.LightBlue)
				&& (form.grdCoding().getRows().get(i).getColOPCS4() == null
					|| (form.grdCoding().getRows().get(i).getColOPCS4() != null 
						&& form.grdCoding().getRows().get(i).getColOPCS4().toString().trim().equals("")) ) )
			{
				if (form.grdCoding().getRows().get(i).getColDiagProc().toString().length() >0)
					sb.append("Please enter a OPCS4 code for the '" + form.grdCoding().getRows().get(i).getColDiagProc() + "' Procedure.");
				else
					sb.append("Please enter a OPCS4 code for the row with a missing value for Procedure.");
				sb.append("\n");
			}
			if (form.grdCoding().getRows().get(i).getColOPCS4() != null 
				&& form.grdCoding().getRows().get(i).getColOPCS4().toString().trim().length() > 0
				&& form.grdCoding().getRows().get(i).getColICD10() != null 
				&& form.grdCoding().getRows().get(i).getColICD10().toString().trim().length() > 0)
			{
				if (form.grdCoding().getRows().get(i).getBackColor().equals(Color.LightBlue))
				{					
					if (form.grdCoding().getRows().get(i).getColDiagProc().toString().length() >0)
						sb.append("You should not have a ICD10 code for '" + form.grdCoding().getRows().get(i).getColDiagProc() + "' Procedure.");
					else
						sb.append("You should not have a ICD10 code for a Procedure.");
					sb.append("\n"); //WDEV-15364
				}
				if (form.grdCoding().getRows().get(i).getBackColor().equals(Color.Orange))
				{					
					if (form.grdCoding().getRows().get(i).getColDiagProc().toString().length() >0)
						sb.append("You should not have a OPCS4 code for '" + form.grdCoding().getRows().get(i).getColDiagProc() + "' Diagnosis.");
					else
						sb.append("You should not have a OPCS4 code for a Diagnosis.");
				}
			}
		}
		if (sb.length() > 0)
		{
			engine.showMessage(sb.toString(), "Warning", MessageButtons.OK, MessageIcon.WARNING); //WDEV-15364
			return;
		}
			
		ReferralCodingVo voRc = save();
		if (voRc != null)
			open(voRc);
		
		form.setMode(FormMode.VIEW);
	}

	private ReferralCodingVo save() 
	{
		ReferralCodingVo voRc = populateReferallCodingFromScreen();
		if (voRc != null)
		{
			String[] error = voRc.validate();
			if (error != null)
			{
				engine.showErrors(error);
				return null;
			}

			try 
			{
				voRc = domain.saveReferralCoding(voRc, form.getGlobalContext().RefMan.getDischargedEpisodeForReferralCoding());
			} 
		 	catch (StaleObjectException e) 
		 	{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open(null);
				return null;
			} 
		 	catch (DomainInterfaceException e) 
		 	{
				engine.showMessage(e.getMessage());
				return null;
			} 
		 	catch (UniqueKeyViolationException e) 
		 	{
				engine.showMessage(e.getMessage());
				open(null);
				return null;
			}
		 	form.getLocalContext().setCurrentRCVo(voRc);
		}
		updateContextMenus();
		
		return voRc;
	}

	private ReferralCodingVo populateReferallCodingFromScreen() 
	{
		ReferralCodingVo voRC = form.getLocalContext().getCurrentRCVo();
		
		if (voRC == null)
			voRC = new ReferralCodingVo();
		
		if (voRC.getCatsReferral() == null)
			voRC.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());

		if (voRC.getAuthoringDateTime() == null)
			voRC.setAuthoringDateTime(new DateTime());

		if (voRC.getAuthoringMOS() == null)
		{
			MemberOfStaffLiteVo mosVo = new MemberOfStaffLiteVo();
			mosVo.setID_MemberOfStaff( ((IMos) domain.getMosUser()).getIMosId());
			voRC.setAuthoringMOS(mosVo);
		}
		
		if (voRC.getPasEvent() == null)
			voRC.setPasEvent(form.cmbPasEvents().getValue());
		
		ReferralCodingItemVoCollection voColl = new ReferralCodingItemVoCollection();
		for (int i = 0 ; i < form.grdCoding().getRows().size() ; i++)
		{
			ReferralCodingItemVo voItem = new ReferralCodingItemVo();
			
			voItem.setPatientDiagnosis(form.grdCoding().getRows().get(i).getColDiagVo());
			voItem.setPatientProcedure(form.grdCoding().getRows().get(i).getColProcVo());
			voItem.setICD10(form.grdCoding().getRows().get(i).getColICD10());
			voItem.setOPCS4(form.grdCoding().getRows().get(i).getColOPCS4());
			voItem.setProcLaterality(form.grdCoding().getRows().get(i).getColLaterality());
			
			voColl.add(voItem);
		}
		
		voRC.setCodingItems(voColl);
	
		voRC.setComments(form.txtComments().getValue());//WDEV-18539
		form.getLocalContext().setCurrentRCVo(voRC);
		
		return voRC;
	}

	@Override
	protected void onFormModeChanged() 
	{
		if(ConfigFlag.UI.LINK_REFERRAL_CODING_TO_PAS_EVENT.getValue())
			form.cmbPasEvents().setEnabled( ! form.getMode().equals(FormMode.EDIT));
		
		updateControlsState();

	}

	private void updateControlsState()
	{
		form.btnClose().setVisible(engine.isDialog() && form.getMode().equals(FormMode.VIEW));
	}

	@Override
	protected void onCmbPasEventsValueChanged() throws PresentationLogicException
	{
		if (form.cmbPasEvents().getValue() != null)
			fillCodingGrid(Boolean.FALSE, form.cmbPasEvents().getValue());
		else
			form.grdCoding().getRows().clear();
		
		form.cmbPasEvents().setRequired(form.cmbPasEvents().getValue() == null);

		form.setMode(FormMode.VIEW);
		updateContextMenus();
	}

	//wdev-18539
	@Override
	protected void onBtnPreviousDiagnosisClick() throws PresentationLogicException
	{
		form.getGlobalContext().RefMan.setSelectedPatientDiagnosisListVoCollection(null);
		PatientRefVo patientRef = domain.getPatientRef(form.getGlobalContext().RefMan.getCatsReferral());
		engine.open(form.getForms().RefMan.SelectPreviousDiagnoses, new Object[] {form.getLocalContext().getCurrentCareContext(),patientRef});
	}

	//WDEV-18542
	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

}
