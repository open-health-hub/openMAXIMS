// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.patientspecialtyassessments;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnStructuralContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 776, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			ims.framework.FormUiLogic m_ccStructuralAssessmentForm = loader.loadComponent(127109, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 2, skipContextValidation);
			//ims.framework.Control m_ccStructuralAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(8), new Integer(0), new Integer(776), new Integer(584), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2), m_ccStructuralAssessmentForm, instance1 } );
			ims.framework.Control m_ccStructuralAssessmentControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2), m_ccStructuralAssessmentForm, instance1, Boolean.FALSE } );
			super.addControl(m_ccStructuralAssessmentControl);
			Menu[] menus1 = m_ccStructuralAssessmentForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
		}
		public ims.assessment.forms.structuralassessment.IComponent ccStructuralAssessment()
		{
			return (ims.assessment.forms.structuralassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setccStructuralAssessmentValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setccStructuralAssessmentVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean isccStructuralAssessmentVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setccStructuralAssessmentEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean isccStructuralAssessmentEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
	}
	public static class ctnGraphicalContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Custom Controls
			ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 792, 592, ims.framework.enumerations.ControlAnchoring.ALL);
			ims.framework.FormUiLogic m_ccGraphicalForm = loader.loadComponent(127114, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1003, skipContextValidation);
			//ims.framework.Control m_ccGraphicalControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(0), new Integer(0), new Integer(792), new Integer(592), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1003), m_ccGraphicalForm, instance1 } );
			ims.framework.Control m_ccGraphicalControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1003), m_ccGraphicalForm, instance1, Boolean.FALSE } );
			super.addControl(m_ccGraphicalControl);
			Menu[] menus1 = m_ccGraphicalForm.getForm().getRegisteredMenus();
			for(int x = 0; x < menus1.length; x++)
			{
				form.registerMenu(menus1[x]);
			}
		}
		public ims.assessment.forms.graphicalassessment.IComponent ccGraphical()
		{
			return (ims.assessment.forms.graphicalassessment.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
		}
		public void setccGraphicalValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
		{
			((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
		}
		public void setccGraphicalVisible(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setVisible(value);
		}
		public boolean isccGraphicalVisible()
		{
			return ((ims.framework.Control)super.getControl(0)).isVisible();
		}
		public void setccGraphicalEnabled(boolean value)
		{
			((ims.framework.Control)super.getControl(0)).setEnabled(value);
		}
		public boolean isccGraphicalEnabled()
		{
			return ((ims.framework.Control)super.getControl(0)).isEnabled();
		}
	}
	public static class recbrAssessmentsRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.assessment.vo.PatientAssessmentLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.assessment.vo.PatientAssessmentLiteVo getValue()
		{
			return (ims.assessment.vo.PatientAssessmentLiteVo)super.control.getValue();
		}
		public void setValue(ims.assessment.vo.PatientAssessmentLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(808, 656);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Container Clasess
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 792, 592, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_ctnStructural = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_ctnStructural);
		ctnStructuralContainer ctnStructural = (ctnStructuralContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnStructuralContainer.class, m_ctnStructural, factory);
		ims.framework.utils.SizeInfo m_ctnStructuralDesignSize = new ims.framework.utils.SizeInfo(792, 592);
		ims.framework.utils.SizeInfo m_ctnStructuralRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper3.getWidth(), anchoringHelper3.getHeight());
		ctnStructural.setContext(form, appForm, m_ctnStructural, loader, startControlID, m_ctnStructuralDesignSize, m_ctnStructuralRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnStructural);
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 792, 592, ims.framework.enumerations.ControlAnchoring.ALL);
		Container m_ctnGraphical = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, new Boolean(false)});
		addControl(m_ctnGraphical);
		ctnGraphicalContainer ctnGraphical = (ctnGraphicalContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnGraphicalContainer.class, m_ctnGraphical, factory);
		ims.framework.utils.SizeInfo m_ctnGraphicalDesignSize = new ims.framework.utils.SizeInfo(792, 592);
		ims.framework.utils.SizeInfo m_ctnGraphicalRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper4.getWidth(), anchoringHelper4.getHeight());
		ctnGraphical.setContext(form, appForm, m_ctnGraphical, loader, startControlID, m_ctnGraphicalDesignSize, m_ctnGraphicalRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnGraphical);

		// Button Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 311, 624, 88, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 2008), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Copy Last", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 640, 624, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 2009), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 124, 624, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 2006), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New Structured", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 232, 624, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 2007), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 640, 624, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 2011), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 720, 624, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 2013), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 14, 624, 106, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 2005), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New Graphical", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 0, 776, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrAssessmentsTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrAssessmentsTemp);
		recbrAssessmentsRecordBrowser recbrAssessments = (recbrAssessmentsRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrAssessmentsRecordBrowser.class, m_recbrAssessmentsTemp);
		super.addRecordBrowser(recbrAssessments);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 552, 624, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 2004), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Completed", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ctnStructuralContainer ctnStructural()
	{
		return (ctnStructuralContainer)super.getContainer(0);
	}
	public ctnGraphicalContainer ctnGraphical()
	{
		return (ctnGraphicalContainer)super.getContainer(1);
	}
	public Button btnCopyLast()
	{
		return (Button)super.getControl(2);
	}
	public Button btnPrint()
	{
		return (Button)super.getControl(3);
	}
	public Button btnNewStructural()
	{
		return (Button)super.getControl(4);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(5);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(6);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(7);
	}
	public Button btnNewGraphical()
	{
		return (Button)super.getControl(8);
	}
	public recbrAssessmentsRecordBrowser recbrAssessments()
	{
		return (recbrAssessmentsRecordBrowser)super.getRecordBrowser(0);
	}
	public CheckBox chkCompleted()
	{
		return (CheckBox)super.getControl(10);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Assessment = new AssessmentForms();
			Core = new CoreForms();
		}
		public final class AssessmentForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AssessmentForms()
			{
				AssessmentsForSpecialty = new LocalFormName(127123);
				GraphicAssessmentsForSpecialty = new LocalFormName(127112);
			}
			public final FormName AssessmentsForSpecialty;
			public final FormName GraphicAssessmentsForSpecialty;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				DocumentPrintPreview = new LocalFormName(102368);
			}
			public final FormName DocumentPrintPreview;
		}

		public AssessmentForms Assessment;
		public CoreForms Core;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ConsultationAssessments = new ims.framework.ContextVariable("ConsultationAssessments", prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ConsultationAssessments_" + componentIdentifier + "");
			cxl_PatientAssessment = new ims.framework.ContextVariable("PatientAssessment", prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier + "");
			cxl_SelectedUserAssessmentLite = new ims.framework.ContextVariable("SelectedUserAssessmentLite", prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__SelectedUserAssessmentLite_" + componentIdentifier + "");
			cxl_EditingGraphicalAssessment = new ims.framework.ContextVariable("EditingGraphicalAssessment", prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__EditingGraphicalAssessment_" + componentIdentifier + "");
			cxl_ParAss = new ims.framework.ContextVariable("ParAss", prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier + "");
		}
		
		public boolean getConsultationAssessmentsIsNotNull()
		{
			return !cxl_ConsultationAssessments.getValueIsNull(context);
		}
		public ims.RefMan.vo.ConsultationAssessmentsLiteVo getConsultationAssessments()
		{
			return (ims.RefMan.vo.ConsultationAssessmentsLiteVo)cxl_ConsultationAssessments.getValue(context);
		}
		public void setConsultationAssessments(ims.RefMan.vo.ConsultationAssessmentsLiteVo value)
		{
			cxl_ConsultationAssessments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConsultationAssessments = null;
		public boolean getPatientAssessmentIsNotNull()
		{
			return !cxl_PatientAssessment.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getPatientAssessment()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_PatientAssessment.getValue(context);
		}
		public void setPatientAssessment(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_PatientAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientAssessment = null;
		public boolean getSelectedUserAssessmentLiteIsNotNull()
		{
			return !cxl_SelectedUserAssessmentLite.getValueIsNull(context);
		}
		public ims.assessment.vo.UserAssessmentLiteVo getSelectedUserAssessmentLite()
		{
			return (ims.assessment.vo.UserAssessmentLiteVo)cxl_SelectedUserAssessmentLite.getValue(context);
		}
		public void setSelectedUserAssessmentLite(ims.assessment.vo.UserAssessmentLiteVo value)
		{
			cxl_SelectedUserAssessmentLite.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedUserAssessmentLite = null;
		public boolean getEditingGraphicalAssessmentIsNotNull()
		{
			return !cxl_EditingGraphicalAssessment.getValueIsNull(context);
		}
		public Boolean getEditingGraphicalAssessment()
		{
			return (Boolean)cxl_EditingGraphicalAssessment.getValue(context);
		}
		public void setEditingGraphicalAssessment(Boolean value)
		{
			cxl_EditingGraphicalAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditingGraphicalAssessment = null;
		public boolean getParAssIsNotNull()
		{
			return !cxl_ParAss.getValueIsNull(context);
		}
		public ims.assessment.vo.PatientAssessmentVo getParAss()
		{
			return (ims.assessment.vo.PatientAssessmentVo)cxl_ParAss.getValue(context);
		}
		public void setParAss(ims.assessment.vo.PatientAssessmentVo value)
		{
			cxl_ParAss.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ParAss = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[119];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentLite", "BO-1028100006-ID", "ID_GraphicAssessment");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentLite", "BO-1028100006-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentLite", "BO-1028100006-ASSESSMENTTYPE", "AssessmentType");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentLite", "BO-1028100006-ACTIVESTATUS", "ActiveStatus");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentLite", "BO-1028100006-HELPURL", "HelpUrl");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedGraphicAssessmentLite", "BO-1028100006-STOREPRINTEDREPORT", "StorePrintedReport");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentLite", "BO-1003100043-ID", "ID_UserAssessment");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentLite", "BO-1003100043-NAME", "Name");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentLite", "BO-1003100043-DESCRIPTION", "Description");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentLite", "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentLite", "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedUserAssessmentLite", "BO-1003100043-HELPURL", "HelpURL");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ConsultationAssessments_" + componentIdentifier, "BO-1096100043-ID", "ID_ConsultationAssessments");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ConsultationAssessments_" + componentIdentifier, "BO-1096100043-CATSREFERRAL", "CatsReferral");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__PatientAssessment_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__SelectedUserAssessmentLite_" + componentIdentifier, "BO-1003100043-ID", "ID_UserAssessment");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__SelectedUserAssessmentLite_" + componentIdentifier, "BO-1003100043-NAME", "Name");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__SelectedUserAssessmentLite_" + componentIdentifier, "BO-1003100043-DESCRIPTION", "Description");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__SelectedUserAssessmentLite_" + componentIdentifier, "BO-1003100043-ASSESSMENTTYPE", "AssessmentType");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__SelectedUserAssessmentLite_" + componentIdentifier, "BO-1003100043-ACTIVESTATUS", "ActiveStatus");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__SelectedUserAssessmentLite_" + componentIdentifier, "BO-1003100043-HELPURL", "HelpURL");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-ID", "ID_PatientAssessment");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-STATUS", "Status");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-COMPLETEDDATETIME", "CompletedDateTime");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-STATUSREASON", "StatusReason");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-STATUSREASONTEXT", "StatusReasonText");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-DPPTYPE", "DPPType");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-DPPTYPETEXT", "DPPTypeText");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-ISCURRENTFORTYPE", "IsCurrentForType");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-CLINICALCONTACT", "ClinicalContact");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-CARECONTEXT", "CareContext");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-EPISODEOFCARE", "EpisodeOfCare");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-PATIENT", "Patient");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-SCORE", "Score");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PatientSpecialtyAssessments.__internal_x_context__ParAss_" + componentIdentifier, "BO-1003100048-ISASSESSMENTDOCUMENTSAVED", "IsAssessmentDocumentSaved");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
