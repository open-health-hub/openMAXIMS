// This code was generated by Peter Martin using IMS Development Environment (version 1.71 build 3763.19232)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.patientspecialtyassessments;

import ims.assessment.helper.DynamicAssessmentHelper;
import ims.assessment.instantiation.vo.PatientAssessmentRefVo;
import ims.assessment.vo.GraphicAssessmentLiteVoCollection;
import ims.assessment.vo.GraphicAssessmentVo;
import ims.assessment.vo.PatientAssessmentAnswerVo;
import ims.assessment.vo.PatientAssessmentDataVo;
import ims.assessment.vo.PatientAssessmentGroupVo;
import ims.assessment.vo.PatientAssessmentQuestionVo;
import ims.assessment.vo.PatientAssessmentShortVo;
import ims.assessment.vo.PatientAssessmentShortVoCollection;
import ims.assessment.vo.PatientAssessmentVo;
import ims.assessment.vo.UserAssessmentLiteVo;
import ims.assessment.vo.UserAssessmentLiteVoCollection;
import ims.assessment.vo.UserAssessmentWithServiceCollVo;
import ims.RefMan.vo.ConsultationAssessmentsLiteVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.admin.vo.TemplateBoRefVo;
import ims.core.clinical.vo.ServiceRefVoCollection;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AnswerDetailsVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientAssessmentInfoVo;
import ims.core.vo.PatientDocumentStatusVo;
import ims.core.vo.PatientDocumentStatusVoCollection;
import ims.core.vo.PatientDocumentVo;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.lookups.DocumentCategory;
import ims.core.vo.lookups.DocumentCreationType;
import ims.core.vo.lookups.DocumentStatus;
import ims.core.vo.lookups.FileType;
import ims.core.vo.lookups.PatientAssessmentStatusReason;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.UserAssessmentCategory;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

import java.io.File;
import java.security.SecureRandom;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	

	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Component interface methods
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	public void initialize()
	{
		form.ctnStructural().setVisible(true);
		form.ctnGraphical().setVisible(false);
		
		open();
	}
	
	
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Event handlers region
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{
//		blankGraphical();
		initialize(); 
	}
	
	
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
		
		fireOnFormModeChange(form.getMode());
	}
	
	
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		// TODO Review code here
		if (form.getForms().Assessment.AssessmentsForSpecialty.equals(formName) && DialogResult.OK.equals(result))
		{
			UserAssessmentLiteVo userAssessmentLite = form.getGlobalContext().Core.getSelectedUserAssessmentLite();
			form.getLocalContext().setSelectedUserAssessmentLite(userAssessmentLite);
			form.ctnStructural().ccStructuralAssessment().setPatientAssessment(populatePatientAssessmentVo(userAssessmentLite),false,PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
			form.ctnStructural().setVisible(true);
			
			form.ctnGraphical().setVisible(false);
			
			// Set form to EDIT mode
			form.getLocalContext().setEditingGraphicalAssessment(Boolean.FALSE);
			form.setMode(FormMode.EDIT);
		}
		else if(form.getForms().Assessment.GraphicAssessmentsForSpecialty.equals(formName) && DialogResult.OK.equals(result))
		{
			openGraphicAssessment();
			
			// Set form to EDIT mode
			form.getLocalContext().setEditingGraphicalAssessment(Boolean.TRUE);
			form.setMode(FormMode.EDIT);
		}
		else
		{
			open();
		}
	}
	

	@Override
	protected void onRecbrAssessmentsValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		// Get selected Patient Assessment records from domain
		form.getLocalContext().setPatientAssessment(domain.getPatientAssessment(form.recbrAssessments().getValue()));
		
		// Populate Patient Assessment to screen
		populateInstanceControlsFromData(form.getLocalContext().getPatientAssessment());
		
		// Update controls state
		updateControlsState();
	}
	
	
	@Override
	protected void onBtnNewStructuralClick() throws PresentationLogicException
	{
		// Prepare screen for creating a new Structural Assessment
		newStructuralAssessmentInstance();
	}
	
	
	@Override
	protected void onBtnNewGraphicalClick() throws PresentationLogicException
	{
		// Prepare screen for creating a new Graphical Assessment
		newGraphicalAssessmentInstance();
	}

	
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		// Prepare screen for editing a Patient Assessment record
		updateInstance();
	}


	@Override
	protected void onBtnCopyLastClick() throws PresentationLogicException
	{
		// Prepare screen for cloning latest structured assessment
		cloneLatestInstance();
	}

	
	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if(save())
		{
			if (requiresPrinting(form.getLocalContext().getPatientAssessment()))
			{
				print(false);
			}

			open();
		}
	}

	
	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		// Refresh screen
		open();
	}
	
	
	@Override
	protected void onBtnPrintClick() throws PresentationLogicException
	{
		if (print(true))
		{
			open();
		}
	}

	
	
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Form presentation functions
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


	public void open() 
	{
		// Clear screen
		clearScreen();
		
		// Retrieve ConsultationAssessments record
		ConsultationAssessmentsLiteVo consultationAssessments = domain.getConsultationAssessments(form.getGlobalContext().RefMan.getCatsReferral());

		// Set local context
		form.getLocalContext().setConsultationAssessments(consultationAssessments);
		// Populate record browser with linked Patient Assessments
		populateRecordBrowserData(consultationAssessments);
		
		// Set current Patient Assessment record
		form.getLocalContext().setPatientAssessment(domain.getPatientAssessment(form.recbrAssessments().getValue()));
		
		// Populate Patient Assessment record to screen
		populateInstanceControlsFromData(form.getLocalContext().getPatientAssessment());
		
		// Set form to VIEW mode
		form.getLocalContext().setEditingGraphicalAssessment(Boolean.FALSE);
		form.setMode(FormMode.VIEW);		
	}
	
	
	public void newStructuralAssessmentInstance()
	{
		// Clear instance controls
		clearInstanceControls();
		
		// Clear local context;
		form.getLocalContext().setPatientAssessment(null);
		
		// Prepare and open dialog for listing assessments
		loadAssessmentsForSpecialtyCollection();
		engine.open(form.getForms().Assessment.AssessmentsForSpecialty);
		
		// Set form to EDIT mode
//		form.getLocalContext().setEditingGraphicalAssessment(Boolean.FALSE);
//		form.setMode(FormMode.EDIT);
	}


	public void newGraphicalAssessmentInstance()
	{
		// Clear instance controls
		clearInstanceControls();
		
		// Clear local context
		form.getLocalContext().setPatientAssessment(null);
		
		// Prepare and open dialog for selecting graphical assessment
		loadGraphicAssessmentsForSpecialtyCollection();
		engine.open(form.getForms().Assessment.GraphicAssessmentsForSpecialty);
		
		// Set form to EDIT mode
//		form.getLocalContext().setEditingGraphicalAssessment(Boolean.TRUE);
//		form.setMode(FormMode.EDIT);
	}

	
	public void updateInstance()
	{
		PatientAssessmentVo selectedPatientAssessment = form.getLocalContext().getPatientAssessment();
		
		// Check for a selected record
		if (selectedPatientAssessment == null)
			throw new CodingRuntimeException("A record must be selected for this functionality.");
		
		// Set form to EDIT mode
		form.getLocalContext().setEditingGraphicalAssessment(selectedPatientAssessment.getAssessmentData() != null && selectedPatientAssessment.getAssessmentData().getGraphic() != null);
		form.setMode(FormMode.EDIT);
	}
	
	
	private void cloneLatestInstance()
	{
		// Get a clone of the latest assessment
		PatientAssessmentVo assessmentSource = domain.getLatestVersionAssessment(form.getLocalContext().getPatientAssessment(), form.getGlobalContext().RefMan.getCatsReferral());
		
		// Simulate a SOE if it was returned null from domain - it means that is no longer the latest assessment
		if (assessmentSource == null)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getLocalContext().setPatientAssessment(null);
			open();
			return;
		}
		
		PatientAssessmentVo copyAssessment = createCopyAssessment(assessmentSource);
		
		// Present clone of the assessment to screen
		populateInstanceControlsFromData(copyAssessment);
		form.getLocalContext().setPatientAssessment(copyAssessment);
		
		// Set form to EDIT mode
		form.getLocalContext().setEditingGraphicalAssessment(Boolean.FALSE);
		form.setMode(FormMode.EDIT);		
	}


	public boolean save() 
	{
		try
		{
			// Get Patient Assessment record data from screen
			PatientAssessmentVo patientAssessment = populateDataFromInstanceControls(form.getLocalContext().getPatientAssessment());

			// Validate Patient Assessment data (from VO and from component - if completed)
			String[] errors = null;
			if (form.chkCompleted().getValue() == false)
			{
				errors = patientAssessment.validate();
			}
			else		// Validate answers if assessment is completed
			{
				if (Boolean.TRUE.equals(form.getLocalContext().getEditingGraphicalAssessment()))
				{
					errors = patientAssessment.validate(form.ctnGraphical().ccGraphical().validateData());
				}
				else
				{
					errors = patientAssessment.validate(form.ctnStructural().ccStructuralAssessment().validateData());
				}
			}

			// If Consultation Assessments collection is not present create one & validate it
			if (form.getLocalContext().getConsultationAssessments() == null)
				form.getLocalContext().setConsultationAssessments(createConsultationAssessmentsRecord());
			errors = form.getLocalContext().getConsultationAssessments().validate(errors);

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}


			// Attempt to save PatientAssessment record
			if (patientAssessment.getID_PatientAssessment() == null || form.getLocalContext().getConsultationAssessments().getID_ConsultationAssessments() == null)
			{
				form.getLocalContext().setPatientAssessment(domain.save(patientAssessment, form.getLocalContext().getConsultationAssessments()));
			}
			else
			{
				form.getLocalContext().setPatientAssessment(domain.save(patientAssessment));
			}

			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			e.printStackTrace();
			return false;
		}
	}
	

	public void clearScreen()
	{
		// Clear record browser
		form.recbrAssessments().clear();
		
		// Clear instance controls
		clearInstanceControls();
	}
	

	public void clearInstanceControls()
	{
		form.ctnGraphical().ccGraphical().clear();
		form.ctnStructural().ccStructuralAssessment().clearComponent();
		
		form.chkCompleted().setValue(false);
	}
	

	private void updateControlsState()
	{
		PatientAssessmentVo selectedRecord = form.getLocalContext().getPatientAssessment();
		
		boolean selectedAssessmentCompleted = selectedRecord != null && PatientAssessmentStatusReason.COMPLETED.equals(selectedRecord.getStatus());
		
		boolean selectedGraphicalAssessment = selectedRecord != null && selectedRecord.getAssessmentData() != null && selectedRecord.getAssessmentData().getGraphic() != null;
		boolean editingGraphicalAssessment = Boolean.TRUE.equals(form.getLocalContext().getEditingGraphicalAssessment());
		
		boolean isReferralCancelled = Boolean.TRUE.equals(form.getGlobalContext().RefMan.getIsProviderCancellation());
		
		
		// Structured Assessment TAB & Component
		form.ctnStructural().setEnabled(true);
		form.ctnStructural().setVisible(!selectedGraphicalAssessment && !editingGraphicalAssessment);
		
		if (!selectedGraphicalAssessment && !editingGraphicalAssessment)
		{
			form.ctnStructural().ccStructuralAssessment().setEnabled(FormMode.EDIT.equals(form.getMode()));
		}

		
		// Graphical Assessment TAB & Component
		form.ctnGraphical().setEnabled(true);
		form.ctnGraphical().setVisible(selectedGraphicalAssessment || editingGraphicalAssessment);
		
		if (selectedGraphicalAssessment || editingGraphicalAssessment)
		{
			form.ctnGraphical().ccGraphical().setEnabled(FormMode.EDIT.equals(form.getMode()));
		}
		
		
		form.btnCopyLast().setVisible(FormMode.VIEW.equals(form.getMode()) && isStructuralAssessment(form.getLocalContext().getPatientAssessment()) && form.recbrAssessments().getValues().get(0).equals(form.getLocalContext().getPatientAssessment()));
		
		if (FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNewStructural().setVisible(! isReferralCancelled);
			form.btnNewGraphical().setVisible(! isReferralCancelled);
			
			form.btnEdit().setVisible(selectedRecord != null && !isReferralCancelled && !selectedAssessmentCompleted);

			form.btnPrint().setEnabled(true);
			form.btnPrint().setVisible(!Boolean.TRUE.equals(ConfigFlag.UI.SAVE_PATIENTDOCUMENT_ON_ASSESSMENTCOMPLETED.getValue())
										&& selectedAssessmentCompleted && !Boolean.TRUE.equals(selectedRecord.getIsAssessmentDocumentSaved())				// Keep it like this, do not compare with Boolean.FALSE - to take in consideration the cases where this value is null
										&& ((selectedGraphicalAssessment && selectedRecord.getAssessmentData().getGraphic().getAssociatedReportForPrinting() != null && Boolean.TRUE.equals(selectedRecord.getAssessmentData().getGraphic().getStorePrintedReport()))
												|| (!selectedGraphicalAssessment && selectedRecord.getAssessmentData().getUserAssessment().getAssociatedReport() != null && Boolean.TRUE.equals(selectedRecord.getAssessmentData().getUserAssessment().getStorePrintedAssessment()))));
		}
	}


	private boolean isStructuralAssessment(PatientAssessmentVo patientAssessment)
	{
		if (patientAssessment == null || patientAssessment.getAssessmentData() == null)
			return false;
		
		if (patientAssessment.getAssessmentData().getUserAssessment() != null)
			return true;
		
		return false;
	}



	
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//	Data exchange methods
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	
	protected void populateRecordBrowserData(ConsultationAssessmentsLiteVo consultationAssessments) 
	{
		// Clear record browser
		form.recbrAssessments().clear();
		
		if (consultationAssessments == null || consultationAssessments.getPatientAssessment() == null)
			return;
		
		
		// Sort Patient Assessment collection records 
		consultationAssessments.getPatientAssessment().sort(SortOrder.DESCENDING);
		
		// Add each Patient Assessment to record browser
		for (PatientAssessmentShortVo patientAssessment : consultationAssessments.getPatientAssessment())
		{
			form.recbrAssessments().newRow(patientAssessment, getDisplayText(patientAssessment));
		}
		
		// Reselect edited PatientAssessment, otherwise - select last created (first in record browser)
		form.recbrAssessments().setValue(form.getLocalContext().getPatientAssessment());
		
		if (form.recbrAssessments().getValue() == null)
		{
			form.recbrAssessments().setValue(consultationAssessments.getPatientAssessment().get(0));
		}
	}
	
	private String getDisplayText(PatientAssessmentShortVo patientAssessment)
	{
		StringBuilder displayText = new StringBuilder();
		
		
		// Build the Authoring Information part of display text
		AuthoringInformationVo authoringInfo = patientAssessment.getAuthoringInfo();
		
		if (authoringInfo != null)
		{
			// Put authoring date / time into display string
			if (authoringInfo.getAuthoringDateTime() != null)
				displayText.append(authoringInfo.getAuthoringDateTime().toString()).append(" - ");
			
			// Put authoring HCP into display string
			if (authoringInfo.getAuthoringHcp() != null)
				displayText.append(authoringInfo.getAuthoringHcp().toString()).append(" - ");
		}
		
		
		// Build the assessment name part of display text
		displayText.append(patientAssessment.getAssessmentName());

		// Return the display text
		return displayText.toString();
	}
	
	/**
	 * Function used to populate Patient Assessment to screen
	 */
	protected void populateInstanceControlsFromData(PatientAssessmentVo patientAssessment)
	{
		// Clear instance controls
		clearInstanceControls();
		
		// Test parameter
		if (patientAssessment == null || patientAssessment.getAssessmentData() == null)
			return;
		
		// Populate instance controls with data
		if (patientAssessment.getAssessmentData().getGraphic() != null)
		{
			form.ctnGraphical().ccGraphical().setPatientAssessment(patientAssessment, PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
			form.getLocalContext().setEditingGraphicalAssessment(Boolean.TRUE);
		}
		else
		{
			form.ctnStructural().ccStructuralAssessment().setPatientAssessment(patientAssessment, true, PatientAssessmentInfoVo.getInstance(form.getGlobalContext().Core.getPatientShort()));
			form.getLocalContext().setEditingGraphicalAssessment(Boolean.FALSE);
		}

		form.chkCompleted().setValue(PatientAssessmentStatusReason.COMPLETED.equals(patientAssessment.getStatus()));
	}
	
	/**
	 * Function used to populate Patient Assessment records with data from screen
	 */
	protected PatientAssessmentVo populateDataFromInstanceControls(PatientAssessmentVo patientAssessment)
	{
		if (Boolean.TRUE.equals(form.getLocalContext().getEditingGraphicalAssessment()))
		{
			patientAssessment = form.ctnGraphical().ccGraphical().getPatientAssessment();
		}
		else
		{
			patientAssessment = form.ctnStructural().ccStructuralAssessment().getPatientAssessment();
		}

		
		if (patientAssessment == null)
			throw new CodingRuntimeException("Can not retrieve Patient Assessment record from screen.");
		
		
		if (patientAssessment.getID_PatientAssessment() == null)
		{
			patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
			patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		}
		
		// HCP logged in user
		HcpLiteVo hcpUser = (HcpLiteVo) domain.getHcpLiteUser();
		
		// Create Authoring Information record
		AuthoringInformationVo authoringInfo = new AuthoringInformationVo();
		authoringInfo.setAuthoringDateTime(new DateTime());
		authoringInfo.setAuthoringHcp(hcpUser);
		
		if (patientAssessment.getID_PatientAssessment() == null)
		{
			patientAssessment.setAuthoringInformation(authoringInfo);
		}
		
		
		// Set status
		if(form.chkCompleted().getValue())
		{
			patientAssessment.setStatus(PatientAssessmentStatusReason.COMPLETED);
			patientAssessment.setCompletedDateTime(new DateTime());
			patientAssessment.setCompletedHCP(hcpUser);
		}
		else
		{
			patientAssessment.setStatus(PatientAssessmentStatusReason.INPROGRESS);
			patientAssessment.setCompletedDateTime(null);
			patientAssessment.setCompletedHCP(null);
		}

		
		return patientAssessment;
	}

	
	/**
	 *	Function used to create a clone without ID for a PatientAssessment record marked as source 
	 */
	private PatientAssessmentVo createCopyAssessment(PatientAssessmentVo assessmentSource)
	{
		if (assessmentSource == null)
			return null;
		
		PatientAssessmentVo assessmentCopy = (PatientAssessmentVo) assessmentSource.clone();
		assessmentCopy.clearIDAndVersion();
		
		assessmentCopy.setAuthoringInformation(null);
		assessmentCopy.setCompletedHCP(null);
		assessmentCopy.setCompletedDateTime(null);
		
		assessmentCopy.setStatus(null);
		
		if (assessmentCopy.getAssessmentData() != null)
		{
			assessmentCopy.getAssessmentData().clearIDAndVersion();
			
			if (assessmentCopy.getAssessmentData().getAnswerGroups() != null)
				for (PatientAssessmentGroupVo group : assessmentCopy.getAssessmentData().getAnswerGroups())
				{
					group.clearIDAndVersion();
					
					if (group.getAssessmentAnswers() != null)
						for (PatientAssessmentQuestionVo assessmentQuestion : group.getAssessmentAnswers())
						{
							assessmentQuestion.clearIDAndVersion();
							
							if (assessmentQuestion.getPatientAnswers() != null)
								for (PatientAssessmentAnswerVo patientAnswer : assessmentQuestion.getPatientAnswers())
								{
									patientAnswer.clearIDAndVersion();
									
									if (patientAnswer.getAnswerDetails() != null)
										for (AnswerDetailsVo answerDetails : patientAnswer.getAnswerDetails())
											answerDetails.clearIDAndVersion();
								}
						}
				}
		}
		
		return assessmentCopy;
	}
	

	private ConsultationAssessmentsLiteVo createConsultationAssessmentsRecord()
	{
		ConsultationAssessmentsLiteVo consultation = new ConsultationAssessmentsLiteVo();
		
		consultation.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		
		// Create authoring information record
		AuthoringInformationVo authoringInfo = new AuthoringInformationVo();
		authoringInfo.setAuthoringDateTime(new DateTime());
		authoringInfo.setAuthoringHcp((HcpLiteVo) domain.getHcpLiteUser());
		
		consultation.setAuthoringInformation(authoringInfo);
		
		consultation.setPatientAssessment(new PatientAssessmentShortVoCollection());

		return consultation;
	}


	private void fireOnFormModeChange(FormMode mode)
	{
		form.getGlobalContext().RefMan.setIsComponentInEditMode(mode);
		form.fireCustomControlValueChanged();
	}
	
	private void loadAssessmentsForSpecialtyCollection() 
	{
		UserAssessmentLiteVoCollection collUserAssessmentLiteVo = domain.listAssessments(domain.getEpisodeOfCareBuId(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getID_EpisodeOfCare()).getSpecialty());
		form.getGlobalContext().Assessment.setAssessmentsForSpecialtyCollection(collUserAssessmentLiteVo);
	}
	
	
	
	
	private boolean print(boolean preview) throws PresentationLogicException
	{
		StringBuilder path = new StringBuilder();
		
		path.append(ConfigFlag.GEN.PDF_STORE_PATH.getValue());
		
		if(!(path.toString().endsWith("/") || path.toString().endsWith("\\")))
			path.append("/");
		
		
		try
		{
			// WDEV-13300
			// If the report is saved at completion - do not perform this check
			// Perform a check here for already printed from a different session
			if (!Boolean.TRUE.equals(ConfigFlag.UI.SAVE_PATIENTDOCUMENT_ON_ASSESSMENTCOMPLETED.getValue()))
			{
				if (domain.isSaved(form.getLocalContext().getPatientAssessment()))
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
					form.setMode(FormMode.VIEW);
					open();
					return false;
				}
			}
			
			ServerDocumentVo serverDocument = null;
			
			if (form.getLocalContext().getPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull())
			{
				serverDocument = printPatientAssessment(form.getLocalContext().getPatientAssessment(), form.getLocalContext().getPatientAssessment().getAssessmentData().getUserAssessment().getAssociatedReport(), null);
			}
			else if (form.getLocalContext().getPatientAssessment().getAssessmentData().getGraphicIsNotNull())
			{
				serverDocument = printPatientAssessment(form.getLocalContext().getPatientAssessment(), form.getLocalContext().getPatientAssessment().getAssessmentData().getGraphic().getAssociatedReportForPrinting(), null);
			}

			if (serverDocument == null)
				return false;
			
			path.append(serverDocument.getFileName());

			// Create Patient Document VO
			PatientDocumentVo patientDocument = new PatientDocumentVo();

			patientDocument.setPatient(form.getGlobalContext().Core.getPatientShort());

			patientDocument.setEpisodeofCare(form.getGlobalContext().Core.getEpisodeofCareShort());
			patientDocument.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			patientDocument.setClinicalContact(null); // none available
			
			
			if (form.getLocalContext().getPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull())
			{
				patientDocument.setName(form.getLocalContext().getPatientAssessment().getAssessmentData().getUserAssessment().getName());
			}
			else if (form.getLocalContext().getPatientAssessment().getAssessmentData().getGraphicIsNotNull())
			{
				patientDocument.setName(form.getLocalContext().getPatientAssessment().getAssessmentData().getGraphic().getName());
			}
			
			patientDocument.setServerDocument(serverDocument);
			patientDocument.setCreationType(DocumentCreationType.GENERATED);
			
			if (form.getLocalContext().getPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull()
					&& UserAssessmentCategory.SAFETY_QUESTIONNAIRE.equals(form.getLocalContext().getPatientAssessment().getAssessmentData().getUserAssessment().getCategory()))
			{
				patientDocument.setCategory(DocumentCategory.ASSESSMENT);
			}
			else
			{
				patientDocument.setCategory(DocumentCategory.ASSESSMENT);
			}
			
			patientDocument.setStatus(PreActiveActiveInactiveStatus.ACTIVE);
			patientDocument.setRecordingUser(domain.getMosUser() instanceof MemberOfStaffRefVo ? (MemberOfStaffRefVo) domain.getMosUser() : null);
			patientDocument.setRecordingDateTime(new DateTime());
			patientDocument.setAuthoringHCP(form.getLocalContext().getPatientAssessment().getCompletedHCP());
			patientDocument.setAuthoringDateTime(form.getLocalContext().getPatientAssessment().getCompletedDateTime());
			patientDocument.setResponsibleHCP(form.getGlobalContext().Core.getEpisodeofCareShort().getResponsibleHCP());
			patientDocument.setSpecialty(form.getGlobalContext().Core.getEpisodeofCareShort().getSpecialty());
			patientDocument.setCorrespondenceStatus(DocumentStatus.COMPLETED);

			// Create a new PatientDocumentStatusVo
			PatientDocumentStatusVo status = new PatientDocumentStatusVo();
			status.setCorrespondenceStatus(DocumentStatus.COMPLETED);
			status.setRecordingUser(patientDocument.getRecordingUser());
			status.setRecordingDateTime(patientDocument.getRecordingDateTime());

			patientDocument.setCurrentDocumentStatus(status);
			patientDocument.setDocumentStatusHistory(new PatientDocumentStatusVoCollection());
			patientDocument.getDocumentStatusHistory().add(status);
			
			patientDocument.setDocumentDate(form.getGlobalContext().Core.getCurrentCareContext() != null ? form.getGlobalContext().Core.getCurrentCareContext().getStartDateTime().getDate() : patientDocument.getRecordingDateTime().getDate());//WDEV-13638
			//wdev-14028
			if(form.getLocalContext().getPatientAssessment().getAssessmentData().getUserAssessmentIsNotNull())
			{
				UserAssessmentWithServiceCollVo assessVo = domain.getUserAssessment(form.getLocalContext().getPatientAssessment().getAssessmentData().getUserAssessment());
				if(assessVo != null)
				{
					if(assessVo.getCategoryIsNotNull() && assessVo.getCategory().equals(UserAssessmentCategory.SAFETY_QUESTIONNAIRE))
					{
						if(assessVo.getServicesIsNotNull() && assessVo.getServices().size() > 0)
						{
							ServiceRefVoCollection tempCol = new ServiceRefVoCollection();
							for(int i = 0; i < assessVo.getServices().size();i++ )
							{
								tempCol.add(assessVo.getServices().get(i));
							}
							patientDocument.setServices(tempCol);
							
						}
						
					}
				}
			}
			//----------
			// Update current Patient Assessment
			form.getLocalContext().getPatientAssessment().setIsAssessmentDocumentSaved(Boolean.TRUE);

			// Validate Patient Assessment and Patient Document records
			String[] errors = patientDocument.validate();
			errors = form.getLocalContext().getPatientAssessment().validate(errors);

			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			domain.savePatientDocument(patientDocument, form.getLocalContext().getPatientAssessment());
			
			// WDEV-13300 - Preview the document only if called from print
			if (preview)
				engine.open(form.getForms().Core.DocumentPrintPreview, new Object[] {patientDocument, getMaximsDocumentStorePath(), getMaximsDocumentServerURL()});

			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			
			// Attempt to delete uploaded document if stale occurs
			File file = new File(path.toString());
			if (file.exists() && file.canWrite())
				file.delete();
			
			form.setMode(FormMode.VIEW);
			open();
			
			
			return false;
		}
	}

	private String getMaximsDocumentStorePath()
	{
		String storePath = ConfigFlag.GEN.PDF_STORE_PATH.getValue();	// WDEV-13366
		
		if(!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";
				
		return storePath;
	}
	
	private String getMaximsDocumentServerURL()
	{
		String serverURL = ConfigFlag.GEN.FILE_SERVER_URL.getValue();
		
		if (!(serverURL.endsWith("/") || serverURL.endsWith("\\")))
			serverURL = serverURL + "/";
		
		return serverURL;
	}



	private void openGraphicAssessment()
	{
		PatientAssessmentVo patientAssessment = new PatientAssessmentVo();
		
		AuthoringInformationVo authoringInfo = new AuthoringInformationVo();
		authoringInfo.setAuthoringDateTime(new DateTime());
		if(domain.getHcpLiteUser()!=null)
			authoringInfo.setAuthoringHcp((HcpLiteVo)domain.getHcpLiteUser());
		
		patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
			
		patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		patientAssessment.setStatus(PatientAssessmentStatusReason.INPROGRESS);
	//	patientAssessment.setClinicalContact(form.getGlobalContext().Core.getCurrentClinicalContact());
		patientAssessment.setIsCurrentForType(Boolean.TRUE);
		patientAssessment.setAssessmentData(new PatientAssessmentDataVo());
		patientAssessment.setAuthoringInformation(authoringInfo);
		GraphicAssessmentVo graphicAssessment = domain.getActiveGraphicAssessment(form.getGlobalContext().Core.getSelectedGraphicAssessmentLite());

		patientAssessment.getAssessmentData().setGraphic(graphicAssessment);
		
		form.ctnGraphical().ccGraphical().clear();

		form.ctnGraphical().ccGraphical().setEnabled(Boolean.TRUE);
		form.ctnGraphical().ccGraphical().setMode(FormMode.EDIT);

		form.ctnGraphical().ccGraphical().setPatientAssessment(patientAssessment);
		form.ctnGraphical().setVisible(true);

		form.ctnStructural().setVisible(false);
	}

	private PatientAssessmentVo populatePatientAssessmentVo(UserAssessmentLiteVo userAssessmentLite) 
	{
		PatientAssessmentVo patientAssessment = form.getLocalContext().getPatientAssessment();
		if(patientAssessment==null)
			patientAssessment = new PatientAssessmentVo();
		
		AuthoringInformationVo authoringInfo = new AuthoringInformationVo();
		authoringInfo.setAuthoringDateTime(new DateTime());
		if(domain.getHcpLiteUser()!=null)
			authoringInfo.setAuthoringHcp((HcpLiteVo)domain.getHcpLiteUser());
		
		//WDEV-11721
		if(patientAssessment.getPatient() == null)
			patientAssessment.setPatient(form.getGlobalContext().Core.getPatientShort());
		
		//WDEV-11526
		if(patientAssessment.getEpisodeOfCare() == null)
			patientAssessment.setEpisodeOfCare(form.getGlobalContext().Core.getEpisodeofCareShort());
		
		if(patientAssessment.getCareContext()==null)
			patientAssessment.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());		
		patientAssessment.setAuthoringInformation(authoringInfo);
		patientAssessment.setStatus(PatientAssessmentStatusReason.INPROGRESS);
		
		PatientAssessmentDataVo patientAssessmentData = patientAssessment.getAssessmentData();
		if(patientAssessmentData==null)
			patientAssessmentData = new PatientAssessmentDataVo();
		if(userAssessmentLite!=null && userAssessmentLite.getID_UserAssessmentIsNotNull())
			patientAssessmentData.setUserAssessment(domain.getUserAssessmentVo(userAssessmentLite.getID_UserAssessment()));
		patientAssessment.setAssessmentData(patientAssessmentData);
//		 updating the authoring hcp for answers
		patientAssessment = DynamicAssessmentHelper.populateHCPDataForAnswers(patientAssessment, patientAssessment, (HcpLiteVo)domain.getHcpLiteUser(), new DateTime());
		
		return patientAssessment;
	}
	
	
	private void loadGraphicAssessmentsForSpecialtyCollection()
	{
		GraphicAssessmentLiteVoCollection collVo = domain.listGraphicAssessments(domain.getEpisodeOfCareBuId(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare().getID_EpisodeOfCare()).getSpecialty());
		form.getGlobalContext().Assessment.setGraphicAssessmentsForSpecialtyCollection(collVo);
	}

	private boolean requiresPrinting(PatientAssessmentVo patientAssessment)
	{
		if (Boolean.FALSE.equals(ConfigFlag.UI.SAVE_PATIENTDOCUMENT_ON_ASSESSMENTCOMPLETED.getValue()))
			return false;
		
		if (patientAssessment == null || patientAssessment.getAssessmentData() == null)
			return false;
		
		if (!PatientAssessmentStatusReason.COMPLETED.equals(patientAssessment.getStatus()))
			return false;
		
		
		if (patientAssessment.getAssessmentData().getGraphic() != null)
		{
			if (patientAssessment.getAssessmentData().getGraphic().getAssociatedReportForPrinting() == null
					|| !Boolean.TRUE.equals(patientAssessment.getAssessmentData().getGraphic().getStorePrintedReport()))
				return false;
		}
		
		if (patientAssessment.getAssessmentData().getUserAssessment() != null)
		{
			if (patientAssessment.getAssessmentData().getUserAssessment().getAssociatedReport() == null
					|| !Boolean.TRUE.equals(patientAssessment.getAssessmentData().getUserAssessment().getStorePrintedAssessment()))
				return false;
		}

		return true;
	}

	private ServerDocumentVo printPatientAssessment(PatientAssessmentRefVo patientAssessment, TemplateBoRefVo templateReport, String printerName)
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		String obj[] = domain.getReportAndTemplate(templateReport);
		
		if(obj == null)
		{
			engine.showMessage("I could not get the report and template linked to this assessment !");
			return null;
		}
		
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());

		// WDEV-13300
		// PatientAssessment reports in new version use PatientAssessment_ID, but some old versions use a combination of
		// CareContext_id and ClinicalContact_id - so we need to set all tree as seeds. Reports are ignoring the extra & unused seeds
		client.addSeed(new SeedValue("PatientAssessment_id", patientAssessment.getID_PatientAssessment(), Integer.class));
		client.addSeed(new SeedValue("CareContext_id", form.getGlobalContext().Core.getCurrentCareContextIsNotNull() ? form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext() : null, Integer.class));
		client.addSeed(new SeedValue("ClinicalContact_id", null, Integer.class));
		
		try
		{
			byte[] reportContent = client.buildReport(obj[0], obj[1], urlReportServer, QueryBuilderClient.PDF, printerName, 1);
			
			String fileName = generateName() + ".pdf";
			engine.uploadFile(ConfigFlag.GEN.PDF_UPLOAD_URL.getValue(), reportContent, fileName, ConfigFlag.GEN.FILE_UPLOAD_DIR.getValue() + "\\");
			
			String path = null;// client.buildReportAndUpload(obj[0], obj[1], urlReportServer, QueryBuilderClient.PDF, printerName, 1);
			
			int year  = new DateTime().getDate().getYear();
			int month = new DateTime().getDate().getMonth();
			int day   = new DateTime().getDate().getDay();
			
			if(fileName != null && fileName.length() > 0)
				path = year + "\\" + month + "\\" + day + "\\" + fileName;

			// Create Server document VO if uploads succeeds
			ServerDocumentVo document = new ServerDocumentVo();
			document.setFileName(path);
			document.setFileType(FileType.PDF);
			
			return document;
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return null;
		}
		catch (Exception e)
		{
			engine.showMessage("Could not upload file: " + e.getMessage());
			return null;
		}
	}

	private String generateName() 
	{
		String str = "";

		try
		{
			//Get Random Segment
			SecureRandom prng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(prng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get CurrentTimeMillis() segment
			str += Long.toHexString(System.currentTimeMillis());
			while (str.length() < 12)
			{
				str = '0' + str;
			}

			//Get Random Segment
			SecureRandom secondPrng = SecureRandom.getInstance("SHA1PRNG");
			str += Integer.toHexString(secondPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}

			//Get IdentityHash() segment
			str += Long.toHexString(System.identityHashCode((Object) this));
			while (str.length() < 8)
			{
				str = '0' + str;
			}
			//Get Third Random Segment
			byte bytes[] = new byte[16];
			SecureRandom thirdPrng = SecureRandom.getInstance("SHA1PRNG");
			thirdPrng.nextBytes(bytes);
			str += Integer.toHexString(thirdPrng.nextInt());
			while (str.length() < 8)
			{
				str = '0' + str;
			}
		}
		catch (java.security.NoSuchAlgorithmException ex)
		{
			ex.getMessage();
		}

		return str;
	}
}
