// This code was generated by Andrei Stefan Bondar using IMS Development Environment (version 1.80 build 4077.23636)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.surgicaloperationnotes;

import ims.RefMan.vo.SurgicalOpNotesVo;
import ims.clinical.vo.IntraOperativeCareRecordLiteVo;
import ims.clinical.vo.IntraOperativeCareRecordLiteVoCollection;
import ims.clinical.vo.IntraOperativeCareRecordShortVo;
import ims.clinical.vo.IntraOperativeDetailsLiteVo;
import ims.clinical.vo.lookups.Dressing;
import ims.clinical.vo.lookups.DressingCollection;
import ims.clinical.vo.lookups.SkinPreparationused;
import ims.clinical.vo.lookups.SkinPreparationusedCollection;
import ims.clinicaladmin.vo.SurgicalOperationDetailsConfigVo;
import ims.core.vo.PatientProcedureVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		open();
	}

	public void clearInstanceControls() 
	{
		form.ctn().dteProcedure().setValue(null);
		form.ctn().txtSurgeon().setValue(null);
		form.ctn().txtProcedurePerformed().setValue(null);
		form.ctn().txtPosition().setValue(null);
		form.ctn().txtSkinPreparation().setValue(null);
		form.ctn().txtDrains().setValue(null);
		form.ctn().txtDressing().setValue(null);
		form.ctn().txtTissue().setValue(null);
		
		form.ctn().txtPreOperative().setValue(null);
		form.ctn().txtAntibiotics().setValue(null);
		form.ctn().txtVTE().setValue(null);
		form.ctn().richTextIncision().setValue(null);
		form.ctn().richTextOperativeFindings().setValue(null);
		form.ctn().richTextProcedureInDetail().setValue(null);
		form.ctn().richTextComplication().setValue(null);
		form.ctn().richTextClosure().setValue(null);
		form.ctn().txtEBL().setValue(null);
		form.ctn().richTextInfiltration().setValue(null);
		form.ctn().richTextPostOperative().setValue(null);
		form.ctn().cmbFollowUp().setValue(null);
		form.ctn().cmbFollowUpIn().setValue(null);
		form.ctn().ccAuth().setValue(null);
	}

	public void newInstance() throws PresentationLogicException 
	{
		prePopulateScreenFromSurgicalOperationDetailsConfig();
		form.ctn().ccAuth().initializeComponent();
		
		form.setMode(FormMode.EDIT);
	}

	private void prePopulateScreenFromSurgicalOperationDetailsConfig() 
	{
		if(!(form.recbrIOCR().getValue() instanceof IntraOperativeCareRecordLiteVo))
			return;
		
		form.getLocalContext().setCurrentSurgicalConfig(domain.getSurgicalOperationDetailsConfig(form.recbrIOCR().getValue()));
		prePopulateScreenFromSurgicalOperationDetailsConfig(form.getLocalContext().getCurrentSurgicalConfig());
	}

	private void prePopulateScreenFromSurgicalOperationDetailsConfig(SurgicalOperationDetailsConfigVo surgicalConfig) 
	{
		if(surgicalConfig == null)
			return;
		
		form.ctn().richTextIncision().setValue(surgicalConfig.getIncision());
		form.ctn().richTextProcedureInDetail().setValue(surgicalConfig.getProcedure());
		form.ctn().richTextClosure().setValue(surgicalConfig.getClosure());
		form.ctn().richTextOperativeFindings().setValue(surgicalConfig.getFindings());
		form.ctn().richTextPostOperative().setValue(surgicalConfig.getPostOpInstructions());
	}

	public boolean save() throws PresentationLogicException 
	{
		form.getLocalContext().setCurrentRecord(populateDataFromScreen(form.getLocalContext().getCurrentRecord()));
		
		String[] errors = form.getLocalContext().getCurrentRecord().validate();
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			form.getLocalContext().setCurrentRecord(domain.saveSurgicalOpNotes(form.getLocalContext().getCurrentRecord()));
		} 
		catch (DomainInterfaceException e) 
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		} 
		catch (UniqueKeyViolationException e) 
		{
			e.printStackTrace();
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}

	private SurgicalOpNotesVo populateDataFromScreen(SurgicalOpNotesVo currentRecord) 
	{
		if(currentRecord == null)
			currentRecord = new SurgicalOpNotesVo();
		
		currentRecord.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		currentRecord.setIntraOperativeCareRecord(form.recbrIOCR().getValue());
		currentRecord.setAuthoringInformation(form.ctn().ccAuth().getValue());
		currentRecord.setPreOperativeDiagnosis(form.ctn().txtPreOperative().getValue());
		currentRecord.setAntibiotics(form.ctn().txtAntibiotics().getValue());
		currentRecord.setVTE(form.ctn().txtVTE().getValue());
		currentRecord.setIncision(form.ctn().richTextIncision().getValue());
		currentRecord.setFindings(form.ctn().richTextOperativeFindings().getValue());
		currentRecord.setProcedure(form.ctn().richTextProcedureInDetail().getValue());
		currentRecord.setComplications(form.ctn().richTextComplication().getValue());
		currentRecord.setClosure(form.ctn().richTextClosure().getValue());
		//currentRecord.setEBI(form.ctn().txtEBL().getValue());
		currentRecord.setLAInfiltration(form.ctn().richTextInfiltration().getValue());
		currentRecord.setPostOpInstructions(form.ctn().richTextPostOperative().getValue());
		currentRecord.setFollowUpType(form.ctn().cmbFollowUp().getValue());
		currentRecord.setFollowUpTypeIn(form.ctn().cmbFollowUpIn().getValue());
		
		return currentRecord;
	}

	public void updateControlsState() 
	{
		if(FormMode.VIEW.equals(form.getMode()))
		{
			form.btnNew().setVisible(true);
			form.btnNew().setEnabled((form.recbrIOCR().getValue() instanceof IntraOperativeCareRecordLiteVo) && form.getLocalContext().getCurrentRecord() == null);
			
			form.btnEdit().setVisible((form.recbrIOCR().getValue() instanceof IntraOperativeCareRecordLiteVo) && form.getLocalContext().getCurrentRecordIsNotNull());
			form.btnEdit().setEnabled((form.recbrIOCR().getValue() instanceof IntraOperativeCareRecordLiteVo) && form.getLocalContext().getCurrentRecordIsNotNull());
		}
		
		form.ctn().ccAuth().setEnabledAuthoringHCP(FormMode.EDIT.equals(form.getMode()));
		form.ctn().ccAuth().setEnabledDateTime(FormMode.EDIT.equals(form.getMode()));
	}

	public void updateInstance() 
	{
		form.setMode(FormMode.EDIT);
	}

	public void open() throws PresentationLogicException 
	{
		populateIOCRRecordBrowser(domain.listIOCR(form.getGlobalContext().RefMan.getCatsReferral()));
		populateScreenFromData();
		
		form.setMode(FormMode.VIEW);
	}

	private void populateScreenFromData() 
	{
		clearInstanceControls();
		
		if(form.recbrIOCR().getValue() instanceof IntraOperativeCareRecordLiteVo)
		{
			populateScreenFromIOCR(domain.getIntraOperativeCareRecords(form.recbrIOCR().getValue()));
			
			form.getLocalContext().setCurrentRecord(domain.getSurgicalOpNote(form.getGlobalContext().Core.getCurrentCareContext(), form.recbrIOCR().getValue()));
			if(form.getLocalContext().getCurrentRecord() != null)
			{
				populateScreenFromData(form.getLocalContext().getCurrentRecord());
			}
		}
	}
	
	private void populateScreenFromData(SurgicalOpNotesVo currentRecord) 
	{
		if(currentRecord == null)
			return;
		
		form.ctn().txtPreOperative().setValue(currentRecord.getPreOperativeDiagnosis());
		form.ctn().txtPreOperative().setTooltip(currentRecord.getPreOperativeDiagnosis());
		form.ctn().txtAntibiotics().setValue(currentRecord.getAntibiotics());
		form.ctn().txtAntibiotics().setTooltip(currentRecord.getAntibiotics());
		form.ctn().txtVTE().setValue(currentRecord.getVTE());
		form.ctn().txtVTE().setTooltip(currentRecord.getVTE());
		form.ctn().richTextIncision().setValue(currentRecord.getIncision());
		form.ctn().richTextOperativeFindings().setValue(currentRecord.getFindings());
		form.ctn().richTextProcedureInDetail().setValue(currentRecord.getProcedure());
		form.ctn().richTextComplication().setValue(currentRecord.getComplications());
		form.ctn().richTextClosure().setValue(currentRecord.getClosure());
		//form.ctn().txtEBL().setValue(currentRecord.getEBI());
		//form.ctn().txtEBL().setTooltip(currentRecord.getEBI());
		form.ctn().richTextInfiltration().setValue(currentRecord.getLAInfiltration());
		form.ctn().richTextPostOperative().setValue(currentRecord.getPostOpInstructions());
		form.ctn().cmbFollowUp().setValue(currentRecord.getFollowUpType());
		form.ctn().cmbFollowUpIn().setValue(currentRecord.getFollowUpTypeIn());
		form.ctn().ccAuth().setValue(currentRecord.getAuthoringInformation());
	}

	private void populateScreenFromIOCR(IntraOperativeCareRecordShortVo iocr) 
	{
		if(iocr == null)
			return;
		
		form.ctn().dteProcedure().setValue(iocr.getProcedureDate());
		
		String surgeon = iocr.getSurgeonIsNotNull() ? iocr.getSurgeon().getIMosName() : null;
		form.ctn().txtSurgeon().setValue(surgeon);
		form.ctn().txtSurgeon().setTooltip(surgeon);
		
		String procedurePerformed = iocr.getActualProcedureIsNotNull() ? iocr.getActualProcedure().getProcedureDescription() : null;
		form.ctn().txtProcedurePerformed().setValue(procedurePerformed);
		form.ctn().txtProcedurePerformed().setTooltip(procedurePerformed);
		
		String position = (iocr.getIntraOperativeDetailsIsNotNull() && iocr.getIntraOperativeDetails().getPatientPosition() != null) ? iocr.getIntraOperativeDetails().getPatientPosition().getIItemText() : null;
		form.ctn().txtPosition().setValue(position);
		form.ctn().txtPosition().setTooltip(position);
		
		String skinPreparation = iocr.getIntraOperativeDetailsIsNotNull() ? getSkinPreparation(iocr.getIntraOperativeDetails().getSkinPreparationUsed(), iocr.getIntraOperativeDetails().getOtherSkinPreparationUsed()) : null;
		form.ctn().txtSkinPreparation().setValue(skinPreparation);
		form.ctn().txtSkinPreparation().setTooltip(skinPreparation);
		
		String drains = (iocr.getIntraOperativeDetailsIsNotNull() && iocr.getIntraOperativeDetails().getDrainsIsNotNull()) ? iocr.getIntraOperativeDetails().getDrains().getTypeOfDrain() : null;
		form.ctn().txtDrains().setValue(drains);
		form.ctn().txtDrains().setValue(drains);
		
		String dressing = iocr.getIntraOperativeDetailsIsNotNull() ? getDressing(iocr.getIntraOperativeDetails().getDressing()) : null;
		form.ctn().txtDressing().setValue(dressing);
		form.ctn().txtDressing().setTooltip(dressing);
		
		String tissue = getTissueSpecimens(iocr.getIntraOperativeDetails());
		form.ctn().txtTissue().setValue(tissue);
		form.ctn().txtTissue().setTooltip(tissue);
		
		//WDEV-12347
		Boolean minBlood = (iocr.getIntraOperativeDetailsIsNotNull() && iocr.getIntraOperativeDetails().getDrainsIsNotNull() && iocr.getIntraOperativeDetails().getDrains().getWasMinBloodLossIsNotNull()) ? iocr.getIntraOperativeDetails().getDrains().getWasMinBloodLoss() : false;
		if(minBlood != null && minBlood.equals(Boolean.TRUE))
		{
			form.ctn().txtEBL().setValue("Minimal = < 100 mls");
			form.ctn().txtEBL().setTooltip("Minimal = < 100 mls");
		}
		else
		{
			String EsitmatedBloodLoss = (iocr.getIntraOperativeDetailsIsNotNull() && iocr.getIntraOperativeDetails().getDrainsIsNotNull() && iocr.getIntraOperativeDetails().getDrains().getEstimatedBloodLossIsNotNull()) ? iocr.getIntraOperativeDetails().getDrains().getEstimatedBloodLoss().toString() : null;
			form.ctn().txtEBL().setValue(EsitmatedBloodLoss);
			form.ctn().txtEBL().setTooltip(EsitmatedBloodLoss);
		}
		//-----------
	}

	private String getTissueSpecimens(IntraOperativeDetailsLiteVo intraOperativeDetails) 
	{
		if(intraOperativeDetails == null)
			return null;
		
		String tissueDisplay = "";
		
		if(intraOperativeDetails.getSpecimenTypeIsNotNull())
			tissueDisplay += intraOperativeDetails.getSpecimenType();
		
		if(Boolean.TRUE.equals(intraOperativeDetails.getHistopathology()))
			tissueDisplay += (tissueDisplay.length() > 0 ? ", " : "") + "Histopathology";
		
		if(Boolean.TRUE.equals(intraOperativeDetails.getMicrobiology()))
			tissueDisplay += (tissueDisplay.length() > 0 ? ", " : "") + "Microbiology";
		
		if(Boolean.TRUE.equals(intraOperativeDetails.getHaematology()))
			tissueDisplay += (tissueDisplay.length() > 0 ? ", " : "") + "Haematology";
		
		if(Boolean.TRUE.equals(intraOperativeDetails.getCytology()))
			tissueDisplay += (tissueDisplay.length() > 0 ? ", " : "") + "Cytology";
		
		return tissueDisplay;
	}

	private String getDressing(DressingCollection dressings) 
	{
		if(dressings == null || dressings.size() == 0)
			return null;
		
		String dressingDisplay = "";
		
		for(int i=0; i<dressings.size(); i++)
		{
			Dressing dressing = dressings.get(i);
			
			if(dressing == null)
				continue;
			
			dressingDisplay += (dressingDisplay.length() > 0 ? ", " : "") + dressing.getIItemText();
		}
		
		return dressingDisplay.length() > 0 ? dressingDisplay : null;
	}

	private String getSkinPreparation(SkinPreparationusedCollection skinPreparationUsed, String otherSkin) 
	{
		if(skinPreparationUsed == null || skinPreparationUsed.size() == 0)
			return null;
		
		String skinPreparationDisplay = "";
		
		for(int i=0; i<skinPreparationUsed.size(); i++)
		{
			SkinPreparationused skin = skinPreparationUsed.get(i);
			
			if(skin == null)
				continue;
			
			if(SkinPreparationused.OTHER.equals(skin) && otherSkin != null)
			{
				skinPreparationDisplay += (skinPreparationDisplay.length() > 0 ? ", " : "") + skin.getIItemText() + ": " + otherSkin;
				continue;
			}
			
			skinPreparationDisplay += (skinPreparationDisplay.length() > 0 ? ", " : "") + skin.getIItemText();
		}
		
		return skinPreparationDisplay.length() > 0 ? skinPreparationDisplay : null;
	}

	private void populateIOCRRecordBrowser(IntraOperativeCareRecordLiteVoCollection listIOCR) 
	{
		IntraOperativeCareRecordLiteVo oldValue = form.recbrIOCR().getValue();
		
		form.recbrIOCR().clear();
		
		if(listIOCR == null || listIOCR.size() == 0)
			return;
		
		for(int i=0; i<listIOCR.size(); i++)
		{
			addIOCRRow(listIOCR.get(i));
		}
		
		if(oldValue instanceof IntraOperativeCareRecordLiteVo)
			form.recbrIOCR().setValue(oldValue);
	}

	private void addIOCRRow(IntraOperativeCareRecordLiteVo intraOperativeCareRecordLiteVo) 
	{
		if(intraOperativeCareRecordLiteVo == null)
			return;
		
		String displayedText = "";
		
		if(intraOperativeCareRecordLiteVo.getProcedureDateIsNotNull())
			displayedText += intraOperativeCareRecordLiteVo.getProcedureDate();
		
		if(intraOperativeCareRecordLiteVo.getActualProcedureIsNotNull())
			displayedText += " - " + intraOperativeCareRecordLiteVo.getActualProcedure().getProcedureDescription();
		
		if(intraOperativeCareRecordLiteVo.getSurgeonIsNotNull())
			displayedText += " - " + intraOperativeCareRecordLiteVo.getSurgeon().getIHcpName();
		
		if(intraOperativeCareRecordLiteVo.getTheatreIsNotNull())
			displayedText += " - " + intraOperativeCareRecordLiteVo.getTheatre().getName();
		
		form.recbrIOCR().newRow(intraOperativeCareRecordLiteVo, displayedText);
	}

	public void initialize() throws ims.framework.exceptions.FormOpenException
	{
		super.initialize();
		
		form.getLocalContext().setCurrentRecord(null);
		form.ctn().ccAuth().setIsRequiredPropertyToControls(Boolean.TRUE);
	}

	@Override
	protected void onFormModeChanged() 
	{
		updateControlsState();
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException 
	{
		updateInstance();
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		newInstance();
	}

	@Override
	protected void onRecbrIOCRValueChanged() throws PresentationLogicException 
	{
		populateScreenFromData();
		updateControlsState();
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if(save())
			open();
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		open();
	}

	@Override
	protected void onBtnAmendClick() throws PresentationLogicException 
	{
		if(!(form.recbrIOCR().getValue() instanceof IntraOperativeCareRecordLiteVo))
			return;
		
		PatientProcedureVo plannedProcedure = domain.getPlannedProcedure(form.recbrIOCR().getValue());
		
		if(plannedProcedure != null)
		{
			form.getGlobalContext().Clinical.setPatientProcedureForIntraOperativeDialog(plannedProcedure);
			
			engine.open(form.getForms().Clinical.IntraOperativeCareRecordDialog);
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		form.getLocalContext().setCurrentRecord(populateDataFromScreen(form.getLocalContext().getCurrentRecord()));
		
		populateIOCRRecordBrowser(domain.listIOCR(form.getGlobalContext().RefMan.getCatsReferral()));
		
		populateScreenFromDataAfterAmend();
		
		SurgicalOperationDetailsConfigVo surgicalConfig = null;
		if(form.recbrIOCR().getValue() != null)   //wdev-13966
			surgicalConfig = domain.getSurgicalOperationDetailsConfig(form.recbrIOCR().getValue());
		
		if(form.getLocalContext().getCurrentSurgicalConfigIsNotNull() && form.getLocalContext().getCurrentSurgicalConfig().equals(surgicalConfig))
		{
			form.getLocalContext().setCurrentSurgicalConfig(surgicalConfig);
			return;
		}
		
		form.getLocalContext().setCurrentSurgicalConfig(surgicalConfig);
		if((form.getLocalContext().getCurrentRecord() == null || form.getLocalContext().getCurrentRecord().getID_SurgicalOpNotes() == null) && form.getLocalContext().getCurrentSurgicalConfig() != null)
		{
			prePopulateScreenFromSurgicalOperationDetailsConfig(form.getLocalContext().getCurrentSurgicalConfig());
		}
		if(form.recbrIOCR().getValue() == null)	//wdev-13966
			open();
	}

	private void populateScreenFromDataAfterAmend() 
	{
		clearInstanceControls();
		
		if(form.recbrIOCR().getValue() instanceof IntraOperativeCareRecordLiteVo)
		{
			populateScreenFromIOCR(domain.getIntraOperativeCareRecords(form.recbrIOCR().getValue()));
			
			if(form.getLocalContext().getCurrentRecord() != null)
			{
				populateScreenFromData(form.getLocalContext().getCurrentRecord());
			}
		}
	}
}
