// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.atconsultation;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyr1Layer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabReferralLetterContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 552, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_customControlUploadDocForm = loader.loadComponent(102264, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
				//ims.framework.Control m_customControlUploadDocControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(0), new Integer(0), new Integer(824), new Integer(552), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_customControlUploadDocForm, instance1 } );
				ims.framework.Control m_customControlUploadDocControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1), m_customControlUploadDocForm, instance1, Boolean.FALSE } );
				super.addControl(m_customControlUploadDocControl);
				Menu[] menus1 = m_customControlUploadDocForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.uploaddocument.IComponent customControlUploadDoc()
			{
				return (ims.core.forms.uploaddocument.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setcustomControlUploadDocValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setcustomControlUploadDocVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean iscustomControlUploadDocVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setcustomControlUploadDocEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean iscustomControlUploadDocEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabBaselineObsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 824, 558, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccNursingNotesForm = loader.loadComponent(134205, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 1002, skipContextValidation);
				//ims.framework.Control m_ccNursingNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(8), new Integer(0), new Integer(824), new Integer(558), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1002), m_ccNursingNotesForm, instance1 } );
				ims.framework.Control m_ccNursingNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1002), m_ccNursingNotesForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccNursingNotesControl);
				Menu[] menus1 = m_ccNursingNotesForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.nursingnotescomponent.IComponent ccNursingNotes()
			{
				return (ims.RefMan.forms.nursingnotescomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccNursingNotesValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccNursingNotesVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccNursingNotesVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccNursingNotesEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccNursingNotesEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabSpecimenCollectionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 552, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccSpecimenCollectionForm = loader.loadComponent(116168, appForm, startControlID * 10 + 3000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 2003, skipContextValidation);
				//ims.framework.Control m_ccSpecimenCollectionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(0), new Integer(0), new Integer(824), new Integer(552), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2003), m_ccSpecimenCollectionForm, instance1 } );
				ims.framework.Control m_ccSpecimenCollectionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1005),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2003), m_ccSpecimenCollectionForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccSpecimenCollectionControl);
				Menu[] menus1 = m_ccSpecimenCollectionForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.ocrr.forms.specimencollectioncliniccomponent.IComponent ccSpecimenCollection()
			{
				return (ims.ocrr.forms.specimencollectioncliniccomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccSpecimenCollectionValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccSpecimenCollectionVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccSpecimenCollectionVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccSpecimenCollectionEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccSpecimenCollectionEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabClinicalNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 832, 544, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccClinicalNotesForm = loader.loadComponent(134213, appForm, startControlID * 10 + 4000, anchoringHelper4.getSize(), instance1, startTabIndex.intValue() + 3004, skipContextValidation);
				//ims.framework.Control m_ccClinicalNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(0), new Integer(8), new Integer(832), new Integer(544), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3004), m_ccClinicalNotesForm, instance1 } );
				ims.framework.Control m_ccClinicalNotesControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1007),  new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 3004), m_ccClinicalNotesForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccClinicalNotesControl);
				Menu[] menus1 = m_ccClinicalNotesForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.clinicalnotescustomcontrol.IComponent ccClinicalNotes()
			{
				return (ims.RefMan.forms.clinicalnotescustomcontrol.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccClinicalNotesValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccClinicalNotesVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccClinicalNotesVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccClinicalNotesEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccClinicalNotesEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabInvestigationsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 832, 558, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccInvestigationsForm = loader.loadComponent(134121, appForm, startControlID * 10 + 5000, anchoringHelper5.getSize(), instance1, startTabIndex.intValue() + 4005, skipContextValidation);
				//ims.framework.Control m_ccInvestigationsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(0), new Integer(0), new Integer(832), new Integer(558), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4005), m_ccInvestigationsForm, instance1 } );
				ims.framework.Control m_ccInvestigationsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1009),  new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4005), m_ccInvestigationsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccInvestigationsControl);
				Menu[] menus1 = m_ccInvestigationsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.investigationscomponent.IComponent ccInvestigations()
			{
				return (ims.RefMan.forms.investigationscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccInvestigationsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccInvestigationsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccInvestigationsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccInvestigationsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccInvestigationsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabPrescriptionContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 824, 544, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccPrescriptionForm = loader.loadComponent(134173, appForm, startControlID * 10 + 6000, anchoringHelper6.getSize(), instance1, startTabIndex.intValue() + 5006, skipContextValidation);
				//ims.framework.Control m_ccPrescriptionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(0), new Integer(8), new Integer(824), new Integer(544), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 5006), m_ccPrescriptionForm, instance1 } );
				ims.framework.Control m_ccPrescriptionControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1011),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 5006), m_ccPrescriptionForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPrescriptionControl);
				Menu[] menus1 = m_ccPrescriptionForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.prescriptioncomponent.IComponent ccPrescription()
			{
				return (ims.RefMan.forms.prescriptioncomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPrescriptionValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPrescriptionVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPrescriptionVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPrescriptionEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPrescriptionEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabAssesmentsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 0, 6, 832, 552, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccPatientSpecialtyAssessmentsForm = loader.loadComponent(134188, appForm, startControlID * 10 + 7000, anchoringHelper7.getSize(), instance1, startTabIndex.intValue() + 6007, skipContextValidation);
				//ims.framework.Control m_ccPatientSpecialtyAssessmentsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(0), new Integer(6), new Integer(832), new Integer(552), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 6007), m_ccPatientSpecialtyAssessmentsForm, instance1 } );
				ims.framework.Control m_ccPatientSpecialtyAssessmentsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1013),  new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 6007), m_ccPatientSpecialtyAssessmentsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccPatientSpecialtyAssessmentsControl);
				Menu[] menus1 = m_ccPatientSpecialtyAssessmentsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.patientspecialtyassessments.IComponent ccPatientSpecialtyAssessments()
			{
				return (ims.RefMan.forms.patientspecialtyassessments.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccPatientSpecialtyAssessmentsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccPatientSpecialtyAssessmentsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccPatientSpecialtyAssessmentsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccPatientSpecialtyAssessmentsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccPatientSpecialtyAssessmentsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabOutcomeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 832, 544, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ims.framework.FormUiLogic m_ccOutcomeForm = loader.loadComponent(134120, appForm, startControlID * 10 + 8000, anchoringHelper8.getSize(), instance1, startTabIndex.intValue() + 7008, skipContextValidation);
				//ims.framework.Control m_ccOutcomeControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(0), new Integer(8), new Integer(832), new Integer(544), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 7008), m_ccOutcomeForm, instance1 } );
				ims.framework.Control m_ccOutcomeControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1015),  new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 7008), m_ccOutcomeForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccOutcomeControl);
				Menu[] menus1 = m_ccOutcomeForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.referraloutcomecomponent.IComponent ccOutcome()
			{
				return (ims.RefMan.forms.referraloutcomecomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccOutcomeValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccOutcomeVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccOutcomeVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccOutcomeEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccOutcomeEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabDischargeContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 7, 800, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 8009), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public HTMLViewer htmPreview()
			{
				return (HTMLViewer)super.getControl(0);
			}
		}
		public static class tabNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 544, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccNoteForm = loader.loadComponent(134140, appForm, startControlID * 10 + 9000, anchoringHelper10.getSize(), instance1, startTabIndex.intValue() + 8010, skipContextValidation);
				//ims.framework.Control m_ccNoteControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(8), new Integer(8), new Integer(816), new Integer(544), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8010), m_ccNoteForm, instance1 } );
				ims.framework.Control m_ccNoteControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1018),  new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8010), m_ccNoteForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccNoteControl);
				Menu[] menus1 = m_ccNoteForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.core.forms.referraldetailsnotes.IComponent ccNote()
			{
				return (ims.core.forms.referraldetailsnotes.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccNoteValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccNoteVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccNoteVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccNoteEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccNoteEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}
		public static class tabReferralApptsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 824, 552, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccApptsForm = loader.loadComponent(134117, appForm, startControlID * 10 + 10000, anchoringHelper11.getSize(), instance1, startTabIndex.intValue() + 9011, skipContextValidation);
				//ims.framework.Control m_ccApptsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(0), new Integer(0), new Integer(824), new Integer(552), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 9011), m_ccApptsForm, instance1 } );
				ims.framework.Control m_ccApptsControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1020),  new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 9011), m_ccApptsForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccApptsControl);
				Menu[] menus1 = m_ccApptsForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
			}

			public ims.RefMan.forms.referralappointmentdetailscomponent.IComponent ccAppts()
			{
				return (ims.RefMan.forms.referralappointmentdetailscomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccApptsValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccApptsVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccApptsVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccApptsEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccApptsEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID ");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabReferralLetter = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Docs", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabReferralLetterContainer m_tabReferralLetterContainer = (tabReferralLetterContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabReferralLetterContainer.class, m_tabReferralLetter, factory);
			super.addContainer(m_tabReferralLetter, m_tabReferralLetterContainer);
			ims.framework.utils.SizeInfo m_tabReferralLetterDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabReferralLetterRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper12.getWidth(), anchoringHelper12.getHeight());
			m_tabReferralLetterContainer.setContext(form, appForm, m_tabReferralLetter, loader, form_images_local, startControlID, m_tabReferralLetterDesignSize, m_tabReferralLetterRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabBaselineObs = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Nursing", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabBaselineObsContainer m_tabBaselineObsContainer = (tabBaselineObsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBaselineObsContainer.class, m_tabBaselineObs, factory);
			super.addContainer(m_tabBaselineObs, m_tabBaselineObsContainer);
			ims.framework.utils.SizeInfo m_tabBaselineObsDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabBaselineObsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper13.getWidth(), anchoringHelper13.getHeight());
			m_tabBaselineObsContainer.setContext(form, appForm, m_tabBaselineObs, loader, form_images_local, startControlID, m_tabBaselineObsDesignSize, m_tabBaselineObsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSpecimenCollection = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen Coll", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSpecimenCollectionContainer m_tabSpecimenCollectionContainer = (tabSpecimenCollectionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimenCollectionContainer.class, m_tabSpecimenCollection, factory);
			super.addContainer(m_tabSpecimenCollection, m_tabSpecimenCollectionContainer);
			ims.framework.utils.SizeInfo m_tabSpecimenCollectionDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabSpecimenCollectionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());
			m_tabSpecimenCollectionContainer.setContext(form, appForm, m_tabSpecimenCollection, loader, form_images_local, startControlID, m_tabSpecimenCollectionDesignSize, m_tabSpecimenCollectionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClinicalNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinical Notes", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabClinicalNotesContainer m_tabClinicalNotesContainer = (tabClinicalNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClinicalNotesContainer.class, m_tabClinicalNotes, factory);
			super.addContainer(m_tabClinicalNotes, m_tabClinicalNotesContainer);
			ims.framework.utils.SizeInfo m_tabClinicalNotesDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabClinicalNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());
			m_tabClinicalNotesContainer.setContext(form, appForm, m_tabClinicalNotes, loader, form_images_local, startControlID, m_tabClinicalNotesDesignSize, m_tabClinicalNotesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabInvestigations = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Invs", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabInvestigationsContainer m_tabInvestigationsContainer = (tabInvestigationsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabInvestigationsContainer.class, m_tabInvestigations, factory);
			super.addContainer(m_tabInvestigations, m_tabInvestigationsContainer);
			ims.framework.utils.SizeInfo m_tabInvestigationsDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabInvestigationsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
			m_tabInvestigationsContainer.setContext(form, appForm, m_tabInvestigations, loader, form_images_local, startControlID, m_tabInvestigationsDesignSize, m_tabInvestigationsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPrescription = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pres", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPrescriptionContainer m_tabPrescriptionContainer = (tabPrescriptionContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPrescriptionContainer.class, m_tabPrescription, factory);
			super.addContainer(m_tabPrescription, m_tabPrescriptionContainer);
			ims.framework.utils.SizeInfo m_tabPrescriptionDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabPrescriptionRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper17.getWidth(), anchoringHelper17.getHeight());
			m_tabPrescriptionContainer.setContext(form, appForm, m_tabPrescription, loader, form_images_local, startControlID, m_tabPrescriptionDesignSize, m_tabPrescriptionRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabAssesments = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Assess", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabAssesmentsContainer m_tabAssesmentsContainer = (tabAssesmentsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabAssesmentsContainer.class, m_tabAssesments, factory);
			super.addContainer(m_tabAssesments, m_tabAssesmentsContainer);
			ims.framework.utils.SizeInfo m_tabAssesmentsDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabAssesmentsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper18.getWidth(), anchoringHelper18.getHeight());
			m_tabAssesmentsContainer.setContext(form, appForm, m_tabAssesments, loader, form_images_local, startControlID, m_tabAssesmentsDesignSize, m_tabAssesmentsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOutcome = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Outcome", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOutcomeContainer m_tabOutcomeContainer = (tabOutcomeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOutcomeContainer.class, m_tabOutcome, factory);
			super.addContainer(m_tabOutcome, m_tabOutcomeContainer);
			ims.framework.utils.SizeInfo m_tabOutcomeDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabOutcomeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
			m_tabOutcomeContainer.setContext(form, appForm, m_tabOutcome, loader, form_images_local, startControlID, m_tabOutcomeDesignSize, m_tabOutcomeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDischarge = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Disch Report", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabDischargeContainer m_tabDischargeContainer = (tabDischargeContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDischargeContainer.class, m_tabDischarge, factory);
			super.addContainer(m_tabDischarge, m_tabDischargeContainer);
			ims.framework.utils.SizeInfo m_tabDischargeDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabDischargeRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
			m_tabDischargeContainer.setContext(form, appForm, m_tabDischarge, loader, form_images_local, startControlID, m_tabDischargeDesignSize, m_tabDischargeRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Admin Notes", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabNotesContainer m_tabNotesContainer = (tabNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNotesContainer.class, m_tabNotes, factory);
			super.addContainer(m_tabNotes, m_tabNotesContainer);
			ims.framework.utils.SizeInfo m_tabNotesDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
			m_tabNotesContainer.setContext(form, appForm, m_tabNotes, loader, form_images_local, startControlID, m_tabNotesDesignSize, m_tabNotesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 4, 8, 840, 584, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabReferralAppts = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Appts", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabReferralApptsContainer m_tabReferralApptsContainer = (tabReferralApptsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabReferralApptsContainer.class, m_tabReferralAppts, factory);
			super.addContainer(m_tabReferralAppts, m_tabReferralApptsContainer);
			ims.framework.utils.SizeInfo m_tabReferralApptsDesignSize = new ims.framework.utils.SizeInfo(840, 584);
			ims.framework.utils.SizeInfo m_tabReferralApptsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper22.getWidth(), anchoringHelper22.getHeight());
			m_tabReferralApptsContainer.setContext(form, appForm, m_tabReferralAppts, loader, form_images_local, startControlID, m_tabReferralApptsDesignSize, m_tabReferralApptsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabReferralLetter().setVisible(false);
			tabBaselineObs().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabInvestigations().setVisible(false);
			tabPrescription().setVisible(false);
			tabAssesments().setVisible(false);
			tabOutcome().setVisible(false);
			tabDischarge().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(false);
		}
		public void settabReferralLetterEnabled(boolean value)
		{
			tabReferralLetter().setEnabled(value);
		}
		public void settabBaselineObsEnabled(boolean value)
		{
			tabBaselineObs().setEnabled(value);
		}
		public void settabSpecimenCollectionEnabled(boolean value)
		{
			tabSpecimenCollection().setEnabled(value);
		}
		public void settabClinicalNotesEnabled(boolean value)
		{
			tabClinicalNotes().setEnabled(value);
		}
		public void settabInvestigationsEnabled(boolean value)
		{
			tabInvestigations().setEnabled(value);
		}
		public void settabPrescriptionEnabled(boolean value)
		{
			tabPrescription().setEnabled(value);
		}
		public void settabAssesmentsEnabled(boolean value)
		{
			tabAssesments().setEnabled(value);
		}
		public void settabOutcomeEnabled(boolean value)
		{
			tabOutcome().setEnabled(value);
		}
		public void settabDischargeEnabled(boolean value)
		{
			tabDischarge().setEnabled(value);
		}
		public void settabNotesEnabled(boolean value)
		{
			tabNotes().setEnabled(value);
		}
		public void settabReferralApptsEnabled(boolean value)
		{
			tabReferralAppts().setEnabled(value);
		}
		public void showtabReferralLetter()
		{
			tabBaselineObs().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabInvestigations().setVisible(false);
			tabPrescription().setVisible(false);
			tabAssesments().setVisible(false);
			tabOutcome().setVisible(false);
			tabDischarge().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(false);
			tabReferralLetter().setVisible(true);
		}
		public void showtabBaselineObs()
		{
			tabReferralLetter().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabInvestigations().setVisible(false);
			tabPrescription().setVisible(false);
			tabAssesments().setVisible(false);
			tabOutcome().setVisible(false);
			tabDischarge().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(false);
			tabBaselineObs().setVisible(true);
		}
		public void showtabSpecimenCollection()
		{
			tabReferralLetter().setVisible(false);
			tabBaselineObs().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabInvestigations().setVisible(false);
			tabPrescription().setVisible(false);
			tabAssesments().setVisible(false);
			tabOutcome().setVisible(false);
			tabDischarge().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(false);
			tabSpecimenCollection().setVisible(true);
		}
		public void showtabClinicalNotes()
		{
			tabReferralLetter().setVisible(false);
			tabBaselineObs().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabInvestigations().setVisible(false);
			tabPrescription().setVisible(false);
			tabAssesments().setVisible(false);
			tabOutcome().setVisible(false);
			tabDischarge().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(false);
			tabClinicalNotes().setVisible(true);
		}
		public void showtabInvestigations()
		{
			tabReferralLetter().setVisible(false);
			tabBaselineObs().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabPrescription().setVisible(false);
			tabAssesments().setVisible(false);
			tabOutcome().setVisible(false);
			tabDischarge().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(false);
			tabInvestigations().setVisible(true);
		}
		public void showtabPrescription()
		{
			tabReferralLetter().setVisible(false);
			tabBaselineObs().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabInvestigations().setVisible(false);
			tabAssesments().setVisible(false);
			tabOutcome().setVisible(false);
			tabDischarge().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(false);
			tabPrescription().setVisible(true);
		}
		public void showtabAssesments()
		{
			tabReferralLetter().setVisible(false);
			tabBaselineObs().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabInvestigations().setVisible(false);
			tabPrescription().setVisible(false);
			tabOutcome().setVisible(false);
			tabDischarge().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(false);
			tabAssesments().setVisible(true);
		}
		public void showtabOutcome()
		{
			tabReferralLetter().setVisible(false);
			tabBaselineObs().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabInvestigations().setVisible(false);
			tabPrescription().setVisible(false);
			tabAssesments().setVisible(false);
			tabDischarge().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(false);
			tabOutcome().setVisible(true);
		}
		public void showtabDischarge()
		{
			tabReferralLetter().setVisible(false);
			tabBaselineObs().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabInvestigations().setVisible(false);
			tabPrescription().setVisible(false);
			tabAssesments().setVisible(false);
			tabOutcome().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(false);
			tabDischarge().setVisible(true);
		}
		public void showtabNotes()
		{
			tabReferralLetter().setVisible(false);
			tabBaselineObs().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabInvestigations().setVisible(false);
			tabPrescription().setVisible(false);
			tabAssesments().setVisible(false);
			tabOutcome().setVisible(false);
			tabDischarge().setVisible(false);
			tabReferralAppts().setVisible(false);
			tabNotes().setVisible(true);
		}
		public void showtabReferralAppts()
		{
			tabReferralLetter().setVisible(false);
			tabBaselineObs().setVisible(false);
			tabSpecimenCollection().setVisible(false);
			tabClinicalNotes().setVisible(false);
			tabInvestigations().setVisible(false);
			tabPrescription().setVisible(false);
			tabAssesments().setVisible(false);
			tabOutcome().setVisible(false);
			tabDischarge().setVisible(false);
			tabNotes().setVisible(false);
			tabReferralAppts().setVisible(true);
		}

		public tabReferralLetterContainer tabReferralLetter()
		{
			return (tabReferralLetterContainer)super.layers.get(0);
		}
		public tabBaselineObsContainer tabBaselineObs()
		{
			return (tabBaselineObsContainer)super.layers.get(1);
		}
		public tabSpecimenCollectionContainer tabSpecimenCollection()
		{
			return (tabSpecimenCollectionContainer)super.layers.get(2);
		}
		public tabClinicalNotesContainer tabClinicalNotes()
		{
			return (tabClinicalNotesContainer)super.layers.get(3);
		}
		public tabInvestigationsContainer tabInvestigations()
		{
			return (tabInvestigationsContainer)super.layers.get(4);
		}
		public tabPrescriptionContainer tabPrescription()
		{
			return (tabPrescriptionContainer)super.layers.get(5);
		}
		public tabAssesmentsContainer tabAssesments()
		{
			return (tabAssesmentsContainer)super.layers.get(6);
		}
		public tabOutcomeContainer tabOutcome()
		{
			return (tabOutcomeContainer)super.layers.get(7);
		}
		public tabDischargeContainer tabDischarge()
		{
			return (tabDischargeContainer)super.layers.get(8);
		}
		public tabNotesContainer tabNotes()
		{
			return (tabNotesContainer)super.layers.get(9);
		}
		public tabReferralApptsContainer tabReferralAppts()
		{
			return (tabReferralApptsContainer)super.layers.get(10);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Layer Clasess
		lyr1Layer m_lyr1Layer = (lyr1Layer)LayerFlyweightFactory.getInstance().createLayer(lyr1Layer.class, this, factory);
		super.addLayer(m_lyr1Layer);
		m_lyr1Layer.setContext(form, appForm, control, loader, this.getImages(), startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 384, 600, 0, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 144, 600, 0, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", new Integer(0), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 208, 604, 96, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 10013), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Complete Task", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 4, 604, 196, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 10012), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Flag for Review + Review Detail", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 608, 604, 144, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 10017), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "End Patient Contact", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 320, 603, 136, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 10014), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Interpreter Details", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 472, 604, 128, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 10015), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Order Investigations", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 771, 604, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 10016), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyr1Layer lyr1()
	{
		return (lyr1Layer)super.getLayer(0);
	}
	public Label lblEndCons()
	{
		return (Label)super.getControl(11);
	}
	public Label lbStartCons()
	{
		return (Label)super.getControl(12);
	}
	public Button btnCompleteTask()
	{
		return (Button)super.getControl(13);
	}
	public Button btnReview()
	{
		return (Button)super.getControl(14);
	}
	public Button btnPatientContact()
	{
		return (Button)super.getControl(15);
	}
	public Button btnInterpreters()
	{
		return (Button)super.getControl(16);
	}
	public Button btn1()
	{
		return (Button)super.getControl(17);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(18);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
			RefMan = new RefManForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				SelectAndOrderDialog = new LocalFormName(116131);
			}
			public final FormName SelectAndOrderDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				InterpreterDetails = new LocalFormName(134143);
				ReferralReviewDetails = new LocalFormName(134133);
			}
			public final FormName InterpreterDetails;
			public final FormName ReferralReviewDetails;
		}

		public OCRRForms OCRR;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_RefMan.AtConsultation.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_EndTime = new ims.framework.ContextVariable("EndTime", prefix + "_lv_RefMan.AtConsultation.__internal_x_context__EndTime_" + componentIdentifier + "");
			cxl_EndDate = new ims.framework.ContextVariable("EndDate", prefix + "_lv_RefMan.AtConsultation.__internal_x_context__EndDate_" + componentIdentifier + "");
			cxl_StartTime = new ims.framework.ContextVariable("StartTime", prefix + "_lv_RefMan.AtConsultation.__internal_x_context__StartTime_" + componentIdentifier + "");
			cxl_StartDate = new ims.framework.ContextVariable("StartDate", prefix + "_lv_RefMan.AtConsultation.__internal_x_context__StartDate_" + componentIdentifier + "");
			cxl_FlagForReview = new ims.framework.ContextVariable("FlagForReview", prefix + "_lv_RefMan.AtConsultation.__internal_x_context__FlagForReview_" + componentIdentifier + "");
			cxl_SelectedTab = new ims.framework.ContextVariable("SelectedTab", prefix + "_lv_RefMan.AtConsultation.__internal_x_context__SelectedTab_" + componentIdentifier + "");
			cxl_WorkAllocation = new ims.framework.ContextVariable("WorkAllocation", prefix + "_lv_RefMan.AtConsultation.__internal_x_context__WorkAllocation_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.ConsultationDetailsVo getSelectedRecord()
		{
			return (ims.RefMan.vo.ConsultationDetailsVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.RefMan.vo.ConsultationDetailsVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getEndTimeIsNotNull()
		{
			return !cxl_EndTime.getValueIsNull(context);
		}
		public ims.framework.utils.Time getEndTime()
		{
			return (ims.framework.utils.Time)cxl_EndTime.getValue(context);
		}
		public void setEndTime(ims.framework.utils.Time value)
		{
			cxl_EndTime.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EndTime = null;
		public boolean getEndDateIsNotNull()
		{
			return !cxl_EndDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getEndDate()
		{
			return (ims.framework.utils.Date)cxl_EndDate.getValue(context);
		}
		public void setEndDate(ims.framework.utils.Date value)
		{
			cxl_EndDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EndDate = null;
		public boolean getStartTimeIsNotNull()
		{
			return !cxl_StartTime.getValueIsNull(context);
		}
		public ims.framework.utils.Time getStartTime()
		{
			return (ims.framework.utils.Time)cxl_StartTime.getValue(context);
		}
		public void setStartTime(ims.framework.utils.Time value)
		{
			cxl_StartTime.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_StartTime = null;
		public boolean getStartDateIsNotNull()
		{
			return !cxl_StartDate.getValueIsNull(context);
		}
		public ims.framework.utils.Date getStartDate()
		{
			return (ims.framework.utils.Date)cxl_StartDate.getValue(context);
		}
		public void setStartDate(ims.framework.utils.Date value)
		{
			cxl_StartDate.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_StartDate = null;
		public boolean getFlagForReviewIsNotNull()
		{
			return !cxl_FlagForReview.getValueIsNull(context);
		}
		public ims.RefMan.vo.enums.ReferralReviewDetail getFlagForReview()
		{
			return (ims.RefMan.vo.enums.ReferralReviewDetail)cxl_FlagForReview.getValue(context);
		}
		public void setFlagForReview(ims.RefMan.vo.enums.ReferralReviewDetail value)
		{
			cxl_FlagForReview.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FlagForReview = null;
		public boolean getSelectedTabIsNotNull()
		{
			return !cxl_SelectedTab.getValueIsNull(context);
		}
		public ims.RefMan.vo.enums.AtConsultationSelectedTab getSelectedTab()
		{
			return (ims.RefMan.vo.enums.AtConsultationSelectedTab)cxl_SelectedTab.getValue(context);
		}
		public void setSelectedTab(ims.RefMan.vo.enums.AtConsultationSelectedTab value)
		{
			cxl_SelectedTab.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedTab = null;
		public boolean getWorkAllocationIsNotNull()
		{
			return !cxl_WorkAllocation.getValueIsNull(context);
		}
		public ims.RefMan.vo.WorkAllocationVo getWorkAllocation()
		{
			return (ims.RefMan.vo.WorkAllocationVo)cxl_WorkAllocation.getValue(context);
		}
		public void setWorkAllocation(ims.RefMan.vo.WorkAllocationVo value)
		{
			cxl_WorkAllocation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WorkAllocation = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[90];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-ID", "ID_SpecimenWorkListItem");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-SPECIMEN", "Specimen");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-LISTTYPE", "ListType");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-DATETOCOLLECT", "DateToCollect");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-ROUNDTOCOLLECT", "RoundToCollect");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-TIMETOCOLLECT", "TimeToCollect");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-COLLECTIONSTATUS", "CollectionStatus");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_RefMan.SpecimenWorkListItemForReports", "BO-1061100014-DFTORDERINVESTIGATION", "DFTOrderInvestigation");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Rotherham.AppointmentToLink", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultation.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100000-ID", "ID_ConsultationDetails");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultation.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100000-CATSREFERRAL", "CATSReferral");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultation.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-ID", "ID_WorkAllocation");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultation.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-CATSREFERRAL", "CatsReferral");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultation.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-DATEALLOCATED", "DateAllocated");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultation.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-COMPLETEDDATETIME", "CompletedDateTime");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultation.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-COMPLETEDBY", "CompletedBy");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultation.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-UNALLOCATEDBY", "UnallocatedBy");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultation.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-UNALLOCATEDDATE", "UnallocatedDate");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultation.__internal_x_context__WorkAllocation_" + componentIdentifier, "BO-1096100033-REFERRALSTATUS", "ReferralStatus");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
