// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 4115.21811)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.nursingnotescomponent;

import ims.RefMan.forms.nursingnotescomponent.GenForm.grdAllergiesRow;
import ims.RefMan.forms.nursingnotescomponent.GenForm.grdComorbiditiesRow;
import ims.RefMan.forms.nursingnotescomponent.GenForm.grdMedicationRow;
import ims.RefMan.vo.NursingNotesVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AllergenVo;
import ims.core.vo.AllergenVoCollection;
import ims.core.vo.BloodPressureForNursingNotesVo;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagLiteVoCollection;
import ims.core.vo.MedicationLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MetricsForNursingNotesVo;
import ims.core.vo.PatientAllergyForNursingNotesVo;
import ims.core.vo.PatientAllergyForNursingNotesVoCollection;
import ims.core.vo.PatientDiagnosisForNursingNotesVo;
import ims.core.vo.PatientDiagnosisForNursingNotesVoCollection;
import ims.core.vo.PatientMedicationForNursingNotesVo;
import ims.core.vo.PatientMedicationForNursingNotesVoCollection;
import ims.core.vo.PulseForNursingNotesVo;
import ims.core.vo.RespiratoryForNursingNotesVo;
import ims.core.vo.TemperatureForNursingNotesVo;
import ims.core.vo.VitalSignsForNursingNotesVo;
import ims.core.vo.enums.MosType;
import ims.core.vo.lookups.SmokingStatus;
import ims.core.vo.lookups.SourceofInformation;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.nursing.vo.lookups.MRSAResult;
import ims.vo.interfaces.IMos;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		init();
	}

	@Override
	protected void onFormModeChanged()
	{

		form.fireCustomControlValueChanged();
		updateControlState();

	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-16887
		if (save())
		{	
			form.getLocalContext().setAllergiesforRemoval(null);
			open();
		}	
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
		form.setMode(FormMode.EDIT);

	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		initAuth();
		form.setMode(FormMode.EDIT);

	}

	@Override
	protected void onChkNegValueChanged() throws PresentationLogicException
	{
		if (form.chkNeg().getValue())
			form.chkPos().setValue(null);

	}

	@Override
	protected void onChkPosValueChanged() throws PresentationLogicException
	{
		if (form.chkPos().getValue())
			form.chkNeg().setValue(null);

	}

	@Override
	protected void onDecHeightValueChanged() throws PresentationLogicException
	{
		calculateBMI();

	}

	@Override
	protected void onDecWeightValueChanged() throws PresentationLogicException
	{
		calculateBMI();

	}


	@Override
	protected void onCmbSmokStatusValueChanged() throws PresentationLogicException
	{
		if (!SmokingStatus.SMOKER.equals(form.cmbSmokStatus().getValue()))
		{
			form.chkAdviceGiven().setValue(null);
			form.chkReffered().setValue(null);
		}
		updateControlState();

	}

	@Override
	protected void onGrdMedicationSelectionChanged() throws PresentationLogicException
	{
		updateContextMenuState();

	}

	@Override
	protected void onGrdMedicationSelectionCleared() throws PresentationLogicException
	{
		updateContextMenuState();

	}

	@Override
	protected void onGrdComorbiditiesSelectionChanged() throws PresentationLogicException
	{
		updateContextMenuState();

	}

	@Override
	protected void onGrdComorbiditiesSelectionCleared() throws PresentationLogicException
	{
		updateContextMenuState();

	}

	@Override
	protected void onGrdAllergiesSelectionChanged() throws PresentationLogicException
	{
		updateContextMenuState();

	}

	@Override
	protected void onGrdAllergiesSelectionCleared() throws PresentationLogicException
	{
		updateContextMenuState();

	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
		case GenForm.ContextMenus.RefManNamespace.NursingNotesAllergies.REMOVE:
			inactivateAllergy(); //WDEV-16887
			break;
		case GenForm.ContextMenus.RefManNamespace.NursingNotesComorbidities.REMOVE:
			form.grdComorbidities().removeSelectedRow();
			break;
		case GenForm.ContextMenus.RefManNamespace.NursingNotesMedications.ADD:
			addMedication();
			break;
		case GenForm.ContextMenus.RefManNamespace.NursingNotesMedications.REMOVE:
			form.grdMedication().removeSelectedRow();
			break;

		default:
			break;
		}
		updateContextMenuState();

	}
	//WDEV-16887
	private void inactivateAllergy()
	{
		if (form.grdAllergies().getValue().getID_PatientAllergyIsNotNull())
		{	
			form.getGlobalContext().Core.setYesNoDialogMessage("You are about to inactivate a patient's allergy? \n Are you sure you wish to make this record inactive?");
			engine.open(form.getForms().Core.YesNoDialog);
		}
		else
		{
			form.grdAllergies().removeSelectedRow();
		}
	}


	private void addMedication() 
	{
		form.getGlobalContext().RefMan.setSelectedSpecialty(null);
		engine.open(form.getForms().Core.SelectMedication);		
	}

	@Override
	protected void onQmbComorbidityValueChanged() throws PresentationLogicException
	{
		updateComorbidityButton();
	}

	@Override
	protected void onQmbComorbidityTextSubmited(String value) throws PresentationLogicException
	{
		try
		{
			populateComorbidityQcmb(value);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}

		updateControlState();
	}

	@Override
	protected void onBtnAddAllergyClick() throws PresentationLogicException
	{
		addAllergy();
	}

	@Override
	protected void onQmbAllergyValueChanged() throws PresentationLogicException
	{
		updateAllergyButton();
	}

	@Override
	protected void onQmbAllergyTextSubmited(String value) throws PresentationLogicException
	{
		try
		{
			populateAllergenQmb(value);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
		}

		updateControlState();
	}

	@Override
	protected void onBtnAddComorbidityClick() throws PresentationLogicException
	{
		addComorbidity();

	}

	public void initialize()
	{
		if (FormMode.EDIT.equals(form.getMode()))
			return;
		open();

	}

	private void updateContextMenuState()
	{

		boolean isEdit = FormMode.EDIT.equals(form.getMode());
		form.getContextMenus().RefMan.getNursingNotesAllergiesREMOVEItem().setVisible(isEdit);
		form.getContextMenus().RefMan.getNursingNotesAllergiesREMOVEItem().setEnabled(form.grdAllergies().getValue()!=null);
		form.getContextMenus().RefMan.getNursingNotesComorbiditiesREMOVEItem().setVisible(isEdit);
		form.getContextMenus().RefMan.getNursingNotesComorbiditiesREMOVEItem().setEnabled(form.grdComorbidities().getValue()!=null);
		form.getContextMenus().RefMan.getNursingNotesMedicationsADDItem().setVisible(isEdit);//wdev-14122
		form.getContextMenus().RefMan.getNursingNotesMedicationsADDItem().setEnabled(isEdit);//wdev-14122
		form.getContextMenus().RefMan.getNursingNotesMedicationsREMOVEItem().setVisible(isEdit);
		form.getContextMenus().RefMan.getNursingNotesMedicationsREMOVEItem().setEnabled(form.grdMedication().getValue()!=null);

	}

	private PatientMedicationForNursingNotesVo getPatientMedication(MedicationLiteVo value)
	{
		PatientMedicationForNursingNotesVo med = new PatientMedicationForNursingNotesVo();
		med.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		med.setMedication(value);
		med.setOtherMedicationText(value.getMedicationName());
		med.setPatient(form.getGlobalContext().Core.getPatientShort());
		return med;
	}

	private String getAllergensAddedToIgnore()
	{
		StringBuilder sb = new StringBuilder();
		String comma = "";
		for (int  i = 0 ; i < form.grdAllergies().getRows().size() ; i++)
		{
			PatientAllergyForNursingNotesVo value = form.grdAllergies().getRows().get(i).getValue();
			if (value==null || !value.getAllergenIsNotNull() || !value.getAllergen().getID_AllergenIsNotNull())
				continue;
			sb.append(comma);
			comma=", ";
			sb.append(value.getAllergen().getID_Allergen().intValue());
		}
		String result = sb.toString();
		if (result == null || result.trim().length() == 0)
			return null;

		return result;
	}
	private String getComorbiditiesAddedToIgnore()
	{
		StringBuilder sb = new StringBuilder();
		String comma = "";
		for (int  i = 0 ; i < form.grdComorbidities().getRows().size() ; i++)
		{
			PatientDiagnosisForNursingNotesVo value = form.grdComorbidities().getRows().get(i).getValue();
			if (value==null || !value.getDiagnosisIsNotNull() || !value.getDiagnosis().getID_DiagnosisIsNotNull())
				continue;
			sb.append(comma);
			comma=", ";
			sb.append(value.getDiagnosis().getID_Diagnosis());
		}
		String result = sb.toString();
		if (result == null || result.trim().length() == 0)
			return null;

		return result;
	}

	private void addComorbidity()
	{
		if (form.qmbComorbidity().getValue() == null)
		{
			updateComorbidityButton();
			return;
		}
		PatientDiagnosisForNursingNotesVo patientDiagnosis = getPatientDiagnosis(form.qmbComorbidity().getValue());
		addRowToDiagnosisGrid(patientDiagnosis);
		form.grdComorbidities().setValue(patientDiagnosis);
		form.grdComorbidities().resetScrollPosition();
		form.qmbComorbidity().removeRow(form.qmbComorbidity().getValue());
		form.qmbComorbidity().clear();//	WDEV-12337
		updateComorbidityButton();
		updateContextMenuState();
	}

	private PatientDiagnosisForNursingNotesVo getPatientDiagnosis(DiagLiteVo value)
	{
		PatientDiagnosisForNursingNotesVo result = new PatientDiagnosisForNursingNotesVo();
		result.setDiagnosis(value);
		result.setDiagnosisDescription(value.getDiagnosisName());
		result.setEpisodeOfCare(form.getGlobalContext().Core.getCurrentCareContext()!=null?form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare():null);
		result.setIsComorbidity(true);
		result.setSourceofInformation(SourceofInformation.CLINICALCONTACT);
		return result;
	}

	private void populateComorbidityQcmb(String value) throws DomainInterfaceException
	{
		form.qmbComorbidity().clear();

		DiagLiteVoCollection listDiag = domain.listDiagnosis(value,getComorbiditiesAddedToIgnore());

		if (listDiag == null || listDiag.size() == 0)
		{
			form.qmbComorbidity().showOpened();
			return;
		}

		for (int i = 0 ; i < listDiag.size() ; i++)
		{
			form.qmbComorbidity().newRow(listDiag.get(i),listDiag.get(i).getDiagnosisName());
		}

		form.qmbComorbidity().showOpened();
	}


	private void addAllergy()
	{
		if (form.qmbAllergy().getValue() == null)
		{
			updateAllergyButton();
			return;
		}
		PatientAllergyForNursingNotesVo patientAllergy = getPatientAllergy(form.qmbAllergy().getValue());
		addRowToAllergenGrid(patientAllergy);
		form.grdAllergies().setValue(patientAllergy);
		form.grdAllergies().resetScrollPosition();
		form.qmbAllergy().removeRow(form.qmbAllergy().getValue());
		form.qmbAllergy().clear();//	WDEV-12337
		updateAllergyButton();
		updateContextMenuState();
	}

	private PatientAllergyForNursingNotesVo getPatientAllergy(AllergenVo value)
	{
		PatientAllergyForNursingNotesVo result = new PatientAllergyForNursingNotesVo();
		result.setAllergen(value);
		result.setAllergenDescription(value.getAllergenName());
		result.setPatient(form.getGlobalContext().Core.getPatientShort());
		result.setSourceofInformation(SourceofInformation.CLINICALCONTACT);
		//wdev-12860
		result.setIsCurrentlyActiveAllergy(new Boolean(Boolean.TRUE));
		//--------
		return result;
	}



	private void populateAllergenQmb(String value) throws DomainInterfaceException
	{
		form.qmbAllergy().clear();
		AllergenVoCollection listAllergen = domain.listAllergens(value,getAllergensAddedToIgnore());

		if (listAllergen == null || listAllergen.size() == 0)
		{
			form.qmbAllergy().showOpened();
			return;
		}

		for (int i = 0 ; i < listAllergen.size() ; i++)
		{
			form.qmbAllergy().newRow(listAllergen.get(i), listAllergen.get(i).getAllergenName());
		}

		form.qmbAllergy().showOpened();
	}

	private void calculateBMI()
	{
		if (form.decHeight().getValue() == null || form.decHeight().getValue()==0 || form.decWeight().getValue()  == null)
		{
			form.decBMI().setValue(null);
			return;
		}

		//we have to convert the HEIGHT from cm to m as the formula requires m
		form.decBMI().setValue((float)(form.decWeight().getValue().floatValue() / (form.decHeight().getValue().floatValue() / 100.0 * form.decHeight().getValue().floatValue() / 100.0)));
	}

	private void initAuth()
	{
		if (domain.getMosUser() instanceof IMos)
		{
			form.ccAuthUser().setValue((IMos)domain.getMosUser());
		}
		form.dtimAuthoringDT().setValue(new DateTime());

	}

	private void init() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!form.getGlobalContext().RefMan.getCatsReferralIsNotNull())
			throw new PresentationLogicException("No referral selected");
		form.ccAuthUser().isRequired(true);
		form.ccAuthUser().initialize(MosType.ALL);
		form.setMode(FormMode.VIEW);
		updateControlState();
	}

	private void open() 
	{

		form.getLocalContext().setCurrentRecord(domain.getNursingNotes(form.getGlobalContext().RefMan.getCatsReferral()));

		//WDEV-12791
		form.getGlobalContext().Core.setPatientShort(domain.getPatient(form.getGlobalContext().Core.getPatientShort()));

		populateScreenFromData(form.getLocalContext().getCurrentRecord());
		form.setMode(FormMode.VIEW);

	}

	private boolean save()
	{
		NursingNotesVo record = populateDataFromScreen(form.getLocalContext().getCurrentRecord());
		String[] errors = record.validate();
		if (errors!=null && errors.length>0)
		{
			engine.showErrors(errors);
			return false;
		}
		try
		{
			//WDEV-16887
			domain.save(record,form.getLocalContext().getAllergiesforRemoval());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}

		return true;
	}

	private void updateControlState()
	{
		form.ccAuthUser().setEnabled(form.getMode().equals(FormMode.EDIT));
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.btnNew().setVisible(!form.getLocalContext().getCurrentRecordIsNotNull());
			form.btnEdit().setVisible(form.getLocalContext().getCurrentRecordIsNotNull());
		}
		else
		{
			boolean isSmoker = SmokingStatus.SMOKER.equals(form.cmbSmokStatus().getValue());
			form.chkAdviceGiven().setEnabled(isSmoker);
			form.chkReffered().setEnabled(isSmoker);
			updateAllergyButton();
			updateComorbidityButton();
		}

		updateContextMenuState();
	}
	private void clearScreen()
	{
		form.ccAuthUser().setValue(null);
		form.dtimAuthoringDT().setValue(null);
		form.intBPDIA().setValue(null);
		form.intBPSYS().setValue(null);
		form.intHeartRate().setValue(null);
		form.intRespRate().setValue(null);
		form.decTemp().setValue(null);
		form.decHeight().setValue(null);
		form.decWeight().setValue(null);
		form.decBMI().setValue(null);
		form.cmbSmokStatus().setValue(null);
		form.chkAdviceGiven().setValue(null);
		form.chkReffered().setValue(null);
		form.intAlcohol().setValue(null);
		form.chkNeg().setValue(null);
		form.chkPos().setValue(null);
		form.txtObsNotes().setValue(null);
		form.qmbAllergy().clear();
		form.qmbAllergy().setValue(null);
		form.qmbComorbidity().clear();
		form.qmbComorbidity().setValue(null);
		form.grdAllergies().getRows().clear();
		form.grdComorbidities().getRows().clear();
		form.grdMedication().getRows().clear();
	}
	private void populateScreenFromData(NursingNotesVo record)
	{
		clearScreen();
		if (record == null)
			return;

		form.ccAuthUser().setValue(record.getAuthoringUser());
		form.dtimAuthoringDT().setValue(record.getAuthoringDateTime());
		if (record.getVitalSignsIsNotNull())
		{
			if (record.getVitalSigns().getBloodPressureIsNotNull())
			{
				form.intBPDIA().setValue(record.getVitalSigns().getBloodPressure().getBPSittingDiasIsNotNull()?record.getVitalSigns().getBloodPressure().getBPSittingDias().intValue():null);
				form.intBPSYS().setValue(record.getVitalSigns().getBloodPressure().getBPSittingSysIsNotNull()?record.getVitalSigns().getBloodPressure().getBPSittingSys().intValue():null);
			}
			if (record.getVitalSigns().getPulseIsNotNull())
			{
				form.intHeartRate().setValue(record.getVitalSigns().getPulse().getPulseRateRadial());
			}
			if (record.getVitalSigns().getRespiratoryIsNotNull())
			{
				form.intRespRate().setValue(record.getVitalSigns().getRespiratory().getRespRate());
			}

			if (record.getVitalSigns().getTemperatureIsNotNull())
			{
				form.decTemp().setValue(record.getVitalSigns().getTemperature().getTemperature());
			}
			if (record.getVitalSigns().getMetricsIsNotNull())
			{
				form.decHeight().setValue(record.getVitalSigns().getMetrics().getHeightValue());
				form.decWeight().setValue(record.getVitalSigns().getMetrics().getWeightValue());
				form.decBMI().setValue(record.getVitalSigns().getMetrics().getBMI());
			}
		}

		form.cmbSmokStatus().setValue(record.getSmokingStatus());
		form.chkAdviceGiven().setValue(record.getAdviceGiven());
		form.chkReffered().setValue(record.getReferredToSomkingCessation());
		form.intAlcohol().setValue(record.getUnitsOfAlcoholConsumedPerWeekIsNotNull()?record.getUnitsOfAlcoholConsumedPerWeek().intValue():null);
		if (record.getMRSAResultIsNotNull())
		{
			boolean isPositive = MRSAResult.POSITIVE.equals(record.getMRSAResult());
			form.chkNeg().setValue(!isPositive);
			form.chkPos().setValue(isPositive);
		}
		form.txtObsNotes().setValue(record.getObservationNotes());


		populateAllergiesGrid(record.getAllergies());
		populateComorbiditiesGrid(record.getComorbidities());
		populateMedicationGrid(record.getCurrentMedications());

	}


	private void populateMedicationGrid(PatientMedicationForNursingNotesVoCollection currentMedications)
	{
		if (currentMedications == null)
			return;

		for (int i = 0 ; i < currentMedications.size() ; i++)
		{
			addRowToMedGrid(currentMedications.get(i));
		}

	}

	private grdMedicationRow addRowToMedGrid(PatientMedicationForNursingNotesVo med)
	{
		if (med == null)
			return null;
		grdMedicationRow newRow = form.grdMedication().getRows().newRow();
		newRow.setColMedication(med.getOtherMedicationText());
		newRow.setTooltip(med.getOtherMedicationText());
		newRow.setValue(med);
		return newRow;
	}

	private void populateComorbiditiesGrid(PatientDiagnosisForNursingNotesVoCollection comorbidities)
	{
		if (comorbidities == null)
			return;
		for (int i = 0 ; i < comorbidities.size() ; i++)
		{

			addRowToDiagnosisGrid(comorbidities.get(i));
		}


	}

	private grdComorbiditiesRow addRowToDiagnosisGrid(PatientDiagnosisForNursingNotesVo com)
	{
		if (com == null)
			return null;
		grdComorbiditiesRow newRow = form.grdComorbidities().getRows().newRow();
		newRow.setColComorbidity(com.getDiagnosisDescription());
		newRow.setTooltip(com.getDiagnosisDescription());
		newRow.setValue(com);
		return newRow;
	}

	private void populateAllergiesGrid(PatientAllergyForNursingNotesVoCollection allergies)
	{
		if (allergies == null)
			return;

		for (int i = 0 ; i < allergies.size() ; i++)
		{

			addRowToAllergenGrid(allergies.get(i));
		}

	}

	private grdAllergiesRow addRowToAllergenGrid(PatientAllergyForNursingNotesVo all)
	{
		if (all == null)
			return null;
		grdAllergiesRow newRow = form.grdAllergies().getRows().newRow();
		newRow.setColAllergy(all.getAllergenDescription());
		newRow.setTooltip(all.getAllergenDescription());
		newRow.setValue(all);
		return newRow;
	}

	private NursingNotesVo populateDataFromScreen(NursingNotesVo record)
	{
		if (record == null)
		{
			record = new NursingNotesVo();
			record.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		}
		calculateBMI();
		record.setAuthoringUser(form.ccAuthUser().getValue() instanceof MemberOfStaffLiteVo ? (MemberOfStaffLiteVo)form.ccAuthUser().getValue():null);
		record.setAuthoringDateTime(form.dtimAuthoringDT().getValue());
		record.setVitalSigns(getVitalSigns(record.getVitalSigns()));
		record.setSmokingStatus(form.cmbSmokStatus().getValue());
		record.setAdviceGiven(form.chkAdviceGiven().getValue());
		record.setReferredToSomkingCessation(form.chkReffered().getValue());
		record.setUnitsOfAlcoholConsumedPerWeek(form.intAlcohol().getValue()!=null?form.intAlcohol().getValue().floatValue():null);
		record.setMRSAResult(form.chkNeg().getValue()?MRSAResult.NEGATIVE:(form.chkPos().getValue()?MRSAResult.POSITIVE:null));
		record.setObservationNotes(form.txtObsNotes().getValue());
		record.setAllergies(getAllergiesFromGrid());
		record.setComorbidities(getComorbidities());
		record.setCurrentMedications(getCurrentMedication());

		return record;
	}
	private PatientMedicationForNursingNotesVoCollection getCurrentMedication()
	{
		if (form.grdMedication().getRows().size() == 0)
			return null;
		PatientMedicationForNursingNotesVoCollection coll = new PatientMedicationForNursingNotesVoCollection();
		for (int i = 0 ; i < form.grdMedication().getRows().size() ; i++)
		{
			if (form.grdMedication().getRows().get(i).getValue()!=null)
				coll.add(form.grdMedication().getRows().get(i).getValue());
		}
		return coll;
	}

	private PatientDiagnosisForNursingNotesVoCollection getComorbidities()
	{
		if (form.grdComorbidities().getRows().size() == 0)
			return null;
		PatientDiagnosisForNursingNotesVoCollection result = new PatientDiagnosisForNursingNotesVoCollection();
		for (int i = 0 ; i < form.grdComorbidities().getRows().size() ; i++)
		{
			if (form.grdComorbidities().getRows().get(i).getValue()!=null)
				result.add(form.grdComorbidities().getRows().get(i).getValue());
		}
		return result;
	}

	private PatientAllergyForNursingNotesVoCollection getAllergiesFromGrid()
	{
		if (form.grdAllergies().getRows().size() == 0)
			return null;
		PatientAllergyForNursingNotesVoCollection result = new PatientAllergyForNursingNotesVoCollection();
		for (int i = 0 ; i < form.grdAllergies().getRows().size() ; i++)
		{
			if (form.grdAllergies().getRows().get(i).getValue()!=null)
				result.add(form.grdAllergies().getRows().get(i).getValue());
		}
		return result;
	}

	private VitalSignsForNursingNotesVo getVitalSigns(VitalSignsForNursingNotesVo vitalSigns)
	{
		if (vitalSigns == null)
			vitalSigns = new  VitalSignsForNursingNotesVo();

		vitalSigns.setBloodPressure(getBloodPressure(vitalSigns.getBloodPressure()));
		vitalSigns.setPulse(getPulse(vitalSigns.getPulse()));
		vitalSigns.setTemperature(getTemperature(vitalSigns.getTemperature()));
		vitalSigns.setRespiratory(getRespiratory(vitalSigns.getRespiratory()));
		vitalSigns.setMetrics(getMetrics(vitalSigns.getMetrics()));
		vitalSigns.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
		vitalSigns.setVitalsTakenDateTime(new DateTime());

		if (vitalSigns.getBloodPressureIsNotNull() || vitalSigns.getPulseIsNotNull() || vitalSigns.getTemperatureIsNotNull() || vitalSigns.getMetricsIsNotNull())
			return vitalSigns;

		return null;
	}
	private RespiratoryForNursingNotesVo getRespiratory(RespiratoryForNursingNotesVo respiratory)
	{
		if (form.intRespRate().getValue() == null)
			return null;
		if (respiratory == null)
			respiratory = new RespiratoryForNursingNotesVo();
		respiratory.setRespRate(form.intRespRate().getValue().intValue());
		return respiratory;
	}

	private MetricsForNursingNotesVo getMetrics(MetricsForNursingNotesVo metrics)
	{
		if (form.decHeight().getValue() == null && form.decWeight().getValue() == null)
			return null;
		if (metrics == null)
			metrics = new MetricsForNursingNotesVo();
		metrics.setHeightValue(form.decHeight().getValue());
		metrics.setWeightValue(form.decWeight().getValue());
		metrics.setBMI(form.decBMI().getValue());
		metrics.setPatient(form.getGlobalContext().Core.getPatientShort());
		return metrics;
	}
	private TemperatureForNursingNotesVo getTemperature(TemperatureForNursingNotesVo temperature)
	{
		if (form.decTemp().getValue() == null)
			return null;
		if (temperature == null)
			temperature = new TemperatureForNursingNotesVo();
		temperature.setTemperature(form.decTemp().getValue());
		return temperature;
	}
	private PulseForNursingNotesVo getPulse(PulseForNursingNotesVo pulse)
	{
		if (form.intHeartRate().getValue() == null)
			return null;
		if (pulse == null)
			pulse = new PulseForNursingNotesVo();
		pulse.setPulseRateRadial(form.intHeartRate().getValue());
		return pulse;
	}
	private BloodPressureForNursingNotesVo getBloodPressure(BloodPressureForNursingNotesVo bloodPressure)
	{
		if (bloodPressure==null)
			bloodPressure = new BloodPressureForNursingNotesVo();
		bloodPressure.setBPSittingDias(form.intBPDIA().getValue()!=null?form.intBPDIA().getValue().floatValue():null);
		bloodPressure.setBPSittingSys(form.intBPSYS().getValue()!=null?form.intBPSYS().getValue().floatValue():null);
		if (bloodPressure.getBPSittingDiasIsNotNull() || bloodPressure.getBPSittingSysIsNotNull())
			return bloodPressure;
		return null;
	}


	private void updateAllergyButton()
	{
		if (FormMode.EDIT.equals(form.getMode()))
		{
			form.btnAddAllergy().setVisible(true);
			form.btnAddAllergy().setEnabled(form.qmbAllergy().getValue()!=null);
		}
	}

	private void updateComorbidityButton()
	{
		if (FormMode.EDIT.equals(form.getMode()))
		{
			form.btnAddComorbidity().setVisible(true);
			form.btnAddComorbidity().setEnabled(form.qmbComorbidity().getValue()!=null);
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Core.SelectMedication))
		{
			if(result.equals(DialogResult.OK))
				addRowToMedGrid(getPatientMedication(form.getGlobalContext().Core.SelectMedication.getSelectedMedication()));
		}
		
		//WDEV-16887
		if(formName.equals(form.getForms().Core.YesNoDialog) && result.equals(DialogResult.YES))
		{

			PatientAllergyForNursingNotesVo voPatientAllergy = form.grdAllergies().getValue();
			if (form.getLocalContext().getAllergiesforRemoval() == null)
			{	
				form.getLocalContext().setAllergiesforRemoval(new PatientAllergyForNursingNotesVoCollection());
			}
			
			form.getLocalContext().getAllergiesforRemoval().add(voPatientAllergy);
			form.grdAllergies().removeSelectedRow();
		}	

	}
}
