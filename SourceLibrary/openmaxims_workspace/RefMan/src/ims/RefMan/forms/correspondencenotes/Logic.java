// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3625.26452)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.correspondencenotes;

import ims.RefMan.forms.followupnotescomponent.GenForm;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.CorrespondenceNoteLiteVo;
import ims.RefMan.vo.CorrespondenceNoteVo;
import ims.RefMan.vo.CorrespondenceNoteVoCollection;
import ims.RefMan.vo.lookups.ReportNoteStatus;
import ims.RefMan.vo.lookups.ReportNoteType;
import ims.core.vo.HcpLiteVo;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellDecoratorMode;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int COL_TYPE = 1;
	private static final int COL_USER = 2;
	private static final int COL_DATETIME = 3;
	private static final int COL_NOTE = 4;
	private static final int COL_STATUS = 5;
	private static final int NEW_ROW_IDENTIFIER = 6;	

	public void initialize(Boolean displayReadOnly, CorrespondenceNoteLiteVo value) 
	{
		if (displayReadOnly)
			form.btnCorrespondenceNote().setVisible(false);
		
		initializeDynamicGrid();
		
		form.getLocalContext().setDisplayReadOnly(displayReadOnly);
		
		CorrespondenceNoteVo note = null;
		if (value != null && value.getCatsReferralIsNotNull()) {
			note = domain.getReportNote(value);
			CorrespondenceNoteVoCollection notesColl = new CorrespondenceNoteVoCollection();
			notesColl.add(note);
			populateScreen(notesColl);				
			form.setMode(FormMode.VIEW);
			return;
		}		
		
		open();		
	}
	
	@Override
	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.VIEW)) {
			updateContextMenuState();
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.VIEW);
		}
		else {
			form.getContextMenus().RefMan.hideAllReportNotesMenuItems();
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.EDIT);
		}
		form.fireCustomControlValueChanged();
	}
	
	private void initializeDynamicGrid()
	{
		form.dyngrdNotes().clear();
		form.dyngrdNotes().setSelectable(true);	
		DynamicGridColumn column;
		
		column = form.dyngrdNotes().getColumns().newColumn("Type", COL_TYPE);
		column.setWidth(120);
		column.setCanGrow(true);
		
		column = form.dyngrdNotes().getColumns().newColumn("Authoring HCP ", COL_USER);
		column.setWidth(150);
		column.setCanGrow(true);
		
		
		column = form.dyngrdNotes().getColumns().newColumn("Authoring DateTime", COL_DATETIME);
		column.setWidth(120);		
		column.setCanGrow(false);
						
		column = form.dyngrdNotes().getColumns().newColumn("Report Text ", COL_NOTE);
		column.setWidth(300);
		column.setCanGrow(true);
		
		column = form.dyngrdNotes().getColumns().newColumn("Status", COL_STATUS);
		column.setWidth(-1);
		column.setCanGrow(true);				
	}
	
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(result.equals(DialogResult.OK) && formName.equals(form.getForms().RefMan.CorrespondenceNoteDialog))
		{
			if (form.getGlobalContext().RefMan.getEditedReportNoteIsNotNull()) {
				saveNote(form.getGlobalContext().RefMan.getEditedReportNote());									
			}						
		}
		open();
		
	}
	private void open() 
	{	
		form.setMode(FormMode.VIEW);
		CatsReferralRefVo currentCatsReferral = form.getGlobalContext().RefMan.getCatsReferral();
		CorrespondenceNoteVoCollection currentNotes = domain.listReportNotes(currentCatsReferral);		
		populateScreen(currentNotes);		
		updateContextMenuState();
		
		form.btnCorrespondenceNote().setVisible(false);

//		CatsReferralWizardVo voCats = domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
//		if (voCats.getReportsRequiredIsNotNull()
//			&& voCats.getReportsRequired().size() > 0 && isActiveNoteInGrid())

		if 	(isActiveNoteInGrid())
			form.btnCorrespondenceNote().setVisible(true);
	}
	private boolean isActiveNoteInGrid()
	{
		for (int i = 0 ; i < form.dyngrdNotes().getRows().size() ; i++)
		{
			Object value = form.dyngrdNotes().getRows().get(i).getValue();
			if (value instanceof CorrespondenceNoteVo && ReportNoteStatus.ACTIVE.equals(((CorrespondenceNoteVo)value).getNoteStatus()))
			{
				return true;
			}
		}
		return false;
	}
	
	private void updateContextMenuState() 
	{
		form.getContextMenus().RefMan.getReportNotesNewItem().setVisible(true);
		form.getContextMenus().RefMan.getReportNotesEditItem().setVisible(form.dyngrdNotes().getSelectedRow() != null ?  true : false);
		
		boolean isReadOnlyMode = form.getLocalContext().getDisplayReadOnlyIsNotNull() ? form.getLocalContext().getDisplayReadOnly() : false;
		boolean isEditMode = form.getMode().equals(FormMode.EDIT);		
		
		if (!isEditMode) {
			form.btnNew().setVisible(!isReadOnlyMode);
			form.btnEdit().setVisible((form.dyngrdNotes().getSelectedRow() != null ?  true : false) && !isReadOnlyMode);
		}
		
		if (isReadOnlyMode || isEditMode) {
			form.getContextMenus().RefMan.hideAllReportNotesMenuItems();						
		}		
	}
	
	private void populateScreen(CorrespondenceNoteVoCollection currentNotes) 
	{	
		form.dyngrdNotes().getRows().clear();
		if (currentNotes != null) 
		{
			for (int i = 0; i < currentNotes.size(); i++) 
			{				
				newNote(form.dyngrdNotes().getRows().newRow(), currentNotes.get(i), false); 
			}
		}
	}	
	
	private void newNote(DynamicGridRow row, CorrespondenceNoteVo note, boolean isEditMode) 
	{	
		if (row == null) {
			throw new CodingRuntimeException("DynamicGridRow is null");
		}
		
		if (note == null) {
			row.setIdentifier(NEW_ROW_IDENTIFIER);
		}
		
		DynamicGridColumn 	coll;
		DynamicGridCell 	cell;
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_TYPE);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);
		cell.setValue(note != null ? (note.getNoteTypeIsNotNull() ? note.getNoteType().getText() : null)  : null);		
		cell.setReadOnly(false);		
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_USER);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);		
		cell.setValue(note != null ? (note.getAuthoringInformationIsNotNull() ? (note.getAuthoringInformation().getAuthoringHcpIsNotNull() ? (note.getAuthoringInformation().getAuthoringHcp().getName() != null ? note.getAuthoringInformation().getAuthoringHcp().getName().toString() : null) : null ) : null)  : domain.getHcpLiteUser() != null ? ((HcpLiteVo)domain.getHcpLiteUser()).getName() != null ? ((HcpLiteVo)domain.getHcpLiteUser()).getName().toString() : null : null);
		cell.setReadOnly(true);			
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_DATETIME);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);		
		cell.setValue(note != null ? (note.getAuthoringInformationIsNotNull() ? note.getAuthoringInformation().getAuthoringDateTime().toString() : (new DateTime()).toString())  : (new DateTime()).toString());		
		cell.setReadOnly(false);			
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_NOTE);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);						
		cell.setValue(note != null ? note.getReportNote().replaceAll("\n", "<br>") : null);
		cell.setDecoratorType(DynamicCellDecoratorMode.NEVER);	
		cell.setReadOnly(isEditMode ? false : true);
		cell.setStringMaxLength(3000);
		
		coll = form.dyngrdNotes().getColumns().getByIdentifier(COL_STATUS);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);
		cell.setValue(note != null ? (note.getNoteStatusIsNotNull() ? note.getNoteStatus().getText() : null)  : null);		
		cell.setReadOnly(false);
			
		row.setValue(note);		
		row.setReadOnly(!isEditMode);
		
		if (isEditMode) {
			form.getLocalContext().setEditedNote(note);
		}			
	}
	
	private boolean saveNote(CorrespondenceNoteVo editedReportNote) 
	{	
		CorrespondenceNoteVo currentNote = form.getGlobalContext().RefMan.getEditedReportNote();
		if (currentNote == null)
			return false;

		String[] str 	= currentNote.validate();
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);			
			return false;
		}
		
		ReportNoteType removeType = null;
		boolean shouldRemove = false;
		//If the note is not null and Status equals draft
		if (currentNote.getID_ReportNoteIsNotNull())
		{
			if (ReportNoteStatus.DRAFT.equals(currentNote.getNoteStatus()))
					shouldRemove = !isOtherNoteOfThisTypeActive(currentNote);
			
			//Also check the case :
			//Type of note has change, and no other active note with this type
			if (!form.getLocalContext().getEditedNote().getNoteType().equals(currentNote.getNoteType()) &&
					!isOtherNoteOfThisTypeActive(form.getLocalContext().getEditedNote()))
			{
				removeType = form.getLocalContext().getEditedNote().getNoteType();
			}
		}
		
		
		
		try 
		{
			
			currentNote = domain.saveReportNote(currentNote, shouldRemove, removeType);				
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(e.toString());			
			return false;
		}		
		//wdev-12880
		if(form.getGlobalContext().RefMan.getCatsReferral() != null)
			form.getGlobalContext().RefMan.setCatsReferral(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));
		//----------
		form.getLocalContext().setEditedNote(currentNote);
		
		return true;
	}

	private boolean isOtherNoteOfThisTypeActive(CorrespondenceNoteVo note)
	{
		if (note == null)
			return false;
			
		for (int i = 0 ; i<form.dyngrdNotes().getRows().size() ; i++)
		{
			Object value = form.dyngrdNotes().getRows().get(i).getValue();
			if (value instanceof CorrespondenceNoteVo && note.getNoteType().equals(((CorrespondenceNoteVo)value).getNoteType()) &&
					ReportNoteStatus.ACTIVE.equals(((CorrespondenceNoteVo)value).getNoteStatus()) &&
					!note.equals(value))
			{
			return true;	
			}
		}
		return false;
	}

	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		editNote();
	}
	@Override
	protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException
	{
		addNote();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender)
			throws PresentationLogicException 
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.FollowUpNotes.Add:
				addNote();
				break;
			case GenForm.ContextMenus.RefManNamespace.FollowUpNotes.Edit:
				editNote();
				break;	
		}		
	}

	private void editNote() 
	{
		form.setMode(FormMode.EDIT);		
		form.getLocalContext().setEditedNote((CorrespondenceNoteVo) form.dyngrdNotes().getSelectedRow().getValue());
		form.getGlobalContext().RefMan.setEditedReportNote((CorrespondenceNoteVo) form.getLocalContext().getEditedNote().clone());
		engine.open(form.getForms().RefMan.CorrespondenceNoteDialog);
	}
	
	private void addNote() 
	{
		form.getGlobalContext().RefMan.setEditedReportNote(null);
		engine.open(form.getForms().RefMan.CorrespondenceNoteDialog);
	}
	
	@Override
	protected void onDyngrdNotesRowSelectionChanged(DynamicGridRow row)
			throws PresentationLogicException 
	{
		form.getLocalContext().setEditedNote((CorrespondenceNoteVo) form.dyngrdNotes().getSelectedRow().getValue());
		updateContextMenuState();		
	}

	@Override
	protected void onBtnCorrespondenceNoteClick() throws PresentationLogicException 
	{	
		engine.open(form.getForms().RefMan.PrintCorrespondenceNoteDialog);
	}
}
