// This code was generated by Aidan Mc Donnell using IMS Development Environment (version 1.64 build 3155.28032)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.presentationcomponent;

import ims.RefMan.forms.presentationcomponent.GenForm.grdAlergiesRow;
import ims.RefMan.forms.presentationcomponent.GenForm.grdCoMorbitiesRow;
import ims.RefMan.forms.presentationcomponent.GenForm.grdIssuesRow;
import ims.RefMan.vo.PresentationReferralSummaryVo;
import ims.clinical.vo.PatientComplaintVo;
import ims.clinical.vo.PatientComplaintVoCollection;
import ims.clinical.vo.PresentingComplaintVo;
import ims.clinical.vo.PresentingComplaintVoCollection;
import ims.core.vo.AllergenVo;
import ims.core.vo.AllergenVoCollection;
import ims.core.vo.DiagLiteVo;
import ims.core.vo.DiagnosisVoCollection;
import ims.core.vo.MedicationVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffLiteVoCollection;
import ims.core.vo.PatientAllergy;
import ims.core.vo.PatientAllergyCollection;
import ims.core.vo.PatientDiagnosisLiteVo;
import ims.core.vo.PatientDiagnosisLiteVoCollection;
import ims.core.vo.PatientMedicationLiteVo;
import ims.core.vo.PatientMedicationLiteVoCollection;
import ims.core.vo.ServiceVo;
import ims.core.vo.lookups.MedicationDoseUnitCollection;
import ims.core.vo.lookups.MedicationFrequencyCollection;
import ims.core.vo.lookups.SourceofInformation;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;

import java.util.ArrayList;
import java.util.Iterator;

public class Logic extends BaseLogic
{
	private static final long		serialVersionUID				= 1L;

	private static final Integer	MODE_NEW_ISSUE_RECORD			= new Integer(1);
	//private static final Integer	MODE_NEW_MEDICATION_RECORD		= new Integer(2);
	private static final Integer	MODE_REMOVE_ISSUE_RECORD		= new Integer(3);
	private static final Integer	MODE_REMOVE_MEDICATION_RECORD	= new Integer(4);
	private static final Integer	MODE_NEW_ALLERGY_RECORD			= new Integer(5);
	private static final Integer	MODE_REMOVE_ALLERGY_RECORD		= new Integer(6);
	private static final Integer	MODE_NEW_COMORBIDITY_RECORD		= new Integer(7);
	private static final Integer	MODE_REMOVE_COMORBIDITY_RECORD	= new Integer(8);

	public void initialize()
	{

		populateLocalContexts();
		form.getLocalContext().setCurrentPresentationReferralSummary(null);
		form.setMode(FormMode.VIEW);
		form.btnEdit().setVisible(false);
		form.btnNew().setVisible(false);
		/*
		 * form.btnCancel().setVisible(false); form.btnSave().setVisible(false);
		 */

	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().Core.SelectMedication))
		{
			if(result.equals(DialogResult.OK))
			{
				addMedication(form.getGlobalContext().Core.SelectMedication.getSelectedMedication());
				form.chkMedicationsIndicated().setEnabled(false);
				form.chkMedicationsIndicated().setValue(false);
			}			
	
		}
	}
	private void addMedication(MedicationVo selectedMedication) 
	{
		if(selectedMedication == null)
			return;
	
		Date date = new Date();
		GenForm.grdMedicationRow row = form.grdMedication().getRows().newRow();
		row.setcolDrug(selectedMedication.getMedicationName());
		row.setcolDate(date);
		
		PatientMedicationLiteVo value = new PatientMedicationLiteVo();		
		value.setMedication(selectedMedication);
		row.setValue(value);
	}
	public void setValue(ims.RefMan.vo.PresentationReferralSummaryVo value)
	{
		
		form.setMode(FormMode.VIEW);
		
		form.btnEdit().setVisible(false);
		form.btnNew().setVisible(false);
		form.btnSave().setVisible(false);
		form.btnCancel().setVisible(false);

		form.getLocalContext().setOriginalPresentationReferralSummaryVo(null);
		form.getLocalContext().setCurrentPresentationReferralSummary(null);

		PresentationReferralSummaryVo originalValue = new PresentationReferralSummaryVo();

		if (value != null)
			originalValue = (PresentationReferralSummaryVo) value.clone();

		form.getLocalContext().setOriginalPresentationReferralSummaryVo(originalValue);
		form.getLocalContext().setCurrentPresentationReferralSummary(value);

		if (value != null)
		{

			form.setMode(FormMode.EDIT);
			populateScreenFromData(value);
			form.setMode(FormMode.VIEW);
			form.btnEdit().setVisible(true);
			form.btnNew().setVisible(false);
			return;
		}
		form.setMode(FormMode.EDIT);
		resetForm();
		form.setMode(FormMode.VIEW);

		//wdev-6163
		if(form.getGlobalContext().RefMan.getIsProviderCancellationIsNotNull()
			&& 	form.getGlobalContext().RefMan.getIsProviderCancellation())
		{
			form.setMode(FormMode.VIEW);
			form.btnEdit().setVisible(false);
			form.btnNew().setVisible(false);
		}
	}

	private void resetForm()
	{
		clearGrids();
		form.btnEdit().setVisible(false);
		form.btnNew().setVisible(true);
		form.chkAllergiesIndicated().setEnabled(false);
		form.chkAllergiesIndicated().setValue(false);
		form.chkCoMorbitiesIndicated().setEnabled(false);
		form.chkCoMorbitiesIndicated().setValue(false);
		form.chkComplaintsIndicated().setEnabled(false);
		form.chkComplaintsIndicated().setValue(false);
		form.chkMedicationsIndicated().setEnabled(false);
		form.chkMedicationsIndicated().setValue(false);
	
	}

	public ims.RefMan.vo.PresentationReferralSummaryVo getValue()
	{

		return populateDataFromScreen();

	}

	public String[] validate(String[] value)
	{

		ArrayList<String> errors = new ArrayList<String>();

		if (value != null)
		{
			for (int i = 0; i < value.length; i++)
			{
				errors.add(value[i]);
			}
		}

		if (form.chkComplaintsIndicated().getValue() == false && (form.grdIssues().getRows().size() == 0 || grdIssueContainsOnlyEmptyRows()))
		{
			errors.add("Please record presenting issue(s) or check the \"None Indicated\" box");
		}
		if (form.chkMedicationsIndicated().getValue() == false && form.grdMedication().getRows().size() == 0)
		{
			errors.add("Please record medication(s) or check the \"None Indicated\" box");
		}
		if (form.chkAllergiesIndicated().getValue() == false && (form.grdAlergies().getRows().size() == 0 || grdAllergiesContainsOnlyEmptyRows()))
		{
			errors.add("Please record allergy(s) or check the \"None Indicated\" box");
		}
		if (form.chkCoMorbitiesIndicated().getValue() == false && (form.grdCoMorbities().getRows().size() == 0 || grdCoMorbitiesContainsOnlyEmptyRows()))
		{
			errors.add("Please record comorbidities or check the \"None Indicated\" box");
		}
		
		validateMedications(errors);
		
		String[] errorsArray = new String[errors.size()];

		for (int i = 0; i < errors.size(); i++)
		{
			errorsArray[i] = errors.get(i);
		}
		return errorsArray;

	}

	private boolean grdCoMorbitiesContainsOnlyEmptyRows() 
	{
		for (int i = 0; i < form.grdCoMorbities().getRows().size(); i++)
		{
			PatientDiagnosisLiteVo morbity = form.grdCoMorbities().getRows().get(i).getValue();

			if (morbity != null)
			{	
				return false;
			}
		}
		 
		return true;
	}

	private boolean grdAllergiesContainsOnlyEmptyRows() 
	{
		for (int i = 0; i < form.grdAlergies().getRows().size(); i++)
		{
			PatientAllergy allergy = form.grdAlergies().getRows().get(i).getValue();

			if (allergy != null)
			{	
				return false;
			}
		}
		 
		return true;
	}

	private boolean grdIssueContainsOnlyEmptyRows() 
	{
		for (int i = 0; i < form.grdIssues().getRows().size(); i++)
		{
			PatientComplaintVo complaint = form.grdIssues().getRows().get(i).getValue();

			if (complaint != null)
			{	
				return false;
			}
		}
		 
		return true;
	}

	private void validateMedications(ArrayList<String> errors) 
	{
		if(errors == null)
			errors = new ArrayList<String>();
		
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		if (sender.equals(form.grdIssues()))
		{
			switch (menuItemID)
			{
				case ims.RefMan.forms.presentationcomponent.GenForm.ContextMenus.RefManNamespace.DetailsMenu.AddItem :
					addComplaintRow();
					break;
					
				case ims.RefMan.forms.presentationcomponent.GenForm.ContextMenus.RefManNamespace.DetailsMenu.removeItem :
					removeComplaint();
					break;

				default :
			}

		}
		else if (sender.equals(form.grdMedication()))
		{
			switch (menuItemID)
			{
				case ims.RefMan.forms.presentationcomponent.GenForm.ContextMenus.RefManNamespace.medicationsMenu.addMedication :
					addMedication();
					break;

				case ims.RefMan.forms.presentationcomponent.GenForm.ContextMenus.RefManNamespace.medicationsMenu.removeMedication :
					removeMedication();
					break;
				default :
			}
		}
		else if (sender.equals(form.grdAlergies()))
		{
			switch (menuItemID)
			{
				case ims.RefMan.forms.presentationcomponent.GenForm.ContextMenus.RefManNamespace.allergyMenu.addItem :
					addAllergy();
					break;

				case ims.RefMan.forms.presentationcomponent.GenForm.ContextMenus.RefManNamespace.allergyMenu.removeItem :
					removeAllergy();
					break;
				default :
			}
		}
		else if (sender.equals(form.grdCoMorbities()))
		{
			switch (menuItemID)
			{
				case ims.RefMan.forms.presentationcomponent.GenForm.ContextMenus.RefManNamespace.CoMorbidity.addItem :
					addMorbities();
					break;

				case ims.RefMan.forms.presentationcomponent.GenForm.ContextMenus.RefManNamespace.CoMorbidity.removeItem :

					removeMorbities();
					break;

				default :
				break;
			}
		}
	}

	private void removeMorbities() 
	{
		if (form.grdCoMorbities().getSelectedRow().getValue() != null)
		{
			if (form.getLocalContext().getCurrentPresentationReferralSummaryIsNotNull())
			{
				if (form.getLocalContext().getCurrentPresentationReferralSummary().getComorbiditiesIsNotNull())
				{
					if (form.getLocalContext().getCurrentPresentationReferralSummary().getComorbidities().contains(form.grdCoMorbities().getSelectedRow().getValue()))
						form.getLocalContext().getCurrentPresentationReferralSummary().getComorbidities().remove(form.grdCoMorbities().getSelectedRow().getValue());
				}
			}
		}

		form.grdCoMorbities().getRows().remove(form.grdCoMorbities().getSelectedRowIndex());

		if (form.grdCoMorbities().getRows().size() == 0)
		{

			form.chkCoMorbitiesIndicated().setEnabled(true);

		}
		updateControlState(MODE_REMOVE_COMORBIDITY_RECORD);
	}

	private void addMorbities() 
	{
		if (form.chkCoMorbitiesIndicated().isEnabled())
		{
			form.chkCoMorbitiesIndicated().setEnabled(false);
			form.chkCoMorbitiesIndicated().setValue(false);
		}
		form.grdCoMorbities().getRows().newRow(true);
		form.grdCoMorbities().resetScrollPosition();
		updateControlState(MODE_NEW_COMORBIDITY_RECORD);
	}

	private void removeAllergy() 
	{
		if (form.grdAlergies().getSelectedRow().getValue() != null)
		{
			if (form.getLocalContext().getCurrentPresentationReferralSummaryIsNotNull())
			{
				if (form.getLocalContext().getCurrentPresentationReferralSummary().getAllergiesIsNotNull())
				{
					if (form.getLocalContext().getCurrentPresentationReferralSummary().getAllergies().contains(form.grdAlergies().getSelectedRow().getValue()))
						form.getLocalContext().getCurrentPresentationReferralSummary().getAllergies().remove(form.grdAlergies().getSelectedRow().getValue());
				}
			}
		}
		form.grdAlergies().getRows().remove(form.grdAlergies().getSelectedRowIndex());
		if (form.grdAlergies().getRows().size() == 0)
		{
			form.chkAllergiesIndicated().setEnabled(true);
		}
		updateControlState(MODE_REMOVE_ALLERGY_RECORD);
	}

	private void addAllergy() 
	{
		if (form.chkAllergiesIndicated().isEnabled())
		{
			form.chkAllergiesIndicated().setValue(false);
			form.chkAllergiesIndicated().setEnabled(false);
		}

		form.grdAlergies().getRows().newRow(true);
		form.grdAlergies().resetScrollPosition();
		updateControlState(MODE_NEW_ALLERGY_RECORD);
	}

	private void removeMedication() 
	{
		if(form.grdMedication().getSelectedRow() == null)
			return;
		
		if (form.grdMedication().getSelectedRow().getValue() != null)
		{
			if (form.getLocalContext().getCurrentPresentationReferralSummary() != null && form.getLocalContext().getCurrentPresentationReferralSummary().getMedicationOnReferralIsNotNull())
			{
				if (form.getLocalContext().getCurrentPresentationReferralSummary().getMedicationOnReferral().contains(form.grdMedication().getSelectedRow().getValue()))
					form.getLocalContext().getCurrentPresentationReferralSummary().getMedicationOnReferral().remove((form.grdMedication().getSelectedRow().getValue()));
			}
		}
		form.grdMedication().getRows().remove(form.grdMedication().getSelectedRowIndex());
		if (form.grdMedication().getRows().size() == 0)
		{
			form.chkMedicationsIndicated().setEnabled(true);
		}
		updateControlState(MODE_REMOVE_MEDICATION_RECORD);
	}

	private void addMedication() 
	{
		form.getGlobalContext().RefMan.setSelectedSpecialty(null);
		engine.open(form.getForms().Core.SelectMedication);		
	}

	private void removeComplaint() 
	{
		if (form.getLocalContext().getCurrentPresentationReferralSummaryIsNotNull() && form.getLocalContext().getCurrentPresentationReferralSummary().getPresentingIssuesIsNotNull())
		{
			if (form.getLocalContext().getCurrentPresentationReferralSummary().getPresentingIssues().contains(form.grdIssues().getSelectedRow().getValue()))
				form.getLocalContext().getCurrentPresentationReferralSummary().getPresentingIssues().remove(form.grdIssues().getSelectedRowIndex());
		}
		form.grdIssues().getRows().remove(form.grdIssues().getSelectedRowIndex());
		if (form.grdIssues().getRows().size() == 0)
		{
			form.chkComplaintsIndicated().setEnabled(true);
		}
		
		
		
		updateControlState(MODE_REMOVE_ISSUE_RECORD);
	}

	private void addComplaintRow() 
	{
		if (form.chkComplaintsIndicated().isEnabled())
		{
			form.chkComplaintsIndicated().setEnabled(false);
			form.chkComplaintsIndicated().setValue(false);
		}

		form.grdIssues().getRows().newRow(true);
		form.grdIssues().resetScrollPosition();
		updateControlState(MODE_NEW_ISSUE_RECORD);
	}

	private void updateMedicationContextMenu() 
	{
		form.getContextMenus().RefMan.getmedicationsMenuaddMedicationItem().setVisible(form.getMode().equals(FormMode.EDIT) && !form.chkMedicationsIndicated().getValue());		
		form.getContextMenus().RefMan.getmedicationsMenuremoveMedicationItem().setVisible(form.getMode().equals(FormMode.EDIT) && !form.chkMedicationsIndicated().getValue() && form.grdMedication().getSelectedRow() != null);
	}
	
	private void updateControlState(Integer modeNewIssueRecord)
	{
		updateMedicationContextMenu();
		
		if (modeNewIssueRecord == MODE_NEW_COMORBIDITY_RECORD)
		{
			form.getContextMenus().RefMan.getCoMorbidityaddItemItem().setVisible(true);
			form.getContextMenus().RefMan.getCoMorbidityremoveItemItem().setVisible(true);
		}

		if (modeNewIssueRecord == MODE_REMOVE_COMORBIDITY_RECORD)
		{

			if (form.grdCoMorbities().getRows().size() == 0 || form.grdCoMorbities().getSelectedRow() == null )
			{
				form.getContextMenus().RefMan.getCoMorbidityremoveItemItem().setVisible(false);
			}

		}

		if (modeNewIssueRecord == MODE_NEW_ISSUE_RECORD)
		{
			form.getContextMenus().RefMan.getDetailsMenuremoveItemItem().setVisible(true);
			form.getContextMenus().RefMan.getDetailsMenuAddItemItem().setVisible(true);
		}
		if (modeNewIssueRecord == MODE_REMOVE_ISSUE_RECORD)
		{
			if (form.grdIssues().getRows().size() == 0 || form.grdIssues().getSelectedRow() == null)
			{
				form.getContextMenus().RefMan.getDetailsMenuremoveItemItem().setVisible(false);
			}
		}

		if (modeNewIssueRecord == MODE_NEW_ALLERGY_RECORD)
		{
			form.getContextMenus().RefMan.getallergyMenuaddItemItem().setVisible(true);
			form.getContextMenus().RefMan.getallergyMenuremoveItemItem().setVisible(true);
		}

		if (modeNewIssueRecord == MODE_REMOVE_ALLERGY_RECORD)
		{
			if (!(form.grdAlergies().getValue() instanceof PatientAllergy))
			{
				form.getContextMenus().RefMan.getallergyMenuremoveItemItem().setVisible(false);
			}
		}
	}

	private void setCheckBoxes()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			form.chkAllergiesIndicated().setEnabled(true);
			form.chkCoMorbitiesIndicated().setEnabled(true);
			form.chkComplaintsIndicated().setEnabled(true);
			form.chkMedicationsIndicated().setEnabled(true);
		}
		form.chkAllergiesIndicated().setValue(false);
		form.chkCoMorbitiesIndicated().setValue(false);
		form.chkComplaintsIndicated().setValue(false);
		form.chkMedicationsIndicated().setValue(false);
	}

	private void populateLocalContexts()
	{
		form.getLocalContext().setDosages(null);
		MedicationDoseUnitCollection medUnits = ims.core.vo.lookups.LookupHelper.getMedicationDoseUnit(domain.getLookupService());
		form.getLocalContext().setDosages(medUnits);

		form.getLocalContext().setFrequency(null);
		MedicationFrequencyCollection frequencies = ims.core.vo.lookups.LookupHelper.getMedicationFrequency(domain.getLookupService());
		form.getLocalContext().setFrequency(frequencies);

	}

	private void populateScreenFromData(PresentationReferralSummaryVo value)
	{
		if(value == null)
			return;
		
		setCheckBoxes();
		clearGrids();
		if (value.getCatsReferral() == null)
			value.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		MemberOfStaffLiteVo loggedUser = (MemberOfStaffLiteVo) domain.getMosUser();
		if (value != null)
		{
			if (value.getAllergiesIssuesNonIndicatedIsNotNull())
			{
				form.chkAllergiesIndicated().setValue(value.getAllergiesIssuesNonIndicated().booleanValue());
				form.chkAllergiesIndicated().setEnabled(value.getAllergiesIssuesNonIndicated().booleanValue());
				if (value.getAllergiesIssuesNonIndicated() == true)
				{
					form.getContextMenus().RefMan.hideAllallergyMenuMenuItems();
					form.getContextMenus().RefMan.getallergyMenuaddItemItem().setVisible(false);
				}
			}
			if (value.getPresentingIssuesNonIndicatedIsNotNull())
			{
				form.chkComplaintsIndicated().setValue(value.getPresentingIssuesNonIndicated().booleanValue());
				form.chkComplaintsIndicated().setEnabled(value.getPresentingIssuesNonIndicated().booleanValue());
				if (value.getPresentingIssuesNonIndicated() == true)
				{
					form.getContextMenus().RefMan.hideAllDetailsMenuMenuItems();
				}
			}
			if (value.getMedicationNonIndicatedIsNotNull())
			{
				form.chkMedicationsIndicated().setValue(value.getMedicationNonIndicated().booleanValue());
				form.chkMedicationsIndicated().setEnabled(value.getMedicationNonIndicated().booleanValue());
				if (value.getMedicationNonIndicated() == true)
				{
					form.getContextMenus().RefMan.hideAllmedicationsMenuMenuItems();
				}
			}
			if (value.getComorbiditiesIssuesNonIndicatedIsNotNull())
			{
				form.chkCoMorbitiesIndicated().setValue(value.getComorbiditiesIssuesNonIndicated().booleanValue());
				form.chkCoMorbitiesIndicated().setEnabled(value.getComorbiditiesIssuesNonIndicated().booleanValue());
				if (value.getComorbiditiesIssuesNonIndicated() == true)
				{
					form.getContextMenus().RefMan.hideAllCoMorbidityMenuItems();
				}
			}
			if (value.getCatsReferralIsNotNull())
			{
				//wdev-6458
				ServiceVo voService = domain.getService(value.getCatsReferral().getID_CatsReferral());
				if (voService == null)
					engine.showMessage("No Service has been found for this Referral. Please ensure a Service is recorded for this Referral.");
				else
					form.lblServiceName().setValue(voService.getServiceName());
			}
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.grdIssues().setEnabled(!form.chkComplaintsIndicated().getValue());
				form.grdIssues().setReadOnly(form.chkComplaintsIndicated().getValue());
				form.grdMedication().setEnabled(!form.chkMedicationsIndicated().getValue());
				form.grdMedication().setReadOnly(form.chkMedicationsIndicated().getValue());
				form.grdCoMorbities().setEnabled(!form.chkCoMorbitiesIndicated().getValue());
				form.grdAlergies().setEnabled(!form.chkAllergiesIndicated().getValue());
			}
			if (value.getAuthoringUserIsNotNull())
			{

				form.qmbAuthor().newRow(value.getAuthoringUser(), value.getAuthoringUser().getIMosName());
				form.qmbAuthor().setValue(value.getAuthoringUser());
				form.qmbAuthor().setEditedText(value.getAuthoringUser().getIItemText());
			}
			else
			{
				if (loggedUser != null)
				{
					form.qmbAuthor().newRow(loggedUser, loggedUser.getIMosName());
					form.qmbAuthor().setEditedText(loggedUser.getIMosName());
					form.qmbAuthor().setValue(loggedUser);
					form.qmbAuthor().getValue();

				}
			}
			if (value.getAuthoringDateTimeIsNotNull())
			{
				form.dtimAuthoringDateTime().setValue(value.getAuthoringDateTime());
			}
			else
			{
				form.dtimAuthoringDateTime().setValue(new DateTime());
			}

			if (value.getPresentingIssuesIsNotNull())
			{
				populateIssuesGridFromData(value.getPresentingIssues());

			}

			if (value.getMedicationOnReferralIsNotNull())
			{
				populateMedsGridFromData(value.getMedicationOnReferral());
			}

			if (value.getComorbiditiesIsNotNull())
			{
				populateCoMorbities(value.getComorbidities());
			}

			if (value.getAllergiesIsNotNull())
			{

				populateAllergiesGridFromData(value.getAllergies());

			}

	//wdev-6182		form.dtimAuthoringDateTime().setValue(value.getAuthoringDateTime());
			
			return;
		}
		
		
		form.grdIssues().setEnabled(true);
		form.grdMedication().setEnabled(true);
		form.grdAlergies().setEnabled(true);
		form.grdCoMorbities().setEnabled(true);

	}

	private void clearGrids()
	{
		form.grdIssues().getRows().clear();

		form.grdMedication().getRows().clear();

		form.grdAlergies().getRows().clear();

		form.grdCoMorbities().getRows().clear();

	}

	private void populateMedsGridFromData(PatientMedicationLiteVoCollection medicationOnReferral)
	{
		if(medicationOnReferral == null)
			return;
		
		for(int x = 0; x < medicationOnReferral.size(); x++)
		{
			PatientMedicationLiteVo medication = medicationOnReferral.get(x);
			
			if(medication != null)
			{
				GenForm.grdMedicationRow row = form.grdMedication().getRows().newRow();
				
				if(medication.getMedication() != null)
				{
					row.setcolDrug(medication.getMedication().getMedicationName());
					row.setTooltip(medication.getMedication().getMedicationName());
				}
				
				row.setcolDate(medication.getCommencedDate());
				row.setcolFrequency(medication.getFrequency());
				
				row.setValue(medication);
			}
			
		}
	}

	private void populateIssuesGridFromData(PatientComplaintVoCollection presentingIssues)
	{
		form.grdIssues().getRows().clear();
		
		for (int i = 0; i < presentingIssues.size(); i++)
		{
			grdIssuesRow row = form.grdIssues().getRows().newRow();
			row.getPresentingIssue().newRow(presentingIssues.get(i), presentingIssues.get(i).getComplaint().getPCName().toString());
			row.getPresentingIssue().setValue(presentingIssues.get(i).getComplaint());
			row.setValue(presentingIssues.get(i));
			row.getPresentingIssue().setEditedText(presentingIssues.get(i).getComplaint().getPCName().toString());
		}
	}

	private void populateCoMorbities(PatientDiagnosisLiteVoCollection patientDiagnosisLiteVoCollection)
	{

		for (int i = 0; i < patientDiagnosisLiteVoCollection.size(); i++)
		{
			grdCoMorbitiesRow row = form.grdCoMorbities().getRows().newRow();
			row.setValue(patientDiagnosisLiteVoCollection.get(i));
			if (patientDiagnosisLiteVoCollection.get(i).getDiagnosisIsNotNull())
			{
				row.getCoMorbities().newRow(patientDiagnosisLiteVoCollection.get(i).getDiagnosis(), patientDiagnosisLiteVoCollection.get(i).getDiagnosis().getDiagnosisName());

				row.getCoMorbities().setEditedText(patientDiagnosisLiteVoCollection.get(i).getDiagnosis().getDiagnosisName());
			}
		}
	}

	@SuppressWarnings("unchecked")
	private void populateAllergiesGridFromData(PatientAllergyCollection allergies)
	{
		for (Iterator iterator = allergies.iterator(); iterator.hasNext();)
		{
			PatientAllergy name = (PatientAllergy) iterator.next();
			grdAlergiesRow row = form.grdAlergies().getRows().newRow();
			row.setValue(name);
			row.getAllergy().newRow(name.getAllergen(), name.getAllergen().getAllergenName());
			row.getAllergy().setValue(name.getAllergen());
			row.getAllergy().setEditedText(name.getAllergen().getAllergenName());

		}

	}

	private PresentationReferralSummaryVo populateDataFromScreen()
	{
		PresentationReferralSummaryVo presentationSummary = null;
		PatientComplaintVoCollection presenting = null;
		if (form.getLocalContext().getCurrentPresentationReferralSummaryIsNotNull())
		{
			presentationSummary = form.getLocalContext().getCurrentPresentationReferralSummary();
		}
		else
			presentationSummary = new PresentationReferralSummaryVo();
		
		presentationSummary.setPresentingIssuesNonIndicated(form.chkComplaintsIndicated().getValue());
		if(!form.chkComplaintsIndicated().getValue())
		{
			if (presentationSummary.getPresentingIssuesIsNotNull())
			{
				presenting = presentationSummary.getPresentingIssues();
			}
			else
			{
				presenting = new PatientComplaintVoCollection();
			}
			populateComplaintFromScreen(presenting);
		}
		presentationSummary.setPresentingIssues(presenting);
		
		presentationSummary.setMedicationNonIndicated(form.chkMedicationsIndicated().getValue());
		
		PatientMedicationLiteVoCollection patMedColl = new PatientMedicationLiteVoCollection();
		if(!form.chkMedicationsIndicated().getValue())
		{
			patMedColl = getMedications();
		}
		presentationSummary.setMedicationOnReferral(patMedColl);
						
		presentationSummary.setAllergiesIssuesNonIndicated(form.chkAllergiesIndicated().getValue());
		
		PatientAllergyCollection patAlColl = null;
		if(!form.chkAllergiesIndicated().getValue())
		{
			if (presentationSummary.getAllergiesIsNotNull())
			{
				patAlColl = presentationSummary.getAllergies();
			}
			else
			{
				patAlColl = new PatientAllergyCollection();
			}
			patAlColl = getAllergies(patAlColl);
		}
		presentationSummary.setAllergies(patAlColl);
		
		presentationSummary.setComorbiditiesIssuesNonIndicated(form.chkCoMorbitiesIndicated().getValue());
		
		PatientDiagnosisLiteVoCollection patDiagColl = null;
		if(!form.chkCoMorbitiesIndicated().getValue())
		{
			if (presentationSummary.getComorbiditiesIsNotNull())
			{
				patDiagColl = presentationSummary.getComorbidities();
			}
			else
			{
				patDiagColl = new PatientDiagnosisLiteVoCollection();
			}
			patDiagColl = getCoMorbities(patDiagColl);
		}

		presentationSummary.setComorbidities(patDiagColl);
		if (form.dtimAuthoringDateTime()!=null)
			presentationSummary.setAuthoringDateTime(form.dtimAuthoringDateTime().getValue());
		if (form.qmbAuthor()!=null)
			presentationSummary.setAuthoringUser(form.qmbAuthor().getValue());
		
		if (form.getLocalContext().getCurrentPresentationReferralSummaryIsNotNull() && form.getLocalContext().getCurrentPresentationReferralSummary().getCatsReferralIsNotNull())
		{
			presentationSummary.setCatsReferral(form.getLocalContext().getCurrentPresentationReferralSummary().getCatsReferral());
		}
		else
		{
			presentationSummary.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		}

		return presentationSummary;
	}

	private void populateComplaintFromScreen(PatientComplaintVoCollection presentingColl) 
	{
		if(presentingColl == null)
			presentingColl = new PatientComplaintVoCollection();
		
		for(int i=0; i<form.grdIssues().getRows().size(); i++)
		{
			if(form.grdIssues().getRows().get(i) != null && form.grdIssues().getRows().get(i).getValue() instanceof PatientComplaintVo)
			{
				if(!presentingColl.contains(form.grdIssues().getRows().get(i).getValue()))
				{
					presentingColl.add(form.grdIssues().getRows().get(i).getValue());
				}
			}
		}
		
		for(int i=0; i<presentingColl.size(); i++)
		{
			Boolean isEqual = false;
			
			for(int j=0; j<form.grdIssues().getRows().size(); j++)
			{
				if(presentingColl.get(i) != null && form.grdIssues().getRows().get(j) != null && form.grdIssues().getRows().get(j).getValue() != null && presentingColl.get(i).equals(form.grdIssues().getRows().get(j).getValue()))
				{
					isEqual = true;
					break;
				}
			}
			
			if(!isEqual)
			{
				presentingColl.remove(i);
			}
		}
	}

	private PatientDiagnosisLiteVoCollection getCoMorbities(PatientDiagnosisLiteVoCollection patDiagColl)
	{
		/*for (int i = 0; i < form.grdCoMorbities().getRows().size(); i++)
		{
			PatientDiagnosisLiteVo patDiag = null;

			if (!(patDiagColl.contains(form.grdCoMorbities().getRows().get(i).getValue())))
			{
				patDiag = form.grdCoMorbities().getRows().get(i).getValue();
				patDiag.setIsComorbidity(true);
				patDiag.setDiagnosis((DiagLiteVo) form.grdCoMorbities().getRows().get(i).getCoMorbities().getValue());
				patDiag.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
				patDiag.setSourceofInformation(SourceofInformation.CORRESPONDENCE);
				patDiag.setDiagnosisDescription(form.grdCoMorbities().getRows().get(i).getCoMorbities().getEditedText());
				patDiagColl.add(patDiag);
			}
		}
		return patDiagColl;
		*/
		
		for(int i=0; i<form.grdCoMorbities().getRows().size(); i++)
		{
			if(form.grdCoMorbities().getRows().get(i) != null && form.grdCoMorbities().getRows().get(i).getValue() instanceof PatientDiagnosisLiteVo)
			{
				if(!patDiagColl.contains(form.grdCoMorbities().getRows().get(i).getValue()))
				{
					patDiagColl.add(form.grdCoMorbities().getRows().get(i).getValue());
				}
			}
		}
		
		for(int i=0; i<patDiagColl.size(); i++)
		{
			Boolean isEqual = false;
			
			for(int j=0; j<form.grdCoMorbities().getRows().size(); j++)
			{
				if(patDiagColl.get(i) != null && form.grdCoMorbities().getRows().get(j) != null && form.grdCoMorbities().getRows().get(j).getValue() != null && patDiagColl.get(i).equals(form.grdCoMorbities().getRows().get(j).getValue()))
				{
					isEqual = true;
					break;
				}
			}
			
			if(!isEqual)
			{
				patDiagColl.remove(i);
			}
		}
		
		return patDiagColl.size()==0 ? null : patDiagColl;
	}

	private PatientAllergyCollection getAllergies(PatientAllergyCollection patAlColl)
	{
		for(int i=0; i<form.grdAlergies().getRows().size(); i++)
		{
			if(form.grdAlergies().getRows().get(i) != null && form.grdAlergies().getRows().get(i).getValue() instanceof PatientAllergy)
			{
				if(!patAlColl.contains(form.grdAlergies().getRows().get(i).getValue()))
				{
					patAlColl.add(form.grdAlergies().getRows().get(i).getValue());
				}
			}
		}
		
		for(int i=0; i<patAlColl.size(); i++)
		{
			Boolean isEqual = false;
			
			for(int j=0; j<form.grdAlergies().getRows().size(); j++)
			{
				if(patAlColl.get(i) != null && form.grdAlergies().getRows().get(j) != null && form.grdAlergies().getRows().get(j).getValue() != null && patAlColl.get(i).equals(form.grdAlergies().getRows().get(j).getValue()))
				{
					isEqual = true;
					break;
				}
			}
			
			if(!isEqual)
			{
				patAlColl.remove(i);
			}
		}
		
		return patAlColl.size()==0 ? null : patAlColl;
	}

	private PatientMedicationLiteVoCollection getMedications()
	{
		PatientMedicationLiteVoCollection medications = new PatientMedicationLiteVoCollection();
		
		for(int x = 0; x < form.grdMedication().getRows().size(); x++)
		{
			PatientMedicationLiteVo medication = form.grdMedication().getRows().get(x).getValue();
			
			medication.setCommencedDate(form.grdMedication().getRows().get(x).getcolDate());
			medication.setFrequency(form.grdMedication().getRows().get(x).getcolFrequency());
			medication.setOtherMedicationText(medication.getMedication() == null ? "" : medication.getMedication().getMedicationName());
			medication.setSourceofInformation(SourceofInformation.CORRESPONDENCE);
			medication.setPatient(form.getGlobalContext().Core.getPatientShort());
			
			medications.add(medication);			
		}
		
		return medications;
	}

	/*
	private CoMorbiditiesCollection addCoMorbities(CoMorbidities[] values)
	{
		CoMorbiditiesCollection coMorbities = new CoMorbiditiesCollection();
		if (values != null)
		{
			for (int i = 0; i < values.length; i++)
			{
				coMorbities.add(values[i]);
			}
		}

		return coMorbities;
	}
	*/

	protected void onIssuesComboBoxTextBoxSubmitted(int column, grdIssuesRow row, String text) throws PresentationLogicException
	{
		row.getPresentingIssue().clear();
		if(text.replaceAll("[^a-zA-Z0-9% ]", "").length() == 0)
		{
		
			engine.showMessage("Please remove the non-alphanumeric character from your search text");
			return;
			
		}
		PresentingComplaintVoCollection presentingIssues = domain.getPresentingIssues(text);
		if (presentingIssues != null && presentingIssues.size() > 0)
		{
			for (int i = 0; i < presentingIssues.size(); i++)
			{
				Boolean ifIsFound = false;
				
				for(int j=0; j<form.grdIssues().getRows().size(); j++)
				{
					if(presentingIssues.get(i) != null && form.grdIssues().getRows().get(j) != null && form.grdIssues().getRows().get(j).getValue() instanceof PatientComplaintVo && ((PatientComplaintVo) form.grdIssues().getRows().get(j).getValue()).getComplaintIsNotNull() && ((PatientComplaintVo) form.grdIssues().getRows().get(j).getValue()).getComplaint().equals(presentingIssues.get(i)))
					{
						ifIsFound = true;
						break;
					}
				}
				
				if(ifIsFound)
					continue;
				
				row.getPresentingIssue().newRow(presentingIssues.get(i), presentingIssues.get(i).getPCName());
			}
			row.showOpened(column);
			return;
		}

		engine.showMessage("No data found for search value " + text);

		row.getPresentingIssue().setEditedText("");

	}

	protected void onAllergyGridComboBoxTextSubmited(int column, grdAlergiesRow row, String text) throws PresentationLogicException
	{
		
		if(text.replaceAll("[^a-zA-Z0-9% ]", "").length() == 0)
		{
		
			engine.showMessage("Please remove the non-alphanumeric character from your search text");
			return;
			
		}
		
		row.getAllergy().clear();
		AllergenVoCollection allergens;

		try
		{
			allergens = domain.getAllergies(text);
			AllergenVoCollection temp = new AllergenVoCollection();
			AllergenVoCollection usedAllergens = getUsedAllergens();
			if (usedAllergens != null)
			{
				int alSize = allergens.size();
				for (int i = 0; i < alSize; i++)
				{
					if (!(usedAllergens.contains(allergens.get(i))))
					{
						temp.add(allergens.get(i));
					}
				}
			}
			else
				temp = allergens;
			if (temp != null)
			{
				for (int i = 0; i < temp.size(); i++)
				{

					row.getAllergy().newRow(temp.get(i), temp.get(i).getAllergenName());
				}

				row.showOpened(column);
				return;
			}

			engine.showMessage("No data found for search value " + text);

			row.getAllergy().setEditedText("");

		}
		catch (DomainInterfaceException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private AllergenVoCollection getUsedAllergens()
	{
		AllergenVoCollection usedAllergens = new AllergenVoCollection();

		for (int i = 0; i < form.grdAlergies().getRows().size(); i++)
		{
			usedAllergens.add((AllergenVo) form.grdAlergies().getRows().get(i).getAllergy().getValue());
		}

		if (usedAllergens.size() > 0)
		{
			return usedAllergens;
		}
		else
		{
			return null;
		}

	}

	protected void onQmbAuthorTextSubmitted(String value) throws PresentationLogicException
	{
		MemberOfStaffLiteVoCollection activeMos = domain.listActiveMosByName(value);
		for (int i = 0; i < activeMos.size(); i++)
		{
			form.qmbAuthor().newRow(activeMos.get(i), activeMos.get(i).getIMosName());
		}
		form.qmbAuthor().showOpened();
	}

	protected void onQmbAuthorValueChanged() throws PresentationLogicException
	{

	}

	protected void onIssueGridSelectionChanged() throws PresentationLogicException
	{
		if (form.grdIssues().getSelectedRow() != null)
		{
			form.getContextMenus().RefMan.getDetailsMenuremoveItemItem().setVisible(true);
		}
	}

	protected void onAllergyGridSelectionChanged() throws PresentationLogicException
	{
		if (form.grdAlergies().getSelectedRow() != null)
		{
			form.getContextMenus().RefMan.getallergyMenuremoveItemItem().setVisible(true);
		}
	}

	@Override
	protected void onGrdCoMorbiditiesSelectionChanged() throws PresentationLogicException
	{
		if (form.grdCoMorbities().getSelectedRow().getValue() != null)
		{
			form.getContextMenus().RefMan.getCoMorbidityremoveItemItem().setVisible(true);
		}

	}

	protected void onGrdCoMorbiditiesTxtSubmitted(int column, grdCoMorbitiesRow row, String text) throws PresentationLogicException
	{
		row.getCoMorbities().clear();
		try
		{
			DiagnosisVoCollection hotListItems = domain.getHotListItems(text, ims.core.vo.lookups.Specialty.COMORBIDITY);

			if (hotListItems != null)
			{

				for (int index = 0; index < hotListItems.size(); index++)
				{
					Boolean ifIsFound = false;
					
					for(int j=0; j<form.grdCoMorbities().getRows().size(); j++)
					{
						if(hotListItems.get(index) != null && form.grdCoMorbities().getRows().get(j) != null && form.grdCoMorbities().getRows().get(j).getValue() instanceof PatientDiagnosisLiteVo && ((PatientDiagnosisLiteVo) form.grdCoMorbities().getRows().get(j).getValue()).getDiagnosisIsNotNull() && ((PatientDiagnosisLiteVo) form.grdCoMorbities().getRows().get(j).getValue()).getDiagnosis().equals(hotListItems.get(index)))
						{
							ifIsFound = true;
							break;
						}
					}
					
					if(ifIsFound)
						continue;
					
					row.getCoMorbities().newRow(hotListItems.get(index), hotListItems.get(index).getDiagnosisName());
				}

				row.showOpened(column);
				return;
			}
			engine.showMessage("No data found for search value " + text);
			row.getCoMorbities().setEditedText("");
		}
		catch (DomainInterfaceException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	protected void onDtimAuthoringDateTimeValueChanged() throws PresentationLogicException
	{
		// TODO Auto-generated method stub

	}

	protected void onFormModeChanged()
	{
		updateMedicationContextMenu();
		
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().RefMan.hideAllDetailsMenuMenuItems();
			form.getContextMenus().RefMan.hideAllmedicationsMenuMenuItems();
			form.getContextMenus().RefMan.hideAllallergyMenuMenuItems();
			form.getContextMenus().RefMan.hideAllCoMorbidityMenuItems();

			form.btnCancel().setVisible(false);
			form.btnSave().setVisible(false);

		}
		else if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().RefMan.getDetailsMenuAddItemItem().setVisible(!form.chkComplaintsIndicated().getValue());			
			form.getContextMenus().RefMan.getallergyMenuaddItemItem().setVisible(!form.chkAllergiesIndicated().getValue());
			form.getContextMenus().RefMan.getCoMorbidityaddItemItem().setVisible(!form.chkCoMorbitiesIndicated().getValue());

			form.grdIssues().setEnabled(!form.chkComplaintsIndicated().getValue());
			form.grdIssues().setReadOnly(form.chkComplaintsIndicated().getValue());
			form.grdMedication().setEnabled(!form.chkMedicationsIndicated().getValue());
			form.grdMedication().setReadOnly(form.chkMedicationsIndicated().getValue());

			form.grdCoMorbities().setEnabled(!form.chkCoMorbitiesIndicated().getValue());
			form.grdCoMorbities().setReadOnly(form.chkCoMorbitiesIndicated().getValue());

			form.grdAlergies().setEnabled(!form.chkAllergiesIndicated().getValue());
			form.grdAlergies().setReadOnly(form.chkAllergiesIndicated().getValue());

			form.btnEdit().setVisible(false);
			form.btnNew().setVisible(false);

		}
	}

	protected void onChkComplaintsNonIndicatedValueChanged() throws PresentationLogicException
	{
		if (form.chkComplaintsIndicated().getValue() == true)
		{
			form.getContextMenus().RefMan.hideAllDetailsMenuMenuItems();
		}
		else if (form.chkComplaintsIndicated().getValue() == false)
		{
			form.getContextMenus().RefMan.getDetailsMenuAddItemItem().setVisible(true);
		}
		form.grdIssues().setEnabled(!form.chkComplaintsIndicated().getValue());
		form.grdIssues().setReadOnly(form.chkComplaintsIndicated().getValue());

	}

	protected void onChkAllergiesIndicatedValueChanged() throws PresentationLogicException
	{

		if (form.chkAllergiesIndicated().getValue() == true)
		{
			form.getContextMenus().RefMan.hideAllallergyMenuMenuItems();
		}
		else if (form.chkAllergiesIndicated().getValue() == false)
		{
			form.getContextMenus().RefMan.getallergyMenuaddItemItem().setVisible(true);
		}

		form.grdAlergies().setEnabled(!form.chkAllergiesIndicated().getValue());
		form.grdAlergies().setReadOnly(form.chkAllergiesIndicated().getValue());

		form.getLocalContext().getOriginalPresentationReferralSummaryVo();

	}

	protected void onChkCoMorbitiesIndicatedValueChanged() throws PresentationLogicException
	{
		form.grdCoMorbities().setEnabled(!form.chkCoMorbitiesIndicated().getValue());
		if (form.chkCoMorbitiesIndicated().getValue())
		{
			form.getContextMenus().RefMan.hideAllCoMorbidityMenuItems();
		}
		else
		{
			form.getContextMenus().RefMan.getCoMorbidityaddItemItem().setVisible(true);
		}
		form.grdCoMorbities().setEnabled(!(form.chkCoMorbitiesIndicated().getValue()));
		form.grdCoMorbities().setReadOnly(form.chkCoMorbitiesIndicated().getValue());

	}

	protected void onChkMedicationsIndicatedValueChanged() throws PresentationLogicException
	{
		updateMedicationContextMenu();
		
		form.grdMedication().setEnabled(!form.chkMedicationsIndicated().getValue());
		form.grdMedication().setReadOnly(form.chkMedicationsIndicated().getValue());
	}

	@Override
	protected void onBtnEdit() throws PresentationLogicException
	{		
		form.setMode(FormMode.EDIT);		
		/*
		 * form.getLocalContext().setCurrentPresentationReferralSummary(null); form.getLocalContext().setCurrentPresentationReferralSummary(getValue());
		 */
		form.chkCoMorbitiesIndicated().setEnabled(form.chkCoMorbitiesIndicated().getValue());
		form.chkAllergiesIndicated().setEnabled(form.chkAllergiesIndicated().getValue());
		form.chkMedicationsIndicated().setEnabled(form.chkMedicationsIndicated().getValue());
		form.chkComplaintsIndicated().setEnabled(form.chkComplaintsIndicated().getValue());
		
		fireOnFormModeChange(FormMode.EDIT);
	}

	@Override
	protected void onbtnNewClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
		populateScreenFromData(new PresentationReferralSummaryVo());
		fireOnFormModeChange(FormMode.EDIT);
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		form.btnEdit().setVisible(false);
		form.btnNew().setVisible(false);
	}

	@Override
	protected void onbtnCancelClick() throws PresentationLogicException
	{
		
		populateScreenFromData(form.getLocalContext().getOriginalPresentationReferralSummaryVo());
		if (form.getLocalContext().getOriginalPresentationReferralSummaryVo().getID_PresentationReferralSummary() != null)
		{
			form.btnEdit().setVisible(true);
		}
		else if (form.getLocalContext().getOriginalPresentationReferralSummaryVo().getID_PresentationReferralSummary() == null)
		{
			form.btnNew().setVisible(true);
		}
		form.getGlobalContext().setPresentationReferalSummaryChanged(true);
		form.getGlobalContext().setsavedPresentationReferralSummary(form.getLocalContext().getOriginalPresentationReferralSummaryVo());
		form.setMode(FormMode.VIEW);
		fireOnFormModeChange(FormMode.VIEW);
	}

	private void fireOnFormModeChange(FormMode mode)
	{
		form.getGlobalContext().RefMan.setIsComponentInEditMode(mode);
		form.fireCustomControlValueChanged();
	}
	
	@Override
	protected void onbtnSaveClick() throws PresentationLogicException
	{
		String[] strErrors = validate(null);
		PresentationReferralSummaryVo voPres = getValue();

		try		
		{
			if(voPres.getMedicationOnReferral() != null)
			{
				for(int x = 0; x < voPres.getMedicationOnReferral().size(); x++)
				{
					if(voPres.getMedicationOnReferral().get(x).getMedication() != null && voPres.getMedicationOnReferral().get(x).getMedication() instanceof MedicationVo)
					{
						String[] medicationErrors = voPres.getMedicationOnReferral().get(x).getMedication().validate();
						if(medicationErrors != null && medicationErrors.length > 0)
						{
							engine.showErrors("Medication Error", medicationErrors);							
							return;
						}
						voPres.getMedicationOnReferral().get(x).setMedication(domain.createOrUpdateMedication((MedicationVo)voPres.getMedicationOnReferral().get(x).getMedication()));
					}
				}
			}
		}
		catch (StaleObjectException e) 
		{
			engine.showMessage("Unable to save the medication: " + e.toString());			
			return;
		}	
		
		String[] str = voPres.validate(strErrors);
		if (str != null && str.length > 0)
		{
			engine.showErrors(str);
			form.getLocalContext().setCurrentPresentationReferralSummary((PresentationReferralSummaryVo) form.getLocalContext().getOriginalPresentationReferralSummaryVo().clone());			
			return;
		}
		
		try
		{			
			form.getLocalContext().setCurrentPresentationReferralSummary(domain.savePresentationReferralSummary(voPres));
			form.getLocalContext().setOriginalPresentationReferralSummaryVo((PresentationReferralSummaryVo) form.getLocalContext().getCurrentPresentationReferralSummary().clone());
			form.getGlobalContext().setsavedPresentationReferralSummary(form.getLocalContext().getCurrentPresentationReferralSummary());
			form.getGlobalContext().setPresentationReferalSummaryChanged(true);
			form.fireCustomControlValueChanged();

			populateScreenFromData(form.getLocalContext().getCurrentPresentationReferralSummary());
			form.btnEdit().setVisible(true);
			form.setMode(FormMode.VIEW);
			fireOnFormModeChange(FormMode.VIEW);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.toString());
			populateScreenFromData(voPres);
			form.btnEdit().setVisible(true);
			form.setMode(FormMode.VIEW);			
			return;
		}
	}

	public void setReadOnly(Boolean value)
	{
		if (value)
		{
			form.btnCancel().setVisible(false);
			form.btnEdit().setVisible(false);
			form.btnNew().setVisible(false);
			form.btnSave().setVisible(false);
		}
	}

	@Override
	protected void onGrdIssuesMutableComboBoxSelected(int column,grdIssuesRow row, Object value) throws PresentationLogicException 
	{
		if(value instanceof PresentingComplaintVo)
		{
			PatientComplaintVo newComplain = new PatientComplaintVo();
			newComplain.setComplaint((PresentingComplaintVo) value);
			newComplain.setIsActive(true);
			
			row.setValue(newComplain);
		}
	}

	@Override
	protected void onGrdAlergiesMutableComboBoxSelected(int column,	grdAlergiesRow row, Object value) throws PresentationLogicException 
	{
		if(value instanceof AllergenVo)
		{
			PatientAllergy patAl = new PatientAllergy();
			patAl.setPatient(form.getGlobalContext().Core.getPatientShort().toPatientRefVo());
			patAl.setSourceofInformation(SourceofInformation.CORRESPONDENCE);
			patAl.setAllergen((AllergenVo) value);
			patAl.setAllergenDescription(((AllergenVo) value).getAllergenNameIsNotNull() ? ((AllergenVo) value).getAllergenName() : "");
			
			row.setValue(patAl);
		}
	}

	@Override
	protected void onGrdCoMorbitiesMutableComboBoxSelected(int column, grdCoMorbitiesRow row, Object value) throws PresentationLogicException 
	{
		if(value instanceof DiagLiteVo)
		{
			PatientDiagnosisLiteVo patDiag = new PatientDiagnosisLiteVo();
			patDiag.setIsComorbidity(true);
			patDiag.setDiagnosis((DiagLiteVo) value);
			patDiag.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());
			patDiag.setEpisodeOfCare(form.getGlobalContext().Core.getCurrentCareContext().getEpisodeOfCare()); //WDEV-15293
			patDiag.setSourceofInformation(SourceofInformation.CORRESPONDENCE);
			patDiag.setDiagnosisDescription(((DiagLiteVo) value).getDiagnosisNameIsNotNull() ? ((DiagLiteVo) value).getDiagnosisName() : "");
			
			row.setValue(patDiag);
		}
		
	}
	@Override
	protected void onGrdMedicationSelectionChanged() throws PresentationLogicException 
	{
		updateMedicationContextMenu();
	}	
}
