// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.theatrereadmissiondialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbHospitalComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocShortMappingsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocShortMappingsVo getValue()
		{
			return (ims.core.vo.LocShortMappingsVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocShortMappingsVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocShortMappingsVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocShortMappingsVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocShortMappingsVo getValue()
		{
			return (ims.core.vo.LocShortMappingsVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocShortMappingsVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbSpecialtyComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.Specialty value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.Specialty value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.Specialty getValue()
		{
			return (ims.core.vo.lookups.Specialty)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.Specialty value)
		{
			super.control.setValue(value);
		}
	}
	public static class qmbConsultantComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.MedicLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.MedicLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.MedicLiteVo getValue()
		{
			return (ims.core.vo.MedicLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.MedicLiteVo value)
		{
			super.control.setValue(value);
		}
		public void setEditedText(String text)
		{
			super.control.setEditedText(text);
		}
		public String getEditedText()
		{
			return super.control.getEditedText();
		}
	}

	public static class GroupRelatedRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 240, 120, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Unrelated", startTabIndex.intValue() + 6);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 136, 120, 72, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Related", startTabIndex.intValue() + 7);
		}
		public void setText(GroupRelatedEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupRelatedEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupRelatedEnumeration.None;
				case 0: return GroupRelatedEnumeration.rdoUnrelated;
				case 1: return GroupRelatedEnumeration.rdoRelated;
			}
			return null;
		}
		public void setValue(GroupRelatedEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupRelatedEnumeration.None.id);
		}
		public boolean isEnabled(GroupRelatedEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupRelatedEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupRelatedEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupRelatedEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupRelatedEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupRelatedEnumeration None = new GroupRelatedEnumeration(-1);
		public static GroupRelatedEnumeration rdoUnrelated = new GroupRelatedEnumeration(0);
		public static GroupRelatedEnumeration rdoRelated = new GroupRelatedEnumeration(1);
		private GroupRelatedEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupRelatedEnumeration)o).id;
		}
		private int id;
	}

	public static class Group1RadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 240, 88, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Re-Admission from Transfer ", startTabIndex.intValue() + 4);
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 136, 88, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Re-Admission", startTabIndex.intValue() + 3);
		}
		public void setText(Group1Enumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public Group1Enumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return Group1Enumeration.None;
				case 0: return Group1Enumeration.rdoFromTrans;
				case 1: return Group1Enumeration.rdoReAdm;
			}
			return null;
		}
		public void setValue(Group1Enumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(Group1Enumeration.None.id);
		}
		public boolean isEnabled(Group1Enumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(Group1Enumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(Group1Enumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(Group1Enumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class Group1Enumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static Group1Enumeration None = new Group1Enumeration(-1);
		public static Group1Enumeration rdoFromTrans = new Group1Enumeration(0);
		public static Group1Enumeration rdoReAdm = new Group1Enumeration(1);
		private Group1Enumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((Group1Enumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(768, 264);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 736, 208, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,"Re-Admission Details", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 440, 88, 55, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Hospital:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 24, 128, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Is it:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 24, 112, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Re-Admission", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 24, 88, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 440, 160, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 440, 176, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 24, 168, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date/Time:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 24, 152, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Admission", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 24, 192, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bed No.:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 440, 144, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Estimated ", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 440, 120, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 440, 56, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 24, 56, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 584, 232, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Admit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 664, 232, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 136, 192, 100, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(10), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 416, 88, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(1), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 328, 120, 0, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(1), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 504, 152, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 136, 152, 184, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 504, 88, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbHospitalTemp);
		cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
		super.addComboBox(cmbHospital);
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 504, 120, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbWardTemp);
		cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
		super.addComboBox(cmbWard);
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 504, 56, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbSpecialtyTemp);
		cmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);
		super.addComboBox(cmbSpecialty);

		// Query ComboBox Controls
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 136, 56, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_qmbConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
		addControl(m_qmbConsultantTemp);
		qmbConsultantComboBox qmbConsultant = (qmbConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbConsultantComboBox.class, m_qmbConsultantTemp);
		super.addComboBox(qmbConsultant);

		// RadioButton Controls
		RadioButton tmpGroupRelated = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGroupRelated);
		GroupRelatedRadioButton GroupRelated = (GroupRelatedRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupRelatedRadioButton.class, tmpGroupRelated);
		GroupRelated.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupRelated);
		RadioButton tmpGroup1 = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE});
		super.addControl(tmpGroup1);
		Group1RadioButton Group1 = (Group1RadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(Group1RadioButton.class, tmpGroup1);
		Group1.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(Group1);
	}


	public Button btnSave()
	{
		return (Button)super.getControl(14);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(15);
	}
	public TextBox txtBedNo()
	{
		return (TextBox)super.getControl(16);
	}
	public TextBox txt2()
	{
		return (TextBox)super.getControl(17);
	}
	public TextBox txt1()
	{
		return (TextBox)super.getControl(18);
	}
	public DateControl dteDisch()
	{
		return (DateControl)super.getControl(19);
	}
	public DateTimeControl dtimAdm()
	{
		return (DateTimeControl)super.getControl(20);
	}
	public cmbHospitalComboBox cmbHospital()
	{
		return (cmbHospitalComboBox)super.getComboBox(0);
	}
	public cmbWardComboBox cmbWard()
	{
		return (cmbWardComboBox)super.getComboBox(1);
	}
	public cmbSpecialtyComboBox cmbSpecialty()
	{
		return (cmbSpecialtyComboBox)super.getComboBox(2);
	}
	public qmbConsultantComboBox qmbConsultant()
	{
		return (qmbConsultantComboBox)super.getComboBox(3);
	}
	public GroupRelatedRadioButton GroupRelated()
	{
		return (GroupRelatedRadioButton)super.getRadioButton(0);
	}
	public Group1RadioButton Group1()
	{
		return (Group1RadioButton)super.getRadioButton(1);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PasEventLocation = new ims.framework.ContextVariable("PasEventLocation", prefix + "_lv_RefMan.TheatreReAdmissionDialog.__internal_x_context__PasEventLocation_" + componentIdentifier + "");
		}
		
		public boolean getPasEventLocationIsNotNull()
		{
			return !cxl_PasEventLocation.getValueIsNull(context);
		}
		public ims.core.vo.LocMostVo getPasEventLocation()
		{
			return (ims.core.vo.LocMostVo)cxl_PasEventLocation.getValue(context);
		}
		public void setPasEventLocation(ims.core.vo.LocMostVo value)
		{
			cxl_PasEventLocation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PasEventLocation = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[121];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ID", "ID_CatsReferral");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CARECONTEXT", "CareContext");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ADDITIONALINVAPPTSSTATUS", "AdditionalInvApptsStatus");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASINVESTIGATIONS", "HasInvestigations");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASAPPOINTMENTS", "HasAppointments");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASDOCUMENTS", "HasDocuments");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASREFERRALLETTER", "HasReferralLetter");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISCAB", "IsCAB");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASREJECTEDINV", "HasRejectedInv");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ONWARDREFERRALSTATUS", "OnwardReferralStatus");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PROVIDERCANCELLATION", "ProviderCancellation");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASCONSULTATIONDETAILS", "HasConsultationDetails");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-DISCHARGEDATE", "DischargeDate");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISFINALREPORTREQUIRED", "IsFinalReportRequired");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-TRIAGEDATETIME", "TriageDateTime");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-LASTAPPTARRIVEDDATE", "LastApptArrivedDate");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISACCEPTEDONCAB", "IsAcceptedOnCAB");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISREFERRALREJECTEDONCAB", "IsReferralRejectedOnCAB");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASPATIENTREJECTIONLETTERSENT", "WasPatientRejectionLetterSent");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASPATIENTPROVIDERCANCELLATIONLETTERSENT", "WasPatientProviderCancellationLetterSent");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-REQUIRESDISCHARGEREP", "RequiresDischargeRep");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASDNAAPPTSFORREVIEW", "HasDNAApptsForReview");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-HASCANCELLEDAPPTSFORREVIEW", "HasCancelledApptsForReview");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISSECONDARYREPORTREQUIRED", "IsSecondaryReportRequired");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-WASFURTHERMANAGEMENTDETAILSREVIEWED", "WasFurtherManagementDetailsReviewed");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ONWARDREFERRALREASON", "OnwardReferralReason");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-DISCHARGETOGPDETAILSREVIEWSTATUS", "DischargeToGPDetailsReviewStatus");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISSUITABLEFORSURGERY", "IsSuitableForSurgery");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISFITFORSURGERY", "IsFitForSurgery");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISAWAITINGCLINICALINFO", "IsAwaitingClinicalInfo");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISACTIVEMONITORAPPTREQUIRED", "IsActiveMonitorApptRequired");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CATSREPORTSENTDATE", "CATSReportSentDate");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ENDOFCAREDATE", "EndOfCareDate");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PROCEDUREFORPOSTOPREVIEW", "ProcedureForPostOpReview");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-REFERRALCATEGORY", "ReferralCategory");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-ISONWARDREFERRALTRIAGE", "IsOnwardReferralTriage");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-URGENCY", "Urgency");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-PATHWAYID", "PathwayID");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-RTTCLOCKIMPACT", "RTTClockImpact");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralWizard", "BO-1004100035-CONSUPGRADEDATE", "ConsUpgradeDate");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_RefMan.TheatreBookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreReAdmissionDialog.__internal_x_context__PasEventLocation_" + componentIdentifier, "BO-1007100007-ID", "ID_Location");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreReAdmissionDialog.__internal_x_context__PasEventLocation_" + componentIdentifier, "BO-1007100007-NAME", "Name");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreReAdmissionDialog.__internal_x_context__PasEventLocation_" + componentIdentifier, "BO-1007100007-ISACTIVE", "IsActive");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreReAdmissionDialog.__internal_x_context__PasEventLocation_" + componentIdentifier, "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreReAdmissionDialog.__internal_x_context__PasEventLocation_" + componentIdentifier, "BO-1007100007-TYPE", "Type");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreReAdmissionDialog.__internal_x_context__PasEventLocation_" + componentIdentifier, "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreReAdmissionDialog.__internal_x_context__PasEventLocation_" + componentIdentifier, "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreReAdmissionDialog.__internal_x_context__PasEventLocation_" + componentIdentifier, "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.TheatreReAdmissionDialog.__internal_x_context__PasEventLocation_" + componentIdentifier, "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
