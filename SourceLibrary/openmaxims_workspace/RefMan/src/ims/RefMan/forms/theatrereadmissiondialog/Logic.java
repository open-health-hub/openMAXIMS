// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.70 build 3478.14513)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.theatrereadmissiondialog;

import ims.RefMan.forms.theatrereadmissiondialog.GenForm.Group1Enumeration;
import ims.RefMan.forms.theatrereadmissiondialog.GenForm.GroupRelatedEnumeration;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.InpatientEpisodeVo;
import ims.core.vo.LocMostVo;
import ims.core.vo.LocShortMappingsVo;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.MedicLiteVo;
import ims.core.vo.MedicLiteVoCollection;
import ims.core.vo.MedicWithMappingsLiteVo;
import ims.core.vo.PasEventVo;
import ims.core.vo.lookups.AdmissionType;
import ims.core.vo.lookups.HcpDisType;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PasEventType;
import ims.core.vo.lookups.ReadmissionType;
import ims.core.vo.lookups.Specialty;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
	}

	private void initialise() 
	{
		// WDEV-12293 - Get service for CatsReferral (but we need to pass the CareContext id as the CatsReferral is not available in context)
		// and default the speciality combo box to it
		Specialty specialty = domain.getReferralSpecialty(form.getGlobalContext().RefMan.getCatsReferral());
		form.cmbSpecialty().setValue(specialty);
		
		form.dtimAdm().setValue(new DateTime());
		form.getLocalContext().setPasEventLocation(null);
		
		populateHospitalCombo();
		populateWardCombo();
		
		HcpLiteVo hcpLiteVo = (HcpLiteVo) domain.getHcpLiteUser();
		if (hcpLiteVo != null
			&& hcpLiteVo.getHcpTypeIsNotNull() 
			&& hcpLiteVo.getHcpType().equals(HcpDisType.MEDICAL))
		{
			MedicLiteVo vo = new MedicLiteVo(hcpLiteVo.getID_Hcp(), hcpLiteVo.getVersion_Hcp());
			form.qmbConsultant().newRow( vo, hcpLiteVo.getName().toString());
			form.qmbConsultant().setValue(vo);
		}
	}
	
	private void populateHospitalCombo()
	{
		form.cmbHospital().clear();
		
		LocShortMappingsVoCollection activeHosps = domain.listActiveHospitals();
		if (activeHosps != null)
		{
			for (int i = 0; i < activeHosps.size(); i++)
			{
				LocShortMappingsVo activeHosp = activeHosps.get(i);
				form.cmbHospital().newRow(activeHosp, activeHosp.getName());
			}
		}
		
		if (form.getGlobalContext().Core.getCurrentCareContextIsNotNull() 
				&& form.getGlobalContext().Core.getCurrentCareContext().getPasEventIsNotNull())
		{
			LocMostVo location = domain.getLocation(form.getGlobalContext().Core.getCurrentCareContext().getPasEvent().getLocation());
			
			form.getLocalContext().setPasEventLocation(location);
			
			if (location != null && LocationType.WARD.equals(location.getType()))
				location = location.getParentLocation();
			
			form.cmbHospital().setValue(location);
			if (form.cmbHospital().getValue() == null)
			{
				form.cmbHospital().newRow(location, location.getName());
				form.cmbHospital().setValue(location);
			}
		}
	}

	private String[] validateUILogic()
	{
		ArrayList<String> errs = new ArrayList<String>();

		if (form.qmbConsultant().getValue() == null)
			errs.add("Admitting Consultant must be specified.");
		if (form.dtimAdm().getValue() == null)
			errs.add("Admission Date/Time must be specified.");
		if (form.cmbSpecialty().getValue() == null)
			errs.add("Specialty must be specified.");
		if (form.cmbHospital().getValue() == null)
			errs.add("Hospital must be specified.");
		if (form.cmbWard().getValue() == null)
			errs.add("Ward must be specified.");
		if (form.Group1().getValue().equals(Group1Enumeration.None))
			errs.add("Admission Type is mandatory.");
		//Added for WDEV-8147 
		if (form.GroupRelated().getValue() == null || form.GroupRelated().getValue().equals(GroupRelatedEnumeration.None)){
			errs.add("You must specify if the Re-Admission is related or not");
		}
		
		return errs.toArray(new String[errs.size()]);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{	
		if ( ! domain.isNotACurrentInpatient(form.getGlobalContext().Core.getPatientShort()) )
		{
			engine.showMessage("The Patient is already Admitted.");
			return;
		}
		
		
		PasEventVo voPasEvent = new PasEventVo();
		if (form.qmbConsultant().getValue() != null)
		{
			MedicWithMappingsLiteVo medLite = new MedicWithMappingsLiteVo(form.qmbConsultant().getValue().getID_Hcp(), form.qmbConsultant().getValue().getVersion_Hcp());
			voPasEvent.setConsultant(medLite);
		}
		
		voPasEvent.setEventDateTime(form.dtimAdm().getValue());
		voPasEvent.setEventType(PasEventType.INPATIENT);
		voPasEvent.setIsVip(false);
		voPasEvent.setLocation(form.cmbWard().getValue());
		voPasEvent.setPatient(form.getGlobalContext().Core.getPatientShort());
		voPasEvent.setSpecialty(form.cmbSpecialty().getValue());
		voPasEvent.setPasEventId(new DateTime().toString());
		
		InpatientEpisodeVo voInpatientEpis = new InpatientEpisodeVo();
		voInpatientEpis.setIsOnLeave(false);
		voInpatientEpis.setAdmissionDateTime(form.dtimAdm().getValue());
		voInpatientEpis.setEstDischargeDate(form.dteDisch().getValue());
		voInpatientEpis.setPasEvent(voPasEvent);
		voInpatientEpis.setBedNo(form.txtBedNo().getValue());
		if (form.Group1().getValue().equals(Group1Enumeration.rdoReAdm))
			voInpatientEpis.setAdmissionType(AdmissionType.RE_ADMISSION);
		else
			voInpatientEpis.setAdmissionType(AdmissionType.RE_ADMISSION_FROM_TRANSFER);
		//ADDED FOR WDEV-8147 
		if (form.GroupRelated().getValue()!=null){
			if (form.GroupRelated().getValue().equals(GroupRelatedEnumeration.rdoRelated)){
				voInpatientEpis.setReadmissionType(ReadmissionType.RELATED);
			}else{
				if (form.GroupRelated().getValue().equals(GroupRelatedEnumeration.rdoUnrelated)){
					voInpatientEpis.setReadmissionType(ReadmissionType.UNRELATED);
				}
			}
		}
		
		String[] arrErrors = voInpatientEpis.validate(validateUILogic());
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		
		arrErrors = form.getGlobalContext().Core.getPatientShort().validate(arrErrors);
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		try
		{
			CareContextShortVo voCC = domain.admitPatient(form.getGlobalContext().Core.getPatientShort(), voInpatientEpis, form.getGlobalContext().Core.getCurrentCareContext(), form.getGlobalContext().RefMan.getCatsReferral());
			if (voCC != null)
				form.getGlobalContext().Core.setCurrentCareContext(voCC);
		}
		catch (DomainInterfaceException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return;
		}
		engine.close(DialogResult.OK);
	}
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	
	private void populateWardCombo()
	{
		form.cmbWard().clear();
		
		LocShortMappingsVoCollection activeWards = null;
		activeWards = domain.listActiveWardsForHospital(form.cmbHospital().getValue());
		if (activeWards != null)
		{
			for (int i = 0; i < activeWards.size(); i++)
			{
				LocShortMappingsVo activeWard = activeWards.get(i);
				form.cmbWard().newRow(activeWard, activeWard.getName());
			}
		}
		
		if (form.getLocalContext().getPasEventLocationIsNotNull())
		{
			LocMostVo location = form.getLocalContext().getPasEventLocation();
			
			if (location != null && LocationType.WARD.equals(location.getType()))
				form.cmbWard().setValue(location);
		}
	}

	@Override
	protected void onQmbConsultantTextSubmited(String value) 
	{
		form.qmbConsultant().clear();

		if (value != null)
		{
			MedicLiteVo med = null;
			MedicLiteVoCollection voMedicColl = domain.listActiveMedics(value);
			if (voMedicColl != null)
			{
				for (int i = 0; i < voMedicColl.size(); i++)
				{
					med = voMedicColl.get(i);
					form.qmbConsultant().newRow(med, med.toString());			
				}
			}
			if (voMedicColl != null &&
					voMedicColl.size() == 1)
							form.qmbConsultant().setValue(voMedicColl.get(0));
			else if (voMedicColl != null &&
						voMedicColl.size() > 1)
							form.qmbConsultant().showOpened();
			
	
			Integer id = engine.getLoggedInUser().getHcpId();
			if (med != null && id != null && id.equals(med.getID_Hcp()))
				form.qmbConsultant().setValue(med);
		}
	}

	@Override
	protected void onCmbHospitalValueChanged() throws PresentationLogicException 
	{
		form.cmbWard().clear();

		if (form.cmbHospital().getValue() != null)
		{
			form.getLocalContext().setPasEventLocation(null);
			populateWardCombo();
		}
	}
}
