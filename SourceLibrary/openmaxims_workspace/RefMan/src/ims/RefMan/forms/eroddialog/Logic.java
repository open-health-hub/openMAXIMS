// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4910.25978)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.eroddialog;

import ims.RefMan.forms.eroddialog.GenForm.ContextMenus;
import ims.RefMan.forms.eroddialog.GenForm.grdERODsRow;
import ims.RefMan.vo.CatsReferralERODVo;
import ims.RefMan.vo.ReferralERODVo;
import ims.RefMan.vo.ReferralERODVoCollection;
import ims.RefMan.vo.lookups.ERODType;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int REASONABLE_DAYS_LIMIT = 21;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise(args);
		open();
	}
	
	private void open()
	{
		form.getLocalContext().setCatsReferralEROD(domain.getCatsReferral(form.getGlobalContext().RefMan.getCatsReferral()));
				
		populateERODGrid(ERODType.OUTPATIENT.equals(form.getLocalContext().getERODType()) ? form.getLocalContext().getCatsReferralEROD().getOutpatientEROD() : ERODType.ELECTIVE.equals(form.getLocalContext().getERODType()) ? form.getLocalContext().getCatsReferralEROD().getElectiveEROD() : null);

		//WDEV-18411
		if (form.grdERODs().getValue() != null && engine.getPreviosFormName().equals(form.getForms().RefMan.BookAppointmentDialog))
		{
			form.getGlobalContext().RefMan.setReferralEROD(form.getLocalContext().getSelectedEROD());
		}
				
		if(form.getLocalContext().getFormModeAtOpen() != null)
		{
			form.setMode(form.getLocalContext().getFormModeAtOpen());
			form.getLocalContext().setFormModeAtOpen(null);
		}
		else
		{
			form.setMode(FormMode.VIEW);
		}
	}

	private void populateERODGrid(ReferralERODVoCollection referralERODVoCollection)
	{
		form.grdERODs().getRows().clear();
		
		if(referralERODVoCollection == null)
			return;
		
		referralERODVoCollection.sort(SortOrder.DESCENDING);
		
		for(ReferralERODVo erod : referralERODVoCollection)
		{
			if(erod == null)
				continue;

			grdERODsRow row = form.grdERODs().getRows().newRow();
			row.setColERODDate1(erod.getERODDate1().toString());
			row.setColERODDate2(erod.getERODDate2() != null ? erod.getERODDate2().toString() : null);
			//WDEV-18344
			row.setColAvailableFromDate(erod.getPatAvailFromDateIsNotNull() ? erod.getPatAvailFromDate().toString() : "");
			row.setColERODType(erod.getERODType().getText());

			row.setValue(erod);
		}
		
		form.grdERODs().setValue(form.getLocalContext().getSelectedEROD());
		form.getLocalContext().setSelectedEROD(form.grdERODs().getValue());
		
		if(form.getLocalContext().getSelectedEROD() == null)
		{
			if(form.grdERODs().getRows().size() > 0 && form.grdERODs().getRows().get(0) != null)
			{
				form.grdERODs().setValue(form.grdERODs().getRows().get(0).getValue());
				form.getLocalContext().setSelectedEROD(form.grdERODs().getValue());
			}
		}
		
		populateERODDetails(form.grdERODs().getValue());
	}

	private void clear()
	{
		form.ctnDetails().dteERODDate1().setValue(null);
		form.ctnDetails().dteERODDate2().setValue(null);
		form.ctnDetails().dtePatAvailFromDate().setValue(null);
		form.ctnDetails().chkReasonableOffer().setValue(null);
		form.ctnDetails().cmbERODType().setValue(form.getLocalContext().getERODType());
		form.ctnDetails().dteAppointmentDate().setValue(null);
		form.ctnDetails().txtClinicName().setValue(null);
	}

	private void initialise(Object[] args)
	{
		if(args != null && args.length > 0)
		{
			if(args[0] instanceof ERODType)
			{
				form.getLocalContext().setERODType((ERODType) args[0]);
			}
			
			if(args.length > 1 && args[1] instanceof FormMode)
			{
				form.getLocalContext().setFormModeAtOpen((FormMode) args[1]);
			}
		}
	}
	
	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
		{
			open();
		}
	}

	private boolean save()
	{
		ReferralERODVo selectedErod = populateDataFromScreen(form.getLocalContext().getSelectedEROD());
		CatsReferralERODVo catsReferral = populateCatsReferral(form.getLocalContext().getCatsReferralEROD(), selectedErod);
		
		String[] errors = catsReferral.validate(selectedErod.validate(validateUIRules()));
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		if(form.getLocalContext().getReasonableDateMessageBoxId() == null)
		{
			String warnings = checkReasonableDate();
			if(warnings != null && warnings.length() > 0)
			{
				form.getLocalContext().setReasonableDateMessageBoxId(engine.showMessage(warnings, "", MessageButtons.YESNO, MessageIcon.QUESTION));
				return false;
			}
		}
		
		try
		{
			form.getLocalContext().setCatsReferralEROD(domain.saveEROD(form.getLocalContext().getERODType(), catsReferral, selectedErod));
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}

	private String checkReasonableDate()
	{
		String warnings = "";
		int numberOfDates = 0;
		
		if(form.ctnDetails().dteERODDate1().getValue() != null && form.ctnDetails().dteERODDate1().getValue().isLessThan(new Date().addDay(REASONABLE_DAYS_LIMIT)))
		{
			warnings += "'Earliest Date Offered' is less than " + REASONABLE_DAYS_LIMIT + " days";
			numberOfDates++;
		}
		
		if(form.ctnDetails().dteERODDate2().getValue() != null && form.ctnDetails().dteERODDate2().getValue().isLessThan(new Date().addDay(REASONABLE_DAYS_LIMIT)))
		{
			warnings += (warnings.length() > 0 ? "\n" : "") + "'Second Date Offered' is less than " + REASONABLE_DAYS_LIMIT + " days";
			numberOfDates++;
		}
		
		if(warnings.length() > 0)
		{
			warnings += "\nDid the patient confirm " + (numberOfDates == 2 ? "these dates" : "this date") + "?";
		}
		
		return warnings.length() > 0 ? warnings : null;
	}

	private String[] validateUIRules()
	{
		List<String> uiErrors = new ArrayList<String>();
		
		if(form.ctnDetails().dteERODDate1().getValue() != null && form.ctnDetails().dteERODDate2().getValue() != null && form.ctnDetails().dteERODDate1().getValue().isGreaterOrEqualThan(form.ctnDetails().dteERODDate2().getValue()))
		{
			uiErrors.add("'Second Date Offered' must be greater than 'Earliest Date Offered '");
		}
		
		if(form.getLocalContext().getSelectedEROD() == null && form.ctnDetails().dteERODDate1().getValue() != null && new Date().isGreaterThan(form.ctnDetails().dteERODDate1().getValue()))
		{
			uiErrors.add("'Earliest Date Offered ' must be greater than or equal to Today");
		}
		
		String[] uiResults = new String[uiErrors.size()];
		uiErrors.toArray(uiResults);
		
		return uiResults;
	}

	private CatsReferralERODVo populateCatsReferral(CatsReferralERODVo catsReferral, ReferralERODVo selectedErod)
	{
		if(catsReferral == null)
			return null;
		
		catsReferral = (CatsReferralERODVo) catsReferral.clone();
		
		if(ERODType.OUTPATIENT.equals(form.getLocalContext().getERODType()))
		{
			if(catsReferral.getOutpatientEROD() == null)
				catsReferral.setOutpatientEROD(new ReferralERODVoCollection());
			
			if(selectedErod.getID_ReferralEROD() == null)
			{
				catsReferral.getOutpatientEROD().add(selectedErod);
			}
			else
			{
				for(int i=0; i<catsReferral.getOutpatientEROD().size(); i++)
				{
					if(catsReferral.getOutpatientEROD().get(i).equals(selectedErod))
					{
						catsReferral.getOutpatientEROD().set(i, selectedErod);
					}
				}
			}
		}
		
		return catsReferral;
	}

	private ReferralERODVo populateDataFromScreen(ReferralERODVo referralERODVo)
	{
		if(referralERODVo == null)
			referralERODVo = new ReferralERODVo();
		
		referralERODVo.setERODDate1(form.ctnDetails().dteERODDate1().getValue());
		referralERODVo.setERODDate2(form.ctnDetails().dteERODDate2().getValue());
		referralERODVo.setPatAvailFromDate(form.ctnDetails().dtePatAvailFromDate().getValue());
		referralERODVo.setReasonableOffer(form.ctnDetails().chkReasonableOffer().getValue());
		referralERODVo.setERODType(form.ctnDetails().cmbERODType().getValue());
		referralERODVo.setIsActive(true);
		referralERODVo.setPathWayClock(form.getLocalContext().getCatsReferralEROD().getJourney() != null ? form.getLocalContext().getCatsReferralEROD().getJourney().getCurrentClock() : null);
		
		if(referralERODVo.getID_ReferralEROD() == null)
		{
			referralERODVo.setSequence(getSequence());
		}
		
		return referralERODVo;
	}

	private Integer getSequence()
	{
		int sequence = 1;
		
		if(form.getLocalContext().getCatsReferralEROD() == null)
			return sequence;
		
		ReferralERODVoCollection collection = ERODType.OUTPATIENT.equals(form.getLocalContext().getERODType()) ? form.getLocalContext().getCatsReferralEROD().getOutpatientEROD() : (ERODType.ELECTIVE.equals(form.getLocalContext().getERODType()) ? form.getLocalContext().getCatsReferralEROD().getElectiveEROD() : null);
		
		if(collection == null || collection.size() == 0)
			return sequence;
		
		for(ReferralERODVo erod : collection)
		{
			if(erod == null)
				continue;
			
			if(erod.getSequence() != null && sequence < erod.getSequence())
				sequence = erod.getSequence();
		}
		
		return ++sequence;
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.ctnDetails().setCollapsed(!(form.grdERODs().getValue() != null || FormMode.EDIT.equals(form.getMode())));
		form.ctnDetails().dteERODDate1().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.ctnDetails().dteERODDate1().getValue() == null);
		form.ctnDetails().lblAppointmentDate().setVisible(form.ctnDetails().dteAppointmentDate().getValue() != null);
		form.ctnDetails().dteAppointmentDate().setVisible(form.ctnDetails().dteAppointmentDate().getValue() != null);
		form.ctnDetails().dteAppointmentDate().setEnabled(false);
		form.ctnDetails().lblClinicName().setVisible(form.ctnDetails().txtClinicName().getValue() != null);
		form.ctnDetails().txtClinicName().setVisible(form.ctnDetails().txtClinicName().getValue() != null);
		form.ctnDetails().txtClinicName().setEnabled(false);
		form.getContextMenus().RefMan.getReferralERODMenuRIEItem().setVisible(FormMode.VIEW.equals(form.getMode()) && form.grdERODs().getValue() != null);
		
		if(FormMode.VIEW.equals(form.getMode()))
		{
			//WDEV-18362
			boolean newButtonEnabledForOutpatient = engine.getPreviosFormName().equals(form.getForms().RefMan.BookAppointmentDialog) && ERODType.OUTPATIENT.equals(form.getLocalContext().getERODType()) && !hasOutpatientERODActive() && !Boolean.TRUE.equals(form.getLocalContext().getCatsReferralEROD().getIsCAB());
			boolean newButtonEnabledForElective = ERODType.ELECTIVE.equals(form.getLocalContext().getERODType()) && form.grdERODs().getRows().size() == 0;	
			boolean newButtonVisible = (ERODType.OUTPATIENT.equals(form.getLocalContext().getERODType()) && form.getLocalContext().getCatsReferralEROD() != null && (form.getLocalContext().getCatsReferralEROD().getIsCAB() == null || Boolean.FALSE.equals(form.getLocalContext().getCatsReferralEROD().getIsCAB()))) || ERODType.ELECTIVE.equals(form.getLocalContext().getERODType());
			
			form.btnNew().setVisible(newButtonVisible);
			form.btnNew().setEnabled(newButtonEnabledForOutpatient || newButtonEnabledForElective);
			form.btnEdit().setVisible(form.grdERODs().getValue() != null);
			//WDEV-18372
			form.btnEdit().setEnabled(form.grdERODs().getValue() != null && form.getLocalContext().getCatsReferralEROD() != null && form.getLocalContext().getCatsReferralEROD().getCurrentStatus() != null && !ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.equals(form.getLocalContext().getCatsReferralEROD().getCurrentStatus().getReferralStatus())); 
		}
	}

	private boolean hasOutpatientERODActive()
	{
		if(form.getLocalContext().getCatsReferralEROD() == null || form.getLocalContext().getCatsReferralEROD().getOutpatientEROD() == null)
			return false;
		
		for(ReferralERODVo erod : form.getLocalContext().getCatsReferralEROD().getOutpatientEROD())
		{
			if(erod == null)
				continue;
			
			if(Boolean.TRUE.equals(erod.getIsActive()))
				return true;
		}
		
		return false;
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException
	{
		clear();
		form.getLocalContext().setSelectedEROD(null);
		//WDEV-18411
		form.getGlobalContext().RefMan.setReferralEROD(null);
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onGrdERODsSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setSelectedEROD(domain.getEROD(form.grdERODs().getValue()));
		populateERODDetails(form.getLocalContext().getSelectedEROD());
		updateControlsState();
	}

	private void populateERODDetails(ReferralERODVo erod)
	{
		clear();
		
		if(erod == null)
			return;
		
		form.ctnDetails().dteERODDate1().setValue(erod.getERODDate1());
		form.ctnDetails().dteERODDate2().setValue(erod.getERODDate2());
		form.ctnDetails().dtePatAvailFromDate().setValue(erod.getPatAvailFromDate());
		form.ctnDetails().chkReasonableOffer().setValue(erod.getReasonableOffer());
		form.ctnDetails().cmbERODType().setValue(erod.getERODType());
		
		if(erod.getAppointment() != null)
		{
			form.ctnDetails().dteAppointmentDate().setValue(erod.getAppointment().getAppointmentDate());
			
			if(erod.getAppointment().getSession() != null)
			{
				form.ctnDetails().txtClinicName().setValue(erod.getAppointment().getSession().getName());
			}
		}
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onBtnCloseClick() throws PresentationLogicException
	{
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(form.getLocalContext().getReasonableDateMessageBoxId() != null && form.getLocalContext().getReasonableDateMessageBoxId() == messageBoxId)
		{
			if(DialogResult.YES.equals(result))
			{
				form.ctnDetails().chkReasonableOffer().setValue(true);
			}
			else if(DialogResult.NO.equals(result))
			{
				form.ctnDetails().chkReasonableOffer().setValue(null);
			}
			if(save())
				open();
						
			form.getLocalContext().setReasonableDateMessageBoxId(null);
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case ContextMenus.RefManNamespace.ReferralERODMenu.RIE:
				markRecordAsRie();
			break;
		}
	}

	private void markRecordAsRie()
	{
		if(form.grdERODs().getValue() != null)
		{
			form.getLocalContext().setRIERecord(form.grdERODs().getValue());
			engine.open(form.getForms().Core.RieConfirmationDialog);
		}
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			doRIE();
		}
		
		open();
	}

	private void doRIE()
	{
		boolean isStale = false;
		
		if(domain.isStale(form.getLocalContext().getRIERecord()))
		{
			isStale = true;
		}
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		try
		{
			domain.markAsRie(form.getLocalContext().getRIERecord(), form.getForms().RefMan.ERODDialog, form.getGlobalContext().Core.getPatientShort() != null ? form.getGlobalContext().Core.getPatientShort().getID_Patient() : null, null,
							form.getGlobalContext().Core.getCurrentCareContextIsNotNull()?form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext():null,
							form.getGlobalContext().Core.getRieMessage());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}
}
