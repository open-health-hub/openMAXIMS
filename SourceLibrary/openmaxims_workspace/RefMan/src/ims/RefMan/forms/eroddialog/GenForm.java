// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.eroddialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailsContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class cmbERODTypeComboBox extends ComboBoxBridge
		{
			private static final long serialVersionUID = 1L;
			
			public void newRow(ims.RefMan.vo.lookups.ERODType value, String text)
			{
				super.control.newRow(value, text);
			}
			public void newRow(ims.RefMan.vo.lookups.ERODType value, String text, ims.framework.utils.Image image)
			{
				super.control.newRow(value, text, image);
			}
			public void newRow(ims.RefMan.vo.lookups.ERODType value, String text, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, textColor);
			}
			public void newRow(ims.RefMan.vo.lookups.ERODType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
			{
				super.control.newRow(value, text, image, textColor);
			}
			public boolean removeRow(ims.RefMan.vo.lookups.ERODType value)
			{
				return super.control.removeRow(value);
			}
			public ims.RefMan.vo.lookups.ERODType getValue()
			{
				return (ims.RefMan.vo.lookups.ERODType)super.control.getValue();
			}
			public void setValue(ims.RefMan.vo.lookups.ERODType value)
			{
				super.control.setValue(value);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Label Controls
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 50, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "from Date:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 127, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Earliest Date Offered:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 328, 10, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Second Date Offered:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Available", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 328, 42, 107, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Reasonable Offer:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 74, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD Type:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 328, 106, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic Name:", new Integer(1), null, new Integer(0)}));
			RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 106, 112, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointment Date:", new Integer(1), null, new Integer(0)}));
	
			// TextBox Controls
			RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 456, 104, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
	
			// Date Controls
			RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 136, 8, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 456, 8, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
			RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 136, 40, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
			RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 136, 104, 168, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
	
			// ComboBox Controls
			RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 136, 72, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			ComboBox m_cmbERODTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
			addControl(m_cmbERODTypeTemp);
			cmbERODTypeComboBox cmbERODType = (cmbERODTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbERODTypeComboBox.class, m_cmbERODTypeTemp);
			super.addComboBox(cmbERODType);
	
			// CheckBox Controls
			RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 456, 42, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public Label lblClinicName()
		{
			return (Label)super.getControl(6);
		}
		public Label lblAppointmentDate()
		{
			return (Label)super.getControl(7);
		}
		public TextBox txtClinicName()
		{
			return (TextBox)super.getControl(8);
		}
		public DateControl dteERODDate1()
		{
			return (DateControl)super.getControl(9);
		}
		public DateControl dteERODDate2()
		{
			return (DateControl)super.getControl(10);
		}
		public DateControl dtePatAvailFromDate()
		{
			return (DateControl)super.getControl(11);
		}
		public DateControl dteAppointmentDate()
		{
			return (DateControl)super.getControl(12);
		}
		public cmbERODTypeComboBox cmbERODType()
		{
			return (cmbERODTypeComboBox)super.getComboBox(0);
		}
		public CheckBox chkReasonableOffer()
		{
			return (CheckBox)super.getControl(14);
		}
	}
	public static class grdERODsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdERODsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColERODDate1ReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColERODDate1ReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColERODDate1Opened()
		{
			super.row.showOpened(0);
		}
		public String getColERODDate1()
		{
			return (String)super.row.get(0);
		}
		public void setColERODDate1(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColERODDate1Tooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColERODDate2ReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColERODDate2ReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColERODDate2Opened()
		{
			super.row.showOpened(1);
		}
		public String getColERODDate2()
		{
			return (String)super.row.get(1);
		}
		public void setColERODDate2(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColERODDate2Tooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColAvailableFromDateReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColAvailableFromDateReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColAvailableFromDateOpened()
		{
			super.row.showOpened(2);
		}
		public String getColAvailableFromDate()
		{
			return (String)super.row.get(2);
		}
		public void setColAvailableFromDate(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColAvailableFromDateTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColERODTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColERODTypeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColERODTypeOpened()
		{
			super.row.showOpened(3);
		}
		public String getColERODType()
		{
			return (String)super.row.get(3);
		}
		public void setColERODType(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColERODTypeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.RefMan.vo.ReferralERODVo getValue()
		{
			return (ims.RefMan.vo.ReferralERODVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.ReferralERODVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdERODsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdERODsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdERODsRow get(int index)
		{
			return new grdERODsRow(super.collection.get(index));
		}
		public grdERODsRow newRow()
		{
			return new grdERODsRow(super.collection.newRow());
		}
		public grdERODsRow newRow(boolean autoSelect)
		{
			return new grdERODsRow(super.collection.newRow(autoSelect));
		}
		public grdERODsRow newRowAt(int index)
		{
			return new grdERODsRow(super.collection.newRowAt(index));
		}
		public grdERODsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdERODsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdERODsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.ReferralERODVoCollection getValues()
		{
			ims.RefMan.vo.ReferralERODVoCollection listOfValues = new ims.RefMan.vo.ReferralERODVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.ReferralERODVo getValue()
		{
			return (ims.RefMan.vo.ReferralERODVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.ReferralERODVo value)
		{
			super.grid.setValue(value);
		}
		public grdERODsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdERODsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdERODsRowCollection getRows()
		{
			return new grdERODsRowCollection(super.grid.getRows());
		}
		public grdERODsRow getRowByValue(ims.RefMan.vo.ReferralERODVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdERODsRow(row);
		}
		public void setColERODDate1HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColERODDate1HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColERODDate2HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColERODDate2HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColAvailableFromDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColAvailableFromDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColERODTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColERODTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(656, 464);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuReferralERODMenu = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuReferralERODMenuRIEItem = factory.createMenuItem(startControlID.intValue() + 1, "RIE Referral EROD", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(5370001)))
			contextMenus.RefMan.contextMenuReferralERODMenu.add(contextMenus.RefMan.contextMenuReferralERODMenuRIEItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralERODMenu);


		// Container Clasess
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 264, 640, 160, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "", new Boolean(true)});
		addControl(m_ctnDetails);
		ctnDetailsContainer ctnDetails = (ctnDetailsContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailsContainer.class, m_ctnDetails, factory);
		ims.framework.utils.SizeInfo m_ctnDetailsDesignSize = new ims.framework.utils.SizeInfo(640, 160);
		ims.framework.utils.SizeInfo m_ctnDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper16.getWidth(), anchoringHelper16.getHeight());
		ctnDetails.setContext(form, appForm, m_ctnDetails, loader, contextMenus, startControlID, m_ctnDetailsDesignSize, m_ctnDetailsRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetails);

		// Button Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 573, 432, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 86, 432, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 432, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 573, 432, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 496, 432, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Grid Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 640, 248, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdERODsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralERODMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdERODsTemp);
		grdERODsGrid grdERODs = (grdERODsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdERODsGrid.class, m_grdERODsTemp);
		grdERODs.addStringColumn("Earliest Date Offered", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdERODs.addStringColumn("Second Date Offered", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdERODs.addStringColumn("Patient Available From Date", 0, 0, 225, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdERODs.addStringColumn("EROD Type", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdERODs);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ctnDetailsContainer ctnDetails()
	{
		return (ctnDetailsContainer)super.getContainer(0);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(1);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(2);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(3);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(4);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(5);
	}
	public grdERODsGrid grdERODs()
	{
		return (grdERODsGrid)super.getGrid(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Core = new CoreForms();
			RefMan = new RefManForms();
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ERODDialog = new LocalFormName(134216);
				BookAppointmentDialog = new LocalFormName(134134);
			}
			public final FormName ERODDialog;
			public final FormName BookAppointmentDialog;
		}

		public CoreForms Core;
		public RefManForms RefMan;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ERODType = new ims.framework.ContextVariable("ERODType", prefix + "_lv_RefMan.ERODDialog.__internal_x_context__ERODType_" + componentIdentifier + "");
			cxl_CatsReferralEROD = new ims.framework.ContextVariable("CatsReferralEROD", prefix + "_lv_RefMan.ERODDialog.__internal_x_context__CatsReferralEROD_" + componentIdentifier + "");
			cxl_SelectedEROD = new ims.framework.ContextVariable("SelectedEROD", prefix + "_lv_RefMan.ERODDialog.__internal_x_context__SelectedEROD_" + componentIdentifier + "");
			cxl_ReasonableDateMessageBoxId = new ims.framework.ContextVariable("ReasonableDateMessageBoxId", prefix + "_lv_RefMan.ERODDialog.__internal_x_context__ReasonableDateMessageBoxId_" + componentIdentifier + "");
			cxl_FormModeAtOpen = new ims.framework.ContextVariable("FormModeAtOpen", prefix + "_lv_RefMan.ERODDialog.__internal_x_context__FormModeAtOpen_" + componentIdentifier + "");
			cxl_RIERecord = new ims.framework.ContextVariable("RIERecord", prefix + "_lv_RefMan.ERODDialog.__internal_x_context__RIERecord_" + componentIdentifier + "");
		}
		
		public boolean getERODTypeIsNotNull()
		{
			return !cxl_ERODType.getValueIsNull(context);
		}
		public ims.RefMan.vo.lookups.ERODType getERODType()
		{
			return (ims.RefMan.vo.lookups.ERODType)cxl_ERODType.getValue(context);
		}
		public void setERODType(ims.RefMan.vo.lookups.ERODType value)
		{
			cxl_ERODType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ERODType = null;
		public boolean getCatsReferralERODIsNotNull()
		{
			return !cxl_CatsReferralEROD.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralERODVo getCatsReferralEROD()
		{
			return (ims.RefMan.vo.CatsReferralERODVo)cxl_CatsReferralEROD.getValue(context);
		}
		public void setCatsReferralEROD(ims.RefMan.vo.CatsReferralERODVo value)
		{
			cxl_CatsReferralEROD.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CatsReferralEROD = null;
		public boolean getSelectedERODIsNotNull()
		{
			return !cxl_SelectedEROD.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralERODVo getSelectedEROD()
		{
			return (ims.RefMan.vo.ReferralERODVo)cxl_SelectedEROD.getValue(context);
		}
		public void setSelectedEROD(ims.RefMan.vo.ReferralERODVo value)
		{
			cxl_SelectedEROD.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedEROD = null;
		public boolean getReasonableDateMessageBoxIdIsNotNull()
		{
			return !cxl_ReasonableDateMessageBoxId.getValueIsNull(context);
		}
		public Integer getReasonableDateMessageBoxId()
		{
			return (Integer)cxl_ReasonableDateMessageBoxId.getValue(context);
		}
		public void setReasonableDateMessageBoxId(Integer value)
		{
			cxl_ReasonableDateMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReasonableDateMessageBoxId = null;
		public boolean getFormModeAtOpenIsNotNull()
		{
			return !cxl_FormModeAtOpen.getValueIsNull(context);
		}
		public ims.framework.enumerations.FormMode getFormModeAtOpen()
		{
			return (ims.framework.enumerations.FormMode)cxl_FormModeAtOpen.getValue(context);
		}
		public void setFormModeAtOpen(ims.framework.enumerations.FormMode value)
		{
			cxl_FormModeAtOpen.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FormModeAtOpen = null;
		public boolean getRIERecordIsNotNull()
		{
			return !cxl_RIERecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralERODVo getRIERecord()
		{
			return (ims.RefMan.vo.ReferralERODVo)cxl_RIERecord.getValue(context);
		}
		public void setRIERecord(ims.RefMan.vo.ReferralERODVo value)
		{
			cxl_RIERecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RIERecord = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ReferralERODMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int RIE = 1;
			}
			public void disableAllReferralERODMenuMenuItems()
			{
				this.contextMenuReferralERODMenuRIEItem.setEnabled(false);
			}
			public void hideAllReferralERODMenuMenuItems()
			{
				this.contextMenuReferralERODMenuRIEItem.setVisible(false);
			}
			private Menu contextMenuReferralERODMenu;
			public ReadOnlyMenuItem getReferralERODMenuRIEItem()
			{
				return this.contextMenuReferralERODMenuRIEItem;
			}
			private MenuItem contextMenuReferralERODMenuRIEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[100];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ID", "ID_ReferralEROD");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODTYPE", "ERODType");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-SEQUENCE", "Sequence");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ISACTIVE", "IsActive");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__CatsReferralEROD_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__CatsReferralEROD_" + componentIdentifier, "BO-1004100035-ISCAB", "IsCAB");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__SelectedEROD_" + componentIdentifier, "BO-1096100062-ID", "ID_ReferralEROD");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__SelectedEROD_" + componentIdentifier, "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__SelectedEROD_" + componentIdentifier, "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__SelectedEROD_" + componentIdentifier, "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__SelectedEROD_" + componentIdentifier, "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__SelectedEROD_" + componentIdentifier, "BO-1096100062-ERODTYPE", "ERODType");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__SelectedEROD_" + componentIdentifier, "BO-1096100062-SEQUENCE", "Sequence");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__SelectedEROD_" + componentIdentifier, "BO-1096100062-ISACTIVE", "IsActive");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__SelectedEROD_" + componentIdentifier, "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1096100062-ID", "ID_ReferralEROD");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1096100062-ERODTYPE", "ERODType");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1096100062-SEQUENCE", "Sequence");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1096100062-ISACTIVE", "IsActive");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.ERODDialog.__internal_x_context__RIERecord_" + componentIdentifier, "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
