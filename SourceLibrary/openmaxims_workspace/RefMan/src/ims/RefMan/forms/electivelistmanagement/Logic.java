// This code was generated by Cornel Ventuneac using IMS Development Environment (version 1.80 build 4972.23166)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.electivelistmanagement;

import java.util.Comparator;

import ims.admin.vo.ElectiveListConfigLiteVoCollection;
import ims.admin.vo.ServiceForElectiveListConfigVoCollection;
import ims.RefMan.forms.electivelistmanagement.GenForm.GroupShowEnumeration;
import ims.RefMan.forms.electivelistmanagement.GenForm.grdElectiveListRow;
import ims.RefMan.vo.Booking_AppointmentElectiveListVo;
import ims.RefMan.vo.CatsReferralERODWithElectiveOnlyVo;
import ims.RefMan.vo.CatsReferralListVo;
import ims.RefMan.vo.ElectiveListStatusVo;
import ims.RefMan.vo.ElectiveListStatusVoCollection;
import ims.RefMan.vo.PatientElectiveListDetailsToSaveVo;
import ims.RefMan.vo.PatientElectiveListForTCIDetailsDialogVo;
import ims.RefMan.vo.PatientElectiveListTCIVo;
import ims.RefMan.vo.PatientElectiveListTCIVoCollection;
import ims.RefMan.vo.PatientElevectiveListManagementVo;
import ims.RefMan.vo.PatientElevectiveListManagementVoCollection;
import ims.RefMan.vo.SearchCriteriaForElectiveListManagementVo;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVo;
import ims.RefMan.vo.TCIOutcomeForPatientElectiveListVoCollection;
import ims.RefMan.vo.lookups.AdmissionOfferOutcome;
import ims.RefMan.vo.lookups.ElectiveAdmissionType;
import ims.RefMan.vo.lookups.ReferralApptStatus;
import ims.RefMan.vo.lookups.TCIStatusChangeReason;
import ims.chooseandbook.vo.lookups.ActionRequestType;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.MemberOfStaffShortVo;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ProcedureLiteVoCollection;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.WaitingListStatus;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.lookups.Status_Reason;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int ELECTIVE_LIST_MANAGEMENT 		= 3;					//wdev-18320
	private static final int ELECTIVE_LIST_28DaysRule 		= 28;					//wdev-18419

	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
		if( form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagementIsNotNull() )
		{
			populateSearchCriteriaScreenFromData(form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement());
			searchAndValidation();
		}
		updateControlsState();
	}
	private void initialize()
	{
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		form.grdElectiveList().setColumnIdentifierCaption(dispIdType.getIItemText());
		clearGlobalContexts();
		clearLocalContexts();
	}
	private void clearGlobalContexts()
	{
		form.getGlobalContext().Core.setCurrentCareContext(null);
		form.getGlobalContext().Core.setEpisodeofCareShort(null);
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().Core.setCurrentClinicalContact(null);
	}
	private void clearLocalContexts()
	{
		form.getLocalContext().setCatsReferralListVo(null);
	}
	private void populateSearchCriteriaScreenFromData(SearchCriteriaForElectiveListManagementVo criteria)
	{
		clearScreen();

		if( criteria == null)
			return;

		form.qmbService().setValue(criteria.getService());
		form.qmbElectiveListName().newRow(criteria.getElectiveListName(), criteria.getElectiveListNameIsNotNull() ? criteria.getElectiveListName().getWaitingListName():null);
		form.qmbElectiveListName().setValue(criteria.getElectiveListName());
		form.txtElectiveListCode().setValue(criteria.getElectiveListCode());
		form.qmbConsultant().setValue(criteria.getConsultant());
		form.dteDateFrom().setValue(criteria.getDateFrom());
		form.dteDateTo().setValue(criteria.getDateTo());
		form.cmbStatus().setValue(criteria.getStatus());
		if( Boolean.TRUE.equals(criteria.getShowAdmittedAndDeferred()))
			form.GroupShow().setValue(GroupShowEnumeration.rdoShowAdmited);
		if( Boolean.TRUE.equals(criteria.getShowSuspended()))
			form.GroupShow().setValue(GroupShowEnumeration.rdoShowSuspended);
		if( criteria.getProcedureIsNotNull())
		{
			form.qmbProcedure().newRow(criteria.getProcedure(), criteria.getProcedure().getProcedureName()); //wdev-18662
			form.qmbProcedure().setValue(criteria.getProcedure()); //wdev-18662
		}
			
	}
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		/*if( form.getForms().RefMan.TCIDetailsDialog.equals(formName) )			
		{
			if(	DialogResult.OK.equals(result))
			{
				search();
				return;
			}
		}*/
		if( form.getForms().RefMan.ERODDialog.equals(formName) )			
		{
			if(	DialogResult.OK.equals(result))
			{
				if( form.getLocalContext().getPatientElectiveListIsNotNull() && !form.getLocalContext().getPatientElectiveList().getERODIsNotNull())   //Check if EROD is null
				{
					CatsReferralERODWithElectiveOnlyVo tempVo = domain.getCatsReferralErod(form.getLocalContext().getPatientElectiveList().getReferral());
					if( tempVo != null && tempVo.getElectiveERODHistoryIsNotNull() && tempVo.getElectiveEROD().size() > 0)
					{
						PatientElectiveListForTCIDetailsDialogVo record = form.getLocalContext().getPatientElectiveList();
						record.setEROD(tempVo.getElectiveEROD().get(0));
						String[] arrErrors = record.validate();
						if (arrErrors != null)
						{
							engine.showErrors(arrErrors);
							
						}
						try
						{
							record = domain.save(record);
						}
						catch (StaleObjectException e)
						{
							engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
							
						}
						catch (UniqueKeyViolationException e)
						{
							engine.showMessage(e.getMessage());
							
						}
						
					}
					
				}
				
				//search();
			}
		}
		
		search();
	}
	
	private Booking_AppointmentVo cancelAppt() 
	{
		Booking_AppointmentElectiveListVo voAppt = form.getLocalContext().getPatientElectiveListIsNotNull() && form.getLocalContext().getPatientElectiveList().getTCIDetailsIsNotNull()?form.getLocalContext().getPatientElectiveList().getTCIDetails().getAppointment():null;
		if( voAppt == null)
			return null;
		
		Booking_AppointmentVo voApptFull = domain.getBookingAppointment(voAppt);
			
		if( voApptFull.getApptStatusIsNotNull()
			&& voAppt.getApptStatusIsNotNull()
			&&  !voApptFull.getApptStatus().equals(voAppt.getApptStatus()) )
		{
			engine.showMessage("The Status of the appointment has already been changed.");
			return null;
		}
			
		if( form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
		{
			// appt status and status history
			voApptFull.setApptStatus(Status_Reason.CANCELLED);
			
			// wdev-6034
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voApptFull.setCurrentStatusRecord(voApptStatus);

			voApptFull.setApptStatusHistory(getApptStatusHistory(voApptFull,Status_Reason.CANCELLED, voApptStatus));
			if( form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptFull.setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				if( form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelectedIsNotNull())
					voApptFull.setRequiresRebook(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
			}
		}
		if( voApptFull.getSessionSlotIsNotNull())
			voApptFull.getSessionSlot().setStatus(Status_Reason.SLOTOPENED);
		
		String[] arrErrors = voApptFull.validate();
		if( arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return null;
		}
		PatientElectiveListForTCIDetailsDialogVo tempVo = form.getLocalContext().getPatientElectiveList();
		CatsReferralListVo voRef = null;
		if( tempVo != null && tempVo.getReferralIsNotNull())
		{
			voRef  = form.getLocalContext().getCatsReferralListVo();
			if( voRef == null)
				voRef = domain.getCatsReferral(tempVo.getReferral());
			
			form.getGlobalContext().RefMan.setCatsReferral(tempVo.getReferral());
			voRef.setHasCancelledApptsForReview(true);
			String[] arrErrors2 = voRef.validate();
    		if( arrErrors2 != null)
    		{
    			engine.showErrors(arrErrors2);
    			return null;
    		}
		}

		try 
		{
			voApptFull = domain.cancelAppt(voApptFull, ActionRequestType.NOTIFY_APPT_CANCEL, "Cancel Appt requested from Referral Appointment Details");
		
			if( voRef != null) 
			{
    			domain.updateCatsReferralAdditionalInvStatus(voRef);
    			
    			domain.updateCatsReferralCancelStatus(voRef);
			}
			
			if( Status_Reason.HOSPITALCANCELLED.equals(voApptFull.getApptStatusReas()) && voApptFull.getTheatreBooking() != null)
			{
				domain.cancelReferralEROD(voRef, voApptFull);
			}
		} 
		catch( StaleObjectException e) 
		{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return null;
		}
		
		return voApptFull;
		
		
		
	}
	private Appointment_StatusVoCollection getApptStatusHistory(Booking_AppointmentVo voAppt, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voAppt.getAppointmentDate());
		if (voAppt.getSessionSlotIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getSessionSlot().getStartTm());
			voApptStatus.setStatusChangeDateTime(new DateTime());
			voApptStatus.setPriority(voAppt.getSessionSlot().getPriority());
		}
		//WDEV-11887
		else if(voAppt.getApptStartTimeIsNotNull())
		{
			voApptStatus.setApptTime(voAppt.getApptStartTime());
			voApptStatus.setStatusChangeDateTime(new DateTime());
		}
		
		// if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
				//--------------
				voApptStatus.setEarliestOfferedDate(voAppt.getEarliestOfferedDate());
				///-----------
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voAppt.getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
			
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
	}
	private void clearScreen()
	{
		clearSearchControls();
		form.grdElectiveList().getRows().clear();
		updateControlsState();
	}
	
	private void clearSearchControls()
	{
		form.qmbConsultant().clear();
		form.qmbElectiveListName().clear();
		form.txtElectiveListCode().setValue(null);
		form.qmbService().clear();
		form.dteDateFrom().setValue(null);
		form.dteDateTo().setValue(null);
		form.cmbStatus().setValue(null);
		form.GroupShow().setValue(null);
		form.qmbProcedure().clear();	//wdev-18662
	}
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		searchAndValidation();
	}
	private void searchAndValidation() 
	{
		if( isSearchCriteriaValid() == false)
			return;
				
		if( search())
			form.getGlobalContext().RefMan.setSearchCriteriaForElectiveListManagement(populateSearchCriteriaDataFromScreen());
		
		updateControlsState();
		
	}
	private SearchCriteriaForElectiveListManagementVo populateSearchCriteriaDataFromScreen()
	{
		SearchCriteriaForElectiveListManagementVo  criteria = new SearchCriteriaForElectiveListManagementVo();
		criteria.setService(form.qmbService().getValue());
		criteria.setElectiveListName(form.qmbElectiveListName().getValue());
		criteria.setElectiveListCode(form.txtElectiveListCode().getValue());
		criteria.setDateFrom(form.dteDateFrom().getValue());
		criteria.setDateTo(form.dteDateTo().getValue());
		criteria.setConsultant(form.qmbConsultant().getValue());
		criteria.setProcedure(form.qmbProcedure().getValue()); //wdev-18662
		criteria.setStatus(form.cmbStatus().getValue());
				
		criteria.setShowSuspended(Boolean.FALSE);
		if( form.GroupShow().getValue().equals(GroupShowEnumeration.rdoShowSuspended))
		{
			criteria.setShowSuspended(Boolean.TRUE);
		}
		criteria.setShowAdmittedAndDeferred(Boolean.FALSE);
		if( form.GroupShow().getValue().equals(GroupShowEnumeration.rdoShowAdmited))
		{
			criteria.setShowAdmittedAndDeferred(Boolean.TRUE);
		}
		
		
		return criteria;
	}
	private boolean search()
	{
		clearGlobalContexts();
		clearLocalContexts();
		Boolean showSuspend = Boolean.FALSE;
		if( form.GroupShow().getValue().equals(GroupShowEnumeration.rdoShowSuspended))
		{
			showSuspend = Boolean.TRUE;
		}
		Boolean showAdmitted = Boolean.FALSE;
		if( form.GroupShow().getValue().equals(GroupShowEnumeration.rdoShowAdmited))
		{
			showAdmitted = Boolean.TRUE;
		}
		
		Boolean show28Days=form.GroupShow().getValue().equals(GroupShowEnumeration.rdo28Day)? Boolean.TRUE : Boolean.FALSE;//wdev-18596
		
		String strElectiveListname = form.qmbElectiveListName().getValue() != null ? form.qmbElectiveListName().getValue().getWaitingListName():null; 
		PatientElevectiveListManagementVoCollection collPatientElectiveList = domain.getElectiveListEntries(form.qmbService().getValue(), strElectiveListname, form.txtElectiveListCode().getValue(), form.qmbConsultant().getValue(), form.dteDateFrom().getValue(), form.dteDateTo().getValue(), form.cmbStatus().getValue(),showAdmitted,showSuspend, show28Days,form.qmbProcedure().getValue()); //wdev-18596,wdev-18662
		
		if( collPatientElectiveList == null || collPatientElectiveList.size() == 0)
		{
			form.grdElectiveList().getRows().clear();
			engine.showMessage("No records that match your search criteria found.", "No results", MessageButtons.OK,MessageIcon.INFORMATION);
			return false;
		}
		
		populateGrid(collPatientElectiveList);
		updateControlsState();
		return true;
	}
	private boolean isSearchCriteriaValid()
	{
		Date dateFrom = form.dteDateFrom().getValue();
		Date dateTo = form.dteDateTo().getValue();

		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			engine.showMessage("Date From cannot be greater than Date To", "Validation error", MessageButtons.OK, MessageIcon.ERROR);
			return false;
		}

		if( isAtLeastOneSearchFieldCompleted() == false)
		{
			engine.showMessage("Complete at least one search field.", "Validation error", MessageButtons.OK, MessageIcon.ERROR);
			return false;
		}

		return true;
	}
	private boolean isAtLeastOneSearchFieldCompleted()
	{
		return form.qmbConsultant().getValue() != null || form.qmbService().getValue() != null || form.txtElectiveListCode().getValue() != null || form.qmbElectiveListName().getValue() != null || form.cmbStatus().getValue() != null || form.dteDateFrom().getValue() != null || form.dteDateTo().getValue() != null || form.qmbProcedure().getValue() != null ;  //wdev-18662
	}

	
	private void populateGrid(PatientElevectiveListManagementVoCollection collPatientElectiveList)
	{
		form.grdElectiveList().getRows().clear();
		if( collPatientElectiveList == null)
			return;
		
		for( int i=0; i < collPatientElectiveList.size();i++)
		{
			PatientElevectiveListManagementVo value = collPatientElectiveList.get(i);
			grdElectiveListRow row = form.grdElectiveList().getRows().newRow();
			row.setValue(value);
			
			if( value.getPatientIsNotNull() && value.getPatient().getNameIsNotNull() )
			{
				row.setColumnPatientName(value.getPatient().getName().toString());
				row.setTooltipForColumnPatientName(value.getPatient().getName().toString());
			}
			
			if( value.getPatientIsNotNull() &&  value.getPatient().getDisplayId() != null )
			{
				row.setColumnIdentifier(value.getPatient().getDisplayId().getIdValue());
				row.setTooltipForColumnIdentifier(value.getPatient().getDisplayId().getIdValue());
			}
			
			if( value.getElectiveListIsNotNull() )
			{
				row.setColumnListName(value.getElectiveList().getWaitingListName());
				row.setTooltipForColumnListName(value.getElectiveList().getWaitingListName());
			}
							
			if( value.getConsultantIsNotNull() && value.getConsultant().getMosIsNotNull())
			{
				row.setColumnConsultant(value.getConsultant().getMos().getIMosName());
				row.setTooltipForColumnConsultant(value.getConsultant().getMos().getIMosName());
			}
			
			if( value.getElectiveListIsNotNull() && value.getElectiveList().getServiceIsNotNull())
			{
				row.setColumnService(value.getElectiveList().getService().getServiceName());
				row.setTooltipForColumnService(value.getElectiveList().getService().getServiceName());
			}
			
			if( value.getDateOnListIsNotNull())
			{
				row.setColumnDateOnList( value.getDateOnList().toString());
				row.setTooltipForColumnDateOnList(value.getDateOnList().toString());
			}
			
			if( value.getElectiveListStatusIsNotNull() && value.getElectiveListStatus().getElectiveListStatusIsNotNull() )
			{
				row.setColumnStatus(value.getElectiveListStatus().getElectiveListStatus().getIItemText());
				row.setTooltipForColumnStatus(WaitingListStatus.REMOVED.equals(value.getElectiveListStatus().getElectiveListStatus()) && value.getElectiveListStatus().getRemovalReason()!=null ?"Status: " + value.getElectiveListStatus().getElectiveListStatus().getIItemText() + "<br> Removal Reason: "+ (value.getElectiveListStatus().getRemovalReasonIsNotNull()? value.getElectiveListStatus().getRemovalReason(): "")  : value.getElectiveListStatus().getElectiveListStatus().getIItemText()); //WDEV-18564
				
			}
			if( !value.getTCIDetailsIsNotNull() && value.getRequiresTCIByIsNotNull())	//wdev-18419
			{
				int dif = 0;
				int RequiresTCIdays = value.getRequiresTCIBy().getDay();
				int nowDate = new Date().getDay();
				if( RequiresTCIdays > nowDate)
					dif = RequiresTCIdays- nowDate;
				else
					dif = nowDate - RequiresTCIdays;
					
				if(dif <= ELECTIVE_LIST_28DaysRule)
				{
					row.setColumnImage(form.getImages().RefMan.Appointment16);
					row.setTooltipForColumnImage(" TCI was cancelled for a Non-Medical reason and requires a TCI to be assigned soon. ");
				}
				else
				{
					row.setColumnImage(null);
					row.setTooltipForColumnImage("");
				}
			}
			
			
			
		}
	}
	
	protected void onQmbConsultantTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbConsultant().clear();
		
		HcpLiteVoCollection voCollHcp = domain.listConsultants(value);
		if (voCollHcp==null || voCollHcp.size() == 0)
		{
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++)
		{
			form.qmbConsultant().newRow(voCollHcp.get(i), voCollHcp.get(i).getName().toString());
		}

		if (voCollHcp.size() == 1)
			form.qmbConsultant().setValue(voCollHcp.get(0));
		else
			form.qmbConsultant().showOpened();
		
	}

	
	protected void onQmbServiceTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbService().clear();

		ServiceForElectiveListConfigVoCollection voCollService = domain.listServices(value);
		if (voCollService==null || voCollService.size() == 0)
		{
			return;
		}

		for (int i = 0; i < voCollService.size(); i++)
		{
			form.qmbService().newRow(voCollService.get(i), voCollService.get(i).getServiceName());
		}

		if (form.qmbService().size() == 1)
			form.qmbService().setValue(voCollService.get(0));
		else
			form.qmbService().showOpened();
		
	}

	
	protected void onGrdElectiveListSelectionChanged() throws PresentationLogicException
	{
		form.getLocalContext().setPatientElectiveList(domain.getPatientElecticeList(form.grdElectiveList().getValue()));
		form.getGlobalContext().RefMan.setPatientElectiveListRef(form.getLocalContext().getPatientElectiveList());
		if( form.getLocalContext().getPatientElectiveListIsNotNull())
		{
			form.getGlobalContext().Core.setPatientShort(domain.getPatient(form.getLocalContext().getPatientElectiveList().getPatient()));
			CatsReferralListVo voRef  = domain.getCatsReferral(form.getLocalContext().getPatientElectiveList().getReferral());
			form.getLocalContext().setCatsReferralListVo(voRef);
			form.getGlobalContext().Core.setCurrentCareContext(domain.getCareContextShortVo(voRef.getCareContext()));
			form.getGlobalContext().RefMan.setCatsReferral(form.getLocalContext().getPatientElectiveList().getReferral());
		}
		updateControlsState();
	}

	
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.SET_STATUS_REQUIRES_TCI: //WDEV-19107 typo fix
				review();
				
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.RECORDTCI:
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.NEWEDITTCI});
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.AMEND_TCI:
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.NEWEDITTCI});
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.CANCEL_TCI:
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.CANCELTCI});
			break;
			
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.RECORD_EROD:
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.NEWEDITEROD});
				
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.AMEND_EROD:
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.NEWEDITEROD});
				
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.SUSPEND_ELECTIVE_LIST_ENTRY:
				PatientElectiveListDetailsToSaveVo temp = domain.getPatientElectiveListDetailsToSaveVo(form.getLocalContext().getPatientElectiveList()); //wdev-18361
				engine.open(form.getForms().RefMan.SuspensionDetails, new Object[] {temp,Boolean.TRUE});
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.UNSUSPEND_ELECTIVE_LIST_ENTRY:
				//unSuspendElectiveList();
				//search();
				PatientElectiveListDetailsToSaveVo temp1 = domain.getPatientElectiveListDetailsToSaveVo(form.getLocalContext().getPatientElectiveList()); //wdev-18361
				engine.open(form.getForms().RefMan.SuspensionDetails, new Object[] {temp1,Boolean.TRUE});
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.REMOVE_FROM_ELECTIVE_LIST:
								
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.REMOVE_ELECTIVE_LIST});	//wdev-18384
				
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.ADD_TO_WAITING_LIST:
				 form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
				 engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOWAITINGLIST});
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.ADD_TO_BOOKED_LIST:
				form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOBOOKEDLIST});
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.ADD_TO_PLANNED_LIST:
				form.getGlobalContext().RefMan.setPatientElectiveListRef(null);
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.ADDTOPLANNEDLIST});
				
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.EDIT_ELECTIVE_LIST_ENTRY:	
				engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[] {ims.admin.vo.enums.ElectiveListDetails.EDIT_ELECTIVE_LIST});//WDEV-18388
				 
			break;
			case ims.RefMan.forms.electivelistmanagement.GenForm.ContextMenus.RefManNamespace.PatientElectiveListManagement.BOOK_THEATRE:					//wdev-18662	
				bookTheatreAppt();
				
			break;
		}
		
	}
	private void bookTheatreAppt()
	{
		if (isReferralEndOfCare())
			return;
		
		// WDEV-13243
		// Clear the book theatre global context when booking a new appointment
		form.getGlobalContext().Scheduling.setTheatreAppointment(null);
		engine.open(form.getForms().RefMan.BookTheatreSlot, new Object[] {form.grdElectiveList().getSelectedRow().getValue().getPrimaryProcedure()});
		
	}
	private boolean isReferralEndOfCare()
	{
		CatsReferralListVo  voRef = form.getLocalContext().getCatsReferralListVo();
		if (voRef.getCurrentStatusIsNotNull()
			&& voRef.getCurrentStatus().getReferralStatusIsNotNull()
			&& voRef.getCurrentStatus().getReferralStatus().equals(ReferralApptStatus.END_OF_CARE))
		{
			engine.showMessage("This referral has been marked as End Of Care");
			form.getLocalContext().setbReferralAccepted(Boolean.FALSE);
					
			return true;
		}
		else
			return false;
	}
	
	private void review()
	{
				
		engine.open(form.getForms().RefMan.NewElectiveListTCIErodDialog, new Object[]{ims.admin.vo.enums.ElectiveListDetails.REVIEW},false);  //wdev-18320
	}
	
	private void setStatusToRequiresTCI()
	{
		PatientElectiveListForTCIDetailsDialogVo record = form.getLocalContext().getPatientElectiveList();
		if( record != null )
		{
			record.getElectiveListStatus().setElectiveListStatus(WaitingListStatus.REQUIRES_TCI);
			String[] arrErrors = record.validate();
			if (arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return;
			}
			try
			{
				record = domain.save(record);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
		}
	}
	private void setStatusToSuspend()
	{
		PatientElectiveListForTCIDetailsDialogVo record = form.getLocalContext().getPatientElectiveList();
		if( record != null )
		{
			
			//----
			ElectiveListStatusVo electivStatus = new ElectiveListStatusVo();
			electivStatus.setElectiveListStatus(WaitingListStatus.SUSPENDED);
			electivStatus.setStatusDateTime(new DateTime());
			
			
			Object mos  = domain.getMosUser();
			MemberOfStaffLiteVo moslite = null;
			if( mos instanceof MemberOfStaffShortVo )
			{
				moslite = (MemberOfStaffLiteVo) mos;
			}
			
			electivStatus.setAuthoringUser(moslite);

			ElectiveListStatusVoCollection electListColl = record.getElectiveListStatusHistory();
			if( electListColl == null )
				electListColl = new ElectiveListStatusVoCollection();
			
			electListColl.add(electivStatus);
			record.setElectiveListStatusHistory(electListColl);
			record.setElectiveListStatus(electivStatus);
			//----
			
			String[] arrErrors = record.validate();
			if (arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return;
			}
			try
			{
				record = domain.save(record);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
		}
	}
	private void unSuspendElectiveList()
	{
		PatientElectiveListForTCIDetailsDialogVo record = form.getLocalContext().getPatientElectiveList();
		if( record != null )
		{
			
			ElectiveListStatusVoCollection electListColl = record.getElectiveListStatusHistory();
			if( electListColl != null &&  electListColl.size() > 0)
			{
				
				ElectiveListStatusVo electivStatus = new ElectiveListStatusVo();
				ElectiveListStatusVo electivStatusTemp = getLastElectiveListFromHistory(record.getElectiveListStatusHistory()); 
				electivStatus.setElectiveListStatus(electivStatusTemp != null ? electivStatusTemp.getElectiveListStatus():null);
				electivStatus.setStatusDateTime(new DateTime());
				Object mos  = domain.getMosUser();
				MemberOfStaffLiteVo moslite = null;
				if( mos instanceof MemberOfStaffShortVo )
				{
					moslite = (MemberOfStaffLiteVo) mos;
				}
				
				electivStatus.setAuthoringUser(moslite);
				electListColl.add(electivStatus);
				record.setElectiveListStatusHistory(electListColl);
				record.setElectiveListStatus(electivStatus);
			}
			
			String[] arrErrors = record.validate();
			if (arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return;
			}
			try
			{
				record = domain.save(record);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return;
			}
		}
	}
	
	private ElectiveListStatusVo getLastElectiveListFromHistory( ElectiveListStatusVoCollection coll )
	{
		if( coll == null || coll.size() == 0 )
			return null;
		
		ElectiveListStatusVo last = coll.get(0);
		if( coll.size() > 1)
		{
    		for(int i = 1; i < coll.size();i++)
    		{
    			if( last.getStatusDateTimeIsNotNull() && coll.get(i).getStatusDateTimeIsNotNull() && last.getStatusDateTime().isLessThan(coll.get(i).getStatusDateTime()) && coll.get(i).getElectiveListStatusIsNotNull() && !coll.get(i).getElectiveListStatus().equals(WaitingListStatus.SUSPENDED))
    			{
    				last = coll.get(i);
    			}
    		}
		}
		return last;
		
	}
	private boolean CancelTCIforRemove()
	{
		PatientElectiveListForTCIDetailsDialogVo record = form.getLocalContext().getPatientElectiveList();
		if( record != null )
		{
			
			// create a new electiveliststatus
			ElectiveListStatusVo electivStatus = new ElectiveListStatusVo();
			//set the values for the new created electiveliststatus 
			electivStatus.setElectiveListStatus(WaitingListStatus.REMOVED);
			electivStatus.setStatusDateTime(new DateTime());
			
			
			Object mos  = domain.getMosUser();
			MemberOfStaffLiteVo moslite = null;
			if( mos instanceof MemberOfStaffShortVo )
			{
				moslite = (MemberOfStaffLiteVo) mos;
			}
			
			electivStatus.setAuthoringUser(moslite);

			//get the history
			ElectiveListStatusVoCollection electListColl = record.getElectiveListStatusHistory();		
			if( electListColl == null )
				electListColl = new ElectiveListStatusVoCollection();
			
			electListColl.add(record.getElectiveListStatus());			//add to history the old electiveliststatus
			record.setElectiveListStatusHistory(electListColl);
			record.setElectiveListStatus(electivStatus);				//set the new electiveliststatus

			//----------
			PatientElectiveListTCIVo patTciVo = record.getTCIDetails();
			if( patTciVo != null )
			{
				
				//create a new Outcome
				TCIOutcomeForPatientElectiveListVo  temp = new TCIOutcomeForPatientElectiveListVo();
				//set the values for the new created outcome
				temp.setOutcomeReason(TCIStatusChangeReason.CANCELLEDBYREMOVALOFELECTIVELISTRECORD);
				temp.setStatusDateTime(new DateTime());
				MemberOfStaffLiteVo mossh = null;
				if( mos instanceof MemberOfStaffShortVo )
				{
					mossh = (MemberOfStaffLiteVo) mos;
				}
				temp.setChangeBy(mossh);
				if( patTciVo.getTCIDate().equals(new Date()))		//if the nowdate is equal with TCIDate 
					temp.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_ON_DAY_7);
				else
					temp.setOutcome(AdmissionOfferOutcome.ADMISSION_CANCELLED_BY_HOSPITAL_BEFORE_6);
				
				
				//get outcome history
				TCIOutcomeForPatientElectiveListVoCollection  tempColl = patTciVo.getOutcomeHistory();
				if( tempColl == null )
					tempColl = new TCIOutcomeForPatientElectiveListVoCollection();
				
				tempColl.add(patTciVo.getCurrentOutcome());			//add the old outcome to history
				patTciVo.setOutcomeHistory(tempColl);
				patTciVo.setCurrentOutcome(temp);					//add the new created outcome to currentoutcome field 
    			
    			
				//get TCI history
    			PatientElectiveListTCIVoCollection patelctTCIcoll = record.getTCIHistory();
    			if( patelctTCIcoll == null )
    				patelctTCIcoll = new PatientElectiveListTCIVoCollection();
    			
    			patelctTCIcoll.add(record.getTCIDetails());			//add the old TCIDetails to history
    			record.setTCIHistory(patelctTCIcoll);
    			record.setTCIDetails(null);							//set NULL to TCI Details	
    			
			}
			String[] arrErrors = record.validate();
			if (arrErrors != null)
			{
				engine.showErrors(arrErrors);
				return false;
			}
			try
			{
				record = domain.save(record);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				return false;
			}
			catch (UniqueKeyViolationException e)
			{
				engine.showMessage(e.getMessage());
				return false;
			}
		}
		return true;

	}
	private void RemoveFromElective()
	{
		
		PatientElectiveListForTCIDetailsDialogVo  tempVo = form.getLocalContext().getPatientElectiveList();
		
		
		if( tempVo != null  && tempVo.getTCIDetailsIsNotNull() && tempVo.getTCIDetails().getAppointmentIsNotNull())
		{
						
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			//voApptStatus.setComment(form.txtComment().getValue());
			voApptStatus.setStatus(Status_Reason.CANCELLED);
			//voApptStatus.setStatusReason(form.cmbCancellationType().getValue());
			//voApptStatus.setCancellationReason(form.cmbCancellationReason().getValue());
			
			form.getGlobalContext().Scheduling.setApptCancelStatus(voApptStatus);
			Booking_AppointmentVo voAppt = cancelAppt();
			if( voAppt == null)
				return;
			
			CancelTCIforRemove();
			search();
			
			
			
			
			
			
		}
		else
		{
			CancelTCIforRemove();
			search();
		}
	}
	private void updateControlsState()
	{
		if (form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagementIsNotNull()
				&& form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getServiceIsNotNull()
				&& form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getElectiveListNameIsNotNull())
		{
			//check search criteria is the same
			form.btnTransferToEL().setEnabled(form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getService().equals(form.qmbService().getValue())
					&& form.getGlobalContext().RefMan.getSearchCriteriaForElectiveListManagement().getElectiveListName().equals(form.qmbElectiveListName().getValue())
					);
		}
		else
			form.btnTransferToEL().setEnabled(false);
			
		updateContextMenu();
	}
	private void updateContextMenu()
	{
		form.getContextMenus().RefMan.hideAllPatientElectiveListManagementMenuItems();
		PatientElevectiveListManagementVo tempVo = form.grdElectiveList().getValue();
		boolean isRemoved = tempVo != null && tempVo.getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED);
		boolean isDod = form.getGlobalContext().Core.getPatientShortIsNotNull()?(form.getGlobalContext().Core.getPatientShort().getDodIsNotNull()?true:false):false;
		boolean hasProcedure = tempVo != null && tempVo.getPrimaryProcedureIsNotNull();  //wdev-18662
		
		form.getContextMenus().RefMan.getPatientElectiveListManagementSET_STATUS_REQUIRES_TCIItem().setVisible(tempVo != null && tempVo.getElectiveListStatusIsNotNull() && (WaitingListStatus.REQUIRES_TCI.equals(tempVo.getElectiveListStatus().getElectiveListStatus()) || WaitingListStatus.CREATED.equals(tempVo.getElectiveListStatus().getElectiveListStatus())));    //wdev-18320,wdev-18384 //WDEV-19107
		form.getContextMenus().RefMan.getPatientElectiveListManagementRECORDTCIItem().setVisible(tempVo != null && tempVo.getTCIDetails() == null && tempVo.getElectiveListStatusIsNotNull() && (WaitingListStatus.REQUIRES_TCI.equals(tempVo.getElectiveListStatus().getElectiveListStatus()) || WaitingListStatus.CREATED.equals(tempVo.getElectiveListStatus().getElectiveListStatus())) && tempVo.getElectiveAdmissionTypeIsNotNull() && (tempVo.getElectiveAdmissionType().equals(ElectiveAdmissionType.BOOKED_TYPE12) || tempVo.getElectiveAdmissionType().equals(ElectiveAdmissionType.ELECTIVE_TYPE11))); //WDEV-19107
		form.getContextMenus().RefMan.getPatientElectiveListManagementAMEND_TCIItem().setVisible(tempVo != null && tempVo.getTCIDetailsIsNotNull() && !isRemoved);
		form.getContextMenus().RefMan.getPatientElectiveListManagementCANCEL_TCIItem().setVisible(tempVo != null && tempVo.getTCIDetailsIsNotNull() && Boolean.TRUE.equals(tempVo.getTCIDetails().getIsActive()));		//wdev-18384 //WDEV-18527 
		form.getContextMenus().RefMan.getPatientElectiveListManagementRECORD_ERODItem().setVisible(tempVo != null && !tempVo.getTCIDetailsIsNotNull() && !tempVo.getERODIsNotNull() && !isRemoved && tempVo.getElectiveAdmissionTypeIsNotNull() && ( tempVo.getElectiveAdmissionType().equals(ElectiveAdmissionType.BOOKED_TYPE12) || tempVo.getElectiveAdmissionType().equals(ElectiveAdmissionType.ELECTIVE_TYPE11))); //wdev-18384
		form.getContextMenus().RefMan.getPatientElectiveListManagementAMEND_ERODItem().setVisible(tempVo != null && tempVo.getERODIsNotNull() && !isRemoved);
		form.getContextMenus().RefMan.getPatientElectiveListManagementSUSPEND_ELECTIVE_LIST_ENTRYItem().setVisible(tempVo != null && tempVo.getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatusIsNotNull() && !tempVo.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED) && !tempVo.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.SUSPENDED));
		form.getContextMenus().RefMan.getPatientElectiveListManagementUNSUSPEND_ELECTIVE_LIST_ENTRYItem().setVisible(tempVo != null && tempVo.getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.SUSPENDED));
		form.getContextMenus().RefMan.getPatientElectiveListManagementREMOVE_FROM_ELECTIVE_LISTItem().setVisible(tempVo != null && !isRemoved);
		form.getContextMenus().RefMan.getPatientElectiveListManagementBOOK_THEATREItem().setVisible(hasProcedure);	//wdev-18662
		
		//WDEV-18437
		CatsReferralListVo voCats = form.getLocalContext().getCatsReferralListVo();
		boolean isReferralRejected = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_REJECTED.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralDischarged = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.DISCHARGED.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralWaitingOnGPReferral = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.WAITING_ON_GP_REFERRAL.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralProvisionalRejection = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.PROVISIONAL_REJECTION.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isOnwardReferralRequested = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.ONWARDREFERRALREQUESTED.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralReceived = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_RECEIVED.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isCabCancelld = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.CAB_CANCELLATION.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isCancelledByProvider = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.REFERRAL_CANCELLED_BY_PROVIDER.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralAwaitingTriage = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.AWAITING_TRIAGE.equals(voCats.getCurrentStatus().getReferralStatus());
		boolean isReferralEOC = voCats != null && voCats.getCurrentStatus() != null && ReferralApptStatus.END_OF_CARE.equals(voCats.getCurrentStatus().getReferralStatus());
		
		if (!isReferralRejected
				&&!isReferralDischarged
				&& !isReferralWaitingOnGPReferral
				&& !isReferralReceived
				&& !isCabCancelld
				&& !isCancelledByProvider
				&& !isReferralProvisionalRejection
				&& !isReferralAwaitingTriage
				&& !isReferralEOC
				&& !isOnwardReferralRequested
				)
		{		
			form.getContextMenus().RefMan.getPatientElectiveListManagementADD_TO_WAITING_LISTItem().setVisible(tempVo != null && tempVo.getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED) && !isDod);
			form.getContextMenus().RefMan.getPatientElectiveListManagementADD_TO_BOOKED_LISTItem().setVisible(tempVo != null && tempVo.getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED) && !isDod);
			form.getContextMenus().RefMan.getPatientElectiveListManagementADD_TO_PLANNED_LISTItem().setVisible(tempVo != null && tempVo.getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatusIsNotNull() && tempVo.getElectiveListStatus().getElectiveListStatus().equals(WaitingListStatus.REMOVED) && !isDod);
		}
		
		form.getContextMenus().RefMan.getPatientElectiveListManagementEDIT_ELECTIVE_LIST_ENTRYItem().setVisible(tempVo != null);
		
		
	}

	
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(form.getLocalContext().getMessageBoxIdForRemoveEntryListIsNotNull() && form.getLocalContext().getMessageBoxIdForRemoveEntryList().equals(messageBoxId))
		{
			if( DialogResult.YES.equals(result) )
			{
				RemoveFromElective();
			}
		}
		
	}
	
	protected void onRadioButtonGroupShowValueChanged() throws PresentationLogicException
	{
		if( form.GroupShow().getValue().equals(GroupShowEnumeration.rdoShowSuspended) )
		{
			form.cmbStatus().setValue(WaitingListStatus.SUSPENDED);
			
		}
		else if( form.GroupShow().getValue().equals(GroupShowEnumeration.rdoShowAdmited) ||  form.GroupShow().getValue().equals(GroupShowEnumeration.rdo28Day)) //wdev-18596
		{
			form.cmbStatus().setValue(WaitingListStatus.REQUIRES_TCI);
			
		}
		
	}
	
	protected void onCmbStatusValueChanged() throws PresentationLogicException
	{
		form.GroupShow().setValue(null);
		
	}
	
	protected void onQmbElectiveListNameTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbElectiveListName().clear();

		ElectiveListConfigLiteVoCollection voCollElect = domain.getElectiveListConfigurations(value);
		if (voCollElect==null || voCollElect.size() == 0)
		{
			return;
		}

		for (int i = 0; i < voCollElect.size(); i++)
		{
			form.qmbElectiveListName().newRow(voCollElect.get(i), voCollElect.get(i).getWaitingListName());
		}

		if (form.qmbElectiveListName().size() == 1)
			form.qmbElectiveListName().setValue(voCollElect.get(0));
		else
			form.qmbElectiveListName().showOpened();
		
	}
	
	protected void onBtnTransferToELClick() throws PresentationLogicException 
	{		
		engine.open(form.getForms().RefMan.TransferElectiveListDialog);				
	}
	//wdev-18419
	protected void onGrdElectiveListGridHeaderClicked(int column) throws PresentationLogicException
	{
		if( form.getLocalContext().getSortOrderImage28DayRule() == null)
			form.getLocalContext().setSortOrderImage28DayRule(SortOrder.ASCENDING);
	
		PatientElevectiveListManagementVoCollection collPatientElectiveList = new PatientElevectiveListManagementVoCollection();
		for(int i = 0 ; i < form.grdElectiveList().getRows().size();i++)
		{
			collPatientElectiveList.add(form.grdElectiveList().getRows().get(i).getValue());
		}
		
		collPatientElectiveList.sort(new ImageComparator(form.getLocalContext().getSortOrderImage28DayRule()));
		if(form.getLocalContext().getSortOrderImage28DayRule().equals(SortOrder.ASCENDING))
			form.getLocalContext().setSortOrderImage28DayRule(SortOrder.DESCENDING);
		else if(form.getLocalContext().getSortOrderImage28DayRule().equals(SortOrder.DESCENDING))
			form.getLocalContext().setSortOrderImage28DayRule(SortOrder.ASCENDING);
		form.grdElectiveList().getRows().clear();
		populateGrid(collPatientElectiveList);
		
	}
	//wdev-18419
	public class ImageComparator implements Comparator<Object>
	{
		private int direction = 1;

		public ImageComparator()
		{
			this(SortOrder.ASCENDING);
		}

		public ImageComparator(SortOrder order)
		{
			if (SortOrder.ASCENDING.equals(order))
				direction = 1;
			else
				direction = -1;
		}

		public int compare(Object ob1, Object ob2)
		{
			
			Integer isCab1 = 0;
			Integer isCab2 = 0;

			if (ob1 instanceof PatientElevectiveListManagementVo)
			{
				PatientElevectiveListManagementVo o1 = (PatientElevectiveListManagementVo) ob1;
				if( !o1.getTCIDetailsIsNotNull() && o1.getRequiresTCIByIsNotNull())	//wdev-18419
				{
					int dif = 0;
					int RequiresTCIdays = o1.getRequiresTCIBy().getDay();
					int nowDate = new Date().getDay();
					if( RequiresTCIdays > nowDate)
						dif = RequiresTCIdays- nowDate;
					else
						dif = nowDate - RequiresTCIdays;
						
					if(dif <= ELECTIVE_LIST_28DaysRule)
						isCab1 = 1;
					else
						isCab1 = 0;
				}
				
				
			}

			if (ob2 instanceof PatientElevectiveListManagementVo)
			{
				PatientElevectiveListManagementVo o2 = (PatientElevectiveListManagementVo) ob2;
				if( !o2.getTCIDetailsIsNotNull() && o2.getRequiresTCIByIsNotNull())	//wdev-18419
				{
					int dif = 0;
					int RequiresTCIdays = o2.getRequiresTCIBy().getDay();
					int nowDate = new Date().getDay();
					if( RequiresTCIdays > nowDate)
						dif = RequiresTCIdays- nowDate;
					else
						dif = nowDate - RequiresTCIdays;
						
					if(dif <= ELECTIVE_LIST_28DaysRule)
						isCab2 = 1;
					else
						isCab2 = 0;
				}
				
			}

			if (isCab1 != 0 && isCab2 != 0)
			{
				return isCab1.compareTo(isCab2) * direction;
			}

			if (isCab1 != 0 && isCab2 == 0)
			{
				return direction;
			}

			if (isCab2 != 0 && isCab1 == 0)
			{
				return -1 * direction;
			}
					
			return 0;
		
		}
	}
	
	protected void onQmbElectiveListNameValueChanged()
			throws PresentationLogicException
	{
		updateControlsState();		
	}
	
	protected void onQmbConsultantValueChanged()
			throws PresentationLogicException 
	{
		updateControlsState();		
	}
	
	protected void onQmbServiceValueChanged() throws PresentationLogicException 
	{
		updateControlsState();		
	}
	
	//wdev-18662
	protected void onQmbProcedureTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbProcedure().clear();
				
		ProcedureLiteVoCollection procedureCollection = new ProcedureLiteVoCollection();
		
		try
		{
			procedureCollection = domain.listProcedures(value);
		}
		catch (DomainInterfaceException e) 
		{
			engine.showMessage(e.getMessage());
			return;
		}	
		
		for (int i=0; i < procedureCollection.size(); i++)
		{
			addRow(procedureCollection.get(i));
		}
		
		if (procedureCollection.size() == 1)
		{
			form.qmbProcedure().setValue(procedureCollection.get(0));
						
		}
		else if (procedureCollection.size() > 1)
			form.qmbProcedure().showOpened();
		
		
	}
	//wdev-18662
	private void addRow(ProcedureLiteVo procedureLiteVo)
	{
		form.qmbProcedure().newRow(procedureLiteVo, procedureLiteVo.getProcedureName());
	}
}
		
	
