// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.dischargesummarywardpacu;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrContentLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabDischargeDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbFollowUpTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.FollowupManagementType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.FollowupManagementType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.FollowupManagementType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.FollowupManagementType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.FollowupManagementType value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.FollowupManagementType getValue()
				{
					return (ims.RefMan.vo.lookups.FollowupManagementType)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.FollowupManagementType value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbDischargeTypeComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.RefMan.vo.lookups.DischargeType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.RefMan.vo.lookups.DischargeType value)
				{
					return super.control.removeRow(value);
				}
				public ims.RefMan.vo.lookups.DischargeType getValue()
				{
					return (ims.RefMan.vo.lookups.DischargeType)super.control.getValue();
				}
				public void setValue(ims.RefMan.vo.lookups.DischargeType value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdAppointmentsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdAppointmentsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolDateTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolDateTimeOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolDateTime()
				{
					return (String)super.row.get(0);
				}
				public void setcolDateTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolDateTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolServiceReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolServiceOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolService()
				{
					return (String)super.row.get(1);
				}
				public void setcolService(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolServiceTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolClinicReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolClinicReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolClinicOpened()
				{
					super.row.showOpened(2);
				}
				public String getcolClinic()
				{
					return (String)super.row.get(2);
				}
				public void setcolClinic(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolClinicTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolStatusReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolStatusReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolStatusOpened()
				{
					super.row.showOpened(3);
				}
				public ims.scheduling.vo.lookups.Status_Reason getcolStatus()
				{
					return (ims.scheduling.vo.lookups.Status_Reason)super.row.get(3);
				}
				public void setcolStatus(ims.scheduling.vo.lookups.Status_Reason value)
				{
					super.row.set(3, value, true);
				}
				public void setCellcolStatusTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo getValue()
				{
					return (ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdAppointmentsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdAppointmentsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdAppointmentsRow get(int index)
				{
					return new grdAppointmentsRow(super.collection.get(index));
				}
				public grdAppointmentsRow newRow()
				{
					return new grdAppointmentsRow(super.collection.newRow());
				}
				public grdAppointmentsRow newRow(boolean autoSelect)
				{
					return new grdAppointmentsRow(super.collection.newRow(autoSelect));
				}
				public grdAppointmentsRow newRowAt(int index)
				{
					return new grdAppointmentsRow(super.collection.newRowAt(index));
				}
				public grdAppointmentsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdAppointmentsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdAppointmentsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				public ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVoCollection getValues()
				{
					ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVoCollection listOfValues = new ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo getValue()
				{
					return (ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo value)
				{
					super.grid.setValue(value);
				}
				public grdAppointmentsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdAppointmentsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdAppointmentsRowCollection getRows()
				{
					return new grdAppointmentsRowCollection(super.grid.getRows());
				}
				public grdAppointmentsRow getRowByValue(ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdAppointmentsRow(row);
				}
				public void setcolDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolClinicHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolClinicHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolStatusHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolStatusHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public GridComboBox colStatusComboBox()
				{
					return new GridComboBox(super.grid, 3);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Panel Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 96, 736, 352, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Follow-up Details", new Integer(2), ""}));
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 8, 728, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ims.framework.FormUiLogic m_ccAuthoringInformationForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper2.getSize(), instance1, startTabIndex.intValue() + 2, skipContextValidation);
				//ims.framework.Control m_ccAuthoringInformationControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(16), new Integer(8), new Integer(728), new Integer(56), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2), m_ccAuthoringInformationForm, instance1 } );
				ims.framework.Control m_ccAuthoringInformationControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, new Integer(startTabIndex.intValue() + 2), m_ccAuthoringInformationForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccAuthoringInformationControl);
				Menu[] menus1 = m_ccAuthoringInformationForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 24, 152, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointments:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 24, 130, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Follow-up Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 416, 66, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Type:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 24, 66, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Discharge Date:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 608, 416, 120, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Book Appointment", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 176, 64, 216, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 176, 128, 216, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbFollowUpTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbFollowUpTypeTemp);
				cmbFollowUpTypeComboBox cmbFollowUpType = (cmbFollowUpTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFollowUpTypeComboBox.class, m_cmbFollowUpTypeTemp);
				super.addComboBox(cmbFollowUpType);
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 520, 64, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbDischargeTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbDischargeTypeTemp);
				cmbDischargeTypeComboBox cmbDischargeType = (cmbDischargeTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDischargeTypeComboBox.class, m_cmbDischargeTypeTemp);
				super.addComboBox(cmbDischargeType);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 24, 168, 704, 186, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdAppointmentsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdAppointmentsTemp);
				grdAppointmentsGrid grdAppointments = (grdAppointmentsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdAppointmentsGrid.class, m_grdAppointmentsTemp);
				grdAppointments.addStringColumn("Date / Time", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppointments.addStringColumn("Service", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppointments.addStringColumn("Clinic", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdAppointments.addComboBoxColumn("Status", 0, 0, -1, true, true, false, false, true, -1);
				super.addGrid(grdAppointments);
			}

			public ims.core.forms.authoringinfo.IComponent ccAuthoringInformation()
			{
				return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
			}
			public void setccAuthoringInformationValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
			}
			public void setccAuthoringInformationVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setVisible(value);
			}
			public boolean isccAuthoringInformationVisible()
			{
				return ((ims.framework.Control)super.getControl(1)).isVisible();
			}
			public void setccAuthoringInformationEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(1)).setEnabled(value);
			}
			public boolean isccAuthoringInformationEnabled()
			{
				return ((ims.framework.Control)super.getControl(1)).isEnabled();
			}
			public Button btnBookAppointment()
			{
				return (Button)super.getControl(6);
			}
			public DateControl dteDischargeDate()
			{
				return (DateControl)super.getControl(7);
			}
			public cmbFollowUpTypeComboBox cmbFollowUpType()
			{
				return (cmbFollowUpTypeComboBox)super.getComboBox(0);
			}
			public cmbDischargeTypeComboBox cmbDischargeType()
			{
				return (cmbDischargeTypeComboBox)super.getComboBox(1);
			}
			public grdAppointmentsGrid grdAppointments()
			{
				return (grdAppointmentsGrid)super.getGrid(0);
			}
		}
		public static class tabNursingContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdMedicationsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdMedicationsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolPrescriptionDrugReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolPrescriptionDrugReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolPrescriptionDrugOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolPrescriptionDrug()
				{
					return (String)super.row.get(0);
				}
				public void setcolPrescriptionDrug(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolPrescriptionDrugTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolDateReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolDateReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolDateOpened()
				{
					super.row.showOpened(1);
				}
				public ims.framework.utils.Date getcolDate()
				{
					return (ims.framework.utils.Date)super.row.get(1);
				}
				public void setcolDate(ims.framework.utils.Date value)
				{
					super.row.set(1, value);
				}
				public void setCellcolDateTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolFrequencyReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolFrequencyReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolFrequencyOpened()
				{
					super.row.showOpened(2);
				}
				public ims.core.vo.lookups.MedicationFrequency getcolFrequency()
				{
					return (ims.core.vo.lookups.MedicationFrequency)super.row.get(2);
				}
				public void setcolFrequency(ims.core.vo.lookups.MedicationFrequency value)
				{
					super.row.set(2, value, true);
				}
				public void setCellcolFrequencyTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolNoOfDaysSupplyReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolNoOfDaysSupplyReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolNoOfDaysSupplyOpened()
				{
					super.row.showOpened(3);
				}
				public Integer getcolNoOfDaysSupply()
				{
					return (Integer)super.row.get(3);
				}
				public void setcolNoOfDaysSupply(Integer value)
				{
					super.row.set(3, value);
				}
				public void setCellcolNoOfDaysSupplyTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public ims.core.vo.PatientMedicationVo getValue()
				{
					return (ims.core.vo.PatientMedicationVo)super.row.getValue();
				}
				public void setValue(ims.core.vo.PatientMedicationVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdMedicationsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdMedicationsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdMedicationsRow get(int index)
				{
					return new grdMedicationsRow(super.collection.get(index));
				}
				public grdMedicationsRow newRow()
				{
					return new grdMedicationsRow(super.collection.newRow());
				}
				public grdMedicationsRow newRow(boolean autoSelect)
				{
					return new grdMedicationsRow(super.collection.newRow(autoSelect));
				}
				public grdMedicationsRow newRowAt(int index)
				{
					return new grdMedicationsRow(super.collection.newRowAt(index));
				}
				public grdMedicationsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdMedicationsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdMedicationsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public ims.core.vo.PatientMedicationVoCollection getValues()
				{
					ims.core.vo.PatientMedicationVoCollection listOfValues = new ims.core.vo.PatientMedicationVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.PatientMedicationVo getValue()
				{
					return (ims.core.vo.PatientMedicationVo)super.grid.getValue();
				}
				public void setValue(ims.core.vo.PatientMedicationVo value)
				{
					super.grid.setValue(value);
				}
				public grdMedicationsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdMedicationsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdMedicationsRowCollection getRows()
				{
					return new grdMedicationsRowCollection(super.grid.getRows());
				}
				public grdMedicationsRow getRowByValue(ims.core.vo.PatientMedicationVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdMedicationsRow(row);
				}
				public void setcolPrescriptionDrugHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolPrescriptionDrugHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolDateHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolDateHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolFrequencyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolFrequencyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public GridComboBox colFrequencyComboBox()
				{
					return new GridComboBox(super.grid, 2);
				}
				public void setcolNoOfDaysSupplyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolNoOfDaysSupplyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
			}
			public static class grdDressingAndAidsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdDressingAndAidsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolDressingAidReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolDressingAidReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolDressingAidOpened()
				{
					super.row.showOpened(0);
				}
				public ims.clinical.vo.lookups.DressingsAndAids getcolDressingAid()
				{
					return (ims.clinical.vo.lookups.DressingsAndAids)super.row.get(0);
				}
				public void setcolDressingAid(ims.clinical.vo.lookups.DressingsAndAids value)
				{
					super.row.set(0, value, true);
				}
				public void setCellcolDressingAidTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolPeriodReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolPeriodReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolPeriodOpened()
				{
					super.row.showOpened(1);
				}
				public Integer getcolPeriod()
				{
					return (Integer)super.row.get(1);
				}
				public void setcolPeriod(Integer value)
				{
					super.row.set(1, value);
				}
				public void setCellcolPeriodTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolPeriodIntervalReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolPeriodIntervalReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolPeriodIntervalOpened()
				{
					super.row.showOpened(2);
				}
				public ims.core.vo.lookups.TimeDaystoYears getcolPeriodInterval()
				{
					return (ims.core.vo.lookups.TimeDaystoYears)super.row.get(2);
				}
				public void setcolPeriodInterval(ims.core.vo.lookups.TimeDaystoYears value)
				{
					super.row.set(2, value, true);
				}
				public void setCellcolPeriodIntervalTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.clinical.vo.DressingAndAidsVo getValue()
				{
					return (ims.clinical.vo.DressingAndAidsVo)super.row.getValue();
				}
				public void setValue(ims.clinical.vo.DressingAndAidsVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdDressingAndAidsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdDressingAndAidsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdDressingAndAidsRow get(int index)
				{
					return new grdDressingAndAidsRow(super.collection.get(index));
				}
				public grdDressingAndAidsRow newRow()
				{
					return new grdDressingAndAidsRow(super.collection.newRow());
				}
				public grdDressingAndAidsRow newRow(boolean autoSelect)
				{
					return new grdDressingAndAidsRow(super.collection.newRow(autoSelect));
				}
				public grdDressingAndAidsRow newRowAt(int index)
				{
					return new grdDressingAndAidsRow(super.collection.newRowAt(index));
				}
				public grdDressingAndAidsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdDressingAndAidsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdDressingAndAidsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
				{
					super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
				}
				private void addIntColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
				{
					super.grid.addIntColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
				}
				public ims.clinical.vo.DressingAndAidsVoCollection getValues()
				{
					ims.clinical.vo.DressingAndAidsVoCollection listOfValues = new ims.clinical.vo.DressingAndAidsVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.clinical.vo.DressingAndAidsVo getValue()
				{
					return (ims.clinical.vo.DressingAndAidsVo)super.grid.getValue();
				}
				public void setValue(ims.clinical.vo.DressingAndAidsVo value)
				{
					super.grid.setValue(value);
				}
				public grdDressingAndAidsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdDressingAndAidsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdDressingAndAidsRowCollection getRows()
				{
					return new grdDressingAndAidsRowCollection(super.grid.getRows());
				}
				public grdDressingAndAidsRow getRowByValue(ims.clinical.vo.DressingAndAidsVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdDressingAndAidsRow(row);
				}
				public void setcolDressingAidHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolDressingAidHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public GridComboBox colDressingAidComboBox()
				{
					return new GridComboBox(super.grid, 0);
				}
				public void setcolPeriodHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolPeriodHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolPeriodIntervalHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolPeriodIntervalHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public GridComboBox colPeriodIntervalComboBox()
				{
					return new GridComboBox(super.grid, 2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 504, 168, 201, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Further Management Instructions:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 256, 168, 130, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Additional Comments:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 8, 168, 125, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Problems and Needs:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Medications:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 328, 110, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Dressing and Aids:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 504, 184, 240, 136, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 256, 184, 240, 136, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 184, 240, 136, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(3000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 24, 736, 136, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				Grid m_grdMedicationsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenumedicationsMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdMedicationsTemp);
				grdMedicationsGrid grdMedications = (grdMedicationsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMedicationsGrid.class, m_grdMedicationsTemp);
				grdMedications.addStringColumn("Prescription Drug", 0, 0, 375, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdMedications.addDateColumn("Date", 0, 0, 100, true, true, null, false, 0, true);
				grdMedications.addComboBoxColumn("Frequency", 0, 0, 150, true, true, false, false, true, -1);
				grdMedications.addIntColumn("No of Days Supply", 0, 0, -1, true, true, null, false, 0, true);
				super.addGrid(grdMedications);
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 344, 736, 104, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdDressingAndAidsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.TRUE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuDischargeSummaryWardPacu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdDressingAndAidsTemp);
				grdDressingAndAidsGrid grdDressingAndAids = (grdDressingAndAidsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDressingAndAidsGrid.class, m_grdDressingAndAidsTemp);
				grdDressingAndAids.addComboBoxColumn("Dressing and Aid ", 0, 0, 450, false, true, false, false, true, -1);
				grdDressingAndAids.addIntColumn("Period", 0, 0, 100, false, true, null, false, 0, false);
				grdDressingAndAids.addComboBoxColumn("Period Interval", 0, 0, -1, false, true, false, false, true, -1);
				super.addGrid(grdDressingAndAids);
			}

			public TextBox txtFurtherManagementInstructions()
			{
				return (TextBox)super.getControl(5);
			}
			public TextBox txtAdditionalComments()
			{
				return (TextBox)super.getControl(6);
			}
			public TextBox txtProblemsNeeds()
			{
				return (TextBox)super.getControl(7);
			}
			public grdMedicationsGrid grdMedications()
			{
				return (grdMedicationsGrid)super.getGrid(0);
			}
			public grdDressingAndAidsGrid grdDressingAndAids()
			{
				return (grdDressingAndAidsGrid)super.getGrid(1);
			}
		}
		public static class tabDischargeSummaryContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex ");
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Button Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 584, 424, 160, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print Discharge Report", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 416, 424, 160, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print Discharge Summary", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 736, 408, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public Button btnPrintDischargeReport()
			{
				return (Button)super.getControl(0);
			}
			public Button btnPrintDischargeSummary()
			{
				return (Button)super.getControl(1);
			}
			public HTMLViewer htmReportPreview()
			{
				return (HTMLViewer)super.getControl(2);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 760, 480, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDischargeDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Discharge Details", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabDischargeDetailsContainer m_tabDischargeDetailsContainer = (tabDischargeDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDischargeDetailsContainer.class, m_tabDischargeDetails, factory);
			super.addContainer(m_tabDischargeDetails, m_tabDischargeDetailsContainer);
			ims.framework.utils.SizeInfo m_tabDischargeDetailsDesignSize = new ims.framework.utils.SizeInfo(760, 480);
			ims.framework.utils.SizeInfo m_tabDischargeDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper25.getWidth(), anchoringHelper25.getHeight());
			m_tabDischargeDetailsContainer.setContext(form, appForm, m_tabDischargeDetails, loader, contextMenus, startControlID, m_tabDischargeDetailsDesignSize, m_tabDischargeDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 760, 480, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabNursing = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Nursing", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabNursingContainer m_tabNursingContainer = (tabNursingContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNursingContainer.class, m_tabNursing, factory);
			super.addContainer(m_tabNursing, m_tabNursingContainer);
			ims.framework.utils.SizeInfo m_tabNursingDesignSize = new ims.framework.utils.SizeInfo(760, 480);
			ims.framework.utils.SizeInfo m_tabNursingRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper26.getWidth(), anchoringHelper26.getHeight());
			m_tabNursingContainer.setContext(form, appForm, m_tabNursing, loader, contextMenus, startControlID, m_tabNursingDesignSize, m_tabNursingRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 760, 480, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabDischargeSummary = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Discharge Summary", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabDischargeSummaryContainer m_tabDischargeSummaryContainer = (tabDischargeSummaryContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDischargeSummaryContainer.class, m_tabDischargeSummary, factory);
			super.addContainer(m_tabDischargeSummary, m_tabDischargeSummaryContainer);
			ims.framework.utils.SizeInfo m_tabDischargeSummaryDesignSize = new ims.framework.utils.SizeInfo(760, 480);
			ims.framework.utils.SizeInfo m_tabDischargeSummaryRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper27.getWidth(), anchoringHelper27.getHeight());
			m_tabDischargeSummaryContainer.setContext(form, appForm, m_tabDischargeSummary, loader, contextMenus, startControlID, m_tabDischargeSummaryDesignSize, m_tabDischargeSummaryRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabDischargeDetails().setVisible(false);
			tabNursing().setVisible(false);
			tabDischargeSummary().setVisible(false);
		}
		public void settabDischargeDetailsEnabled(boolean value)
		{
			tabDischargeDetails().setEnabled(value);
		}
		public void settabNursingEnabled(boolean value)
		{
			tabNursing().setEnabled(value);
		}
		public void settabDischargeSummaryEnabled(boolean value)
		{
			tabDischargeSummary().setEnabled(value);
		}
		public void showtabDischargeDetails()
		{
			tabNursing().setVisible(false);
			tabDischargeSummary().setVisible(false);
			tabDischargeDetails().setVisible(true);
		}
		public void showtabNursing()
		{
			tabDischargeDetails().setVisible(false);
			tabDischargeSummary().setVisible(false);
			tabNursing().setVisible(true);
		}
		public void showtabDischargeSummary()
		{
			tabDischargeDetails().setVisible(false);
			tabNursing().setVisible(false);
			tabDischargeSummary().setVisible(true);
		}

		public tabDischargeDetailsContainer tabDischargeDetails()
		{
			return (tabDischargeDetailsContainer)super.layers.get(0);
		}
		public tabNursingContainer tabNursing()
		{
			return (tabNursingContainer)super.layers.get(1);
		}
		public tabDischargeSummaryContainer tabDischargeSummary()
		{
			return (tabDischargeSummaryContainer)super.layers.get(2);
		}
	}
	public static class recBrowserRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo getValue()
		{
			return (ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(776, 552);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem = factory.createMenuItem(startControlID.intValue() + 1, "Book New Appointment", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550001)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem = factory.createMenuItem(startControlID.intValue() + 2, "Cancel Appointment", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550002)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem = factory.createMenuItem(startControlID.intValue() + 3, "Rebook Appointment", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550003)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem = factory.createMenuItem(startControlID.intValue() + 4, "Order Investigation", true, false, new Integer(116112), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550008)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem = factory.createMenuItem(startControlID.intValue() + 5, "Book Theatre Appointment", true, false, new Integer(102179), true, true);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550004)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem = factory.createMenuItem(startControlID.intValue() + 6, "Cancel Theatre Appointment", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550005)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem = factory.createMenuItem(startControlID.intValue() + 7, "Rebook Theatre Appointment", true, false, new Integer(102186), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550006)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem);
		contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem = factory.createMenuItem(startControlID.intValue() + 8, "View Appointment History", true, false, new Integer(102555), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2550007)))
			contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent.add(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem);
		form.registerMenu(contextMenus.RefMan.contextMenuReferralAppointmentDetailsComponent);
		contextMenus.RefMan.contextMenumedicationsMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.RefMan.contextMenumedicationsMenuaddMedicationItem = factory.createMenuItem(startControlID.intValue() + 9, "Add", true, false, new Integer(102179), true, false);
		contextMenus.RefMan.contextMenumedicationsMenu.add(contextMenus.RefMan.contextMenumedicationsMenuaddMedicationItem);
		contextMenus.RefMan.contextMenumedicationsMenuremoveMedicationItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove", true, false, new Integer(102300), true, false);
		contextMenus.RefMan.contextMenumedicationsMenu.add(contextMenus.RefMan.contextMenumedicationsMenuremoveMedicationItem);
		contextMenus.RefMan.contextMenumedicationsMenueditMedicationItem = factory.createMenuItem(startControlID.intValue() + 11, "Edit", true, false, new Integer(103102), true, false);
		contextMenus.RefMan.contextMenumedicationsMenu.add(contextMenus.RefMan.contextMenumedicationsMenueditMedicationItem);
		form.registerMenu(contextMenus.RefMan.contextMenumedicationsMenu);
		contextMenus.RefMan.contextMenuDischargeSummaryWardPacu = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.RefMan.contextMenuDischargeSummaryWardPacuADDItem = factory.createMenuItem(startControlID.intValue() + 12, "Add", true, false, new Integer(102179), true, false);
		contextMenus.RefMan.contextMenuDischargeSummaryWardPacu.add(contextMenus.RefMan.contextMenuDischargeSummaryWardPacuADDItem);
		contextMenus.RefMan.contextMenuDischargeSummaryWardPacuREMOVEItem = factory.createMenuItem(startControlID.intValue() + 13, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.RefMan.contextMenuDischargeSummaryWardPacu.add(contextMenus.RefMan.contextMenuDischargeSummaryWardPacuREMOVEItem);
		form.registerMenu(contextMenus.RefMan.contextMenuDischargeSummaryWardPacu);


		// Layer Clasess
		lyrContentLayer m_lyrContentLayer = (lyrContentLayer)LayerFlyweightFactory.getInstance().createLayer(lyrContentLayer.class, this, factory);
		super.addLayer(m_lyrContentLayer);
		m_lyrContentLayer.setContext(form, appForm, control, loader, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 616, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 1028), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 693, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 1031), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 88, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 290, 520, 125, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 1027), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Print TTO", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 536, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 1029), ControlState.HIDDEN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Discharge", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 693, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 1030), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 8, 520, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 1024), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 760, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recBrowserTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recBrowserTemp);
		recBrowserRecordBrowser recBrowser = (recBrowserRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recBrowserRecordBrowser.class, m_recBrowserTemp);
		super.addRecordBrowser(recBrowser);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public lyrContentLayer lyrContent()
	{
		return (lyrContentLayer)super.getLayer(0);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(3);
	}
	public Button btnClose()
	{
		return (Button)super.getControl(4);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(5);
	}
	public Button btnTTOPrint()
	{
		return (Button)super.getControl(6);
	}
	public Button btnDischarge()
	{
		return (Button)super.getControl(7);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(8);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(9);
	}
	public recBrowserRecordBrowser recBrowser()
	{
		return (recBrowserRecordBrowser)super.getRecordBrowser(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
			Scheduling = new SchedulingForms();
			OCRR = new OCRRForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				BookAppointmentDialog = new LocalFormName(134134);
				BookTheatreDialog = new LocalFormName(134159);
				Medications = new LocalFormName(134163);
				DischargeSummaryWardPacuDialogAlias = new LocalFormName(134170);
				BookTheatreSlot = new LocalFormName(134208);
			}
			public final FormName BookAppointmentDialog;
			public final FormName BookTheatreDialog;
			public final FormName Medications;
			public final FormName DischargeSummaryWardPacuDialogAlias;
			public final FormName BookTheatreSlot;
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				CancelAppointmentDialog = new LocalFormName(114160);
			}
			public final FormName CancelAppointmentDialog;
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				SelectAndOrderDialog = new LocalFormName(116131);
			}
			public final FormName SelectAndOrderDialog;
		}

		public RefManForms RefMan;
		public SchedulingForms Scheduling;
		public OCRRForms OCRR;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_DischargeSummaryCollection = new ims.framework.ContextVariable("DischargeSummaryCollection", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryCollection_" + componentIdentifier + "");
			cxl_isReferralAccepted = new ims.framework.ContextVariable("isReferralAccepted", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__isReferralAccepted_" + componentIdentifier + "");
			cxl_AppointmentToCancel = new ims.framework.ContextVariable("AppointmentToCancel", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__AppointmentToCancel_" + componentIdentifier + "");
			cxl_DischargeSummaryPacuAndWard = new ims.framework.ContextVariable("DischargeSummaryPacuAndWard", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier + "");
			cxl_Inpatient = new ims.framework.ContextVariable("Inpatient", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier + "");
			cxl_RecordAwaitingDischarge = new ims.framework.ContextVariable("RecordAwaitingDischarge", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__RecordAwaitingDischarge_" + componentIdentifier + "");
			cxl_WarningBoxId = new ims.framework.ContextVariable("WarningBoxId", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__WarningBoxId_" + componentIdentifier + "");
			cxl_IsDischargeMode = new ims.framework.ContextVariable("IsDischargeMode", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__IsDischargeMode_" + componentIdentifier + "");
			cxl_DocumentURL = new ims.framework.ContextVariable("DocumentURL", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DocumentURL_" + componentIdentifier + "");
			cxl_CurrentEditableRecord = new ims.framework.ContextVariable("CurrentEditableRecord", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__CurrentEditableRecord_" + componentIdentifier + "");
			cxl_HasInpatient = new ims.framework.ContextVariable("HasInpatient", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__HasInpatient_" + componentIdentifier + "");
			cxl_LinkedICPCompleted = new ims.framework.ContextVariable("LinkedICPCompleted", prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__LinkedICPCompleted_" + componentIdentifier + "");
		}
		
		public boolean getDischargeSummaryCollectionIsNotNull()
		{
			return !cxl_DischargeSummaryCollection.getValueIsNull(context);
		}
		public ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVoCollection getDischargeSummaryCollection()
		{
			return (ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVoCollection)cxl_DischargeSummaryCollection.getValue(context);
		}
		public void setDischargeSummaryCollection(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVoCollection value)
		{
			cxl_DischargeSummaryCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DischargeSummaryCollection = null;
		public boolean getisReferralAcceptedIsNotNull()
		{
			return !cxl_isReferralAccepted.getValueIsNull(context);
		}
		public Boolean getisReferralAccepted()
		{
			return (Boolean)cxl_isReferralAccepted.getValue(context);
		}
		public void setisReferralAccepted(Boolean value)
		{
			cxl_isReferralAccepted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isReferralAccepted = null;
		public boolean getAppointmentToCancelIsNotNull()
		{
			return !cxl_AppointmentToCancel.getValueIsNull(context);
		}
		public ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo getAppointmentToCancel()
		{
			return (ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo)cxl_AppointmentToCancel.getValue(context);
		}
		public void setAppointmentToCancel(ims.scheduling.vo.ReferralAppointmentDetailsBookingAppointmentVo value)
		{
			cxl_AppointmentToCancel.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AppointmentToCancel = null;
		public boolean getDischargeSummaryPacuAndWardIsNotNull()
		{
			return !cxl_DischargeSummaryPacuAndWard.getValueIsNull(context);
		}
		public ims.RefMan.vo.DischargeSummaryPacuAndWardVo getDischargeSummaryPacuAndWard()
		{
			return (ims.RefMan.vo.DischargeSummaryPacuAndWardVo)cxl_DischargeSummaryPacuAndWard.getValue(context);
		}
		public void setDischargeSummaryPacuAndWard(ims.RefMan.vo.DischargeSummaryPacuAndWardVo value)
		{
			cxl_DischargeSummaryPacuAndWard.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DischargeSummaryPacuAndWard = null;
		public boolean getInpatientIsNotNull()
		{
			return !cxl_Inpatient.getValueIsNull(context);
		}
		public ims.core.vo.InpatientEpisodeVo getInpatient()
		{
			return (ims.core.vo.InpatientEpisodeVo)cxl_Inpatient.getValue(context);
		}
		public void setInpatient(ims.core.vo.InpatientEpisodeVo value)
		{
			cxl_Inpatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Inpatient = null;
		public boolean getRecordAwaitingDischargeIsNotNull()
		{
			return !cxl_RecordAwaitingDischarge.getValueIsNull(context);
		}
		public Boolean getRecordAwaitingDischarge()
		{
			return (Boolean)cxl_RecordAwaitingDischarge.getValue(context);
		}
		public void setRecordAwaitingDischarge(Boolean value)
		{
			cxl_RecordAwaitingDischarge.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RecordAwaitingDischarge = null;
		public boolean getWarningBoxIdIsNotNull()
		{
			return !cxl_WarningBoxId.getValueIsNull(context);
		}
		public Integer getWarningBoxId()
		{
			return (Integer)cxl_WarningBoxId.getValue(context);
		}
		public void setWarningBoxId(Integer value)
		{
			cxl_WarningBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WarningBoxId = null;
		public boolean getIsDischargeModeIsNotNull()
		{
			return !cxl_IsDischargeMode.getValueIsNull(context);
		}
		public Boolean getIsDischargeMode()
		{
			return (Boolean)cxl_IsDischargeMode.getValue(context);
		}
		public void setIsDischargeMode(Boolean value)
		{
			cxl_IsDischargeMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsDischargeMode = null;
		public boolean getDocumentURLIsNotNull()
		{
			return !cxl_DocumentURL.getValueIsNull(context);
		}
		public String getDocumentURL()
		{
			return (String)cxl_DocumentURL.getValue(context);
		}
		public void setDocumentURL(String value)
		{
			cxl_DocumentURL.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DocumentURL = null;
		public boolean getCurrentEditableRecordIsNotNull()
		{
			return !cxl_CurrentEditableRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo getCurrentEditableRecord()
		{
			return (ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo)cxl_CurrentEditableRecord.getValue(context);
		}
		public void setCurrentEditableRecord(ims.RefMan.vo.DischargeSummaryPacuAndWardLiteVo value)
		{
			cxl_CurrentEditableRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentEditableRecord = null;
		public boolean getHasInpatientIsNotNull()
		{
			return !cxl_HasInpatient.getValueIsNull(context);
		}
		public Boolean getHasInpatient()
		{
			return (Boolean)cxl_HasInpatient.getValue(context);
		}
		public void setHasInpatient(Boolean value)
		{
			cxl_HasInpatient.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasInpatient = null;
		public boolean getLinkedICPCompletedIsNotNull()
		{
			return !cxl_LinkedICPCompleted.getValueIsNull(context);
		}
		public Boolean getLinkedICPCompleted()
		{
			return (Boolean)cxl_LinkedICPCompleted.getValue(context);
		}
		public void setLinkedICPCompleted(Boolean value)
		{
			cxl_LinkedICPCompleted.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LinkedICPCompleted = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ReferralAppointmentDetailsComponent implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int BOOK_APPT = 1;
				public static final int CANCEL_APPT = 2;
				public static final int REBOOK_APPT = 3;
				public static final int ORDER_INVESTIGATION = 4;
				public static final int BOOK_THEATRE_APPT = 5;
				public static final int CANCEL_THEATRE_APPT = 6;
				public static final int REBOOK_THEATRE_APPT = 7;
				public static final int VIEW_APPT_HISTORY = 8;
			}
			public void disableAllReferralAppointmentDetailsComponentMenuItems()
			{
				this.contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem.setEnabled(false);
				this.contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem.setEnabled(false);
			}
			public void hideAllReferralAppointmentDetailsComponentMenuItems()
			{
				this.contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem.setVisible(false);
				this.contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem.setVisible(false);
			}
			private Menu contextMenuReferralAppointmentDetailsComponent;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentBOOK_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentBOOK_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentCANCEL_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentCANCEL_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentREBOOK_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentREBOOK_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentORDER_INVESTIGATIONItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentBOOK_THEATRE_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentCANCEL_THEATRE_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentREBOOK_THEATRE_APPTItem;
			public ReadOnlyMenuItem getReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem()
			{
				return this.contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem;
			}
			private MenuItem contextMenuReferralAppointmentDetailsComponentVIEW_APPT_HISTORYItem;
			public final class medicationsMenu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int addMedication = 9;
				public static final int removeMedication = 10;
				public static final int editMedication = 11;
			}
			public void disableAllmedicationsMenuMenuItems()
			{
				this.contextMenumedicationsMenuaddMedicationItem.setEnabled(false);
				this.contextMenumedicationsMenuremoveMedicationItem.setEnabled(false);
				this.contextMenumedicationsMenueditMedicationItem.setEnabled(false);
			}
			public void hideAllmedicationsMenuMenuItems()
			{
				this.contextMenumedicationsMenuaddMedicationItem.setVisible(false);
				this.contextMenumedicationsMenuremoveMedicationItem.setVisible(false);
				this.contextMenumedicationsMenueditMedicationItem.setVisible(false);
			}
			private Menu contextMenumedicationsMenu;
			public MenuItem getmedicationsMenuaddMedicationItem()
			{
				return this.contextMenumedicationsMenuaddMedicationItem;
			}
			private MenuItem contextMenumedicationsMenuaddMedicationItem;
			public MenuItem getmedicationsMenuremoveMedicationItem()
			{
				return this.contextMenumedicationsMenuremoveMedicationItem;
			}
			private MenuItem contextMenumedicationsMenuremoveMedicationItem;
			public MenuItem getmedicationsMenueditMedicationItem()
			{
				return this.contextMenumedicationsMenueditMedicationItem;
			}
			private MenuItem contextMenumedicationsMenueditMedicationItem;
			public final class DischargeSummaryWardPacu implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 12;
				public static final int REMOVE = 13;
			}
			public void disableAllDischargeSummaryWardPacuMenuItems()
			{
				this.contextMenuDischargeSummaryWardPacuADDItem.setEnabled(false);
				this.contextMenuDischargeSummaryWardPacuREMOVEItem.setEnabled(false);
			}
			public void hideAllDischargeSummaryWardPacuMenuItems()
			{
				this.contextMenuDischargeSummaryWardPacuADDItem.setVisible(false);
				this.contextMenuDischargeSummaryWardPacuREMOVEItem.setVisible(false);
			}
			private Menu contextMenuDischargeSummaryWardPacu;
			public MenuItem getDischargeSummaryWardPacuADDItem()
			{
				return this.contextMenuDischargeSummaryWardPacuADDItem;
			}
			private MenuItem contextMenuDischargeSummaryWardPacuADDItem;
			public MenuItem getDischargeSummaryWardPacuREMOVEItem()
			{
				return this.contextMenuDischargeSummaryWardPacuREMOVEItem;
			}
			private MenuItem contextMenuDischargeSummaryWardPacuREMOVEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[209];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-ID", "ID_Service");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-SPECIALTY", "Specialty");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreService", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ID", "ID_Procedure");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURENAME", "ProcedureName");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-ISACTIVE", "IsActive");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-PROCEDURESTATUS", "ProcedureStatus");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-DURATIONINMINS", "DurationInMins");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-TCILAGTIME", "TCILagTime");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreProcedure", "BO-1003100019-LOS", "LOS");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-APPTSTATUSREAS", "ApptStatusReas");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PRIORITY", "Priority");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-TRANSPORTTYPE", "TransportType");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTREQUIRED", "IsTransportRequired");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ISTRANSPORTBOOKED", "IsTransportBooked");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOME", "Outcome");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-ARRIVALTIME", "ArrivalTime");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENTIME", "SeenTime");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CARECONTEXT", "CareContext");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-WASREVIEWED", "WasReviewed");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-SEENBY", "SeenBy");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-OUTCOMECOMMENTS", "OutcomeComments");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CONSMEDIATYPE", "ConsMediaType");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointment", "BO-1055100007-CATEGORY", "Category");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTENDTIME", "ApptEndTime");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-COMMENTS", "Comments");
			fields[129] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[130] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[131] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-CUSTOMPROCEDUREDURATION", "CustomProcedureDuration");
			fields[132] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-APPOINTMENTTCITIME", "AppointmentTCITime");
			fields[133] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PATHWAYCLOCK", "PathwayClock");
			fields[134] = new ims.framework.ReportField(this.context, "_cv_Scheduling.TheatreAppointment", "BO-1055100007-PASEVENT", "PASEvent");
			fields[135] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-ID", "ID_PatientMedication");
			fields[136] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-OTHERMEDICATIONTEXT", "OtherMedicationText");
			fields[137] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-PATIENT", "Patient");
			fields[138] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-FREQUENCY", "Frequency");
			fields[139] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-SOURCEOFINFORMATION", "SourceofInformation");
			fields[140] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-COMMENCEDDATE", "CommencedDate");
			fields[141] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-NODAYSSUPPLY", "NoDaysSupply");
			fields[142] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-BATCHNO", "BatchNo");
			fields[143] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-EXPIRYDATE", "ExpiryDate");
			fields[144] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-ISDISCONTINUED", "IsDiscontinued");
			fields[145] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-DIFFICULTIESWITHMED", "DifficultiesWithMed");
			fields[146] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-SUPPLIED", "Supplied");
			fields[147] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-INPOSSESSION", "InPossession");
			fields[148] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-ISMEDICATIONONADMISSION", "IsMedicationonAdmission");
			fields[149] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-ISDISCHARGEMEDICATION", "IsDischargeMedication");
			fields[150] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-CARECONTEXT", "CareContext");
			fields[151] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-ISINTTO", "IsInTTO");
			fields[152] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-ISDISCONTINUEDDATE", "IsDiscontinuedDate");
			fields[153] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-ISDISCONTINUEDREASON", "IsDiscontinuedReason");
			fields[154] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-ISDISCONTINUEDREASONTEXT", "IsDiscontinuedReasonText");
			fields[155] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-ISCOPIED", "IsCopied");
			fields[156] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-COMMENCEDBYTYPE", "CommencedByType");
			fields[157] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-DISCONTINUEDBYTYPE", "DiscontinuedByType");
			fields[158] = new ims.framework.ReportField(this.context, "_cv_RefMan.PatientMedication", "BO-1003100014-SELFMEDICATING", "SelfMedicating");
			fields[159] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-ID", "ID_CATSReferralStatus");
			fields[160] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-REFERRALSTATUS", "ReferralStatus");
			fields[161] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-AUTHORINGUSER", "AuthoringUser");
			fields[162] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-STATUSDATETIME", "StatusDateTime");
			fields[163] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-COMMENT", "Comment");
			fields[164] = new ims.framework.ReportField(this.context, "_cv_RefMan.CatsReferralStatus", "BO-1096100007-SECONDOPINIONCATEGORY", "SecondOpinionCategory");
			fields[165] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[166] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			fields[167] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingSession", "BO-1055100010-ID", "ID_Sch_Session");
			fields[168] = new ims.framework.ReportField(this.context, "_cv_Rotherham.AppointmentToLink", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[169] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingAppointmentRef", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__AppointmentToCancel_" + componentIdentifier, "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__AppointmentToCancel_" + componentIdentifier, "BO-1055100007-APPOINTMENTDATE", "AppointmentDate");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__AppointmentToCancel_" + componentIdentifier, "BO-1055100007-APPTSTATUS", "ApptStatus");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__AppointmentToCancel_" + componentIdentifier, "BO-1055100007-APPTSTARTTIME", "ApptStartTime");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__AppointmentToCancel_" + componentIdentifier, "BO-1055100007-REQUIRESREBOOK", "RequiresRebook");
			fields[175] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__AppointmentToCancel_" + componentIdentifier, "BO-1055100007-ISCABBOOKING", "IsCABBooking");
			fields[176] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-ID", "ID_DischargeSummaryPacuAndWard");
			fields[177] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-CATSREFERRAL", "CatsReferral");
			fields[178] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-DISCHARGEDATE", "DischargeDate");
			fields[179] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-DISCHARGETYPE", "DischargeType");
			fields[180] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-DISCHARGEEPISODE", "DischargeEpisode");
			fields[181] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-ISCURRENT", "IsCurrent");
			fields[182] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-ADMISSIONSUMMARY", "AdmissionSummary");
			fields[183] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-PROBLEMSANDNEEDS", "ProblemsAndNeeds");
			fields[184] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-ADDITIONALCOMMENTS", "AdditionalComments");
			fields[185] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-FOLLOWUPTYPE", "FollowupType");
			fields[186] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-FURTHERMANAGEMENTINSTRUCTIONS", "FurtherManagementInstructions");
			fields[187] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-MEDICALLYINCOMPLETE", "MedicallyIncomplete");
			fields[188] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-INCOMPLETENOOFDAYS", "IncompleteNoOfDays");
			fields[189] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-CURRENTONWARDREFERRAL", "CurrentOnwardReferral");
			fields[190] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__DischargeSummaryPacuAndWard_" + componentIdentifier, "BO-1096100034-ACTIONSFORGPANDCOMMUNITY", "ActionsforGPandCommunity");
			fields[191] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[192] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ISONLEAVE", "IsOnLeave");
			fields[193] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-COMMENTS", "Comments");
			fields[194] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ADMISSIONDATETIME", "AdmissionDateTime");
			fields[195] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[196] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-BEDNO", "BedNo");
			fields[197] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ADMISSIONTYPE", "AdmissionType");
			fields[198] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-ISMATERNITYINPATIENT", "IsMaternityInpatient");
			fields[199] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-REASONFORADMISSION", "ReasonForAdmission");
			fields[200] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-WARDTYPE", "WardType");
			fields[201] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-READMISSIONTYPE", "ReadmissionType");
			fields[202] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__Inpatient_" + componentIdentifier, "BO-1014100000-DISCHARGEREADYDATE", "DischargeReadyDate");
			fields[203] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__CurrentEditableRecord_" + componentIdentifier, "BO-1096100034-ID", "ID_DischargeSummaryPacuAndWard");
			fields[204] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__CurrentEditableRecord_" + componentIdentifier, "BO-1096100034-CATSREFERRAL", "CatsReferral");
			fields[205] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__CurrentEditableRecord_" + componentIdentifier, "BO-1096100034-DISCHARGEDATE", "DischargeDate");
			fields[206] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__CurrentEditableRecord_" + componentIdentifier, "BO-1096100034-DISCHARGETYPE", "DischargeType");
			fields[207] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__CurrentEditableRecord_" + componentIdentifier, "BO-1096100034-DISCHARGEEPISODE", "DischargeEpisode");
			fields[208] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.DischargeSummaryWardPacu.__internal_x_context__CurrentEditableRecord_" + componentIdentifier, "BO-1096100034-ISCURRENT", "IsCurrent");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
