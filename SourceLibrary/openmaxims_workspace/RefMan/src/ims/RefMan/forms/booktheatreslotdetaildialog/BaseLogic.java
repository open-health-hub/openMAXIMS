// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.booktheatreslotdetaildialog;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.RefMan.domain.BookTheatreSlotDetailDialog.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.RefMan.domain.BookTheatreSlotDetailDialog domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbExceededReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbExceededReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.KPIExceededReason existingInstance = (ims.RefMan.vo.lookups.KPIExceededReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbExceededReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.RefMan.vo.lookups.KPIExceededReason)
		{
			ims.RefMan.vo.lookups.KPIExceededReason instance = (ims.RefMan.vo.lookups.KPIExceededReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbExceededReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.RefMan.vo.lookups.KPIExceededReason existingInstance = (ims.RefMan.vo.lookups.KPIExceededReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbExceededReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbExceededReasonLookup()
	{
		this.form.cmbExceededReason().clear();
		ims.RefMan.vo.lookups.KPIExceededReasonCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getKPIExceededReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbExceededReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbExceededReasonLookupValue(int id)
	{
		ims.RefMan.vo.lookups.KPIExceededReason instance = ims.RefMan.vo.lookups.LookupHelper.getKPIExceededReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbExceededReason().setValue(instance);
	}
	protected final void defaultcmbExceededReasonLookupValue()
	{
		this.form.cmbExceededReason().setValue((ims.RefMan.vo.lookups.KPIExceededReason)domain.getLookupService().getDefaultInstance(ims.RefMan.vo.lookups.KPIExceededReason.class, engine.getFormName().getID(), ims.RefMan.vo.lookups.KPIExceededReason.TYPE_ID));
	}
	protected final void oncmbElectiveListReasonValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbElectiveListReason().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ElectiveListReason existingInstance = (ims.emergency.vo.lookups.ElectiveListReason)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbElectiveListReasonLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.emergency.vo.lookups.ElectiveListReason)
		{
			ims.emergency.vo.lookups.ElectiveListReason instance = (ims.emergency.vo.lookups.ElectiveListReason)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbElectiveListReasonLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.emergency.vo.lookups.ElectiveListReason existingInstance = (ims.emergency.vo.lookups.ElectiveListReason)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbElectiveListReason().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbElectiveListReasonLookup()
	{
		this.form.cmbElectiveListReason().clear();
		ims.emergency.vo.lookups.ElectiveListReasonCollection lookupCollection = ims.emergency.vo.lookups.LookupHelper.getElectiveListReason(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbElectiveListReason().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbElectiveListReasonLookupValue(int id)
	{
		ims.emergency.vo.lookups.ElectiveListReason instance = ims.emergency.vo.lookups.LookupHelper.getElectiveListReasonInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbElectiveListReason().setValue(instance);
	}
	protected final void defaultcmbElectiveListReasonLookupValue()
	{
		this.form.cmbElectiveListReason().setValue((ims.emergency.vo.lookups.ElectiveListReason)domain.getLookupService().getDefaultInstance(ims.emergency.vo.lookups.ElectiveListReason.class, engine.getFormName().getID(), ims.emergency.vo.lookups.ElectiveListReason.TYPE_ID));
	}
	protected final void oncmbIntendedManagementValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbIntendedManagement().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ManagementIntention existingInstance = (ims.core.vo.lookups.ManagementIntention)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbIntendedManagementLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.core.vo.lookups.ManagementIntention)
		{
			ims.core.vo.lookups.ManagementIntention instance = (ims.core.vo.lookups.ManagementIntention)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbIntendedManagementLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.core.vo.lookups.ManagementIntention existingInstance = (ims.core.vo.lookups.ManagementIntention)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbIntendedManagement().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbIntendedManagementLookup()
	{
		this.form.cmbIntendedManagement().clear();
		ims.core.vo.lookups.ManagementIntentionCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getManagementIntention(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbIntendedManagement().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbIntendedManagementLookupValue(int id)
	{
		ims.core.vo.lookups.ManagementIntention instance = ims.core.vo.lookups.LookupHelper.getManagementIntentionInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbIntendedManagement().setValue(instance);
	}
	protected final void defaultcmbIntendedManagementLookupValue()
	{
		this.form.cmbIntendedManagement().setValue((ims.core.vo.lookups.ManagementIntention)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.ManagementIntention.class, engine.getFormName().getID(), ims.core.vo.lookups.ManagementIntention.TYPE_ID));
	}
	protected final void oncmbAnaesTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbAnaesType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.AnaestheticType existingInstance = (ims.clinical.vo.lookups.AnaestheticType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbAnaesTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.clinical.vo.lookups.AnaestheticType)
		{
			ims.clinical.vo.lookups.AnaestheticType instance = (ims.clinical.vo.lookups.AnaestheticType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbAnaesTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.clinical.vo.lookups.AnaestheticType existingInstance = (ims.clinical.vo.lookups.AnaestheticType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbAnaesType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbAnaesTypeLookup()
	{
		this.form.cmbAnaesType().clear();
		ims.clinical.vo.lookups.AnaestheticTypeCollection lookupCollection = ims.clinical.vo.lookups.LookupHelper.getAnaestheticType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbAnaesType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbAnaesTypeLookupValue(int id)
	{
		ims.clinical.vo.lookups.AnaestheticType instance = ims.clinical.vo.lookups.LookupHelper.getAnaestheticTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbAnaesType().setValue(instance);
	}
	protected final void defaultcmbAnaesTypeLookupValue()
	{
		this.form.cmbAnaesType().setValue((ims.clinical.vo.lookups.AnaestheticType)domain.getLookupService().getDefaultInstance(ims.clinical.vo.lookups.AnaestheticType.class, engine.getFormName().getID(), ims.clinical.vo.lookups.AnaestheticType.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.RefMan.domain.BookTheatreSlotDetailDialog domain;
}
