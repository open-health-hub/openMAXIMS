// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.booktheatreslotdetaildialog;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbExceededReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.lookups.KPIExceededReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.lookups.KPIExceededReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.lookups.KPIExceededReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.lookups.KPIExceededReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.lookups.KPIExceededReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.lookups.KPIExceededReason getValue()
		{
			return (ims.RefMan.vo.lookups.KPIExceededReason)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.lookups.KPIExceededReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbElectiveListReasonComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.emergency.vo.lookups.ElectiveListReason value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.emergency.vo.lookups.ElectiveListReason value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.emergency.vo.lookups.ElectiveListReason value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.emergency.vo.lookups.ElectiveListReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.emergency.vo.lookups.ElectiveListReason value)
		{
			return super.control.removeRow(value);
		}
		public ims.emergency.vo.lookups.ElectiveListReason getValue()
		{
			return (ims.emergency.vo.lookups.ElectiveListReason)super.control.getValue();
		}
		public void setValue(ims.emergency.vo.lookups.ElectiveListReason value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbIntendedManagementComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ManagementIntention value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ManagementIntention value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ManagementIntention value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ManagementIntention value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ManagementIntention value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ManagementIntention getValue()
		{
			return (ims.core.vo.lookups.ManagementIntention)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ManagementIntention value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbWardComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.LocationLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.LocationLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.LocationLiteVo getValue()
		{
			return (ims.core.vo.LocationLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.LocationLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbAnaesTypeComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.clinical.vo.lookups.AnaestheticType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.clinical.vo.lookups.AnaestheticType value)
		{
			return super.control.removeRow(value);
		}
		public ims.clinical.vo.lookups.AnaestheticType getValue()
		{
			return (ims.clinical.vo.lookups.AnaestheticType)super.control.getValue();
		}
		public void setValue(ims.clinical.vo.lookups.AnaestheticType value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbProcedureComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.ProcedureLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.ProcedureLiteVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.ProcedureLiteVo getValue()
		{
			return (ims.core.vo.ProcedureLiteVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.ProcedureLiteVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbListOwnersComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.vo.interfaces.IMos value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.vo.interfaces.IMos value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.vo.interfaces.IMos value)
		{
			return super.control.removeRow(value);
		}
		public ims.vo.interfaces.IMos getValue()
		{
			return (ims.vo.interfaces.IMos)super.control.getValue();
		}
		public void setValue(ims.vo.interfaces.IMos value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("Scheduling.BookTheatreSlotDialogData", "_cv_Scheduling.BookTheatreSlotDialogData").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Scheduling.BookTheatreSlotDialogData' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(544, 640);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Label Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 248, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comments :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 354, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Reason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 248, 108, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Exceeded Reason:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 508, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "TCI Notes :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 384, 113, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Elective List Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 322, 138, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Intended Management:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 298, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bed :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 274, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ward :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 288, 218, 105, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To Come in Date :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 288, 186, 126, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Second Date Offered:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 186, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Earliest Date Offered :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 144, 125, 173, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Selected Anaesthetic Type", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 125, 109, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Anaesthetic Type :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 368, 26, 69, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "<apptime>", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 312, 26, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Time :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 59, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Procedure :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 416, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Comments :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 218, 106, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To Come in Time :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 156, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "EROD :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 92, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Consultant :", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 224, 26, 31, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Mins", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 26, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Appointment Length :", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 128, 608, 136, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Resource Availability", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 8, 608, 112, 23, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Summary", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 380, 608, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Book", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 460, 608, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 144, 246, 392, 346, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 144, 296, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 144, 508, 392, 84, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 144, 416, 392, 84, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(1000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 416, 216, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 416, 184, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 144, 184, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 144, 246, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbExceededReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbExceededReasonTemp);
		cmbExceededReasonComboBox cmbExceededReason = (cmbExceededReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbExceededReasonComboBox.class, m_cmbExceededReasonTemp);
		super.addComboBox(cmbExceededReason);
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 144, 352, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbElectiveListReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbElectiveListReasonTemp);
		cmbElectiveListReasonComboBox cmbElectiveListReason = (cmbElectiveListReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbElectiveListReasonComboBox.class, m_cmbElectiveListReasonTemp);
		super.addComboBox(cmbElectiveListReason);
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 144, 320, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbIntendedManagementTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbIntendedManagementTemp);
		cmbIntendedManagementComboBox cmbIntendedManagement = (cmbIntendedManagementComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIntendedManagementComboBox.class, m_cmbIntendedManagementTemp);
		super.addComboBox(cmbIntendedManagement);
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 144, 272, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbWardTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbWardTemp);
		cmbWardComboBox cmbWard = (cmbWardComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbWardComboBox.class, m_cmbWardTemp);
		super.addComboBox(cmbWard);
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 144, 123, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbAnaesTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAnaesTypeTemp);
		cmbAnaesTypeComboBox cmbAnaesType = (cmbAnaesTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAnaesTypeComboBox.class, m_cmbAnaesTypeTemp);
		super.addComboBox(cmbAnaesType);
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 144, 57, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbProcedureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbProcedureTemp);
		cmbProcedureComboBox cmbProcedure = (cmbProcedureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProcedureComboBox.class, m_cmbProcedureTemp);
		super.addComboBox(cmbProcedure);
		RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 144, 90, 392, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbListOwnersTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbListOwnersTemp);
		cmbListOwnersComboBox cmbListOwners = (cmbListOwnersComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbListOwnersComboBox.class, m_cmbListOwnersTemp);
		super.addComboBox(cmbListOwners);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 144, 156, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));

		// Time Controls
		RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 144, 216, 80, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, null, Boolean.TRUE, ""}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 144, 24, 64, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, new Integer(9)}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 504, 376, 32, 32, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled16, this.getImages().Core.FindEnabled16, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));

		// HTML Viewer Controls
		RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 144, 382, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Label lblCommentsNoEL()
	{
		return (Label)super.getControl(0);
	}
	public Label lblElectiveListReason()
	{
		return (Label)super.getControl(1);
	}
	public Label lblExceededReason()
	{
		return (Label)super.getControl(2);
	}
	public Label lblTCINotes()
	{
		return (Label)super.getControl(3);
	}
	public Label lblElectiveListName()
	{
		return (Label)super.getControl(4);
	}
	public Label lblIntendedManagement()
	{
		return (Label)super.getControl(5);
	}
	public Label lblBed()
	{
		return (Label)super.getControl(6);
	}
	public Label lblWard()
	{
		return (Label)super.getControl(7);
	}
	public Label lblToComeInDate()
	{
		return (Label)super.getControl(8);
	}
	public Label lblERODDate2()
	{
		return (Label)super.getControl(9);
	}
	public Label lblERODDate1()
	{
		return (Label)super.getControl(10);
	}
	public Label lblAnaestheticTypeText()
	{
		return (Label)super.getControl(11);
	}
	public Label lblApptTime()
	{
		return (Label)super.getControl(13);
	}
	public Label lblComments()
	{
		return (Label)super.getControl(16);
	}
	public Label lblToComeInTime()
	{
		return (Label)super.getControl(17);
	}
	public Label lblEROD()
	{
		return (Label)super.getControl(18);
	}
	public Button btnResource()
	{
		return (Button)super.getControl(22);
	}
	public Button btnDashboard()
	{
		return (Button)super.getControl(23);
	}
	public Button btnBook()
	{
		return (Button)super.getControl(24);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(25);
	}
	public TextBox txtCommentsNoEL()
	{
		return (TextBox)super.getControl(26);
	}
	public TextBox txtBed()
	{
		return (TextBox)super.getControl(27);
	}
	public TextBox txtTCINotes()
	{
		return (TextBox)super.getControl(28);
	}
	public TextBox txtComments()
	{
		return (TextBox)super.getControl(29);
	}
	public DateControl dteToComeIn()
	{
		return (DateControl)super.getControl(30);
	}
	public DateControl dteEROD2()
	{
		return (DateControl)super.getControl(31);
	}
	public DateControl dteErod()
	{
		return (DateControl)super.getControl(32);
	}
	public cmbExceededReasonComboBox cmbExceededReason()
	{
		return (cmbExceededReasonComboBox)super.getComboBox(0);
	}
	public cmbElectiveListReasonComboBox cmbElectiveListReason()
	{
		return (cmbElectiveListReasonComboBox)super.getComboBox(1);
	}
	public cmbIntendedManagementComboBox cmbIntendedManagement()
	{
		return (cmbIntendedManagementComboBox)super.getComboBox(2);
	}
	public cmbWardComboBox cmbWard()
	{
		return (cmbWardComboBox)super.getComboBox(3);
	}
	public cmbAnaesTypeComboBox cmbAnaesType()
	{
		return (cmbAnaesTypeComboBox)super.getComboBox(4);
	}
	public cmbProcedureComboBox cmbProcedure()
	{
		return (cmbProcedureComboBox)super.getComboBox(5);
	}
	public cmbListOwnersComboBox cmbListOwners()
	{
		return (cmbListOwnersComboBox)super.getComboBox(6);
	}
	public CheckBox chkErod()
	{
		return (CheckBox)super.getControl(40);
	}
	public TimeControl timTCI()
	{
		return (TimeControl)super.getControl(41);
	}
	public IntBox intApptLength()
	{
		return (IntBox)super.getControl(42);
	}
	public ImageButton imbSelectElectiveListConfig()
	{
		return (ImageButton)super.getControl(43);
	}
	public HTMLViewer htmElectiveListName()
	{
		return (HTMLViewer)super.getControl(44);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
			RefMan = new RefManForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				PrintAppointment = new LocalFormName(114163);
			}
			public final FormName PrintAppointment;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				SelectElectiveListConfiguration = new LocalFormName(134222);
			}
			public final FormName SelectElectiveListConfiguration;
		}

		public SchedulingForms Scheduling;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindEnabled16 = new ImageHelper(102164, "Images/Core/Find.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindEnabled16;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_ApptInPastMessageBoxId = new ims.framework.ContextVariable("ApptInPastMessageBoxId", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ApptInPastMessageBoxId_" + componentIdentifier + "");
			cxl_KPIMessageBoxId = new ims.framework.ContextVariable("KPIMessageBoxId", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__KPIMessageBoxId_" + componentIdentifier + "");
			cxl_Sch_Booking = new ims.framework.ContextVariable("Sch_Booking", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__Sch_Booking_" + componentIdentifier + "");
			cxl_ReferralCareContext = new ims.framework.ContextVariable("ReferralCareContext", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralCareContext_" + componentIdentifier + "");
			cxl_HasTheatreEROD = new ims.framework.ContextVariable("HasTheatreEROD", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__HasTheatreEROD_" + componentIdentifier + "");
			cxl_ReferralERODForRebook = new ims.framework.ContextVariable("ReferralERODForRebook", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier + "");
			cxl_CatsReferral = new ims.framework.ContextVariable("CatsReferral", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__CatsReferral_" + componentIdentifier + "");
			cxl_ReasonableDateMessageBoxId = new ims.framework.ContextVariable("ReasonableDateMessageBoxId", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReasonableDateMessageBoxId_" + componentIdentifier + "");
			cxl_PatientElectiveList = new ims.framework.ContextVariable("PatientElectiveList", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier + "");
			cxl_PatientElectiveListIsNotMandatory = new ims.framework.ContextVariable("PatientElectiveListIsNotMandatory", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveListIsNotMandatory_" + componentIdentifier + "");
			cxl_Elective = new ims.framework.ContextVariable("Elective", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__Elective_" + componentIdentifier + "");
			cxl_ConfirmCreateNewPatientElectiveListMessageBoxID = new ims.framework.ContextVariable("ConfirmCreateNewPatientElectiveListMessageBoxID", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ConfirmCreateNewPatientElectiveListMessageBoxID_" + componentIdentifier + "");
			cxl_ElectiveListConfigurationWasSelectedFromDialog = new ims.framework.ContextVariable("ElectiveListConfigurationWasSelectedFromDialog", prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ElectiveListConfigurationWasSelectedFromDialog_" + componentIdentifier + "");
		}
		
		public boolean getApptInPastMessageBoxIdIsNotNull()
		{
			return !cxl_ApptInPastMessageBoxId.getValueIsNull(context);
		}
		public Integer getApptInPastMessageBoxId()
		{
			return (Integer)cxl_ApptInPastMessageBoxId.getValue(context);
		}
		public void setApptInPastMessageBoxId(Integer value)
		{
			cxl_ApptInPastMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ApptInPastMessageBoxId = null;
		public boolean getKPIMessageBoxIdIsNotNull()
		{
			return !cxl_KPIMessageBoxId.getValueIsNull(context);
		}
		public Integer getKPIMessageBoxId()
		{
			return (Integer)cxl_KPIMessageBoxId.getValue(context);
		}
		public void setKPIMessageBoxId(Integer value)
		{
			cxl_KPIMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_KPIMessageBoxId = null;
		public boolean getSch_BookingIsNotNull()
		{
			return !cxl_Sch_Booking.getValueIsNull(context);
		}
		public ims.scheduling.vo.Sch_BookingTheatreVo getSch_Booking()
		{
			return (ims.scheduling.vo.Sch_BookingTheatreVo)cxl_Sch_Booking.getValue(context);
		}
		public void setSch_Booking(ims.scheduling.vo.Sch_BookingTheatreVo value)
		{
			cxl_Sch_Booking.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Sch_Booking = null;
		public boolean getReferralCareContextIsNotNull()
		{
			return !cxl_ReferralCareContext.getValueIsNull(context);
		}
		public ims.core.admin.vo.CareContextRefVo getReferralCareContext()
		{
			return (ims.core.admin.vo.CareContextRefVo)cxl_ReferralCareContext.getValue(context);
		}
		public void setReferralCareContext(ims.core.admin.vo.CareContextRefVo value)
		{
			if(value != null && (value.getBoId() == null || value.getBoId().intValue() < 1))
				throw new ims.framework.exceptions.CodingRuntimeException("Invalid domain object id for 'ReferralCareContext' RefVo context variable.");
			if(value == null)
				cxl_ReferralCareContext.setValue(context, null);
			else
				cxl_ReferralCareContext.setValue(context, new ims.core.admin.vo.CareContextRefVo(value.getBoId(), value.getBoVersion()));
		}
		private ims.framework.ContextVariable cxl_ReferralCareContext = null;
		public boolean getHasTheatreERODIsNotNull()
		{
			return !cxl_HasTheatreEROD.getValueIsNull(context);
		}
		public Boolean getHasTheatreEROD()
		{
			return (Boolean)cxl_HasTheatreEROD.getValue(context);
		}
		public void setHasTheatreEROD(Boolean value)
		{
			cxl_HasTheatreEROD.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_HasTheatreEROD = null;
		public boolean getReferralERODForRebookIsNotNull()
		{
			return !cxl_ReferralERODForRebook.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralERODVo getReferralERODForRebook()
		{
			return (ims.RefMan.vo.ReferralERODVo)cxl_ReferralERODForRebook.getValue(context);
		}
		public void setReferralERODForRebook(ims.RefMan.vo.ReferralERODVo value)
		{
			cxl_ReferralERODForRebook.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReferralERODForRebook = null;
		public boolean getCatsReferralIsNotNull()
		{
			return !cxl_CatsReferral.getValueIsNull(context);
		}
		public ims.RefMan.vo.CatsReferralForNewElectivListEntryVo getCatsReferral()
		{
			return (ims.RefMan.vo.CatsReferralForNewElectivListEntryVo)cxl_CatsReferral.getValue(context);
		}
		public void setCatsReferral(ims.RefMan.vo.CatsReferralForNewElectivListEntryVo value)
		{
			cxl_CatsReferral.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CatsReferral = null;
		public boolean getReasonableDateMessageBoxIdIsNotNull()
		{
			return !cxl_ReasonableDateMessageBoxId.getValueIsNull(context);
		}
		public Integer getReasonableDateMessageBoxId()
		{
			return (Integer)cxl_ReasonableDateMessageBoxId.getValue(context);
		}
		public void setReasonableDateMessageBoxId(Integer value)
		{
			cxl_ReasonableDateMessageBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReasonableDateMessageBoxId = null;
		public boolean getPatientElectiveListIsNotNull()
		{
			return !cxl_PatientElectiveList.getValueIsNull(context);
		}
		public ims.RefMan.vo.PatientElectiveListVo getPatientElectiveList()
		{
			return (ims.RefMan.vo.PatientElectiveListVo)cxl_PatientElectiveList.getValue(context);
		}
		public void setPatientElectiveList(ims.RefMan.vo.PatientElectiveListVo value)
		{
			cxl_PatientElectiveList.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveList = null;
		public boolean getPatientElectiveListIsNotMandatoryIsNotNull()
		{
			return !cxl_PatientElectiveListIsNotMandatory.getValueIsNull(context);
		}
		public Boolean getPatientElectiveListIsNotMandatory()
		{
			return (Boolean)cxl_PatientElectiveListIsNotMandatory.getValue(context);
		}
		public void setPatientElectiveListIsNotMandatory(Boolean value)
		{
			cxl_PatientElectiveListIsNotMandatory.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PatientElectiveListIsNotMandatory = null;
		public boolean getElectiveIsNotNull()
		{
			return !cxl_Elective.getValueIsNull(context);
		}
		public Boolean getElective()
		{
			return (Boolean)cxl_Elective.getValue(context);
		}
		public void setElective(Boolean value)
		{
			cxl_Elective.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Elective = null;
		public boolean getConfirmCreateNewPatientElectiveListMessageBoxIDIsNotNull()
		{
			return !cxl_ConfirmCreateNewPatientElectiveListMessageBoxID.getValueIsNull(context);
		}
		public Integer getConfirmCreateNewPatientElectiveListMessageBoxID()
		{
			return (Integer)cxl_ConfirmCreateNewPatientElectiveListMessageBoxID.getValue(context);
		}
		public void setConfirmCreateNewPatientElectiveListMessageBoxID(Integer value)
		{
			cxl_ConfirmCreateNewPatientElectiveListMessageBoxID.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfirmCreateNewPatientElectiveListMessageBoxID = null;
		public boolean getElectiveListConfigurationWasSelectedFromDialogIsNotNull()
		{
			return !cxl_ElectiveListConfigurationWasSelectedFromDialog.getValueIsNull(context);
		}
		public Boolean getElectiveListConfigurationWasSelectedFromDialog()
		{
			return (Boolean)cxl_ElectiveListConfigurationWasSelectedFromDialog.getValue(context);
		}
		public void setElectiveListConfigurationWasSelectedFromDialog(Boolean value)
		{
			cxl_ElectiveListConfigurationWasSelectedFromDialog.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ElectiveListConfigurationWasSelectedFromDialog = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[148];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.Sch_BookingTheatre", "BO-1055100006-ID", "ID_Sch_Booking");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.Sch_BookingTheatre", "BO-1055100006-BOOKINGCOMMENTS", "BookingComments");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PATIENT", "Patient");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-REFERRAL", "Referral");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-EPISODEOFCARE", "EpisodeOfCare");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-DATEONLIST", "DateOnList");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-ORIGINALDECISIONDATE", "OriginalDecisionDate");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PRIORITY", "Priority");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-TRANSPORT", "Transport");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-EROD", "EROD");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PATHWAYCLOCK", "PathwayClock");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-TCICANCELLEDBYPROVIDER", "TCICancelledByProvider");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-BED", "Bed");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-LANGUAGE", "Language");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-PATIENTSTATUS", "PatientStatus");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedPatientElectiveList", "BO-1014100020-REQUIRESTCIBY", "RequiresTCIBy");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-ID", "ID_ElectiveListConfiguration");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-WAITINGLISTNAME", "WaitingListName");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-STARTDATE", "StartDate");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-ENDDATE", "EndDate");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-WAITINGLISTCODE", "WaitingListCode");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_RefMan.SelectedWaitingListConfig", "BO-1028100072-ISACTIVE", "IsActive");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ID", "ID_ReferralEROD");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ERODTYPE", "ERODType");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-SEQUENCE", "Sequence");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-ISACTIVE", "IsActive");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_RefMan.ReferralEROD", "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-ID", "ID_Sch_Booking");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__Sch_Booking_" + componentIdentifier, "BO-1055100006-BOOKINGCOMMENTS", "BookingComments");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralCareContext_" + componentIdentifier, "BO-1004100019-ID", "ID_CareContext");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ID", "ID_ReferralEROD");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ERODDATE1", "ERODDate1");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ERODDATE2", "ERODDate2");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-PATAVAILFROMDATE", "PatAvailFromDate");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-REASONABLEOFFER", "ReasonableOffer");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ERODTYPE", "ERODType");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-SEQUENCE", "Sequence");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-ISACTIVE", "IsActive");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__ReferralERODForRebook_" + componentIdentifier, "BO-1096100062-PATHWAYCLOCK", "PathWayClock");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-ID", "ID_CatsReferral");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__CatsReferral_" + componentIdentifier, "BO-1004100035-PATIENT", "Patient");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ID", "ID_PatientElectiveList");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENT", "Patient");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REFERRAL", "Referral");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-EPISODEOFCARE", "EpisodeOfCare");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-DATEONLIST", "DateOnList");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ORIGINALDECISIONDATE", "OriginalDecisionDate");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTENDEDMANAGEMENT", "IntendedManagement");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ANTICIPATEDSTAY", "AnticipatedStay");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PRIORITY", "Priority");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-OPERATIVEPROCEDURESTATUS", "OperativeProcedureStatus");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-INTERPRETATORREQUIRED", "InterpretatorRequired");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORT", "Transport");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVEADMISSIONTYPE", "ElectiveAdmissionType");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-EROD", "EROD");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-ELECTIVELISTREASON", "ElectiveListReason");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATHWAYCLOCK", "PathwayClock");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TCICANCELLEDBYPROVIDER", "TCICancelledByProvider");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-BED", "Bed");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-TRANSPORTREQUIRED", "TransportRequired");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PROCEDUREDESCRIPTION", "ProcedureDescription");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-LANGUAGE", "Language");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-PATIENTSTATUS", "PatientStatus");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.BookTheatreSlotDetailDialog.__internal_x_context__PatientElectiveList_" + componentIdentifier, "BO-1014100020-REQUIRESTCIBY", "RequiresTCIBy");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
