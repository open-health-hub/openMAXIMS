// This code was generated by Peter Martin using IMS Development Environment (version 1.70 build 3545.21176)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.clinicalnotescomponent;

import ims.RefMan.forms.clinicalnotescomponent.GenForm.grdAlergiesRow;
import ims.RefMan.vo.CatsReferralRefVo;
import ims.RefMan.vo.ConsultationClinicalNotesLiteVo;
import ims.RefMan.vo.ConsultationClinicalNotesVo;
import ims.configuration.AppRight;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientAllergy;
import ims.core.vo.PatientAllergyCollection;
import ims.core.vo.PatientNoAllergyInfoVo;
import ims.core.vo.enums.AuthoringLabelType;
import ims.core.vo.lookups.PatientAllergyStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	public void initialize(Boolean displayReadOnly, ConsultationClinicalNotesLiteVo value) 
	{
		form.getLocalContext().setDisplayReadOnly(displayReadOnly);
		form.ccInitiallySeen().setLabels(AuthoringLabelType.INITIALLY);
		form.ccLastUpdating().setLabels(AuthoringLabelType.LAST);
		
		ConsultationClinicalNotesVo note = null;
		if (value != null && value.getCatsReferralIsNotNull()) 
		{
			note = domain.getNote(value);
			populateScreenFromData(note);							
			form.ccInitiallySeen().setValue(note.getInitiallySeenBy());			
			enableInitiallySeenComponent(false);
			form.ccLastUpdating().setValue(note.getLastUpdatingHCP());
			form.setMode(FormMode.VIEW);
			return;
		}
		
		initializeScreen();
	}
	
	private void enableInitiallySeenComponent(Boolean enabled)
	{
		form.ccInitiallySeen().setEnabledAuthoringHCP(enabled);
		form.ccInitiallySeen().setEnabledDateTime(enabled);
	}
	
	private void initializeHasNoKnownAllergies() 
	{
		PatientNoAllergyInfoVo voPatientNoAllergyInfo = domain.getPatientNoAllergyInfo(form.getGlobalContext().Core.getPatientShort());
		if(voPatientNoAllergyInfo != null
				&& voPatientNoAllergyInfo.getAllergyStatusIsNotNull() 
				&& voPatientNoAllergyInfo.getAllergyStatus().equals(PatientAllergyStatus.NOKNOWNALLERGIES))
				form.chkNoAllergies().setValue(true);
	}

	private void updateControlState()
	{
		boolean isViewMode = form.getMode().equals(FormMode.VIEW);
		boolean isReadOnlyMode = form.getLocalContext().getDisplayReadOnlyIsNotNull() ? form.getLocalContext().getDisplayReadOnly() : false;
		if (isViewMode) 
		{
			form.btnEdit().setVisible(isViewMode && !isReadOnlyMode);
		}
		if (isReadOnlyMode) 
		{
			form.getContextMenus().RefMan.disableAllallergyMenuMenuItems();
		}
		
		if (!isViewMode)
			form.chkNoAllergies().setEnabled( form.getLocalContext().getConsultationClinicalNotesVoIsNotNull() 
												? true 
												//? form.getLocalContext().getConsultationClinicalNotesVo().getHasNoKnownAllergies().booleanValue() 
												: (form.getLocalContext().getConsultationClinicalNotesVo() == null 
													&& form.getLocalContext().getPatientAllergyCollectionIsNotNull() 
													&& form.getLocalContext().getPatientAllergyCollection().size() > 0 ? false : true));
			
	}
	
	public void initializeScreen()
	{
		form.getLocalContext().setConsultationClinicalNotesVo(null);
		if(form.getGlobalContext().Core.getPatientShortIsNotNull())
				form.getLocalContext().setPatientAllergyCollection(domain.listPatientAllergies(form.getGlobalContext().Core.getPatientShort()));
		form.ccInitiallySeen().initializeComponent();
		enableInitiallySeenComponent(engine.hasRight(AppRight.CAN_EDIT_INITIALLY_SEEN_BY));
		form.ccLastUpdating().initializeComponent();
		form.setMode(FormMode.VIEW);
		
		initializeHasNoKnownAllergies();
		
		open();
	}
	private void open() 
	{
		CatsReferralRefVo currentCatsReferral = form.getGlobalContext().RefMan.getCatsReferral();
		ConsultationClinicalNotesVo voNotes = domain.getConsultationClinicalNotesVo(currentCatsReferral);
		form.getLocalContext().setConsultationClinicalNotesVo(voNotes);
		clearScreen();
		if(voNotes!=null)
			populateScreenFromData(voNotes);
		else
		{
			initializeHasNoKnownAllergies();
			form.ccInitiallySeen().initializeComponent();
			form.ccLastUpdating().initializeComponent();
		}
		
		form.setMode(FormMode.VIEW);
	}
	@Override
	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().RefMan.hideAllallergyMenuMenuItems();
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.VIEW);
		}
		else if (form.getMode().equals(FormMode.EDIT))
		{
			form.getContextMenus().RefMan.getallergyMenuaddItemItem().setVisible(!form.chkNoAllergies().getValue());
			
			form.grdAlergies().setEnabled(!form.chkNoAllergies().getValue());
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.EDIT);
		}
		updateControlState();
		form.fireCustomControlValueChanged();
	}
	@Override
	protected void onbtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open(); 
	}
	@Override
	protected void onbtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(save())
			open();
	}
	private boolean save() {
		ConsultationClinicalNotesVo voNotes = form.getLocalContext().getConsultationClinicalNotesVo();
		if(voNotes==null)
			voNotes = new ConsultationClinicalNotesVo();
		
		voNotes = populateDataFromScreen(voNotes);
					
		String [] errors = voNotes.validate();
		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}

		try 
		{
			form.getLocalContext().setConsultationClinicalNotesVo(domain.saveConsultationClinicalNotesVo(voNotes));
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		} 
		
		if(form.getGlobalContext().Core.getPatientShort() != null) //wdev-10534
			form.getGlobalContext().Core.setPatientShort(domain.getPatientShort(form.getGlobalContext().Core.getPatientShort()));	//wdev-10534
		
		return true;
	}
	
	private ConsultationClinicalNotesVo populateDataFromScreen(ConsultationClinicalNotesVo voNotes) 
	{
		if(voNotes == null)
			voNotes = new ims.RefMan.vo.ConsultationClinicalNotesVo();
		
		voNotes.setID_ConsultationClinicalNotes(null);
		voNotes.setHasNoKnownAllergies(new Boolean(form.chkNoAllergies().getValue()));
		voNotes.setIncludeNotesInGpReport(new Boolean(form.chkIncludeClinicalNotes().getValue()));
		
		if (form.chkYes().getValue())
			voNotes.setHealthQuestionnaireCompleted(true);
		else if (form.chkNo().getValue() || (!form.chkYes().getValue() && !form.chkNo().getValue()))
			voNotes.setHealthQuestionnaireCompleted(false);		
		
		voNotes.setHistoryPresentingComplaint(form.richTextComplaintHistory().getValue());		
		voNotes.setExamination(form.richTextExamination().getValue());
		voNotes.setRelevantPMH(form.richTextRelevantPastMedicalHistory().getValue());
		voNotes.setOtherRelevantHistory(form.richTextOtherRelevantHistory().getValue());
		voNotes.setRelevantMedication(form.richTextRelevantMedication().getValue());
		voNotes.setClinicalImpression(form.richTextClinicalImpression().getValue());
		
		PatientAllergyCollection coll = new ims.core.vo.PatientAllergyCollection();
		for(int x = 0; x < form.grdAlergies().getRows().size(); x++)
		{
			PatientAllergy rowValue = new PatientAllergy();
			if(form.grdAlergies().getRows().get(x).getValue() instanceof PatientAllergy)
			{
				rowValue = (PatientAllergy)form.grdAlergies().getRows().get(x).getValue();
				coll.add(rowValue);
			}
		}
		if(coll.size()>0)
			voNotes.setAllergies(coll);
		else	
			voNotes.setAllergies(null);
		
		voNotes.setSeeScannedNotes(form.chkSeeScannedNotes().getValue());
		voNotes.setNotesDictated(form.chkNoteDicated().getValue());
		voNotes.setIncludeNotesInGpReport(form.chkIncludeClinicalNotes().getValue());
	
		voNotes.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		
		voNotes.setInitiallySeenBy(form.ccInitiallySeen().getValue());
		voNotes.setLastUpdatingHCP(form.ccLastUpdating().getValue());
		voNotes.setRecordingInformation(populateRecordinfInfo());
		

		return voNotes;
	}
	
	private AuthoringInformationVo populateRecordinfInfo()
	{
		AuthoringInformationVo authoring = new AuthoringInformationVo();
		authoring.setAuthoringDateTime(new DateTime());
		
		HcpLiteVo hcpVo = new HcpLiteVo();
		hcpVo.setID_Hcp(engine.getLoggedInUser().getHcpId());
		hcpVo.setMos(domain.getMosUser() != null ? (MemberOfStaffLiteVo) domain.getMosUser() : null);
		
		authoring.setAuthoringHcp(hcpVo);
		
		return authoring;
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		if (sender.equals(form.grdAlergies()))
		{
			switch (menuItemID)
			{
				case GenForm.ContextMenus.RefManNamespace.allergyMenu.addItem :
					
					if (domain.getHcpLiteUser() == null)
					{
						engine.showMessage("Logged in user is not a HCP.");						
						return;
					}
					
					PatientAllergyCollection coll = new PatientAllergyCollection();
					for (int i = 0; i < form.grdAlergies().getRows().size(); i++) 
					{
						coll.add(form.grdAlergies().getRows().get(i).getValue());
					}
					form.getGlobalContext().Core.setAllergiesAtConsultation(coll);
					engine.open(form.getForms().Clinical.AllergiesDialog);
					break;

				case GenForm.ContextMenus.RefManNamespace.allergyMenu.removeItem :
					removeAllergy();
					break;
				default :
			}
		}
	}
		
	private void removeAllergy() 
	{		
		form.grdAlergies().getRows().remove(form.grdAlergies().getSelectedRowIndex());
		form.getContextMenus().RefMan.getallergyMenuremoveItemItem().setVisible(false);
	}
	
	public void populateScreenFromData(ims.RefMan.vo.ConsultationClinicalNotesVo value)
	{
		clearScreen();
		if(value == null)
			return;

		if(value.getHasNoKnownAllergiesIsNotNull())
			form.chkNoAllergies().setValue(value.getHasNoKnownAllergies().booleanValue());
	
		if(value.getIncludeNotesInGpReportIsNotNull())
			form.chkIncludeClinicalNotes().setValue(value.getIncludeNotesInGpReport().booleanValue());

		form.richTextComplaintHistory().setValue(value.getHistoryPresentingComplaint());
		form.richTextExamination().setValue(value.getExamination());
		form.richTextRelevantPastMedicalHistory().setValue(value.getRelevantPMH());
		form.richTextOtherRelevantHistory().setValue(value.getOtherRelevantHistory());
		form.richTextRelevantMedication().setValue(value.getRelevantMedication());
		form.richTextClinicalImpression().setValue(value.getClinicalImpression());
				
		if(value.getHealthQuestionnaireCompletedIsNotNull() &&
				value.getHealthQuestionnaireCompleted()) {
			form.chkYes().setValue(true);
			form.chkNo().setValue(false);
		}
		else {
			form.chkNo().setValue(true);
			form.chkYes().setValue(false);
		}
		
		
		if (value != null)
		{			
			if(value.getAllergiesIsNotNull())
				form.grdAlergies().getRows().clear();				
			for (int i = 0; i < value.getAllergies().size(); i++)
			{					
				grdAlergiesRow row = form.grdAlergies().getRows().newRow();
			
				if(value.getAllergies().get(i).getAllergenDescriptionIsNotNull())
					row.setColAllergy(value.getAllergies().get(i).getAllergenDescription());											
				if(value.getAllergies().get(i).getAuthoringInformationIsNotNull() && value.getAllergies().get(i).getAuthoringInformation().getAuthoringHcpIsNotNull())
					row.setColAuthoringHCP(value.getAllergies().get(i).getAuthoringInformation().getAuthoringHcp().toString());					
				
				row.setValue(value.getAllergies().get(i));
			}		
		}
		
		form.chkSeeScannedNotes().setValue(value.getSeeScannedNotesIsNotNull() && value.getSeeScannedNotes());		
		form.chkNoteDicated().setValue(value.getNotesDictatedIsNotNull() && value.getNotesDictated());
		form.chkIncludeClinicalNotes().setValue(value.getIncludeNotesInGpReportIsNotNull() ? value.getIncludeNotesInGpReport() : false);
	
		form.ccInitiallySeen().setValue(value.getInitiallySeenBy());
		form.ccLastUpdating().setValue(value.getLastUpdatingHCP());
	}

	protected void clearScreen()
	{
		form.chkNoAllergies().setValue(false);
		form.chkIncludeClinicalNotes().setValue(false);
		form.chkNoteDicated().setValue(false); //WDEV-13769
		form.chkSeeScannedNotes().setValue(false); //WDEV-13769
		
		form.richTextComplaintHistory().setValue(null);
		form.richTextExamination().setValue(null);
		form.richTextRelevantPastMedicalHistory().setValue(null);
		form.richTextOtherRelevantHistory().setValue(null);
		form.richTextRelevantMedication().setValue(null);
		form.richTextClinicalImpression().setValue(null);		
		form.grdAlergies().getRows().clear();
		form.chkYes().setValue(null);
		form.chkNo().setValue(null);
	}

	@Override
	protected void onChkNoAllergiesValueChanged() throws PresentationLogicException 
	{
		if(form.chkNoAllergies().getValue())
		{
			form.grdAlergies().setEnabled(false);
			form.grdAlergies().getRows().clear();
			form.getContextMenus().RefMan.getallergyMenuaddItemItem().setVisible(false);
			form.getContextMenus().RefMan.getallergyMenuremoveItemItem().setVisible(false);
		}
		else
		{
			form.grdAlergies().setEnabled(true);
			form.getContextMenus().RefMan.getallergyMenuaddItemItem().setVisible(true);
			form.getContextMenus().RefMan.getallergyMenuremoveItemItem().setVisible(form.grdAlergies().getSelectedRow() != null);
		}
	}
	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);	
		onChkNoAllergiesValueChanged();
	}
	
	@Override
	protected void onGrdAlergiesMutableComboBoxSelected(int column, grdAlergiesRow row, Object value) throws PresentationLogicException 
	{
	}
	@Override
	protected void onGrdAlergiesSelectionChanged() throws PresentationLogicException 
	{
		boolean isEditMode = form.getMode().equals(FormMode.EDIT);
		form.getContextMenus().RefMan.getallergyMenuremoveItemItem().setVisible(isEditMode);		
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{	
		if(result.equals(DialogResult.OK) && formName.equals(form.getForms().Clinical.AllergiesDialog))
		{
			if (form.getGlobalContext().Core.getAllergiesAtConsultationIsNotNull())
			{
				PatientAllergyCollection allergies = form.getGlobalContext().Core.getAllergiesAtConsultation();
				form.grdAlergies().getRows().clear();				
				for (int i = 0; i < allergies.size(); i++)
				{					
					grdAlergiesRow row = form.grdAlergies().getRows().newRow(true);
				
					if(allergies.get(i).getAllergenDescriptionIsNotNull())
						row.setColAllergy(allergies.get(i).getAllergenDescription());											
					if(allergies.get(i).getAuthoringInformationIsNotNull() && allergies.get(i).getAuthoringInformation().getAuthoringHcpIsNotNull())
						row.setColAuthoringHCP(allergies.get(i).getAuthoringInformation().getAuthoringHcp().toString());					
					
					row.setValue(allergies.get(i));
				}				
			}	
			
			form.getContextMenus().RefMan.getallergyMenuremoveItemItem().setVisible(form.grdAlergies().getSelectedRow() != null ? true : false);
		}
		
		if(formName.equals(form.getForms().RefMan.ChangeUpdatingHCP) && DialogResult.OK.equals(result))
		{
			form.ccLastUpdating().setValue(form.getGlobalContext().RefMan.getLastUpdatingHCP());
		}
	}

	@Override
	protected void onBtnSpellCheckClick() throws PresentationLogicException 
	{
		form.richTextClinicalImpression().spellCheck();
		form.richTextComplaintHistory().spellCheck();
		form.richTextExamination().spellCheck();
		form.richTextOtherRelevantHistory().spellCheck();
		form.richTextRelevantMedication().spellCheck();
		form.richTextRelevantPastMedicalHistory().spellCheck();
	}

	@Override
	protected void onChkNoValueChanged() throws PresentationLogicException 
	{	
		if (form.chkNo().getValue() == true)		
			form.chkYes().setValue(false);
	}

	@Override
	protected void onChkYesValueChanged() throws PresentationLogicException 
	{	
		if (form.chkYes().getValue() == true)
			form.chkNo().setValue(false);
	}

	@Override
	protected void onBtnChangeUpdatingHCPClick() throws PresentationLogicException 
	{
		engine.open(form.getForms().RefMan.ChangeUpdatingHCP);
	}
}
