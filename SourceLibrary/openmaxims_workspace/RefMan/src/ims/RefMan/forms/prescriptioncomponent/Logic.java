// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.71 build 3573.17680)
// Copyright (C) 1995-2009 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.prescriptioncomponent;

import ims.RefMan.vo.PrescriptionsLiteVo;
import ims.RefMan.vo.PrescriptionsVo;
import ims.RefMan.vo.PrescriptionsVoCollection;
import ims.RefMan.vo.ReferralOutcomeVo;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.MemberOfStaffLiteVo;
import ims.core.vo.PatientMedicationLiteVo;
import ims.core.vo.PatientMedicationLiteVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.DateTime;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int COL_DATE = -1;
	private static final int COL_USER = -2;
	private static final int COL_DRUG = -3;
	private static final int COL_FREQUENCY = -4;
	private static final int COL_DAYS_SUPPLY = -5;
	private static final String PrescriptionRecord = "-6";
	private static final String NewPrescriptionRecord = "-7";
	private static final String PrescriptionDrug = "-8";

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
	}

	@Override
	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getLocalContext().setPrescriptionRecordAdded(false);
			updateContextMenuState();
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.VIEW);
		}
		else
		{
			form.getContextMenus().RefMan.hideAllPrescriptionMenuItems();
			form.getGlobalContext().RefMan.setIsComponentInEditMode(FormMode.EDIT);
		}
		
		form.fireCustomControlValueChanged();
	}

	private void updateContextMenuState()
	{
		boolean isPrescriptionDrug = form.dyngrdPrescription().getValue() instanceof PatientMedicationLiteVo;//WDEV-14054
		boolean isEditMode = form.getMode().equals(FormMode.EDIT) ? true : false;
		boolean isViewMode = form.getMode().equals(FormMode.VIEW) ? true : false; //WDEV-13956

		//start WDEV-13956
		boolean isPrinted = false;
		PrescriptionsVo selectedPrescription = null;

		if (form.dyngrdPrescription().getSelectedRow() != null)
		{
			if (form.dyngrdPrescription().getSelectedRow().getParent() != null)
			{
				selectedPrescription = (PrescriptionsVo) form.dyngrdPrescription().getSelectedRow().getParent().getValue();
			}
			else
			{
				selectedPrescription = (PrescriptionsVo) form.dyngrdPrescription().getSelectedRow().getValue();
			}
		}

		if (selectedPrescription != null && selectedPrescription.getIsPrintedIsNotNull())
		{
			isPrinted = selectedPrescription.getIsPrinted();
		}
		// end

		form.getContextMenus().RefMan.getPrescriptionNewPrescriptionRecordItem().setVisible(true && !isEditMode);
		form.getContextMenus().RefMan.getPrescriptionAddPrescriptionDrugItem().setVisible(form.dyngrdPrescription().getValue() instanceof PrescriptionsVo && !isPrinted);//	WDEV-14054
		form.getContextMenus().RefMan.getPrescriptionEDIT_PRESCRIPTION_DRUGItem().setVisible(form.dyngrdPrescription().getSelectedRow() != null && isPrescriptionDrug && !isPrinted && ((PatientMedicationLiteVo) form.dyngrdPrescription().getValue()).getID_PatientMedication() != null);//	WDEV-14054
		// WDEV-13956
		form.getContextMenus().RefMan.getPrescriptionRemovePrescriptionDrugItem().setVisible(isPrescriptionDrug && isEditMode && ((PatientMedicationLiteVo) form.dyngrdPrescription().getValue()).getID_PatientMedication() == null);//	WDEV-14054
		form.getContextMenus().RefMan.getPrescriptionRIE_PRESCRIPTION_DRUGItem().setVisible(isPrescriptionDrug && engine.hasRight(AppRight.CAN_REMOVE_DRUG_FROM_PRESCRIPTION)  && isViewMode && !isPrinted);//	WDEV-14054
		form.getContextMenus().RefMan.getPrescriptionRIEItem().setVisible(form.dyngrdPrescription().getSelectedRow() != null && isPrinted && !isPrescriptionDrug && isViewMode);

		boolean isReadOnlyMode = form.getLocalContext().getDisplayReadOnlyIsNotNull() ? form.getLocalContext().getDisplayReadOnly() : false;
		if (isReadOnlyMode)
		{
			form.getContextMenus().RefMan.hideAllPrescriptionMenuItems();
		}
	}

	private void open()
	{
		form.setMode(FormMode.VIEW);
		populateScreenFromData(domain.listPrescriptions(form.getGlobalContext().RefMan.getCatsReferral()));
		updateContextMenuState();
	}

	private void populateScreenFromData(PrescriptionsVoCollection listPrescriptions)
	{
		form.dyngrdPrescription().getRows().clear();
		
		if (listPrescriptions != null)
		{
			for (int i = 0; i < listPrescriptions.size(); i++)
			{
				addNewPrescriptionRecord(null, listPrescriptions.get(i), false);
			}
		}
		
		if (form.dyngrdPrescription().getRows() != null && form.dyngrdPrescription().getRows().size() > 0)
		{
			form.dyngrdPrescription().setSelectedRow(form.dyngrdPrescription().getRows().get(0));
		}
	}

	private void initializeDynamicGrid()
	{
		form.dyngrdPrescription().clear();
		form.dyngrdPrescription().setSelectable(true);

		DynamicGridColumn column;
		column = form.dyngrdPrescription().getColumns().newColumn("", COL_DATE);
		column.setWidth(200);
		column.setCanGrow(false);

		column = form.dyngrdPrescription().getColumns().newColumn("", COL_USER);
		column.setWidth(200);
		column.setCanGrow(true);

		column = form.dyngrdPrescription().getColumns().newColumn("", COL_DRUG);
		column.setWidth(200);
		column.setCanGrow(false);

		column = form.dyngrdPrescription().getColumns().newColumn("", COL_FREQUENCY);
		column.setWidth(100);
		column.setCanGrow(true);

		column = form.dyngrdPrescription().getColumns().newColumn("", COL_DAYS_SUPPLY);
		column.setWidth(60);
		column.setCanGrow(true);
	}

	public void initialize(Boolean displayReadOnly, PrescriptionsLiteVo prescriptionLite)
	{
		initializeDynamicGrid();
		initializeService();

		form.getLocalContext().setDisplayReadOnly(displayReadOnly);

		PrescriptionsVo prescription = null;
		if (prescriptionLite != null && prescriptionLite.getCatsReferralIsNotNull())
		{
			prescription = domain.getPrescription(prescriptionLite);
			PrescriptionsVoCollection prescriptionsColl = new PrescriptionsVoCollection();
			prescriptionsColl.add(prescription);
			populateScreenFromData(prescriptionsColl);
			form.setMode(FormMode.VIEW);
			return;
		}

		open();
	}

	private void addNewPrescriptionRecord()
	{
		if (form.getLocalContext().getPrescriptionRecordAddedIsNotNull() && !form.getLocalContext().getPrescriptionRecordAdded())
		{
			form.getLocalContext().setPrescriptionRecordAdded(true);
			form.setMode(FormMode.EDIT);
			DynamicGridRow row = null;
			if (form.dyngrdPrescription().getRows().size() == 0)
			{
				row = form.dyngrdPrescription().getRows().newRow(true);
			}
			else
			{
				row = form.dyngrdPrescription().getRows().newRowBefore(form.dyngrdPrescription().getRows().get(0), true);
			}
			
			addNewPrescriptionRecord(row, null, true);
		}
	}

	private void addNewPrescriptionDrug()
	{
		form.getGlobalContext().RefMan.setPrescriptionMedication(null);//	WDEV-14054
		form.getGlobalContext().RefMan.setDrugsAlreadyAddedToPrescription(getDrugsFromPrescription());//	WDEV-14054
		engine.open(form.getForms().Clinical.PrescriptionDialog);
	}

	//	WDEV-14054
	private String getDrugsFromPrescription()
	{
		if(!(form.dyngrdPrescription().getValue() instanceof PrescriptionsVo))
			return null;
		
		StringBuilder sb = new StringBuilder();
		String comma = "";
		
		for(int i=0; i<form.dyngrdPrescription().getSelectedRow().getRows().size(); i++)
		{
			if(!(form.dyngrdPrescription().getSelectedRow().getRows().get(i).getValue() instanceof PatientMedicationLiteVo))
				continue;
			
			PatientMedicationLiteVo drug = (PatientMedicationLiteVo) form.dyngrdPrescription().getSelectedRow().getRows().get(i).getValue();
			
			sb.append(comma);
			comma=", ";
			sb.append(drug.getMedication().getID_Medication().intValue());
		}
		
		String result = sb.toString();
		
		if (result == null || result.trim().length() == 0)
				return null;
		
		return result;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.Prescription.NewPrescriptionRecord:
				if (domain.getHcpLiteUser() == null)
				{
					engine.showMessage("Logged in user is not a HCP.");
					return;
				}
				addNewPrescriptionRecord();
				addNewPrescriptionDrug();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.Prescription.AddPrescriptionDrug:
				if (domain.getHcpLiteUser() == null)
				{
					engine.showMessage("Logged in user is not a HCP.");
					return;
				}
				addNewPrescriptionDrug();
				break;
			
			//	WDEV-14054
			case GenForm.ContextMenus.RefManNamespace.Prescription.EDIT_PRESCRIPTION_DRUG:
				if (domain.getHcpLiteUser() == null)
				{
					engine.showMessage("Logged in user is not a HCP.");
					return;
				}
				editNewPrescriptionDrug();
				break;
				
			case GenForm.ContextMenus.RefManNamespace.Prescription.RemovePrescriptionDrug:
				removePrescriptionDrug();
				break;
			
			//	WDEV-14054
			case GenForm.ContextMenus.RefManNamespace.Prescription.RIE_PRESCRIPTION_DRUG:
				markDrugAsRIE();
			break;
				
			//WDEV-13956 
			case GenForm.ContextMenus.RefManNamespace.Prescription.RIE:
				markAsRie((PrescriptionsVo)form.dyngrdPrescription().getSelectedRow().getValue());
				break;
		}
		
		updateContextMenuState();//	WDEV-14054
	}

	//	WDEV-14054
	private void markDrugAsRIE()
	{
		if(!(form.dyngrdPrescription().getValue() instanceof PatientMedicationLiteVo))
			return;
		
		form.getLocalContext().setMedicationToBeRIE((PatientMedicationLiteVo) form.dyngrdPrescription().getValue());
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}

	//	WDEV-14054
	private void editNewPrescriptionDrug()
	{
		if(!(form.dyngrdPrescription().getValue() instanceof PatientMedicationLiteVo))
			return;
		
		form.getGlobalContext().RefMan.setPrescriptionMedication((PatientMedicationLiteVo) form.dyngrdPrescription().getValue());
		engine.open(form.getForms().Clinical.PrescriptionDialog);
	}

	//WDEV-13956
	private void markAsRie(PrescriptionsVo value)
	{
		if (value == null)
			return;
		
		form.getLocalContext().setPrescToBeRIE(value);
		engine.open(form.getForms().Core.RieConfirmationDialog);
	}

	//	WDEV-14054
	private void removePrescriptionDrug()
	{
		if (form.dyngrdPrescription().getValue() instanceof PatientMedicationLiteVo && form.getMode().equals(FormMode.EDIT))
		{
			form.dyngrdPrescription().getRows().remove(form.dyngrdPrescription().getSelectedRow());
		}
	}

	private void initializeService()
	{
		if (form.getLocalContext().getCurrentService() == null)
		{
			form.getLocalContext().setCurrentService(domain.getCatsReferralService(form.getGlobalContext().RefMan.getCatsReferral()));
		}
	}

	private void addNewPrescriptionRecord(DynamicGridRow row, PrescriptionsVo value, boolean newRecord)
	{
		DynamicGridColumn coll;
		DynamicGridCell cell;
		AuthoringInformationVo authoring = null;

		if (value == null)
		{
			value = new PrescriptionsVo();
		}

		if (value.getAuthoringInformation() == null)
			authoring = new AuthoringInformationVo();
		else
			authoring = value.getAuthoringInformation();

		if (row == null)
			row = form.dyngrdPrescription().getRows().newRow(true);

		if (newRecord)
			row.setIdentifier(NewPrescriptionRecord);
		else
			row.setIdentifier(PrescriptionRecord);

		coll = form.dyngrdPrescription().getColumns().getByIdentifier(COL_DATE);
		cell = row.getCells().newCell(coll, DynamicCellType.DATETIME);
		cell.setValue(value != null ? (value.getAuthoringInformationIsNotNull() ? value.getAuthoringInformation().getAuthoringDateTime() : new DateTime()) : new DateTime());
		cell.setReadOnly(false);
		authoring.setAuthoringDateTime(cell.getValue() != null ? (DateTime) cell.getValue() : null);

		coll = form.dyngrdPrescription().getColumns().getByIdentifier(COL_USER);
		cell = row.getCells().newCell(coll, DynamicCellType.STRING);
		cell.setValue(value != null && value.getAuthoringInformationIsNotNull() ? (value.getAuthoringInformation().getAuthoringHcpIsNotNull() ? (value.getAuthoringInformation().getAuthoringHcp().getName() != null ? value.getAuthoringInformation().getAuthoringHcp().getName().toString() : null) : null) : domain.getHcpLiteUser() != null ? ((HcpLiteVo) domain.getHcpLiteUser()).getName() != null ? ((HcpLiteVo) domain.getHcpLiteUser()).getName().toString() : null : null);
		cell.setReadOnly(true);
		authoring.setAuthoringHcp(value != null && value.getAuthoringInformationIsNotNull() ? (value.getAuthoringInformation().getAuthoringHcpIsNotNull() ? value.getAuthoringInformation().getAuthoringHcp() : null) : domain.getHcpLiteUser() != null ? ((HcpLiteVo) domain.getHcpLiteUser()) : null);

		value.setAuthoringInformation(authoring);
		value.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		
		row.setValue(value);

		if (value != null)
		{
			if (value.getMedicationsIsNotNull())
			{
				for (int i = 0; i < value.getMedications().size(); i++)
				{
					PatientMedicationLiteVo patientMedication = value.getMedications().get(i);
					addPrescriptionDrug(patientMedication, row, true, newRecord);//	WDEV-14054
				}
			}
		}
	}

	@Override
	protected void onDyngrdPrescriptionRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		if (row.getIdentifier() != null)
		{
			if (row.getIdentifier().equals(PrescriptionRecord))
			{
				form.getContextMenus().RefMan.getPrescriptionNewPrescriptionRecordItem().setVisible(true);
				form.getContextMenus().RefMan.getPrescriptionAddPrescriptionDrugItem().setVisible(true);
				// form.getContextMenus().RefMan.getPrescriptionRemovePrescriptionDrugItem().setVisible(false);
			}
			else if (row.getIdentifier().equals(PrescriptionDrug))
			{
				form.getContextMenus().RefMan.getPrescriptionNewPrescriptionRecordItem().setVisible(false);
				form.getContextMenus().RefMan.getPrescriptionAddPrescriptionDrugItem().setVisible(true);
				// form.getContextMenus().RefMan.getPrescriptionRemovePrescriptionDrugItem().setVisible(true);
			}
		}

		updateContextMenuState();
	}

	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		//WDEV-13956
		if (formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))
		{
			doRIE();
		}
		
		if (result.equals(DialogResult.OK) && formName.equals(form.getForms().Clinical.PrescriptionDialog))
		{
			form.setMode(FormMode.EDIT);
			addPrescriptionDrug(form.getGlobalContext().RefMan.getPrescriptionMedication(), null, false, form.getGlobalContext().RefMan.getPrescriptionMedication().getID_PatientMedication() == null);// WDEV-13584//	WDEV-14054
			
			//WDEV-14191
			Object a=form.dyngrdPrescription().getValue();
			form.dyngrdPrescription().setValue(null);
			form.dyngrdPrescription().setValue(a);
		}
		// wdev-10992
		updateContextMenuState();
		// ---------
	}

	//WDEV-13956
	private void doRIE()
	{
		if (form.getLocalContext().getPrescToBeRIEIsNotNull() || form.getLocalContext().getMedicationToBeRIEIsNotNull())//	WDEV-14054
		{
			try
			{
				domain.markAsRie(form.getLocalContext().getPrescToBeRIEIsNotNull() ? form.getLocalContext().getPrescToBeRIE() : form.getLocalContext().getMedicationToBeRIE(), form.getForms().RefMan.PrescriptionComponent, //	WDEV-14054 
						form.getGlobalContext().Core.getPatientShort().getID_Patient(), 
						form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()?form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact():null,
						form.getGlobalContext().Core.getCurrentCareContextIsNotNull()?form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext():null,
						form.getGlobalContext().Core.getRieMessage());
			}
			catch (StaleObjectException e)
			{
				engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			}
			catch (UnqViolationUncheckedException e)
			{
				engine.showErrors(new String[]{ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue()});
			}
			
			form.getLocalContext().setMedicationToBeRIE(null);//	WDEV-14054
			form.getLocalContext().setPrescToBeRIE(null);//	WDEV-14054
		}
		
		open();		
	}
	
	private void addPrescriptionDrug(PatientMedicationLiteVo patientMedication, DynamicGridRow row, boolean readOnly, boolean newRecord)// WDEV-13584
	{
		if (form.dyngrdPrescription().getSelectedRow() != null)
		{
			if (row == null)
			{
				row = form.dyngrdPrescription().getSelectedRow();
			}

			//	WDEV-14054
			if (row != null)
			{
				if (row.getIdentifier() != null && (row.getIdentifier().equals(NewPrescriptionRecord) || row.getIdentifier().equals(PrescriptionRecord)))
				{
					addPrescriptionDrugRow(row.getRows().newRow(), patientMedication, readOnly, newRecord);// WDEV-13584
				}
				else if (row.getIdentifier() != null && row.getIdentifier().equals(PrescriptionDrug))
				{
					addPrescriptionDrugRow(newRecord ? row.getParent().getRows().newRow() : row, patientMedication, readOnly, newRecord);// WDEV-13584
				}
				
				row.setExpanded(true);
			}
		}
	}

	//	WDEV-14054
	private void addPrescriptionDrugRow(DynamicGridRow row, PatientMedicationLiteVo patientMedication, boolean readOnly, boolean newRecord)
	{
		DynamicGridColumn coll;
		DynamicGridCell cell;
	
		if (patientMedication == null)
			return;

		row.setIdentifier(PrescriptionDrug);
		row.setReadOnly(readOnly);
		
		if(newRecord)
			row.setBackColor(Color.Beige);

		coll = form.dyngrdPrescription().getColumns().getByIdentifier(COL_USER);
		cell = row.getCells().newCell(coll, DynamicCellType.HTMLVIEW);
		cell.setReadOnly(true);
		cell.setWidth(200);
		
		cell.setValue("<b><i>" + patientMedication.getMedication().getMedicationName() + "</i></b>");

		coll = form.dyngrdPrescription().getColumns().getByIdentifier(COL_DRUG);
		coll.setCaption("Frequency");
		cell = row.getCells().newCell(coll, DynamicCellType.STRING);
		cell.setReadOnly(true);
		cell.setWidth(100);

		cell.setValue(patientMedication != null ? (patientMedication.getFrequencyIsNotNull() ? patientMedication.getFrequency().getIItemText() : null) : null);
		
		coll = form.dyngrdPrescription().getColumns().getByIdentifier(COL_FREQUENCY);
		coll.setCaption("NoDaysSupply");
		cell = row.getCells().newCell(coll, DynamicCellType.INT);
		cell.setReadOnly(true);
		cell.setWidth(60);

		cell.setValue(patientMedication != null ? (patientMedication.getNoDaysSupplyIsNotNull() ? patientMedication.getNoDaysSupply() : null) : null);

		row.setValue(patientMedication);
	}

	//	WDEV-14054
	private ReferralOutcomeVo populateDataFromScreen() throws StaleObjectException
	{
		ReferralOutcomeVo outcome = domain.getReferralOutcome(form.getGlobalContext().RefMan.getCatsReferral());

		if (outcome == null)
		{
			outcome = new ReferralOutcomeVo();
			outcome.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
		}

		if (outcome.getAuthoringInformation() == null)
		{
			outcome.setAuthoringInformation(populateAuthoringInfo());
		}

		PrescriptionsVoCollection prescriptionsColl = new PrescriptionsVoCollection();
		
		if (outcome != null)
		{
			int prescriptions = form.dyngrdPrescription().getRows().size();
			for (int i = 0; i < prescriptions; i++)
			{
				if (form.dyngrdPrescription().getRows().get(i).getValue() != null && form.dyngrdPrescription().getRows().get(i).getValue() instanceof PrescriptionsVo)
				{
					PrescriptionsVo prescription = (PrescriptionsVo) form.dyngrdPrescription().getRows().get(i).getValue();
					PatientMedicationLiteVoCollection medicationColl = new PatientMedicationLiteVoCollection();
					
					int medications = form.dyngrdPrescription().getRows().get(i).getRows().size();
					for (int j = 0; j < medications; j++)
					{
						if (form.dyngrdPrescription().getRows().get(i).getRows().get(j).getValue() != null && form.dyngrdPrescription().getRows().get(i).getRows().get(j).getValue() instanceof PatientMedicationLiteVo)
						{
							PatientMedicationLiteVo medication = (PatientMedicationLiteVo) form.dyngrdPrescription().getRows().get(i).getRows().get(j).getValue();
							
							medicationColl.add(medication);
						}
					}

					prescription.setMedications(medicationColl);
					AuthoringInformationVo authoring = populateAuthoringInfo();
					prescription.setRecordingInformation(authoring);
					prescriptionsColl.add(prescription);
				}
			}

			outcome.setPrescriptions(prescriptionsColl);
			form.getLocalContext().setCurrentOutcome(outcome);
		}

		return outcome;
	}

	private AuthoringInformationVo populateAuthoringInfo()
	{
		AuthoringInformationVo authoring = new AuthoringInformationVo();
		authoring.setAuthoringDateTime(new DateTime());
		HcpLiteVo hcpVo = new HcpLiteVo();
		hcpVo.setID_Hcp(engine.getLoggedInUser().getHcpId());
		hcpVo.setMos(domain.getMosUser() != null ? (MemberOfStaffLiteVo) domain.getMosUser() : null);
		authoring.setAuthoringHcp(hcpVo);
		return authoring;
	}

	private boolean save()
	{
		if (checkForPrescriptionWithoudDrugs())
		{
			engine.showMessage("Cannot save a prescription record without a prescription drug");
			return false;
		}

		try
		{
			ReferralOutcomeVo outcome = populateDataFromScreen();

			if (outcome == null)
				return false;

			String[] str = outcome.validate();
			if (str != null && str.length > 0)
			{
				engine.showErrors(str);
				open();
				return false;
			}
			outcome = domain.saveReferralOutcome(outcome);
			initialize(false, null);
			form.getLocalContext().setCurrentOutcome(outcome);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(e.toString());
			// form.setMode(FormMode.VIEW);
			// open();
			return false;
		}

		return true;
	}

	private boolean checkForPrescriptionWithoudDrugs()
	{
		int prescriptions = form.dyngrdPrescription().getRows().size();
		
		for (int i = 0; i < prescriptions; i++)
		{
			if (form.dyngrdPrescription().getRows().get(i).getValue() != null && form.dyngrdPrescription().getRows().get(i).getValue() instanceof PrescriptionsVo)
			{
				PrescriptionsVo prescription = (PrescriptionsVo) form.dyngrdPrescription().getRows().get(i).getValue();

				if (prescription.getID_Prescription() == null && form.dyngrdPrescription().getRows().get(i).getRows().size() == 0)
					return true;
			}
		}

		return false;
	}
}
