// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.prescriptioncomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(800, 512);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuPrescription = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuPrescriptionNewPrescriptionRecordItem = factory.createMenuItem(startControlID.intValue() + 1, "New Prescription record ", true, false, new Integer(102149), true, false);
		contextMenus.RefMan.contextMenuPrescription.add(contextMenus.RefMan.contextMenuPrescriptionNewPrescriptionRecordItem);
		contextMenus.RefMan.contextMenuPrescriptionAddPrescriptionDrugItem = factory.createMenuItem(startControlID.intValue() + 2, "Add prescription drug ", true, false, new Integer(102179), true, false);
		contextMenus.RefMan.contextMenuPrescription.add(contextMenus.RefMan.contextMenuPrescriptionAddPrescriptionDrugItem);
		contextMenus.RefMan.contextMenuPrescriptionEDIT_PRESCRIPTION_DRUGItem = factory.createMenuItem(startControlID.intValue() + 3, "Edit prescription drug", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3250003)))
			contextMenus.RefMan.contextMenuPrescription.add(contextMenus.RefMan.contextMenuPrescriptionEDIT_PRESCRIPTION_DRUGItem);
		contextMenus.RefMan.contextMenuPrescriptionRemovePrescriptionDrugItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove prescription drug", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3250001)))
			contextMenus.RefMan.contextMenuPrescription.add(contextMenus.RefMan.contextMenuPrescriptionRemovePrescriptionDrugItem);
		contextMenus.RefMan.contextMenuPrescriptionRIE_PRESCRIPTION_DRUGItem = factory.createMenuItem(startControlID.intValue() + 5, "RIE prescription drug", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3250004)))
			contextMenus.RefMan.contextMenuPrescription.add(contextMenus.RefMan.contextMenuPrescriptionRIE_PRESCRIPTION_DRUGItem);
		contextMenus.RefMan.contextMenuPrescriptionRIEItem = factory.createMenuItem(startControlID.intValue() + 6, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3250002)))
			contextMenus.RefMan.contextMenuPrescription.add(contextMenus.RefMan.contextMenuPrescriptionRIEItem);
		form.registerMenu(contextMenus.RefMan.contextMenuPrescription);


		// Button Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 640, 488, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 717, 488, 75, 23, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), new Integer(-1), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 784, 472, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, contextMenus.RefMan.contextMenuPrescription, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnSave()
	{
		return (Button)super.getControl(0);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(1);
	}
	public DynamicGrid dyngrdPrescription()
	{
		return (DynamicGrid)super.getControl(2);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Core = new CoreForms();
			RefMan = new RefManForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				PrescriptionDialog = new LocalFormName(123179);
			}
			public final FormName PrescriptionDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				RieConfirmationDialog = new LocalFormName(102370);
			}
			public final FormName RieConfirmationDialog;
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				PrescriptionComponent = new LocalFormName(134173);
			}
			public final FormName PrescriptionComponent;
		}

		public ClinicalForms Clinical;
		public CoreForms Core;
		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Clinical = new ClinicalImages();
		}
		public final class ClinicalImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalImages()
			{
				Stage = new ImageHelper(123106, "Images/Clinical/stage_24x24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image Stage;
		}
		public final ClinicalImages Clinical;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CurrentService = new ims.framework.ContextVariable("CurrentService", prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier + "");
			cxl_CurrentOutcome = new ims.framework.ContextVariable("CurrentOutcome", prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentOutcome_" + componentIdentifier + "");
			cxl_DisplayReadOnly = new ims.framework.ContextVariable("DisplayReadOnly", prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__DisplayReadOnly_" + componentIdentifier + "");
			cxl_PrescriptionRecordAdded = new ims.framework.ContextVariable("PrescriptionRecordAdded", prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__PrescriptionRecordAdded_" + componentIdentifier + "");
			cxl_PrescToBeRIE = new ims.framework.ContextVariable("PrescToBeRIE", prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__PrescToBeRIE_" + componentIdentifier + "");
			cxl_MedicationToBeRIE = new ims.framework.ContextVariable("MedicationToBeRIE", prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier + "");
		}
		
		public boolean getCurrentServiceIsNotNull()
		{
			return !cxl_CurrentService.getValueIsNull(context);
		}
		public ims.core.vo.ServiceShortVo getCurrentService()
		{
			return (ims.core.vo.ServiceShortVo)cxl_CurrentService.getValue(context);
		}
		public void setCurrentService(ims.core.vo.ServiceShortVo value)
		{
			cxl_CurrentService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentService = null;
		public boolean getCurrentOutcomeIsNotNull()
		{
			return !cxl_CurrentOutcome.getValueIsNull(context);
		}
		public ims.RefMan.vo.ReferralOutcomeVo getCurrentOutcome()
		{
			return (ims.RefMan.vo.ReferralOutcomeVo)cxl_CurrentOutcome.getValue(context);
		}
		public void setCurrentOutcome(ims.RefMan.vo.ReferralOutcomeVo value)
		{
			cxl_CurrentOutcome.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentOutcome = null;
		public boolean getDisplayReadOnlyIsNotNull()
		{
			return !cxl_DisplayReadOnly.getValueIsNull(context);
		}
		public Boolean getDisplayReadOnly()
		{
			return (Boolean)cxl_DisplayReadOnly.getValue(context);
		}
		public void setDisplayReadOnly(Boolean value)
		{
			cxl_DisplayReadOnly.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DisplayReadOnly = null;
		public boolean getPrescriptionRecordAddedIsNotNull()
		{
			return !cxl_PrescriptionRecordAdded.getValueIsNull(context);
		}
		public Boolean getPrescriptionRecordAdded()
		{
			return (Boolean)cxl_PrescriptionRecordAdded.getValue(context);
		}
		public void setPrescriptionRecordAdded(Boolean value)
		{
			cxl_PrescriptionRecordAdded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrescriptionRecordAdded = null;
		public boolean getPrescToBeRIEIsNotNull()
		{
			return !cxl_PrescToBeRIE.getValueIsNull(context);
		}
		public ims.RefMan.vo.PrescriptionsVo getPrescToBeRIE()
		{
			return (ims.RefMan.vo.PrescriptionsVo)cxl_PrescToBeRIE.getValue(context);
		}
		public void setPrescToBeRIE(ims.RefMan.vo.PrescriptionsVo value)
		{
			cxl_PrescToBeRIE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PrescToBeRIE = null;
		public boolean getMedicationToBeRIEIsNotNull()
		{
			return !cxl_MedicationToBeRIE.getValueIsNull(context);
		}
		public ims.core.vo.PatientMedicationLiteVo getMedicationToBeRIE()
		{
			return (ims.core.vo.PatientMedicationLiteVo)cxl_MedicationToBeRIE.getValue(context);
		}
		public void setMedicationToBeRIE(ims.core.vo.PatientMedicationLiteVo value)
		{
			cxl_MedicationToBeRIE.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MedicationToBeRIE = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class Prescription implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NewPrescriptionRecord = 1;
				public static final int AddPrescriptionDrug = 2;
				public static final int EDIT_PRESCRIPTION_DRUG = 3;
				public static final int RemovePrescriptionDrug = 4;
				public static final int RIE_PRESCRIPTION_DRUG = 5;
				public static final int RIE = 6;
			}
			public void disableAllPrescriptionMenuItems()
			{
				this.contextMenuPrescriptionNewPrescriptionRecordItem.setEnabled(false);
				this.contextMenuPrescriptionAddPrescriptionDrugItem.setEnabled(false);
				this.contextMenuPrescriptionEDIT_PRESCRIPTION_DRUGItem.setEnabled(false);
				this.contextMenuPrescriptionRemovePrescriptionDrugItem.setEnabled(false);
				this.contextMenuPrescriptionRIE_PRESCRIPTION_DRUGItem.setEnabled(false);
				this.contextMenuPrescriptionRIEItem.setEnabled(false);
			}
			public void hideAllPrescriptionMenuItems()
			{
				this.contextMenuPrescriptionNewPrescriptionRecordItem.setVisible(false);
				this.contextMenuPrescriptionAddPrescriptionDrugItem.setVisible(false);
				this.contextMenuPrescriptionEDIT_PRESCRIPTION_DRUGItem.setVisible(false);
				this.contextMenuPrescriptionRemovePrescriptionDrugItem.setVisible(false);
				this.contextMenuPrescriptionRIE_PRESCRIPTION_DRUGItem.setVisible(false);
				this.contextMenuPrescriptionRIEItem.setVisible(false);
			}
			private Menu contextMenuPrescription;
			public ReadOnlyMenuItem getPrescriptionNewPrescriptionRecordItem()
			{
				return this.contextMenuPrescriptionNewPrescriptionRecordItem;
			}
			private MenuItem contextMenuPrescriptionNewPrescriptionRecordItem;
			public ReadOnlyMenuItem getPrescriptionAddPrescriptionDrugItem()
			{
				return this.contextMenuPrescriptionAddPrescriptionDrugItem;
			}
			private MenuItem contextMenuPrescriptionAddPrescriptionDrugItem;
			public ReadOnlyMenuItem getPrescriptionEDIT_PRESCRIPTION_DRUGItem()
			{
				return this.contextMenuPrescriptionEDIT_PRESCRIPTION_DRUGItem;
			}
			private MenuItem contextMenuPrescriptionEDIT_PRESCRIPTION_DRUGItem;
			public ReadOnlyMenuItem getPrescriptionRemovePrescriptionDrugItem()
			{
				return this.contextMenuPrescriptionRemovePrescriptionDrugItem;
			}
			private MenuItem contextMenuPrescriptionRemovePrescriptionDrugItem;
			public ReadOnlyMenuItem getPrescriptionRIE_PRESCRIPTION_DRUGItem()
			{
				return this.contextMenuPrescriptionRIE_PRESCRIPTION_DRUGItem;
			}
			private MenuItem contextMenuPrescriptionRIE_PRESCRIPTION_DRUGItem;
			public ReadOnlyMenuItem getPrescriptionRIEItem()
			{
				return this.contextMenuPrescriptionRIEItem;
			}
			private MenuItem contextMenuPrescriptionRIEItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[109];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_RefMan.PrescriptionMedication", "BO-1003100014-ID", "ID_PatientMedication");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_RefMan.PrescriptionMedication", "BO-1003100014-OTHERMEDICATIONTEXT", "OtherMedicationText");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_RefMan.PrescriptionMedication", "BO-1003100014-PATIENT", "Patient");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_RefMan.PrescriptionMedication", "BO-1003100014-FREQUENCY", "Frequency");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_RefMan.PrescriptionMedication", "BO-1003100014-SOURCEOFINFORMATION", "SourceofInformation");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_RefMan.PrescriptionMedication", "BO-1003100014-COMMENCEDDATE", "CommencedDate");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_RefMan.PrescriptionMedication", "BO-1003100014-NODAYSSUPPLY", "NoDaysSupply");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_RefMan.PrescriptionMedication", "BO-1003100014-BATCHNO", "BatchNo");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_RefMan.PrescriptionMedication", "BO-1003100014-EXPIRYDATE", "ExpiryDate");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_RefMan.PrescriptionMedication", "BO-1003100014-ISDISCONTINUED", "IsDiscontinued");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICENAME", "ServiceName");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SPECIALTY", "Specialty");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICEDESCRIPTION", "ServiceDescription");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ISACTIVE", "IsActive");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ALTERNATESERVICECODE", "AlternateServiceCode");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentOutcome_" + componentIdentifier, "BO-1096100005-ID", "ID_ReferralOutcome");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentOutcome_" + componentIdentifier, "BO-1096100005-CATSREFERRAL", "CatsReferral");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__CurrentOutcome_" + componentIdentifier, "BO-1096100005-CATSFINALREPORTSTATUS", "CatsFinalReportStatus");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__PrescToBeRIE_" + componentIdentifier, "BO-1096100036-ID", "ID_Prescription");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__PrescToBeRIE_" + componentIdentifier, "BO-1096100036-CATSREFERRAL", "CatsReferral");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__PrescToBeRIE_" + componentIdentifier, "BO-1096100036-ISACTIVE", "IsActive");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__PrescToBeRIE_" + componentIdentifier, "BO-1096100036-ISPRINTED", "IsPrinted");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier, "BO-1003100014-ID", "ID_PatientMedication");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier, "BO-1003100014-OTHERMEDICATIONTEXT", "OtherMedicationText");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier, "BO-1003100014-PATIENT", "Patient");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier, "BO-1003100014-FREQUENCY", "Frequency");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier, "BO-1003100014-SOURCEOFINFORMATION", "SourceofInformation");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier, "BO-1003100014-COMMENCEDDATE", "CommencedDate");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier, "BO-1003100014-NODAYSSUPPLY", "NoDaysSupply");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier, "BO-1003100014-BATCHNO", "BatchNo");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier, "BO-1003100014-EXPIRYDATE", "ExpiryDate");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.PrescriptionComponent.__internal_x_context__MedicationToBeRIE_" + componentIdentifier, "BO-1003100014-ISDISCONTINUED", "IsDiscontinued");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
