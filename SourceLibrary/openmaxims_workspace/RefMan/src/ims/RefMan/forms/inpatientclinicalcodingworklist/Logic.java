// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2013 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.inpatientclinicalcodingworklist;

import ims.RefMan.forms.inpatientclinicalcodingworklist.GenForm.grdDischargeEpisodesRow;
import ims.RefMan.vo.DischargedEpisodeForClinicalCodingWorklistVo;
import ims.RefMan.vo.DischargedEpisodeForClinicalCodingWorklistVoCollection;
import ims.RefMan.vo.InpatientClinicalCodingWorklistSearchCriteriaVo;
import ims.core.vo.LocSiteLiteVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.framework.Control;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;

import java.util.ArrayList;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final int CONSULTANT_COLUMN = 4;
	private static final int DISCHARGED_DATE_COLUMN = 7;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}
	
	private void open()
	{
		if(form.getGlobalContext().RefMan.getInpatientClinicalCodingWorklistCriteria() != null)
		{
			populateSearchCriteriaScreenFromData(form.getGlobalContext().RefMan.getInpatientClinicalCodingWorklistCriteria());
		}
		
		search(false);
		form.setMode(FormMode.VIEW);
	}

	private void populateSearchCriteriaScreenFromData(InpatientClinicalCodingWorklistSearchCriteriaVo criteria)
	{
		clearScreen();
		
		if(criteria == null)
			return;
		
		form.cmbSpecialty().setValue(criteria.getSpecialty());
		form.qmbDischargeWard().setValue(criteria.getDischargeWard());
		form.ccConsultant().setValue(criteria.getConsultant());
		form.dteDischargeFrom().setValue(criteria.getDischargeFrom());
		form.dteDischargeTo().setValue(criteria.getDischargeTo());
		form.chkEpisodeCoded().setValue(criteria.getEpisodeCoded());
		form.chkRequiresCoding().setValue(criteria.getRequiresCoding());
	}

	private boolean search(boolean isFromButton)
	{
		if(isSearchCriteriaValid(isFromButton))
		{
			populateScreenFromData(domain.listDischargedEpisodes(populateSearchCriteriaDataFromScreen()));
			form.getLocalContext().setDischargeDateTimeSortOrder(SortOrder.ASCENDING);
			
			if(form.grdDischargeEpisodes().getRows().size() == 0)
				engine.showMessage("No records found.");
			
			return true;
		}
		
		return false;
	}

	private void populateScreenFromData(DischargedEpisodeForClinicalCodingWorklistVoCollection listDischargedEpisodes)
	{
		form.grdDischargeEpisodes().getRows().clear();
		
		if(listDischargedEpisodes == null)
			return;
		
		for(DischargedEpisodeForClinicalCodingWorklistVo episode : listDischargedEpisodes)
		{
			if(episode == null)
				return;
			
			grdDischargeEpisodesRow row = form.grdDischargeEpisodes().getRows().newRow();
			row.setColForename(episode.getPasEvent() != null ? episode.getPasEvent().getPatient().getName().getForename() : null);
			row.setTooltipForColForename(row.getColForename());
			
			row.setColSurname(episode.getPasEvent() != null ? episode.getPasEvent().getPatient().getName().getSurname() : null);
			row.setTooltipForColSurname(row.getColSurname());
			
			row.setColHospitalNumber((episode.getPasEvent() != null && episode.getPasEvent().getPatient() != null && episode.getPasEvent().getPatient().getHospnum() != null) ? episode.getPasEvent().getPatient().getHospnum().getIdValue() : null);
			row.setTooltipForColHospitalNumber(row.getColHospitalNumber());
			
			row.setColSex((episode.getPasEvent() != null && episode.getPasEvent().getPatient() != null && episode.getPasEvent().getPatient().getSex() != null) ? episode.getPasEvent().getPatient().getSex().getText() : null);
			row.setTooltipForColSex(row.getColSex());
			
			row.setColWard((episode.getPasEvent() != null && episode.getPasEvent().getLocation() != null) ? episode.getPasEvent().getLocation().getName() : null);
			row.setTooltipForColWard(row.getColWard());
			
			row.setColConsultant((episode.getPasEvent() != null && episode.getPasEvent().getConsultant() != null) ? episode.getPasEvent().getConsultant().getIMosName() : null);
			row.setTooltipForColConsultant(row.getColConsultant());
			
			row.setColDischargeDestination(episode.getDischargeDestination() != null ? episode.getDischargeDestination().getText() : null);
			row.setTooltipForColDischargeDestination(row.getColDischargeDestination());
			
			row.setColActualDischargeDate(episode.getDischargeDateTime() != null ? episode.getDischargeDateTime().toString() : null);
			row.setTooltipForColActualDischargeDate(row.getColActualDischargeDate());
			
			row.setColCoded(Boolean.TRUE.equals(episode.getIsCoded()));
			
			row.setValue(episode);
		}
		
		form.lblTotal().setValue("Total:" + form.grdDischargeEpisodes().getRows().size());
	}

	private InpatientClinicalCodingWorklistSearchCriteriaVo populateSearchCriteriaDataFromScreen()
	{
		InpatientClinicalCodingWorklistSearchCriteriaVo criteria = new InpatientClinicalCodingWorklistSearchCriteriaVo();
		
		criteria.setSpecialty(form.cmbSpecialty().getValue());
		criteria.setDischargeWard(form.qmbDischargeWard().getValue());
		criteria.setConsultant(form.ccConsultant().getValue());
		criteria.setDischargeFrom(form.dteDischargeFrom().getValue());
		criteria.setDischargeTo(form.dteDischargeTo().getValue());
		
		if(form.chkRequiresCoding().getValue())
			criteria.setRequiresCoding(true);
		
		if(form.chkEpisodeCoded().getValue())
			criteria.setEpisodeCoded(true);
		
		return criteria;
	}

	private boolean isSearchCriteriaValid(boolean isFromButton)
	{
		ArrayList<String> uiErrors = new ArrayList<String>();
		
		Date dateFrom = form.dteDischargeFrom().getValue();
		Date dateTo = form.dteDischargeTo().getValue();
		
		if(form.cmbSpecialty().getValue() == null && form.qmbDischargeWard().getValue() == null && form.ccConsultant().getValue() == null && dateFrom == null && dateTo == null)
		{
			uiErrors.add("Complete at least one search field.");
		}
		
		if (dateFrom != null && dateTo != null && dateTo.isLessThan(dateFrom))
		{
			uiErrors.add("Discharges From can not be greater than Discharges To.");
		}
		
		if (uiErrors.size() > 0)
		{
			if(isFromButton)
			{
				engine.showErrors(uiErrors.toArray(new String[uiErrors.size()]));
			}
			
			return false;
		}
		
		return true;
	}

	private void initialise()
	{
		form.ccConsultant().initialize(MosType.MEDIC);
		
		ILocation currentLocation = engine.getCurrentLocation();
		form.getLocalContext().setCurrentHospital(domain.getCurrentHospital(currentLocation));
		
		if(form.getLocalContext().getCurrentHospital() != null && currentLocation instanceof LocationLiteVo)
		{
			listCurrentWards(form.getLocalContext().getCurrentHospital(), null, false);
			form.qmbDischargeWard().setValue((LocationLiteVo) currentLocation);
		}
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().RefMan.setCatsReferral(null);
		
		open();
	}
	
	@Override
	protected void onQmbDischargeWardTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getLocalContext().getCurrentHospital() == null)
		{
			return;
		}
		
		listCurrentWards(form.getLocalContext().getCurrentHospital(), value, true);
	}
	
	private void listCurrentWards(LocSiteLiteVo locSiteLiteVo, String wardName, boolean showOpened) 
	{
		form.qmbDischargeWard().clear();
		
		if(locSiteLiteVo == null || locSiteLiteVo.getID_Location() == null)
			return;
		
		LocationLiteVoCollection wards = domain.listWards(form.getLocalContext().getCurrentHospital(), wardName);
		
		if(wards == null || wards.size() == 0)
			return;
		
		for(LocationLiteVo ward : wards)
		{
			if(ward == null)
				continue;
			
			form.qmbDischargeWard().newRow(ward, ward.getName());
		}
		
		if(showOpened)
		{
			if(wards.size() == 1)
			{
				form.qmbDischargeWard().setValue(wards.get(0));
				return;
			}
		
			form.qmbDischargeWard().showOpened();
		}
	}
	
	@Override
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(search(true))
		{
			form.getGlobalContext().RefMan.setInpatientClinicalCodingWorklistCriteria(populateSearchCriteriaDataFromScreen());
		}
		
		updateControlsState();
	}
	
	@Override
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}
	
	private void clearScreen()
	{
		form.cmbSpecialty().setValue(null);
		form.qmbDischargeWard().clear();
		form.ccConsultant().clear();
		form.dteDischargeFrom().setValue(null);
		form.dteDischargeTo().setValue(null);
		form.chkEpisodeCoded().setValue(null);
		form.chkRequiresCoding().setValue(null);
		
		form.grdDischargeEpisodes().getRows().clear();
		form.lblTotal().setValue("Total:");
	}

	@Override
	protected void onGrdDischargeEpisodesSelectionChanged()
	{
		updateControlsState();
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuADDItem().setVisible(form.grdDischargeEpisodes().getValue() != null);
		//form.getContextMenus().RefMan.getInpatientClinicalCodingWorklistMenuEDITItem().setVisible(form.grdDischargeEpisodes().getValue() != null);
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.ADD:
				addCoding();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.InpatientClinicalCodingWorklistMenu.EDIT:
				editCoding();
			break;
		}
	}

	private void editCoding()
	{
		form.getGlobalContext().RefMan.setDischargedEpisodeForReferralCoding(form.grdDischargeEpisodes().getValue());
		form.getGlobalContext().RefMan.setCatsReferral(form.grdDischargeEpisodes().getValue().getCatsReferral());
		
		engine.open(form.getForms().RefMan.ReferralCodingForClinicalCodingWorklist);
	}

	private void addCoding()
	{
		form.getGlobalContext().RefMan.setDischargedEpisodeForReferralCoding(form.grdDischargeEpisodes().getValue());
		form.getGlobalContext().RefMan.setCatsReferral(form.grdDischargeEpisodes().getValue().getCatsReferral());
		
		engine.open(form.getForms().RefMan.ReferralCodingForClinicalCodingWorklist);
	}

	@Override
	protected void onGrdDischargeEpisodesGridHeaderClicked(int column) throws PresentationLogicException
	{
		DischargedEpisodeForClinicalCodingWorklistVoCollection coll = form.grdDischargeEpisodes().getValues();
		
		switch(column)
		{
    		case CONSULTANT_COLUMN:
    			form.getLocalContext().setConsultantSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getConsultantSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
    			coll.sort(new ConsultantComparator(form.getLocalContext().getConsultantSortOrder()));
    		break;
    		
    		case DISCHARGED_DATE_COLUMN:
    			form.getLocalContext().setDischargeDateTimeSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getDischargeDateTimeSortOrder())? SortOrder.DESCENDING : SortOrder.ASCENDING);
    			coll.sort(new DischargedDateTimeComparator(form.getLocalContext().getDischargeDateTimeSortOrder()));
    		break;
		}
		
		populateScreenFromData(coll);
	}
	
	private static class DischargedDateTimeComparator implements Comparator<DischargedEpisodeForClinicalCodingWorklistVo>
	{
		private int direction = 1;
		
		public DischargedDateTimeComparator(SortOrder sortOrder)
		{
			if (SortOrder.ASCENDING.equals(sortOrder))
				this.direction = 1;
			else
				this.direction = -1;
		}

		public int compare(DischargedEpisodeForClinicalCodingWorklistVo o1, DischargedEpisodeForClinicalCodingWorklistVo o2)
		{
			if (o1.getDischargeDateTimeIsNotNull() && o2.getDischargeDateTimeIsNotNull())
				return o1.getDischargeDateTime().compareTo(o2.getDischargeDateTime()) * direction;
			
			if (o1.getDischargeDateTimeIsNotNull() && !o2.getDischargeDateTimeIsNotNull())
				return direction;
			
			if (o2.getDischargeDateTimeIsNotNull() && !o1.getDischargeDateTimeIsNotNull())
				return -1 * direction;

			return 0;
		}
	}
	
	class ConsultantComparator implements Comparator<DischargedEpisodeForClinicalCodingWorklistVo>
	{
		private int order = 1;
		public ConsultantComparator()
		{
			order = 1;
		}
		public ConsultantComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		public int compare(DischargedEpisodeForClinicalCodingWorklistVo o1, DischargedEpisodeForClinicalCodingWorklistVo o2)
		{
			if(o1 != null && o1.getPasEvent() != null && o1.getPasEvent().getConsultantIsNotNull() && o2 != null && o2.getPasEvent() != null && o2.getPasEvent().getConsultantIsNotNull()) 
				return order*o1.getPasEvent().getConsultant().compareTo(o2.getPasEvent().getConsultant());
			
			if (o1 == null || !(o1.getPasEvent() != null) || !o1.getPasEvent().getConsultantIsNotNull())
				return -1 * order;
			
			if (o2 == null || !(o2.getPasEvent() != null) || !o2.getPasEvent().getConsultantIsNotNull())
				return order;
			
			return 0;
		}	
	}

	@Override
	protected void onChkEpisodeCodedValueChanged() throws PresentationLogicException
	{
		if(form.chkEpisodeCoded().getValue())
		{
			form.chkRequiresCoding().setValue(null);
		}
	}

	@Override
	protected void onChkRequiresCodingValueChanged() throws PresentationLogicException
	{
		if(form.chkRequiresCoding().getValue())
		{
			form.chkEpisodeCoded().setValue(null);
		}
	}
}
