// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.booktheatreslot;

import ims.RefMan.forms.booktheatreslot.GenForm.grdSelectedRow;
import ims.RefMan.forms.booktheatreslot.GenForm.grdTheatreSessionRow;
import ims.RefMan.vo.FitForSurgeryAssessmentLiteVo;
import ims.RefMan.vo.ReferralBookingVo;
import ims.RefMan.vo.SuitableForSurgeryAssessmentMinVo;
import ims.RefMan.vo.lookups.ERODType;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ProcedureLiteVo;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.enums.MosType;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.ocrr.vo.OrderInvestigationBookingVo;
import ims.scheduling.vo.BookTheatreSlotDialogVo;
import ims.scheduling.vo.BookingAppointmentLiteVo;
import ims.scheduling.vo.BookingAppointmentTheatreLiteVo;
import ims.scheduling.vo.BookingAppointmentTheatreVo;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.MoveAppointmentDataVo;
import ims.scheduling.vo.Sch_BookingTheatreVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.SessionParentChildSlotVo;
import ims.scheduling.vo.SessionTheatreVo;
import ims.scheduling.vo.SessionTheatreVoCollection;
import ims.scheduling.vo.Session_ListOwnerVo;
import ims.scheduling.vo.lookups.Status_Reason;
import ims.scheduling.vo.lookups.TheatreType;
import ims.vo.interfaces.IGenericItem;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int CURRENT_APPT_NODE	= 1;
	private static final int REBOOK_APPT_NODE	= 2;
	private static final int INV_NODE			= 3;
	private static final int OTHER_NODE			= 4;
	
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		//wdev-18662
		form.getLocalContext().setPrimaryProcedureFromPatientElectiveList(null);
		if (args != null && args.length > 0 && args[0] != null && args[0] instanceof ProcedureLiteVo)
		{
			form.getLocalContext().setPrimaryProcedureFromPatientElectiveList((ProcedureLiteVo) args[0]);
		}
		//----------
		open();
		//WDEV-13313
		if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
			loadReferralDetails();
		else
		{
			form.lyr1().tabReferral().setHeaderVisible(false);
			form.btnClose().setVisible(false);
		}
	}

	/**
	 * 
	 */
	private void defaultSearchCriteria()
	{
		defaultDates();
		form.lyr1().tabSearch().cmbTheatreType().setValue(TheatreType.DAYCASE);
	}
	
	private void initialise()
	{
		form.setMode(FormMode.VIEW);	
				 
		form.lyr1().tabSearch().ccConsultant().initialize(MosType.HCP);

		//WDEV-13313
		if(!engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
		{
			FitForSurgeryAssessmentLiteVo fitForSurgery = domain.getLatestFitForSurgeryAssessment(form.getGlobalContext().RefMan.getCatsReferral());
			form.getLocalContext().setAnaestheticType(fitForSurgery != null ? fitForSurgery.getAnaestheticType() : null);
		}

		form.lyr1().tabSearch().cmbAnaesType().setValue(form.getLocalContext().getAnaestheticType());
		if(form.getLocalContext().getAnaestheticTypeIsNotNull())
		{
			if(!engine.hasRight(AppRight.ALLOW_ANAESTHETIC_TYPE_CHANGE))
			{
				form.lyr1().tabSearch().cmbAnaesType().setVisible(false); //hide the combo
				
				if(form.getLocalContext().getAnaestheticTypeIsNotNull())
					form.lyr1().tabSearch().lblAnaestheticTypeText().setValue(form.getLocalContext().getAnaestheticType().getText());
			}
		}

		loadServices();
		loadLocations();
		
		//WDEV-18396
		form.chkElective().setValue(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue());
		
	}
	
	private void open()
	{
		form.getLocalContext().setSch_Booking(new Sch_BookingTheatreVo());
		clearSearchCriteria(form.getLocalContext().getAnaestheticTypeIsNotNull());
		enableSearchCriteria();
		repopulateScreen();
		updateControlsState();
	}
	
	private void repopulateScreen()
	{
		if(form.getGlobalContext().Scheduling.getTheatreAppointment() == null)
		{
			
			defaultSearchCriteria();
			//wdev-18662
			//default procedure from PatientElectiveList
			if( form.getLocalContext().getPrimaryProcedureFromPatientElectiveListIsNotNull() )
			{
				form.lyr1().tabSearch().qmbProcedure().newRow(form.getLocalContext().getPrimaryProcedureFromPatientElectiveList(), form.getLocalContext().getPrimaryProcedureFromPatientElectiveList().getProcedureName());
				form.lyr1().tabSearch().qmbProcedure().setValue(form.getLocalContext().getPrimaryProcedureFromPatientElectiveList());
				qmbProcedureValueChanged();
			}
			//------------
			return;
		}
			
		//store the same booking record
		Sch_BookingTheatreVo voBooking = domain.getSch_BookingByAppt(form.getGlobalContext().Scheduling.getTheatreAppointment());
		form.getLocalContext().setSch_Booking(voBooking);
		form.getGlobalContext().Scheduling.setSch_BookingTheatre(voBooking);
		
		form.lyr1().tabSearch().cmbService().setValue(form.getGlobalContext().Scheduling.getTheatreService());
		//service
		if(form.lyr1().tabSearch().cmbService().getValue() == null && form.getGlobalContext().Scheduling.getTheatreService() instanceof ServiceLiteVo)
		{
			form.lyr1().tabSearch().cmbService().newRow(form.getGlobalContext().Scheduling.getTheatreService(), ((ServiceLiteVo)form.getGlobalContext().Scheduling.getTheatreService()).getServiceName());
			form.lyr1().tabSearch().cmbService().setValue(form.getGlobalContext().Scheduling.getTheatreService());
		}
		//procedure
		if(form.getGlobalContext().Scheduling.getTheatreProcedureIsNotNull())
		{
			form.lyr1().tabSearch().qmbProcedure().newRow(form.getGlobalContext().Scheduling.getTheatreProcedure(), form.getGlobalContext().Scheduling.getTheatreProcedure().getProcedureName());
			form.lyr1().tabSearch().qmbProcedure().setValue(form.getGlobalContext().Scheduling.getTheatreProcedure());
			qmbProcedureValueChanged();				
		}
		
		//consultant
		if(form.getGlobalContext().Scheduling.getTheatreConsultantIsNotNull())
			form.lyr1().tabSearch().ccConsultant().setValue(form.getGlobalContext().Scheduling.getTheatreConsultant());		
		
		//Theatre Type 
		if(form.getGlobalContext().Scheduling.getTheatreTypeIsNotNull())
			form.lyr1().tabSearch().cmbTheatreType().setValue(form.getGlobalContext().Scheduling.getTheatreType());		
		
		//Anaesthetic Type 
		BookingAppointmentTheatreVo voAppt = form.getGlobalContext().Scheduling.getTheatreAppointment();
		if(voAppt.getTheatreBookingIsNotNull())
			form.lyr1().tabSearch().cmbAnaesType().setValue(voAppt.getTheatreBooking().getAnaestheticType());	
				
		//from and To Date
		defaultDates();
		
		if(validateSearchCriteria() == null)
		{
			loadSessions();
			//set a flag to say that the appt to be rebooked hasnt yet been selected
			form.getLocalContext().setIsRebookApptSelected(false);
			form.setMode(FormMode.EDIT);
			addTheatreSessions(new Date());
			
			disableSearchCriteria();
		}
	}

	/**
	 * 
	 */
	private void defaultDates()
	{
		form.lyr1().tabSearch().dteFrom().setValue(new Date());
		//Date dtEndMonth = getLastDayofMonth();
		Date date2Weeks = form.lyr1().tabSearch().dteFrom().getValue().copy();
		date2Weeks.addDay(14);
		form.lyr1().tabSearch().dteTo().setValue(date2Weeks);
	}
	
	private void addTheatreSessions(Date selDate)
	{		
		// go through sessions getting ones for the selected date
		SessionTheatreVoCollection voCollSessionShort = form.getLocalContext().getSessions();
		if (voCollSessionShort == null)
			return;

		SessionTheatreVoCollection voCollSelectedSessions = new SessionTheatreVoCollection();
		for (int i = 0; i < voCollSessionShort.size(); i++)
		{
			if (voCollSessionShort.get(i).getSessionDate().equals(selDate))
				voCollSelectedSessions.add(voCollSessionShort.get(i));
		}	

		form.getLocalContext().setSelectedSessions(voCollSelectedSessions);
		loadTheatreSlots();
	}
	
	private void loadTheatreSlots()
	{
		form.grdSelected().getRows().clear();
		//load slots for Session
		if(form.grdTheatreSession().getValue() != null)
		{
			SessionTheatreVo voSession = form.grdTheatreSession().getValue();
			boolean hasBookingRights = doesRoleHaveBookingRightsForSession(voSession);
			
			if(voSession.getParentChildSlotsIsNotNull())
			{
				voSession.getParentChildSlots().sort();
				for(SessionParentChildSlotVo voSlot : voSession.getParentChildSlots())
				{
					if(voSlot.getAppointment() == null && voSlot.getStatusIsNotNull() && (voSlot.getStatus().equals(Status_Reason.BOOKED) || voSlot.getStatus().equals(Status_Reason.CLOSED)))
						continue;
					
					grdSelectedRow row = form.grdSelected().getRows().newRow();
					
					if(voSlot.getAppointmentIsNotNull())
					{
						//slot with an appointment
						row.setColStartTime(voSlot.getAppointment().getApptStartTime());
						
						Integer duration = voSlot.getAppointment().getCustomProcedureDuration();
						if(duration != null)
							row.setColMins(duration.toString());
						
						//WDEV-13247
						if(voSlot.getAppointment().getPatientIsNotNull())
						{
							row.setColPatient(voSlot.getAppointment().getPatient().toString());
							row.setTooltipForColPatient(voSlot.getAppointment().getPatient().toString());
						}
						
						//WDEV-13247
						if(voSlot.getAppointment().getTheatreBookingIsNotNull())
						{
							if(voSlot.getAppointment().getTheatreBooking().getProcedureIsNotNull())
							{
								row.setColProcedure(voSlot.getAppointment().getTheatreBooking().getProcedure());
								row.setTooltipForColProcedure(voSlot.getAppointment().getTheatreBooking().getProcedure().toString());
							}
						}
						//row.setSelectable(false);
					}
					else
					{
						//add empty slots
						row.setColStartTime(voSlot.getStartTime());					
					}
					
					//Suspended Slots
					if(voSlot.getStatusIsNotNull() && voSlot.getStatus().equals(Status_Reason.SUSPENDED))
					{
						row.setBackColor(Color.Bisque);
						row.setColPatient("Suspended for: " +  (voSlot.getStatusReasonIsNotNull() ? voSlot.getStatusReason().getText() : ""));
					}
					
					row.setValue(voSlot);
					
					//colour overlapping appointments
					grdSelectedRow previousRow;
					if(form.grdSelected().getRows().size() > 1)
					{
						previousRow = form.grdSelected().getRows().get(form.grdSelected().getRows().size() -2);
						if(previousRow.getValue() != null && previousRow.getValue().getAppointmentIsNotNull())
						{
							if(previousRow.getValue().getAppointment().getApptEndTimeIsNotNull() && previousRow.getValue().getAppointment().getApptEndTime().isGreaterThan(voSlot.getStartTime()))
								previousRow.setBackColor(Color.Red);
						}
					}	
					
					row.setSelectable(hasBookingRights);
					if(!hasBookingRights)
						row.setTooltip("Role does not have rights to book in this Session");

				}
			}
		}
		
		fillGridUntilMidnightWithEmptySlots();
	}

	/**
	 * request to fill the rest of the day in a different colour (TB02)
	 */
	private void fillGridUntilMidnightWithEmptySlots()
	{
		SessionTheatreVo voSession = form.grdTheatreSession().getValue();
		
		if(voSession == null)
			return;
		
		// Get the last appointment end time
		Time sessionEndTm = voSession.getEndTm().copy();
		if(form.grdSelected().getRows().size() > 0)
		{
			grdSelectedRow row = form.grdSelected().getRows().get(form.grdSelected().getRows().size() - 1);
			
			if(row.getValue() != null)
			{
				if(row.getValue().getStartTimeIsNotNull() && row.getValue().getDurationIsNotNull())
					sessionEndTm = Booking_AppointmentVo.calculateEndTime(row.getValue().getStartTime(), row.getValue().getDuration());
				
				if(row.getValue().getAppointmentIsNotNull() && row.getValue().getAppointment().getApptEndTimeIsNotNull())
					sessionEndTm = row.getValue().getAppointment().getApptEndTime();
				
				// Colour last row red if it is over-booked
				if(row.getValue().getAppointmentIsNotNull())
				{
					if(row.getValue().getAppointment().getApptEndTimeIsNotNull())
					{
						if(row.getValue().getAppointment().getApptEndTime().isGreaterThan(voSession.getEndTm()))
							row.setBackColor(Color.Red);
					}
				}
					
			}
		}
		
		
		if(sessionEndTm != null)
		{
			int fillerDuration = 0;
			if(voSession.getParentChildSlotsIsNotNull() && voSession.getParentChildSlots().size() > 0)
			{
				if(voSession.getParentChildSlots().get(0).getDurationIsNotNull())
				{
					fillerDuration = voSession.getParentChildSlots().get(0).getDuration();
				}
			}
			
			if(fillerDuration == 0)
				fillerDuration = 5; //default fill slots to 5 mins
			
			Time midNight = new Time(23,59);
			//need to fill this time period with multiple dummy slots of 'fillerDuration' size
			int timeFillRequired = (midNight.getTotalMinutes() + 1) - sessionEndTm.getTotalMinutes();
			
			Time tmDummySlot = (Time) sessionEndTm.clone();
			while(timeFillRequired > 0)
			{
				tmDummySlot = roundTimeIfRequired(tmDummySlot);

				grdSelectedRow row = form.grdSelected().getRows().newRow();
				row.setColStartTime((Time)tmDummySlot.clone());
				//row.setColMins(String.valueOf(fillerDuration));
				row.setBackColor(Color.Bisque);
				row.setSelectable(false);
				timeFillRequired -= fillerDuration;
				tmDummySlot.addMinutes(fillerDuration);
			}
		}
	}

	/**
	 * @param tmDummySlot
	 * @return
	 */
	private Time roundTimeIfRequired(Time tmDummySlot)
	{
		int round = 5;
		int intTime = Integer.parseInt(tmDummySlot.toString(TimeFormat.FLAT4));
		//check for remainder if there is a remainder rounding is required
		if(!(intTime%round == 0))
		{
			double result = Math.round((intTime+5) /round) * round;		
			String prepend = "";
			
			// WDEV-13221
			// Reversed conditions to correctly prepend
			if(intTime < 1)
				prepend = "0000";
			else if(intTime < 10)
				prepend = "000";
			else if(intTime < 100)
				prepend = "00";
			else if(intTime < 1000)
				prepend = "0";

			
			int res = (int) result;
			
			String timeVal = prepend + res;
			timeVal = correctSixtyMinHourIfNeeded(timeVal);
			
			timeVal = timeVal.substring(0,2) + ":" + timeVal.substring(2,4);
			
			tmDummySlot = new Time(String.valueOf(timeVal));
		}
		return tmDummySlot;
	}

	private String correctSixtyMinHourIfNeeded(String res)
	{
		if (res == null)
			throw new CodingRuntimeException("res cannot be null in method correctSixtyMinHourIfNeeded");
		
		if(res.length() >=2)
		{
			String last2Digits = res.substring((res.length() -2), res.length());
			if(last2Digits.equals("60"))
			{
				
				last2Digits = "00";
				String first2Digits = res.substring(0, 2);
				int val = Integer.parseInt(first2Digits);
				if(val<23)
					val += 1;
				else
					val = 0;
				
				first2Digits = String.valueOf(val);	
				if(first2Digits.length() == 1)
					first2Digits = "0" + first2Digits;
				
				return first2Digits + last2Digits;
			}
		}
		
		return res;
	}

	private String getConsultantsListString(SessionTheatreVo voSession)
	{
		if (voSession == null || voSession.getListOwners() == null)
			return "";
		
		String strConsultant = "";
		boolean loopAgain = false;
		for(int i=0;i<voSession.getListOwners().size();i++)
		{
			Session_ListOwnerVo voCons = voSession.getListOwners().get(i);
			if(voCons.getHcpIsNotNull())
				strConsultant += voCons.getHcp().toString();
			
			loopAgain = voSession.getListOwners().size() - i > 1;
			if(loopAgain)
				strConsultant += ",";
		}
		
		return strConsultant;
	}
	
	private Boolean doesRoleHaveBookingRightsForSession(Sch_SessionRefVo voSession)
	{		
		Map map = form.getLocalContext().getSessionBookingRights();
		if(map == null)
			map = new HashMap();
		
		Object entry = map.get(voSession.getID_Sch_Session());
		
		if(entry == null)
		{
			map.put(voSession.getID_Sch_Session(), domain.hasBookingRights(engine.getLoggedInRole(), voSession));
			entry = map.get(voSession.getID_Sch_Session());
		}
		
		form.getLocalContext().setSessionBookingRights(map);
		return (Boolean) entry;
	}
	
	private String[] validateSearchCriteria()
	{
		List<String> errors = new ArrayList<String>(); 
		if(form.lyr1().tabSearch().dteFrom().getValue() == null)
			errors.add("'From' date is mandatory");
		if(form.lyr1().tabSearch().dteTo().getValue() == null)
			errors.add("'To' date is mandatory");
		
		// WDEV-13221
		// Validate 'From' date not to be set after 'To' date
		if (form.lyr1().tabSearch().dteFrom().getValue() != null && form.lyr1().tabSearch().dteTo().getValue() != null)
		{
			if (form.lyr1().tabSearch().dteFrom().getValue().isGreaterThan(form.lyr1().tabSearch().dteTo().getValue()))
			{
				errors.add("'From' date can not be set after 'To' date.");
			}
		}
		
		//if(form.lyr1().tabSearch().qmbProcedure().getValue() == null)
		//	errors.add("'Procedure' is mandatory");
		if(form.lyr1().tabSearch().cmbTheatreType().getValue() == null)
			errors.add("'Type' is mandatory");
	
		//WDEV-18396
		if(form.lyr1().tabSearch().qmbProcedure().getValue() == null)
			errors.add("'Procedure' is mandatory");
		
		return errors.size() > 0 ? errors.toArray(new String[0]) : null;	
	}

	private void loadSessions()
	{
		listSessions();
		clearScreen(false);		
		
		SessionTheatreVoCollection voColSessions = form.getLocalContext().getSessions();
		if(voColSessions != null)
		{
			for(SessionTheatreVo voSession : voColSessions)
			{
				grdTheatreSessionRow row = form.grdTheatreSession().getRows().newRow();
				row.setColDate(voSession.getSessionDate());
				row.setColConsultant(getConsultantsListString(voSession));
				if(voSession.getSchLocationIsNotNull())
					row.setColLocation(voSession.getSchLocation().toString());
				row.setColNoBooked(domain.countNonCancelledAppointmentsForSession(voSession).toString());
				row.setColTimeRemaining(voSession.getTheatreProceduresRemainingIsNotNull() && voSession.getTheatreProceduresRemaining().getRemainingTimeInMinsIsNotNull() ? voSession.getTheatreProceduresRemaining().formatTimeRemaining() : "");
				row.setValue(voSession);
			}
			
			if(voColSessions.size() == 0)
				engine.showMessage("No matching records found");
			
			//WDEV-18396
			form.getLocalContext().setSelectedProcedure(voColSessions.size()>0 ? form.lyr1().tabSearch().qmbProcedure().getValue() : null);
			
		}
	}
	
	private void clearScreen(boolean leaveInstantiatedData)
	{
		form.grdTheatreSession().getRows().clear();
		
		if(!leaveInstantiatedData)
			form.grdSelected().getRows().clear();
	}	
	
	private void listSessions()
	{				
		Date dateStart = form.lyr1().tabSearch().dteFrom().getValue(); 
		Date dateEnd = form.lyr1().tabSearch().dteTo().getValue(); 
		
		SessionTheatreVoCollection voCollSessionShort = domain.listSession(dateStart, dateEnd, form.lyr1().tabSearch().cmbService().getValue(), form.lyr1().tabSearch().cmbLocation().getValue(), form.lyr1().tabSearch().ccConsultant().getValue(), form.lyr1().tabSearch().qmbProcedure().getValue(), form.lyr1().tabSearch().cmbTheatreType().getValue(), form.lyr1().tabSearch().intRequiredProcTime().getValue(), engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS), form.lyr1().tabSearch().cmbAnaesType().getValue());
		form.getLocalContext().setSessions(voCollSessionShort);
	}
	/**
	 * 
	 */
	private void disableSearchCriteria()
	{
		form.lyr1().tabSearch().cmbService().setEnabled(false);
		form.lyr1().tabSearch().qmbProcedure().setEnabled(false);
		form.lyr1().tabSearch().cmbTheatreType().setEnabled(false);
		form.lyr1().tabSearch().ccConsultant().setEnabled(false);
		form.lyr1().tabSearch().imbClear().setEnabled(false);
		form.lyr1().tabSearch().intRequiredProcTime().setEnabled(false);
	}
	
	private void enableSearchCriteria()
	{
		form.lyr1().tabSearch().cmbService().setEnabled(true);
		form.lyr1().tabSearch().qmbProcedure().setEnabled(true);
		form.lyr1().tabSearch().cmbTheatreType().setEnabled(true);
		form.lyr1().tabSearch().ccConsultant().setEnabled(true);
		form.lyr1().tabSearch().imbClear().setEnabled(true);
		form.lyr1().tabSearch().intRequiredProcTime().setEnabled(true);
	}

	private void clearSearchCriteria(boolean anaesTheticTypeDefaulted)
	{
		form.lyr1().tabSearch().dteFrom().setValue(null);
		form.lyr1().tabSearch().dteTo().setValue(null);
		form.lyr1().tabSearch().qmbProcedure().setValue(null);
		form.lyr1().tabSearch().cmbService().setValue(null);
		form.lyr1().tabSearch().ccConsultant().setValue(null);
		form.lyr1().tabSearch().cmbLocation().setValue(null);
		form.lyr1().tabSearch().cmbTheatreType().setValue(null);
		form.lyr1().tabSearch().intRequiredProcTime().setValue(null);
		if(!anaesTheticTypeDefaulted)
			form.lyr1().tabSearch().cmbAnaesType().setValue(null);
	}


	private void loadReferralDetails()
	{
		ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
		populateReferralDetailsControlsFromData(voReferral);
	}
	
	private void populateReferralDetailsControlsFromData(ReferralBookingVo voReferral)
	{
		clearReferralDetails();
		if(voReferral == null)
			return;
		
		//WDEV-8144
		form.getLocalContext().setReferralCareContext(voReferral.getCareContext());
		
		if(voReferral.getReferralLetterDetailIsNotNull())
		{	
			form.lyr1().tabReferral().dteReferral().setValue(voReferral.getReferralLetterDetail().getDateOfReferral());
			form.lyr1().tabReferral().dteReferralLetter().setValue(voReferral.getReferralLetterDetail().getDateReferralReceived());
			
			if(voReferral.getReferralLetterDetail().getServiceIsNotNull())
			{
				form.lyr1().tabReferral().cmbReferralService().newRow(voReferral.getReferralLetterDetail().getService(), voReferral.getReferralLetterDetail().getService().getServiceName());
				form.lyr1().tabReferral().cmbReferralService().setValue(voReferral.getReferralLetterDetail().getService());
			}
			
			form.lyr1().tabReferral().lblEWKPI().setValue(voReferral.getReferralLetterDetail().getDaysToRTTBreachDateIsNotNull()?"End "+voReferral.getReferralLetterDetail().getDaysToRTTBreachDate()/7+" week KPI:":"End week KPI:");//WDEV-11713
			form.lyr1().tabReferral().dteEndDayKPI().setValue(voReferral.getReferralLetterDetail().getEndXdayKPI());//WDEV-11713
			form.getLocalContext().setKPIDays(voReferral.getReferralLetterDetail().getKPIDays());	
		}
		
		form.getLocalContext().setTriageDateTime(voReferral.getTriageDateTime());
	
		populateInvApptTree(voReferral);

		if (voReferral.getCareContextIsNotNull())
		{
			SuitableForSurgeryAssessmentMinVo voSfSA = domain.getSuitableForSurgeryAssessmentByCareContext(voReferral.getCareContext());
			
			if (voSfSA != null)
			{
				if (voSfSA.getProcedureIsNotNull() && voSfSA.getProcedure().getProcedureIsNotNull())
				{
					// WDEV-18212
					if (voReferral.getIsFitForSurgery() == null || (voReferral.getIsFitForSurgery() != null && !voReferral.getIsFitForSurgery()))
						engine.showMessage("Please be aware that the patient has not been assessed as Fit for Surgery.", "Warning", MessageButtons.OK, MessageIcon.WARNING);

					if (form.getGlobalContext().Scheduling.getTheatreAppointment() == null)// make sure we are not rebooking
					{
						form.lyr1().tabSearch().qmbProcedure().newRow(voSfSA.getProcedure().getProcedure(), voSfSA.getProcedure().getProcedure().getProcedureName());
						form.lyr1().tabSearch().qmbProcedure().setValue(voSfSA.getProcedure().getProcedure());
						qmbProcedureValueChanged(); // WDEV-8144
					}

					// WDEV-11777 time required from suitable for surgery needs to be displayed
					if (voSfSA.getRequiredDurationInMinsIsNotNull())
					{
						// WDEV-18212 if rebooking check if Procedure is the same and populate the time from SFS
						if (form.getGlobalContext().Scheduling.getTheatreAppointment() == null || (form.getGlobalContext().Scheduling.getTheatreAppointment() != null && form.getGlobalContext().Scheduling.getTheatreProcedure() != null && voSfSA.getProcedure().getProcedure().getID_Procedure().equals(form.getGlobalContext().Scheduling.getTheatreProcedure().getID_Procedure())))
						{
							form.lyr1().tabSearch().intRequiredProcTime().setValue(voSfSA.getRequiredDurationInMins());
							form.getLocalContext().setSuitableForSurgeryDuration(voSfSA.getRequiredDurationInMins());
						}
					}
				}

				// WDEV-11981 - default here with the value - ignore authoring HCP
				form.lyr1().tabSearch().ccConsultant().setValue(voSfSA.getNamedSurgeon());

				if (voSfSA.getTheatreTypeIsNotNull())
					form.lyr1().tabSearch().cmbTheatreType().setValue(voSfSA.getTheatreType());
			}
		}

		if (form.getGlobalContext().Scheduling.getTheatreAppointment() == null)
		{
			// WDEV-8295
			if (voReferral.getReferralLetterDetailIsNotNull())
				form.lyr1().tabSearch().cmbService().setValue(voReferral.getReferralLetterDetail().getService());
		}
		
		form.getLocalContext().setLastReferralErod(voReferral.getReferralEROD());
	}
	
	private void qmbProcedureValueChanged()
	{
		form.lyr1().tabSearch().intRequiredProcTime().setValue(null);
		
		if(form.lyr1().tabSearch().qmbProcedure().getValue() == null)
			return;
		
		//WDEV-9539
		if(form.lyr1().tabSearch().qmbProcedure().getValue() instanceof ProcedureLiteVo)
			form.lyr1().tabSearch().intRequiredProcTime().setValue(((ProcedureLiteVo)form.lyr1().tabSearch().qmbProcedure().getValue()).getDurationInMins());
	}
	
	private void populateInvApptTree(ReferralBookingVo voReferral)
	{
		if(voReferral.getCurrentAppointmentsIsNotNull() && voReferral.getCurrentAppointments().size() > 0)
		{
			TreeNode apptNode = form.lyr1().tabReferral().treInvAppts().getNodes().add(CURRENT_APPT_NODE, "Current Appointments");
			apptNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			apptNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(BookingAppointmentLiteVo voAppt : voReferral.getCurrentAppointments())
			{
				TreeNode node = apptNode.getNodes().add(voAppt, voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
			}
			
			apptNode.setExpanded(true);
		}
		if(voReferral.getAppointmentsRequiringRebookIsNotNull() && voReferral.getAppointmentsRequiringRebook().size() > 0)
		{
			TreeNode rebookNode = form.lyr1().tabReferral().treInvAppts().getNodes().add(REBOOK_APPT_NODE, "Appointments Requiring a Rebook");
			
			rebookNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			rebookNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(BookingAppointmentLiteVo voAppt : voReferral.getAppointmentsRequiringRebook())
			{
				TreeNode node = rebookNode.getNodes().add(voAppt, voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
			}
			
			rebookNode.setExpanded(true);
		}
		if(voReferral.getOrdersRequiringApptIsNotNull() && voReferral.getOrdersRequiringAppt().size() > 0)
		{
			TreeNode invNode = form.lyr1().tabReferral().treInvAppts().getNodes().add(INV_NODE, "Investigations requiring an Appointment");
			
			invNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			invNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(OrderInvestigationBookingVo voOrderInv : voReferral.getOrdersRequiringAppt())
			{
				TreeNode node = invNode.getNodes().add(voOrderInv, voOrderInv.toString());
				node.setCollapsedImage(form.getImages().OCRR.Investigation);
				node.setExpandedImage(form.getImages().OCRR.Investigation);
			}
			
			invNode.setExpanded(true);
		}
		if(voReferral.getOtherAppointmentsIsNotNull() && voReferral.getOtherAppointments().size() > 0)
		{
			TreeNode clinNode = form.lyr1().tabReferral().treInvAppts().getNodes().add(OTHER_NODE, "Clinical Appointments");
			
			clinNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			clinNode.setCollapsedImage(form.getImages().Core.OpenFolder);
			
			for(BookingAppointmentLiteVo voAppt : voReferral.getOtherAppointments())
			{
				TreeNode node = clinNode.getNodes().add(voAppt, voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
				node.setEnabled(false);
			}
			
			clinNode.setExpanded(true);
		}
	}
	
	private void loadServices()
	{
		form.lyr1().tabSearch().cmbService().clear();
		ServiceLiteVoCollection voCollServices = domain.listActiveCanBeScheduledService();
		if (voCollServices != null)
		{
			for (int i = 0; i < voCollServices.size(); i++)
				form.lyr1().tabSearch().cmbService().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}
	}

	private void loadLocations()
	{
		form.lyr1().tabSearch().cmbLocation().clear();
		LocationLiteVoCollection voCollLoc = domain.listLocationLite();
		if (voCollLoc != null)
		{
			for (LocationLiteVo item : voCollLoc)
				form.lyr1().tabSearch().cmbLocation().newRow(item, item.getName());
		}
	}
	
	private void clearReferralDetails()
	{
		form.lyr1().tabReferral().dteReferral().setValue(null);
		form.lyr1().tabReferral().dteReferralLetter().setValue(null);
		form.lyr1().tabReferral().dteEndDayKPI().setValue(null);
		form.lyr1().tabReferral().cmbReferralService().clear();
		form.lyr1().tabReferral().treInvAppts().clear();	
		form.getLocalContext().setReferralCareContext(null);
	}

	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		form.lyr1().tabReferral().btnEROD().setVisible(true);
		form.lyr1().tabReferral().btnEROD().setTooltip(getErodInfo());
		
		form.chkElective().setVisible(ConfigFlag.GEN.USE_ELECTIVE_LIST_FUNCTIONALITY.getValue());//WDEV-18396
		
		
	}
	
	private String getErodInfo()
	{
		if(form.getLocalContext().getLastReferralErod() == null)
			return null;
		
		StringBuilder tooltip = new StringBuilder();
		
		tooltip.append("<b>Earliest Date Offered: </b>" + form.getLocalContext().getLastReferralErod().getERODDate1());
		
		if(form.getLocalContext().getLastReferralErod().getERODDate2() != null)
		{
			tooltip.append("<br><b>Second Date Offered: </b>" + form.getLocalContext().getLastReferralErod().getERODDate2());
		}
		
		if(form.getLocalContext().getLastReferralErod().getPatAvailFromDate() != null)
		{
			tooltip.append("<br><b>Patient Available from Date: </b>" + form.getLocalContext().getLastReferralErod().getPatAvailFromDate());
		}
		
		tooltip.append("<br><b>EROD Type: </b>" + form.getLocalContext().getLastReferralErod().getERODType().getText());
		
		if(form.getLocalContext().getLastReferralErod().getAppointment() != null)
		{
			tooltip.append("<br><b>Appointment Date: </b>" + (form.getLocalContext().getLastReferralErod().getAppointment() != null ? form.getLocalContext().getLastReferralErod().getAppointment().getAppointmentDate() : ""));
			tooltip.append("<br><b>Clinic Name: </b>" + ((form.getLocalContext().getLastReferralErod().getAppointment() != null && form.getLocalContext().getLastReferralErod().getAppointment().getSession() != null) ? form.getLocalContext().getLastReferralErod().getAppointment().getSession().getName() : ""));
		}
		
		return tooltip.toString();
	}

	protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		// TODO Add your code here.
	}

	
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(formName != null)
		{
			if(formName.equals(form.getForms().RefMan.BookTheatreSlotDetailDialog))
			{
				if(result != null)
				{
					if(result.equals(DialogResult.OK))
					{
						// WDEV-13243
						// Theatre appointment was re-booked - clear the global context
						form.getGlobalContext().Scheduling.setTheatreAppointment(null);
						refreshScreen();
						//wdev-13790
						ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
						form.lyr1().tabReferral().treInvAppts().clear();
						populateInvApptTree(voReferral);
						//------
						
						form.getLocalContext().setLastReferralErod(voReferral.getReferralEROD());
						updateControlsState();
					}
				}
			}
			if(formName.equals(form.getForms().Scheduling.SessionParentChildSlotDialog))
			{
				if(result != null)
				{
					if(result.equals(DialogResult.OK))
					{
						try
						{
							domain.addSlotToSession(form.grdTheatreSession().getValue(), form.getGlobalContext().Scheduling.getSessionParentChildSlot());
						}
						catch (StaleObjectException e)
						{
							engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
						}
						refreshScreen();
					}
				}
			}
			if(formName.equals(form.getForms().Scheduling.ModifyMultipleSlotsDialog))
			{
				if(result != null)
				{
					if(result.equals(DialogResult.OK))
					{
						refreshScreen();
					}
				}
			}
			if(formName.equals(form.getForms().Scheduling.MoveAppointmentDialog))
			{
				if(result != null)
				{
					if(result.equals(DialogResult.OK))
					{
						refreshScreen();
						//wdev-13813
						ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
						form.lyr1().tabReferral().treInvAppts().clear();
						if(voReferral != null)
							populateInvApptTree(voReferral);
						//------
					}
				}
			}
			if(formName.equals(form.getForms().Scheduling.SortFixedTheatreAppointments))
			{
				if(result != null)
				{
					if(result.equals(DialogResult.OK))
					{
						if(form.grdTheatreSession().getValue() != null)
						{
							refreshScreen();
							//wdev-13813
							ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
							form.lyr1().tabReferral().treInvAppts().clear();
							if(voReferral != null)
								populateInvApptTree(voReferral);
							//------
						}
					}
				}
			}
			if(formName.equals(form.getForms().RefMan.ERODDialog))
			{
				form.getLocalContext().setLastReferralErod(domain.getLastTheatreEROD(form.getGlobalContext().RefMan.getCatsReferral()));
				updateControlsState();
				return; //WDEV-18461
			}	
		}
		
		// WDEV-13222
		// Refresh screen
		refreshScreen();		
	}

	/**
	 * 	//1) Fire Search
	 *	//2) Reselect Session
	 */
	private void refreshScreen()
	{
		clearContexts();
		SessionTheatreVo voSessionToReselect = form.grdTheatreSession().getValue();
		//WDEV-18461  - search criteria can be null/invalid
		if (validateSearchCriteria() == null)
		{
			loadSessions();
		}	
		//-----------
		form.grdTheatreSession().setValue(voSessionToReselect);
		loadTheatreSlots();
		
		// WDEV-13221 & WDEV-13243
		// Re-enable search criteria, only if the appointment was rebooked
		if (!form.getGlobalContext().Scheduling.getTheatreAppointmentIsNotNull())
		{
			enableSearchCriteria();
		}
		
		updateContextMenuState();
	}
	
	protected void onQmbProcedureValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		qmbProcedureValueChanged();
	}
	
	protected void onQmbProcedureTextSubmited(String value) throws ims.framework.exceptions.PresentationLogicException
	{
		form.lyr1().tabSearch().qmbProcedure().clear();

		IGenericItem[] procedures = domain.listProcedures(value);
		if(procedures != null)
		{
			for (int i = 0; i < procedures.length; i++)
			{
				if (procedures[i].getIGenericItemInfoName() != null)
					form.lyr1().tabSearch().qmbProcedure().newRow(procedures[i], procedures[i].getIGenericItemInfoName());
			}
			
			if(procedures.length == 1)
			{
				form.lyr1().tabSearch().qmbProcedure().setValue(procedures[0]);
				qmbProcedureValueChanged(); //WDEV-11777
			}
			else if(procedures.length > 1)
				form.lyr1().tabSearch().qmbProcedure().showOpened();
			else
				engine.showErrors(new String[]{"No matching records found"});
		}	
	}
	
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearSearchCriteria(false);
		clearGrids();
		form.getLocalContext().setSelectedProcedure(null);//WDEV-18396
	}
	
	private void clearGrids()
	{
		form.grdTheatreSession().getRows().clear();
		form.grdSelected().getRows().clear();
		
		form.getLocalContext().setSessions(null);
		updateContextMenuState();
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String[] errors = validateSearchCriteria();
		if(errors == null)
		{
			loadSessions();
			updateContextMenuState();
		}
		else
			engine.showErrors(errors);		
		
	}
	
	protected void onTreInvApptsTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		
	}
	
	protected void onBtnViewTheatreListOrderClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-12918
		form.getGlobalContext().Scheduling.setTheatreSession(null);
		if(form.grdTheatreSession().getValue() != null)
			form.getGlobalContext().Scheduling.setTheatreSession( form.grdTheatreSession().getValue());
		
		engine.open(form.getForms().Scheduling.SortFixedTheatreAppointments);
	}
	
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearContexts();
		engine.close(DialogResult.OK);
	}
	
	private void clearContexts()
	{
		form.getLocalContext().setIsRebookApptSelected(null); //aciubotaru - WDEV-7860 
		form.getLocalContext().setSch_Booking(null);
		form.getLocalContext().setSelectedAppointments(null);
		form.getLocalContext().setSelectedSessions(null);
		form.getLocalContext().setSuitableForSurgeryDuration(null); //WDEV-11928
		form.getGlobalContext().Scheduling.setSch_BookingTheatre(null);
	}
	
	
	@Override
	protected void onGrdSelectedSelectionChanged() throws PresentationLogicException
	{
		updateContextMenuState();
	}

	private void updateContextMenuState()
	{
		SessionParentChildSlotVo voSlot = form.grdSelected().getValue();
		boolean slotAvailable = voSlot != null && voSlot.getAppointment() == null && voSlot.getStatusIsNotNull() && voSlot.getStatus().equals(Status_Reason.SLOTOPENED); 
	
		//WDEV-13313
		if(engine.getFormName().equals(form.getForms().RefMan.TheatreAvailability))
			form.getContextMenus().Scheduling.getBookTheatreSlotBOOKItem().setVisible(false);
		else
			form.getContextMenus().Scheduling.getBookTheatreSlotBOOKItem().setVisible(slotAvailable);
		
		form.getContextMenus().Scheduling.getBookTheatreSlotSUSPENDItem().setVisible(slotAvailable);
		
		form.getContextMenus().Scheduling.getBookTheatreSlotRELEASEItem().setVisible(voSlot != null && voSlot.getStatusIsNotNull() && voSlot.getStatus().equals(Status_Reason.SUSPENDED));
		
		form.getContextMenus().Scheduling.getBookTheatreSlotADDItem().setVisible(form.grdTheatreSession().getValue() != null && engine.hasRight(AppRight.CAN_OVERBOOK_THEATRE_APPTS));
		
		form.getContextMenus().Scheduling.getBookTheatreSlotMOVEItem().setVisible(voSlot != null && voSlot.getAppointmentIsNotNull() && voSlot.getAppointment().getApptStatusIsNotNull() && voSlot.getAppointment().getApptStatus().equals(Status_Reason.BOOKED));
	}

	@Override
	protected void onGrdTheatreSessionSelectionChanged() throws PresentationLogicException
	{
		loadTheatreSlots();
		updateContextMenuState();
	}
	
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		if(sender != null)
		{
			if(sender.equals(form.grdSelected()))
			{
				switch(menuItemID)
				{
					case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.BOOK:
						form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(new BookTheatreSlotDialogVo());
						
						BookTheatreSlotDialogVo voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
						
						voData.setAppointmentDuration(form.lyr1().tabSearch().intRequiredProcTime().getValue());
						voData.setKPIDate(form.lyr1().tabReferral().dteEndDayKPI().getValue());
						voData.setParentChildSlot(form.grdSelected().getValue());
						voData.setSession(form.grdTheatreSession().getValue());
						if(form.getLocalContext().getAnaestheticTypeIsNotNull())
							voData.setAnaestheticTypeToDefault(form.lyr1().tabSearch().cmbAnaesType().getValue());
						
						voData.setTheatreApptToRebook(form.getGlobalContext().Scheduling.getTheatreAppointment());
						//WDEV-13344
						voData.setProcedureToDefault(form.lyr1().tabSearch().qmbProcedure().getValue());
						voData.setConsultantToDefault(form.lyr1().tabSearch().ccConsultant().getValue());
						
						form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(voData);
						//WDEV-18459
						form.getGlobalContext().RefMan.setReferralEROD(form.getLocalContext().getLastReferralErod());
						engine.open(form.getForms().RefMan.BookTheatreSlotDetailDialog, new Object[] {form.getLocalContext().getReferralCareContext(),form.chkElective().getValue(),form.getLocalContext().getSelectedProcedure()});//WDEV-18396
						break;
					case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.ADD:
						form.getGlobalContext().Scheduling.setSessionParentChildSlot(new SessionParentChildSlotVo());
						engine.open(form.getForms().Scheduling.SessionParentChildSlotDialog, "Insert Theatre Slot");
					break;
					case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.SUSPEND:
						setContextInfoForModifyMultipleSlotsDialog();
						engine.open(form.getForms().Scheduling.ModifyMultipleSlotsDialog, new Object[]{Status_Reason.SUSPENDED}, "Suspend");
					break;
					case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.RELEASE:
						setContextInfoForModifyMultipleSlotsDialog();
						engine.open(form.getForms().Scheduling.ModifyMultipleSlotsDialog, new Object[]{Status_Reason.SLOTOPENED}, "Release");
					break;
					case GenForm.ContextMenus.SchedulingNamespace.BookTheatreSlot.MOVE:
						setContextInfoForMoveAppointmentDialog();
						//wdev-13814
						if(form.getGlobalContext().Scheduling.getMoveAppointmentDialogDataIsNotNull())
						{
							BookingAppointmentTheatreLiteVo appointmentVo = form.getGlobalContext().Scheduling.getMoveAppointmentDialogData().getFromSlotIsNotNull() ? form.getGlobalContext().Scheduling.getMoveAppointmentDialogData().getFromSlot().getAppointment():null;
							BookingAppointmentTheatreLiteVo tempVo = domain.getBookingAppointmentTheatre(appointmentVo);
							if(tempVo != null)
							{
							
								if(tempVo.getVersion_Booking_Appointment() != appointmentVo.getVersion_Booking_Appointment() )
								{
									engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
									refreshScreen();
									
									ReferralBookingVo voReferral = domain.getReferralDetail(form.getGlobalContext().RefMan.getCatsReferral());
									form.lyr1().tabReferral().treInvAppts().clear();
									if(voReferral != null)
										populateInvApptTree(voReferral);
									
									return;
									
								}
								
							}
							
						}
						//----------
						engine.open(form.getForms().Scheduling.MoveAppointmentDialog, new Object[]{Boolean.TRUE});
					break;
					default:
				}
			}
		}
	}

	/**
	 * 
	 */
	private void setContextInfoForMoveAppointmentDialog()
	{
		MoveAppointmentDataVo voData = new MoveAppointmentDataVo();
		voData.setFromSlot(form.grdSelected().getValue());
		form.getGlobalContext().Scheduling.setMoveAppointmentDialogData(voData);
	}

	/**
	 * 
	 */
	private void setContextInfoForModifyMultipleSlotsDialog()
	{
		BookTheatreSlotDialogVo voData;
		form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(new BookTheatreSlotDialogVo());
		
		voData = form.getGlobalContext().Scheduling.getBookTheatreSlotDialogData();
		voData.setParentChildSlot(form.grdSelected().getValue());
		voData.setSession(form.grdTheatreSession().getValue());
		
		form.getGlobalContext().Scheduling.setBookTheatreSlotDialogData(voData);
	}


	/**
	 * WDEV-18035
	 */	
	protected void OnBtnERODClick() throws PresentationLogicException 
	{	
		engine.open(form.getForms().RefMan.ERODDialog,new Object[] {ERODType.ELECTIVE});
	}
}
