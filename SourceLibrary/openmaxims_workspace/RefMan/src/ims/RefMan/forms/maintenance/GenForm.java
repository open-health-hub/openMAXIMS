// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.maintenance;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrMaintenanceLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabBookExcContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbBookClinicComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.ProfileLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.ProfileLiteVo getValue()
				{
					return (ims.scheduling.vo.ProfileLiteVo)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.ProfileLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbBookSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.clinical.vo.ServiceRefVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.clinical.vo.ServiceRefVo getValue()
				{
					return (ims.core.clinical.vo.ServiceRefVo)super.control.getValue();
				}
				public void setValue(ims.core.clinical.vo.ServiceRefVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdBookDetRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdBookDetRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateTimeOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDateTime(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDateTime()
				{
					return (String)super.row.get(0);
				}
				public void setColDateTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColPatientNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColPatientNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColPatientNameOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColPatientName(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColPatientName()
				{
					return (String)super.row.get(1);
				}
				public void setColPatientName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColPatientNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColUBRNReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColUBRNReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColUBRNOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColUBRN(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColUBRN()
				{
					return (String)super.row.get(2);
				}
				public void setColUBRN(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColUBRNTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColRequestTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColRequestTypeReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColRequestTypeOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColRequestType(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColRequestType()
				{
					return (String)super.row.get(3);
				}
				public void setColRequestType(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColRequestTypeTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColSlotDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColSlotDateTimeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColSlotDateTimeOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColSlotDateTime(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColSlotDateTime()
				{
					return (String)super.row.get(4);
				}
				public void setColSlotDateTime(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColSlotDateTimeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColImageReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColImageReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColImageOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColImage(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.framework.utils.Image getColImage()
				{
					return (ims.framework.utils.Image)super.row.get(5);
				}
				public void setColImage(ims.framework.utils.Image value)
				{
					super.row.set(5, value);
				}
				public void setCellColImageTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.scheduling.vo.SessionSlotVo getValue()
				{
					return (ims.scheduling.vo.SessionSlotVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionSlotVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdBookDetRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdBookDetRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdBookDetRow get(int index)
				{
					return new grdBookDetRow(super.collection.get(index));
				}
				public grdBookDetRow newRow()
				{
					return new grdBookDetRow(super.collection.newRow());
				}
				public grdBookDetRow newRow(boolean autoSelect)
				{
					return new grdBookDetRow(super.collection.newRow(autoSelect));
				}
				public grdBookDetRow newRowAt(int index)
				{
					return new grdBookDetRow(super.collection.newRowAt(index));
				}
				public grdBookDetRow newRowAt(int index, boolean autoSelect)
				{
					return new grdBookDetRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdBookDetGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.scheduling.vo.SessionSlotVoCollection getValues()
				{
					ims.scheduling.vo.SessionSlotVoCollection listOfValues = new ims.scheduling.vo.SessionSlotVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.SessionSlotVo getValue()
				{
					return (ims.scheduling.vo.SessionSlotVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionSlotVo value)
				{
					super.grid.setValue(value);
				}
				public grdBookDetRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdBookDetRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdBookDetRowCollection getRows()
				{
					return new grdBookDetRowCollection(super.grid.getRows());
				}
				public grdBookDetRow getRowByValue(ims.scheduling.vo.SessionSlotVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdBookDetRow(row);
				}
				public void setColDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColPatientNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColPatientNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColUBRNHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColUBRNHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColRequestTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColRequestTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColSlotDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColSlotDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 564, 167, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.ENABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Count of Booking Exceptions", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 344, 16, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 344, 40, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 392, 14, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 392, 38, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 104, 38, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbBookClinicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbBookClinicTemp);
				cmbBookClinicComboBox cmbBookClinic = (cmbBookClinicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBookClinicComboBox.class, m_cmbBookClinicTemp);
				super.addComboBox(cmbBookClinic);
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 104, 14, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbBookSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbBookSpecialtyTemp);
				cmbBookSpecialtyComboBox cmbBookSpecialty = (cmbBookSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbBookSpecialtyComboBox.class, m_cmbBookSpecialtyTemp);
				super.addComboBox(cmbBookSpecialty);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 804, 473, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdBookDetTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuMaintenance, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdBookDetTemp);
				grdBookDetGrid grdBookDet = (grdBookDetGrid)GridFlyweightFactory.getInstance().createGridBridge(grdBookDetGrid.class, m_grdBookDetTemp);
				grdBookDet.addStringColumn("Date", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBookDet.addStringColumn("Patient Info", 0, 0, 270, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBookDet.addStringColumn("UBRN", 0, 0, 105, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBookDet.addStringColumn("Request Type", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBookDet.addStringColumn("Slot Time", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdBookDet.addImageColumn(" ", 1, 1, -1, true, 0);
				super.addGrid(grdBookDet);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 780, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 748, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Label lblBookCount()
			{
				return (Label)super.getControl(0);
			}
			public DateControl dteBookFrom()
			{
				return (DateControl)super.getControl(5);
			}
			public DateControl dteBookTo()
			{
				return (DateControl)super.getControl(6);
			}
			public cmbBookClinicComboBox cmbBookClinic()
			{
				return (cmbBookClinicComboBox)super.getComboBox(0);
			}
			public cmbBookSpecialtyComboBox cmbBookSpecialty()
			{
				return (cmbBookSpecialtyComboBox)super.getComboBox(1);
			}
			public grdBookDetGrid grdBookDet()
			{
				return (grdBookDetGrid)super.getGrid(0);
			}
			public ImageButton imbBookClear()
			{
				return (ImageButton)super.getControl(10);
			}
			public ImageButton imbBookSearch()
			{
				return (ImageButton)super.getControl(11);
			}
		}
		public static class tabCancelExcContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbCancelClinicComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.scheduling.vo.ProfileLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.scheduling.vo.ProfileLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.scheduling.vo.ProfileLiteVo getValue()
				{
					return (ims.scheduling.vo.ProfileLiteVo)super.control.getValue();
				}
				public void setValue(ims.scheduling.vo.ProfileLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbCancelSpecialtyComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.clinical.vo.ServiceRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.clinical.vo.ServiceRefVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.clinical.vo.ServiceRefVo getValue()
				{
					return (ims.core.clinical.vo.ServiceRefVo)super.control.getValue();
				}
				public void setValue(ims.core.clinical.vo.ServiceRefVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdCancelDetRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdCancelDetRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateTimeOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDateTime(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDateTime()
				{
					return (String)super.row.get(0);
				}
				public void setColDateTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColPatientNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColPatientNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColPatientNameOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColPatientName(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColPatientName()
				{
					return (String)super.row.get(1);
				}
				public void setColPatientName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColPatientNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColUBRNReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColUBRNReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColUBRNOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColUBRN(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColUBRN()
				{
					return (String)super.row.get(2);
				}
				public void setColUBRN(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColUBRNTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColRequestTypeReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColRequestTypeReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColRequestTypeOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColRequestType(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColRequestType()
				{
					return (String)super.row.get(3);
				}
				public void setColRequestType(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColRequestTypeTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColSlotDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColSlotDateTimeReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColSlotDateTimeOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColSlotDateTime(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColSlotDateTime()
				{
					return (String)super.row.get(4);
				}
				public void setColSlotDateTime(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColSlotDateTimeTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColImageReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColImageReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColImageOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColImage(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.framework.utils.Image getColImage()
				{
					return (ims.framework.utils.Image)super.row.get(5);
				}
				public void setColImage(ims.framework.utils.Image value)
				{
					super.row.set(5, value);
				}
				public void setCellColImageTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.scheduling.vo.SessionSlotVo getValue()
				{
					return (ims.scheduling.vo.SessionSlotVo)super.row.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionSlotVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdCancelDetRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdCancelDetRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdCancelDetRow get(int index)
				{
					return new grdCancelDetRow(super.collection.get(index));
				}
				public grdCancelDetRow newRow()
				{
					return new grdCancelDetRow(super.collection.newRow());
				}
				public grdCancelDetRow newRow(boolean autoSelect)
				{
					return new grdCancelDetRow(super.collection.newRow(autoSelect));
				}
				public grdCancelDetRow newRowAt(int index)
				{
					return new grdCancelDetRow(super.collection.newRowAt(index));
				}
				public grdCancelDetRow newRowAt(int index, boolean autoSelect)
				{
					return new grdCancelDetRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdCancelDetGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.scheduling.vo.SessionSlotVoCollection getValues()
				{
					ims.scheduling.vo.SessionSlotVoCollection listOfValues = new ims.scheduling.vo.SessionSlotVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.scheduling.vo.SessionSlotVo getValue()
				{
					return (ims.scheduling.vo.SessionSlotVo)super.grid.getValue();
				}
				public void setValue(ims.scheduling.vo.SessionSlotVo value)
				{
					super.grid.setValue(value);
				}
				public grdCancelDetRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdCancelDetRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdCancelDetRowCollection getRows()
				{
					return new grdCancelDetRowCollection(super.grid.getRows());
				}
				public grdCancelDetRow getRowByValue(ims.scheduling.vo.SessionSlotVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdCancelDetRow(row);
				}
				public void setColDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColPatientNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColPatientNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColUBRNHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColUBRNHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColRequestTypeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColRequestTypeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColSlotDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColSlotDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 564, 199, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Count of Cancel Exception records", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 344, 16, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 344, 40, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Specialty:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 39, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinic:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 392, 14, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 392, 38, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 104, 38, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbCancelClinicTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbCancelClinicTemp);
				cmbCancelClinicComboBox cmbCancelClinic = (cmbCancelClinicComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCancelClinicComboBox.class, m_cmbCancelClinicTemp);
				super.addComboBox(cmbCancelClinic);
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 104, 14, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbCancelSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbCancelSpecialtyTemp);
				cmbCancelSpecialtyComboBox cmbCancelSpecialty = (cmbCancelSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCancelSpecialtyComboBox.class, m_cmbCancelSpecialtyTemp);
				super.addComboBox(cmbCancelSpecialty);
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 804, 473, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdCancelDetTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuMaintenance, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdCancelDetTemp);
				grdCancelDetGrid grdCancelDet = (grdCancelDetGrid)GridFlyweightFactory.getInstance().createGridBridge(grdCancelDetGrid.class, m_grdCancelDetTemp);
				grdCancelDet.addStringColumn("Date", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCancelDet.addStringColumn("Patient Info", 0, 0, 270, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCancelDet.addStringColumn("UBRN", 0, 0, 105, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCancelDet.addStringColumn("Request Type", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCancelDet.addStringColumn("Slot Time", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdCancelDet.addImageColumn(" ", 1, 1, -1, true, 0);
				super.addGrid(grdCancelDet);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 780, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 748, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Label lblCancelCount()
			{
				return (Label)super.getControl(0);
			}
			public DateControl dteCancelFrom()
			{
				return (DateControl)super.getControl(5);
			}
			public DateControl dteCancelTo()
			{
				return (DateControl)super.getControl(6);
			}
			public cmbCancelClinicComboBox cmbCancelClinic()
			{
				return (cmbCancelClinicComboBox)super.getComboBox(0);
			}
			public cmbCancelSpecialtyComboBox cmbCancelSpecialty()
			{
				return (cmbCancelSpecialtyComboBox)super.getComboBox(1);
			}
			public grdCancelDetGrid grdCancelDet()
			{
				return (grdCancelDetGrid)super.getGrid(0);
			}
			public ImageButton imbCancelClear()
			{
				return (ImageButton)super.getControl(10);
			}
			public ImageButton imbCancelSearch()
			{
				return (ImageButton)super.getControl(11);
			}
		}
		public static class tabSlotPollContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSlotPollRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSlotPollRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColDateTimeReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColDateTimeOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColDateTime(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColDateTime()
				{
					return (String)super.row.get(0);
				}
				public void setColDateTime(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColDateTimeTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDosReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDosReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDosOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColDos(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColDos()
				{
					return (String)super.row.get(1);
				}
				public void setColDos(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColDosTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColDateFromReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColDateFromReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColDateFromOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColDateFrom(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColDateFrom()
				{
					return (String)super.row.get(2);
				}
				public void setColDateFrom(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColDateFromTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColDateToReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColDateToReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColDateToOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColDateTo(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColDateTo()
				{
					return (String)super.row.get(3);
				}
				public void setColDateTo(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColDateToTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColCommentReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColCommentReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColCommentOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColComment(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColComment()
				{
					return (String)super.row.get(4);
				}
				public void setColComment(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColCommentTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setColStatReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean isColStatReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showColStatOpened()
				{
					super.row.showOpened(5);
				}
				public void setTooltipForColStat(String value)
				{
					super.row.setTooltip(5, value);
				}
				public String getColStat()
				{
					return (String)super.row.get(5);
				}
				public void setColStat(String value)
				{
					super.row.set(5, value);
				}
				public void setCellColStatTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.chooseandbook.vo.ActionRequestVo getValue()
				{
					return (ims.chooseandbook.vo.ActionRequestVo)super.row.getValue();
				}
				public void setValue(ims.chooseandbook.vo.ActionRequestVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSlotPollRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSlotPollRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSlotPollRow get(int index)
				{
					return new grdSlotPollRow(super.collection.get(index));
				}
				public grdSlotPollRow newRow()
				{
					return new grdSlotPollRow(super.collection.newRow());
				}
				public grdSlotPollRow newRow(boolean autoSelect)
				{
					return new grdSlotPollRow(super.collection.newRow(autoSelect));
				}
				public grdSlotPollRow newRowAt(int index)
				{
					return new grdSlotPollRow(super.collection.newRowAt(index));
				}
				public grdSlotPollRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSlotPollRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSlotPollGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.chooseandbook.vo.ActionRequestVoCollection getValues()
				{
					ims.chooseandbook.vo.ActionRequestVoCollection listOfValues = new ims.chooseandbook.vo.ActionRequestVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.chooseandbook.vo.ActionRequestVo getValue()
				{
					return (ims.chooseandbook.vo.ActionRequestVo)super.grid.getValue();
				}
				public void setValue(ims.chooseandbook.vo.ActionRequestVo value)
				{
					super.grid.setValue(value);
				}
				public grdSlotPollRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSlotPollRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSlotPollRowCollection getRows()
				{
					return new grdSlotPollRowCollection(super.grid.getRows());
				}
				public grdSlotPollRow getRowByValue(ims.chooseandbook.vo.ActionRequestVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSlotPollRow(row);
				}
				public void setColDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDosHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDosHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColDateFromHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColDateFromHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColDateToHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColDateToHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColCommentHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColCommentHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setColStatHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getColStatHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 564, 152, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Count of Slot Poll Records", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 32, 40, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 32, 16, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 88, 14, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 23), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 88, 38, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 804, 468, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSlotPollTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 31), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuMaintenance, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSlotPollTemp);
				grdSlotPollGrid grdSlotPoll = (grdSlotPollGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSlotPollGrid.class, m_grdSlotPollTemp);
				grdSlotPoll.addStringColumn("Date Requested", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotPoll.addStringColumn("Directory of Service", 0, 0, 106, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotPoll.addStringColumn("Date From", 0, 0, 105, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotPoll.addStringColumn("Date To", 0, 0, 120, true, false, 1, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotPoll.addStringColumn("Request From", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSlotPoll.addStringColumn("Current Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSlotPoll);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 748, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 27), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 780, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Label lblPollCount()
			{
				return (Label)super.getControl(0);
			}
			public DateControl dteSlotDateFrom()
			{
				return (DateControl)super.getControl(3);
			}
			public DateControl dteSlotDateTo()
			{
				return (DateControl)super.getControl(4);
			}
			public grdSlotPollGrid grdSlotPoll()
			{
				return (grdSlotPollGrid)super.getGrid(0);
			}
			public ImageButton imbPollSearch()
			{
				return (ImageButton)super.getControl(6);
			}
			public ImageButton imbSlotClear()
			{
				return (ImageButton)super.getControl(7);
			}
		}
		public static class tabPdsRequestsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdPdsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdPdsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColChkReSubmitReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColChkReSubmitReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColChkReSubmitOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColChkReSubmit(String value)
				{
					super.row.setTooltip(0, value);
				}
				public boolean getColChkReSubmit()
				{
					return ((Boolean)super.row.get(0)).booleanValue();
				}
				public void setColChkReSubmit(boolean value)
				{
					super.row.set(0, new Boolean(value));
				}
				public void setCellColChkReSubmitTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDateTimeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDateTimeOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColDateTime(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColDateTime()
				{
					return (String)super.row.get(1);
				}
				public void setColDateTime(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColDateTimeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColNhsnReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColNhsnReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColNhsnOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColNhsn(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColNhsn()
				{
					return (String)super.row.get(2);
				}
				public void setColNhsn(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColNhsnTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColDateLastCheckedReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColDateLastCheckedReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColDateLastCheckedOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColDateLastChecked(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColDateLastChecked()
				{
					return (String)super.row.get(3);
				}
				public void setColDateLastChecked(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColDateLastCheckedTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColCommentReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColCommentReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColCommentOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColComment(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColComment()
				{
					return (String)super.row.get(4);
				}
				public void setColComment(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColCommentTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.chooseandbook.vo.PdsRequestVo getValue()
				{
					return (ims.chooseandbook.vo.PdsRequestVo)super.row.getValue();
				}
				public void setValue(ims.chooseandbook.vo.PdsRequestVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdPdsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdPdsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdPdsRow get(int index)
				{
					return new grdPdsRow(super.collection.get(index));
				}
				public grdPdsRow newRow()
				{
					return new grdPdsRow(super.collection.newRow());
				}
				public grdPdsRow newRow(boolean autoSelect)
				{
					return new grdPdsRow(super.collection.newRow(autoSelect));
				}
				public grdPdsRow newRowAt(int index)
				{
					return new grdPdsRow(super.collection.newRowAt(index));
				}
				public grdPdsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdPdsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdPdsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.chooseandbook.vo.PdsRequestVoCollection getValues()
				{
					ims.chooseandbook.vo.PdsRequestVoCollection listOfValues = new ims.chooseandbook.vo.PdsRequestVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.chooseandbook.vo.PdsRequestVo getValue()
				{
					return (ims.chooseandbook.vo.PdsRequestVo)super.grid.getValue();
				}
				public void setValue(ims.chooseandbook.vo.PdsRequestVo value)
				{
					super.grid.setValue(value);
				}
				public grdPdsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdPdsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdPdsRowCollection getRows()
				{
					return new grdPdsRowCollection(super.grid.getRows());
				}
				public grdPdsRow getRowByValue(ims.chooseandbook.vo.PdsRequestVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdPdsRow(row);
				}
				public void setColChkReSubmitHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColChkReSubmitHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColNhsnHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColNhsnHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColDateLastCheckedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColDateLastCheckedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColCommentHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColCommentHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 480, 40, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Updated To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 480, 16, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Updated From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 216, 16, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "NHS Number:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 8, 564, 125, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Count of Pds Records", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 32, 40, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 32, 16, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 296, 14, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(12), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 584, 14, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 584, 38, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 80, 14, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 80, 38, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 33), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 296, 40, 160, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), new Integer(startTabIndex.intValue() + 35), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"Return Failed Requests Only", Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 804, 476, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdPdsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), new Integer(startTabIndex.intValue() + 42), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuMaintenance, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdPdsTemp);
				grdPdsGrid grdPds = (grdPdsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPdsGrid.class, m_grdPdsTemp);
				grdPds.addBoolColumn("ReSubmit", 0, 0, 100, false, false, 0, true);
				grdPds.addStringColumn("Date Requested", 0, 0, 110, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPds.addStringColumn("NHS Number", 0, 0, 170, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPds.addStringColumn("DateTime Last Checked", 0, 0, 200, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdPds.addStringColumn("Comment", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdPds);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 748, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 780, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Label lblCountPdsRecords()
			{
				return (Label)super.getControl(3);
			}
			public TextBox txtNHSN()
			{
				return (TextBox)super.getControl(6);
			}
			public DateControl dtePdsUpdatedFrom()
			{
				return (DateControl)super.getControl(7);
			}
			public DateControl dtePdsUpdatedTo()
			{
				return (DateControl)super.getControl(8);
			}
			public DateControl dtePdsFrom()
			{
				return (DateControl)super.getControl(9);
			}
			public DateControl dtePdsTo()
			{
				return (DateControl)super.getControl(10);
			}
			public CheckBox chkFailedItemsOnly()
			{
				return (CheckBox)super.getControl(11);
			}
			public grdPdsGrid grdPds()
			{
				return (grdPdsGrid)super.getGrid(0);
			}
			public ImageButton imbPdsSearch()
			{
				return (ImageButton)super.getControl(13);
			}
			public ImageButton imbPdsClear()
			{
				return (ImageButton)super.getControl(14);
			}
		}
		public static class tabSdsRequestsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSdsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSdsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColChkReSubmitReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColChkReSubmitReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColChkReSubmitOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColChkReSubmit(String value)
				{
					super.row.setTooltip(0, value);
				}
				public boolean getColChkReSubmit()
				{
					return ((Boolean)super.row.get(0)).booleanValue();
				}
				public void setColChkReSubmit(boolean value)
				{
					super.row.set(0, new Boolean(value));
				}
				public void setCellColChkReSubmitTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColDateTimeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColDateTimeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColDateTimeOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColDateTime(String value)
				{
					super.row.setTooltip(1, value);
				}
				public String getColDateTime()
				{
					return (String)super.row.get(1);
				}
				public void setColDateTime(String value)
				{
					super.row.set(1, value);
				}
				public void setCellColDateTimeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setColApptReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean isColApptReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showColApptOpened()
				{
					super.row.showOpened(2);
				}
				public void setTooltipForColAppt(String value)
				{
					super.row.setTooltip(2, value);
				}
				public String getColAppt()
				{
					return (String)super.row.get(2);
				}
				public void setColAppt(String value)
				{
					super.row.set(2, value);
				}
				public void setCellColApptTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setColCommentReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean isColCommentReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showColCommentOpened()
				{
					super.row.showOpened(3);
				}
				public void setTooltipForColComment(String value)
				{
					super.row.setTooltip(3, value);
				}
				public String getColComment()
				{
					return (String)super.row.get(3);
				}
				public void setColComment(String value)
				{
					super.row.set(3, value);
				}
				public void setCellColCommentTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setColDateTimeLastRequestedReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean isColDateTimeLastRequestedReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showColDateTimeLastRequestedOpened()
				{
					super.row.showOpened(4);
				}
				public void setTooltipForColDateTimeLastRequested(String value)
				{
					super.row.setTooltip(4, value);
				}
				public String getColDateTimeLastRequested()
				{
					return (String)super.row.get(4);
				}
				public void setColDateTimeLastRequested(String value)
				{
					super.row.set(4, value);
				}
				public void setCellColDateTimeLastRequestedTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public ims.chooseandbook.vo.SdsRequestLiteVo getValue()
				{
					return (ims.chooseandbook.vo.SdsRequestLiteVo)super.row.getValue();
				}
				public void setValue(ims.chooseandbook.vo.SdsRequestLiteVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSdsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSdsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSdsRow get(int index)
				{
					return new grdSdsRow(super.collection.get(index));
				}
				public grdSdsRow newRow()
				{
					return new grdSdsRow(super.collection.newRow());
				}
				public grdSdsRow newRow(boolean autoSelect)
				{
					return new grdSdsRow(super.collection.newRow(autoSelect));
				}
				public grdSdsRow newRowAt(int index)
				{
					return new grdSdsRow(super.collection.newRowAt(index));
				}
				public grdSdsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSdsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSdsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.chooseandbook.vo.SdsRequestLiteVoCollection getValues()
				{
					ims.chooseandbook.vo.SdsRequestLiteVoCollection listOfValues = new ims.chooseandbook.vo.SdsRequestLiteVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.chooseandbook.vo.SdsRequestLiteVo getValue()
				{
					return (ims.chooseandbook.vo.SdsRequestLiteVo)super.grid.getValue();
				}
				public void setValue(ims.chooseandbook.vo.SdsRequestLiteVo value)
				{
					super.grid.setValue(value);
				}
				public grdSdsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSdsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSdsRowCollection getRows()
				{
					return new grdSdsRowCollection(super.grid.getRows());
				}
				public grdSdsRow getRowByValue(ims.chooseandbook.vo.SdsRequestLiteVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSdsRow(row);
				}
				public void setColChkReSubmitHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColChkReSubmitHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColDateTimeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColDateTimeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setColApptHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getColApptHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setColCommentHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getColCommentHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setColDateTimeLastRequestedHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getColDateTimeLastRequestedHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 224, 40, 74, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Updated To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 224, 16, 89, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Updated From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 8, 564, 125, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Count of Sds Records", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 32, 40, 22, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "To:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 32, 16, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "From:", new Integer(1), null, new Integer(0)}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 328, 14, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 328, 38, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 88, 14, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 44), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 88, 38, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 80, 804, 476, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSdsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), new Integer(startTabIndex.intValue() + 52), ControlState.EDITABLE, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Scheduling.contextMenuMaintenance, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSdsTemp);
				grdSdsGrid grdSds = (grdSdsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSdsGrid.class, m_grdSdsTemp);
				grdSds.addBoolColumn("ReSubmit", 0, 0, 100, false, false, 0, true);
				grdSds.addStringColumn("Date Requested", 0, 0, 150, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSds.addStringColumn("Appointment", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSds.addStringColumn("Comment", 0, 0, 300, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdSds.addStringColumn("Date Time Last Requested", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSds);
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 748, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.FindEnabled24, form_images_local.Core.FindDisabled24, "Search", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 780, 9, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, form_images_local.Core.ClearEnabled24, form_images_local.Core.ClearDisabled24, "Clear", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
			}

			public Label lblCountSdsRecords()
			{
				return (Label)super.getControl(2);
			}
			public DateControl dteSdsUpdatedFrom()
			{
				return (DateControl)super.getControl(5);
			}
			public DateControl dteSdsUpdatedTo()
			{
				return (DateControl)super.getControl(6);
			}
			public DateControl dteSdsFrom()
			{
				return (DateControl)super.getControl(7);
			}
			public DateControl dteSdsTo()
			{
				return (DateControl)super.getControl(8);
			}
			public grdSdsGrid grdSds()
			{
				return (grdSdsGrid)super.getGrid(0);
			}
			public ImageButton imbSearchSds()
			{
				return (ImageButton)super.getControl(10);
			}
			public ImageButton imbClearSds()
			{
				return (ImageButton)super.getControl(11);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 828, 612, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabBookExc = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Book Exceptions", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabBookExcContainer m_tabBookExcContainer = (tabBookExcContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabBookExcContainer.class, m_tabBookExc, factory);
			super.addContainer(m_tabBookExc, m_tabBookExcContainer);
			ims.framework.utils.SizeInfo m_tabBookExcDesignSize = new ims.framework.utils.SizeInfo(828, 612);
			ims.framework.utils.SizeInfo m_tabBookExcRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper60.getWidth(), anchoringHelper60.getHeight());
			m_tabBookExcContainer.setContext(form, appForm, m_tabBookExc, loader, form_images_local, contextMenus, startControlID, m_tabBookExcDesignSize, m_tabBookExcRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 828, 612, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabCancelExc = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Cancel Exceptions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabCancelExcContainer m_tabCancelExcContainer = (tabCancelExcContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabCancelExcContainer.class, m_tabCancelExc, factory);
			super.addContainer(m_tabCancelExc, m_tabCancelExcContainer);
			ims.framework.utils.SizeInfo m_tabCancelExcDesignSize = new ims.framework.utils.SizeInfo(828, 612);
			ims.framework.utils.SizeInfo m_tabCancelExcRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper61.getWidth(), anchoringHelper61.getHeight());
			m_tabCancelExcContainer.setContext(form, appForm, m_tabCancelExc, loader, form_images_local, contextMenus, startControlID, m_tabCancelExcDesignSize, m_tabCancelExcRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 828, 612, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSlotPoll = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Slot Polls", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSlotPollContainer m_tabSlotPollContainer = (tabSlotPollContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSlotPollContainer.class, m_tabSlotPoll, factory);
			super.addContainer(m_tabSlotPoll, m_tabSlotPollContainer);
			ims.framework.utils.SizeInfo m_tabSlotPollDesignSize = new ims.framework.utils.SizeInfo(828, 612);
			ims.framework.utils.SizeInfo m_tabSlotPollRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper62.getWidth(), anchoringHelper62.getHeight());
			m_tabSlotPollContainer.setContext(form, appForm, m_tabSlotPoll, loader, form_images_local, contextMenus, startControlID, m_tabSlotPollDesignSize, m_tabSlotPollRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 828, 612, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPdsRequests = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pds Requests", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabPdsRequestsContainer m_tabPdsRequestsContainer = (tabPdsRequestsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPdsRequestsContainer.class, m_tabPdsRequests, factory);
			super.addContainer(m_tabPdsRequests, m_tabPdsRequestsContainer);
			ims.framework.utils.SizeInfo m_tabPdsRequestsDesignSize = new ims.framework.utils.SizeInfo(828, 612);
			ims.framework.utils.SizeInfo m_tabPdsRequestsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper63.getWidth(), anchoringHelper63.getHeight());
			m_tabPdsRequestsContainer.setContext(form, appForm, m_tabPdsRequests, loader, form_images_local, contextMenus, startControlID, m_tabPdsRequestsDesignSize, m_tabPdsRequestsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 828, 612, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSdsRequests = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Sds Requests", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabSdsRequestsContainer m_tabSdsRequestsContainer = (tabSdsRequestsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSdsRequestsContainer.class, m_tabSdsRequests, factory);
			super.addContainer(m_tabSdsRequests, m_tabSdsRequestsContainer);
			ims.framework.utils.SizeInfo m_tabSdsRequestsDesignSize = new ims.framework.utils.SizeInfo(828, 612);
			ims.framework.utils.SizeInfo m_tabSdsRequestsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper64.getWidth(), anchoringHelper64.getHeight());
			m_tabSdsRequestsContainer.setContext(form, appForm, m_tabSdsRequests, loader, form_images_local, contextMenus, startControlID, m_tabSdsRequestsDesignSize, m_tabSdsRequestsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabBookExc().setVisible(false);
			tabCancelExc().setVisible(false);
			tabSlotPoll().setVisible(false);
			tabPdsRequests().setVisible(false);
			tabSdsRequests().setVisible(false);
		}
		public void settabBookExcEnabled(boolean value)
		{
			tabBookExc().setEnabled(value);
		}
		public void settabCancelExcEnabled(boolean value)
		{
			tabCancelExc().setEnabled(value);
		}
		public void settabSlotPollEnabled(boolean value)
		{
			tabSlotPoll().setEnabled(value);
		}
		public void settabPdsRequestsEnabled(boolean value)
		{
			tabPdsRequests().setEnabled(value);
		}
		public void settabSdsRequestsEnabled(boolean value)
		{
			tabSdsRequests().setEnabled(value);
		}
		public void showtabBookExc()
		{
			tabCancelExc().setVisible(false);
			tabSlotPoll().setVisible(false);
			tabPdsRequests().setVisible(false);
			tabSdsRequests().setVisible(false);
			tabBookExc().setVisible(true);
		}
		public void showtabCancelExc()
		{
			tabBookExc().setVisible(false);
			tabSlotPoll().setVisible(false);
			tabPdsRequests().setVisible(false);
			tabSdsRequests().setVisible(false);
			tabCancelExc().setVisible(true);
		}
		public void showtabSlotPoll()
		{
			tabBookExc().setVisible(false);
			tabCancelExc().setVisible(false);
			tabPdsRequests().setVisible(false);
			tabSdsRequests().setVisible(false);
			tabSlotPoll().setVisible(true);
		}
		public void showtabPdsRequests()
		{
			tabBookExc().setVisible(false);
			tabCancelExc().setVisible(false);
			tabSlotPoll().setVisible(false);
			tabSdsRequests().setVisible(false);
			tabPdsRequests().setVisible(true);
		}
		public void showtabSdsRequests()
		{
			tabBookExc().setVisible(false);
			tabCancelExc().setVisible(false);
			tabSlotPoll().setVisible(false);
			tabPdsRequests().setVisible(false);
			tabSdsRequests().setVisible(true);
		}

		public tabBookExcContainer tabBookExc()
		{
			return (tabBookExcContainer)super.layers.get(0);
		}
		public tabCancelExcContainer tabCancelExc()
		{
			return (tabCancelExcContainer)super.layers.get(1);
		}
		public tabSlotPollContainer tabSlotPoll()
		{
			return (tabSlotPollContainer)super.layers.get(2);
		}
		public tabPdsRequestsContainer tabPdsRequests()
		{
			return (tabPdsRequestsContainer)super.layers.get(3);
		}
		public tabSdsRequestsContainer tabSdsRequests()
		{
			return (tabSdsRequestsContainer)super.layers.get(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Scheduling.contextMenuMaintenance = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Scheduling.contextMenuMaintenanceCONFIRMAPPTItem = factory.createMenuItem(startControlID.intValue() + 1, "Confirm Appointment", true, false, new Integer(102209), true, false);
		contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceCONFIRMAPPTItem);
		contextMenus.Scheduling.contextMenuMaintenanceDISCARDAPPTItem = factory.createMenuItem(startControlID.intValue() + 2, "Discard Appointment", true, false, null, true, false);
		contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceDISCARDAPPTItem);
		contextMenus.Scheduling.contextMenuMaintenanceCANCELAPPTItem = factory.createMenuItem(startControlID.intValue() + 3, "Cancel Appointment", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceCANCELAPPTItem);
		contextMenus.Scheduling.contextMenuMaintenanceUNDOAPPTCANCELItem = factory.createMenuItem(startControlID.intValue() + 4, "Undo Cancel Appointment", true, false, new Integer(102187), true, false);
		contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceUNDOAPPTCANCELItem);
		contextMenus.Scheduling.contextMenuMaintenanceCANCELSLOTItem = factory.createMenuItem(startControlID.intValue() + 5, "Cancel Slot", true, false, new Integer(102148), true, false);
		contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceCANCELSLOTItem);
		contextMenus.Scheduling.contextMenuMaintenanceUNDOSLOTCANCELItem = factory.createMenuItem(startControlID.intValue() + 6, "Undo Slot Cancel", true, false, new Integer(102187), true, false);
		contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceUNDOSLOTCANCELItem);
		contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_SLOTSItem = factory.createMenuItem(startControlID.intValue() + 7, "Resubmit the Slot Response Message", true, false, new Integer(114103), true, false);
		contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_SLOTSItem);
		contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_PDSItem = factory.createMenuItem(startControlID.intValue() + 8, "Resubmit Current Request to PDS", true, false, null, true, false);
		contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_PDSItem);
		contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_ALL_PDSItem = factory.createMenuItem(startControlID.intValue() + 9, "Resubmit All Requests to PDS", true, false, null, true, false);
		contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_ALL_PDSItem);
		contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_SELECTED_PDSItem = factory.createMenuItem(startControlID.intValue() + 10, "Resubmit Selected Requests to PDS", true, false, null, true, false);
		contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_SELECTED_PDSItem);
		contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_SDSItem = factory.createMenuItem(startControlID.intValue() + 11, "Resubmit Current Request to SDS", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2440001)))
			contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_SDSItem);
		contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_ALL_SDSItem = factory.createMenuItem(startControlID.intValue() + 12, "Resubmit All Requests to SDS", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2440001)))
			contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_ALL_SDSItem);
		contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_SELECTED_SDSItem = factory.createMenuItem(startControlID.intValue() + 13, "Resubmit Selected Requests to SDS", true, false, null, true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(2440002)))
			contextMenus.Scheduling.contextMenuMaintenance.add(contextMenus.Scheduling.contextMenuMaintenanceRESUBMIT_SELECTED_SDSItem);
		form.registerMenu(contextMenus.Scheduling.contextMenuMaintenance);


		// Layer Clasess
		lyrMaintenanceLayer m_lyrMaintenanceLayer = (lyrMaintenanceLayer)LayerFlyweightFactory.getInstance().createLayer(lyrMaintenanceLayer.class, this, factory);
		super.addLayer(m_lyrMaintenanceLayer);
		m_lyrMaintenanceLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrMaintenanceLayer lyrMaintenance()
	{
		return (lyrMaintenanceLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Scheduling = new SchedulingForms();
		}
		public final class SchedulingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingForms()
			{
				CancelAppointmentDialog = new LocalFormName(114160);
			}
			public final FormName CancelAppointmentDialog;
		}

		public SchedulingForms Scheduling;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Scheduling = new SchedulingImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				BookOpenEnabled = new ImageHelper(102186, "Images/Core/Book-Open.gif", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image BookOpenEnabled;
			public final ims.framework.utils.Image Delete;
		}
		public final class SchedulingImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private SchedulingImages()
			{
				Cancelled = new ImageHelper(114104, "Images/Scheduling/cancel.png", new Integer(16), new Integer(16));
				Booked = new ImageHelper(114103, "Images/Scheduling/mm-Play-2.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Cancelled;
			public final ims.framework.utils.Image Booked;
		}
		public final CoreImages Core;
		public final SchedulingImages Scheduling;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public SchedulingNamespace Scheduling = new SchedulingNamespace();
		public final class SchedulingNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class Maintenance implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int CONFIRMAPPT = 1;
				public static final int DISCARDAPPT = 2;
				public static final int CANCELAPPT = 3;
				public static final int UNDOAPPTCANCEL = 4;
				public static final int CANCELSLOT = 5;
				public static final int UNDOSLOTCANCEL = 6;
				public static final int RESUBMIT_SLOTS = 7;
				public static final int RESUBMIT_PDS = 8;
				public static final int RESUBMIT_ALL_PDS = 9;
				public static final int RESUBMIT_SELECTED_PDS = 10;
				public static final int RESUBMIT_SDS = 11;
				public static final int RESUBMIT_ALL_SDS = 12;
				public static final int RESUBMIT_SELECTED_SDS = 13;
			}
			public void disableAllMaintenanceMenuItems()
			{
				this.contextMenuMaintenanceCONFIRMAPPTItem.setEnabled(false);
				this.contextMenuMaintenanceDISCARDAPPTItem.setEnabled(false);
				this.contextMenuMaintenanceCANCELAPPTItem.setEnabled(false);
				this.contextMenuMaintenanceUNDOAPPTCANCELItem.setEnabled(false);
				this.contextMenuMaintenanceCANCELSLOTItem.setEnabled(false);
				this.contextMenuMaintenanceUNDOSLOTCANCELItem.setEnabled(false);
				this.contextMenuMaintenanceRESUBMIT_SLOTSItem.setEnabled(false);
				this.contextMenuMaintenanceRESUBMIT_PDSItem.setEnabled(false);
				this.contextMenuMaintenanceRESUBMIT_ALL_PDSItem.setEnabled(false);
				this.contextMenuMaintenanceRESUBMIT_SELECTED_PDSItem.setEnabled(false);
				this.contextMenuMaintenanceRESUBMIT_SDSItem.setEnabled(false);
				this.contextMenuMaintenanceRESUBMIT_ALL_SDSItem.setEnabled(false);
				this.contextMenuMaintenanceRESUBMIT_SELECTED_SDSItem.setEnabled(false);
			}
			public void hideAllMaintenanceMenuItems()
			{
				this.contextMenuMaintenanceCONFIRMAPPTItem.setVisible(false);
				this.contextMenuMaintenanceDISCARDAPPTItem.setVisible(false);
				this.contextMenuMaintenanceCANCELAPPTItem.setVisible(false);
				this.contextMenuMaintenanceUNDOAPPTCANCELItem.setVisible(false);
				this.contextMenuMaintenanceCANCELSLOTItem.setVisible(false);
				this.contextMenuMaintenanceUNDOSLOTCANCELItem.setVisible(false);
				this.contextMenuMaintenanceRESUBMIT_SLOTSItem.setVisible(false);
				this.contextMenuMaintenanceRESUBMIT_PDSItem.setVisible(false);
				this.contextMenuMaintenanceRESUBMIT_ALL_PDSItem.setVisible(false);
				this.contextMenuMaintenanceRESUBMIT_SELECTED_PDSItem.setVisible(false);
				this.contextMenuMaintenanceRESUBMIT_SDSItem.setVisible(false);
				this.contextMenuMaintenanceRESUBMIT_ALL_SDSItem.setVisible(false);
				this.contextMenuMaintenanceRESUBMIT_SELECTED_SDSItem.setVisible(false);
			}
			private Menu contextMenuMaintenance;
			public ReadOnlyMenuItem getMaintenanceCONFIRMAPPTItem()
			{
				return this.contextMenuMaintenanceCONFIRMAPPTItem;
			}
			private MenuItem contextMenuMaintenanceCONFIRMAPPTItem;
			public ReadOnlyMenuItem getMaintenanceDISCARDAPPTItem()
			{
				return this.contextMenuMaintenanceDISCARDAPPTItem;
			}
			private MenuItem contextMenuMaintenanceDISCARDAPPTItem;
			public ReadOnlyMenuItem getMaintenanceCANCELAPPTItem()
			{
				return this.contextMenuMaintenanceCANCELAPPTItem;
			}
			private MenuItem contextMenuMaintenanceCANCELAPPTItem;
			public ReadOnlyMenuItem getMaintenanceUNDOAPPTCANCELItem()
			{
				return this.contextMenuMaintenanceUNDOAPPTCANCELItem;
			}
			private MenuItem contextMenuMaintenanceUNDOAPPTCANCELItem;
			public ReadOnlyMenuItem getMaintenanceCANCELSLOTItem()
			{
				return this.contextMenuMaintenanceCANCELSLOTItem;
			}
			private MenuItem contextMenuMaintenanceCANCELSLOTItem;
			public ReadOnlyMenuItem getMaintenanceUNDOSLOTCANCELItem()
			{
				return this.contextMenuMaintenanceUNDOSLOTCANCELItem;
			}
			private MenuItem contextMenuMaintenanceUNDOSLOTCANCELItem;
			public ReadOnlyMenuItem getMaintenanceRESUBMIT_SLOTSItem()
			{
				return this.contextMenuMaintenanceRESUBMIT_SLOTSItem;
			}
			private MenuItem contextMenuMaintenanceRESUBMIT_SLOTSItem;
			public ReadOnlyMenuItem getMaintenanceRESUBMIT_PDSItem()
			{
				return this.contextMenuMaintenanceRESUBMIT_PDSItem;
			}
			private MenuItem contextMenuMaintenanceRESUBMIT_PDSItem;
			public ReadOnlyMenuItem getMaintenanceRESUBMIT_ALL_PDSItem()
			{
				return this.contextMenuMaintenanceRESUBMIT_ALL_PDSItem;
			}
			private MenuItem contextMenuMaintenanceRESUBMIT_ALL_PDSItem;
			public ReadOnlyMenuItem getMaintenanceRESUBMIT_SELECTED_PDSItem()
			{
				return this.contextMenuMaintenanceRESUBMIT_SELECTED_PDSItem;
			}
			private MenuItem contextMenuMaintenanceRESUBMIT_SELECTED_PDSItem;
			public ReadOnlyMenuItem getMaintenanceRESUBMIT_SDSItem()
			{
				return this.contextMenuMaintenanceRESUBMIT_SDSItem;
			}
			private MenuItem contextMenuMaintenanceRESUBMIT_SDSItem;
			public ReadOnlyMenuItem getMaintenanceRESUBMIT_ALL_SDSItem()
			{
				return this.contextMenuMaintenanceRESUBMIT_ALL_SDSItem;
			}
			private MenuItem contextMenuMaintenanceRESUBMIT_ALL_SDSItem;
			public ReadOnlyMenuItem getMaintenanceRESUBMIT_SELECTED_SDSItem()
			{
				return this.contextMenuMaintenanceRESUBMIT_SELECTED_SDSItem;
			}
			private MenuItem contextMenuMaintenanceRESUBMIT_SELECTED_SDSItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[86];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-ID", "ID_Appointment_Status");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUS", "Status");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSREASON", "StatusReason");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTDATE", "ApptDate");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-APPTTIME", "ApptTime");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PASCLINIC", "PASClinic");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-DOS", "DoS");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-PRIORITY", "Priority");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-CANCELLATIONREASON", "CancellationReason");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-COMMENT", "Comment");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-REBOOKSELECTED", "RebookSelected");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-EARLIESTOFFEREDDATE", "EarliestOfferedDate");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Scheduling.ApptCancelStatus", "BO-1055100008-STATUSCHANGEDATETIME", "StatusChangeDateTime");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingActivity", "BO-1007100005-ID", "ID_Activity");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Scheduling.BookingService", "BO-1003100032-ID", "ID_Service");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
