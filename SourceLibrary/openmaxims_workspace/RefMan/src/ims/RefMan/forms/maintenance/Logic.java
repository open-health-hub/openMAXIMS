// This code was generated by Daniel Laffan using IMS Development Environment (version 1.62 build 3126.20282)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.maintenance;

import ims.RefMan.domain.impl.MaintenanceImpl;
import ims.RefMan.forms.maintenance.GenForm.lyrMaintenanceLayer.tabBookExcContainer.grdBookDetRow;
import ims.RefMan.forms.maintenance.GenForm.lyrMaintenanceLayer.tabCancelExcContainer.grdCancelDetRow;
import ims.RefMan.forms.maintenance.GenForm.lyrMaintenanceLayer.tabSdsRequestsContainer.grdSdsRow;
import ims.RefMan.forms.maintenance.GenForm.lyrMaintenanceLayer.tabSlotPollContainer.grdSlotPollRow;
import ims.RefMan.forms.maintenance.GenForm.lyrMaintenanceLayer.tabPdsRequestsContainer.grdPdsRow;
import ims.choose_book.vo.PdsRequestRefVoCollection;
import ims.choose_book.vo.SdsRequestRefVoCollection;
import ims.chooseandbook.vo.ActionRequestVo;
import ims.chooseandbook.vo.ActionRequestVoCollection;
import ims.chooseandbook.vo.PdsRequestVo;
import ims.chooseandbook.vo.PdsRequestVoCollection;
import ims.chooseandbook.vo.SdsRequestLiteVo;
import ims.chooseandbook.vo.SdsRequestLiteVoCollection;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceShortVoCollection;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.LayerBridge;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Date;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.ProfileLiteVo;
import ims.scheduling.vo.ProfileLiteVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.SessionSlotVoCollection;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();

	}

	private void initialise() 
	{
		form.lyrMaintenance().tabBookExc().setVisible(true);
		form.lyrMaintenance().tabCancelExc().setVisible(true);
		form.lyrMaintenance().tabSlotPoll().setVisible(true);
		
		form.lyrMaintenance().showtabBookExc();
		
		listServices();
	}

	protected void onImbBookSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-14733  //WDEV-14759
		if( ! validateDates(form.lyrMaintenance().tabBookExc().dteBookFrom().getValue(), form.lyrMaintenance().tabBookExc().dteBookTo().getValue(),"From Date cannot be greater than To Date"))
		{
			return;
		}
		
		String[] errors = validateBookSearchCriteria();
		if (errors == null)
		{
			searchBook();
			updateContextMenuState();
		}
		else
			engine.showErrors(errors);
	}

	
	protected void onImbCancelSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		//WDEV-14734 //WDEV-14759
		if( ! validateDates(form.lyrMaintenance().tabCancelExc().dteCancelFrom().getValue(), form.lyrMaintenance().tabCancelExc().dteCancelTo().getValue(),"From Date cannot be greater than To Date"))
		{
			return;
		}
		
		String[] errors = validateCancelSearchCriteria();
	
		if (errors == null)
		{
			searchCancel();
			updateContextMenuState();
		}
		else
			engine.showErrors(errors);
	}
	
	
	//WDEV-14734 //WDEV-14759
	private boolean validateDates(Date startDate, Date endDate,String message) 
	{
		if(startDate != null && endDate != null)
		{
			if(startDate.isGreaterThan(endDate))
			{	
				//engine.showMessage("From Date cannot be greater than To Date");
				engine.showMessage(message);
				return false;
			}
		}
		
		return true;
	}

	private void searchBook()
	{
		form.lyrMaintenance().tabBookExc().grdBookDet().getRows().clear();
		

		SessionSlotVoCollection voCollSessionSlot = domain.listSessionSlots(form.lyrMaintenance().tabBookExc().cmbBookSpecialty().getValue(), form.lyrMaintenance().tabBookExc().cmbBookClinic().getValue(), form.lyrMaintenance().tabBookExc().dteBookFrom().getValue(), form.lyrMaintenance().tabBookExc().dteBookTo().getValue(), MaintenanceImpl.BOOKED_APPTS);
		if (voCollSessionSlot != null && voCollSessionSlot.size() > 0)
		{
			for (SessionSlotVo voSessionSlot : voCollSessionSlot)
			{
				grdBookDetRow row = form.lyrMaintenance().tabBookExc().grdBookDet().getRows().newRow();
				if (voSessionSlot.getAppointmentIsNotNull())
				{
					if (voSessionSlot.getAppointment().getAppointmentDateIsNotNull())
						row.setColDateTime(voSessionSlot.getAppointment().getAppointmentDate().toString());

					PatientShort voPat = domain.getBookingPatient(voSessionSlot.getAppointment());
					if (voPat != null)
						row.setColPatientName(voPat.getPatientInfo());

					row.setColUBRN(voSessionSlot.getUBRN());

				}
				Status_Reason type = getRequestType(voSessionSlot);
				row.setColRequestType(type != null ? type.toString() : null);
				row.setColSlotDateTime(voSessionSlot.getStartTm().toString());
				row.setValue(voSessionSlot);
			}
			form.lyrMaintenance().tabBookExc().lblBookCount().setValue(voCollSessionSlot.size() + " Appointments found with Provisional Status");
		}
		else
		{
			form.lyrMaintenance().tabBookExc().lblBookCount().setValue("No Appointments found with Provisional Status");
			engine.showMessage("No Appointments found with Provisional Status");
		}
		
	}

	private void searchCancel()
	{
		form.lyrMaintenance().tabCancelExc().grdCancelDet().getRows().clear();
		

		SessionSlotVoCollection voCollSessionSlot = domain.listSessionSlots(form.lyrMaintenance().tabCancelExc().cmbCancelSpecialty().getValue(), form.lyrMaintenance().tabCancelExc().cmbCancelClinic().getValue(), form.lyrMaintenance().tabCancelExc().dteCancelFrom().getValue(), form.lyrMaintenance().tabCancelExc().dteCancelTo().getValue(), MaintenanceImpl.CANCELLED_APPTS);
		if (voCollSessionSlot != null && voCollSessionSlot.size() > 0)
		{
			for (SessionSlotVo voSessionSlot : voCollSessionSlot)
			{
				grdCancelDetRow row = form.lyrMaintenance().tabCancelExc().grdCancelDet().getRows().newRow();
				if (voSessionSlot.getAppointmentIsNotNull())
				{
					if (voSessionSlot.getAppointment().getAppointmentDateIsNotNull())
						row.setColDateTime(voSessionSlot.getAppointment().getAppointmentDate().toString());

					PatientShort voPat = domain.getBookingPatient(voSessionSlot.getAppointment());
					if (voPat != null)
						row.setColPatientName(voPat.getPatientInfo());

					row.setColUBRN(voSessionSlot.getUBRN());

				}
				else
				{
					row.setColDateTime(voSessionSlot.getSessDateTime().getDate().toString());
					row.setColPatientName("Slot Only");
				}
				Status_Reason type = getRequestType(voSessionSlot);
				row.setColRequestType(type != null ? type.toString() : null);
				row.setColSlotDateTime(voSessionSlot.getStartTm().toString());
				row.setValue(voSessionSlot);
			}
			form.lyrMaintenance().tabCancelExc().lblCancelCount().setValue(voCollSessionSlot.size() + " Appointments and Slots found with Cancel Provisional Status");

		}
		else
		{
			form.lyrMaintenance().tabCancelExc().lblCancelCount().setValue("No Appointments or Slots found with Cancel Provisional Status");
			engine.showMessage("No Appointments or Slots found with Cancel Provisional Status");
		}
	}
	
	private Status_Reason getRequestType(SessionSlotVo voSessionSlot)
	{
		if (voSessionSlot == null)
			return null;

		if (voSessionSlot.getAppointmentIsNotNull())
		{
			if (voSessionSlot.getAppointment().getApptStatusIsNotNull())
			{
				if (voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.PROVISIONAL) || voSessionSlot.getAppointment().getApptStatus().equals(Status_Reason.CANCEL_PROVISIONAL))
					return voSessionSlot.getAppointment().getApptStatus();
			}
		}
		if (voSessionSlot.getStatus().equals(Status_Reason.CANCELLED_PENDING_APPT))
			return voSessionSlot.getStatus();
		
		if (voSessionSlot.getStatus().equals(Status_Reason.CANCEL_PROVISIONAL))
			return voSessionSlot.getStatus();

		

		return null;
	}

	protected void onImbCancelClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
	}
	protected void onImbBookClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
	}
	protected void onImbSlotClearClick() throws PresentationLogicException 
	{
		clearScreen();
	}
	protected void onImbPdsClearClick() throws PresentationLogicException 
	{
		clearScreen();
	}

	
	private void clearScreen()
	{
		form.lyrMaintenance().tabBookExc().cmbBookSpecialty().setValue(null);
		form.lyrMaintenance().tabBookExc().cmbBookClinic().setValue(null);
		form.lyrMaintenance().tabBookExc().dteBookFrom().setValue(null);
		form.lyrMaintenance().tabBookExc().dteBookTo().setValue(null);
		form.lyrMaintenance().tabBookExc().grdBookDet().getRows().clear();
		form.lyrMaintenance().tabCancelExc().grdCancelDet().getRows().clear();
		form.lyrMaintenance().tabCancelExc().cmbCancelClinic().setValue(null);
		form.lyrMaintenance().tabCancelExc().cmbCancelSpecialty().setValue(null);
		form.lyrMaintenance().tabCancelExc().dteCancelFrom().setValue(null);
		form.lyrMaintenance().tabCancelExc().dteCancelTo().setValue(null);
		form.lyrMaintenance().tabSlotPoll().grdSlotPoll().getRows().clear();
		form.lyrMaintenance().tabSlotPoll().dteSlotDateFrom().setValue(null);
		form.lyrMaintenance().tabSlotPoll().dteSlotDateTo().setValue(null);
		form.lyrMaintenance().tabPdsRequests().grdPds().getRows().clear();
		form.lyrMaintenance().tabPdsRequests().dtePdsFrom().setValue(null);
		form.lyrMaintenance().tabPdsRequests().dtePdsTo().setValue(null);
		form.lyrMaintenance().tabPdsRequests().chkFailedItemsOnly().setValue(null);
		form.lyrMaintenance().tabPdsRequests().txtNHSN().setValue(null);
		form.lyrMaintenance().tabPdsRequests().dtePdsUpdatedFrom().setValue(null);
		form.lyrMaintenance().tabPdsRequests().dtePdsUpdatedTo().setValue(null);
		form.lyrMaintenance().tabSdsRequests().dteSdsFrom().setValue(null);
		form.lyrMaintenance().tabSdsRequests().dteSdsTo().setValue(null);
		form.lyrMaintenance().tabSdsRequests().dteSdsUpdatedFrom().setValue(null);
		form.lyrMaintenance().tabSdsRequests().dteSdsUpdatedTo().setValue(null);
		form.lyrMaintenance().tabSdsRequests().grdSds().getRows().clear();

		//count totals
		form.lyrMaintenance().tabBookExc().lblBookCount().setValue("Count of Book Exception records");
		form.lyrMaintenance().tabCancelExc().lblCancelCount().setValue("Count of Cancel Exception records");
		form.lyrMaintenance().tabSlotPoll().lblPollCount().setValue("Count of Slot Poll records");
		form.lyrMaintenance().tabPdsRequests().lblCountPdsRecords().setValue("Count of Pds records");
		form.lyrMaintenance().tabSdsRequests().lblCountSdsRecords().setValue("Count of Sds records");
		
		updateContextMenuState();
	}

	private void updateContextMenuState()
	{
		form.getContextMenus().Scheduling.hideAllMaintenanceMenuItems();
		
		if(form.getMode().equals(FormMode.VIEW))
		{
			if(form.lyrMaintenance().tabBookExc().isVisible() && form.lyrMaintenance().tabBookExc().grdBookDet().getValue() != null)
			{
				SessionSlotVo voSlot = form.lyrMaintenance().tabBookExc().grdBookDet().getValue();
				Status_Reason type = getRequestType(voSlot);
				if(type != null)
				{
					if(type.equals(Status_Reason.PROVISIONAL))
					{
						form.getContextMenus().Scheduling.getMaintenanceCONFIRMAPPTItem().setVisible(true);
						form.getContextMenus().Scheduling.getMaintenanceDISCARDAPPTItem().setVisible(true);
					}
				}
			}
			else if(form.lyrMaintenance().tabCancelExc().isVisible() && form.lyrMaintenance().tabCancelExc().grdCancelDet().getValue() != null)
			{
				SessionSlotVo voSlot = form.lyrMaintenance().tabCancelExc().grdCancelDet().getValue();
				Status_Reason type = getRequestType(voSlot);
				if(type != null)
				{
					if(type.equals(Status_Reason.CANCEL_PROVISIONAL) && voSlot.getAppointmentIsNotNull())
					{
						form.getContextMenus().Scheduling.getMaintenanceCANCELAPPTItem().setVisible(true);
						form.getContextMenus().Scheduling.getMaintenanceUNDOAPPTCANCELItem().setVisible(true);	
					}
					else if (type.equals(Status_Reason.CANCEL_PROVISIONAL) ||
								type.equals(Status_Reason.CANCELLED_PENDING_APPT))
					{
						form.getContextMenus().Scheduling.getMaintenanceCANCELSLOTItem().setVisible(true);
						form.getContextMenus().Scheduling.getMaintenanceUNDOSLOTCANCELItem().setVisible(true);	
					}
				}
			}
			else if(form.lyrMaintenance().tabSlotPoll().isVisible() && form.lyrMaintenance().tabSlotPoll().grdSlotPoll().getValue() != null)
			{
				form.getContextMenus().Scheduling.getMaintenanceRESUBMIT_SLOTSItem().setVisible(true);
			}
			else if(form.lyrMaintenance().tabPdsRequests().isVisible() && form.lyrMaintenance().tabPdsRequests().grdPds().getValue() != null)
			{
				form.getContextMenus().Scheduling.getMaintenanceRESUBMIT_PDSItem().setVisible(true);
				form.getContextMenus().Scheduling.getMaintenanceRESUBMIT_ALL_PDSItem().setVisible(true);
				form.getContextMenus().Scheduling.getMaintenanceRESUBMIT_SELECTED_PDSItem().setVisible(true);
			}
			else if(form.lyrMaintenance().tabSdsRequests().isVisible() && form.lyrMaintenance().tabSdsRequests().grdSds().getValue() != null)
			{
				form.getContextMenus().Scheduling.getMaintenanceRESUBMIT_SDSItem().setVisible(true);
				form.getContextMenus().Scheduling.getMaintenanceRESUBMIT_ALL_SDSItem().setVisible(true);
				form.getContextMenus().Scheduling.getMaintenanceRESUBMIT_SELECTED_SDSItem().setVisible(true);
			}		
		}
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.CANCELAPPT:
				cancelAppt();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.CANCELSLOT:
				cancelSlot();				
			break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.UNDOAPPTCANCEL:
				undoCancelAppt();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.UNDOSLOTCANCEL:
				undoSlotCancel();
				
			break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.CONFIRMAPPT:
				confirmAppt();
			break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.DISCARDAPPT:
				discardAppt();	
			break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.RESUBMIT_SLOTS:
				resubmitSlotPoll();
				break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.RESUBMIT_PDS:
				resubmitPdsSingle();
				break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.RESUBMIT_ALL_PDS:
				resubmitPdsAll();
				break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.RESUBMIT_SELECTED_PDS:
				resubmitPdsSelected();
				break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.RESUBMIT_SDS:
				resubmitSdsSingle();
				break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.RESUBMIT_ALL_SDS:
				resubmitSdsAll();
				break;
			case GenForm.ContextMenus.SchedulingNamespace.Maintenance.RESUBMIT_SELECTED_SDS:
				resubmitSdsSelected();
				break;
		}
	}

	
	//SDS
	private void resubmitSdsSelected()
	{
		SdsRequestRefVoCollection refColl = new SdsRequestRefVoCollection();
		for (int i=0; i<form.lyrMaintenance().tabSdsRequests().grdSds().getRows().size(); i++)
		{
			SdsRequestLiteVo voSds = form.lyrMaintenance().tabSdsRequests().grdSds().getRows().get(i).getValue();
			if (voSds != null && form.lyrMaintenance().tabSdsRequests().grdSds().getRows().get(i).getColChkReSubmit())
				refColl.add(voSds);
		}
		if (refColl.size() > 0)
			resubmitSds(refColl);
		else
			engine.showMessage("Please select Sds Request to re-submit");
	}

	private void resubmitSdsAll()
	{
		SdsRequestRefVoCollection refColl = new SdsRequestRefVoCollection();
		for (int i=0; i<form.lyrMaintenance().tabSdsRequests().grdSds().getRows().size(); i++)
		{
			SdsRequestLiteVo voSds = form.lyrMaintenance().tabSdsRequests().grdSds().getRows().get(i).getValue();
			if (voSds != null)
				refColl.add(voSds);
		}
		resubmitSds(refColl);
	}

	private void resubmitSds(SdsRequestRefVoCollection refColl)
	{
		try
		{
			domain.resubmitSdsRequest(refColl);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		searchSds();
	}

	private void resubmitSdsSingle()
	{
		SdsRequestLiteVo voSds = form.lyrMaintenance().tabSdsRequests().grdSds().getValue();
		if (voSds != null)
		{
			SdsRequestRefVoCollection refColl = new SdsRequestRefVoCollection();
			refColl.add(voSds);
			resubmitSds(refColl);
		}		
	}
	//END SDS

	//PDS
	private void resubmitPdsAll()
	{
		PdsRequestRefVoCollection refColl = new PdsRequestRefVoCollection();
		for (int i=0; i<form.lyrMaintenance().tabPdsRequests().grdPds().getRows().size(); i++)
		{
			PdsRequestVo voPds = form.lyrMaintenance().tabPdsRequests().grdPds().getRows().get(i).getValue();
			if (voPds != null)
				refColl.add(voPds);
		}
		resubmitPds(refColl);
	}
	
	private void resubmitPdsSelected()
	{
		PdsRequestRefVoCollection refColl = new PdsRequestRefVoCollection();
		for (int i=0; i<form.lyrMaintenance().tabPdsRequests().grdPds().getRows().size(); i++)
		{
			PdsRequestVo voPds = form.lyrMaintenance().tabPdsRequests().grdPds().getRows().get(i).getValue();
			if (voPds != null && form.lyrMaintenance().tabPdsRequests().grdPds().getRows().get(i).getColChkReSubmit())
				refColl.add(voPds);
		}
		if (refColl.size() > 0)
			resubmitPds(refColl);
		else
			engine.showMessage("Please select PDS Request to re-submit");
	}
	
	private void resubmitPdsSingle() 
	{
		PdsRequestVo voPds = form.lyrMaintenance().tabPdsRequests().grdPds().getValue();
		if (voPds != null)
		{
			PdsRequestRefVoCollection refColl = new PdsRequestRefVoCollection();
			refColl.add(voPds);
			resubmitPds(refColl);
		}
		
	}
	
	private void resubmitPds(PdsRequestRefVoCollection refColl)
	{
		try
		{
			domain.resubmitPdsRequest(refColl);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		searchPds();
	}
	//END PDS

	private void searchPds()
	{
		form.lyrMaintenance().tabPdsRequests().grdPds().getRows().clear();
		
		PdsRequestVoCollection requests = domain.listPdsRequests(form.lyrMaintenance().tabPdsRequests().dtePdsFrom().getValue(), form.lyrMaintenance().tabPdsRequests().dtePdsTo().getValue(), form.lyrMaintenance().tabPdsRequests().chkFailedItemsOnly().getValue(), form.lyrMaintenance().tabPdsRequests().txtNHSN().getValue(), form.lyrMaintenance().tabPdsRequests().dtePdsUpdatedFrom().getValue(), form.lyrMaintenance().tabPdsRequests().dtePdsUpdatedTo().getValue());

		if (requests != null && requests.size() > 0)
		{
			for (PdsRequestVo voRequest : requests)
			{
				grdPdsRow row = form.lyrMaintenance().tabPdsRequests().grdPds().getRows().newRow();
				row.setColDateTime(voRequest.getDateTimeRequested().toString());
				if (voRequest.getDateTimeLastCheckedIsNotNull())
					row.setColDateLastChecked(voRequest.getDateTimeLastChecked().toString());
				row.setColComment(voRequest.getComments());
				if (!voRequest.getCommentsIsNotNull() && voRequest.getActiveIsNotNull() && voRequest.getActive().booleanValue() == true)
					row.setColComment("Pds Request has not yet been actioned");
				row.setColNhsn(voRequest.getNhsn());
				row.setValue(voRequest);
			}
			form.lyrMaintenance().tabPdsRequests().lblCountPdsRecords().setValue(requests.size() + "PDS Requests found");
		}
		else
		{
			form.lyrMaintenance().tabPdsRequests().lblCountPdsRecords().setValue("No PDS Requests found");
			engine.showMessage("No PDS Requests found");
		}
	}

	/**
	 * resubmitSlotPoll
     * The purpose of this action is to allow the user to re-send the list of available slots
     * to choose and book.
     * The impl code will check the current status.  If it was previously sent, but no ack received,
     * it will terminate that conversation, and update the active flag on this action request - updating the stat comment.
     * It the slot response was never sent (i.e. current = 2) it will simply set the active flag to true as a new conversation will
     * be started.
	 * @throws PresentationLogicException 
	 */
	private void resubmitSlotPoll() throws PresentationLogicException 
	{
		ActionRequestVo voRequest = form.lyrMaintenance().tabSlotPoll().grdSlotPoll().getValue();
		if (voRequest != null)
		{
			try
			{
				domain.resubmitSlotPoll(voRequest);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}

		}
		searchPoll();
	}

	private void discardAppt()
	{
		cancelAppt();
	}

	private void confirmAppt()
	{
		SessionSlotVo voSlot = form.lyrMaintenance().tabBookExc().grdBookDet().getValue();
		if(voSlot != null && voSlot.getAppointmentIsNotNull())
		{
			voSlot.getAppointment().setApptStatus(Status_Reason.BOOKED);
			// wdev-6034
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voSlot.getAppointment().setCurrentStatusRecord(voApptStatus);
			
			voSlot.getAppointment().setApptStatusHistory(getApptStatusHistory(voSlot, Status_Reason.BOOKED, voApptStatus));
			try
			{
				String errors[] = voSlot.validate();
				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return;
				}
				domain.confirmAppt(voSlot);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			searchBook();
		}
	}

	private void undoSlotCancel()
	{
		SessionSlotVo voSlot = form.lyrMaintenance().tabCancelExc().grdCancelDet().getValue();
		if(voSlot != null)
		{
			voSlot.setStatus(Status_Reason.SLOTOPENED);
			voSlot.setIsActive(Boolean.TRUE);  // wdev-6086
			try
			{
				String errors[] = voSlot.validate();
				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return;
				}

				domain.saveSlot(voSlot);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			searchCancel();
		}
	}

	private void undoCancelAppt()
	{
		SessionSlotVo voSlot = form.lyrMaintenance().tabCancelExc().grdCancelDet().getValue();
		if(voSlot != null && voSlot.getAppointmentIsNotNull())
		{
			voSlot.getAppointment().setApptStatus(Status_Reason.BOOKED);
			// wdev-6034
			Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
			voSlot.getAppointment().setCurrentStatusRecord(voApptStatus);

			voSlot.getAppointment().setApptStatusHistory(getApptStatusHistory(voSlot, Status_Reason.BOOKED, voApptStatus));
			voSlot.setStatus(Status_Reason.APPOINTMENT_BOOKED);
			voSlot.setStatusReason(Status_Reason.UNCANCEL_RECEIVED);
			voSlot.setIsActive(Boolean.TRUE);  // wdev-6086
			try
			{
				String errors[] = voSlot.validate();
				if (errors != null && errors.length > 0)
				{
					engine.showErrors(errors);
					return;
				}

				domain.saveSlot(voSlot);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			searchCancel();
		}
	}

	private void cancelSlot()
	{
		SessionSlotVo voSlot = form.lyrMaintenance().tabCancelExc().grdCancelDet().getValue();
		if(voSlot != null)
		{
			try
			{
				domain.cancelSlot(voSlot);
			}
			catch (StaleObjectException e)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			}
			searchCancel();
		}
	}

	private void cancelAppt()
	{
		SessionSlotVo voSlot = form.lyrMaintenance().tabCancelExc().grdCancelDet().getValue();
		
		// wdev-5966 - could be the book exceptions tab
		if (voSlot == null)  
			voSlot = form.lyrMaintenance().tabBookExc().grdBookDet().getValue();
		if (voSlot == null)
		{
			engine.showMessage("Grid value not set correctly, cannot proceed");
			return;
		}
		
		form.getGlobalContext().Scheduling.setBookingActivity(voSlot.getActivity());
		if(voSlot.getAppointmentIsNotNull() && voSlot.getAppointment().getSessionIsNotNull())
			form.getGlobalContext().Scheduling.setBookingService(voSlot.getAppointment().getSession().getService());
		
		if(voSlot.getAppointmentIsNotNull())
			form.getGlobalContext().ChooseAndBook.setisCABAppt(voSlot.getAppointment().getIsCABBooking());
		
		engine.open(form.getForms().Scheduling.CancelAppointmentDialog);
	}

	/**
	 * @param status
	 * @param appointment
	 * @return
	 */
	private Appointment_StatusVoCollection getApptStatusHistory(SessionSlotVo voSessionSlot, Status_Reason status, Appointment_StatusVo voApptStatus) 
	{
		voApptStatus.setApptDate(voSessionSlot.getAppointment().getAppointmentDate());
		voApptStatus.setApptTime(voSessionSlot.getStartTm());
		
		//if reason is cancelled retrieve values set in cancel dialog
		if(status.equals(Status_Reason.CANCELLED))
		{
			if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
			{
				voApptStatus.setStatus(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatus());
				voApptStatus.setStatusReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
				voApptStatus.setCancellationReason(form.getGlobalContext().Scheduling.getApptCancelStatus().getCancellationReason());
				voApptStatus.setRebookSelected(form.getGlobalContext().Scheduling.getApptCancelStatus().getRebookSelected());
				voApptStatus.setComment(form.getGlobalContext().Scheduling.getApptCancelStatus().getComment());
			}
		}
		else
		{
			voApptStatus.setStatus(status);
			voApptStatus.setStatusReason(status);
		}

		voApptStatus.setPriority(voSessionSlot.getPriority());
		
		Appointment_StatusVoCollection voCollApptStatusHistory = voSessionSlot.getAppointment().getApptStatusHistory();
		if(voCollApptStatusHistory == null)
			voCollApptStatusHistory = new Appointment_StatusVoCollection();
		
		voCollApptStatusHistory.add(voApptStatus);

		return voCollApptStatusHistory;
	}
	
	protected void onCmbBookSpecialtyValueChanged() throws PresentationLogicException
	{
		listBookClinics();
	}
	
	protected void onCmbCancelSpecialtyValueChanged() throws PresentationLogicException
	{
		listCancelClinics();
	}

	private String[] validateBookSearchCriteria()
	{
		List<String> errors = new ArrayList<String>();
		if ((form.lyrMaintenance().tabBookExc().cmbBookSpecialty().getValue() == null) && (form.lyrMaintenance().tabBookExc().cmbBookClinic().getValue() == null) && (form.lyrMaintenance().tabBookExc().dteBookFrom().getValue() == null) && (form.lyrMaintenance().tabBookExc().dteBookTo().getValue() == null))
			errors.add("No Search criteria provided");

		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	private String[] validateCancelSearchCriteria()
	{
		List<String> errors = new ArrayList<String>();
		if ((form.lyrMaintenance().tabCancelExc().cmbCancelSpecialty().getValue() == null) && (form.lyrMaintenance().tabCancelExc().cmbCancelClinic().getValue() == null) && (form.lyrMaintenance().tabCancelExc().dteCancelFrom().getValue() == null) && (form.lyrMaintenance().tabCancelExc().dteCancelTo().getValue() == null))
			errors.add("No Search criteria provided");

		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	private void listServices()
	{
		form.lyrMaintenance().tabBookExc().cmbBookSpecialty().clear();
		ServiceShortVoCollection voCollServices = domain.listActiveService();
		for (int i = 0; i < voCollServices.size(); i++)
		{
			form.lyrMaintenance().tabBookExc().cmbBookSpecialty().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
			form.lyrMaintenance().tabCancelExc().cmbCancelSpecialty().newRow(voCollServices.get(i), voCollServices.get(i).getServiceName());
		}
	}

	private void listBookClinics()
	{
		form.lyrMaintenance().tabBookExc().cmbBookClinic().clear();
		if (form.lyrMaintenance().tabBookExc().cmbBookSpecialty().getValue() == null)
			return;

		ProfileLiteVoCollection voCollClinics = domain.listProfileLiteByService(form.lyrMaintenance().tabBookExc().cmbBookSpecialty().getValue());
		if (voCollClinics != null)
		{
			for (ProfileLiteVo item : voCollClinics)
				form.lyrMaintenance().tabBookExc().cmbBookClinic().newRow(item, item.getName());
		}
	}

	private void listCancelClinics()
	{
		form.lyrMaintenance().tabCancelExc().cmbCancelClinic().clear();
		if (form.lyrMaintenance().tabCancelExc().cmbCancelSpecialty().getValue() == null)
			return;

		ProfileLiteVoCollection voCollClinics = domain.listProfileLiteByService(form.lyrMaintenance().tabCancelExc().cmbCancelSpecialty().getValue());
		if (voCollClinics != null)
		{
			for (ProfileLiteVo item : voCollClinics)
				form.lyrMaintenance().tabCancelExc().cmbCancelClinic().newRow(item, item.getName());
		}
	}

	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		if(formName.equals(form.getForms().Scheduling.CancelAppointmentDialog) && result.equals(DialogResult.OK))
		{
			boolean cancelSearch=true;
			SessionSlotVo voSlot = form.lyrMaintenance().tabCancelExc().grdCancelDet().getValue();
			if (voSlot == null)  // wdev-5966
			{
				voSlot = form.lyrMaintenance().tabBookExc().grdBookDet().getValue();
				cancelSearch=false;
			}
			
			if(voSlot != null && voSlot.getAppointmentIsNotNull())
			{
				voSlot.setStatus(Status_Reason.SLOTOPENED);
				voSlot.getAppointment().setApptStatus(Status_Reason.CANCELLED);
				// wdev-6034
				Appointment_StatusVo voApptStatus = new Appointment_StatusVo();
				voSlot.getAppointment().setCurrentStatusRecord(voApptStatus);

				voSlot.getAppointment().setApptStatusHistory(getApptStatusHistory(voSlot,Status_Reason.CANCELLED, voApptStatus));
				if(form.getGlobalContext().Scheduling.getApptCancelStatusIsNotNull())
					voSlot.getAppointment().setApptStatusReas(form.getGlobalContext().Scheduling.getApptCancelStatus().getStatusReason());
			
				try
				{
					String errors[] = voSlot.validate();
					if (errors != null && errors.length > 0)
					{
						engine.showErrors(errors);
						return;
					}
					domain.cancelAppt(voSlot.getAppointment());
				}
				catch (StaleObjectException e)
				{
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				}
				if (cancelSearch)
					searchCancel();
				else
					searchBook();
				
			}
		}
	}

	protected void onGrdBookDetSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenuState();
	}

	protected void onGrdCancelDetSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenuState();
	}

	protected void onGrdSlotPollSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenuState();
	}
	
	protected void onGrdPdsSelectionChanged() throws PresentationLogicException 
	{
		updateContextMenuState();
	}
	
	
	protected void onImbPollSearchClick() throws PresentationLogicException 
	{
		//WDEV-14735 //WDEV-14759
		if( ! validateDates(form.lyrMaintenance().tabSlotPoll().dteSlotDateFrom().getValue(), form.lyrMaintenance().tabSlotPoll().dteSlotDateTo().getValue(),"From Date cannot be greater than To Date"))
		{
			return;
		}
		
		searchPoll();
		updateContextMenuState();
	}
	
	protected void onImbPdsSearchClick() throws PresentationLogicException 
	{
		//WDEV-14736 //WDEV-14759
		if( ! validateDates(form.lyrMaintenance().tabPdsRequests().dtePdsFrom().getValue(), form.lyrMaintenance().tabPdsRequests().dtePdsTo().getValue(),"From Date cannot be greater than To Date"))
		{
			return;
		}
		
		searchPds();
		updateContextMenuState();
	}
	
	protected void searchPoll() throws PresentationLogicException
	{
		form.lyrMaintenance().tabSlotPoll().grdSlotPoll().getRows().clear();
		
		ActionRequestVoCollection requests = domain.listSlotPolls(form.lyrMaintenance().tabSlotPoll().dteSlotDateFrom().getValue(), form.lyrMaintenance().tabSlotPoll().dteSlotDateTo().getValue());

		if (requests != null && requests.size() > 0)
		{
			for (ActionRequestVo voRequest : requests)
			{
				grdSlotPollRow row = form.lyrMaintenance().tabSlotPoll().grdSlotPoll().getRows().newRow();
				String msgDetails = voRequest.getMsgDetails();
				if (msgDetails != null)
				{
					StringTokenizer st = new StringTokenizer(msgDetails, ";");
					int valueCount=0;
					while (st.hasMoreTokens())
					{
						String val = st.nextToken();
						valueCount++;
						switch (valueCount)
						{
							case 1:
								row.setColDos(val.substring(val.indexOf(":")+1));
								break;
							case 2:
								row.setColDateFrom(val.substring(val.indexOf(":")+1));
								break;
							case 4:
								row.setColDateTo(val.substring(val.indexOf(":")+1));
								break;
							
						}
					}
				}
				row.setColDateTime(voRequest.getRequestDate().toString());
				if (voRequest.getProgressCommentIsNotNull())
				{
					row.setColStat(voRequest.getProgressComment());
				}
				else
				{
					if (voRequest.getActiveIsNotNull() && voRequest.getActive().booleanValue() == true)
						row.setColStat("Item still in action list");
					else
						row.setColStat("Current status unknown");
				}
				row.setColComment(voRequest.getStatComment());
				row.setTooltipForColComment(voRequest.getStatComment());
				row.setValue(voRequest);
			}
			form.lyrMaintenance().tabSlotPoll().lblPollCount().setValue(requests.size() + " Slot Poll Requests found");
		}
		else
		{
			form.lyrMaintenance().tabSlotPoll().lblPollCount().setValue("No Slot Poll Requests found");
			engine.showMessage("No Slot Poll Requests found");
		}
	}

	@Override
	protected void onImbClearSdsClick() throws PresentationLogicException
	{
		clearScreen();
	}

	@Override
	protected void onImbSearchSdsClick() throws PresentationLogicException
	{
		//WDEV-14759
		if( ! validateDates(form.lyrMaintenance().tabSdsRequests().dteSdsFrom().getValue(), form.lyrMaintenance().tabSdsRequests().dteSdsTo().getValue(),"From Date cannot be greater than To Date"))
		{
			return;
		}
		
		if( ! validateDates(form.lyrMaintenance().tabSdsRequests().dteSdsUpdatedFrom().getValue(), form.lyrMaintenance().tabSdsRequests().dteSdsUpdatedTo().getValue(),"Updated From Date cannot be greater than Updated To Date"))
		{
			return;
		} 
		
		searchSds();
		updateContextMenuState();
	}

	private void searchSds()
	{
		form.lyrMaintenance().tabSdsRequests().grdSds().getRows().clear();
		
		SdsRequestLiteVoCollection requests = domain.listSdsRequest(form.lyrMaintenance().tabSdsRequests().dteSdsFrom().getValue(), form.lyrMaintenance().tabSdsRequests().dteSdsTo().getValue(), form.lyrMaintenance().tabSdsRequests().dteSdsUpdatedFrom().getValue(), form.lyrMaintenance().tabSdsRequests().dteSdsUpdatedTo().getValue());

		if (requests != null && requests.size() > 0)
		{
			for (SdsRequestLiteVo voRequest : requests)
			{
				grdSdsRow row = form.lyrMaintenance().tabSdsRequests().grdSds().getRows().newRow();
				row.setColDateTime(voRequest.getDateTimeRequested().toString());
				if (voRequest.getDateTimeLastCheckedIsNotNull())
					row.setColDateTimeLastRequested(voRequest.getDateTimeLastChecked().toString());
				row.setColComment(voRequest.getComments());
				if (!voRequest.getCommentsIsNotNull() && voRequest.getActiveIsNotNull() && voRequest.getActive().booleanValue() == true)
					row.setColComment("Pds Request has not yet been actioned");
				row.setValue(voRequest);
			}
			form.lyrMaintenance().tabSdsRequests().lblCountSdsRecords().setValue(requests.size() + " SDS Requests found");
		}
		else
		{
			form.lyrMaintenance().tabSdsRequests().lblCountSdsRecords().setValue("No SDS Requests found");
			engine.showMessage("No SDS Requests found");
		}		
	}

	@Override
	protected void onGrdSdsSelectionChanged() throws PresentationLogicException
	{
		updateContextMenuState();
	}

	@Override
	protected void onlyrMaintenanceTabChanged(LayerBridge tab)
	{
		if(tab.equals(form.lyrMaintenance().tabBookExc()))
		{
			form.lyrMaintenance().tabBookExc().imbBookSearch().setAsDefaultButton();
		}
		else if(tab.equals(form.lyrMaintenance().tabCancelExc()))
		{
			form.lyrMaintenance().tabCancelExc().imbCancelSearch().setAsDefaultButton();
		}
		else if(tab.equals(form.lyrMaintenance().tabPdsRequests()))
		{
			form.lyrMaintenance().tabPdsRequests().imbPdsSearch().setAsDefaultButton();
		}
		else if(tab.equals(form.lyrMaintenance().tabSdsRequests()))
		{
			form.lyrMaintenance().tabSdsRequests().imbSearchSds().setAsDefaultButton();
		}
		else if(tab.equals(form.lyrMaintenance().tabSlotPoll()))
		{
			form.lyrMaintenance().tabSlotPoll().imbPollSearch().setAsDefaultButton();
		}
		
		updateContextMenuState();
	}
}
