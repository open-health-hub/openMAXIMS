// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.atconsultationcomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdProcedureRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdProcedureRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolProcedureReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolProcedureOpened()
		{
			super.row.showOpened(0);
		}
		public ims.framework.controls.GridMutableComboBox getcolProcedure()
		{
			return new ims.framework.controls.GridMutableComboBox(super.row, 0);
		}
		public void setCellcolProcedureTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolDateOpened()
		{
			super.row.showOpened(1);
		}
		public ims.framework.utils.PartialDate getcolDate()
		{
			return (ims.framework.utils.PartialDate)super.row.get(1);
		}
		public void setcolDate(ims.framework.utils.PartialDate value)
		{
			super.row.set(1, value);
		}
		public void setCellcolDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.PatientProcedureLiteVo getValue()
		{
			return (ims.core.vo.PatientProcedureLiteVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientProcedureLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdProcedureRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdProcedureRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdProcedureRow get(int index)
		{
			return new grdProcedureRow(super.collection.get(index));
		}
		public grdProcedureRow newRow()
		{
			return new grdProcedureRow(super.collection.newRow());
		}
		public grdProcedureRow newRow(boolean autoSelect)
		{
			return new grdProcedureRow(super.collection.newRow(autoSelect));
		}
		public grdProcedureRow newRowAt(int index)
		{
			return new grdProcedureRow(super.collection.newRowAt(index));
		}
		public grdProcedureRow newRowAt(int index, boolean autoSelect)
		{
			return new grdProcedureRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdProcedureGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
		{
			 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
		}
		private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.core.vo.PatientProcedureLiteVoCollection getValues()
		{
			ims.core.vo.PatientProcedureLiteVoCollection listOfValues = new ims.core.vo.PatientProcedureLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientProcedureLiteVo getValue()
		{
			return (ims.core.vo.PatientProcedureLiteVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientProcedureLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdProcedureRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdProcedureRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdProcedureRowCollection getRows()
		{
			return new grdProcedureRowCollection(super.grid.getRows());
		}
		public grdProcedureRow getRowByValue(ims.core.vo.PatientProcedureLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdProcedureRow(row);
		}
		public void setcolProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
	}
	public static class grdDiagnosisRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDiagnosisRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolDiagnosisReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolDiagnosisReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolDiagnosisOpened()
		{
			super.row.showOpened(0);
		}
		public String getcolDiagnosis()
		{
			return (String)super.row.get(0);
		}
		public void setcolDiagnosis(String value)
		{
			super.row.set(0, value);
		}
		public void setCellcolDiagnosisTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolDateReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolDateReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolDateOpened()
		{
			super.row.showOpened(1);
		}
		public ims.framework.utils.PartialDate getcolDate()
		{
			return (ims.framework.utils.PartialDate)super.row.get(1);
		}
		public void setcolDate(ims.framework.utils.PartialDate value)
		{
			super.row.set(1, value);
		}
		public void setCellcolDateTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolStatusReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolStatusOpened()
		{
			super.row.showOpened(2);
		}
		public String getcolStatus()
		{
			return (String)super.row.get(2);
		}
		public void setcolStatus(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolStatusTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.core.vo.PatientDiagnosisAtConsultationVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisAtConsultationVo)super.row.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisAtConsultationVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDiagnosisRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDiagnosisRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDiagnosisRow get(int index)
		{
			return new grdDiagnosisRow(super.collection.get(index));
		}
		public grdDiagnosisRow newRow()
		{
			return new grdDiagnosisRow(super.collection.newRow());
		}
		public grdDiagnosisRow newRow(boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRow(autoSelect));
		}
		public grdDiagnosisRow newRowAt(int index)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index));
		}
		public grdDiagnosisRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDiagnosisGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addPartialDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addPartialDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		public ims.core.vo.PatientDiagnosisAtConsultationVoCollection getValues()
		{
			ims.core.vo.PatientDiagnosisAtConsultationVoCollection listOfValues = new ims.core.vo.PatientDiagnosisAtConsultationVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.PatientDiagnosisAtConsultationVo getValue()
		{
			return (ims.core.vo.PatientDiagnosisAtConsultationVo)super.grid.getValue();
		}
		public void setValue(ims.core.vo.PatientDiagnosisAtConsultationVo value)
		{
			super.grid.setValue(value);
		}
		public grdDiagnosisRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDiagnosisRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDiagnosisRowCollection getRows()
		{
			return new grdDiagnosisRowCollection(super.grid.getRows());
		}
		public grdDiagnosisRow getRowByValue(ims.core.vo.PatientDiagnosisAtConsultationVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDiagnosisRow(row);
		}
		public void setcolDiagnosisHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolDiagnosisHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(Boolean.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Boolean' of the global context variable 'RefMan.IsProviderCancellation' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(800, 512);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuProcedure = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuProcedureADDItem = factory.createMenuItem(startControlID.intValue() + 1, "New Procedure", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200006)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureADDItem);
		contextMenus.contextMenuProcedureUPDATEItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Procedure", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200007)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureUPDATEItem);
		contextMenus.contextMenuProcedurePERFORMEDItem = factory.createMenuItem(startControlID.intValue() + 3, "Mark Procedure as Performed", true, false, new Integer(102209), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200009)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedurePERFORMEDItem);
		contextMenus.contextMenuProcedureVIEWASSOCIATIONSItem = factory.createMenuItem(startControlID.intValue() + 4, "View Associations", true, false, new Integer(102266), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200010)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureVIEWASSOCIATIONSItem);
		contextMenus.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 5, "New Intra Operative Details", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200001)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 6, "View\\Edit Intra Operative Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200002)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 7, "New Cataract Intra Operative Details", true, false, new Integer(102149), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200003)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem = factory.createMenuItem(startControlID.intValue() + 8, "View\\Edit Cataract Intra Operative Details", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200004)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem);
		contextMenus.contextMenuProcedureRIEItem = factory.createMenuItem(startControlID.intValue() + 9, "RIE", true, false, new Integer(102142), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200005)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureRIEItem);
		contextMenus.contextMenuProcedureCANCELItem = factory.createMenuItem(startControlID.intValue() + 10, "Mark Procedure as Cancelled", true, false, new Integer(102148), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(1200011)))
			contextMenus.contextMenuProcedure.add(contextMenus.contextMenuProcedureCANCELItem);
		form.registerMenu(contextMenus.contextMenuProcedure);
		contextMenus.contextMenuDiagnosisHotList = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuDiagnosisHotListAddDiagnosisItem = factory.createMenuItem(startControlID.intValue() + 11, "Add Diagnosis", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuDiagnosisHotList.add(contextMenus.contextMenuDiagnosisHotListAddDiagnosisItem);
		contextMenus.contextMenuDiagnosisHotListMOVEUPItem = factory.createMenuItem(startControlID.intValue() + 12, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuDiagnosisHotList.add(contextMenus.contextMenuDiagnosisHotListMOVEUPItem);
		contextMenus.contextMenuDiagnosisHotListMOVEDOWNItem = factory.createMenuItem(startControlID.intValue() + 13, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuDiagnosisHotList.add(contextMenus.contextMenuDiagnosisHotListMOVEDOWNItem);
		contextMenus.contextMenuDiagnosisHotListRemoveItem = factory.createMenuItem(startControlID.intValue() + 14, "Remove", true, false, new Integer(102148), true, true);
		contextMenus.contextMenuDiagnosisHotList.add(contextMenus.contextMenuDiagnosisHotListRemoveItem);
		contextMenus.contextMenuDiagnosisHotListEDITItem = factory.createMenuItem(startControlID.intValue() + 15, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuDiagnosisHotList.add(contextMenus.contextMenuDiagnosisHotListEDITItem);
		form.registerMenu(contextMenus.contextMenuDiagnosisHotList);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 784, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Diagnosis:", new Integer(1), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 208, 784, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Treatments / Procedures Performed:", new Integer(1), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 232, 376, 56, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ims.framework.FormUiLogic m_customControlAuthoringForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 1, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(16), new Integer(232), new Integer(376), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_customControlAuthoringForm, instance1 } );
		ims.framework.Control m_customControlAuthoringControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 1), m_customControlAuthoringForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringControl);
		Menu[] menus1 = m_customControlAuthoringForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 200, 280, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 200, 280, 0, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 28, 268, 0, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 712, 480, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 1010), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 632, 480, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 480, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1008), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 456, 264, 168, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1003), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 456, 240, 176, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1002), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"First Definitive Treatment", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 296, 768, 176, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdProcedureTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.READONLY, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuProcedure, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdProcedureTemp);
		grdProcedureGrid grdProcedure = (grdProcedureGrid)GridFlyweightFactory.getInstance().createGridBridge(grdProcedureGrid.class, m_grdProcedureTemp);
		grdProcedure.addMutableComboBoxColumn(" Procedure", 0, 0, 700, false, true, true, false, true, true, -1);
		grdProcedure.addPartialDateColumn("Date", 0, 0, -1, false, true, null, false, 0, true);
		super.addGrid(grdProcedure);
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 776, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdDiagnosisTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuDiagnosisHotList, Boolean.FALSE, Boolean.TRUE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDiagnosisTemp);
		grdDiagnosisGrid grdDiagnosis = (grdDiagnosisGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisGrid.class, m_grdDiagnosisTemp);
		grdDiagnosis.addStringColumn(" Diagnosis", 0, 0, 500, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDiagnosis.addPartialDateColumn("Date", 0, 0, 100, false, true, null, false, 0, true);
		grdDiagnosis.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDiagnosis);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public ims.core.forms.authoringinfo.IComponent customControlAuthoring()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
	}
	public void setcustomControlAuthoringValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setVisible(value);
	}
	public boolean iscustomControlAuthoringVisible()
	{
		return ((ims.framework.Control)super.getControl(2)).isVisible();
	}
	public void setcustomControlAuthoringEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringEnabled()
	{
		return ((ims.framework.Control)super.getControl(2)).isEnabled();
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(7);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(8);
	}
	public TextBox txtTreatment()
	{
		return (TextBox)super.getControl(9);
	}
	public CheckBox chkTreatment()
	{
		return (CheckBox)super.getControl(10);
	}
	public grdProcedureGrid grdProcedure()
	{
		return (grdProcedureGrid)super.getGrid(0);
	}
	public grdDiagnosisGrid grdDiagnosis()
	{
		return (grdDiagnosisGrid)super.getGrid(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
			Core = new CoreForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				DiagnosisDialog = new LocalFormName(123146);
			}
			public final FormName DiagnosisDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				SelectMedication = new LocalFormName(102265);
			}
			public final FormName SelectMedication;
		}

		public ClinicalForms Clinical;
		public CoreForms Core;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedRecord = new ims.framework.ContextVariable("SelectedRecord", prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__SelectedRecord_" + componentIdentifier + "");
			cxl_CurrentService = new ims.framework.ContextVariable("CurrentService", prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier + "");
		}
		
		public boolean getSelectedRecordIsNotNull()
		{
			return !cxl_SelectedRecord.getValueIsNull(context);
		}
		public ims.RefMan.vo.AtConsultationVo getSelectedRecord()
		{
			return (ims.RefMan.vo.AtConsultationVo)cxl_SelectedRecord.getValue(context);
		}
		public void setSelectedRecord(ims.RefMan.vo.AtConsultationVo value)
		{
			cxl_SelectedRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRecord = null;
		public boolean getCurrentServiceIsNotNull()
		{
			return !cxl_CurrentService.getValueIsNull(context);
		}
		public ims.core.vo.ServiceShortVo getCurrentService()
		{
			return (ims.core.vo.ServiceShortVo)cxl_CurrentService.getValue(context);
		}
		public void setCurrentService(ims.core.vo.ServiceShortVo value)
		{
			cxl_CurrentService.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentService = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class Procedure implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD = 1;
			public static final int UPDATE = 2;
			public static final int PERFORMED = 3;
			public static final int VIEWASSOCIATIONS = 4;
			public static final int NEWINTRAOPERATIVEDETAILS = 5;
			public static final int EDITINTRAOPERATIVEDETAILS = 6;
			public static final int NEWCATARACTINTRAOPERATIVEDETAILS = 7;
			public static final int EDITCATARACTINTRAOPERATIVEDETAILS = 8;
			public static final int RIE = 9;
			public static final int CANCEL = 10;
		}
		public void disableAllProcedureMenuItems()
		{
			this.contextMenuProcedureADDItem.setEnabled(false);
			this.contextMenuProcedureUPDATEItem.setEnabled(false);
			this.contextMenuProcedurePERFORMEDItem.setEnabled(false);
			this.contextMenuProcedureVIEWASSOCIATIONSItem.setEnabled(false);
			this.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem.setEnabled(false);
			this.contextMenuProcedureRIEItem.setEnabled(false);
			this.contextMenuProcedureCANCELItem.setEnabled(false);
		}
		public void hideAllProcedureMenuItems()
		{
			this.contextMenuProcedureADDItem.setVisible(false);
			this.contextMenuProcedureUPDATEItem.setVisible(false);
			this.contextMenuProcedurePERFORMEDItem.setVisible(false);
			this.contextMenuProcedureVIEWASSOCIATIONSItem.setVisible(false);
			this.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem.setVisible(false);
			this.contextMenuProcedureRIEItem.setVisible(false);
			this.contextMenuProcedureCANCELItem.setVisible(false);
		}
		private Menu contextMenuProcedure;
		public ReadOnlyMenuItem getProcedureADDItem()
		{
			return this.contextMenuProcedureADDItem;
		}
		private MenuItem contextMenuProcedureADDItem;
		public ReadOnlyMenuItem getProcedureUPDATEItem()
		{
			return this.contextMenuProcedureUPDATEItem;
		}
		private MenuItem contextMenuProcedureUPDATEItem;
		public ReadOnlyMenuItem getProcedurePERFORMEDItem()
		{
			return this.contextMenuProcedurePERFORMEDItem;
		}
		private MenuItem contextMenuProcedurePERFORMEDItem;
		public ReadOnlyMenuItem getProcedureVIEWASSOCIATIONSItem()
		{
			return this.contextMenuProcedureVIEWASSOCIATIONSItem;
		}
		private MenuItem contextMenuProcedureVIEWASSOCIATIONSItem;
		public ReadOnlyMenuItem getProcedureNEWINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureNEWINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureEDITINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureEDITINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureNEWCATARACTINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem()
		{
			return this.contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem;
		}
		private MenuItem contextMenuProcedureEDITCATARACTINTRAOPERATIVEDETAILSItem;
		public ReadOnlyMenuItem getProcedureRIEItem()
		{
			return this.contextMenuProcedureRIEItem;
		}
		private MenuItem contextMenuProcedureRIEItem;
		public MenuItem getProcedureCANCELItem()
		{
			return this.contextMenuProcedureCANCELItem;
		}
		private MenuItem contextMenuProcedureCANCELItem;
		public final class DiagnosisHotList implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int AddDiagnosis = 11;
			public static final int MOVEUP = 12;
			public static final int MOVEDOWN = 13;
			public static final int Remove = 14;
			public static final int EDIT = 15;
		}
		public void disableAllDiagnosisHotListMenuItems()
		{
			this.contextMenuDiagnosisHotListAddDiagnosisItem.setEnabled(false);
			this.contextMenuDiagnosisHotListMOVEUPItem.setEnabled(false);
			this.contextMenuDiagnosisHotListMOVEDOWNItem.setEnabled(false);
			this.contextMenuDiagnosisHotListRemoveItem.setEnabled(false);
			this.contextMenuDiagnosisHotListEDITItem.setEnabled(false);
		}
		public void hideAllDiagnosisHotListMenuItems()
		{
			this.contextMenuDiagnosisHotListAddDiagnosisItem.setVisible(false);
			this.contextMenuDiagnosisHotListMOVEUPItem.setVisible(false);
			this.contextMenuDiagnosisHotListMOVEDOWNItem.setVisible(false);
			this.contextMenuDiagnosisHotListRemoveItem.setVisible(false);
			this.contextMenuDiagnosisHotListEDITItem.setVisible(false);
		}
		private Menu contextMenuDiagnosisHotList;
		public MenuItem getDiagnosisHotListAddDiagnosisItem()
		{
			return this.contextMenuDiagnosisHotListAddDiagnosisItem;
		}
		private MenuItem contextMenuDiagnosisHotListAddDiagnosisItem;
		public MenuItem getDiagnosisHotListMOVEUPItem()
		{
			return this.contextMenuDiagnosisHotListMOVEUPItem;
		}
		private MenuItem contextMenuDiagnosisHotListMOVEUPItem;
		public MenuItem getDiagnosisHotListMOVEDOWNItem()
		{
			return this.contextMenuDiagnosisHotListMOVEDOWNItem;
		}
		private MenuItem contextMenuDiagnosisHotListMOVEDOWNItem;
		public MenuItem getDiagnosisHotListRemoveItem()
		{
			return this.contextMenuDiagnosisHotListRemoveItem;
		}
		private MenuItem contextMenuDiagnosisHotListRemoveItem;
		public MenuItem getDiagnosisHotListEDITItem()
		{
			return this.contextMenuDiagnosisHotListEDITItem;
		}
		private MenuItem contextMenuDiagnosisHotListEDITItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[100];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-ID", "ID_Medication");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-MEDICATIONNAME", "MedicationName");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-ISACTIVE", "IsActive");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-ISCONTROLLEDDRUG", "IsControlledDrug");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-FREQUENCYDEFAULT", "FrequencyDefault");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.SelectMedication.SelectedMedication", "BO-1003100024-NOOFDAYSSUPPLYDEFAULT", "NoOfDaysSupplyDefault");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-SPECIALTY", "Specialty");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-DIAGNOSISDESCRIPTION", "DiagnosisDescription");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-DIAGNOSEDDATE", "DiagnosedDate");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-SOURCEOFINFORMATION", "SourceofInformation");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-CARECONTEXT", "CareContext");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-EPISODEOFCARE", "EpisodeOfCare");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-ADDEDDURINGCODING", "AddedDuringCoding");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_Core.PatientDiagnosisAtConsultation", "BO-1003100016-CODINGSEQUENCE", "CodingSequence");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100004-ID", "ID_AtConsultation");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100004-CATSREFERRAL", "CatsReferral");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__SelectedRecord_" + componentIdentifier, "BO-1096100004-FIRSTDEFINITIVETREATMENTDATE", "FirstDefinitiveTreatmentDate");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ID", "ID_Service");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICENAME", "ServiceName");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SPECIALTY", "Specialty");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-SERVICEDESCRIPTION", "ServiceDescription");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ISACTIVE", "IsActive");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_RefMan.AtConsultationComponent.__internal_x_context__CurrentService_" + componentIdentifier, "BO-1003100032-ALTERNATESERVICECODE", "AlternateServiceCode");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
