// This code was generated by Daniel Laffan using IMS Development Environment (version 1.65 build 3175.20077)
// Copyright (C) 1995-2008 IMS MAXIMS plc. All rights reserved.

package ims.RefMan.forms.bookappointment;

import ims.RefMan.forms.bookappointment.GenForm.grdApptRow;
import ims.RefMan.forms.bookappointment.GenForm.grdSessionSlotsRow;
import ims.RefMan.vo.ReferralBookingVo;
import ims.RefMan.vo.lookups.CatsReferralCategory;
import ims.RefMan.vo.lookups.ERODType;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.resource.place.vo.LocationRefVoCollection;
import ims.core.vo.ActivitySchedVo;
import ims.core.vo.ActivitySchedVoCollection;
import ims.core.vo.HcpFilter;
import ims.core.vo.HcpLiteVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.LocationServiceLiteVo;
import ims.core.vo.PersonName;
import ims.core.vo.ServiceFunctionLiteVo;
import ims.core.vo.ServiceFunctionLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.ActivityType;
import ims.core.vo.lookups.ReferralManagementContractType;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.WindowParam;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IAppRole;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateTime;
import ims.framework.utils.Time;
import ims.icp.vo.PatientICPFullVo;
import ims.ocrr.vo.OrderInvestigationBookingVo;
import ims.ocrr.vo.ProviderSystemLiteVo;
import ims.scheduling.domain.objects.Sch_Session;
import ims.scheduling.vo.Appointment_StatusVo;
import ims.scheduling.vo.Appointment_StatusVoCollection;
import ims.scheduling.vo.BookingAppointmentLiteVo;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.scheduling.vo.Booking_AppointmentRefVoCollection;
import ims.scheduling.vo.Booking_AppointmentVo;
import ims.scheduling.vo.Booking_AppointmentVoCollection;
import ims.scheduling.vo.Sch_BookingVo;
import ims.scheduling.vo.Sch_SessionRefVo;
import ims.scheduling.vo.Sch_SessionRefVoCollection;
import ims.scheduling.vo.SessionListVo;
import ims.scheduling.vo.SessionShortVo;
import ims.scheduling.vo.SessionShortVoCollection;
import ims.scheduling.vo.SessionSlotListVo;
import ims.scheduling.vo.SessionSlotListVoCollection;
import ims.scheduling.vo.SessionSlotVo;
import ims.scheduling.vo.SessionSlotWithStatusOnlyVo;
import ims.scheduling.vo.Session_BookingRightVo;
import ims.scheduling.vo.Session_SlotRefVo;
import ims.scheduling.vo.lookups.ConsultationMediaType;
import ims.scheduling.vo.lookups.SchedulingPriority;
import ims.scheduling.vo.lookups.Status_Reason;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;

public class Logic extends BaseLogic {
	private static final long serialVersionUID = 1L;
	private static final int CURRENT_APPT_NODE = 1;
	private static final int REBOOK_APPT_NODE = 2;
	private static final int INV_NODE = 3;
	private static final int OTHER_NODE = 4;
	
	private static final int APPT_CONSULTATION_MEDIA_COL_INDEX = 3;
	private static final int APPT_PATIENT_CATEGORY_COL_INDEX = 4;

	//private static final int REASONABLE_DAYS_LIMIT = 21;

	// WDEV-11761private static final int[][] colors = new
	// int[][]{{0,153,0},{0,192,0},{0,255,0},{157,255,60},{128,255,128},{174,255,174},
	// WDEV-11761
	// {205,255,155},{255,255,220},{255,255,183},{255,255,128},{255,255,0},
	// WDEV-11761
	// {209,209,0},{255,128,0},{243,87,20},{255,128,128},{255,89,89},{230,48,48},{255,0,0}};//WDEV-11713

	protected void onFormOpen(Object[] args)
			throws ims.framework.exceptions.PresentationLogicException {
		initialize();
		open();
	}

	private void open() {
		loadReferralDetails();
		clearSearchCriteria();
		form.btnBook().setEnabled(false);
		form.btnCancel().setEnabled(false);
		form.bookingCalendarAppts().setEnabled(false);
		form.bookingCalendarAppts().setCurrentMonth(new Date());
		form.getLocalContext().setSch_Booking(new Sch_BookingVo());
		form.getLocalContext().setisLinkingOrderInv(false);
		clearBookingCalendar();

		form.cmbService().setEnabled(true);
		form.cmbActivity().setEnabled(true);
		form.qmbListOwner().setEnabled(true); // WDEV-18411
		form.imbClear().setEnabled(true);

		removeAllRadiologyServices();

		// WDEV-17903 - If Service in GC, default the value in
		if (form.getGlobalContext().Scheduling.getBookingServiceIsNotNull()) {
			form.cmbService().setValue(
					form.getGlobalContext().Scheduling.getBookingService());
			if (form.cmbService().getValue() == null
					&& form.getGlobalContext().Scheduling.getBookingService() instanceof ServiceLiteVo) {
				form.cmbService().newRow(
						form.getGlobalContext().Scheduling.getBookingService(),
						((ServiceLiteVo) form.getGlobalContext().Scheduling
								.getBookingService()).getServiceName());
				form.cmbService().setValue(
						form.getGlobalContext().Scheduling.getBookingService());
			}
		}

		// rebooking WDEV-5213
		repopulateScreen();

		// wdev-12682
		if (form.getGlobalContext().RefMan
				.getReferralContractTypeForPatientIsNotNull()
				&& form.getGlobalContext().RefMan
						.getReferralContractTypeForPatient().equals(
								ReferralManagementContractType.DIAGNOSTIC)
				&& form.getGlobalContext().Scheduling.getBookingAppointment() == null) {
			if (engine.getCurrentLocation() != null) {
				for (int i = 0; i < form.cmbLocation().getValues().size(); i++) {
					if (((LocationRefVo) form.cmbLocation().getValues().get(i))
							.getID_Location().equals(
									engine.getCurrentLocation().getID())) {
						form.cmbLocation().setValue(
								((LocationRefVo) form.cmbLocation().getValues()
										.get(i)));
						break;
					}
				}
			}
		}
	}

	private void repopulateScreen() {
		if (form.getGlobalContext().Scheduling.getBookingAppointment() == null)
			return;

		// SITE-508
		form.getGlobalContext().Scheduling.setBookingAppointment(domain
				.getBookingAppointment(form.getGlobalContext().Scheduling
						.getBookingAppointment()));

		// store the same booking record
		Sch_BookingVo voBooking = domain.getSch_BookingByAppt(form
				.getGlobalContext().Scheduling.getBookingAppointment());
		form.getLocalContext().setSch_Booking(voBooking);
		if (voBooking != null)
			form.txtBookingComments().setValue(voBooking.getBookingComments());

		form.cmbService().setValue(
				form.getGlobalContext().Scheduling.getBookingService());
		if (form.cmbService().getValue() == null
				&& form.getGlobalContext().Scheduling.getBookingService() instanceof ServiceLiteVo) {
			form.cmbService().newRow(
					form.getGlobalContext().Scheduling.getBookingService(),
					((ServiceLiteVo) form.getGlobalContext().Scheduling
							.getBookingService()).getServiceName());
			form.cmbService().setValue(
					form.getGlobalContext().Scheduling.getBookingService());
		}

		if (form.getGlobalContext().Scheduling.getBookingActivityIsNotNull()) {
			for (int i = 0; i < form.cmbActivity().getValues().size(); i++) {
				if (((ActivitySchedVo) form.cmbActivity().getValues().get(i))
						.getID_Activity().equals(
								form.getGlobalContext().Scheduling
										.getBookingActivity().getID_Activity())) {
					form.cmbActivity().setValue(
							(ActivitySchedVo) form.cmbActivity().getValues()
									.get(i));
					break;
				}
			}
		}

		if (validateSearchCriteria() == null) {
			loadSessions();
			// set a flag to say that the appt to be rebooked hasnt yet been
			// selected
			form.getLocalContext().setIsRebookApptSelected(false);
			form.setMode(FormMode.EDIT);
			form.bookingCalendarAppts().setSelectedDay(new Date());
			bookingCalendarDateSelected(new Date());
			form.btnCancel().setEnabled(true);

			form.cmbService().setEnabled(false);
			form.cmbActivity().setEnabled(false);
			form.imbClear().setEnabled(false);
		}
	}

	private void loadServices() {
		form.cmbService().clear();
		ServiceLiteVoCollection voCollServices = domain
				.listActiveCanBeScheduledService();
		if (voCollServices != null) {
			for (int i = 0; i < voCollServices.size(); i++)
				form.cmbService().newRow(voCollServices.get(i),
						voCollServices.get(i).getServiceName());
		}
	}

	private void clearBookingCalendar() {
		form.bookingCalendarAppts().clearBookedChecks();
		form.bookingCalendarAppts().clearChecks();
		form.bookingCalendarAppts().clearPercentages();
		form.bookingCalendarAppts().clearNoSessionDates();
		form.bookingCalendarAppts().clearNoSlotDates();
		form.bookingCalendarAppts().clearBackColors();

		Date dateStart = new Date(form.bookingCalendarAppts().getCurrentMonth()
				.getYear(), form.bookingCalendarAppts().getCurrentMonth()
				.getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendarAppts().getCurrentMonth()
				.getYear(), form.bookingCalendarAppts().getCurrentMonth()
				.getMonth(), form.bookingCalendarAppts().getCurrentMonth()
				.getNumberOfDaysInTheMonth());

		while (dateStart.isLessOrEqualThan(dateEnd)) {
			form.bookingCalendarAppts().addNoSessionDates(new Date(dateStart));
			dateStart.addDay(1);
		}
	}

	private void loadReferralDetails() {
		ReferralBookingVo voReferral = domain.getReferralDetail(form
				.getGlobalContext().RefMan.getCatsReferral());
		populateReferralDetailsControlsFromData(voReferral);
	}

	private void populateReferralDetailsControlsFromData(
			ReferralBookingVo voReferral) {
		clearReferralDetails();
		if (voReferral == null)
			return;

		if (voReferral.getReferralLetterDetailIsNotNull()) {
			form.dteReferral().setValue(
					voReferral.getReferralLetterDetail().getDateOfReferral());
			form.dteReferralLetter().setValue(
					voReferral.getReferralLetterDetail()
							.getDateReferralReceived());

			if (voReferral.getReferralLetterDetail().getServiceIsNotNull()) {
				form.cmbReferralService().newRow(
						voReferral.getReferralLetterDetail().getService(),
						voReferral.getReferralLetterDetail().getService()
								.getServiceName());
				form.cmbReferralService().setValue(
						voReferral.getReferralLetterDetail().getService());
			}
			if (voReferral.getReferralLetterDetail().getFunctionIsNotNull()
					&& voReferral.getReferralLetterDetail().getFunction()
							.getFunctionIsNotNull()) {
				form.cmbReferralClinicType().newRow(
						voReferral.getReferralLetterDetail().getFunction(),
						voReferral.getReferralLetterDetail().getFunction()
								.getFunction().getText());
				form.cmbReferralClinicType().setValue(
						voReferral.getReferralLetterDetail().getFunction());
			}

			form.lblEndXKPI().setValue(
					voReferral.getReferralLetterDetail()
							.getDayTo1stAppIsNotNull() ? "End "
							+ voReferral.getReferralLetterDetail()
									.getDayTo1stApp() + " day KPI:"
							: "End day KPI:");// WDEV-11713
			form.dteEnd10DayKPI().setValue(
					voReferral.getReferralLetterDetail().getEndXdayKPI());// WDEV-11713
			form.getLocalContext().setKPIDays(
					voReferral.getReferralLetterDetail().getKPIDays());
		}
		// WDEV-18411
		form.getLocalContext().setReferralCategory(
				voReferral.getReferralCategory());
		form.getLocalContext()
				.setTriageDateTime(voReferral.getTriageDateTime());
		form.getLocalContext()
				.setLastReferralEROD(voReferral.getReferralEROD());
		form.getLocalContext().setCurrentClock(voReferral.getCurrentClock());
		form.getLocalContext().setIsCAB(voReferral.getIsCAB());

		populateInvApptTree(voReferral);
	}

	private void clearReferralDetails() {
		form.dteReferral().setValue(null);
		form.dteReferralLetter().setValue(null);
		form.dteEnd10DayKPI().setValue(null);
		form.cmbReferralClinicType().clear();
		form.cmbReferralService().clear();
		form.treInvAppts().clear();

	}

	private void populateInvApptTree(ReferralBookingVo voReferral) {
		if (voReferral.getCurrentAppointmentsIsNotNull()
				&& voReferral.getCurrentAppointments().size() > 0) {
			TreeNode apptNode = form.treInvAppts().getNodes()
					.add(CURRENT_APPT_NODE, "Current Appointments");
			apptNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			apptNode.setCollapsedImage(form.getImages().Core.OpenFolder);

			for (BookingAppointmentLiteVo voAppt : voReferral
					.getCurrentAppointments()) {
				TreeNode node = apptNode.getNodes().add(voAppt,
						voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
			}

			apptNode.setExpanded(true);
		}
		if (voReferral.getAppointmentsRequiringRebookIsNotNull()
				&& voReferral.getAppointmentsRequiringRebook().size() > 0) {
			TreeNode rebookNode = form.treInvAppts().getNodes()
					.add(REBOOK_APPT_NODE, "Appointments Requiring a Rebook");

			rebookNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			rebookNode.setCollapsedImage(form.getImages().Core.OpenFolder);

			for (BookingAppointmentLiteVo voAppt : voReferral
					.getAppointmentsRequiringRebook()) {
				TreeNode node = rebookNode.getNodes().add(voAppt,
						voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
			}

			rebookNode.setExpanded(true);
		}
		if (voReferral.getOrdersRequiringApptIsNotNull()
				&& voReferral.getOrdersRequiringAppt().size() > 0) {
			TreeNode invNode = form.treInvAppts().getNodes()
					.add(INV_NODE, "Investigations requiring an Appointment");

			invNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			invNode.setCollapsedImage(form.getImages().Core.OpenFolder);

			for (OrderInvestigationBookingVo voOrderInv : voReferral
					.getOrdersRequiringAppt()) {
				TreeNode node = invNode.getNodes().add(voOrderInv,
						voOrderInv.toString());
				node.setCollapsedImage(form.getImages().OCRR.Investigation);
				node.setExpandedImage(form.getImages().OCRR.Investigation);
			}

			invNode.setExpanded(true);
		}
		if (voReferral.getOtherAppointmentsIsNotNull()
				&& voReferral.getOtherAppointments().size() > 0) {
			TreeNode theatreNode = form.treInvAppts().getNodes()
					.add(OTHER_NODE, "Theatre Appointments");

			theatreNode.setCollapsedImage(form.getImages().Core.ClosedFolder);
			theatreNode.setCollapsedImage(form.getImages().Core.OpenFolder);

			for (BookingAppointmentLiteVo voAppt : voReferral
					.getOtherAppointments()) {
				TreeNode node = theatreNode.getNodes().add(voAppt,
						voAppt.toString());
				node.setCollapsedImage(form.getImages().Core.Date);
				node.setExpandedImage(form.getImages().Core.Date);
				node.setEnabled(false);
			}

			theatreNode.setExpanded(true);
		}
	}

	private void clearSearchCriteria() {
		form.cmbActivity().setValue(null);
		form.cmbService().setValue(null);
		form.cmbClinicType().setValue(null);
		form.qmbListOwner().clear(); // WDEV-18411
		form.cmbLocation().setValue(null);
	}

	private void initialize() {
		if (engine.isDialog()) {
			form.setMode(FormMode.VIEW);
		}

		form.getLocalContext().setisLinkingOrderInv(false);
		form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem()
				.setVisible(false);
		form.bookingCalendarAppts().setEnabled(false);
		form.bookingCalendarAppts().setChecksReadOnly(true);

		form.bookingCalendarAppts().setCurrentMonth(new Date());
		loadServices();
		loadActivities();
		loadLocations();
		form.getLocalContext().setApptStatus(null);
		// wdev-12090
		form.getLocalContext().setSessionSlotDNA(null);
		// ----------

		form.getLocalContext()
				.setReferralERODForRebooking(
						domain.getReferralERODByAppointment(form
								.getGlobalContext().Scheduling
								.getBookingAppointment()));
	}

	private void loadLocations() {
		form.cmbLocation().clear();

		LocationLiteVoCollection voCollLoc = null;

		if (ConfigFlag.UI.DISABLE_MULTI_SITE_CATS_FUNCTIONALITY.getValue()) {
			// single site
			voCollLoc = domain.listLocationLite();
		} else {
			// multi site
			voCollLoc = domain.listLocationLiteForReferralContract(form
					.getGlobalContext().RefMan.getCatsReferral());
		}

		if (voCollLoc != null) {
			for (LocationLiteVo item : voCollLoc)
				form.cmbLocation().newRow(item, item.getName());
		}
	}

	private void loadActivities() {
		form.cmbActivity().clear();

		ActivitySchedVoCollection voCollActivities = domain
				.listActivitiesForType(ActivityType.APPOINTMENTTYPES,
						form.getGlobalContext().RefMan.getCatsReferral());
		if (voCollActivities != null) {
			for (int i = 0; i < voCollActivities.size(); i++) {
				if (voCollActivities.get(i).getNameIsNotNull())
					form.cmbActivity().newRow(voCollActivities.get(i),
							voCollActivities.get(i).getName());
			}
		}
	}

	protected void onImbClearClick()
			throws ims.framework.exceptions.PresentationLogicException {
		clearSearchCriteria();
		clearScreen(true);
		form.bookingCalendarAppts().setCurrentMonth(new Date());
		form.getLocalContext().setCurrentDate(null);
		clearBookingCalendar();
	}

	private void clearScreen(boolean leaveInstantiatedData) {
		form.grdSessionSlots().getRows().clear();

		if (!leaveInstantiatedData) {
			form.grdAppt().getRows().clear();
			form.txtBookingComments().setValue(null);
			form.getLocalContext().setSelectedAppointments(null);
		}

		form.getContextMenus().RefMan.getBookAppointmentAddSlotADD_SLOTItem()
				.setVisible(false);
	}

	private void clearGlobalContexts()
	{
		form.getGlobalContext().Scheduling.setBookingAppointment(null);
		form.getGlobalContext().RefMan.setReferralEROD(null); //WDEV-18411
		form.getGlobalContext().Scheduling.setBookingService(null);
		form.getGlobalContext().Scheduling.setBookingActivity(null);
		form.getLocalContext().setIsRebookApptSelected(null);
		//form.getLocalContext().setSelectedErodDates(null);
		form.getLocalContext().setSelectedDates(null); //WDEV-18557
		form.getLocalContext().setSelectedAppointments(null);
		form.getLocalContext().setSelectedSessions(null);
		// wdev-12090
		form.getLocalContext().setSessionSlotDNA(null);
		// ------------
	}

	protected void onImbSearchClick()
			throws ims.framework.exceptions.PresentationLogicException {
		if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
			form.getLocalContext().setIsRebookApptSelected(false);
		if (form.cmbActivity().getValue() != null)
			form.getLocalContext().setActivity(
					form.cmbActivity().getValue().toActivityRefVo());
		else
			form.getLocalContext().setActivity(null);

		String[] errors = validateSearchCriteria();
		if (errors == null)
			loadSessions();
		else
			engine.showErrors(errors);
	}

	private String[] validateSearchCriteria() {
		List<String> errors = new ArrayList<String>();
		if (form.cmbActivity().getValue() == null)
			errors.add("Activity is mandatory");

		return errors.size() > 0 ? errors.toArray(new String[0]) : null;
	}

	private void loadSessions() {
		clearBookingCalendar();
		form.getLocalContext().setSelectedDates(null); //WDEV-18557
		form.bookingCalendarAppts().clearNoSessionDates();
		listSessions();
		clearScreen(true);
		initialiseCalendar();
		form.bookingCalendarAppts().setEnabled(true);
	}

	private void listSessions() {
		// WDEV-10010
		LocationRefVoCollection locationList = null;
		if (!ConfigFlag.UI.DISABLE_MULTI_SITE_CATS_FUNCTIONALITY.getValue()) {
			if (form.cmbLocation().getValues() != null
					&& form.cmbLocation().getValues().size() > 0) {
				locationList = new LocationRefVoCollection();
				for (int i = 0; i < form.cmbLocation().getValues().size(); i++) {
					locationList.add((LocationRefVo) form.cmbLocation()
							.getValues().get(i));
				}
			}
		}

		Date currentDate = domain.getCurrentMonth(
				form.cmbActivity().getValue(), form.cmbService().getValue(),
				form.cmbLocation().getValue(), form.cmbClinicType().getValue(),
				locationList);
		if (currentDate != null) {
			if (!form.getLocalContext().getCurrentDateIsNotNull()) {
				form.bookingCalendarAppts().setCurrentMonth(currentDate);
				form.getLocalContext().setCurrentDate(currentDate);
			}
		}

		Date dateStart = new Date(form.bookingCalendarAppts().getCurrentMonth()
				.getYear(), form.bookingCalendarAppts().getCurrentMonth()
				.getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendarAppts().getCurrentMonth()
				.getYear(), form.bookingCalendarAppts().getCurrentMonth()
				.getMonth(), form.bookingCalendarAppts().getCurrentMonth()
				.getNumberOfDaysInTheMonth());

		if (!ConfigFlag.UI.DISABLE_MULTI_SITE_CATS_FUNCTIONALITY.getValue()
				&& (locationList == null || locationList.size() == 0)) {
			form.getLocalContext().setSessions(new SessionShortVoCollection());
			return;
		}

		SessionShortVoCollection voCollSessionShort = domain.listSession(
				dateStart, dateEnd, form.cmbActivity().getValue(), form
						.cmbService().getValue(),
				form.cmbLocation().getValue(), form.qmbListOwner().getValue(),
				form.cmbClinicType().getValue(), // WDEV-18411
				locationList);
		form.getLocalContext().setSessions(voCollSessionShort);
	}

	private void initialiseCalendar() {
		SessionShortVoCollection sessions = form.getLocalContext()
				.getSessions();

		if (sessions == null)
			return;

		// Go through the sessions for this month and where there are no
		// sessions for a given calendar date
		// call addNoSessionDates which effectively disables that date on the
		// calendar
		Date dateStart = new Date(form.bookingCalendarAppts().getCurrentMonth()
				.getYear(), form.bookingCalendarAppts().getCurrentMonth()
				.getMonth(), 1);
		Date dateEnd = new Date(form.bookingCalendarAppts().getCurrentMonth()
				.getYear(), form.bookingCalendarAppts().getCurrentMonth()
				.getMonth(), form.bookingCalendarAppts().getCurrentMonth()
				.getNumberOfDaysInTheMonth());

		Date dateSession = dateStart;
		while (dateSession.isLessOrEqualThan(dateEnd)) {
			boolean bFound = false;

			for (SessionShortVo session : sessions) {
				if (session.getSessionDate().equals(dateSession)) {
					bFound = true;
					form.bookingCalendarAppts().addPercentage(dateSession,
							calculatePercentage(dateSession));
				}
			}

			if (!bFound)
				form.bookingCalendarAppts().addNoSessionDates(
						new Date(dateSession));

			dateSession.addDay(1);
		}

		addColoursForKPIDate();
	}

	/**
	 * WDEV-5680
	 */
	private void addColoursForKPIDate() {
		Date[] arrDates = form.getLocalContext().getKPIDays();
		if (arrDates == null || arrDates.length == 0)// WDEV-11713
			return;
		// WDEV-11761 Start
		int noOfColors = (int) Math.ceil((float) arrDates.length / 5);
		float colorGap = 510;
		float realValue = 0;
		if (noOfColors > 2)
			colorGap = colorGap / (noOfColors - 1);
		if (colorGap < 1)
			colorGap = 1;
		int[] startColor = new int[] { 0, 255, 0 };
		int[] middleColor = new int[] { 255, 255, 0 };
		int[] endColor = new int[] { 255, 0, 0 };

		int[] currColor = startColor;
		int weekForColor = 0;
		for (int i = 0; i < arrDates.length; i++) {
			int colorNo = (int) Math.floor(i / 5);
			if (colorNo == 0) {
				// First color
				form.bookingCalendarAppts().setBackColor(
						arrDates[i],
						Color.fromRGB(startColor[0], startColor[1],
								startColor[2]));
				continue;
			}
			if (colorNo + 1 >= noOfColors) {
				// Red - Last color
				form.bookingCalendarAppts().setBackColor(arrDates[i],
						Color.fromRGB(endColor[0], endColor[1], endColor[2]));
				continue;
			}
			// should show yellow color?
			if ((noOfColors % 2 == 1) && (colorNo == noOfColors / 2)) {
				form.bookingCalendarAppts().setBackColor(
						arrDates[i],
						Color.fromRGB(middleColor[0], middleColor[1],
								middleColor[2]));
				currColor = middleColor;
				realValue = 255;
				continue;
			}
			// Calculate color
			if (weekForColor == colorNo) {
				form.bookingCalendarAppts()
						.setBackColor(
								arrDates[i],
								Color.fromRGB(currColor[0], currColor[1],
										currColor[2]));
			} else {
				// Calculate next color
				float rest = colorGap;
				if (currColor[0] < 255) {
					rest = realValue + colorGap - 255;
					realValue += colorGap;
					currColor[0] = (int) realValue;
					if (rest < 0)
						rest = 0;
					if (currColor[0] > 255) {
						realValue = 255;
						currColor[0] = 255;
					}

				}
				if (currColor[0] == 255) {

					realValue = realValue - rest;
					currColor[1] = (int) realValue;

					if (currColor[1] < 0)
						currColor[1] = 0;

				}
				weekForColor = colorNo;
				form.bookingCalendarAppts()
						.setBackColor(
								arrDates[i],
								Color.fromRGB(currColor[0], currColor[1],
										currColor[2]));
			}
		}
		// WDEV-11761 End

		/*
		 * //WDEV-11761 //WDEV-11713 Start //Get no of weeks int noOfWeeks =
		 * (int) Math.ceil((float)arrDates.length/5);
		 * 
		 * int colorInterval = 18; if (noOfWeeks > 1) colorInterval = (int)
		 * Math.floor(18/(noOfWeeks-1));
		 * 
		 * if (colorInterval <= 0) colorInterval = 1;
		 * 
		 * 
		 * for (int i = 0 ; i < arrDates.length ; i++) { int week = (int)
		 * Math.floor(i/5);
		 * 
		 * int colorIndex = week*colorInterval; if (colorIndex > 17 || week ==
		 * noOfWeeks-1) { colorIndex = 17; }
		 * 
		 * form.bookingCalendarAppts().setBackColor(arrDates[i],
		 * Color.fromRGB(colors
		 * [colorIndex][0],colors[colorIndex][1],colors[colorIndex][2])); }
		 */
		// WDEV-11713 Stop
		/*
		 * WDEV-11713 if (arrDates.length > 0) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[0],
		 * Color.fromRGB(0, 128, 0)); if (arrDates.length > 1) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[1],
		 * Color.fromRGB(0, 125, 0)); if (arrDates.length > 2) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[2],
		 * Color.fromRGB(255, 255, 0)); if (arrDates.length > 3) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[3],
		 * Color.fromRGB(206, 206, 0)); if (arrDates.length > 4) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[4],
		 * Color.fromRGB(255, 181, 145)); if (arrDates.length > 5) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[5],
		 * Color.fromRGB(255, 128, 66)); if (arrDates.length > 6) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[6],
		 * Color.fromRGB(255, 99, 23)); if (arrDates.length > 7) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[7],
		 * Color.fromRGB(255, 147, 147)); if (arrDates.length > 8) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[8],
		 * Color.fromRGB(255, 53, 53)); if (arrDates.length > 9) {
		 * form.bookingCalendarAppts().setBackColor(arrDates[9],
		 * Color.fromRGB(217, 0, 0)); } } } } } } } } } }
		 */
	}

	private int calculatePercentage(Date dateSession) {
		SessionShortVoCollection selectedSessions = new SessionShortVoCollection();

		// go through Sessions Collection get matching ones for this day
		for (SessionShortVo session : form.getLocalContext().getSessions()) {
			if (session.getSessionDate().equals(dateSession))
				selectedSessions.add(session);
		}

		// When calculating percentage use the Calendar Slots (unmapped
		// collection) from VO - as this contains only the slots
		// the activity that was queried by, not the indiscriminately total /
		// remaining slots variables from BO
		int totalSlotsForActivity = 0;
		int remainingSlotsForActivity = 0;

		for (SessionShortVo session : selectedSessions) {
			if (session.getCalendarSlots() != null) {
				totalSlotsForActivity += session.getCalendarSlots().size();

				for (SessionSlotWithStatusOnlyVo slot : session
						.getCalendarSlots()) {
					if (Status_Reason.SLOTOPENED.equals(slot.getStatus())) {
						remainingSlotsForActivity++;
					}
				}
			}
		}

		int bookedSlotsForActivity = totalSlotsForActivity
				- remainingSlotsForActivity;

		return (int) (bookedSlotsForActivity * 100.0f / totalSlotsForActivity);
	}

	protected void onCmbServiceValueChanged()
			throws ims.framework.exceptions.PresentationLogicException {
		form.cmbClinicType().clear();

		if (form.cmbService().getValue() == null)
			return;

		ServiceFunctionLiteVoCollection voServiceFunctions = domain
				.listServiceFunctionsLite(form.cmbService().getValue());
		if (voServiceFunctions != null) {
			for (int i = 0; i < voServiceFunctions.size(); i++) {
				ServiceFunctionLiteVo voServiceFunctionLite = voServiceFunctions
						.get(i);
				form.cmbClinicType().newRow(voServiceFunctionLite,
						voServiceFunctionLite.getFunction().getText());
			}
		}
	}

	protected void onBtnBookClick()
			throws ims.framework.exceptions.PresentationLogicException {
		bookAppointment();
	}

	private void bookAppointment() {
		Sch_BookingVo voBooking = form.getLocalContext().getSch_Booking();
		voBooking.setPatient(form.getLocalContext().getPatient());
		voBooking.setBookingComments(form.txtBookingComments().getValue());

		// WDEV-5829 - set the new slot for the rebookedappt in the appointments
		// collection
		if (form.getLocalContext().getIsRebookApptSelectedIsNotNull()
				&& form.getLocalContext().getIsRebookApptSelected()) {
			for (Booking_AppointmentVo item : voBooking.getAppointments()) {
				if (item.getID_Booking_Appointment().equals(
						form.getLocalContext().getSelectedAppointments().get(0)
								.getID_Booking_Appointment())) {
					voBooking.getAppointments().remove(item);
					voBooking.getAppointments().add(
							form.getLocalContext().getSelectedAppointments()
									.get(0));
					break;
				}
			}
		} else
			voBooking.setAppointments(form.getLocalContext()
					.getSelectedAppointments());

		if (voBooking.getAppointmentsIsNotNull()) {
			for (int i = 0; i < voBooking.getAppointments().size(); i++) {
				// if we are rebooking only set the status to BOOKED for the
				// selected rebooked appt
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull()
						&& form.getLocalContext().getIsRebookApptSelected()) {
					if (form.getGlobalContext().Scheduling
							.getBookingAppointmentIsNotNull()) {
						if (voBooking
								.getAppointments()
								.get(i)
								.equals(form.getGlobalContext().Scheduling
										.getBookingAppointment()))
							voBooking.getAppointments().get(i)
									.setApptStatus(Status_Reason.BOOKED);
					}
				} else
					voBooking.getAppointments().get(i)
							.setApptStatus(Status_Reason.BOOKED);

				if (voBooking.getAppointments().get(i).getIsCABBooking() == null)
					voBooking.getAppointments().get(i).setIsCABBooking(false);

				voBooking
						.getAppointments()
						.get(i)
						.setPatient(
								form.getGlobalContext().Core.getPatientShort());

				// associate the inv with the appt (OrdInvAppt) - this field is
				// unmapped and the domain needs to handle the association with
				// the catsreferral
				if (form.treInvAppts().getValue() != null) {
					if (form.treInvAppts().getValue() instanceof OrderInvestigationBookingVo)
						voBooking
								.getAppointments()
								.get(i)
								.setOrderInvestigation(
										(OrderInvestigationBookingVo) form
												.treInvAppts().getValue());
				}

				// if we are rebooking now set the requires rebooking to false
				// for the appt
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull()
						&& form.getLocalContext().getIsRebookApptSelected()) {
					if (form.getGlobalContext().Scheduling
							.getBookingAppointmentIsNotNull()) {
						if (voBooking
								.getAppointments()
								.get(i)
								.equals(form.getGlobalContext().Scheduling
										.getBookingAppointment()))
							voBooking.getAppointments().get(i)
									.setRequiresRebook(false);

						// WDEV-8376
						ArrayList<Integer> ids = new ArrayList<Integer>();
						ids.add(form.getGlobalContext().Scheduling
								.getBookingAppointment()
								.getID_Booking_Appointment());
						form.getGlobalContext().Scheduling
								.setAppointmentIds(ids);
					}
				}
			}
		}
		//WDEV-18411
		updateAppointmentswithAdditionalDetails(voBooking.getAppointments());	
			
		/*
		 * WDEV-18411 // WDEV-5941 String[] arrErodErrors = null; for (int i =
		 * 0; i < form.grdAppt().getRows().size(); i++) { grdApptRow row =
		 * form.grdAppt().getRows().get(i); // if(row.getcolErod()) // {
		 * Booking_AppointmentVo appt = row.getValue(); /** if (appt != null
		 * && appt.getSessionSlotIsNotNull()) { arrErodErrors =
		 * updateAppointmentsWithErodDate( voBooking.getAppointments(),
		 * row.getcolErodDate(), row.getcolErodDate2(), appt.getSessionSlot(),
		 * row.getcolErod()); if (arrErodErrors != null) break; } }
		 * 
		 * if (form.get) { ReferralERODForBookAppointmentVo erod = null;
		 * 
		 * if (form.getLocalContext().getReferralERODForRebooking() != null) {
		 * erod = new ReferralERODForBookAppointmentVo(form
		 * .getLocalContext().getReferralERODForRebooking()
		 * .getID_ReferralEROD(), form.getLocalContext()
		 * .getReferralERODForRebooking().getBoVersion()); }
		 * 
		 * if (erod == null) erod = new ReferralERODForBookAppointmentVo();
		 * 
		 * erod.setERODDate1(row.getcolErodDate());
		 * erod.setERODDate2(row.getcolErodDate2());
		 * 
		 * try { erod.setPatAvailFromDate(new Date(row.getcolApptDate())); }
		 * catch (java.text.ParseException e) {
		 * 
		 * }
		 * 
		 * erod.setERODType(ERODType.OUTPATIENT);
		 * erod.setPathWayClock(form.getLocalContext().getCurrentClock());
		 * erod.setAppointment(row.getValue()); erod.setIsActive(true);
		 * erod.setReasonableOffer(reasonableOffer);
		 * 
		 * form.getLocalContext().getReferralERODForSaving().add(erod); } }
		 * 
		 * if (arrErodErrors != null) { engine.showErrors(arrErodErrors);
		 * return; }
		 * 
		 * if (form.getLocalContext().getReasonableDateMessageBoxId() == null) {
		 * String warnings = checkReasonableDate(form.getLocalContext()
		 * .getReferralERODForSaving()); if (warnings != null &&
		 * warnings.length() > 0) {
		 * form.getLocalContext().setReasonableDateMessageBoxId(
		 * engine.showMessage(warnings, "", MessageButtons.YESNO,
		 * MessageIcon.QUESTION)); return; } }
		 */

		form.getLocalContext().setSch_Booking(voBooking);
		if (ConfigFlag.UI.DISPLAY_WARNING_MESSAGE_IF_BOOKING_IN_PAST.getValue()) {
			if (isApptInthePast(voBooking)) {
				form.getLocalContext()
						.setMessageBoxId(
								engine.showMessage(
										"The selected date of the appointment is in the past. Do you wish to continue to book the appointment",
										"Booking Historical Appointment?",
										MessageButtons.YESNO));
				return;
			}
		}

		saveBooking(voBooking, 0);
	}
	/* WDEV-18411
	private String checkReasonableDate(
			ReferralERODForBookAppointmentVoCollection referralERODCollection) {
		if (referralERODCollection == null
				|| referralERODCollection.size() == 0)
			return null;

		String warnings = "";
		int numberOfDates = 0;

		for (int i = 0; i < referralERODCollection.size(); i++) {
			if (referralERODCollection.get(i) == null)
				continue;

			if (referralERODCollection.get(i).getERODDate1()
					.isLessThan(new Date().addDay(REASONABLE_DAYS_LIMIT))) {
				warnings += "'Earliest Date Offered' is less than "
						+ REASONABLE_DAYS_LIMIT + " days";
				numberOfDates++;
			}

			if (referralERODCollection.get(i).getERODDate2() != null
					&& referralERODCollection
							.get(i)
							.getERODDate2()
							.isLessThan(
									new Date().addDay(REASONABLE_DAYS_LIMIT))) {
				warnings += (warnings.length() > 0 ? "\n" : "")
						+ "'Second Date Offered' is less than "
						+ REASONABLE_DAYS_LIMIT + " days";
				numberOfDates++;
			}
		}

		if (warnings.length() > 0) {
			warnings += "\nDid the patient confirm "
					+ (numberOfDates >= 2 ? "these dates" : "this date") + "?";
		}

		return warnings.length() > 0 ? warnings : null;
	}*/
	//WDEV-18411 //WDEV-18557
	private void updateAppointmentswithAdditionalDetails(Booking_AppointmentVoCollection appts)
	{
		
		if (appts == null || (appts != null && appts.size() == 0))
			return;
		
		for (int i =0; i < form.grdAppt().getRows().size(); i++)
		{
			grdApptRow row = form.grdAppt().getRows().get(i);
			if (row != null && row.getValue() != null)
			{	
				Booking_AppointmentVoCollection selectedApptsForBooking = form.getLocalContext().getSelectedAppointments();  

				for (int j=0;j<selectedApptsForBooking.size(); j++)
				{	
					Booking_AppointmentVo appt = selectedApptsForBooking.get(j);

					if (appt != null && appt.getSessionSlotIsNotNull() && appt.equals(row.getValue()))
					{
						appt.setConsMediaType(row.getcolConsMedia());
						appt.setCategory(row.getcolPatCategory());
					}
				}
			}
		}
	}

	private boolean isSafetyQuestionnaireCompleted(Sch_BookingVo voBooking) {
		// Check booking parameter
		if (voBooking == null || voBooking.getAppointments() == null
				|| voBooking.getAppointments().size() == 0)
			throw new CodingRuntimeException(
					"Can not check safety questionnaire for null record.");

		// Check if booking has OrderInvestigation associated
		if (voBooking.getAppointments().get(0).getOrderInvestigationIsNotNull()) {
			OrderInvestigationBookingVo investigation = voBooking
					.getAppointments().get(0).getOrderInvestigation();

			// If the investigation hasn't a provider system then terminate
			// function and allow to proceed with booking
			if (investigation == null
					|| investigation.getInvestigation() == null
					|| investigation.getInvestigation().getProviderService() == null
					|| investigation.getInvestigation().getProviderService()
							.getProviderSystem() == null)
				return true;

			ProviderSystemLiteVo providerSystem = investigation
					.getInvestigation().getProviderService()
					.getProviderSystem();

			// If the investigation provider system has 'Send Questionnaire'
			// marked as true - then check if the CATS Referral has Safety
			// Questionnaire completed
			if (Boolean.TRUE.equals(providerSystem.getSendQuestionnaire())) {
				LocationServiceLiteVo locationService = investigation
						.getInvestigation().getProviderService()
						.getLocationService();

				// Check if a service can be reached
				// WDEV-14580 - Services no longer require to have a speciality
				if (locationService == null
						|| locationService.getService() == null)
					return false;

				// Check if the referral has no documents
				if (Boolean.TRUE.equals(domain.hasSafetyQuestionnarie(
						form.getGlobalContext().RefMan.getCatsReferral(),
						locationService.getService())))
					return true;

				// If the safety questionnaire is required but not found - stop
				// the booking process
				return false;
			}
		}

		// Allow booking - can reach this case when safety questionnaire is not
		// required
		return true;
	}

	private boolean isApptInthePast(Sch_BookingVo voBooking) {
		if (voBooking == null)
			throw new CodingRuntimeException(
					"voBooking cannot be null in method isApptInthePast");

		if (voBooking.getAppointmentsIsNotNull()) {
			for (Booking_AppointmentVo voAppt : voBooking.getAppointments()) {
				if (voAppt.getID_Booking_Appointment() == null
						|| (voAppt.getRequiresRebookIsNotNull() && voAppt
								.equals(form.getGlobalContext().Scheduling
										.getBookingAppointment())))// WDEV-12259
				{

					if (voAppt.getAppointmentDateIsNotNull()
							&& voAppt.getAppointmentDate().isLessThan(
									new Date()))
						return true;
				}
			}
		}

		return false;
	}

	/**
	 * @param voBooking
	 */
	private void saveBooking(Sch_BookingVo voBooking, int staleCount)
	{
		try
		{
			// WDEV-13999 - CARE UK only functionality
			// Check if the appointment has OrderInvestigation
			// WDEV-14580 - Moved 'Safety Questionnaire' check at save time
			if (ConfigFlag.UI.ORDER_ENTRY_UI_TYPE.getValue().equals("CARE_UK")) {
				if (isSafetyQuestionnaireCompleted(voBooking) == false) {
					engine.showMessage("It is not possible to book an appointment for this investigation as no safety questionnaire is complete.");
					return;
				}
			}

			voBooking.setSessionSlotDNA(form.getLocalContext()
					.getSessionSlotDNA()); // wdev-12090
			
			//WDEV-18411
			boolean isERODUpdatedOnBooking = form.getGlobalContext().RefMan.getReferralERODIsNotNull() && ERODType.OUTPATIENT.equals(form.getGlobalContext().RefMan.getReferralEROD().getERODType());

			// wdev-12682
			voBooking = domain
					.saveBooking(voBooking, form.getGlobalContext().RefMan
							.getCatsReferral(),
							form.getLocalContext()
									.getIsRebookApptSelectedIsNotNull()
									&& form.getLocalContext()
											.getIsRebookApptSelected(), form
									.getLocalContext()
									.getReferralERODForSaving(),isERODUpdatedOnBooking);
			domain.updateCatsReferralAdditionalInvStatus(form
					.getGlobalContext().RefMan.getCatsReferral());
			// wdev-12826
			if (form.getGlobalContext().RefMan.getCatsReferral() != null)
				form.getGlobalContext().RefMan.setCatsReferral(domain
						.getCatsReferral(form.getGlobalContext().RefMan
								.getCatsReferral()));
			// -----------
			form.getLocalContext().setSelectedAppointments(
					voBooking.getAppointments());
			if (ConfigFlag.GEN.CREATE_ICP_ON_ACCEPTANCE_OF_REFERRAL.getValue())
				savePatientICP();
		}
		catch (StaleObjectException e)
		{
			staleCount++;
			
			// WDEV-9008 catch attempting to book appointment into slot thats
			// already has an appt when rebooking
			// only possible fix is to kick user out of screen
			if (form.getLocalContext().getIsRebookApptSelectedIsNotNull()) {
				if (engine.isDialog()) {
					engine.showMessage("This appointment may have already been rebooked, please review appointments");
					engine.close(DialogResult.OK);
					return;
				}
			}

			// WDEV-19050
			if (staleCount==1 && e.getStaleObject().getClass().isAssignableFrom(Sch_Session.class))
			{
				System.out.println("StaleObjectException on session - retrying");
				saveBooking(voBooking, staleCount);
				return;
			}

			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			clearScreen(false);
			
			open();
			form.setMode(FormMode.VIEW);
			return;
		} catch (DomainInterfaceException e) {

			engine.showMessage(e.getMessage());
			return;
		}

		clearScreen(false);
		clearGlobalContexts();
		open();
		form.setMode(FormMode.VIEW);
		// WDEV-8376
		if (form.getGlobalContext().Scheduling.getAppointmentIds() == null)
			form.getGlobalContext().Scheduling.setAppointmentIds(voBooking
					.getApptIds());

		engine.open(form.getForms().Scheduling.PrintAppointment);
	}

	private void savePatientICP() {
		PatientICPFullVo voICP = domain
				.getPatientICP(form.getGlobalContext().Core
						.getCurrentCareContext());

		if (voICP != null) {
			Booking_AppointmentRefVoCollection voApptsColl = voICP
					.getAppointments();
			if (voApptsColl == null)
				voApptsColl = new Booking_AppointmentRefVoCollection();

			Booking_AppointmentVoCollection voCollBookAppointments = form
					.getLocalContext().getSelectedAppointments();
			for (int i = 0; i < voCollBookAppointments.size(); i++) {
				voApptsColl.add(voCollBookAppointments.get(i));
			}

			voICP.setAppointments(voApptsColl);

			String[] strErr = voICP.validate();
			if (strErr != null) {
				engine.showErrors(strErr);
				return;
			}

			try {
				voICP = domain.savePatientICP(voICP);
			} catch (DomainInterfaceException e) {
				engine.showMessage(e.getMessage());
			} catch (StaleObjectException e) {
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE
						.getValue());
			}
		}
	}

	/*
	 * WDEV-18411 private String[] updateAppointmentsWithErodDate(
	 * Booking_AppointmentVoCollection appointments, Date erodDate, Date
	 * erodDate2, SessionSlotVo sessionSlot, Boolean colEROD) {
	 * ArrayList<String> errors = new ArrayList<String>();
	 * 
	 * if (appointments == null || sessionSlot == null) return null;
	 * 
	 * if (erodDate == null && colEROD == true) {
	 * errors.add("'Earliest Date Offered' is mandatory when EROD is checked");
	 * } else { for (Booking_AppointmentVo voAppt : appointments) { if
	 * (voAppt.getSessionSlotIsNotNull() &&
	 * voAppt.getSessionSlot().equals(sessionSlot)) if (erodDate == null ||
	 * erodDate.isGreaterOrEqualThan(new Date())) {
	 * voAppt.setEarliestOfferedDate(erodDate); //
	 * ------------------------wdev-9744 updateHistoryStatus(voAppt); //
	 * --------------------------- } else {
	 * errors.add("'Earliest Date Offered' must be greater than or equal to Today"
	 * ); break; } } }
	 * 
	 * if (erodDate2 == null && colEROD == true) {
	 * errors.add("'Second Date Offered' is mandatory when EROD is checked"); }
	 * 
	 * if (Boolean.TRUE.equals(colEROD) && erodDate != null && erodDate2 != null
	 * && erodDate.isGreaterOrEqualThan(erodDate2)) { errors.add(
	 * "'Second Date Offered' must be greater than 'Earliest Date Offered'"); }
	 * 
	 * return (String[]) (errors.size() > 0 ? errors.toArray(new String[0]) :
	 * null); }
	 */
	
	private void updateHistoryStatus(Booking_AppointmentVo appoitment) {
		if (appoitment == null)
			return;

		Appointment_StatusVoCollection tempCol = form.getLocalContext()
				.getApptStatus();
		for (Appointment_StatusVo statusVo : appoitment.getApptStatusHistory()) {
			for (Appointment_StatusVo statusVo1 : tempCol) {
				if (statusVo.equals(statusVo1))
					statusVo.setEarliestOfferedDate(appoitment
							.getEarliestOfferedDate());
			}
		}
	}

	// ---------------------
	protected void onGrdSessionSlotsGridCheckBoxClicked(int column,	GenForm.grdSessionSlotsRow row, boolean isChecked) throws ims.framework.exceptions.PresentationLogicException
	{
		if (isChecked && row.getValue() instanceof SessionSlotListVo && checkIfThereIsFirstApptPerClock((SessionSlotListVo) row.getValue()))
		{
			engine.showMessage("There is a first appointment activity already recorded for this pathway clock", "", MessageButtons.OK, MessageIcon.INFORMATION);
			row.setColSelect(false);
			return;
		}

		if (isChecked)
		{
			if (row.getValue() instanceof SessionSlotListVo)
			{
				SessionSlotListVo slot = (SessionSlotListVo) row.getValue();
				DateTime slotDateTime = new DateTime(form.bookingCalendarAppts().getSelectedDay(), slot.getStartTm());
				if (form.getLocalContext().getTriageDateTimeIsNotNull())
				{
					if (slotDateTime.isLessThan(form.getLocalContext().getTriageDateTime()))
					{
						engine.showMessage("Please note that the Appointment selected is before the date and time of Triage for this Referral");
					}
				}
			}
			
		}
		//WDEV-18557
		for (int i = 0; i < form.grdAppt().getRows().size(); i++)
		{ 
			grdApptRow aRow = form.grdAppt().getRows().get(i); 

			if (aRow.getValue() instanceof Booking_AppointmentVo && aRow.getValue().getSessionSlot() != null)
			{	
				storeConsMediaAndCategorySelection(aRow.getValue().getSessionSlot(), new ConsMediaAndCategory(aRow.getcolConsMedia(), aRow.getcolPatCategory()));
			}
		}
		/*
		 * WDEV-5941 removed as part of WDEV-18411 for (int i = 0; i <
		 * form.grdAppt().getRows().size(); i++) { grdApptRow aRow =
		 * form.grdAppt().getRows().get(i); if (aRow.getcolErod())
		 * storeErodSelection(aRow.getValue().getSessionSlot(), new
		 * Erod(aRow.getcolErodDate(), aRow.getcolErodDate2(),
		 * aRow.getcolErod())); }
		 */

		Booking_AppointmentVoCollection voCollBookAppointments = form.getLocalContext().getSelectedAppointments();
		if (voCollBookAppointments == null)
			voCollBookAppointments = new Booking_AppointmentVoCollection();

		if (row.getColSelect() == true)
		{
			boolean bInListAlready = false;

			// /////////////////////////////////////////
			// rebook///////////////////////////////////
			if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
			{
				// rebook appt already selected
				if (form.getLocalContext().getIsRebookApptSelected().booleanValue())
				{
					clearAllOtherSelections(row);
				}
				else
				{
					form.getLocalContext().setIsRebookApptSelected(true);
					Booking_AppointmentVo voAppt = (Booking_AppointmentVo) form.getGlobalContext().Scheduling.getBookingAppointment().clone();
					if (voAppt == null)
						throw new CodingRuntimeException("Rebook appointment not set in Global Context");

					// wdev-12090
					if (voAppt.getSessionSlotIsNotNull()&& voAppt.getSessionSlot().getStatusIsNotNull()	&& voAppt.getSessionSlot().getStatus().equals(Status_Reason.DNA))
						form.getLocalContext().setSessionSlotDNA(voAppt.getSessionSlot());
					else
						form.getLocalContext().setSessionSlotDNA(null);
					// ---------
					
					SessionSlotVo updatedSlot = domain.getSessionSlot((SessionSlotListVo) row.getValue());
					
					if (updatedSlot.getVersion_Session_Slot() != ((SessionSlotListVo) row.getValue()).getVersion_Session_Slot())
					{
						engine.showMessage("An appointment has already been booked for this slot. Screen will be refreshed.");
						bookingCalendarDateSelected(voAppt.getAppointmentDate());
						return;
					}
					
					voAppt.setSessionSlot(updatedSlot);
					voCollBookAppointments.add(createAppointment(voAppt, (SessionSlotListVo) row.getValue()));
					loadAppointmentsGrid(voCollBookAppointments);
					return;
				}
			}
			// end rebook/////////////////////////////////
			// ///////////////////////////////////////////

			if (row.getValue() instanceof SessionSlotListVo)
			{
				// when rebooking only one appt can be booked this replaces the
				// one in the list with the one selected in the slots grid
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
				{
					if (form.getLocalContext().getIsRebookApptSelected().booleanValue())
					{
						if (voCollBookAppointments != null	&& voCollBookAppointments.size() == 1)
						{
							voCollBookAppointments.clear();
							voCollBookAppointments.add(createAppointment((Booking_AppointmentVo) form.getGlobalContext().Scheduling.getBookingAppointment().clone(),(SessionSlotListVo) row.getValue()));
							loadAppointmentsGrid(voCollBookAppointments);
							return;
						}
					}
				}

				// only allow linking to one orderinv
				if (form.getLocalContext().getisLinkingOrderInvIsNotNull()	&& form.getLocalContext().getisLinkingOrderInv())
				{
					clearAllOtherSelections(row);
					if (voCollBookAppointments != null	&& voCollBookAppointments.size() == 1)
					{
						voCollBookAppointments.clear();
						voCollBookAppointments.add(createAppointment(form.getGlobalContext().Scheduling.getBookingAppointment(), (SessionSlotListVo) row.getValue()));
						loadAppointmentsGrid(voCollBookAppointments);
						return;
					}
				}

				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					if (voCollBookAppointments.get(i).getSessionSlot().equals(row.getValue()))
						bInListAlready = true;
				}
				if (!bInListAlready)
					voCollBookAppointments.add(createAppointment(null,	(SessionSlotListVo) row.getValue()));
			} 
			else if (row.getValue() instanceof Booking_AppointmentVo)
			{
				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					if (voCollBookAppointments.get(i).equals(row.getValue()))
						bInListAlready = true;
				}
				if (!bInListAlready)
					voCollBookAppointments.add(createAppointment(row));
			}
		}
		else
		{
			if (row.getValue() instanceof SessionSlotVo)
			{
				// WDEV-9012 the unchecking of the slot during a rebook needs to
				// set that the new slot has not yet been selected
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
					form.getLocalContext().setIsRebookApptSelected(false);

				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					if (voCollBookAppointments.get(i).getSessionSlot().equals(row.getValue()))
						voCollBookAppointments.remove(voCollBookAppointments.get(i));
				}
			}
			else if (row.getValue() instanceof SessionSlotListVo)
			{
				SessionSlotListVo slot = (SessionSlotListVo) row.getValue();

				// WDEV-9012 the unchecking of the slot during a rebook needs to
				// set that the new slot has not yet been selected
				if (form.getLocalContext().getIsRebookApptSelectedIsNotNull())
					form.getLocalContext().setIsRebookApptSelected(false);

				for (int i = voCollBookAppointments.size() - 1; i >= 0; --i)
				{
					Booking_AppointmentVo appointment = voCollBookAppointments.get(i);

					// WDEV-17154
					if (appointment != null	&& appointment.getSessionSlot() != null	&& appointment.getSessionSlot().getID_Session_Slot().equals(slot.getID_Session_Slot()))
					{
						voCollBookAppointments.remove(appointment);
					}
				}
				
			} 
			else if (row.getValue() instanceof Booking_AppointmentVo)
			{
				for (int i = 0; i < voCollBookAppointments.size(); i++)
				{
					if (voCollBookAppointments.get(i).equals(row.getValue()))
						voCollBookAppointments.remove(voCollBookAppointments.get(i));
				}
			}
		}
		if (isChecked)
		{
			form.setMode(FormMode.EDIT);
			form.btnCancel().setEnabled(true);
		}
		loadAppointmentsGrid(voCollBookAppointments);

		/*
		 * WDEV-5941 - repopulate ErodSelected data //removed as part of
		 * WDEV-18411 for (int i = 0; i < form.grdAppt().getRows().size(); i++)
		 * { grdApptRow aRow = form.grdAppt().getRows().get(i); Erod erodData =
		 * retrieveErodData(aRow.getValue().getSessionSlot()); if (erodData !=
		 * null) { aRow.setcolErod(erodData.isSelected());
		 * aRow.setcolErodDate(erodData.getErodDate());
		 * aRow.setcolErodDate2(erodData.getErodDate2());
		 * aRow.setcolErodDateReadOnly(!erodData.isSelected());
		 * aRow.setcolErodDate2ReadOnly(!erodData.isSelected()); } }
		 */
		//WDEV-18557
		if (isChecked)
		{	
			for (int i = 0; i < form.grdAppt().getRows().size(); i++)
			{ 
				grdApptRow aRow = form.grdAppt().getRows().get(i);

				if (row.getValue().getBoId().equals(aRow.getValue().getSessionSlot().getID_Session_Slot()))
				{	
					ConsMediaAndCategory consMediaCategData = retrieveConsMediaAndCategoryData(aRow.getValue().getSessionSlot());

					if (consMediaCategData != null)
					{ 
						aRow.setcolConsMedia(consMediaCategData.getConsMedia());
						aRow.setcolPatCategory(consMediaCategData.getCategory());
					}
					break;	
				}	

			}
		}
		updateControlState();
	}

	private boolean checkIfThereIsFirstApptPerClock(
			SessionSlotListVo checkedSessionSlot) {
		if (checkedSessionSlot == null
				|| checkedSessionSlot.getID_Session_Slot() == null)
			return false;

		// check locally
		boolean areFirstAppointmentsLocally = false;

		for (int i = 0; i < form.grdAppt().getRows().size(); i++) {
			grdApptRow row = form.grdAppt().getRows().get(i);
			if (row.getValue() != null
					&& row.getValue().getActivity() != null
					&& Boolean.TRUE.equals(row.getValue().getActivity()
							.getFirstAppointment())
					&& form.getLocalContext().getCurrentClock() != null
					&& form.getLocalContext().getCurrentClock()
							.equals(row.getValue().getPathwayClock())) {
				areFirstAppointmentsLocally = true;
			}
		}

		// check from DB
		return domain.checkIfThereIsFirstApptPerClock(
				form.getGlobalContext().RefMan.getCatsReferral(),
				areFirstAppointmentsLocally, checkedSessionSlot);
	}

	private void clearAllOtherSelections(GenForm.grdSessionSlotsRow row) {
		// clear the only other appt entry as only allow rebook one appt
		for (int i = 0; i < form.grdSessionSlots().getRows().size(); i++) {
			grdSessionSlotsRow sRow = form.grdSessionSlots().getRows().get(i);
			if (!sRow.isReadOnly() && !sRow.getValue().equals(row.getValue())
					&& sRow.getColSelect()) {
				sRow.setColSelect(false);
			}
		}
	}

	//WDEV-18557
	private  ConsMediaAndCategory retrieveConsMediaAndCategoryData(Session_SlotRefVo sessionSlot) {
		
		Map map = form.getLocalContext().getSelectedDates();
		if (map == null)
			return null;

		return  (ConsMediaAndCategory) map.get(sessionSlot.getID_Session_Slot());
	}

	
	 
	private void storeConsMediaAndCategorySelection(Session_SlotRefVo slot, ConsMediaAndCategory consMediaCateg)
	{
		Map map = form.getLocalContext().getSelectedDates();
	
		if (map == null)
			map = new HashMap();

		map.put(slot.getID_Session_Slot(), consMediaCateg);

		form.getLocalContext().setSelectedDates(map);
	}
	
	
	private class ConsMediaAndCategory 
	{
		private ConsultationMediaType consMedia;
		private CatsReferralCategory refCategory;

		public ConsMediaAndCategory(ConsultationMediaType consMedia, CatsReferralCategory refCategory) {
			this.consMedia = consMedia;
			this.refCategory = refCategory;
			
		}
		
		public void setConsMedia(ConsultationMediaType consMedia){
			this.consMedia = consMedia;
		}
		
		public void setCategory(CatsReferralCategory refCategory){
			this.refCategory = refCategory;
		}
		
		public ConsultationMediaType getConsMedia() {
			return consMedia;
		}

		public CatsReferralCategory getCategory() {
			return refCategory;
		}
	}
	/**
	 * When rebooking pass the original voAppt to this method in all other cases
	 * create a new appointment
	 * 
	 * @param voAppt
	 * @param slot
	 * @return
	 */
	private Booking_AppointmentVo createAppointment(
			Booking_AppointmentVo voAppt, SessionSlotListVo sessionSlot) {
		Booking_AppointmentVo voBookAppt = voAppt;
		SessionSlotVo slot = domain.getSessionSlot(sessionSlot);
		
		if (slot.getVersion_Session_Slot() != sessionSlot.getVersion_Session_Slot())
		{
			engine.showMessage("An appointment has already been booked for this slot. Screen will be refreshed.");
			bookingCalendarDateSelected(form.bookingCalendarAppts().getSelectedDay());
			return null;
		}

		if (voBookAppt == null)
		{
			voBookAppt = new Booking_AppointmentVo();
			voBookAppt.setConsMediaType(slot != null && slot.getSession() != null ? slot.getSession().getConsMediaType() : null);
			voBookAppt.setCategory((CatsReferralCategory) (form.getLocalContext().getReferralCategoryIsNotNull() ? form
					.getLocalContext().getReferralCategory(): null));
		}


		voBookAppt.setSessionSlot(slot);
		voBookAppt.setSession(slot.getSession());
		voBookAppt.setAppointmentDate(form.bookingCalendarAppts()
				.getSelectedDay());
		voBookAppt.setApptStartTime(slot.getStartTm());
		voBookAppt.setApptEndTime(Booking_AppointmentVo.calculateEndTime(
				slot.getStartTm(), slot.getDuration().intValue()));
		voBookAppt.setApptStatus(Status_Reason.BOOKED);
		voBookAppt.setCareContext(form.getGlobalContext().Core
				.getCurrentCareContext());// WDEV-18194
		

		// WDEV-6049
		Appointment_StatusVo voStatus = new Appointment_StatusVo();
		voStatus.setApptDate(voBookAppt.getAppointmentDate());
		voStatus.setApptTime(voBookAppt.getApptStartTime());
		voStatus.setStatus(voBookAppt.getApptStatus());
		// ---wdev-9744
		voStatus.setEarliestOfferedDate(voBookAppt.getEarliestOfferedDate());
		// ------
		voBookAppt.setCurrentStatusRecord(voStatus);
		if (voBookAppt.getApptStatusHistory() == null)
			voBookAppt
					.setApptStatusHistory(new Appointment_StatusVoCollection());
		voBookAppt.getApptStatusHistory().add(voStatus);
		// ---------------------------------------------wdev-9744
		Appointment_StatusVoCollection appstatusCol;
		if (form.getLocalContext().getApptStatus() == null) {
			form.getLocalContext().setApptStatus(
					new Appointment_StatusVoCollection());
			appstatusCol = form.getLocalContext().getApptStatus();
		} else
			appstatusCol = form.getLocalContext().getApptStatus();

		appstatusCol.add(voStatus);
		form.getLocalContext().setApptStatus(appstatusCol);

		// -----------------------------------------------

		if (!ConfigFlag.DOM.SCHEDULING_SLOTS_CREATION.getValue().equals(
				"Local Only")) {
			if (slot.getDirectoryOfServicesIsNotNull()
					&& slot.getDirectoryOfServices().size() > 0)
				slot.getDirectoryOfServices().get(0)
						.setUBRN(new DateTime().toString());
		}

		voBookAppt.setPathwayClock(form.getLocalContext().getCurrentClock());

		return voBookAppt;
	}

	private Booking_AppointmentVo createAppointment(grdSessionSlotsRow row) {
		Booking_AppointmentVo voBookAppt = null;
		if (row.getValue() instanceof Booking_AppointmentVo)
			voBookAppt = (Booking_AppointmentVo) row.getValue();
		else
			return null;

		voBookAppt.setAppointmentDate(form.bookingCalendarAppts()
				.getSelectedDay());
		
		Time slotTime = row.getValue() instanceof SessionSlotVo ? ((SessionSlotVo) row
				.getValue()).getStartTm() : null;
		voBookAppt
				.setApptStartTime(row.getValue() instanceof SessionSlotVo ? ((SessionSlotVo) row
						.getValue()).getStartTm() : null);
		voBookAppt.setActivity(form.cmbActivity().getValue());

		if (form.cmbActivity().getValue() != null
				&& form.cmbActivity().getValue().getTmReqIsNotNull())
			voBookAppt.setApptEndTime(Booking_AppointmentVo.calculateEndTime(
					slotTime, form.cmbActivity().getValue().getTmReq()
							.intValue()));

		voBookAppt.setApptStatus(Status_Reason.BOOKED);
		return voBookAppt;
	}

	private void loadAppointmentsGrid(
			Booking_AppointmentVoCollection voCollBookAppointments) {
		// set the appt type
		if (voCollBookAppointments != null) {
			for (int i = 0; i < voCollBookAppointments.size(); i++) {
				// WDEV-10291
				if (voCollBookAppointments.get(i).getActivity() == null)
					voCollBookAppointments.get(i).setActivity(
							form.cmbActivity().getValue());
			}
		}
		
		// Refresh appointments from grid values //WDEV-18557
		updateAppointmentswithAdditionalDetails(form.grdAppt().getValues());
		
		/*for (int i = 0; i < form.grdAppt().getRows().size(); i++)
		{
			Booking_AppointmentVo appt = form.grdAppt().getRows().get(i).getValue();
			appt.setConsMediaType(form.grdAppt().getRows().get(i).getcolConsMedia());
			appt.setCategory(form.grdAppt().getRows().get(i).getcolPatCategory());
		}*/

		form.getLocalContext().setSelectedAppointments(voCollBookAppointments);
		form.grdAppt().getRows().clear();

		grdApptRow aRow = null;
		Booking_AppointmentVo voBookAppt = null;
		for (int i = 0; i < voCollBookAppointments.size(); i++) {
			aRow = form.grdAppt().getRows().newRow();
			voBookAppt = voCollBookAppointments.get(i);

			// WDEV-12645
			aRow.setcolApptDate(voBookAppt.getAppointmentDateIsNotNull() ? voBookAppt
					.getAppointmentDate().toString() : null);
			aRow.setTooltipForcolApptDate(voBookAppt
					.getAppointmentDateIsNotNull() ? voBookAppt
					.getAppointmentDate().toString() : null);
			aRow.setcolApptTime(voBookAppt.getApptStartTimeIsNotNull() ? voBookAppt
					.getApptStartTime().toString() : null);
			aRow.setTooltipForcolApptTime(voBookAppt
					.getApptStartTimeIsNotNull() ? voBookAppt
					.getApptStartTime().toString() : null);
			// WDEV-18411 //WDEV-18557
			aRow.setcolConsMedia(voBookAppt.getConsMediaType());
			aRow.setcolPatCategory(voBookAppt.getCategory());

			/*
			 * removed as part of WDEV-18411
			 * aRow.setcolErod(form.getLocalContext()
			 * .getReferralERODForRebooking() != null &&
			 * form.getLocalContext().getReferralERODForRebooking()
			 * .getERODDate1() != null);// voBookAppt.getEarliestOfferedDate()
			 * // != null); aRow.setcolErodReadOnly(!(voBookAppt.getActivity()
			 * != null && Boolean.TRUE.equals(voBookAppt.getActivity()
			 * .getFirstAppointment()) &&
			 * form.getLocalContext().getReferralERODForRebooking() == null &&
			 * (form .getLocalContext().getIsCAB() == null || Boolean.FALSE
			 * .equals(form.getLocalContext().getIsCAB()))));
			 * aRow.setcolErodDate(form.getLocalContext()
			 * .getReferralERODForRebooking() != null ? form
			 * .getLocalContext().getReferralERODForRebooking() .getERODDate1()
			 * : null); aRow.setTooltipForcolErodDate((form.getLocalContext()
			 * .getReferralERODForRebooking() != null && form
			 * .getLocalContext().getReferralERODForRebooking() .getERODDate1()
			 * != null) ? form.getLocalContext()
			 * .getReferralERODForRebooking().getERODDate1().toString() : null);
			 * aRow.setcolErodDateReadOnly((aRow.getcolErod() && form
			 * .getLocalContext().getReferralERODForRebooking() != null) ||
			 * !aRow.getcolErod());
			 * aRow.setcolErodDate2ReadOnly(!aRow.getcolErod());
			 * aRow.setcolErodDate2(form.getLocalContext()
			 * .getReferralERODForRebooking() != null ? form
			 * .getLocalContext().getReferralERODForRebooking() .getERODDate2()
			 * : null); aRow.setTooltipForcolErodDate2((form.getLocalContext()
			 * .getReferralERODForRebooking() != null && form
			 * .getLocalContext().getReferralERODForRebooking() .getERODDate2()
			 * != null) ? form.getLocalContext()
			 * .getReferralERODForRebooking().getERODDate2().toString() : null);
			 */
			aRow.setcolLocation(voBookAppt.getSessionIsNotNull()
					&& voBookAppt.getSession().getSchLocationIsNotNull() ? voBookAppt
					.getSession().getSchLocation().getName()
					: null);
			aRow.setTooltipForcolLocation(voBookAppt.getSessionIsNotNull()
					&& voBookAppt.getSession().getSchLocationIsNotNull() ? voBookAppt
					.getSession().getSchLocation().getName()
					: null);
			aRow.setcolActivity(voBookAppt.getActivityIsNotNull() ? voBookAppt
					.getActivity().getName() : null);
			aRow.setTooltipForcolActivity(voBookAppt.getActivityIsNotNull() ? voBookAppt
					.getActivity().getName() : null);
			aRow.setcolClinic(voBookAppt.getSession().getName());
			aRow.setTooltipForcolClinic(voBookAppt.getSession().getName());

			aRow.setValue(voBookAppt);
		}

		form.grdAppt().setReadOnly(false);

		if (form.grdAppt().getRows().size() > 0)
			form.btnBook().setEnabled(true);
		else
			form.btnBook().setEnabled(false);
	}

	protected void onBookingCalendarApptsDateSelected(
			ims.framework.utils.Date date)
			throws ims.framework.exceptions.PresentationLogicException {
		bookingCalendarDateSelected(date);
	}

	private void bookingCalendarDateSelected(ims.framework.utils.Date date) {
		// go through sessions getting ones for the selected date
		SessionShortVoCollection voCollSessionShort = form.getLocalContext()
				.getSessions();
		if (voCollSessionShort == null)
			return;

		SessionShortVoCollection voCollSelectedSessions = new SessionShortVoCollection();
		for (int i = 0; i < voCollSessionShort.size(); i++) {
			if (voCollSessionShort.get(i).getSessionDate().equals(date))
				voCollSelectedSessions.add(voCollSessionShort.get(i));
		}

		form.getLocalContext().setSelectedSessions(voCollSelectedSessions);
		loadSessionSlots();
	}

	protected void onBookingCalendarApptsMonthSelected(
			ims.framework.utils.Date date)
			throws ims.framework.exceptions.PresentationLogicException {
		if (validateSearchCriteria() == null) {
			clearBookingCalendar();
			listSessions();
			form.bookingCalendarAppts().clearNoSessionDates();
			initialiseCalendar();
		}
	}

	private String stripspaces(String addressPostCode) {
		StringTokenizer st = new StringTokenizer(addressPostCode);
		String t = "";
		while (st.hasMoreElements())
			t += st.nextElement();
		return t;
	}

	private void loadSessionSlots() {
		form.grdSessionSlots().getRows().clear();
		SessionShortVoCollection voCollSelectedSessions = form
				.getLocalContext().getSelectedSessions();

		if (voCollSelectedSessions == null)
			return;

		if (voCollSelectedSessions.size() == 0)
			return;

		// WDEV-10088
		form.getContextMenus().RefMan.getBookAppointmentAddSlotADD_SLOTItem()
				.setVisible(true);

		// get available distances
		// Map<String, String> distanceMap = new HashMap();

		if (form.getGlobalContext().Core.getPatientShort()
				.getAddressIsNotNull()) {
			try {

				// distanceMap =
				// engine.getAddressProvider().computeDistances(form.getGlobalContext().Core.getPatientShort().getAddress(),
				// "MILES");
				// WDEV-10194
				if (engine.getAddressProvider() != null)
					form.getLocalContext().setdistanceMap(
							engine.getAddressProvider().computeDistances(
									form.getGlobalContext().Core
											.getPatientShort().getAddress(),
									"MILES"));

			} catch (PresentationLogicException e) {
				engine.showMessage(e.getMessage());
			}
		}

		// Build collection of sessions for which to query for slots
		Sch_SessionRefVoCollection sessions = new Sch_SessionRefVoCollection();

		for (SessionShortVo session : voCollSelectedSessions) {
			if (Boolean.TRUE.equals(session.getIsFixed()))
				sessions.add(session);
		}

		// List sessions slots from domain and populate them to grid
		populateSlots(domain.listSessionSlot(sessions, form.getLocalContext()
				.getActivity()));

		// for (SessionShortVo voSession : voCollSelectedSessions)
		// {
		// if (voSession.getIsFixedIsNotNull())
		// {
		// if (voSession.getIsFixed().booleanValue())
		// {
		// boolean hasBookingRights =
		// doesRoleHaveBookingRightsForSession(voSession);
		// SessionSlotVoCollection voCollSlots = null;
		// // WDEV-6634
		// if (form.getLocalContext().getActivityIsNotNull())
		// voCollSlots = domain.listSessionSlot(voSession,
		// form.getLocalContext().getActivity());
		// else
		// voCollSlots = domain.listSessionSlot(voSession);
		// if (voCollSlots == null)
		// return;
		//
		// GenForm.grdSessionSlotsRow sRow = null;
		// for (int i = 0; i < voCollSlots.size(); i++)
		// {
		// if (voCollSlots.get(i).getStatusIsNotNull() &&
		// voCollSlots.get(i).getStatus().equals(Status_Reason.SLOTOPENED))
		// {
		// if (form.cmbActivity().getValue() != null &&
		// voCollSlots.get(i).getActivityIsNotNull() &&
		// !form.cmbActivity().getValue().equals(voCollSlots.get(i).getActivity()))
		// continue;
		//
		// if (voCollSlots.get(i).getAppointmentIsNotNull())
		// continue;
		//
		// sRow = form.grdSessionSlots().getRows().newRow();
		// sRow.setColTime(getSlotDateTimeString(voCollSlots.get(i)));
		// sRow.setTooltipForColTime(getSlotDateTimeString(voCollSlots.get(i)));
		// // WDEV-12645
		//
		// if (voCollSlots.get(i).getSessionIsNotNull())
		// {
		// if (voCollSlots.get(i).getSession().getSchLocationIsNotNull())
		// {
		// sRow.setColLocation(voCollSlots.get(i).getSession().getSchLocation().getName());
		// sRow.setTooltipForColLocation(voCollSlots.get(i).getSession().getSchLocation().getName());
		// // WDEV-12645
		// }
		//
		// sRow.setColClinic(voCollSlots.get(i).getSession().getName());
		// sRow.setTooltipForColClinic(voCollSlots.get(i).getSession().getName());
		// // WDEV-12645
		//
		// // populate distance
		// if (form.getLocalContext().getdistanceMapIsNotNull() &&
		// form.getLocalContext().getdistanceMap().size() > 0)
		// {
		// if (voCollSlots.get(i).getSession().getSchLocationIsNotNull() &&
		// voCollSlots.get(i).getSession().getSchLocation().getAddressIsNotNull())
		// {
		// if
		// (voCollSlots.get(i).getSession().getSchLocation().getAddress().getAddressPostCode()
		// != null &&
		// voCollSlots.get(i).getSession().getSchLocation().getAddress().getAddressPostCode()
		// != "")
		// {
		// Object distance =
		// form.getLocalContext().getdistanceMap().get(stripspaces(voCollSlots.get(i).getSession().getSchLocation().getAddress().getAddressPostCode()));
		// sRow.setColDistance(distance != null ? distance.toString() : null);
		// sRow.setTooltipForColDistance(distance != null ? distance.toString()
		// : null); // WDEV-12645
		// }
		// }
		// }
		//
		// }
		//
		// sRow.setValue(voCollSlots.get(i));
		// sRow.setColSelectReadOnly(!hasBookingRights);
		// if (!hasBookingRights)
		// sRow.setTooltipForColSelect("Role does not have rights to book in this Session");
		//
		// if (voCollSlots.get(i).getPriorityIsNotNull() &&
		// voCollSlots.get(i).getPriority().equals(SchedulingPriority.URGENT))
		// sRow.setBackColor(Color.Red);
		// }
		// }
		// }
		// }
		// }

		displaySelectedAppointments();

	}

	private void populateSlots(SessionSlotListVoCollection slots) {
		// Clear session slots grid
		form.grdSessionSlots().getRows().clear();

		// Test slots collection - if null exit populate function
		if (slots == null)
			return;

		// Iterate collection and populate records to the screen
		for (SessionSlotListVo slot : slots) {
			// Create row for session slot
			grdSessionSlotsRow row = form.grdSessionSlots().getRows().newRow();

			// Set columns values
			String timeString = getSlotDateTimeString(slot);
			row.setColTime(timeString);
			row.setTooltipForColTime(timeString);

			if (slot.getSession() != null) {
				if (slot.getSession().getLocation() != null) {
					row.setColLocation(slot.getSession().getLocation()
							.getName());
					row.setTooltipForColLocation(slot.getSession()
							.getLocation().getName());
				}

				row.setColClinic(slot.getSession().getName());
				row.setTooltipForColClinic(slot.getSession().getDescription());// WDEV-17933

				// Set distance
				if (form.getLocalContext().getdistanceMap() != null
						&& form.getLocalContext().getdistanceMap().size() > 0) {
					if (slot.getSession().getLocation() != null
							&& slot.getSession().getLocation().getAddress() != null
							&& slot.getSession().getLocation().getAddress()
									.getPostCode() != null
							&& slot.getSession().getLocation().getAddress()
									.getPostCode() != "") {
						Object distance = form
								.getLocalContext()
								.getdistanceMap()
								.get(stripspaces(slot.getSession()
										.getLocation().getAddress()
										.getPostCode()));
						row.setColDistance(distance != null ? distance
								.toString() : null);
						row.setTooltipForColDistance(distance != null ? distance
								.toString() : null);
					}
				}
			}

			row.setValue(slot);

			boolean hasBookingRights = hasBookingRights(slot.getSession());
			row.setColSelectReadOnly(!hasBookingRights);
			if (!hasBookingRights)
				row.setTooltipForColSelect("Role does not have rights to book in this Session");

			if (SchedulingPriority.URGENT.equals(slot.getPriority()))
				row.setBackColor(Color.Red);
		}
	}

	private boolean hasBookingRights(SessionListVo session) {
		if (session == null || session.getBookingRights() == null)
			return false;

		IAppRole role = engine.getLoggedInRole();

		for (Session_BookingRightVo right : session.getBookingRights()) {
			if (role.getId() == right.getRole().getId())
				return true;
		}

		return false;
	}

	private String getSlotDateTimeString(SessionSlotListVo slot) {
		String slotDateTime = "";

		Date daySel = form.bookingCalendarAppts().getSelectedDay();
		if (daySel != null)
			slotDateTime += daySel.toString();

		if (slot.getStartTmIsNotNull())
			slotDateTime += " " + slot.getStartTm();

		return slotDateTime;
	}

	private Boolean doesRoleHaveBookingRightsForSession(
			Sch_SessionRefVo voSession) {
		Map map = form.getLocalContext().getSessionBookingRights();
		if (map == null)
			map = new HashMap();

		Object entry = map.get(voSession.getID_Sch_Session());

		if (entry == null) {
			map.put(voSession.getID_Sch_Session(), domain.hasBookingRights(
					engine.getLoggedInRole(), voSession));
			entry = map.get(voSession.getID_Sch_Session());
		}

		form.getLocalContext().setSessionBookingRights(map);
		return (Boolean) entry;
	}

	protected void onBtnCancelClick()
			throws ims.framework.exceptions.PresentationLogicException {
		clearGlobalContexts();
		clearScreen(false);
		open();
		form.setMode(FormMode.VIEW);
	}

	protected void onTreInvApptsTreeViewSelectionChanged(TreeNode node)
			throws PresentationLogicException {
		form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem()
				.setVisible(false);
		if (form.getMode().equals(FormMode.VIEW)) {
			if (node != null) {
				removeAllRadiologyServices();
				if (node.getValue() instanceof BookingAppointmentLiteVo
						&& node.getParent().equals(
								form.treInvAppts().getNodeByValue(
										REBOOK_APPT_NODE)))
					form.getContextMenus().RefMan
							.getBookAppointmentREBOOK_APPTItem().setVisible(
									true);
				if (node.getValue() instanceof OrderInvestigationBookingVo) {
					ServiceLiteVo voService = getService(((OrderInvestigationBookingVo) node
							.getValue()));
					if (!form.cmbService().getValues().contains(voService))
						form.cmbService().newRow(voService,
								voService.getServiceName());

					form.cmbService().setValue(voService);
					form.getLocalContext().setisLinkingOrderInv(true);
				}
			}
		}
	}

	private void removeAllRadiologyServices() {
		for (int i = 0; i < form.cmbService().getValues().size(); i++) {
			ServiceLiteVo voService = (ServiceLiteVo) form.cmbService()
					.getValues().get(i);
			if (voService.getServiceCategoryIsNotNull()) {
				if (voService.getServiceCategory().equals(
						ServiceCategory.RADIOLOGY_MODALITY))
					form.cmbService().removeRow(voService);
			}
		}
	}

	private ServiceLiteVo getService(OrderInvestigationBookingVo voOrderInv) {
		if (voOrderInv == null)
			return null;

		if (voOrderInv.getInvestigationIsNotNull()
				&& voOrderInv.getInvestigation().getProviderServiceIsNotNull()
				&& voOrderInv.getInvestigation().getProviderService()
						.getLocationServiceIsNotNull()
				&& voOrderInv.getInvestigation().getProviderService()
						.getLocationService().getServiceIsNotNull())
			return voOrderInv.getInvestigation().getProviderService()
					.getLocationService().getService();

		return null;
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender)
			throws PresentationLogicException {
		switch (menuItemID) {
		case GenForm.ContextMenus.RefManNamespace.BookAppointment.REBOOK_APPT:
			if (form.treInvAppts().getValue() instanceof BookingAppointmentLiteVo) {
				// get the full appointment record to be rebooked and set
				// the appropriate context to reinitialise the screen
				Booking_AppointmentVo voAppt = domain
						.getBookingAppointment((Booking_AppointmentRefVo) form
								.treInvAppts().getValue());
				form.getGlobalContext().Scheduling
						.setBookingAppointment(voAppt);
				form.getGlobalContext().Scheduling.setBookingService(voAppt
						.getSessionIsNotNull() ? voAppt.getSession()
						.getService() : null);
				form.getGlobalContext().Scheduling.setBookingActivity(voAppt
						.getActivityIsNotNull() ? voAppt.getActivity() : null);
				reInitialize();
			}
			break;
		case GenForm.ContextMenus.RefManNamespace.BookAppointmentAddSlot.ADD_SLOT:
			// WDEV-11625
			if (form.cmbActivity().getValue() == null) {
				engine.showErrors(new String[] { "Activity is mandatory" });
				form.cmbActivity().setFocus();
			} else {
				form.getGlobalContext().RefMan.setSelectedSessions(form
						.getLocalContext().getSelectedSessions());
				engine.open(form.getForms().Scheduling.SessionSlotDialog);
			}
			break;
		default:
		}
	}

	private void reInitialize() {
		form.getContextMenus().RefMan.getBookAppointmentREBOOK_APPTItem()
				.setVisible(false);
		form.btnBook().setEnabled(false);
		form.btnCancel().setEnabled(true);
		form.bookingCalendarAppts().setEnabled(false);
		form.bookingCalendarAppts().setCurrentMonth(new Date());
		form.txtBookingComments().setValue(null);
		clearSearchCriteria();
		clearBookingCalendar();
		repopulateScreen();
	}

	/*
	 * removed as part of WDEV-18411 protected void
	 * onGrdApptGridCheckBoxClicked(int column, grdApptRow row, boolean
	 * isChecked) throws PresentationLogicException { // EROD if (column == 2) {
	 * row.setcolErodDateReadOnly(!isChecked);
	 * row.setcolErodDate2ReadOnly(!isChecked); if (!isChecked) {
	 * row.setcolErodDate(null); row.setcolErodDate2(null); } } }
	 */

	protected void onFormDialogClosed(FormName formName, DialogResult result)
			throws PresentationLogicException {
		if (formName.equals(form.getForms().Scheduling.SessionSlotDialog)) {
			if (result.equals(DialogResult.OK)) {
				SessionSlotVo voSlot = form.getGlobalContext().Scheduling
						.getSessionSlot();
				SessionShortVo voSession = form.getGlobalContext().RefMan
						.getSelectedSession();
				try {
					domain.addSlotToSession(voSession, voSlot);
				} catch (StaleObjectException e) {
					engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE
							.getValue());
				}

				listSessions();
				bookingCalendarDateSelected(form.bookingCalendarAppts()
						.getSelectedDay());
				displaySelectedAppointments();
			}

			form.getGlobalContext().RefMan.setSelectedSession(null);
			form.getGlobalContext().Scheduling.setSessionSlot(null);
		}
		if (formName.equals(form.getForms().RefMan.ERODDialog))
		{	
			form.getLocalContext().setLastReferralEROD(
					domain.getLastOutpatientEROD(form.getGlobalContext().RefMan
							.getCatsReferral()));
						updateControlState();

		} else {
			if (engine.isDialog()) {
				// WDEV-8376
				form.getGlobalContext().Scheduling.setAppointmentIds(null);
				engine.close(DialogResult.OK);
			}
		}
	}

	private void displaySelectedAppointments() {
		Booking_AppointmentVo voBookAppt = null;
		for (int i = 0; i < form.grdAppt().getRows().size(); i++) {
			voBookAppt = form.grdAppt().getRows().get(i).getValue();
			if (voBookAppt == null)
				continue;
			// go through slots grid if a match is found for the slot for this
			// appt setColselect(true)
			SessionSlotListVo voSlot = null;
			for (int j = 0; j < form.grdSessionSlots().getRows().size(); j++) {
				voSlot = (SessionSlotListVo) form.grdSessionSlots().getRows()
						.get(j).getValue();
				if (voSlot == null)
					continue;

				if (voBookAppt.getSessionSlot() != null
						&& voBookAppt.getSessionSlot().getID_Session_Slot() != null
						&& voBookAppt.getSessionSlot().getID_Session_Slot()
								.equals(voSlot.getID_Session_Slot()))
					form.grdSessionSlots().getRows().get(j).setColSelect(true);
			}
		}
	}

	protected void onFormModeChanged() {
		updateControlState();
	}

	private void updateControlState() {
		form.btnClose().setVisible(
				engine.isDialog() && form.getMode().equals(FormMode.VIEW));
		form.btnEROD().setVisible(
				form.getLocalContext().getIsCAB() == null
						|| Boolean.FALSE.equals(form.getLocalContext()
								.getIsCAB()));
		// WDEV-18411
		form.btnEROD().setEnabled(FormMode.EDIT.equals(form.getMode()));
		form.btnEROD().setTooltip(getErodInfo());
	}

	private String getErodInfo() {
		if (form.getLocalContext().getLastReferralEROD() == null)
			return null;

		StringBuilder tooltip = new StringBuilder();

		tooltip.append("<b>Earliest Date Offered: </b>"
				+ form.getLocalContext().getLastReferralEROD().getERODDate1());

		if (form.getLocalContext().getLastReferralEROD().getERODDate2() != null) {
			tooltip.append("<br><b>Second Date Offered: </b>"
					+ form.getLocalContext().getLastReferralEROD()
							.getERODDate2());
		}

		if (form.getLocalContext().getLastReferralEROD().getPatAvailFromDate() != null) {
			tooltip.append("<br><b>Patient Available from Date: </b>"
					+ form.getLocalContext().getLastReferralEROD()
							.getPatAvailFromDate());
		}

		tooltip.append("<br><b>EROD Type: </b>"
				+ form.getLocalContext().getLastReferralEROD().getERODType()
						.getText());

		if (form.getLocalContext().getLastReferralEROD().getAppointment() != null) {
			tooltip.append("<br><b>Appointment Date: </b>"
					+ (form.getLocalContext().getLastReferralEROD()
							.getAppointment() != null ? form.getLocalContext()
							.getLastReferralEROD().getAppointment()
							.getAppointmentDate() : ""));
			tooltip.append("<br><b>Clinic Name: </b>"
					+ ((form.getLocalContext().getLastReferralEROD()
							.getAppointment() != null && form.getLocalContext()
							.getLastReferralEROD().getAppointment()
							.getSession() != null) ? form.getLocalContext()
							.getLastReferralEROD().getAppointment()
							.getSession().getName() : ""));
		}

		return tooltip.toString();
	}

	protected void onBtnCloseClick() throws PresentationLogicException {
		engine.close(DialogResult.OK);
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result)
			throws PresentationLogicException {
		if (form.getLocalContext().getMessageBoxIdIsNotNull()) {
			if (result.equals(DialogResult.YES)
					&& form.getLocalContext().getMessageBoxId()
							.equals(messageBoxId))
				saveBooking(form.getLocalContext().getSch_Booking(), 0);
		} /* WDEV-18411 REMOVED 
			else if (form.getLocalContext().getReasonableDateMessageBoxId() != null
				&& form.getLocalContext().getReasonableDateMessageBoxId() == messageBoxId) {
			Boolean reasonableOffer = null;
			if (DialogResult.YES.equals(result)) {
				reasonableOffer = true;
			} else if (DialogResult.NO.equals(result)) {
				reasonableOffer = false;
			}

			bookAppointment();

			form.getLocalContext().setReasonableDateMessageBoxId(null);
		}*/
	}

	private class Erod {
		private boolean isSelected;
		private Date erodDate;
		private Date erodDate2;

		public Erod(Date erodDate, Date erodDate2, boolean isSelected) {
			this.erodDate = erodDate;
			this.erodDate2 = erodDate2;
			this.isSelected = isSelected;
		}

		public boolean isSelected() {
			return isSelected;
		}

		public Date getErodDate() {
			return erodDate;
		}

		public Date getErodDate2() {
			return erodDate2;
		}
	}

	@Override
	protected void onBtnERODClick() throws PresentationLogicException {Booking_AppointmentVo apptForERODVo = getFirstApptforEROD(form.grdAppt().getValues());
		engine.open(form.getForms().RefMan.ERODDialog, new Object[] {ERODType.OUTPATIENT, apptForERODVo != null ? FormMode.EDIT	: null});
	}
	
	private Booking_AppointmentVo getFirstApptforEROD(Booking_AppointmentVoCollection selectedAppts)
	{
		if (selectedAppts == null || selectedAppts.size() == 0)
			return null;
		for (int i = 0; i < selectedAppts.size(); i++)
		{
			if (selectedAppts.get(i) == null)
				continue;
			if (selectedAppts.get(i).getActivityIsNotNull()
					&& Boolean.TRUE.equals(selectedAppts.get(i).getActivity()
							.getFirstAppointment())) {

				return selectedAppts.get(i);
			}
		}
		return null;
	}
	

	@Override
	protected void onCmbActivityValueChanged()
			throws PresentationLogicException {
		updateControlState();
	}

	@Override
	protected void onBtnDashboardClick() throws PresentationLogicException

	{

		if (form.getGlobalContext().Core.getPatientShortIsNotNull())

		{

			if (ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue() == null
					|| ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue().length() == 0)

			{

				engine.showMessage("PATIENT_DASHBOARD_URL config flag was not set.");

				return;

			}

			String url = ConfigFlag.GEN.PATIENT_DASHBOARD_URL.getValue()
					+ "&PID="
					+ form.getGlobalContext().Core.getPatientShort()
							.getID_Patient();

			List<WindowParam> params = new ArrayList<WindowParam>();

			params.add(new WindowParam("FullScreen", "false"));

			params.add(new WindowParam("ToolBar", "false"));

			params.add(new WindowParam("StatusBar", "false"));

			params.add(new WindowParam("StatusBar", "false"));

			params.add(new WindowParam("MenuBar", "false"));

			params.add(new WindowParam("AddressBar", "false"));

			params.add(new WindowParam("Resizable", "true"));

			params.add(new WindowParam("Visible", "true"));

			params.add(new WindowParam("Width", "1440"));

			params.add(new WindowParam("Height", "1000"));

			engine.openCustomUrlCloseableOnContextChange(url, params, true);

		}

	}

	// WDEV-18411
	@Override
	protected void onQmbListOwnerTextSubmited(String value)
			throws PresentationLogicException {
		form.qmbListOwner().clear();

		HcpFilter filter = new HcpFilter();
		PersonName voName = new PersonName();
		voName.setSurname(value);
		filter.setQueryName(voName);

		HcpLiteVoCollection voCollHcp = domain.listClinicsListOwners(filter);
		if (voCollHcp.size() == 0) {
			engine.showMessage("No matching records found");
			return;
		}

		for (int i = 0; i < voCollHcp.size(); i++) {
			form.qmbListOwner().newRow(voCollHcp.get(i),
					voCollHcp.get(i).getName().toString());
		}

		if (voCollHcp.size() == 1)
			form.qmbListOwner().setValue(voCollHcp.get(0));
		else
			form.qmbListOwner().showOpened();
	}
	
	//WDEV-18557  - TO BE REVIEWED IN A LATER RELEASE
	/* @Override 
	protected void onGrdApptGridComboBoxSelectionChanged(int column, grdApptRow row, Object value) throws PresentationLogicException
	{
		
	  if (row != null && row.getValue() != null && row.getValue().getSessionIsNotNull() && row.getValue().getSessionSlot() != null)
	  {
		  Session_SlotRefVo slot = null;
		  ConsMediaAndCategory consMediaAndCategforAppt = new ConsMediaAndCategory(null, null);
		  
		  if  (column == APPT_CONSULTATION_MEDIA_COL_INDEX && row.getValue().getSession().getConsMediaTypeIsNotNull() && !row.getValue().getSession().getConsMediaType().equals(value))
		  {
			 slot = (Session_SlotRefVo) row.getValue().getSessionSlot();
			 consMediaAndCategforAppt.setConsMedia(row.getcolConsMedia());
			 consMediaAndCategforAppt.setCategory(row.getcolPatCategory());
			 
		  }
		  if  (column == APPT_PATIENT_CATEGORY_COL_INDEX  && form.getLocalContext().getReferralCategoryIsNotNull() &&  !((CatsReferralCategory) form.getLocalContext().getReferralCategory()).equals(value))
		  {
			 slot = (Session_SlotRefVo) row.getValue().getSessionSlot();
			 consMediaAndCategforAppt.setCategory(row.getcolPatCategory());
			 consMediaAndCategforAppt.setConsMedia(row.getcolConsMedia());
		  }
		   storeConsMediaAndCategorySelection(slot, consMediaAndCategforAppt);
	  }
		  
	}	 */ 

}
