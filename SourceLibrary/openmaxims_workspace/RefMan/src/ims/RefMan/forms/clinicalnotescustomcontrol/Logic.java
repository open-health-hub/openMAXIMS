// This code was generated by Cristian Belciug using IMS Development Environment (version 1.80 build 4261.20360)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.clinicalnotescustomcontrol;

import ims.RefMan.forms.clinicalnotescustomcontrol.GenForm.GroupViewEnumeration;
import ims.RefMan.forms.clinicalnotescustomcontrol.GenForm.grdDiagnosisRow;
import ims.RefMan.forms.clinicalnotescustomcontrol.GenForm.grdProceduresRow;
import ims.RefMan.vo.AppointmentClinicalNotesVo;
import ims.RefMan.vo.AppointmentClinicalNotesVoCollection;
import ims.RefMan.vo.BookingAppointmentForClinicalNotesVo;
import ims.RefMan.vo.BookingAppointmentForClinicalNotesVoCollection;
import ims.RefMan.vo.CSPrimaryDiagnosisForClinicalNotesVo;
import ims.RefMan.vo.CSPrimaryDiagnosisForClinicalNotesVoCollection;
import ims.RefMan.vo.CatsReferralForClinicalNotesVoCollection;
import ims.RefMan.vo.PatientDiagnosisApptDetailVo;
import ims.RefMan.vo.PatientDiagnosisApptDetailVoCollection;
import ims.RefMan.vo.PatientProcedureApptDetailVo;
import ims.RefMan.vo.PatientProcedureApptDetailVoCollection;
import ims.RefMan.vo.ReferralClinicalNotesVo;
import ims.RefMan.vo.lookups.ClinicalNoteTypeForAnAppointment;
import ims.RefMan.vo.lookups.ReportNoteStatus;
import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.resource.people.vo.MemberOfStaffRefVo;
import ims.core.vo.AuthoringInformationVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.PatientDocumentLiteVo;
import ims.core.vo.PatientDocumentLiteVoCollection;
import ims.core.vo.ServerDocumentVo;
import ims.core.vo.lookups.PatientProcedureStatus;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.DateTime;
import ims.framework.utils.Image;
import ims.scheduling.vo.Booking_AppointmentRefVo;
import ims.vo.SystemInformation;
import ims.vo.ValueObject;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	
	private static final String COL_TITLE_HIERARCHICAL = "TITLE";
	private static final String COL_IMAGE_FLAT = "IMAGE";
	private static final String COL_DATE_FLAT = "DATE";
	private static final String COL_TITLE_FLAT = "TITLE";
	private static final String COL_CONSULTANT_FLAT = "CONSULTANT";
	
	private static final int DIAGNOSIS_CAT = -1;
	private static final int PROCEDURES_CAT = -2;
	private static final int DIAGNOSIS = -3;
	private static final int PROCEDURES = -4;
	
	private static final String DIAGNOSIS_CAT_STRING = "Diagnosis";
	private static final String PROCEDURES_CAT_STRING = "Procedures";
	private static final String REFERRALS_LETTER = "<b>Referral Letters</b>";
	
	private static final String PREVIOUS_REFERRALS = "Previous Referrals: ";

	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
	}
	
	private void updateControlsState()
	{
		boolean isReadOnly = Boolean.TRUE.equals(form.getLocalContext().getIsReadOnlyMode());
		
		form.getContextMenus().RefMan.getClinicalNotesMenuADD_DIAGNOSISItem().setVisible(!isReadOnly && form.getLocalContext().getHcpUserIsNotNull() && form.dyngrdNotes().getValue() instanceof BookingAppointmentForClinicalNotesVo);
		form.getContextMenus().RefMan.getClinicalNotesMenuADD_NOTESItem().setVisible(!isReadOnly && form.dyngrdNotes().getValue() instanceof BookingAppointmentForClinicalNotesVo && form.getLocalContext().getMosUserIsNotNull());//	WDEV-14006
		form.getContextMenus().RefMan.getClinicalNotesMenuADD_PROCEDUREItem().setVisible(!isReadOnly && form.getLocalContext().getHcpUserIsNotNull() && form.dyngrdNotes().getValue() instanceof BookingAppointmentForClinicalNotesVo);
		
		form.getContextMenus().RefMan.getClinicalNotesMenuEDIT_NOTEItem().setVisible(!isReadOnly 
				&& form.dyngrdNotes().getValue() instanceof AppointmentClinicalNotesVo 
				&& form.getLocalContext().getMosUserIsNotNull() 
				&& ( engine.hasRight(AppRight.CAN_EDIT_ALL_CLINICAL_NOTES) 
						|| (((AppointmentClinicalNotesVo) form.dyngrdNotes().getValue()).getAuthoringUser().equals(form.getLocalContext().getMosUser()) || (form.getLocalContext().getHcpUserIsNotNull() && ((AppointmentClinicalNotesVo) form.dyngrdNotes().getValue()).getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getHcpUser())))) );//	WDEV-14006
		
		form.getContextMenus().RefMan.getClinicalNotesMenuEDIT_DIAGNOSEItem().setVisible(!isReadOnly && form.getLocalContext().getHcpUserIsNotNull() && form.dyngrdNotes().getValue() instanceof PatientDiagnosisApptDetailVo && ((PatientDiagnosisApptDetailVo) form.dyngrdNotes().getValue()).getAuthoringInfo().getAuthoringHcp().equals(form.getLocalContext().getHcpUser()));
		form.getContextMenus().RefMan.getClinicalNotesMenuEDIT_PROCEDUREItem().setVisible(!isReadOnly && form.getLocalContext().getHcpUserIsNotNull() && form.dyngrdNotes().getValue() instanceof PatientProcedureApptDetailVo && ((PatientProcedureApptDetailVo) form.dyngrdNotes().getValue()).getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getHcpUser()));
		
		form.getContextMenus().RefMan.getClinicalNotesMenuDELETE_NOTEItem().setVisible(!isReadOnly 
				&& form.dyngrdNotes().getValue() instanceof AppointmentClinicalNotesVo 
				&& engine.hasRight(AppRight.ALLOW_DELETION_OF_APPOINTMENT_CLINICAL_NOTES) 
				&& form.getLocalContext().getMosUserIsNotNull() && (((AppointmentClinicalNotesVo) form.dyngrdNotes().getValue()).getAuthoringUser().equals(form.getLocalContext().getMosUser()) || (form.getLocalContext().getHcpUserIsNotNull() && ((AppointmentClinicalNotesVo) form.dyngrdNotes().getValue()).getAuthoringInformation().getAuthoringHcp().equals(form.getLocalContext().getHcpUser()))));//	WDEV-14006
		
		form.getContextMenus().RefMan.getClinicalNotesMenuDELETE_DIAGNOSISItem().setVisible(!isReadOnly && form.dyngrdNotes().getValue() instanceof PatientDiagnosisApptDetailVo && engine.hasRight(AppRight.ALLOW_DELETION_OF_APPOINTMENT_CLINICAL_NOTES));
		form.getContextMenus().RefMan.getClinicalNotesMenuDELETE_PROCEDUREItem().setVisible(!isReadOnly && form.dyngrdNotes().getValue() instanceof PatientProcedureApptDetailVo && engine.hasRight(AppRight.ALLOW_DELETION_OF_APPOINTMENT_CLINICAL_NOTES));
		
		form.btnPrevious().setVisible(form.getGlobalContext().RefMan.getPreviousReferralsIsNotNull() && form.getGlobalContext().RefMan.getPreviousReferrals().size() > 0);
		if(form.getGlobalContext().RefMan.getPreviousReferralsIsNotNull() && form.getGlobalContext().RefMan.getPreviousReferrals().size() > 0)
			form.btnPrevious().setText(PREVIOUS_REFERRALS + form.getGlobalContext().RefMan.getPreviousReferrals().size());

		form.btnPrint().setVisible(!isReadOnly && form.dyngrdNotes().getValue() instanceof AppointmentClinicalNotesVo 
				&& ((AppointmentClinicalNotesVo)form.dyngrdNotes().getValue()).getClinicalNoteTypeIsNotNull()
				&& ((AppointmentClinicalNotesVo)form.dyngrdNotes().getValue()).getNoteStatusIsNotNull()
				&& ((AppointmentClinicalNotesVo)form.dyngrdNotes().getValue()).getNoteStatus().equals(ReportNoteStatus.ACTIVE)
				&& ((AppointmentClinicalNotesVo)form.dyngrdNotes().getValue()).getClinicalNoteType().equals(ClinicalNoteTypeForAnAppointment.CORRESPONDENCE_NOTES));
	}
	
	private void open()
	{
		populateGridWithClinicalNotes();
		
		form.setMode(FormMode.VIEW);
	}
	
	private void populateGridWithClinicalNotes()
	{
		if(GroupViewEnumeration.rdoAppointment.equals(form.GroupView().getValue()))
		{
			initializeHierarchicalGrid();
			populateGridWithReferralLetters();
		}
		else if(GroupViewEnumeration.rdoCronological.equals(form.GroupView().getValue()))
		{
			initializeFlatGrid();
		}
		
		if(GroupViewEnumeration.rdoAppointment.equals(form.GroupView().getValue()))
		{
			populateGridWithAppointments();
		}
		
		ReferralClinicalNotesVo referralClinicalNotes = domain.getReferralClinicalNotes(form.getGlobalContext().RefMan.getCatsReferral());
		form.getLocalContext().setReferralClinicalNotes(referralClinicalNotes);
		form.getGlobalContext().RefMan.setReferralClinicalNotes(referralClinicalNotes);
		
		if(referralClinicalNotes == null)
			return;
		
		if(GroupViewEnumeration.rdoAppointment.equals(form.GroupView().getValue()))
		{
			populateGridWithNotes(referralClinicalNotes.getClinicalNotes().sort(new ClinicalNotesDateComparator(SortOrder.DESCENDING)));
			populateGridWithDiagnoses(referralClinicalNotes.getDiagnosis().sort(new ClinicalNotesDateComparator(SortOrder.DESCENDING)));
			populateGridWithProcedures(referralClinicalNotes.getProcedures().sort(new ClinicalNotesDateComparator(SortOrder.DESCENDING)));
		}
		else if(GroupViewEnumeration.rdoCronological.equals(form.GroupView().getValue()))
		{
			populateFlatGridWithNotes(referralClinicalNotes.getClinicalNotes());
			populateFlatGridWithDiagnoses(referralClinicalNotes.getDiagnosis());
			populateFlatGridWithProcedures(referralClinicalNotes.getProcedures());
			
			sortFlatGrid(true);
		}
		
		setSelectedInstance();
	}

	private void populateGridWithReferralLetters()
	{
		DynamicGridRow row = addReferralLetterLabel();
		
		PatientDocumentLiteVoCollection docs = domain.listReferralLetters(form.getGlobalContext().RefMan.getCatsReferral());
		
		for(PatientDocumentLiteVo doc : docs)
		{
			if(doc == null)
				continue;
			
			addReferralLetterRow(row, doc);
		}
	}

	private void addReferralLetterRow(DynamicGridRow row, PatientDocumentLiteVo doc)
	{
		if(row == null || doc == null)
			return;
		
		String user = doc.getRecordingUserIsNotNull() ? doc.getRecordingUser().toString() : null;
		DateTime date = doc.getRecordingDateTimeIsNotNull() ? doc.getRecordingDateTime() : null;
		String title = "Recorded on <b>" + date + "</b> by <b>" + user + "</b>";
		
		DynamicGridRow letterRow = row.getRows().newRow();
		
		letterRow.setSelectable(true);
		letterRow.setExpandedImage(form.getImages().Core.PDFIcon);
		letterRow.setCollapsedImage(form.getImages().Core.PDFIcon);
		letterRow.setReadOnly(true);
		letterRow.setValue(doc);
		
		DynamicGridCell cell = letterRow.getCells().newCell(getCol(COL_TITLE_HIERARCHICAL), DynamicCellType.STRING);	

		cell.setReadOnly(true);
		cell.setValue(title);
	}

	private DynamicGridRow addReferralLetterLabel()
	{
		DynamicGridRow row = form.dyngrdNotes().getRows().newRow();
		row.setSelectable(false);	
		row.setExpanded(false);
		
		row.setExpandedImage(form.getImages().Core.DocumentsBlue16);
		row.setCollapsedImage(form.getImages().Core.DocumentsBlue16);
		
		row.setReadOnly(true);
		
		DynamicGridCell cell = row.getCells().newCell(getCol(COL_TITLE_HIERARCHICAL), DynamicCellType.STRING);	
		
		cell.setReadOnly(true);
		cell.setValue(REFERRALS_LETTER);
		
		return row;
	}

	private void setSelectedInstance()
	{
		form.dyngrdNotes().setValue(form.getLocalContext().getSelectedInstance());
		
		if(form.getLocalContext().getSelectedInstance() instanceof BookingAppointmentForClinicalNotesVo && form.getLocalContext().getSelectedCategoryIsNotNull())
		{
			DynamicGridRow row = form.dyngrdNotes().getSelectedRow();
			DynamicGridRow categoryRow = null;
			
			if(form.getLocalContext().getSelectedCategory().equals(DIAGNOSIS_CAT) || form.getLocalContext().getSelectedCategory().equals(PROCEDURES_CAT))
			{
				categoryRow = getCategoryRow(row, null, form.getLocalContext().getSelectedCategory(), false);
			}
			else
			{
				categoryRow = getCategoryRow(row, ClinicalNoteTypeForAnAppointment.getNegativeInstance(form.getLocalContext().getSelectedCategory()), null, false);
			}
			
			expandRow(categoryRow);
			return;
		}
		
		expandRow(form.dyngrdNotes().getSelectedRow());
		
		form.dyngrdNotes().resetScrollPosition();
	}

	private void expandRow(DynamicGridRow selectedRow)
	{
		if(selectedRow == null)
			return;
		
		selectedRow.setExpanded(true);
		
		if(selectedRow.getParent() != null)
			selectedRow.getParent().setExpanded(true);
		
		expandRow(selectedRow.getParent());
	}

	private void sortFlatGrid(boolean populateGridsFromRight)
	{
		ArrayList<ValueObject> values = getValuesFromFlatGrid();
		
		Collections.sort(values, new ClinicalNotesDateComparator(form.getLocalContext().getDateSortOrder()));
		
		populateFlatGridFromValues(values, populateGridsFromRight);
	}

	private void populateFlatGridWithProcedures(PatientProcedureApptDetailVoCollection procedures)
	{
		form.grdProcedures().getRows().clear();
		
		if(procedures == null)
			return;
		
		for(int i=0; i<procedures.size(); i++)
		{
			PatientProcedureApptDetailVo procedure = procedures.get(i);
			
			if(procedure == null)
				continue;
			
			addFlatProcedureRow(procedure);
			
			//addPerformedProcedureRow(procedure);
		}
	}
	
	private void addFlatProcedureRow(PatientProcedureApptDetailVo procedure)
	{
		if(procedure == null)
			return;
		
		String procedureDateTime = "";
		if(procedure.getAuthoringInformationIsNotNull() && procedure.getAuthoringInformation().getAuthoringDateTime() != null)
			procedureDateTime = procedure.getAuthoringInformation().getAuthoringDateTime().toString();
		
		String consultant = "";
		if(procedure.getAuthoringInformationIsNotNull() && procedure.getAuthoringInformation().getAuthoringHcpIsNotNull())
			consultant = procedure.getAuthoringInformation().getAuthoringHcp().getIHcpName();
		
		String title = procedure.getProcedure() != null ? procedure.getProcedure().getProcedureName() : procedure.getProcedureDescription();
		
		if(Boolean.TRUE.equals(procedure.getIsPrimaryProcedure()))
		{
			title = "<b>" + title + "</b>";
		}
		
		populateFlatRow(procedure, procedureDateTime, title, consultant, getDianoseOrProcedureImage(PROCEDURES), false);
	}

	private void populateFlatGridWithDiagnoses(PatientDiagnosisApptDetailVoCollection diagnosis)
	{
		form.grdDiagnosis().getRows().clear();
		
		if(diagnosis == null)
			return;
		
		for(int i=0; i<diagnosis.size(); i++)
		{
			PatientDiagnosisApptDetailVo diagnose = diagnosis.get(i);
			
			if(diagnose == null)
				continue;
			
			CSPrimaryDiagnosisForClinicalNotesVo primaryDiagnosis = getPrimaryDiagnosisRecord(diagnose);
			
			addFlatDiagnoseRow(diagnose, primaryDiagnosis != null);
			
			//addDifferentialDiagnoseRow(diagnose, primaryDiagnosis != null);
		}
	}
	
	private void addFlatDiagnoseRow(PatientDiagnosisApptDetailVo diagnose, boolean isPrimary)
	{
		if(diagnose == null)
			return;
		
		String diagnoseDateTime = "";
		if(diagnose.getAuthoringInfoIsNotNull() && diagnose.getAuthoringInfo().getAuthoringDateTime() != null)
			diagnoseDateTime = diagnose.getAuthoringInfo().getAuthoringDateTime().toString();
		
		String consultant = "";
		if(diagnose.getAuthoringInfoIsNotNull() && diagnose.getAuthoringInfo().getAuthoringHcpIsNotNull())
			consultant = diagnose.getAuthoringInfo().getAuthoringHcp().getIHcpName();
		
		String title = diagnose.getDiagnosis() != null ? diagnose.getDiagnosis().getDiagnosisName() : diagnose.getDiagnosisDescription();
		
		if(isPrimary)
		{
			title = "<b>" + title + "</b>";
		}
		
		populateFlatRow(diagnose, diagnoseDateTime, title, consultant, getDianoseOrProcedureImage(DIAGNOSIS), false);
	}

	private void populateFlatGridWithNotes(AppointmentClinicalNotesVoCollection clinicalNotes)
	{
		if(clinicalNotes == null || clinicalNotes.size() == 0)
			return;
		
		for(int i=0; i<clinicalNotes.size(); i++)
		{
			AppointmentClinicalNotesVo note = clinicalNotes.get(i);
			
			if(note == null)
				continue;
			
			addFlatNoteRow(note);
		}	
	}
	
	private void addFlatNoteRow(AppointmentClinicalNotesVo note)
	{
		if(note == null)
			return;
		
		String noteDateTime = "";
		if(note.getAuthoringInformationIsNotNull() && note.getAuthoringInformation().getAuthoringDateTime() != null)
			noteDateTime = note.getAuthoringInformation().getAuthoringDateTime().toString();
		
		String consultant = "";
		if(note.getAuthoringInformationIsNotNull() && note.getAuthoringInformation().getAuthoringHcpIsNotNull())
			consultant = note.getAuthoringInformation().getAuthoringHcp().getIHcpName();
		
		populateFlatRow(note, noteDateTime, note.getClinicalNote(), consultant, getNoteImage(note.getClinicalNoteType(), note.getSysInfo(), note.getCorrespondenceMadeActiveDateTime()) , true);
	}
	
	private Image getNoteImage(ClinicalNoteTypeForAnAppointment noteType, SystemInformation systemInformation, DateTime activeDateTime)
	{
		if(noteType == null)
			return null;
			
		boolean bUpdated = systemInformation != null && systemInformation.getLastupdateDateTime() != null;
		
		if(ClinicalNoteTypeForAnAppointment.CLINICAL_NOTES.equals(noteType) && bUpdated)
			return form.getImages().RefMan.ClinicalNotesChildEdited16;
		else if(ClinicalNoteTypeForAnAppointment.CLINICAL_NOTES.equals(noteType))
			return form.getImages().RefMan.ClinicalNotesChild16;
		else if(ClinicalNoteTypeForAnAppointment.CORRESPONDENCE_NOTES.equals(noteType) 
			&& bUpdated && activeDateTime != null && systemInformation != null 
			&& systemInformation.getLastupdateDateTime() != null
			&& systemInformation.getLastupdateDateTime().isGreaterThan(activeDateTime))
			return form.getImages().RefMan.CorrespondenceNotesChildEdited16;
		else if(ClinicalNoteTypeForAnAppointment.CORRESPONDENCE_NOTES.equals(noteType))
			return form.getImages().RefMan.CorrespondenceNotesChild16;
		else if(ClinicalNoteTypeForAnAppointment.FOLLOW_UP_NOTES.equals(noteType) && bUpdated)
			return form.getImages().RefMan.FollowUpNotesChildEdited16;
		else if(ClinicalNoteTypeForAnAppointment.FOLLOW_UP_NOTES.equals(noteType))
			return form.getImages().RefMan.FollowUpNotesChild16;
		else
			return form.getImages().RefMan.ClinicalNotesChild16;
	}

	private void populateGridWithProcedures(PatientProcedureApptDetailVoCollection procedures)
	{
		form.grdProcedures().getRows().clear();
		
		if(procedures == null)
			return;
		
		for(PatientProcedureApptDetailVo procedure : procedures)
		{
			if(procedure == null)
				continue;
			
			DynamicGridRow appointmentRow = getAppointmentRow(procedure.getAppointment());
			DynamicGridRow categoryRow = getCategoryRow(appointmentRow, null, PROCEDURES_CAT, true);
			
			if(categoryRow == null)
				return;
			
			addProcedureRow(categoryRow, procedure, getDianoseOrProcedureImage(PROCEDURES));
			
			categoryRow.getCells().get(getCol(COL_TITLE_HIERARCHICAL)).setValue(buildCategoryTitle(null, PROCEDURES_CAT, categoryRow.getRows().size()));
			
			addPerformedProcedureRow(procedure);
		}
	}

	private void addPerformedProcedureRow(PatientProcedureApptDetailVo procedure)
	{
		if(procedure == null)
			return;
		
		grdProceduresRow row = form.grdProcedures().getRows().newRow();
		String title = procedure.getProcedure() != null ? procedure.getProcedure().getProcedureName() : procedure.getProcedureDescription();
		String titleBold = title;
		
		if(Boolean.TRUE.equals(procedure.getIsPrimaryProcedure()))
		{
			titleBold = "<b>" + title + "</b>";
		}
		
		row.setColProcedure(titleBold);
		row.setTooltip(title);
		row.setValue(procedure);
	}

	private void addProcedureRow(DynamicGridRow categoryRow, PatientProcedureApptDetailVo procedure, Image rowImage)
	{
		if(categoryRow == null)
			return;
		
		if(procedure == null)
			return;
		
		DynamicGridRow 	diagnoseRow = categoryRow.getRows().newRow();
		diagnoseRow.setSelectable(true);
		diagnoseRow.setExpandedImage(rowImage);
		diagnoseRow.setCollapsedImage(rowImage);
		diagnoseRow.setValue(procedure);
		
		DynamicGridCell cellProc = diagnoseRow.getCells().newCell(getCol(COL_TITLE_HIERARCHICAL), DynamicCellType.STRING);	
		String title = getTitleFromProcedure(procedure);
		
		String titleBold = title;
		
		if(Boolean.TRUE.equals(procedure.getIsPrimaryProcedure()))
		{
			titleBold = "<b>" + title + "</b>";
		}
		
		cellProc.setReadOnly(true);
		//WDEV-14980
		String tooltip=getTooltipFromProcedure(procedure);
		cellProc.setTooltip(tooltip);
		
		cellProc.setValue(titleBold);
	}

	//WDEV-14980
	private String getTooltipFromProcedure(PatientProcedureApptDetailVo procedure)
	{
		if(procedure == null)
			return null;
		
		StringBuffer tooltip = new StringBuffer();
		
		tooltip.append(procedure.getProcDate()!=null ? procedure.getProcDate().toString()+" - ":"");//WDEV-15507
		tooltip.append((procedure.getProcedure() != null ? procedure.getProcedure().getProcedureName() : procedure.getProcedureDescription())+" - ");
		//WDEV-15507
		if (procedure.getProcedureStatus()!=null && procedure.getProcedureStatus().equals(PatientProcedureStatus.PERFORMED))
			tooltip.append("Complete - ");
		else if (procedure.getProcedureStatus()!=null && procedure.getProcedureStatus().equals(PatientProcedureStatus.INCOMPLETE))
			tooltip.append(procedure.getProcedureStatus().toString()+" - Reason: "+procedure.getIncompleteReason()+ " - ");
				
		tooltip.append(procedure.getAuthoringInformation() != null ? procedure.getAuthoringInformation().getAuthoringDateTime() : "");
		tooltip.append(" - " + (procedure.getAuthoringInformation() != null ? procedure.getAuthoringInformation().getAuthoringHcp().getIHcpName() : ""));
		
		return tooltip.toString();
	}

	private String getTitleFromProcedure(PatientProcedureApptDetailVo procedure)
	{
		if(procedure == null)
			return null;
		
		StringBuffer title = new StringBuffer();
		title.append(procedure.getAuthoringInformation() != null ? procedure.getAuthoringInformation().getAuthoringDateTime() : "");
		title.append(" - " + (procedure.getProcedure() != null ? procedure.getProcedure().getProcedureName() : procedure.getProcedureDescription()));
		title.append(" - " + (procedure.getAuthoringInformation() != null ? procedure.getAuthoringInformation().getAuthoringHcp().getIHcpName() : ""));
		
		return title.toString();
		
	}

	private void populateGridWithDiagnoses(PatientDiagnosisApptDetailVoCollection diagnosis)
	{
		form.grdDiagnosis().getRows().clear();
		
		if(diagnosis == null)
			return;
		
		for(PatientDiagnosisApptDetailVo diagnose : diagnosis)
		{
			if(diagnose == null)
				continue;
			
			DynamicGridRow appointmentRow = getAppointmentRow(diagnose.getAppointment());
			DynamicGridRow categoryRow = getCategoryRow(appointmentRow, null, DIAGNOSIS_CAT, true);
			
			if(categoryRow == null)
				return;
			
			CSPrimaryDiagnosisForClinicalNotesVo primaryDiagnosis = getPrimaryDiagnosisRecord(diagnose);
			
			addDiagnoseRow(categoryRow, diagnose, getDianoseOrProcedureImage(DIAGNOSIS), primaryDiagnosis != null);
			
			categoryRow.getCells().get(getCol(COL_TITLE_HIERARCHICAL)).setValue(buildCategoryTitle(null, DIAGNOSIS_CAT, categoryRow.getRows().size()));
			
			addDifferentialDiagnoseRow(diagnose, primaryDiagnosis != null);
		}
	}

	private void addDifferentialDiagnoseRow(PatientDiagnosisApptDetailVo diagnose, boolean isPrimary)
	{
		if(diagnose == null)
			return;
		
		grdDiagnosisRow row = form.grdDiagnosis().getRows().newRow();
		String title = diagnose.getDiagnosis() != null ? diagnose.getDiagnosis().getDiagnosisName() : diagnose.getDiagnosisDescription();
		String titleBold = title;
		
		if(isPrimary)
		{
			titleBold = "<b>" + title + "</b>";
		}
		
		row.setColDiagnose(titleBold);
		row.setTooltip(title);
		row.setValue(diagnose);
	}

	private void addDiagnoseRow(DynamicGridRow categoryRow, PatientDiagnosisApptDetailVo diagnose, Image rowImage, boolean isPrimary)
	{
		if(categoryRow == null)
			return;
		
		if(diagnose == null)
			return;
		
		DynamicGridRow 	diagnoseRow = categoryRow.getRows().newRow();
		diagnoseRow.setSelectable(true);
		diagnoseRow.setExpandedImage(rowImage);
		diagnoseRow.setCollapsedImage(rowImage);
		diagnoseRow.setValue(diagnose);
		
		DynamicGridCell cellDiag = diagnoseRow.getCells().newCell(getCol(COL_TITLE_HIERARCHICAL), DynamicCellType.STRING);	
		String title = getTitleFromDiagnose(diagnose);
		String titleBold = title;
		
		if(isPrimary)
		{
			titleBold = "<b>" + title + "</b>";
		}
		
		cellDiag.setReadOnly(true);
		cellDiag.setTooltip(title);
		cellDiag.setValue(titleBold);
	}
	
	private CSPrimaryDiagnosisForClinicalNotesVo getPrimaryDiagnosisRecord(PatientDiagnosisApptDetailVo voPatDiagnosis)
	{
		if (voPatDiagnosis == null || voPatDiagnosis.getPrimaryForCareSpells() == null)
			return null;

		CSPrimaryDiagnosisForClinicalNotesVoCollection voColl = voPatDiagnosis.getPrimaryForCareSpells();
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			boolean sameDiagnosis = voColl.get(i).getDiagnosisIsNotNull() && voColl.get(i).getDiagnosis().equals(voPatDiagnosis);
			boolean sameCareContext = voColl.get(i).getCareContextIsNotNull() && voColl.get(i).getCareContext().equals(form.getGlobalContext().Core.getCurrentCareContext());

			if (sameDiagnosis && sameCareContext && voColl.get(i).getIsActiveIsNotNull() && voColl.get(i).getIsActive())
				return voColl.get(i);
		}

		return null;
	}

	private String getTitleFromDiagnose(PatientDiagnosisApptDetailVo diagnose)
	{
		if(diagnose == null)
			return null;
		
		StringBuffer title = new StringBuffer();
		title.append(diagnose.getAuthoringInfo() != null ? diagnose.getAuthoringInfo().getAuthoringDateTime() : "");
		title.append(" - " + (diagnose.getDiagnosis() != null ? diagnose.getDiagnosis().getDiagnosisName() : diagnose.getDiagnosisDescription()));
		title.append(" - " + ((diagnose.getAuthoringInfo() != null && diagnose.getAuthoringInfo().getAuthoringHcp() != null) ? diagnose.getAuthoringInfo().getAuthoringHcp().getIHcpName() : ""));
		
		return title.toString();
	}

	private Image getDianoseOrProcedureImage(int type)
	{
		if(type == DIAGNOSIS)
			return form.getImages().RefMan.Diagnosis16;
		else if(type == PROCEDURES)
			return form.getImages().RefMan.Procedures16;
		
		return null;
	}

	private void populateGridWithNotes(AppointmentClinicalNotesVoCollection clinicalNotes)
	{
		if(clinicalNotes == null)
			return;
		
		for(AppointmentClinicalNotesVo note : clinicalNotes)
		{
			if(note == null)
				continue;
			
			DynamicGridRow appointmentRow = getAppointmentRow(note.getAppointment());
			DynamicGridRow categoryRow = getCategoryRow(appointmentRow, note.getClinicalNoteType(), null, true);
			
			if(categoryRow == null)
				return;
			
			addNoteRow(categoryRow, note, getNoteImage(note.getClinicalNoteType(), note.getSysInfo(), note.getCorrespondenceMadeActiveDateTime()));
			
			categoryRow.getCells().get(getCol(COL_TITLE_HIERARCHICAL)).setValue(buildCategoryTitle(note.getClinicalNoteType(), null, categoryRow.getRows().size()));
		}
	}


	private void addNoteRow(DynamicGridRow categoryRow, AppointmentClinicalNotesVo note, Image rowImage)
	{
		if(categoryRow == null)
			return;
		
		DynamicGridRow 	noteRow = categoryRow.getRows().newRow();
		noteRow.setSelectable(true);
		noteRow.setExpandedImage(rowImage);
		noteRow.setCollapsedImage(rowImage);
		noteRow.setValue(note);
		
		DynamicGridCell cellNote = noteRow.getCells().newCell(getCol(COL_TITLE_HIERARCHICAL), DynamicCellType.STRING);	
		String title = getTitleFromNote(note);
		
		cellNote.setReadOnly(true);
		cellNote.setValue(title);
		cellNote.setTooltip(title);
	}

	private String getTitleFromNote(AppointmentClinicalNotesVo note)
	{
		if(note == null)
			return null;
		
		StringBuffer title = new StringBuffer();
		title.append(note.getAuthoringInformation().getAuthoringDateTime());
		title.append(" - " + note.getAuthoringInformation().getAuthoringHcp().getIHcpName());
		title.append(" - " + note.getClinicalNote());
		
		return title.toString();
	}

	private DynamicGridRow getCategoryRow(DynamicGridRow appointmentRow, ClinicalNoteTypeForAnAppointment noteType, Integer diagnoseOrProcedure, boolean addNewRow)
	{
		if(appointmentRow == null)
			return null;
		
		for(int i=0; i<appointmentRow.getRows().size(); i++)
		{
			if((noteType != null && appointmentRow.getRows().get(i).getValue().equals(noteType.getID()))
				|| appointmentRow.getRows().get(i).getValue().equals(diagnoseOrProcedure))
			{
				return appointmentRow.getRows().get(i);
			}
		}
		
		if(addNewRow)
			return addCategoryRow(appointmentRow, noteType, diagnoseOrProcedure, getCategoryNoteImage(noteType, diagnoseOrProcedure));
		
		return null;
	}

	private Image getCategoryNoteImage(ClinicalNoteTypeForAnAppointment noteType, Integer diagnoseOrProcedure)
	{
		if(ClinicalNoteTypeForAnAppointment.CLINICAL_NOTES.equals(noteType))
			return form.getImages().RefMan.ClinicalNotes16;
		else if(ClinicalNoteTypeForAnAppointment.CORRESPONDENCE_NOTES.equals(noteType))
			return form.getImages().RefMan.CorrespondenceNotes16;
		else if(ClinicalNoteTypeForAnAppointment.FOLLOW_UP_NOTES.equals(noteType))
			return form.getImages().RefMan.FollowUpNotes16;
		else if(diagnoseOrProcedure != null && diagnoseOrProcedure.equals(DIAGNOSIS_CAT))
			return form.getImages().RefMan.Diagnosis16;
		else if(diagnoseOrProcedure != null && diagnoseOrProcedure.equals(PROCEDURES_CAT))
			return form.getImages().RefMan.Procedures16;
		else
			return form.getImages().RefMan.ClinicalNotes16;
	}

	private DynamicGridRow addCategoryRow(DynamicGridRow appointmentRow, ClinicalNoteTypeForAnAppointment noteType, Integer diagnoseOrProcedure, Image rowImage)
	{
		DynamicGridRow clinicNotesRow = appointmentRow.getRows().newRow();
		clinicNotesRow.setSelectable(false);	
		clinicNotesRow.setExpanded(false);
		
		clinicNotesRow.setExpandedImage(rowImage);
		clinicNotesRow.setCollapsedImage(rowImage);
		
		clinicNotesRow.setReadOnly(true);
		
		clinicNotesRow.setValue(noteType != null ? noteType.getID() : diagnoseOrProcedure);
		DynamicGridCell cell = clinicNotesRow.getCells().newCell(getCol(COL_TITLE_HIERARCHICAL), DynamicCellType.STRING);	
		
		String title = buildCategoryTitle(noteType, diagnoseOrProcedure, null);
		
		cell.setReadOnly(true);
		cell.setValue(title);
		
		return clinicNotesRow;
	}

	private String buildCategoryTitle(ClinicalNoteTypeForAnAppointment noteType, Integer diagnoseOrProcedure, Integer size)
	{
		StringBuilder title = new StringBuilder();
		
		title.append("<b>");
		
		if(noteType != null)
		{
			title.append(noteType.getText());
		}
		else if(diagnoseOrProcedure != null)
		{
			if(diagnoseOrProcedure.equals(DIAGNOSIS_CAT))
			{
				title.append(DIAGNOSIS_CAT_STRING);
			}
			else
			{
				title.append(PROCEDURES_CAT_STRING);
			}
		}
		
		if(size != null)
		{
			title.append(" (" + size + ")");
		}
		
		title.append("</b>");
		
		return title.toString();
	}

	private DynamicGridRow getAppointmentRow(Booking_AppointmentRefVo appointment)
	{
		if(appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;
		
		for(int i=0; i<form.dyngrdNotes().getRows().size(); i++)
		{
			if(form.dyngrdNotes().getRows().get(i).getValue() instanceof BookingAppointmentForClinicalNotesVo
				&& ((BookingAppointmentForClinicalNotesVo) form.dyngrdNotes().getRows().get(i).getValue()).getID_Booking_Appointment() .equals(appointment.getID_Booking_Appointment()))
			{
				return form.dyngrdNotes().getRows().get(i);
			}
		}
		
		return null;
	}

	private void populateGridWithAppointments()
	{
		BookingAppointmentForClinicalNotesVoCollection appts = domain.listAppointments(form.getGlobalContext().RefMan.getCatsReferral());
		
		if(appts == null)
			return;
		
		appts.sort(new ClinicalNotesDateComparator(SortOrder.DESCENDING));
		
		for(int i=0; i<appts.size(); i++)
		{
			addApptRow(appts.get(i));
		}
	}
	
	/*
	private void addFlatApptRow(BookingAppointmentForClinicalNotesVo appt)
	{
		if(appt == null)
			return;
		
		Date apptDate = appt.getAppointmentDate();
		Time apptTime = appt.getApptStartTime();
		
		DateTime apptDateTime = new DateTime(apptDate, apptTime);
		String displayAppt = buildAppointmentTitle(appt);
		
		populateFlatRow(appt, apptDateTime != null ? apptDateTime.toString() : "", displayAppt, "", form.getImages().RefMan.Appointment16);
	}*/

	private void addApptRow(BookingAppointmentForClinicalNotesVo appt)
	{
		if(appt == null)
			return;
		
		DynamicGridRow row = form.dyngrdNotes().getRows().newRow();
		
		row.setValue(appt);
		row.setExpanded(false);
		
		populateApptRow(appt, row);
	}
	
	private void populateApptRow(BookingAppointmentForClinicalNotesVo appt, DynamicGridRow parentRow)
	{
		DynamicGridColumn column = null;
		DynamicGridCell cell = null;
		
		column = form.dyngrdNotes().getColumns().getByIdentifier(COL_TITLE_HIERARCHICAL);
		cell = parentRow.getCells().newCell(column, DynamicCellType.STRING);
		
		String displayAppt = buildAppointmentTitle(appt);
		
		cell.setReadOnly(true);
		parentRow.setCollapsedImage(form.getImages().RefMan.Appointment16);
		parentRow.setExpandedImage(form.getImages().RefMan.Appointment16);
		
		cell.setValue(displayAppt);
	}

	private String buildAppointmentTitle(BookingAppointmentForClinicalNotesVo appt)
	{
		String displayAppt = "";
		if(appt.getAppointmentDateIsNotNull())
			displayAppt += appt.getAppointmentDate();
		if(appt.getApptStartTimeIsNotNull())
			displayAppt += " " + appt.getApptStartTime();
		if(appt.getApptStatusIsNotNull())
			displayAppt += " - " + appt.getApptStatus().getIItemText();
		
		if(appt.getSessionIsNotNull())
		{
			displayAppt += " - " + appt.getSession().getName();
			if(appt.getSession().getServiceIsNotNull())
				displayAppt += " - " + appt.getSession().getService().getServiceName();
		}
		return displayAppt;
	}
	
	private DynamicGridColumn getCol(String identifier) 
	{
		return form.dyngrdNotes().getColumns().getByIdentifier(identifier);
	}
	
	private void initialize()
	{
		form.GroupView().setValue(GroupViewEnumeration.rdoAppointment);
		
		Object user = domain.getHcpLiteUser();
		
		if(user instanceof HcpLiteVo)
		{
			form.getLocalContext().setHcpUser((HcpLiteVo) user);
		}
		
		Object mosUser = domain.getMosUser();
		
		if(mosUser instanceof MemberOfStaffRefVo)
		{
			form.getLocalContext().setMosUser((MemberOfStaffRefVo) mosUser);
		}
		
		CatsReferralForClinicalNotesVoCollection previousReferralsDialog = domain.getPreviousReferrals(form.getGlobalContext().RefMan.getCatsReferral(), form.getGlobalContext().Core.getPatientShort());
		form.getGlobalContext().RefMan.setPreviousReferrals(previousReferralsDialog);
	}
	
	private void initializeFlatGrid()
	{
		form.dyngrdNotes().clear();
		
		DynamicGridColumn clinicalNotesColumn = form.dyngrdNotes().getColumns().newColumn("", true);
		clinicalNotesColumn.setIdentifier(COL_IMAGE_FLAT);
		clinicalNotesColumn.setWidth(30);
		
		clinicalNotesColumn = form.dyngrdNotes().getColumns().newColumn("", true);
		clinicalNotesColumn.setIdentifier(COL_DATE_FLAT);
		clinicalNotesColumn.setCaption("Date");
		clinicalNotesColumn.setSortMode(SortMode.MANUAL);
		clinicalNotesColumn.setWidth(100);
		
		clinicalNotesColumn = form.dyngrdNotes().getColumns().newColumn("", true);
		clinicalNotesColumn.setIdentifier(COL_TITLE_FLAT);
		clinicalNotesColumn.setIdentifier(COL_TITLE_FLAT);
		clinicalNotesColumn.setCaption("");
		clinicalNotesColumn.setWidth(220);
		
		clinicalNotesColumn = form.dyngrdNotes().getColumns().newColumn("", true);
		clinicalNotesColumn.setIdentifier(COL_CONSULTANT_FLAT);
		clinicalNotesColumn.setCaption("Consultant");
		clinicalNotesColumn.setSortMode(SortMode.MANUAL);
		clinicalNotesColumn.setWidth(-1);
	}

	private void initializeHierarchicalGrid() 
	{
		form.dyngrdNotes().clear();
		
		DynamicGridColumn clinicalNotesColumn = form.dyngrdNotes().getColumns().newColumn("", true);
		clinicalNotesColumn.setIdentifier(COL_TITLE_HIERARCHICAL);
		clinicalNotesColumn.setWidth(-1);
	}
	
	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.getForms().RefMan.ClinicalNoteDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			form.getLocalContext().setSelectedInstance(form.getGlobalContext().RefMan.getAppointmentClinicalNote());
		}
		else if(form.getForms().RefMan.AppointmentPatientDiagnosisDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			CSPrimaryDiagnosisForClinicalNotesVo primary = getPrimaryDiagnosisRecord(form.getGlobalContext().RefMan.getAppointmentPatientDiagnosis());
			
			if(primary != null)
			{
				clearPreviousPrimaryDiagnosis(form.getGlobalContext().RefMan.getAppointmentPatientDiagnosis());
			}
			
			form.getLocalContext().setSelectedInstance(form.getGlobalContext().RefMan.getAppointmentPatientDiagnosis());
		}
		else if(form.getForms().RefMan.AppointmentPatientProcedureDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if(Boolean.TRUE.equals(form.getGlobalContext().RefMan.getAppointmentPatientProcedure().getIsPrimaryProcedure()))
			{
				clearPreviousPrimaryProcedure(form.getGlobalContext().RefMan.getAppointmentPatientProcedure());
			}
			
			form.getLocalContext().setSelectedInstance(form.getGlobalContext().RefMan.getAppointmentPatientProcedure());
		}
		else if (formName.equals(form.getForms().Core.RieConfirmationDialog) && DialogResult.OK.equals(result))//	WDEV-14006
		{
			doRIE();//	WDEV-14006
		}
		else if(form.getForms().RefMan.PatientProcedureDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if(form.dyngrdNotes().getValue() instanceof BookingAppointmentForClinicalNotesVo)
			{
				form.getLocalContext().setSelectedInstance((BookingAppointmentForClinicalNotesVo) form.dyngrdNotes().getValue());
				form.getLocalContext().setSelectedCategory(PROCEDURES_CAT);
			}
		}
		else if(form.getForms().RefMan.PatientDiagnosisDialog.equals(formName) && DialogResult.OK.equals(result))
		{
			if(form.dyngrdNotes().getValue() instanceof BookingAppointmentForClinicalNotesVo)
			{
				form.getLocalContext().setSelectedInstance((BookingAppointmentForClinicalNotesVo) form.dyngrdNotes().getValue());
				form.getLocalContext().setSelectedCategory(DIAGNOSIS_CAT);
			}
		}
		
		open();
		updateControlsState();
	}
	
	//	WDEV-14006
	private void doRIE()
	{
		boolean isStale = false;
		
		if(form.getLocalContext().getRIERecord() instanceof AppointmentClinicalNotesVo)
		{
			form.getLocalContext().setSelectedInstance(getAppointment(((AppointmentClinicalNotesVo) form.getLocalContext().getRIERecord()).getAppointment()));
			form.getLocalContext().setSelectedCategory(((AppointmentClinicalNotesVo) form.getLocalContext().getRIERecord()).getClinicalNoteType().getID());
			
			if(domain.isStaleOnNote((AppointmentClinicalNotesVo) form.getLocalContext().getRIERecord()))
			{
				isStale = true;
			}
		}
		else if(form.getLocalContext().getRIERecord() instanceof PatientDiagnosisApptDetailVo)
		{
			form.getLocalContext().setSelectedInstance(getAppointment(((PatientDiagnosisApptDetailVo) form.getLocalContext().getRIERecord()).getAppointment()));
			form.getLocalContext().setSelectedCategory(DIAGNOSIS_CAT);
			
			if(domain.isStaleOnDiagnosis((PatientDiagnosisApptDetailVo) form.getLocalContext().getRIERecord()))
			{
				isStale = true;
			}
		}
		else if(form.getLocalContext().getRIERecord() instanceof PatientProcedureApptDetailVo)
		{
			form.getLocalContext().setSelectedInstance(getAppointment(((PatientProcedureApptDetailVo) form.getLocalContext().getRIERecord()).getAppointment()));
			form.getLocalContext().setSelectedCategory(PROCEDURES_CAT);
			
			if(domain.isStaleOnProcedure((PatientProcedureApptDetailVo) form.getLocalContext().getRIERecord()))
			{
				isStale = true;
			}
		}
		
		if(isStale)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		
		try
		{
			domain.markAsRie(form.getLocalContext().getRIERecord(), form.getForms().RefMan.ClinicalNotesCustomControl, form.getGlobalContext().Core.getPatientShort().getID_Patient(), 
							form.getGlobalContext().Core.getCurrentClinicalContactIsNotNull()?form.getGlobalContext().Core.getCurrentClinicalContact().getID_ClinicalContact():null,
							form.getGlobalContext().Core.getCurrentCareContextIsNotNull()?form.getGlobalContext().Core.getCurrentCareContext().getID_CareContext():null,
							form.getGlobalContext().Core.getRieMessage());
			

			if(form.getLocalContext().getRIERecord() instanceof AppointmentClinicalNotesVo
				&& !isOtherNoteOfThisTypeActive((AppointmentClinicalNotesVo) form.getLocalContext().getRIERecord()))
				domain.updateReferral((AppointmentClinicalNotesVo) form.getLocalContext().getRIERecord());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
	}

	private boolean isOtherNoteOfThisTypeActive(AppointmentClinicalNotesVo note)
	{
		if (note == null)
			return false;
			
		AppointmentClinicalNotesVoCollection currentNotes = form.getLocalContext().getReferralClinicalNotes().getClinicalNotes();
		for (int i = 0 ; currentNotes != null && i < currentNotes.size() ; i++)
		{
			if (note.getNoteTypeIsNotNull()
				&& note.getNoteType().equals(currentNotes.get(i).getNoteType()) 
				&& ReportNoteStatus.ACTIVE.equals(currentNotes.get(i).getNoteStatus()) 
				&& !note.equals(currentNotes.get(i)))
				return true;	
		}
		return false;
	}

	private BookingAppointmentForClinicalNotesVo getAppointment(Booking_AppointmentRefVo appointment)
	{
		if(appointment == null || appointment.getID_Booking_Appointment() == null)
			return null;
		
		for(int i=0; i<form.dyngrdNotes().getRows().size(); i++)
		{
			if(form.dyngrdNotes().getRows().get(i).getValue() instanceof BookingAppointmentForClinicalNotesVo
				&& ((BookingAppointmentForClinicalNotesVo) form.dyngrdNotes().getRows().get(i).getValue()).getID_Booking_Appointment() .equals(appointment.getID_Booking_Appointment()))
			{
				return (BookingAppointmentForClinicalNotesVo) form.dyngrdNotes().getRows().get(i).getValue();
			}
		}
		
		return null;
	}

	private void clearPreviousPrimaryProcedure(PatientProcedureApptDetailVo patientProcedure)
	{
		for(int i=0; i< form.grdProcedures().getRows().size(); i++)
		{
			if(!form.grdProcedures().getRows().get(i).getValue().equals(patientProcedure))
			{
				if(Boolean.TRUE.equals(form.grdProcedures().getRows().get(i).getValue().getIsPrimaryProcedure()))
				{
					PatientProcedureApptDetailVo previousPrimaryProcedure = form.grdProcedures().getRows().get(i).getValue();
					previousPrimaryProcedure.setIsPrimaryProcedure(null);
					previousPrimaryProcedure.validate();
					
					try
					{
						domain.savePatientProcedure(previousPrimaryProcedure);
					}
					catch (StaleObjectException e)
					{
						e.printStackTrace();
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
						open();
					}
				}
			}
		}
	}
	
	private void clearPreviousPrimaryDiagnosis(PatientDiagnosisApptDetailVo patientDiagnosis)
	{
		for(int i=0; i< form.grdDiagnosis().getRows().size(); i++)
		{
			if(!form.grdDiagnosis().getRows().get(i).getValue().equals(patientDiagnosis))
			{
				CSPrimaryDiagnosisForClinicalNotesVo previousPrimary = getPrimaryDiagnosisRecord(form.grdDiagnosis().getRows().get(i).getValue());
				
				if(previousPrimary != null)
				{
					PatientDiagnosisApptDetailVo previousPrimaryDiagnosis = form.grdDiagnosis().getRows().get(i).getValue();
					previousPrimaryDiagnosis.setPrimaryForCareSpells(null);
					previousPrimaryDiagnosis.validate();
					
					try
					{
						domain.savePatientDiagnosis(previousPrimaryDiagnosis);
					}
					catch (StaleObjectException e)
					{
						e.printStackTrace();
						engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
						open();
					}
				}
			}
		}
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.RefManNamespace.ClinicalNotesMenu.ADD_DIAGNOSIS:
				addDiagnosis();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ClinicalNotesMenu.ADD_PROCEDURE:
				addProcedures();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ClinicalNotesMenu.ADD_NOTES:
				addNotes();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ClinicalNotesMenu.EDIT_NOTE:
				editNote();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ClinicalNotesMenu.EDIT_DIAGNOSE:
				editDiagnosis();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ClinicalNotesMenu.EDIT_PROCEDURE:
				editProcedure();
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ClinicalNotesMenu.DELETE_NOTE:
				markRecordAsRie();//	WDEV-14006
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ClinicalNotesMenu.DELETE_DIAGNOSIS:
				markRecordAsRie();//	WDEV-14006
			break;
			
			case GenForm.ContextMenus.RefManNamespace.ClinicalNotesMenu.DELETE_PROCEDURE:
				markRecordAsRie();//	WDEV-14006
			break;	
		}
		
		updateControlsState();
	}

	//	WDEV-14006
	private void markRecordAsRie()
	{
		if(form.dyngrdNotes().getValue() instanceof AppointmentClinicalNotesVo || form.dyngrdNotes().getValue() instanceof PatientDiagnosisApptDetailVo || form.dyngrdNotes().getValue() instanceof PatientProcedureApptDetailVo)
		{
			form.getLocalContext().setRIERecord((ValueObject) form.dyngrdNotes().getValue());
			engine.open(form.getForms().Core.RieConfirmationDialog);
		}
	}

	/*	WDEV-14006
	private void rieProcedure()
	{
		if(form.dyngrdNotes().getValue() instanceof PatientProcedureApptDetailVo)
		{
			ReferralClinicalNotesVo referralClinicalNotes = form.getLocalContext().getReferralClinicalNotes();
			
			if(domain.isStaleOnProcedure((PatientProcedureApptDetailVo) form.dyngrdNotes().getValue()))
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
			
			referralClinicalNotes.getProcedures().remove((PatientProcedureApptDetailVo) form.dyngrdNotes().getValue());
			
			if(deleteDiagnosisOrProcedure(referralClinicalNotes, (PatientProcedureApptDetailVo) form.dyngrdNotes().getValue()))
				open();
		}
	}*/

	/*	WDEV-14006
	private void rieDiagnosis()
	{
		if(form.dyngrdNotes().getValue() instanceof PatientDiagnosisApptDetailVo)
		{
			ReferralClinicalNotesVo referralClinicalNotes = form.getLocalContext().getReferralClinicalNotes();
			
			if(domain.isStaleOnDiagnosis((PatientDiagnosisApptDetailVo) form.dyngrdNotes().getValue()))
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
			
			referralClinicalNotes.getDiagnosis().remove((PatientDiagnosisApptDetailVo) form.dyngrdNotes().getValue());
			
			if(deleteDiagnosisOrProcedure(referralClinicalNotes, (PatientDiagnosisApptDetailVo) form.dyngrdNotes().getValue()))
				open();
		}
	}

	private boolean deleteDiagnosisOrProcedure(ReferralClinicalNotesVo referralClinicalNotes, ValueObject diagnosisOrProcedure)
	{
		String[] errors = referralClinicalNotes.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.deleteDiagnosisOrProcedure(referralClinicalNotes, diagnosisOrProcedure);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.getMessage());
			return false;
		}
		
		return true;
	}*/

	private void editProcedure()
	{
		if(form.dyngrdNotes().getValue() instanceof PatientProcedureApptDetailVo)
		{
			PatientProcedureApptDetailVo procedure = (PatientProcedureApptDetailVo) form.dyngrdNotes().getValue();
			
			form.getGlobalContext().RefMan.setAppointmentPatientProcedure(procedure);
			
			engine.open(form.getForms().RefMan.AppointmentPatientProcedureDialog);
		}
	}

	private void editDiagnosis()
	{
		if(form.dyngrdNotes().getValue() instanceof PatientDiagnosisApptDetailVo)
		{
			PatientDiagnosisApptDetailVo diagnosis = (PatientDiagnosisApptDetailVo) form.dyngrdNotes().getValue();
			
			form.getGlobalContext().RefMan.setAppointmentPatientDiagnosis(diagnosis);
			
			engine.open(form.getForms().RefMan.AppointmentPatientDiagnosisDialog);
		}
	}

	/*	WDEV-14006
	private void rieNote()
	{
		if(form.dyngrdNotes().getValue() instanceof AppointmentClinicalNotesVo)
		{
			ReferralClinicalNotesVo referralClinicalNotes = form.getLocalContext().getReferralClinicalNotes();
			
			if(domain.isStaleOnNote((AppointmentClinicalNotesVo) form.dyngrdNotes().getValue()))
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
			
			referralClinicalNotes.getClinicalNotes().remove((AppointmentClinicalNotesVo) form.dyngrdNotes().getValue());
			
			if(save(referralClinicalNotes))
				open();
		}
	}*/

	/*	WDEV-14006
	private boolean save(ReferralClinicalNotesVo referralClinicalNotes)
	{
		String[] errors = referralClinicalNotes.validate();
		
		if(errors != null && errors.length > 0)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveReferralClinicalNotes(referralClinicalNotes);
		}
		catch (StaleObjectException e)
		{
			e.printStackTrace();
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		
		return true;
	}*/

	private void editNote()
	{
		if(form.dyngrdNotes().getValue() instanceof AppointmentClinicalNotesVo)
		{
			AppointmentClinicalNotesVo note = (AppointmentClinicalNotesVo) form.dyngrdNotes().getValue();
			form.getGlobalContext().RefMan.setAppointmentClinicalNote(domain.getAppointmentClinicalNote(note));
			
			if (form.getGlobalContext().RefMan.getAppointmentClinicalNote() == null)
			{
				engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
				open();
				return;
			}
			
			engine.open(form.getForms().RefMan.ClinicalNoteDialog);
		}
	}

	private void addNotes()
	{
		if(form.dyngrdNotes().getValue() instanceof BookingAppointmentForClinicalNotesVo)
		{
			AppointmentClinicalNotesVo note = new AppointmentClinicalNotesVo();
		
			note.setAppointment((Booking_AppointmentRefVo) form.dyngrdNotes().getValue());
			note.setCatsReferral(form.getGlobalContext().RefMan.getCatsReferral());
			
			AuthoringInformationVo auth = new AuthoringInformationVo();
			auth.setAuthoringHcp(form.getLocalContext().getHcpUser());
			auth.setAuthoringDateTime(new DateTime());
			
			note.setAuthoringInformation(auth);
			
			note.setAuthoringUser(form.getLocalContext().getMosUser());
			
			form.getGlobalContext().RefMan.setAppointmentClinicalNote(note);
			
			engine.open(form.getForms().RefMan.ClinicalNoteDialog);
		}
	}

	private void addProcedures()
	{
		if(form.dyngrdNotes().getValue() instanceof BookingAppointmentForClinicalNotesVo)
		{
			form.getGlobalContext().RefMan.setAppointmentForPatientDiagnosisOrProcedures((Booking_AppointmentRefVo) form.dyngrdNotes().getValue());
			engine.open(form.getForms().RefMan.PatientProcedureDialog);
		}
	}

	private void addDiagnosis()
	{
		if(form.dyngrdNotes().getValue() instanceof BookingAppointmentForClinicalNotesVo)
		{
			form.getGlobalContext().RefMan.setAppointmentForPatientDiagnosisOrProcedures((Booking_AppointmentRefVo) form.dyngrdNotes().getValue());
			engine.open(form.getForms().RefMan.PatientDiagnosisDialog);
		}
	}

	@Override
	protected void onDyngrdNotesRowSelectionChanged(DynamicGridRow row) throws PresentationLogicException
	{
		if(form.dyngrdNotes().getValue() instanceof BookingAppointmentForClinicalNotesVo)
			form.getLocalContext().setSelectedInstance((BookingAppointmentForClinicalNotesVo) form.dyngrdNotes().getValue());
		else if(form.dyngrdNotes().getValue() instanceof AppointmentClinicalNotesVo)
			form.getLocalContext().setSelectedInstance((AppointmentClinicalNotesVo) form.dyngrdNotes().getValue());
		else if(form.dyngrdNotes().getValue() instanceof PatientDiagnosisApptDetailVo)
			form.getLocalContext().setSelectedInstance((PatientDiagnosisApptDetailVo) form.dyngrdNotes().getValue());
		else if(form.dyngrdNotes().getValue() instanceof PatientProcedureApptDetailVo)
			form.getLocalContext().setSelectedInstance((PatientProcedureApptDetailVo) form.dyngrdNotes().getValue());
		else if(form.dyngrdNotes().getValue() instanceof PatientDocumentLiteVo)
		{
			viewPatientDocuments((PatientDocumentLiteVo) form.dyngrdNotes().getValue());
			form.getLocalContext().setSelectedInstance((PatientDocumentLiteVo) form.dyngrdNotes().getValue());
		}
		
		updateControlsState();
	}

	private void viewPatientDocuments(PatientDocumentLiteVo doc)
	{
		if(doc == null)
			return;
		
		ServerDocumentVo document = doc.getServerDocument();
		
		if (document != null)
		{
			String fileName = document.getFileName();
			String fullPath = getMaximsDocumentStorePath();

			fullPath += fileName;
				
			engine.open(form.getForms().Core.PatientDocumentView, new Object[] {fullPath.replace("/", "\\")});
			//engine.openUrl(fullPath);
		}
	}
	
	private String getMaximsDocumentStorePath()
	{
		String storePath = ConfigFlag.GEN.FILE_SERVER_URL.getValue();//WDEV-13366
		
		if(!(storePath.endsWith("/") || storePath.endsWith("\\")))
			storePath = storePath + "/";
				
		return storePath;
	}

	@Override
	protected void onRadioButtonGroupViewValueChanged() throws PresentationLogicException
	{
		form.getLocalContext().setDateSortOrder(SortOrder.DESCENDING);
		populateGridWithClinicalNotes();
		updateControlsState();
	}

	private void populateFlatRow(ValueObject vo, String date, String title, String consultant, Image image, boolean bWrapText)
	{
		DynamicGridRow row = form.dyngrdNotes().getRows().newRow();
		DynamicGridColumn column = null;
		DynamicGridCell cell = null;
		
		column = form.dyngrdNotes().getColumns().getByIdentifier(COL_IMAGE_FLAT);
		cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
		
		cell.setValue(form.getImages().RefMan.Procedures16);//image);
		
		column = form.dyngrdNotes().getColumns().getByIdentifier(COL_DATE_FLAT);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		
		cell.setValue(date);
		
		column = form.dyngrdNotes().getColumns().getByIdentifier(COL_TITLE_FLAT);
		if (bWrapText)
			cell = row.getCells().newCell(column, DynamicCellType.WRAPTEXT);
		else
			cell = row.getCells().newCell(column, DynamicCellType.STRING);
		
		cell.setValue(title);
		
		column = form.dyngrdNotes().getColumns().getByIdentifier(COL_CONSULTANT_FLAT);
		cell = row.getCells().newCell(column, DynamicCellType.STRING);
		
		cell.setValue(consultant);
		
		row.setReadOnly(true);
		row.setValue(vo);
	}

	@Override
	protected void onBtnPreviousClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.PreviousReferralsDialog);
	}
	
	@Override
	protected void onDyngrdNotesColumnHeaderClicked(DynamicGridColumn column)
	{
		DynamicGridColumn colDate = getCol(COL_DATE_FLAT);
		
		if(colDate.equals(column))
		{
			if(form.getLocalContext().getDateSortOrder() == null)
			{
				form.getLocalContext().setDateSortOrder(SortOrder.DESCENDING);
			}
			else
			{
				form.getLocalContext().setDateSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getDateSortOrder()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			
			sortFlatGrid(false);
		}
		
		DynamicGridColumn colHcp = getCol(COL_CONSULTANT_FLAT);
		
		if(colHcp.equals(column))
		{
			if(form.getLocalContext().getHcpSortOrder() == null)
			{
				form.getLocalContext().setHcpSortOrder(SortOrder.ASCENDING);
			}
			else
			{
				form.getLocalContext().setHcpSortOrder(SortOrder.ASCENDING.equals(form.getLocalContext().getHcpSortOrder()) ? SortOrder.DESCENDING : SortOrder.ASCENDING);
			}
			
			sortFlatGridAfterConsultant();
		}
		
		setSelectedInstance();
		updateControlsState();
	}
	
	private void sortFlatGridAfterConsultant()
	{
		ArrayList<ValueObject> values = getValuesFromFlatGrid();
		
		Collections.sort(values, new ClinicalNotesConsultantComparator(form.getLocalContext().getHcpSortOrder()));
		
		populateFlatGridFromValues(values, false);
	}

	private void populateFlatGridFromValues(ArrayList<ValueObject> values, boolean populateGridsFromRight)
	{
		form.dyngrdNotes().getRows().clear();
		
		if(populateGridsFromRight)
		{
			form.grdDiagnosis().getRows().clear();
			form.grdProcedures().getRows().clear();
		}
		
		if(values == null)
			return;
		
		for(int i=0; i<values.size(); i++)
		{
			ValueObject vo = values.get(i);
			
			if(vo == null)
				return;
			
			if(vo instanceof AppointmentClinicalNotesVo)
			{
				addFlatNoteRow((AppointmentClinicalNotesVo) vo);
			}
			else if(vo instanceof PatientDiagnosisApptDetailVo)
			{
				CSPrimaryDiagnosisForClinicalNotesVo primaryDiagnosis = getPrimaryDiagnosisRecord((PatientDiagnosisApptDetailVo) vo);
				
				addFlatDiagnoseRow((PatientDiagnosisApptDetailVo) vo, primaryDiagnosis != null);
				
				if(populateGridsFromRight)
				{
					addDifferentialDiagnoseRow((PatientDiagnosisApptDetailVo) vo, primaryDiagnosis != null);
				}
			}
			else if (vo instanceof PatientProcedureApptDetailVo)
			{
				addFlatProcedureRow((PatientProcedureApptDetailVo) vo);
				
				if(populateGridsFromRight)
				{
					addPerformedProcedureRow((PatientProcedureApptDetailVo) vo);
				}
			}
		}
	}

	private ArrayList<ValueObject> getValuesFromFlatGrid()
	{
		ArrayList<ValueObject> values = new ArrayList<ValueObject>();
		
		for(int i=0; i<form.dyngrdNotes().getRows().size(); i++)
		{
			if(form.dyngrdNotes().getRows().get(i).getValue() instanceof ValueObject)
				values.add((ValueObject) form.dyngrdNotes().getRows().get(i).getValue());
		}
		
		return values;
	}

	class ClinicalNotesDateComparator implements Comparator<ValueObject>
	{
		private int order =1;
		
		public ClinicalNotesDateComparator()
		{
			order = 1;
		}
		
		public ClinicalNotesDateComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		
		public int compare(ValueObject o1, ValueObject o2)
		{
			DateTime o1DateTime = getDateTimeFromObject(o1);
			DateTime o2DateTime = getDateTimeFromObject(o2);
			
			if (o1DateTime != null && o2DateTime != null)
			{
				int orderByDate = order * o1DateTime.compareTo(o2DateTime);
				
				if(orderByDate == 0)
				{
					String o1Name = getNameFromObject(o1);
					String o2Name = getNameFromObject(o2);
					
					if(o1Name != null && o2Name != null)
						return o1Name.compareToIgnoreCase(o2Name);
					
					if(o1Name == null)
						return -1;
					
					if(o2Name == null)
						return 1;
					
					return 0;
				}
				
				return orderByDate;
			}
			
			if (o1DateTime == null)
				return -1 * order;
			
			if (o2DateTime == null)
				return order;
			
			return 0;
		}
		
		private String getNameFromObject(ValueObject o)
		{
			if(o == null)
				return null;
			
			if(o instanceof AppointmentClinicalNotesVo)
			{
				return null;
			}
			else if(o instanceof PatientDiagnosisApptDetailVo)
			{
				return ((PatientDiagnosisApptDetailVo) o).getDiagnosis() != null ? ((PatientDiagnosisApptDetailVo) o).getDiagnosis().getDiagnosisName() : ((PatientDiagnosisApptDetailVo) o).getDiagnosisDescription();
			}
			else if(o instanceof PatientProcedureApptDetailVo)
			{
				return ((PatientProcedureApptDetailVo) o).getProcedure() != null ? ((PatientProcedureApptDetailVo) o).getProcedure().getProcedureName() : ((PatientProcedureApptDetailVo) o).getProcedureDescription();
			}
			
			return null;
		}

		private DateTime getDateTimeFromObject(Object o)
		{
			if(o == null)
				return null;
			
			if(o instanceof BookingAppointmentForClinicalNotesVo)
			{
				BookingAppointmentForClinicalNotesVo appt = (BookingAppointmentForClinicalNotesVo) o;
				return new DateTime(appt.getAppointmentDate(), appt.getApptStartTime());
			}
			else if(o instanceof AppointmentClinicalNotesVo)
			{
				return ((AppointmentClinicalNotesVo) o).getAuthoringInformation() != null ? ((AppointmentClinicalNotesVo) o).getAuthoringInformation().getAuthoringDateTime() : null;
			}
			else if(o instanceof PatientDiagnosisApptDetailVo)
			{
				return ((PatientDiagnosisApptDetailVo) o).getAuthoringInfo() != null ? ((PatientDiagnosisApptDetailVo) o).getAuthoringInfo().getAuthoringDateTime() : null;
			}
			else if(o instanceof PatientProcedureApptDetailVo)
			{
				return ((PatientProcedureApptDetailVo) o).getAuthoringInformation() != null ? ((PatientProcedureApptDetailVo) o).getAuthoringInformation().getAuthoringDateTime() : null;
			}
			
			return null;
		}	
	}
	
	class ClinicalNotesConsultantComparator implements Comparator<ValueObject>
	{
		private int order =1;
		
		public ClinicalNotesConsultantComparator()
		{
			order = 1;
		}
		
		public ClinicalNotesConsultantComparator(SortOrder order)
		{
			this.order = SortOrder.DESCENDING.equals(order) ? -1 : 1;
		}
		
		public int compare(ValueObject o1, ValueObject o2)
		{
			HcpLiteVo o1Consultant = getConsultantFromObject(o1);
			HcpLiteVo o2Consultant = getConsultantFromObject(o2);
			
			if (o1Consultant != null && o2Consultant != null)
			{
				return order * o1Consultant.compareTo(o2Consultant);
			}
			
			if (o1Consultant == null)
				return -1 * order;
			
			if (o2Consultant == null)
				return order;
			
			return 0;
		}
		
		private HcpLiteVo getConsultantFromObject(Object o)
		{
			if(o == null)
				return null;
			
			if(o instanceof BookingAppointmentForClinicalNotesVo)
			{
				return null;
			}
			else if(o instanceof AppointmentClinicalNotesVo)
			{
				return ((AppointmentClinicalNotesVo) o).getAuthoringInformation() != null ? ((AppointmentClinicalNotesVo) o).getAuthoringInformation().getAuthoringHcp() : null;
			}
			else if(o instanceof PatientDiagnosisApptDetailVo)
			{
				return ((PatientDiagnosisApptDetailVo) o).getAuthoringInfo() != null ? ((PatientDiagnosisApptDetailVo) o).getAuthoringInfo().getAuthoringHcp() : null;
			}
			else if(o instanceof PatientProcedureApptDetailVo)
			{
				return ((PatientProcedureApptDetailVo) o).getAuthoringInformation() != null ? ((PatientProcedureApptDetailVo) o).getAuthoringInformation().getAuthoringHcp(): null;
			}
			
			return null;
		}	
	}
	
	

	//Custom Control methods
	public void initialize(Boolean isReadOnly)
	{
		form.getLocalContext().setIsReadOnlyMode(isReadOnly);
		
		initialize();
		open();
	}

	@Override
	protected void onBtnPrintClick() throws PresentationLogicException
	{
		engine.open(form.getForms().RefMan.PrintCorrespondenceNoteDialog);
	}
}
