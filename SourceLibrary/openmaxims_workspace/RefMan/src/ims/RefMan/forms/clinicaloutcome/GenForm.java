// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.RefMan.forms.clinicaloutcome;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbIntraOperativeDetailsComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.RefMan.vo.ClinicalOutcomeProcedureVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.RefMan.vo.ClinicalOutcomeProcedureVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.RefMan.vo.ClinicalOutcomeProcedureVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.RefMan.vo.ClinicalOutcomeProcedureVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.RefMan.vo.ClinicalOutcomeProcedureVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.RefMan.vo.ClinicalOutcomeProcedureVo getValue()
		{
			return (ims.RefMan.vo.ClinicalOutcomeProcedureVo)super.control.getValue();
		}
		public void setValue(ims.RefMan.vo.ClinicalOutcomeProcedureVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdClinicalOutcomesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdClinicalOutcomesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDateReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDateReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDateOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColDate(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.Date getColDate()
		{
			return (ims.framework.utils.Date)super.row.get(0);
		}
		public void setColDate(ims.framework.utils.Date value)
		{
			super.row.set(0, value);
		}
		public void setCellColDateTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColCategoryReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColCategoryReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColCategoryOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColCategory(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getColCategory()
		{
			return (String)super.row.get(1);
		}
		public void setColCategory(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColCategoryTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColCodeReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColCodeReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColCodeOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColCode(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getColCode()
		{
			return (String)super.row.get(2);
		}
		public void setColCode(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColCodeTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColClinicalOutcomeReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColClinicalOutcomeReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColClinicalOutcomeOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColClinicalOutcome(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getColClinicalOutcome()
		{
			return (String)super.row.get(3);
		}
		public void setColClinicalOutcome(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColClinicalOutcomeTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColProcedureReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColProcedureReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColProcedureOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColProcedure(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getColProcedure()
		{
			return (String)super.row.get(4);
		}
		public void setColProcedure(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColProcedureTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColOutcomeContextReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColOutcomeContextReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColOutcomeContextOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColOutcomeContext(String value)
		{
			super.row.setTooltip(5, value);
		}
		public String getColOutcomeContext()
		{
			return (String)super.row.get(5);
		}
		public void setColOutcomeContext(String value)
		{
			super.row.set(5, value);
		}
		public void setCellColOutcomeContextTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public ims.RefMan.vo.ClinicalOutcomeLiteVo getValue()
		{
			return (ims.RefMan.vo.ClinicalOutcomeLiteVo)super.row.getValue();
		}
		public void setValue(ims.RefMan.vo.ClinicalOutcomeLiteVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdClinicalOutcomesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdClinicalOutcomesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdClinicalOutcomesRow get(int index)
		{
			return new grdClinicalOutcomesRow(super.collection.get(index));
		}
		public grdClinicalOutcomesRow newRow()
		{
			return new grdClinicalOutcomesRow(super.collection.newRow());
		}
		public grdClinicalOutcomesRow newRow(boolean autoSelect)
		{
			return new grdClinicalOutcomesRow(super.collection.newRow(autoSelect));
		}
		public grdClinicalOutcomesRow newRowAt(int index)
		{
			return new grdClinicalOutcomesRow(super.collection.newRowAt(index));
		}
		public grdClinicalOutcomesRow newRowAt(int index, boolean autoSelect)
		{
			return new grdClinicalOutcomesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdClinicalOutcomesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addDateColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDateColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, validationString, bold, sortOrder, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.RefMan.vo.ClinicalOutcomeLiteVoCollection getValues()
		{
			ims.RefMan.vo.ClinicalOutcomeLiteVoCollection listOfValues = new ims.RefMan.vo.ClinicalOutcomeLiteVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.RefMan.vo.ClinicalOutcomeLiteVo getValue()
		{
			return (ims.RefMan.vo.ClinicalOutcomeLiteVo)super.grid.getValue();
		}
		public void setValue(ims.RefMan.vo.ClinicalOutcomeLiteVo value)
		{
			super.grid.setValue(value);
		}
		public grdClinicalOutcomesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdClinicalOutcomesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdClinicalOutcomesRowCollection getRows()
		{
			return new grdClinicalOutcomesRowCollection(super.grid.getRows());
		}
		public grdClinicalOutcomesRow getRowByValue(ims.RefMan.vo.ClinicalOutcomeLiteVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdClinicalOutcomesRow(row);
		}
		public void setColDateHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDateHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColCategoryHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColCategoryHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColCodeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColCodeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColClinicalOutcomeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColClinicalOutcomeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColProcedureHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColProcedureHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColOutcomeContextHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColOutcomeContextHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
	}

	public static class GroupViewRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "This Referral", startTabIndex.intValue() + 1);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 112, 10, 80, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "All Referrals", startTabIndex.intValue() + 2);
		}
		public void setText(GroupViewEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupViewEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupViewEnumeration.None;
				case 0: return GroupViewEnumeration.rdoThisReferral;
				case 1: return GroupViewEnumeration.rdoAllRefferals;
			}
			return null;
		}
		public void setValue(GroupViewEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupViewEnumeration.None.id);
		}
		public boolean isEnabled(GroupViewEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupViewEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupViewEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupViewEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupViewEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupViewEnumeration None = new GroupViewEnumeration(-1);
		public static GroupViewEnumeration rdoThisReferral = new GroupViewEnumeration(0);
		public static GroupViewEnumeration rdoAllRefferals = new GroupViewEnumeration(1);
		private GroupViewEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupViewEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
		if(new ims.framework.ContextVariable("RefMan.CatsReferral", "_cvp_RefMan.CatsReferral").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'RefMan.CatsReferral' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.RefMan.contextMenuClinicalOutcome = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.RefMan.contextMenuClinicalOutcomeNEWItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102149), true, false);
		contextMenus.RefMan.contextMenuClinicalOutcome.add(contextMenus.RefMan.contextMenuClinicalOutcomeNEWItem);
		contextMenus.RefMan.contextMenuClinicalOutcomeEDITItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.RefMan.contextMenuClinicalOutcome.add(contextMenus.RefMan.contextMenuClinicalOutcomeEDITItem);
		contextMenus.RefMan.contextMenuClinicalOutcomeVIEWItem = factory.createMenuItem(startControlID.intValue() + 3, "View", true, false, new Integer(102223), true, false);
		contextMenus.RefMan.contextMenuClinicalOutcome.add(contextMenus.RefMan.contextMenuClinicalOutcomeVIEWItem);
		form.registerMenu(contextMenus.RefMan.contextMenuClinicalOutcome);


		// Label Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 264, 10, 139, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Intra Operative Details:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 408, 8, 432, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		ComboBox m_cmbIntraOperativeDetailsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(10)});
		addControl(m_cmbIntraOperativeDetailsTemp);
		cmbIntraOperativeDetailsComboBox cmbIntraOperativeDetails = (cmbIntraOperativeDetailsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbIntraOperativeDetailsComboBox.class, m_cmbIntraOperativeDetailsTemp);
		super.addComboBox(cmbIntraOperativeDetails);

		// Grid Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 832, 552, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdClinicalOutcomesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.RefMan.contextMenuClinicalOutcome, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdClinicalOutcomesTemp);
		grdClinicalOutcomesGrid grdClinicalOutcomes = (grdClinicalOutcomesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdClinicalOutcomesGrid.class, m_grdClinicalOutcomesTemp);
		grdClinicalOutcomes.addDateColumn("Date", 0, 0, 80, true, true, null, false, 0, true);
		grdClinicalOutcomes.setColDateHeaderTooltip("Date");
		grdClinicalOutcomes.addStringColumn("Category", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinicalOutcomes.setColCategoryHeaderTooltip("Category");
		grdClinicalOutcomes.addStringColumn("Code", 0, 0, 80, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinicalOutcomes.setColCodeHeaderTooltip("Code");
		grdClinicalOutcomes.addStringColumn("Clinical Outcome", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinicalOutcomes.setColClinicalOutcomeHeaderTooltip("Clinical Outcome");
		grdClinicalOutcomes.addStringColumn("Procedure", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinicalOutcomes.setColProcedureHeaderTooltip("Procedure");
		grdClinicalOutcomes.addStringColumn("Clinical Outcome Context", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdClinicalOutcomes.setColOutcomeContextHeaderTooltip("Clinical Outcome Context");
		super.addGrid(grdClinicalOutcomes);

		// RadioButton Controls
		RadioButton tmpGroupView = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(0), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupView);
		GroupViewRadioButton GroupView = (GroupViewRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupViewRadioButton.class, tmpGroupView);
		GroupView.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupView);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnNew()
	{
		return (Button)super.getControl(1);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(2);
	}
	public cmbIntraOperativeDetailsComboBox cmbIntraOperativeDetails()
	{
		return (cmbIntraOperativeDetailsComboBox)super.getComboBox(0);
	}
	public grdClinicalOutcomesGrid grdClinicalOutcomes()
	{
		return (grdClinicalOutcomesGrid)super.getGrid(0);
	}
	public GroupViewRadioButton GroupView()
	{
		return (GroupViewRadioButton)super.getRadioButton(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			RefMan = new RefManForms();
		}
		public final class RefManForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RefManForms()
			{
				ClinicalOutcomeDetails = new LocalFormName(134199);
			}
			public final FormName ClinicalOutcomeDetails;
		}

		public RefManForms RefMan;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Tick = new ImageHelper(102209, "Images/Core/tick.png", new Integer(16), new Integer(16));
				Delete = new ImageHelper(102148, "Images/Core/delete.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Tick;
			public final ims.framework.utils.Image Delete;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RefManNamespace RefMan = new RefManNamespace();
		public final class RefManNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class ClinicalOutcome implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int NEW = 1;
				public static final int EDIT = 2;
				public static final int VIEW = 3;
			}
			public void disableAllClinicalOutcomeMenuItems()
			{
				this.contextMenuClinicalOutcomeNEWItem.setEnabled(false);
				this.contextMenuClinicalOutcomeEDITItem.setEnabled(false);
				this.contextMenuClinicalOutcomeVIEWItem.setEnabled(false);
			}
			public void hideAllClinicalOutcomeMenuItems()
			{
				this.contextMenuClinicalOutcomeNEWItem.setVisible(false);
				this.contextMenuClinicalOutcomeEDITItem.setVisible(false);
				this.contextMenuClinicalOutcomeVIEWItem.setVisible(false);
			}
			private Menu contextMenuClinicalOutcome;
			public MenuItem getClinicalOutcomeNEWItem()
			{
				return this.contextMenuClinicalOutcomeNEWItem;
			}
			private MenuItem contextMenuClinicalOutcomeNEWItem;
			public MenuItem getClinicalOutcomeEDITItem()
			{
				return this.contextMenuClinicalOutcomeEDITItem;
			}
			private MenuItem contextMenuClinicalOutcomeEDITItem;
			public MenuItem getClinicalOutcomeVIEWItem()
			{
				return this.contextMenuClinicalOutcomeVIEWItem;
			}
			private MenuItem contextMenuClinicalOutcomeVIEWItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[76];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_RefMan.ClinicalOutcome", "BO-1072100092-ID", "ID_ClinicalOutcome");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_RefMan.ClinicalOutcome", "BO-1072100092-DATE", "Date");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_RefMan.ClinicalOutcome", "BO-1072100092-CLINICALOUTCOMECONTEXT", "ClinicalOutcomeContext");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_RefMan.ClinicalOutcome", "BO-1072100092-CATSREFERRAL", "CatsReferral");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_RefMan.ClinicalOutcome", "BO-1072100092-ACTIONCOMMENTS", "ActionComments");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
