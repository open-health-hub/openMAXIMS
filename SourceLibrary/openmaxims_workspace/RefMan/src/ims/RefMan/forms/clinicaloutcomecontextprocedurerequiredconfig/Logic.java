// This code was generated by Calin Perebiceanu using IMS Development Environment (version 1.80 build 4198.17562)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.RefMan.forms.clinicaloutcomecontextprocedurerequiredconfig;

import ims.RefMan.forms.clinicaloutcomecontextprocedurerequiredconfig.GenForm.grdOutcomeContextMandatoryRow;
import ims.RefMan.vo.ClinicalOutcomeContextProcedureRequiredConfigVo;
import ims.RefMan.vo.ClinicalOutcomeContextProcedureRequiredConfigVoCollection;
import ims.RefMan.vo.lookups.ClinicalOutcomeContext;
import ims.RefMan.vo.lookups.ClinicalOutcomeContextCollection;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.FormMode;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	
	private void open()
	{
		// Clear screen
		clearInstanceControls();
		
		// Populate grid with lookup values
		populateGridWithLookups();
		// Update grid with saved records
		updateGridWithSavedRecords(domain.list());
		
		// Set form to VIEW mode
		form.setMode(FormMode.VIEW);
		
	}
	private void updateGridWithSavedRecords(ClinicalOutcomeContextProcedureRequiredConfigVoCollection list)
	{
		// Terminate function if the collection is null
		if (list == null)
			return;
		
		// Iterate saved ClinicalOutcome records
		for (ClinicalOutcomeContextProcedureRequiredConfigVo clinicalOutcomeConfig : list)
		{
			for (int i = 0; i < form.grdOutcomeContextMandatory().getRows().size(); i++)
			{
				grdOutcomeContextMandatoryRow row = form.grdOutcomeContextMandatory().getRows().get(i);
				
				if (clinicalOutcomeConfig.getContextIsNotNull()&& clinicalOutcomeConfig.getContext().equals(row.getValue().getContext()))
				{
					// Update row value
					row.setValue(clinicalOutcomeConfig);
					row.setColProcedureNotMandatory(Boolean.TRUE.equals(clinicalOutcomeConfig.getProcedureNotMandatory()));
					
					break;
				}
			}
		}
	}

	private void populateGridWithLookups()
	{
		// Get the lookup collection
		ClinicalOutcomeContextCollection lookupCollection = ims.RefMan.vo.lookups.LookupHelper.getClinicalOutcomeContext(domain.getLookupService());
		
		// Populate grid with lookup collection
		for (int i = 0; i < lookupCollection.size(); i++)
		{
			ClinicalOutcomeContext clinicalOutcomeCategory = lookupCollection.get(i);
			
			if (clinicalOutcomeCategory.isActive())
			{
				// Create new grid row
				grdOutcomeContextMandatoryRow row = form.grdOutcomeContextMandatory().getRows().newRow();

				// Create row value VO
				ClinicalOutcomeContextProcedureRequiredConfigVo rowValue = new ClinicalOutcomeContextProcedureRequiredConfigVo();
				rowValue.setContext(clinicalOutcomeCategory);
				rowValue.setProcedureNotMandatory(false);

				// Set row cells value
				row.setColOutcomeContext(clinicalOutcomeCategory.getText());
				row.setColProcedureNotMandatory(false);

				// Set row value
				row.setValue(rowValue);
			}
		}
		
	}

	private void clearInstanceControls()
	{
		form.grdOutcomeContextMandatory().getRows().clear();
		
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}
	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
			open();
	}
	@Override
	protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException
	{
		updateInstance();
	}
	
	public void updateInstance()
	{
		// Set form to EDIT mode
		form.setMode(FormMode.EDIT);
	}
	
	public boolean save() throws ims.framework.exceptions.PresentationLogicException
	{
		try
		{
			// Populate data from screen
			ClinicalOutcomeContextProcedureRequiredConfigVoCollection collectionToSave = populateClinicalOutcomeRecordsFromGrid();

			// Validate data
			String[] errors = collectionToSave.validate();
			if (errors != null && errors.length > 0)
			{
				engine.showErrors(errors);
				return false;
			}

			// Attempt to save
			domain.save(collectionToSave);

			// Assume save succeeded
			return true;
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			e.printStackTrace();
			open();
			return false;
		}
		
	}

	private ClinicalOutcomeContextProcedureRequiredConfigVoCollection populateClinicalOutcomeRecordsFromGrid()
	{
		// Declare the result collection
		ClinicalOutcomeContextProcedureRequiredConfigVoCollection results = new ClinicalOutcomeContextProcedureRequiredConfigVoCollection();
		
		// Iterate grid rows
		for (int i = 0; i < form.grdOutcomeContextMandatory().getRows().size(); i++)
		{
			grdOutcomeContextMandatoryRow row = form.grdOutcomeContextMandatory().getRows().get(i);

			// Get row value & update with screen input
			ClinicalOutcomeContextProcedureRequiredConfigVo clinicalOutcomeCategory = row.getValue();
			clinicalOutcomeCategory.setProcedureNotMandatory(row.getColProcedureNotMandatory());
			
			// Add clinical outcome to results collection
			results.add(clinicalOutcomeCategory);
		}
		
		// Return data from screen
		return results;
	}
}
