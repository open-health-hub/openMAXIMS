//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.rules.forms.ruleseditorcomponent;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	protected void fireCustomControlValueChanged()
	{
		super.fireValueChanged();
	}
	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrRulesLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabGeneralContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Custom Controls
				ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 112, 176, 632, 150, ims.framework.enumerations.ControlAnchoring.ALL);
				ims.framework.FormUiLogic m_ccBusinessRuleCategoryForm = loader.loadComponent(103208, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 3, skipContextValidation);
				//ims.framework.Control m_ccBusinessRuleCategoryControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(112), new Integer(176), new Integer(632), new Integer(150), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3), m_ccBusinessRuleCategoryForm, instance1 } );
				ims.framework.Control m_ccBusinessRuleCategoryControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3), m_ccBusinessRuleCategoryForm, instance1, Boolean.FALSE } );
				super.addControl(m_ccBusinessRuleCategoryControl);
				Menu[] menus1 = m_ccBusinessRuleCategoryForm.getForm().getRegisteredMenus();
				for(int x = 0; x < menus1.length; x++)
				{
					form.registerMenu(menus1[x]);
				}
		
				// Label Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 172, 98, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Select Category:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 224, 377, 67, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Valid Until:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 224, 345, 69, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Valid From:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 18, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 112, 48, 632, 120, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 112, 16, 632, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Date Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 304, 376, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1006), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 304, 344, 200, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 1005), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 112, 406, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 1007), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Active", Boolean.FALSE, null}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 112, 345, 104, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 1004), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Date Limits", Boolean.TRUE, null}));
			}

			public ims.admin.forms.hierarchicallookupselectioncomponent.IComponent ccBusinessRuleCategory()
			{
				return (ims.admin.forms.hierarchicallookupselectioncomponent.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
			}
			public void setccBusinessRuleCategoryValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
			{
				((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
			}
			public void setccBusinessRuleCategoryVisible(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setVisible(value);
			}
			public boolean isccBusinessRuleCategoryVisible()
			{
				return ((ims.framework.Control)super.getControl(0)).isVisible();
			}
			public void setccBusinessRuleCategoryEnabled(boolean value)
			{
				((ims.framework.Control)super.getControl(0)).setEnabled(value);
			}
			public boolean isccBusinessRuleCategoryEnabled()
			{
				return ((ims.framework.Control)super.getControl(0)).isEnabled();
			}
			public TextBox txtDescription()
			{
				return (TextBox)super.getControl(6);
			}
			public TextBox txtName()
			{
				return (TextBox)super.getControl(7);
			}
			public DateControl dteValidTo()
			{
				return (DateControl)super.getControl(8);
			}
			public DateControl dteValidFrom()
			{
				return (DateControl)super.getControl(9);
			}
			public CheckBox chkActive()
			{
				return (CheckBox)super.getControl(10);
			}
			public CheckBox chkDateRange()
			{
				return (CheckBox)super.getControl(11);
			}
		}
		public static class tabConditionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbRootEntityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.rules.types.RulesEngineEntity value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.rules.types.RulesEngineEntity value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.rules.types.RulesEngineEntity value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.rules.types.RulesEngineEntity value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.rules.types.RulesEngineEntity value)
				{
					return super.control.removeRow(value);
				}
				public ims.rules.types.RulesEngineEntity getValue()
				{
					return (ims.rules.types.RulesEngineEntity)super.control.getValue();
				}
				public void setValue(ims.rules.types.RulesEngineEntity value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 8, 16, 79, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Data Entity : ", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 100, 13, 724, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbRootEntityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbRootEntityTemp);
				cmbRootEntityComboBox cmbRootEntity = (cmbRootEntityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRootEntityComboBox.class, m_cmbRootEntityTemp);
				super.addComboBox(cmbRootEntity);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 816, 464, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Admin.contextMenuRulesEditor, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public cmbRootEntityComboBox cmbRootEntity()
			{
				return (cmbRootEntityComboBox)super.getComboBox(0);
			}
			public DynamicGrid dyngrdConditions()
			{
				return (DynamicGrid)super.getControl(2);
			}
		}
		public static class tabActionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 512, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Rules.contextMenuRulesEditorActions, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public DynamicGrid dyngrdActions()
			{
				return (DynamicGrid)super.getControl(0);
			}
		}
		public static class tabOverviewContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			public boolean isInitialized()
			{
				return super.container.isInitialized();
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// HTML Viewer Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 512, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(HTMLViewer.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE}));
			}

			public HTMLViewer htmOverview()
			{
				return (HTMLViewer)super.getControl(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 840, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabGeneral = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"General", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabGeneralContainer m_tabGeneralContainer = (tabGeneralContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGeneralContainer.class, m_tabGeneral, factory);
			super.addContainer(m_tabGeneral, m_tabGeneralContainer);
			ims.framework.utils.SizeInfo m_tabGeneralDesignSize = new ims.framework.utils.SizeInfo(840, 552);
			ims.framework.utils.SizeInfo m_tabGeneralRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper18.getWidth(), anchoringHelper18.getHeight());
			m_tabGeneralContainer.setContext(form, appForm, m_tabGeneral, loader, form_images_local, contextMenus, startControlID, m_tabGeneralDesignSize, m_tabGeneralRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 840, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabConditions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Conditions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabConditionsContainer m_tabConditionsContainer = (tabConditionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabConditionsContainer.class, m_tabConditions, factory);
			super.addContainer(m_tabConditions, m_tabConditionsContainer);
			ims.framework.utils.SizeInfo m_tabConditionsDesignSize = new ims.framework.utils.SizeInfo(840, 552);
			ims.framework.utils.SizeInfo m_tabConditionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper19.getWidth(), anchoringHelper19.getHeight());
			m_tabConditionsContainer.setContext(form, appForm, m_tabConditions, loader, form_images_local, contextMenus, startControlID, m_tabConditionsDesignSize, m_tabConditionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 840, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabActions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Actions", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabActionsContainer m_tabActionsContainer = (tabActionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabActionsContainer.class, m_tabActions, factory);
			super.addContainer(m_tabActions, m_tabActionsContainer);
			ims.framework.utils.SizeInfo m_tabActionsDesignSize = new ims.framework.utils.SizeInfo(840, 552);
			ims.framework.utils.SizeInfo m_tabActionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper20.getWidth(), anchoringHelper20.getHeight());
			m_tabActionsContainer.setContext(form, appForm, m_tabActions, loader, form_images_local, contextMenus, startControlID, m_tabActionsDesignSize, m_tabActionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 840, 552, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabOverview = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Overview", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(true), new Boolean(false)});
			tabOverviewContainer m_tabOverviewContainer = (tabOverviewContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOverviewContainer.class, m_tabOverview, factory);
			super.addContainer(m_tabOverview, m_tabOverviewContainer);
			ims.framework.utils.SizeInfo m_tabOverviewDesignSize = new ims.framework.utils.SizeInfo(840, 552);
			ims.framework.utils.SizeInfo m_tabOverviewRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper21.getWidth(), anchoringHelper21.getHeight());
			m_tabOverviewContainer.setContext(form, appForm, m_tabOverview, loader, form_images_local, contextMenus, startControlID, m_tabOverviewDesignSize, m_tabOverviewRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabGeneral().setVisible(false);
			tabConditions().setVisible(false);
			tabActions().setVisible(false);
			tabOverview().setVisible(false);
		}
		public void settabGeneralEnabled(boolean value)
		{
			tabGeneral().setEnabled(value);
		}
		public void settabConditionsEnabled(boolean value)
		{
			tabConditions().setEnabled(value);
		}
		public void settabActionsEnabled(boolean value)
		{
			tabActions().setEnabled(value);
		}
		public void settabOverviewEnabled(boolean value)
		{
			tabOverview().setEnabled(value);
		}
		public void showtabGeneral()
		{
			tabConditions().setVisible(false);
			tabActions().setVisible(false);
			tabOverview().setVisible(false);
			tabGeneral().setVisible(true);
		}
		public void showtabConditions()
		{
			tabGeneral().setVisible(false);
			tabActions().setVisible(false);
			tabOverview().setVisible(false);
			tabConditions().setVisible(true);
		}
		public void showtabActions()
		{
			tabGeneral().setVisible(false);
			tabConditions().setVisible(false);
			tabOverview().setVisible(false);
			tabActions().setVisible(true);
		}
		public void showtabOverview()
		{
			tabGeneral().setVisible(false);
			tabConditions().setVisible(false);
			tabActions().setVisible(false);
			tabOverview().setVisible(true);
		}

		public tabGeneralContainer tabGeneral()
		{
			return (tabGeneralContainer)super.layers.get(0);
		}
		public tabConditionsContainer tabConditions()
		{
			return (tabConditionsContainer)super.layers.get(1);
		}
		public tabActionsContainer tabActions()
		{
			return (tabActionsContainer)super.layers.get(2);
		}
		public tabOverviewContainer tabOverview()
		{
			return (tabOverviewContainer)super.layers.get(3);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(856, 568);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Rules.contextMenuRulesEditorActions = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Rules.contextMenuRulesEditorActionsAddActionItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Action", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsAddActionItem);
		contextMenus.Rules.contextMenuRulesEditorActionsRemoveActionItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove Action", true, false, null, true, true);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsRemoveActionItem);
		contextMenus.Rules.contextMenuRulesEditorActionsRemoveAllItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove All", true, false, null, true, true);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsRemoveAllItem);
		contextMenus.Rules.contextMenuRulesEditorActionsAddNotificationItem = factory.createMenuItem(startControlID.intValue() + 4, "Add Notification", true, false, null, true, true);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsAddNotificationItem);
		contextMenus.Rules.contextMenuRulesEditorActionsAddUserItem = factory.createMenuItem(startControlID.intValue() + 5, "Add User to be Notified", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsAddUserItem);
		contextMenus.Rules.contextMenuRulesEditorActionsAddEntityUsersItem = factory.createMenuItem(startControlID.intValue() + 6, "Add Entity User(s)", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsAddEntityUsersItem);
		contextMenus.Rules.contextMenuRulesEditorActionsRemoveEntityUsersItem = factory.createMenuItem(startControlID.intValue() + 7, "Remove Entity User(s)", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsRemoveEntityUsersItem);
		contextMenus.Rules.contextMenuRulesEditorActionsRemoveUserItem = factory.createMenuItem(startControlID.intValue() + 8, "Remove User to be Notified", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsRemoveUserItem);
		contextMenus.Rules.contextMenuRulesEditorActionsAddMessageItem = factory.createMenuItem(startControlID.intValue() + 9, "Add Message Notification", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsAddMessageItem);
		contextMenus.Rules.contextMenuRulesEditorActionsRemoveMessageItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove Message Notification", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsRemoveMessageItem);
		contextMenus.Rules.contextMenuRulesEditorActionsAddLineSeparatorItem = factory.createMenuItem(startControlID.intValue() + 11, "Add Line Separator", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsAddLineSeparatorItem);
		contextMenus.Rules.contextMenuRulesEditorActionsRemoveLineSeparatorItem = factory.createMenuItem(startControlID.intValue() + 12, "Remove Line Separator", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsRemoveLineSeparatorItem);
		contextMenus.Rules.contextMenuRulesEditorActionsAddEntityFieldItem = factory.createMenuItem(startControlID.intValue() + 13, "Add Entity Field", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsAddEntityFieldItem);
		contextMenus.Rules.contextMenuRulesEditorActionsRemoveEntityFieldItem = factory.createMenuItem(startControlID.intValue() + 14, "Remove Entity Field", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsRemoveEntityFieldItem);
		contextMenus.Rules.contextMenuRulesEditorActionsMoveUPItem = factory.createMenuItem(startControlID.intValue() + 15, "Move Up", true, false, null, true, true);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsMoveUPItem);
		contextMenus.Rules.contextMenuRulesEditorActionsMoveDownItem = factory.createMenuItem(startControlID.intValue() + 16, "Move Down", true, false, null, true, false);
		contextMenus.Rules.contextMenuRulesEditorActions.add(contextMenus.Rules.contextMenuRulesEditorActionsMoveDownItem);
		form.registerMenu(contextMenus.Rules.contextMenuRulesEditorActions);
		contextMenus.Admin.contextMenuRulesEditor = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.Admin.contextMenuRulesEditorAddLogicalConditionItem = factory.createMenuItem(startControlID.intValue() + 17, "Add Logical Condition", true, false, null, true, false);
		contextMenus.Admin.contextMenuRulesEditor.add(contextMenus.Admin.contextMenuRulesEditorAddLogicalConditionItem);
		contextMenus.Admin.contextMenuRulesEditorAddValueConditionItem = factory.createMenuItem(startControlID.intValue() + 18, "Add Value Condition", true, false, null, true, false);
		contextMenus.Admin.contextMenuRulesEditor.add(contextMenus.Admin.contextMenuRulesEditorAddValueConditionItem);
		contextMenus.Admin.contextMenuRulesEditorRemoveItem = factory.createMenuItem(startControlID.intValue() + 19, "Remove", true, false, null, true, true);
		contextMenus.Admin.contextMenuRulesEditor.add(contextMenus.Admin.contextMenuRulesEditorRemoveItem);
		contextMenus.Admin.contextMenuRulesEditorRemoveAllItem = factory.createMenuItem(startControlID.intValue() + 20, "Remove All", true, false, null, true, true);
		contextMenus.Admin.contextMenuRulesEditor.add(contextMenus.Admin.contextMenuRulesEditorRemoveAllItem);
		contextMenus.Admin.contextMenuRulesEditorRemoveLogicalConditionItem = factory.createMenuItem(startControlID.intValue() + 21, "Remove Logical Condition", true, false, null, true, false);
		contextMenus.Admin.contextMenuRulesEditor.add(contextMenus.Admin.contextMenuRulesEditorRemoveLogicalConditionItem);
		contextMenus.Admin.contextMenuRulesEditorRemoveValueConditionItem = factory.createMenuItem(startControlID.intValue() + 22, "Remove Value Condition", true, false, null, true, false);
		contextMenus.Admin.contextMenuRulesEditor.add(contextMenus.Admin.contextMenuRulesEditorRemoveValueConditionItem);
		form.registerMenu(contextMenus.Admin.contextMenuRulesEditor);


		// Layer Clasess
		lyrRulesLayer m_lyrRulesLayer = (lyrRulesLayer)LayerFlyweightFactory.getInstance().createLayer(lyrRulesLayer.class, this, factory);
		super.addLayer(m_lyrRulesLayer);
		m_lyrRulesLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrRulesLayer lyrRules()
	{
		return (lyrRulesLayer)super.getLayer(0);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Rules = new RulesForms();
		}
		public final class RulesForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private RulesForms()
			{
				RuleCodePreview = new LocalFormName(137100);
			}
			public final FormName RuleCodePreview;
		}

		public RulesForms Rules;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Admin = new AdminImages();
			CcoSched = new CcoSchedImages();
		}
		public final class AdminImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminImages()
			{
				Users48 = new ImageHelper(103172, "Images/Admin/Users_48.png", new Integer(48), new Integer(48));
				Config48 = new ImageHelper(103336, "Images/Admin/config_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image Users48;
			public final ims.framework.utils.Image Config48;
		}
		public final class CcoSchedImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CcoSchedImages()
			{
				ActionUpdate48 = new ImageHelper(128145, "Images/CcoSched/action_update_48.png", new Integer(48), new Integer(48));
			}
			public final ims.framework.utils.Image ActionUpdate48;
		}
		public final AdminImages Admin;
		public final CcoSchedImages CcoSched;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_IsFirstConditionDefined = new ims.framework.ContextVariable("IsFirstConditionDefined", prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__IsFirstConditionDefined_" + componentIdentifier + "");
			cxl_RootEntity = new ims.framework.ContextVariable("RootEntity", prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__RootEntity_" + componentIdentifier + "");
			cxl_EditedRule = new ims.framework.ContextVariable("EditedRule", prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier + "");
			cxl_BtnCloseStatus = new ims.framework.ContextVariable("BtnCloseStatus", prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__BtnCloseStatus_" + componentIdentifier + "");
			cxl_CloseDialog = new ims.framework.ContextVariable("CloseDialog", prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__CloseDialog_" + componentIdentifier + "");
			cxl_SelectedRow = new ims.framework.ContextVariable("SelectedRow", prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__SelectedRow_" + componentIdentifier + "");
			cxl_AlreadyAddedCollection = new ims.framework.ContextVariable("AlreadyAddedCollection", prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__AlreadyAddedCollection_" + componentIdentifier + "");
			cxl_UsersEntityAdded = new ims.framework.ContextVariable("UsersEntityAdded", prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__UsersEntityAdded_" + componentIdentifier + "");
		}
		
		public boolean getIsFirstConditionDefinedIsNotNull()
		{
			return !cxl_IsFirstConditionDefined.getValueIsNull(context);
		}
		public Boolean getIsFirstConditionDefined()
		{
			return (Boolean)cxl_IsFirstConditionDefined.getValue(context);
		}
		public void setIsFirstConditionDefined(Boolean value)
		{
			cxl_IsFirstConditionDefined.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsFirstConditionDefined = null;
		public boolean getRootEntityIsNotNull()
		{
			return !cxl_RootEntity.getValueIsNull(context);
		}
		public ims.rules.types.RulesEngineEntity getRootEntity()
		{
			return (ims.rules.types.RulesEngineEntity)cxl_RootEntity.getValue(context);
		}
		public void setRootEntity(ims.rules.types.RulesEngineEntity value)
		{
			cxl_RootEntity.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RootEntity = null;
		public boolean getEditedRuleIsNotNull()
		{
			return !cxl_EditedRule.getValueIsNull(context);
		}
		public ims.admin.vo.BusinessRuleVo getEditedRule()
		{
			return (ims.admin.vo.BusinessRuleVo)cxl_EditedRule.getValue(context);
		}
		public void setEditedRule(ims.admin.vo.BusinessRuleVo value)
		{
			cxl_EditedRule.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditedRule = null;
		public boolean getBtnCloseStatusIsNotNull()
		{
			return !cxl_BtnCloseStatus.getValueIsNull(context);
		}
		public Boolean getBtnCloseStatus()
		{
			return (Boolean)cxl_BtnCloseStatus.getValue(context);
		}
		public void setBtnCloseStatus(Boolean value)
		{
			cxl_BtnCloseStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_BtnCloseStatus = null;
		public boolean getCloseDialogIsNotNull()
		{
			return !cxl_CloseDialog.getValueIsNull(context);
		}
		public Boolean getCloseDialog()
		{
			return (Boolean)cxl_CloseDialog.getValue(context);
		}
		public void setCloseDialog(Boolean value)
		{
			cxl_CloseDialog.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CloseDialog = null;
		public boolean getSelectedRowIsNotNull()
		{
			return !cxl_SelectedRow.getValueIsNull(context);
		}
		public java.lang.Object getSelectedRow()
		{
			return cxl_SelectedRow.getValue(context);
		}
		public void setSelectedRow(java.lang.Object value)
		{
			cxl_SelectedRow.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedRow = null;
		public boolean getAlreadyAddedCollectionIsNotNull()
		{
			return !cxl_AlreadyAddedCollection.getValueIsNull(context);
		}
		public Boolean getAlreadyAddedCollection()
		{
			return (Boolean)cxl_AlreadyAddedCollection.getValue(context);
		}
		public void setAlreadyAddedCollection(Boolean value)
		{
			cxl_AlreadyAddedCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AlreadyAddedCollection = null;
		public boolean getUsersEntityAddedIsNotNull()
		{
			return !cxl_UsersEntityAdded.getValueIsNull(context);
		}
		public Boolean getUsersEntityAdded()
		{
			return (Boolean)cxl_UsersEntityAdded.getValue(context);
		}
		public void setUsersEntityAdded(Boolean value)
		{
			cxl_UsersEntityAdded.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UsersEntityAdded = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public RulesNamespace Rules = new RulesNamespace();
		public AdminNamespace Admin = new AdminNamespace();
		public final class RulesNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class RulesEditorActions implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddAction = 1;
				public static final int RemoveAction = 2;
				public static final int RemoveAll = 3;
				public static final int AddNotification = 4;
				public static final int AddUser = 5;
				public static final int AddEntityUsers = 6;
				public static final int RemoveEntityUsers = 7;
				public static final int RemoveUser = 8;
				public static final int AddMessage = 9;
				public static final int RemoveMessage = 10;
				public static final int AddLineSeparator = 11;
				public static final int RemoveLineSeparator = 12;
				public static final int AddEntityField = 13;
				public static final int RemoveEntityField = 14;
				public static final int MoveUP = 15;
				public static final int MoveDown = 16;
			}
			public void disableAllRulesEditorActionsMenuItems()
			{
				this.contextMenuRulesEditorActionsAddActionItem.setEnabled(false);
				this.contextMenuRulesEditorActionsRemoveActionItem.setEnabled(false);
				this.contextMenuRulesEditorActionsRemoveAllItem.setEnabled(false);
				this.contextMenuRulesEditorActionsAddNotificationItem.setEnabled(false);
				this.contextMenuRulesEditorActionsAddUserItem.setEnabled(false);
				this.contextMenuRulesEditorActionsAddEntityUsersItem.setEnabled(false);
				this.contextMenuRulesEditorActionsRemoveEntityUsersItem.setEnabled(false);
				this.contextMenuRulesEditorActionsRemoveUserItem.setEnabled(false);
				this.contextMenuRulesEditorActionsAddMessageItem.setEnabled(false);
				this.contextMenuRulesEditorActionsRemoveMessageItem.setEnabled(false);
				this.contextMenuRulesEditorActionsAddLineSeparatorItem.setEnabled(false);
				this.contextMenuRulesEditorActionsRemoveLineSeparatorItem.setEnabled(false);
				this.contextMenuRulesEditorActionsAddEntityFieldItem.setEnabled(false);
				this.contextMenuRulesEditorActionsRemoveEntityFieldItem.setEnabled(false);
				this.contextMenuRulesEditorActionsMoveUPItem.setEnabled(false);
				this.contextMenuRulesEditorActionsMoveDownItem.setEnabled(false);
			}
			public void hideAllRulesEditorActionsMenuItems()
			{
				this.contextMenuRulesEditorActionsAddActionItem.setVisible(false);
				this.contextMenuRulesEditorActionsRemoveActionItem.setVisible(false);
				this.contextMenuRulesEditorActionsRemoveAllItem.setVisible(false);
				this.contextMenuRulesEditorActionsAddNotificationItem.setVisible(false);
				this.contextMenuRulesEditorActionsAddUserItem.setVisible(false);
				this.contextMenuRulesEditorActionsAddEntityUsersItem.setVisible(false);
				this.contextMenuRulesEditorActionsRemoveEntityUsersItem.setVisible(false);
				this.contextMenuRulesEditorActionsRemoveUserItem.setVisible(false);
				this.contextMenuRulesEditorActionsAddMessageItem.setVisible(false);
				this.contextMenuRulesEditorActionsRemoveMessageItem.setVisible(false);
				this.contextMenuRulesEditorActionsAddLineSeparatorItem.setVisible(false);
				this.contextMenuRulesEditorActionsRemoveLineSeparatorItem.setVisible(false);
				this.contextMenuRulesEditorActionsAddEntityFieldItem.setVisible(false);
				this.contextMenuRulesEditorActionsRemoveEntityFieldItem.setVisible(false);
				this.contextMenuRulesEditorActionsMoveUPItem.setVisible(false);
				this.contextMenuRulesEditorActionsMoveDownItem.setVisible(false);
			}
			private Menu contextMenuRulesEditorActions;
			public ReadOnlyMenuItem getRulesEditorActionsAddActionItem()
			{
				return this.contextMenuRulesEditorActionsAddActionItem;
			}
			private MenuItem contextMenuRulesEditorActionsAddActionItem;
			public ReadOnlyMenuItem getRulesEditorActionsRemoveActionItem()
			{
				return this.contextMenuRulesEditorActionsRemoveActionItem;
			}
			private MenuItem contextMenuRulesEditorActionsRemoveActionItem;
			public ReadOnlyMenuItem getRulesEditorActionsRemoveAllItem()
			{
				return this.contextMenuRulesEditorActionsRemoveAllItem;
			}
			private MenuItem contextMenuRulesEditorActionsRemoveAllItem;
			public ReadOnlyMenuItem getRulesEditorActionsAddNotificationItem()
			{
				return this.contextMenuRulesEditorActionsAddNotificationItem;
			}
			private MenuItem contextMenuRulesEditorActionsAddNotificationItem;
			public ReadOnlyMenuItem getRulesEditorActionsAddUserItem()
			{
				return this.contextMenuRulesEditorActionsAddUserItem;
			}
			private MenuItem contextMenuRulesEditorActionsAddUserItem;
			public ReadOnlyMenuItem getRulesEditorActionsAddEntityUsersItem()
			{
				return this.contextMenuRulesEditorActionsAddEntityUsersItem;
			}
			private MenuItem contextMenuRulesEditorActionsAddEntityUsersItem;
			public ReadOnlyMenuItem getRulesEditorActionsRemoveEntityUsersItem()
			{
				return this.contextMenuRulesEditorActionsRemoveEntityUsersItem;
			}
			private MenuItem contextMenuRulesEditorActionsRemoveEntityUsersItem;
			public ReadOnlyMenuItem getRulesEditorActionsRemoveUserItem()
			{
				return this.contextMenuRulesEditorActionsRemoveUserItem;
			}
			private MenuItem contextMenuRulesEditorActionsRemoveUserItem;
			public ReadOnlyMenuItem getRulesEditorActionsAddMessageItem()
			{
				return this.contextMenuRulesEditorActionsAddMessageItem;
			}
			private MenuItem contextMenuRulesEditorActionsAddMessageItem;
			public ReadOnlyMenuItem getRulesEditorActionsRemoveMessageItem()
			{
				return this.contextMenuRulesEditorActionsRemoveMessageItem;
			}
			private MenuItem contextMenuRulesEditorActionsRemoveMessageItem;
			public ReadOnlyMenuItem getRulesEditorActionsAddLineSeparatorItem()
			{
				return this.contextMenuRulesEditorActionsAddLineSeparatorItem;
			}
			private MenuItem contextMenuRulesEditorActionsAddLineSeparatorItem;
			public ReadOnlyMenuItem getRulesEditorActionsRemoveLineSeparatorItem()
			{
				return this.contextMenuRulesEditorActionsRemoveLineSeparatorItem;
			}
			private MenuItem contextMenuRulesEditorActionsRemoveLineSeparatorItem;
			public ReadOnlyMenuItem getRulesEditorActionsAddEntityFieldItem()
			{
				return this.contextMenuRulesEditorActionsAddEntityFieldItem;
			}
			private MenuItem contextMenuRulesEditorActionsAddEntityFieldItem;
			public ReadOnlyMenuItem getRulesEditorActionsRemoveEntityFieldItem()
			{
				return this.contextMenuRulesEditorActionsRemoveEntityFieldItem;
			}
			private MenuItem contextMenuRulesEditorActionsRemoveEntityFieldItem;
			public ReadOnlyMenuItem getRulesEditorActionsMoveUPItem()
			{
				return this.contextMenuRulesEditorActionsMoveUPItem;
			}
			private MenuItem contextMenuRulesEditorActionsMoveUPItem;
			public ReadOnlyMenuItem getRulesEditorActionsMoveDownItem()
			{
				return this.contextMenuRulesEditorActionsMoveDownItem;
			}
			private MenuItem contextMenuRulesEditorActionsMoveDownItem;
		}
		public final class AdminNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class RulesEditor implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int AddLogicalCondition = 17;
				public static final int AddValueCondition = 18;
				public static final int Remove = 19;
				public static final int RemoveAll = 20;
				public static final int RemoveLogicalCondition = 21;
				public static final int RemoveValueCondition = 22;
			}
			public void disableAllRulesEditorMenuItems()
			{
				this.contextMenuRulesEditorAddLogicalConditionItem.setEnabled(false);
				this.contextMenuRulesEditorAddValueConditionItem.setEnabled(false);
				this.contextMenuRulesEditorRemoveItem.setEnabled(false);
				this.contextMenuRulesEditorRemoveAllItem.setEnabled(false);
				this.contextMenuRulesEditorRemoveLogicalConditionItem.setEnabled(false);
				this.contextMenuRulesEditorRemoveValueConditionItem.setEnabled(false);
			}
			public void hideAllRulesEditorMenuItems()
			{
				this.contextMenuRulesEditorAddLogicalConditionItem.setVisible(false);
				this.contextMenuRulesEditorAddValueConditionItem.setVisible(false);
				this.contextMenuRulesEditorRemoveItem.setVisible(false);
				this.contextMenuRulesEditorRemoveAllItem.setVisible(false);
				this.contextMenuRulesEditorRemoveLogicalConditionItem.setVisible(false);
				this.contextMenuRulesEditorRemoveValueConditionItem.setVisible(false);
			}
			private Menu contextMenuRulesEditor;
			public ReadOnlyMenuItem getRulesEditorAddLogicalConditionItem()
			{
				return this.contextMenuRulesEditorAddLogicalConditionItem;
			}
			private MenuItem contextMenuRulesEditorAddLogicalConditionItem;
			public ReadOnlyMenuItem getRulesEditorAddValueConditionItem()
			{
				return this.contextMenuRulesEditorAddValueConditionItem;
			}
			private MenuItem contextMenuRulesEditorAddValueConditionItem;
			public ReadOnlyMenuItem getRulesEditorRemoveItem()
			{
				return this.contextMenuRulesEditorRemoveItem;
			}
			private MenuItem contextMenuRulesEditorRemoveItem;
			public ReadOnlyMenuItem getRulesEditorRemoveAllItem()
			{
				return this.contextMenuRulesEditorRemoveAllItem;
			}
			private MenuItem contextMenuRulesEditorRemoveAllItem;
			public ReadOnlyMenuItem getRulesEditorRemoveLogicalConditionItem()
			{
				return this.contextMenuRulesEditorRemoveLogicalConditionItem;
			}
			private MenuItem contextMenuRulesEditorRemoveLogicalConditionItem;
			public ReadOnlyMenuItem getRulesEditorRemoveValueConditionItem()
			{
				return this.contextMenuRulesEditorRemoveValueConditionItem;
			}
			private MenuItem contextMenuRulesEditorRemoveValueConditionItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[91];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-ID", "ID_BusinessRule");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-NAME", "Name");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-DESCRIPTION", "Description");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-CATEGORY", "Category");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-VALIDFROM", "ValidFrom");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-VALIDTO", "ValidTo");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-PRIORITY", "Priority");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-XMLCONTENT", "XmlContent");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-ACTIVE", "Active");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_Rules.RuleToEdit", "BO-1004100040-ROOTENTITY", "RootEntity");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier, "BO-1004100040-ID", "ID_BusinessRule");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier, "BO-1004100040-NAME", "Name");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier, "BO-1004100040-DESCRIPTION", "Description");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier, "BO-1004100040-CATEGORY", "Category");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier, "BO-1004100040-VALIDFROM", "ValidFrom");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier, "BO-1004100040-VALIDTO", "ValidTo");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier, "BO-1004100040-PRIORITY", "Priority");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier, "BO-1004100040-XMLCONTENT", "XmlContent");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier, "BO-1004100040-ACTIVE", "Active");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Rules.RulesEditorComponent.__internal_x_context__EditedRule_" + componentIdentifier, "BO-1004100040-ROOTENTITY", "RootEntity");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return formInfo.getLocalVariablesPrefix() + formInfo.getNamespaceName() + formInfo.getFormName() + formInfo.getFormId() + "_" + this.componentIdentifier;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
