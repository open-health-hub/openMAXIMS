//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by Catalin Tomozei using IMS Development Environment (version 1.70 build 3394.18601)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.rules.forms.ruleseditorcomponent;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import ims.admin.vo.AppUserShortVo;
import ims.admin.vo.AppUserShortVoCollection;
import ims.admin.vo.BusinessRuleVo;
import ims.admin.vo.RuleConditionRowVo;
import ims.admin.vo.lookups.BusinessRuleCategory;
import ims.admin.vo.lookups.RuleConditionType;
import ims.core.configuration.vo.AppUserRefVo;
import ims.domain.exceptions.DomainRuntimeException;
import ims.framework.Control;
import ims.framework.LayerBridge;
import ims.framework.MessageButtons;
import ims.framework.MessageDefaultButton;
import ims.framework.MessageIcon;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridCellCollection;
import ims.framework.controls.DynamicGridCellItem;
import ims.framework.controls.DynamicGridCellOptions;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellDecoratorMode;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.NotificationPriority;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Date;
import ims.framework.utils.DateFormat;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;
import ims.framework.utils.PartialDate;
import ims.framework.utils.Time;
import ims.framework.utils.TimeFormat;
import ims.rules.exceptions.RulesEngineSerializationException;
import ims.rules.helper.Entities;
import ims.rules.interfaces.IRule;
import ims.rules.interfaces.IRuleAction;
import ims.rules.interfaces.IRuleCondition;
import ims.rules.types.Rule;
import ims.rules.types.RuleActionDataValidationError;
import ims.rules.types.RuleActionEntityMethod;
import ims.rules.types.RuleActionNotificationElement;
import ims.rules.types.RuleActionNotificationElementType;
import ims.rules.types.RuleActionUserNotification;
import ims.rules.types.RuleLogicalCondition;
import ims.rules.types.RuleValueComparator;
import ims.rules.types.RuleValueCondition;
import ims.rules.types.RuleValueConditionEntry;
import ims.rules.types.RulesEngineEntity;
import ims.rules.types.RulesEngineEntityMethod;
import ims.rules.types.RulesEngineEntityMethodArgument;
import ims.rules.types.RulesEngineField;
import ims.rules.types.RulesEngineFieldType;
import ims.rules.types.RulesEngineMethodArgumentType;
import ims.rules.types.RuleLogicalCondition.RuleLogicalConditionType;
import ims.rules.utils.RuleXmlSerialization;
import ims.rules.vo.enums.RulesEditorComponentFormAction;
import ims.vo.LookupInstVo;
import ims.vo.LookupInstanceCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private String RuleActionDataValidationError = "-1";
	private static final int NOTIFICATION = 3;
	private static final int NOTIFICATION_USER = 4;
	private static final int NOTIFICATION_USER_INSTANCE = 5;
	private static final int NOTIFICATION_USER_ENTITY_INSTANCE = 6;
	private static final int NOTIFICATION_MESSAGE = 7;
	private static final int NOTIFICATION_MESSAGE_INSTANCE = 8;
	private static final int NOTIFICATION_LINE_SEPARATOR_INSTANCE = 9;
	private static final int NOTIFICATION_OPTION = 10;
	private static final int NOTIFICATION_OPTION_PRIORITY = 11;

	private void open() throws PresentationLogicException
	{
		// populate Root Entity
		populateRootEntity();

		BusinessRuleVo editedRule = form.getLocalContext().getEditedRule();

		// If any edited rule, display it
		if (editedRule != null)
		{
			IRule rule;
			try
			{
				rule = RuleXmlSerialization.deserializeFromXml(editedRule.getXmlContent(), Entities.getInstance());
				displayRule(rule, editedRule);
			}
			catch (Exception e)
			{
				e.printStackTrace();
				throw new DomainRuntimeException(e.toString());
			}
		}
		updateContextMenu();
	}

	private void initialize() throws PresentationLogicException
	{
		// hide tab Overview
		form.lyrRules().tabOverview().setHeaderVisible(false);

		form.lyrRules().tabGeneral().ccBusinessRuleCategory().clear();
		form.lyrRules().tabGeneral().ccBusinessRuleCategory().initialize(BusinessRuleCategory.TYPE_ID);

		form.getLocalContext().setIsFirstConditionDefined(false);

		// Clear tabs
		form.lyrRules().tabConditions().dyngrdConditions().clear();
		form.lyrRules().tabConditions().dyngrdConditions().getRows().clear();
		form.lyrRules().tabActions().dyngrdActions().clear();
		form.lyrRules().tabActions().dyngrdActions().getRows().clear();

		// Clear tab General
		form.lyrRules().tabGeneral().txtName().setValue(null);
		form.lyrRules().tabGeneral().txtDescription().setValue(null);
		form.lyrRules().tabGeneral().ccBusinessRuleCategory().setValue(null);
		form.lyrRules().tabGeneral().dteValidFrom().setValue(null);
		form.lyrRules().tabGeneral().dteValidTo().setValue(null);
		form.lyrRules().tabGeneral().chkDateRange().setValue(false);
		onChkDateRangeValueChanged();
		form.lyrRules().tabGeneral().chkActive().setValue(false);

		// Focus tab General
		form.lyrRules().showtabGeneral();

		// Focus on Name
		form.lyrRules().tabGeneral().txtName().setFocus();

		form.getLocalContext().setAlreadyAddedCollection(false);
	}

	private void populateRootEntity()
	{
		form.lyrRules().tabConditions().cmbRootEntity().clear();
		List<RulesEngineEntity> entities = new Entities().getAllPublicEntities();

		Collections.sort(entities, new RulesEngineEntityComparator());

		for (int i = 0; i < entities.size(); i++)
		{
			form.lyrRules().tabConditions().cmbRootEntity().newRow(entities.get(i), entities.get(i).getName());
		}
	}

	private void updateContextMenu()
	{
		DynamicGridRow selectedRow = form.lyrRules().tabConditions().dyngrdConditions().getSelectedRow();
		DynamicGridRow selectedActionRow = form.lyrRules().tabActions().dyngrdActions().getSelectedRow();

		boolean suportUserNotification = form.lyrRules().tabConditions().cmbRootEntity().getValue() != null ? (form.lyrRules().tabConditions().cmbRootEntity().getValue().supportsNotifications()) : false;

		form.getLocalContext().setUsersEntityAdded(false);
		if (selectedActionRow != null)
		{
			for (int i = 0; i < selectedActionRow.getRows().size(); i++)
			{
				if (selectedActionRow.getRows().get(i).getIdentifier() != null && selectedActionRow.getRows().get(i).getIdentifier().equals(NOTIFICATION_USER_ENTITY_INSTANCE))
				{
					form.getLocalContext().setUsersEntityAdded(true);
					break;
				}
			}
		}

		boolean canMoveUp = selectedActionRow != null ? (selectedActionRow.canMoveUp() ? selectedActionRow.canMoveUp() : false) : false;
		boolean canMoveDown = selectedActionRow != null ? (selectedActionRow.canMoveDown() ? selectedActionRow.canMoveDown() : false) : false;

		boolean isEditMode = form.getMode().equals(FormMode.EDIT) ? true : false;
		boolean isRowSelectedOnGridCondition = selectedRow != null ? true : false;
		boolean isRowSelectedOnGridAction = form.lyrRules().tabActions().dyngrdActions().getSelectedRow() != null ? true : false;

		boolean isNotificationUser = isRowSelectedOnGridAction && (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier() != null ? (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier().equals(NOTIFICATION_USER) ? true : false) : false);
		boolean isNotificationUserInstance = isRowSelectedOnGridAction && (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier() != null ? (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier() instanceof AppUserShortVo ? true : false) : false);
		boolean isNotificationUserEntityInstance = isRowSelectedOnGridAction && (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier() != null ? (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier().equals(NOTIFICATION_USER_ENTITY_INSTANCE) ? true : false) : false);
		boolean isNotificationMessage = isRowSelectedOnGridAction && (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier() != null ? (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier().equals(NOTIFICATION_MESSAGE) ? true : false) : false);
		boolean isNotificationMessageInstance = isRowSelectedOnGridAction && (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier() != null ? (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier().equals(NOTIFICATION_MESSAGE_INSTANCE) ? true : false) : false);
		boolean isNotificationLineSeparatorInstance = isRowSelectedOnGridAction && (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier() != null ? (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier().equals(NOTIFICATION_LINE_SEPARATOR_INSTANCE) ? true : false) : false);
		boolean isNotificationEntityFieldInstance = isRowSelectedOnGridAction && (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier() != null ? (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier() instanceof RuleConditionRowVo ? true : false) : false);
		boolean isNotificationOption = isRowSelectedOnGridAction && (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier() != null ? (form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getIdentifier().equals(NOTIFICATION_OPTION) ? true : false) : false);

		boolean isLogicCondition = selectedRow != null ? (selectedRow.getIdentifier() != null ? (((RuleConditionRowVo) selectedRow.getIdentifier()).getType().equals(RuleConditionType.LOGICAL) ? true : false) : false) : false;
		boolean isValueCondition = selectedRow != null ? (selectedRow.getIdentifier() != null ? (((RuleConditionRowVo) selectedRow.getIdentifier()).getType().equals(RuleConditionType.VALUE) ? true : false) : false) : false;
		boolean isFirstRow = selectedRow != null ? (selectedRow.getIdentifier() != null ? (((RuleConditionRowVo) selectedRow.getIdentifier()).getType().equals(RuleConditionType.FIRST_LOGICAL) ? true : false) : false) : false;
		boolean isGridConditionEmpty = form.lyrRules().tabConditions().dyngrdConditions().getRows().size() > 0 ? true : false;
		boolean isGridActionEmpty = form.lyrRules().tabActions().dyngrdActions().getRows().size() > 0 ? true : false;

		form.getContextMenus().Admin.getRulesEditorAddLogicalConditionItem().setVisible(isEditMode && isRowSelectedOnGridCondition && !isValueCondition);
		form.getContextMenus().Admin.getRulesEditorAddValueConditionItem().setVisible(isEditMode && isRowSelectedOnGridCondition && !isValueCondition && (isLogicCondition || isFirstRow) && form.lyrRules().tabConditions().dyngrdConditions().getSelectedRow() != null);

		form.getContextMenus().Admin.getRulesEditorRemoveAllItem().setVisible(isEditMode && isGridConditionEmpty);
		form.getContextMenus().Admin.getRulesEditorRemoveItem().setVisible(isEditMode && isRowSelectedOnGridCondition && !isFirstRow);

		form.getContextMenus().Rules.getRulesEditorActionsAddActionItem().setVisible(isEditMode);
		form.getContextMenus().Rules.getRulesEditorActionsRemoveActionItem().setVisible(isEditMode && isRowSelectedOnGridAction && !isNotificationOption);
		form.getContextMenus().Rules.getRulesEditorActionsRemoveAllItem().setVisible(isEditMode && isGridActionEmpty);

		if (isNotificationUser || isNotificationUserInstance || isNotificationUserEntityInstance || isNotificationMessage || isNotificationMessageInstance || isNotificationLineSeparatorInstance || isNotificationEntityFieldInstance)
		{
			form.getContextMenus().Rules.hideAllRulesEditorActionsMenuItems();
		}

		form.getContextMenus().Rules.getRulesEditorActionsAddUserItem().setVisible(isEditMode && isNotificationUser);
		form.getContextMenus().Rules.getRulesEditorActionsAddEntityUsersItem().setVisible(isEditMode && isNotificationUser && suportUserNotification && suportUserNotification && !form.getLocalContext().getUsersEntityAdded());
		form.getContextMenus().Rules.getRulesEditorActionsRemoveEntityUsersItem().setVisible(isEditMode && isNotificationUserEntityInstance);

		form.getContextMenus().Rules.getRulesEditorActionsRemoveUserItem().setVisible(isEditMode && isNotificationUserInstance);
		form.getContextMenus().Rules.getRulesEditorActionsAddMessageItem().setVisible(isEditMode && isNotificationMessage);
		form.getContextMenus().Rules.getRulesEditorActionsRemoveMessageItem().setVisible(isEditMode && isNotificationMessageInstance);
		form.getContextMenus().Rules.getRulesEditorActionsAddLineSeparatorItem().setVisible(isEditMode && isNotificationMessage);
		form.getContextMenus().Rules.getRulesEditorActionsRemoveLineSeparatorItem().setVisible(isEditMode && isNotificationLineSeparatorInstance);
		form.getContextMenus().Rules.getRulesEditorActionsAddEntityFieldItem().setVisible(isEditMode && isNotificationMessage);
		form.getContextMenus().Rules.getRulesEditorActionsRemoveEntityFieldItem().setVisible(isEditMode && isNotificationEntityFieldInstance);

		form.getContextMenus().Rules.getRulesEditorActionsMoveUPItem().setVisible(isEditMode && canMoveUp && (isNotificationMessageInstance || isNotificationLineSeparatorInstance || isNotificationEntityFieldInstance));
		form.getContextMenus().Rules.getRulesEditorActionsMoveDownItem().setVisible(isEditMode && canMoveDown && (isNotificationMessageInstance || isNotificationLineSeparatorInstance || isNotificationEntityFieldInstance));
	}

	private DynamicGridColumn createColumn(String text, int identifier)
	{
		DynamicGridColumn column = form.lyrRules().tabConditions().dyngrdConditions().getColumns().newColumn(text, identifier);
		column.setDynamicWidthSupported(true);

		return column;
	}

	private DynamicGridColumn createColumnForActionGrid(String text, int identifier)
	{
		DynamicGridColumn column = form.lyrRules().tabActions().dyngrdActions().getColumns().newColumn(text, identifier);
		column.setDynamicWidthSupported(true);

		return column;
	}

	private DynamicGridColumn getColByIndex(int index)
	{
		return form.lyrRules().tabConditions().dyngrdConditions().getColumns().getByIdentifier(new Integer(index));
	}

	private DynamicGridColumn getColByIndexForActionGrid(int index)
	{
		return form.lyrRules().tabActions().dyngrdActions().getColumns().getByIdentifier(new Integer(index));
	}

	private int clearRightCells(int coll, DynamicGridRow row)
	{
		// clear right cell and save no of remaining columns
		if (row == null)
			return 0;

		int collNumber = form.lyrRules().tabConditions().dyngrdConditions().getColumns().size();
		RuleConditionRowVo identifier = (RuleConditionRowVo) row.getIdentifier();
		int nextCollAvaible = 0;

		for (int i = 0; i < collNumber; i++)
		{
			if (i > coll)
			{
				if (nextCollAvaible == 0)
				{
					nextCollAvaible = i;
				}

				DynamicGridColumn column = getColByIndex(i);
				if (column != null && getColByIndex(i) != null && row.getCells() != null)
				{
					if (row.getCells().get(getColByIndex(i)) != null)
					{
						row.getCells().get(getColByIndex(i)).clear();
					}
				}
			}
			if (collNumber == coll + 1)
			{
				nextCollAvaible = coll + 1;

				DynamicGridColumn column = getColByIndex(i);
				if (column != null && getColByIndex(i) != null && row.getCells() != null)
				{
					if (row.getCells().get(getColByIndex(i)) != null)
					{
						row.getCells().get(getColByIndex(i)).clear();
					}
				}

				break;
			}
		}
		if (identifier != null)
		{
			identifier.setNumberOfColumns(nextCollAvaible - 1);
		}

		return nextCollAvaible;
	}

	private int clearRightCellsForActionGrid(int coll, DynamicGridRow row)
	{
		// clear right cell and save no of remaining columns
		if (row == null)
			return 0;

		int collNumber = form.lyrRules().tabActions().dyngrdActions().getColumns().size();
		RuleConditionRowVo identifier = (RuleConditionRowVo) row.getIdentifier();
		int nextCollAvaible = 0;

		for (int i = 0; i < collNumber; i++)
		{
			if (i > coll)
			{
				if (nextCollAvaible == 0)
				{
					nextCollAvaible = i;
				}

				DynamicGridColumn column = getColByIndexForActionGrid(i);
				if (column != null && getColByIndexForActionGrid(i) != null && row.getCells() != null)
				{
					if (row.getCells().get(getColByIndexForActionGrid(i)) != null)
					{
						row.getCells().get(getColByIndexForActionGrid(i)).clear();
					}
				}
			}
			if (collNumber == coll + 1)
			{
				nextCollAvaible = coll + 1;

				DynamicGridColumn column = getColByIndexForActionGrid(i);
				if (column != null && getColByIndexForActionGrid(i) != null && row.getCells() != null)
				{
					if (row.getCells().get(getColByIndexForActionGrid(i)) != null)
					{
						row.getCells().get(getColByIndexForActionGrid(i)).clear();
					}
				}

				break;
			}
		}
		if (identifier != null)
		{
			identifier.setNumberOfColumns(nextCollAvaible - 1);
		}

		return nextCollAvaible;
	}

	private void createCellsByType(RulesEngineField identifier, DynamicGridCell cell)
	{
		int nextCollAvaible = clearRightCells((Integer) cell.getColumn().getIdentifier(), cell.getRow());
		RulesEngineFieldType type = identifier.getType();

		DynamicGridRow row = cell.getRow();
		RuleConditionRowVo vo = (RuleConditionRowVo) row.getIdentifier();
		int count = vo.getNumberOfColumns();

		DynamicGridColumn coll = null;
		if (nextCollAvaible != 0)
		{
			coll = getColByIndex(nextCollAvaible);
			if (coll == null)
			{
				coll = createColumn("", nextCollAvaible);
			}
		}
		else
		{
			count++;
			coll = getColByIndex(count);
			if (coll == null)
			{
				coll = createColumn("", count);
			}
		}

		setRowIdentifier(row, count, RuleConditionType.VALUE);

		count++;

		DynamicGridCell conditionValueCell = cell.getRow().getCells().newCell(coll, DynamicCellType.ENUMERATION);
		for (int j = 0; j < type.getComparators().length; j++)
		{
			if (checkRowForAnyCollection(cell))
			{
				if (type.getComparators()[j].equals(RuleValueComparator.NOTEQUALS))
					continue;
			}

			DynamicGridCellItem item = conditionValueCell.getItems().newItem(type.getComparators()[j]);
			item.setIdentifier(type.getComparators()[j]);
			conditionValueCell.setValue(type.getComparators()[j]);
			conditionValueCell.setIdentifier(type.getComparators()[j]);
		}

		setRowIdentifier(row, count, RuleConditionType.VALUE);

		conditionValueCell.setAutoPostBack(true);
		count++;

		DynamicGridColumn colll = getColByIndex(count);
		DynamicGridCell cellValue = null;

		if (colll == null)
		{
			colll = createColumn("", count);
		}

		setRowIdentifier(row, count, RuleConditionType.VALUE);

		createCellByType(identifier, cell, type, colll, cellValue);
	}

	private void createCellByType(RulesEngineField identifier, DynamicGridCell cell, RulesEngineFieldType type, DynamicGridColumn coll, DynamicGridCell cellValue)
	{
		if (type.equals(RulesEngineFieldType.STRING))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.STRING, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		}
		else if (type.equals(RulesEngineFieldType.INTEGER))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.INT, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		}
		else if (type.equals(RulesEngineFieldType.ENTITY_CODE))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.INT, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		}
		else if (type.equals(RulesEngineFieldType.DECIMAL))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.DECIMAL, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		}
		else if (type.equals(RulesEngineFieldType.DATE))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.DATE, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		}
		else if (type.equals(RulesEngineFieldType.DATETIME))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.DATETIME, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		}
		else if (type.equals(RulesEngineFieldType.PARTIALDATE))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.PARTIALDATE, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		}
		else if (type.equals(RulesEngineFieldType.BOOLEAN))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.ENUMERATION, DynamicGridCellOptions.EDITABLE_DATA_CELL);

			cellValue.getItems().newItem("True");
			cellValue.getItems().get(0).setIdentifier(Boolean.TRUE);
			cellValue.getItems().newItem("False");
			cellValue.getItems().get(1).setIdentifier(Boolean.FALSE);

			cellValue.setWidth(160);
			cellValue.setReadOnly(false);

		}
		else if (type.equals(RulesEngineFieldType.TIME))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.TIME, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		}
		else if (type.equals(RulesEngineFieldType.ENTITY_CODE))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.INT, DynamicGridCellOptions.EDITABLE_DATA_CELL);
		}
		else if (type.equals(RulesEngineFieldType.LOOKUP))
		{
			cellValue = cell.getRow().getCells().newCell(coll, DynamicCellType.ENUMERATION, DynamicGridCellOptions.EDITABLE_DATA_CELL);
			int lookupId = identifier.getTypeLookupId();
			LookupInstanceCollection collection = domain.getLookupTypeInstance(lookupId);
			for (int j = 0; j < collection.size(); j++)
			{
				cellValue.getItems().newItem(collection.getIndex(j).getText());
				cellValue.getItems().get(j).setIdentifier(collection.getIndex(j));
			}
		}
		else
		{
			throw new CodingRuntimeException("Unknow cell type");
		}

		cellValue.setWidth(160);
		cellValue.setReadOnly(false);
	}

	@Override
	protected void onDyngrdConditionsCellValueChanged(DynamicGridCell cell)
	{
		if (cell.getValue() != null && cell.getItems() != null)
		{
			for (int i = 0; i < cell.getItems().size(); i++)
			{
				if (cell.getItems().get(i).getValue().equals(cell.getValue()))
				{
					// If Entity
					if (cell.getItems().get(i).getIdentifier() instanceof RulesEngineEntity)
					{
						RulesEngineEntity identifier = (RulesEngineEntity) cell.getItems().get(i).getIdentifier();
						int nextCollAvaible = clearRightCells((Integer) cell.getColumn().getIdentifier(), cell.getRow());
						DynamicGridRow row = cell.getRow();

						RuleConditionRowVo vo = (RuleConditionRowVo) row.getIdentifier();
						int count = vo.getNumberOfColumns();

						DynamicGridColumn coll = null;
						if (nextCollAvaible != 0)
						{
							coll = getColByIndex(nextCollAvaible);
							if (coll == null)
							{
								coll = createColumn("", nextCollAvaible);
							}
							setRowIdentifier(row, nextCollAvaible, RuleConditionType.VALUE);
						}
						else
						{
							count++;
							coll = getColByIndex(count);
							if (coll == null)
							{
								coll = createColumn("", count);
							}
							setRowIdentifier(row, count, RuleConditionType.VALUE);
						}

						DynamicGridCell conditionValueCell = cell.getRow().getCells().newCell(coll, DynamicCellType.ENUMERATION);
						for (int j = 0; j < identifier.getFields().size(); j++)
						{
							conditionValueCell.getItems().newItem().setValue(identifier.getFields().get(j).getName());
							conditionValueCell.getItems().get(j).setIdentifier(identifier.getFields().get(j));
						}

						// if it's the second entity after root entity don't add
						// EMPTY and NOTEMPTY
						if (!identifier.equals(form.lyrRules().tabConditions().cmbRootEntity().getValue()))
						{
							// add Empty and NotEmpty types
							conditionValueCell.getItems().newItem(RuleValueComparator.EMPTY.toString(), null, Color.Red);
							conditionValueCell.getItems().get(identifier.getFields().size()).setIdentifier(RuleValueComparator.EMPTY);
							conditionValueCell.getItems().newItem(RuleValueComparator.NOTEMPTY.toString(), null, Color.Red);
							conditionValueCell.getItems().get(identifier.getFields().size() + 1).setIdentifier(RuleValueComparator.NOTEMPTY);
						}

						conditionValueCell.setAutoPostBack(true);
						conditionValueCell.setWidth(160);

					}
					// If Comparator
					else if (cell.getItems().get(i).getIdentifier() instanceof RuleValueComparator)
					{
						RuleValueComparator comparator = (RuleValueComparator) cell.getItems().get(i).getIdentifier();
						cell.setIdentifier(comparator);

						RuleConditionRowVo vo = (RuleConditionRowVo) cell.getRow().getIdentifier();
						int totalColls = vo.getNumberOfColumns();
						int collNumber = (Integer) cell.getColumn().getIdentifier();

						// if EMPRY of NOTEMPTY delete all right cells
						if (comparator.equals(RuleValueComparator.EMPTY) || comparator.equals(RuleValueComparator.NOTEMPTY))
						{
							do
							{
								if (totalColls <= collNumber)
									break;

								if (getColByIndex(totalColls) != null && cell.getRow().getCells().get(getColByIndex(totalColls)) != null)
								{
									cell.getRow().getCells().get(getColByIndex(totalColls)).clear();
								}

								totalColls--;
							}
							while (collNumber < totalColls);

							setRowIdentifier(cell.getRow(), totalColls, RuleConditionType.VALUE);

							return;
						}
						else
						{
							DynamicGridColumn coll = null;

							// get compared entry coll and cell in order to get
							// type and create cell
							coll = getColByIndex(collNumber - 1);

							if (coll == null)
							{
								throw new CodingRuntimeException("Error geting compared entity colum");
							}

							DynamicGridCell entityCell = cell.getRow().getCells().get(coll);
							RulesEngineField identifier = null;
							// if (entityCell.getItems().get(i).getIdentifier()
							// instanceof RulesEngineField)
							if (entityCell.getIdentifier() instanceof RulesEngineField)
								identifier = (RulesEngineField) entityCell.getIdentifier();

							DynamicGridColumn valueColl = getColByIndex(collNumber + 1);
							DynamicGridColumn comparedEntityColl = getColByIndex(collNumber - 1);
							DynamicGridCell cellValue = null;

							if (valueColl == null)
							{
								valueColl = createColumn("", collNumber + 1);
							}

							setRowIdentifier(cell.getRow(), collNumber + 1, RuleConditionType.VALUE);

							DynamicGridCell conditionValueCell = cell.getRow().getCells().get(comparedEntityColl);
							if (conditionValueCell == null)
								throw new CodingRuntimeException("Compared Entity cell is null");

							int comparedValueCellSize = conditionValueCell.getItems().size();
							RulesEngineField comparedValueIdentifier = null;

							for (int j = 0; j < comparedValueCellSize; j++)
							{
								if (conditionValueCell.getItems().get(j).getValue().equals(conditionValueCell.getValue()))
								{
									comparedValueIdentifier = (RulesEngineField) conditionValueCell.getItems().get(j).getIdentifier();
									break;
								}
							}

							if (getColByIndex(collNumber + 1) != null && cell.getRow().getCells().get(getColByIndex(collNumber + 1)) != null && cell.getRow().getCells().get(getColByIndex(collNumber + 1)).getValue() != null)
								continue;

							createCellByType(identifier, cell, comparedValueIdentifier.getType(), valueColl, cellValue);
						}
					}
					// If RulesEngineField
					else if (cell.getItems().get(i).getIdentifier() instanceof RulesEngineField)
					{
						RulesEngineField identifier = (RulesEngineField) cell.getItems().get(i).getIdentifier();
						// Get type of RulesEngineField
						if (identifier.getType() != null)
						{
							if (identifier.getType().equals(RulesEngineFieldType.ENTITY))
							{
								// set cell identifier
								cell.setIdentifier(identifier);
								if (!form.getLocalContext().getAlreadyAddedCollection() && identifier.isCollection())
								{
									form.getLocalContext().setAlreadyAddedCollection(true);
								}
								// clear all right cells
								int nextCollAvaible = clearRightCells((Integer) cell.getColumn().getIdentifier(), cell.getRow());

								DynamicGridRow row = cell.getRow();
								RuleConditionRowVo vo = (RuleConditionRowVo) row.getIdentifier();
								int count = vo.getNumberOfColumns();

								DynamicGridColumn coll = null;

								if (nextCollAvaible != 0)
								{
									coll = getColByIndex(nextCollAvaible);

									if (coll == null)
									{
										coll = createColumn("", nextCollAvaible);
									}
								}
								else
								{
									coll = getColByIndex(count + 1);

									if (coll == null)
									{
										coll = createColumn("", count + 1);
									}
								}

								setRowIdentifier(row, count + 1, RuleConditionType.VALUE);

								DynamicGridCell conditionValueCell = cell.getRow().getCells().newCell(coll, DynamicCellType.ENUMERATION);
								// int fieldsSize =
								// identifier.getTypeEntity().getFields().size();
								for (int j = 0; j < identifier.getTypeEntity().getFields().size(); j++)
								{
									if (((RulesEngineField) cell.getItems().get(i).getIdentifier()).getTypeEntity().getFields().get(j).isCollection())
									{
										if (!form.getLocalContext().getAlreadyAddedCollection())
										{
											form.getLocalContext().setAlreadyAddedCollection(true);
										}
										else
										{
											continue;
										}
									}

									DynamicGridCellItem item = conditionValueCell.getItems().newItem();
									item.setValue(((RulesEngineField) cell.getItems().get(i).getIdentifier()).getTypeEntity().getFields().get(j).getName());
									item.setIdentifier(((RulesEngineField) cell.getItems().get(i).getIdentifier()).getTypeEntity().getFields().get(j));
								}

								// add Empty and NotEmpty types
								DynamicGridCellItem item = conditionValueCell.getItems().newItem(RuleValueComparator.EMPTY.toString(), null, Color.Red);
								item.setIdentifier(RuleValueComparator.EMPTY);
								if (!checkRowForAnyCollection(conditionValueCell))
								{
									item = conditionValueCell.getItems().newItem(RuleValueComparator.NOTEMPTY.toString(), null, Color.Red);
									item.setIdentifier(RuleValueComparator.NOTEMPTY);
								}

								conditionValueCell.setAutoPostBack(true);
								conditionValueCell.setWidth(160);

								conditionValueCell.setValue(cell.getItems().get(i).getIdentifier());
								conditionValueCell.setIdentifier(cell.getItems().get(i).getIdentifier());
							}
							else
							{
								createCellsByType(identifier, cell);

								// set identifier for current cell
								DynamicGridColumn currentColl = getColByIndex(((Integer) cell.getColumn().getIdentifier()).intValue());
								if (cell.getRow().getCells().get(currentColl) != null && cell.getRow().getCells().get(currentColl).getItems() != null && cell.getRow().getCells().get(currentColl).getItems().size() > 0)
								{
									for (int k = 0; k < cell.getRow().getCells().get(currentColl).getItems().size(); k++)
									{
										DynamicGridCellItem item = cell.getRow().getCells().get(currentColl).getItems().get(k);
										if (item.getValue().equals(cell.getRow().getCells().get(currentColl).getValue()))
										{
											cell.setIdentifier(item.getIdentifier());
											break;
										}
									}
								}
							}
						}
					}
					else if (cell.getItems().get(i).getIdentifier() instanceof RuleLogicalCondition)
					{
						setRowIdentifier(cell.getRow(), (Integer) cell.getColumn().getIdentifier() + 1, cell.getRow().getIdentifier() != null ? ((RuleConditionRowVo) cell.getRow().getIdentifier()).getType() : RuleConditionType.LOGICAL);
					}

				}
			}
		}
		else
		{
			// Was selected a empty value so clear everything
			RuleConditionRowVo vo = (RuleConditionRowVo) cell.getRow().getIdentifier();
			int totalColls = vo.getNumberOfColumns();
			int collNumber = (Integer) cell.getColumn().getIdentifier();

			do
			{
				if (totalColls <= collNumber)
					break;

				if (getColByIndex(totalColls) != null && cell.getRow().getCells().get(getColByIndex(totalColls)) != null)
				{
					cell.getRow().getCells().get(getColByIndex(totalColls)).clear();
				}

				totalColls--;
			}
			while (collNumber < totalColls);

			setRowIdentifier(cell.getRow(), totalColls, vo.getTypeIsNotNull() ? vo.getType() : RuleConditionType.VALUE);

			updateContextMenu();

			return;
		}
	}

	private boolean checkRowForAnyCollection(DynamicGridCell cell)
	{
		// Was selected a empty value so clear everything
		RuleConditionRowVo vo = (RuleConditionRowVo) cell.getRow().getIdentifier();
		int totalColls = vo.getNumberOfColumns();
		int collNumber = (Integer) cell.getColumn().getIdentifier();
		boolean found = false;

		do
		{
			if (collNumber < 2)
				break;

			if (getColByIndex(totalColls) != null && cell.getRow().getCells().get(getColByIndex(totalColls)) != null)
			{
				if (cell.getRow().getCells().get(getColByIndex(totalColls)).getIdentifier() != null)
				{
					form.getLocalContext().setAlreadyAddedCollection(true);
					found = true;
					break;
				}
			}

			collNumber--;
		}
		while (found == false && collNumber < 2);

		return found;
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.AdminNamespace.RulesEditor.AddLogicalCondition:
				addRuleLogicalCondition(null);
				break;
			case GenForm.ContextMenus.AdminNamespace.RulesEditor.AddValueCondition:
				addValueCondition(form.lyrRules().tabConditions().dyngrdConditions().getSelectedRow(), true);
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.AddAction:
				addAction();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.RemoveAction:
				removeAction();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.RemoveAll:
				removeAllActions();
				break;
			case GenForm.ContextMenus.AdminNamespace.RulesEditor.Remove:
				remove();
				break;
			case GenForm.ContextMenus.AdminNamespace.RulesEditor.RemoveAll:
				removeAll();
				break;
			// Notification
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.AddUser:
				addUser();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.AddEntityUsers:
				addEntityUser();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.RemoveUser:
				removeUser();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.RemoveEntityUsers:
				removeEntityUser();
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.AddMessage:
				addMessage();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.RemoveMessage:
				removeMessage();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.AddLineSeparator:
				addLineSeparator();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.RemoveLineSeparator:
				removeLineSeparator();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.AddEntityField:
				addEntityField();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.RemoveEntityField:
				removeEntityField();
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.MoveUP:
				moveUp(form.lyrRules().tabActions().dyngrdActions().getSelectedRow());
				break;
			case GenForm.ContextMenus.RulesNamespace.RulesEditorActions.MoveDown:
				moveDown(form.lyrRules().tabActions().dyngrdActions().getSelectedRow());
				break;
		}

		updateContextMenu();
	}

	private void removeEntityUser()
	{
		int size = form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getParent().getRows().size();
		if (size == 1)
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getParent().getParent());
		else
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow());
	}

	private void addEntityUser()
	{
		form.getLocalContext().setUsersEntityAdded(true);
		DynamicGridRow messageRow = form.lyrRules().tabActions().dyngrdActions().getSelectedRow();
		if (messageRow != null)
		{
			DynamicGridRow userEntityInstanceRow = messageRow.getRows().newRow();
			DynamicGridColumn userEntityInstanceColl = getColByIndexForActionGrid(0);
			if (userEntityInstanceColl == null)
			{
				userEntityInstanceColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell userEntityInstanceCell = userEntityInstanceRow.getCells().newCell(userEntityInstanceColl, DynamicCellType.HTMLVIEW);
			userEntityInstanceCell.setAutoPostBack(true);
			userEntityInstanceCell.setWidth(250);
			userEntityInstanceCell.setValue("--- User(s) Entity ---");
			userEntityInstanceRow.setIdentifier(NOTIFICATION_USER_ENTITY_INSTANCE);
		}
	}

	private void moveUp(DynamicGridRow selectedRow)
	{
		if (selectedRow.getParent() != null)
		{
			if (selectedRow.canMoveUp())
			{
				selectedRow.moveUp();
			}
		}
	}

	private void moveDown(DynamicGridRow selectedRow)
	{
		if (selectedRow.getParent() != null)
		{
			if (selectedRow.canMoveDown())
			{
				selectedRow.moveDown();
			}
		}
	}

	private void removeEntityField()
	{
		int size = form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getParent().getRows().size();
		if (size == 1)
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getParent().getParent());
		else
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow());
	}

	private void addEntityField()
	{
		DynamicGridRow entityFieldInstanceRow = form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getRows().newRow();
		entityFieldInstanceRow.setSelectable(true);

		RuleConditionRowVo vo = (RuleConditionRowVo) entityFieldInstanceRow.getIdentifier();

		int count = 1;

		if (vo != null)
			count = vo.getNumberOfColumns();

		setRowIdentifier(entityFieldInstanceRow, count, null);

		DynamicGridColumn valueColl = getColByIndexForActionGrid(count);
		if (valueColl == null)
		{
			valueColl = createColumnForActionGrid("", count);
		}

		setRowIdentifier(entityFieldInstanceRow, count, null);

		DynamicGridCell valueCell = entityFieldInstanceRow.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
		List<RulesEngineEntity> entities = new Entities().getAllPublicEntities();

		for (int i = 0; i < entities.size(); i++)
		{
			valueCell.getItems().newItem().setValue(entities.get(i).getName());
			valueCell.getItems().get(i).setIdentifier(entities.get(i));
		}
		valueCell.setValue(form.lyrRules().tabConditions().cmbRootEntity().getValue().getName());
		valueCell.setReadOnly(true);

		onDyngrdActionsCellValueChanged(valueCell);

		valueCell.setAutoPostBack(true);
		valueCell.setWidth(0);
	}

	private void removeLineSeparator()
	{
		int size = form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getParent().getRows().size();
		if (size == 1)
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getParent().getParent());
		else
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow());
	}

	private void addLineSeparator()
	{
		DynamicGridRow messageRow = form.lyrRules().tabActions().dyngrdActions().getSelectedRow();
		if (messageRow != null)
		{
			DynamicGridRow lineSeparatorInstanceRow = messageRow.getRows().newRow();
			DynamicGridColumn lineSeparatorInstanceColl = getColByIndexForActionGrid(0);
			if (lineSeparatorInstanceColl == null)
			{
				lineSeparatorInstanceColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell lineSeparatorInstanceCell = lineSeparatorInstanceRow.getCells().newCell(lineSeparatorInstanceColl, DynamicCellType.HTMLVIEW);
			lineSeparatorInstanceCell.setAutoPostBack(true);
			lineSeparatorInstanceCell.setWidth(250);
			lineSeparatorInstanceCell.setValue("--- Line Separator ---");
			lineSeparatorInstanceRow.setIdentifier(NOTIFICATION_LINE_SEPARATOR_INSTANCE);
		}
	}

	private void removeMessage()
	{
		int size = form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getParent().getRows().size();
		if (size == 1)
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getParent().getParent());
		else
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow());
	}

	private void removeUser()
	{
		int size = form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getParent().getRows().size();
		if (size == 1)
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getParent().getParent());
		else
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow());
	}

	private void addMessage()
	{
		DynamicGridRow messageRow = form.lyrRules().tabActions().dyngrdActions().getSelectedRow();
		if (messageRow != null)
		{
			DynamicGridRow messageInstanceRow = messageRow.getRows().newRow();
			DynamicGridColumn messageInstanceColl = getColByIndexForActionGrid(0);
			if (messageInstanceColl == null)
			{
				messageInstanceColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell messageInstancCell = messageInstanceRow.getCells().newCell(messageInstanceColl, DynamicCellType.WRAPTEXT);
			messageInstancCell.setAutoPostBack(true);
			messageInstancCell.setWidth(450);
			messageInstancCell.setDecoratorType(DynamicCellDecoratorMode.ALWAYS);
			messageInstanceRow.setIdentifier(NOTIFICATION_MESSAGE_INSTANCE);
		}
	}

	private void addUser()
	{
		DynamicGridRow userRow = form.lyrRules().tabActions().dyngrdActions().getSelectedRow();
		if (userRow != null)
		{
			// Add one user by default
			DynamicGridRow firstUserRow = userRow.getRows().newRow();
			DynamicGridColumn firstUserColl = getColByIndexForActionGrid(0);
			if (firstUserColl == null)
			{
				firstUserColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell firstUserCell = firstUserRow.getCells().newCell(firstUserColl, DynamicCellType.QUERYCOMBOBOX);
			firstUserCell.setAutoPostBack(true);
			firstUserCell.setWidth(450);
			firstUserRow.setIdentifier(NOTIFICATION_USER_INSTANCE);
		}
	}

	private void addNotification(DynamicGridRow parentRow)
	{
		if (form.lyrRules().tabConditions().cmbRootEntity().getValue() != null && parentRow != null)
		{
			// User
			DynamicGridRow userRow = parentRow.getRows().newRow();
			userRow.setExpanded(true);

			DynamicGridColumn userColl = getColByIndexForActionGrid(0);
			if (userColl == null)
			{
				userColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell userCell = userRow.getCells().newCell(userColl, DynamicCellType.HTMLVIEW);

			String user = "";
			user += "<table bgcolor='#FFFFFF' border='0'><tr><td WIDTH='8%'>";
			user += "<img src='" + form.getImages().Admin.Users48.getImagePath() + "' height='24' width='24'></td>";
			user += "<td><p style='font-family:courier new; text-align:left; color:black; bgcolor:gray; font-size:15px'>";
			user += "User(s)</b> " + "<font color='white'>";
			userCell.setValue(user);

			userCell.setAutoPostBack(true);
			userCell.setWidth(450);
			userRow.setIdentifier(NOTIFICATION_USER);

			// Add one user by default
			DynamicGridRow firstUserRow = userRow.getRows().newRow();
			DynamicGridColumn firstUserColl = getColByIndexForActionGrid(0);
			if (firstUserColl == null)
			{
				firstUserColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell firstUserCell = firstUserRow.getCells().newCell(firstUserColl, DynamicCellType.QUERYCOMBOBOX);
			firstUserCell.setAutoPostBack(true);
			firstUserCell.setWidth(450);
			firstUserRow.setIdentifier(NOTIFICATION_USER_INSTANCE);

			// Message
			DynamicGridRow messageRow = parentRow.getRows().newRow();
			messageRow.setIdentifier(NOTIFICATION_MESSAGE);
			messageRow.setExpanded(true);

			DynamicGridColumn messageColl = getColByIndexForActionGrid(0);
			if (messageColl == null)
			{
				messageColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell messageCell = messageRow.getCells().newCell(messageColl, DynamicCellType.HTMLVIEW);

			String message = "";
			message += "<table bgcolor='#FFFFFF' border='0'><tr><td WIDTH='8%'>";
			message += "<img src='" + form.getImages().CcoSched.ActionUpdate48.getImagePath() + "' height='24' width='24'></td>";
			message += "<td><p style='font-family:courier new; text-align:left; color:black; bgcolor:gray; font-size:15px'>";
			message += "Message</b> " + "<font color='white'>";
			messageCell.setValue(message);

			messageCell.setAutoPostBack(true);
			messageCell.setWidth(450);

			// Add one message by default
			DynamicGridRow firstMessagerRow = messageRow.getRows().newRow();
			firstMessagerRow.setIdentifier(NOTIFICATION_MESSAGE_INSTANCE);
			firstMessagerRow.setSelectable(false);
			DynamicGridColumn firstMessageColl = getColByIndexForActionGrid(0);
			if (firstMessageColl == null)
			{
				firstMessageColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell firstMessageCell = firstMessagerRow.getCells().newCell(firstMessageColl, DynamicCellType.WRAPTEXT);
			firstMessageCell.setAutoPostBack(true);
			firstMessageCell.setWidth(450);
			firstMessageCell.setDecoratorType(DynamicCellDecoratorMode.ALWAYS);

			// Priority
			DynamicGridRow optionRow = parentRow.getRows().newRow();
			optionRow.setIdentifier(NOTIFICATION_OPTION);
			optionRow.setExpanded(true);

			DynamicGridColumn optionColl = getColByIndexForActionGrid(0);
			if (optionColl == null)
			{
				optionColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell optionCell = optionRow.getCells().newCell(messageColl, DynamicCellType.HTMLVIEW);

			String options = "";
			options += "<table bgcolor='#FFFFFF' border='0'><tr><td WIDTH='8%'>";
			options += "<img src='" + form.getImages().Admin.Config48.getImagePath() + "' height='24' width='24'></td>";
			options += "<td><p style='font-family:courier new; text-align:left; color:black; bgcolor:gray; font-size:15px'>";
			options += "Options</b> " + "<font color='white'>";

			optionCell.setValue(options);

			optionCell.setAutoPostBack(true);
			optionCell.setWidth(450);

			// Add priority
			DynamicGridRow priorityRow = optionRow.getRows().newRow();
			priorityRow.setIdentifier(NOTIFICATION_OPTION_PRIORITY);
			priorityRow.setSelectable(false);
			DynamicGridColumn priorityLabelColl = getColByIndexForActionGrid(0);
			if (priorityLabelColl == null)
			{
				priorityLabelColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell priorityLabelCell = priorityRow.getCells().newCell(priorityLabelColl, DynamicCellType.HTMLVIEW);
			priorityLabelCell.setValue("Priority");

			DynamicGridColumn priorityColl = getColByIndexForActionGrid(1);
			if (priorityColl == null)
			{
				priorityColl = createColumnForActionGrid("", 1);
			}
			DynamicGridCell priorityCell = priorityRow.getCells().newCell(priorityColl, DynamicCellType.ENUMERATION);

			for (int i = 0; i < NotificationPriority.getAll().size(); i++)
			{
				DynamicGridCellItem item = priorityCell.getItems().newItem(NotificationPriority.getAll().get(i).getText());
				item.setIdentifier(NotificationPriority.getAll().get(i));
			}

			priorityCell.setValue(NotificationPriority.NORMAL.getText());
			onDyngrdActionsCellValueChanged(priorityCell);

			priorityCell.setValue(form.lyrRules().tabConditions().cmbRootEntity().getValue().getName());
			priorityCell.setAutoPostBack(true);
			priorityCell.setWidth(250);
		}
		else
		{
			ArrayList<String> err = new ArrayList<String>();
			err.add("Root Entity cannot be null");
			if (err.size() > 0)
			{
				String[] searchErrors = new String[err.size()];
				err.toArray(searchErrors);
				engine.showErrors("Invalid Rule", searchErrors);
				return;
			}
		}
	}

	private void removeAllActions()
	{
		if (form.lyrRules().tabActions().dyngrdActions().getRows() != null)
		{
			form.lyrRules().tabActions().dyngrdActions().getRows().clear();
		}
	}

	private void removeAction()
	{
		if (form.lyrRules().tabActions().dyngrdActions().getSelectedRow() != null && form.lyrRules().tabActions().dyngrdActions().getSelectedRow().getRows() != null)
		{
			form.lyrRules().tabActions().dyngrdActions().getRows().remove(form.lyrRules().tabActions().dyngrdActions().getSelectedRow());
		}
	}

	private void remove()
	{
		if (form.lyrRules().tabConditions().dyngrdConditions().getSelectedRow() != null && form.lyrRules().tabConditions().dyngrdConditions().getSelectedRow().getRows() != null)
		{
			form.lyrRules().tabConditions().dyngrdConditions().getRows().remove(form.lyrRules().tabConditions().dyngrdConditions().getSelectedRow());
		}
		updateContextMenu();
	}

	private void removeAll()
	{
		form.lyrRules().tabConditions().dyngrdConditions().clear();
		form.lyrRules().tabConditions().dyngrdConditions().getRows().clear();
		form.getLocalContext().setIsFirstConditionDefined(false);
		addRootLogicalCondition(null);
		DynamicGridRow row = form.lyrRules().tabConditions().dyngrdConditions().getRows().get(0);
		DynamicGridCell cell = row.getCells().get(getColByIndex(1));
		cell.setValue(RuleLogicalCondition.getInstance(RuleLogicalConditionType.ALLTRUE));
		onDyngrdConditionsCellValueChanged(cell);
		form.lyrRules().tabConditions().dyngrdConditions().setSelectedRow(row);
		updateContextMenu();
	}

	private DynamicGridRow addAction()
	{
		if (form.lyrRules().tabConditions().cmbRootEntity().getValue() != null)
		{
			DynamicGridRow row = form.lyrRules().tabActions().dyngrdActions().getRows().newRow();

			DynamicGridColumn valueColl = getColByIndexForActionGrid(0);
			if (valueColl == null)
			{
				valueColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell actionCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
			List<RulesEngineEntityMethod> actions = form.lyrRules().tabConditions().cmbRootEntity().getValue().getActions();

			if (actions != null)
			{
				for (int i = 0; i < actions.size(); i++)
				{
					DynamicGridCellItem item = actionCell.getItems().newItem();
					item.setValue(actions.get(i).getName());
					item.setIdentifier(actions.get(i));
				}

				// add default action
				DynamicGridCellItem item = actionCell.getItems().newItem();
				item.setValue("Rule Action Data Validation Error");
				item.setIdentifier(RuleActionDataValidationError);

				// add default action
				item = actionCell.getItems().newItem();
				item.setValue("Send Notification");

				item.setIdentifier(NOTIFICATION);
			}

			actionCell.setAutoPostBack(true);
			actionCell.setWidth(450);

			return row;
		}
		else
		{
			ArrayList<String> err = new ArrayList<String>();
			err.add("Root Entity cannot be null");
			if (err.size() > 0)
			{
				String[] searchErrors = new String[err.size()];
				err.toArray(searchErrors);
				engine.showErrors("Invalid Rule", searchErrors);
				return null;
			}
		}

		return null;
	}

	private DynamicGridRow addValueCondition(DynamicGridRow parentRow, boolean isNewValueCondition)
	{
		DynamicGridRow row = parentRow.getRows().newRow();
		row.setSelectable(true);

		RuleConditionRowVo vo = (RuleConditionRowVo) row.getIdentifier();

		int count = 1;

		if (vo != null)
			count = vo.getNumberOfColumns();

		setRowIdentifier(row, count, RuleConditionType.VALUE);

		DynamicGridCell ifCell = row.getCells().newCell(getColByIndex(count), DynamicCellType.HTMLVIEW);
		ifCell.setValue(" <b>IF</b> ");
		ifCell.setWidth(30);

		count++;

		DynamicGridColumn valueColl = getColByIndex(count);
		if (valueColl == null)
		{
			valueColl = createColumn("", count);
		}

		setRowIdentifier(row, count, RuleConditionType.VALUE);

		DynamicGridCell valueCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
		List<RulesEngineEntity> entities = new Entities().getAllPublicEntities();

		for (int i = 0; i < entities.size(); i++)
		{
			valueCell.getItems().newItem().setValue(entities.get(i).getName());
			valueCell.getItems().get(i).setIdentifier(entities.get(i));
		}
		valueCell.setValue(form.lyrRules().tabConditions().cmbRootEntity().getValue().getName());
		valueCell.setReadOnly(true);

		if (isNewValueCondition)
			onDyngrdConditionsCellValueChanged(valueCell);

		valueCell.setAutoPostBack(true);
		valueCell.setWidth(0);

		return row;
	}

	private void setRowIdentifier(DynamicGridRow row, int NumberOfColumns, RuleConditionType type)
	{
		RuleConditionRowVo vo = null;

		if (row.getIdentifier() == null)
		{
			vo = new RuleConditionRowVo();
		}
		else
		{
			vo = (RuleConditionRowVo) row.getIdentifier();
		}

		vo.setType(type);
		vo.setNumberOfColumns(NumberOfColumns);
		row.setIdentifier(vo);
	}

	@Override
	protected void onDyngrdConditionsRowSelectionChanged(DynamicGridRow row)
	{
		updateContextMenu();
	}

	private String[] validateUI()
	{
		ArrayList<String> errors = new ArrayList<String>();

		if (form.lyrRules().tabGeneral().chkDateRange().getValue())
		{
			if (form.lyrRules().tabGeneral().dteValidFrom().getValue() != null)
			{
				if (form.lyrRules().tabGeneral().dteValidTo().getValue() == null)
				{
					errors.add("ValidTo cannot be null");
				}
				else
				{
					if (form.lyrRules().tabGeneral().dteValidFrom().getValue().isGreaterOrEqualThan(form.lyrRules().tabGeneral().dteValidTo().getValue()))
					{
						errors.add("ValidFrom cannot be greater or equal with ValidTo");
					}
				}
			}
			else
			{
				errors.add("ValidFrom and ValidTo cannot be null");
			}
		}

		if (errors.size() > 0)
		{
			String[] searchErrors = new String[errors.size()];
			errors.toArray(searchErrors);
			return searchErrors;
		}

		return null;
	}

	private ArrayList<String> testForEmptyCell()
	{
		ArrayList<String> errors = new ArrayList<String>();

		// we have just one row, FIRST_LOGICAL
		int size = form.lyrRules().tabConditions().dyngrdConditions().getRows().size();
		for (int i = 0; i < size; i++)
		{
			DynamicGridRow row = form.lyrRules().tabConditions().dyngrdConditions().getRows().get(i);
			checkRow(row, errors);
		}
		
		for (int i = 0; i < form.lyrRules().tabActions().dyngrdActions().getRows().size(); i++)
		{
			DynamicGridRow row = form.lyrRules().tabActions().dyngrdActions().getRows().get(i);
			validateActionRow(row, errors);
		}

		return errors;
	}

	private ArrayList<String> validateActionRow(DynamicGridRow row, ArrayList<String> errors)
	{
		if (row.getIdentifier() instanceof RulesEngineEntityMethod)
		{
			validateRulesEngineEntityMethodRow(row, errors);
		}
		else if (row.getIdentifier() != null && row.getIdentifier().equals(NOTIFICATION))
		{
			// TODO Validate NOTIFICATION
			
			// Check user row
			validateSendNotificationUserRow(row, errors);
			
			// Check message row
			validateSendNotificationMessageRow(row, errors);
			
			// Check options row
			DynamicGridRow optionsRow = row.getRows().get(2);
			
			for (int i = 0; i < optionsRow.getRows().size(); i++)
			{
				if (!(optionsRow.getRows().get(i).getIdentifier() instanceof NotificationPriority))
				{
					errors.add("Priority for Send Notification action is mandatory");
				}
			}
		}
		else if (row.getIdentifier() instanceof String)
		{
			DynamicGridRow childRow = row.getRows().get(0);
			
			if (childRow.getCells().get(getColByIndexForActionGrid(1)).getValue() == null)
				errors.add("Message for Rule Action Data Validation Error action is mandatory");
		}

		return errors;
	}

	private ArrayList<String> validateSendNotificationMessageRow(DynamicGridRow row, ArrayList<String> errors)
	{
		if (row == null)
			throw new CodingRuntimeException("Logical error - a non null row was expected");
		
		if (errors == null)
		{
			errors = new ArrayList<String>();
		}
		
		DynamicGridRow messageRow = row.getRows().get(1);
		
		if (messageRow == null || !(new Integer(NOTIFICATION_MESSAGE).equals(messageRow.getIdentifier())))
			throw new CodingRuntimeException("Logical error - message row expected");
		
		for (int i = 0; i < messageRow.getRows().size(); i++)
		{
			DynamicGridRow childRow = messageRow.getRows().get(i);
			
			if (childRow == null || childRow.getIdentifier() == null)
				throw new CodingRuntimeException("Logical error - message row expected to have at least one child row with one cell");
			
			if (childRow.getIdentifier().equals(NOTIFICATION_MESSAGE_INSTANCE))
			{
				DynamicGridCell messageCell = childRow.getCells().get(getColByIndexForActionGrid(0));
				
				if (messageCell == null)
					throw new CodingRuntimeException("Logical error - message cell missing");
				
				if (messageCell.getValue() == null)
					errors.add("Message for Send Notification action is mandatory");
			}
			else if (childRow.getIdentifier() instanceof RuleConditionRowVo)
			{
				for (DynamicGridCell cell : childRow.getCellArray())
				{
					if (cell.getValue() == null)
					{
						errors.add("Entity fields for Send Notification action are mandatory.");
					}
				}
			}
		}
		
		return errors;
	}

	private ArrayList<String> validateSendNotificationUserRow(DynamicGridRow row, ArrayList<String> errors)
	{
		if (row == null)
			throw new CodingRuntimeException("Logical error - a non null row was expected");
		
		if (errors == null)
		{
			errors = new ArrayList<String>();
		}
		
		DynamicGridRow userRow = row.getRows().get(0);
		
		if (userRow == null || !(new Integer(NOTIFICATION_USER).equals(userRow.getIdentifier())))
			throw new CodingRuntimeException("Logical error - user row expected");

		for (int i = 0; i < userRow.getRows().size(); i++)
		{
			// This check should pass if the dynamic grid is correctly populated
			if (userRow.getRows().get(i) == null || userRow.getRows().get(i).getCells().get(getColByIndexForActionGrid(0)) == null)
				throw new CodingRuntimeException("Logical error - user row expected to have at least one child row with one cell");
			
			Object identifier = userRow.getRows().get(i).getCells().get(getColByIndexForActionGrid(0)).getIdentifier();
			
			if (!(identifier instanceof AppUserRefVo))
				errors.add("User for Send Notification action is mandatory");
		}
		
		return errors;
	}

	private ArrayList<String> validateRulesEngineEntityMethodRow(DynamicGridRow row, ArrayList<String> errors)
	{
		if (row == null)
			throw new CodingRuntimeException("Logical error - a non null row was expected");
		
		if (errors == null)
		{
			errors = new ArrayList<String>();
		}
		
		RulesEngineEntityMethod method = (RulesEngineEntityMethod) row.getIdentifier();
		
		if (method.getArguments() != null)
		{
			for (int i = 0; i < method.getArguments().size(); i++)
			{
				RulesEngineEntityMethodArgument argument = method.getArguments().get(i);
				
				if (argument == null)
					continue;
				
				DynamicGridRow childRow = row.getRows().get(i);
				
				if (RulesEngineMethodArgumentType.STRING.equals(argument.getType()))
				{
					if (childRow.getCells().get(getColByIndexForActionGrid(1)).getValue() == null)
						errors.add(argument.getName() + " for " + method.getName() + " action is mandatory.");
				}
				else if (RulesEngineMethodArgumentType.INTEGER.equals(argument.getType()))
				{
					if (childRow.getCells().get(getColByIndexForActionGrid(1)).getValue() == null)
						errors.add(argument.getName() + " for " + method.getName() + " action is mandatory.");
					else
					{
						try
						{
							Integer.parseInt(childRow.getCells().get(getColByIndexForActionGrid(1)).getValue().toString());
						}
						catch (NumberFormatException exception)
						{
							errors.add(argument.getName() + " for " + method.getName() + " must be an integer number");
						}
					}
				}
			}
		}
		
		return errors;
	}

	private ArrayList<String> checkRow(DynamicGridRow row, ArrayList<String> errors)
	{
		if (row.getIdentifier() != null && row.getIdentifier() instanceof RuleConditionRowVo)
		{
			RuleConditionRowVo vo = (RuleConditionRowVo) row.getIdentifier();
			int collNumbers = vo.getNumberOfColumns();

			if (vo.getType().equals(RuleConditionType.FIRST_LOGICAL) || vo.getType().equals(RuleConditionType.LOGICAL))
			{
				if (row.getRows() == null || (row.getRows() != null && row.getRows().size() == 0))
				{
					errors.add("Rule contains Logical Condition(s) without Value Condition(s)!");
				}
			}

			for (int i = 1; i <= collNumbers; i++)
			{
				if (getColByIndex(i) != null)
				{
					DynamicGridCell cell = row.getCells().get(getColByIndex(i));
					if (cell != null && cell.getValue() == null)
					{
						errors.add("Rule not valid! Your rule contain empty cell(s). Please check again.");
						return errors;
					}
				}
			}
			if (row.getRows() != null)
			{
				for (int j = 0; j < row.getRows().size(); j++)
				{
					checkRow(row.getRows().get(j), errors);
				}
			}
		}

		return errors;
	}

	private ArrayList<String> checkForValideRule()
	{
		ArrayList<String> err = new ArrayList<String>();

		if (form.lyrRules().tabConditions().cmbRootEntity().getValue() == null)
		{
			err.add("Root Entity cannot be null");
		}
		if (form.lyrRules().tabConditions().dyngrdConditions().getRows() != null && form.lyrRules().tabConditions().dyngrdConditions().getRows().size() > 0)
		{
			if (form.lyrRules().tabConditions().dyngrdConditions().getRows().get(0) != null && form.lyrRules().tabConditions().dyngrdConditions().getRows().get(0).getRows() != null && form.lyrRules().tabConditions().dyngrdConditions().getRows().get(0).getRows().size() == 0)
			{
				err.add("Rule is not valid!");
			}
		}

		return err;
	}

	private IRule getRuleFromScreen()
	{
		Rule rule = new Rule();

		rule.setName(form.lyrRules().tabGeneral().txtName().getValue());
		rule.setDescription(form.lyrRules().tabGeneral().txtDescription().getValue());
		rule.setPriority(0);
		if (form.lyrRules().tabGeneral().chkDateRange().getValue())
		{
			rule.setValidFrom(form.lyrRules().tabGeneral().dteValidFrom().getValue());
			rule.setValidTo(form.lyrRules().tabGeneral().dteValidTo().getValue());
		}
		else
		{
			rule.setValidFrom(null);
			rule.setValidTo(null);
		}

		rule.setRootEntity(form.lyrRules().tabConditions().cmbRootEntity().getValue());

		List<IRuleCondition> conditions = new ArrayList<IRuleCondition>();
		List<IRuleCondition> valueConditions = new ArrayList<IRuleCondition>();

		int numberOfRows = form.lyrRules().tabConditions().dyngrdConditions().getRows().size();
		RuleLogicalCondition logicalCondition = null;
		RuleValueConditionEntry entry = null;

		for (int i = 0; i < numberOfRows; i++)
		{
			DynamicGridRow row = form.lyrRules().tabConditions().dyngrdConditions().getRows().get(i);
			RuleConditionRowVo rowIdentifier = (RuleConditionRowVo) row.getIdentifier();
			int numberOfColums = rowIdentifier.getNumberOfColumns();

			if (rowIdentifier != null)
			{
				logicalCondition = checkForLogicalCondition(logicalCondition, row, rowIdentifier, numberOfColums);
				if (row.getRows() != null)
				{
					entry = checkForChildValueCondition(valueConditions, entry, row);
				}
			}
		}

		if (entry == null)
			return null;

		logicalCondition.setConditions(valueConditions);
		conditions.add(logicalCondition);
		rule.setConditions(conditions);

		rule.setActions(getActions());

		return rule;
	}

	private List<IRuleAction> getActions()
	{
		List<IRuleAction> actions = new ArrayList<IRuleAction>();

		if (form.lyrRules().tabActions().dyngrdActions().getRows() != null)
		{
			for (int i = 0; i < form.lyrRules().tabActions().dyngrdActions().getRows().size(); i++)
			{
				DynamicGridRow row = form.lyrRules().tabActions().dyngrdActions().getRows().get(i);
				if (row.getIdentifier() != null && row.getIdentifier() instanceof RulesEngineEntityMethod)
				{
					RulesEngineEntityMethod method = (RulesEngineEntityMethod) row.getIdentifier();

					if (method.getArguments() != null)
					{
						List<String> argumentValues = new ArrayList<String>();
						for (int j = 0; j < method.getArguments().size(); j++)
						{
							DynamicGridRow childRow = row.getRows().get(j);
							RulesEngineEntityMethodArgument argument = method.getArguments().get(j);
							RulesEngineMethodArgumentType type = argument.getType();
							// TODO: all types
							if (type.equals(RulesEngineMethodArgumentType.STRING))
							{
								argumentValues.add((String) childRow.getCells().get(getColByIndexForActionGrid(1)).getValue());
							}
							else if (type.equals(RulesEngineMethodArgumentType.INTEGER))
							{
								argumentValues.add(((Integer) childRow.getCells().get(getColByIndexForActionGrid(1)).getValue()).toString());
							}
						}
						actions.add(new RuleActionEntityMethod(method, argumentValues));
					}
				}
				else if (row.getIdentifier() != null && row.getIdentifier().equals(NOTIFICATION))
				{

					ArrayList<Integer> ids = new ArrayList<Integer>();
					String msg = "";

					DynamicGridRow userRow = row.getRows().get(0);
					if (userRow != null && userRow.getIdentifier() != null && userRow.getIdentifier().equals(NOTIFICATION_USER))
					{
						for (int k = 0; k < userRow.getRows().size(); k++)
						{
							DynamicGridCell user = userRow.getRows().get(k).getCells().get(getColByIndexForActionGrid(0));
							if (user != null)
							{
								if (userRow.getRows().get(k).getIdentifier() != null && userRow.getRows().get(k).getIdentifier() != null && userRow.getRows().get(k).getIdentifier() instanceof AppUserShortVo)
								{
									ids.add(((AppUserShortVo) user.getIdentifier()).getID_AppUser());
								}
								else if (userRow.getRows().get(k).getIdentifier() != null && userRow.getRows().get(k).getIdentifier().equals(NOTIFICATION_USER_ENTITY_INSTANCE))
								{
									ids.add(0);
								}
							}
						}
					}

					// Msg
					DynamicGridRow messageRow = row.getRows().get(1);
					List<RuleActionNotificationElement> texts = new ArrayList<RuleActionNotificationElement>();
					List<IRuleCondition> valueConditions = new ArrayList<IRuleCondition>();
					RuleValueConditionEntry entry = null;
					if (messageRow != null && messageRow.getIdentifier() != null && messageRow.getIdentifier().equals(NOTIFICATION_MESSAGE))
					{
						for (int k = 0; k < messageRow.getRows().size(); k++)
						{
							if (messageRow.getRows().get(k).getIdentifier() != null)
							{
								if (messageRow.getRows().get(k).getIdentifier().equals(NOTIFICATION_MESSAGE_INSTANCE))
								{
									DynamicGridCell message = messageRow.getRows().get(k).getCells().get(getColByIndexForActionGrid(0));
									msg = (String) message.getValue();
									texts.add(new RuleActionNotificationElement(msg));
								}
								else if (messageRow.getRows().get(k).getIdentifier().equals(NOTIFICATION_LINE_SEPARATOR_INSTANCE))
								{
									texts.add(new RuleActionNotificationElement());
								}
								else if (messageRow.getRows().get(k).getIdentifier() instanceof RuleConditionRowVo)
								{
									entry = getNotificationEntry(valueConditions, entry, messageRow.getRows().get(k));
									texts.add(new RuleActionNotificationElement(entry));
								}
							}
						}
					}

					// Priority
					DynamicGridRow optionRow = row.getRows().get(2);
					NotificationPriority priority = null;
					if (optionRow != null && optionRow.getIdentifier() != null && optionRow.getIdentifier().equals(NOTIFICATION_OPTION))
					{
						for (int k = 0; k < optionRow.getRows().size(); k++)
						{
							if (optionRow.getRows().get(k).getIdentifier() != null)
							{
								if (optionRow.getRows().get(k).getIdentifier() instanceof NotificationPriority)
								{
									priority = (NotificationPriority) optionRow.getRows().get(k).getIdentifier();
								}
							}
						}
					}

					int[] userIDs = new int[ids.size()];
					for (int j = 0; j < ids.size(); j++)
					{
						userIDs[j] = ids.get(j);
					}

					RuleActionUserNotification notification = new RuleActionUserNotification(userIDs, texts, priority);
					actions.add(notification);
				}

				else if (row.getIdentifier() != null && row.getIdentifier() instanceof String)
				{
					DynamicGridRow childRow = row.getRows().get(0);
					RuleActionDataValidationError action = new RuleActionDataValidationError();
					action.setMessage((String) childRow.getCells().get(getColByIndexForActionGrid(1)).getValue());
					actions.add(action);
				}
			}
		}

		return actions;
	}

	private RuleValueConditionEntry checkForChildValueCondition(List<IRuleCondition> valueConditions, RuleValueConditionEntry entry, DynamicGridRow row)
	{
		int numberOfChildRows = row.getRows().size();

		for (int i = 0; i < numberOfChildRows; i++)
		{
			DynamicGridRow childRow = row.getRows().get(i);
			RuleConditionRowVo childRowIdentifier = (RuleConditionRowVo) row.getRows().get(i).getIdentifier();
			int numberOfChildColums = childRowIdentifier.getNumberOfColumns();
			// start from 1, avoid "IF" column
			for (int j = 1; j <= numberOfChildColums; j++)
			{
				if (childRow.getCells().get(getColByIndex(j)) != null && childRow.getCells().get(getColByIndex(j)).getItems() != null && childRow.getCells().get(getColByIndex(j)).getItems().size() > 0)
				{
					for (int k = 0; k < childRow.getCells().get(getColByIndex(j)).getItems().size(); k++)
					{
						DynamicGridCellItem item = childRow.getCells().get(getColByIndex(j)).getItems().get(k);
						if (item.getValue().equals(row.getRows().get(i).getCells().get(getColByIndex(j)).getValue()))
						{
							RuleValueConditionEntry currentEntry = null;

							// If RuleLogicalCondition
							if (item.getIdentifier() instanceof RuleLogicalCondition)
							{
								RuleLogicalCondition logicalCondition1 = null;
								List<IRuleCondition> valueConditions1 = new ArrayList<IRuleCondition>();
								logicalCondition1 = checkForLogicalCondition(logicalCondition1, childRow, childRowIdentifier, numberOfChildColums + 1);

								if (childRow.getRows() != null)
								{
									entry = checkForChildValueCondition(valueConditions1, entry, childRow);
								}

								logicalCondition1.setConditions(valueConditions1);
								valueConditions.add(logicalCondition1);
							}
							else if (item.getIdentifier() instanceof RulesEngineEntity)
							{
								// Add root entity first
								entry = new RuleValueConditionEntry((RulesEngineEntity) item.getIdentifier(), null);

								// Set entry
								RuleValueCondition ruleCondition = new RuleValueCondition();
								ruleCondition.setEntry(entry);

								// now iterate form the end until the first coll
								for (int l = numberOfChildColums; l >= j; l--)
								{
									if (j == l)
									{
										if (currentEntry != null && currentEntry.getEntity() == null)
										{
											currentEntry.setEntity(entry.getEntity());
										}

										entry.setChild(currentEntry);
										break;
									}

									if (getColByIndex(l) != null && childRow.getCells().get(getColByIndex(l)) != null)
									{
										DynamicGridCell cell = childRow.getCells().get(getColByIndex(l));
										if (cell.getType() != null)
										{
											if (cell.getIdentifier() != null)
											{
												if (cell.getIdentifier() instanceof RuleValueComparator)
												{
													// Set comparator
													for (int m = 0; m < cell.getItems().size(); m++)
													{
														DynamicGridCellItem itemComparator = cell.getItems().get(m);
														if (itemComparator.getValue().equals(cell.getValue()))
														{
															ruleCondition.setComparator((RuleValueComparator) itemComparator.getIdentifier());

															if (((RuleValueComparator) itemComparator.getIdentifier()).equals(RuleValueComparator.EMPTY) || ((RuleValueComparator) itemComparator.getIdentifier()).equals(RuleValueComparator.NOTEMPTY))
															{
																ruleCondition.setComparedValue(null);
																valueConditions.add(ruleCondition);
															}
															break;
														}
													}
													continue;
												}
												else if (cell.getIdentifier() instanceof RulesEngineField)
												{
													RuleValueConditionEntry newEntity = new RuleValueConditionEntry(((RulesEngineField) cell.getIdentifier()).getParentEntity(), (RulesEngineField) cell.getIdentifier());
													if (((RulesEngineField) cell.getIdentifier()).getType().equals(RulesEngineFieldType.ENTITY))
													{
														newEntity.setChild(currentEntry);
													}
													else
													{
														newEntity.setChild(null);
													}

													currentEntry = newEntity;
													continue;
												}
											}
											// Primitive type
											else
											{
												if (childRow.getCells().get(getColByIndex(l)).getValue() == null)
												{
													ArrayList<String> errors = new ArrayList<String>();
													errors.add("Comparated Value is mandatory!");
													String[] searchErrors = new String[errors.size()];
													errors.toArray(searchErrors);
													engine.showErrors("Invalid Rule", searchErrors);
													return null;
												}
												else
												{
													// Set compared value
													if (cell.getType().equals(DynamicCellType.STRING))
													{
														ruleCondition.setComparedValue(((String) childRow.getCells().get(getColByIndex(l)).getValue()).toString());
														valueConditions.add(ruleCondition);
													}
													else if (cell.getType().equals(DynamicCellType.INT))
													{
														ruleCondition.setComparedValue(((Integer) childRow.getCells().get(getColByIndex(l)).getValue() != null ? Integer.toString(((Integer) childRow.getCells().get(getColByIndex(l)).getValue())) : null));
														valueConditions.add(ruleCondition);
													}
													else if (cell.getType().equals(DynamicCellType.DECIMAL))
													{
														ruleCondition.setComparedValue(Float.toString(((Float) childRow.getCells().get(getColByIndex(l)).getValue())));
														valueConditions.add(ruleCondition);
													}
													else if (cell.getType().equals(DynamicCellType.DATE))
													{
														ruleCondition.setComparedValue(((Date) childRow.getCells().get(getColByIndex(l)).getValue()).toString(DateFormat.ISO));
														valueConditions.add(ruleCondition);
													}
													else if (cell.getType().equals(DynamicCellType.DATETIME))
													{
														ruleCondition.setComparedValue(((DateTime) childRow.getCells().get(getColByIndex(l)).getValue()).toString(DateTimeFormat.ISO));
														valueConditions.add(ruleCondition);
													}
													else if (cell.getType().equals(DynamicCellType.PARTIALDATE))
													{
														ruleCondition.setComparedValue(((PartialDate) childRow.getCells().get(getColByIndex(l)).getValue()).toString(DateFormat.ISO));
														valueConditions.add(ruleCondition);
													}
													else if (cell.getType().equals(DynamicCellType.TIME))
													{
														ruleCondition.setComparedValue(((Time) childRow.getCells().get(getColByIndex(l)).getValue()).toString(TimeFormat.FLAT4));
														valueConditions.add(ruleCondition);
													}
													// is lookup
													else
													{
														if (childRow.getCells().get(getColByIndex(l)).getItems() != null)
														{
															for (int m = 0; m < childRow.getCells().get(getColByIndex(l)).getItems().size(); m++)
															{
																if (childRow.getCells().get(getColByIndex(l)).getItems().get(m).getValue().equals(childRow.getCells().get(getColByIndex(l)).getValue()))
																{
																	if (childRow.getCells().get(getColByIndex(l)).getItems().get(m).getIdentifier() != null)
																	{
																		// If is
																		// Lookup
																		if (childRow.getCells().get(getColByIndex(l)).getItems().get(m).getIdentifier() instanceof LookupInstVo)
																		{
																			ruleCondition.setComparedValue(new Integer(((LookupInstVo) childRow.getCells().get(getColByIndex(l)).getItems().get(m).getIdentifier()).getID()).toString());
																			valueConditions.add(ruleCondition);
																			break;
																		}
																		// If is
																		// Boolean
																		else if (childRow.getCells().get(getColByIndex(l)).getItems().get(m).getIdentifier() instanceof Boolean)
																		{
																			ruleCondition.setComparedValue((String) childRow.getCells().get(getColByIndex(l)).getValue());
																			valueConditions.add(ruleCondition);
																			break;
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}

							break;
						}
					}
				}
			}
		}
		return entry;
	}

	private RuleValueConditionEntry getNotificationEntry(List<IRuleCondition> valueConditions, RuleValueConditionEntry entry, DynamicGridRow row)
	{
		RuleConditionRowVo childRowIdentifier = (RuleConditionRowVo) row.getIdentifier();
		int numberOfChildColums = childRowIdentifier.getNumberOfColumns();

		for (int j = 1; j <= numberOfChildColums; j++)
		{
			if (row.getCells().get(getColByIndexForActionGrid(j)) != null && row.getCells().get(getColByIndexForActionGrid(j)).getItems() != null && row.getCells().get(getColByIndexForActionGrid(j)).getItems().size() > 0)
			{
				for (int k = 0; k < row.getCells().get(getColByIndexForActionGrid(j)).getItems().size(); k++)
				{
					DynamicGridCellItem item = row.getCells().get(getColByIndexForActionGrid(j)).getItems().get(k);
					if (item.getValue().equals(row.getCells().get(getColByIndexForActionGrid(j)).getValue()))
					{
						RuleValueConditionEntry currentEntry = null;
						if (item.getIdentifier() instanceof RulesEngineEntity)
						{
							// Add root entity first
							entry = new RuleValueConditionEntry((RulesEngineEntity) item.getIdentifier(), null);

							// Set entry
							RuleValueCondition ruleCondition = new RuleValueCondition();
							ruleCondition.setEntry(entry);

							// now iterate form the end until the first coll
							for (int l = numberOfChildColums; l >= j; l--)
							{
								if (j == l)
								{
									if (currentEntry != null && currentEntry.getEntity() == null)
									{
										currentEntry.setEntity(entry.getEntity());
									}

									entry.setChild(currentEntry);
									break;
								}

								if (getColByIndex(l) != null && row.getCells().get(getColByIndexForActionGrid(l)) != null)
								{
									DynamicGridCell cell = row.getCells().get(getColByIndexForActionGrid(l));
									if (cell.getType() != null)
									{
										if (cell.getIdentifier() != null)
										{
											if (cell.getIdentifier() instanceof RulesEngineField)
											{
												RuleValueConditionEntry newEntity = new RuleValueConditionEntry(((RulesEngineField) cell.getIdentifier()).getParentEntity(), (RulesEngineField) cell.getIdentifier());
												if (((RulesEngineField) cell.getIdentifier()).getType().equals(RulesEngineFieldType.ENTITY))
												{
													newEntity.setChild(currentEntry);
												}
												else
												{
													newEntity.setChild(null);
												}

												currentEntry = newEntity;
												continue;
											}
										}
										// Primitive type
										else
										{
											// Set compared value
											if (cell.getType().equals(DynamicCellType.STRING))
											{

												valueConditions.add(ruleCondition);
											}
											else if (cell.getType().equals(DynamicCellType.INT))
											{
												valueConditions.add(ruleCondition);
											}
											else if (cell.getType().equals(DynamicCellType.DECIMAL))
											{

												valueConditions.add(ruleCondition);
											}
											else if (cell.getType().equals(DynamicCellType.DATE))
											{

												valueConditions.add(ruleCondition);
											}
											else if (cell.getType().equals(DynamicCellType.DATETIME))
											{

												valueConditions.add(ruleCondition);
											}
											else if (cell.getType().equals(DynamicCellType.PARTIALDATE))
											{

												valueConditions.add(ruleCondition);
											}
											else if (cell.getType().equals(DynamicCellType.TIME))
											{

												valueConditions.add(ruleCondition);
											}
											// is lookup
											else
											{
												if (row.getCells().get(getColByIndexForActionGrid(l)).getItems() != null)
												{
													for (int m = 0; m < row.getCells().get(getColByIndexForActionGrid(l)).getItems().size(); m++)
													{
														if (row.getCells().get(getColByIndexForActionGrid(l)).getItems().get(m).getValue().equals(row.getCells().get(getColByIndexForActionGrid(l)).getValue()))
														{
															if (row.getCells().get(getColByIndexForActionGrid(l)).getItems().get(m).getIdentifier() != null)
															{
																// If is Lookup
																if (row.getCells().get(getColByIndexForActionGrid(l)).getItems().get(m).getIdentifier() instanceof LookupInstVo)
																{

																	valueConditions.add(ruleCondition);
																	break;
																}
																// If is Boolean
																else if (row.getCells().get(getColByIndexForActionGrid(l)).getItems().get(m).getIdentifier() instanceof Boolean)
																{

																	valueConditions.add(ruleCondition);
																	break;
																}
															}
														}
													}
												}
											}
										}

									}
								}
							}
						}

						break;
					}
				}
			}
		}

		return entry;
	}

	private RuleLogicalCondition checkForLogicalCondition(RuleLogicalCondition cond, DynamicGridRow row, RuleConditionRowVo rowIdentifier, int numberOfColums)
	{
		if (rowIdentifier.getType().equals(RuleConditionType.FIRST_LOGICAL) || rowIdentifier.getType().equals(RuleConditionType.LOGICAL))
		{
			for (int j = 0; j < numberOfColums; j++)
			{
				if (getColByIndex(j) != null && row.getCells().get(getColByIndex(j)) != null && row.getCells().get(getColByIndex(j)).getValue() != null)
				{
					if (row.getCells().get(getColByIndex(j)).getValue() instanceof RuleLogicalCondition)
					{
						cond = (RuleLogicalCondition) row.getCells().get(getColByIndex(j)).getValue();
						break;
					}
				}
			}
		}

		return cond;
	}

	@Override
	protected void onCmbRootEntityValueChanged() throws PresentationLogicException
	{
		if (form.lyrRules().tabConditions().cmbRootEntity().getValue() == null)
		{
			engine.showMessage("Root entity cannot be null!", "Warning", MessageButtons.OK, MessageIcon.WARNING, MessageDefaultButton.BUTTON1);
		}
		else
		{
			if (form.lyrRules().tabConditions().dyngrdConditions().getRows().size() > 0 && form.lyrRules().tabConditions().dyngrdConditions().getRows().get(0) != null && form.lyrRules().tabConditions().dyngrdConditions().getRows().get(0).getRows().size() > 0)
			{
				engine.showMessage("Root entity is about to be changed. Changed root entity rule will be deleted. Do you want to clear the rule!", "Warning!", MessageButtons.YESNO, MessageIcon.WARNING, MessageDefaultButton.BUTTON2);
			}
			else
			{

				form.lyrRules().tabConditions().dyngrdConditions().getRows().clear();
				form.lyrRules().tabActions().dyngrdActions().getRows().clear();
				addRootLogicalCondition(null);
				DynamicGridRow row = form.lyrRules().tabConditions().dyngrdConditions().getRows().get(0);
				DynamicGridCell cell = row.getCells().get(getColByIndex(1));
				cell.setValue(RuleLogicalCondition.getInstance(RuleLogicalConditionType.ALLTRUE));
				onDyngrdConditionsCellValueChanged(cell);
				form.lyrRules().tabConditions().dyngrdConditions().setSelectedRow(row);
				form.getLocalContext().setRootEntity(form.lyrRules().tabConditions().cmbRootEntity().getValue());
				updateContextMenu();
			}
		}

		updateContextMenu();
	}

	private void displayRule(IRule rule, BusinessRuleVo editedRule)
	{
		// Set general tab
		form.lyrRules().tabGeneral().txtName().setValue(rule.getName());
		form.lyrRules().tabGeneral().txtDescription().setValue(rule.getDescription());
		form.lyrRules().tabGeneral().ccBusinessRuleCategory().setValue(editedRule.getCategory());
		form.lyrRules().tabGeneral().chkActive().setValue(editedRule.getActive());

		if (form.getGlobalContext().Rules.RuleEditorComponent.getFormModeIsNotNull())
		{
			RulesEditorComponentFormAction mode = form.getGlobalContext().Rules.RuleEditorComponent.getFormMode();
			if (mode.equals(RulesEditorComponentFormAction.CLONE))
			{
				form.lyrRules().tabGeneral().txtName().setValue("Copy of " + rule.getName());
				form.lyrRules().tabGeneral().chkActive().setValue(false);
				editedRule.setID_BusinessRule(null);
			}
		}

		if (rule.getValidFrom() != null || rule.getValidTo() != null)
		{
			form.lyrRules().tabGeneral().chkDateRange().setValue(true);
			form.lyrRules().tabGeneral().dteValidFrom().setValue(rule.getValidFrom());
			form.lyrRules().tabGeneral().dteValidTo().setValue(rule.getValidTo());
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.lyrRules().tabGeneral().dteValidFrom().setEnabled(true);
				form.lyrRules().tabGeneral().dteValidTo().setEnabled(true);
			}
		}
		else
		{
			form.lyrRules().tabGeneral().chkDateRange().setValue(false);
			if (form.getMode().equals(FormMode.EDIT))
			{
				enableDateRange(false);
			}
		}

		// Populate root entry
		populateRootEntity();
		form.lyrRules().tabConditions().cmbRootEntity().setValue(rule.getRootEntity());
		form.getLocalContext().setRootEntity(rule.getRootEntity());

		// Populate Condition Tab
		DynamicGridRow parentRow = null;
		RuleLogicalCondition condition = null;

		List<IRuleCondition> ruleConditions = rule.getConditions();
		for (int i = 0; i < ruleConditions.size(); i++)
		{
			condition = (RuleLogicalCondition) ruleConditions.get(i);

			// Add Root Logical Condition and update Context Menu
			parentRow = addRootLogicalCondition(condition);
			form.lyrRules().tabConditions().dyngrdConditions().setValue(parentRow);
			onDyngrdConditionsRowSelectionChanged(parentRow);

			if (condition.getConditions() != null && condition.getConditions().size() > 0)
			{
				for (int j = 0; j < condition.getConditions().size(); j++)
				{
					if (condition.getConditions().get(j) instanceof RuleLogicalCondition)
					{
						RuleLogicalCondition ruleLogicalCondition = (RuleLogicalCondition) condition.getConditions().get(j);
						if (ruleLogicalCondition.getConditions() != null && ruleLogicalCondition.getConditions().size() > 0)
						{
							// add Logical Condition
							DynamicGridRow row = addRuleLogicalCondition((RuleLogicalCondition) condition.getConditions().get(j));
							for (int k = 0; k < ruleLogicalCondition.getConditions().size(); k++)
							{
								// add Value Condition
								populateRulesValueCondition(ruleLogicalCondition, row, k);
							}
						}
					}
					// add Value Condition
					else if (condition.getConditions().get(j) instanceof RuleValueCondition)
					{
						populateRulesValueCondition(condition, parentRow, j);
					}
				}
			}
		}

		// Populate Action Tab
		Object action = null;
		List<IRuleAction> ruleActions = rule.getActions();

		for (int x = 0; x < ruleActions.size(); x++)
		{
			action = ruleActions.get(x);
			populateActionGrid(action);
		}
	}

	private void populateActionGrid(Object action)
	{
		if (action instanceof RuleActionEntityMethod)
		{
			DynamicGridRow row = form.lyrRules().tabActions().dyngrdActions().getRows().newRow();
			DynamicGridColumn valueColl = getColByIndexForActionGrid(0);
			if (valueColl == null)
			{
				valueColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell actionCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);

			List<RulesEngineEntityMethod> actions = form.lyrRules().tabConditions().cmbRootEntity().getValue().getActions();

			if (actions != null)
			{
				for (int i = 0; i < actions.size(); i++)
				{
					DynamicGridCellItem item = actionCell.getItems().newItem();
					item.setValue(actions.get(i).getName());
					item.setIdentifier(actions.get(i));
				}
			}

			actionCell.setAutoPostBack(true);
			actionCell.setWidth(450);
			actionCell.setValue(((RuleActionEntityMethod) action).getMethod().getName());
			actionCell.getRow().setIdentifier(((RuleActionEntityMethod) action).getMethod());

			List<RulesEngineEntityMethodArgument> arguments = ((RuleActionEntityMethod) action).getMethod().getArguments();
			List<String> argumentsValues = ((RuleActionEntityMethod) action).getArgumentValues();
			for (int j = 0; j < arguments.size(); j++)
			{
				RulesEngineEntityMethodArgument argument = arguments.get(j);
				String argumentValue = argumentsValues.get(j);

				createActionsCells(argument, argumentValue, actionCell.getRow(), j);

			}
		}
		else if (action instanceof RuleActionDataValidationError)
		{
			DynamicGridRow row = form.lyrRules().tabActions().dyngrdActions().getRows().newRow();
			DynamicGridColumn valueColl = getColByIndexForActionGrid(0);
			if (valueColl == null)
			{
				valueColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell actionCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);

			List<RulesEngineEntityMethod> actions = form.lyrRules().tabConditions().cmbRootEntity().getValue().getActions();

			if (actions != null)
			{
				for (int i = 0; i < actions.size(); i++)
				{
					DynamicGridCellItem item = actionCell.getItems().newItem();
					item.setValue(actions.get(i).getName());
					item.setIdentifier(actions.get(i));
				}

				// add default action
				DynamicGridCellItem item = actionCell.getItems().newItem();
				item.setValue("Rule Action Data Validation Error");
				item.setIdentifier(RuleActionDataValidationError);
			}

			actionCell.setAutoPostBack(true);
			actionCell.setWidth(450);
			actionCell.setValue("Rule Action Data Validation Error");
			actionCell.getRow().setIdentifier(RuleActionDataValidationError);

			DynamicGridRow childRow = actionCell.getRow().getRows().newRow();
			childRow.setSelectable(false);
			actionCell.getRow().setExpanded(true);
			actionCell.getRow().setSelectable(true);

			DynamicGridColumn argNameColl = getColByIndexForActionGrid(0);
			if (argNameColl == null)
			{
				argNameColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell argNameCell = childRow.getCells().newCell(argNameColl, DynamicCellType.STRING);
			argNameCell.setValue("Message");
			argNameCell.setIdentifier("Message");
			argNameCell.setTooltip("RuleActionDataValidationError Message");

			DynamicGridColumn argTypeColl = getColByIndexForActionGrid(1);
			DynamicGridCell argTypeCell = null;
			if (argTypeColl == null)
			{
				argTypeColl = createColumnForActionGrid("", 1);
			}

			argTypeCell = childRow.getCells().newCell(argTypeColl, DynamicCellType.STRING);
			argTypeCell.setIdentifier(RulesEngineMethodArgumentType.STRING);
			argTypeCell.setDecoratorType(DynamicCellDecoratorMode.ALWAYS);
			argTypeCell.setValue(((RuleActionDataValidationError) action).getMessage());
		}
		else if (action instanceof RuleActionUserNotification)
		{
			RuleActionUserNotification notification = (RuleActionUserNotification) action;
			int[] usersIDs = notification.getUserIds();
			List<RuleActionNotificationElement> texts = notification.getText();

			// Select Notification action
			DynamicGridRow parentRow = addAction();
			parentRow.setExpanded(true);
			parentRow.setIdentifier(NOTIFICATION);
			DynamicGridCell collAction = parentRow.getCells().get(getColByIndexForActionGrid(0));
			if (collAction == null)
				return;
			collAction.setValue("Send Notification");

			// Add User(s)
			DynamicGridRow userRow = parentRow.getRows().newRow();
			userRow.setExpanded(true);

			DynamicGridColumn userColl = getColByIndexForActionGrid(0);
			if (userColl == null)
			{
				userColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell userCell = userRow.getCells().newCell(userColl, DynamicCellType.HTMLVIEW);

			String user = "";
			user += "<table bgcolor='#FFFFFF' border='0'><tr><td WIDTH='8%'>";
			user += "<img src='" + form.getImages().Admin.Users48.getImagePath() + "' height='24' width='24'></td>";
			user += "<td><p style='font-family:courier new; text-align:left; color:black; bgcolor:gray; font-size:15px'>";
			user += "User(s)</b> " + "<font color='white'>";

			userCell.setValue(user);
			userCell.setAutoPostBack(true);
			userCell.setWidth(450);
			userRow.setIdentifier(NOTIFICATION_USER);

			for (int i = 0; i < usersIDs.length; i++)
			{
				DynamicGridRow userInstanceRow = userRow.getRows().newRow();
				DynamicGridColumn userInstanceColl = getColByIndexForActionGrid(0);
				if (userInstanceColl == null)
				{
					userInstanceColl = createColumnForActionGrid("", 0);
				}

				AppUserRefVo refVo = new AppUserRefVo();
				DynamicGridCell userInstanceCell = null;
				if (usersIDs[i] != 0)
				{
					userInstanceCell = userInstanceRow.getCells().newCell(userInstanceColl, DynamicCellType.QUERYCOMBOBOX);
					userInstanceCell.setAutoPostBack(true);
					userInstanceCell.setWidth(450);

					refVo.setID_AppUser(usersIDs[i]);
					AppUserShortVo userName = domain.listAppUsers(domain.getAppUserShortVo(refVo)).get(0);
					if (userName != null)
					{
						userInstanceCell.getItems().newItem(userName.getUserRealName() + " (" + userName.getUsername() + ")");
						userInstanceCell.setValue(userName.getUserRealName() + " (" + userName.getUsername() + ")");
						userInstanceCell.setIdentifier(userName);
					}

					userInstanceRow.setIdentifier(userName);
				}
				else
				{
					form.getLocalContext().setUsersEntityAdded(true);
					userInstanceCell = userInstanceRow.getCells().newCell(userInstanceColl, DynamicCellType.HTMLVIEW);
					userInstanceCell.setWidth(450);
					userInstanceCell.setValue("--- User(s) Entity ---");

					userInstanceRow.setIdentifier(NOTIFICATION_USER_ENTITY_INSTANCE);
				}

			}

			// Add Message
			DynamicGridRow messageRow = parentRow.getRows().newRow();
			messageRow.setExpanded(true);

			DynamicGridColumn messageColl = getColByIndexForActionGrid(0);
			if (messageColl == null)
			{
				messageColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell messageCell = messageRow.getCells().newCell(messageColl, DynamicCellType.HTMLVIEW);

			String message = "";
			message += "<table bgcolor='#FFFFFF' border='0'><tr><td WIDTH='8%'>";
			message += "<img src='" + form.getImages().CcoSched.ActionUpdate48.getImagePath() + "' height='24' width='24'></td>";
			message += "<td><p style='font-family:courier new; text-align:left; color:black; bgcolor:gray; font-size:15px'>";
			message += "Message</b> " + "<font color='white'>";

			messageCell.setValue(message);
			messageCell.setAutoPostBack(true);
			messageCell.setWidth(450);
			messageRow.setIdentifier(NOTIFICATION_MESSAGE);

			for (int i = 0; i < texts.size(); i++)
			{
				if (texts.get(i).getType().equals(RuleActionNotificationElementType.TEXT))
				{
					DynamicGridRow messageInstanceRow = messageRow.getRows().newRow();
					DynamicGridColumn messageInstanceColl = getColByIndexForActionGrid(0);
					if (messageInstanceColl == null)
					{
						messageInstanceColl = createColumnForActionGrid("", 0);
					}
					DynamicGridCell messageInstanceCell = messageInstanceRow.getCells().newCell(messageInstanceColl, DynamicCellType.WRAPTEXT);
					messageInstanceCell.setWidth(450);
					messageInstanceCell.setDecoratorType(DynamicCellDecoratorMode.ALWAYS);
					messageInstanceCell.setValue(texts.get(i).getText());

					messageInstanceRow.setIdentifier(NOTIFICATION_MESSAGE_INSTANCE);
				}
				else if (texts.get(i).getType().equals(RuleActionNotificationElementType.LINE_SEPARATOR))
				{
					DynamicGridRow messageLineSeparatorRow = messageRow.getRows().newRow();
					DynamicGridColumn messageLineSeparatorColl = getColByIndexForActionGrid(0);
					if (messageLineSeparatorColl == null)
					{
						messageLineSeparatorColl = createColumnForActionGrid("", 0);
					}
					DynamicGridCell messageLineSeparatorCell = messageLineSeparatorRow.getCells().newCell(messageLineSeparatorColl, DynamicCellType.HTMLVIEW);
					messageLineSeparatorCell.setWidth(450);
					messageLineSeparatorCell.setValue("--- Line Separator ---");

					messageLineSeparatorRow.setIdentifier(NOTIFICATION_LINE_SEPARATOR_INSTANCE);
				}
				else if (texts.get(i).getType().equals(RuleActionNotificationElementType.ENTITY_FIELD))
				{
					populateRulesNotificationEntry(texts.get(i).getEntityField(), messageRow);
				}
			}

			// Add priority
			DynamicGridRow optionRow = parentRow.getRows().newRow();
			optionRow.setIdentifier(NOTIFICATION_OPTION);
			optionRow.setExpanded(true);

			DynamicGridColumn optionColl = getColByIndexForActionGrid(0);
			if (optionColl == null)
			{
				optionColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell optionCell = optionRow.getCells().newCell(messageColl, DynamicCellType.HTMLVIEW);

			String options = "";
			options += "<table bgcolor='#FFFFFF' border='0'><tr><td WIDTH='8%'>";
			options += "<img src='" + form.getImages().Admin.Config48.getImagePath() + "' height='24' width='24'></td>";
			options += "<td><p style='font-family:courier new; text-align:left; color:black; bgcolor:gray; font-size:15px'>";
			options += "Options</b> " + "<font color='white'>";

			optionCell.setValue(options);
			optionCell.setAutoPostBack(true);
			optionCell.setWidth(450);

			DynamicGridRow priorityRow = optionRow.getRows().newRow();
			priorityRow.setIdentifier(NOTIFICATION_OPTION_PRIORITY);
			priorityRow.setSelectable(false);
			DynamicGridColumn priorityLabelColl = getColByIndexForActionGrid(0);
			if (priorityLabelColl == null)
			{
				priorityLabelColl = createColumnForActionGrid("", 0);
			}
			DynamicGridCell priorityLabelCell = priorityRow.getCells().newCell(priorityLabelColl, DynamicCellType.HTMLVIEW);
			priorityLabelCell.setValue("Priority");

			DynamicGridColumn priorityColl = getColByIndexForActionGrid(1);
			if (priorityColl == null)
			{
				priorityColl = createColumnForActionGrid("", 1);
			}
			DynamicGridCell priorityCell = priorityRow.getCells().newCell(priorityColl, DynamicCellType.ENUMERATION);

			for (int i = 0; i < NotificationPriority.getAll().size(); i++)
			{
				DynamicGridCellItem item = priorityCell.getItems().newItem(NotificationPriority.getAll().get(i).getText());
				item.setIdentifier(NotificationPriority.getAll().get(i));
			}

			priorityCell.setValue(((RuleActionUserNotification) action).getPriority().getText());
			onDyngrdActionsCellValueChanged(priorityCell);

			priorityCell.setAutoPostBack(true);
			priorityCell.setWidth(250);
		}
	}

	private DynamicGridRow addRuleLogicalCondition(RuleLogicalCondition condition)
	{
		DynamicGridRow row = form.lyrRules().tabConditions().dyngrdConditions().getRows().get(0).getRows().newRow();
		row.setSelectable(true);

		int count = 1;

		DynamicGridColumn ifColl = getColByIndex(count);
		if (ifColl == null)
		{
			ifColl = createColumn("", count);
		}
		setRowIdentifier(row, count, RuleConditionType.LOGICAL);

		DynamicGridCell ifCell = row.getCells().newCell(ifColl, DynamicCellType.HTMLVIEW);
		ifCell.setValue(" <b>IF</b> ");
		ifCell.setWidth(30);

		count++;
		DynamicGridColumn valueColl = getColByIndex(count);
		if (valueColl == null)
		{
			valueColl = createColumn("", count);
		}
		setRowIdentifier(row, count, RuleConditionType.LOGICAL);

		DynamicGridCell valueCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
		List<RuleLogicalCondition> listCondition = RuleLogicalCondition.getAll();
		for (int m = 0; m < listCondition.size(); m++)
		{
			valueCell.getItems().newItem(listCondition.get(m));
			valueCell.getItems().get(m).setIdentifier(listCondition.get(m));
		}

		row.setExpanded(true);
		valueCell.setAutoPostBack(true);
		valueCell.setWidth(120);

		valueCell.setValue(condition);
		valueCell.setIdentifier(condition);

		return row;
	}

	private void populateRulesNotificationEntry(RuleValueConditionEntry entry, DynamicGridRow parentRow)
	{
		DynamicGridRow row = parentRow.getRows().newRow();
		DynamicGridColumn valueColl = getColByIndexForActionGrid(1);
		if (valueColl == null)
		{
			valueColl = createColumnForActionGrid("", 1);
		}

		setRowIdentifier(row, 1, RuleConditionType.VALUE);

		DynamicGridCell valueCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
		List<RulesEngineEntity> entities = new Entities().getAllPublicEntities();

		for (int i = 0; i < entities.size(); i++)
		{
			valueCell.getItems().newItem().setValue(entities.get(i).getName());
			valueCell.getItems().get(i).setIdentifier(entities.get(i));
		}
		valueCell.setValue(form.lyrRules().tabConditions().cmbRootEntity().getValue().getName());
		valueCell.setReadOnly(true);

		valueCell.setAutoPostBack(true);
		valueCell.setWidth(0);

		int count = row.getIdentifier() != null ? (row.getIdentifier() instanceof RuleConditionRowVo ? (((RuleConditionRowVo) row.getIdentifier()).getNumberOfColumns()) : 0) : 0;
		count++;
		try
		{
			addRuleNotificationCell(row, entry.getChild() != null ? entry.getChild() : entry, count);
		}
		catch (ParseException e)
		{
			e.printStackTrace();
		}
	}

	private void populateRulesValueCondition(RuleLogicalCondition condition, DynamicGridRow parentRow, int j)
	{
		RuleValueCondition ruleValueCondition = (RuleValueCondition) condition.getConditions().get(j);

		// Entry, Comparator, ComparedValue
		RuleValueConditionEntry entry = ruleValueCondition.getEntry();
		RuleValueComparator comparator = ruleValueCondition.getComparator();
		String comparatedValue = ruleValueCondition.getComparedValue();

		DynamicGridRow row = addValueCondition(parentRow, false);
		int count = row.getIdentifier() != null ? (row.getIdentifier() instanceof RuleConditionRowVo ? (((RuleConditionRowVo) row.getIdentifier()).getNumberOfColumns()) : 0) : 0;
		count++;
		try
		{
			addRuleValueConditionCell(row, entry.getChild() != null ? entry.getChild() : entry, count, comparator, comparatedValue);
		}
		catch (ParseException e)
		{
			e.printStackTrace();
		}
	}

	private void addRuleNotificationCell(DynamicGridRow row, RuleValueConditionEntry entry, int count) throws ParseException
	{
		if (entry != null && entry.getField() != null)
		{
			if (entry.getField().getType() != null)
			{
				// /If RulesEnsgineFieldType is Entity Type
				if (entry.getField().getType().equals(RulesEngineFieldType.ENTITY))
				{
					DynamicGridColumn valueColl = getColByIndexForActionGrid(count);
					if (valueColl == null)
					{
						valueColl = createColumnForActionGrid("", count);
					}

					setRowIdentifier(row, count, RuleConditionType.VALUE);

					DynamicGridCell valueCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
					List<RulesEngineField> entities = entry.getEntity().getFields();
					for (int i = 0; i < entities.size(); i++)
					{
						valueCell.getItems().newItem().setValue(entities.get(i).getName());
						valueCell.getItems().get(i).setIdentifier(entities.get(i));
					}

					valueCell.setReadOnly(false);
					valueCell.setAutoPostBack(true);
					valueCell.setWidth(160);
					valueCell.setValue(entry.getField().getName());
					valueCell.setIdentifier(entry.getField());

					count++;

					if (entry.getChild() != null)
					{
						addRuleNotificationCell(row, entry.getChild(), count);
					}
					else
					{
						valueColl = getColByIndexForActionGrid(count);// getColByIndex(count);
						if (valueColl == null)
						{
							valueColl = createColumnForActionGrid("", count);// createColumn("",
																			 // count);
						}

						setRowIdentifier(row, count, RuleConditionType.VALUE);

						DynamicGridCell preComparatorCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
						for (int i = 0; i < entry.getField().getTypeEntity().getFields().size(); i++)
						{
							preComparatorCell.getItems().newItem(entry.getField().getTypeEntity().getFields().get(i).getName());
							preComparatorCell.getItems().get(i).setIdentifier(entry.getField().getTypeEntity().getFields().get(i));
						}
					}

					return;
				}
				// If RulesEngineFieldType is a Primitive Type
				DynamicGridColumn valueColl = getColByIndexForActionGrid(count);// getColByIndex(count);
				if (valueColl == null)
				{
					valueColl = createColumnForActionGrid("", count);// createColumn("",
																	 // count);
				}

				createNotificationCells(row, entry, count);

			}
		}

	}

	private void addRuleValueConditionCell(DynamicGridRow row, RuleValueConditionEntry entry, int count, RuleValueComparator comparator, String comparatedValue) throws ParseException
	{
		if (entry != null && entry.getField() != null)
		{
			if (entry.getField().getType() != null)
			{
				// /If RulesEnsgineFieldType is Entity Type
				if (entry.getField().getType().equals(RulesEngineFieldType.ENTITY))
				{
					DynamicGridColumn valueColl = getColByIndex(count);
					if (valueColl == null)
					{
						valueColl = createColumn("", count);
					}

					setRowIdentifier(row, count, RuleConditionType.VALUE);

					DynamicGridCell valueCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
					List<RulesEngineField> entities = entry.getEntity().getFields();
					for (int i = 0; i < entities.size(); i++)
					{
						valueCell.getItems().newItem().setValue(entities.get(i).getName());
						valueCell.getItems().get(i).setIdentifier(entities.get(i));
					}

					// if it's the second entity after root entity don't add
					// EMPTY and NOTEMPTY
					if (!entry.getEntity().equals(form.lyrRules().tabConditions().cmbRootEntity().getValue()))
					{
						// add Empty and NotEmpty types
						valueCell.getItems().newItem(RuleValueComparator.EMPTY.toString(), null, Color.Red);
						valueCell.getItems().get(entities.size()).setIdentifier(RuleValueComparator.EMPTY);
						valueCell.getItems().newItem(RuleValueComparator.NOTEMPTY.toString(), null, Color.Red);
						valueCell.getItems().get(entities.size() + 1).setIdentifier(RuleValueComparator.NOTEMPTY);
					}

					valueCell.setReadOnly(false);
					valueCell.setAutoPostBack(true);
					valueCell.setWidth(160);
					valueCell.setValue(entry.getField().getName());
					valueCell.setIdentifier(entry.getField());

					count++;

					if (entry.getChild() != null)
					{
						addRuleValueConditionCell(row, entry.getChild(), count, comparator, comparatedValue);
					}
					else
					{
						// If child == null means that comparator could be EMPTY
						// or NOTEMPTY
						if ((comparator == RuleValueComparator.EMPTY || comparator == RuleValueComparator.NOTEMPTY) && comparatedValue == "")
						{
							valueColl = getColByIndex(count);
							if (valueColl == null)
							{
								valueColl = createColumn("", count);
							}
							setRowIdentifier(row, count, RuleConditionType.VALUE);

							DynamicGridCell preComparatorCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
							for (int i = 0; i < entry.getField().getTypeEntity().getFields().size(); i++)
							{
								preComparatorCell.getItems().newItem(entry.getField().getTypeEntity().getFields().get(i).getName());
								preComparatorCell.getItems().get(i).setIdentifier(entry.getField().getTypeEntity().getFields().get(i));
							}

							// add Empty and NotEmpty types
							preComparatorCell.getItems().newItem(RuleValueComparator.EMPTY.toString(), null, Color.Red);
							preComparatorCell.getItems().get(entry.getField().getTypeEntity().getFields().size()).setIdentifier(RuleValueComparator.EMPTY);
							preComparatorCell.getItems().newItem(RuleValueComparator.NOTEMPTY.toString(), null, Color.Red);
							preComparatorCell.getItems().get(entry.getField().getTypeEntity().getFields().size() + 1).setIdentifier(RuleValueComparator.NOTEMPTY);

							preComparatorCell.setAutoPostBack(true);
							preComparatorCell.setValue(comparator.toString());
							preComparatorCell.setIdentifier(comparator);
						}
					}

					return;
				}

				// If RulesEngineFieldType is a Primitive Type
				DynamicGridColumn valueColl = getColByIndex(count);
				if (valueColl == null)
				{
					valueColl = createColumn("", count);
				}

				createCells(row, entry, count, comparator, comparatedValue);
			}
		}
	}

	private void createCells(DynamicGridRow row, RuleValueConditionEntry entry, int count, RuleValueComparator comparator, String comparatedValue) throws ParseException
	{
		DynamicGridColumn valueColl = getColByIndex(count);
		if (valueColl == null)
		{
			valueColl = createColumn("", count);
		}
		setRowIdentifier(row, count, RuleConditionType.VALUE);

		DynamicGridCell preComparatorCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
		for (int i = 0; i < entry.getField().getParentEntity().getFields().size(); i++)
		{
			preComparatorCell.getItems().newItem(entry.getField().getParentEntity().getFields().get(i).getName());
			preComparatorCell.getItems().get(i).setIdentifier(entry.getField().getParentEntity().getFields().get(i));
		}

		// if it's the second entity after root entity don't add EMPTY and
		// NOTEMPTY
		if (!entry.getField().getParentEntity().equals(form.lyrRules().tabConditions().cmbRootEntity().getValue()))
		{
			// add Empty and NotEmpty types
			// add Empty and NotEmpty types
			preComparatorCell.getItems().newItem(RuleValueComparator.EMPTY.toString(), null, Color.Red);
			preComparatorCell.getItems().get(entry.getField().getParentEntity().getFields().size()).setIdentifier(RuleValueComparator.EMPTY);
			preComparatorCell.getItems().newItem(RuleValueComparator.NOTEMPTY.toString(), null, Color.Red);
			preComparatorCell.getItems().get(entry.getField().getParentEntity().getFields().size() + 1).setIdentifier(RuleValueComparator.NOTEMPTY);
		}

		preComparatorCell.setAutoPostBack(true);
		preComparatorCell.setValue(entry.getField().getName());
		preComparatorCell.setIdentifier(entry.getField());

		count++;

		valueColl = getColByIndex(count);
		if (valueColl == null)
		{
			valueColl = createColumn("", count);
		}
		setRowIdentifier(row, count, RuleConditionType.VALUE);

		DynamicGridCell valueComparatorCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
		for (int j = 0; j < entry.getField().getType().getComparators().length; j++)
		{
			if (entry.getField().getType().getComparators()[j].equals(RuleValueComparator.EMPTY))
			{
				valueComparatorCell.getItems().newItem(entry.getField().getType().getComparators()[j], null, Color.Red);
			}
			else
			{
				valueComparatorCell.getItems().newItem(entry.getField().getType().getComparators()[j], null, Color.Green);
			}

			valueComparatorCell.getItems().get(j).setIdentifier(entry.getField().getType().getComparators()[j]);
		}

		valueComparatorCell.setValue(comparator);
		valueComparatorCell.setIdentifier(comparator);
		valueComparatorCell.setAutoPostBack(true);

		if (comparator.equals(RuleValueComparator.EMPTY) || comparator.equals(RuleValueComparator.NOTEMPTY))
		{
			return;
		}

		count++;

		valueColl = getColByIndex(count);
		if (valueColl == null)
		{
			valueColl = createColumn("", count);
		}
		setRowIdentifier(row, count, RuleConditionType.VALUE);

		if (entry.getField().getType().equals(RulesEngineFieldType.STRING))
		{
			DynamicGridCell valCell = row.getCells().newCell(valueColl, DynamicCellType.STRING);
			valCell.setWidth(160);
			valCell.setReadOnly(false);
			valCell.setValue(comparatedValue);

		}
		else if (entry.getField().getType().equals(RulesEngineFieldType.INTEGER))
		{
			DynamicGridCell valCell = row.getCells().newCell(valueColl, DynamicCellType.INT);
			valCell.setWidth(160);
			valCell.setReadOnly(false);
			valCell.setValue(Integer.valueOf(comparatedValue).intValue());
		}
		else if (entry.getField().getType().equals(RulesEngineFieldType.ENTITY_CODE))
		{
			DynamicGridCell valCell = row.getCells().newCell(valueColl, DynamicCellType.INT);
			valCell.setWidth(160);
			valCell.setReadOnly(false);
			if (comparatedValue != null && comparatedValue != "")
			{
				valCell.setValue(Integer.valueOf(comparatedValue).intValue());
			}
		}
		else if (entry.getField().getType().equals(RulesEngineFieldType.DECIMAL))
		{
			DynamicGridCell valCell = row.getCells().newCell(valueColl, DynamicCellType.DECIMAL);
			valCell.setWidth(160);
			valCell.setReadOnly(false);
			valCell.setValue(new Float(comparatedValue));
		}
		else if (entry.getField().getType().equals(RulesEngineFieldType.DATE))
		{
			DynamicGridCell valCell = row.getCells().newCell(valueColl, DynamicCellType.DATE);
			valCell.setWidth(160);
			valCell.setReadOnly(false);
			valCell.setValue(new Date(comparatedValue, DateFormat.ISO));

		}
		else if (entry.getField().getType().equals(RulesEngineFieldType.PARTIALDATE))
		{
			DynamicGridCell valCell = row.getCells().newCell(valueColl, DynamicCellType.PARTIALDATE);
			valCell.setWidth(160);
			valCell.setReadOnly(false);
			valCell.setValue(new PartialDate(comparatedValue));
		}
		else if (entry.getField().getType().equals(RulesEngineFieldType.DATETIME))
		{
			DynamicGridCell valCell = row.getCells().newCell(valueColl, DynamicCellType.DATETIME);
			valCell.setWidth(160);
			valCell.setReadOnly(false);
			valCell.setValue(new DateTime(comparatedValue));
		}
		else if (entry.getField().getType().equals(RulesEngineFieldType.TIME))
		{
			DynamicGridCell valCell = row.getCells().newCell(valueColl, DynamicCellType.TIME);
			valCell.setWidth(160);
			valCell.setReadOnly(false);
			valCell.setValue(new Time(comparatedValue, TimeFormat.FLAT4));
		}
		else if (entry.getField().getType().equals(RulesEngineFieldType.LOOKUP))
		{
			DynamicGridCell valCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
			int lookupId = entry.getField().getTypeLookupId();
			LookupInstanceCollection collection = domain.getLookupTypeInstance(lookupId);
			LookupInstVo cellValue = null;
			for (int j = 0; j < collection.size(); j++)
			{
				valCell.getItems().newItem(collection.getIndex(j).getText());
				valCell.getItems().get(j).setIdentifier(collection.getIndex(j));

				if (collection.getIndex(j).getId() == Integer.parseInt(comparatedValue))
				{
					cellValue = collection.getIndex(j);
				}
			}

			valCell.setWidth(160);
			valCell.setReadOnly(false);
			valCell.setValue(cellValue.getText());
		}
		else if (entry.getField().getType().equals(RulesEngineFieldType.BOOLEAN))
		{
			DynamicGridCell valCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);

			valCell.getItems().newItem("True");
			valCell.getItems().get(0).setIdentifier(Boolean.TRUE);
			valCell.getItems().newItem("False");
			valCell.getItems().get(1).setIdentifier(Boolean.FALSE);

			valCell.setWidth(160);
			valCell.setReadOnly(false);
			valCell.setValue(comparatedValue);
		}
	}

	private void createNotificationCells(DynamicGridRow row, RuleValueConditionEntry entry, int count) throws ParseException
	{
		DynamicGridColumn valueColl = getColByIndexForActionGrid(count);
		if (valueColl == null)
		{
			valueColl = createColumnForActionGrid("", count);
		}
		setRowIdentifier(row, count, RuleConditionType.VALUE);

		DynamicGridCell preComparatorCell = row.getCells().newCell(valueColl, DynamicCellType.ENUMERATION);
		for (int i = 0; i < entry.getField().getParentEntity().getFields().size(); i++)
		{
			preComparatorCell.getItems().newItem(entry.getField().getParentEntity().getFields().get(i).getName());
			preComparatorCell.getItems().get(i).setIdentifier(entry.getField().getParentEntity().getFields().get(i));
		}

		preComparatorCell.setAutoPostBack(true);
		preComparatorCell.setValue(entry.getField().getName());
		preComparatorCell.setIdentifier(entry.getField());
	}

	private DynamicGridRow addRootLogicalCondition(IRuleCondition ruleCondition)
	{
		form.lyrRules().tabConditions().dyngrdConditions().getRows().clear();
		form.lyrRules().tabConditions().dyngrdConditions().clear();

		DynamicGridColumn rootConditionNameColumn = null;
		DynamicGridColumn rootConditionValueColumn = null;
		DynamicGridRow row = null;
		DynamicGridCell rootConditionCell = null;

		rootConditionNameColumn = createColumn("", 0);
		rootConditionValueColumn = createColumn("", 1);

		row = form.lyrRules().tabConditions().dyngrdConditions().getRows().newRow();
		setRowIdentifier(row, 2, RuleConditionType.FIRST_LOGICAL);

		form.getLocalContext().setIsFirstConditionDefined(true);

		rootConditionCell = row.getCells().newCell(rootConditionNameColumn != null ? rootConditionNameColumn : getColByIndex(0), DynamicCellType.HTMLVIEW);
		rootConditionCell.setWidth(60);
		rootConditionCell.setValue(" <b>IF</b> ");

		DynamicGridCell rootConditionValueCell = row.getCells().newCell(rootConditionValueColumn != null ? rootConditionValueColumn : getColByIndex(1), DynamicCellType.ENUMERATION);
		List<RuleLogicalCondition> listCondition = RuleLogicalCondition.getAll();
		for (int i = 0; i < listCondition.size(); i++)
		{
			rootConditionValueCell.getItems().newItem(listCondition.get(i));
			rootConditionValueCell.getItems().get(i).setIdentifier(listCondition.get(i));
		}

		row.setExpanded(true);

		rootConditionValueCell.setAutoPostBack(true);
		rootConditionValueCell.setWidth(120);
		rootConditionValueCell.setValue(ruleCondition);
		// rootConditionValueCell.setIdentifier(ruleCondition);

		form.lyrRules().tabConditions().dyngrdConditions().setValue(row);

		return row;
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (result.equals(DialogResult.YES))
		{
			form.lyrRules().tabConditions().dyngrdConditions().getRows().clear();
			form.lyrRules().tabActions().dyngrdActions().getRows().clear();
			addRootLogicalCondition(null);
			DynamicGridRow row = form.lyrRules().tabConditions().dyngrdConditions().getRows().get(0);
			DynamicGridCell cell = row.getCells().get(getColByIndex(1));
			cell.setValue(RuleLogicalCondition.getInstance(RuleLogicalConditionType.ALLTRUE));
			onDyngrdConditionsCellValueChanged(cell);
			form.lyrRules().tabConditions().dyngrdConditions().setSelectedRow(row);
			form.getLocalContext().setRootEntity(form.lyrRules().tabConditions().cmbRootEntity().getValue());
			updateContextMenu();
		}
		if (result.equals(DialogResult.NO))
		{
			form.lyrRules().tabConditions().cmbRootEntity().setValue(form.getLocalContext().getRootEntity());
			return;
		}
		if (result.equals(DialogResult.OK))
		{
			form.lyrRules().tabConditions().cmbRootEntity().setValue(form.getLocalContext().getRootEntity());
			return;
		}
	}

	@Override
	protected void onlyrRulesTabChanged(LayerBridge tab)
	{

		if (tab.equals(form.lyrRules().tabOverview()))
		{
			IRule rule = getRuleFromScreen();
			StringBuilder sb = new StringBuilder();
			sb.append("<b>IF</b><br>");
			int tabs = 0;
			for (int x = 0; x < rule.getConditions().size(); x++)
			{
				renderCondition(sb, rule.getConditions().get(x), rule, tabs);
			}

			form.lyrRules().tabOverview().htmOverview().setHTML(sb.toString());
		}

	}

	private void renderCondition(StringBuilder sb, IRuleCondition condition, IRule rule, int tabs)
	{
		if (condition instanceof RuleLogicalCondition)
		{
			renderLogicalCondition(sb, (RuleLogicalCondition) condition, rule, tabs);
		}
		else if (condition instanceof RuleValueCondition)
		{

			sb.append("(");
			renderValueCondition(sb, (RuleValueCondition) condition, rule);
			sb.append(")");
		}
	}

	private void renderLogicalCondition(StringBuilder sb, RuleLogicalCondition condition, IRule rule, int tabs)
	{

		if (tabs == 0)
		{
			sb.append("<b>{</b><br>");
		}
		else
		{
			sb.append("<b><br>{</b>");
		}
		for (int x = 0; x < condition.getConditions().size(); x++)
		{
			if (x > 0)
			{
				if (condition.equals(RuleLogicalCondition.getInstance(RuleLogicalConditionType.ALLTRUE)))
				{
					sb.append("<b>  &&  </b> ");
					tabs = 1;
				}
				/*
				 * else if(condition.equals(RuleLogicalCondition.getInstance(
				 * RuleLogicalConditionType.ALLFALSE))) {
				 * sb.append("<b>  &&  </b> "); tabs=1; }
				 */
				else if (condition.equals(RuleLogicalCondition.getInstance(RuleLogicalConditionType.ONETRUE)))
				{
					sb.append("<b>  ||  </b> ");
					tabs = 1;
				}
				/*
				 * else if(condition.equals(RuleLogicalCondition.getInstance(
				 * RuleLogicalConditionType.ONEFALSE))) {
				 * sb.append("<b>  ||  </b> "); tabs=1; }
				 */
			}

			renderCondition(sb, condition.getConditions().get(x), rule, tabs);
		}
		sb.append("<b>}</b><br>");
	}

	private void renderValueCondition(StringBuilder sb, RuleValueCondition condition, IRule rule)
	{
		StringBuilder valueConditionString = new StringBuilder();
		renderValueCondition(valueConditionString, condition.getEntry(), true, rule);

		sb.append(valueConditionString.toString());
		sb.append(getRuleComparator(condition.getComparator(), condition.getComparedValue()));
	}

	private void renderValueCondition(StringBuilder sb, RuleValueConditionEntry entry, boolean isRoot, IRule rule)
	{
		if (isRoot)
		{
			sb.append(rule.getRootEntity().getName());
			isRoot = false;
		}

		if (entry.getField() != null)
		{
			sb.append(entry.getField().getFieldGetter().replace("get", "").replace("()", ""));
		}

		if (entry.getChild() != null)
		{
			sb.append("<b>-></b>");
			renderValueCondition(sb, entry.getChild(), isRoot, rule);
		}
	}

	private Object getRuleComparator(RuleValueComparator comparator, String comparedValue)
	{
		if (comparator == RuleValueComparator.EMPTY)
		{
			return "== null";
		}
		else if (comparator == RuleValueComparator.EQUALS)
		{
			return ".equals(\"<b>" + comparedValue + "</b>\")";
		}
		else if (comparator == RuleValueComparator.GREATEREQUALSTHAN)
		{
			return ">=";
		}
		else if (comparator == RuleValueComparator.GREATERTHAN)
		{
			return ">";
		}
		else if (comparator == RuleValueComparator.LESSEQUALSTHAN)
		{
			return "<=";
		}
		else if (comparator == RuleValueComparator.LESSTHAN)
		{
			return "<";
		}
		else if (comparator == RuleValueComparator.NOTEQUALS)
		{
			return "!=";
		}
		else if (comparator == RuleValueComparator.CONTAINS)
		{
			return ".contains(\"<b>" + comparedValue + "</b>\")";
		}

		return "<ERROR: Rule comparator not supported: " + comparator.toString() + ">";
	}

	//
	// Actions
	//
	@Override
	protected void onDyngrdActionsCellValueChanged(DynamicGridCell cell)
	{
		for (int i = 0; i < cell.getRow().getRows().size(); i++)
		{
			cell.getRow().getRows().clear();
		}
		if (cell.getValue() != null)
		{
			if (cell.getItems() != null && cell.getItems().size() > 0)
			{
				for (int i = 0; i < cell.getItems().size(); i++)
				{
					if (cell.getItems().get(i).getValue().equals(cell.getValue()))
					{
						// Notification - Entity Filed
						if (cell.getItems().get(i).getIdentifier() instanceof RulesEngineEntity)
						{
							RulesEngineEntity identifier = (RulesEngineEntity) cell.getItems().get(i).getIdentifier();
							int nextCollAvaible = clearRightCellsForActionGrid((Integer) cell.getColumn().getIdentifier(), cell.getRow());
							DynamicGridRow row = cell.getRow();

							RuleConditionRowVo vo = (RuleConditionRowVo) row.getIdentifier();
							int count = vo.getNumberOfColumns();

							DynamicGridColumn coll = null;
							if (nextCollAvaible != 0)
							{
								coll = getColByIndexForActionGrid(nextCollAvaible);
								if (coll == null)
								{
									coll = createColumnForActionGrid("", nextCollAvaible);
								}
								setRowIdentifier(row, nextCollAvaible, null);
							}
							else
							{
								count++;
								coll = getColByIndexForActionGrid(count);
								if (coll == null)
								{
									coll = createColumnForActionGrid("", count);
								}
								setRowIdentifier(row, count, null);
							}

							DynamicGridCell conditionValueCell = cell.getRow().getCells().newCell(coll, DynamicCellType.ENUMERATION);
							for (int j = 0; j < identifier.getFields().size(); j++)
							{
								conditionValueCell.getItems().newItem().setValue(identifier.getFields().get(j).getName());
								conditionValueCell.getItems().get(j).setIdentifier(identifier.getFields().get(j));
							}

							conditionValueCell.setAutoPostBack(true);
							conditionValueCell.setWidth(160);

							return;
						}
						// If sd
						else if (cell.getItems().get(i).getIdentifier() instanceof NotificationPriority)
						{
							cell.setIdentifier(cell.getItems().get(i).getIdentifier());
						}
						// If RulesEngineField
						else if (cell.getItems().get(i).getIdentifier() instanceof RulesEngineField)
						{
							RulesEngineField identifier = (RulesEngineField) cell.getItems().get(i).getIdentifier();
							// Get type of RulesEngineField
							if (identifier.getType() != null)
							{
								if (identifier.getType().equals(RulesEngineFieldType.ENTITY))
								{
									// set cell identifier
									cell.setIdentifier(identifier);
									// clear all right cells
									int nextCollAvaible = clearRightCellsForActionGrid((Integer) cell.getColumn().getIdentifier(), cell.getRow());

									DynamicGridRow row = cell.getRow();
									RuleConditionRowVo vo = (RuleConditionRowVo) row.getIdentifier();
									int count = vo.getNumberOfColumns();

									DynamicGridColumn coll = null;

									if (nextCollAvaible != 0)
									{
										coll = getColByIndexForActionGrid(nextCollAvaible);

										if (coll == null)
										{
											coll = createColumnForActionGrid("", nextCollAvaible);
										}
									}
									else
									{
										coll = getColByIndexForActionGrid(count + 1);

										if (coll == null)
										{
											coll = createColumnForActionGrid("", count + 1);
										}
									}

									setRowIdentifier(row, count + 1, null);

									DynamicGridCell conditionValueCell = cell.getRow().getCells().newCell(coll, DynamicCellType.ENUMERATION);
									for (int j = 0; j < identifier.getTypeEntity().getFields().size(); j++)
									{
										if (((RulesEngineField) cell.getItems().get(i).getIdentifier()).getTypeEntity().getFields().get(j).isCollection())
										{
											if (!form.getLocalContext().getAlreadyAddedCollection())
											{
												form.getLocalContext().setAlreadyAddedCollection(true);
											}
											else
											{
												continue;
											}
										}

										DynamicGridCellItem item = conditionValueCell.getItems().newItem();
										item.setValue(((RulesEngineField) cell.getItems().get(i).getIdentifier()).getTypeEntity().getFields().get(j).getName());
										item.setIdentifier(((RulesEngineField) cell.getItems().get(i).getIdentifier()).getTypeEntity().getFields().get(j));
									}

									conditionValueCell.setAutoPostBack(true);
									conditionValueCell.setWidth(160);

									conditionValueCell.setValue(cell.getItems().get(i).getIdentifier());
									conditionValueCell.setIdentifier(cell.getItems().get(i).getIdentifier());
								}
								else
								{
									clearRightCellsForActionGrid((Integer) cell.getColumn().getIdentifier(), cell.getRow());
									// set identifier for current cell
									DynamicGridColumn currentColl = getColByIndexForActionGrid(((Integer) cell.getColumn().getIdentifier()).intValue());
									if (cell.getRow().getCells().get(currentColl) != null && cell.getRow().getCells().get(currentColl).getItems() != null && cell.getRow().getCells().get(currentColl).getItems().size() > 0)
									{
										for (int k = 0; k < cell.getRow().getCells().get(currentColl).getItems().size(); k++)
										{
											DynamicGridCellItem item = cell.getRow().getCells().get(currentColl).getItems().get(k);
											if (item.getValue().equals(cell.getRow().getCells().get(currentColl).getValue()))
											{
												cell.setIdentifier(item.getIdentifier());
												break;
											}
										}
										return;
									}
								}
							}

							return;
						}

						cell.getRow().setIdentifier(cell.getItems().get(i).getIdentifier());

						if (cell.getItems().get(i).getIdentifier() instanceof RulesEngineEntityMethod)
						{
							RulesEngineEntityMethod value = (RulesEngineEntityMethod) cell.getItems().get(i).getIdentifier();
							cell.setTooltip(value.getDescription());
							cell.getRow().setSelectable(false);
							List<RulesEngineEntityMethodArgument> arguments = value.getArguments();
							for (int j = 0; j < arguments.size(); j++)
							{
								RulesEngineEntityMethodArgument argument = arguments.get(j);
								createActionsCells(argument, null, cell.getRow(), j);
							}
							break;
						}
						else if (cell.getItems().get(i).getIdentifier().equals(NOTIFICATION))
						{
							cell.getRow().setExpanded(true);
							addNotification(cell.getRow());
						}
						else if (cell.getItems().get(i).getIdentifier() instanceof AppUserShortVo)
						{
							cell.setIdentifier(cell.getItems().get(i).getIdentifier());
						}
						// RuleActionDataValidationError
						else if (cell.getItems().get(i).getIdentifier() instanceof String)
						{
							DynamicGridRow childRow = cell.getRow().getRows().newRow();
							childRow.setSelectable(false);
							cell.getRow().setExpanded(true);
							cell.getRow().setSelectable(true);

							DynamicGridColumn argNameColl = getColByIndexForActionGrid(0);
							if (argNameColl == null)
							{
								argNameColl = createColumnForActionGrid("", 0);
							}
							DynamicGridCell argNameCell = childRow.getCells().newCell(argNameColl, DynamicCellType.STRING);
							argNameCell.setValue("Message");
							argNameCell.setIdentifier("Message");
							argNameCell.setTooltip("RuleActionDataValidationError Message");

							DynamicGridColumn argTypeColl = getColByIndexForActionGrid(1);
							DynamicGridCell argTypeCell = null;
							if (argTypeColl == null)
							{
								argTypeColl = createColumnForActionGrid("", 1);
							}

							argTypeCell = childRow.getCells().newCell(argTypeColl, DynamicCellType.STRING);
							argTypeCell.setIdentifier(RulesEngineMethodArgumentType.STRING);
							argTypeCell.setDecoratorType(DynamicCellDecoratorMode.ALWAYS);
						}

					}
				}
			}
		}
	}

	private void createActionsCells(RulesEngineEntityMethodArgument argument, String argumentValue, DynamicGridRow row, int j)
	{
		RulesEngineMethodArgumentType typeOfArgument = argument.getType();
		String nameOfArgument = argument.getName();
		String descOfArgument = argument.getDescription();

		DynamicGridRow childRow = row.getRows().newRow();
		childRow.setSelectable(false);
		row.setExpanded(true);
		row.setSelectable(true);

		DynamicGridColumn argNameColl = getColByIndexForActionGrid(0);
		if (argNameColl == null)
		{
			argNameColl = createColumnForActionGrid("", 0);
		}
		DynamicGridCell argNameCell = childRow.getCells().newCell(argNameColl, DynamicCellType.STRING);
		argNameCell.setValue(nameOfArgument);
		argNameCell.setIdentifier(argument);
		argNameCell.setTooltip(descOfArgument);

		DynamicGridColumn argTypeColl = getColByIndexForActionGrid(1);
		DynamicGridCell argTypeCell = null;
		if (argTypeColl == null)
		{
			argTypeColl = createColumnForActionGrid("", 1);
		}
		if (typeOfArgument.equals(RulesEngineMethodArgumentType.STRING))
		{
			argTypeCell = childRow.getCells().newCell(argTypeColl, DynamicCellType.STRING);
			argTypeCell.setIdentifier(typeOfArgument);
			argTypeCell.setDecoratorType(DynamicCellDecoratorMode.ALWAYS);
			argTypeCell.setValue(argumentValue);
		}
		else if (typeOfArgument.equals(RulesEngineMethodArgumentType.INTEGER))
		{
			argTypeCell = childRow.getCells().newCell(argTypeColl, DynamicCellType.INT);
			argTypeCell.setValue(argumentValue != null ? new Integer(argumentValue) : null);
		}
		else if (typeOfArgument.equals(RulesEngineMethodArgumentType.BOOLEAN))
		{
			argTypeCell = childRow.getCells().newCell(argTypeColl, DynamicCellType.BOOL);
		}
		argTypeCell.setWidth(160);
		argTypeCell.setReadOnly(false);
	}

	@Override
	protected void onDyngrdActionsRowSelectionChanged(DynamicGridRow row)
	{
		updateContextMenu();
	}

	@Override
	protected void onChkDateRangeValueChanged() throws PresentationLogicException
	{
		if (form.lyrRules().tabGeneral().chkDateRange().getValue())
		{
			enableDateRange(true);
		}
		else
		{
			enableDateRange(false);
		}
	}

	private void enableDateRange(boolean isEnabled)
	{
		if (!isEnabled)
		{
			if (form.getMode().equals(FormMode.EDIT))
			{
				form.lyrRules().tabGeneral().dteValidFrom().setEnabled(isEnabled);
				form.lyrRules().tabGeneral().dteValidTo().setEnabled(isEnabled);
				form.lyrRules().tabGeneral().dteValidFrom().setValue(null);
				form.lyrRules().tabGeneral().dteValidTo().setValue(null);
			}
		}
		else
		{
			form.lyrRules().tabGeneral().dteValidFrom().setEnabled(isEnabled);
			form.lyrRules().tabGeneral().dteValidTo().setEnabled(isEnabled);
		}
	}

	@Override
	protected void onFormModeChanged()
	{
		if (form.getMode().equals(FormMode.EDIT))
		{
			if (form.lyrRules().tabGeneral().chkDateRange().getValue())
			{
				form.lyrRules().tabGeneral().dteValidFrom().setEnabled(true);
				form.lyrRules().tabGeneral().dteValidTo().setEnabled(true);
			}
			else
			{
				form.lyrRules().tabGeneral().dteValidFrom().setEnabled(false);
				form.lyrRules().tabGeneral().dteValidTo().setEnabled(false);
			}
		}

		form.lyrRules().tabGeneral().ccBusinessRuleCategory().setEnabled(form.getMode().equals(FormMode.EDIT) ? true : false);
		updateContextMenu();
	}

	public IRule getIRule()
	{
		ArrayList<String> errors = testForEmptyCell();
		if (errors != null && errors.size() > 0)
		{
			String[] err = new String[errors.size()];
			errors.toArray(err);
			engine.showErrors("Invalid Rule", err);
			form.fireCustomControlValueChanged();
			return null;
		}
		try
		{
			IRule rule = getRuleFromScreen();
			ArrayList<String> err = checkForValideRule();
			if (err.size() > 0)
			{
				String[] searchErrors = new String[err.size()];
				err.toArray(searchErrors);
				engine.showErrors("Invalid Rule", searchErrors);
				form.fireCustomControlValueChanged();
				return null;
			}

			form.fireCustomControlValueChanged();
			return rule;
		}
		catch (Exception e)
		{
			e.printStackTrace();
			engine.showMessage(e.toString());
			form.fireCustomControlValueChanged();
			return null;
		}
	}

	public BusinessRuleVo getValue()
	{
		ArrayList<String> errors = testForEmptyCell();
		if (errors != null && errors.size() > 0)
		{
			String[] err = new String[errors.size()];
			errors.toArray(err);
			engine.showErrors("Invalid Rule", err);
			form.fireCustomControlValueChanged();
			return null;
		}

		String xml;
		try
		{
			ArrayList<String> err = checkForValideRule();
			if (err.size() > 0)
			{
				String[] searchErrors = new String[err.size()];
				err.toArray(searchErrors);
				engine.showErrors("Invalid Rule", searchErrors);
				form.fireCustomControlValueChanged();
				return null;
			}
			IRule rule = getRuleFromScreen();
			xml = RuleXmlSerialization.serialize(rule);
			BusinessRuleVo vo = null;

			if (form.getLocalContext().getEditedRuleIsNotNull())
			{
				vo = form.getLocalContext().getEditedRule();
			}
			else
			{
				vo = new BusinessRuleVo();
			}

			vo.setDescription(rule.getDescription());
			vo.setName(rule.getName());
			vo.setRootEntity(form.lyrRules().tabConditions().cmbRootEntity().getValue().getId());
			vo.setPriority(rule.getPriority());
			vo.setCategory(form.lyrRules().tabGeneral().ccBusinessRuleCategory().getValue() != null ? (BusinessRuleCategory) form.lyrRules().tabGeneral().ccBusinessRuleCategory().getValue() : null);
			vo.setValidFrom(rule.getValidFrom());
			vo.setValidTo(rule.getValidTo());

			if (vo.getID_BusinessRule() == null)
			{
				Date today = new Date();
				if (rule.getValidFrom() != null && rule.getValidFrom().isLessThan(today))
				{
					ArrayList<String> dateErr = new ArrayList<String>();
					dateErr.add("From date is in the past!");
					String[] searchErrors = new String[dateErr.size()];
					dateErr.toArray(searchErrors);
					engine.showErrors("Invalid Rule", searchErrors);
					form.fireCustomControlValueChanged();
					return null;
				}
			}

			vo.setActive(form.lyrRules().tabGeneral().chkActive().getValue());
			vo.setXmlContent(xml);
			vo.setCategory((BusinessRuleCategory) form.lyrRules().tabGeneral().ccBusinessRuleCategory().getValue());

			try
			{
				String[] str = vo.validate(validateUI());
				if (str != null && str.length > 0)
				{
					engine.showErrors(str);
					form.fireCustomControlValueChanged();
					return null;
				}
				form.getLocalContext().setEditedRule(vo);
				form.fireCustomControlValueChanged();
				return vo;
			}
			catch (Exception e)
			{
				e.printStackTrace();
				engine.showMessage(e.toString());
				form.fireCustomControlValueChanged();
				return null;
			}
		}
		catch (RulesEngineSerializationException e)
		{
			e.printStackTrace();
			engine.showMessage(e.toString());
			form.fireCustomControlValueChanged();
			return null;
		}
	}

	public void setValue(BusinessRuleVo rule)
	{
		form.getLocalContext().setEditedRule(rule);
		try
		{
			initialize();
			open();
		}
		catch (PresentationLogicException e)
		{
			e.printStackTrace();
		}
	}

	@Override
	protected void onDyngrdActionsCellTextSubmited(DynamicGridCell cell)
	{
		cell.getItems().clear();
		AppUserShortVo appUserFilter = new AppUserShortVo();
		appUserFilter.setUsername(cell.getTypedText());
		AppUserShortVoCollection users = domain.listAppUsers(appUserFilter);
		if (users != null && users.size() > 0)
		{
			for (int i = 0; i < users.size(); i++)
			{
				DynamicGridCellItem item = cell.getItems().newItem(users.get(i).getUserRealName() + " (" + users.get(i).getUsername() + ")");
				item.setIdentifier(users.get(i));
			}
			if (users.size() == 1)
			{
				cell.setValue(users.get(0).getUserRealName() + " (" + users.get(0).getUsername() + ")");
				cell.setIdentifier(users.get(0));
			}
			else if (users.size() > 1)
				cell.showOpened();

			cell.getRow().setIdentifier(cell.getIdentifier());
		}
	}

	// Comparator for RulesEngineEntity 
	private class RulesEngineEntityComparator implements Comparator<RulesEngineEntity>
	{
		public int compare(RulesEngineEntity o1, RulesEngineEntity o2)
		{
			if (o1.getName() == null || o2.getName() == null)
				return 0;
			
			return o1.getName().compareToIgnoreCase(o2.getName());
		}

	}
}
