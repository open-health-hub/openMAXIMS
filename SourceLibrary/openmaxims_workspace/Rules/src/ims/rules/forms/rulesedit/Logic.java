//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.70 build 3425.24971)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.rules.forms.rulesedit;

import ims.admin.vo.BusinessRuleVo;
import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.UnqViolationUncheckedException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.rules.exceptions.RulesEngineSerializationException;
import ims.rules.interfaces.IRule;
import ims.rules.utils.RuleXmlSerialization;
import ims.rules.vo.enums.RulesEditorComponentFormAction;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onLnkReturnClick() throws PresentationLogicException 
	{	
		engine.open(engine.getPreviousNonDialogFormName());
	}

	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException 
	{	
		RulesEditorComponentFormAction mode = form.getGlobalContext().Rules.RuleEditorComponent.getFormMode();		


		if (RulesEditorComponentFormAction.VIEW.equals(mode)) 
		{														
			form.setMode(FormMode.VIEW);
		}
		else 
		{			
			form.setMode(FormMode.EDIT);						
		}				

		//display Rule
		BusinessRuleVo editedRule = form.getGlobalContext().Rules.getRuleToEdit();
		form.cc1RuleEditor().setValue(editedRule);

		//Set BtnPreview Status
		setBtnPreviewRule();		
	}

	@Override
	protected void onFormModeChanged() 
	{	
		form.lnkReturn().setVisible(form.getMode().equals(FormMode.VIEW) ?  true : false);
		if (form.getMode().equals(FormMode.VIEW)) 
		{
			form.cc1RuleEditor().setMode(FormMode.VIEW);
			updateControlsStatus();
		}
		else
		{
			form.cc1RuleEditor().setMode(FormMode.EDIT);
		}
	}

	@Override
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		//If Clone and press Cancel return to List screen
		if (form.getGlobalContext().Rules.RuleEditorComponent.getFormMode() != null &&
				form.getGlobalContext().Rules.RuleEditorComponent.getFormMode().equals(RulesEditorComponentFormAction.CLONE))
		{
			engine.close(DialogResult.CANCEL);
			onLnkReturnClick();
		}

		form.setMode(FormMode.VIEW);

		BusinessRuleVo editedRule = form.getGlobalContext().Rules.getRuleToEdit();
		form.cc1RuleEditor().setValue(editedRule);
	}

	private void setBtnPreviewRule() 
	{
		boolean isReleaseMode = ConfigFlag.GEN.RELEASE_MODE.getValue();
		form.btnPreview().setVisible(!isReleaseMode && form.getGlobalContext().Rules.getRuleToEditIsNotNull());//WDEV-18211
	}

	private void updateControlsStatus()
	{
		boolean isEditMode = form.getMode().equals(FormMode.EDIT);
		boolean isRuleEdited = form.getGlobalContext().Rules.getRuleToEditIsNotNull();		

		form.btnEdit().setVisible(!isEditMode && isRuleEdited);
	}

	@Override
	protected void onBtnNewClick() throws PresentationLogicException 
	{
		form.cc1RuleEditor().setValue(null);
		//WDEV-18211
		form.getGlobalContext().Rules.setRuleToEdit(null);
		setBtnPreviewRule();
		form.setMode(FormMode.EDIT);

	}

	@Override
	protected void onBtnPreviewClick() throws PresentationLogicException 
	{
		IRule rule = form.cc1RuleEditor().getIRule();
		if(rule != null)
		{
			String xml;
			try {
				xml = RuleXmlSerialization.serialize(rule);
				form.getGlobalContext().Rules.RulesCodePreview.setXmlRule(xml);
				engine.open(form.getForms().Rules.RuleCodePreview);
			} 
			catch (RulesEngineSerializationException e) {		
				e.printStackTrace();
			}					
		}
	}

	@Override
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		BusinessRuleVo vo = form.cc1RuleEditor().getValue();
		if (vo == null) 
			return;		

		try
		{
			vo = domain.save(vo);
			form.cc1RuleEditor().setValue(vo);
			form.getGlobalContext().Rules.setRuleToEdit(vo);
			form.setMode(FormMode.VIEW);								
		}
		catch (UnqViolationUncheckedException e) 
		{				
			engine.showMessage("Rule name must be unique!");
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			engine.showMessage(e.toString());
		}					
	}

	protected void onBtnEditClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);

		BusinessRuleVo editedRule = form.getGlobalContext().Rules.getRuleToEdit();
		form.cc1RuleEditor().setValue(editedRule);
	}
}
