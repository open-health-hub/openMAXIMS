//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
//This code was generated by George Cristian Josan using IMS Development Environment (version 1.70 build 3434.21163)
//Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.rules.forms.rulespriorityeditor;

import ims.admin.vo.BusinessRuleVo;
import ims.admin.vo.BusinessRuleVoCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.MessageButtons;
import ims.framework.controls.DynamicGridCell;
import ims.framework.controls.DynamicGridColumn;
import ims.framework.controls.DynamicGridRow;
import ims.framework.enumerations.Alignment;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.DynamicCellType;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.rules.helper.Entities;
import ims.rules.types.RulesEngineEntity;

import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	// Dynamic Grid Columns
	private static final int COL_IMAGE = 1;
	private static final int COL_RULE_NAME = 2;
	private static final int COL_RULE_CATEGORY = 3;
	private static final int COL_RULE_BUSINESS_OBJECT = 4;
	private static final int COL_RULE_STATUS = 5;


	//--------------------------------------------------------------------------------------------------------------------------------------------------
	//	EVENTS REGION
	//--------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * 
	 */
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		initialize();
		open();
	}

	/**
	 * 
	 */
	protected void onFormModeChanged()
	{
		updateControlsState();
	}

	/**
	 * 
	 */
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		switch (messageBoxId)
		{
		default:
		{
			if (DialogResult.NO.equals(result))
			{
				form.getLocalContext().setIsModified(false);
				engine.close(DialogResult.OK);
			}

			if (DialogResult.YES.equals(result))
			{
				if (save())
				{
					form.getLocalContext().setIsModified(false);
					engine.close(DialogResult.OK);
				}
			}

			break;
		}
		}
	}

	/**
	 * 
	 */
	protected void onBtnSaveClick() throws PresentationLogicException
	{
		if (save())
			open();
	}

	/**
	 * 
	 */
	protected void onBtnCancelClick() throws PresentationLogicException
	{
		if (!form.getLocalContext().getIsModified())
		{
			engine.close(DialogResult.OK);
		}
		else
		{
			engine.showMessage("Rules priority is not saved. Save?", "Rules Not Saved", MessageButtons.YESNOCANCEL);
		}
	}

	/**
	 * 
	 */
	protected void onCmbEntityValueChanged() throws PresentationLogicException
	{
		open();
	}

	/**
	 * 
	 */
	protected void onDyngrdRulesRowSelectionChanged(DynamicGridRow row)
	{
		// Keep selection
		form.getLocalContext().setSelectedRule((BusinessRuleVo) form.dyngrdRules().getValue());

		// Update controls state
		updateControlsState();
	}

	/**
	 * 
	 */
	protected void onDyngrdRulesRowSelectionCleared() throws PresentationLogicException
	{
		// Clear selection
		form.getLocalContext().setSelectedRule((BusinessRuleVo) form.dyngrdRules().getValue());

		// Update controls state
		updateControlsState();
	}

	/**
	 * 
	 */
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
		case GenForm.ContextMenus.RulesNamespace.PriorityMenu.MoveUp:
			moveSelectedUp();
			break;

		case GenForm.ContextMenus.RulesNamespace.PriorityMenu.MoveDown:
			moveSelectedDown();
			break;

		case GenForm.ContextMenus.RulesNamespace.PriorityMenu.MoveToTop:
			moveSelectedToTop();
			break;

		case GenForm.ContextMenus.RulesNamespace.PriorityMenu.MoveToBottom:
			moveSelectedToBottom();
			break;
		}

		updateControlsState();
	}


	//-------------------------------------------------------------------------------------------------------------------------------------------------
	//	FORM CONTROL FUNCTIONS
	//-------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * 
	 */
	public void initialize() throws FormOpenException
	{
		super.initialize();

		// Set local context
		form.getLocalContext().setIsModified(false);
		form.getLocalContext().setSelectedRule(null);

		// Initialize dynamic grid
		initializeDynamicGrid();

		// Populate the combobox filter
		populateRootEntities();
	}

	/**
	 * 
	 */
	private void initializeDynamicGrid()
	{
		// Allow un-selection
		form.dyngrdRules().setUnselectable(true);

		// Set up the columns
		DynamicGridColumn column;

		column = form.dyngrdRules().getColumns().newColumn("", COL_IMAGE);
		column.setWidth(20);
		column.setAlignment(Alignment.RIGHT);
		column.setCanGrow(false);

		column = form.dyngrdRules().getColumns().newColumn("Name", COL_RULE_NAME);
		column.setWidth(300);
		column.setAlignment(Alignment.LEFT);
		column.setCanGrow(true);

		column = form.dyngrdRules().getColumns().newColumn("Category", COL_RULE_CATEGORY);
		column.setWidth(200);
		column.setCanGrow(true);

		column = form.dyngrdRules().getColumns().newColumn("Entity", COL_RULE_BUSINESS_OBJECT);
		column.setWidth(200);
		column.setCanGrow(true);

		column = form.dyngrdRules().getColumns().newColumn("Status", COL_RULE_STATUS);
		column.setWidth(60);
		column.setCanGrow(false);
	}

	/**
	 * 
	 */
	private void populateRootEntities()
	{
		// Clear the combobox
		form.cmbEntity().clear();

		// Get all public entities
		List<RulesEngineEntity> entities = Entities.getInstance().getAllPublicEntities();

		// Populate the combobox
		for (int i = 0; i < entities.size(); i++)
		{
			form.cmbEntity().newRow(entities.get(i), entities.get(i).getName());
		}
	}

	/**
	 * 
	 */
	public void open() throws PresentationLogicException
	{
		//WDEV-18211 
		form.dyngrdRules().getRows().clear();
		
		// Set IsModified to false (local context) WDEV-18211 moved here
		form.getLocalContext().setIsModified(false);
		
		// Load the rules list
		BusinessRuleVoCollection ruleList = domain.list(form.cmbEntity().getValue());

		if (form.cmbEntity().getValue() != null && (ruleList == null || ruleList.size() == 0))
		{
			engine.showMessage("No rules were found for the selected Data Entity");
			updateContextMenuState();
			return;
		}
		setRuleList(ruleList);

		// Keep previous selection
		form.dyngrdRules().setValue(form.getLocalContext().getSelectedRule());
		//WDEV-18211 
		form.setMode(FormMode.VIEW);
	}

	/**
	 * 
	 */
	public void clearInstanceControls()
	{
		form.cmbEntity().setValue(null);

		// Clear dynamic grid
		form.dyngrdRules().getRows().clear();
	}

	/**
	 * 
	 */
	public void updateControlsState()
	{
		form.btnSave().setVisible(Boolean.TRUE.equals(form.getLocalContext().getIsModified()));

		updateContextMenuState();
	}

	/**
	 * 
	 */
	private void updateContextMenuState()
	{
		//WDEV-18223 context menu set visible depending on data displayed on UI
		form.getContextMenus().Rules.getPriorityMenuMoveUpItem().setVisible(form.dyngrdRules().getValue() != null &&  form.dyngrdRules().getSelectedRow().canMoveUp());
		form.getContextMenus().Rules.getPriorityMenuMoveDownItem().setVisible(form.dyngrdRules().getValue() != null &&  form.dyngrdRules().getSelectedRow().canMoveDown());
		form.getContextMenus().Rules.getPriorityMenuMoveToTopItem().setVisible(form.dyngrdRules().getValue() != null &&  form.dyngrdRules().getSelectedRow().canMoveUp() && form.dyngrdRules().getRows().size() > 2);
		form.getContextMenus().Rules.getPriorityMenuMoveToBottomItem().setVisible(form.dyngrdRules().getValue() != null &&  form.dyngrdRules().getSelectedRow().canMoveDown() && form.dyngrdRules().getRows().size() > 2);
	}

	/**
	 * 
	 */
	public void newInstance() throws PresentationLogicException
	{
		// TODO Auto-generated method stub
		// Leave blank
	}

	/**
	 * 
	 */
	public void updateInstance()
	{
		// TODO Auto-generated method stub
		// Leave blank
	}

	/**
	 * 
	 */
	public boolean save() throws PresentationLogicException
	{
		BusinessRuleVoCollection rules = getRuleList();

		if (rules == null)
			return false;

		String[] errors = rules.validate();
		if (errors != null && errors.length != 0)
		{
			engine.showErrors(errors);
			return false;
		}

		try
		{
			domain.save(rules);
		}
		catch (DomainInterfaceException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (StaleObjectException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (ForeignKeyViolationException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		catch (UniqueKeyViolationException e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return true;
	}


	//---------------------------------------------------------------------------------------------------------------------------------------------------
	//	Dynamic Grid functions
	//---------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * 
	 */
	private BusinessRuleVoCollection getRuleList()
	{
		if (form.dyngrdRules().getRows().size() == 0)
			return null;

		BusinessRuleVoCollection ruleList = new BusinessRuleVoCollection();

		for (int i = 0; i < form.dyngrdRules().getRows().size(); i++)
		{
			DynamicGridRow row = form.dyngrdRules().getRows().get(i);

			if (row.getValue() instanceof BusinessRuleVo)
			{
				BusinessRuleVo rule = (BusinessRuleVo) row.getValue();
				ruleList.add(rule);
			}
		}

		return ruleList;
	}

	/**
	 * 
	 */
	private void setRuleList(BusinessRuleVoCollection list)
	{
		// Clear the rules list
		form.dyngrdRules().getRows().clear();

		if (list == null)
			return;

		for (int i = 0; i < list.size(); i++)
		{
			BusinessRuleVo rule = list.get(i);

			// Add non nulls elements to the grid
			if (rule != null)
			{
				setRuleListRow(form.dyngrdRules().getRows().newRow(), rule);
			}
		}
	}

	/**
	 * 
	 * @param row
	 * @param rule
	 */
	private void setRuleListRow(DynamicGridRow row, BusinessRuleVo rule)
	{
		if (rule == null)
			return;

		if (row == null)
			throw new CodingRuntimeException("Major Logical Error - Can not set a value to a null row");

		// Set up the row
		DynamicGridColumn column;
		DynamicGridCell cell;

		// The first cell
		column = form.dyngrdRules().getColumns().getByIdentifier(COL_IMAGE);
		cell = row.getCells().get(column);
		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.IMAGE);
		cell.setValue(form.getImages().Core.Edit);

		// The second cell
		column = form.dyngrdRules().getColumns().getByIdentifier(COL_RULE_NAME);
		cell = row.getCells().get(column);
		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(rule.getName());
		cell.setReadOnly(false);//WDEV-18211

		// The third cell
		column = form.dyngrdRules().getColumns().getByIdentifier(COL_RULE_CATEGORY);
		cell = row.getCells().get(column);
		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(rule.getCategory() == null ? "" : rule.getCategory().getText());
		cell.setReadOnly(false);//WDEV-18211

		// The fourth cell
		column = form.dyngrdRules().getColumns().getByIdentifier(COL_RULE_BUSINESS_OBJECT);
		cell = row.getCells().get(column);
		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.STRING);
		cell.setValue(rule.getRootEntity() == null ? "<Unknown Entity>" : Entities.getInstance().getEntityById(rule.getRootEntity()).getName());
		cell.setReadOnly(false);//WDEV-18211

		// The fifth cell
		column = form.dyngrdRules().getColumns().getByIdentifier(COL_RULE_STATUS);
		cell = row.getCells().get(column);
		if (cell == null)
			cell = row.getCells().newCell(column, DynamicCellType.BOOL);
		cell.setValue(rule.getActive());
		cell.setReadOnly(false);//WDEV-18211

		// Set the row value
		row.setValue(rule);

	}


	//-------------------------------------------------------------------------------------------------------------------------------------------------
	//	Logical functions	
	//-------------------------------------------------------------------------------------------------------------------------------------------------

	/**
	 * 
	 */
	private void moveSelectedUp()
	{
		if (form.dyngrdRules().getValue() == null)
			throw new CodingRuntimeException("Major Logical Error - Function call (Please ensure that a grid row is selected)");

		int indexSelected = form.dyngrdRules().getRows().indexOf(form.dyngrdRules().getSelectedRow());

		if (indexSelected == 0)
			return;

		// Make sure to call assignPrioriy 
		if (swap(indexSelected, indexSelected - 1) && assignPriority())
		{
			form.getLocalContext().setIsModified(true);
		}
	}

	/**
	 * 
	 */
	private void moveSelectedDown()
	{
		if (form.dyngrdRules().getValue() == null)
			throw new CodingRuntimeException("Major Logical Error - Function call (Please ensure that a grid row is selected)");

		int indexSelected = form.dyngrdRules().getRows().indexOf(form.dyngrdRules().getSelectedRow());

		if (indexSelected == form.dyngrdRules().getRows().size() - 1)
			return;

		// Make sure to call assignPrioriy
		if (swap(indexSelected, indexSelected + 1) && assignPriority())
			form.getLocalContext().setIsModified(true);
	}

	/**
	 * 
	 */
	private void moveSelectedToTop()
	{
		if (form.dyngrdRules().getValue() == null)
			throw new CodingRuntimeException("Major Logical Error - Function call (Please ensure that a grid row is selected)");

		int indexSelected = form.dyngrdRules().getRows().indexOf(form.dyngrdRules().getSelectedRow());

		if (indexSelected == 0)
			return;

		// Make sure to call assignPrioriy
		if (moveTop(indexSelected) && assignPriority())
			form.getLocalContext().setIsModified(true);
	}

	/**
	 * 
	 */
	private void moveSelectedToBottom()
	{
		if (form.dyngrdRules().getValue() == null)
			throw new CodingRuntimeException("Major Logical Error - Function call (Please ensure that a grid row is selected)");

		int indexSelected = form.dyngrdRules().getRows().indexOf(form.dyngrdRules().getSelectedRow());

		if (indexSelected == form.dyngrdRules().getRows().size() - 1)
			return;

		// Make sure to call assignPrioriy
		if (moveBottom(indexSelected) && assignPriority())
			form.getLocalContext().setIsModified(true);
	}

	/**
	 * 
	 * @param indexSelected
	 * @param indexTarget
	 * @return
	 */
	private boolean swap(int indexSelected, int indexTarget)
	{
		if (!(form.dyngrdRules().getRows().get(indexSelected).getValue() instanceof BusinessRuleVo)
				|| !(form.dyngrdRules().getRows().get(indexTarget).getValue() instanceof BusinessRuleVo))
			throw new CodingRuntimeException("Major Logical Error - Type mismatch of row values");

		BusinessRuleVo ruleSelected = (BusinessRuleVo) form.dyngrdRules().getRows().get(indexSelected).getValue();
		BusinessRuleVo ruleTarget = (BusinessRuleVo) form.dyngrdRules().getRows().get(indexTarget).getValue();

		setRuleListRow(form.dyngrdRules().getRows().get(indexTarget), ruleSelected);
		setRuleListRow(form.dyngrdRules().getRows().get(indexSelected), ruleTarget);

		// Keep selection
		form.dyngrdRules().setValue(form.getLocalContext().getSelectedRule());

		return true;
	}

	/**
	 * 
	 * @param indexSelected
	 * @return
	 */
	private boolean moveTop(int indexSelected)
	{
		if (!(form.dyngrdRules().getRows().get(indexSelected).getValue() instanceof BusinessRuleVo))
			throw new CodingRuntimeException("Major Logical Error - Type mismatch of row values");

		BusinessRuleVo ruleSelected = (BusinessRuleVo) form.dyngrdRules().getRows().get(indexSelected).getValue();

		for (int i = indexSelected - 1; i >= 0; i--)
		{
			BusinessRuleVo rule = (BusinessRuleVo) form.dyngrdRules().getRows().get(i).getValue();

			setRuleListRow(form.dyngrdRules().getRows().get(i + 1), rule);
		}

		setRuleListRow(form.dyngrdRules().getRows().get(0), ruleSelected);

		// Keep selection
		form.dyngrdRules().setValue(form.getLocalContext().getSelectedRule());

		return true;
	}

	/**
	 * 
	 * @param indexSelected
	 * @return
	 */
	private boolean moveBottom(int indexSelected)
	{
		if (!(form.dyngrdRules().getRows().get(indexSelected).getValue() instanceof BusinessRuleVo))
			throw new CodingRuntimeException("Major Logical Error - Type mismatch of row values");

		BusinessRuleVo ruleSelected = (BusinessRuleVo) form.dyngrdRules().getRows().get(indexSelected).getValue();

		for (int i = indexSelected + 1; i < form.dyngrdRules().getRows().size(); i++)
		{
			BusinessRuleVo rule = (BusinessRuleVo) form.dyngrdRules().getRows().get(i).getValue();

			setRuleListRow(form.dyngrdRules().getRows().get(i - 1), rule);
		}

		setRuleListRow(form.dyngrdRules().getRows().get(form.dyngrdRules().getRows().size() - 1), ruleSelected);

		// Keep selection
		form.dyngrdRules().setValue(form.getLocalContext().getSelectedRule());

		return true;
	}

	/**
	 * 
	 * @return
	 */
	private boolean assignPriority()
	{
		int rows = form.dyngrdRules().getRows().size();

		for (int i = 0; i < rows; i++)
		{
			DynamicGridRow row = form.dyngrdRules().getRows().get(i);

			// Set the rank for BusinessRuleVo
			BusinessRuleVo rule = (BusinessRuleVo) row.getValue();
			rule.setPriority(rows - i);

			// Set row value
			setRuleListRow(row, rule);
		}

		return true;
	}
}
