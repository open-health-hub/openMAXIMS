//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.70 build 3422.25470)
// Copyright (C) 1995-2009 IMS MAXIMS plc. All rights reserved.

package ims.rules.forms.rulecodepreview;

import java.io.IOException;

import org.apache.xerces.parsers.DOMParser;
import org.w3c.dom.*;
import org.xml.sax.SAXException;

import ims.framework.enumerations.DialogResult;
import ims.rules.engine.impl.DroolsRuleGenerator;
import ims.rules.helper.Entities;
import ims.rules.interfaces.IRule;
import ims.rules.utils.RuleXmlSerialization;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		String xml = form.getGlobalContext().Rules.RulesCodePreview.getXmlRule();		
		
		IRule rule;
		String code = "";
		try 
		{
			rule = RuleXmlSerialization.deserializeFromXml(xml, Entities.getInstance());
			code = new DroolsRuleGenerator().generate(rule);
		} 
		catch (Exception e) 
		{		
			code = e.toString();
		}
		
		form.lyrRule().tabCode().txtCode().setValue(code);
		
		StringBuilder sb = new StringBuilder();
		DOMParser parser = new DOMParser();
		try {
			parser.parse(new org.xml.sax.InputSource(new java.io.ByteArrayInputStream(xml.getBytes())));
			Document doc = parser.getDocument();	
			boolean isFirstChild = true;
			String tab = "&nbsp;&nbsp;&nbsp;";
			traverseTree(doc, sb, isFirstChild, tab);						
			form.lyrRule().tabXml().htmXml().setHTML(sb.toString());
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	 private void traverseTree(Node node, StringBuilder out, boolean isFirstChild, String tab)
	 {
		 if(node == null)
	           return;
	        
	     int type = node.getNodeType();
	     switch (type) 
	     {
	          case Node.DOCUMENT_NODE: 
	          {	               
	             traverseTree(((Document)node).getDocumentElement(),out, isFirstChild, tab);
	             out.append("&#60/" + ((Document)node).getDocumentElement().getNodeName()+"&#62<br>");	 
	             break;
	          }	          
	          case Node.ELEMENT_NODE:  
	          {	  
	        	  out.append(isFirstChild == false ? tab : "");
	        	  out.append("&#60" + node.getNodeName());		             
	              NamedNodeMap atributes = node.getAttributes();
	              if (atributes != null)
	              {
	            	 if (atributes.getLength() > 0)
	            	 {
	            		 for (int i = 0; i < atributes.getLength(); i++) 
	            		 {	            			 
	            			 out.append("&nbsp" + atributes.item(i).getNodeName() + " = \"" + atributes.item(i).getNodeValue() + "\"");
	            		 }	            		 
	            		 out.append("&#62<br>");
	            		 tab += "&nbsp;&nbsp;&nbsp";
	            	 }
	            	 else
	            	 {	            		 
	            		out.append("&#62<br>");
	            		tab += "&nbsp;&nbsp;&nbsp";
	            	 }
	             }
	             
	             isFirstChild = false;
	             
	             NodeList childNodes = node.getChildNodes();      
	             if(childNodes != null) 
	             {
	                int length = childNodes.getLength();
	                for (int loopIndex = 0; loopIndex < length ; loopIndex++)
	                {	        
	                	 out.append(isFirstChild == false ? tab : "");
	                	 
	                   traverseTree(childNodes.item(loopIndex),out, isFirstChild, tab);	
	                   tab = tab + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
	                   out.append(tab);
	                   out.append("&#60/" + childNodes.item(loopIndex).getNodeName()+"&#62<br>");	                   
	                 }
	              }	     
	             
	              break;
	           }	          
	     }
	 }
	
	@Override
	protected void onBtnCloseClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
