//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Callum Wells using IMS Development Environment (version 1.20 build 40818.600)
// Copyright (C) 1995-2004 IMS MAXIMS plc. All rights reserved.

package ims.nursing.domain.impl;

import ims.core.domain.Reports;
import ims.core.domain.impl.ReportsImpl;
import ims.core.resource.people.vo.HcpRefVo;
import ims.core.vo.CareContextShortVo;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.domain.HcpLiteVoAssembler;
import ims.domain.DomainFactory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.DomainRuntimeException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.impl.DomainImpl;
import ims.framework.enumerations.SortOrder;
import ims.nursing.vo.TransferNote;
import ims.nursing.vo.TransferNoteCollection;
import ims.nursing.vo.domain.TransferNoteAssembler;

import java.util.ArrayList;
import java.util.List;

public class TransferImpl extends DomainImpl implements ims.nursing.domain.Transfer, ims.domain.impl.Transactional
{
	/**
	 * Save Transfer note
	 */
	public TransferNote saveTransferNote(TransferNote voTransferNote) throws StaleObjectException
	{
		if (!voTransferNote.isValidated())
			throw new DomainRuntimeException("The transfer note value object has not been validated");

		DomainFactory factory = getDomainFactory();
		ims.nursing.domain.objects.TransferNote doTransferNote = TransferNoteAssembler.extractTransferNote(factory, voTransferNote);
		
		factory.save(doTransferNote);
		return (TransferNoteAssembler.create(doTransferNote));
	}

	/**
	 * List Transfer Notes
	 */
	public TransferNoteCollection listTransferNotes(CareContextShortVo careContextShortVo)
	{
		DomainFactory factory = getDomainFactory();
		StringBuffer hql = new StringBuffer(" ");
		String query = "from TransferNote t ";
		ArrayList markers = new ArrayList();
		ArrayList values = new ArrayList();
		String andStr = " ";

		if (careContextShortVo != null)
		{
			hql.append(andStr + " t.careContext.id = :rcc");
			markers.add("rcc");
			values.add(careContextShortVo.getID_CareContext());
			andStr = " and ";
		}

		if (markers.size() > 0)
			query += " where ";
		query += hql.toString();
		List procs = factory.find(query, markers, values);
		return TransferNoteAssembler.createTransferNoteCollectionFromTransferNote(procs).sort(SortOrder.DESCENDING);
	}

	/**
	 * call getReportAndTemplate form Core.Reports domainImpl
	 */
	public String[] getReportAndTemplate(Integer nReportId, Integer nTemplateId) throws DomainInterfaceException
	{
		Reports impl = (Reports) getDomainImpl(ReportsImpl.class);
		return impl.getReportAndTemplate(nReportId, nTemplateId);
	}

	public HcpLiteVo getHCP(HcpRefVo hcp)
	{
		DomainFactory factory = getDomainFactory();
		
		return HcpLiteVoAssembler.create((ims.core.resource.people.domain.objects.Hcp)factory.getDomainObject(ims.core.resource.people.domain.objects.Hcp.class, hcp.getID_Hcp()));
	}

}
