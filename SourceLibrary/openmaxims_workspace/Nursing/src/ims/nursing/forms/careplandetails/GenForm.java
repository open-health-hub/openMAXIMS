//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.careplandetails;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cbFilterComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(String value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(String value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(String value)
		{
			return super.control.removeRow(value);
		}
		public String getValue()
		{
			return (String)super.control.getValue();
		}
		public void setValue(String value)
		{
			super.control.setValue(value);
		}
	}
	public static class gridNotesRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected gridNotesRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setcolDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean iscolDateTimeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showcolDateTimeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForcolDateTime(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.DateTime getcolDateTime()
		{
			return (ims.framework.utils.DateTime)super.row.get(0);
		}
		public void setcolDateTime(ims.framework.utils.DateTime value)
		{
			super.row.set(0, value);
		}
		public void setCellcolDateTimeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setcolNoteTypeReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean iscolNoteTypeReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showcolNoteTypeOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForcolNoteType(String value)
		{
			super.row.setTooltip(1, value);
		}
		public String getcolNoteType()
		{
			return (String)super.row.get(1);
		}
		public void setcolNoteType(String value)
		{
			super.row.set(1, value);
		}
		public void setCellcolNoteTypeTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setcolByReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean iscolByReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showcolByOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForcolBy(String value)
		{
			super.row.setTooltip(2, value);
		}
		public String getcolBy()
		{
			return (String)super.row.get(2);
		}
		public void setcolBy(String value)
		{
			super.row.set(2, value);
		}
		public void setCellcolByTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setcolStatusReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean iscolStatusReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showcolStatusOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForcolStatus(String value)
		{
			super.row.setTooltip(3, value);
		}
		public String getcolStatus()
		{
			return (String)super.row.get(3);
		}
		public void setcolStatus(String value)
		{
			super.row.set(3, value);
		}
		public void setCellcolStatusTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setcolNoteReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean iscolNoteReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showcolNoteOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForcolNote(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getcolNote()
		{
			return (String)super.row.get(4);
		}
		public void setcolNote(String value)
		{
			super.row.set(4, value);
		}
		public void setCellcolNoteTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.nursing.vo.CarePlanEvaluationNote getValue()
		{
			return (ims.nursing.vo.CarePlanEvaluationNote)super.row.getValue();
		}
		public void setValue(ims.nursing.vo.CarePlanEvaluationNote value)
		{
			super.row.setValue(value);
		}
	}
	public static class gridNotesRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private gridNotesRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public gridNotesRow get(int index)
		{
			return new gridNotesRow(super.collection.get(index));
		}
		public gridNotesRow newRow()
		{
			return new gridNotesRow(super.collection.newRow());
		}
		public gridNotesRow newRow(boolean autoSelect)
		{
			return new gridNotesRow(super.collection.newRow(autoSelect));
		}
		public gridNotesRow newRowAt(int index)
		{
			return new gridNotesRow(super.collection.newRowAt(index));
		}
		public gridNotesRow newRowAt(int index, boolean autoSelect)
		{
			return new gridNotesRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class gridNotesGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.nursing.vo.CarePlanEvaluationNote[] getValues()
		{
			ims.nursing.vo.CarePlanEvaluationNote[] listOfValues = new ims.nursing.vo.CarePlanEvaluationNote[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.nursing.vo.CarePlanEvaluationNote getValue()
		{
			return (ims.nursing.vo.CarePlanEvaluationNote)super.grid.getValue();
		}
		public void setValue(ims.nursing.vo.CarePlanEvaluationNote value)
		{
			super.grid.setValue(value);
		}
		public gridNotesRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new gridNotesRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public gridNotesRowCollection getRows()
		{
			return new gridNotesRowCollection(super.grid.getRows());
		}
		public gridNotesRow getRowByValue(ims.nursing.vo.CarePlanEvaluationNote value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new gridNotesRow(row);
		}
		public void setcolDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getcolDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setcolNoteTypeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getcolNoteTypeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setcolByHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getcolByHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setcolStatusHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getcolStatusHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setcolNoteHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getcolNoteHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("COE.CarePlanID", "_cv_COE.CarePlanID").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'COE.CarePlanID' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getCarePlan();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.Nursing.contextMenuCarePlanEvaluateAction = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.Nursing.contextMenuCarePlanEvaluateActionADDItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Action", true, false, new Integer(102179), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3570001)))
			contextMenus.Nursing.contextMenuCarePlanEvaluateAction.add(contextMenus.Nursing.contextMenuCarePlanEvaluateActionADDItem);
		contextMenus.Nursing.contextMenuCarePlanEvaluateActionEDITADTIONALNOTEItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Aditional Note", true, false, new Integer(102150), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3570002)))
			contextMenus.Nursing.contextMenuCarePlanEvaluateAction.add(contextMenus.Nursing.contextMenuCarePlanEvaluateActionEDITADTIONALNOTEItem);
		contextMenus.Nursing.contextMenuCarePlanEvaluateActionMARKACTIONCOMPLETEItem = factory.createMenuItem(startControlID.intValue() + 3, "Mark Action Complete", true, false, new Integer(116128), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3570003)))
			contextMenus.Nursing.contextMenuCarePlanEvaluateAction.add(contextMenus.Nursing.contextMenuCarePlanEvaluateActionMARKACTIONCOMPLETEItem);
		contextMenus.Nursing.contextMenuCarePlanEvaluateActionREACTIVATEACTIONItem = factory.createMenuItem(startControlID.intValue() + 4, "Reactivate Action", true, false, new Integer(129110), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3570004)))
			contextMenus.Nursing.contextMenuCarePlanEvaluateAction.add(contextMenus.Nursing.contextMenuCarePlanEvaluateActionREACTIVATEACTIONItem);
		contextMenus.Nursing.contextMenuCarePlanEvaluateActionREMOVE_ACTIONItem = factory.createMenuItem(startControlID.intValue() + 5, "Remove Action", true, false, new Integer(102300), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3570005)))
			contextMenus.Nursing.contextMenuCarePlanEvaluateAction.add(contextMenus.Nursing.contextMenuCarePlanEvaluateActionREMOVE_ACTIONItem);
		contextMenus.Nursing.contextMenuCarePlanEvaluateActionREINSTATE_ACTIONItem = factory.createMenuItem(startControlID.intValue() + 6, "Re-instate Action", true, false, new Integer(116109), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(3570006)))
			contextMenus.Nursing.contextMenuCarePlanEvaluateAction.add(contextMenus.Nursing.contextMenuCarePlanEvaluateActionREINSTATE_ACTIONItem);
		form.registerMenu(contextMenus.Nursing.contextMenuCarePlanEvaluateAction);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 19, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 272, 380, 52, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date To:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 380, 68, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date From:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 91, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 16, 43, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Title:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 67, 62, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Objective:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 648, 592, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Create Duplicate", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 344, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Re-Activate", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 496, 376, 96, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "View Notes", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 584, 592, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Review History", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 760, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 504, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Review", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Evaluate", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 424, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Print", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 224, 592, 112, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Note Correction", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 683, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 120, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Evaluation Details", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 760, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Close", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 96, 67, 736, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 96, 43, 736, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 328, 378, 152, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 96, 378, 152, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 96, 91, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cbFilterTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cbFilterTemp);
		cbFilterComboBox cbFilter = (cbFilterComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cbFilterComboBox.class, m_cbFilterTemp);
		super.addComboBox(cbFilter);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 744, 384, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,"Active only", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 16, 408, 816, 176, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_gridNotesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_gridNotesTemp);
		gridNotesGrid gridNotes = (gridNotesGrid)GridFlyweightFactory.getInstance().createGridBridge(gridNotesGrid.class, m_gridNotesTemp);
		gridNotes.addStringColumn("Date/Time", 0, 0, 120, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridNotes.addStringColumn("Note Type", 0, 0, 85, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridNotes.addStringColumn("By", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridNotes.addStringColumn("Status", 0, 0, 100, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		gridNotes.addStringColumn("Note", 0, 0, 375, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(gridNotes);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 120, 816, 248, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, contextMenus.Nursing.contextMenuCarePlanEvaluateAction, Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}));

		// Link Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 776, 4, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return", Boolean.FALSE, "Return to Care Plan Worklist"}));
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 648, 384, 66, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Clinical Note", Boolean.TRUE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public Button btnCreateDuplicate()
	{
		return (Button)super.getControl(6);
	}
	public Button btnReactivate()
	{
		return (Button)super.getControl(7);
	}
	public Button btnViewNotes()
	{
		return (Button)super.getControl(8);
	}
	public Button btnReviewHistory()
	{
		return (Button)super.getControl(9);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(10);
	}
	public Button btnReview()
	{
		return (Button)super.getControl(11);
	}
	public Button bUpdate()
	{
		return (Button)super.getControl(12);
	}
	public Button bPrint()
	{
		return (Button)super.getControl(13);
	}
	public Button bNoteCorrection()
	{
		return (Button)super.getControl(14);
	}
	public Button bSave()
	{
		return (Button)super.getControl(15);
	}
	public Button bEval()
	{
		return (Button)super.getControl(16);
	}
	public Button bClose()
	{
		return (Button)super.getControl(17);
	}
	public TextBox textObjective()
	{
		return (TextBox)super.getControl(18);
	}
	public TextBox textTitle()
	{
		return (TextBox)super.getControl(19);
	}
	public DateControl dteNotesTo()
	{
		return (DateControl)super.getControl(20);
	}
	public DateControl dteNotesFrom()
	{
		return (DateControl)super.getControl(21);
	}
	public cbFilterComboBox cbFilter()
	{
		return (cbFilterComboBox)super.getComboBox(0);
	}
	public CheckBox chkActive()
	{
		return (CheckBox)super.getControl(23);
	}
	public gridNotesGrid gridNotes()
	{
		return (gridNotesGrid)super.getGrid(0);
	}
	public DynamicGrid dyngrdActions()
	{
		return (DynamicGrid)super.getControl(25);
	}
	public Link lnkReturnToCarePlanWorklist()
	{
		return (Link)super.getControl(26);
	}
	public Link lnkClinicalNote()
	{
		return (Link)super.getControl(27);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Nursing = new NursingForms();
			Core = new CoreForms();
		}
		public final class NursingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingForms()
			{
				CarePlanOverview = new LocalFormName(101126);
				CarePlanAddAction = new LocalFormName(101132);
				CarePlanEvaluation = new LocalFormName(101127);
				CarePlanNoteCorrect = new LocalFormName(101125);
				CarePlanReviewDialog = new LocalFormName(101148);
				CarePlanReview = new LocalFormName(101131);
				RptCarePlanDetails = new LocalFormName(101177);
				ClinicalNotes = new LocalFormName(101123);
				CarePlanDetails = new LocalFormName(101130);
				ClinicalNoteDialog = new LocalFormName(101155);
				ClinicalNotesCarePlanDetails = new LocalFormName(101193);
				CarePlanWorklist = new LocalFormName(100129);
			}
			public final FormName CarePlanOverview;
			public final FormName CarePlanAddAction;
			public final FormName CarePlanEvaluation;
			public final FormName CarePlanNoteCorrect;
			public final FormName CarePlanReviewDialog;
			public final FormName CarePlanReview;
			public final FormName RptCarePlanDetails;
			public final FormName ClinicalNotes;
			public final FormName CarePlanDetails;
			public final FormName ClinicalNoteDialog;
			public final FormName ClinicalNotesCarePlanDetails;
			public final FormName CarePlanWorklist;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				Reports = new LocalFormName(102156);
				YesNoDialog = new LocalFormName(102107);
			}
			public final FormName Reports;
			public final FormName YesNoDialog;
		}

		public NursingForms Nursing;
		public CoreForms Core;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				NewDisabled = new ImageHelper(102176, "Images/Core/newdocDisabled.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image NewDisabled;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_CarePlan = new ims.framework.ContextVariable("CarePlan", prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier + "");
			cxl_IsNewEvalNote = new ims.framework.ContextVariable("IsNewEvalNote", prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__IsNewEvalNote_" + componentIdentifier + "");
			cxl_CarePlanStatus = new ims.framework.ContextVariable("CarePlanStatus", prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlanStatus_" + componentIdentifier + "");
			cxl_LastFormName = new ims.framework.ContextVariable("LastFormName", prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__LastFormName_" + componentIdentifier + "");
			cxl_FromReview = new ims.framework.ContextVariable("FromReview", prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__FromReview_" + componentIdentifier + "");
			cxl_MessageBoxClosed = new ims.framework.ContextVariable("MessageBoxClosed", prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__MessageBoxClosed_" + componentIdentifier + "");
		}
		
		public boolean getCarePlanIsNotNull()
		{
			return !cxl_CarePlan.getValueIsNull(context);
		}
		public ims.nursing.vo.CarePlan getCarePlan()
		{
			return (ims.nursing.vo.CarePlan)cxl_CarePlan.getValue(context);
		}
		public void setCarePlan(ims.nursing.vo.CarePlan value)
		{
			cxl_CarePlan.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CarePlan = null;
		public boolean getIsNewEvalNoteIsNotNull()
		{
			return !cxl_IsNewEvalNote.getValueIsNull(context);
		}
		public Boolean getIsNewEvalNote()
		{
			return (Boolean)cxl_IsNewEvalNote.getValue(context);
		}
		public void setIsNewEvalNote(Boolean value)
		{
			cxl_IsNewEvalNote.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsNewEvalNote = null;
		public boolean getCarePlanStatusIsNotNull()
		{
			return !cxl_CarePlanStatus.getValueIsNull(context);
		}
		public ims.nursing.vo.lookups.CarePlanStatus getCarePlanStatus()
		{
			return (ims.nursing.vo.lookups.CarePlanStatus)cxl_CarePlanStatus.getValue(context);
		}
		public void setCarePlanStatus(ims.nursing.vo.lookups.CarePlanStatus value)
		{
			cxl_CarePlanStatus.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CarePlanStatus = null;
		public boolean getLastFormNameIsNotNull()
		{
			return !cxl_LastFormName.getValueIsNull(context);
		}
		public ims.framework.FormName getLastFormName()
		{
			return (ims.framework.FormName)cxl_LastFormName.getValue(context);
		}
		public void setLastFormName(ims.framework.FormName value)
		{
			cxl_LastFormName.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_LastFormName = null;
		public boolean getFromReviewIsNotNull()
		{
			return !cxl_FromReview.getValueIsNull(context);
		}
		public Boolean getFromReview()
		{
			return (Boolean)cxl_FromReview.getValue(context);
		}
		public void setFromReview(Boolean value)
		{
			cxl_FromReview.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_FromReview = null;
		public boolean getMessageBoxClosedIsNotNull()
		{
			return !cxl_MessageBoxClosed.getValueIsNull(context);
		}
		public Integer getMessageBoxClosed()
		{
			return (Integer)cxl_MessageBoxClosed.getValue(context);
		}
		public void setMessageBoxClosed(Integer value)
		{
			cxl_MessageBoxClosed.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_MessageBoxClosed = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public NursingNamespace Nursing = new NursingNamespace();
		public final class NursingNamespace implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public final class CarePlanEvaluateAction implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static final int ADD = 1;
				public static final int EDITADTIONALNOTE = 2;
				public static final int MARKACTIONCOMPLETE = 3;
				public static final int REACTIVATEACTION = 4;
				public static final int REMOVE_ACTION = 5;
				public static final int REINSTATE_ACTION = 6;
			}
			public void disableAllCarePlanEvaluateActionMenuItems()
			{
				this.contextMenuCarePlanEvaluateActionADDItem.setEnabled(false);
				this.contextMenuCarePlanEvaluateActionEDITADTIONALNOTEItem.setEnabled(false);
				this.contextMenuCarePlanEvaluateActionMARKACTIONCOMPLETEItem.setEnabled(false);
				this.contextMenuCarePlanEvaluateActionREACTIVATEACTIONItem.setEnabled(false);
				this.contextMenuCarePlanEvaluateActionREMOVE_ACTIONItem.setEnabled(false);
				this.contextMenuCarePlanEvaluateActionREINSTATE_ACTIONItem.setEnabled(false);
			}
			public void hideAllCarePlanEvaluateActionMenuItems()
			{
				this.contextMenuCarePlanEvaluateActionADDItem.setVisible(false);
				this.contextMenuCarePlanEvaluateActionEDITADTIONALNOTEItem.setVisible(false);
				this.contextMenuCarePlanEvaluateActionMARKACTIONCOMPLETEItem.setVisible(false);
				this.contextMenuCarePlanEvaluateActionREACTIVATEACTIONItem.setVisible(false);
				this.contextMenuCarePlanEvaluateActionREMOVE_ACTIONItem.setVisible(false);
				this.contextMenuCarePlanEvaluateActionREINSTATE_ACTIONItem.setVisible(false);
			}
			private Menu contextMenuCarePlanEvaluateAction;
			public ReadOnlyMenuItem getCarePlanEvaluateActionADDItem()
			{
				return this.contextMenuCarePlanEvaluateActionADDItem;
			}
			private MenuItem contextMenuCarePlanEvaluateActionADDItem;
			public ReadOnlyMenuItem getCarePlanEvaluateActionEDITADTIONALNOTEItem()
			{
				return this.contextMenuCarePlanEvaluateActionEDITADTIONALNOTEItem;
			}
			private MenuItem contextMenuCarePlanEvaluateActionEDITADTIONALNOTEItem;
			public ReadOnlyMenuItem getCarePlanEvaluateActionMARKACTIONCOMPLETEItem()
			{
				return this.contextMenuCarePlanEvaluateActionMARKACTIONCOMPLETEItem;
			}
			private MenuItem contextMenuCarePlanEvaluateActionMARKACTIONCOMPLETEItem;
			public ReadOnlyMenuItem getCarePlanEvaluateActionREACTIVATEACTIONItem()
			{
				return this.contextMenuCarePlanEvaluateActionREACTIVATEACTIONItem;
			}
			private MenuItem contextMenuCarePlanEvaluateActionREACTIVATEACTIONItem;
			public ReadOnlyMenuItem getCarePlanEvaluateActionREMOVE_ACTIONItem()
			{
				return this.contextMenuCarePlanEvaluateActionREMOVE_ACTIONItem;
			}
			private MenuItem contextMenuCarePlanEvaluateActionREMOVE_ACTIONItem;
			public ReadOnlyMenuItem getCarePlanEvaluateActionREINSTATE_ACTIONItem()
			{
				return this.contextMenuCarePlanEvaluateActionREINSTATE_ACTIONItem;
			}
			private MenuItem contextMenuCarePlanEvaluateActionREINSTATE_ACTIONItem;
		}
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[118];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlan", "BO-1010100003-ID", "ID_CarePlan");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlan", "BO-1010100003-TITLE", "Title");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlan", "BO-1010100003-OBJECTIVE", "Objective");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlan", "BO-1010100003-NEXTEVALUATIONDATE", "NextEvaluationDate");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlan", "BO-1010100003-LASTREVIEWEDDATE", "LastReviewedDate");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlan", "BO-1010100003-LASTREVIEWEDBY", "LastReviewedBy");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlan", "BO-1010100003-CONFIRMEDBY", "ConfirmedBy");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlan", "BO-1010100003-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlan", "BO-1010100003-CLINICALCONTACT", "ClinicalContact");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlan", "BO-1010100003-CARECONTEXT", "CareContext");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlanEvaluation", "BO-1010100004-ID", "ID_CarePlanEvaluationNote");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlanEvaluation", "BO-1010100004-RECORDEDDATETIME", "RecordedDateTime");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlanEvaluation", "BO-1010100004-NOTE", "Note");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlanEvaluation", "BO-1010100004-CORRECTIONDATETIME", "CorrectionDateTime");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlanEvaluation", "BO-1010100004-CORRECTIONREASON", "CorrectionReason");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlanEvaluation", "BO-1010100004-ACTIVE", "Active");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlanEvaluation", "BO-1010100004-CONFIRMEDBY", "ConfirmedBy");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlanEvaluation", "BO-1010100004-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_COE.CarePlanEvaluation", "BO-1010100004-CAREPLAN", "CarePlan");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.Hospital", "BO-1007100007-ID", "ID_Location");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.Hospital", "BO-1007100007-NAME", "Name");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.Hospital", "BO-1007100007-ISACTIVE", "IsActive");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.Hospital", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.Hospital", "BO-1007100007-TYPE", "Type");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.Hospital", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.Hospital", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_Core.Hospital", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Core.Hospital", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_Core.Ward", "BO-1007100007-ID", "ID_Location");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_Core.Ward", "BO-1007100007-NAME", "Name");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_Core.Ward", "BO-1007100007-ISACTIVE", "IsActive");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_Core.Ward", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_Core.Ward", "BO-1007100007-TYPE", "Type");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_Core.Ward", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_Core.Ward", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Core.Ward", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Core.Ward", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier, "BO-1010100003-ID", "ID_CarePlan");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier, "BO-1010100003-TITLE", "Title");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier, "BO-1010100003-OBJECTIVE", "Objective");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier, "BO-1010100003-NEXTEVALUATIONDATE", "NextEvaluationDate");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier, "BO-1010100003-LASTREVIEWEDDATE", "LastReviewedDate");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier, "BO-1010100003-LASTREVIEWEDBY", "LastReviewedBy");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier, "BO-1010100003-CONFIRMEDBY", "ConfirmedBy");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier, "BO-1010100003-CONFIRMEDDATETIME", "ConfirmedDateTime");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier, "BO-1010100003-CLINICALCONTACT", "ClinicalContact");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.CarePlanDetails.__internal_x_context__CarePlan_" + componentIdentifier, "BO-1010100003-CARECONTEXT", "CareContext");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
