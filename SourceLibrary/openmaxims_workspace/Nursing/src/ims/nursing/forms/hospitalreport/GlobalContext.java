//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.hospitalreport;

import java.io.Serializable;

public final class GlobalContext extends ims.framework.FormContext implements Serializable
{
	private static final long serialVersionUID = 1L;

	public GlobalContext(ims.framework.Context context)
	{
		super(context);

		Core = new CoreContext(context);
	}
	public final class CoreContext implements Serializable
	{
		private static final long serialVersionUID = 1L;

		private CoreContext(ims.framework.Context context)
		{
			this.context = context;

			Reports = new ReportsContext(context);
		}
		public final class ReportsContext implements Serializable
		{
			private static final long serialVersionUID = 1L;

			private ReportsContext(ims.framework.Context context)
			{
				this.context = context;
			}
			public boolean getEndDateIsNotNull()
			{
				return !cx_CoreReportsEndDate.getValueIsNull(context);
			}
			public ims.framework.utils.Date getEndDate()
			{
				return (ims.framework.utils.Date)cx_CoreReportsEndDate.getValue(context);
			}
		public void setEndDate(ims.framework.utils.Date value)
		{
				cx_CoreReportsEndDate.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CoreReportsEndDate = new ims.framework.ContextVariable("Core.Reports.EndDate", "_cv_Core.Reports.EndDate");
			public boolean getStartDateIsNotNull()
			{
				return !cx_CoreReportsStartDate.getValueIsNull(context);
			}
			public ims.framework.utils.Date getStartDate()
			{
				return (ims.framework.utils.Date)cx_CoreReportsStartDate.getValue(context);
			}
		public void setStartDate(ims.framework.utils.Date value)
		{
				cx_CoreReportsStartDate.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CoreReportsStartDate = new ims.framework.ContextVariable("Core.Reports.StartDate", "_cv_Core.Reports.StartDate");
			public boolean getEndTimeIsNotNull()
			{
				return !cx_CoreReportsEndTime.getValueIsNull(context);
			}
			public ims.framework.utils.Time getEndTime()
			{
				return (ims.framework.utils.Time)cx_CoreReportsEndTime.getValue(context);
			}
		public void setEndTime(ims.framework.utils.Time value)
		{
				cx_CoreReportsEndTime.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CoreReportsEndTime = new ims.framework.ContextVariable("Core.Reports.EndTime", "_cv_Core.Reports.EndTime");
			public boolean getStartTimeIsNotNull()
			{
				return !cx_CoreReportsStartTime.getValueIsNull(context);
			}
			public ims.framework.utils.Time getStartTime()
			{
				return (ims.framework.utils.Time)cx_CoreReportsStartTime.getValue(context);
			}
		public void setStartTime(ims.framework.utils.Time value)
		{
				cx_CoreReportsStartTime.setValue(context, value);
		}

			private ims.framework.ContextVariable cx_CoreReportsStartTime = new ims.framework.ContextVariable("Core.Reports.StartTime", "_cv_Core.Reports.StartTime");
			private ims.framework.Context context;
		}

		public boolean getHospitalIsNotNull()
		{
			return !cx_CoreHospital.getValueIsNull(context);
		}
		public ims.core.vo.LocMostVo getHospital()
		{
			return (ims.core.vo.LocMostVo)cx_CoreHospital.getValue(context);
		}
		public void setHospital(ims.core.vo.LocMostVo value)
		{
			cx_CoreHospital.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreHospital = new ims.framework.ContextVariable("Core.Hospital", "_cv_Core.Hospital");
		public boolean getWardIsNotNull()
		{
			return !cx_CoreWard.getValueIsNull(context);
		}
		public ims.core.vo.LocMostVo getWard()
		{
			return (ims.core.vo.LocMostVo)cx_CoreWard.getValue(context);
		}
		public void setWard(ims.core.vo.LocMostVo value)
		{
			cx_CoreWard.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreWard = new ims.framework.ContextVariable("Core.Ward", "_cv_Core.Ward");
		public boolean getReportIDIsNotNull()
		{
			return !cx_CoreReportID.getValueIsNull(context);
		}
		public Integer getReportID()
		{
			return (Integer)cx_CoreReportID.getValue(context);
		}
		public void setReportID(Integer value)
		{
			cx_CoreReportID.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreReportID = new ims.framework.ContextVariable("Core.ReportID", "_cv_Core.ReportID");
		public boolean getTemplateIDIsNotNull()
		{
			return !cx_CoreTemplateID.getValueIsNull(context);
		}
		public Integer getTemplateID()
		{
			return (Integer)cx_CoreTemplateID.getValue(context);
		}
		public void setTemplateID(Integer value)
		{
			cx_CoreTemplateID.setValue(context, value);
		}

		private ims.framework.ContextVariable cx_CoreTemplateID = new ims.framework.ContextVariable("Core.TemplateID", "_cv_Core.TemplateID");

		public ReportsContext Reports;
		private ims.framework.Context context;
	}

	public CoreContext Core;
}
