//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.invasivedevice;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class ctnDetailContainer extends ContainerBridge
	{
		private static final long serialVersionUID = 1L;
		public static class lyrDetailsLayer extends Layer
		{
			private static final long serialVersionUID = 1L;
			public static class tabDeviceContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbSizeComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo getValue()
					{
						return (ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo)super.control.getValue();
					}
					public void setValue(ims.clinical.configuration.vo.InvasiveDeviceConfigSizeRefVo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbTypeComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo getValue()
					{
						return (ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo)super.control.getValue();
					}
					public void setValue(ims.clinical.configuration.vo.InvasiveDeviceTypeRefVo value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbRemovalReasonComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceRemovalReason value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceRemovalReason value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceRemovalReason value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceRemovalReason value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.vo.lookups.InvasiveDeviceRemovalReason value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.vo.lookups.InvasiveDeviceRemovalReason getValue()
					{
						return (ims.clinical.vo.lookups.InvasiveDeviceRemovalReason)super.control.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.InvasiveDeviceRemovalReason value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbDeviceComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo getValue()
					{
						return (ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo)super.control.getValue();
					}
					public void setValue(ims.clinicaladmin.vo.InvasiveDeviceConfigShortVo value)
					{
						super.control.setValue(value);
					}
				}
				public static class qmbRemovalByComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.core.vo.HcpLiteVo value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.core.vo.HcpLiteVo value)
					{
						return super.control.removeRow(value);
					}
					public ims.core.vo.HcpLiteVo getValue()
					{
						return (ims.core.vo.HcpLiteVo)super.control.getValue();
					}
					public void setValue(ims.core.vo.HcpLiteVo value)
					{
						super.control.setValue(value);
					}
					public void setEditedText(String text)
					{
						super.control.setEditedText(text);
					}
					public String getEditedText()
					{
						return super.control.getEditedText();
					}
				}
			
				public static class ansCultureAnswerBox extends AnswerBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void clear()
					{
						control.clear();
					}
					public java.util.ArrayList getValues()
					{
						return control.getValues();
					}
					public void addOption(ims.core.vo.lookups.YesNo option)
					{
						control.addOption(option);
					}
					public ims.core.vo.lookups.YesNo getValue()
					{
						return (ims.core.vo.lookups.YesNo)super.control.getValue();
					}
					public void setValue(ims.core.vo.lookups.YesNo value)
					{
						super.control.setValue(value);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Custom Controls
					ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 208, 7, 296, 56, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					ims.framework.FormUiLogic m_customInsertedHCPForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper1.getSize(), instance1, startTabIndex.intValue() + 11, skipContextValidation);
					//ims.framework.Control m_customInsertedHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(208), new Integer(7), new Integer(296), new Integer(56), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 11), m_customInsertedHCPForm, instance1 } );
					ims.framework.Control m_customInsertedHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001),  new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 11), m_customInsertedHCPForm, instance1, Boolean.FALSE } );
					super.addControl(m_customInsertedHCPControl);
					Menu[] menus1 = m_customInsertedHCPForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus1.length; x++)
					{
						form.registerMenu(menus1[x]);
					}
					ims.framework.CustomComponent instance2 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 499, 56, 304, 56, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					ims.framework.FormUiLogic m_customAuthoringHCPForm = loader.loadComponent(102228, appForm, startControlID * 10 + 2000, anchoringHelper2.getSize(), instance2, startTabIndex.intValue() + 1018, skipContextValidation);
					//ims.framework.Control m_customAuthoringHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(499), new Integer(56), new Integer(304), new Integer(56), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 1018), m_customAuthoringHCPForm, instance2 } );
					ims.framework.Control m_customAuthoringHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, new Integer(startTabIndex.intValue() + 1018), m_customAuthoringHCPForm, instance2, Boolean.FALSE } );
					super.addControl(m_customAuthoringHCPControl);
					Menu[] menus2 = m_customAuthoringHCPForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus2.length; x++)
					{
						form.registerMenu(menus2[x]);
					}
			
					// Label Controls
					RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 507, 15, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Sent for culture:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 507, 41, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Result:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 216, 65, 128, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Target Removal Date:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 8, 113, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 8, 65, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Size:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 41, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 216, 137, 103, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Removal Reason:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 216, 114, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Removal HCP:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 89, 30, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Site:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 17, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Device:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 216, 89, 122, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Removal Date/Time:", new Integer(1), null, new Integer(0)}));
			
					// TextBox Controls
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 636, 39, 151, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 80, 111, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 80, 87, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			
					// Date Time Controls
					RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 345, 63, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1012), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
					RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 345, 87, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1013), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, null}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 80, 63, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbSizeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbSizeTemp);
					cmbSizeComboBox cmbSize = (cmbSizeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSizeComboBox.class, m_cmbSizeTemp);
					super.addComboBox(cmbSize);
					RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 80, 39, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbTypeTemp);
					cmbTypeComboBox cmbType = (cmbTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTypeComboBox.class, m_cmbTypeTemp);
					super.addComboBox(cmbType);
					RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 345, 135, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					ComboBox m_cmbRemovalReasonTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1015), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
					addControl(m_cmbRemovalReasonTemp);
					cmbRemovalReasonComboBox cmbRemovalReason = (cmbRemovalReasonComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRemovalReasonComboBox.class, m_cmbRemovalReasonTemp);
					super.addComboBox(cmbRemovalReason);
					RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 80, 15, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
					ComboBox m_cmbDeviceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbDeviceTemp);
					cmbDeviceComboBox cmbDevice = (cmbDeviceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDeviceComboBox.class, m_cmbDeviceTemp);
					super.addComboBox(cmbDevice);
			
					// Query ComboBox Controls
					RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 345, 112, 144, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					ComboBox m_qmbRemovalByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
					addControl(m_qmbRemovalByTemp);
					qmbRemovalByComboBox qmbRemovalBy = (qmbRemovalByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbRemovalByComboBox.class, m_qmbRemovalByTemp);
					super.addComboBox(qmbRemovalBy);
			
					// AnswerBox Controls
					RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 636, 15, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					AnswerBox tmpansCulture = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1016), ControlState.DISABLED, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
					super.addControl(tmpansCulture);
					ansCultureAnswerBox ansCulture = (ansCultureAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansCultureAnswerBox.class, tmpansCulture);
					super.addAnswerBox(ansCulture);
				}
	
				public ims.core.forms.authoringinfo.IComponent customInsertedHCP()
				{
					return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
				}
				public void setcustomInsertedHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
				}
				public void setcustomInsertedHCPVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setVisible(value);
				}
				public boolean iscustomInsertedHCPVisible()
				{
					return ((ims.framework.Control)super.getControl(0)).isVisible();
				}
				public void setcustomInsertedHCPEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setEnabled(value);
				}
				public boolean iscustomInsertedHCPEnabled()
				{
					return ((ims.framework.Control)super.getControl(0)).isEnabled();
				}
				public ims.core.forms.authoringinfo.IComponent customAuthoringHCP()
				{
					return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
				}
				public void setcustomAuthoringHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
				}
				public void setcustomAuthoringHCPVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(1)).setVisible(value);
				}
				public boolean iscustomAuthoringHCPVisible()
				{
					return ((ims.framework.Control)super.getControl(1)).isVisible();
				}
				public void setcustomAuthoringHCPEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(1)).setEnabled(value);
				}
				public boolean iscustomAuthoringHCPEnabled()
				{
					return ((ims.framework.Control)super.getControl(1)).isEnabled();
				}
				public TextBox txtResult()
				{
					return (TextBox)super.getControl(13);
				}
				public TextBox txtDesc()
				{
					return (TextBox)super.getControl(14);
				}
				public TextBox txtSite()
				{
					return (TextBox)super.getControl(15);
				}
				public DateTimeControl dtimTargetRemDate()
				{
					return (DateTimeControl)super.getControl(16);
				}
				public DateTimeControl dtimRemDate()
				{
					return (DateTimeControl)super.getControl(17);
				}
				public cmbSizeComboBox cmbSize()
				{
					return (cmbSizeComboBox)super.getComboBox(0);
				}
				public cmbTypeComboBox cmbType()
				{
					return (cmbTypeComboBox)super.getComboBox(1);
				}
				public cmbRemovalReasonComboBox cmbRemovalReason()
				{
					return (cmbRemovalReasonComboBox)super.getComboBox(2);
				}
				public cmbDeviceComboBox cmbDevice()
				{
					return (cmbDeviceComboBox)super.getComboBox(3);
				}
				public qmbRemovalByComboBox qmbRemovalBy()
				{
					return (qmbRemovalByComboBox)super.getComboBox(4);
				}
				public ansCultureAnswerBox ansCulture()
				{
					return (ansCultureAnswerBox)super.getAnswerBox(0);
				}
			}
			public static class tabVIPContainer extends LayerBridge
			{
				private static final long serialVersionUID = 1L;
				public static class cmbVipSoreComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceVIPScale value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceVIPScale value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceVIPScale value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceVIPScale value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.vo.lookups.InvasiveDeviceVIPScale value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.vo.lookups.InvasiveDeviceVIPScale getValue()
					{
						return (ims.clinical.vo.lookups.InvasiveDeviceVIPScale)super.control.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.InvasiveDeviceVIPScale value)
					{
						super.control.setValue(value);
					}
				}
				public static class cmbActionComboBox extends ComboBoxBridge
				{
					private static final long serialVersionUID = 1L;
					
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceAction value, String text)
					{
						super.control.newRow(value, text);
					}
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceAction value, String text, ims.framework.utils.Image image)
					{
						super.control.newRow(value, text, image);
					}
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceAction value, String text, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, textColor);
					}
					public void newRow(ims.clinical.vo.lookups.InvasiveDeviceAction value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
					{
						super.control.newRow(value, text, image, textColor);
					}
					public boolean removeRow(ims.clinical.vo.lookups.InvasiveDeviceAction value)
					{
						return super.control.removeRow(value);
					}
					public ims.clinical.vo.lookups.InvasiveDeviceAction getValue()
					{
						return (ims.clinical.vo.lookups.InvasiveDeviceAction)super.control.getValue();
					}
					public void setValue(ims.clinical.vo.lookups.InvasiveDeviceAction value)
					{
						super.control.setValue(value);
					}
				}
				public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
				{
					super.container.setTabActivatedEvent(delegate);
				}
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
			
			
					// Custom Controls
					ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
					RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 416, 40, 300, 64, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ims.framework.FormUiLogic m_customVipAuthoringHCPForm = loader.loadComponent(102228, appForm, startControlID * 10 + 3000, anchoringHelper25.getSize(), instance1, startTabIndex.intValue() + 2024, skipContextValidation);
					//ims.framework.Control m_customVipAuthoringHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(416), new Integer(40), new Integer(300), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2024), m_customVipAuthoringHCPForm, instance1 } );
					ims.framework.Control m_customVipAuthoringHCPControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1027),  new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, new Integer(startTabIndex.intValue() + 2024), m_customVipAuthoringHCPForm, instance1, Boolean.FALSE } );
					super.addControl(m_customVipAuthoringHCPControl);
					Menu[] menus1 = m_customVipAuthoringHCPForm.getForm().getRegisteredMenus();
					for(int x = 0; x < menus1.length; x++)
					{
						form.registerMenu(menus1[x]);
					}
			
					// Label Controls
					RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 128, 80, 44, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Action:", new Integer(1), null, new Integer(0)}));
					RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 128, 40, 64, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "VIP Score:", new Integer(1), null, new Integer(0)}));
			
					// ComboBox Controls
					RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 216, 40, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbVipSoreTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 2020), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbVipSoreTemp);
					cmbVipSoreComboBox cmbVipSore = (cmbVipSoreComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbVipSoreComboBox.class, m_cmbVipSoreTemp);
					super.addComboBox(cmbVipSore);
					RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 216, 80, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
					ComboBox m_cmbActionTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 2022), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
					addControl(m_cmbActionTemp);
					cmbActionComboBox cmbAction = (cmbActionComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbActionComboBox.class, m_cmbActionTemp);
					super.addComboBox(cmbAction);
				}
	
				public ims.core.forms.authoringinfo.IComponent customVipAuthoringHCP()
				{
					return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
				}
				public void setcustomVipAuthoringHCPValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
				{
					((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
				}
				public void setcustomVipAuthoringHCPVisible(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setVisible(value);
				}
				public boolean iscustomVipAuthoringHCPVisible()
				{
					return ((ims.framework.Control)super.getControl(0)).isVisible();
				}
				public void setcustomVipAuthoringHCPEnabled(boolean value)
				{
					((ims.framework.Control)super.getControl(0)).setEnabled(value);
				}
				public boolean iscustomVipAuthoringHCPEnabled()
				{
					return ((ims.framework.Control)super.getControl(0)).isEnabled();
				}
				public Label lblAction()
				{
					return (Label)super.getControl(1);
				}
				public Label lblVipScore()
				{
					return (Label)super.getControl(2);
				}
				public cmbVipSoreComboBox cmbVipSore()
				{
					return (cmbVipSoreComboBox)super.getComboBox(0);
				}
				public cmbActionComboBox cmbAction()
				{
					return (cmbActionComboBox)super.getComboBox(1);
				}
			}
	
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 216, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Container m_tabDevice = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Invasive Device", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabDeviceContainer m_tabDeviceContainer = (tabDeviceContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabDeviceContainer.class, m_tabDevice, factory);
				super.addContainer(m_tabDevice, m_tabDeviceContainer);
				ims.framework.utils.SizeInfo m_tabDeviceDesignSize = new ims.framework.utils.SizeInfo(816, 216);
				ims.framework.utils.SizeInfo m_tabDeviceRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper30.getWidth(), anchoringHelper30.getHeight());
				m_tabDeviceContainer.setContext(form, appForm, m_tabDevice, loader, form_images_local, contextMenus, startControlID, m_tabDeviceDesignSize, m_tabDeviceRuntimeSize, startTabIndex, skipContextValidation);
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 216, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				Container m_tabVIP = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Visual Phlebitis Scale (VIP)", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
				tabVIPContainer m_tabVIPContainer = (tabVIPContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabVIPContainer.class, m_tabVIP, factory);
				super.addContainer(m_tabVIP, m_tabVIPContainer);
				ims.framework.utils.SizeInfo m_tabVIPDesignSize = new ims.framework.utils.SizeInfo(816, 216);
				ims.framework.utils.SizeInfo m_tabVIPRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper31.getWidth(), anchoringHelper31.getHeight());
				m_tabVIPContainer.setContext(form, appForm, m_tabVIP, loader, form_images_local, contextMenus, startControlID, m_tabVIPDesignSize, m_tabVIPRuntimeSize, startTabIndex, skipContextValidation);
			}
			public void hide()
			{
				tabDevice().setVisible(false);
				tabVIP().setVisible(false);
			}
			public void settabDeviceEnabled(boolean value)
			{
				tabDevice().setEnabled(value);
			}
			public void settabVIPEnabled(boolean value)
			{
				tabVIP().setEnabled(value);
			}
			public void showtabDevice()
			{
				tabVIP().setVisible(false);
				tabDevice().setVisible(true);
			}
			public void showtabVIP()
			{
				tabDevice().setVisible(false);
				tabVIP().setVisible(true);
			}
	
			public tabDeviceContainer tabDevice()
			{
				return (tabDeviceContainer)super.layers.get(0);
			}
			public tabVIPContainer tabVIP()
			{
				return (tabVIPContainer)super.layers.get(1);
			}
		}
		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
	
	
			// Layer Clasess
			lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
			super.addLayer(m_lyrDetailsLayer);
			m_lyrDetailsLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		}
		protected void setCollapsed(boolean value)
		{
			super.container.setCollapsed(value);
		}
		//protected boolean isCollapsed()
		//{
			//return super.container.isCollapsed();
		//}
		protected void setCaption(String value)
		{
			super.container.setCaption(value);
		}
		public lyrDetailsLayer lyrDetails()
		{
			return (lyrDetailsLayer)super.getLayer(0);
		}
	}
	public static class cmbFilterComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(String value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(String value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(String value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(String value)
		{
			return super.control.removeRow(value);
		}
		public String getValue()
		{
			return (String)super.control.getValue();
		}
		public void setValue(String value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getEditedDeviceRecord();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);


		// Container Clasess
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 8, 344, 832, 248, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Container m_ctnDetail = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, "Details", new Boolean(true)});
		addControl(m_ctnDetail);
		ctnDetailContainer ctnDetail = (ctnDetailContainer)ContainerBridgeFlyweightFactory.getInstance().createContainerBridge(ctnDetailContainer.class, m_ctnDetail, factory);
		ims.framework.utils.SizeInfo m_ctnDetailDesignSize = new ims.framework.utils.SizeInfo(832, 248);
		ims.framework.utils.SizeInfo m_ctnDetailRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper32.getWidth(), anchoringHelper32.getHeight());
		ctnDetail.setContext(form, appForm, m_ctnDetail, loader, this.getImages(), contextMenus, startControlID, m_ctnDetailDesignSize, m_ctnDetailRuntimeSize, startTabIndex, skipContextValidation);
		super.addContainer(ctnDetail);

		// Label Controls
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 38, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Filter:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 680, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 3025), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 3028), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 56, 8, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbFilterTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbFilterTemp);
		cmbFilterComboBox cmbFilter = (cmbFilterComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbFilterComboBox.class, m_cmbFilterTemp);
		super.addComboBox(cmbFilter);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 832, 296, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ctnDetailContainer ctnDetail()
	{
		return (ctnDetailContainer)super.getContainer(0);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(2);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(3);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(4);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(5);
	}
	public cmbFilterComboBox cmbFilter()
	{
		return (cmbFilterComboBox)super.getComboBox(0);
	}
	public DynamicGrid dyngrdDisplay()
	{
		return (DynamicGrid)super.getControl(7);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				New = new ImageHelper(102149, "Images/Core/newdoc.gif", new Integer(16), new Integer(16));
				Edit = new ImageHelper(102150, "Images/Core/Edit16.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image New;
			public final ims.framework.utils.Image Edit;
		}
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_EditedDeviceRecord = new ims.framework.ContextVariable("EditedDeviceRecord", prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier + "");
			cxl_EditedVipRecord = new ims.framework.ContextVariable("EditedVipRecord", prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedVipRecord_" + componentIdentifier + "");
		}
		
		public boolean getEditedDeviceRecordIsNotNull()
		{
			return !cxl_EditedDeviceRecord.getValueIsNull(context);
		}
		public ims.nursing.vo.PatientInvasiveDeviceVo getEditedDeviceRecord()
		{
			return (ims.nursing.vo.PatientInvasiveDeviceVo)cxl_EditedDeviceRecord.getValue(context);
		}
		public void setEditedDeviceRecord(ims.nursing.vo.PatientInvasiveDeviceVo value)
		{
			cxl_EditedDeviceRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditedDeviceRecord = null;
		public boolean getEditedVipRecordIsNotNull()
		{
			return !cxl_EditedVipRecord.getValueIsNull(context);
		}
		public ims.nursing.vo.PatientInvasiveDeviceVipVo getEditedVipRecord()
		{
			return (ims.nursing.vo.PatientInvasiveDeviceVipVo)cxl_EditedVipRecord.getValue(context);
		}
		public void setEditedVipRecord(ims.nursing.vo.PatientInvasiveDeviceVipVo value)
		{
			cxl_EditedVipRecord.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_EditedVipRecord = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[89];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-ID", "ID_PatientInvasiveDevice");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-INSERTEDDATETIME", "InsertedDateTime");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-REMOVALDATETIME", "RemovalDateTime");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-TARGETREMOVALDATETIME", "TargetRemovalDateTime");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-SITE", "Site");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-CLINICALCONTACT", "ClinicalContact");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-CARECONTEXT", "CareContext");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-TYPE", "Type");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-SIZE", "Size");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-COMMENT", "Comment");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-REMOVALREASON", "RemovalReason");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-SENTFORCULTURE", "SentForCulture");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedDeviceRecord_" + componentIdentifier, "BO-1072100043-RESULT", "Result");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedVipRecord_" + componentIdentifier, "BO-1072100056-ID", "ID_VIPScore");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedVipRecord_" + componentIdentifier, "BO-1072100056-CLINICALCONTACT", "ClinicalContact");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedVipRecord_" + componentIdentifier, "BO-1072100056-CARECONTEXT", "CareContext");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedVipRecord_" + componentIdentifier, "BO-1072100056-VIPSCALE", "VIPScale");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.InvasiveDevice.__internal_x_context__EditedVipRecord_" + componentIdentifier, "BO-1072100056-ACTION", "Action");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
