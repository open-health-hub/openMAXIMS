//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.painreview;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbSiteComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.nursing.vo.PainAssessmentFindings value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.nursing.vo.PainAssessmentFindings value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.nursing.vo.PainAssessmentFindings value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.nursing.vo.PainAssessmentFindings value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.nursing.vo.PainAssessmentFindings value)
		{
			return super.control.removeRow(value);
		}
		public ims.nursing.vo.PainAssessmentFindings getValue()
		{
			return (ims.nursing.vo.PainAssessmentFindings)super.control.getValue();
		}
		public void setValue(ims.nursing.vo.PainAssessmentFindings value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbAssessmentComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.nursing.vo.PainAssessment value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.nursing.vo.PainAssessment value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.nursing.vo.PainAssessment value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.nursing.vo.PainAssessment value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.nursing.vo.PainAssessment value)
		{
			return super.control.removeRow(value);
		}
		public ims.nursing.vo.PainAssessment getValue()
		{
			return (ims.nursing.vo.PainAssessment)super.control.getValue();
		}
		public void setValue(ims.nursing.vo.PainAssessment value)
		{
			super.control.setValue(value);
		}
	}
	public static class recbrAssessmentRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.CareContextShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.core.vo.CareContextShortVo getValue()
		{
			return (ims.core.vo.CareContextShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.CareContextShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdDetailsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDetailsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumn1ReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumn1ReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumn1Opened()
		{
			super.row.showOpened(0);
		}
		public String getColumn1()
		{
			return (String)super.row.get(0);
		}
		public void setColumn1(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColumn1Tooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumn2ReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumn2ReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumn2Opened()
		{
			super.row.showOpened(1);
		}
		public String getColumn2()
		{
			return (String)super.row.get(1);
		}
		public void setColumn2(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColumn2Tooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumn3ReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumn3ReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumn3Opened()
		{
			super.row.showOpened(2);
		}
		public String getColumn3()
		{
			return (String)super.row.get(2);
		}
		public void setColumn3(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColumn3Tooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColumn4ReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColumn4ReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColumn4Opened()
		{
			super.row.showOpened(3);
		}
		public String getColumn4()
		{
			return (String)super.row.get(3);
		}
		public void setColumn4(String value)
		{
			super.row.set(3, value);
		}
		public void setCellColumn4Tooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColumn5ReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColumn5ReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColumn5Opened()
		{
			super.row.showOpened(4);
		}
		public String getColumn5()
		{
			return (String)super.row.get(4);
		}
		public void setColumn5(String value)
		{
			super.row.set(4, value);
		}
		public void setCellColumn5Tooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDetailsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDetailsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDetailsRow get(int index)
		{
			return new grdDetailsRow(super.collection.get(index));
		}
		public grdDetailsRow newRow()
		{
			return new grdDetailsRow(super.collection.newRow());
		}
		public grdDetailsRow newRow(boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRow(autoSelect));
		}
		public grdDetailsRow newRowAt(int index)
		{
			return new grdDetailsRow(super.collection.newRowAt(index));
		}
		public grdDetailsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDetailsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDetailsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdDetailsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDetailsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDetailsRowCollection getRows()
		{
			return new grdDetailsRowCollection(super.grid.getRows());
		}
		public grdDetailsRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDetailsRow(row);
		}
		public void setColumn1HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumn1HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumn2HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumn2HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumn3HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumn3HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColumn4HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColumn4HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColumn5HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColumn5HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
	}
	public static class grdPainRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdPainRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColPainDetailsReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColPainDetailsReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColPainDetailsOpened()
		{
			super.row.showOpened(0);
		}
		public String getColPainDetails()
		{
			return (String)super.row.get(0);
		}
		public void setColPainDetails(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColPainDetailsTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public String getValue()
		{
			return (String)super.row.getValue();
		}
		public void setValue(String value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdPainRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdPainRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdPainRow get(int index)
		{
			return new grdPainRow(super.collection.get(index));
		}
		public grdPainRow newRow()
		{
			return new grdPainRow(super.collection.newRow());
		}
		public grdPainRow newRow(boolean autoSelect)
		{
			return new grdPainRow(super.collection.newRow(autoSelect));
		}
		public grdPainRow newRowAt(int index)
		{
			return new grdPainRow(super.collection.newRowAt(index));
		}
		public grdPainRow newRowAt(int index, boolean autoSelect)
		{
			return new grdPainRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdPainGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public String[] getValues()
		{
			String[] listOfValues = new String[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public String getValue()
		{
			return (String)super.grid.getValue();
		}
		public void setValue(String value)
		{
			super.grid.setValue(value);
		}
		public grdPainRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdPainRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdPainRowCollection getRows()
		{
			return new grdPainRowCollection(super.grid.getRows());
		}
		public grdPainRow getRowByValue(String value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdPainRow(row);
		}
		public void setColPainDetailsHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColPainDetailsHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}

	public static class FilterRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 112, 24, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "View All", -1);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 24, 88, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "View Active", -1);
		}
		public void setText(FilterEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public FilterEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return FilterEnumeration.None;
				case 0: return FilterEnumeration.rdoAll;
				case 1: return FilterEnumeration.rdoActive;
			}
			return null;
		}
		public void setValue(FilterEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(FilterEnumeration.None.id);
		}
		public boolean isEnabled(FilterEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(FilterEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(FilterEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(FilterEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class FilterEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static FilterEnumeration None = new FilterEnumeration(-1);
		public static FilterEnumeration rdoAll = new FilterEnumeration(0);
		public static FilterEnumeration rdoActive = new FilterEnumeration(1);
		private FilterEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((FilterEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(Integer.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'Integer' of the global context variable 'Core.CurrentClinicalContact.Specialty' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getPainAssessment();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Care Context:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 256, 72, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Findings:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 16, 72, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Assessment:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 680, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "< Previous", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next >", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.UNKNOWN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Review", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 320, 72, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbSiteTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSiteTemp);
		cmbSiteComboBox cmbSite = (cmbSiteComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSiteComboBox.class, m_cmbSiteTemp);
		super.addComboBox(cmbSite);
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 96, 72, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbAssessmentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbAssessmentTemp);
		cmbAssessmentComboBox cmbAssessment = (cmbAssessmentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbAssessmentComboBox.class, m_cmbAssessmentTemp);
		super.addComboBox(cmbAssessment);

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 96, 48, 736, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		RecordBrowser m_recbrAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, null});
		addControl(m_recbrAssessmentTemp);
		recbrAssessmentRecordBrowser recbrAssessment = (recbrAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrAssessmentRecordBrowser.class, m_recbrAssessmentTemp);
		super.addRecordBrowser(recbrAssessment);

		// Grid Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 192, 104, 640, 488, ims.framework.enumerations.ControlAnchoring.ALL);
		Grid m_grdDetailsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdDetailsTemp);
		grdDetailsGrid grdDetails = (grdDetailsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDetailsGrid.class, m_grdDetailsTemp);
		grdDetails.addStringColumn(" ", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn(" ", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn(" ", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn(" ", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdDetails.addStringColumn(" ", 0, 0, 125, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDetails);
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 104, 176, 488, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdPainTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdPainTemp);
		grdPainGrid grdPain = (grdPainGrid)GridFlyweightFactory.getInstance().createGridBridge(grdPainGrid.class, m_grdPainTemp);
		grdPain.addStringColumn("Details", 0, 0, 160, true, true, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdPain);

		// RadioButton Controls
		RadioButton tmpFilter = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpFilter);
		FilterRadioButton Filter = (FilterRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(FilterRadioButton.class, tmpFilter);
		Filter.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(Filter);

		// Link Controls
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 608, 72, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Clinical Notes", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 704, 72, 87, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(-1), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"View Body Chart", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public Label lbl1()
	{
		return (Label)super.getControl(1);
	}
	public Button btnPrevious()
	{
		return (Button)super.getControl(4);
	}
	public Button btnNext()
	{
		return (Button)super.getControl(5);
	}
	public Button btnNew()
	{
		return (Button)super.getControl(6);
	}
	public cmbSiteComboBox cmbSite()
	{
		return (cmbSiteComboBox)super.getComboBox(0);
	}
	public cmbAssessmentComboBox cmbAssessment()
	{
		return (cmbAssessmentComboBox)super.getComboBox(1);
	}
	public recbrAssessmentRecordBrowser recbrAssessment()
	{
		return (recbrAssessmentRecordBrowser)super.getRecordBrowser(0);
	}
	public grdDetailsGrid grdDetails()
	{
		return (grdDetailsGrid)super.getGrid(0);
	}
	public grdPainGrid grdPain()
	{
		return (grdPainGrid)super.getGrid(1);
	}
	public FilterRadioButton Filter()
	{
		return (FilterRadioButton)super.getRadioButton(0);
	}
	public Link lnkClinicalNotes()
	{
		return (Link)super.getControl(13);
	}
	public Link lnkBodyChart()
	{
		return (Link)super.getControl(14);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Nursing = new NursingForms();
		}
		public final class NursingForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingForms()
			{
				PainReviewDialog = new LocalFormName(101170);
				PainBodyChart = new LocalFormName(101168);
				PainReview = new LocalFormName(101169);
				ClinicalNotes = new LocalFormName(101123);
			}
			public final FormName PainReviewDialog;
			public final FormName PainBodyChart;
			public final FormName PainReview;
			public final FormName ClinicalNotes;
		}

		public NursingForms Nursing;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_PainAssessments = new ims.framework.ContextVariable("PainAssessments", prefix + "_lv_Nursing.PainReview.__internal_x_context__PainAssessments_" + componentIdentifier + "");
			cxl_ReviewCollection = new ims.framework.ContextVariable("ReviewCollection", prefix + "_lv_Nursing.PainReview.__internal_x_context__ReviewCollection_" + componentIdentifier + "");
			cxl_CurrentVOIndex = new ims.framework.ContextVariable("CurrentVOIndex", prefix + "_lv_Nursing.PainReview.__internal_x_context__CurrentVOIndex_" + componentIdentifier + "");
			cxl_PainAssessment = new ims.framework.ContextVariable("PainAssessment", prefix + "_lv_Nursing.PainReview.__internal_x_context__PainAssessment_" + componentIdentifier + "");
		}
		
		public boolean getPainAssessmentsIsNotNull()
		{
			return !cxl_PainAssessments.getValueIsNull(context);
		}
		public ims.nursing.vo.PainAssessmentCollection getPainAssessments()
		{
			return (ims.nursing.vo.PainAssessmentCollection)cxl_PainAssessments.getValue(context);
		}
		public void setPainAssessments(ims.nursing.vo.PainAssessmentCollection value)
		{
			cxl_PainAssessments.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PainAssessments = null;
		public boolean getReviewCollectionIsNotNull()
		{
			return !cxl_ReviewCollection.getValueIsNull(context);
		}
		public ims.nursing.vo.PainAssessmentReviewCollection getReviewCollection()
		{
			return (ims.nursing.vo.PainAssessmentReviewCollection)cxl_ReviewCollection.getValue(context);
		}
		public void setReviewCollection(ims.nursing.vo.PainAssessmentReviewCollection value)
		{
			cxl_ReviewCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ReviewCollection = null;
		public boolean getCurrentVOIndexIsNotNull()
		{
			return !cxl_CurrentVOIndex.getValueIsNull(context);
		}
		public Integer getCurrentVOIndex()
		{
			return (Integer)cxl_CurrentVOIndex.getValue(context);
		}
		public void setCurrentVOIndex(Integer value)
		{
			cxl_CurrentVOIndex.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentVOIndex = null;
		public boolean getPainAssessmentIsNotNull()
		{
			return !cxl_PainAssessment.getValueIsNull(context);
		}
		public ims.nursing.vo.PainAssessment getPainAssessment()
		{
			return (ims.nursing.vo.PainAssessment)cxl_PainAssessment.getValue(context);
		}
		public void setPainAssessment(ims.nursing.vo.PainAssessment value)
		{
			cxl_PainAssessment.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PainAssessment = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[107];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssReviewVO", "BO-1016100001-ID", "ID_PainAssessmentReview");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssReviewVO", "BO-1016100001-ASSESSMENTDATETIME", "AssessmentDateTime");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssReviewVO", "BO-1016100001-AUTHORINGDATETIME", "RecordingDateTime");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssReviewVO", "BO-1016100001-SITEDETAILS", "SiteDetails");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssReviewVO", "BO-1016100001-TYPE", "Type");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssReviewVO", "BO-1016100001-SEVERITY", "Severity");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssReviewVO", "BO-1016100001-ONSET", "Onset");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssReviewVO", "BO-1016100001-PROGRESSION", "Progression");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssReviewVO", "BO-1016100001-DEPTH", "Depth");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.ReadOnlyAssessment", "BO-1003100002-ID", "ID_Assessment");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.ReadOnlyAssessment", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.ReadOnlyAssessment", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.ReadOnlyAssessment", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.ReadOnlyAssessment", "BO-1016100000-ASSESSMENTDATETIME", "AssessmentDateTime");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-ID", "ID_PainAssessmentFindings");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-SITEIMAGE", "SiteImage");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-SITENAME", "SiteName");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-PAINHYPERSENSITIVITY", "PainHypersensitivity");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-ISDISCONTINUEDASSESS", "IsDiscontinuedAssess");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-ISCONTINUEDASSESSMENT", "IsContinuedAssessment");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-SITEDETAILS", "SiteDetails");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-TYPE", "Type");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-SEVERITY", "Severity");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-ONSET", "Onset");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-PROGRESSION", "Progression");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.AssessmentFinding", "BO-1016100002-DEPTH", "Depth");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssessmentVO", "BO-1003100002-ID", "ID_Assessment");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssessmentVO", "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssessmentVO", "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssessmentVO", "BO-1003100002-CARECONTEXT", "CareContext");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_COE.PainBodyChart.PainAssessmentVO", "BO-1016100000-ASSESSMENTDATETIME", "AssessmentDateTime");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.PainReview.__internal_x_context__PainAssessment_" + componentIdentifier, "BO-1003100002-ID", "ID_Assessment");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.PainReview.__internal_x_context__PainAssessment_" + componentIdentifier, "BO-1003100002-DATETIMEINITIATED", "DateTimeInitiated");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.PainReview.__internal_x_context__PainAssessment_" + componentIdentifier, "BO-1003100002-CLINICALCONTACT", "ClinicalContact");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.PainReview.__internal_x_context__PainAssessment_" + componentIdentifier, "BO-1003100002-CARECONTEXT", "CareContext");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.PainReview.__internal_x_context__PainAssessment_" + componentIdentifier, "BO-1016100000-ASSESSMENTDATETIME", "AssessmentDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
