//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.nursingadmission;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbPreferredLangComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.nursing.vo.lookups.PreferredLanguage value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.nursing.vo.lookups.PreferredLanguage value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.nursing.vo.lookups.PreferredLanguage value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.nursing.vo.lookups.PreferredLanguage value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.nursing.vo.lookups.PreferredLanguage value)
		{
			return super.control.removeRow(value);
		}
		public ims.nursing.vo.lookups.PreferredLanguage getValue()
		{
			return (ims.nursing.vo.lookups.PreferredLanguage)super.control.getValue();
		}
		public void setValue(ims.nursing.vo.lookups.PreferredLanguage value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbResusStatus2ComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.ResuscitationStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.ResuscitationStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.ResuscitationStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.ResuscitationStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.ResuscitationStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.ResuscitationStatus getValue()
		{
			return (ims.core.vo.lookups.ResuscitationStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.ResuscitationStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdFamilyRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdFamilyRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColNameReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColNameReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColNameOpened()
		{
			super.row.showOpened(0);
		}
		public String getColName()
		{
			return (String)super.row.get(0);
		}
		public void setColName(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColNameTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColRelationshipReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColRelationshipReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColRelationshipOpened()
		{
			super.row.showOpened(1);
		}
		public ims.core.vo.lookups.SupportNetworkRelationship getColRelationship()
		{
			return (ims.core.vo.lookups.SupportNetworkRelationship)super.row.get(1);
		}
		public void setColRelationship(ims.core.vo.lookups.SupportNetworkRelationship value)
		{
			super.row.set(1, value, true);
		}
		public void setCellColRelationshipTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColContactReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColContactReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColContactOpened()
		{
			super.row.showOpened(2);
		}
		public String getColContact()
		{
			return (String)super.row.get(2);
		}
		public void setColContact(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColContactTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColProgressReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColProgressReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColProgressOpened()
		{
			super.row.showOpened(3);
		}
		public ims.core.vo.lookups.YesNo getColProgress()
		{
			return (ims.core.vo.lookups.YesNo)super.row.get(3);
		}
		public void setColProgress(ims.core.vo.lookups.YesNo value)
		{
			super.row.set(3, value, true);
		}
		public void setCellColProgressTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public ims.core.vo.SupportNetworkFamily getValue()
		{
			return (ims.core.vo.SupportNetworkFamily)super.row.getValue();
		}
		public void setValue(ims.core.vo.SupportNetworkFamily value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdFamilyRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdFamilyRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdFamilyRow get(int index)
		{
			return new grdFamilyRow(super.collection.get(index));
		}
		public grdFamilyRow newRow()
		{
			return new grdFamilyRow(super.collection.newRow());
		}
		public grdFamilyRow newRow(boolean autoSelect)
		{
			return new grdFamilyRow(super.collection.newRow(autoSelect));
		}
		public grdFamilyRow newRowAt(int index)
		{
			return new grdFamilyRow(super.collection.newRowAt(index));
		}
		public grdFamilyRow newRowAt(int index, boolean autoSelect)
		{
			return new grdFamilyRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdFamilyGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean canGrow, int maxDropDownItems)
		{
			super.grid.addComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, canGrow, maxDropDownItems);
		}
		private void addAnswerBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int imageHeight, boolean canBeEmpty, boolean canGrow)
		{
			super.grid.addAnswerBoxColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, imageHeight, canBeEmpty, canGrow);
		}
		public void answerBoxColumnClear(int column)
		{
			super.grid.answerBoxColumnClear(column);
		}
		public void answerBoxColumnNewOption(int column, AnswerBoxOption option)
		{
			super.grid.answerBoxColumnNewOption(column, option);
		}
		public ims.core.vo.SupportNetworkFamilyCollection getValues()
		{
			ims.core.vo.SupportNetworkFamilyCollection listOfValues = new ims.core.vo.SupportNetworkFamilyCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.SupportNetworkFamily getValue()
		{
			return (ims.core.vo.SupportNetworkFamily)super.grid.getValue();
		}
		public void setValue(ims.core.vo.SupportNetworkFamily value)
		{
			super.grid.setValue(value);
		}
		public grdFamilyRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdFamilyRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdFamilyRowCollection getRows()
		{
			return new grdFamilyRowCollection(super.grid.getRows());
		}
		public grdFamilyRow getRowByValue(ims.core.vo.SupportNetworkFamily value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdFamilyRow(row);
		}
		public void setColNameHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColNameHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColRelationshipHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColRelationshipHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public GridComboBox ColRelationshipComboBox()
		{
			return new GridComboBox(super.grid, 1);
		}
		public void setColContactHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColContactHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColProgressHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColProgressHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public GridMutableAnswerBox ColProgressAnswerBox()
		{
			return null;//return new GridMutableAnswerBox(super.grid, 3);
		}
	}
	public static class grdDiagnosisRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdDiagnosisRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColDiagnosisReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDiagnosisReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDiagnosisOpened()
		{
			super.row.showOpened(0);
		}
		public String getColDiagnosis()
		{
			return (String)super.row.get(0);
		}
		public void setColDiagnosis(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDiagnosisTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public java.lang.Object getValue()
		{
			return super.row.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdDiagnosisRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdDiagnosisRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdDiagnosisRow get(int index)
		{
			return new grdDiagnosisRow(super.collection.get(index));
		}
		public grdDiagnosisRow newRow()
		{
			return new grdDiagnosisRow(super.collection.newRow());
		}
		public grdDiagnosisRow newRow(boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRow(autoSelect));
		}
		public grdDiagnosisRow newRowAt(int index)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index));
		}
		public grdDiagnosisRow newRowAt(int index, boolean autoSelect)
		{
			return new grdDiagnosisRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdDiagnosisGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public java.lang.Object[] getValues()
		{
			java.lang.Object[] listOfValues = new java.lang.Object[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public java.lang.Object getValue()
		{
			return super.grid.getValue();
		}
		public void setValue(java.lang.Object value)
		{
			super.grid.setValue(value);
		}
		public grdDiagnosisRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdDiagnosisRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdDiagnosisRowCollection getRows()
		{
			return new grdDiagnosisRowCollection(super.grid.getRows());
		}
		public grdDiagnosisRow getRowByValue(java.lang.Object value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdDiagnosisRow(row);
		}
		public void setColDiagnosisHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDiagnosisHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
	}

	public static class ansDiagDiscussedAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNo option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNo getValue()
		{
			return (ims.core.vo.lookups.YesNo)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNo value)
		{
			super.control.setValue(value);
		}
	}

	public static class ansDNRCompleteAnswerBox extends AnswerBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void clear()
		{
			control.clear();
		}
		public java.util.ArrayList getValues()
		{
			return control.getValues();
		}
		public void addOption(ims.core.vo.lookups.YesNo option)
		{
			control.addOption(option);
		}
		public ims.core.vo.lookups.YesNo getValue()
		{
			return (ims.core.vo.lookups.YesNo)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.YesNo value)
		{
			super.control.setValue(value);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.EpisodeofCareShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.EpisodeofCareShortVo' of the global context variable 'Core.EpisodeofCareShort' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getvoAdmissionDetails();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuGenericGrid = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuGenericGridAddItem = factory.createMenuItem(startControlID.intValue() + 1, "New", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridAddItem);
		contextMenus.contextMenuGenericGridUpdateItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridUpdateItem);
		contextMenus.contextMenuGenericGridRemoveItem = factory.createMenuItem(startControlID.intValue() + 3, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridRemoveItem);
		contextMenus.contextMenuGenericGridViewItem = factory.createMenuItem(startControlID.intValue() + 4, "View", true, false, new Integer(102223), false, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridViewItem);
		contextMenus.contextMenuGenericGridMoveUpItem = factory.createMenuItem(startControlID.intValue() + 5, "Move Up", true, false, new Integer(102197), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveUpItem);
		contextMenus.contextMenuGenericGridMoveDownItem = factory.createMenuItem(startControlID.intValue() + 6, "Move Down", true, false, new Integer(102198), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridMoveDownItem);
		contextMenus.contextMenuGenericGridReplaceItem = factory.createMenuItem(startControlID.intValue() + 7, "Replace", true, false, new Integer(102255), true, true);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridReplaceItem);
		contextMenus.contextMenuGenericGridConfirmItem = factory.createMenuItem(startControlID.intValue() + 8, "Confirm", true, false, new Integer(102209), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridConfirmItem);
		contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem = factory.createMenuItem(startControlID.intValue() + 9, "Edit/View ICP action(s)", true, false, new Integer(118107), true, false);
		contextMenus.contextMenuGenericGrid.add(contextMenus.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem);
		form.registerMenu(contextMenus.contextMenuGenericGrid);
		contextMenus.contextMenuAdmissionSummaryMenu = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuAdmissionSummaryMenuVIEWDIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 10, "View Diagnosis", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuAdmissionSummaryMenu.add(contextMenus.contextMenuAdmissionSummaryMenuVIEWDIAGNOSISItem);
		contextMenus.contextMenuAdmissionSummaryMenuVIEWPROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 11, "View Procedure", true, false, new Integer(102223), true, false);
		contextMenus.contextMenuAdmissionSummaryMenu.add(contextMenus.contextMenuAdmissionSummaryMenuVIEWPROCEDUREItem);
		contextMenus.contextMenuAdmissionSummaryMenuNEWDIAGNOSISItem = factory.createMenuItem(startControlID.intValue() + 12, "New Diagnosis", true, false, new Integer(102149), true, false);
		contextMenus.contextMenuAdmissionSummaryMenu.add(contextMenus.contextMenuAdmissionSummaryMenuNEWDIAGNOSISItem);
		contextMenus.contextMenuAdmissionSummaryMenuNEWPROCEDUREItem = factory.createMenuItem(startControlID.intValue() + 13, "New Procedure", true, false, new Integer(102149), true, false);
		contextMenus.contextMenuAdmissionSummaryMenu.add(contextMenus.contextMenuAdmissionSummaryMenuNEWPROCEDUREItem);
		form.registerMenu(contextMenus.contextMenuAdmissionSummaryMenu);


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 16, 272, 352, 224, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,"Reason for Admission", new Integer(2), ""}));
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 0, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Nursing Admission", new Integer(1), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 504, 352, 64, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ims.framework.FormUiLogic m_customControlAuthoringInfoForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper3.getSize(), instance1, startTabIndex.intValue() + 7, skipContextValidation);
		//ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(16), new Integer(504), new Integer(352), new Integer(64), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 7), m_customControlAuthoringInfoForm, instance1 } );
		ims.framework.Control m_customControlAuthoringInfoControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1003),  new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, new Integer(startTabIndex.intValue() + 7), m_customControlAuthoringInfoForm, instance1, Boolean.FALSE } );
		super.addControl(m_customControlAuthoringInfoControl);
		Menu[] menus1 = m_customControlAuthoringInfoForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 384, 64, 207, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "mental health, learning disabilities)", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 384, 146, 121, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Preferred Language:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 384, 48, 440, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Communication needs to be considered ( e.g. deafness, blindness, confusion, ", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 384, 333, 94, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Family Support:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 32, 368, 96, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Nursing/Medical:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 32, 304, 49, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Patient:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 32, 432, 85, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Resus. Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 32, 464, 127, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "DNR form completed:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 195, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Diagnosis discussed with patient:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 1019), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 96, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 1021), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 678, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 757, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 384, 88, 432, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1009), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 128, 368, 224, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 128, 304, 224, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 512, 144, 304, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		ComboBox m_cmbPreferredLangTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1011), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbPreferredLangTemp);
		cmbPreferredLangComboBox cmbPreferredLang = (cmbPreferredLangComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPreferredLangComboBox.class, m_cmbPreferredLangTemp);
		super.addComboBox(cmbPreferredLang);
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 128, 432, 224, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		ComboBox m_cmbResusStatus2Temp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbResusStatus2Temp);
		cmbResusStatus2ComboBox cmbResusStatus2 = (cmbResusStatus2ComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbResusStatus2ComboBox.class, m_cmbResusStatus2Temp);
		super.addComboBox(cmbResusStatus2);

		// Grid Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 384, 352, 432, 224, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdFamilyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 1017), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuGenericGrid, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdFamilyTemp);
		grdFamilyGrid grdFamily = (grdFamilyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdFamilyGrid.class, m_grdFamilyTemp);
		grdFamily.addStringColumn("Name", 0, 0, 120, false, false, 0, 60, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdFamily.addComboBoxColumn("Relationship", 0, 0, 90, false, true, false, false, true, -1);
		grdFamily.addStringColumn("Contact No", 0, 0, 100, false, false, 0, 30, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdFamily.addAnswerBoxColumn("Discuss Progress", 1, 1, -1, false, false, 10, true, true);
		super.addGrid(grdFamily);
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 352, 200, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		Grid m_grdDiagnosisTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuAdmissionSummaryMenu, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdDiagnosisTemp);
		grdDiagnosisGrid grdDiagnosis = (grdDiagnosisGrid)GridFlyweightFactory.getInstance().createGridBridge(grdDiagnosisGrid.class, m_grdDiagnosisTemp);
		grdDiagnosis.addStringColumn("Diagnosis/Procedures", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdDiagnosis);

		// Dynamic Grid Controls
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 384, 176, 432, 144, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 1014), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));

		// AnswerBox Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 216, 40, 24, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		AnswerBox tmpansDiagDiscussed = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
		super.addControl(tmpansDiagDiscussed);
		ansDiagDiscussedAnswerBox ansDiagDiscussed = (ansDiagDiscussedAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansDiagDiscussedAnswerBox.class, tmpansDiagDiscussed);
		super.addAnswerBox(ansDiagDiscussed);
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 160, 464, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		AnswerBox tmpansDNRComplete = (AnswerBox)factory.getControl(AnswerBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "", Boolean.FALSE, Boolean.TRUE, new Integer(10), Boolean.FALSE});
		super.addControl(tmpansDNRComplete);
		ansDNRCompleteAnswerBox ansDNRComplete = (ansDNRCompleteAnswerBox)AnswerBoxBridgeFlyweightFactory.getInstance().createAnswerBoxBridge(ansDNRCompleteAnswerBox.class, tmpansDNRComplete);
		super.addAnswerBox(ansDNRComplete);
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}
	public Panel pnl2()
	{
		return (Panel)super.getControl(0);
	}
	public ims.core.forms.authoringinfo.IComponent customControlAuthoringInfo()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(2)).getLogic();
	}
	public void setcustomControlAuthoringInfoValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(2)).setValueChangedEvent(delegate);
	}
	public void setcustomControlAuthoringInfoVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setVisible(value);
	}
	public boolean iscustomControlAuthoringInfoVisible()
	{
		return ((ims.framework.Control)super.getControl(2)).isVisible();
	}
	public void setcustomControlAuthoringInfoEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(2)).setEnabled(value);
	}
	public boolean iscustomControlAuthoringInfoEnabled()
	{
		return ((ims.framework.Control)super.getControl(2)).isEnabled();
	}
	public Button btnNew()
	{
		return (Button)super.getControl(12);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(13);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(14);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(15);
	}
	public TextBox txtCommunication()
	{
		return (TextBox)super.getControl(16);
	}
	public TextBox txtNursing()
	{
		return (TextBox)super.getControl(17);
	}
	public TextBox txtPatient()
	{
		return (TextBox)super.getControl(18);
	}
	public cmbPreferredLangComboBox cmbPreferredLang()
	{
		return (cmbPreferredLangComboBox)super.getComboBox(0);
	}
	public cmbResusStatus2ComboBox cmbResusStatus2()
	{
		return (cmbResusStatus2ComboBox)super.getComboBox(1);
	}
	public grdFamilyGrid grdFamily()
	{
		return (grdFamilyGrid)super.getGrid(0);
	}
	public grdDiagnosisGrid grdDiagnosis()
	{
		return (grdDiagnosisGrid)super.getGrid(1);
	}
	public DynamicGrid dynQuestions()
	{
		return (DynamicGrid)super.getControl(23);
	}
	public ansDiagDiscussedAnswerBox ansDiagDiscussed()
	{
		return (ansDiagDiscussedAnswerBox)super.getAnswerBox(0);
	}
	public ansDNRCompleteAnswerBox ansDNRComplete()
	{
		return (ansDNRCompleteAnswerBox)super.getAnswerBox(1);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			Clinical = new ClinicalForms();
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				DiagnosisComplications_Dialog = new LocalFormName(123130);
				Procedures_Dialog = new LocalFormName(123134);
			}
			public final FormName DiagnosisComplications_Dialog;
			public final FormName Procedures_Dialog;
		}

		public ClinicalForms Clinical;
	}

	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_voAdmissionDetails = new ims.framework.ContextVariable("voAdmissionDetails", prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier + "");
			cxl_voFamilySupport = new ims.framework.ContextVariable("voFamilySupport", prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier + "");
			cxl_voFamilySupportColl = new ims.framework.ContextVariable("voFamilySupportColl", prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupportColl_" + componentIdentifier + "");
			cxl_voFamilySupportRemovedColl = new ims.framework.ContextVariable("voFamilySupportRemovedColl", prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupportRemovedColl_" + componentIdentifier + "");
		}
		
		public boolean getvoAdmissionDetailsIsNotNull()
		{
			return !cxl_voAdmissionDetails.getValueIsNull(context);
		}
		public ims.nursing.vo.AdmissionDetailsVo getvoAdmissionDetails()
		{
			return (ims.nursing.vo.AdmissionDetailsVo)cxl_voAdmissionDetails.getValue(context);
		}
		public void setvoAdmissionDetails(ims.nursing.vo.AdmissionDetailsVo value)
		{
			cxl_voAdmissionDetails.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voAdmissionDetails = null;
		public boolean getvoFamilySupportIsNotNull()
		{
			return !cxl_voFamilySupport.getValueIsNull(context);
		}
		public ims.core.vo.SupportNetworkFamily getvoFamilySupport()
		{
			return (ims.core.vo.SupportNetworkFamily)cxl_voFamilySupport.getValue(context);
		}
		public void setvoFamilySupport(ims.core.vo.SupportNetworkFamily value)
		{
			cxl_voFamilySupport.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voFamilySupport = null;
		public boolean getvoFamilySupportCollIsNotNull()
		{
			return !cxl_voFamilySupportColl.getValueIsNull(context);
		}
		public ims.core.vo.SupportNetworkFamilyCollection getvoFamilySupportColl()
		{
			return (ims.core.vo.SupportNetworkFamilyCollection)cxl_voFamilySupportColl.getValue(context);
		}
		public void setvoFamilySupportColl(ims.core.vo.SupportNetworkFamilyCollection value)
		{
			cxl_voFamilySupportColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voFamilySupportColl = null;
		public boolean getvoFamilySupportRemovedCollIsNotNull()
		{
			return !cxl_voFamilySupportRemovedColl.getValueIsNull(context);
		}
		public ims.core.vo.SupportNetworkFamilyCollection getvoFamilySupportRemovedColl()
		{
			return (ims.core.vo.SupportNetworkFamilyCollection)cxl_voFamilySupportRemovedColl.getValue(context);
		}
		public void setvoFamilySupportRemovedColl(ims.core.vo.SupportNetworkFamilyCollection value)
		{
			cxl_voFamilySupportRemovedColl.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_voFamilySupportRemovedColl = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class GenericGrid implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int Add = 1;
			public static final int Update = 2;
			public static final int Remove = 3;
			public static final int View = 4;
			public static final int MoveUp = 5;
			public static final int MoveDown = 6;
			public static final int Replace = 7;
			public static final int Confirm = 8;
			public static final int EDIT_VIEW_ICP_ACTIONS = 9;
		}
		public void disableAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setEnabled(false);
			this.contextMenuGenericGridUpdateItem.setEnabled(false);
			this.contextMenuGenericGridRemoveItem.setEnabled(false);
			this.contextMenuGenericGridViewItem.setEnabled(false);
			this.contextMenuGenericGridMoveUpItem.setEnabled(false);
			this.contextMenuGenericGridMoveDownItem.setEnabled(false);
			this.contextMenuGenericGridReplaceItem.setEnabled(false);
			this.contextMenuGenericGridConfirmItem.setEnabled(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setEnabled(false);
		}
		public void hideAllGenericGridMenuItems()
		{
			this.contextMenuGenericGridAddItem.setVisible(false);
			this.contextMenuGenericGridUpdateItem.setVisible(false);
			this.contextMenuGenericGridRemoveItem.setVisible(false);
			this.contextMenuGenericGridViewItem.setVisible(false);
			this.contextMenuGenericGridMoveUpItem.setVisible(false);
			this.contextMenuGenericGridMoveDownItem.setVisible(false);
			this.contextMenuGenericGridReplaceItem.setVisible(false);
			this.contextMenuGenericGridConfirmItem.setVisible(false);
			this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem.setVisible(false);
		}
		private Menu contextMenuGenericGrid;
		public MenuItem getGenericGridAddItem()
		{
			return this.contextMenuGenericGridAddItem;
		}
		private MenuItem contextMenuGenericGridAddItem;
		public MenuItem getGenericGridUpdateItem()
		{
			return this.contextMenuGenericGridUpdateItem;
		}
		private MenuItem contextMenuGenericGridUpdateItem;
		public MenuItem getGenericGridRemoveItem()
		{
			return this.contextMenuGenericGridRemoveItem;
		}
		private MenuItem contextMenuGenericGridRemoveItem;
		public MenuItem getGenericGridViewItem()
		{
			return this.contextMenuGenericGridViewItem;
		}
		private MenuItem contextMenuGenericGridViewItem;
		public MenuItem getGenericGridMoveUpItem()
		{
			return this.contextMenuGenericGridMoveUpItem;
		}
		private MenuItem contextMenuGenericGridMoveUpItem;
		public MenuItem getGenericGridMoveDownItem()
		{
			return this.contextMenuGenericGridMoveDownItem;
		}
		private MenuItem contextMenuGenericGridMoveDownItem;
		public MenuItem getGenericGridReplaceItem()
		{
			return this.contextMenuGenericGridReplaceItem;
		}
		private MenuItem contextMenuGenericGridReplaceItem;
		public MenuItem getGenericGridConfirmItem()
		{
			return this.contextMenuGenericGridConfirmItem;
		}
		private MenuItem contextMenuGenericGridConfirmItem;
		public MenuItem getGenericGridEDIT_VIEW_ICP_ACTIONSItem()
		{
			return this.contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		}
		private MenuItem contextMenuGenericGridEDIT_VIEW_ICP_ACTIONSItem;
		public final class AdmissionSummaryMenu implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int VIEWDIAGNOSIS = 10;
			public static final int VIEWPROCEDURE = 11;
			public static final int NEWDIAGNOSIS = 12;
			public static final int NEWPROCEDURE = 13;
		}
		public void disableAllAdmissionSummaryMenuMenuItems()
		{
			this.contextMenuAdmissionSummaryMenuVIEWDIAGNOSISItem.setEnabled(false);
			this.contextMenuAdmissionSummaryMenuVIEWPROCEDUREItem.setEnabled(false);
			this.contextMenuAdmissionSummaryMenuNEWDIAGNOSISItem.setEnabled(false);
			this.contextMenuAdmissionSummaryMenuNEWPROCEDUREItem.setEnabled(false);
		}
		public void hideAllAdmissionSummaryMenuMenuItems()
		{
			this.contextMenuAdmissionSummaryMenuVIEWDIAGNOSISItem.setVisible(false);
			this.contextMenuAdmissionSummaryMenuVIEWPROCEDUREItem.setVisible(false);
			this.contextMenuAdmissionSummaryMenuNEWDIAGNOSISItem.setVisible(false);
			this.contextMenuAdmissionSummaryMenuNEWPROCEDUREItem.setVisible(false);
		}
		private Menu contextMenuAdmissionSummaryMenu;
		public MenuItem getAdmissionSummaryMenuVIEWDIAGNOSISItem()
		{
			return this.contextMenuAdmissionSummaryMenuVIEWDIAGNOSISItem;
		}
		private MenuItem contextMenuAdmissionSummaryMenuVIEWDIAGNOSISItem;
		public MenuItem getAdmissionSummaryMenuVIEWPROCEDUREItem()
		{
			return this.contextMenuAdmissionSummaryMenuVIEWPROCEDUREItem;
		}
		private MenuItem contextMenuAdmissionSummaryMenuVIEWPROCEDUREItem;
		public MenuItem getAdmissionSummaryMenuNEWDIAGNOSISItem()
		{
			return this.contextMenuAdmissionSummaryMenuNEWDIAGNOSISItem;
		}
		private MenuItem contextMenuAdmissionSummaryMenuNEWDIAGNOSISItem;
		public MenuItem getAdmissionSummaryMenuNEWPROCEDUREItem()
		{
			return this.contextMenuAdmissionSummaryMenuNEWPROCEDUREItem;
		}
		private MenuItem contextMenuAdmissionSummaryMenuNEWPROCEDUREItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[100];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientProcedureFromNursingAdmission", "BO-1003100017-ID", "ID_PatientProcedure");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Clinical.SelectedPatientDiagnosisFromNursingAdmission", "BO-1003100016-ID", "ID_PatientDiagnosis");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier, "BO-1009100010-ID", "ID_AdmissionDetails");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier, "BO-1009100010-CARECONTEXT", "CareContext");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier, "BO-1009100010-CLINICALCONTACT", "ClinicalContact");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier, "BO-1009100010-PATIENTADMREASON", "PatientAdmReason");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier, "BO-1009100010-NURSINGADMREASON", "NursingAdmReason");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier, "BO-1009100010-RESUSSTATUS", "ResusStatus");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier, "BO-1009100010-ISDNRFORMCOMPLETED", "IsDnrFormCompleted");
			fields[80] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier, "BO-1009100010-WASDIAGNOSISDISCUSSED", "WasDiagnosisDiscussed");
			fields[81] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier, "BO-1009100010-COMMUNICATIONNEEDS", "CommunicationNeeds");
			fields[82] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voAdmissionDetails_" + componentIdentifier, "BO-1009100010-PREFERREDLANG", "PreferredLang");
			fields[83] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-ID", "ID_SupportNetworkFamily");
			fields[84] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-CARERNAME", "CarerName");
			fields[85] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-CARERRELATIONSHIP", "CarerRelationship");
			fields[86] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-CARERADDRESS", "CarerAddress");
			fields[87] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-CARERHOMEPHONE", "CarerHomePhone");
			fields[88] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-CARERMOBILEPHONE", "CarerMobilePhone");
			fields[89] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-CARERWORKPHONE", "CarerWorkPhone");
			fields[90] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-CAREREMAIL", "CarerEmail");
			fields[91] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-ISMAINCARER", "IsMainCarer");
			fields[92] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-EMERGENCYCONTACTORDER", "EmergencyContactOrder");
			fields[93] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-ISCURRENTLYACTIVEFAMILYSUPPORT", "IsCurrentlyActiveFamilySupport");
			fields[94] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-DISCUSSPROGRESS", "DiscussProgress");
			fields[95] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-PATIENT", "Patient");
			fields[96] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-FITANDWELL", "FitAndWell");
			fields[97] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-AWARECLIENTPOSITION", "AwareClientPosition");
			fields[98] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-PERMISSIONTOCONTACT", "PermissionToContact");
			fields[99] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.NursingAdmission.__internal_x_context__voFamilySupport_" + componentIdentifier, "BO-1003100005-INACTIVATINGDATETIME", "InactivatingDateTime");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
