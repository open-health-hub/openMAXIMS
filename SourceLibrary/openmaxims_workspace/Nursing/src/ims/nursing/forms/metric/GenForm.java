//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.metric;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class grdMetricsRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdMetricsRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColumnDateTimeReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColumnDateTimeReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColumnDateTimeOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColumnDateTime(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.framework.utils.DateTime getColumnDateTime()
		{
			return (ims.framework.utils.DateTime)super.row.get(0);
		}
		public void setColumnDateTime(ims.framework.utils.DateTime value)
		{
			super.row.set(0, value);
		}
		public void setCellColumnDateTimeTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColumnHcpReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColumnHcpReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColumnHcpOpened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColumnHcp(String value)
		{
			super.row.setTooltip(1, value);
		}
		public ims.core.vo.HcpLiteVo getColumnHcp()
		{
			return (ims.core.vo.HcpLiteVo)super.row.get(1);
		}
		public void setColumnHcp(ims.core.vo.HcpLiteVo value)
		{
			super.row.set(1, value);
		}
		public void setCellColumnHcpTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColumnHEMReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColumnHEMReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColumnHEMOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColumnHEM(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.framework.utils.Image getColumnHEM()
		{
			return (ims.framework.utils.Image)super.row.get(2);
		}
		public void setColumnHEM(ims.framework.utils.Image value)
		{
			super.row.set(2, value);
		}
		public void setCellColumnHEMTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColumnHeightReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColumnHeightReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColumnHeightOpened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColumnHeight(String value)
		{
			super.row.setTooltip(3, value);
		}
		public Float getColumnHeight()
		{
			return (Float)super.row.get(3);
		}
		public void setColumnHeight(Float value)
		{
			super.row.set(3, value);
		}
		public void setCellColumnHeightTooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColumnWEMReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColumnWEMReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColumnWEMOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColumnWEM(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.framework.utils.Image getColumnWEM()
		{
			return (ims.framework.utils.Image)super.row.get(4);
		}
		public void setColumnWEM(ims.framework.utils.Image value)
		{
			super.row.set(4, value);
		}
		public void setCellColumnWEMTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColumnWeightReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColumnWeightReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColumnWeightOpened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColumnWeight(String value)
		{
			super.row.setTooltip(5, value);
		}
		public Float getColumnWeight()
		{
			return (Float)super.row.get(5);
		}
		public void setColumnWeight(Float value)
		{
			super.row.set(5, value);
		}
		public void setCellColumnWeightTooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColumnBMIReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColumnBMIReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColumnBMIOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColumnBMI(String value)
		{
			super.row.setTooltip(6, value);
		}
		public Float getColumnBMI()
		{
			return (Float)super.row.get(6);
		}
		public void setColumnBMI(Float value)
		{
			super.row.set(6, value);
		}
		public void setCellColumnBMITooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColumnSurfaceReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColumnSurfaceReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColumnSurfaceOpened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForColumnSurface(String value)
		{
			super.row.setTooltip(7, value);
		}
		public Float getColumnSurface()
		{
			return (Float)super.row.get(7);
		}
		public void setColumnSurface(Float value)
		{
			super.row.set(7, value);
		}
		public void setCellColumnSurfaceTooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public ims.core.vo.VSMetrics getValue()
		{
			return (ims.core.vo.VSMetrics)super.row.getValue();
		}
		public void setValue(ims.core.vo.VSMetrics value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdMetricsRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdMetricsRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdMetricsRow get(int index)
		{
			return new grdMetricsRow(super.collection.get(index));
		}
		public grdMetricsRow newRow()
		{
			return new grdMetricsRow(super.collection.newRow());
		}
		public grdMetricsRow newRow(boolean autoSelect)
		{
			return new grdMetricsRow(super.collection.newRow(autoSelect));
		}
		public grdMetricsRow newRowAt(int index)
		{
			return new grdMetricsRow(super.collection.newRowAt(index));
		}
		public grdMetricsRow newRowAt(int index, boolean autoSelect)
		{
			return new grdMetricsRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdMetricsGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
		{
			super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
		}
		private void addDecimalColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, int precision, int scale, String validationString, boolean bold, int sortOrder, boolean canGrow)
		{
			super.grid.addDecimalColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, precision, scale, validationString, bold, sortOrder, canGrow);
		}
		public ims.core.vo.VSMetricsCollection getValues()
		{
			ims.core.vo.VSMetricsCollection listOfValues = new ims.core.vo.VSMetricsCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.core.vo.VSMetrics getValue()
		{
			return (ims.core.vo.VSMetrics)super.grid.getValue();
		}
		public void setValue(ims.core.vo.VSMetrics value)
		{
			super.grid.setValue(value);
		}
		public grdMetricsRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdMetricsRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdMetricsRowCollection getRows()
		{
			return new grdMetricsRowCollection(super.grid.getRows());
		}
		public grdMetricsRow getRowByValue(ims.core.vo.VSMetrics value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdMetricsRow(row);
		}
		public void setColumnDateTimeHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColumnDateTimeHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColumnHcpHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColumnHcpHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColumnHEMHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColumnHEMHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColumnHeightHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColumnHeightHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColumnWEMHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColumnWEMHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColumnWeightHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColumnWeightHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColumnBMIHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColumnBMIHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColumnSurfaceHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColumnSurfaceHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
	}

	public static class GroupWRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 304, 504, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(0, anchoringHelper1.getX(), anchoringHelper1.getY(), anchoringHelper1.getWidth(), "Estimated", startTabIndex.intValue() + 20);
			RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 224, 504, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(1, anchoringHelper2.getX(), anchoringHelper2.getY(), anchoringHelper2.getWidth(), "Measured", startTabIndex.intValue() + 19);
		}
		public void setText(GroupWEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupWEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupWEnumeration.None;
				case 0: return GroupWEnumeration.rdoWE;
				case 1: return GroupWEnumeration.rdoWM;
			}
			return null;
		}
		public void setValue(GroupWEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupWEnumeration.None.id);
		}
		public boolean isEnabled(GroupWEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupWEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupWEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupWEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupWEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupWEnumeration None = new GroupWEnumeration(-1);
		public static GroupWEnumeration rdoWE = new GroupWEnumeration(0);
		public static GroupWEnumeration rdoWM = new GroupWEnumeration(1);
		private GroupWEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupWEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupHRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 304, 480, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(0, anchoringHelper3.getX(), anchoringHelper3.getY(), anchoringHelper3.getWidth(), "Estimated", startTabIndex.intValue() + 15);
			RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 224, 480, 72, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
			control.addButton(1, anchoringHelper4.getX(), anchoringHelper4.getY(), anchoringHelper4.getWidth(), "Measured", startTabIndex.intValue() + 13);
		}
		public void setText(GroupHEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupHEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupHEnumeration.None;
				case 0: return GroupHEnumeration.rdoHE;
				case 1: return GroupHEnumeration.rdoHM;
			}
			return null;
		}
		public void setValue(GroupHEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupHEnumeration.None.id);
		}
		public boolean isEnabled(GroupHEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupHEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupHEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupHEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupHEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupHEnumeration None = new GroupHEnumeration(-1);
		public static GroupHEnumeration rdoHE = new GroupHEnumeration(0);
		public static GroupHEnumeration rdoHM = new GroupHEnumeration(1);
		private GroupHEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupHEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return true;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return this.getLocalContext().getSelectedInstance();
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));


		// Panel Controls
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 456, 832, 128, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,"Details", new Integer(2), ""}));

		// Custom Controls
		ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 408, 520, 430, 56, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		ims.framework.FormUiLogic m_ccRecordingForm = loader.loadComponent(102228, appForm, startControlID * 10 + 1000, anchoringHelper6.getSize(), instance1, startTabIndex.intValue() + 21, skipContextValidation);
		//ims.framework.Control m_ccRecordingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(408), new Integer(520), new Integer(430), new Integer(56), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 21), m_ccRecordingForm, instance1 } );
		ims.framework.Control m_ccRecordingControl = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1002),  new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, new Integer(startTabIndex.intValue() + 21), m_ccRecordingForm, instance1, Boolean.FALSE } );
		super.addControl(m_ccRecordingControl);
		Menu[] menus1 = m_ccRecordingForm.getForm().getRegisteredMenus();
		for(int x = 0; x < menus1.length; x++)
		{
			form.registerMenu(menus1[x]);
		}

		// Label Controls
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 386, 434, 92, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Weight Estimated", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 267, 434, 91, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Weight Measured", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 149, 434, 90, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Height Estimated", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 32, 434, 89, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Height Measured", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 216, 255, 52, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "To Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 255, 68, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "From Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 528, 32, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "BMI:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 552, 81, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Surface Area:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 504, 79, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Weight(kgs):", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 480, 79, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Height(cms):", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 1022), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "New", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 88, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 1023), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 688, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 1024), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 765, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 1025), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 384, 502, 0, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 1026), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 384, 478, 0, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// Date Time Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 264, 253, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 72, 253, 128, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DateTimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.TRUE, null}));

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 784, 255, 56, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Height", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 720, 255, 56, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,"Weight", Boolean.TRUE, null}));

		// Grid Controls
		RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 280, 832, 152, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
		Grid m_grdMetricsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.READONLY, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
		addControl(m_grdMetricsTemp);
		grdMetricsGrid grdMetrics = (grdMetricsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdMetricsGrid.class, m_grdMetricsTemp);
		grdMetrics.addStringColumn("Recording Date/Time", 0, 0, 150, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMetrics.addStringColumn("Recording HCP", 0, 0, 290, true, false, 2, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdMetrics.addImageColumn(" ", 0, 0, 25, true, 0);
		grdMetrics.addDecimalColumn("Height", 0, 0, 80, true, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 1, true);
		grdMetrics.addImageColumn(" ", 0, 0, 25, true, 0);
		grdMetrics.addDecimalColumn("Weight", 0, 0, 80, true, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 1, true);
		grdMetrics.addDecimalColumn("BMI", 0, 0, 80, true, true, 10, 2, "The decimal value is invalid. A valid value can have up to 8 digits and up to 2 decimals.", false, 1, true);
		grdMetrics.addDecimalColumn("Surface Area", 0, 0, -1, true, true, 5, 2, "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", false, 1, true);
		super.addGrid(grdMetrics);

		// DecimalBox Controls
		RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 104, 552, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 104, 528, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(-1), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, new Integer(10), new Integer(2), "The decimal value is invalid. A valid value can have up to 8 digits and up to 2 decimals.", null, Boolean.FALSE}));
		RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 104, 504, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.TRUE}));
		RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 104, 480, 100, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(DecimalBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, new Integer(5), new Integer(2), "The decimal value is invalid. A valid value can have up to 3 digits and up to 2 decimals.", null, Boolean.TRUE}));

		// Image Buttons Controls
		RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 440, 248, 30, 30, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, "Reset search criteria and results", Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null}));
		RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 408, 248, 30, 30, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, "Search for metrics", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));

		// RadioButton Controls
		RadioButton tmpGroupW = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE});
		super.addControl(tmpGroupW);
		GroupWRadioButton GroupW = (GroupWRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupWRadioButton.class, tmpGroupW);
		GroupW.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupW);
		RadioButton tmpGroupH = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT,Boolean.FALSE});
		super.addControl(tmpGroupH);
		GroupHRadioButton GroupH = (GroupHRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupHRadioButton.class, tmpGroupH);
		GroupH.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupH);

		// Picture Controls
		RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 364, 434, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.TRUE}));
		RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 245, 434, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.TRUE}));
		RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 127, 434, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.TRUE}));
		RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 434, 16, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Picture.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, Boolean.TRUE}));

		// Graphing Controls
		RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 232, ims.framework.enumerations.ControlAnchoring.ALL);
		super.addControl(factory.getControl(GraphingControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.ALL ,"Weight and Height Graphic", "", new Float(0), new Float(300), new Integer(15), new Integer(6), "Date & Time", "Weight and Height", new Boolean(true), new Boolean(false)}));
	}



	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public ims.core.forms.authoringinfo.IComponent ccRecording()
	{
		return (ims.core.forms.authoringinfo.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(1)).getLogic();
	}
	public void setccRecordingValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
	{
		((CustomComponent)super.getControl(1)).setValueChangedEvent(delegate);
	}
	public void setccRecordingVisible(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setVisible(value);
	}
	public boolean isccRecordingVisible()
	{
		return ((ims.framework.Control)super.getControl(1)).isVisible();
	}
	public void setccRecordingEnabled(boolean value)
	{
		((ims.framework.Control)super.getControl(1)).setEnabled(value);
	}
	public boolean isccRecordingEnabled()
	{
		return ((ims.framework.Control)super.getControl(1)).isEnabled();
	}
	public Button btnNew()
	{
		return (Button)super.getControl(12);
	}
	public Button btnEdit()
	{
		return (Button)super.getControl(13);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(14);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(15);
	}
	public TextBox txtDummyW()
	{
		return (TextBox)super.getControl(16);
	}
	public TextBox txtDummyH()
	{
		return (TextBox)super.getControl(17);
	}
	public DateTimeControl dtimTo()
	{
		return (DateTimeControl)super.getControl(18);
	}
	public DateTimeControl dtimFrom()
	{
		return (DateTimeControl)super.getControl(19);
	}
	public CheckBox chkH()
	{
		return (CheckBox)super.getControl(20);
	}
	public CheckBox chkW()
	{
		return (CheckBox)super.getControl(21);
	}
	public grdMetricsGrid grdMetrics()
	{
		return (grdMetricsGrid)super.getGrid(0);
	}
	public DecimalBox decSurface()
	{
		return (DecimalBox)super.getControl(23);
	}
	public DecimalBox decBMI()
	{
		return (DecimalBox)super.getControl(24);
	}
	public DecimalBox decWeight()
	{
		return (DecimalBox)super.getControl(25);
	}
	public DecimalBox decHeight()
	{
		return (DecimalBox)super.getControl(26);
	}
	public ImageButton imbClear()
	{
		return (ImageButton)super.getControl(27);
	}
	public ImageButton imbSearch()
	{
		return (ImageButton)super.getControl(28);
	}
	public GroupWRadioButton GroupW()
	{
		return (GroupWRadioButton)super.getRadioButton(0);
	}
	public GroupHRadioButton GroupH()
	{
		return (GroupHRadioButton)super.getRadioButton(1);
	}
	public Picture imgWE()
	{
		return (Picture)super.getControl(31);
	}
	public Picture imgWM()
	{
		return (Picture)super.getControl(32);
	}
	public Picture imgHE()
	{
		return (Picture)super.getControl(33);
	}
	public Picture imgHM()
	{
		return (Picture)super.getControl(34);
	}
	public GraphingControl graphingMetric()
	{
		return (GraphingControl)super.getControl(35);
	}

	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			Core = new CoreImages();
			Nursing = new NursingImages();
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				ClearEnabled24 = new ImageHelper(102174, "Images/Core/ClearEnabled_24.png", new Integer(24), new Integer(24));
				ClearDisabled24 = new ImageHelper(102173, "Images/Core/ClearDisabled_24.png", new Integer(24), new Integer(24));
				FindDisabled24 = new ImageHelper(102172, "Images/Core/FindDisabled_24.png", new Integer(24), new Integer(24));
				FindEnabled24 = new ImageHelper(102175, "Images/Core/Find_24.png", new Integer(24), new Integer(24));
			}
			public final ims.framework.utils.Image ClearEnabled24;
			public final ims.framework.utils.Image ClearDisabled24;
			public final ims.framework.utils.Image FindDisabled24;
			public final ims.framework.utils.Image FindEnabled24;
		}
		public final class NursingImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private NursingImages()
			{
				HeightEstimated16 = new ImageHelper(100163, "Images/Nursing/height_estimated.png", new Integer(16), new Integer(16));
				HeightMeasured16 = new ImageHelper(100164, "Images/Nursing/height_measured.png", new Integer(16), new Integer(16));
				WeightEstimated16 = new ImageHelper(100161, "Images/Nursing/weight_estimated.png", new Integer(16), new Integer(16));
				WeightMeasured16 = new ImageHelper(100162, "Images/Nursing/weight_measured.png", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image HeightEstimated16;
			public final ims.framework.utils.Image HeightMeasured16;
			public final ims.framework.utils.Image WeightEstimated16;
			public final ims.framework.utils.Image WeightMeasured16;
		}
		public final CoreImages Core;
		public final NursingImages Nursing;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_SelectedInstance = new ims.framework.ContextVariable("SelectedInstance", prefix + "_lv_Nursing.Metric.__internal_x_context__SelectedInstance_" + componentIdentifier + "");
			cxl_RecordingDateTimeSortOrder = new ims.framework.ContextVariable("RecordingDateTimeSortOrder", prefix + "_lv_Nursing.Metric.__internal_x_context__RecordingDateTimeSortOrder_" + componentIdentifier + "");
			cxl_RecordingHcpSortOrder = new ims.framework.ContextVariable("RecordingHcpSortOrder", prefix + "_lv_Nursing.Metric.__internal_x_context__RecordingHcpSortOrder_" + componentIdentifier + "");
		}
		
		public boolean getSelectedInstanceIsNotNull()
		{
			return !cxl_SelectedInstance.getValueIsNull(context);
		}
		public ims.core.vo.VSMetrics getSelectedInstance()
		{
			return (ims.core.vo.VSMetrics)cxl_SelectedInstance.getValue(context);
		}
		public void setSelectedInstance(ims.core.vo.VSMetrics value)
		{
			cxl_SelectedInstance.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInstance = null;
		public boolean getRecordingDateTimeSortOrderIsNotNull()
		{
			return !cxl_RecordingDateTimeSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getRecordingDateTimeSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_RecordingDateTimeSortOrder.getValue(context);
		}
		public void setRecordingDateTimeSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_RecordingDateTimeSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RecordingDateTimeSortOrder = null;
		public boolean getRecordingHcpSortOrderIsNotNull()
		{
			return !cxl_RecordingHcpSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getRecordingHcpSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_RecordingHcpSortOrder.getValue(context);
		}
		public void setRecordingHcpSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_RecordingHcpSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RecordingHcpSortOrder = null;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[80];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.Metric.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1022100011-ID", "ID_Metrics");
			fields[72] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.Metric.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1022100011-HEIGHTVALUE", "HeightValue");
			fields[73] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.Metric.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1022100011-HEIGHTESTIMATEDMEASURED", "HeightEstimatedMeasured");
			fields[74] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.Metric.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1022100011-WEIGHTVALUE", "WeightValue");
			fields[75] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.Metric.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1022100011-WEIGHTESTIMATEDMEASURED", "WeightEstimatedMeasured");
			fields[76] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.Metric.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1022100011-BMI", "BMI");
			fields[77] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.Metric.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1022100011-SURFACEAREA", "SurfaceArea");
			fields[78] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.Metric.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1022100011-NECKSIZE", "NeckSize");
			fields[79] = new ims.framework.ReportField(this.context, prefix + "_lv_Nursing.Metric.__internal_x_context__SelectedInstance_" + componentIdentifier, "BO-1022100011-PATIENT", "Patient");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
