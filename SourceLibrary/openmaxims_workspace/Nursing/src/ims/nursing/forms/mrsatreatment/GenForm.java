//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.mrsatreatment;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class cmbScreeningRecordsComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.nursing.vo.MRSAAssessmentVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.nursing.vo.MRSAAssessmentVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.nursing.vo.MRSAAssessmentVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.nursing.vo.MRSAAssessmentVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.nursing.vo.MRSAAssessmentVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.nursing.vo.MRSAAssessmentVo getValue()
		{
			return (ims.nursing.vo.MRSAAssessmentVo)super.control.getValue();
		}
		public void setValue(ims.nursing.vo.MRSAAssessmentVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class recbrAssessmentRecordBrowser extends RecordBrowserBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.CareContextShortVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text)
		{
			super.control.newRow(index, value, text);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(index, value, text, image);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, textColor);
		}
		public void newRow(int index, ims.core.vo.CareContextShortVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(index, value, text, image, textColor);
		}
		public ims.core.vo.CareContextShortVo getValue()
		{
			return (ims.core.vo.CareContextShortVo)super.control.getValue();
		}
		public void setValue(ims.core.vo.CareContextShortVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class grdScreeningRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdScreeningRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setIsParentRow(boolean value)
		{
			super.setIsParentRow(value);
		}
		public boolean isParentRow()
		{
			return super.isParentRow();
		}
		public void setExpanded(boolean value)
		{
			super.setExpanded(value);
		}
		public boolean isExpanded()
		{
			return super.isExpanded();
		}
		public void setColDateScreeningReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColDateScreeningReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColDateScreeningOpened()
		{
			super.row.showOpened(0);
		}
		public String getColDateScreening()
		{
			return (String)super.row.get(0);
		}
		public void setColDateScreening(String value)
		{
			super.row.set(0, value);
		}
		public void setCellColDateScreeningTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDateResultReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDateResultReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDateResultOpened()
		{
			super.row.showOpened(1);
		}
		public String getColDateResult()
		{
			return (String)super.row.get(1);
		}
		public void setColDateResult(String value)
		{
			super.row.set(1, value);
		}
		public void setCellColDateResultTooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColResultReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColResultReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColResultOpened()
		{
			super.row.showOpened(2);
		}
		public String getColResult()
		{
			return (String)super.row.get(2);
		}
		public void setColResult(String value)
		{
			super.row.set(2, value);
		}
		public void setCellColResultTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.row.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.row.setValue(value);
		}
		public grdScreeningRow getParentRow()
		{
			return super.row.getParent() == null ? null : new grdScreeningRow(super.row.getParent());
		}
		public grdScreeningRowCollection getRows()
		{
			if(this.collection == null)
				this.collection = new grdScreeningRowCollection(super.row.getRows());
			return this.collection;
		}
		private grdScreeningRowCollection collection;
	}
	public static class grdScreeningRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdScreeningRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdScreeningRow get(int index)
		{
			return new grdScreeningRow(super.collection.get(index));
		}
		public grdScreeningRow newRow()
		{
			return new grdScreeningRow(super.collection.newRow());
		}
		public grdScreeningRow newRow(boolean autoSelect)
		{
			return new grdScreeningRow(super.collection.newRow(autoSelect));
		}
		public grdScreeningRow newRowAt(int index)
		{
			return new grdScreeningRow(super.collection.newRowAt(index));
		}
		public grdScreeningRow newRowAt(int index, boolean autoSelect)
		{
			return new grdScreeningRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdScreeningGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		public GenForm.grdScreeningRow[] getAllRows()
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdScreeningRow row = getRows().get(x);
				rows.add(row);
				GenForm.grdScreeningRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdScreeningRow[] result = new GenForm.grdScreeningRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdScreeningRow)rows.get(x);
			}
			return result;
		}
		public GenForm.grdScreeningRow[] getAllRows(GenForm.grdScreeningRow parentRow)
		{
			java.util.ArrayList rows = new java.util.ArrayList();
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdScreeningRow row = parentRow.getRows().get(x);
				rows.add(row);
				GenForm.grdScreeningRow[] childRows = getAllRows(row);
				for(int i = 0; i < childRows.length; i++)
				{
					rows.add(childRows[i]);
				}
			}
			GenForm.grdScreeningRow[] result = new GenForm.grdScreeningRow[rows.size()];
			for(int x = 0; x < rows.size(); x++)
			{
				result[x] = (GenForm.grdScreeningRow)rows.get(x);
			}
			return result;
		}
		public void expandAll()
		{
			expandCollapseAll(true);
		}
		public void collapseAll()
		{
			expandCollapseAll(false);
		}
		private void expandCollapseAll(boolean expand)
		{
			for(int x = 0; x < getRows().size(); x++)
			{
				GenForm.grdScreeningRow row = getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void expandCollapseRow(GenForm.grdScreeningRow parentRow, boolean expand)
		{
			for(int x = 0; x < parentRow.getRows().size(); x++)
			{
				GenForm.grdScreeningRow row = parentRow.getRows().get(x);
				row.setExpanded(expand);
				expandCollapseRow(row, expand);
			}
		}
		private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
		{
			super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
		}
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		public ims.vo.ValueObject[] getValues()
		{
			ims.vo.ValueObject[] listOfValues = new ims.vo.ValueObject[this.getRows().size()];
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues[x] = this.getRows().get(x).getValue();
			}
			return listOfValues;
		}
		public ims.vo.ValueObject getValue()
		{
			return (ims.vo.ValueObject)super.grid.getValue();
		}
		public void setValue(ims.vo.ValueObject value)
		{
			super.grid.setValue(value);
		}
		public grdScreeningRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdScreeningRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdScreeningRowCollection getRows()
		{
			return new grdScreeningRowCollection(super.grid.getRows());
		}
		public grdScreeningRow getRowByValue(ims.vo.ValueObject value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdScreeningRow(row);
		}
		public void setColDateScreeningHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColDateScreeningHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDateResultHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDateResultHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColResultHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColResultHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
	}
	public static class grdEditRow extends GridRowBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected grdEditRow(GridRow row)
		{
			super(row);
		}
		public void showOpened(int column)
		{
			super.row.showOpened(column);
		}
		public void setColTreatmentReadOnly(boolean value)
		{
			super.row.setReadOnly(0, value);
		}
		public boolean isColTreatmentReadOnly()
		{
			return super.row.isReadOnly(0);
		}
		public void showColTreatmentOpened()
		{
			super.row.showOpened(0);
		}
		public void setTooltipForColTreatment(String value)
		{
			super.row.setTooltip(0, value);
		}
		public ims.nursing.vo.lookups.MRSATreatment getColTreatment()
		{
			return (ims.nursing.vo.lookups.MRSATreatment)super.row.get(0);
		}
		public void setColTreatment(ims.nursing.vo.lookups.MRSATreatment value)
		{
			super.row.set(0, value);
		}
		public void setCellColTreatmentTooltip(String value)
		{
			super.row.setTooltip(0, value);
		}
		public void setColDay1ReadOnly(boolean value)
		{
			super.row.setReadOnly(1, value);
		}
		public boolean isColDay1ReadOnly()
		{
			return super.row.isReadOnly(1);
		}
		public void showColDay1Opened()
		{
			super.row.showOpened(1);
		}
		public void setTooltipForColDay1(String value)
		{
			super.row.setTooltip(1, value);
		}
		public boolean getColDay1()
		{
			return ((Boolean)super.row.get(1)).booleanValue();
		}
		public void setColDay1(boolean value)
		{
			super.row.set(1, new Boolean(value));
		}
		public void setCellColDay1Tooltip(String value)
		{
			super.row.setTooltip(1, value);
		}
		public void setColDay1_ValueReadOnly(boolean value)
		{
			super.row.setReadOnly(2, value);
		}
		public boolean isColDay1_ValueReadOnly()
		{
			return super.row.isReadOnly(2);
		}
		public void showColDay1_ValueOpened()
		{
			super.row.showOpened(2);
		}
		public void setTooltipForColDay1_Value(String value)
		{
			super.row.setTooltip(2, value);
		}
		public ims.nursing.vo.MRSADailyTreatmentVo getColDay1_Value()
		{
			return (ims.nursing.vo.MRSADailyTreatmentVo)super.row.get(2);
		}
		public void setColDay1_Value(ims.nursing.vo.MRSADailyTreatmentVo value)
		{
			super.row.set(2, value);
		}
		public void setCellColDay1_ValueTooltip(String value)
		{
			super.row.setTooltip(2, value);
		}
		public void setColDay2ReadOnly(boolean value)
		{
			super.row.setReadOnly(3, value);
		}
		public boolean isColDay2ReadOnly()
		{
			return super.row.isReadOnly(3);
		}
		public void showColDay2Opened()
		{
			super.row.showOpened(3);
		}
		public void setTooltipForColDay2(String value)
		{
			super.row.setTooltip(3, value);
		}
		public boolean getColDay2()
		{
			return ((Boolean)super.row.get(3)).booleanValue();
		}
		public void setColDay2(boolean value)
		{
			super.row.set(3, new Boolean(value));
		}
		public void setCellColDay2Tooltip(String value)
		{
			super.row.setTooltip(3, value);
		}
		public void setColDay2_ValueReadOnly(boolean value)
		{
			super.row.setReadOnly(4, value);
		}
		public boolean isColDay2_ValueReadOnly()
		{
			return super.row.isReadOnly(4);
		}
		public void showColDay2_ValueOpened()
		{
			super.row.showOpened(4);
		}
		public void setTooltipForColDay2_Value(String value)
		{
			super.row.setTooltip(4, value);
		}
		public ims.nursing.vo.MRSADailyTreatmentVo getColDay2_Value()
		{
			return (ims.nursing.vo.MRSADailyTreatmentVo)super.row.get(4);
		}
		public void setColDay2_Value(ims.nursing.vo.MRSADailyTreatmentVo value)
		{
			super.row.set(4, value);
		}
		public void setCellColDay2_ValueTooltip(String value)
		{
			super.row.setTooltip(4, value);
		}
		public void setColDay3ReadOnly(boolean value)
		{
			super.row.setReadOnly(5, value);
		}
		public boolean isColDay3ReadOnly()
		{
			return super.row.isReadOnly(5);
		}
		public void showColDay3Opened()
		{
			super.row.showOpened(5);
		}
		public void setTooltipForColDay3(String value)
		{
			super.row.setTooltip(5, value);
		}
		public boolean getColDay3()
		{
			return ((Boolean)super.row.get(5)).booleanValue();
		}
		public void setColDay3(boolean value)
		{
			super.row.set(5, new Boolean(value));
		}
		public void setCellColDay3Tooltip(String value)
		{
			super.row.setTooltip(5, value);
		}
		public void setColDay3_ValueReadOnly(boolean value)
		{
			super.row.setReadOnly(6, value);
		}
		public boolean isColDay3_ValueReadOnly()
		{
			return super.row.isReadOnly(6);
		}
		public void showColDay3_ValueOpened()
		{
			super.row.showOpened(6);
		}
		public void setTooltipForColDay3_Value(String value)
		{
			super.row.setTooltip(6, value);
		}
		public ims.nursing.vo.MRSADailyTreatmentVo getColDay3_Value()
		{
			return (ims.nursing.vo.MRSADailyTreatmentVo)super.row.get(6);
		}
		public void setColDay3_Value(ims.nursing.vo.MRSADailyTreatmentVo value)
		{
			super.row.set(6, value);
		}
		public void setCellColDay3_ValueTooltip(String value)
		{
			super.row.setTooltip(6, value);
		}
		public void setColDay4ReadOnly(boolean value)
		{
			super.row.setReadOnly(7, value);
		}
		public boolean isColDay4ReadOnly()
		{
			return super.row.isReadOnly(7);
		}
		public void showColDay4Opened()
		{
			super.row.showOpened(7);
		}
		public void setTooltipForColDay4(String value)
		{
			super.row.setTooltip(7, value);
		}
		public boolean getColDay4()
		{
			return ((Boolean)super.row.get(7)).booleanValue();
		}
		public void setColDay4(boolean value)
		{
			super.row.set(7, new Boolean(value));
		}
		public void setCellColDay4Tooltip(String value)
		{
			super.row.setTooltip(7, value);
		}
		public void setColDay4_ValueReadOnly(boolean value)
		{
			super.row.setReadOnly(8, value);
		}
		public boolean isColDay4_ValueReadOnly()
		{
			return super.row.isReadOnly(8);
		}
		public void showColDay4_ValueOpened()
		{
			super.row.showOpened(8);
		}
		public void setTooltipForColDay4_Value(String value)
		{
			super.row.setTooltip(8, value);
		}
		public ims.nursing.vo.MRSADailyTreatmentVo getColDay4_Value()
		{
			return (ims.nursing.vo.MRSADailyTreatmentVo)super.row.get(8);
		}
		public void setColDay4_Value(ims.nursing.vo.MRSADailyTreatmentVo value)
		{
			super.row.set(8, value);
		}
		public void setCellColDay4_ValueTooltip(String value)
		{
			super.row.setTooltip(8, value);
		}
		public void setColDay5ReadOnly(boolean value)
		{
			super.row.setReadOnly(9, value);
		}
		public boolean isColDay5ReadOnly()
		{
			return super.row.isReadOnly(9);
		}
		public void showColDay5Opened()
		{
			super.row.showOpened(9);
		}
		public void setTooltipForColDay5(String value)
		{
			super.row.setTooltip(9, value);
		}
		public boolean getColDay5()
		{
			return ((Boolean)super.row.get(9)).booleanValue();
		}
		public void setColDay5(boolean value)
		{
			super.row.set(9, new Boolean(value));
		}
		public void setCellColDay5Tooltip(String value)
		{
			super.row.setTooltip(9, value);
		}
		public void setColDay5_ValueReadOnly(boolean value)
		{
			super.row.setReadOnly(10, value);
		}
		public boolean isColDay5_ValueReadOnly()
		{
			return super.row.isReadOnly(10);
		}
		public void showColDay5_ValueOpened()
		{
			super.row.showOpened(10);
		}
		public void setTooltipForColDay5_Value(String value)
		{
			super.row.setTooltip(10, value);
		}
		public ims.nursing.vo.MRSADailyTreatmentVo getColDay5_Value()
		{
			return (ims.nursing.vo.MRSADailyTreatmentVo)super.row.get(10);
		}
		public void setColDay5_Value(ims.nursing.vo.MRSADailyTreatmentVo value)
		{
			super.row.set(10, value);
		}
		public void setCellColDay5_ValueTooltip(String value)
		{
			super.row.setTooltip(10, value);
		}
		public void setColDay6ReadOnly(boolean value)
		{
			super.row.setReadOnly(11, value);
		}
		public boolean isColDay6ReadOnly()
		{
			return super.row.isReadOnly(11);
		}
		public void showColDay6Opened()
		{
			super.row.showOpened(11);
		}
		public void setTooltipForColDay6(String value)
		{
			super.row.setTooltip(11, value);
		}
		public String getColDay6()
		{
			return (String)super.row.get(11);
		}
		public void setColDay6(String value)
		{
			super.row.set(11, value);
		}
		public void setCellColDay6Tooltip(String value)
		{
			super.row.setTooltip(11, value);
		}
		public void setColDay7ReadOnly(boolean value)
		{
			super.row.setReadOnly(12, value);
		}
		public boolean isColDay7ReadOnly()
		{
			return super.row.isReadOnly(12);
		}
		public void showColDay7Opened()
		{
			super.row.showOpened(12);
		}
		public void setTooltipForColDay7(String value)
		{
			super.row.setTooltip(12, value);
		}
		public String getColDay7()
		{
			return (String)super.row.get(12);
		}
		public void setColDay7(String value)
		{
			super.row.set(12, value);
		}
		public void setCellColDay7Tooltip(String value)
		{
			super.row.setTooltip(12, value);
		}
		public void setColDay8ReadOnly(boolean value)
		{
			super.row.setReadOnly(13, value);
		}
		public boolean isColDay8ReadOnly()
		{
			return super.row.isReadOnly(13);
		}
		public void showColDay8Opened()
		{
			super.row.showOpened(13);
		}
		public void setTooltipForColDay8(String value)
		{
			super.row.setTooltip(13, value);
		}
		public String getColDay8()
		{
			return (String)super.row.get(13);
		}
		public void setColDay8(String value)
		{
			super.row.set(13, value);
		}
		public void setCellColDay8Tooltip(String value)
		{
			super.row.setTooltip(13, value);
		}
		public ims.nursing.vo.MRSATreatmentDetailsVo getValue()
		{
			return (ims.nursing.vo.MRSATreatmentDetailsVo)super.row.getValue();
		}
		public void setValue(ims.nursing.vo.MRSATreatmentDetailsVo value)
		{
			super.row.setValue(value);
		}
	}
	public static class grdEditRowCollection extends GridRowCollectionBridge
	{
		private static final long serialVersionUID = 1L;
		
		private grdEditRowCollection(GridRowCollection collection)
		{
			super(collection);
		}
		public grdEditRow get(int index)
		{
			return new grdEditRow(super.collection.get(index));
		}
		public grdEditRow newRow()
		{
			return new grdEditRow(super.collection.newRow());
		}
		public grdEditRow newRow(boolean autoSelect)
		{
			return new grdEditRow(super.collection.newRow(autoSelect));
		}
		public grdEditRow newRowAt(int index)
		{
			return new grdEditRow(super.collection.newRowAt(index));
		}
		public grdEditRow newRowAt(int index, boolean autoSelect)
		{
			return new grdEditRow(super.collection.newRowAt(index, autoSelect));
		}
	}
	public static class grdEditGrid extends GridBridge
	{
		private static final long serialVersionUID = 1L;
		
		private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
		{
			super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
		}
		private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
		{
			super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
		}
		public ims.nursing.vo.MRSATreatmentDetailsVoCollection getValues()
		{
			ims.nursing.vo.MRSATreatmentDetailsVoCollection listOfValues = new ims.nursing.vo.MRSATreatmentDetailsVoCollection();
			for(int x = 0; x < this.getRows().size(); x++)
			{
				listOfValues.add(this.getRows().get(x).getValue());
			}
			return listOfValues;
		}
		public ims.nursing.vo.MRSATreatmentDetailsVo getValue()
		{
			return (ims.nursing.vo.MRSATreatmentDetailsVo)super.grid.getValue();
		}
		public void setValue(ims.nursing.vo.MRSATreatmentDetailsVo value)
		{
			super.grid.setValue(value);
		}
		public grdEditRow getSelectedRow()
		{
			return super.grid.getSelectedRow() == null ? null : new grdEditRow(super.grid.getSelectedRow());
		}
		public int getSelectedRowIndex()
		{
			return super.grid.getSelectedRowIndex();
		}
		public grdEditRowCollection getRows()
		{
			return new grdEditRowCollection(super.grid.getRows());
		}
		public grdEditRow getRowByValue(ims.nursing.vo.MRSATreatmentDetailsVo value)
		{
			GridRow row = super.grid.getRowByValue(value);
			return row == null?null:new grdEditRow(row);
		}
		public void setColTreatmentHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(0, value);
		}
		public String getColTreatmentHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(0);
		}
		public void setColDay1HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(1, value);
		}
		public String getColDay1HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(1);
		}
		public void setColDay1_ValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(2, value);
		}
		public String getColDay1_ValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(2);
		}
		public void setColDay2HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(3, value);
		}
		public String getColDay2HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(3);
		}
		public void setColDay2_ValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(4, value);
		}
		public String getColDay2_ValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(4);
		}
		public void setColDay3HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(5, value);
		}
		public String getColDay3HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(5);
		}
		public void setColDay3_ValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(6, value);
		}
		public String getColDay3_ValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(6);
		}
		public void setColDay4HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(7, value);
		}
		public String getColDay4HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(7);
		}
		public void setColDay4_ValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(8, value);
		}
		public String getColDay4_ValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(8);
		}
		public void setColDay5HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(9, value);
		}
		public String getColDay5HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(9);
		}
		public void setColDay5_ValueHeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(10, value);
		}
		public String getColDay5_ValueHeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(10);
		}
		public void setColDay6HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(11, value);
		}
		public String getColDay6HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(11);
		}
		public void setColDay7HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(12, value);
		}
		public String getColDay7HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(12);
		}
		public void setColDay8HeaderTooltip(String value)
		{
			super.grid.setColumnHeaderTooltip(13, value);
		}
		public String getColDay8HeaderTooltip()
		{
			return super.grid.getColumnHeaderTooltip(13);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.CurrentCareContext", "_cvp_Core.CurrentCareContext").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.CurrentCareContext' is not available.");
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));


		// Panel Controls
		RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 832, 32, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Panel.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"", new Integer(1), ""}));

		// Label Controls
		RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 82, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Care Context:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 720, 368, 8, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, " ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 568, 368, 8, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, " ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 648, 368, 8, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, " ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 248, 368, 8, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, " ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 328, 368, 8, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, " ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 408, 368, 8, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, " ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 488, 368, 8, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, " ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 168, 368, 8, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT, " ", new Integer(0), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 272, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tx Number:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Screening Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 320, 91, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Rescreen Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 296, 84, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Tx Start Date:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 368, 35, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Date:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Update", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 757, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 680, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Date Controls
		RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 120, 296, 160, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 120, 320, 160, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 120, 64, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbScreeningRecordsTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbScreeningRecordsTemp);
		cmbScreeningRecordsComboBox cmbScreeningRecords = (cmbScreeningRecordsComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbScreeningRecordsComboBox.class, m_cmbScreeningRecordsTemp);
		super.addComboBox(cmbScreeningRecords);

		// RecordBrowser Controls
		RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 120, 40, 224, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		RecordBrowser m_recbrAssessmentTemp = (RecordBrowser)factory.getControl(RecordBrowser.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(-1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT, null});
		addControl(m_recbrAssessmentTemp);
		recbrAssessmentRecordBrowser recbrAssessment = (recbrAssessmentRecordBrowser)RecordBrowserFlyweightFactory.getInstance().createRecordBrowserBridge(recbrAssessmentRecordBrowser.class, m_recbrAssessmentTemp);
		super.addRecordBrowser(recbrAssessment);

		// Grid Controls
		RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 16, 96, 816, 160, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdScreeningTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(-1), ControlState.READONLY, ControlState.READONLY, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdScreeningTemp);
		grdScreeningGrid grdScreening = (grdScreeningGrid)GridFlyweightFactory.getInstance().createGridBridge(grdScreeningGrid.class, m_grdScreeningTemp);
		grdScreening.addTreeColumn("Date Screening / Sites", 0, 220, false, true);
		grdScreening.addStringColumn("Date Result", 0, 0, 220, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdScreening.addStringColumn("Result", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdScreening);
		RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 16, 392, 816, 192, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		Grid m_grdEditTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, Boolean.FALSE, new Integer(24), Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.TRUE, Boolean.TRUE});
		addControl(m_grdEditTemp);
		grdEditGrid grdEdit = (grdEditGrid)GridFlyweightFactory.getInstance().createGridBridge(grdEditGrid.class, m_grdEditTemp);
		grdEdit.addStringColumn(" Treatment", 0, 0, 135, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEdit.addBoolColumn("Day 1", 1, 1, 80, false, false, 0, false);
		grdEdit.addStringColumn("Column Header", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEdit.addBoolColumn("Day 2", 1, 1, 80, false, false, 0, false);
		grdEdit.addStringColumn("Column Header", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEdit.addBoolColumn("Day 3", 1, 1, 80, false, false, 0, false);
		grdEdit.addStringColumn("Column Header", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEdit.addBoolColumn("Day 4", 1, 1, 80, false, false, 0, false);
		grdEdit.addStringColumn("Column Header", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEdit.addBoolColumn("Day 5", 1, 1, 80, false, false, 0, false);
		grdEdit.addStringColumn("Column Header", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEdit.addStringColumn("Day 6", 1, 1, 80, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEdit.addStringColumn("Day 7", 1, 1, 80, true, false, 0, 0, false, ims.framework.enumerations.CharacterCasing.NORMAL);
		grdEdit.addStringColumn("Day 8", 1, 1, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
		super.addGrid(grdEdit);

		// IntBox Controls
		RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 120, 272, 160, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));

		// Horizontal Line Controls
		RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 16, 352, 816, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
		super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
	}


	public Label lblDay8()
	{
		return (Label)super.getControl(2);
	}
	public Label lblDay6()
	{
		return (Label)super.getControl(3);
	}
	public Label lblDay7()
	{
		return (Label)super.getControl(4);
	}
	public Label lblDay2()
	{
		return (Label)super.getControl(5);
	}
	public Label lblDay3()
	{
		return (Label)super.getControl(6);
	}
	public Label lblDay4()
	{
		return (Label)super.getControl(7);
	}
	public Label lblDay5()
	{
		return (Label)super.getControl(8);
	}
	public Label lblDay1()
	{
		return (Label)super.getControl(9);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(15);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(16);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(17);
	}
	public DateControl dteStart()
	{
		return (DateControl)super.getControl(18);
	}
	public DateControl dteRescreen()
	{
		return (DateControl)super.getControl(19);
	}
	public cmbScreeningRecordsComboBox cmbScreeningRecords()
	{
		return (cmbScreeningRecordsComboBox)super.getComboBox(0);
	}
	public recbrAssessmentRecordBrowser recbrAssessment()
	{
		return (recbrAssessmentRecordBrowser)super.getRecordBrowser(0);
	}
	public grdScreeningGrid grdScreening()
	{
		return (grdScreeningGrid)super.getGrid(0);
	}
	public grdEditGrid grdEdit()
	{
		return (grdEditGrid)super.getGrid(1);
	}
	public IntBox intTreatmentNumber()
	{
		return (IntBox)super.getControl(24);
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[71];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
