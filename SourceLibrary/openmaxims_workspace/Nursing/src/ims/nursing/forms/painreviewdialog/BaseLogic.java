//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.nursing.forms.painreviewdialog;

public abstract class BaseLogic extends Handlers
{
	public final Class getDomainInterface() throws ClassNotFoundException
	{
		return ims.domain.DomainInterface.class;
	}
	public final void setContext(ims.framework.UIEngine engine, GenForm form, ims.domain.DomainInterface domain)
	{
		setContext(engine, form);
		this.domain = domain;
	}
	protected final void oncmbDepthValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbDepth().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.PainDepth existingInstance = (ims.nursing.vo.lookups.PainDepth)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbDepthLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.PainDepth)
		{
			ims.nursing.vo.lookups.PainDepth instance = (ims.nursing.vo.lookups.PainDepth)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbDepthLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.PainDepth existingInstance = (ims.nursing.vo.lookups.PainDepth)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbDepth().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbDepthLookup()
	{
		this.form.cmbDepth().clear();
		ims.nursing.vo.lookups.PainDepthCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getPainDepth(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbDepth().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbDepthLookupValue(int id)
	{
		ims.nursing.vo.lookups.PainDepth instance = ims.nursing.vo.lookups.LookupHelper.getPainDepthInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbDepth().setValue(instance);
	}
	protected final void defaultcmbDepthLookupValue()
	{
		this.form.cmbDepth().setValue((ims.nursing.vo.lookups.PainDepth)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.PainDepth.class, engine.getFormName().getID(), ims.nursing.vo.lookups.PainDepth.TYPE_ID));
	}
	protected final void oncmbProgressionValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbProgression().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.PainProgression existingInstance = (ims.nursing.vo.lookups.PainProgression)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbProgressionLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.PainProgression)
		{
			ims.nursing.vo.lookups.PainProgression instance = (ims.nursing.vo.lookups.PainProgression)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbProgressionLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.PainProgression existingInstance = (ims.nursing.vo.lookups.PainProgression)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbProgression().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbProgressionLookup()
	{
		this.form.cmbProgression().clear();
		ims.nursing.vo.lookups.PainProgressionCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getPainProgression(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbProgression().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbProgressionLookupValue(int id)
	{
		ims.nursing.vo.lookups.PainProgression instance = ims.nursing.vo.lookups.LookupHelper.getPainProgressionInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbProgression().setValue(instance);
	}
	protected final void defaultcmbProgressionLookupValue()
	{
		this.form.cmbProgression().setValue((ims.nursing.vo.lookups.PainProgression)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.PainProgression.class, engine.getFormName().getID(), ims.nursing.vo.lookups.PainProgression.TYPE_ID));
	}
	protected final void oncmbOnsetValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbOnset().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.PainOnset existingInstance = (ims.nursing.vo.lookups.PainOnset)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbOnsetLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.PainOnset)
		{
			ims.nursing.vo.lookups.PainOnset instance = (ims.nursing.vo.lookups.PainOnset)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbOnsetLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.PainOnset existingInstance = (ims.nursing.vo.lookups.PainOnset)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbOnset().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbOnsetLookup()
	{
		this.form.cmbOnset().clear();
		ims.nursing.vo.lookups.PainOnsetCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getPainOnset(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbOnset().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbOnsetLookupValue(int id)
	{
		ims.nursing.vo.lookups.PainOnset instance = ims.nursing.vo.lookups.LookupHelper.getPainOnsetInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbOnset().setValue(instance);
	}
	protected final void defaultcmbOnsetLookupValue()
	{
		this.form.cmbOnset().setValue((ims.nursing.vo.lookups.PainOnset)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.PainOnset.class, engine.getFormName().getID(), ims.nursing.vo.lookups.PainOnset.TYPE_ID));
	}
	protected final void oncmbTypeValueSet(Object value)
	{
		java.util.ArrayList listOfValues = this.form.cmbType().getValues();

		if(value == null)
		{
			if(listOfValues != null && listOfValues.size() > 0)
			{
				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.PainType existingInstance = (ims.nursing.vo.lookups.PainType)listOfValues.get(x);
					if(!existingInstance.isActive())
					{
						bindcmbTypeLookup();
						return;
					}
				}
			}
		}
		else if(value instanceof ims.nursing.vo.lookups.PainType)
		{
			ims.nursing.vo.lookups.PainType instance = (ims.nursing.vo.lookups.PainType)value;

			if(listOfValues != null)
			{
				if(listOfValues.size() == 0)
					bindcmbTypeLookup();

				for(int x = 0; x < listOfValues.size(); x++)
				{
					ims.nursing.vo.lookups.PainType existingInstance = (ims.nursing.vo.lookups.PainType)listOfValues.get(x);
					if(existingInstance.equals(instance))
						return;
				}
			}

			this.form.cmbType().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());
		}
	}
	protected final void bindcmbTypeLookup()
	{
		this.form.cmbType().clear();
		ims.nursing.vo.lookups.PainTypeCollection lookupCollection = ims.nursing.vo.lookups.LookupHelper.getPainType(this.domain.getLookupService());
		for(int x = 0; x < lookupCollection.size(); x++)
		{
			this.form.cmbType().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());
		}
	}
	protected final void setcmbTypeLookupValue(int id)
	{
		ims.nursing.vo.lookups.PainType instance = ims.nursing.vo.lookups.LookupHelper.getPainTypeInstance(this.domain.getLookupService(), id);
		if(instance != null)
			this.form.cmbType().setValue(instance);
	}
	protected final void defaultcmbTypeLookupValue()
	{
		this.form.cmbType().setValue((ims.nursing.vo.lookups.PainType)domain.getLookupService().getDefaultInstance(ims.nursing.vo.lookups.PainType.class, engine.getFormName().getID(), ims.nursing.vo.lookups.PainType.TYPE_ID));
	}
	public final void free()
	{
		super.free();
		domain = null;
	}
	
	protected ims.domain.DomainInterface domain;
}
