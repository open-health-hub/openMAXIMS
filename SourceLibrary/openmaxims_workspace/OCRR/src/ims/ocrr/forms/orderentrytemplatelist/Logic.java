//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.30 build 2042.15859)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.orderentrytemplatelist;

import ims.core.vo.LocSiteShortVo;
import ims.core.vo.LocSiteShortVoCollection;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.vo.OrderEntryTemplateListSearchCriteriaVo;
import ims.ocrr.vo.OrderEntryTemplateShortVo;
import ims.ocrr.vo.OrderEntryTemplateShortVoCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		restoreSearchCriteria();
		search();
	}
	protected void onGrdDetailsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.grdDetails().getValue() != null)
			form.getGlobalContext().OCRR.setSelectedOrderEntryTemplateID(form.grdDetails().getValue().getID_OrderEntryTemplate());
		setContextMenu();
	}
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.OCRROrderEntryTemplateList.ADD:
				add();
				break;
			case GenForm.ContextMenus.OCRROrderEntryTemplateList.EDIT:
				editSelected();
				break;
			case GenForm.ContextMenus.OCRROrderEntryTemplateList.VIEW:
				viewSelected();
				break;
			case GenForm.ContextMenus.OCRROrderEntryTemplateList.PREVIEW:
				previewSelected();
				break;
		}
	}	
	protected void onBtnSearchClick() throws PresentationLogicException 
	{
		buildSearchCriteria();
		search();
	}
	private void restoreSearchCriteria()
	{
		OrderEntryTemplateListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getOrderEntryTemplateListSearchCriteria();
		if(searchCriteria == null)
			return;
		
		form.txtName().setValue(searchCriteria.getName());
		form.cmbStatus().setValue(searchCriteria.getStatus());
		form.cmbSite().setValue(searchCriteria.getLocation());
	}
	private void initialize()
	{
		form.getContextMenus().getOCRROrderEntryTemplateListADDItem().setVisible(true);
		populateLocations();
	}
	private void populateLocations()
	{
		form.cmbSite().clear();
		
		LocSiteShortVoCollection locations = domain.getLocations();
		if(locations != null)
		{
			locations.sort();			
			for(int x = 0; x < locations.size(); x++)
			{
				LocSiteShortVo location = locations.get(x);
				if(location.getID_LocationIsNotNull() && location.getID_Location().intValue() != 0)
					form.cmbSite().newRow(location, location.getName(), form.getImages().Admin.LocationSite);
			}
		}
	}
	private void buildSearchCriteria()
	{
		OrderEntryTemplateListSearchCriteriaVo searchCriteria = new OrderEntryTemplateListSearchCriteriaVo();
		searchCriteria.setName(form.txtName().getValue());
		searchCriteria.setStatus(form.cmbStatus().getValue());
		searchCriteria.setLocation(form.cmbSite().getValue());
		form.getGlobalContext().OCRR.setOrderEntryTemplateListSearchCriteria(searchCriteria);
	}
	private boolean isValidSearchCriteria()
	{
		OrderEntryTemplateListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getOrderEntryTemplateListSearchCriteria();
		if(searchCriteria == null)
			return false;
		
		if(searchCriteria.getNameIsNotNull() && searchCriteria.getName().trim().length() > 0)
			return true;
		if(searchCriteria.getLocationIsNotNull())
			return true;
		if(searchCriteria.getStatusIsNotNull())
			return true;
		
		return false;
	}
	private void search()
	{		
		form.grdDetails().getRows().clear();
		
		OrderEntryTemplateListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getOrderEntryTemplateListSearchCriteria();
		if(searchCriteria == null)
			return;
		
		if(!isValidSearchCriteria())
		{
			form.getGlobalContext().OCRR.setOrderEntryTemplateListSearchCriteria(null);
			engine.showMessage("Please Enter Some Search Criteria");
			return;
		}
		
		OrderEntryTemplateShortVoCollection records = domain.listOrderEntryTemplates(searchCriteria);
		
		if(records != null)
		{
			records.sort();
			for(int x = 0; x < records.size(); x++)
			{
				OrderEntryTemplateShortVo item = records.get(x);
				GenForm.grdDetailsRow row = form.grdDetails().getRows().newRow(form.getGlobalContext().OCRR.getSelectedOrderEntryTemplateIDIsNotNull() && form.getGlobalContext().OCRR.getSelectedOrderEntryTemplateID().equals(item.getID_OrderEntryTemplate()));
				row.setValue(item);
				row.setcolImage(form.getImages().OCRR.OrderEntryTemplate);
				row.setcolName(item.getFormName());
				if(item.getActiveStatusIsNotNull())
					row.setcolStatus(item.getActiveStatus().getText());				
			}
			
			if(form.grdDetails().getSelectedRowIndex() < 0)
				form.getGlobalContext().OCRR.setSelectedOrderEntryTemplateID(null);
			//---------------------------------------------
			if(records.size() == 0)
				engine.showMessage("No Records Found!!!");
			//----------------------------------------------
		}		
		
		setContextMenu();
	}
	private void setContextMenu()
	{
		form.getContextMenus().getOCRROrderEntryTemplateListEDITItem().setVisible(form.grdDetails().getSelectedRowIndex() >= 0);
		form.getContextMenus().getOCRROrderEntryTemplateListVIEWItem().setVisible(form.grdDetails().getSelectedRowIndex() >= 0);
		form.getContextMenus().getOCRROrderEntryTemplateListPREVIEWItem().setVisible(form.grdDetails().getSelectedRowIndex() >= 0);
	}
	private void add()
	{
		form.getGlobalContext().OCRR.setSelectedOrderEntryTemplateID(null);
		form.getGlobalContext().OCRR.setOrderEntryTemplateEditorReadOnly(Boolean.FALSE);
		engine.open(form.getForms().OCRR.OrderEntryTemplateEdit);
	}
	private void editSelected()
	{
		editViewSelected(true);
	}
	private void viewSelected()
	{
		editViewSelected(false);
	}
	private void editViewSelected(boolean edit)
	{
		if(form.grdDetails().getSelectedRowIndex() < 0 || form.grdDetails().getValue() == null)
			return;
		
		form.getGlobalContext().OCRR.setSelectedOrderEntryTemplateID(form.grdDetails().getValue().getID_OrderEntryTemplate());
		form.getGlobalContext().OCRR.setOrderEntryTemplateEditorReadOnly(new Boolean(!edit));
		engine.open(form.getForms().OCRR.OrderEntryTemplateEdit);
	}
	private void previewSelected()
	{		
		if(form.grdDetails().getSelectedRowIndex() < 0 || form.grdDetails().getValue() == null)
			return;
				
		engine.open(form.getForms().OCRR.OrderEntryTemplatePreviewDialog);
	}	
}
