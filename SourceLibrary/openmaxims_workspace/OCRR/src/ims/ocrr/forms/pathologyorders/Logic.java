//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.53 build 2641.19803)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.pathologyorders;

import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportVo;
import ims.admin.vo.ReportVoCollection;
import ims.RefMan.vo.CatsReferralListVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Color;
import ims.framework.utils.DateTimeFormat;
import ims.ocrr.forms.pathologyorders.GenForm.grdResultsRow;
import ims.ocrr.vo.OrderSpecimenPathologyVo;
import ims.ocrr.vo.PathologyOrderVo;
import ims.ocrr.vo.PathologyOrderVoCollection;
import ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.utils.textile.Textile;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialize();
	}
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		ReportVoCollection coll = domain.listAssignedReports(new Integer(engine.getFormName().getID()));

		ReportVo rep = null;
		if(coll != null && coll.size() > 0)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				if(coll.get(i).getSeeds() == null || coll.get(i).getSeeds().size() == 0)
				{
					if(rep != null)
					{
						engine.showMessage("More than one report assigned to this form.");
						return;
					}
					
					rep = coll.get(i);
				}
			}
			
			if(rep == null)
				engine.showMessage("I could not find a suitable report for this form.\n\rPlease go to Admin->Reports and assign a report to this form.");
			
			/*
			if(coll.size() > 1)
			{
				engine.showMessage("More than one report assigned to this form.");
				return;
			}
			*/
			//this form must have a single report asigned to it and single template
			//rep = coll.get(0);
			
			if(rep != null &&
					rep.getTemplatesIsNotNull() &&
						rep.getTemplates().size() > 0)
			{
				ReportTemplateVo template = rep.getTemplates().get(0);
				
				String[] obj = null;
				try
				{
					obj = domain.getReportAndTemplate(rep.getID_ReportBo(), template.getID_TemplateBo());				
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage("Error retrieving report template !\r\n" + e.getMessage());
					return;
				}
				
				if(obj == null || obj.length == 0)
				{
					engine.showMessage("I could not get the report and template !");
					return;
				}

				QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
				
				client.addSeed(new SeedValue("SERVICE_ID", form.cmbService().getValue().getID_Service(), Integer.class));
				client.addSeed(new SeedValue("STATUS_ID",  new Integer(OrderInvStatus.SENT.getID()), Integer.class));
				client.addSeed(new SeedValue("CATEGORY_ID",  new Integer(Category.PATHOLOGY.getId()), Integer.class));
				client.addSeed(new SeedValue("DISPLAY_PATID_TYPE",  getPatIdentifier(), Integer.class));
				
				/*// Pass the CLINIC_ID and CLINIC_NAME
				for (int i = 0; i < form.grdResults().getRows().size(); i++)
				{
					PathologyOrdersForPatientVo newResult = form.grdResults().getRows().get(i).getValue();

					// Clinic Name seeds collection
					if (newResult.getOrderDetailsIsNotNull() && newResult.getOrderDetails().getClinicalInfoIsNotNull())
					{
						String clinic_name = MyOrderQuestionsPopulation.getTextualQuestionAndAnswers(newResult.getOrderDetails().getClinicalInfo());
						if (newResult.getOrderDetails().getAdditClinNotesIsNotNull())
							clinic_name += "\n" + newResult.getOrderDetails().getAdditClinNotes();
						client.addSeed(new SeedValue("CLINIC_ID", newResult.getOrderDetails().getID_OcsOrder(), Integer.class));
						client.addSeed(new SeedValue("CLINIC_NAME", clinic_name, String.class));
					}
				}*/
								
				String resultUrl = "";
				try
				{
					resultUrl = client.buildReportAsUrl(obj[0], obj[1], urlReportServer, "PDF", "", 1);
				} 
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error creating report: " + e1.getMessage());
					return;
				}
				
				engine.openUrl(resultUrl);
			}
		}
		else
		{
			engine.showMessage("No report was assigned to this form.\n\rPlease go to Admin->Reports and assign a report to this form.");
		}
	}
	protected void onGrdResultsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().OCRR.PathologyResults.setOrder(form.grdResults().getValue().getOrderDetails());
		PathologyOrderVo voPathologyOrder = form.grdResults().getValue();
		form.getLocalContext().setPrintingContext((voPathologyOrder != null && voPathologyOrder.getSpecimen().size() > 0) ? voPathologyOrder.getSpecimen().get(0) : null);
		
		if(voPathologyOrder != null && voPathologyOrder.getOrderDetailsIsNotNull() && voPathologyOrder.getOrderDetails().getPatientIsNotNull())
		{
			form.getGlobalContext().Core.setPatientShort(voPathologyOrder.getOrderDetails().getPatient());
			CatsReferralListVo voCats = domain.getCatsReferralByOrder(voPathologyOrder.getOrderDetails());
			form.getGlobalContext().RefMan.setCatsReferral(voCats);
			form.getGlobalContext().RefMan.setReferralContractTypeForPatient(voCats != null && voCats.getContractIsNotNull() ? voCats.getContract().getContractType() : null);//wdev-12682

			engine.open(form.getForms().OCRR.OrderSummaryDialog);
		}
		else
		{
			engine.showMessage("No patient associated with the selected record.");
		}
	}
	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.cmbDepartment().setValue(null);
		form.cmbService().clear();
		form.dteFrom().setValue(null);	// WDEV-12692
		form.dteTo().setValue(null);	// WDEV-12692
		form.grdResults().getRows().clear();
		form.getLocalContext().setPrintingContext(null);
		form.getLocalContext().setCount(0);
		displayGridFooter();
		setDefaultDepartmentValue();
		enablePrintButton();
	}
	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if(validateUISearchCriteria() == false)
			return;
		
		form.getLocalContext().setPrintingContext(null);
		
		//wdev-11986
		// WDEV-12692 - Pass 'From Date' and 'To Date' as search criteria 
		PathologyOrderVoCollection results = domain.listPathologyOrderInvestigation(form.cmbService().getValue(),form.cmbDepartment().getValue(), Category.PATHOLOGY, form.dteFrom().getValue(), form.dteTo().getValue());
		
		if (results == null || results.size() == 0)
		{
			engine.showMessage("No results found for search criteria.");
		}

		populateOrdersGrid(results);
		//--------
		
		enablePrintButton();
	}
	protected void onCmbDepartmentValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		loadService(form.cmbDepartment().getValue());
	}
	private Integer getPatIdentifier()
	{
		PatIdType patIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		if(patIdType != null)
			return new Integer(patIdType.getID());
			
		return null;
	}

	// Private methods
	private void initialize()
	{
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().RefMan.setReferralContractTypeForPatient(null);//wdev-12682

		loadLocation();
		displayGridFooter();
		enablePrintButton();
		setPatientIdentifierColumnCaption();
		
		//security level WDEV-9780
		RoleDisciplineSecurityLevelLiteGCVo voRoleDisciplineSecurityLevels = form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels();
		if(voRoleDisciplineSecurityLevels == null || (voRoleDisciplineSecurityLevels != null &&  voRoleDisciplineSecurityLevels.getIsConfigLoadedIsNotNull() && !voRoleDisciplineSecurityLevels.getIsConfigLoaded().equals(false)))
			form.getGlobalContext().OCRR.setRoleDisciplineSecurityLevels(domain.getRoleDisciplineSecurityLevels(engine.getLoggedInRole()));
	}

	private void loadLocation()
	{
		form.cmbDepartment().clear();

		LocationLiteVoCollection voColl = domain.listLocation(LocationType.PATHOLOGYLABORATORY, Boolean.TRUE);
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			LocationLiteVo voLocation = voColl.get(i);
			form.cmbDepartment().newRow(voLocation, voLocation.getName());
			
			//WDEV-2847
			if(engine.getCurrentLocation() != null)
			{
				if (engine.getCurrentLocation().getID() == voLocation.getID_Location().intValue())
					form.cmbDepartment().setValue(voLocation);
			}
		}

		setDefaultDepartmentValue();
	}

	private void setDefaultDepartmentValue()
	{
		ILocation defaultLocation = engine.getCurrentLocation();
		if(defaultLocation == null)
			return;
		
		for (int i = 0; i < form.cmbDepartment().getValues().size(); i++)
		{
			if(defaultLocation.equals(form.cmbDepartment().getValues().get(i)))
			{
				if(form.cmbDepartment().getValues().get(i) instanceof LocationRefVo)
					form.cmbDepartment().setValue((LocationLiteVo)form.cmbDepartment().getValues().get(i));
			}
		}
		
		loadService(form.cmbDepartment().getValue());
	}

	private void loadService(LocationLiteVo value)
	{
		form.cmbService().clear();
		if (value != null)
		{
			ServiceLiteVoCollection voServiceLiteVoCollection = domain.listService(value, ServiceCategory.PATHOLOGY_DISCIPLINE);
			for (int i = 0; voServiceLiteVoCollection != null && i < voServiceLiteVoCollection.size(); i++)
			{
				form.cmbService().newRow(voServiceLiteVoCollection.get(i), voServiceLiteVoCollection.get(i).getServiceName());
			}
		}
	}

	private void populateOrdersGrid(PathologyOrderVoCollection coll)
	{
		if (coll == null)
			return;
		
		form.grdResults().getRows().clear();
		coll.sort(SortOrder.DESCENDING);
		
		int recCount = 0;
		for (int i = 0; i < coll.size(); i++)
		{
			PathologyOrderVo result = coll.get(i);
			recCount += addOrderRow(result);
		}

		form.getLocalContext().setCount(recCount);		
		displayGridFooter();
	}
	
	private GenForm.grdResultsRow createOrFindSpecimenGridRow(PathologyOrderVo result) 
	{
		if(result == null)
			return null;
		
		OrderSpecimenPathologyVo specimen = new OrderSpecimenPathologyVo();
		
		boolean dftInv = isDFT(result);//WDEV-16504
		
		String Specimens = "";
		if (result.getSpecimen() != null)
		{
			if (result.getSpecimen().size() == 1)
			{
				specimen = result.getSpecimen().get(0);
				for (int x = 0; x < form.grdResults().getRows().size(); x++)
				{
					grdResultsRow row = form.grdResults().getRows().get(x);
					OrderSpecimenPathologyVo rowSpecimen = (row.getValue().getSpecimen().size() > 0 ? row.getValue().getSpecimen().get(0) : null);
					if (rowSpecimen != null && rowSpecimen.equals(specimen))
						return row;
				}

				Specimens = specimen.getSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : "");
			}
			else if (result.getSpecimen().size() > 1)
			{
				for (int xx = 0; xx < result.getSpecimen().size(); xx++)
				{
					specimen = result.getSpecimen().get(xx);

					if (Specimens == "")
					{
						Specimens = specimen.getSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : "");
					}
					else
						Specimens = Specimens + ", " + specimen.getSpecimenSource().getText() + (specimen.getSiteCdIsNotNull() ? " - " + specimen.getSiteCd().getText() : "");
				}
			}
		}
		
		grdResultsRow row = form.grdResults().getRows().newRow();
		
		if(dftInv)//WDEV-16504
		{
			String specimenS = (result.getInvestigation() != null 
					&& result.getInvestigation().getPathInvDetails() != null 
					&& result.getInvestigation().getPathInvDetails().getSpecimens() != null 
					&& result.getInvestigation().getPathInvDetails().getSpecimens().size() > 0 
					&& result.getInvestigation().getPathInvDetails().getSpecimens().get(0) != null) 
					? result.getInvestigation().getPathInvDetails().getSpecimens().get(0).getType().getIItemText() : null;
					
			row.setColSpecimen(specimenS);
			row.setTooltipForColSpecimen(specimenS);
		}
		else
		{
			if(specimen.getSpecimenSource() == null)
			{
				row.setColSpecimen("[No specimen source]");
			}
			else
			{
				row.setColSpecimen(Specimens);
			}
		}
		
		//Patient details
		if (result.getOrderDetailsIsNotNull() && result.getOrderDetails().getPatientIsNotNull())
		{
			PatientShort patient = result.getOrderDetails().getPatient();

			if (patient.getDisplayId() != null)
			{
				row.setColHospNum(patient.getDisplayId().getValue());
			}

			if (patient.getName() != null)
				row.setColName(patient.getName().toString());

			if (patient.getSexIsNotNull())
				row.setColSex(patient.getSex().getText());
		}
		row.setValue(result);

		row.setExpanded(true);
		
		row.setBackColor((form.grdResults().getRows().size() % 2) == 0 ? Color.Beige : Color.Default);
		
		return row;
	}

	private boolean isDFT(PathologyOrderVo result) //WDEV-16504
	{
		if(result == null || result.getInvestigation() == null)
			return false;
		
		if(InvEventType.TIME_SERIES.equals(result.getInvestigation().getEventType()))
			return true;
			
		return false;
	}
	
	private int addOrderRow(PathologyOrderVo voOrderInv)
	{
		if(voOrderInv == null || voOrderInv.getSpecimen() == null)
			return 0;
		
		//WDEV-9780
		if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
		{
			ServiceRefVo voInvService =  voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getProviderServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? voOrderInv.getInvestigation().getProviderService().getLocationService().getService() : null;
			SecurityLevelConfigVo voInvSecurityLevel = voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull() ? voOrderInv.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

			if(!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel, false)) //WDEV-11622
				return 0;
		}		
		
		grdResultsRow parentRow = createOrFindSpecimenGridRow(voOrderInv);
		if(parentRow == null)
			return 0;
		
		grdResultsRow row = null;
		if (parentRow.getColExamName() == null)
			row = parentRow; 
		else	
			row = parentRow.getRows().newRow();

		if (voOrderInv.getDisplayDateTimeIsNotNull())
			row.setColDateTime(voOrderInv.getDisplayDateTime().toString(DateTimeFormat.STANDARD));

		if (voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getInvestigationIndexIsNotNull())
			row.setColExamName(voOrderInv.getInvestigation().getInvestigationIndex().getName());

		if (voOrderInv.getInvestigationIsNotNull() && voOrderInv.getInvestigation().getProviderServiceIsNotNull() 
			&& voOrderInv.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voOrderInv.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull())
			row.setColDepartment(voOrderInv.getInvestigation().getProviderService().getLocationService().getService().getServiceName());

		if (voOrderInv.getOrderDetailsIsNotNull())
			row.setColOrderingLocation(voOrderInv.getOrderDetails().getCorrectLocation());

		if (voOrderInv.getOrderDetailsIsNotNull())
			row.setColClinician(voOrderInv.getOrderDetails().getCorrectClinician());

		
		row.setBackColor(parentRow.getBackColor());
		row.setValue(voOrderInv);
		
		return 1;
	}

	private void displayGridFooter()
	{
		form.grdResults().setFooterMaxHeight(20);
		if (form.getLocalContext().getCountIsNotNull())
			form.grdResults().setFooterValue(new Textile().process("*Total: * " + form.getLocalContext().getCount()));
	}
	
	private void enablePrintButton()
	{
		form.btnPrint().setEnabled(form.grdResults().getRows().size() > 0);
	}
	
	private boolean validateUISearchCriteria()
	{
		// WDEV-12692 - 'From Date' must be set before 'To Date'
		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null && form.dteFrom().getValue().isGreaterThan(form.dteTo().getValue()))
		{
			engine.showMessage("'From' date can not be set after 'To' date");
			form.dteFrom().setFocus();
			return false;
		}
		
		if (form.cmbDepartment().getValue() == null)
		{
			engine.showMessage("Please select a " + getStringNoComa(form.lblLocation().getValue()));
			form.cmbDepartment().setFocus();
			return false;
		}

		if (form.cmbService().getValue() == null)
		{
			engine.showMessage("Please select a " + getStringNoComa(form.lblModality().getValue()));
			form.cmbService().setFocus();
			return false;
		}
		
		return true;
	}
	
	private String getStringNoComa(String label)
	{
		if(label != null)
		{
			int index = label.indexOf(":");
			if(index == (label.length() - 1) && label.length() > 0)
				return label.substring(0, (label.length() - 1));
		}
		
		return label;
	}
	
	private void setPatientIdentifierColumnCaption()
	{
		form.grdResults().setColHospNumCaption(getPatientIdentifier());
	}
	
	private String getPatientIdentifier()
	{
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		if(dispIdType != null)
			return dispIdType.getText();
		
		return "Hospital No.";
	}
	
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		//wdev-11861
		if(formName.equals(form.getForms().OCRR.OrderSummaryDialog))
		{
			if(result.equals(DialogResult.OK) || result.equals(DialogResult.CANCEL))
			{
				if(validateUISearchCriteria() == false)
					return;
				form.getLocalContext().setPrintingContext(null);
				
				
				//wdev-11986
				// WDEV-12692 - Pass 'From Date' and 'To Date' as search criteria
				populateOrdersGrid(domain.listPathologyOrderInvestigation(form.cmbService().getValue(),form.cmbDepartment().getValue(), Category.PATHOLOGY, form.dteFrom().getValue(), form.dteTo().getValue()));
				//-------------
				
				enablePrintButton();
			}
		}
		//----
		
	}

}
