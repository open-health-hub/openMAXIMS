//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.myorder;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrDetailsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabClinicalNotesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class qmbResponsibleHCPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbOrderingHCPComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 34, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Responsible HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 8, 10, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ordering HCP:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 8, 424, 120, 17, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Additional Information:", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 520, 520, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next >>", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 8, 440, 616, 72, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(4000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 112, 32, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbResponsibleHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbResponsibleHCPTemp);
				qmbResponsibleHCPComboBox qmbResponsibleHCP = (qmbResponsibleHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbResponsibleHCPComboBox.class, m_qmbResponsibleHCPTemp);
				super.addComboBox(qmbResponsibleHCP);
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 112, 8, 232, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_qmbOrderingHCPTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(3), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbOrderingHCPTemp);
				qmbOrderingHCPComboBox qmbOrderingHCP = (qmbOrderingHCPComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbOrderingHCPComboBox.class, m_qmbOrderingHCPTemp);
				super.addComboBox(qmbOrderingHCP);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 8, 64, 616, 352, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
			}

			public Label lblResponsibleHCP()
			{
				return (Label)super.getControl(0);
			}
			public Label lblOrderingHCP()
			{
				return (Label)super.getControl(1);
			}
			public Label lblAdditional()
			{
				return (Label)super.getControl(2);
			}
			public Button btnContinueClinical()
			{
				return (Button)super.getControl(3);
			}
			public TextBox txtAdditionalNotes()
			{
				return (TextBox)super.getControl(4);
			}
			public qmbResponsibleHCPComboBox qmbResponsibleHCP()
			{
				return (qmbResponsibleHCPComboBox)super.getComboBox(0);
			}
			public qmbOrderingHCPComboBox qmbOrderingHCP()
			{
				return (qmbOrderingHCPComboBox)super.getComboBox(1);
			}
			public DynamicGrid dyngrdQuestions()
			{
				return (DynamicGrid)super.getControl(7);
			}
		}
		public static class tabSummaryClinicalInfoContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 179, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Summary Clinical Information:", new Integer(1), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 528, 520, 96, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next >>", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 8, 520, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<< Previous", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 8, 32, 616, 480, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, new Integer(2000), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
			}

			public Button btnSummaryClinicalInfoNext()
			{
				return (Button)super.getControl(1);
			}
			public Button btnSummaryClinicalInfoPrevious()
			{
				return (Button)super.getControl(2);
			}
			public TextBox txtSummaryClinicalInfo()
			{
				return (TextBox)super.getControl(3);
			}
		}
		public static class tabGenDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDepartmentComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbHospitalComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.framework.interfaces.ILocation value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.framework.interfaces.ILocation value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.framework.interfaces.ILocation value)
				{
					return super.control.removeRow(value);
				}
				public ims.framework.interfaces.ILocation getValue()
				{
					return (ims.framework.interfaces.ILocation)super.control.getValue();
				}
				public void setValue(ims.framework.interfaces.ILocation value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbOrderCategoryComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.lookups.OrderCategory value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.lookups.OrderCategory value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.lookups.OrderCategory value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.lookups.OrderCategory value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.lookups.OrderCategory value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.lookups.OrderCategory getValue()
				{
					return (ims.ocrr.vo.lookups.OrderCategory)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.OrderCategory value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbPriorityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.lookups.OrderPriority value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.lookups.OrderPriority value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.lookups.OrderPriority value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.lookups.OrderPriority value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.lookups.OrderPriority value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.lookups.OrderPriority getValue()
				{
					return (ims.ocrr.vo.lookups.OrderPriority)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.OrderPriority value)
				{
					super.control.setValue(value);
				}
			}
			public static class qmbOrderedByComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.MemberOfStaffLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.MemberOfStaffLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.MemberOfStaffLiteVo getValue()
				{
					return (ims.core.vo.MemberOfStaffLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.MemberOfStaffLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbClinicianComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.HcpLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.HcpLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.HcpLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.HcpLiteVo getValue()
				{
					return (ims.core.vo.HcpLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.HcpLiteVo value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
			public static class qmbLocationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.vo.ValueObject value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.vo.ValueObject value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.vo.ValueObject value)
				{
					return super.control.removeRow(value);
				}
				public ims.vo.ValueObject getValue()
				{
					return (ims.vo.ValueObject)super.control.getValue();
				}
				public void setValue(ims.vo.ValueObject value)
				{
					super.control.setValue(value);
				}
				public void setEditedText(String text)
				{
					super.control.setEditedText(text);
				}
				public String getEditedText()
				{
					return super.control.getEditedText();
				}
			}
		
			public static class grpPatientLocationRadioButton extends RadioButtonBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
				{
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex ");
					RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 559, 35, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(0, anchoringHelper13.getX(), anchoringHelper13.getY(), anchoringHelper13.getWidth(), "Other", startTabIndex.intValue() + 24);
					RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 482, 35, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(1, anchoringHelper14.getX(), anchoringHelper14.getY(), anchoringHelper14.getWidth(), "ED", startTabIndex.intValue() + 23);
					RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 405, 35, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(2, anchoringHelper15.getX(), anchoringHelper15.getY(), anchoringHelper15.getWidth(), "Clinic", startTabIndex.intValue() + 22);
					RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 328, 35, 56, 16, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
					control.addButton(3, anchoringHelper16.getX(), anchoringHelper16.getY(), anchoringHelper16.getWidth(), "Ward", startTabIndex.intValue() + 21);
				}
				public void setText(grpPatientLocationEnumeration option, String value)
				{
					if(option != null && option.id >= 0 && value != null)
						control.setText(option.id, value);
				}
				public grpPatientLocationEnumeration getValue()
				{
					switch (super.control.getValue())
					{
						case -1: return grpPatientLocationEnumeration.None;
						case 0: return grpPatientLocationEnumeration.rdoOther;
						case 1: return grpPatientLocationEnumeration.rdoAandE;
						case 2: return grpPatientLocationEnumeration.rdoClinic;
						case 3: return grpPatientLocationEnumeration.rdoWard;
					}
					return null;
				}
				public void setValue(grpPatientLocationEnumeration value)
				{
					if(value != null)
						super.control.setValue(value.id);
					else
						super.control.setValue(grpPatientLocationEnumeration.None.id);
				}
				public boolean isEnabled(grpPatientLocationEnumeration option)
				{
					return super.control.isEnabled(option.id);
				}
				public void setEnabled(grpPatientLocationEnumeration option, boolean value)
				{
					super.control.setEnabled(option.id, value);
				}
				public boolean isVisible(grpPatientLocationEnumeration option)
				{
					return super.control.isVisible(option.id);
				}
				public void setVisible(grpPatientLocationEnumeration option, boolean value)
				{
					super.control.setVisible(option.id, value);
				}
				public void setVisible(boolean value)
				{
					super.control.setVisible(value);
				}
				public void setEnabled(boolean value)
				{
					super.control.setEnabled(value);
				}
			}
			public static class grpPatientLocationEnumeration implements java.io.Serializable
			{
				private static final long serialVersionUID = 1L;
				public static grpPatientLocationEnumeration None = new grpPatientLocationEnumeration(-1);
				public static grpPatientLocationEnumeration rdoOther = new grpPatientLocationEnumeration(0);
				public static grpPatientLocationEnumeration rdoAandE = new grpPatientLocationEnumeration(1);
				public static grpPatientLocationEnumeration rdoClinic = new grpPatientLocationEnumeration(2);
				public static grpPatientLocationEnumeration rdoWard = new grpPatientLocationEnumeration(3);
				private grpPatientLocationEnumeration(int id)
				{
					this.id = id;
				}
				public boolean equals(Object o)
				{
					return this.id == ((grpPatientLocationEnumeration)o).id;
				}
				private int id;
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 8, 118, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Bleep No / Ext. No:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 328, 97, 67, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Department:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 328, 84, 57, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Outpatient", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 8, 98, 53, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 8, 68, 49, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Clinician:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 8, 20, 29, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "HCP:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 352, 162, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "PAS Episode ID:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 328, 62, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Patient Location:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 8, 200, 96, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Paper Report To", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 8, 85, 33, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Order", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 8, 162, 75, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Order Priority:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 8, 55, 32, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Resp.", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 368, 10, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Hospital:", new Integer(0), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 8, 6, 48, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Ordering", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 8, 520, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<< Previous", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 520, 520, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 37), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next >>", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 104, 116, 208, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(50), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 440, 160, 176, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 416, 88, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbDepartmentTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDepartmentTemp);
				cmbDepartmentComboBox cmbDepartment = (cmbDepartmentComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDepartmentComboBox.class, m_cmbDepartmentTemp);
				super.addComboBox(cmbDepartment);
				RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 416, 8, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_cmbHospitalTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbHospitalTemp);
				cmbHospitalComboBox cmbHospital = (cmbHospitalComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbHospitalComboBox.class, m_cmbHospitalTemp);
				super.addComboBox(cmbHospital);
				RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 64, 88, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbOrderCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbOrderCategoryTemp);
				cmbOrderCategoryComboBox cmbOrderCategory = (cmbOrderCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbOrderCategoryComboBox.class, m_cmbOrderCategoryTemp);
				super.addComboBox(cmbOrderCategory);
				RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 128, 160, 184, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbPriorityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPriorityTemp);
				cmbPriorityComboBox cmbPriority = (cmbPriorityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPriorityComboBox.class, m_cmbPriorityTemp);
				super.addComboBox(cmbPriority);
		
				// Query ComboBox Controls
				RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 64, 8, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbOrderedByTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1034), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbOrderedByTemp);
				qmbOrderedByComboBox qmbOrderedBy = (qmbOrderedByComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbOrderedByComboBox.class, m_qmbOrderedByTemp);
				super.addComboBox(qmbOrderedBy);
				RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 64, 60, 248, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_qmbClinicianTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.TRUE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbClinicianTemp);
				qmbClinicianComboBox qmbClinician = (qmbClinicianComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbClinicianComboBox.class, m_qmbClinicianTemp);
				super.addComboBox(qmbClinician);
				RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 416, 60, 200, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
				ComboBox m_qmbLocationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1036), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), new Integer(startTabIndex.intValue() + 25), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});
				addControl(m_qmbLocationTemp);
				qmbLocationComboBox qmbLocation = (qmbLocationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbLocationComboBox.class, m_qmbLocationTemp);
				super.addComboBox(qmbLocation);
		
				// Dynamic Grid Controls
				RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 224, 616, 288, ims.framework.enumerations.ControlAnchoring.ALL);
				super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.contextMenuOCRRMyOrderReportTo, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
		
				// Image Buttons Controls
				RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 96, 158, 24, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1038), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, form_images_local.Core.Form, form_images_local.Core.Form, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));
		
				// RadioButton Controls
				RadioButton tmpgrpPatientLocation = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(0), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE});
				super.addControl(tmpgrpPatientLocation);
				grpPatientLocationRadioButton grpPatientLocation = (grpPatientLocationRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(grpPatientLocationRadioButton.class, tmpgrpPatientLocation);
				grpPatientLocation.setContext(startTabIndex, designSize, runtimeSize);
				super.addRadioButton(grpPatientLocation);
		
				// Horizontal Line Controls
				RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 144, 616, 8, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				super.addControl(factory.getControl(HorizontalLine.class, new Object[] { control, new Integer(startControlID.intValue() + 1040), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,new Integer(0)}));
			}

			public Label lblBleepNo()
			{
				return (Label)super.getControl(0);
			}
			public Label lblDepartment()
			{
				return (Label)super.getControl(1);
			}
			public Label lblOutpatient()
			{
				return (Label)super.getControl(2);
			}
			public Label lblPasEpisodeID()
			{
				return (Label)super.getControl(6);
			}
			public Label lblPatientLocation()
			{
				return (Label)super.getControl(7);
			}
			public Label lbl8()
			{
				return (Label)super.getControl(8);
			}
			public Button btnPreviousGeneral()
			{
				return (Button)super.getControl(14);
			}
			public Button btnContinueGeneral()
			{
				return (Button)super.getControl(15);
			}
			public TextBox txtBleepNo()
			{
				return (TextBox)super.getControl(16);
			}
			public TextBox txtPasEpisodeID()
			{
				return (TextBox)super.getControl(17);
			}
			public cmbDepartmentComboBox cmbDepartment()
			{
				return (cmbDepartmentComboBox)super.getComboBox(0);
			}
			public cmbHospitalComboBox cmbHospital()
			{
				return (cmbHospitalComboBox)super.getComboBox(1);
			}
			public cmbOrderCategoryComboBox cmbOrderCategory()
			{
				return (cmbOrderCategoryComboBox)super.getComboBox(2);
			}
			public cmbPriorityComboBox cmbPriority()
			{
				return (cmbPriorityComboBox)super.getComboBox(3);
			}
			public qmbOrderedByComboBox qmbOrderedBy()
			{
				return (qmbOrderedByComboBox)super.getComboBox(4);
			}
			public qmbClinicianComboBox qmbClinician()
			{
				return (qmbClinicianComboBox)super.getComboBox(5);
			}
			public qmbLocationComboBox qmbLocation()
			{
				return (qmbLocationComboBox)super.getComboBox(6);
			}
			public DynamicGrid dyngrdReportTo()
			{
				return (DynamicGrid)super.getControl(25);
			}
			public ImageButton imbOrderPriority()
			{
				return (ImageButton)super.getControl(26);
			}
			public grpPatientLocationRadioButton grpPatientLocation()
			{
				return (grpPatientLocationRadioButton)super.getRadioButton(0);
			}
		}
		public static class tabRadDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbPatMobilityComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.lookups.OrderPatMobility value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.lookups.OrderPatMobility value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.lookups.OrderPatMobility value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.lookups.OrderPatMobility value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.lookups.OrderPatMobility value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.lookups.OrderPatMobility getValue()
				{
					return (ims.ocrr.vo.lookups.OrderPatMobility)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.OrderPatMobility value)
				{
					super.control.setValue(value);
				}
			}
			public static class grdRadOrdersRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdRadOrdersRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColExamNameReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColExamNameReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColExamNameOpened()
				{
					super.row.showOpened(0);
				}
				public void setTooltipForColExamName(String value)
				{
					super.row.setTooltip(0, value);
				}
				public String getColExamName()
				{
					return (String)super.row.get(0);
				}
				public void setColExamName(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColExamNameTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setColLocationReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean isColLocationReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showColLocationOpened()
				{
					super.row.showOpened(1);
				}
				public void setTooltipForColLocation(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.framework.controls.GridMutableComboBox getColLocation()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 1);
				}
				public void setCellColLocationTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.ocrr.vo.OrderInvestigationVo getValue()
				{
					return (ims.ocrr.vo.OrderInvestigationVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.OrderInvestigationVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdRadOrdersRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdRadOrdersRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdRadOrdersRow get(int index)
				{
					return new grdRadOrdersRow(super.collection.get(index));
				}
				public grdRadOrdersRow newRow()
				{
					return new grdRadOrdersRow(super.collection.newRow());
				}
				public grdRadOrdersRow newRow(boolean autoSelect)
				{
					return new grdRadOrdersRow(super.collection.newRow(autoSelect));
				}
				public grdRadOrdersRow newRowAt(int index)
				{
					return new grdRadOrdersRow(super.collection.newRowAt(index));
				}
				public grdRadOrdersRow newRowAt(int index, boolean autoSelect)
				{
					return new grdRadOrdersRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdRadOrdersGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				public ims.ocrr.vo.OrderInvestigationVoCollection getValues()
				{
					ims.ocrr.vo.OrderInvestigationVoCollection listOfValues = new ims.ocrr.vo.OrderInvestigationVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.OrderInvestigationVo getValue()
				{
					return (ims.ocrr.vo.OrderInvestigationVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.OrderInvestigationVo value)
				{
					super.grid.setValue(value);
				}
				public grdRadOrdersRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdRadOrdersRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdRadOrdersRowCollection getRows()
				{
					return new grdRadOrdersRowCollection(super.grid.getRows());
				}
				public grdRadOrdersRow getRowByValue(ims.ocrr.vo.OrderInvestigationVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdRadOrdersRow(row);
				}
				public void setColExamNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColExamNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setColLocationHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getColLocationHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 16, 26, 85, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Patient Mobility:", new Integer(0), null, new Integer(0)}));
		
				// Button Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 16, 520, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1042), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<< Previous", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 512, 520, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next >>", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 112, 24, 264, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbPatMobilityTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1044), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), new Integer(startTabIndex.intValue() + 39), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbPatMobilityTemp);
				cmbPatMobilityComboBox cmbPatMobility = (cmbPatMobilityComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbPatMobilityComboBox.class, m_cmbPatMobilityTemp);
				super.addComboBox(cmbPatMobility);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 136, 523, 312, 16, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT ,"Do you wish to print any Radiology Orders to a local printer?", Boolean.TRUE, null}));
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 600, 448, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdRadOrdersTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdRadOrdersTemp);
				grdRadOrdersGrid grdRadOrders = (grdRadOrdersGrid)GridFlyweightFactory.getInstance().createGridBridge(grdRadOrdersGrid.class, m_grdRadOrdersTemp);
				grdRadOrders.addStringColumn("Exam Name", 0, 0, 360, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdRadOrders.addMutableComboBoxColumn("Location", 0, 0, -1, false, true, false, false, false, true, -1);
				super.addGrid(grdRadOrders);
			}

			public Label lblPatMobility()
			{
				return (Label)super.getControl(0);
			}
			public Button btnPreviousRad()
			{
				return (Button)super.getControl(1);
			}
			public Button btnContinueRad()
			{
				return (Button)super.getControl(2);
			}
			public cmbPatMobilityComboBox cmbPatMobility()
			{
				return (cmbPatMobilityComboBox)super.getComboBox(0);
			}
			public CheckBox chkPrintLocal()
			{
				return (CheckBox)super.getControl(4);
			}
			public grdRadOrdersGrid grdRadOrders()
			{
				return (grdRadOrdersGrid)super.getGrid(0);
			}
		}
		public static class tabPathDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrPathologyLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabRequestedTestsContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbRequestedTypeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionType value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionType value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionType value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionType value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.ocrr.vo.lookups.SpecimenCollectionType value)
						{
							return super.control.removeRow(value);
						}
						public ims.ocrr.vo.lookups.SpecimenCollectionType getValue()
						{
							return (ims.ocrr.vo.lookups.SpecimenCollectionType)super.control.getValue();
						}
						public void setValue(ims.ocrr.vo.lookups.SpecimenCollectionType value)
						{
							super.control.setValue(value);
						}
					}
					public static class grdTestRow extends GridRowBridge
					{
						private static final long serialVersionUID = 1L;
						
						protected grdTestRow(GridRow row)
						{
							super(row);
						}
						public void showOpened(int column)
						{
							super.row.showOpened(column);
						}
						public void setColTestReadOnly(boolean value)
						{
							super.row.setReadOnly(0, value);
						}
						public boolean isColTestReadOnly()
						{
							return super.row.isReadOnly(0);
						}
						public void showColTestOpened()
						{
							super.row.showOpened(0);
						}
						public void setTooltipForColTest(String value)
						{
							super.row.setTooltip(0, value);
						}
						public String getColTest()
						{
							return (String)super.row.get(0);
						}
						public void setColTest(String value)
						{
							super.row.set(0, value);
						}
						public void setCellColTestTooltip(String value)
						{
							super.row.setTooltip(0, value);
						}
						public void setColSpecimenReadOnly(boolean value)
						{
							super.row.setReadOnly(1, value);
						}
						public boolean isColSpecimenReadOnly()
						{
							return super.row.isReadOnly(1);
						}
						public void showColSpecimenOpened()
						{
							super.row.showOpened(1);
						}
						public void setTooltipForColSpecimen(String value)
						{
							super.row.setTooltip(1, value);
						}
						public ims.ocrr.vo.SpecimenVo getColSpecimen()
						{
							return (ims.ocrr.vo.SpecimenVo)super.row.get(1);
						}
						public void setColSpecimen(ims.ocrr.vo.SpecimenVo value)
						{
							super.row.set(1, value);
						}
						public void setCellColSpecimenTooltip(String value)
						{
							super.row.setTooltip(1, value);
						}
						public void setColTestNameHiddenReadOnly(boolean value)
						{
							super.row.setReadOnly(2, value);
						}
						public boolean isColTestNameHiddenReadOnly()
						{
							return super.row.isReadOnly(2);
						}
						public void showColTestNameHiddenOpened()
						{
							super.row.showOpened(2);
						}
						public void setTooltipForColTestNameHidden(String value)
						{
							super.row.setTooltip(2, value);
						}
						public String getColTestNameHidden()
						{
							return (String)super.row.get(2);
						}
						public void setColTestNameHidden(String value)
						{
							super.row.set(2, value);
						}
						public void setCellColTestNameHiddenTooltip(String value)
						{
							super.row.setTooltip(2, value);
						}
						public void setColHiddenOrderInvestigationSiteReadOnly(boolean value)
						{
							super.row.setReadOnly(3, value);
						}
						public boolean isColHiddenOrderInvestigationSiteReadOnly()
						{
							return super.row.isReadOnly(3);
						}
						public void showColHiddenOrderInvestigationSiteOpened()
						{
							super.row.showOpened(3);
						}
						public void setTooltipForColHiddenOrderInvestigationSite(String value)
						{
							super.row.setTooltip(3, value);
						}
						public ims.ocrr.vo.OrderInvestigationVo getColHiddenOrderInvestigationSite()
						{
							return (ims.ocrr.vo.OrderInvestigationVo)super.row.get(3);
						}
						public void setColHiddenOrderInvestigationSite(ims.ocrr.vo.OrderInvestigationVo value)
						{
							super.row.set(3, value);
						}
						public void setCellColHiddenOrderInvestigationSiteTooltip(String value)
						{
							super.row.setTooltip(3, value);
						}
						public void setColSiteHiddenReadOnly(boolean value)
						{
							super.row.setReadOnly(4, value);
						}
						public boolean isColSiteHiddenReadOnly()
						{
							return super.row.isReadOnly(4);
						}
						public void showColSiteHiddenOpened()
						{
							super.row.showOpened(4);
						}
						public void setTooltipForColSiteHidden(String value)
						{
							super.row.setTooltip(4, value);
						}
						public ims.core.helper.GenericInfoAdapter getColSiteHidden()
						{
							return (ims.core.helper.GenericInfoAdapter)super.row.get(4);
						}
						public void setColSiteHidden(ims.core.helper.GenericInfoAdapter value)
						{
							super.row.set(4, value);
						}
						public void setCellColSiteHiddenTooltip(String value)
						{
							super.row.setTooltip(4, value);
						}
						public void setColAddOnsHiddenReadOnly(boolean value)
						{
							super.row.setReadOnly(5, value);
						}
						public boolean isColAddOnsHiddenReadOnly()
						{
							return super.row.isReadOnly(5);
						}
						public void showColAddOnsHiddenOpened()
						{
							super.row.showOpened(5);
						}
						public void setTooltipForColAddOnsHidden(String value)
						{
							super.row.setTooltip(5, value);
						}
						public ims.ocrr.vo.InvestigationUnderSpecimenVoCollection getColAddOnsHidden()
						{
							return (ims.ocrr.vo.InvestigationUnderSpecimenVoCollection)super.row.get(5);
						}
						public void setColAddOnsHidden(ims.ocrr.vo.InvestigationUnderSpecimenVoCollection value)
						{
							super.row.set(5, value);
						}
						public void setCellColAddOnsHiddenTooltip(String value)
						{
							super.row.setTooltip(5, value);
						}
						public void setColBtnSitesReadOnly(boolean value)
						{
							super.row.setReadOnly(6, value);
						}
						public boolean isColBtnSitesReadOnly()
						{
							return super.row.isReadOnly(6);
						}
						public void setColBtnSitesEmpty(boolean value)
						{
							super.row.setIsEmpty(6, value);
						}
						public boolean isColBtnSitesEmpty()
						{
							return super.row.isEmpty(6);
						}
						public void showColBtnSitesOpened()
						{
							super.row.showOpened(6);
						}
						public void setTooltipForColBtnSites(String value)
						{
							super.row.setTooltip(6, value);
						}
						public ims.framework.utils.Image getColBtnSites()
						{
							return (ims.framework.utils.Image)super.row.get(6);
						}
						public void setColBtnSites(ims.framework.utils.Image value)
						{
							super.row.set(6, value);
						}
						public void setCellColBtnSitesTooltip(String value)
						{
							super.row.setTooltip(6, value);
						}
						public void setColTypeReadOnly(boolean value)
						{
							super.row.setReadOnly(7, value);
						}
						public boolean isColTypeReadOnly()
						{
							return super.row.isReadOnly(7);
						}
						public void setColTypeEmpty(boolean value)
						{
							super.row.setIsEmpty(7, value);
						}
						public boolean isColTypeEmpty()
						{
							return super.row.isEmpty(7);
						}
						public void showColTypeOpened()
						{
							super.row.showOpened(7);
						}
						public void setTooltipForColType(String value)
						{
							super.row.setTooltip(7, value);
						}
						public ims.framework.controls.GridMutableComboBox getColType()
						{
							return new ims.framework.controls.GridMutableComboBox(super.row, 7);
						}
						public void setCellColTypeTooltip(String value)
						{
							super.row.setTooltip(7, value);
						}
						public ims.ocrr.vo.OrderInvestigationVo getValue()
						{
							return (ims.ocrr.vo.OrderInvestigationVo)super.row.getValue();
						}
						public void setValue(ims.ocrr.vo.OrderInvestigationVo value)
						{
							super.row.setValue(value);
						}
						public grdTestRow getParentRow()
						{
							return super.row.getParent() == null ? null : new grdTestRow(super.row.getParent());
						}
						public grdTestRowCollection getRows()
						{
							if(this.collection == null)
								this.collection = new grdTestRowCollection(super.row.getRows());
							return this.collection;
						}
						private grdTestRowCollection collection;
					}
					public static class grdTestRowCollection extends GridRowCollectionBridge
					{
						private static final long serialVersionUID = 1L;
						
						private grdTestRowCollection(GridRowCollection collection)
						{
							super(collection);
						}
						public grdTestRow get(int index)
						{
							return new grdTestRow(super.collection.get(index));
						}
						public grdTestRow newRow()
						{
							return new grdTestRow(super.collection.newRow());
						}
						public grdTestRow newRow(boolean autoSelect)
						{
							return new grdTestRow(super.collection.newRow(autoSelect));
						}
						public grdTestRow newRowAt(int index)
						{
							return new grdTestRow(super.collection.newRowAt(index));
						}
						public grdTestRow newRowAt(int index, boolean autoSelect)
						{
							return new grdTestRow(super.collection.newRowAt(index, autoSelect));
						}
					}
					public static class grdTestGrid extends GridBridge
					{
						private static final long serialVersionUID = 1L;
						
						public GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow[] getAllRows()
						{
							java.util.ArrayList rows = new java.util.ArrayList();
							for(int x = 0; x < getRows().size(); x++)
							{
								GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow row = getRows().get(x);
								rows.add(row);
								GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow[] childRows = getAllRows(row);
								for(int i = 0; i < childRows.length; i++)
								{
									rows.add(childRows[i]);
								}
							}
							GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow[] result = new GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow[rows.size()];
							for(int x = 0; x < rows.size(); x++)
							{
								result[x] = (GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow)rows.get(x);
							}
							return result;
						}
						public GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow[] getAllRows(GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow parentRow)
						{
							java.util.ArrayList rows = new java.util.ArrayList();
							for(int x = 0; x < parentRow.getRows().size(); x++)
							{
								GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow row = parentRow.getRows().get(x);
								rows.add(row);
								GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow[] childRows = getAllRows(row);
								for(int i = 0; i < childRows.length; i++)
								{
									rows.add(childRows[i]);
								}
							}
							GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow[] result = new GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow[rows.size()];
							for(int x = 0; x < rows.size(); x++)
							{
								result[x] = (GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow)rows.get(x);
							}
							return result;
						}
						public void expandAll()
						{
							expandCollapseAll(true);
						}
						public void collapseAll()
						{
							expandCollapseAll(false);
						}
						private void expandCollapseAll(boolean expand)
						{
							for(int x = 0; x < getRows().size(); x++)
							{
								GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow row = getRows().get(x);
								row.setExpanded(expand);
								expandCollapseRow(row, expand);
							}
						}
						private void expandCollapseRow(GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow parentRow, boolean expand)
						{
							for(int x = 0; x < parentRow.getRows().size(); x++)
							{
								GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow row = parentRow.getRows().get(x);
								row.setExpanded(expand);
								expandCollapseRow(row, expand);
							}
						}
						private void addTreeColumn(String caption, int captionAlignment, int width, boolean bold, boolean canGrow)
						{
							super.grid.addTreeColumn(caption, captionAlignment, width, bold, canGrow);
						}
						private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
						{
							super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
						}
						private void addButtonColumn(String caption, int captionAlignment, int alignment, int width, boolean bold, boolean canGrow)
						{
							super.grid.addButtonColumn(caption, captionAlignment, alignment, width, bold, canGrow);
						}
						private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
						{
							 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
						}
						public ims.ocrr.vo.OrderInvestigationVoCollection getValues()
						{
							ims.ocrr.vo.OrderInvestigationVoCollection listOfValues = new ims.ocrr.vo.OrderInvestigationVoCollection();
							for(int x = 0; x < this.getRows().size(); x++)
							{
								listOfValues.add(this.getRows().get(x).getValue());
							}
							return listOfValues;
						}
						public ims.ocrr.vo.OrderInvestigationVo getValue()
						{
							return (ims.ocrr.vo.OrderInvestigationVo)super.grid.getValue();
						}
						public void setValue(ims.ocrr.vo.OrderInvestigationVo value)
						{
							super.grid.setValue(value);
						}
						public grdTestRow getSelectedRow()
						{
							return super.grid.getSelectedRow() == null ? null : new grdTestRow(super.grid.getSelectedRow());
						}
						public int getSelectedRowIndex()
						{
							return super.grid.getSelectedRowIndex();
						}
						public grdTestRowCollection getRows()
						{
							return new grdTestRowCollection(super.grid.getRows());
						}
						public grdTestRow getRowByValue(ims.ocrr.vo.OrderInvestigationVo value)
						{
							GridRow row = super.grid.getRowByValue(value);
							return row == null?null:new grdTestRow(row);
						}
						public void setColTestHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(0, value);
						}
						public String getColTestHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(0);
						}
						public void setColSpecimenHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(1, value);
						}
						public String getColSpecimenHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(1);
						}
						public void setColTestNameHiddenHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(2, value);
						}
						public String getColTestNameHiddenHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(2);
						}
						public void setColHiddenOrderInvestigationSiteHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(3, value);
						}
						public String getColHiddenOrderInvestigationSiteHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(3);
						}
						public void setColSiteHiddenHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(4, value);
						}
						public String getColSiteHiddenHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(4);
						}
						public void setColAddOnsHiddenHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(5, value);
						}
						public String getColAddOnsHiddenHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(5);
						}
						public void setColBtnSitesHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(6, value);
						}
						public String getColBtnSitesHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(6);
						}
						public void setColTypeHeaderTooltip(String value)
						{
							super.grid.setColumnHeaderTooltip(7, value);
						}
						public String getColTypeHeaderTooltip()
						{
							return super.grid.getColumnHeaderTooltip(7);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 280, 18, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Collection Type:", new Integer(1), null, new Integer(0)}));
				
						// Button Controls
						RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 8, 14, 192, 24, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 50), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Source of Specimen", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 384, 16, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						ComboBox m_cmbRequestedTypeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 53), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbRequestedTypeTemp);
						cmbRequestedTypeComboBox cmbRequestedType = (cmbRequestedTypeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRequestedTypeComboBox.class, m_cmbRequestedTypeTemp);
						super.addComboBox(cmbRequestedType);
				
						// Grid Controls
						RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 48, 600, 424, ims.framework.enumerations.ControlAnchoring.ALL);
						Grid m_grdTestTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), new Integer(startTabIndex.intValue() + 54), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.FALSE, contextMenus.contextMenuSelectItems, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
						addControl(m_grdTestTemp);
						grdTestGrid grdTest = (grdTestGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTestGrid.class, m_grdTestTemp);
						grdTest.addTreeColumn("Investigations", 0, 375, false, true);
						grdTest.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTest.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTest.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTest.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTest.addStringColumn(" ", 0, 0, 0, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
						grdTest.addButtonColumn(" ", 0, 1, 35, false, true);
						grdTest.addMutableComboBoxColumn("Collection Type", 0, 0, -1, false, true, true, false, false, true, -1);
						super.addGrid(grdTest);
					}
		
					public Button btnSites()
					{
						return (Button)super.getControl(1);
					}
					public cmbRequestedTypeComboBox cmbRequestedType()
					{
						return (cmbRequestedTypeComboBox)super.getComboBox(0);
					}
					public grdTestGrid grdTest()
					{
						return (grdTestGrid)super.getGrid(0);
					}
				}
				public static class tabNowContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 600, 464, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), new Integer(startTabIndex.intValue() + 55), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public DynamicGrid dyngrdNow()
					{
						return (DynamicGrid)super.getControl(0);
					}
				}
				public static class tabPhlebotomyContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbTimeComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionTime value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionTime value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionTime value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionTime value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.ocrr.vo.lookups.SpecimenCollectionTime value)
						{
							return super.control.removeRow(value);
						}
						public ims.ocrr.vo.lookups.SpecimenCollectionTime getValue()
						{
							return (ims.ocrr.vo.lookups.SpecimenCollectionTime)super.control.getValue();
						}
						public void setValue(ims.ocrr.vo.lookups.SpecimenCollectionTime value)
						{
							super.control.setValue(value);
						}
					}
					public static class cmbDurationComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.ocrr.vo.lookups.OutPatientDuration value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.ocrr.vo.lookups.OutPatientDuration value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.ocrr.vo.lookups.OutPatientDuration value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.ocrr.vo.lookups.OutPatientDuration value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.ocrr.vo.lookups.OutPatientDuration value)
						{
							return super.control.removeRow(value);
						}
						public ims.ocrr.vo.lookups.OutPatientDuration getValue()
						{
							return (ims.ocrr.vo.lookups.OutPatientDuration)super.control.getValue();
						}
						public void setValue(ims.ocrr.vo.lookups.OutPatientDuration value)
						{
							super.control.setValue(value);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 16, 241, 89, 22, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Outpatient", new Integer(1), null, new Integer(1)}));
						RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 16, 10, 78, 22, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Inpatient", new Integer(1), null, new Integer(1)}));
				
						// Button Controls
						RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 520, 240, 88, 24, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), new Integer(startTabIndex.intValue() + 62), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Apply", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
						RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 520, 6, 88, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), new Integer(startTabIndex.intValue() + 58), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Apply", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				
						// Date Controls
						RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 248, 8, 112, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), new Integer(startTabIndex.intValue() + 56), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.TRUE, null, Boolean.FALSE, "Please select Date"}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 368, 8, 144, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						ComboBox m_cmbTimeTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 57), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), "Please select Round", Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbTimeTemp);
						cmbTimeComboBox cmbTime = (cmbTimeComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTimeComboBox.class, m_cmbTimeTemp);
						super.addComboBox(cmbTime);
						RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 368, 242, 144, 20, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						ComboBox m_cmbDurationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 61), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), "Please select Period", Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbDurationTemp);
						cmbDurationComboBox cmbDuration = (cmbDurationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDurationComboBox.class, m_cmbDurationTemp);
						super.addComboBox(cmbDuration);
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 8, 272, 600, 192, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 63), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
						RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 600, 192, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), new Integer(startTabIndex.intValue() + 59), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
				
						// IntBox Controls
						RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 248, 242, 112, 21, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
						super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), new Integer(startTabIndex.intValue() + 60), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, "Please enter Number", Boolean.FALSE, new Integer(3)}));
					}
		
					public Button btnApplyPhlenbOutPat()
					{
						return (Button)super.getControl(2);
					}
					public Button btnApplyPhlebInpat()
					{
						return (Button)super.getControl(3);
					}
					public DateControl dteCollect()
					{
						return (DateControl)super.getControl(4);
					}
					public cmbTimeComboBox cmbTime()
					{
						return (cmbTimeComboBox)super.getComboBox(0);
					}
					public cmbDurationComboBox cmbDuration()
					{
						return (cmbDurationComboBox)super.getComboBox(1);
					}
					public DynamicGrid dyngrdOutPat()
					{
						return (DynamicGrid)super.getControl(7);
					}
					public DynamicGrid dyngrdInpat()
					{
						return (DynamicGrid)super.getControl(8);
					}
					public IntBox intDuration()
					{
						return (IntBox)super.getControl(9);
					}
				}
				public static class tabPatientContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 600, 464, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), new Integer(startTabIndex.intValue() + 64), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public DynamicGrid dyngrdPatient()
					{
						return (DynamicGrid)super.getControl(0);
					}
				}
				public static class tabOtherContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public static class cmbRequestedTypeOtherComboBox extends ComboBoxBridge
					{
						private static final long serialVersionUID = 1L;
						
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionMethod value, String text)
						{
							super.control.newRow(value, text);
						}
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionMethod value, String text, ims.framework.utils.Image image)
						{
							super.control.newRow(value, text, image);
						}
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionMethod value, String text, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, textColor);
						}
						public void newRow(ims.ocrr.vo.lookups.SpecimenCollectionMethod value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
						{
							super.control.newRow(value, text, image, textColor);
						}
						public boolean removeRow(ims.ocrr.vo.lookups.SpecimenCollectionMethod value)
						{
							return super.control.removeRow(value);
						}
						public ims.ocrr.vo.lookups.SpecimenCollectionMethod getValue()
						{
							return (ims.ocrr.vo.lookups.SpecimenCollectionMethod)super.control.getValue();
						}
						public void setValue(ims.ocrr.vo.lookups.SpecimenCollectionMethod value)
						{
							super.control.setValue(value);
						}
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 65, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper67.getX()), new Integer(anchoringHelper67.getY()), new Integer(anchoringHelper67.getWidth()), new Integer(anchoringHelper67.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Collection:", new Integer(1), null, new Integer(0)}));
				
						// Button Controls
						RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 512, 8, 88, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper68.getX()), new Integer(anchoringHelper68.getY()), new Integer(anchoringHelper68.getWidth()), new Integer(anchoringHelper68.getHeight()), new Integer(startTabIndex.intValue() + 68), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Apply", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				
						// Date Controls
						RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 296, 8, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper69.getX()), new Integer(anchoringHelper69.getY()), new Integer(anchoringHelper69.getWidth()), new Integer(anchoringHelper69.getHeight()), new Integer(startTabIndex.intValue() + 66), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				
						// ComboBox Controls
						RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 80, 8, 192, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
						ComboBox m_cmbRequestedTypeOtherTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper70.getX()), new Integer(anchoringHelper70.getY()), new Integer(anchoringHelper70.getWidth()), new Integer(anchoringHelper70.getHeight()), new Integer(startTabIndex.intValue() + 65), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
						addControl(m_cmbRequestedTypeOtherTemp);
						cmbRequestedTypeOtherComboBox cmbRequestedTypeOther = (cmbRequestedTypeOtherComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbRequestedTypeOtherComboBox.class, m_cmbRequestedTypeOtherTemp);
						super.addComboBox(cmbRequestedTypeOther);
				
						// Time Controls
						RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 424, 8, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), new Integer(startTabIndex.intValue() + 67), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 8, 40, 600, 432, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), new Integer(startTabIndex.intValue() + 70), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public Button btnApplyOther()
					{
						return (Button)super.getControl(1);
					}
					public DateControl dteCollectOther()
					{
						return (DateControl)super.getControl(2);
					}
					public cmbRequestedTypeOtherComboBox cmbRequestedTypeOther()
					{
						return (cmbRequestedTypeOtherComboBox)super.getComboBox(0);
					}
					public TimeControl timCollectOther()
					{
						return (TimeControl)super.getControl(4);
					}
					public DynamicGrid dyngrdOther()
					{
						return (DynamicGrid)super.getControl(5);
					}
				}
				public static class tabSpecAlreadyCollectedContainer extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Label Controls
						RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 96, 9, 188, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Specimen Collection Date/Time:", new Integer(1), null, new Integer(0)}));
				
						// Button Controls
						RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 516, 7, 88, 24, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), new Integer(startTabIndex.intValue() + 73), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, "Apply", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				
						// Date Controls
						RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 300, 7, 120, 20, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(DateControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), new Integer(startTabIndex.intValue() + 71), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, null, Boolean.FALSE, null, Boolean.FALSE, null}));
				
						// Time Controls
						RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 428, 7, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
						super.addControl(factory.getControl(TimeControl.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), new Integer(startTabIndex.intValue() + 72), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,Boolean.TRUE, Boolean.FALSE, null, Boolean.FALSE, ""}));
				
						// Dynamic Grid Controls
						RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 12, 39, 600, 432, ims.framework.enumerations.ControlAnchoring.ALL);
						super.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), new Integer(startTabIndex.intValue() + 74), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, null, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE}));
					}
		
					public Button btnApplySpecAlreadyCollected()
					{
						return (Button)super.getControl(1);
					}
					public DateControl dteSpecAlreadyCollected()
					{
						return (DateControl)super.getControl(2);
					}
					public TimeControl timSpecAlreadyCollected()
					{
						return (TimeControl)super.getControl(3);
					}
					public DynamicGrid dyngrdSpecAlreadyCollected()
					{
						return (DynamicGrid)super.getControl(4);
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 632, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabRequestedTests = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Requested Investigations", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabRequestedTestsContainer m_tabRequestedTestsContainer = (tabRequestedTestsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRequestedTestsContainer.class, m_tabRequestedTests, factory);
					super.addContainer(m_tabRequestedTests, m_tabRequestedTestsContainer);
					ims.framework.utils.SizeInfo m_tabRequestedTestsDesignSize = new ims.framework.utils.SizeInfo(632, 504);
					ims.framework.utils.SizeInfo m_tabRequestedTestsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper78.getWidth(), anchoringHelper78.getHeight());
					m_tabRequestedTestsContainer.setContext(form, appForm, m_tabRequestedTests, loader, form_images_local, contextMenus, startControlID, m_tabRequestedTestsDesignSize, m_tabRequestedTestsRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 632, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabNow = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Now", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabNowContainer m_tabNowContainer = (tabNowContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabNowContainer.class, m_tabNow, factory);
					super.addContainer(m_tabNow, m_tabNowContainer);
					ims.framework.utils.SizeInfo m_tabNowDesignSize = new ims.framework.utils.SizeInfo(632, 504);
					ims.framework.utils.SizeInfo m_tabNowRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper79.getWidth(), anchoringHelper79.getHeight());
					m_tabNowContainer.setContext(form, appForm, m_tabNow, loader, form_images_local, contextMenus, startControlID, m_tabNowDesignSize, m_tabNowRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 632, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPhlebotomy = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Phlebotomy/Specimen Collection", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabPhlebotomyContainer m_tabPhlebotomyContainer = (tabPhlebotomyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPhlebotomyContainer.class, m_tabPhlebotomy, factory);
					super.addContainer(m_tabPhlebotomy, m_tabPhlebotomyContainer);
					ims.framework.utils.SizeInfo m_tabPhlebotomyDesignSize = new ims.framework.utils.SizeInfo(632, 504);
					ims.framework.utils.SizeInfo m_tabPhlebotomyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper80.getWidth(), anchoringHelper80.getHeight());
					m_tabPhlebotomyContainer.setContext(form, appForm, m_tabPhlebotomy, loader, form_images_local, contextMenus, startControlID, m_tabPhlebotomyDesignSize, m_tabPhlebotomyRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 632, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabPatient = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Patient", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabPatientContainer m_tabPatientContainer = (tabPatientContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPatientContainer.class, m_tabPatient, factory);
					super.addContainer(m_tabPatient, m_tabPatientContainer);
					ims.framework.utils.SizeInfo m_tabPatientDesignSize = new ims.framework.utils.SizeInfo(632, 504);
					ims.framework.utils.SizeInfo m_tabPatientRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper81.getWidth(), anchoringHelper81.getHeight());
					m_tabPatientContainer.setContext(form, appForm, m_tabPatient, loader, form_images_local, contextMenus, startControlID, m_tabPatientDesignSize, m_tabPatientRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 632, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabOther = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Other", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabOtherContainer m_tabOtherContainer = (tabOtherContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabOtherContainer.class, m_tabOther, factory);
					super.addContainer(m_tabOther, m_tabOtherContainer);
					ims.framework.utils.SizeInfo m_tabOtherDesignSize = new ims.framework.utils.SizeInfo(632, 504);
					ims.framework.utils.SizeInfo m_tabOtherRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper82.getWidth(), anchoringHelper82.getHeight());
					m_tabOtherContainer.setContext(form, appForm, m_tabOther, loader, form_images_local, contextMenus, startControlID, m_tabOtherDesignSize, m_tabOtherRuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 0, 8, 632, 504, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSpecAlreadyCollected = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen Already Collected", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
					tabSpecAlreadyCollectedContainer m_tabSpecAlreadyCollectedContainer = (tabSpecAlreadyCollectedContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecAlreadyCollectedContainer.class, m_tabSpecAlreadyCollected, factory);
					super.addContainer(m_tabSpecAlreadyCollected, m_tabSpecAlreadyCollectedContainer);
					ims.framework.utils.SizeInfo m_tabSpecAlreadyCollectedDesignSize = new ims.framework.utils.SizeInfo(632, 504);
					ims.framework.utils.SizeInfo m_tabSpecAlreadyCollectedRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper83.getWidth(), anchoringHelper83.getHeight());
					m_tabSpecAlreadyCollectedContainer.setContext(form, appForm, m_tabSpecAlreadyCollected, loader, form_images_local, contextMenus, startControlID, m_tabSpecAlreadyCollectedDesignSize, m_tabSpecAlreadyCollectedRuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabRequestedTests().setVisible(false);
					tabNow().setVisible(false);
					tabPhlebotomy().setVisible(false);
					tabPatient().setVisible(false);
					tabOther().setVisible(false);
					tabSpecAlreadyCollected().setVisible(false);
				}
				public void showtabRequestedTests()
				{
					tabNow().setVisible(false);
					tabPhlebotomy().setVisible(false);
					tabPatient().setVisible(false);
					tabOther().setVisible(false);
					tabSpecAlreadyCollected().setVisible(false);
					tabRequestedTests().setVisible(true);
				}
				public void showtabNow()
				{
					tabRequestedTests().setVisible(false);
					tabPhlebotomy().setVisible(false);
					tabPatient().setVisible(false);
					tabOther().setVisible(false);
					tabSpecAlreadyCollected().setVisible(false);
					tabNow().setVisible(true);
				}
				public void showtabPhlebotomy()
				{
					tabRequestedTests().setVisible(false);
					tabNow().setVisible(false);
					tabPatient().setVisible(false);
					tabOther().setVisible(false);
					tabSpecAlreadyCollected().setVisible(false);
					tabPhlebotomy().setVisible(true);
				}
				public void showtabPatient()
				{
					tabRequestedTests().setVisible(false);
					tabNow().setVisible(false);
					tabPhlebotomy().setVisible(false);
					tabOther().setVisible(false);
					tabSpecAlreadyCollected().setVisible(false);
					tabPatient().setVisible(true);
				}
				public void showtabOther()
				{
					tabRequestedTests().setVisible(false);
					tabNow().setVisible(false);
					tabPhlebotomy().setVisible(false);
					tabPatient().setVisible(false);
					tabSpecAlreadyCollected().setVisible(false);
					tabOther().setVisible(true);
				}
				public void showtabSpecAlreadyCollected()
				{
					tabRequestedTests().setVisible(false);
					tabNow().setVisible(false);
					tabPhlebotomy().setVisible(false);
					tabPatient().setVisible(false);
					tabOther().setVisible(false);
					tabSpecAlreadyCollected().setVisible(true);
				}
		
				public tabRequestedTestsContainer tabRequestedTests()
				{
					return (tabRequestedTestsContainer)super.layers.get(0);
				}
				public tabNowContainer tabNow()
				{
					return (tabNowContainer)super.layers.get(1);
				}
				public tabPhlebotomyContainer tabPhlebotomy()
				{
					return (tabPhlebotomyContainer)super.layers.get(2);
				}
				public tabPatientContainer tabPatient()
				{
					return (tabPatientContainer)super.layers.get(3);
				}
				public tabOtherContainer tabOther()
				{
					return (tabOtherContainer)super.layers.get(4);
				}
				public tabSpecAlreadyCollectedContainer tabSpecAlreadyCollected()
				{
					return (tabSpecAlreadyCollectedContainer)super.layers.get(5);
				}
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrPathologyLayer m_lyrPathologyLayer = (lyrPathologyLayer)LayerFlyweightFactory.getInstance().createLayer(lyrPathologyLayer.class, this, factory);
				super.addLayer(m_lyrPathologyLayer);
				m_lyrPathologyLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Button Controls
				RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 512, 520, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), new Integer(startTabIndex.intValue() + 76), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Next >>", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
				RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 8, 520, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
				super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), new Integer(startTabIndex.intValue() + 75), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "<< Previous", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
			}

			public lyrPathologyLayer lyrPathology()
			{
				return (lyrPathologyLayer)super.getLayer(0);
			}
			public Button btnGenerateSpecimens()
			{
				return (Button)super.getControl(6);
			}
			public Button btnPreviousPathology()
			{
				return (Button)super.getControl(7);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 192, 16, 640, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClinicalNotes = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinical Details", new Integer(startControlID.intValue() + -1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabClinicalNotesContainer m_tabClinicalNotesContainer = (tabClinicalNotesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClinicalNotesContainer.class, m_tabClinicalNotes, factory);
			super.addContainer(m_tabClinicalNotes, m_tabClinicalNotesContainer);
			ims.framework.utils.SizeInfo m_tabClinicalNotesDesignSize = new ims.framework.utils.SizeInfo(640, 576);
			ims.framework.utils.SizeInfo m_tabClinicalNotesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper86.getWidth(), anchoringHelper86.getHeight());
			m_tabClinicalNotesContainer.setContext(form, appForm, m_tabClinicalNotes, loader, form_images_local, contextMenus, startControlID, m_tabClinicalNotesDesignSize, m_tabClinicalNotesRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 192, 16, 640, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabSummaryClinicalInfo = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Summary Clinical Information", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabSummaryClinicalInfoContainer m_tabSummaryClinicalInfoContainer = (tabSummaryClinicalInfoContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSummaryClinicalInfoContainer.class, m_tabSummaryClinicalInfo, factory);
			super.addContainer(m_tabSummaryClinicalInfo, m_tabSummaryClinicalInfoContainer);
			ims.framework.utils.SizeInfo m_tabSummaryClinicalInfoDesignSize = new ims.framework.utils.SizeInfo(640, 576);
			ims.framework.utils.SizeInfo m_tabSummaryClinicalInfoRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper87.getWidth(), anchoringHelper87.getHeight());
			m_tabSummaryClinicalInfoContainer.setContext(form, appForm, m_tabSummaryClinicalInfo, loader, form_images_local, contextMenus, startControlID, m_tabSummaryClinicalInfoDesignSize, m_tabSummaryClinicalInfoRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 192, 16, 640, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabGenDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"General Order Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabGenDetailsContainer m_tabGenDetailsContainer = (tabGenDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGenDetailsContainer.class, m_tabGenDetails, factory);
			super.addContainer(m_tabGenDetails, m_tabGenDetailsContainer);
			ims.framework.utils.SizeInfo m_tabGenDetailsDesignSize = new ims.framework.utils.SizeInfo(640, 576);
			ims.framework.utils.SizeInfo m_tabGenDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper88.getWidth(), anchoringHelper88.getHeight());
			m_tabGenDetailsContainer.setContext(form, appForm, m_tabGenDetails, loader, form_images_local, contextMenus, startControlID, m_tabGenDetailsDesignSize, m_tabGenDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 192, 16, 640, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabRadDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Radiology Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabRadDetailsContainer m_tabRadDetailsContainer = (tabRadDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabRadDetailsContainer.class, m_tabRadDetails, factory);
			super.addContainer(m_tabRadDetails, m_tabRadDetailsContainer);
			ims.framework.utils.SizeInfo m_tabRadDetailsDesignSize = new ims.framework.utils.SizeInfo(640, 576);
			ims.framework.utils.SizeInfo m_tabRadDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper89.getWidth(), anchoringHelper89.getHeight());
			m_tabRadDetailsContainer.setContext(form, appForm, m_tabRadDetails, loader, form_images_local, contextMenus, startControlID, m_tabRadDetailsDesignSize, m_tabRadDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 192, 16, 640, 576, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPathDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pathology Specimen Details", new Integer(startControlID.intValue() + -1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(false), new Boolean(false), new Boolean(false)});
			tabPathDetailsContainer m_tabPathDetailsContainer = (tabPathDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPathDetailsContainer.class, m_tabPathDetails, factory);
			super.addContainer(m_tabPathDetails, m_tabPathDetailsContainer);
			ims.framework.utils.SizeInfo m_tabPathDetailsDesignSize = new ims.framework.utils.SizeInfo(640, 576);
			ims.framework.utils.SizeInfo m_tabPathDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper90.getWidth(), anchoringHelper90.getHeight());
			m_tabPathDetailsContainer.setContext(form, appForm, m_tabPathDetails, loader, form_images_local, contextMenus, startControlID, m_tabPathDetailsDesignSize, m_tabPathDetailsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabClinicalNotes().setVisible(false);
			tabSummaryClinicalInfo().setVisible(false);
			tabGenDetails().setVisible(false);
			tabRadDetails().setVisible(false);
			tabPathDetails().setVisible(false);
		}
		public void showtabClinicalNotes()
		{
			tabSummaryClinicalInfo().setVisible(false);
			tabGenDetails().setVisible(false);
			tabRadDetails().setVisible(false);
			tabPathDetails().setVisible(false);
			tabClinicalNotes().setVisible(true);
		}
		public void showtabSummaryClinicalInfo()
		{
			tabClinicalNotes().setVisible(false);
			tabGenDetails().setVisible(false);
			tabRadDetails().setVisible(false);
			tabPathDetails().setVisible(false);
			tabSummaryClinicalInfo().setVisible(true);
		}
		public void showtabGenDetails()
		{
			tabClinicalNotes().setVisible(false);
			tabSummaryClinicalInfo().setVisible(false);
			tabRadDetails().setVisible(false);
			tabPathDetails().setVisible(false);
			tabGenDetails().setVisible(true);
		}
		public void showtabRadDetails()
		{
			tabClinicalNotes().setVisible(false);
			tabSummaryClinicalInfo().setVisible(false);
			tabGenDetails().setVisible(false);
			tabPathDetails().setVisible(false);
			tabRadDetails().setVisible(true);
		}
		public void showtabPathDetails()
		{
			tabClinicalNotes().setVisible(false);
			tabSummaryClinicalInfo().setVisible(false);
			tabGenDetails().setVisible(false);
			tabRadDetails().setVisible(false);
			tabPathDetails().setVisible(true);
		}

		public tabClinicalNotesContainer tabClinicalNotes()
		{
			return (tabClinicalNotesContainer)super.layers.get(0);
		}
		public tabSummaryClinicalInfoContainer tabSummaryClinicalInfo()
		{
			return (tabSummaryClinicalInfoContainer)super.layers.get(1);
		}
		public tabGenDetailsContainer tabGenDetails()
		{
			return (tabGenDetailsContainer)super.layers.get(2);
		}
		public tabRadDetailsContainer tabRadDetails()
		{
			return (tabRadDetailsContainer)super.layers.get(3);
		}
		public tabPathDetailsContainer tabPathDetails()
		{
			return (tabPathDetailsContainer)super.layers.get(4);
		}
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
		if(!context.isValidContextType(ims.core.vo.CareContextShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.CareContextShortVo' of the global context variable 'Core.CurrentCareContext' is not supported.");
		if(!context.isValidContextType(ims.core.vo.ClinicalContactShortVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.ClinicalContactShortVo' of the global context variable 'Core.CurrentClinicalContact' is not supported.");
		if(!context.isValidContextType(ims.core.vo.PatientShort.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.core.vo.PatientShort' of the global context variable 'Core.PatientShort' is not supported.");
		if(!context.isValidContextType(ims.RefMan.vo.CatsReferralRefVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.RefMan.vo.CatsReferralRefVo' of the global context variable 'RefMan.CatsReferral' is not supported.");
		if(!context.isValidContextType(ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo' of the global context variable 'OCRR.RoleDisciplineSecurityLevels' is not supported.");
		if(!context.isValidContextType(FormName.class))
			throw new ims.framework.exceptions.CodingRuntimeException("The type 'FormName' of the global context variable 'Core.SelectingPatientForm' is not supported.");
	}
	private void validateMandatoryContext(Context context)
	{
		if(new ims.framework.ContextVariable("Core.PatientShort", "_cvp_Core.PatientShort").getValueIsNull(context))
			throw new ims.framework.exceptions.FormMandatoryContextMissingException("The required context data 'Core.PatientShort' is not available.");
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
			validateMandatoryContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuOCRRMyOrderAddInvestigation = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuOCRRMyOrderAddInvestigationADDINVESTIGATIONItem = factory.createMenuItem(startControlID.intValue() + 1, "Add Investigation", true, false, new Integer(116105), true, false);
		contextMenus.contextMenuOCRRMyOrderAddInvestigation.add(contextMenus.contextMenuOCRRMyOrderAddInvestigationADDINVESTIGATIONItem);
		contextMenus.contextMenuOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem = factory.createMenuItem(startControlID.intValue() + 2, "Remove Investigation", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOCRRMyOrderAddInvestigation.add(contextMenus.contextMenuOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem);
		form.registerMenu(contextMenus.contextMenuOCRRMyOrderAddInvestigation);
		contextMenus.contextMenuOCRRMyOrderReportTo = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuOCRRMyOrderReportToADDMOSItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Member of Staff", true, false, new Integer(103141), true, false);
		contextMenus.contextMenuOCRRMyOrderReportTo.add(contextMenus.contextMenuOCRRMyOrderReportToADDMOSItem);
		contextMenus.contextMenuOCRRMyOrderReportToADDGPItem = factory.createMenuItem(startControlID.intValue() + 4, "Add GP", true, false, new Integer(103139), true, false);
		contextMenus.contextMenuOCRRMyOrderReportTo.add(contextMenus.contextMenuOCRRMyOrderReportToADDGPItem);
		contextMenus.contextMenuOCRRMyOrderReportToAddItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Other", true, false, new Integer(102149), true, false);
		contextMenus.contextMenuOCRRMyOrderReportTo.add(contextMenus.contextMenuOCRRMyOrderReportToAddItem);
		contextMenus.contextMenuOCRRMyOrderReportToRemoveItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOCRRMyOrderReportTo.add(contextMenus.contextMenuOCRRMyOrderReportToRemoveItem);
		contextMenus.contextMenuOCRRMyOrderReportToADDWARDItem = factory.createMenuItem(startControlID.intValue() + 7, "Add Ward", true, false, new Integer(103111), true, false);
		contextMenus.contextMenuOCRRMyOrderReportTo.add(contextMenus.contextMenuOCRRMyOrderReportToADDWARDItem);
		contextMenus.contextMenuOCRRMyOrderReportToADDOUTPATItem = factory.createMenuItem(startControlID.intValue() + 8, "Add Outpatient Dept", true, false, new Integer(102182), true, false);
		contextMenus.contextMenuOCRRMyOrderReportTo.add(contextMenus.contextMenuOCRRMyOrderReportToADDOUTPATItem);
		form.registerMenu(contextMenus.contextMenuOCRRMyOrderReportTo);
		contextMenus.contextMenuSelectItems = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuSelectItemsSELECTItem = factory.createMenuItem(startControlID.intValue() + 9, "Site Selection", true, false, new Integer(103108), true, false);
		contextMenus.contextMenuSelectItems.add(contextMenus.contextMenuSelectItemsSELECTItem);
		contextMenus.contextMenuSelectItemsLINKItem = factory.createMenuItem(startControlID.intValue() + 10, "Link Add Ons", true, false, new Integer(101128), true, false);
		contextMenus.contextMenuSelectItems.add(contextMenus.contextMenuSelectItemsLINKItem);
		form.registerMenu(contextMenus.contextMenuSelectItems);


		// Layer Clasess
		lyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);
		super.addLayer(m_lyrDetailsLayer);
		m_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Button Controls
		RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 192, 600, 528, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 77), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Order", Boolean.TRUE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 728, 600, 104, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 78), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// Tree Controls
		RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 168, 576, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT);
		super.addControl(factory.getControl(TreeView.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.TOPBOTTOMLEFT,Boolean.TRUE, Boolean.FALSE, Boolean.FALSE, contextMenus.contextMenuOCRRMyOrderAddInvestigation, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrDetailsLayer lyrDetails()
	{
		return (lyrDetailsLayer)super.getLayer(0);
	}
	public Button btnOrder()
	{
		return (Button)super.getControl(5);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(6);
	}
	public TreeView treeComponents()
	{
		return (TreeView)super.getControl(7);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
			Core = new CoreForms();
			Clinical = new ClinicalForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				OrderPriorityDialog = new LocalFormName(116124);
				SelectandOrder = new LocalFormName(116112);
				SelectAndOrderDialog = new LocalFormName(116131);
				OrdersRequiringAuthorisation = new LocalFormName(116140);
				OrderSummaryDialog = new LocalFormName(116132);
				PrintOrder = new LocalFormName(116102);
				ChooseAlternativeContainersDialog = new LocalFormName(116159);
				MyOrderDialog = new LocalFormName(116137);
			}
			public final FormName OrderPriorityDialog;
			public final FormName SelectandOrder;
			public final FormName SelectAndOrderDialog;
			public final FormName OrdersRequiringAuthorisation;
			public final FormName OrderSummaryDialog;
			public final FormName PrintOrder;
			public final FormName ChooseAlternativeContainersDialog;
			public final FormName MyOrderDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				SelectItems = new LocalFormName(102229);
				Demographics = new LocalFormName(102101);
				OutpatientList = new LocalFormName(102230);
			}
			public final FormName SelectItems;
			public final FormName Demographics;
			public final FormName OutpatientList;
		}
		public final class ClinicalForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private ClinicalForms()
			{
				ClinicListWithICPActions = new LocalFormName(123155);
			}
			public final FormName ClinicListWithICPActions;
		}

		public OCRRForms OCRR;
		public CoreForms Core;
		public ClinicalForms Clinical;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			OCRR = new OCRRImages();
			Core = new CoreImages();
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Profile = new ImageHelper(116108, "Images/OCRR/Profile.gif", new Integer(16), new Integer(16));
				Investigation = new ImageHelper(116105, "Images/OCRR/Investigation.gif", new Integer(16), new Integer(16));
				Information = new ImageHelper(116101, "Images/OCRR/Information.gif", new Integer(16), new Integer(16));
				Question = new ImageHelper(116100, "Images/OCRR/Question.gif", new Integer(16), new Integer(16));
				QuestionCategory = new ImageHelper(116102, "Images/OCRR/QCategory.gif", new Integer(16), new Integer(16));
				Label = new ImageHelper(116111, "Images/OCRR/Label.gif", new Integer(16), new Integer(16));
				TestTube = new ImageHelper(116118, "Images/OCRR/itesttube.gif", new Integer(19), new Integer(19));
				SpecimenDetails16 = new ImageHelper(116147, "Images/OCRR/SpecimenDetails.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Profile;
			public final ims.framework.utils.Image Investigation;
			public final ims.framework.utils.Image Information;
			public final ims.framework.utils.Image Question;
			public final ims.framework.utils.Image QuestionCategory;
			public final ims.framework.utils.Image Label;
			public final ims.framework.utils.Image TestTube;
			public final ims.framework.utils.Image SpecimenDetails16;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				Form = new ImageHelper(102258, "Images/Core/Control_Form.gif", new Integer(16), new Integer(16));
				MandatoryQuestion = new ImageHelper(102272, "Images/Core/Help4.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Form;
			public final ims.framework.utils.Image MandatoryQuestion;
		}
		public final OCRRImages OCRR;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_OcsOrder = new ims.framework.ContextVariable("OcsOrder", prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier + "");
			cxl_OutpatientDurationLookupCollection = new ims.framework.ContextVariable("OutpatientDurationLookupCollection", prefix + "_lv_OCRR.MyOrder.__internal_x_context__OutpatientDurationLookupCollection_" + componentIdentifier + "");
			cxl_SelectedComponents = new ims.framework.ContextVariable("SelectedComponents", prefix + "_lv_OCRR.MyOrder.__internal_x_context__SelectedComponents_" + componentIdentifier + "");
			cxl_WorkListItems = new ims.framework.ContextVariable("WorkListItems", prefix + "_lv_OCRR.MyOrder.__internal_x_context__WorkListItems_" + componentIdentifier + "");
			cxl_ClosedRounds = new ims.framework.ContextVariable("ClosedRounds", prefix + "_lv_OCRR.MyOrder.__internal_x_context__ClosedRounds_" + componentIdentifier + "");
			cxl_UIValidationMessages = new ims.framework.ContextVariable("UIValidationMessages", prefix + "_lv_OCRR.MyOrder.__internal_x_context__UIValidationMessages_" + componentIdentifier + "");
			cxl_ContextDummyForReports = new ims.framework.ContextVariable("ContextDummyForReports", prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier + "");
			cxl_AddedOrderInvestigations = new ims.framework.ContextVariable("AddedOrderInvestigations", prefix + "_lv_OCRR.MyOrder.__internal_x_context__AddedOrderInvestigations_" + componentIdentifier + "");
			cxl_ActiveHospitals = new ims.framework.ContextVariable("ActiveHospitals", prefix + "_lv_OCRR.MyOrder.__internal_x_context__ActiveHospitals_" + componentIdentifier + "");
			cxl_PreviousForm = new ims.framework.ContextVariable("PreviousForm", prefix + "_lv_OCRR.MyOrder.__internal_x_context__PreviousForm_" + componentIdentifier + "");
			cxl_TestRowBeingModified = new ims.framework.ContextVariable("TestRowBeingModified", prefix + "_lv_OCRR.MyOrder.__internal_x_context__TestRowBeingModified_" + componentIdentifier + "");
			cxl_OriginalOrderInvestigationCollection = new ims.framework.ContextVariable("OriginalOrderInvestigationCollection", prefix + "_lv_OCRR.MyOrder.__internal_x_context__OriginalOrderInvestigationCollection_" + componentIdentifier + "");
			cxl_InvestigationToAmend = new ims.framework.ContextVariable("InvestigationToAmend", prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier + "");
			cxl_DFTCollectionType = new ims.framework.ContextVariable("DFTCollectionType", prefix + "_lv_OCRR.MyOrder.__internal_x_context__DFTCollectionType_" + componentIdentifier + "");
			cxl_OrderComponentsRestorePoint = new ims.framework.ContextVariable("OrderComponentsRestorePoint", prefix + "_lv_OCRR.MyOrder.__internal_x_context__OrderComponentsRestorePoint_" + componentIdentifier + "");
		}
		
		public boolean getOcsOrderIsNotNull()
		{
			return !cxl_OcsOrder.getValueIsNull(context);
		}
		public ims.ocrr.vo.OcsOrderVo getOcsOrder()
		{
			return (ims.ocrr.vo.OcsOrderVo)cxl_OcsOrder.getValue(context);
		}
		public void setOcsOrder(ims.ocrr.vo.OcsOrderVo value)
		{
			cxl_OcsOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OcsOrder = null;
		public boolean getOutpatientDurationLookupCollectionIsNotNull()
		{
			return !cxl_OutpatientDurationLookupCollection.getValueIsNull(context);
		}
		public ims.ocrr.vo.lookups.OutPatientDurationCollection getOutpatientDurationLookupCollection()
		{
			return (ims.ocrr.vo.lookups.OutPatientDurationCollection)cxl_OutpatientDurationLookupCollection.getValue(context);
		}
		public void setOutpatientDurationLookupCollection(ims.ocrr.vo.lookups.OutPatientDurationCollection value)
		{
			cxl_OutpatientDurationLookupCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OutpatientDurationLookupCollection = null;
		public boolean getSelectedComponentsIsNotNull()
		{
			return !cxl_SelectedComponents.getValueIsNull(context);
		}
		public ims.ocrr.vo.MyOrderComponentVoCollection getSelectedComponents()
		{
			return (ims.ocrr.vo.MyOrderComponentVoCollection)cxl_SelectedComponents.getValue(context);
		}
		public void setSelectedComponents(ims.ocrr.vo.MyOrderComponentVoCollection value)
		{
			cxl_SelectedComponents.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedComponents = null;
		public boolean getWorkListItemsIsNotNull()
		{
			return !cxl_WorkListItems.getValueIsNull(context);
		}
		public ims.ocrr.vo.SpecimenWorkListItemVoCollection getWorkListItems()
		{
			return (ims.ocrr.vo.SpecimenWorkListItemVoCollection)cxl_WorkListItems.getValue(context);
		}
		public void setWorkListItems(ims.ocrr.vo.SpecimenWorkListItemVoCollection value)
		{
			cxl_WorkListItems.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WorkListItems = null;
		public boolean getClosedRoundsIsNotNull()
		{
			return !cxl_ClosedRounds.getValueIsNull(context);
		}
		public ims.ocrr.vo.PhlebotomyRoundShortVoCollection getClosedRounds()
		{
			return (ims.ocrr.vo.PhlebotomyRoundShortVoCollection)cxl_ClosedRounds.getValue(context);
		}
		public void setClosedRounds(ims.ocrr.vo.PhlebotomyRoundShortVoCollection value)
		{
			cxl_ClosedRounds.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ClosedRounds = null;
		public boolean getUIValidationMessagesIsNotNull()
		{
			return !cxl_UIValidationMessages.getValueIsNull(context);
		}
		public java.util.ArrayList<String> getUIValidationMessages()
		{
			return (java.util.ArrayList<String>)cxl_UIValidationMessages.getValue(context);
		}
		public void setUIValidationMessages(java.util.ArrayList<String> value)
		{
			cxl_UIValidationMessages.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_UIValidationMessages = null;
		public boolean getContextDummyForReportsIsNotNull()
		{
			return !cxl_ContextDummyForReports.getValueIsNull(context);
		}
		public ims.ocrr.vo.OrderSpecimenVo getContextDummyForReports()
		{
			return (ims.ocrr.vo.OrderSpecimenVo)cxl_ContextDummyForReports.getValue(context);
		}
		public void setContextDummyForReports(ims.ocrr.vo.OrderSpecimenVo value)
		{
			cxl_ContextDummyForReports.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ContextDummyForReports = null;
		public boolean getAddedOrderInvestigationsIsNotNull()
		{
			return !cxl_AddedOrderInvestigations.getValueIsNull(context);
		}
		public ims.ocrr.vo.OrderInvestigationVoCollection getAddedOrderInvestigations()
		{
			return (ims.ocrr.vo.OrderInvestigationVoCollection)cxl_AddedOrderInvestigations.getValue(context);
		}
		public void setAddedOrderInvestigations(ims.ocrr.vo.OrderInvestigationVoCollection value)
		{
			cxl_AddedOrderInvestigations.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_AddedOrderInvestigations = null;
		public boolean getActiveHospitalsIsNotNull()
		{
			return !cxl_ActiveHospitals.getValueIsNull(context);
		}
		public ims.core.vo.LocShortMappingsVoCollection getActiveHospitals()
		{
			return (ims.core.vo.LocShortMappingsVoCollection)cxl_ActiveHospitals.getValue(context);
		}
		public void setActiveHospitals(ims.core.vo.LocShortMappingsVoCollection value)
		{
			cxl_ActiveHospitals.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ActiveHospitals = null;
		public boolean getPreviousFormIsNotNull()
		{
			return !cxl_PreviousForm.getValueIsNull(context);
		}
		public ims.framework.FormName getPreviousForm()
		{
			return (ims.framework.FormName)cxl_PreviousForm.getValue(context);
		}
		public void setPreviousForm(ims.framework.FormName value)
		{
			cxl_PreviousForm.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_PreviousForm = null;
		public boolean getTestRowBeingModifiedIsNotNull()
		{
			return !cxl_TestRowBeingModified.getValueIsNull(context);
		}
		public GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow getTestRowBeingModified()
		{
			return (GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow)cxl_TestRowBeingModified.getValue(context);
		}
		public void setTestRowBeingModified(GenForm.lyrDetailsLayer.tabPathDetailsContainer.lyrPathologyLayer.tabRequestedTestsContainer.grdTestRow value)
		{
			cxl_TestRowBeingModified.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_TestRowBeingModified = null;
		public boolean getOriginalOrderInvestigationCollectionIsNotNull()
		{
			return !cxl_OriginalOrderInvestigationCollection.getValueIsNull(context);
		}
		public ims.ocrr.vo.OrderInvestigationVoCollection getOriginalOrderInvestigationCollection()
		{
			return (ims.ocrr.vo.OrderInvestigationVoCollection)cxl_OriginalOrderInvestigationCollection.getValue(context);
		}
		public void setOriginalOrderInvestigationCollection(ims.ocrr.vo.OrderInvestigationVoCollection value)
		{
			cxl_OriginalOrderInvestigationCollection.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OriginalOrderInvestigationCollection = null;
		public boolean getInvestigationToAmendIsNotNull()
		{
			return !cxl_InvestigationToAmend.getValueIsNull(context);
		}
		public ims.ocrr.vo.OcsOrderVo getInvestigationToAmend()
		{
			return (ims.ocrr.vo.OcsOrderVo)cxl_InvestigationToAmend.getValue(context);
		}
		public void setInvestigationToAmend(ims.ocrr.vo.OcsOrderVo value)
		{
			cxl_InvestigationToAmend.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InvestigationToAmend = null;
		public boolean getDFTCollectionTypeIsNotNull()
		{
			return !cxl_DFTCollectionType.getValueIsNull(context);
		}
		public ims.ocrr.vo.DFTCollectionTypesConfigVo getDFTCollectionType()
		{
			return (ims.ocrr.vo.DFTCollectionTypesConfigVo)cxl_DFTCollectionType.getValue(context);
		}
		public void setDFTCollectionType(ims.ocrr.vo.DFTCollectionTypesConfigVo value)
		{
			cxl_DFTCollectionType.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DFTCollectionType = null;
		public boolean getOrderComponentsRestorePointIsNotNull()
		{
			return !cxl_OrderComponentsRestorePoint.getValueIsNull(context);
		}
		public ims.ocrr.vo.MyOrderComponentVoCollection getOrderComponentsRestorePoint()
		{
			return (ims.ocrr.vo.MyOrderComponentVoCollection)cxl_OrderComponentsRestorePoint.getValue(context);
		}
		public void setOrderComponentsRestorePoint(ims.ocrr.vo.MyOrderComponentVoCollection value)
		{
			cxl_OrderComponentsRestorePoint.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OrderComponentsRestorePoint = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class OCRRMyOrderAddInvestigation implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADDINVESTIGATION = 1;
			public static final int REMOVEINVESTIGATION = 2;
		}
		public void disableAllOCRRMyOrderAddInvestigationMenuItems()
		{
			this.contextMenuOCRRMyOrderAddInvestigationADDINVESTIGATIONItem.setEnabled(false);
			this.contextMenuOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem.setEnabled(false);
		}
		public void hideAllOCRRMyOrderAddInvestigationMenuItems()
		{
			this.contextMenuOCRRMyOrderAddInvestigationADDINVESTIGATIONItem.setVisible(false);
			this.contextMenuOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem.setVisible(false);
		}
		private Menu contextMenuOCRRMyOrderAddInvestigation;
		public MenuItem getOCRRMyOrderAddInvestigationADDINVESTIGATIONItem()
		{
			return this.contextMenuOCRRMyOrderAddInvestigationADDINVESTIGATIONItem;
		}
		private MenuItem contextMenuOCRRMyOrderAddInvestigationADDINVESTIGATIONItem;
		public MenuItem getOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem()
		{
			return this.contextMenuOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem;
		}
		private MenuItem contextMenuOCRRMyOrderAddInvestigationREMOVEINVESTIGATIONItem;
		public final class OCRRMyOrderReportTo implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADDMOS = 3;
			public static final int ADDGP = 4;
			public static final int Add = 5;
			public static final int Remove = 6;
			public static final int ADDWARD = 7;
			public static final int ADDOUTPAT = 8;
		}
		public void disableAllOCRRMyOrderReportToMenuItems()
		{
			this.contextMenuOCRRMyOrderReportToADDMOSItem.setEnabled(false);
			this.contextMenuOCRRMyOrderReportToADDGPItem.setEnabled(false);
			this.contextMenuOCRRMyOrderReportToAddItem.setEnabled(false);
			this.contextMenuOCRRMyOrderReportToRemoveItem.setEnabled(false);
			this.contextMenuOCRRMyOrderReportToADDWARDItem.setEnabled(false);
			this.contextMenuOCRRMyOrderReportToADDOUTPATItem.setEnabled(false);
		}
		public void hideAllOCRRMyOrderReportToMenuItems()
		{
			this.contextMenuOCRRMyOrderReportToADDMOSItem.setVisible(false);
			this.contextMenuOCRRMyOrderReportToADDGPItem.setVisible(false);
			this.contextMenuOCRRMyOrderReportToAddItem.setVisible(false);
			this.contextMenuOCRRMyOrderReportToRemoveItem.setVisible(false);
			this.contextMenuOCRRMyOrderReportToADDWARDItem.setVisible(false);
			this.contextMenuOCRRMyOrderReportToADDOUTPATItem.setVisible(false);
		}
		private Menu contextMenuOCRRMyOrderReportTo;
		public MenuItem getOCRRMyOrderReportToADDMOSItem()
		{
			return this.contextMenuOCRRMyOrderReportToADDMOSItem;
		}
		private MenuItem contextMenuOCRRMyOrderReportToADDMOSItem;
		public MenuItem getOCRRMyOrderReportToADDGPItem()
		{
			return this.contextMenuOCRRMyOrderReportToADDGPItem;
		}
		private MenuItem contextMenuOCRRMyOrderReportToADDGPItem;
		public MenuItem getOCRRMyOrderReportToAddItem()
		{
			return this.contextMenuOCRRMyOrderReportToAddItem;
		}
		private MenuItem contextMenuOCRRMyOrderReportToAddItem;
		public MenuItem getOCRRMyOrderReportToRemoveItem()
		{
			return this.contextMenuOCRRMyOrderReportToRemoveItem;
		}
		private MenuItem contextMenuOCRRMyOrderReportToRemoveItem;
		public MenuItem getOCRRMyOrderReportToADDWARDItem()
		{
			return this.contextMenuOCRRMyOrderReportToADDWARDItem;
		}
		private MenuItem contextMenuOCRRMyOrderReportToADDWARDItem;
		public MenuItem getOCRRMyOrderReportToADDOUTPATItem()
		{
			return this.contextMenuOCRRMyOrderReportToADDOUTPATItem;
		}
		private MenuItem contextMenuOCRRMyOrderReportToADDOUTPATItem;
		public final class SelectItems implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int SELECT = 9;
			public static final int LINK = 10;
		}
		public void disableAllSelectItemsMenuItems()
		{
			this.contextMenuSelectItemsSELECTItem.setEnabled(false);
			this.contextMenuSelectItemsLINKItem.setEnabled(false);
		}
		public void hideAllSelectItemsMenuItems()
		{
			this.contextMenuSelectItemsSELECTItem.setVisible(false);
			this.contextMenuSelectItemsLINKItem.setVisible(false);
		}
		private Menu contextMenuSelectItems;
		public MenuItem getSelectItemsSELECTItem()
		{
			return this.contextMenuSelectItemsSELECTItem;
		}
		private MenuItem contextMenuSelectItemsSELECTItem;
		public MenuItem getSelectItemsLINKItem()
		{
			return this.contextMenuSelectItemsLINKItem;
		}
		private MenuItem contextMenuSelectItemsLINKItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[137];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_OCRR.MyOrderQuestions", "BO-1070100016-ID", "ID_OcsQASession");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-ID", "ID_Gp");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_Core.GPDetails", "BO-1006100001-STATUS", "Status");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_Core.CareContextSelectDialog.ChosenCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_Core.CareContextSelectDialog.ChosenCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_Core.CareContextSelectDialog.ChosenCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-ID", "ID_OrderInvestigation");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-REPDATETIME", "RepDateTime");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-DISPLAYDATETIME", "DisplayDateTime");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-RESULTSTATUS", "ResultStatus");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-DISPLAYFLAG", "DisplayFlag");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderInvestigationToAmend", "BO-1070100002-APPOINTMENTDATE", "AppointmentDate");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_RefMan.OrderingHCP", "BO-1006100006-ID", "ID_MemberOfStaff");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_RefMan.OrderingHCP", "BO-1006100006-INITIALS", "Initials");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_RefMan.OrderingHCP", "BO-1006100006-SIGNATUREBLOCK", "SignatureBlock");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-ID", "ID_Location");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-NAME", "Name");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-ISACTIVE", "IsActive");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-TYPE", "Type");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-SECUREACCOMMODATION", "SecureAccommodation");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-TREATINGHOSP", "TreatingHosp");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_Core.SelectedLocationForOrdering", "BO-1007100007-REFERRINGHOSPITAL", "ReferringHospital");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_Core.OutpatientAttendanceForOrder", "BO-1014100001-ID", "ID_OutpatientAttendance");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_Core.OutpatientAttendanceForOrder", "BO-1014100001-APPOINTMENTDATETIME", "AppointmentDateTime");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_OCRR.PathologyResults.Order", "BO-1070100000-ID", "ID_OcsOrderSession");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_Rotherham.AppointmentToLink", "BO-1055100007-ID", "ID_Booking_Appointment");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_OCRR.OrderAwaitingAuthorisation", "BO-1070100000-ID", "ID_OcsOrderSession");
			fields[100] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-ID", "ID_OcsOrderSession");
			fields[101] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-CLINICALCONTACT", "ClinicalContact");
			fields[102] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-ADDITCLINNOTES", "AdditClinNotes");
			fields[103] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-ORDERINGHOSPITAL", "OrderingHospital");
			fields[104] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-AUTHORISATIONORDERSTATUS", "AuthorisationOrderStatus");
			fields[105] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-CLINICALTRIAL", "ClinicalTrial");
			fields[106] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-CLINICALTRIALTXT", "ClinicalTrialTxt");
			fields[107] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-PATMOBILITY", "PatMobility");
			fields[108] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-ORDERCATEGORY", "OrderCategory");
			fields[109] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-WASPROCESSED", "WasProcessed");
			fields[110] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-SUMMARYCLINICALINFORMATION", "SummaryClinicalInformation");
			fields[111] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__OcsOrder_" + componentIdentifier, "BO-1070100000-BLEEPEXTNUMBER", "BleepExtNumber");
			fields[112] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-ID", "ID_OrderSpecimen");
			fields[113] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-COLLDATETIMEPLACER", "CollDateTimePlacer");
			fields[114] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-COLLECTINGMOS", "CollectingMos");
			fields[115] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-ISPATIENTCOLLECT", "IsPatientCollect");
			fields[116] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-ISAWAITINGCOLLECTION", "IsAwaitingCollection");
			fields[117] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-SPECIMENSOURCE", "SpecimenSource");
			fields[118] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-DISCIPLINE", "Discipline");
			fields[119] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-ORDER", "Order");
			fields[120] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-INSTRUCTIONSTOCOLLECTOR", "InstructionsToCollector");
			fields[121] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-COLLECTORCOMMENT", "CollectorComment");
			fields[122] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-SITECD", "SiteCd");
			fields[123] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__ContextDummyForReports_" + componentIdentifier, "BO-1070100010-REQUESTEDTYPE", "RequestedType");
			fields[124] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-ID", "ID_OcsOrderSession");
			fields[125] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-CLINICALCONTACT", "ClinicalContact");
			fields[126] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-ADDITCLINNOTES", "AdditClinNotes");
			fields[127] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-ORDERINGHOSPITAL", "OrderingHospital");
			fields[128] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-AUTHORISATIONORDERSTATUS", "AuthorisationOrderStatus");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-CLINICALTRIAL", "ClinicalTrial");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-CLINICALTRIALTXT", "ClinicalTrialTxt");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-PATMOBILITY", "PatMobility");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-ORDERCATEGORY", "OrderCategory");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-WASPROCESSED", "WasProcessed");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-SUMMARYCLINICALINFORMATION", "SummaryClinicalInformation");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__InvestigationToAmend_" + componentIdentifier, "BO-1070100000-BLEEPEXTNUMBER", "BleepExtNumber");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.MyOrder.__internal_x_context__DFTCollectionType_" + componentIdentifier, "BO-1061100027-ID", "ID_DFTCollectionTypesConfig");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
