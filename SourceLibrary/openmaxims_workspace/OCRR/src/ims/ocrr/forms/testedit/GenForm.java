//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5007.25751)
// Copyright (C) 1995-2014 IMS MAXIMS. All rights reserved.
// WARNING: DO NOT MODIFY the content of this file

package ims.ocrr.forms.testedit;

import ims.framework.*;
import ims.framework.controls.*;
import ims.framework.enumerations.*;
import ims.framework.utils.RuntimeAnchoring;

public class GenForm extends FormBridge
{
	private static final long serialVersionUID = 1L;

	public boolean canProvideData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();
	}
	public boolean hasData(IReportSeed[] reportSeeds)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();
	}
	public IReportField[] getData(IReportSeed[] reportSeeds)
	{
		return getData(reportSeeds, false);
	}
	public IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)
	{
		return new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();
	}
	public static class lyrInvestigationsLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabProviderContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdHeadersRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdHeadersRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolProviderReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolProviderReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolProviderOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolProvider()
				{
					return (String)super.row.get(0);
				}
				public void setcolProvider(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolProviderTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolProvServiceReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolProvServiceReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolProvServiceOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolProvService()
				{
					return (String)super.row.get(1);
				}
				public void setcolProvService(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolProvServiceTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolProvSystemReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolProvSystemReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolProvSystemOpened()
				{
					super.row.showOpened(2);
				}
				public String getcolProvSystem()
				{
					return (String)super.row.get(2);
				}
				public void setcolProvSystem(String value)
				{
					super.row.set(2, value);
				}
				public void setCellcolProvSystemTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public void setcolInvCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(3, value);
				}
				public boolean iscolInvCodeReadOnly()
				{
					return super.row.isReadOnly(3);
				}
				public void showcolInvCodeOpened()
				{
					super.row.showOpened(3);
				}
				public String getcolInvCode()
				{
					return (String)super.row.get(3);
				}
				public void setcolInvCode(String value)
				{
					super.row.set(3, value);
				}
				public void setCellcolInvCodeTooltip(String value)
				{
					super.row.setTooltip(3, value);
				}
				public void setcolColourReadOnly(boolean value)
				{
					super.row.setReadOnly(4, value);
				}
				public boolean iscolColourReadOnly()
				{
					return super.row.isReadOnly(4);
				}
				public void showcolColourOpened()
				{
					super.row.showOpened(4);
				}
				public ims.framework.utils.Image getcolColour()
				{
					return (ims.framework.utils.Image)super.row.get(4);
				}
				public void setcolColour(ims.framework.utils.Image value)
				{
					super.row.set(4, value);
				}
				public void setCellcolColourTooltip(String value)
				{
					super.row.setTooltip(4, value);
				}
				public void setcolStatReadOnly(boolean value)
				{
					super.row.setReadOnly(5, value);
				}
				public boolean iscolStatReadOnly()
				{
					return super.row.isReadOnly(5);
				}
				public void showcolStatOpened()
				{
					super.row.showOpened(5);
				}
				public String getcolStat()
				{
					return (String)super.row.get(5);
				}
				public void setcolStat(String value)
				{
					super.row.set(5, value);
				}
				public void setCellcolStatTooltip(String value)
				{
					super.row.setTooltip(5, value);
				}
				public ims.ocrr.vo.InvestigationVo getValue()
				{
					return (ims.ocrr.vo.InvestigationVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.InvestigationVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdHeadersRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdHeadersRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdHeadersRow get(int index)
				{
					return new grdHeadersRow(super.collection.get(index));
				}
				public grdHeadersRow newRow()
				{
					return new grdHeadersRow(super.collection.newRow());
				}
				public grdHeadersRow newRow(boolean autoSelect)
				{
					return new grdHeadersRow(super.collection.newRow(autoSelect));
				}
				public grdHeadersRow newRowAt(int index)
				{
					return new grdHeadersRow(super.collection.newRowAt(index));
				}
				public grdHeadersRow newRowAt(int index, boolean autoSelect)
				{
					return new grdHeadersRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdHeadersGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				public ims.ocrr.vo.InvestigationVoCollection getValues()
				{
					ims.ocrr.vo.InvestigationVoCollection listOfValues = new ims.ocrr.vo.InvestigationVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.InvestigationVo getValue()
				{
					return (ims.ocrr.vo.InvestigationVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.InvestigationVo value)
				{
					super.grid.setValue(value);
				}
				public grdHeadersRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdHeadersRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdHeadersRowCollection getRows()
				{
					return new grdHeadersRowCollection(super.grid.getRows());
				}
				public grdHeadersRow getRowByValue(ims.ocrr.vo.InvestigationVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdHeadersRow(row);
				}
				public void setcolProviderHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolProviderHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolProvServiceHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolProvServiceHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolProvSystemHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolProvSystemHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
				public void setcolInvCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(3, value);
				}
				public String getcolInvCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(3);
				}
				public void setcolColourHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(4, value);
				}
				public String getcolColourHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(4);
				}
				public void setcolStatHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(5, value);
				}
				public String getcolStatHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(5);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 816, 240, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdHeadersTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), new Integer(startTabIndex.intValue() + 30), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRRProvider, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdHeadersTemp);
				grdHeadersGrid grdHeaders = (grdHeadersGrid)GridFlyweightFactory.getInstance().createGridBridge(grdHeadersGrid.class, m_grdHeadersTemp);
				grdHeaders.addStringColumn("Provider", 0, 0, 195, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHeaders.addStringColumn("Provider Service", 0, 0, 190, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHeaders.addStringColumn("Provider System", 0, 0, 140, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHeaders.addStringColumn("Investigation Code", 0, 0, 130, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdHeaders.addImageColumn("Colour", 1, 1, 55, true, 0);
				grdHeaders.addStringColumn("Status", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdHeaders);
			}

			public grdHeadersGrid grdHeaders()
			{
				return (grdHeadersGrid)super.getGrid(0);
			}
		}
		public static class tabGeneralDetContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbTurnAroundMeasureComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.lookups.MinReorderPeriod value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.lookups.MinReorderPeriod getValue()
				{
					return (ims.ocrr.vo.lookups.MinReorderPeriod)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.MinReorderPeriod value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbMinReOrderFemaleComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.lookups.MinReorderPeriod value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.lookups.MinReorderPeriod getValue()
				{
					return (ims.ocrr.vo.lookups.MinReorderPeriod)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.MinReorderPeriod value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbMinReOrderPeriodComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.lookups.MinReorderPeriod value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.lookups.MinReorderPeriod value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.lookups.MinReorderPeriod getValue()
				{
					return (ims.ocrr.vo.lookups.MinReorderPeriod)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.MinReorderPeriod value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbTestColorComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.framework.utils.Color value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.framework.utils.Color value)
				{
					return super.control.removeRow(value);
				}
				public ims.framework.utils.Color getValue()
				{
					return (ims.framework.utils.Color)super.control.getValue();
				}
				public void setValue(ims.framework.utils.Color value)
				{
					// should add value if does not exist
					if(value != null && super.control.getValues() != null)
					{
						boolean exist = false;
						for(int x = 0; x < super.control.getValues().size(); x++)
						{
							ims.framework.utils.Color item = (ims.framework.utils.Color)super.control.getValues().get(x);
							if(item != null && item.equals(value))
							{
								exist = true;
								break;
							}
						}
						if(!exist)
						{
							newRow(value, value.getText(), value.getImage());
						}
					}
					super.control.setValue(value);
				}
			}
			public static class cmbTestStatusComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
				{
					return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
				}
				public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbProviderServiceComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.LocSvcProviderSysVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.LocSvcProviderSysVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.LocSvcProviderSysVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.LocSvcProviderSysVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.LocSvcProviderSysVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.LocSvcProviderSysVo getValue()
				{
					return (ims.ocrr.vo.LocSvcProviderSysVo)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.LocSvcProviderSysVo value)
				{
					super.control.setValue(value);
				}
			}
			public static class cmbProviderComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.core.vo.LocationLiteVo value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.core.vo.LocationLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.core.vo.LocationLiteVo value)
				{
					return super.control.removeRow(value);
				}
				public ims.core.vo.LocationLiteVo getValue()
				{
					return (ims.core.vo.LocationLiteVo)super.control.getValue();
				}
				public void setValue(ims.core.vo.LocationLiteVo value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 176, 135, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Expected Turn Around:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 146, 131, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Turn Around Measure:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 440, 116, 212, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Minimum Re-Order Period (Female):", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 440, 86, 157, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Minimum Re-Order Period:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 440, 144, 50, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Add On:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 440, 56, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Colour:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 440, 168, 95, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Separate Order:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 440, 26, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Status:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 16, 116, 155, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Provider System Inv. Code", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 86, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Provider System:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Provider Service:", new Integer(1), null, new Integer(0)}));
				RuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 26, 56, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Provider:", new Integer(1), null, new Integer(0)}));
		
				// TextBox Controls
				RuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 176, 114, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), new Integer(startTabIndex.intValue() + 38), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
				RuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 176, 84, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), new Integer(startTabIndex.intValue() + 36), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 176, 144, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbTurnAroundMeasureTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), new Integer(startTabIndex.intValue() + 40), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTurnAroundMeasureTemp);
				cmbTurnAroundMeasureComboBox cmbTurnAroundMeasure = (cmbTurnAroundMeasureComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTurnAroundMeasureComboBox.class, m_cmbTurnAroundMeasureTemp);
				super.addComboBox(cmbTurnAroundMeasure);
				RuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 720, 114, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbMinReOrderFemaleTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), new Integer(startTabIndex.intValue() + 49), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbMinReOrderFemaleTemp);
				cmbMinReOrderFemaleComboBox cmbMinReOrderFemale = (cmbMinReOrderFemaleComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMinReOrderFemaleComboBox.class, m_cmbMinReOrderFemaleTemp);
				super.addComboBox(cmbMinReOrderFemale);
				RuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 720, 84, 96, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbMinReOrderPeriodTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), new Integer(startTabIndex.intValue() + 47), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbMinReOrderPeriodTemp);
				cmbMinReOrderPeriodComboBox cmbMinReOrderPeriod = (cmbMinReOrderPeriodComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbMinReOrderPeriodComboBox.class, m_cmbMinReOrderPeriodTemp);
				super.addComboBox(cmbMinReOrderPeriod);
				RuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 592, 54, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbTestColorTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), new Integer(startTabIndex.intValue() + 45), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbTestColorTemp);
				cmbTestColorComboBox cmbTestColor = (cmbTestColorComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTestColorComboBox.class, m_cmbTestColorTemp);
				super.addComboBox(cmbTestColor);
				RuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 592, 24, 224, 20, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
				ComboBox m_cmbTestStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), new Integer(startTabIndex.intValue() + 43), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbTestStatusTemp);
				cmbTestStatusComboBox cmbTestStatus = (cmbTestStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbTestStatusComboBox.class, m_cmbTestStatusTemp);
				super.addComboBox(cmbTestStatus);
				RuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 176, 54, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbProviderServiceTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), new Integer(startTabIndex.intValue() + 34), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbProviderServiceTemp);
				cmbProviderServiceComboBox cmbProviderService = (cmbProviderServiceComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProviderServiceComboBox.class, m_cmbProviderServiceTemp);
				super.addComboBox(cmbProviderService);
				RuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 176, 24, 240, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbProviderTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 32), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
				addControl(m_cmbProviderTemp);
				cmbProviderComboBox cmbProvider = (cmbProviderComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProviderComboBox.class, m_cmbProviderTemp);
				super.addComboBox(cmbProvider);
		
				// CheckBox Controls
				RuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 592, 144, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 51), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
				RuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 592, 168, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 53), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 176, 174, 100, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 41), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 664, 114, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 48), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(9)}));
				RuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 664, 84, 48, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 46), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.FALSE, new Integer(9)}));
			}

			public Label lblExpectedTurnAround()
			{
				return (Label)super.getControl(0);
			}
			public Label lblTurnAroundMeasure()
			{
				return (Label)super.getControl(1);
			}
			public Label lblMinReOrderFemale()
			{
				return (Label)super.getControl(2);
			}
			public Label lblMinReOrderMale()
			{
				return (Label)super.getControl(3);
			}
			public Label lblAddOn()
			{
				return (Label)super.getControl(4);
			}
			public Label lblSepOrder()
			{
				return (Label)super.getControl(6);
			}
			public TextBox txtInvestigationCode()
			{
				return (TextBox)super.getControl(12);
			}
			public TextBox txtProviderSys()
			{
				return (TextBox)super.getControl(13);
			}
			public cmbTurnAroundMeasureComboBox cmbTurnAroundMeasure()
			{
				return (cmbTurnAroundMeasureComboBox)super.getComboBox(0);
			}
			public cmbMinReOrderFemaleComboBox cmbMinReOrderFemale()
			{
				return (cmbMinReOrderFemaleComboBox)super.getComboBox(1);
			}
			public cmbMinReOrderPeriodComboBox cmbMinReOrderPeriod()
			{
				return (cmbMinReOrderPeriodComboBox)super.getComboBox(2);
			}
			public cmbTestColorComboBox cmbTestColor()
			{
				return (cmbTestColorComboBox)super.getComboBox(3);
			}
			public cmbTestStatusComboBox cmbTestStatus()
			{
				return (cmbTestStatusComboBox)super.getComboBox(4);
			}
			public cmbProviderServiceComboBox cmbProviderService()
			{
				return (cmbProviderServiceComboBox)super.getComboBox(5);
			}
			public cmbProviderComboBox cmbProvider()
			{
				return (cmbProviderComboBox)super.getComboBox(6);
			}
			public CheckBox chkAddOn()
			{
				return (CheckBox)super.getControl(21);
			}
			public CheckBox chkTestSeperateOrder()
			{
				return (CheckBox)super.getControl(22);
			}
			public IntBox intExpectedTurnAround()
			{
				return (IntBox)super.getControl(23);
			}
			public IntBox intMinReOrderFemale()
			{
				return (IntBox)super.getControl(24);
			}
			public IntBox intMinReOrderPeriod()
			{
				return (IntBox)super.getControl(25);
			}
		}
		public static class tabPathologyDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class lyrSpecimensLayer extends Layer
			{
				private static final long serialVersionUID = 1L;
				public static class tabSpecimen1Container extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 196, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccSpecimen1Form = loader.loadComponent(116170, appForm, startControlID * 10 + 1000, anchoringHelper28.getSize(), instance1, startTabIndex.intValue() + 58, skipContextValidation);
						//ims.framework.Control m_ccSpecimen1Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(0), new Integer(0), new Integer(800), new Integer(196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 58), m_ccSpecimen1Form, instance1 } );
						ims.framework.Control m_ccSpecimen1Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1028),  new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 58), m_ccSpecimen1Form, instance1, Boolean.FALSE } );
						super.addControl(m_ccSpecimen1Control);
						Menu[] menus1 = m_ccSpecimen1Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.ocrr.forms.specimenconfiguration.IComponent ccSpecimen1()
					{
						return (ims.ocrr.forms.specimenconfiguration.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccSpecimen1ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccSpecimen1Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccSpecimen1Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccSpecimen1Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccSpecimen1Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabSpecimen2Container extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 196, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccSpecimen2Form = loader.loadComponent(116170, appForm, startControlID * 10 + 2000, anchoringHelper29.getSize(), instance1, startTabIndex.intValue() + 1060, skipContextValidation);
						//ims.framework.Control m_ccSpecimen2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(0), new Integer(0), new Integer(800), new Integer(196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1060), m_ccSpecimen2Form, instance1 } );
						ims.framework.Control m_ccSpecimen2Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1030),  new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 1060), m_ccSpecimen2Form, instance1, Boolean.FALSE } );
						super.addControl(m_ccSpecimen2Control);
						Menu[] menus1 = m_ccSpecimen2Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.ocrr.forms.specimenconfiguration.IComponent ccSpecimen2()
					{
						return (ims.ocrr.forms.specimenconfiguration.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccSpecimen2ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccSpecimen2Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccSpecimen2Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccSpecimen2Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccSpecimen2Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabSpecimen3Container extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 196, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccSpecimen3Form = loader.loadComponent(116170, appForm, startControlID * 10 + 3000, anchoringHelper30.getSize(), instance1, startTabIndex.intValue() + 2062, skipContextValidation);
						//ims.framework.Control m_ccSpecimen3Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(0), new Integer(0), new Integer(800), new Integer(196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2062), m_ccSpecimen3Form, instance1 } );
						ims.framework.Control m_ccSpecimen3Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1032),  new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 2062), m_ccSpecimen3Form, instance1, Boolean.FALSE } );
						super.addControl(m_ccSpecimen3Control);
						Menu[] menus1 = m_ccSpecimen3Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.ocrr.forms.specimenconfiguration.IComponent ccSpecimen3()
					{
						return (ims.ocrr.forms.specimenconfiguration.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccSpecimen3ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccSpecimen3Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccSpecimen3Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccSpecimen3Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccSpecimen3Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabSpecimen4Container extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 196, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccSpecimen4Form = loader.loadComponent(116170, appForm, startControlID * 10 + 4000, anchoringHelper31.getSize(), instance1, startTabIndex.intValue() + 3064, skipContextValidation);
						//ims.framework.Control m_ccSpecimen4Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(0), new Integer(0), new Integer(800), new Integer(196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3064), m_ccSpecimen4Form, instance1 } );
						ims.framework.Control m_ccSpecimen4Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1034),  new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 3064), m_ccSpecimen4Form, instance1, Boolean.FALSE } );
						super.addControl(m_ccSpecimen4Control);
						Menu[] menus1 = m_ccSpecimen4Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.ocrr.forms.specimenconfiguration.IComponent ccSpecimen4()
					{
						return (ims.ocrr.forms.specimenconfiguration.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccSpecimen4ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccSpecimen4Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccSpecimen4Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccSpecimen4Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccSpecimen4Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabSpecimen5Container extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 196, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccSpecimen5Form = loader.loadComponent(116170, appForm, startControlID * 10 + 5000, anchoringHelper32.getSize(), instance1, startTabIndex.intValue() + 4066, skipContextValidation);
						//ims.framework.Control m_ccSpecimen5Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1035), new Integer(0), new Integer(0), new Integer(800), new Integer(196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4066), m_ccSpecimen5Form, instance1 } );
						ims.framework.Control m_ccSpecimen5Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1036),  new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 4066), m_ccSpecimen5Form, instance1, Boolean.FALSE } );
						super.addControl(m_ccSpecimen5Control);
						Menu[] menus1 = m_ccSpecimen5Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.ocrr.forms.specimenconfiguration.IComponent ccSpecimen5()
					{
						return (ims.ocrr.forms.specimenconfiguration.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccSpecimen5ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccSpecimen5Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccSpecimen5Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccSpecimen5Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccSpecimen5Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabSpecimen6Container extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 196, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccSpecimen6Form = loader.loadComponent(116170, appForm, startControlID * 10 + 6000, anchoringHelper33.getSize(), instance1, startTabIndex.intValue() + 5068, skipContextValidation);
						//ims.framework.Control m_ccSpecimen6Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1037), new Integer(0), new Integer(0), new Integer(800), new Integer(196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5068), m_ccSpecimen6Form, instance1 } );
						ims.framework.Control m_ccSpecimen6Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1038),  new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 5068), m_ccSpecimen6Form, instance1, Boolean.FALSE } );
						super.addControl(m_ccSpecimen6Control);
						Menu[] menus1 = m_ccSpecimen6Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.ocrr.forms.specimenconfiguration.IComponent ccSpecimen6()
					{
						return (ims.ocrr.forms.specimenconfiguration.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccSpecimen6ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccSpecimen6Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccSpecimen6Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccSpecimen6Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccSpecimen6Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabSpecimen7Container extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 196, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccSpecimen7Form = loader.loadComponent(116170, appForm, startControlID * 10 + 7000, anchoringHelper34.getSize(), instance1, startTabIndex.intValue() + 6070, skipContextValidation);
						//ims.framework.Control m_ccSpecimen7Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1039), new Integer(0), new Integer(0), new Integer(800), new Integer(196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 6070), m_ccSpecimen7Form, instance1 } );
						ims.framework.Control m_ccSpecimen7Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1040),  new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 6070), m_ccSpecimen7Form, instance1, Boolean.FALSE } );
						super.addControl(m_ccSpecimen7Control);
						Menu[] menus1 = m_ccSpecimen7Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.ocrr.forms.specimenconfiguration.IComponent ccSpecimen7()
					{
						return (ims.ocrr.forms.specimenconfiguration.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccSpecimen7ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccSpecimen7Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccSpecimen7Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccSpecimen7Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccSpecimen7Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabSpecimen8Container extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper35 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 196, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccSpecimen8Form = loader.loadComponent(116170, appForm, startControlID * 10 + 8000, anchoringHelper35.getSize(), instance1, startTabIndex.intValue() + 7071, skipContextValidation);
						//ims.framework.Control m_ccSpecimen8Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1041), new Integer(0), new Integer(0), new Integer(800), new Integer(196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 7071), m_ccSpecimen8Form, instance1 } );
						ims.framework.Control m_ccSpecimen8Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1042),  new Integer(anchoringHelper35.getX()), new Integer(anchoringHelper35.getY()), new Integer(anchoringHelper35.getWidth()), new Integer(anchoringHelper35.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 7071), m_ccSpecimen8Form, instance1, Boolean.FALSE } );
						super.addControl(m_ccSpecimen8Control);
						Menu[] menus1 = m_ccSpecimen8Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.ocrr.forms.specimenconfiguration.IComponent ccSpecimen8()
					{
						return (ims.ocrr.forms.specimenconfiguration.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccSpecimen8ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccSpecimen8Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccSpecimen8Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccSpecimen8Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccSpecimen8Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
				public static class tabSpecimen9Container extends LayerBridge
				{
					private static final long serialVersionUID = 1L;
					public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
					{
						super.container.setTabActivatedEvent(delegate);
					}
					protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
					{
						if(form == null)
							throw new RuntimeException("Invalid form");
						if(appForm == null)
							throw new RuntimeException("Invalid application form");
						if(control == null); // this is to avoid eclipse warning only.
						if(loader == null); // this is to avoid eclipse warning only.
						if(form_images_local == null); // this is to avoid eclipse warning only.
						if(contextMenus == null); // this is to avoid eclipse warning only.
						if(startControlID == null)
							throw new RuntimeException("Invalid startControlID");
						if(designSize == null); // this is to avoid eclipse warning only.
						if(runtimeSize == null); // this is to avoid eclipse warning only.
						if(startTabIndex == null)
							throw new RuntimeException("Invalid startTabIndex");
				
				
						// Custom Controls
						ims.framework.CustomComponent instance1 = factory.getEmptyCustomComponent();
						RuntimeAnchoring anchoringHelper36 = new RuntimeAnchoring(designSize, runtimeSize, 0, 0, 800, 196, ims.framework.enumerations.ControlAnchoring.ALL);
						ims.framework.FormUiLogic m_ccSpecimen9Form = loader.loadComponent(116170, appForm, startControlID * 10 + 9000, anchoringHelper36.getSize(), instance1, startTabIndex.intValue() + 8072, skipContextValidation);
						//ims.framework.Control m_ccSpecimen9Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1043), new Integer(0), new Integer(0), new Integer(800), new Integer(196), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8072), m_ccSpecimen9Form, instance1 } );
						ims.framework.Control m_ccSpecimen9Control = factory.getControl(CustomComponent.class, new Object[] { control, new Integer(startControlID.intValue() + 1044),  new Integer(anchoringHelper36.getX()), new Integer(anchoringHelper36.getY()), new Integer(anchoringHelper36.getWidth()), new Integer(anchoringHelper36.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL, new Integer(startTabIndex.intValue() + 8072), m_ccSpecimen9Form, instance1, Boolean.FALSE } );
						super.addControl(m_ccSpecimen9Control);
						Menu[] menus1 = m_ccSpecimen9Form.getForm().getRegisteredMenus();
						for(int x = 0; x < menus1.length; x++)
						{
							form.registerMenu(menus1[x]);
						}
					}
		
					public ims.ocrr.forms.specimenconfiguration.IComponent ccSpecimen9()
					{
						return (ims.ocrr.forms.specimenconfiguration.IComponent)((ims.framework.cn.controls.CustomComponent)super.getControl(0)).getLogic();
					}
					public void setccSpecimen9ValueChangedEvent(ims.framework.delegates.ValueChanged delegate)
					{
						((CustomComponent)super.getControl(0)).setValueChangedEvent(delegate);
					}
					public void setccSpecimen9Visible(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setVisible(value);
					}
					public boolean isccSpecimen9Visible()
					{
						return ((ims.framework.Control)super.getControl(0)).isVisible();
					}
					public void setccSpecimen9Enabled(boolean value)
					{
						((ims.framework.Control)super.getControl(0)).setEnabled(value);
					}
					public boolean isccSpecimen9Enabled()
					{
						return ((ims.framework.Control)super.getControl(0)).isEnabled();
					}
				}
		
				protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
				{
					if(form == null)
						throw new RuntimeException("Invalid form");
					if(appForm == null)
						throw new RuntimeException("Invalid application form");
					if(control == null); // this is to avoid eclipse warning only.
					if(loader == null); // this is to avoid eclipse warning only.
					if(form_images_local == null); // this is to avoid eclipse warning only.
					if(contextMenus == null); // this is to avoid eclipse warning only.
					if(startControlID == null)
						throw new RuntimeException("Invalid startControlID");
					if(designSize == null); // this is to avoid eclipse warning only.
					if(runtimeSize == null); // this is to avoid eclipse warning only.
					if(startTabIndex == null)
						throw new RuntimeException("Invalid startTabIndex");
					RuntimeAnchoring anchoringHelper37 = new RuntimeAnchoring(designSize, runtimeSize, 8, 28, 808, 222, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSpecimen1 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1045), new Integer(anchoringHelper37.getX()), new Integer(anchoringHelper37.getY()), new Integer(anchoringHelper37.getWidth()), new Integer(anchoringHelper37.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen1", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabSpecimen1Container m_tabSpecimen1Container = (tabSpecimen1Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimen1Container.class, m_tabSpecimen1, factory);
					super.addContainer(m_tabSpecimen1, m_tabSpecimen1Container);
					ims.framework.utils.SizeInfo m_tabSpecimen1DesignSize = new ims.framework.utils.SizeInfo(808, 222);
					ims.framework.utils.SizeInfo m_tabSpecimen1RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper37.getWidth(), anchoringHelper37.getHeight());
					m_tabSpecimen1Container.setContext(form, appForm, m_tabSpecimen1, loader, form_images_local, contextMenus, startControlID, m_tabSpecimen1DesignSize, m_tabSpecimen1RuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper38 = new RuntimeAnchoring(designSize, runtimeSize, 8, 28, 808, 222, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSpecimen2 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1046), new Integer(anchoringHelper38.getX()), new Integer(anchoringHelper38.getY()), new Integer(anchoringHelper38.getWidth()), new Integer(anchoringHelper38.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen2", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabSpecimen2Container m_tabSpecimen2Container = (tabSpecimen2Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimen2Container.class, m_tabSpecimen2, factory);
					super.addContainer(m_tabSpecimen2, m_tabSpecimen2Container);
					ims.framework.utils.SizeInfo m_tabSpecimen2DesignSize = new ims.framework.utils.SizeInfo(808, 222);
					ims.framework.utils.SizeInfo m_tabSpecimen2RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper38.getWidth(), anchoringHelper38.getHeight());
					m_tabSpecimen2Container.setContext(form, appForm, m_tabSpecimen2, loader, form_images_local, contextMenus, startControlID, m_tabSpecimen2DesignSize, m_tabSpecimen2RuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper39 = new RuntimeAnchoring(designSize, runtimeSize, 8, 28, 808, 222, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSpecimen3 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1047), new Integer(anchoringHelper39.getX()), new Integer(anchoringHelper39.getY()), new Integer(anchoringHelper39.getWidth()), new Integer(anchoringHelper39.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen3", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabSpecimen3Container m_tabSpecimen3Container = (tabSpecimen3Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimen3Container.class, m_tabSpecimen3, factory);
					super.addContainer(m_tabSpecimen3, m_tabSpecimen3Container);
					ims.framework.utils.SizeInfo m_tabSpecimen3DesignSize = new ims.framework.utils.SizeInfo(808, 222);
					ims.framework.utils.SizeInfo m_tabSpecimen3RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper39.getWidth(), anchoringHelper39.getHeight());
					m_tabSpecimen3Container.setContext(form, appForm, m_tabSpecimen3, loader, form_images_local, contextMenus, startControlID, m_tabSpecimen3DesignSize, m_tabSpecimen3RuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper40 = new RuntimeAnchoring(designSize, runtimeSize, 8, 28, 808, 222, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSpecimen4 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1048), new Integer(anchoringHelper40.getX()), new Integer(anchoringHelper40.getY()), new Integer(anchoringHelper40.getWidth()), new Integer(anchoringHelper40.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen4", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabSpecimen4Container m_tabSpecimen4Container = (tabSpecimen4Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimen4Container.class, m_tabSpecimen4, factory);
					super.addContainer(m_tabSpecimen4, m_tabSpecimen4Container);
					ims.framework.utils.SizeInfo m_tabSpecimen4DesignSize = new ims.framework.utils.SizeInfo(808, 222);
					ims.framework.utils.SizeInfo m_tabSpecimen4RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper40.getWidth(), anchoringHelper40.getHeight());
					m_tabSpecimen4Container.setContext(form, appForm, m_tabSpecimen4, loader, form_images_local, contextMenus, startControlID, m_tabSpecimen4DesignSize, m_tabSpecimen4RuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper41 = new RuntimeAnchoring(designSize, runtimeSize, 8, 28, 808, 222, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSpecimen5 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1049), new Integer(anchoringHelper41.getX()), new Integer(anchoringHelper41.getY()), new Integer(anchoringHelper41.getWidth()), new Integer(anchoringHelper41.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen5", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabSpecimen5Container m_tabSpecimen5Container = (tabSpecimen5Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimen5Container.class, m_tabSpecimen5, factory);
					super.addContainer(m_tabSpecimen5, m_tabSpecimen5Container);
					ims.framework.utils.SizeInfo m_tabSpecimen5DesignSize = new ims.framework.utils.SizeInfo(808, 222);
					ims.framework.utils.SizeInfo m_tabSpecimen5RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper41.getWidth(), anchoringHelper41.getHeight());
					m_tabSpecimen5Container.setContext(form, appForm, m_tabSpecimen5, loader, form_images_local, contextMenus, startControlID, m_tabSpecimen5DesignSize, m_tabSpecimen5RuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper42 = new RuntimeAnchoring(designSize, runtimeSize, 8, 28, 808, 222, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSpecimen6 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1050), new Integer(anchoringHelper42.getX()), new Integer(anchoringHelper42.getY()), new Integer(anchoringHelper42.getWidth()), new Integer(anchoringHelper42.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen6", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabSpecimen6Container m_tabSpecimen6Container = (tabSpecimen6Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimen6Container.class, m_tabSpecimen6, factory);
					super.addContainer(m_tabSpecimen6, m_tabSpecimen6Container);
					ims.framework.utils.SizeInfo m_tabSpecimen6DesignSize = new ims.framework.utils.SizeInfo(808, 222);
					ims.framework.utils.SizeInfo m_tabSpecimen6RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper42.getWidth(), anchoringHelper42.getHeight());
					m_tabSpecimen6Container.setContext(form, appForm, m_tabSpecimen6, loader, form_images_local, contextMenus, startControlID, m_tabSpecimen6DesignSize, m_tabSpecimen6RuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper43 = new RuntimeAnchoring(designSize, runtimeSize, 8, 28, 808, 222, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSpecimen7 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1051), new Integer(anchoringHelper43.getX()), new Integer(anchoringHelper43.getY()), new Integer(anchoringHelper43.getWidth()), new Integer(anchoringHelper43.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen7", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabSpecimen7Container m_tabSpecimen7Container = (tabSpecimen7Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimen7Container.class, m_tabSpecimen7, factory);
					super.addContainer(m_tabSpecimen7, m_tabSpecimen7Container);
					ims.framework.utils.SizeInfo m_tabSpecimen7DesignSize = new ims.framework.utils.SizeInfo(808, 222);
					ims.framework.utils.SizeInfo m_tabSpecimen7RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper43.getWidth(), anchoringHelper43.getHeight());
					m_tabSpecimen7Container.setContext(form, appForm, m_tabSpecimen7, loader, form_images_local, contextMenus, startControlID, m_tabSpecimen7DesignSize, m_tabSpecimen7RuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper44 = new RuntimeAnchoring(designSize, runtimeSize, 8, 28, 808, 222, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSpecimen8 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1052), new Integer(anchoringHelper44.getX()), new Integer(anchoringHelper44.getY()), new Integer(anchoringHelper44.getWidth()), new Integer(anchoringHelper44.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen8", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabSpecimen8Container m_tabSpecimen8Container = (tabSpecimen8Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimen8Container.class, m_tabSpecimen8, factory);
					super.addContainer(m_tabSpecimen8, m_tabSpecimen8Container);
					ims.framework.utils.SizeInfo m_tabSpecimen8DesignSize = new ims.framework.utils.SizeInfo(808, 222);
					ims.framework.utils.SizeInfo m_tabSpecimen8RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper44.getWidth(), anchoringHelper44.getHeight());
					m_tabSpecimen8Container.setContext(form, appForm, m_tabSpecimen8, loader, form_images_local, contextMenus, startControlID, m_tabSpecimen8DesignSize, m_tabSpecimen8RuntimeSize, startTabIndex, skipContextValidation);
					RuntimeAnchoring anchoringHelper45 = new RuntimeAnchoring(designSize, runtimeSize, 8, 28, 808, 222, ims.framework.enumerations.ControlAnchoring.ALL);
					Container m_tabSpecimen9 = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1053), new Integer(anchoringHelper45.getX()), new Integer(anchoringHelper45.getY()), new Integer(anchoringHelper45.getWidth()), new Integer(anchoringHelper45.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Specimen9", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
					tabSpecimen9Container m_tabSpecimen9Container = (tabSpecimen9Container)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSpecimen9Container.class, m_tabSpecimen9, factory);
					super.addContainer(m_tabSpecimen9, m_tabSpecimen9Container);
					ims.framework.utils.SizeInfo m_tabSpecimen9DesignSize = new ims.framework.utils.SizeInfo(808, 222);
					ims.framework.utils.SizeInfo m_tabSpecimen9RuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper45.getWidth(), anchoringHelper45.getHeight());
					m_tabSpecimen9Container.setContext(form, appForm, m_tabSpecimen9, loader, form_images_local, contextMenus, startControlID, m_tabSpecimen9DesignSize, m_tabSpecimen9RuntimeSize, startTabIndex, skipContextValidation);
				}
				public void hide()
				{
					tabSpecimen1().setVisible(false);
					tabSpecimen2().setVisible(false);
					tabSpecimen3().setVisible(false);
					tabSpecimen4().setVisible(false);
					tabSpecimen5().setVisible(false);
					tabSpecimen6().setVisible(false);
					tabSpecimen7().setVisible(false);
					tabSpecimen8().setVisible(false);
					tabSpecimen9().setVisible(false);
				}
				public void settabSpecimen1Enabled(boolean value)
				{
					tabSpecimen1().setEnabled(value);
				}
				public void settabSpecimen2Enabled(boolean value)
				{
					tabSpecimen2().setEnabled(value);
				}
				public void settabSpecimen3Enabled(boolean value)
				{
					tabSpecimen3().setEnabled(value);
				}
				public void settabSpecimen4Enabled(boolean value)
				{
					tabSpecimen4().setEnabled(value);
				}
				public void settabSpecimen5Enabled(boolean value)
				{
					tabSpecimen5().setEnabled(value);
				}
				public void settabSpecimen6Enabled(boolean value)
				{
					tabSpecimen6().setEnabled(value);
				}
				public void settabSpecimen7Enabled(boolean value)
				{
					tabSpecimen7().setEnabled(value);
				}
				public void settabSpecimen8Enabled(boolean value)
				{
					tabSpecimen8().setEnabled(value);
				}
				public void settabSpecimen9Enabled(boolean value)
				{
					tabSpecimen9().setEnabled(value);
				}
				public void showtabSpecimen1()
				{
					tabSpecimen2().setVisible(false);
					tabSpecimen3().setVisible(false);
					tabSpecimen4().setVisible(false);
					tabSpecimen5().setVisible(false);
					tabSpecimen6().setVisible(false);
					tabSpecimen7().setVisible(false);
					tabSpecimen8().setVisible(false);
					tabSpecimen9().setVisible(false);
					tabSpecimen1().setVisible(true);
				}
				public void showtabSpecimen2()
				{
					tabSpecimen1().setVisible(false);
					tabSpecimen3().setVisible(false);
					tabSpecimen4().setVisible(false);
					tabSpecimen5().setVisible(false);
					tabSpecimen6().setVisible(false);
					tabSpecimen7().setVisible(false);
					tabSpecimen8().setVisible(false);
					tabSpecimen9().setVisible(false);
					tabSpecimen2().setVisible(true);
				}
				public void showtabSpecimen3()
				{
					tabSpecimen1().setVisible(false);
					tabSpecimen2().setVisible(false);
					tabSpecimen4().setVisible(false);
					tabSpecimen5().setVisible(false);
					tabSpecimen6().setVisible(false);
					tabSpecimen7().setVisible(false);
					tabSpecimen8().setVisible(false);
					tabSpecimen9().setVisible(false);
					tabSpecimen3().setVisible(true);
				}
				public void showtabSpecimen4()
				{
					tabSpecimen1().setVisible(false);
					tabSpecimen2().setVisible(false);
					tabSpecimen3().setVisible(false);
					tabSpecimen5().setVisible(false);
					tabSpecimen6().setVisible(false);
					tabSpecimen7().setVisible(false);
					tabSpecimen8().setVisible(false);
					tabSpecimen9().setVisible(false);
					tabSpecimen4().setVisible(true);
				}
				public void showtabSpecimen5()
				{
					tabSpecimen1().setVisible(false);
					tabSpecimen2().setVisible(false);
					tabSpecimen3().setVisible(false);
					tabSpecimen4().setVisible(false);
					tabSpecimen6().setVisible(false);
					tabSpecimen7().setVisible(false);
					tabSpecimen8().setVisible(false);
					tabSpecimen9().setVisible(false);
					tabSpecimen5().setVisible(true);
				}
				public void showtabSpecimen6()
				{
					tabSpecimen1().setVisible(false);
					tabSpecimen2().setVisible(false);
					tabSpecimen3().setVisible(false);
					tabSpecimen4().setVisible(false);
					tabSpecimen5().setVisible(false);
					tabSpecimen7().setVisible(false);
					tabSpecimen8().setVisible(false);
					tabSpecimen9().setVisible(false);
					tabSpecimen6().setVisible(true);
				}
				public void showtabSpecimen7()
				{
					tabSpecimen1().setVisible(false);
					tabSpecimen2().setVisible(false);
					tabSpecimen3().setVisible(false);
					tabSpecimen4().setVisible(false);
					tabSpecimen5().setVisible(false);
					tabSpecimen6().setVisible(false);
					tabSpecimen8().setVisible(false);
					tabSpecimen9().setVisible(false);
					tabSpecimen7().setVisible(true);
				}
				public void showtabSpecimen8()
				{
					tabSpecimen1().setVisible(false);
					tabSpecimen2().setVisible(false);
					tabSpecimen3().setVisible(false);
					tabSpecimen4().setVisible(false);
					tabSpecimen5().setVisible(false);
					tabSpecimen6().setVisible(false);
					tabSpecimen7().setVisible(false);
					tabSpecimen9().setVisible(false);
					tabSpecimen8().setVisible(true);
				}
				public void showtabSpecimen9()
				{
					tabSpecimen1().setVisible(false);
					tabSpecimen2().setVisible(false);
					tabSpecimen3().setVisible(false);
					tabSpecimen4().setVisible(false);
					tabSpecimen5().setVisible(false);
					tabSpecimen6().setVisible(false);
					tabSpecimen7().setVisible(false);
					tabSpecimen8().setVisible(false);
					tabSpecimen9().setVisible(true);
				}
		
				public tabSpecimen1Container tabSpecimen1()
				{
					return (tabSpecimen1Container)super.layers.get(0);
				}
				public tabSpecimen2Container tabSpecimen2()
				{
					return (tabSpecimen2Container)super.layers.get(1);
				}
				public tabSpecimen3Container tabSpecimen3()
				{
					return (tabSpecimen3Container)super.layers.get(2);
				}
				public tabSpecimen4Container tabSpecimen4()
				{
					return (tabSpecimen4Container)super.layers.get(3);
				}
				public tabSpecimen5Container tabSpecimen5()
				{
					return (tabSpecimen5Container)super.layers.get(4);
				}
				public tabSpecimen6Container tabSpecimen6()
				{
					return (tabSpecimen6Container)super.layers.get(5);
				}
				public tabSpecimen7Container tabSpecimen7()
				{
					return (tabSpecimen7Container)super.layers.get(6);
				}
				public tabSpecimen8Container tabSpecimen8()
				{
					return (tabSpecimen8Container)super.layers.get(7);
				}
				public tabSpecimen9Container tabSpecimen9()
				{
					return (tabSpecimen9Container)super.layers.get(8);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Layer Clasess
				lyrSpecimensLayer m_lyrSpecimensLayer = (lyrSpecimensLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSpecimensLayer.class, this, factory);
				super.addLayer(m_lyrSpecimensLayer);
				m_lyrSpecimensLayer.setContext(form, appForm, control, loader, form_images_local, contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		
				// Label Controls
				RuntimeAnchoring anchoringHelper46 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 164, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1054), new Integer(anchoringHelper46.getX()), new Integer(anchoringHelper46.getY()), new Integer(anchoringHelper46.getWidth()), new Integer(anchoringHelper46.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Number of Specimen Types:", new Integer(1), null, new Integer(0)}));
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper47 = new RuntimeAnchoring(designSize, runtimeSize, 168, 6, 24, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1055), new Integer(anchoringHelper47.getX()), new Integer(anchoringHelper47.getY()), new Integer(anchoringHelper47.getWidth()), new Integer(anchoringHelper47.getHeight()), new Integer(startTabIndex.intValue() + 55), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, null, null, Boolean.TRUE, new Integer(1)}));
			}

			public lyrSpecimensLayer lyrSpecimens()
			{
				return (lyrSpecimensLayer)super.getLayer(0);
			}
			public Label lblNoOfspecimenTypes()
			{
				return (Label)super.getControl(9);
			}
			public IntBox intNoOfSpecTypes()
			{
				return (IntBox)super.getControl(10);
			}
		}
		public static class tabClinicalImagingDetailsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class cmbDurationComboBox extends ComboBoxBridge
			{
				private static final long serialVersionUID = 1L;
				
				public void newRow(ims.ocrr.vo.lookups.ClinImagDurUnit value, String text)
				{
					super.control.newRow(value, text);
				}
				public void newRow(ims.ocrr.vo.lookups.ClinImagDurUnit value, String text, ims.framework.utils.Image image)
				{
					super.control.newRow(value, text, image);
				}
				public void newRow(ims.ocrr.vo.lookups.ClinImagDurUnit value, String text, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, textColor);
				}
				public void newRow(ims.ocrr.vo.lookups.ClinImagDurUnit value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
				{
					super.control.newRow(value, text, image, textColor);
				}
				public boolean removeRow(ims.ocrr.vo.lookups.ClinImagDurUnit value)
				{
					return super.control.removeRow(value);
				}
				public ims.ocrr.vo.lookups.ClinImagDurUnit getValue()
				{
					return (ims.ocrr.vo.lookups.ClinImagDurUnit)super.control.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.ClinImagDurUnit value)
				{
					super.control.setValue(value);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Label Controls
				RuntimeAnchoring anchoringHelper48 = new RuntimeAnchoring(designSize, runtimeSize, 16, 17, 58, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1056), new Integer(anchoringHelper48.getX()), new Integer(anchoringHelper48.getY()), new Integer(anchoringHelper48.getWidth()), new Integer(anchoringHelper48.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Duration:", new Integer(1), null, new Integer(0)}));
		
				// ComboBox Controls
				RuntimeAnchoring anchoringHelper49 = new RuntimeAnchoring(designSize, runtimeSize, 160, 16, 152, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				ComboBox m_cmbDurationTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1057), new Integer(anchoringHelper49.getX()), new Integer(anchoringHelper49.getY()), new Integer(anchoringHelper49.getWidth()), new Integer(anchoringHelper49.getHeight()), new Integer(startTabIndex.intValue() + 9074), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
				addControl(m_cmbDurationTemp);
				cmbDurationComboBox cmbDuration = (cmbDurationComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDurationComboBox.class, m_cmbDurationTemp);
				super.addComboBox(cmbDuration);
		
				// IntBox Controls
				RuntimeAnchoring anchoringHelper50 = new RuntimeAnchoring(designSize, runtimeSize, 96, 16, 56, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
				super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1058), new Integer(anchoringHelper50.getX()), new Integer(anchoringHelper50.getY()), new Integer(anchoringHelper50.getWidth()), new Integer(anchoringHelper50.getHeight()), new Integer(startTabIndex.intValue() + 9073), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(9)}));
			}

			public cmbDurationComboBox cmbDuration()
			{
				return (cmbDurationComboBox)super.getComboBox(0);
			}
			public IntBox intDuration()
			{
				return (IntBox)super.getControl(2);
			}
		}
		public static class tabLinkedInvestigationsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdTestsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTestsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolImageReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolImageReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolImageOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getcolImage()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setcolImage(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellcolImageTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolNameReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolNameReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolNameOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolName()
				{
					return (String)super.row.get(1);
				}
				public void setcolName(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolNameTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.ocrr.vo.InvestShortVo getValue()
				{
					return (ims.ocrr.vo.InvestShortVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.InvestShortVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTestsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTestsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTestsRow get(int index)
				{
					return new grdTestsRow(super.collection.get(index));
				}
				public grdTestsRow newRow()
				{
					return new grdTestsRow(super.collection.newRow());
				}
				public grdTestsRow newRow(boolean autoSelect)
				{
					return new grdTestsRow(super.collection.newRow(autoSelect));
				}
				public grdTestsRow newRowAt(int index)
				{
					return new grdTestsRow(super.collection.newRowAt(index));
				}
				public grdTestsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTestsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTestsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
				{
					super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
				}
				public ims.ocrr.vo.InvestShortVoCollection getValues()
				{
					ims.ocrr.vo.InvestShortVoCollection listOfValues = new ims.ocrr.vo.InvestShortVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.InvestShortVo getValue()
				{
					return (ims.ocrr.vo.InvestShortVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.InvestShortVo value)
				{
					super.grid.setValue(value);
				}
				public grdTestsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTestsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTestsRowCollection getRows()
				{
					return new grdTestsRowCollection(super.grid.getRows());
				}
				public grdTestsRow getRowByValue(ims.ocrr.vo.InvestShortVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTestsRow(row);
				}
				public void setcolImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolNameHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolNameHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper51 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 240, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdTestsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1059), new Integer(anchoringHelper51.getX()), new Integer(anchoringHelper51.getY()), new Integer(anchoringHelper51.getWidth()), new Integer(anchoringHelper51.getHeight()), new Integer(startTabIndex.intValue() + 9076), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRRAssociatedTests, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTestsTemp);
				grdTestsGrid grdTests = (grdTestsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTestsGrid.class, m_grdTestsTemp);
				grdTests.addImageColumn(" ", 0, 0, 24, true, 0);
				grdTests.addWrapTextColumn("Investigations", 0, 0, -1, true, false, 0, true);
				super.addGrid(grdTests);
			}

			public grdTestsGrid grdTests()
			{
				return (grdTestsGrid)super.getGrid(0);
			}
		}
		public static class tabQuestionsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdQuestionsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdQuestionsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolImageReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolImageReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolImageOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.utils.Image getcolImage()
				{
					return (ims.framework.utils.Image)super.row.get(0);
				}
				public void setcolImage(ims.framework.utils.Image value)
				{
					super.row.set(0, value);
				}
				public void setCellcolImageTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolQuestionTextReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolQuestionTextReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolQuestionTextOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolQuestionText()
				{
					return (String)super.row.get(1);
				}
				public void setcolQuestionText(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolQuestionTextTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public void setcolMandatoryReadOnly(boolean value)
				{
					super.row.setReadOnly(2, value);
				}
				public boolean iscolMandatoryReadOnly()
				{
					return super.row.isReadOnly(2);
				}
				public void showcolMandatoryOpened()
				{
					super.row.showOpened(2);
				}
				public boolean getcolMandatory()
				{
					return ((Boolean)super.row.get(2)).booleanValue();
				}
				public void setcolMandatory(boolean value)
				{
					super.row.set(2, new Boolean(value));
				}
				public void setCellcolMandatoryTooltip(String value)
				{
					super.row.setTooltip(2, value);
				}
				public ims.ocrr.vo.InvestigationQuestionVo getValue()
				{
					return (ims.ocrr.vo.InvestigationQuestionVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.InvestigationQuestionVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdQuestionsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdQuestionsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdQuestionsRow get(int index)
				{
					return new grdQuestionsRow(super.collection.get(index));
				}
				public grdQuestionsRow newRow()
				{
					return new grdQuestionsRow(super.collection.newRow());
				}
				public grdQuestionsRow newRow(boolean autoSelect)
				{
					return new grdQuestionsRow(super.collection.newRow(autoSelect));
				}
				public grdQuestionsRow newRowAt(int index)
				{
					return new grdQuestionsRow(super.collection.newRowAt(index));
				}
				public grdQuestionsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdQuestionsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdQuestionsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)
				{
					super.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);
				}
				private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
				{
					super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
				}
				private void addBoolColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean autoPostBack, int sortOrder, boolean canGrow)
				{
					super.grid.addBoolColumn(caption, captionAlignment, alignment, width, readOnly, autoPostBack, sortOrder, canGrow);
				}
				public ims.ocrr.vo.InvestigationQuestionVoCollection getValues()
				{
					ims.ocrr.vo.InvestigationQuestionVoCollection listOfValues = new ims.ocrr.vo.InvestigationQuestionVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.InvestigationQuestionVo getValue()
				{
					return (ims.ocrr.vo.InvestigationQuestionVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.InvestigationQuestionVo value)
				{
					super.grid.setValue(value);
				}
				public grdQuestionsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdQuestionsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdQuestionsRowCollection getRows()
				{
					return new grdQuestionsRowCollection(super.grid.getRows());
				}
				public grdQuestionsRow getRowByValue(ims.ocrr.vo.InvestigationQuestionVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdQuestionsRow(row);
				}
				public void setcolImageHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolImageHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolQuestionTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolQuestionTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
				public void setcolMandatoryHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(2, value);
				}
				public String getcolMandatoryHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(2);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper52 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 240, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdQuestionsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1060), new Integer(anchoringHelper52.getX()), new Integer(anchoringHelper52.getY()), new Integer(anchoringHelper52.getWidth()), new Integer(anchoringHelper52.getHeight()), new Integer(startTabIndex.intValue() + 9077), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRRAssociatedQuestions, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdQuestionsTemp);
				grdQuestionsGrid grdQuestions = (grdQuestionsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdQuestionsGrid.class, m_grdQuestionsTemp);
				grdQuestions.addImageColumn(" ", 0, 0, 24, true, 0);
				grdQuestions.addWrapTextColumn("Question / Information Text", 0, 0, 650, true, false, 0, true);
				grdQuestions.addBoolColumn("Mandatory", 1, 1, -1, false, false, 0, true);
				super.addGrid(grdQuestions);
			}

			public grdQuestionsGrid grdQuestions()
			{
				return (grdQuestionsGrid)super.getGrid(0);
			}
		}
		public static class tabHelpTextsContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdTestHelpRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTestHelpRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolTitleReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolTitleReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolTitleOpened()
				{
					super.row.showOpened(0);
				}
				public ims.framework.controls.GridMutableComboBox getcolTitle()
				{
					return new ims.framework.controls.GridMutableComboBox(super.row, 0);
				}
				public void setCellcolTitleTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolTextReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolTextReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolTextOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolText()
				{
					return (String)super.row.get(1);
				}
				public void setcolText(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolTextTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.ocrr.vo.HelpTextVo getValue()
				{
					return (ims.ocrr.vo.HelpTextVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.HelpTextVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTestHelpRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTestHelpRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTestHelpRow get(int index)
				{
					return new grdTestHelpRow(super.collection.get(index));
				}
				public grdTestHelpRow newRow()
				{
					return new grdTestHelpRow(super.collection.newRow());
				}
				public grdTestHelpRow newRow(boolean autoSelect)
				{
					return new grdTestHelpRow(super.collection.newRow(autoSelect));
				}
				public grdTestHelpRow newRowAt(int index)
				{
					return new grdTestHelpRow(super.collection.newRowAt(index));
				}
				public grdTestHelpRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTestHelpRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTestHelpGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)
				{
					 super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);
				}
				private void addWrapTextColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int maxLength, boolean canGrow)
				{
					super.grid.addWrapTextColumn(caption, captionAlignment, alignment, width, readOnly, bold, maxLength, canGrow);
				}
				public ims.ocrr.vo.HelpTextVoCollection getValues()
				{
					ims.ocrr.vo.HelpTextVoCollection listOfValues = new ims.ocrr.vo.HelpTextVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.HelpTextVo getValue()
				{
					return (ims.ocrr.vo.HelpTextVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.HelpTextVo value)
				{
					super.grid.setValue(value);
				}
				public grdTestHelpRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTestHelpRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTestHelpRowCollection getRows()
				{
					return new grdTestHelpRowCollection(super.grid.getRows());
				}
				public grdTestHelpRow getRowByValue(ims.ocrr.vo.HelpTextVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTestHelpRow(row);
				}
				public void setcolTitleHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolTitleHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolTextHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolTextHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper53 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 808, 240, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdTestHelpTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1061), new Integer(anchoringHelper53.getX()), new Integer(anchoringHelper53.getY()), new Integer(anchoringHelper53.getWidth()), new Integer(anchoringHelper53.getHeight()), new Integer(startTabIndex.intValue() + 9078), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRRHelpText, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTestHelpTemp);
				grdTestHelpGrid grdTestHelp = (grdTestHelpGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTestHelpGrid.class, m_grdTestHelpTemp);
				grdTestHelp.addMutableComboBoxColumn("Category", 0, 0, 220, false, true, true, false, false, true, -1);
				grdTestHelp.addWrapTextColumn("Text", 0, 0, -1, false, false, 500, true);
				super.addGrid(grdTestHelp);
			}

			public grdTestHelpGrid grdTestHelp()
			{
				return (grdTestHelpGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper54 = new RuntimeAnchoring(designSize, runtimeSize, 8, 314, 832, 280, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabProvider = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1062), new Integer(anchoringHelper54.getX()), new Integer(anchoringHelper54.getY()), new Integer(anchoringHelper54.getWidth()), new Integer(anchoringHelper54.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Inv. Providers", new Integer(startControlID.intValue() + 1), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabProviderContainer m_tabProviderContainer = (tabProviderContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabProviderContainer.class, m_tabProvider, factory);
			super.addContainer(m_tabProvider, m_tabProviderContainer);
			ims.framework.utils.SizeInfo m_tabProviderDesignSize = new ims.framework.utils.SizeInfo(832, 280);
			ims.framework.utils.SizeInfo m_tabProviderRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper54.getWidth(), anchoringHelper54.getHeight());
			m_tabProviderContainer.setContext(form, appForm, m_tabProvider, loader, form_images_local, contextMenus, startControlID, m_tabProviderDesignSize, m_tabProviderRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper55 = new RuntimeAnchoring(designSize, runtimeSize, 8, 314, 832, 280, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabGeneralDet = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1063), new Integer(anchoringHelper55.getX()), new Integer(anchoringHelper55.getY()), new Integer(anchoringHelper55.getWidth()), new Integer(anchoringHelper55.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"General Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabGeneralDetContainer m_tabGeneralDetContainer = (tabGeneralDetContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabGeneralDetContainer.class, m_tabGeneralDet, factory);
			super.addContainer(m_tabGeneralDet, m_tabGeneralDetContainer);
			ims.framework.utils.SizeInfo m_tabGeneralDetDesignSize = new ims.framework.utils.SizeInfo(832, 280);
			ims.framework.utils.SizeInfo m_tabGeneralDetRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper55.getWidth(), anchoringHelper55.getHeight());
			m_tabGeneralDetContainer.setContext(form, appForm, m_tabGeneralDet, loader, form_images_local, contextMenus, startControlID, m_tabGeneralDetDesignSize, m_tabGeneralDetRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper56 = new RuntimeAnchoring(designSize, runtimeSize, 8, 314, 832, 280, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabPathologyDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1064), new Integer(anchoringHelper56.getX()), new Integer(anchoringHelper56.getY()), new Integer(anchoringHelper56.getWidth()), new Integer(anchoringHelper56.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Pathology Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabPathologyDetailsContainer m_tabPathologyDetailsContainer = (tabPathologyDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabPathologyDetailsContainer.class, m_tabPathologyDetails, factory);
			super.addContainer(m_tabPathologyDetails, m_tabPathologyDetailsContainer);
			ims.framework.utils.SizeInfo m_tabPathologyDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 280);
			ims.framework.utils.SizeInfo m_tabPathologyDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper56.getWidth(), anchoringHelper56.getHeight());
			m_tabPathologyDetailsContainer.setContext(form, appForm, m_tabPathologyDetails, loader, form_images_local, contextMenus, startControlID, m_tabPathologyDetailsDesignSize, m_tabPathologyDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper57 = new RuntimeAnchoring(designSize, runtimeSize, 8, 314, 832, 280, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabClinicalImagingDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1065), new Integer(anchoringHelper57.getX()), new Integer(anchoringHelper57.getY()), new Integer(anchoringHelper57.getWidth()), new Integer(anchoringHelper57.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Clinical Imaging Details", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabClinicalImagingDetailsContainer m_tabClinicalImagingDetailsContainer = (tabClinicalImagingDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabClinicalImagingDetailsContainer.class, m_tabClinicalImagingDetails, factory);
			super.addContainer(m_tabClinicalImagingDetails, m_tabClinicalImagingDetailsContainer);
			ims.framework.utils.SizeInfo m_tabClinicalImagingDetailsDesignSize = new ims.framework.utils.SizeInfo(832, 280);
			ims.framework.utils.SizeInfo m_tabClinicalImagingDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper57.getWidth(), anchoringHelper57.getHeight());
			m_tabClinicalImagingDetailsContainer.setContext(form, appForm, m_tabClinicalImagingDetails, loader, form_images_local, contextMenus, startControlID, m_tabClinicalImagingDetailsDesignSize, m_tabClinicalImagingDetailsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper58 = new RuntimeAnchoring(designSize, runtimeSize, 8, 314, 832, 280, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabLinkedInvestigations = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1066), new Integer(anchoringHelper58.getX()), new Integer(anchoringHelper58.getY()), new Integer(anchoringHelper58.getWidth()), new Integer(anchoringHelper58.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Linked Investigations", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabLinkedInvestigationsContainer m_tabLinkedInvestigationsContainer = (tabLinkedInvestigationsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabLinkedInvestigationsContainer.class, m_tabLinkedInvestigations, factory);
			super.addContainer(m_tabLinkedInvestigations, m_tabLinkedInvestigationsContainer);
			ims.framework.utils.SizeInfo m_tabLinkedInvestigationsDesignSize = new ims.framework.utils.SizeInfo(832, 280);
			ims.framework.utils.SizeInfo m_tabLinkedInvestigationsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper58.getWidth(), anchoringHelper58.getHeight());
			m_tabLinkedInvestigationsContainer.setContext(form, appForm, m_tabLinkedInvestigations, loader, form_images_local, contextMenus, startControlID, m_tabLinkedInvestigationsDesignSize, m_tabLinkedInvestigationsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper59 = new RuntimeAnchoring(designSize, runtimeSize, 8, 314, 832, 280, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabQuestions = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1067), new Integer(anchoringHelper59.getX()), new Integer(anchoringHelper59.getY()), new Integer(anchoringHelper59.getWidth()), new Integer(anchoringHelper59.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Questions / Information", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabQuestionsContainer m_tabQuestionsContainer = (tabQuestionsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabQuestionsContainer.class, m_tabQuestions, factory);
			super.addContainer(m_tabQuestions, m_tabQuestionsContainer);
			ims.framework.utils.SizeInfo m_tabQuestionsDesignSize = new ims.framework.utils.SizeInfo(832, 280);
			ims.framework.utils.SizeInfo m_tabQuestionsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper59.getWidth(), anchoringHelper59.getHeight());
			m_tabQuestionsContainer.setContext(form, appForm, m_tabQuestions, loader, form_images_local, contextMenus, startControlID, m_tabQuestionsDesignSize, m_tabQuestionsRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper60 = new RuntimeAnchoring(designSize, runtimeSize, 8, 314, 832, 280, ims.framework.enumerations.ControlAnchoring.ALL);
			Container m_tabHelpTexts = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1068), new Integer(anchoringHelper60.getX()), new Integer(anchoringHelper60.getY()), new Integer(anchoringHelper60.getWidth()), new Integer(anchoringHelper60.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,"Help Text", new Integer(startControlID.intValue() + 1), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabHelpTextsContainer m_tabHelpTextsContainer = (tabHelpTextsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabHelpTextsContainer.class, m_tabHelpTexts, factory);
			super.addContainer(m_tabHelpTexts, m_tabHelpTextsContainer);
			ims.framework.utils.SizeInfo m_tabHelpTextsDesignSize = new ims.framework.utils.SizeInfo(832, 280);
			ims.framework.utils.SizeInfo m_tabHelpTextsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper60.getWidth(), anchoringHelper60.getHeight());
			m_tabHelpTextsContainer.setContext(form, appForm, m_tabHelpTexts, loader, form_images_local, contextMenus, startControlID, m_tabHelpTextsDesignSize, m_tabHelpTextsRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabProvider().setVisible(false);
			tabGeneralDet().setVisible(false);
			tabPathologyDetails().setVisible(false);
			tabClinicalImagingDetails().setVisible(false);
			tabLinkedInvestigations().setVisible(false);
			tabQuestions().setVisible(false);
			tabHelpTexts().setVisible(false);
		}
		public void settabProviderEnabled(boolean value)
		{
			tabProvider().setEnabled(value);
		}
		public void settabGeneralDetEnabled(boolean value)
		{
			tabGeneralDet().setEnabled(value);
		}
		public void settabPathologyDetailsEnabled(boolean value)
		{
			tabPathologyDetails().setEnabled(value);
		}
		public void settabClinicalImagingDetailsEnabled(boolean value)
		{
			tabClinicalImagingDetails().setEnabled(value);
		}
		public void settabLinkedInvestigationsEnabled(boolean value)
		{
			tabLinkedInvestigations().setEnabled(value);
		}
		public void settabQuestionsEnabled(boolean value)
		{
			tabQuestions().setEnabled(value);
		}
		public void settabHelpTextsEnabled(boolean value)
		{
			tabHelpTexts().setEnabled(value);
		}
		public void showtabProvider()
		{
			tabGeneralDet().setVisible(false);
			tabPathologyDetails().setVisible(false);
			tabClinicalImagingDetails().setVisible(false);
			tabLinkedInvestigations().setVisible(false);
			tabQuestions().setVisible(false);
			tabHelpTexts().setVisible(false);
			tabProvider().setVisible(true);
		}
		public void showtabGeneralDet()
		{
			tabProvider().setVisible(false);
			tabPathologyDetails().setVisible(false);
			tabClinicalImagingDetails().setVisible(false);
			tabLinkedInvestigations().setVisible(false);
			tabQuestions().setVisible(false);
			tabHelpTexts().setVisible(false);
			tabGeneralDet().setVisible(true);
		}
		public void showtabPathologyDetails()
		{
			tabProvider().setVisible(false);
			tabGeneralDet().setVisible(false);
			tabClinicalImagingDetails().setVisible(false);
			tabLinkedInvestigations().setVisible(false);
			tabQuestions().setVisible(false);
			tabHelpTexts().setVisible(false);
			tabPathologyDetails().setVisible(true);
		}
		public void showtabClinicalImagingDetails()
		{
			tabProvider().setVisible(false);
			tabGeneralDet().setVisible(false);
			tabPathologyDetails().setVisible(false);
			tabLinkedInvestigations().setVisible(false);
			tabQuestions().setVisible(false);
			tabHelpTexts().setVisible(false);
			tabClinicalImagingDetails().setVisible(true);
		}
		public void showtabLinkedInvestigations()
		{
			tabProvider().setVisible(false);
			tabGeneralDet().setVisible(false);
			tabPathologyDetails().setVisible(false);
			tabClinicalImagingDetails().setVisible(false);
			tabQuestions().setVisible(false);
			tabHelpTexts().setVisible(false);
			tabLinkedInvestigations().setVisible(true);
		}
		public void showtabQuestions()
		{
			tabProvider().setVisible(false);
			tabGeneralDet().setVisible(false);
			tabPathologyDetails().setVisible(false);
			tabClinicalImagingDetails().setVisible(false);
			tabLinkedInvestigations().setVisible(false);
			tabHelpTexts().setVisible(false);
			tabQuestions().setVisible(true);
		}
		public void showtabHelpTexts()
		{
			tabProvider().setVisible(false);
			tabGeneralDet().setVisible(false);
			tabPathologyDetails().setVisible(false);
			tabClinicalImagingDetails().setVisible(false);
			tabLinkedInvestigations().setVisible(false);
			tabQuestions().setVisible(false);
			tabHelpTexts().setVisible(true);
		}

		public tabProviderContainer tabProvider()
		{
			return (tabProviderContainer)super.layers.get(0);
		}
		public tabGeneralDetContainer tabGeneralDet()
		{
			return (tabGeneralDetContainer)super.layers.get(1);
		}
		public tabPathologyDetailsContainer tabPathologyDetails()
		{
			return (tabPathologyDetailsContainer)super.layers.get(2);
		}
		public tabClinicalImagingDetailsContainer tabClinicalImagingDetails()
		{
			return (tabClinicalImagingDetailsContainer)super.layers.get(3);
		}
		public tabLinkedInvestigationsContainer tabLinkedInvestigations()
		{
			return (tabLinkedInvestigationsContainer)super.layers.get(4);
		}
		public tabQuestionsContainer tabQuestions()
		{
			return (tabQuestionsContainer)super.layers.get(5);
		}
		public tabHelpTextsContainer tabHelpTexts()
		{
			return (tabHelpTextsContainer)super.layers.get(6);
		}
	}
	public static class lyrSelectionLayer extends Layer
	{
		private static final long serialVersionUID = 1L;
		public static class tabTaxContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdTaxonomyRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdTaxonomyRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setcolTaxonomyReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean iscolTaxonomyReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showcolTaxonomyOpened()
				{
					super.row.showOpened(0);
				}
				public String getcolTaxonomy()
				{
					return (String)super.row.get(0);
				}
				public void setcolTaxonomy(String value)
				{
					super.row.set(0, value);
				}
				public void setCellcolTaxonomyTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public void setcolCodeReadOnly(boolean value)
				{
					super.row.setReadOnly(1, value);
				}
				public boolean iscolCodeReadOnly()
				{
					return super.row.isReadOnly(1);
				}
				public void showcolCodeOpened()
				{
					super.row.showOpened(1);
				}
				public String getcolCode()
				{
					return (String)super.row.get(1);
				}
				public void setcolCode(String value)
				{
					super.row.set(1, value);
				}
				public void setCellcolCodeTooltip(String value)
				{
					super.row.setTooltip(1, value);
				}
				public ims.core.vo.TaxonomyMap getValue()
				{
					return (ims.core.vo.TaxonomyMap)super.row.getValue();
				}
				public void setValue(ims.core.vo.TaxonomyMap value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdTaxonomyRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdTaxonomyRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdTaxonomyRow get(int index)
				{
					return new grdTaxonomyRow(super.collection.get(index));
				}
				public grdTaxonomyRow newRow()
				{
					return new grdTaxonomyRow(super.collection.newRow());
				}
				public grdTaxonomyRow newRow(boolean autoSelect)
				{
					return new grdTaxonomyRow(super.collection.newRow(autoSelect));
				}
				public grdTaxonomyRow newRowAt(int index)
				{
					return new grdTaxonomyRow(super.collection.newRowAt(index));
				}
				public grdTaxonomyRow newRowAt(int index, boolean autoSelect)
				{
					return new grdTaxonomyRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdTaxonomyGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.core.vo.TaxonomyMapCollection getValues()
				{
					ims.core.vo.TaxonomyMapCollection listOfValues = new ims.core.vo.TaxonomyMapCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.core.vo.TaxonomyMap getValue()
				{
					return (ims.core.vo.TaxonomyMap)super.grid.getValue();
				}
				public void setValue(ims.core.vo.TaxonomyMap value)
				{
					super.grid.setValue(value);
				}
				public grdTaxonomyRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdTaxonomyRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdTaxonomyRowCollection getRows()
				{
					return new grdTaxonomyRowCollection(super.grid.getRows());
				}
				public grdTaxonomyRow getRowByValue(ims.core.vo.TaxonomyMap value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdTaxonomyRow(row);
				}
				public void setcolTaxonomyHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getcolTaxonomyHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
				public void setcolCodeHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(1, value);
				}
				public String getcolCodeHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(1);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper61 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 336, 256, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdTaxonomyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1069), new Integer(anchoringHelper61.getX()), new Integer(anchoringHelper61.getY()), new Integer(anchoringHelper61.getWidth()), new Integer(anchoringHelper61.getHeight()), new Integer(startTabIndex.intValue() + 24), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRRTaxonomy, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdTaxonomyTemp);
				grdTaxonomyGrid grdTaxonomy = (grdTaxonomyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdTaxonomyGrid.class, m_grdTaxonomyTemp);
				grdTaxonomy.addStringColumn("Taxonomy", 0, 0, 250, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				grdTaxonomy.addStringColumn("Code", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdTaxonomy);
			}

			public grdTaxonomyGrid grdTaxonomy()
			{
				return (grdTaxonomyGrid)super.getGrid(0);
			}
		}
		public static class tabSynContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSynonymsRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSynonymsRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSynonymsReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSynonymsReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSynonymsOpened()
				{
					super.row.showOpened(0);
				}
				public String getColSynonyms()
				{
					return (String)super.row.get(0);
				}
				public void setColSynonyms(String value)
				{
					super.row.set(0, value);
				}
				public void setCellColSynonymsTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.ocrr.vo.InvSynonymVo getValue()
				{
					return (ims.ocrr.vo.InvSynonymVo)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.InvSynonymVo value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSynonymsRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSynonymsRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSynonymsRow get(int index)
				{
					return new grdSynonymsRow(super.collection.get(index));
				}
				public grdSynonymsRow newRow()
				{
					return new grdSynonymsRow(super.collection.newRow());
				}
				public grdSynonymsRow newRow(boolean autoSelect)
				{
					return new grdSynonymsRow(super.collection.newRow(autoSelect));
				}
				public grdSynonymsRow newRowAt(int index)
				{
					return new grdSynonymsRow(super.collection.newRowAt(index));
				}
				public grdSynonymsRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSynonymsRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSynonymsGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.ocrr.vo.InvSynonymVoCollection getValues()
				{
					ims.ocrr.vo.InvSynonymVoCollection listOfValues = new ims.ocrr.vo.InvSynonymVoCollection();
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues.add(this.getRows().get(x).getValue());
					}
					return listOfValues;
				}
				public ims.ocrr.vo.InvSynonymVo getValue()
				{
					return (ims.ocrr.vo.InvSynonymVo)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.InvSynonymVo value)
				{
					super.grid.setValue(value);
				}
				public grdSynonymsRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSynonymsRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSynonymsRowCollection getRows()
				{
					return new grdSynonymsRowCollection(super.grid.getRows());
				}
				public grdSynonymsRow getRowByValue(ims.ocrr.vo.InvSynonymVo value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSynonymsRow(row);
				}
				public void setColSynonymsHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSynonymsHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper62 = new RuntimeAnchoring(designSize, runtimeSize, 8, 8, 336, 256, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSynonymsTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1070), new Integer(anchoringHelper62.getX()), new Integer(anchoringHelper62.getY()), new Integer(anchoringHelper62.getWidth()), new Integer(anchoringHelper62.getHeight()), new Integer(startTabIndex.intValue() + 26), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRRSynonyms, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSynonymsTemp);
				grdSynonymsGrid grdSynonyms = (grdSynonymsGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSynonymsGrid.class, m_grdSynonymsTemp);
				grdSynonyms.addStringColumn("Synonym(s)", 0, 0, -1, false, false, 0, 200, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSynonyms);
			}

			public grdSynonymsGrid grdSynonyms()
			{
				return (grdSynonymsGrid)super.getGrid(0);
			}
		}
		public static class tabSitesContainer extends LayerBridge
		{
			private static final long serialVersionUID = 1L;
			public static class grdSitesRow extends GridRowBridge
			{
				private static final long serialVersionUID = 1L;
				
				protected grdSitesRow(GridRow row)
				{
					super(row);
				}
				public void showOpened(int column)
				{
					super.row.showOpened(column);
				}
				public void setColSiteReadOnly(boolean value)
				{
					super.row.setReadOnly(0, value);
				}
				public boolean isColSiteReadOnly()
				{
					return super.row.isReadOnly(0);
				}
				public void showColSiteOpened()
				{
					super.row.showOpened(0);
				}
				public ims.ocrr.vo.lookups.SpecimenSite getColSite()
				{
					return (ims.ocrr.vo.lookups.SpecimenSite)super.row.get(0);
				}
				public void setColSite(ims.ocrr.vo.lookups.SpecimenSite value)
				{
					super.row.set(0, value);
				}
				public void setCellColSiteTooltip(String value)
				{
					super.row.setTooltip(0, value);
				}
				public ims.ocrr.vo.lookups.SpecimenSite getValue()
				{
					return (ims.ocrr.vo.lookups.SpecimenSite)super.row.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.SpecimenSite value)
				{
					super.row.setValue(value);
				}
			}
			public static class grdSitesRowCollection extends GridRowCollectionBridge
			{
				private static final long serialVersionUID = 1L;
				
				private grdSitesRowCollection(GridRowCollection collection)
				{
					super(collection);
				}
				public grdSitesRow get(int index)
				{
					return new grdSitesRow(super.collection.get(index));
				}
				public grdSitesRow newRow()
				{
					return new grdSitesRow(super.collection.newRow());
				}
				public grdSitesRow newRow(boolean autoSelect)
				{
					return new grdSitesRow(super.collection.newRow(autoSelect));
				}
				public grdSitesRow newRowAt(int index)
				{
					return new grdSitesRow(super.collection.newRowAt(index));
				}
				public grdSitesRow newRowAt(int index, boolean autoSelect)
				{
					return new grdSitesRow(super.collection.newRowAt(index, autoSelect));
				}
			}
			public static class grdSitesGrid extends GridBridge
			{
				private static final long serialVersionUID = 1L;
				
				private void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)
				{
					super.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);
				}
				public ims.ocrr.vo.lookups.SpecimenSite[] getValues()
				{
					ims.ocrr.vo.lookups.SpecimenSite[] listOfValues = new ims.ocrr.vo.lookups.SpecimenSite[this.getRows().size()];
					for(int x = 0; x < this.getRows().size(); x++)
					{
						listOfValues[x] = this.getRows().get(x).getValue();
					}
					return listOfValues;
				}
				public ims.ocrr.vo.lookups.SpecimenSite getValue()
				{
					return (ims.ocrr.vo.lookups.SpecimenSite)super.grid.getValue();
				}
				public void setValue(ims.ocrr.vo.lookups.SpecimenSite value)
				{
					super.grid.setValue(value);
				}
				public grdSitesRow getSelectedRow()
				{
					return super.grid.getSelectedRow() == null ? null : new grdSitesRow(super.grid.getSelectedRow());
				}
				public int getSelectedRowIndex()
				{
					return super.grid.getSelectedRowIndex();
				}
				public grdSitesRowCollection getRows()
				{
					return new grdSitesRowCollection(super.grid.getRows());
				}
				public grdSitesRow getRowByValue(ims.ocrr.vo.lookups.SpecimenSite value)
				{
					GridRow row = super.grid.getRowByValue(value);
					return row == null?null:new grdSitesRow(row);
				}
				public void setColSiteHeaderTooltip(String value)
				{
					super.grid.setColumnHeaderTooltip(0, value);
				}
				public String getColSiteHeaderTooltip()
				{
					return super.grid.getColumnHeaderTooltip(0);
				}
			}
			public void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)
			{
				super.container.setTabActivatedEvent(delegate);
			}
			protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
			{
				if(form == null)
					throw new RuntimeException("Invalid form");
				if(appForm == null)
					throw new RuntimeException("Invalid application form");
				if(control == null); // this is to avoid eclipse warning only.
				if(loader == null); // this is to avoid eclipse warning only.
				if(form_images_local == null); // this is to avoid eclipse warning only.
				if(contextMenus == null); // this is to avoid eclipse warning only.
				if(startControlID == null)
					throw new RuntimeException("Invalid startControlID");
				if(designSize == null); // this is to avoid eclipse warning only.
				if(runtimeSize == null); // this is to avoid eclipse warning only.
				if(startTabIndex == null)
					throw new RuntimeException("Invalid startTabIndex");
		
		
				// Grid Controls
				RuntimeAnchoring anchoringHelper63 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 328, 240, ims.framework.enumerations.ControlAnchoring.ALL);
				Grid m_grdSitesTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1071), new Integer(anchoringHelper63.getX()), new Integer(anchoringHelper63.getY()), new Integer(anchoringHelper63.getWidth()), new Integer(anchoringHelper63.getHeight()), new Integer(startTabIndex.intValue() + 28), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.contextMenuOCRRSpecimenSite, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});
				addControl(m_grdSitesTemp);
				grdSitesGrid grdSites = (grdSitesGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSitesGrid.class, m_grdSitesTemp);
				grdSites.addStringColumn("Site", 0, 0, -1, true, false, 0, 0, true, ims.framework.enumerations.CharacterCasing.NORMAL);
				super.addGrid(grdSites);
			}

			public grdSitesGrid grdSites()
			{
				return (grdSitesGrid)super.getGrid(0);
			}
		}

		protected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception
		{
			if(form == null)
				throw new RuntimeException("Invalid form");
			if(appForm == null)
				throw new RuntimeException("Invalid application form");
			if(control == null); // this is to avoid eclipse warning only.
			if(loader == null); // this is to avoid eclipse warning only.
			if(form_images_local == null); // this is to avoid eclipse warning only.
			if(contextMenus == null); // this is to avoid eclipse warning only.
			if(startControlID == null)
				throw new RuntimeException("Invalid startControlID");
			if(designSize == null); // this is to avoid eclipse warning only.
			if(runtimeSize == null); // this is to avoid eclipse warning only.
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex");
			RuntimeAnchoring anchoringHelper64 = new RuntimeAnchoring(designSize, runtimeSize, 480, 8, 360, 296, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabTax = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1072), new Integer(anchoringHelper64.getX()), new Integer(anchoringHelper64.getY()), new Integer(anchoringHelper64.getWidth()), new Integer(anchoringHelper64.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Taxonomy Mapping", new Integer(startControlID.intValue() + 2), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabTaxContainer m_tabTaxContainer = (tabTaxContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabTaxContainer.class, m_tabTax, factory);
			super.addContainer(m_tabTax, m_tabTaxContainer);
			ims.framework.utils.SizeInfo m_tabTaxDesignSize = new ims.framework.utils.SizeInfo(360, 296);
			ims.framework.utils.SizeInfo m_tabTaxRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper64.getWidth(), anchoringHelper64.getHeight());
			m_tabTaxContainer.setContext(form, appForm, m_tabTax, loader, form_images_local, contextMenus, startControlID, m_tabTaxDesignSize, m_tabTaxRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper65 = new RuntimeAnchoring(designSize, runtimeSize, 480, 8, 360, 296, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabSyn = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1073), new Integer(anchoringHelper65.getX()), new Integer(anchoringHelper65.getY()), new Integer(anchoringHelper65.getWidth()), new Integer(anchoringHelper65.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Synonyms", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabSynContainer m_tabSynContainer = (tabSynContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSynContainer.class, m_tabSyn, factory);
			super.addContainer(m_tabSyn, m_tabSynContainer);
			ims.framework.utils.SizeInfo m_tabSynDesignSize = new ims.framework.utils.SizeInfo(360, 296);
			ims.framework.utils.SizeInfo m_tabSynRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper65.getWidth(), anchoringHelper65.getHeight());
			m_tabSynContainer.setContext(form, appForm, m_tabSyn, loader, form_images_local, contextMenus, startControlID, m_tabSynDesignSize, m_tabSynRuntimeSize, startTabIndex, skipContextValidation);
			RuntimeAnchoring anchoringHelper66 = new RuntimeAnchoring(designSize, runtimeSize, 480, 8, 360, 296, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);
			Container m_tabSites = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1074), new Integer(anchoringHelper66.getX()), new Integer(anchoringHelper66.getY()), new Integer(anchoringHelper66.getWidth()), new Integer(anchoringHelper66.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,"Sites", new Integer(startControlID.intValue() + 2), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});
			tabSitesContainer m_tabSitesContainer = (tabSitesContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabSitesContainer.class, m_tabSites, factory);
			super.addContainer(m_tabSites, m_tabSitesContainer);
			ims.framework.utils.SizeInfo m_tabSitesDesignSize = new ims.framework.utils.SizeInfo(360, 296);
			ims.framework.utils.SizeInfo m_tabSitesRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper66.getWidth(), anchoringHelper66.getHeight());
			m_tabSitesContainer.setContext(form, appForm, m_tabSites, loader, form_images_local, contextMenus, startControlID, m_tabSitesDesignSize, m_tabSitesRuntimeSize, startTabIndex, skipContextValidation);
		}
		public void hide()
		{
			tabTax().setVisible(false);
			tabSyn().setVisible(false);
			tabSites().setVisible(false);
		}
		public void settabTaxEnabled(boolean value)
		{
			tabTax().setEnabled(value);
		}
		public void settabSynEnabled(boolean value)
		{
			tabSyn().setEnabled(value);
		}
		public void settabSitesEnabled(boolean value)
		{
			tabSites().setEnabled(value);
		}
		public void showtabTax()
		{
			tabSyn().setVisible(false);
			tabSites().setVisible(false);
			tabTax().setVisible(true);
		}
		public void showtabSyn()
		{
			tabTax().setVisible(false);
			tabSites().setVisible(false);
			tabSyn().setVisible(true);
		}
		public void showtabSites()
		{
			tabTax().setVisible(false);
			tabSyn().setVisible(false);
			tabSites().setVisible(true);
		}

		public tabTaxContainer tabTax()
		{
			return (tabTaxContainer)super.layers.get(0);
		}
		public tabSynContainer tabSyn()
		{
			return (tabSynContainer)super.layers.get(1);
		}
		public tabSitesContainer tabSites()
		{
			return (tabSitesContainer)super.layers.get(2);
		}
	}
	public static class cmbSecurityLevelComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ocrr.vo.SecurityLevelConfigVo value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ocrr.vo.SecurityLevelConfigVo value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ocrr.vo.SecurityLevelConfigVo value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ocrr.vo.SecurityLevelConfigVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ocrr.vo.SecurityLevelConfigVo value)
		{
			return super.control.removeRow(value);
		}
		public ims.ocrr.vo.SecurityLevelConfigVo getValue()
		{
			return (ims.ocrr.vo.SecurityLevelConfigVo)super.control.getValue();
		}
		public void setValue(ims.ocrr.vo.SecurityLevelConfigVo value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbColorComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.framework.utils.Color value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.framework.utils.Color value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.framework.utils.Color value)
		{
			return super.control.removeRow(value);
		}
		public ims.framework.utils.Color getValue()
		{
			return (ims.framework.utils.Color)super.control.getValue();
		}
		public void setValue(ims.framework.utils.Color value)
		{
			// should add value if does not exist
			if(value != null && super.control.getValues() != null)
			{
				boolean exist = false;
				for(int x = 0; x < super.control.getValues().size(); x++)
				{
					ims.framework.utils.Color item = (ims.framework.utils.Color)super.control.getValues().get(x);
					if(item != null && item.equals(value))
					{
						exist = true;
						break;
					}
				}
				if(!exist)
				{
					newRow(value, value.getText(), value.getImage());
				}
			}
			super.control.setValue(value);
		}
	}
	public static class cmbStatusComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			return super.control.removeRow(value);
		}
		public ims.core.vo.lookups.PreActiveActiveInactiveStatus getValue()
		{
			return (ims.core.vo.lookups.PreActiveActiveInactiveStatus)super.control.getValue();
		}
		public void setValue(ims.core.vo.lookups.PreActiveActiveInactiveStatus value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbCategoryComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.ocrr.vo.lookups.Category value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.ocrr.vo.lookups.Category value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.ocrr.vo.lookups.Category value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.ocrr.vo.lookups.Category value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.ocrr.vo.lookups.Category value)
		{
			return super.control.removeRow(value);
		}
		public ims.ocrr.vo.lookups.Category getValue()
		{
			return (ims.ocrr.vo.lookups.Category)super.control.getValue();
		}
		public void setValue(ims.ocrr.vo.lookups.Category value)
		{
			super.control.setValue(value);
		}
	}
	public static class cmbGenderSpecificComboBox extends ComboBoxBridge
	{
		private static final long serialVersionUID = 1L;
		
		public void newRow(ims.admin.vo.lookups.GenderSpecific value, String text)
		{
			super.control.newRow(value, text);
		}
		public void newRow(ims.admin.vo.lookups.GenderSpecific value, String text, ims.framework.utils.Image image)
		{
			super.control.newRow(value, text, image);
		}
		public void newRow(ims.admin.vo.lookups.GenderSpecific value, String text, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, textColor);
		}
		public void newRow(ims.admin.vo.lookups.GenderSpecific value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)
		{
			super.control.newRow(value, text, image, textColor);
		}
		public boolean removeRow(ims.admin.vo.lookups.GenderSpecific value)
		{
			return super.control.removeRow(value);
		}
		public ims.admin.vo.lookups.GenderSpecific getValue()
		{
			return (ims.admin.vo.lookups.GenderSpecific)super.control.getValue();
		}
		public void setValue(ims.admin.vo.lookups.GenderSpecific value)
		{
			super.control.setValue(value);
		}
	}

	public static class GroupEventTypeRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper67 = new RuntimeAnchoring(designSize, runtimeSize, 242, 62, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper67.getX(), anchoringHelper67.getY(), anchoringHelper67.getWidth(), "Time Series (DFT)", startTabIndex.intValue() + 6);
			RuntimeAnchoring anchoringHelper68 = new RuntimeAnchoring(designSize, runtimeSize, 112, 62, 104, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper68.getX(), anchoringHelper68.getY(), anchoringHelper68.getWidth(), "Single Event", startTabIndex.intValue() + 5);
		}
		public void setText(GroupEventTypeEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupEventTypeEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupEventTypeEnumeration.None;
				case 0: return GroupEventTypeEnumeration.rdoTimeSeries;
				case 1: return GroupEventTypeEnumeration.rdoSingleEvent;
			}
			return null;
		}
		public void setValue(GroupEventTypeEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupEventTypeEnumeration.None.id);
		}
		public boolean isEnabled(GroupEventTypeEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupEventTypeEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupEventTypeEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupEventTypeEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupEventTypeEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupEventTypeEnumeration None = new GroupEventTypeEnumeration(-1);
		public static GroupEventTypeEnumeration rdoTimeSeries = new GroupEventTypeEnumeration(0);
		public static GroupEventTypeEnumeration rdoSingleEvent = new GroupEventTypeEnumeration(1);
		private GroupEventTypeEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupEventTypeEnumeration)o).id;
		}
		private int id;
	}

	public static class GroupTypeRadioButton extends RadioButtonBridge
	{
		private static final long serialVersionUID = 1L;
		
		protected void setContext(Integer startTabIndex, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize)
		{
			if(startTabIndex == null)
				throw new RuntimeException("Invalid startTabIndex ");
			RuntimeAnchoring anchoringHelper69 = new RuntimeAnchoring(designSize, runtimeSize, 242, 43, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(0, anchoringHelper69.getX(), anchoringHelper69.getY(), anchoringHelper69.getWidth(), "Complex", startTabIndex.intValue() + 4);
			RuntimeAnchoring anchoringHelper70 = new RuntimeAnchoring(designSize, runtimeSize, 112, 43, 64, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
			control.addButton(1, anchoringHelper70.getX(), anchoringHelper70.getY(), anchoringHelper70.getWidth(), "Simple", startTabIndex.intValue() + 3);
		}
		public void setText(GroupTypeEnumeration option, String value)
		{
			if(option != null && option.id >= 0 && value != null)
				control.setText(option.id, value);
		}
		public GroupTypeEnumeration getValue()
		{
			switch (super.control.getValue())
			{
				case -1: return GroupTypeEnumeration.None;
				case 0: return GroupTypeEnumeration.rdoComplex;
				case 1: return GroupTypeEnumeration.rdoSimple;
			}
			return null;
		}
		public void setValue(GroupTypeEnumeration value)
		{
			if(value != null)
				super.control.setValue(value.id);
			else
				super.control.setValue(GroupTypeEnumeration.None.id);
		}
		public boolean isEnabled(GroupTypeEnumeration option)
		{
			return super.control.isEnabled(option.id);
		}
		public void setEnabled(GroupTypeEnumeration option, boolean value)
		{
			super.control.setEnabled(option.id, value);
		}
		public boolean isVisible(GroupTypeEnumeration option)
		{
			return super.control.isVisible(option.id);
		}
		public void setVisible(GroupTypeEnumeration option, boolean value)
		{
			super.control.setVisible(option.id, value);
		}
		public void setVisible(boolean value)
		{
			super.control.setVisible(value);
		}
		public void setEnabled(boolean value)
		{
			super.control.setEnabled(value);
		}
	}
	public static class GroupTypeEnumeration implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public static GroupTypeEnumeration None = new GroupTypeEnumeration(-1);
		public static GroupTypeEnumeration rdoComplex = new GroupTypeEnumeration(0);
		public static GroupTypeEnumeration rdoSimple = new GroupTypeEnumeration(1);
		private GroupTypeEnumeration(int id)
		{
			this.id = id;
		}
		public boolean equals(Object o)
		{
			return this.id == ((GroupTypeEnumeration)o).id;
		}
		private int id;
	}
	private void validateContext(ims.framework.Context context)
	{
		if(context == null)
			return;
	}
	public boolean supportsRecordedInError()
	{
		return false;
	}
	public ims.vo.ValueObject getRecordedInErrorVo()
	{
		return null;
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception
	{
		setContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception
	{
		setContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));
	}
	protected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception
	{
		if(loader == null); // this is to avoid eclipse warning only.
		if(factory == null); // this is to avoid eclipse warning only.
		if(runtimeSize == null); // this is to avoid eclipse warning only.
		if(appForm == null)
			throw new RuntimeException("Invalid application form");
		if(startControlID == null)
			throw new RuntimeException("Invalid startControlID");
		if(control == null); // this is to avoid eclipse warning only.
		if(startTabIndex == null)
			throw new RuntimeException("Invalid startTabIndex");
		this.context = context;
		this.componentIdentifier = startControlID.toString();
		this.formInfo = form.getFormInfo();
		this.globalContext = new GlobalContext(context);
	
		if(skipContextValidation == null || !skipContextValidation.booleanValue())
		{
			validateContext(context);
		}
	
		super.setContext(form);

		ims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);
		if(runtimeSize == null)
			runtimeSize = designSize;
		form.setWidth(runtimeSize.getWidth());
		form.setHeight(runtimeSize.getHeight());
		super.setFormReferences(FormReferencesFlyweightFactory.getInstance().create(Forms.class));
		super.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));
		super.setGlobalContext(ContextBridgeFlyweightFactory.getInstance().create(GlobalContextBridge.class, context, false));
		super.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));

		// Context Menus
		contextMenus = new ContextMenus();
		contextMenus.contextMenuOCRRProvider = factory.createMenu(startControlID.intValue() + 1);
		contextMenus.contextMenuOCRRProviderADDNEWPROVIDERItem = factory.createMenuItem(startControlID.intValue() + 1, "Add New Provider", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuOCRRProvider.add(contextMenus.contextMenuOCRRProviderADDNEWPROVIDERItem);
		contextMenus.contextMenuOCRRProviderUPDATEPROVIDERItem = factory.createMenuItem(startControlID.intValue() + 2, "Edit Provider", true, false, new Integer(102150), true, false);
		contextMenus.contextMenuOCRRProvider.add(contextMenus.contextMenuOCRRProviderUPDATEPROVIDERItem);
		form.registerMenu(contextMenus.contextMenuOCRRProvider);
		contextMenus.contextMenuOCRRAssociatedTests = factory.createMenu(startControlID.intValue() + 2);
		contextMenus.contextMenuOCRRAssociatedTestsASSOCIATEWITHItem = factory.createMenuItem(startControlID.intValue() + 3, "Add Linked Investigations", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuOCRRAssociatedTests.add(contextMenus.contextMenuOCRRAssociatedTestsASSOCIATEWITHItem);
		contextMenus.contextMenuOCRRAssociatedTestsREMOVEItem = factory.createMenuItem(startControlID.intValue() + 4, "Remove Investigation", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOCRRAssociatedTests.add(contextMenus.contextMenuOCRRAssociatedTestsREMOVEItem);
		form.registerMenu(contextMenus.contextMenuOCRRAssociatedTests);
		contextMenus.contextMenuOCRRAssociatedQuestions = factory.createMenu(startControlID.intValue() + 3);
		contextMenus.contextMenuOCRRAssociatedQuestionsADDQUESTIONSItem = factory.createMenuItem(startControlID.intValue() + 5, "Add Questions/Information", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuOCRRAssociatedQuestions.add(contextMenus.contextMenuOCRRAssociatedQuestionsADDQUESTIONSItem);
		contextMenus.contextMenuOCRRAssociatedQuestionsREMOVEQUESTIONItem = factory.createMenuItem(startControlID.intValue() + 6, "Remove Question/Information", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOCRRAssociatedQuestions.add(contextMenus.contextMenuOCRRAssociatedQuestionsREMOVEQUESTIONItem);
		contextMenus.contextMenuOCRRAssociatedQuestionsMOVEUPItem = factory.createMenuItem(startControlID.intValue() + 7, "Move Up", true, false, new Integer(102197), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(540001)))
			contextMenus.contextMenuOCRRAssociatedQuestions.add(contextMenus.contextMenuOCRRAssociatedQuestionsMOVEUPItem);
		contextMenus.contextMenuOCRRAssociatedQuestionsMOVEDOWNItem = factory.createMenuItem(startControlID.intValue() + 8, "Move Down", true, false, new Integer(102198), true, false);
		if(factory.getUIEngine().getLoggedInRole().hasMenuActionRight(appForm, new ims.framework.MenuAction(540002)))
			contextMenus.contextMenuOCRRAssociatedQuestions.add(contextMenus.contextMenuOCRRAssociatedQuestionsMOVEDOWNItem);
		form.registerMenu(contextMenus.contextMenuOCRRAssociatedQuestions);
		contextMenus.contextMenuOCRRHelpText = factory.createMenu(startControlID.intValue() + 4);
		contextMenus.contextMenuOCRRHelpTextADD_HELPTEXTItem = factory.createMenuItem(startControlID.intValue() + 9, "Add Help Text", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuOCRRHelpText.add(contextMenus.contextMenuOCRRHelpTextADD_HELPTEXTItem);
		contextMenus.contextMenuOCRRHelpTextREMOVE_HELPTEXTItem = factory.createMenuItem(startControlID.intValue() + 10, "Remove Help Text", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOCRRHelpText.add(contextMenus.contextMenuOCRRHelpTextREMOVE_HELPTEXTItem);
		form.registerMenu(contextMenus.contextMenuOCRRHelpText);
		contextMenus.contextMenuOCRRTaxonomy = factory.createMenu(startControlID.intValue() + 5);
		contextMenus.contextMenuOCRRTaxonomyADD_TAXONOMYItem = factory.createMenuItem(startControlID.intValue() + 11, "Add Taxonomy", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuOCRRTaxonomy.add(contextMenus.contextMenuOCRRTaxonomyADD_TAXONOMYItem);
		contextMenus.contextMenuOCRRTaxonomyREMOVE_TAXONOMYItem = factory.createMenuItem(startControlID.intValue() + 12, "Remove Taxonomy", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOCRRTaxonomy.add(contextMenus.contextMenuOCRRTaxonomyREMOVE_TAXONOMYItem);
		form.registerMenu(contextMenus.contextMenuOCRRTaxonomy);
		contextMenus.contextMenuOCRRSynonyms = factory.createMenu(startControlID.intValue() + 6);
		contextMenus.contextMenuOCRRSynonymsADD_SYNONYMItem = factory.createMenuItem(startControlID.intValue() + 13, "Add Synonym", true, false, new Integer(102179), true, false);
		contextMenus.contextMenuOCRRSynonyms.add(contextMenus.contextMenuOCRRSynonymsADD_SYNONYMItem);
		contextMenus.contextMenuOCRRSynonymsREMOVE_SYNONYMItem = factory.createMenuItem(startControlID.intValue() + 14, "Remove Synonym", true, false, new Integer(102148), true, false);
		contextMenus.contextMenuOCRRSynonyms.add(contextMenus.contextMenuOCRRSynonymsREMOVE_SYNONYMItem);
		form.registerMenu(contextMenus.contextMenuOCRRSynonyms);
		contextMenus.contextMenuOCRRSpecimenSite = factory.createMenu(startControlID.intValue() + 7);
		contextMenus.contextMenuOCRRSpecimenSiteMOVE_UPItem = factory.createMenuItem(startControlID.intValue() + 15, "Move Up", true, false, new Integer(103116), true, false);
		contextMenus.contextMenuOCRRSpecimenSite.add(contextMenus.contextMenuOCRRSpecimenSiteMOVE_UPItem);
		contextMenus.contextMenuOCRRSpecimenSiteMOVE_DOWNItem = factory.createMenuItem(startControlID.intValue() + 16, "Move Down", true, false, new Integer(103117), true, false);
		contextMenus.contextMenuOCRRSpecimenSite.add(contextMenus.contextMenuOCRRSpecimenSiteMOVE_DOWNItem);
		contextMenus.contextMenuOCRRSpecimenSiteSELECT_SITESItem = factory.createMenuItem(startControlID.intValue() + 17, "Edit Sites", true, false, new Integer(103102), true, false);
		contextMenus.contextMenuOCRRSpecimenSite.add(contextMenus.contextMenuOCRRSpecimenSiteSELECT_SITESItem);
		contextMenus.contextMenuOCRRSpecimenSiteSORTItem = factory.createMenuItem(startControlID.intValue() + 18, "Sort", true, false, new Integer(102243), true, false);
		contextMenus.contextMenuOCRRSpecimenSite.add(contextMenus.contextMenuOCRRSpecimenSiteSORTItem);
		form.registerMenu(contextMenus.contextMenuOCRRSpecimenSite);


		// Layer Clasess
		lyrInvestigationsLayer m_lyrInvestigationsLayer = (lyrInvestigationsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrInvestigationsLayer.class, this, factory);
		super.addLayer(m_lyrInvestigationsLayer);
		m_lyrInvestigationsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);
		lyrSelectionLayer m_lyrSelectionLayer = (lyrSelectionLayer)LayerFlyweightFactory.getInstance().createLayer(lyrSelectionLayer.class, this, factory);
		super.addLayer(m_lyrSelectionLayer);
		m_lyrSelectionLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);

		// Label Controls
		RuntimeAnchoring anchoringHelper71 = new RuntimeAnchoring(designSize, runtimeSize, 112, 43, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1075), new Integer(anchoringHelper71.getX()), new Integer(anchoringHelper71.getY()), new Integer(anchoringHelper71.getWidth()), new Integer(anchoringHelper71.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Simple", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper72 = new RuntimeAnchoring(designSize, runtimeSize, 12, 273, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1076), new Integer(anchoringHelper72.getX()), new Integer(anchoringHelper72.getY()), new Integer(anchoringHelper72.getWidth()), new Integer(anchoringHelper72.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Instructions URL:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper73 = new RuntimeAnchoring(designSize, runtimeSize, 12, 261, 26, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1077), new Integer(anchoringHelper73.getX()), new Integer(anchoringHelper73.getY()), new Integer(anchoringHelper73.getWidth()), new Integer(anchoringHelper73.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "DFT", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper74 = new RuntimeAnchoring(designSize, runtimeSize, 112, 82, 104, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1078), new Integer(anchoringHelper74.getX()), new Integer(anchoringHelper74.getY()), new Integer(anchoringHelper74.getWidth()), new Integer(anchoringHelper74.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No. of Label Sets:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper75 = new RuntimeAnchoring(designSize, runtimeSize, 12, 62, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1079), new Integer(anchoringHelper75.getX()), new Integer(anchoringHelper75.getY()), new Integer(anchoringHelper75.getWidth()), new Integer(anchoringHelper75.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Event Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper76 = new RuntimeAnchoring(designSize, runtimeSize, 12, 43, 36, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1080), new Integer(anchoringHelper76.getX()), new Integer(anchoringHelper76.getY()), new Integer(anchoringHelper76.getWidth()), new Integer(anchoringHelper76.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Type:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper77 = new RuntimeAnchoring(designSize, runtimeSize, 112, 174, 142, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1081), new Integer(anchoringHelper77.getX()), new Integer(anchoringHelper77.getY()), new Integer(anchoringHelper77.getWidth()), new Integer(anchoringHelper77.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "This Investigation is not", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper78 = new RuntimeAnchoring(designSize, runtimeSize, 240, 242, 88, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1082), new Integer(anchoringHelper78.getX()), new Integer(anchoringHelper78.getY()), new Integer(anchoringHelper78.getWidth()), new Integer(anchoringHelper78.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Security Level:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper79 = new RuntimeAnchoring(designSize, runtimeSize, 40, 296, 76, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1083), new Integer(anchoringHelper79.getX()), new Integer(anchoringHelper79.getY()), new Integer(anchoringHelper79.getWidth()), new Integer(anchoringHelper79.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "No Interface", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper80 = new RuntimeAnchoring(designSize, runtimeSize, 321, 296, 137, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1084), new Integer(anchoringHelper80.getX()), new Integer(anchoringHelper80.getY()), new Integer(anchoringHelper80.getWidth()), new Integer(anchoringHelper80.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Requires Site Specifier:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper81 = new RuntimeAnchoring(designSize, runtimeSize, 392, 174, 54, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1085), new Integer(anchoringHelper81.getX()), new Integer(anchoringHelper81.getY()), new Integer(anchoringHelper81.getWidth()), new Integer(anchoringHelper81.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Resulted", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper82 = new RuntimeAnchoring(designSize, runtimeSize, 288, 174, 61, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1086), new Integer(anchoringHelper82.getX()), new Integer(anchoringHelper82.getY()), new Integer(anchoringHelper82.getWidth()), new Integer(anchoringHelper82.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Orderable", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper83 = new RuntimeAnchoring(designSize, runtimeSize, 144, 296, 149, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1087), new Integer(anchoringHelper83.getX()), new Integer(anchoringHelper83.getY()), new Integer(anchoringHelper83.getWidth()), new Integer(anchoringHelper83.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Phlebotomist May Collect", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper84 = new RuntimeAnchoring(designSize, runtimeSize, 12, 218, 97, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1088), new Integer(anchoringHelper84.getX()), new Integer(anchoringHelper84.getY()), new Integer(anchoringHelper84.getWidth()), new Integer(anchoringHelper84.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Gender Specific:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper85 = new RuntimeAnchoring(designSize, runtimeSize, 12, 194, 83, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1089), new Integer(anchoringHelper85.getX()), new Integer(anchoringHelper85.getY()), new Integer(anchoringHelper85.getWidth()), new Integer(anchoringHelper85.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Active Status:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper86 = new RuntimeAnchoring(designSize, runtimeSize, 12, 129, 73, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1090), new Integer(anchoringHelper86.getX()), new Integer(anchoringHelper86.getY()), new Integer(anchoringHelper86.getWidth()), new Integer(anchoringHelper86.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Description:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper87 = new RuntimeAnchoring(designSize, runtimeSize, 12, 106, 41, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1091), new Integer(anchoringHelper87.getX()), new Integer(anchoringHelper87.getY()), new Integer(anchoringHelper87.getWidth()), new Integer(anchoringHelper87.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Name:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper88 = new RuntimeAnchoring(designSize, runtimeSize, 12, 18, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1092), new Integer(anchoringHelper88.getX()), new Integer(anchoringHelper88.getY()), new Integer(anchoringHelper88.getWidth()), new Integer(anchoringHelper88.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Category:", new Integer(1), null, new Integer(0)}));
		RuntimeAnchoring anchoringHelper89 = new RuntimeAnchoring(designSize, runtimeSize, 12, 242, 90, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1093), new Integer(anchoringHelper89.getX()), new Integer(anchoringHelper89.getY()), new Integer(anchoringHelper89.getWidth()), new Integer(anchoringHelper89.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, "Display Colour:", new Integer(1), null, new Integer(0)}));

		// Button Controls
		RuntimeAnchoring anchoringHelper90 = new RuntimeAnchoring(designSize, runtimeSize, 11, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1094), new Integer(anchoringHelper90.getX()), new Integer(anchoringHelper90.getY()), new Integer(anchoringHelper90.getWidth()), new Integer(anchoringHelper90.getHeight()), new Integer(startTabIndex.intValue() + 9079), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, "Edit", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper91 = new RuntimeAnchoring(designSize, runtimeSize, 680, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1095), new Integer(anchoringHelper91.getX()), new Integer(anchoringHelper91.getY()), new Integer(anchoringHelper91.getWidth()), new Integer(anchoringHelper91.getHeight()), new Integer(startTabIndex.intValue() + 9081), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Save", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));
		RuntimeAnchoring anchoringHelper92 = new RuntimeAnchoring(designSize, runtimeSize, 760, 600, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);
		super.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1096), new Integer(anchoringHelper92.getX()), new Integer(anchoringHelper92.getY()), new Integer(anchoringHelper92.getWidth()), new Integer(anchoringHelper92.getHeight()), new Integer(startTabIndex.intValue() + 9083), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, "Cancel", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));

		// TextBox Controls
		RuntimeAnchoring anchoringHelper93 = new RuntimeAnchoring(designSize, runtimeSize, 112, 264, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1097), new Integer(anchoringHelper93.getX()), new Integer(anchoringHelper93.getY()), new Integer(anchoringHelper93.getWidth()), new Integer(anchoringHelper93.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(200), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper94 = new RuntimeAnchoring(designSize, runtimeSize, 112, 129, 352, 40, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1098), new Integer(anchoringHelper94.getX()), new Integer(anchoringHelper94.getY()), new Integer(anchoringHelper94.getWidth()), new Integer(anchoringHelper94.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));
		RuntimeAnchoring anchoringHelper95 = new RuntimeAnchoring(designSize, runtimeSize, 112, 104, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1099), new Integer(anchoringHelper95.getX()), new Integer(anchoringHelper95.getY()), new Integer(anchoringHelper95.getWidth()), new Integer(anchoringHelper95.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(200), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.TRUE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, "", ""}));

		// ComboBox Controls
		RuntimeAnchoring anchoringHelper96 = new RuntimeAnchoring(designSize, runtimeSize, 328, 240, 136, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbSecurityLevelTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1100), new Integer(anchoringHelper96.getX()), new Integer(anchoringHelper96.getY()), new Integer(anchoringHelper96.getWidth()), new Integer(anchoringHelper96.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbSecurityLevelTemp);
		cmbSecurityLevelComboBox cmbSecurityLevel = (cmbSecurityLevelComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSecurityLevelComboBox.class, m_cmbSecurityLevelTemp);
		super.addComboBox(cmbSecurityLevel);
		RuntimeAnchoring anchoringHelper97 = new RuntimeAnchoring(designSize, runtimeSize, 112, 240, 120, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbColorTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1101), new Integer(anchoringHelper97.getX()), new Integer(anchoringHelper97.getY()), new Integer(anchoringHelper97.getWidth()), new Integer(anchoringHelper97.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbColorTemp);
		cmbColorComboBox cmbColor = (cmbColorComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbColorComboBox.class, m_cmbColorTemp);
		super.addComboBox(cmbColor);
		RuntimeAnchoring anchoringHelper98 = new RuntimeAnchoring(designSize, runtimeSize, 112, 192, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbStatusTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1102), new Integer(anchoringHelper98.getX()), new Integer(anchoringHelper98.getY()), new Integer(anchoringHelper98.getWidth()), new Integer(anchoringHelper98.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbStatusTemp);
		cmbStatusComboBox cmbStatus = (cmbStatusComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbStatusComboBox.class, m_cmbStatusTemp);
		super.addComboBox(cmbStatus);
		RuntimeAnchoring anchoringHelper99 = new RuntimeAnchoring(designSize, runtimeSize, 112, 16, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbCategoryTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1103), new Integer(anchoringHelper99.getX()), new Integer(anchoringHelper99.getY()), new Integer(anchoringHelper99.getWidth()), new Integer(anchoringHelper99.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});
		addControl(m_cmbCategoryTemp);
		cmbCategoryComboBox cmbCategory = (cmbCategoryComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbCategoryComboBox.class, m_cmbCategoryTemp);
		super.addComboBox(cmbCategory);
		RuntimeAnchoring anchoringHelper100 = new RuntimeAnchoring(designSize, runtimeSize, 112, 216, 352, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		ComboBox m_cmbGenderSpecificTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1104), new Integer(anchoringHelper100.getX()), new Integer(anchoringHelper100.getY()), new Integer(anchoringHelper100.getWidth()), new Integer(anchoringHelper100.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});
		addControl(m_cmbGenderSpecificTemp);
		cmbGenderSpecificComboBox cmbGenderSpecific = (cmbGenderSpecificComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGenderSpecificComboBox.class, m_cmbGenderSpecificTemp);
		super.addComboBox(cmbGenderSpecific);

		// CheckBox Controls
		RuntimeAnchoring anchoringHelper101 = new RuntimeAnchoring(designSize, runtimeSize, 16, 296, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1105), new Integer(anchoringHelper101.getX()), new Integer(anchoringHelper101.getY()), new Integer(anchoringHelper101.getWidth()), new Integer(anchoringHelper101.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper102 = new RuntimeAnchoring(designSize, runtimeSize, 303, 296, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1106), new Integer(anchoringHelper102.getX()), new Integer(anchoringHelper102.getY()), new Integer(anchoringHelper102.getWidth()), new Integer(anchoringHelper102.getHeight()), new Integer(startTabIndex.intValue() + 22), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper103 = new RuntimeAnchoring(designSize, runtimeSize, 376, 174, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1107), new Integer(anchoringHelper103.getX()), new Integer(anchoringHelper103.getY()), new Integer(anchoringHelper103.getWidth()), new Integer(anchoringHelper103.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper104 = new RuntimeAnchoring(designSize, runtimeSize, 272, 174, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1108), new Integer(anchoringHelper104.getX()), new Integer(anchoringHelper104.getY()), new Integer(anchoringHelper104.getWidth()), new Integer(anchoringHelper104.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.TRUE, null}));
		RuntimeAnchoring anchoringHelper105 = new RuntimeAnchoring(designSize, runtimeSize, 128, 296, 16, 16, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(CheckBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1109), new Integer(anchoringHelper105.getX()), new Integer(anchoringHelper105.getY()), new Integer(anchoringHelper105.getWidth()), new Integer(anchoringHelper105.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.UNKNOWN, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,"", Boolean.FALSE, null}));

		// IntBox Controls
		RuntimeAnchoring anchoringHelper106 = new RuntimeAnchoring(designSize, runtimeSize, 242, 80, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);
		super.addControl(factory.getControl(IntBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1110), new Integer(anchoringHelper106.getX()), new Integer(anchoringHelper106.getY()), new Integer(anchoringHelper106.getWidth()), new Integer(anchoringHelper106.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, new Integer(2)}));

		// RadioButton Controls
		RadioButton tmpGroupEventType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1111), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupEventType);
		GroupEventTypeRadioButton GroupEventType = (GroupEventTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupEventTypeRadioButton.class, tmpGroupEventType);
		GroupEventType.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupEventType);
		RadioButton tmpGroupType = (RadioButton)factory.getControl(RadioButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1112), new Integer(0), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.TRUE});
		super.addControl(tmpGroupType);
		GroupTypeRadioButton GroupType = (GroupTypeRadioButton)RadioButtonBridgeFlyweightFactory.getInstance().createRadioButtonBridge(GroupTypeRadioButton.class, tmpGroupType);
		GroupType.setContext(startTabIndex, designSize, runtimeSize);
		super.addRadioButton(GroupType);

		// Link Controls
		RuntimeAnchoring anchoringHelper107 = new RuntimeAnchoring(designSize, runtimeSize, 736, 0, 72, 17, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);
		super.addControl(factory.getControl(Link.class, new Object[] { control, new Integer(startControlID.intValue() + 1113), new Integer(anchoringHelper107.getX()), new Integer(anchoringHelper107.getY()), new Integer(anchoringHelper107.getWidth()), new Integer(anchoringHelper107.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.TOPRIGHT,"Return to List", Boolean.FALSE, null}));
	}



	public Forms getForms()
	{
		return (Forms)super.getFormReferences();
	}

	public Images getImages()
	{
		return (Images)super.getImageReferences();
	}
	public lyrInvestigationsLayer lyrInvestigations()
	{
		return (lyrInvestigationsLayer)super.getLayer(0);
	}
	public lyrSelectionLayer lyrSelection()
	{
		return (lyrSelectionLayer)super.getLayer(1);
	}
	public Label lblSimple()
	{
		return (Label)super.getControl(10);
	}
	public Label lblDFT2()
	{
		return (Label)super.getControl(11);
	}
	public Label lblDFT1()
	{
		return (Label)super.getControl(12);
	}
	public Label lblNoOfLabelSets()
	{
		return (Label)super.getControl(13);
	}
	public Label lblEventType()
	{
		return (Label)super.getControl(14);
	}
	public Label lblType()
	{
		return (Label)super.getControl(15);
	}
	public Label lblNoInterface()
	{
		return (Label)super.getControl(18);
	}
	public Label lblReqSiteSpecifier()
	{
		return (Label)super.getControl(19);
	}
	public Label lblNotResulted()
	{
		return (Label)super.getControl(20);
	}
	public Label lblNotOrderable()
	{
		return (Label)super.getControl(21);
	}
	public Label lblPhlebotomist()
	{
		return (Label)super.getControl(22);
	}
	public Label lblDescription()
	{
		return (Label)super.getControl(25);
	}
	public Label lblName()
	{
		return (Label)super.getControl(26);
	}
	public Label lblCategory()
	{
		return (Label)super.getControl(27);
	}
	public Button btnUpdate()
	{
		return (Button)super.getControl(29);
	}
	public Button btnSave()
	{
		return (Button)super.getControl(30);
	}
	public Button btnCancel()
	{
		return (Button)super.getControl(31);
	}
	public TextBox txtTimeSeriesInstructions()
	{
		return (TextBox)super.getControl(32);
	}
	public TextBox txtDescription()
	{
		return (TextBox)super.getControl(33);
	}
	public TextBox txtName()
	{
		return (TextBox)super.getControl(34);
	}
	public cmbSecurityLevelComboBox cmbSecurityLevel()
	{
		return (cmbSecurityLevelComboBox)super.getComboBox(0);
	}
	public cmbColorComboBox cmbColor()
	{
		return (cmbColorComboBox)super.getComboBox(1);
	}
	public cmbStatusComboBox cmbStatus()
	{
		return (cmbStatusComboBox)super.getComboBox(2);
	}
	public cmbCategoryComboBox cmbCategory()
	{
		return (cmbCategoryComboBox)super.getComboBox(3);
	}
	public cmbGenderSpecificComboBox cmbGenderSpecific()
	{
		return (cmbGenderSpecificComboBox)super.getComboBox(4);
	}
	public CheckBox chkNoInterface()
	{
		return (CheckBox)super.getControl(40);
	}
	public CheckBox chkRequiresSite()
	{
		return (CheckBox)super.getControl(41);
	}
	public CheckBox chkNotResulted()
	{
		return (CheckBox)super.getControl(42);
	}
	public CheckBox chkNotOrderable()
	{
		return (CheckBox)super.getControl(43);
	}
	public CheckBox chkPhlebMay()
	{
		return (CheckBox)super.getControl(44);
	}
	public IntBox intLabelsSets()
	{
		return (IntBox)super.getControl(45);
	}
	public GroupEventTypeRadioButton GroupEventType()
	{
		return (GroupEventTypeRadioButton)super.getRadioButton(0);
	}
	public GroupTypeRadioButton GroupType()
	{
		return (GroupTypeRadioButton)super.getRadioButton(1);
	}
	public Link lnkReturn()
	{
		return (Link)super.getControl(48);
	}

	public static class Forms implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		protected final class LocalFormName extends FormName
		{
			private static final long serialVersionUID = 1L;
		
			private LocalFormName(int name)
			{
				super(name);
			}
		}

		private Forms()
		{
			OCRR = new OCRRForms();
			Core = new CoreForms();
			Admin = new AdminForms();
		}
		public final class OCRRForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRForms()
			{
				TestList = new LocalFormName(116103);
				ProfileList = new LocalFormName(116106);
				ItemSelection = new LocalFormName(116105);
				ProfileEdit = new LocalFormName(116108);
				TestEdit = new LocalFormName(116104);
				AlternativeContainerDialog = new LocalFormName(116157);
			}
			public final FormName TestList;
			public final FormName ProfileList;
			public final FormName ItemSelection;
			public final FormName ProfileEdit;
			public final FormName TestEdit;
			public final FormName AlternativeContainerDialog;
		}
		public final class CoreForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreForms()
			{
				TaxonomySearch = new LocalFormName(104102);
				QuestionSelectNew = new LocalFormName(102182);
				SelectLookupInstances = new LocalFormName(102171);
			}
			public final FormName TaxonomySearch;
			public final FormName QuestionSelectNew;
			public final FormName SelectLookupInstances;
		}
		public final class AdminForms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private AdminForms()
			{
				AddUserDefinedLookupType = new LocalFormName(103171);
			}
			public final FormName AddUserDefinedLookupType;
		}

		public OCRRForms OCRR;
		public CoreForms Core;
		public AdminForms Admin;
	}


	public static class Images implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		private final class ImageHelper extends ims.framework.utils.ImagePath
		{
			private static final long serialVersionUID = 1L;
			
			private ImageHelper(int id, String path, Integer width, Integer height)
			{
				super(id, path, width, height);
			}
		}
		private Images()
		{
			OCRR = new OCRRImages();
			Core = new CoreImages();
		}
		public final class OCRRImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private OCRRImages()
			{
				Investigation = new ImageHelper(116105, "Images/OCRR/Investigation.gif", new Integer(16), new Integer(16));
				Information = new ImageHelper(116101, "Images/OCRR/Information.gif", new Integer(16), new Integer(16));
				Question = new ImageHelper(116100, "Images/OCRR/Question.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image Investigation;
			public final ims.framework.utils.Image Information;
			public final ims.framework.utils.Image Question;
		}
		public final class CoreImages implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			private CoreImages()
			{
				QuestionSmall = new ImageHelper(102215, "Images/Core/Help-3.gif", new Integer(16), new Integer(16));
			}
			public final ims.framework.utils.Image QuestionSmall;
		}
		public final OCRRImages OCRR;
		public final CoreImages Core;
	}
	public GlobalContext getGlobalContext()
	{
		return this.globalContext;
	}
	public static class GlobalContextBridge extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
	}
	public LocalContext getLocalContext()
	{
		return (LocalContext)super.getLocalCtx();
	}
	public class LocalContext extends ContextBridge
	{
		private static final long serialVersionUID = 1L;
		
		public LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			super.setContext(context);
			String prefix = formInfo.getLocalVariablesPrefix();
			cxl_IsNew = new ims.framework.ContextVariable("IsNew", prefix + "_lv_OCRR.TestEdit.__internal_x_context__IsNew_" + componentIdentifier + "");
			cxl_WhatColor = new ims.framework.ContextVariable("WhatColor", prefix + "_lv_OCRR.TestEdit.__internal_x_context__WhatColor_" + componentIdentifier + "");
			cxl_SelectedInvestigation = new ims.framework.ContextVariable("SelectedInvestigation", prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier + "");
			cxl_CurrentScreenMode = new ims.framework.ContextVariable("CurrentScreenMode", prefix + "_lv_OCRR.TestEdit.__internal_x_context__CurrentScreenMode_" + componentIdentifier + "");
			cxl_OldSynonyms = new ims.framework.ContextVariable("OldSynonyms", prefix + "_lv_OCRR.TestEdit.__internal_x_context__OldSynonyms_" + componentIdentifier + "");
			cxl_isProfile = new ims.framework.ContextVariable("isProfile", prefix + "_lv_OCRR.TestEdit.__internal_x_context__isProfile_" + componentIdentifier + "");
			cxl_RemovedQuestions = new ims.framework.ContextVariable("RemovedQuestions", prefix + "_lv_OCRR.TestEdit.__internal_x_context__RemovedQuestions_" + componentIdentifier + "");
			cxl_SiteSortOrder = new ims.framework.ContextVariable("SiteSortOrder", prefix + "_lv_OCRR.TestEdit.__internal_x_context__SiteSortOrder_" + componentIdentifier + "");
			cxl_Containers = new ims.framework.ContextVariable("Containers", prefix + "_lv_OCRR.TestEdit.__internal_x_context__Containers_" + componentIdentifier + "");
			cxl_InvIndexBackup = new ims.framework.ContextVariable("InvIndexBackup", prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier + "");
			cxl_InvestigationBackup = new ims.framework.ContextVariable("InvestigationBackup", prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier + "");
			cxl_ConfimSaveMsgBoxId = new ims.framework.ContextVariable("ConfimSaveMsgBoxId", prefix + "_lv_OCRR.TestEdit.__internal_x_context__ConfimSaveMsgBoxId_" + componentIdentifier + "");
			cxl_DeletePathologyDetailsConfirmationId = new ims.framework.ContextVariable("DeletePathologyDetailsConfirmationId", prefix + "_lv_OCRR.TestEdit.__internal_x_context__DeletePathologyDetailsConfirmationId_" + componentIdentifier + "");
			cxl_RightClickSelectedOnHeaders = new ims.framework.ContextVariable("RightClickSelectedOnHeaders", prefix + "_lv_OCRR.TestEdit.__internal_x_context__RightClickSelectedOnHeaders_" + componentIdentifier + "");
		}
		
		public boolean getIsNewIsNotNull()
		{
			return !cxl_IsNew.getValueIsNull(context);
		}
		public Boolean getIsNew()
		{
			return (Boolean)cxl_IsNew.getValue(context);
		}
		public void setIsNew(Boolean value)
		{
			cxl_IsNew.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_IsNew = null;
		public boolean getWhatColorIsNotNull()
		{
			return !cxl_WhatColor.getValueIsNull(context);
		}
		public Integer getWhatColor()
		{
			return (Integer)cxl_WhatColor.getValue(context);
		}
		public void setWhatColor(Integer value)
		{
			cxl_WhatColor.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_WhatColor = null;
		public boolean getSelectedInvestigationIsNotNull()
		{
			return !cxl_SelectedInvestigation.getValueIsNull(context);
		}
		public ims.ocrr.vo.InvestigationVo getSelectedInvestigation()
		{
			return (ims.ocrr.vo.InvestigationVo)cxl_SelectedInvestigation.getValue(context);
		}
		public void setSelectedInvestigation(ims.ocrr.vo.InvestigationVo value)
		{
			cxl_SelectedInvestigation.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SelectedInvestigation = null;
		public boolean getCurrentScreenModeIsNotNull()
		{
			return !cxl_CurrentScreenMode.getValueIsNull(context);
		}
		public Integer getCurrentScreenMode()
		{
			return (Integer)cxl_CurrentScreenMode.getValue(context);
		}
		public void setCurrentScreenMode(Integer value)
		{
			cxl_CurrentScreenMode.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_CurrentScreenMode = null;
		public boolean getOldSynonymsIsNotNull()
		{
			return !cxl_OldSynonyms.getValueIsNull(context);
		}
		public ims.ocrr.vo.InvSynonymVoCollection getOldSynonyms()
		{
			return (ims.ocrr.vo.InvSynonymVoCollection)cxl_OldSynonyms.getValue(context);
		}
		public void setOldSynonyms(ims.ocrr.vo.InvSynonymVoCollection value)
		{
			cxl_OldSynonyms.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_OldSynonyms = null;
		public boolean getisProfileIsNotNull()
		{
			return !cxl_isProfile.getValueIsNull(context);
		}
		public Boolean getisProfile()
		{
			return (Boolean)cxl_isProfile.getValue(context);
		}
		public void setisProfile(Boolean value)
		{
			cxl_isProfile.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_isProfile = null;
		public boolean getRemovedQuestionsIsNotNull()
		{
			return !cxl_RemovedQuestions.getValueIsNull(context);
		}
		public ims.ocrr.vo.InvestigationQuestionVo getRemovedQuestions()
		{
			return (ims.ocrr.vo.InvestigationQuestionVo)cxl_RemovedQuestions.getValue(context);
		}
		public void setRemovedQuestions(ims.ocrr.vo.InvestigationQuestionVo value)
		{
			cxl_RemovedQuestions.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RemovedQuestions = null;
		public boolean getSiteSortOrderIsNotNull()
		{
			return !cxl_SiteSortOrder.getValueIsNull(context);
		}
		public ims.framework.enumerations.SortOrder getSiteSortOrder()
		{
			return (ims.framework.enumerations.SortOrder)cxl_SiteSortOrder.getValue(context);
		}
		public void setSiteSortOrder(ims.framework.enumerations.SortOrder value)
		{
			cxl_SiteSortOrder.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_SiteSortOrder = null;
		public boolean getContainersIsNotNull()
		{
			return !cxl_Containers.getValueIsNull(context);
		}
		public ims.ocrr.vo.PathSpecimenContainerDetailVoCollection getContainers()
		{
			return (ims.ocrr.vo.PathSpecimenContainerDetailVoCollection)cxl_Containers.getValue(context);
		}
		public void setContainers(ims.ocrr.vo.PathSpecimenContainerDetailVoCollection value)
		{
			cxl_Containers.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_Containers = null;
		public boolean getInvIndexBackupIsNotNull()
		{
			return !cxl_InvIndexBackup.getValueIsNull(context);
		}
		public ims.ocrr.vo.InvestigationIndexVo getInvIndexBackup()
		{
			return (ims.ocrr.vo.InvestigationIndexVo)cxl_InvIndexBackup.getValue(context);
		}
		public void setInvIndexBackup(ims.ocrr.vo.InvestigationIndexVo value)
		{
			cxl_InvIndexBackup.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InvIndexBackup = null;
		public boolean getInvestigationBackupIsNotNull()
		{
			return !cxl_InvestigationBackup.getValueIsNull(context);
		}
		public ims.ocrr.vo.InvestigationVo getInvestigationBackup()
		{
			return (ims.ocrr.vo.InvestigationVo)cxl_InvestigationBackup.getValue(context);
		}
		public void setInvestigationBackup(ims.ocrr.vo.InvestigationVo value)
		{
			cxl_InvestigationBackup.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_InvestigationBackup = null;
		public boolean getConfimSaveMsgBoxIdIsNotNull()
		{
			return !cxl_ConfimSaveMsgBoxId.getValueIsNull(context);
		}
		public Integer getConfimSaveMsgBoxId()
		{
			return (Integer)cxl_ConfimSaveMsgBoxId.getValue(context);
		}
		public void setConfimSaveMsgBoxId(Integer value)
		{
			cxl_ConfimSaveMsgBoxId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_ConfimSaveMsgBoxId = null;
		public boolean getDeletePathologyDetailsConfirmationIdIsNotNull()
		{
			return !cxl_DeletePathologyDetailsConfirmationId.getValueIsNull(context);
		}
		public Integer getDeletePathologyDetailsConfirmationId()
		{
			return (Integer)cxl_DeletePathologyDetailsConfirmationId.getValue(context);
		}
		public void setDeletePathologyDetailsConfirmationId(Integer value)
		{
			cxl_DeletePathologyDetailsConfirmationId.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_DeletePathologyDetailsConfirmationId = null;
		public boolean getRightClickSelectedOnHeadersIsNotNull()
		{
			return !cxl_RightClickSelectedOnHeaders.getValueIsNull(context);
		}
		public Boolean getRightClickSelectedOnHeaders()
		{
			return (Boolean)cxl_RightClickSelectedOnHeaders.getValue(context);
		}
		public void setRightClickSelectedOnHeaders(Boolean value)
		{
			cxl_RightClickSelectedOnHeaders.setValue(context, value);
		}
		private ims.framework.ContextVariable cxl_RightClickSelectedOnHeaders = null;
	}

	public final class ContextMenus implements java.io.Serializable
	{
		private static final long serialVersionUID = 1L;
		public final class OCRRProvider implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADDNEWPROVIDER = 1;
			public static final int UPDATEPROVIDER = 2;
		}
		public void disableAllOCRRProviderMenuItems()
		{
			this.contextMenuOCRRProviderADDNEWPROVIDERItem.setEnabled(false);
			this.contextMenuOCRRProviderUPDATEPROVIDERItem.setEnabled(false);
		}
		public void hideAllOCRRProviderMenuItems()
		{
			this.contextMenuOCRRProviderADDNEWPROVIDERItem.setVisible(false);
			this.contextMenuOCRRProviderUPDATEPROVIDERItem.setVisible(false);
		}
		private Menu contextMenuOCRRProvider;
		public MenuItem getOCRRProviderADDNEWPROVIDERItem()
		{
			return this.contextMenuOCRRProviderADDNEWPROVIDERItem;
		}
		private MenuItem contextMenuOCRRProviderADDNEWPROVIDERItem;
		public MenuItem getOCRRProviderUPDATEPROVIDERItem()
		{
			return this.contextMenuOCRRProviderUPDATEPROVIDERItem;
		}
		private MenuItem contextMenuOCRRProviderUPDATEPROVIDERItem;
		public final class OCRRAssociatedTests implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ASSOCIATEWITH = 3;
			public static final int REMOVE = 4;
		}
		public void disableAllOCRRAssociatedTestsMenuItems()
		{
			this.contextMenuOCRRAssociatedTestsASSOCIATEWITHItem.setEnabled(false);
			this.contextMenuOCRRAssociatedTestsREMOVEItem.setEnabled(false);
		}
		public void hideAllOCRRAssociatedTestsMenuItems()
		{
			this.contextMenuOCRRAssociatedTestsASSOCIATEWITHItem.setVisible(false);
			this.contextMenuOCRRAssociatedTestsREMOVEItem.setVisible(false);
		}
		private Menu contextMenuOCRRAssociatedTests;
		public MenuItem getOCRRAssociatedTestsASSOCIATEWITHItem()
		{
			return this.contextMenuOCRRAssociatedTestsASSOCIATEWITHItem;
		}
		private MenuItem contextMenuOCRRAssociatedTestsASSOCIATEWITHItem;
		public MenuItem getOCRRAssociatedTestsREMOVEItem()
		{
			return this.contextMenuOCRRAssociatedTestsREMOVEItem;
		}
		private MenuItem contextMenuOCRRAssociatedTestsREMOVEItem;
		public final class OCRRAssociatedQuestions implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADDQUESTIONS = 5;
			public static final int REMOVEQUESTION = 6;
			public static final int MOVEUP = 7;
			public static final int MOVEDOWN = 8;
		}
		public void disableAllOCRRAssociatedQuestionsMenuItems()
		{
			this.contextMenuOCRRAssociatedQuestionsADDQUESTIONSItem.setEnabled(false);
			this.contextMenuOCRRAssociatedQuestionsREMOVEQUESTIONItem.setEnabled(false);
			this.contextMenuOCRRAssociatedQuestionsMOVEUPItem.setEnabled(false);
			this.contextMenuOCRRAssociatedQuestionsMOVEDOWNItem.setEnabled(false);
		}
		public void hideAllOCRRAssociatedQuestionsMenuItems()
		{
			this.contextMenuOCRRAssociatedQuestionsADDQUESTIONSItem.setVisible(false);
			this.contextMenuOCRRAssociatedQuestionsREMOVEQUESTIONItem.setVisible(false);
			this.contextMenuOCRRAssociatedQuestionsMOVEUPItem.setVisible(false);
			this.contextMenuOCRRAssociatedQuestionsMOVEDOWNItem.setVisible(false);
		}
		private Menu contextMenuOCRRAssociatedQuestions;
		public MenuItem getOCRRAssociatedQuestionsADDQUESTIONSItem()
		{
			return this.contextMenuOCRRAssociatedQuestionsADDQUESTIONSItem;
		}
		private MenuItem contextMenuOCRRAssociatedQuestionsADDQUESTIONSItem;
		public MenuItem getOCRRAssociatedQuestionsREMOVEQUESTIONItem()
		{
			return this.contextMenuOCRRAssociatedQuestionsREMOVEQUESTIONItem;
		}
		private MenuItem contextMenuOCRRAssociatedQuestionsREMOVEQUESTIONItem;
		public ReadOnlyMenuItem getOCRRAssociatedQuestionsMOVEUPItem()
		{
			return this.contextMenuOCRRAssociatedQuestionsMOVEUPItem;
		}
		private MenuItem contextMenuOCRRAssociatedQuestionsMOVEUPItem;
		public ReadOnlyMenuItem getOCRRAssociatedQuestionsMOVEDOWNItem()
		{
			return this.contextMenuOCRRAssociatedQuestionsMOVEDOWNItem;
		}
		private MenuItem contextMenuOCRRAssociatedQuestionsMOVEDOWNItem;
		public final class OCRRHelpText implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD_HELPTEXT = 9;
			public static final int REMOVE_HELPTEXT = 10;
		}
		public void disableAllOCRRHelpTextMenuItems()
		{
			this.contextMenuOCRRHelpTextADD_HELPTEXTItem.setEnabled(false);
			this.contextMenuOCRRHelpTextREMOVE_HELPTEXTItem.setEnabled(false);
		}
		public void hideAllOCRRHelpTextMenuItems()
		{
			this.contextMenuOCRRHelpTextADD_HELPTEXTItem.setVisible(false);
			this.contextMenuOCRRHelpTextREMOVE_HELPTEXTItem.setVisible(false);
		}
		private Menu contextMenuOCRRHelpText;
		public MenuItem getOCRRHelpTextADD_HELPTEXTItem()
		{
			return this.contextMenuOCRRHelpTextADD_HELPTEXTItem;
		}
		private MenuItem contextMenuOCRRHelpTextADD_HELPTEXTItem;
		public MenuItem getOCRRHelpTextREMOVE_HELPTEXTItem()
		{
			return this.contextMenuOCRRHelpTextREMOVE_HELPTEXTItem;
		}
		private MenuItem contextMenuOCRRHelpTextREMOVE_HELPTEXTItem;
		public final class OCRRTaxonomy implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD_TAXONOMY = 11;
			public static final int REMOVE_TAXONOMY = 12;
		}
		public void disableAllOCRRTaxonomyMenuItems()
		{
			this.contextMenuOCRRTaxonomyADD_TAXONOMYItem.setEnabled(false);
			this.contextMenuOCRRTaxonomyREMOVE_TAXONOMYItem.setEnabled(false);
		}
		public void hideAllOCRRTaxonomyMenuItems()
		{
			this.contextMenuOCRRTaxonomyADD_TAXONOMYItem.setVisible(false);
			this.contextMenuOCRRTaxonomyREMOVE_TAXONOMYItem.setVisible(false);
		}
		private Menu contextMenuOCRRTaxonomy;
		public MenuItem getOCRRTaxonomyADD_TAXONOMYItem()
		{
			return this.contextMenuOCRRTaxonomyADD_TAXONOMYItem;
		}
		private MenuItem contextMenuOCRRTaxonomyADD_TAXONOMYItem;
		public MenuItem getOCRRTaxonomyREMOVE_TAXONOMYItem()
		{
			return this.contextMenuOCRRTaxonomyREMOVE_TAXONOMYItem;
		}
		private MenuItem contextMenuOCRRTaxonomyREMOVE_TAXONOMYItem;
		public final class OCRRSynonyms implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int ADD_SYNONYM = 13;
			public static final int REMOVE_SYNONYM = 14;
		}
		public void disableAllOCRRSynonymsMenuItems()
		{
			this.contextMenuOCRRSynonymsADD_SYNONYMItem.setEnabled(false);
			this.contextMenuOCRRSynonymsREMOVE_SYNONYMItem.setEnabled(false);
		}
		public void hideAllOCRRSynonymsMenuItems()
		{
			this.contextMenuOCRRSynonymsADD_SYNONYMItem.setVisible(false);
			this.contextMenuOCRRSynonymsREMOVE_SYNONYMItem.setVisible(false);
		}
		private Menu contextMenuOCRRSynonyms;
		public MenuItem getOCRRSynonymsADD_SYNONYMItem()
		{
			return this.contextMenuOCRRSynonymsADD_SYNONYMItem;
		}
		private MenuItem contextMenuOCRRSynonymsADD_SYNONYMItem;
		public MenuItem getOCRRSynonymsREMOVE_SYNONYMItem()
		{
			return this.contextMenuOCRRSynonymsREMOVE_SYNONYMItem;
		}
		private MenuItem contextMenuOCRRSynonymsREMOVE_SYNONYMItem;
		public final class OCRRSpecimenSite implements java.io.Serializable
		{
			private static final long serialVersionUID = 1L;
			public static final int MOVE_UP = 15;
			public static final int MOVE_DOWN = 16;
			public static final int SELECT_SITES = 17;
			public static final int SORT = 18;
		}
		public void disableAllOCRRSpecimenSiteMenuItems()
		{
			this.contextMenuOCRRSpecimenSiteMOVE_UPItem.setEnabled(false);
			this.contextMenuOCRRSpecimenSiteMOVE_DOWNItem.setEnabled(false);
			this.contextMenuOCRRSpecimenSiteSELECT_SITESItem.setEnabled(false);
			this.contextMenuOCRRSpecimenSiteSORTItem.setEnabled(false);
		}
		public void hideAllOCRRSpecimenSiteMenuItems()
		{
			this.contextMenuOCRRSpecimenSiteMOVE_UPItem.setVisible(false);
			this.contextMenuOCRRSpecimenSiteMOVE_DOWNItem.setVisible(false);
			this.contextMenuOCRRSpecimenSiteSELECT_SITESItem.setVisible(false);
			this.contextMenuOCRRSpecimenSiteSORTItem.setVisible(false);
		}
		private Menu contextMenuOCRRSpecimenSite;
		public MenuItem getOCRRSpecimenSiteMOVE_UPItem()
		{
			return this.contextMenuOCRRSpecimenSiteMOVE_UPItem;
		}
		private MenuItem contextMenuOCRRSpecimenSiteMOVE_UPItem;
		public MenuItem getOCRRSpecimenSiteMOVE_DOWNItem()
		{
			return this.contextMenuOCRRSpecimenSiteMOVE_DOWNItem;
		}
		private MenuItem contextMenuOCRRSpecimenSiteMOVE_DOWNItem;
		public MenuItem getOCRRSpecimenSiteSELECT_SITESItem()
		{
			return this.contextMenuOCRRSpecimenSiteSELECT_SITESItem;
		}
		private MenuItem contextMenuOCRRSpecimenSiteSELECT_SITESItem;
		public MenuItem getOCRRSpecimenSiteSORTItem()
		{
			return this.contextMenuOCRRSpecimenSiteSORTItem;
		}
		private MenuItem contextMenuOCRRSpecimenSiteSORTItem;
	}

	private ContextMenus contextMenus;
	public ContextMenus getContextMenus()
	{
		return this.contextMenus;
	}

	private IReportField[] getFormReportFields()
	{
		if(this.context == null)
			return null;
		if(this.reportFields == null)
			this.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();
		return this.reportFields;
	}
	private class ReportFields
	{
		public ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)
		{
			this.context = context;
			this.formInfo = formInfo;
			this.componentIdentifier = componentIdentifier;
		}
		public IReportField[] getReportFields()
		{
			String prefix = formInfo.getLocalVariablesPrefix();
			IReportField[] fields = new IReportField[175];
			fields[0] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ID", "ID_Patient");
			fields[1] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SEX", "Sex");
			fields[2] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOB", "Dob");
			fields[3] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-DOD", "Dod");
			fields[4] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-RELIGION", "Religion");
			fields[5] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISACTIVE", "IsActive");
			fields[6] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ETHNICORIGIN", "EthnicOrigin");
			fields[7] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-MARITALSTATUS", "MaritalStatus");
			fields[8] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SCN", "SCN");
			fields[9] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-SOURCEOFINFORMATION", "SourceOfInformation");
			fields[10] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-TIMEOFDEATH", "TimeOfDeath");
			fields[11] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-ISQUICKREGISTRATIONPATIENT", "IsQuickRegistrationPatient");
			fields[12] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientShort", "BO-1001100000-CURRENTRESPONSIBLECONSULTANT", "CurrentResponsibleConsultant");
			fields[13] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-ID", "ID_Patient");
			fields[14] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-SEX", "Sex");
			fields[15] = new ims.framework.ReportField(this.context, "_cvp_Core.PatientFilter", "BO-1001100000-DOB", "Dob");
			fields[16] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ID", "ID_ClinicalContact");
			fields[17] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-SPECIALTY", "Specialty");
			fields[18] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CONTACTTYPE", "ContactType");
			fields[19] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-STARTDATETIME", "StartDateTime");
			fields[20] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ENDDATETIME", "EndDateTime");
			fields[21] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-CARECONTEXT", "CareContext");
			fields[22] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentClinicalContact", "BO-1004100003-ISCLINICALNOTECREATED", "IsClinicalNoteCreated");
			fields[23] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ID", "ID_Hcp");
			fields[24] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-HCPTYPE", "HcpType");
			fields[25] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISACTIVE", "IsActive");
			fields[26] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISHCPARESPONSIBLEHCP", "IsHCPaResponsibleHCP");
			fields[27] = new ims.framework.ReportField(this.context, "_cvp_Core.RecordingHCP", "BO-1006100000-ISARESPONSIBLEEDCLINICIAN", "IsAResponsibleEDClinician");
			fields[28] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ID", "ID_CareContext");
			fields[29] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-CONTEXT", "Context");
			fields[30] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ORDERINGHOSPITAL", "OrderingHospital");
			fields[31] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ESTIMATEDDISCHARGEDATE", "EstimatedDischargeDate");
			fields[32] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-STARTDATETIME", "StartDateTime");
			fields[33] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-ENDDATETIME", "EndDateTime");
			fields[34] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-LOCATIONTYPE", "LocationType");
			fields[35] = new ims.framework.ReportField(this.context, "_cvp_Core.CurrentCareContext", "BO-1004100019-RESPONSIBLEHCP", "ResponsibleHCP");
			fields[36] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ID", "ID_EpisodeOfCare");
			fields[37] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-CARESPELL", "CareSpell");
			fields[38] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-SPECIALTY", "Specialty");
			fields[39] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-RELATIONSHIP", "Relationship");
			fields[40] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-STARTDATE", "StartDate");
			fields[41] = new ims.framework.ReportField(this.context, "_cvp_Core.EpisodeofCareShort", "BO-1004100018-ENDDATE", "EndDate");
			fields[42] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[43] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALNOTE", "ClinicalNote");
			fields[44] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTETYPE", "NoteType");
			fields[45] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-DISCIPLINE", "Discipline");
			fields[46] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CLINICALCONTACT", "ClinicalContact");
			fields[47] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISDERIVEDNOTE", "IsDerivedNote");
			fields[48] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEW", "ForReview");
			fields[49] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[50] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-REVIEWINGDATETIME", "ReviewingDateTime");
			fields[51] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISCORRECTED", "IsCorrected");
			fields[52] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-ISTRANSCRIBED", "IsTranscribed");
			fields[53] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-SOURCEOFNOTE", "SourceOfNote");
			fields[54] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-RECORDINGDATETIME", "RecordingDateTime");
			fields[55] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-INHOSPITALREPORT", "InHospitalReport");
			fields[56] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[57] = new ims.framework.ReportField(this.context, "_cvp_Clinical.CurrentClinicalNote", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[58] = new ims.framework.ReportField(this.context, "_cvp_STHK.AvailableBedsListFilter", "BO-1014100009-ID", "ID_BedSpaceState");
			fields[59] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ID", "ID_PendingEmergencyAdmission");
			fields[60] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingEmergencyAdmissionsFilter", "BO-1014100011-ADMISSIONSTATUS", "AdmissionStatus");
			fields[61] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ID", "ID_InpatientEpisode");
			fields[62] = new ims.framework.ReportField(this.context, "_cvp_STHK.PendingDischargesListFilter", "BO-1014100000-ESTDISCHARGEDATE", "EstDischargeDate");
			fields[63] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-ID", "ID_ClinicalNotes");
			fields[64] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEW", "ForReview");
			fields[65] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-FORREVIEWDISCIPLINE", "ForReviewDiscipline");
			fields[66] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-NOTECLASSIFICATION", "NoteClassification");
			fields[67] = new ims.framework.ReportField(this.context, "_cvp_Clinical.ExtendedClinicalNotesListFilter", "BO-1011100000-CARECONTEXT", "CareContext");
			fields[68] = new ims.framework.ReportField(this.context, "_cvp_Core.PasEvent", "BO-1014100003-ID", "ID_PASEvent");
			fields[69] = new ims.framework.ReportField(this.context, "_cvp_Correspondence.CorrespondenceDetails", "BO-1052100001-ID", "ID_CorrespondenceDetails");
			fields[70] = new ims.framework.ReportField(this.context, "_cvp_RefMan.CatsReferral", "BO-1004100035-ID", "ID_CatsReferral");
			fields[71] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-ID", "ID_Investigation");
			fields[72] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-ACTIVESTATUS", "ActiveStatus");
			fields[73] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-COLOUR", "Colour");
			fields[74] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-PROVIDERINVCODE", "ProviderInvCode");
			fields[75] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-SEPARATEORDER", "SeparateOrder");
			fields[76] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-ISADDON", "IsAddon");
			fields[77] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-MINREORDERPERIODVAL", "MinReorderPeriodVal");
			fields[78] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-MINREORDERPERIODUNIT", "MinReorderPeriodUnit");
			fields[79] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-FEMALEMINREORDERPERIODVAL", "FemaleMinReorderPeriodVal");
			fields[80] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-FEMALEMINREORDERPERIODUNIT", "FemaleMinReorderPeriodUnit");
			fields[81] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-TYPE", "Type");
			fields[82] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-EVENTTYPE", "EventType");
			fields[83] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-NOLABELSETS", "NoLabelSets");
			fields[84] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[85] = new ims.framework.ReportField(this.context, "_cv_OCRR.CurrentInvestigation", "BO-1058100001-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[86] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-ID", "ID_InvestigationIndex");
			fields[87] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-NAME", "Name");
			fields[88] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-CATEGORY", "Category");
			fields[89] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-ORDERABILITY", "Orderability");
			fields[90] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-TIMESERIESINSTRUCTIONSURL", "TimeSeriesInstructionsURL");
			fields[91] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-DESCRIPTION", "Description");
			fields[92] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-COLOUR", "Colour");
			fields[93] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-ISPROFILE", "IsProfile");
			fields[94] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-ACTIVESTATUS", "ActiveStatus");
			fields[95] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-GENDERSPECIFIC", "GenderSpecific");
			fields[96] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-PHLEBMAYCOLLECT", "PhlebMayCollect");
			fields[97] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-REQUIRESSITESPECIFIER", "RequiresSiteSpecifier");
			fields[98] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-SHOWLAST", "ShowLast");
			fields[99] = new ims.framework.ReportField(this.context, "_cv_OCRR.SelectedTest", "BO-1061100003-NOINTERFACE", "NoInterface");
			fields[100] = new ims.framework.ReportField(this.context, "_cv_OCRR.Provider", "BO-1007100007-ID", "ID_Location");
			fields[101] = new ims.framework.ReportField(this.context, "_cv_OCRR.Provider", "BO-1007100007-NAME", "Name");
			fields[102] = new ims.framework.ReportField(this.context, "_cv_OCRR.Provider", "BO-1007100007-ISACTIVE", "IsActive");
			fields[103] = new ims.framework.ReportField(this.context, "_cv_OCRR.Provider", "BO-1007100007-ISVIRTUAL", "IsVirtual");
			fields[104] = new ims.framework.ReportField(this.context, "_cv_OCRR.Provider", "BO-1007100007-TYPE", "Type");
			fields[105] = new ims.framework.ReportField(this.context, "_cv_OCRR.Provider", "BO-1007100007-DISPLAYINEDTRACKING", "DisplayInEDTracking");
			fields[106] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-ID", "ID_TaxonomyMap");
			fields[107] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYNAME", "TaxonomyName");
			fields[108] = new ims.framework.ReportField(this.context, "_cv_Core.TaxonomyMap", "BO-1003100010-TAXONOMYCODE", "TaxonomyCode");
			fields[109] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-ID", "ID_Service");
			fields[110] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-SERVICENAME", "ServiceName");
			fields[111] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-SERVICECATEGORY", "ServiceCategory");
			fields[112] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-CANBESCHEDULED", "CanBeScheduled");
			fields[113] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-SPECIALTY", "Specialty");
			fields[114] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[115] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[116] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-MATERNITYINDICATOR", "MaternityIndicator");
			fields[117] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-SERVICEDESCRIPTION", "ServiceDescription");
			fields[118] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-ISACTIVE", "IsActive");
			fields[119] = new ims.framework.ReportField(this.context, "_cv_OCRR.ProviderService", "BO-1003100032-ALTERNATESERVICECODE", "AlternateServiceCode");
			fields[120] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativePaedContainer", "BO-1061100022-ID", "ID_Container");
			fields[121] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativePaedContainer", "BO-1061100022-TYPE", "Type");
			fields[122] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativePaedContainer", "BO-1061100022-VOLUME", "Volume");
			fields[123] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativePaedContainer", "BO-1061100022-VOLUMEUNITS", "VolumeUnits");
			fields[124] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativePaedContainer", "BO-1061100022-LABELSUFFIX", "LabelSuffix");
			fields[125] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativeAdultContainer", "BO-1061100021-ID", "ID_AlternativeAdultContainers");
			fields[126] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativeAdultContainer", "BO-1061100021-ADULTSPECVOLVAL", "AdultSpecVolVal");
			fields[127] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativeAdultContainer", "BO-1061100021-ADULTSPECVOLUNIT", "AdultSpecVolUnit");
			fields[128] = new ims.framework.ReportField(this.context, "_cv_OCRR.AlternativeAdultContainer", "BO-1061100021-LABELSUFFIX", "LabelSuffix");
			fields[129] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-ID", "ID_Investigation");
			fields[130] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-ACTIVESTATUS", "ActiveStatus");
			fields[131] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-COLOUR", "Colour");
			fields[132] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-PROVIDERINVCODE", "ProviderInvCode");
			fields[133] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-SEPARATEORDER", "SeparateOrder");
			fields[134] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-ISADDON", "IsAddon");
			fields[135] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-MINREORDERPERIODVAL", "MinReorderPeriodVal");
			fields[136] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-MINREORDERPERIODUNIT", "MinReorderPeriodUnit");
			fields[137] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-FEMALEMINREORDERPERIODVAL", "FemaleMinReorderPeriodVal");
			fields[138] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-FEMALEMINREORDERPERIODUNIT", "FemaleMinReorderPeriodUnit");
			fields[139] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-TYPE", "Type");
			fields[140] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-EVENTTYPE", "EventType");
			fields[141] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-NOLABELSETS", "NoLabelSets");
			fields[142] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[143] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__SelectedInvestigation_" + componentIdentifier, "BO-1058100001-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			fields[144] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__RemovedQuestions_" + componentIdentifier, "BO-1061100002-ID", "ID_InvestigationQuestion");
			fields[145] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__RemovedQuestions_" + componentIdentifier, "BO-1061100002-ISMANDATORY", "IsMandatory");
			fields[146] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-ID", "ID_InvestigationIndex");
			fields[147] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-NAME", "Name");
			fields[148] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-CATEGORY", "Category");
			fields[149] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-ORDERABILITY", "Orderability");
			fields[150] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-TIMESERIESINSTRUCTIONSURL", "TimeSeriesInstructionsURL");
			fields[151] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-DESCRIPTION", "Description");
			fields[152] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-COLOUR", "Colour");
			fields[153] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-ISPROFILE", "IsProfile");
			fields[154] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-ACTIVESTATUS", "ActiveStatus");
			fields[155] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-GENDERSPECIFIC", "GenderSpecific");
			fields[156] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-PHLEBMAYCOLLECT", "PhlebMayCollect");
			fields[157] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-REQUIRESSITESPECIFIER", "RequiresSiteSpecifier");
			fields[158] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-SHOWLAST", "ShowLast");
			fields[159] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvIndexBackup_" + componentIdentifier, "BO-1061100003-NOINTERFACE", "NoInterface");
			fields[160] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-ID", "ID_Investigation");
			fields[161] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-ACTIVESTATUS", "ActiveStatus");
			fields[162] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-COLOUR", "Colour");
			fields[163] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-PROVIDERINVCODE", "ProviderInvCode");
			fields[164] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-SEPARATEORDER", "SeparateOrder");
			fields[165] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-ISADDON", "IsAddon");
			fields[166] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-MINREORDERPERIODVAL", "MinReorderPeriodVal");
			fields[167] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-MINREORDERPERIODUNIT", "MinReorderPeriodUnit");
			fields[168] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-FEMALEMINREORDERPERIODVAL", "FemaleMinReorderPeriodVal");
			fields[169] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-FEMALEMINREORDERPERIODUNIT", "FemaleMinReorderPeriodUnit");
			fields[170] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-TYPE", "Type");
			fields[171] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-EVENTTYPE", "EventType");
			fields[172] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-NOLABELSETS", "NoLabelSets");
			fields[173] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-TURNAROUNDMEASURE", "TurnaroundMeasure");
			fields[174] = new ims.framework.ReportField(this.context, prefix + "_lv_OCRR.TestEdit.__internal_x_context__InvestigationBackup_" + componentIdentifier, "BO-1058100001-EXPECTEDTURNAROUND", "ExpectedTurnaround");
			return fields;
		}
		protected Context context = null;
		protected ims.framework.FormInfo formInfo;
		protected String componentIdentifier;
	}
	public String getUniqueIdentifier()
	{
		return null;
	}
	private Context context = null;
	private ims.framework.FormInfo formInfo = null;
	private String componentIdentifier;
	private GlobalContext globalContext = null;
	private IReportField[] reportFields = null;
}
