//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment
// (version 1.30 build 2012.21169)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.testedit;

import ims.configuration.AppRight;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.ActivityVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.QuestionInformationShortVo;
import ims.core.vo.QuestionInformationShortVoCollection;
import ims.core.vo.TaxonomyMap;
import ims.core.vo.TaxonomyMapCollection;
import ims.core.vo.lookups.ActivityType;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.core.vo.lookups.PreActiveActiveInactiveStatusCollection;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.Control;
import ims.framework.ErrorCode;
import ims.framework.MessageButtons;
import ims.framework.MessageIcon;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.MouseButton;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.framework.utils.Image;
import ims.ocrr.forms.testedit.GenForm.GroupEventTypeEnumeration;
import ims.ocrr.forms.testedit.GenForm.GroupTypeEnumeration;
import ims.ocrr.forms.testedit.GenForm.lyrInvestigationsLayer.tabHelpTextsContainer.grdTestHelpRow;
import ims.ocrr.forms.testedit.GenForm.lyrInvestigationsLayer.tabProviderContainer.grdHeadersRow;
import ims.ocrr.forms.testedit.GenForm.lyrSelectionLayer.tabSitesContainer.grdSitesRow;
import ims.ocrr.vo.ClinImagInvDetailsVo;
import ims.ocrr.vo.HelpTextVo;
import ims.ocrr.vo.HelpTextVoCollection;
import ims.ocrr.vo.InvSynonymVo;
import ims.ocrr.vo.InvSynonymVoCollection;
import ims.ocrr.vo.InvestShortVo;
import ims.ocrr.vo.InvestShortVoCollection;
import ims.ocrr.vo.InvestigationIndexShortVoCollection;
import ims.ocrr.vo.InvestigationIndexVo;
import ims.ocrr.vo.InvestigationQuestionVo;
import ims.ocrr.vo.InvestigationQuestionVoCollection;
import ims.ocrr.vo.InvestigationVo;
import ims.ocrr.vo.InvestigationVoCollection;
import ims.ocrr.vo.LocSvcProviderSysVo;
import ims.ocrr.vo.LocSvcProviderSysVoCollection;
import ims.ocrr.vo.OrderEntryTemplateShortVoCollection;
import ims.ocrr.vo.PathInvDetailsVo;
import ims.ocrr.vo.PathSpecimenContainerDetailVoCollection;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.SecurityLevelConfigVoCollection;
import ims.ocrr.vo.SpecimenVoCollection;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.CategoryCollection;
import ims.ocrr.vo.lookups.HelpTextCategory;
import ims.ocrr.vo.lookups.HelpTextCategoryCollection;
import ims.ocrr.vo.lookups.InvEventType;
import ims.ocrr.vo.lookups.InvType;
import ims.ocrr.vo.lookups.InvestigationOrderability;
import ims.ocrr.vo.lookups.ItemSelectionType;
import ims.ocrr.vo.lookups.LookupHelper;
import ims.ocrr.vo.lookups.SpecimenSite;
import ims.ocrr.vo.lookups.SpecimenSiteCollection;
import ims.ocrr.vo.lookups.SpecimenTypeCollection;
import ims.vo.LookupInstanceCollection;
import ims.vo.LookupTypeVo;

import java.util.ArrayList;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize(true);
		open();

		enableInvestigationDetails(false);
	}

	private void initialize(boolean bCalledFromOpen)
	{
		if (bCalledFromOpen)
		{
			loadSecurityLevel();
		}
		
		form.getLocalContext().setisProfile(new Boolean(engine.getFormName().equals(form.getForms().OCRR.ProfileEdit)));
		form.lyrInvestigations().tabClinicalImagingDetails().setHeaderVisible(false);
		form.lyrInvestigations().tabPathologyDetails().setHeaderVisible(false);
		
		form.lyrSelection().showtabTax();
		form.lyrSelection().tabSites().setHeaderVisible(false);
		form.lyrSelection().tabSites().setVisible(false);

		if (form.getLocalContext().getisProfile().booleanValue())
		{
			form.lyrInvestigations().showtabGeneralDet();
			form.getContextMenus().getOCRRAssociatedTestsASSOCIATEWITHItem().setText("Add Component Investigations");
			form.lyrInvestigations().tabLinkedInvestigations().setCaption("Component Investigations");

			form.lblNotOrderable().setVisible(false);
			form.lblNotResulted().setVisible(false);
			form.chkNotOrderable().setVisible(false);
			form.chkNotOrderable().setValue(false);
			
			form.chkNotResulted().setVisible(false);

			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setVisible(false);
			form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().setVisible(false);
			form.lyrInvestigations().tabGeneralDet().lblMinReOrderMale().setVisible(false);

			form.lyrInvestigations().tabQuestions().setVisible(false);
		}

		form.lblReqSiteSpecifier().setVisible(false);

		form.chkNoInterface().setVisible(false);
		form.lblNoInterface().setVisible(false);

		form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setVisible(false);
		form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().setVisible(false);
		form.lyrInvestigations().tabGeneralDet().lblMinReOrderFemale().setVisible(false);

		if (bCalledFromOpen)
		{
			loadSpecimenContainers();
			loadCategory();
			loadColors();
		}

	/*	form.lyrInvestigations().tabPathologyDetails().txtAdultNA().setValue("N/A");
		form.lyrInvestigations().tabPathologyDetails().txtPaedNA().setValue("N/A");
		form.lyrInvestigations().tabPathologyDetails().txtAdultNA().setEnabled(false);
		form.lyrInvestigations().tabPathologyDetails().txtPaedNA().setEnabled(false);*/
	}

	private void loadSecurityLevel()
	{
		form.cmbSecurityLevel().clear();
		
		SecurityLevelConfigVoCollection voColSecurity = domain.listSecurityLevel();
		for(SecurityLevelConfigVo voSecurity : voColSecurity)
			form.cmbSecurityLevel().newRow(voSecurity, voSecurity.getSecurityLevelDescription());
	}

	private void loadSpecimenContainers()
	{
		PathSpecimenContainerDetailVoCollection voCollSpecimenCont  = form.getLocalContext().getContainers();
		
		if(voCollSpecimenCont == null)
		{
			voCollSpecimenCont = domain.listPathSpecimenContainer();
			form.getLocalContext().setContainers(voCollSpecimenCont);
						
			form.getGlobalContext().OCRR.setSpecimenContainers(voCollSpecimenCont);	
		}
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		
		if (formName.equals(form.getForms().Core.QuestionSelectNew))
		{
			if (result.equals(DialogResult.OK))
			{
				QuestionInformationShortVoCollection voCollQuestion = form.getGlobalContext().Admin.getSelectedQuestions();
				if (voCollQuestion == null)
					return;

				addQuestionsToGrid(voCollQuestion);
			}

			refreshEditedQuestions();
			return;
		}
		if (result.equals(DialogResult.OK))
		{
			if (formName.equals(form.getForms().Core.TaxonomySearch))
			{
				if (form.getGlobalContext().Core.getTaxonomyMapIsNotNull())
				{
					TaxonomyMap tax = form.getGlobalContext().Core.getTaxonomyMap();
					// WDEV-4338 07/04/08 code below Checks for duplicate
					// taxonomies used by investigations
					if (domain.checkDuplicateTaxonomyMapping(tax))
						addTaxonomyRow(tax);
					else
						engine.showMessage("The " + tax.getTaxonomyName() + " taxonomy " + tax.getDescription() + " is already in use by another investigation");
				}
			}
			else if (formName.equals(form.getForms().Core.SelectLookupInstances))
			{
				if (form.lyrSelection().tabSites().grdSites().getSelectedRow() == null)
				{
					form.getContextMenus().getOCRRSpecimenSiteMOVE_UPItem().setVisible(false);
					form.getContextMenus().getOCRRSpecimenSiteMOVE_DOWNItem().setVisible(false);
				}
				populateSitesGrid();
			}
			else if (formName.equals(form.getForms().OCRR.ItemSelection))
			{
				InvestShortVoCollection voCollInvestigationShort = form.getGlobalContext().OCRR.getSelectedInvestigations();
				if (voCollInvestigationShort == null)
					return;

				GenForm.lyrInvestigationsLayer.tabLinkedInvestigationsContainer.grdTestsRow gRow = null;
				for (int i = 0; i < voCollInvestigationShort.size(); i++)
				{
					boolean isFound = false;
					for (int j = 0; j < form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().size(); j++)
					{
						if (form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().get(j).getValue() != null && form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().get(j).getValue().equals(voCollInvestigationShort.get(i)))
						{
							isFound = true;
							break;
						}
					}

					if (!isFound)
					{
						gRow = form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().newRow();

						if (voCollInvestigationShort.get(i).getInvestigationIndexIsNotNull())
							gRow.setcolName(voCollInvestigationShort.get(i).getInvestigationIndex().getName());

						gRow.setcolImage(form.getImages().OCRR.Investigation);
						gRow.setValue(voCollInvestigationShort.get(i));
					}
				}

				// add associated questions for every investigation linked to
				// questions grid
				InvestigationVo voInvestigation = null;
				QuestionInformationShortVoCollection voCollQuestionsShort = new QuestionInformationShortVoCollection();
				for (int i = 0; i < form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().size(); i++)
				{
					if (form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().get(i).getValue() != null)
					{
						voInvestigation = domain.getInvestigation(form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().get(i).getValue().getID_Investigation());
						if (voInvestigation != null)
						{
							if (voInvestigation.getAssocQuestionsIsNotNull())
							{
								for (int j = 0; j < voInvestigation.getAssocQuestions().size(); j++)
								{
									voCollQuestionsShort.add(voInvestigation.getAssocQuestions().get(j).getQuestion());
								}
							}
						}
					}
				}

				addQuestionsToGrid(voCollQuestionsShort);
			}
		}
	}
	
	private void populateSitesGrid()
	{
		// get the collection of lookup instances and add a site row for each
		// one
		LookupInstanceCollection collSelected = form.getGlobalContext().Core.getSelectedLookupInstances();
		if (collSelected.size() == 0)
		{
			form.getContextMenus().getOCRRSpecimenSiteMOVE_UPItem().setVisible(false);
			form.getContextMenus().getOCRRSpecimenSiteMOVE_DOWNItem().setVisible(false);

		}

		form.lyrSelection().tabSites().grdSites().getRows().clear();

		for (int i = 0; i < collSelected.size(); i++)
		{
			grdSitesRow row = form.lyrSelection().tabSites().grdSites().getRows().newRow();
			row.setColSite((SpecimenSite) collSelected.getIndex(i));
			row.setValue((SpecimenSite) collSelected.getIndex(i));
		}

		form.getContextMenus().getOCRRSpecimenSiteSORTItem().setVisible(form.lyrSelection().tabSites().grdSites().getRows().size() > 0);
		if (form.lyrSelection().tabSites().grdSites().getSelectedRow() == null)
		{
			form.getContextMenus().getOCRRSpecimenSiteMOVE_UPItem().setVisible(false);
			form.getContextMenus().getOCRRSpecimenSiteMOVE_DOWNItem().setVisible(false);
		}

	}

	private void refreshEditedQuestions()
	{
		ims.core.vo.QuestionInformationVoCollection editedQuestions = form.getGlobalContext().Core.getEditedQuestions();
		if (editedQuestions == null || editedQuestions.size() == 0)
			return;

		for (int i = 0; i < form.lyrInvestigations().tabQuestions().grdQuestions().getRows().size(); i++)
		{
			InvestigationQuestionVo voInvestigationQuestion = form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(i).getValue();
			if (voInvestigationQuestion != null)
			{
				QuestionInformationShortVo question = voInvestigationQuestion.getQuestion();
				int index = getQuestionIndex(editedQuestions, question);
				if (index >= 0)
				{
					voInvestigationQuestion.setQuestion(editedQuestions.get(index));
					form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(i).setValue(voInvestigationQuestion);
				}
			}
		}

		form.getGlobalContext().Core.setEditedQuestions(null);
	}

	private int getQuestionIndex(ims.core.vo.QuestionInformationVoCollection editedQuestions, QuestionInformationShortVo question)
	{
		if (editedQuestions != null && question != null)
		{
			for (int i = 0; i < editedQuestions.size(); i++)
			{
				if (editedQuestions.get(i).equals(question))
					return i;
			}
		}
		return -1;
	}

	private void addTaxonomyRow(TaxonomyMap tax)
	{
		GenForm.lyrSelectionLayer.tabTaxContainer.grdTaxonomyRow row = form.lyrSelection().tabTax().grdTaxonomy().getRows().newRow();
		if (tax.getTaxonomyNameIsNotNull())
		{
			row.setcolTaxonomy(tax.getTaxonomyName().getText());
			// row.setTooltip("<b>" + tax.getTaxonomyName().getText() + " : " +
			// (tax.getDescription() != null ? tax.getDescription() : "") +
			// "</b>");
		}
		row.setcolCode(tax.getTaxonomyCode());
		row.setValue(tax);
	}

	/**
	 * @param voCollQuestion
	 */
	private void addQuestionsToGrid(QuestionInformationShortVoCollection voCollQuestion)
	{
		GenForm.lyrInvestigationsLayer.tabQuestionsContainer.grdQuestionsRow qRow = null;
		for (int i = 0; i < voCollQuestion.size(); i++)
		{
			boolean isFound = false;
			for (int j = 0; j < form.lyrInvestigations().tabQuestions().grdQuestions().getRows().size(); j++)
			{
				if (form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(j).getValue() != null && form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(j).getValue().getQuestionIsNotNull() && form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(j).getValue().getQuestion().equals(voCollQuestion.get(i)))
				{
					isFound = true;
					break;
				}
			}

			if (!isFound)
			{
				qRow = form.lyrInvestigations().tabQuestions().grdQuestions().getRows().newRow();

				qRow.setcolQuestionText(voCollQuestion.get(i).getShortText());
				qRow.setcolImage(getQuestionImage(voCollQuestion.get(i).getIsQuestion()));

				InvestigationQuestionVo voInvQuestion = new InvestigationQuestionVo();
				voInvQuestion.setQuestion(voCollQuestion.get(i));
				qRow.setTooltip(voCollQuestion.get(i).getTooltip());
				qRow.setValue(voInvQuestion);
				
				//WDEV-5066
				if(!voCollQuestion.get(i).getIsQuestion())
					qRow.setcolMandatoryReadOnly(true);
	
			}
		}
	}

	protected void onCmbCategoryValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		cmbCategoryValueChanged();
		setControlsStateForOrderAbility(form.getLocalContext().getCurrentScreenMode());
		defaultEventAndEventType();
		updateControlsState();
	}

	private void defaultEventAndEventType()
	{
		form.GroupType().setValue(GroupTypeEnumeration.rdoSimple);
		form.GroupEventType().setValue(GroupEventTypeEnumeration.rdoSingleEvent);
	}

	private void cmbCategoryValueChanged()
	{
		if (!Category.PATHOLOGY.equals(form.cmbCategory().getValue()))
		{
			form.chkRequiresSite().setValue(false);
		}
		else
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().initialise();
		}

		if (form.getLocalContext().getCurrentScreenModeIsNotNull() && form.getLocalContext().getCurrentScreenMode().equals(MODE_NEW_MAIN_RECORD))
		{
			if (form.getGlobalContext().OCRR.getSelectedTest() == null)
			{
				clearDetails();
				setDetailTabsVisible(false);
				form.lyrInvestigations().tabClinicalImagingDetails().setHeaderVisible(false);
				form.lyrInvestigations().tabPathologyDetails().setHeaderVisible(false);
				form.lyrInvestigations().tabGeneralDet().cmbTestStatus().setValue(form.cmbStatus().getValue());
			}
		}
		
		updateControlsState(form.getLocalContext().getCurrentScreenMode()); //WDEV-16857

		Category cat = form.cmbCategory().getValue();
		if (cat != null)
		{
			if (cat.equals(Category.CLINICALIMAGING) || cat.equals(Category.CLINICAL))
			{
				form.lyrInvestigations().tabGeneralDet().chkAddOn().setValue(false);
				form.chkRequiresSite().setValue(false);
				form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setValue(false);
			}

			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setVisible(cat.equals(Category.CLINICALIMAGING) && !form.getLocalContext().getisProfile());
			form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().setVisible(cat.equals(Category.CLINICALIMAGING) && !form.getLocalContext().getisProfile());
			form.lyrInvestigations().tabGeneralDet().lblMinReOrderFemale().setVisible(cat.equals(Category.CLINICALIMAGING) && !form.getLocalContext().getisProfile());
			form.lyrInvestigations().tabGeneralDet().lblMinReOrderMale().setValue(cat.equals(Category.CLINICALIMAGING) ? "Minimum Re-Order Period (Male):" : "Minimum Re-Order Period :");

			if (!Category.PATHOLOGY.equals(cat) && form.lyrSelection().tabSites().isVisible())
			{
				form.lyrSelection().showtabTax();
			}
			
			form.lyrSelection().tabSites().setHeaderVisible(cat.equals(Category.PATHOLOGY) && form.chkRequiresSite().getValue() == true);
			form.lyrSelection().tabSites().setVisible(cat.equals(Category.PATHOLOGY) && form.chkRequiresSite().getValue() == true);

			if (!cat.equals(Category.PATHOLOGY) || form.chkRequiresSite().getValue() == false)
				form.lyrSelection().tabSites().grdSites().getRows().clear();
			else
				form.lyrSelection().showtabSites();

			// WDEV-5847
			form.chkNotOrderable().setVisible(!cat.equals(Category.CLINICAL));
			if(!form.chkNotOrderable().isVisible())
				form.chkNotOrderable().setValue(false);
			form.lblNotOrderable().setVisible(!cat.equals(Category.CLINICAL));
			form.lyrInvestigations().tabGeneralDet().lblMinReOrderMale().setVisible(!cat.equals(Category.CLINICAL));
			form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().setVisible(!cat.equals(Category.CLINICAL));
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setVisible(!cat.equals(Category.CLINICAL));
			form.chkNoInterface().setVisible(cat.equals(Category.CLINICAL));
			form.lblNoInterface().setVisible(cat.equals(Category.CLINICAL));

			if (cat.equals(Category.CLINICAL) && Boolean.TRUE.equals(form.chkNoInterface().getValue()))
			{
				form.lyrInvestigations().tabGeneralDet().cmbProvider().setValue(null);
				form.lyrInvestigations().tabGeneralDet().cmbProviderService().setValue(null);
				form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().setValue(null);
				form.lyrInvestigations().tabGeneralDet().txtProviderSys().setValue(null);

				form.lyrInvestigations().tabGeneralDet().cmbProvider().setEnabled(false);
				form.lyrInvestigations().tabGeneralDet().cmbProviderService().setEnabled(false);
				form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().setEnabled(false);
			}
		}
		else
		{
			form.lyrInvestigations().tabGeneralDet().cmbProvider().setEnabled(false);
			form.lyrInvestigations().tabGeneralDet().cmbProviderService().setEnabled(false);
			form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().setEnabled(false);

			form.lyrInvestigations().tabGeneralDet().cmbProvider().setValue(null);
			form.lyrInvestigations().tabGeneralDet().cmbProviderService().setValue(null);
			form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().setValue(null);
			form.lyrInvestigations().tabGeneralDet().txtProviderSys().setValue(null);
			form.chkNoInterface().setValue(null);
			form.intLabelsSets().setValue(null);
			

			reInitialise();
		}

		//wdev-16371
		if (Category.PATHOLOGY.equals(form.cmbCategory().getValue()) || Category.CLINICALIMAGING.equals(form.cmbCategory().getValue()))
		{
			showhideTurnAround(true);
		}
		else
		{
			showhideTurnAround(false);
			form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().setValue(null);
			form.lyrInvestigations().tabGeneralDet().intExpectedTurnAround().setValue(null);
		}
		//----------------
		loadLocations(cat);

		setDetailTabsVisible(true);
	}
	//wdev-16371
	private void showhideTurnAround(boolean showhide)
	{
		form.lyrInvestigations().tabGeneralDet().lblTurnAroundMeasure().setVisible(showhide);
		form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().setVisible(showhide);
		form.lyrInvestigations().tabGeneralDet().lblExpectedTurnAround().setVisible(showhide);
		form.lyrInvestigations().tabGeneralDet().intExpectedTurnAround().setVisible(showhide);
	}
	private void reInitialise()
	{
		initialize(false);
	}

	private boolean isPathologyAndNotProfile(Category cat)
	{
		return Category.PATHOLOGY.equals(cat) && !Boolean.TRUE.equals(form.getLocalContext().getisProfile());
	}

	protected void onGrdQuestionsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState(form.getLocalContext().getCurrentScreenMode());
	}

	protected void onGrdTestsSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState(form.getLocalContext().getCurrentScreenMode());
	}

	protected void onGrdTestHelpSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState(form.getLocalContext().getCurrentScreenMode());
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		InvestigationIndexVo voInvIndex = null;
		if (form.getGlobalContext().OCRR.getSelectedTestIsNotNull())
			voInvIndex = (InvestigationIndexVo) form.getGlobalContext().OCRR.getSelectedTest().clone();

		if (voInvIndex == null)
			voInvIndex = new InvestigationIndexVo();

		saveRecord(voInvIndex);
		
		updateControlsState();
	}

	/**
	 * This method will show Templates/Profiles that are currently using the
	 * investigation hence it could not be made inactive
	 * 
	 * @param errors
	 */
	private void displayConflictingRecords(ErrorCode[] errors)
	{
		boolean tempError = false;
		boolean profError = false;

		if (errors != null && errors.length > 0)
		{
			for (int i = 0; i < errors.length; i++)
			{
				if (errors[i].equals(ErrorCode.ACTIVE_TEMPLATE_USING_INV))
					tempError = true;

				if (errors[i].equals(ErrorCode.ACTIVE_PROFILE_USING_INV))
					profError = true;
			}
		}

		String displayMessage = "";

		if (tempError == true)
		{
			OrderEntryTemplateShortVoCollection templates = domain.listTemplatesUsingInvestigation(form.getGlobalContext().OCRR.getSelectedTest());
			if (templates != null && templates.size() > 0)
			{
				displayMessage += "The following template(s) are using this Investigation, please remove the item from each template before making the Investigation inactive" + "\r";
				for (int i = 0; i < templates.size(); i++)
				{
					displayMessage += "\r" + templates.get(i).getDescription();
				}
			}
		}

		if (profError == true)
		{
			InvestigationIndexShortVoCollection profiles = domain.listProfilesUsingInvestigation(form.getGlobalContext().OCRR.getSelectedTest());
			if (profiles != null && profiles.size() > 0)
			{
				displayMessage += (tempError ? "\r" : "") + "The following profile(s) are using this Investigation, please remove the item from each profile before making the Investigation inactive" + "\r";
				for (int i = 0; i < profiles.size(); i++)
				{
					displayMessage += "\r" + profiles.get(i).getDescription();
				}
			}
		}

		engine.showMessage(displayMessage);
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.getLocalContext().getCurrentScreenModeIsNotNull() && form.getLocalContext().getCurrentScreenMode().equals(MODE_NEW_MAIN_RECORD))
		{

			if (form.getLocalContext().getisProfile().booleanValue())
			{
				form.getGlobalContext().OCRR.setItemSelectionType(ItemSelectionType.PROFILE);
				engine.open(form.getForms().OCRR.ProfileList);
				return;
			}
			else
			{
				form.getGlobalContext().OCRR.setItemSelectionType(ItemSelectionType.INVESTIGATION);
				engine.open(form.getForms().OCRR.TestList);
				return;
			}
		}
		else
		{
			form.getLocalContext().setSelectedInvestigation(null);
			form.getGlobalContext().OCRR.setNewInvestigation(Boolean.FALSE);
			open();
		}
		
		updateControlsState();
	}

	protected void onGrdTaxonomySelectionChanged()
	{
		updateControlsState();
	}

	protected void onGrdSynonymsSelectionChanged()
	{
		updateControlsState();
	}

	protected void onBtnUpdateClick() throws PresentationLogicException
	{
		updateControlsState(MODE_EDIT_MAIN_RECORD);
		setControlsStateForOrderAbility(MODE_EDIT_MAIN_RECORD);
		
		updateControlsState();
	}

	protected void onGrdHeadersSelectionChanged(MouseButton mouseButton) throws PresentationLogicException
	{
		//WDEV-16884
		if (MouseButton.LEFT.equals(mouseButton))
		{
			doHeaderSelectionChanged();
			form.getLocalContext().setRightClickSelectedOnHeaders(Boolean.FALSE);
		}
		else
		{
			form.getLocalContext().setRightClickSelectedOnHeaders(Boolean.TRUE);
		}
	}

	private void doHeaderSelectionChanged()
	{
		updateControlsState(form.getLocalContext().getCurrentScreenMode());

		form.getLocalContext().setSelectedInvestigation(domain.getInvestigation(form.lyrInvestigations().tabProvider().grdHeaders().getValue().getID_Investigation()));

		displayInvestigationRecord(form.getLocalContext().getSelectedInvestigation());

		setDetailTabsVisible(true);
		
		//wdev-14252
		if (form.cmbCategory().getValue() != null && form.cmbCategory().getValue().equals(Category.PATHOLOGY) && form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue() == true)
		{
			if (form.lyrInvestigations().tabHelpTexts().isHeaderVisible())
			{
				form.lyrInvestigations().tabPathologyDetails().setHeaderVisible(!form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue());
				form.lyrInvestigations().tabLinkedInvestigations().setHeaderVisible(!form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue());
			}
		}
		//-----------
	}

	private void displayInvestigationRecord(InvestigationVo value)
	{
		if (value == null)
			return;

		
		
		cmbCategoryValueChanged();

		Color color = getColor(value.getColour());
		form.lyrInvestigations().tabGeneralDet().cmbTestColor().setValue(color);

		form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setValue(value.getSeparateOrder().booleanValue());

		if (value.getProviderServiceIsNotNull() && value.getProviderService().getLocationServiceIsNotNull())
			form.lyrInvestigations().tabGeneralDet().cmbProvider().setValue(value.getProviderService().getLocationService().getLocation());

		cmbProviderValueChanged();

		form.lyrInvestigations().tabGeneralDet().cmbProviderService().setValue(value.getProviderService());

		if (value.getProviderServiceIsNotNull() && value.getProviderService().getProviderSystemIsNotNull())
			form.lyrInvestigations().tabGeneralDet().txtProviderSys().setValue(value.getProviderService().getProviderSystem().getSystemName());

		form.lyrInvestigations().tabGeneralDet().cmbTestStatus().setValue(value.getActiveStatus());
		form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().setValue(value.getProviderInvCode());
		form.lyrInvestigations().tabGeneralDet().chkAddOn().setValue(value.getIsAddon().booleanValue());

		form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setValue(value.getMinReorderPeriodUnit());
		form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().setValue(value.getMinReorderPeriodVal());
		form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setValue(value.getFemaleMinReorderPeriodUnit());
		form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().setValue(value.getFemaleMinReorderPeriodVal());
		
		//wdev-16371
		form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().setValue(value.getTurnaroundMeasure());
		form.lyrInvestigations().tabGeneralDet().intExpectedTurnAround().setValue(value.getExpectedTurnaround());
		
		//----------
		
		//wdev-12647
		if(value != null && value.getMinReorderPeriodVal() != null && value.getMinReorderPeriodVal() > 0)
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setRequired(true);
		else
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setRequired(false);
		
		if(value != null && value.getFemaleMinReorderPeriodVal() != null && value.getFemaleMinReorderPeriodVal() > 0 )
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setRequired(true);
		else
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setRequired(false);

		if (value.getClinImagInvDetailsIsNotNull())
		{
			form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().setValue(value.getClinImagInvDetails().getDurationUnit());
			form.lyrInvestigations().tabClinicalImagingDetails().intDuration().setValue(value.getClinImagInvDetails().getDurationVal());
		}
		
		if (value != null)
		{
			if (InvType.SIMPLE.equals(value.getType()))
			{
				form.GroupType().setValue(GroupTypeEnumeration.rdoSimple);
			}
			else
			{
				form.GroupType().setValue(GroupTypeEnumeration.rdoComplex);
			}

			if (InvEventType.SINGLE_EVENT.equals(value.getEventType()))
			{
				form.GroupEventType().setValue(GroupEventTypeEnumeration.rdoSingleEvent);
			}
			else
			{
				form.GroupEventType().setValue(GroupEventTypeEnumeration.rdoTimeSeries);
			}

			form.intLabelsSets().setValue(value.getNoLabelSets());

			if (value.getInvestigationIndexIsNotNull())
			{
				form.txtTimeSeriesInstructions().setValue(value.getInvestigationIndex().getTimeSeriesInstructionsURL());
			}

			if (value.getPathInvDetailsIsNotNull())
			{
				if (GroupTypeEnumeration.rdoComplex.equals(form.GroupType().getValue()) && value.getPathInvDetails().getSpecimens() != null)
				{
					int noOfSpecimens = value.getPathInvDetails().getSpecimens().size();
					
					form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().setValue(noOfSpecimens);
					initialiseSpecimenTabs();
					
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().setValue(value.getPathInvDetails().getSpecimens().get(0));
					
					if (noOfSpecimens >= 2)
					{
						form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().ccSpecimen2().setValue(value.getPathInvDetails().getSpecimens().get(1));
					}
					
					if (noOfSpecimens >= 3)
					{
						form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().ccSpecimen3().setValue(value.getPathInvDetails().getSpecimens().get(2));
					}
					
					if (noOfSpecimens >= 4)
					{
						form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().ccSpecimen4().setValue(value.getPathInvDetails().getSpecimens().get(3));
					}
					
					if (noOfSpecimens >= 5)
					{
						form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().ccSpecimen5().setValue(value.getPathInvDetails().getSpecimens().get(4));
					}
					
					if (noOfSpecimens >= 6)
					{
						form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().ccSpecimen6().setValue(value.getPathInvDetails().getSpecimens().get(5));
					}
					
					if (noOfSpecimens >= 7)
					{
						form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().ccSpecimen7().setValue(value.getPathInvDetails().getSpecimens().get(6));
					}
					
					if (noOfSpecimens >= 8)
					{
						form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().ccSpecimen8().setValue(value.getPathInvDetails().getSpecimens().get(7));
					}
					
					if (noOfSpecimens == 9)
					{
						form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().ccSpecimen9().setValue(value.getPathInvDetails().getSpecimens().get(8));
					}
				}
				else if (value.getPathInvDetails().getSpecimens().size() > 0)//Investigation Type = Simple
				{
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().setValue(value.getPathInvDetails().getSpecimens().get(0));
				}
				else
				{
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().clear();
				}
			}

		}

		// Linked Tests
		form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().clear();
		if (value.getAssocInvestigationsIsNotNull())
		{
			GenForm.lyrInvestigationsLayer.tabLinkedInvestigationsContainer.grdTestsRow gRow = null;
			for (int i = 0; i < value.getAssocInvestigations().size(); i++)
			{
				gRow = form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().newRow();
				gRow.setcolImage(form.getImages().OCRR.Investigation);
				if (value.getAssocInvestigations().get(i).getInvestigationIndexIsNotNull())
					gRow.setcolName(value.getAssocInvestigations().get(i).getInvestigationIndex().getName());

				gRow.setValue(value.getAssocInvestigations().get(i));
			}
		}

		// Questions
		form.lyrInvestigations().tabQuestions().grdQuestions().getRows().clear();
		if (value.getAssocQuestionsIsNotNull())
		{
			GenForm.lyrInvestigationsLayer.tabQuestionsContainer.grdQuestionsRow qRow = null;
			for (int i = 0; i < value.getAssocQuestions().size(); i++)
			{
				if (value.getAssocQuestions().get(i).getQuestionIsNotNull())
				{
					// WDEV-3040 - display all the configured Questions
					qRow = form.lyrInvestigations().tabQuestions().grdQuestions().getRows().newRow();
					qRow.setcolImage(getQuestionImage(value.getAssocQuestions().get(i).getQuestion().getIsQuestion()));

					qRow.setcolQuestionText(value.getAssocQuestions().get(i).getQuestion().getText());
					qRow.setTooltip(value.getAssocQuestions().get(i).getQuestion().getTooltip());
					if (value.getAssocQuestions().get(i).getIsMandatoryIsNotNull())
						qRow.setcolMandatory(value.getAssocQuestions().get(i).getIsMandatory().booleanValue());

					//WDEV-5066
					if(!value.getAssocQuestions().get(i).getQuestion().getIsQuestion())
						qRow.setcolMandatoryReadOnly(true);
					
					qRow.setValue(value.getAssocQuestions().get(i));
				}
			}
		}

		if (value.getHelpTextIsNotNull())
		{
			form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().clear();
			value.getHelpText().sort();
			for (int i = 0; i < value.getHelpText().size(); i++)
			{
				HelpTextVo item = value.getHelpText().get(i);
				grdTestHelpRow row = form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().newRow();

				bindHelpTextCol(row, true);
				row.getcolTitle().setValue((item.getTextCategory()));
				row.setcolText(item.getHelpText());
				row.setValue(item);
			}

		}
		chkNotOrderableValueChanged();
	}

	private Image getQuestionImage(Boolean isQuestion)
	{
		return isQuestion != null && isQuestion.booleanValue() ? form.getImages().OCRR.Question : form.getImages().OCRR.Information;
	}

	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.OCRRProvider.ADDNEWPROVIDER :
				addRecord();
			break;
			case GenForm.ContextMenus.OCRRProvider.UPDATEPROVIDER :
				updateRecord();
			break;
			case GenForm.ContextMenus.OCRRTaxonomy.ADD_TAXONOMY :
				addTaxonomy();
			break;
			case GenForm.ContextMenus.OCRRTaxonomy.REMOVE_TAXONOMY :
				removeTaxonomy();
			break;
			case GenForm.ContextMenus.OCRRSynonyms.ADD_SYNONYM :
				addSynonym();
			break;
			case GenForm.ContextMenus.OCRRSynonyms.REMOVE_SYNONYM :
				removeSynonym();
			break;
			case GenForm.ContextMenus.OCRRHelpText.ADD_HELPTEXT :
				addHelpText();
			break;
			case GenForm.ContextMenus.OCRRHelpText.REMOVE_HELPTEXT :
				removeHelpText();
			break;
			case GenForm.ContextMenus.OCRRAssociatedTests.ASSOCIATEWITH :
				linkTests();
			break;
			case GenForm.ContextMenus.OCRRAssociatedQuestions.ADDQUESTIONS :
				linkQuestions();
			break;
			case GenForm.ContextMenus.OCRRAssociatedTests.REMOVE :
				removeTest();
			break;
			case GenForm.ContextMenus.OCRRAssociatedQuestions.REMOVEQUESTION :
				removeQuestion();
			break;
			//WDEV-6858
			case GenForm.ContextMenus.OCRRAssociatedQuestions.MOVEUP:
				form.lyrInvestigations().tabQuestions().grdQuestions().moveUp();
				updateQuestionsTabContextMenu();
			break;
			case GenForm.ContextMenus.OCRRAssociatedQuestions.MOVEDOWN:
				form.lyrInvestigations().tabQuestions().grdQuestions().moveDown();
				updateQuestionsTabContextMenu();
			break;
			//end WDEV-6858
			case GenForm.ContextMenus.OCRRSpecimenSite.SELECT_SITES :
				selectSites();
			break;
			case GenForm.ContextMenus.OCRRSpecimenSite.MOVE_UP :
				moveSiteUp();
			break;
			case GenForm.ContextMenus.OCRRSpecimenSite.MOVE_DOWN :
				moveSiteDown();
			break;
			case GenForm.ContextMenus.OCRRSpecimenSite.SORT :
				sortSites();
			break;
			default :
			break;
		}
	}

	//WDEV-6858
	private void updateQuestionsTabContextMenu()
	{
		form.getContextMenus().getOCRRAssociatedQuestionsMOVEUPItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrInvestigations().tabQuestions().grdQuestions().canMoveCurrentUp());
		form.getContextMenus().getOCRRAssociatedQuestionsMOVEDOWNItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrInvestigations().tabQuestions().grdQuestions().canMoveCurrentDown());		
	}

	private void sortSites()
	{
		SortOrder order = form.getLocalContext().getSiteSortOrder();
		if (order == null)
			order = SortOrder.ASCENDING;
		else if (order.equals(SortOrder.ASCENDING))
			order = SortOrder.DESCENDING;
		else
			order = SortOrder.ASCENDING;

		form.getLocalContext().setSiteSortOrder(order);
		form.lyrSelection().tabSites().grdSites().sort(0, order);
	}

	private void moveSiteDown()
	{
		if (form.lyrSelection().tabSites().grdSites().getRows().size() > 0)
			form.lyrSelection().tabSites().grdSites().moveDown();
	}

	private void moveSiteUp()
	{

		if (form.lyrSelection().tabSites().grdSites().getRows().size() > 0)
			form.lyrSelection().tabSites().grdSites().moveUp();

	}

	/**
	 * Launch SelectLookupInstances passing already selected sites
	 * 
	 */
	private void selectSites()
	{
		form.getGlobalContext().Core.setSelectLookupType(new LookupTypeVo(SpecimenSite.TYPE_ID));
		SpecimenSiteCollection collSites = new SpecimenSiteCollection();
		for (int i = 0; i < form.lyrSelection().tabSites().grdSites().getRows().size(); i++)
		{
			grdSitesRow row = form.lyrSelection().tabSites().grdSites().getRows().get(i);
			collSites.add(row.getColSite());
		}

		form.getGlobalContext().Core.setSelectedLookupInstances(collSites);
		engine.open(form.getForms().Core.SelectLookupInstances);
	}

	private void removeQuestion()
	{
		if (form.lyrInvestigations().tabQuestions().grdQuestions().getSelectedRowIndex() > -1)
		{
			form.lyrInvestigations().tabQuestions().grdQuestions().removeSelectedRow();
			form.lyrInvestigations().tabQuestions().grdQuestions().setValue(null);
			updateControlsState(form.getLocalContext().getCurrentScreenMode());
		}
	}

	private void removeTest()
	{
		if (form.lyrInvestigations().tabLinkedInvestigations().grdTests().getSelectedRowIndex() > -1)
		{
			form.lyrInvestigations().tabLinkedInvestigations().grdTests().removeSelectedRow();
			form.lyrInvestigations().tabLinkedInvestigations().grdTests().setValue(null);
			updateControlsState(form.getLocalContext().getCurrentScreenMode());
		}
	}

	private void linkQuestions()
	{
		// Get selected questions as they will be preselected in the parent
		QuestionInformationShortVoCollection voCollQuestion = new QuestionInformationShortVoCollection();
		for (int i = 0; i < form.lyrInvestigations().tabQuestions().grdQuestions().getRows().size(); i++)
		{
			if (form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(i).getValue() != null && form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(i).getValue().getQuestionIsNotNull())
				voCollQuestion.add(form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(i).getValue().getQuestion());
		}

		form.getGlobalContext().Admin.setSelectedQuestions(voCollQuestion);
		form.getGlobalContext().Core.setQuestionType(ims.core.vo.lookups.QuestionType.PRIMARY);
		engine.open(form.getForms().Core.QuestionSelectNew, "Question/Information");
	}

	private void linkTests()
	{
		form.getGlobalContext().OCRR.setProvider(form.lyrInvestigations().tabGeneralDet().cmbProvider().getValue());

		LocSvcProviderSysVo voLocSvcProvSys = form.lyrInvestigations().tabGeneralDet().cmbProviderService().getValue();
		if (voLocSvcProvSys != null && voLocSvcProvSys.getLocationServiceIsNotNull())
			form.getGlobalContext().OCRR.setProviderService(voLocSvcProvSys.getLocationService().getService());

		form.getGlobalContext().OCRR.setCategory(form.cmbCategory().getValue());
		// investigations and profiles from this screen both search through
		// Investigations
		form.getGlobalContext().OCRR.setItemSelectionType(ItemSelectionType.INVESTIGATION);
		populateExistingLinkedTests();
		engine.open(form.getForms().OCRR.ItemSelection, "Investigations");
	}

	private void populateExistingLinkedTests()
	{
		InvestShortVoCollection investigations = new InvestShortVoCollection();
		for (int x = 0; x < form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().size(); x++)
		{
			InvestShortVo item = form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().get(x).getValue();
			if (item != null)
			{
				if (item.getInvestigationIndexIsNotNull())
					investigations.add(item);
			}
		}
		form.getGlobalContext().OCRR.setPreselectedInvestigations(investigations);
	}

	private void addHelpText()
	{
		grdTestHelpRow row = form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().newRow(true);

		HelpTextVo item = new HelpTextVo();
		item.setID_HelpText(new Integer(0 - HelpTextVo.generateValueObjectUniqueID()));

		boolean addInstructToCollectItem = true;
		if (form.cmbCategory().getValue() != null && form.cmbCategory().getValue().equals(Category.CLINICALIMAGING) || (form.getLocalContext().getisProfileIsNotNull() && form.getLocalContext().getisProfile().equals(Boolean.TRUE) && !form.cmbCategory().getValue().equals(Category.PATHOLOGY)))
			addInstructToCollectItem = false;

		bindHelpTextCol(row, addInstructToCollectItem);

		row.setValue(item);
		
		updateControlsState(form.getLocalContext().getCurrentScreenMode());
	}

	private void bindHelpTextCol(grdTestHelpRow row, boolean addInstructToCollectItem)
	{
		HelpTextCategoryCollection collHelpText = LookupHelper.getHelpTextCategory(domain.getLookupService());
		for (int i = 0; i < collHelpText.size(); i++)
		{
			if (!addInstructToCollectItem && collHelpText.get(i).equals(HelpTextCategory.INSTRUCTIONSTOCOLLECTOR))
				continue;

			row.getcolTitle().newRow(collHelpText.get(i), collHelpText.get(i).toString());
		}
	}

	private void removeHelpText()
	{
		if (form.lyrInvestigations().tabHelpTexts().grdTestHelp().getSelectedRowIndex() > -1)
		{
			form.lyrInvestigations().tabHelpTexts().grdTestHelp().removeSelectedRow();
			form.lyrInvestigations().tabHelpTexts().grdTestHelp().setValue(null);
			updateControlsState(form.getLocalContext().getCurrentScreenMode());
		}
	}

	private void removeSynonym()
	{
		if (form.lyrSelection().tabSyn().grdSynonyms().getSelectedRow() != null)
		{
			form.lyrSelection().tabSyn().grdSynonyms().removeSelectedRow();
			form.lyrSelection().tabSyn().grdSynonyms().setValue(null);
		}
		
		updateControlsState();
	}

	private void addSynonym()
	{
		form.lyrSelection().tabSyn().grdSynonyms().getRows().newRow(true);
		updateControlsState();
	}

	private void removeTaxonomy()
	{

		if (form.lyrSelection().tabTax().grdTaxonomy().getSelectedRow() != null)
		{
			form.lyrSelection().tabTax().grdTaxonomy().removeSelectedRow();
			form.lyrSelection().tabTax().grdTaxonomy().setValue(null);
		}
		
		updateControlsState();
	}

	private void addTaxonomy()
	{
		form.getGlobalContext().Core.setTaxonomyMap(null);
		engine.open(form.getForms().Core.TaxonomySearch);
	}

	protected void onLnkReturnClick() throws PresentationLogicException
	{
		if (form.getGlobalContext().OCRR.getNewProfileIsNotNull() && form.getGlobalContext().OCRR.getNewProfile().booleanValue() == false)
			engine.open(form.getForms().OCRR.TestList);
		if (form.getGlobalContext().OCRR.getNewProfileIsNotNull() && form.getGlobalContext().OCRR.getNewProfile().booleanValue() == true)
			engine.open(form.getForms().OCRR.ProfileList);

	}

	protected void onCmbProviderValueChanged() throws PresentationLogicException
	{
		form.lyrInvestigations().tabGeneralDet().cmbProviderService().clear();
		form.lyrInvestigations().tabGeneralDet().txtProviderSys().setValue(null);

		LocationLiteVo voLocation = form.lyrInvestigations().tabGeneralDet().cmbProvider().getValue();
		if (voLocation == null)
		{
			setDetailTabsVisible(false);
			return;
		}

		cmbProviderValueChanged();
	}

	private void cmbProviderValueChanged()
	{
		if (form.lyrInvestigations().tabGeneralDet().cmbProvider().getValue() == null)
			return;
		LocSvcProviderSysVoCollection coll = domain.listProviderSystem(form.lyrInvestigations().tabGeneralDet().cmbProvider().getValue());
		for (int i = 0; i < coll.size(); i++)
		{
			if (coll.get(i).getLocationServiceIsNotNull() && coll.get(i).getLocationService().getServiceIsNotNull())
				form.lyrInvestigations().tabGeneralDet().cmbProviderService().newRow(coll.get(i), coll.get(i).getLocationService().getService().getServiceName());
		}
	}

	protected void onChkTestSeperateOrderValueChanged() throws PresentationLogicException
	{
		if (form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().getValue() == true)
		{
			form.lyrInvestigations().tabGeneralDet().chkAddOn().setValue(false);
			if (form.lyrInvestigations().tabHelpTexts().isHeaderVisible())
			{
				form.lyrInvestigations().tabPathologyDetails().setHeaderVisible(true);
				form.lyrInvestigations().tabLinkedInvestigations().setHeaderVisible(true);
			}
		}
		
		updateControlsState();
	}

	protected void onChkAddOnValueChanged() throws PresentationLogicException
	{
		if (form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue() == true)
		{
			form.getLocalContext().setDeletePathologyDetailsConfirmationId(engine.showMessage("Do you really want to remove Pathology Details ", "Confirm Pathology Details  Delete", MessageButtons.YESNO, MessageIcon.INFORMATION)); //wdev-14252
			return;				//wdev-14252
			//form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setValue(false);
		}
		else
		{
			setDetailTabsVisible(true);
			//setDetailTabsVisible(form.lyrInvestigations().tabGeneralDet().cmbProvider().getValue() != null && form.lyrInvestigations().tabGeneralDet().cmbProviderService().getValue() != null);
		}

		if (form.lyrInvestigations().tabHelpTexts().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().setHeaderVisible(!form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue());
			form.lyrInvestigations().tabLinkedInvestigations().setHeaderVisible(!form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue());
		}
		
		updateControlsState();
	}

	protected void onChkRequiresSiteValueChanged() throws PresentationLogicException
	{
		form.lyrInvestigations().tabGeneralDet().chkAddOn().setEnabled(!form.chkRequiresSite().getValue());
		form.lyrSelection().tabSites().setHeaderVisible(form.chkRequiresSite().getValue());
		form.lyrSelection().showtabTax();

		if (form.chkRequiresSite().getValue() == false)
		{
			form.lyrSelection().showtabTax();
			form.lyrSelection().tabSites().grdSites().getRows().clear();
		}
		else
			form.lyrSelection().showtabSites();

		updateLyrSelectionContexMenuState();
	}

	protected void onGrdTestHelpGridComboBoxSelectionChanged(int column, grdTestHelpRow row, Object value) throws PresentationLogicException
	{
		if (value != null && column == 0 && value instanceof HelpTextCategory)
		{
			for (int i = 0; i < form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().size(); i++)
			{
				if (!row.getValue().equals(form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().get(i).getValue()))
				{
					if (value.equals(form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().get(i).getcolTitle()))
					{
						engine.showMessage("This Category was already set in row " + String.valueOf(i + 1) + " !");
						row.getcolTitle().setValue(null);
						break;
					}
				}
			}
		}
	}

	private void updateRecord()
	{
		//WDEV-16884
		if (Boolean.TRUE.equals(form.getLocalContext().getRightClickSelectedOnHeaders()))
		{
			doHeaderSelectionChanged();
		}
		
		form.getGlobalContext().OCRR.setCurrentInvestigation(form.lyrInvestigations().tabProvider().grdHeaders().getValue());
		updateControlsState(MODE_EDIT_DETAIL_RECORD);
		updateControlsState();
		loadStatusCombos(MODE_EDIT_DETAIL_RECORD);
		form.lyrInvestigations().showtabGeneralDet();
	}

	private void loadColors()
	{
		Color[] ca = Color.getColors();

		for (int i = 0; i < ca.length; i++)
		{
			form.cmbColor().newRow(ca[i], ca[i].getName(), ca[i].getImage());
			form.lyrInvestigations().tabGeneralDet().cmbTestColor().newRow(ca[i], ca[i].getName(), ca[i].getImage());
		}
	}

	private void addRecord()
	{
		form.getGlobalContext().OCRR.setCurrentInvestigation(null);

		if (form.cmbCategory().getValue() == null)
		{
			engine.showMessage("Please select a category !");
			return;
		}

		clearDetails();
		form.getLocalContext().setSelectedInvestigation(new InvestigationVo());

		updateControlsState(MODE_EDIT_DETAIL_RECORD);
		updateControlsState();
		loadStatusCombos(MODE_EDIT_DETAIL_RECORD);
		
		clearVisibleTabs(); //WDEV-16425

		// default parent colour and status
		form.lyrInvestigations().tabGeneralDet().cmbTestColor().setValue(form.cmbColor().getValue());
		form.lyrInvestigations().tabGeneralDet().cmbProviderService().clear();

		if (form.cmbStatus().getValue() != null && !form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.INACTIVE))
			form.lyrInvestigations().tabGeneralDet().cmbTestStatus().setValue(form.cmbStatus().getValue());
		form.lyrInvestigations().showtabGeneralDet();
	}

	private void clearVisibleTabs()
	{
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().clear();
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().ccSpecimen2().clear();
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().ccSpecimen3().clear();
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().ccSpecimen4().clear();
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().ccSpecimen5().clear();
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().ccSpecimen5().clear();
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().ccSpecimen6().clear();
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().ccSpecimen7().clear();
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().ccSpecimen8().clear();
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().ccSpecimen9().clear();
		}
		
	}

	private void enableInvestigationDetails(boolean bEnable)
	{
		//WDEV-16634
		boolean noInterface = Boolean.FALSE.equals(form.chkNoInterface().getValue());
		
		form.lyrInvestigations().tabGeneralDet().cmbTestColor().setEnabled(bEnable);
		form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setEnabled(bEnable);
		form.lyrInvestigations().tabGeneralDet().chkAddOn().setEnabled(bEnable);

		form.lyrInvestigations().tabGeneralDet().cmbProvider().setEnabled(bEnable && noInterface);
		form.lyrInvestigations().tabGeneralDet().cmbProviderService().setEnabled(bEnable && noInterface);
		form.lyrInvestigations().tabGeneralDet().cmbTestStatus().setEnabled(bEnable);
		form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().setEnabled(bEnable && noInterface);
		form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setEnabled(bEnable);
		form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().setEnabled(bEnable);
		form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setEnabled(bEnable);
		form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().setEnabled(bEnable);
		form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().setEnabled(bEnable);
		form.lyrInvestigations().tabClinicalImagingDetails().intDuration().setEnabled(bEnable);
		form.lyrInvestigations().tabQuestions().grdQuestions().setReadOnly(!bEnable);
		form.lyrInvestigations().tabHelpTexts().grdTestHelp().setReadOnly(!bEnable);
		form.lyrInvestigations().tabLinkedInvestigations().grdTests().setReadOnly(!bEnable);
		
		//wdev-16371
		form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().setEnabled(bEnable);
		form.lyrInvestigations().tabGeneralDet().setEnabled(bEnable);
		//-------
	}

	private void loadCategory()
	{
		Category category;

		form.cmbCategory().clear();

		CategoryCollection coll = LookupHelper.getCategory(domain.getLookupService());
		ims.framework.cn.data.TreeNode[] rootNodes = coll.getRootNodes();

		for (int i = 0; i < rootNodes.length; i++)
		{
			category = (Category) rootNodes[i];
			
			if (Category.PAS.equals(category))
			{
				continue;
			}
			
			form.cmbCategory().newRow(category, category.getText());
		}
	}

	private void saveRecord(InvestigationIndexVo voInvIndex)
	{
		super.populateDataFromScreen(voInvIndex);

		//WDEV-9750
		voInvIndex.setSecurityLevel(form.cmbSecurityLevel().getValue());
		
		voInvIndex.setNoInterface(form.chkNoInterface().getValue());

		// WDEV-2892
		if (form.chkPhlebMay().isVisible() == false)
			voInvIndex.setPhlebMayCollect(Boolean.FALSE);

		voInvIndex.setColour(form.cmbColor().getValue());

		createActivity(voInvIndex);

		populateFromlyrSelection(voInvIndex);

		if (form.chkNotOrderable().getValue() == false && form.chkNotResulted().getValue() == false)
			voInvIndex.setOrderability(InvestigationOrderability.ORDERANDRESULT);
		else if (form.chkNotOrderable().getValue() == true && form.chkNotResulted().getValue() == false)
			voInvIndex.setOrderability(InvestigationOrderability.RESULTONLY);
		else if (form.chkNotOrderable().getValue() == false && form.chkNotResulted().getValue() == true)
			voInvIndex.setOrderability(InvestigationOrderability.ORDERONLY);
		
		if (GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()))
		{
			voInvIndex.setTimeSeriesInstructionsURL(form.txtTimeSeriesInstructions().getValue());
		}
		

		InvestigationVo investigation = null;
		if (form.getLocalContext().getSelectedInvestigationIsNotNull())
			investigation = (InvestigationVo) form.getLocalContext().getSelectedInvestigation().clone();

		if (investigation == null)
			investigation = new InvestigationVo();

		String[] arrInvErrors = populateInvestigationDataFromScreen(investigation);
		if (arrInvErrors != null)
		{
			engine.showErrors(arrInvErrors);
			return;
		}

		investigation.setInvestigationIndex(voInvIndex);

		InvestigationVoCollection investigations = voInvIndex.getInvestigations();
		if (investigations == null)
			investigations = new InvestigationVoCollection();

		if (investigation.getID_InvestigationIsNotNull())
		{
			// update investigation
			for (int i = 0; i < investigations.size(); i++)
			{
				if (investigations.get(i).getID_Investigation().equals(investigation.getID_Investigation()))
				{
					investigations.set(i, investigation);
					break;
				}
			}
		}
		else
		{
			// new investigation
			investigations.add(investigation);
		}
		voInvIndex.setInvestigations(investigations);

		if (form.getGlobalContext().OCRR.getNewProfileIsNotNull() && form.getGlobalContext().OCRR.getNewProfile().equals(Boolean.TRUE))
			voInvIndex.setIsProfile(Boolean.TRUE);
		else
			voInvIndex.setIsProfile(Boolean.FALSE);

		String[] validationErrors = voInvIndex.validate(getUIValidation(voInvIndex, investigation));
		if (!validateInput(voInvIndex))
		{
			engine.showMessage("You cannot make a profile inactive without it having at least one Component Test.");
			return;
		}

		if (validationErrors != null && validationErrors.length > 0)
		{
			engine.showErrors(validationErrors);
			return;
		}

		// WDEV-1721
		if (isStatusProgressingFromActiveToInactive(voInvIndex))
		{
			engine.showMessage("Cannot make this record inactive until all the providers are made inactive");
			return;
		}

		// enforcing at least one component investigation into a profile
		if (voInvIndex.getIsProfileIsNotNull() && voInvIndex.getIsProfile().booleanValue() && voInvIndex.getActiveStatusIsNotNull() && voInvIndex.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE) && !isAnyComponentInvAdded(voInvIndex))
		{
			engine.showMessage("At least one Component Investigation must be added to a provider for this Profile");
			return;
		}

	
		//WDEV-11940 - Start
		if (hasPreActiveInvestigations(voInvIndex))
		{
			//validate site inv code
			String err = domain.validatePreActiveInvestigations(voInvIndex);
			if (err!=null)
			{
				form.getLocalContext().setInvestigationBackup(investigation);
				form.getLocalContext().setInvIndexBackup(voInvIndex);
				form.getLocalContext().setConfimSaveMsgBoxId(engine.showMessage( err+"\nAre you sure you want to save ?","Please Confirm", MessageButtons.YESNO, MessageIcon.QUESTION));
				return;	
			}
			
		}
		
		performSave(voInvIndex, investigation);//WDEV-11940
		//WDEV-11940 - End
	}

	private void performSave(InvestigationIndexVo voInvIndex,InvestigationVo investigation)//WDEV-11940
	{
		InvestigationIndexVo savedRecord = null;
		try
		{

			savedRecord = domain.saveInvestigationIndexRecord(voInvIndex, investigation.getID_Investigation(), getRemovedQuestions());
			savedRecord = domain.getInvestigationIndex(savedRecord.getID_InvestigationIndex());

		}
		catch (UniqueKeyViolationException e)
		{

			engine.showMessage(e.getMessage());

		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return;
		}
		catch (DomainInterfaceException e1)
		{
			if (e1.getErrors() != null)
			{
				displayConflictingRecords(e1.getErrors());
			}
			else
				engine.showMessage(e1.getMessage());

			return;
		}
		if (savedRecord != null)
		{
			if (savedRecord.getInvestigationsIsNotNull() && savedRecord.getInvestigations().size() > 0)
			{
				savedRecord.getInvestigations().sort();

				if (!investigation.getID_InvestigationIsNotNull())
					investigation = savedRecord.getInvestigations().get(savedRecord.getInvestigations().size() - 1);
			}

			InvSynonymVoCollection synonyms = savedRecord.getSynonyms();
			form.getLocalContext().setOldSynonyms(synonyms != null ? (InvSynonymVoCollection) synonyms.clone() : null);
			form.getLocalContext().setSelectedInvestigation(investigation);
			form.getGlobalContext().OCRR.setNewInvestigation(Boolean.FALSE);
			form.getGlobalContext().OCRR.setSelectedTest(savedRecord);
			open();

		}
	}

	private boolean hasPreActiveInvestigations(InvestigationIndexVo voInvIndex) {
		if (voInvIndex.getInvestigationsIsNotNull())
		{
			for (int i = 0 ; i < voInvIndex.getInvestigations().size() ; i++)
			{
				if (PreActiveActiveInactiveStatus.PREACTIVE.equals(voInvIndex.getInvestigations().get(i).getActiveStatus()))
					{
						return true;
					}
			}
		}
		return false;
	}

	private void populateFromlyrSelection(InvestigationIndexVo voInvIndex)
	{
		// taxonomy records
		TaxonomyMapCollection taxColl = voInvIndex.getTaxonomyMap();
		if (taxColl == null)
			taxColl = new TaxonomyMapCollection();
		else
			taxColl.clear();

		for (int i = 0; i < form.lyrSelection().tabTax().grdTaxonomy().getRows().size(); i++)
		{
			taxColl.add(form.lyrSelection().tabTax().grdTaxonomy().getRows().get(i).getValue());
		}
		voInvIndex.setTaxonomyMap(taxColl);

		// synonyms records
		InvSynonymVoCollection synColl = voInvIndex.getSynonyms();
		if (synColl == null)
			synColl = new InvSynonymVoCollection();
		else
			synColl.clear();

		for (int i = 0; i < form.lyrSelection().tabSyn().grdSynonyms().getRows().size(); i++)
		{
			InvSynonymVo synVo = form.lyrSelection().tabSyn().grdSynonyms().getRows().get(i).getValue();

			if (synVo == null)
			{
				synVo = new InvSynonymVo();

				synVo.setName(form.lyrSelection().tabSyn().grdSynonyms().getRows().get(i).getColSynonyms());
				synVo.setActiveStatus(Boolean.TRUE);
			}
			else //WDEV-16667
			{
				synVo.setName(form.lyrSelection().tabSyn().grdSynonyms().getRows().get(i).getColSynonyms());
			}
			
			synColl.add(synVo);
		}
		voInvIndex.setSynonyms(synColl);
		updateSynonyms(synColl);

		// site records
		SpecimenSiteCollection siteColl = new SpecimenSiteCollection();
		for (int i = 0; i < form.lyrSelection().tabSites().grdSites().getRows().size(); i++)
			siteColl.add(form.lyrSelection().tabSites().grdSites().getRows().get(i).getValue());

		voInvIndex.setSites(siteColl);
	}

	private void createActivity(InvestigationIndexVo voInvIndex)
	{
		ActivityVo activityVo = voInvIndex.getActivity();

		if (voInvIndex.getNameIsNotNull())
		{
			if (activityVo == null)
				activityVo = new ActivityVo();

			activityVo.setName(voInvIndex.getName());
			activityVo.setDescription(voInvIndex.getDescription());
			activityVo.setIsActive(Boolean.TRUE);
			activityVo.setActivityType(ActivityType.INVESTIGATION);

			voInvIndex.setActivity(activityVo);
		}
	}

	private boolean isStatusProgressingFromActiveToInactive(InvestigationIndexVo mainRecord)
	{
		if (mainRecord.getInvestigationsIsNotNull() && mainRecord.getActiveStatusIsNotNull() && mainRecord.getActiveStatus().equals(PreActiveActiveInactiveStatus.INACTIVE) && mainRecord.getID_InvestigationIndexIsNotNull())
		{
			for (int i = 0; i < mainRecord.getInvestigations().size(); i++)
			{
				if (mainRecord.getInvestigations().get(i).getActiveStatusIsNotNull() && mainRecord.getInvestigations().get(i).getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
					return true;
			}
		}
		return false;
	}

	private String[] getUIValidation(InvestigationIndexVo voInvIndex, InvestigationVo voInvestigation)
	{
		if (voInvIndex == null)
			throw new CodingRuntimeException("Invalid profile record");

		ArrayList<String> errors = new ArrayList<String>();

		if (voInvIndex.getRequiresSiteSpecifier().equals(Boolean.TRUE) && (voInvIndex.getSites() == null || voInvIndex.getSites().size() == 0))
			errors.add("No Sites Identified");

		// If we're not editing a profile or the record is an add-on we skip this validation
		if (engine.getFormName().equals(form.getForms().OCRR.ProfileEdit) && form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue() == false)
		{
			if (voInvestigation.getActiveStatus() == null || !voInvestigation.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
			{
				if (voInvIndex.getActiveStatus() == null || !voInvIndex.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
					return null;
			}

			if (voInvIndex.getInvestigations() == null || voInvIndex.getInvestigations().size() == 0)
			{
				errors.add("No investigation providers configured");
			}
			else
			{
				for (int x = 0; x < voInvIndex.getInvestigations().size(); x++)
				{
					InvestigationVo inv = voInvIndex.getInvestigations().get(x);
					if (inv != null && inv.getActiveStatusIsNotNull() && inv.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
					{
						if (inv.getAssocInvestigations() == null || inv.getAssocInvestigations().size() == 0)
						{
							errors.add("Please identify component investigations");
						}
					}
				}
			}
		}

		Category cat = voInvIndex.getCategory();
		if (cat != null)
		{
			if (cat.equals(Category.PATHOLOGY) || cat.equals(Category.CLINICALIMAGING))
			{
				if (form.lyrInvestigations().tabGeneralDet().cmbProvider().getValue() == null)
					errors.add("Provider is mandatory");

				if (form.lyrInvestigations().tabGeneralDet().cmbProviderService().getValue() == null)
					errors.add("Provider Service is mandatory");

				if (form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().getValue() == null)
					errors.add("Provider System Inv. Code is mandatory");
				//wdev-12647
				if(cat.equals(Category.PATHOLOGY))
				{
					
					if ( (form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().getValue() != null && form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().getValue() > 0 && form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().getValue() == null) 
						|| (form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().getValue() == null && form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().getValue() != null)) //WDEV-16455
					{
							errors.add("Minimum Re-Order Period is mandatory.");
					}
							
					//--------
				}
				if(cat.equals(Category.CLINICALIMAGING))
				{
					if ((form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().getValue() != null && form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().getValue() > 0 && form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().getValue() == null)
						|| (form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().getValue() == null && form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().getValue() != null)) //WDEV-16455
					{
						errors.add("Minimum Re-Order Period (Male) is mandatory.");
					}
					
					if ((form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().getValue() != null && form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().getValue() > 0 && form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().getValue() == null)
						|| (form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().getValue() == null && form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().getValue() != null)) //WDEV-16455
					{
						errors.add("Minimum Re-Order Period (Female) is mandatory.");
					}
					
					if ((form.lyrInvestigations().tabClinicalImagingDetails().intDuration().getValue() != null && form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().getValue() == null)
						|| (form.lyrInvestigations().tabClinicalImagingDetails().intDuration().getValue() == null && form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().getValue() != null))
					{
						errors.add("Both Duration fields need to be completed."); //WDEV-16454
					}
				}
				
				//wdev-16371
				if( form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().getValue() != null )
				{
					if( form.lyrInvestigations().tabGeneralDet().intExpectedTurnAround().getValue() == null )
					{
						errors.add("Please enter a value for Expected Turn Around. ");
					}
				}
				else if(form.lyrInvestigations().tabGeneralDet().intExpectedTurnAround().getValue() != null )
				{
					errors.add("Please select a value for Turn Around Measure. ");
				}
				//-----------
			}
			else if (cat.equals(Category.CLINICAL))
			{
				if (voInvIndex.getNoInterface() != null && voInvIndex.getNoInterface() == false)
				{
					if (form.lyrInvestigations().tabGeneralDet().cmbProvider().getValue() == null)
						errors.add("Provider is mandatory");

					if (form.lyrInvestigations().tabGeneralDet().cmbProviderService().getValue() == null)
						errors.add("Provider Service is mandatory");

					if (form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().getValue() == null)
						errors.add("Provider System Inv. Code is mandatory");
				}
			}
		}
		
		//for a complex investigation, duplicate specimen types are not allowed. Check all the visible tabs for the selected specimen type.
		if (form.cmbCategory().getValue() != null && form.cmbCategory().getValue().equals(Category.PATHOLOGY) && GroupTypeEnumeration.rdoComplex.equals(form.GroupType().getValue()))
		{

			SpecimenTypeCollection specimenTypeCollection = new SpecimenTypeCollection();
			int noOfVisibleTabs = 1;

			specimenTypeCollection.add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().getValue().getType());

			if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().isHeaderVisible())
			{
				specimenTypeCollection.add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().ccSpecimen2().getValue().getType());
				noOfVisibleTabs++;
			}

			if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().isHeaderVisible())
			{
				specimenTypeCollection.add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().ccSpecimen3().getValue().getType());
				noOfVisibleTabs++;
			}

			if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().isHeaderVisible())
			{
				specimenTypeCollection.add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().ccSpecimen4().getValue().getType());
				noOfVisibleTabs++;
			}

			if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().isHeaderVisible())
			{
				specimenTypeCollection.add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().ccSpecimen5().getValue().getType());
				noOfVisibleTabs++;
			}

			if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().isHeaderVisible())
			{
				specimenTypeCollection.add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().ccSpecimen6().getValue().getType());
				noOfVisibleTabs++;
			}

			if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().isHeaderVisible())
			{
				specimenTypeCollection.add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().ccSpecimen7().getValue().getType());
				noOfVisibleTabs++;
			}

			if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().isHeaderVisible())
			{
				specimenTypeCollection.add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().ccSpecimen8().getValue().getType());
				noOfVisibleTabs++;
			}

			if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().isHeaderVisible())
			{
				specimenTypeCollection.add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().ccSpecimen9().getValue().getType());
				noOfVisibleTabs++;
			}

			if (specimenTypeCollection.size() > 0 && noOfVisibleTabs > specimenTypeCollection.size())
			{
				errors.add("Duplicate Specimen Types were selected on the Specimen tabs. Please amend.");
			}
		}
		
		if (errors.size() == 0)
			return null;

		String[] err = new String[errors.size()];
		for (int x = 0; x < errors.size(); x++)
		{
			err[x] = (String) errors.get(x);
		}

		return err;
	}

	private boolean isAnyComponentInvAdded(InvestigationIndexVo mainRecord)
	{
		if (mainRecord == null)
			throw new CodingRuntimeException("mainRecord is null in method isAnyComponentInvAdded");

		for (int i = 0; i < mainRecord.getInvestigations().size(); i++)
		{
			InvestigationVo voInvest = mainRecord.getInvestigations().get(i);
			if (voInvest.getAssocInvestigationsIsNotNull() && voInvest.getAssocInvestigations().size() > 0)
				return true;
		}

		return false;
	}

	private boolean validateInput(InvestigationIndexVo mainRecord)
	{
		boolean bInactiveCheckSucceded = true;
		if (mainRecord.getIsProfileIsNotNull() && mainRecord.getIsProfile().booleanValue())
		{
			if (mainRecord.getActiveStatusIsNotNull() && mainRecord.getActiveStatus().equals(PreActiveActiveInactiveStatus.INACTIVE))
				bInactiveCheckSucceded = false;

			if (mainRecord.getInvestigations() == null || mainRecord.getInvestigationsIsNotNull() && mainRecord.getInvestigations().size() == 0)
				bInactiveCheckSucceded = false;
			else
			{
				for (int i = 0; i < mainRecord.getInvestigations().size(); i++)
				{
					if (mainRecord.getInvestigations().get(i).getAssocInvestigationsIsNotNull() && mainRecord.getInvestigations().get(i).getAssocInvestigations().size() > 0)
					{
						bInactiveCheckSucceded = true;
						break;
					}
				}
			}

		}
		return bInactiveCheckSucceded;
	}

	private InvestigationQuestionVoCollection getRemovedQuestions()
	{
		return null;
	}

	private void updateSynonyms(InvSynonymVoCollection synColl)
	{
		if (!form.getLocalContext().getOldSynonymsIsNotNull())
			return;

		InvSynonymVoCollection oldSynColl = form.getLocalContext().getOldSynonyms();

		for (int i = 0; i < oldSynColl.size(); i++)
		{
			if (!isSynonymInCollection(oldSynColl.get(i), synColl))
			{
				InvSynonymVo synVo = oldSynColl.get(i);
				synVo.setActiveStatus(Boolean.FALSE);
				synColl.add(synVo);
			}
		}
	}

	private boolean isSynonymInCollection(InvSynonymVo vo, InvSynonymVoCollection synColl)
	{
		if (vo == null || !vo.getID_InvSynonymIsNotNull())
			return false;

		for (int i = 0; i < synColl.size(); i++)
		{
			InvSynonymVo synVo = synColl.get(i);

			if (synVo.equals(vo))
				return true;
		}
		return false;
	}

	private String[] populateInvestigationDataFromScreen(InvestigationVo investigation)
	{
		ArrayList<String> validationErrors = new ArrayList<String>();

		investigation.setActiveStatus(form.lyrInvestigations().tabGeneralDet().cmbTestStatus().getValue());
		investigation.setColour(form.lyrInvestigations().tabGeneralDet().cmbTestColor().getValue());
		investigation.setProviderInvCode(form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().getValue());
		investigation.setProviderService(form.lyrInvestigations().tabGeneralDet().cmbProviderService().getValue());
		investigation.setSeparateOrder(new Boolean(form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().getValue()));
		investigation.setIsAddon(new Boolean(form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue()));
		investigation.setMinReorderPeriodUnit(form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().getValue());
		investigation.setMinReorderPeriodVal(form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().getValue());

		investigation.setFemaleMinReorderPeriodUnit(form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().getValue());
		investigation.setFemaleMinReorderPeriodVal(form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().getValue());
		
		//wdev-16371
		investigation.setTurnaroundMeasure(form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().getValue());
		investigation.setExpectedTurnaround(form.lyrInvestigations().tabGeneralDet().intExpectedTurnAround().getValue());
		//----

		// if type is pathology default the male values into the female
		if (form.cmbCategory().getValue() != null && form.cmbCategory().getValue().equals(Category.PATHOLOGY))
		{
			investigation.setFemaleMinReorderPeriodUnit(form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().getValue());
			investigation.setFemaleMinReorderPeriodVal(form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().getValue());
			
			if (GroupTypeEnumeration.rdoComplex.equals(form.GroupType().getValue()))
			{
				investigation.setType(InvType.COMPLEX);
			}
			else
			{
				investigation.setType(InvType.SIMPLE);
			}
			
			if (GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()))
			{
				investigation.setEventType(InvEventType.TIME_SERIES);
			}
			else
			{
				investigation.setEventType(InvEventType.SINGLE_EVENT);
			}	
			
			investigation.setNoLabelSets(form.intLabelsSets().getValue());
		}
		else
		{
			investigation.setType(InvType.SIMPLE);
			investigation.setEventType(InvEventType.SINGLE_EVENT);
		}

		if (form.cmbCategory().getValue() != null && form.cmbCategory().getValue().equals(Category.CLINICALIMAGING))
		{
			ClinImagInvDetailsVo clinImagDetailsVo = investigation.getClinImagInvDetails();
			if (clinImagDetailsVo == null)
				clinImagDetailsVo = new ClinImagInvDetailsVo();

			clinImagDetailsVo.setDurationUnit(form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().getValue());
			clinImagDetailsVo.setDurationVal(form.lyrInvestigations().tabClinicalImagingDetails().intDuration().getValue());

			investigation.setClinImagInvDetails(clinImagDetailsVo);
		}

		if (form.cmbCategory().getValue() != null && form.cmbCategory().getValue().equals(Category.PATHOLOGY) && form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue() == false)
		{
			PathInvDetailsVo pathDetailsVo = investigation.getPathInvDetails();
			
			if (pathDetailsVo == null)
				pathDetailsVo = new PathInvDetailsVo();

			if (GroupTypeEnumeration.rdoComplex.equals(form.GroupType().getValue()))
			{
				pathDetailsVo.setNoSpecimens(form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().getValue());
				
				if (pathDetailsVo.getSpecimens() == null)
				{
					pathDetailsVo.setSpecimens(new SpecimenVoCollection());
				}
				else
				{
					pathDetailsVo.getSpecimens().clear();
				}
				
				pathDetailsVo.getSpecimens().add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().getValue());
				
				if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().isHeaderVisible())
				{
					pathDetailsVo.getSpecimens().add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().ccSpecimen2().getValue());
				}
				
				if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().isHeaderVisible())
				{
					pathDetailsVo.getSpecimens().add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().ccSpecimen3().getValue());
				}
				
				if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().isHeaderVisible())
				{
					pathDetailsVo.getSpecimens().add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().ccSpecimen4().getValue());
				}
				
				if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().isHeaderVisible())
				{
					pathDetailsVo.getSpecimens().add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().ccSpecimen5().getValue());
				}
				
				if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().isHeaderVisible())
				{
					pathDetailsVo.getSpecimens().add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().ccSpecimen6().getValue());
				}
				
				if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().isHeaderVisible())
				{
					pathDetailsVo.getSpecimens().add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().ccSpecimen7().getValue());
				}
				
				if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().isHeaderVisible())
				{
					pathDetailsVo.getSpecimens().add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().ccSpecimen8().getValue());
				}
				
				if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().isHeaderVisible())
				{
					pathDetailsVo.getSpecimens().add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().ccSpecimen9().getValue());
				}
				
				if (form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().getValue() == null)
				{
					validationErrors.add("Number of Specimen Types is mandatory.");
				}
				else
				{
					for (int i = 0; i < pathDetailsVo.getSpecimens().size(); i++)
					{
						int tabNo = i + 1;

						if (pathDetailsVo.getSpecimensIsNotNull() && pathDetailsVo.getSpecimens().get(i) != null && (pathDetailsVo.getSpecimens().get(i).getAdultContainers() == null || pathDetailsVo.getSpecimens().get(i).getAdultContainers().size() < 1))
						{
							validationErrors.add("At least one adult container is mandatory on Specimen" + tabNo + " tab.");
						}

						if (pathDetailsVo.getSpecimensIsNotNull() && pathDetailsVo.getSpecimens().get(i) != null && (pathDetailsVo.getSpecimens().get(i).getPaediatricContainers() == null || pathDetailsVo.getSpecimens().get(i).getPaediatricContainers().size() < 1))
						{
							validationErrors.add("At least one paediatric container is mandatory on Specimen" + tabNo + " tab.");
						}
						
						//WDEV-16831
						if (MODE_EDIT_DETAIL_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) && form.getLocalContext().getSelectedInvestigation() != null &&  PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getLocalContext().getSelectedInvestigation().getActiveStatus()) && PreActiveActiveInactiveStatus.ACTIVE.equals(investigation.getActiveStatus()) && pathDetailsVo.getSpecimens().get(i).getType() != null && (! pathDetailsVo.getSpecimens().get(i).getType().isActive()))
						{
							validationErrors.add("The Specimen Type selected on Specimen" + tabNo + "tab was inactivated. Please select an active one.");
						}
					}
				}
			}
			else
			{
				pathDetailsVo.setNoSpecimens(1); //For InvType = Simple, there will be only one specimen type
				
				if (pathDetailsVo.getSpecimens() == null)
				{
					pathDetailsVo.setSpecimens(new SpecimenVoCollection());
				}
				else
				{
					pathDetailsVo.getSpecimens().clear();
				}
				
				pathDetailsVo.getSpecimens().add(form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().getValue());
				
				if (pathDetailsVo.getSpecimensIsNotNull() && pathDetailsVo.getSpecimens().get(0) != null && (pathDetailsVo.getSpecimens().get(0).getAdultContainers() == null || pathDetailsVo.getSpecimens().get(0).getAdultContainers().size() < 1))
				{
					validationErrors.add("At least one adult container is mandatory.");
				}
				
				if (pathDetailsVo.getSpecimensIsNotNull() && pathDetailsVo.getSpecimens().get(0) != null && (pathDetailsVo.getSpecimens().get(0).getPaediatricContainers() == null || pathDetailsVo.getSpecimens().get(0).getPaediatricContainers().size() < 1))
				{
					validationErrors.add("At least one paediatric container is mandatory.");
				}
				
				//WDEV-16831
				if (MODE_EDIT_DETAIL_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) && form.getLocalContext().getSelectedInvestigation() != null &&  PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getLocalContext().getSelectedInvestigation().getActiveStatus()) && PreActiveActiveInactiveStatus.ACTIVE.equals(investigation.getActiveStatus()) && pathDetailsVo.getSpecimens().get(0).getType() != null && (! pathDetailsVo.getSpecimens().get(0).getType().isActive()))
				{
					validationErrors.add("The Specimen Type selected was inactivated. Please select an active one.");
				}
			}
			
			investigation.setPathInvDetails(pathDetailsVo);
		}
		else if (form.cmbCategory().getValue() != null && form.cmbCategory().getValue().equals(Category.PATHOLOGY) && form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue() == true) //wdev-14252
		{
			investigation.setPathInvDetails(null);
		}

		// Linked Tests
		InvestShortVoCollection voCollAssocInvestigations = investigation.getAssocInvestigations();
		if (voCollAssocInvestigations == null)
			voCollAssocInvestigations = new InvestShortVoCollection();
		else
			voCollAssocInvestigations.clear();

		for (int i = 0; i < form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().size(); i++)
			voCollAssocInvestigations.add(form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().get(i).getValue());

		investigation.setAssocInvestigations(voCollAssocInvestigations);

		// Questions
		InvestigationQuestionVoCollection voCollInvQuestions = investigation.getAssocQuestions();
		if (voCollInvQuestions == null)
			voCollInvQuestions = new InvestigationQuestionVoCollection();
		else
			voCollInvQuestions.clear();

		for (int i = 0; i < form.lyrInvestigations().tabQuestions().grdQuestions().getRows().size(); i++)
		{
			if (form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(i).getValue() != null)
			{
				InvestigationQuestionVo voInvQuestion = form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(i).getValue();
				voInvQuestion.setIsMandatory(new Boolean(form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(i).getcolMandatory()));
				voCollInvQuestions.add(form.lyrInvestigations().tabQuestions().grdQuestions().getRows().get(i).getValue());
			}
		}

		investigation.setAssocQuestions(voCollInvQuestions);

		// Help Text
		HelpTextVoCollection helpTextVoCollection = investigation.getHelpText();

		if (helpTextVoCollection == null)
			helpTextVoCollection = new HelpTextVoCollection();
		else
			helpTextVoCollection.clear();

		for (int i = 0; i < form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().size(); i++)
		{
			HelpTextVo item = form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().get(i).getValue();
			grdTestHelpRow row = form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().get(i);

			if (item.getID_HelpTextIsNotNull())
			{
				if (item.getID_HelpText().intValue() < 0)
				{
					// new record
					item.setID_HelpText(null);
				}
			}

			item.setTextCategory((HelpTextCategory) row.getcolTitle().getValue());
			item.setHelpText(row.getcolText());

			helpTextVoCollection.add(item);
		}
		
		investigation.setHelpText(helpTextVoCollection);
		
		String[] arrErrors = null;
		if (validationErrors.size() > 0)
		{
			arrErrors = new String[validationErrors.size()];
			for (int i = 0; i < validationErrors.size(); i++)
			{
				arrErrors[i] = (String) validationErrors.get(i);
			}
		}

		return arrErrors;
	}

	private void open()
	{
		clearAllDetails();
		if (form.getGlobalContext().OCRR.getSelectedTestIsNotNull())
		{
			// view or update
			form.lyrInvestigations().showtabProvider();
			InvSynonymVoCollection synonyms = form.getGlobalContext().OCRR.getSelectedTest().getSynonyms();
			form.getLocalContext().setOldSynonyms(synonyms != null ? (InvSynonymVoCollection) synonyms.clone() : null);

			if (form.getGlobalContext().OCRR.getNewInvestigationIsNotNull() && form.getGlobalContext().OCRR.getNewInvestigation().equals(Boolean.TRUE))
			{
				updateControlsState(MODE_EDIT_MAIN_RECORD);
				setControlsStateForOrderAbility(MODE_EDIT_MAIN_RECORD);
			}
			else
			{
				updateControlsState(MODE_VIEW_MAIN_RECORD);
				setControlsStateForOrderAbility(MODE_VIEW_MAIN_RECORD);
			}

			super.populateScreenFromData(form.getGlobalContext().OCRR.getSelectedTest());
			populateScreenFromDataLocal(form.getGlobalContext().OCRR.getSelectedTest());

			if (form.lyrInvestigations().tabProvider().grdHeaders().getRows().size() > 0)
			{
				if (form.getLocalContext().getSelectedInvestigationIsNotNull())
				{
					for (int i = 0; i < form.lyrInvestigations().tabProvider().grdHeaders().getRows().size(); i++)
					{
						if (form.lyrInvestigations().tabProvider().grdHeaders().getRows().get(i).getValue().getID_Investigation().equals(form.getLocalContext().getSelectedInvestigation().getID_Investigation()))
						{
							form.lyrInvestigations().tabProvider().grdHeaders().setValue(form.lyrInvestigations().tabProvider().grdHeaders().getRows().get(i).getValue());
							doHeaderSelectionChanged();
							loadStatusCombos(MODE_EDIT_MAIN_RECORD);
							break;
						}
					}
				}
				else
				{
					if (form.lyrInvestigations().tabProvider().grdHeaders().getRows().size() == 1)
					{
						form.lyrInvestigations().tabProvider().grdHeaders().setValue(form.lyrInvestigations().tabProvider().grdHeaders().getRows().get(0).getValue());
						doHeaderSelectionChanged();
						loadStatusCombos(MODE_EDIT_MAIN_RECORD);
					}
					else
					{
						int noPreActiveProviders = 0;
						int noActiveProvider = 0;
						
						InvestigationVo activeInvestigationToBeDisplayed = null;
						
						//WDEV-17902
						for (int i = 0; i < form.lyrInvestigations().tabProvider().grdHeaders().getRows().size(); i++)
						{
							if (PreActiveActiveInactiveStatus.PREACTIVE.equals(form.lyrInvestigations().tabProvider().grdHeaders().getRows().get(i).getValue().getActiveStatus()))
							{
								noPreActiveProviders++;
							}
							else if (PreActiveActiveInactiveStatus.ACTIVE.equals(form.lyrInvestigations().tabProvider().grdHeaders().getRows().get(i).getValue().getActiveStatus()))
							{
								activeInvestigationToBeDisplayed = form.lyrInvestigations().tabProvider().grdHeaders().getRows().get(i).getValue();
								noActiveProvider++;
							}
						}
						
						if (noActiveProvider == 1 && noPreActiveProviders == 0)
						{
							form.lyrInvestigations().tabProvider().grdHeaders().setValue(activeInvestigationToBeDisplayed);
							doHeaderSelectionChanged();
							loadStatusCombos(MODE_EDIT_MAIN_RECORD);
						}
						else
						{
							form.lyrInvestigations().tabProvider().grdHeaders().setValue(form.lyrInvestigations().tabProvider().grdHeaders().getRows().get(0).getValue());
							doHeaderSelectionChanged();
							form.lyrInvestigations().showtabProvider();
							loadStatusCombos(MODE_EDIT_MAIN_RECORD);
						}
					}
				}
			}
		}
		else
		{
			// new InvestigationIndex record
			setDetailTabsVisible(false);
			form.lyrInvestigations().showtabGeneralDet();
			updateControlsState(MODE_NEW_MAIN_RECORD);
			loadStatusCombos(MODE_NEW_MAIN_RECORD);
			cmbCategoryValueChanged();			//wdev-156371
		}
		
		updateControlsState();
	}

	private void clearAllDetails()
	{
		super.clearScreen();

		form.cmbSecurityLevel().setValue(null);
		form.chkNotOrderable().setValue(false);
		form.chkNotResulted().setValue(false);
		form.chkRequiresSite().setValue(false);
		form.chkPhlebMay().setValue(false);
		form.lyrInvestigations().tabProvider().grdHeaders().getRows().clear();
		form.lyrSelection().tabSyn().grdSynonyms().getRows().clear();
		form.lyrSelection().tabTax().grdTaxonomy().getRows().clear();
		form.lyrSelection().tabSites().grdSites().getRows().clear();

		clearDetails();
	}

	private void clearDetails()
	{
		form.lyrInvestigations().tabGeneralDet().cmbProvider().setValue(null);
		form.lyrInvestigations().tabGeneralDet().cmbProviderService().setValue(null);
		form.lyrInvestigations().tabGeneralDet().txtProviderSys().setValue(null);
		form.lyrInvestigations().tabGeneralDet().cmbTestColor().setValue(null);
		form.lyrInvestigations().tabGeneralDet().cmbTestStatus().setValue(null);
		form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().setValue(null);
		form.lyrInvestigations().tabGeneralDet().chkAddOn().setValue(false);
		form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setValue(false);
		//wdev-16371
		form.lyrInvestigations().tabGeneralDet().cmbTurnAroundMeasure().setValue(null);
		form.lyrInvestigations().tabGeneralDet().intExpectedTurnAround().setValue(null);
		//-----------
		// form.chkRequiresSite().setValue(false);
		form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setValue(null);
		form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().setValue(null);
		form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().setValue(null);
		form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setValue(null);

		form.lyrInvestigations().tabClinicalImagingDetails().cmbDuration().setValue(null);
		form.lyrInvestigations().tabClinicalImagingDetails().intDuration().setValue(null);
		
		form.lyrInvestigations().tabQuestions().grdQuestions().getRows().clear();

		form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().clear();

		form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().clear();

		clearContexts();
	}

	/**
	 * standard clear of context variables
	 */
	private void clearContexts()
	{
		form.getGlobalContext().OCRR.setProvider(null);
		form.getGlobalContext().OCRR.setProviderService(null);
		form.getGlobalContext().OCRR.setCurrentInvestigation(null);
	}

	private void enableTopControls(boolean bEnable)
	{
		form.cmbCategory().setEnabled(bEnable);
		form.cmbGenderSpecific().setEnabled(bEnable);
		form.cmbStatus().setEnabled(bEnable);
		form.cmbColor().setEnabled(bEnable);
		form.cmbSecurityLevel().setEnabled(bEnable);
		form.chkPhlebMay().setEnabled(bEnable);
		
		form.lyrSelection().tabSyn().grdSynonyms().setReadOnly(!bEnable);
		form.lyrSelection().tabSyn().grdSynonyms().setEnabled(bEnable);
		form.lyrSelection().tabTax().grdTaxonomy().setReadOnly(!bEnable);
		form.lyrSelection().tabSites().grdSites().setReadOnly(!bEnable);
		form.txtName().setEnabled(bEnable);
		form.txtDescription().setEnabled(bEnable);
		form.chkNotOrderable().setEnabled(bEnable);
		form.chkNotResulted().setEnabled(bEnable);
		form.chkNoInterface().setEnabled(bEnable);
	}

	private void populateScreenFromDataLocal(InvestigationIndexVo selectedTest)
	{
		//WDEV-9750
		form.cmbSecurityLevel().setValue(selectedTest.getSecurityLevel());
		
		Color color = getColor(selectedTest.getColour());
		if (color != null)
		{
			form.cmbColor().setValue(color);
		}

		if (selectedTest.getOrderabilityIsNotNull())
		{
			if (selectedTest.getOrderability().equals(InvestigationOrderability.ORDERONLY))
			{
				form.chkNotResulted().setValue(true);
				chkNotOrderableValueChanged();
			}
			else if (selectedTest.getOrderability().equals(InvestigationOrderability.RESULTONLY))
				form.chkNotOrderable().setValue(true);
		}

		if (selectedTest.getInvestigationsIsNotNull())
		{
			selectedTest.getInvestigations().sort();
			for (int i = 0; i < selectedTest.getInvestigations().size(); i++)
			{
				InvestigationVo investigation = selectedTest.getInvestigations().get(i);

				grdHeadersRow row = form.lyrInvestigations().tabProvider().grdHeaders().getRows().newRow();

				row.setcolInvCode(investigation.getProviderInvCode());

				if (investigation.getProviderServiceIsNotNull())
				{
					if (investigation.getProviderService().getLocationServiceIsNotNull())
					{
						if (investigation.getProviderService().getLocationService().getLocationIsNotNull())
							row.setcolProvider(investigation.getProviderService().getLocationService().getLocation().getName());

						if (investigation.getProviderService().getLocationService().getServiceIsNotNull())
							row.setcolProvService(investigation.getProviderService().getLocationService().getService().getServiceName());
					}

					row.setcolProvSystem(investigation.getProviderService().getProviderSystemIsNotNull() ? investigation.getProviderService().getProviderSystem().getSystemName() : "");
				}
				else
					row.setcolProvider("No Provider");

				if (investigation.getColourIsNotNull())
				{
					Color colorCol = Color.getColor(investigation.getColour().getName());
					if (colorCol != null)
						row.setcolColour(colorCol.getImage());
				}

				row.setcolStat(investigation.getActiveStatusIsNotNull() ? investigation.getActiveStatus().getText() : "");
				row.setValue(investigation);
			}
			
			form.getLocalContext().setRightClickSelectedOnHeaders(Boolean.FALSE);
		}

		if (selectedTest.getTaxonomyMapIsNotNull())
		{
			selectedTest.getTaxonomyMap().sort();
			for (int i = 0; i < selectedTest.getTaxonomyMap().size(); i++)
			{
				addTaxonomyRow(selectedTest.getTaxonomyMap().get(i));
			}
		}

		if (selectedTest.getSynonymsIsNotNull())
		{
			selectedTest.getSynonyms().sort();
			for (int i = 0; i < selectedTest.getSynonyms().size(); i++)
			{
				GenForm.lyrSelectionLayer.tabSynContainer.grdSynonymsRow row = form.lyrSelection().tabSyn().grdSynonyms().getRows().newRow();

				row.setColSynonyms(selectedTest.getSynonyms().get(i).getName());
				row.setValue(selectedTest.getSynonyms().get(i));
			}
		}

		if (selectedTest.getSitesIsNotNull())
		{
			for (int i = 0; i < selectedTest.getSites().size(); i++)
			{
				GenForm.lyrSelectionLayer.tabSitesContainer.grdSitesRow row = form.lyrSelection().tabSites().grdSites().getRows().newRow();

				row.setColSite(selectedTest.getSites().get(i));
				row.setValue(selectedTest.getSites().get(i));
			}
		}

		form.chkNoInterface().setValue(selectedTest.getNoInterface());
	}

	private Color getColor(Color colour)
	{
		if (colour == null)
			return null;

		Color[] colours = Color.getColors();

		for (int i = 0; i < colours.length; i++)
		{
			if (colour.getName().equals(colours[i].getName()))
				return colours[i];
		}

		return null;
	}

	private void loadLocations(Category value)
	{
		LocationLiteVo backup = form.lyrInvestigations().tabGeneralDet().cmbProvider().getValue();//WDEV-12979
		
		form.lyrInvestigations().tabGeneralDet().cmbProvider().clear();

		if (value == null)
			return;

		LocationLiteVoCollection coll = domain.listProvidersByCategory(value);
		for (int i = 0; i < coll.size(); i++)
		{
			form.lyrInvestigations().tabGeneralDet().cmbProvider().newRow(coll.get(i), coll.get(i).getName());
		}
		
		form.lyrInvestigations().tabGeneralDet().cmbProvider().setValue(backup);////WDEV-12979
	}

	protected void onCmbColorValueChanged() throws PresentationLogicException
	{
		if (form.getGlobalContext().OCRR.getSelectedTest() == null && form.getMode().equals(FormMode.EDIT))
		{
			form.lyrInvestigations().tabGeneralDet().cmbTestColor().setValue(form.cmbColor().getValue());
		}
	}
	
	private void updateControlsState()
	{
		boolean separateOrder = form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().getValue() == true;
		boolean addOnOrder = form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue() == true;
		boolean isOrderable = !form.chkNotOrderable().getValue();

		form.lblReqSiteSpecifier().setVisible(isPathologyAndNotProfile(form.cmbCategory().getValue()) && (! GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue())));
		form.chkRequiresSite().setVisible(isPathologyAndNotProfile(form.cmbCategory().getValue()) && (! GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue())));
		form.chkRequiresSite().setEnabled((separateOrder || !addOnOrder) && FormMode.EDIT.equals(form.getMode()) && isOrderable);
		
		form.lyrSelection().tabSites().setHeaderVisible(form.chkRequiresSite().getValue());
		
		if ( ( ! form.lyrSelection().tabSites().isHeaderVisible()) && FormMode.VIEW.equals(form.getMode()) )
		{
			form.lyrSelection().showtabTax();
		}
		
		form.lblType().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()));
		form.lblSimple().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && ConfigFlag.UI.INVESTIGATION_CONFIG_ALLOW_COMPLEX.getValue() == false);
		form.GroupType().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && ConfigFlag.UI.INVESTIGATION_CONFIG_ALLOW_COMPLEX.getValue());
		form.GroupType().setEnabled(FormMode.EDIT.equals(form.getMode()) && (MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) );
		
		form.lblEventType().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()));
		form.GroupEventType().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()));
		form.GroupEventType().setEnabled(FormMode.EDIT.equals(form.getMode()) && (MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) );
		
		form.lblNoOfLabelSets().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()));
		form.intLabelsSets().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()));
		//WDEV-17001
		form.intLabelsSets().setEnabled(FormMode.EDIT.equals(form.getMode()) && ( MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) || form.getLocalContext().getSelectedInvestigation() != null && (! PreActiveActiveInactiveStatus.INACTIVE.equals(form.getLocalContext().getSelectedInvestigation().getActiveStatus())) ) );
		
		form.lblDFT1().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()));
		form.lblDFT2().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()));
		form.txtTimeSeriesInstructions().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()));
		form.txtTimeSeriesInstructions().setEnabled(FormMode.EDIT.equals(form.getMode()));
		
		form.chkPhlebMay().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && (! GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue())) );
		form.lblPhlebotomist().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && (! GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue())) );
		
		form.lyrInvestigations().tabGeneralDet().chkAddOn().setVisible(isPathologyAndNotProfile(form.cmbCategory().getValue()) && (! GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue())) && (! GroupTypeEnumeration.rdoComplex.equals(form.GroupType().getValue())));
		form.lyrInvestigations().tabGeneralDet().lblAddOn().setVisible(isPathologyAndNotProfile(form.cmbCategory().getValue())&& (! GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue())) && (! GroupTypeEnumeration.rdoComplex.equals(form.GroupType().getValue())));
		
		form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setVisible(isPathologyAndNotProfile(form.cmbCategory().getValue()) && (! GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue())));
		form.lyrInvestigations().tabGeneralDet().lblSepOrder().setVisible(isPathologyAndNotProfile(form.cmbCategory().getValue()) && (! GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue())));
		
		form.lyrInvestigations().tabPathologyDetails().lblNoOfspecimenTypes().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && GroupTypeEnumeration.rdoComplex.equals(form.GroupType().getValue()));
		form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().setVisible(Category.PATHOLOGY.equals(form.cmbCategory().getValue()) && GroupTypeEnumeration.rdoComplex.equals(form.GroupType().getValue()));
		form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().setEnabled(FormMode.EDIT.equals(form.getMode()) && MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) );
		
		form.getContextMenus().getOCRRTaxonomyADD_TAXONOMYItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().getOCRRTaxonomyREMOVE_TAXONOMYItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrSelection().tabTax().grdTaxonomy().getSelectedRow() != null);
		
		form.getContextMenus().getOCRRSynonymsADD_SYNONYMItem().setVisible(FormMode.EDIT.equals(form.getMode()));
		form.getContextMenus().getOCRRSynonymsREMOVE_SYNONYMItem().setVisible(FormMode.EDIT.equals(form.getMode()) && form.lyrSelection().tabSyn().grdSynonyms().getSelectedRow() != null);
		
		showHideSpecimenTabs();
	}

	private void updateControlsState(Integer nMode)
	{
		if (nMode == null)
			return;
		
		form.getContextMenus().getOCRRProviderADDNEWPROVIDERItem().setVisible(false);
		form.getContextMenus().getOCRRProviderUPDATEPROVIDERItem().setVisible(false);

		form.getContextMenus().getOCRRHelpTextADD_HELPTEXTItem().setVisible(false);
		form.getContextMenus().getOCRRHelpTextREMOVE_HELPTEXTItem().setVisible(false);

		form.getContextMenus().getOCRRAssociatedTestsASSOCIATEWITHItem().setVisible(false);
		form.getContextMenus().getOCRRAssociatedTestsREMOVEItem().setVisible(false);

		form.getContextMenus().getOCRRAssociatedQuestionsADDQUESTIONSItem().setVisible(false);
		form.getContextMenus().getOCRRAssociatedQuestionsREMOVEQUESTIONItem().setVisible(false);	
		
		updateQuestionsTabContextMenu();//WDEV-6858

		if (nMode.equals(MODE_NEW_MAIN_RECORD))
		{
			// a new InvestigationIndex record is being added
			form.setMode(FormMode.EDIT);
			enableTopControls(true);
			
			//WDEV-16634
			form.chkNoInterface().setValue(form.cmbCategory().getValue() != null && form.cmbCategory().getValue().equals(Category.CLINICAL));
			enableInvestigationDetails(form.cmbCategory().getValue() != null);
			
			form.btnSave().setVisible(true);
			form.btnCancel().setVisible(true);
			form.btnUpdate().setVisible(false);

			updateLyrSelectionContexMenuState();

			form.getContextMenus().getOCRRHelpTextADD_HELPTEXTItem().setVisible(true);
			if (form.lyrInvestigations().tabHelpTexts().grdTestHelp().getSelectedRowIndex() > -1)
				form.getContextMenus().getOCRRHelpTextREMOVE_HELPTEXTItem().setVisible(true);

			form.getContextMenus().getOCRRAssociatedTestsASSOCIATEWITHItem().setVisible(true);
			if (form.lyrInvestigations().tabLinkedInvestigations().grdTests().getSelectedRowIndex() > -1)
				form.getContextMenus().getOCRRAssociatedTestsREMOVEItem().setVisible(true);

			form.cmbStatus().setValue(PreActiveActiveInactiveStatus.PREACTIVE);

			form.getContextMenus().getOCRRAssociatedQuestionsADDQUESTIONSItem().setVisible(true);
			
			form.lyrInvestigations().tabGeneralDet().cmbTestStatus().setValue(PreActiveActiveInactiveStatus.PREACTIVE);
			
		}
		else if (nMode.equals(MODE_VIEW_MAIN_RECORD))
		{
			// the selected InvestigationIndex record is being viewed
			form.setMode(FormMode.VIEW);
			enableTopControls(false);
			enableInvestigationDetails(false);
			form.btnUpdate().setVisible(true);
			form.btnSave().setVisible(false);
			form.btnCancel().setVisible(false);

			form.getContextMenus().getOCRRTaxonomyADD_TAXONOMYItem().setVisible(false);
			form.getContextMenus().getOCRRTaxonomyREMOVE_TAXONOMYItem().setVisible(false);
			form.getContextMenus().getOCRRSynonymsADD_SYNONYMItem().setVisible(false);
			form.getContextMenus().getOCRRSynonymsREMOVE_SYNONYMItem().setVisible(false);
			form.getContextMenus().getOCRRSpecimenSiteMOVE_UPItem().setVisible(false);
			form.getContextMenus().getOCRRSpecimenSiteMOVE_DOWNItem().setVisible(false);
			form.getContextMenus().getOCRRSpecimenSiteSELECT_SITESItem().setVisible(false);
			form.getContextMenus().getOCRRSpecimenSiteSORTItem().setVisible(false);
		}
		else if (nMode.equals(MODE_EDIT_MAIN_RECORD))
		{
			// the selected InvestigationIndex record is being updated
			form.setMode(FormMode.EDIT);
			enableTopControls(true);

			if (form.lyrInvestigations().tabProvider().grdHeaders().getRows().size() > 0)
			{
				form.cmbCategory().setEnabled(false);
				form.txtName().setEnabled(engine.hasRight(AppRight.OCS_CHANGE_INVESTIGATION));
			}

			enableInvestigationDetails(false);
			form.btnSave().setVisible(true);
			form.btnCancel().setVisible(true);
			form.btnUpdate().setVisible(false);

			updateLyrSelectionContexMenuState();

			////////////////////////////////////////////////////////////////////
			// ///////////////////////
			// WDEV-3155 (do not move the following 5 lines of code above the
			// call to updateLyrSelectionContexMenuState())
//			if (form.getLocalContext().getSelectedInvestigationIsNotNull() && form.getLocalContext().getSelectedInvestigation().getActiveStatusIsNotNull() && form.getLocalContext().getSelectedInvestigation().getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
//			{
//				form.chkRequiresSite().setEnabled(false);
//			}
			////////////////////////////////////////////////////////////////////
			// ///////////////////////

			form.getContextMenus().getOCRRProviderADDNEWPROVIDERItem().setVisible(true);
			if (form.lyrInvestigations().tabProvider().grdHeaders().getSelectedRowIndex() >= -1)
				form.getContextMenus().getOCRRProviderUPDATEPROVIDERItem().setVisible(true);
			
		}
		else if (nMode.equals(MODE_EDIT_DETAIL_RECORD))
		{
			// the selected Investigation record is being updated
			form.setMode(FormMode.EDIT);
			enableTopControls(true);
			if (form.lyrInvestigations().tabProvider().grdHeaders().getRows().size() > 0)
			{
				form.cmbCategory().setEnabled(false);
				form.txtName().setEnabled(engine.hasRight(AppRight.OCS_CHANGE_INVESTIGATION));
			}
			enableInvestigationDetails(true);

			if (form.lyrInvestigations().tabGeneralDet().cmbTestStatus().getValue() != null)
			{
				//WDEV-16474 WDEV-16471
				if ( ((!form.lyrInvestigations().tabGeneralDet().cmbTestStatus().getValue().equals(PreActiveActiveInactiveStatus.PREACTIVE)) && form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull()) || (form.lyrInvestigations().tabGeneralDet().cmbTestStatus().getValue().equals(PreActiveActiveInactiveStatus.PREACTIVE) && Boolean.TRUE.equals(form.chkNoInterface().getValue())))
				{
					form.lyrInvestigations().tabGeneralDet().cmbProvider().setEnabled(false);
					form.lyrInvestigations().tabGeneralDet().cmbProviderService().setEnabled(false);
					form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().setEnabled(false);
					form.lyrInvestigations().tabGeneralDet().chkAddOn().setEnabled(false);
					form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setEnabled(false);
				}
			}

			form.btnSave().setVisible(true);
			form.btnCancel().setVisible(true);
			form.btnUpdate().setVisible(false);

			form.lyrInvestigations().tabProvider().grdHeaders().setEnabled(false);

			updateLyrSelectionContexMenuState();

			////////////////////////////////////////////////////////////////////
			// ///////////////////////
			// WDEV-3155 (do not move the following 5 lines of code above the
			// call to updateLyrSelectionContexMenuState())
//			if (form.getLocalContext().getSelectedInvestigationIsNotNull() && form.getLocalContext().getSelectedInvestigation().getActiveStatusIsNotNull() && form.getLocalContext().getSelectedInvestigation().getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
//			{
//				form.chkRequiresSite().setEnabled(false);
//			}
			////////////////////////////////////////////////////////////////////
			// ///////////////////////

			form.getContextMenus().getOCRRHelpTextADD_HELPTEXTItem().setVisible(true);
			if (form.lyrInvestigations().tabHelpTexts().grdTestHelp().getSelectedRowIndex() > -1)
				form.getContextMenus().getOCRRHelpTextREMOVE_HELPTEXTItem().setVisible(true);

			// if we are editing an active profile it will not be possible to
			// edit the component investigations
			if (!isEditingActiveProfile())
			{
				form.getContextMenus().getOCRRAssociatedTestsASSOCIATEWITHItem().setVisible(true);
				if (form.lyrInvestigations().tabLinkedInvestigations().grdTests().getSelectedRowIndex() > -1)
					form.getContextMenus().getOCRRAssociatedTestsREMOVEItem().setVisible(true);
			}

			form.getContextMenus().getOCRRAssociatedQuestionsADDQUESTIONSItem().setVisible(true);
			if (form.lyrInvestigations().tabQuestions().grdQuestions().getSelectedRowIndex() > -1)
			{
				form.getContextMenus().getOCRRAssociatedQuestionsREMOVEQUESTIONItem().setVisible(true);
				form.getContextMenus().getOCRRAssociatedQuestionsREMOVEQUESTIONItem().setText("Remove " + getMenuTxt(form.lyrInvestigations().tabQuestions().grdQuestions().getValue().getQuestion()));
			}
		}
		
		form.getLocalContext().setCurrentScreenMode(nMode);
	}
	
	private void setControlsStateForOrderAbility(Integer nMode)
	{		
		boolean isOrderable = !form.chkNotOrderable().getValue();

		if (nMode.equals(MODE_NEW_MAIN_RECORD) || nMode.equals(MODE_EDIT_DETAIL_RECORD))
		{
			form.cmbGenderSpecific().setEnabled(isOrderable);
			form.cmbColor().setEnabled(isOrderable);
			form.chkPhlebMay().setEnabled(isOrderable);
//			form.chkRequiresSite().setEnabled(isOrderable);

			form.lyrInvestigations().tabGeneralDet().cmbTestColor().setEnabled(isOrderable);
			form.lyrInvestigations().tabGeneralDet().chkAddOn().setEnabled(form.chkRequiresSite().getValue() == false);
			form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setEnabled(isOrderable);

			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setEnabled(isOrderable);
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setEnabled(isOrderable);
			form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().setEnabled(isOrderable);
			form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().setEnabled(isOrderable);

		//	form.lyrInvestigations().tabPathologyDetails().txtLabelSuffix().setEnabled(isOrderable);

		}
		else if (nMode.equals(MODE_EDIT_MAIN_RECORD))
		{
			form.cmbGenderSpecific().setEnabled(isOrderable);
			form.cmbColor().setEnabled(isOrderable);
			form.chkPhlebMay().setEnabled(isOrderable);
		}

		// clear the controls
		if (isOrderable == false)
		{
			form.cmbGenderSpecific().setValue(null);
			form.cmbColor().setValue(null);
			form.chkPhlebMay().setValue(false);

			form.lyrInvestigations().tabGeneralDet().cmbTestColor().setValue(null);
			form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setValue(false);

			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setValue(null);
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setValue(null);
			form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().setValue(null);
			form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().setValue(null);

			//form.lyrInvestigations().tabPathologyDetails().txtLabelSuffix().setValue(null);

			form.getGlobalContext().Core.setSelectedLookupInstances(null);
			form.lyrSelection().tabSites().setHeaderVisible(false);
			form.lyrSelection().showtabTax();

			form.lyrInvestigations().tabQuestions().grdQuestions().getRows().clear();
			form.lyrInvestigations().tabLinkedInvestigations().grdTests().getRows().clear();
			form.lyrInvestigations().tabHelpTexts().grdTestHelp().getRows().clear();
			form.lyrInvestigations().showtabGeneralDet();
		}
	}

	private void updateLyrSelectionContexMenuState()
	{
		form.getContextMenus().getOCRRTaxonomyADD_TAXONOMYItem().setVisible(true);
		if (form.lyrSelection().tabTax().grdTaxonomy().getSelectedRowIndex() > -1)
			form.getContextMenus().getOCRRTaxonomyREMOVE_TAXONOMYItem().setVisible(true);

		form.getContextMenus().getOCRRSynonymsADD_SYNONYMItem().setVisible(true);
		if (form.lyrSelection().tabSyn().grdSynonyms().getSelectedRowIndex() > -1)
			form.getContextMenus().getOCRRSynonymsREMOVE_SYNONYMItem().setVisible(true);

		form.getContextMenus().getOCRRSpecimenSiteSELECT_SITESItem().setVisible(true);
		form.getContextMenus().getOCRRSpecimenSiteMOVE_UPItem().setVisible(form.lyrSelection().tabSites().grdSites().getSelectedRowIndex() > 0);
		form.getContextMenus().getOCRRSpecimenSiteMOVE_DOWNItem().setVisible(form.lyrSelection().tabSites().grdSites().getSelectedRowIndex() >= 0 && (form.lyrSelection().tabSites().grdSites().getSelectedRowIndex() < form.lyrSelection().tabSites().grdSites().getRows().size()));
		form.getContextMenus().getOCRRSpecimenSiteSORTItem().setVisible(form.lyrSelection().tabSites().grdSites().getRows().size() > 0);
	}
	
	private boolean isEditingActiveProfile()
	{
		return form.lyrInvestigations().tabGeneralDet().cmbTestStatus().getValue() != null && form.lyrInvestigations().tabGeneralDet().cmbTestStatus().getValue().equals(PreActiveActiveInactiveStatus.ACTIVE) && (form.getLocalContext().getisProfileIsNotNull() && form.getLocalContext().getisProfile().booleanValue());
	}

	/**
	 * @param nMode
	 */
	private void loadStatusCombos(Integer nMode)
	{
		if (nMode != null)
		{
			PreActiveActiveInactiveStatusCollection collStatus = ims.core.vo.lookups.LookupHelper.getPreActiveActiveInactiveStatus(domain.getLookupService());
			if (nMode.equals(MODE_NEW_MAIN_RECORD))
			{
				form.cmbStatus().clear();
				form.lyrInvestigations().tabGeneralDet().cmbTestStatus().clear();
				for (int i = 0; i < collStatus.size(); i++)
				{
					if (!collStatus.get(i).equals(PreActiveActiveInactiveStatus.INACTIVE))
					{
						form.cmbStatus().newRow(collStatus.get(i), collStatus.get(i).getText());
						form.lyrInvestigations().tabGeneralDet().cmbTestStatus().newRow(collStatus.get(i), collStatus.get(i).getText());
					}
				}
			}
			else if (nMode.equals(MODE_EDIT_MAIN_RECORD))
			{
				if (form.cmbStatus().getValue() != null)
				{
					if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.INACTIVE))
					{
						form.cmbStatus().clear();
						for (int i = 0; i < collStatus.size(); i++)
						{
							if (!collStatus.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE) && !collStatus.get(i).equals(PreActiveActiveInactiveStatus.ACTIVE))
							{
								form.cmbStatus().newRow(collStatus.get(i), collStatus.get(i).getText());
							}
						}
						form.cmbStatus().setValue(PreActiveActiveInactiveStatus.INACTIVE);
					}
					else if (form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.ACTIVE))
					{
						form.cmbStatus().clear();

						for (int i = 0; i < collStatus.size(); i++)
						{
							if (!collStatus.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE))
							{
								form.cmbStatus().newRow(collStatus.get(i), collStatus.get(i).getText());
							}
						}
						form.cmbStatus().setValue(PreActiveActiveInactiveStatus.ACTIVE);
					}
				}
			}
			else if (nMode.equals(MODE_EDIT_DETAIL_RECORD))
			{
				// new record add all but inactive
				if (form.getLocalContext().getSelectedInvestigationIsNotNull() && form.getLocalContext().getSelectedInvestigation().getID_Investigation() == null)
				{
					form.lyrInvestigations().tabGeneralDet().cmbTestStatus().clear();
					for (int i = 0; i < collStatus.size(); i++)
					{
						if (!collStatus.get(i).equals(PreActiveActiveInactiveStatus.INACTIVE))
						{

							form.lyrInvestigations().tabGeneralDet().cmbTestStatus().newRow(collStatus.get(i), collStatus.get(i).getText());
						}
					}
					return;
				}
				if (form.lyrInvestigations().tabGeneralDet().cmbTestStatus().getValue() != null)
				{
					if (form.lyrInvestigations().tabGeneralDet().cmbTestStatus().getValue().equals(PreActiveActiveInactiveStatus.INACTIVE))
					{
						form.lyrInvestigations().tabGeneralDet().cmbTestStatus().clear();

						for (int i = 0; i < collStatus.size(); i++)
						{
							if (!collStatus.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE) && !collStatus.get(i).equals(PreActiveActiveInactiveStatus.ACTIVE))
							{
								form.lyrInvestigations().tabGeneralDet().cmbTestStatus().newRow(collStatus.get(i), collStatus.get(i).getText());
							}

						}
						form.lyrInvestigations().tabGeneralDet().cmbTestStatus().setValue(PreActiveActiveInactiveStatus.INACTIVE);
					}
					else if (form.lyrInvestigations().tabGeneralDet().cmbTestStatus().getValue().equals(PreActiveActiveInactiveStatus.ACTIVE))
					{
						form.lyrInvestigations().tabGeneralDet().cmbTestStatus().clear();

						for (int i = 0; i < collStatus.size(); i++)
						{
							if (!collStatus.get(i).equals(PreActiveActiveInactiveStatus.PREACTIVE))
							{
								form.lyrInvestigations().tabGeneralDet().cmbTestStatus().newRow(collStatus.get(i), collStatus.get(i).getText());
							}
						}
						form.lyrInvestigations().tabGeneralDet().cmbTestStatus().setValue(PreActiveActiveInactiveStatus.ACTIVE);
					}
				}
			}
		}
	}

	protected void onCmbProviderServiceValueChanged() throws PresentationLogicException
	{
		LocationLiteVo voLocation = form.lyrInvestigations().tabGeneralDet().cmbProvider().getValue();
		if (voLocation == null)
			return;

		LocSvcProviderSysVo voProviderSystem = form.lyrInvestigations().tabGeneralDet().cmbProviderService().getValue();

		for (int i = 0; i < form.lyrInvestigations().tabProvider().grdHeaders().getRows().size(); i++)
		{
			grdHeadersRow row = form.lyrInvestigations().tabProvider().grdHeaders().getRows().get(i);
			if (row.getValue() != null && row.getValue().getProviderServiceIsNotNull() && row.getValue().getProviderService().getLocationServiceIsNotNull() && row.getValue().getProviderService().getLocationService().getLocationIsNotNull())
			{
				if (voLocation != null && voLocation.equals(row.getValue().getProviderService().getLocationService().getLocation()) && voProviderSystem != null && voProviderSystem.equals(row.getValue().getProviderService()) && row.getValue().getActiveStatusIsNotNull() && row.getValue().getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE)) //wdev-13500
				{
					engine.showMessage("This Provider (" + voLocation.getName() + ")  and Service " + "(" + voProviderSystem.getLocationService().getService().getServiceName() + ")" + " has already been set up for this Investigation");
					form.lyrInvestigations().tabGeneralDet().cmbProvider().setValue(null);
					form.lyrInvestigations().tabGeneralDet().cmbProviderService().setValue(null);
					return;
				}
			}
		}

		if (form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue() == false)
			setDetailTabsVisible(form.lyrInvestigations().tabGeneralDet().cmbProvider().getValue() != null && form.lyrInvestigations().tabGeneralDet().cmbProviderService().getValue() != null);

		form.lyrInvestigations().tabGeneralDet().txtProviderSys().setValue(null);
		LocSvcProviderSysVo voLocSvcProvSys = form.lyrInvestigations().tabGeneralDet().cmbProviderService().getValue();
		if (voLocSvcProvSys != null && voLocSvcProvSys.getProviderSystemIsNotNull() && voLocSvcProvSys.getProviderSystem().getSystemNameIsNotNull())
			form.lyrInvestigations().tabGeneralDet().txtProviderSys().setValue(voLocSvcProvSys.getProviderSystem().getSystemName());
	}

	private void setDetailTabsVisible(boolean isVisible)
	{
		boolean isNotOrderable = !form.chkNotOrderable().getValue();
		boolean isAddOn = form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue(); //WDEV-16432

		form.lyrInvestigations().tabQuestions().setHeaderVisible(isVisible && isNotOrderable && !form.getLocalContext().getisProfile() && form.cmbCategory().getValue() != null);
		form.lyrInvestigations().tabHelpTexts().setHeaderVisible(isVisible && isNotOrderable && form.cmbCategory().getValue() != null);
		form.lyrInvestigations().tabLinkedInvestigations().setHeaderVisible(isVisible && isNotOrderable && form.cmbCategory().getValue() != null && !isAddOn);

		if (isVisible)
		{
			if (form.cmbCategory().getValue() != null)
			{
				if (form.cmbCategory().getValue().equals(Category.PATHOLOGY) && !isAddOn)
				{
					form.lyrInvestigations().tabPathologyDetails().setHeaderVisible(true);
					form.lyrInvestigations().tabClinicalImagingDetails().setHeaderVisible(false);
				}
				else if (form.cmbCategory().getValue().equals(Category.CLINICALIMAGING))
				{
					form.lyrInvestigations().tabPathologyDetails().setHeaderVisible(false);
					form.lyrInvestigations().tabClinicalImagingDetails().setHeaderVisible(true);
				}
				else if (form.cmbCategory().getValue().equals(Category.CLINICAL))
				{
					form.lyrInvestigations().tabPathologyDetails().setHeaderVisible(false);
					form.lyrInvestigations().tabClinicalImagingDetails().setHeaderVisible(false);
				}
			}
			form.lyrInvestigations().showtabGeneralDet();
		}
	}

	private String getMenuTxt(QuestionInformationShortVo voQInfo)
	{
		String textMenu = " Question/Information";
		if (voQInfo != null)
		{
			if (voQInfo.getIsQuestionIsNotNull() && voQInfo.getIsQuestion().booleanValue())
				textMenu = " Question";
			else
				textMenu = " Information";
		}
		return textMenu;
	}

	protected void onChkNotResultedValueChanged() throws PresentationLogicException
	{
		if (form.chkNotResulted().getValue() == true)
		{
			form.chkNotOrderable().setValue(false);
			chkNotOrderableValueChanged(); //WDEV-16558
		}

		setControlsStateForOrderAbility(form.getLocalContext().getCurrentScreenMode());
		
		boolean isVisible = (!form.chkNotOrderable().getValue() && (form.lyrInvestigations().tabGeneralDet().cmbProviderService().getValue() != null || Boolean.TRUE.equals(form.chkNoInterface().getValue()) ) ); 
		
		//WDEV-16558 setDetailTabsVisible(isVisible);
		
		//WDEV-10853
		if (!form.chkNotResulted().getValue())
			cmbCategoryValueChanged();
		
		if (!isVisible) //WDEV-16432
		{
			form.lyrInvestigations().showtabGeneralDet();
		}
		
		updateControlsState(form.getLocalContext().getCurrentScreenMode());
	}

	protected void onChkNotOrderableValueChanged() throws PresentationLogicException
	{
		chkNotOrderableValueChanged();
	}

	private void chkNotOrderableValueChanged()
	{
		if (form.chkNotOrderable().getValue() == true)
			form.chkNotResulted().setValue(false);

		updateControlsState(form.getLocalContext().getCurrentScreenMode()); //WDEV-16881
		setControlsStateForOrderAbility(form.getLocalContext().getCurrentScreenMode());
		setDetailTabsVisible(!form.chkNotOrderable().getValue()); //WDEV-16666
		updateControlsState();
		
	}

	protected void onGrdSitesSelectionChanged() throws PresentationLogicException
	{
		updateControlsState(form.getLocalContext().getCurrentScreenMode());
	}

	@Override
	protected void onChkNoInterfaceValueChanged() throws PresentationLogicException
	{
		boolean isNoInterface = form.chkNoInterface().getValue();
		
		form.lyrInvestigations().tabGeneralDet().cmbProvider().setEnabled(!isNoInterface);
		form.lyrInvestigations().tabGeneralDet().cmbProviderService().setEnabled(!isNoInterface);
		form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().setEnabled(!isNoInterface);
		
		if(isNoInterface)
		{
			form.lyrInvestigations().tabGeneralDet().cmbProvider().setValue(null);
			form.lyrInvestigations().tabGeneralDet().cmbProviderService().setValue(null);
			form.lyrInvestigations().tabGeneralDet().txtInvestigationCode().setValue(null);
			form.lyrInvestigations().tabGeneralDet().txtProviderSys().setValue(null);
		}
	}
	
	private static final Integer	MODE_NEW_MAIN_RECORD	= new Integer(1);
	private static final Integer	MODE_VIEW_MAIN_RECORD	= new Integer(2);
	private static final Integer	MODE_EDIT_MAIN_RECORD	= new Integer(3);
	private static final Integer	MODE_EDIT_DETAIL_RECORD	= new Integer(4);

	@Override//WDEV-11940
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if (form.getLocalContext().getConfimSaveMsgBoxIdIsNotNull() && form.getLocalContext().getConfimSaveMsgBoxId().intValue()==messageBoxId)
		{
			if (result.equals(DialogResult.YES))
			{
				performSave(form.getLocalContext().getInvIndexBackup(), form.getLocalContext().getInvestigationBackup());
			}
			form.getLocalContext().setInvestigationBackup(null);
			form.getLocalContext().setInvIndexBackup(null);
		}
		
		//wdev-14252
		if( form.getLocalContext().getDeletePathologyDetailsConfirmationIdIsNotNull() && form.getLocalContext().getDeletePathologyDetailsConfirmationId().intValue() == messageBoxId)
		{
			if (result.equals(DialogResult.YES))
			{
				form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setValue(false);
				if (form.lyrInvestigations().tabHelpTexts().isHeaderVisible())
				{
					form.lyrInvestigations().tabPathologyDetails().setHeaderVisible(!form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue());
					form.lyrInvestigations().tabLinkedInvestigations().setHeaderVisible(!form.lyrInvestigations().tabGeneralDet().chkAddOn().getValue());
				}
				
				
			}
			else
			{
				form.lyrInvestigations().tabGeneralDet().chkAddOn().setValue(false);
			}
			
			updateControlsState();
				
		}
		//----------
		
	}

	//wdev-12647
	protected void onIntMinReOrderFemaleValueChanged() throws PresentationLogicException
	{
		if(form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().getValue() != null && form.lyrInvestigations().tabGeneralDet().intMinReOrderFemale().getValue() > 0)
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setRequired(true);
		else
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderFemale().setRequired(false);
		
	}

	//wdev-12647
	protected void onIntMinReOrderPeriodValueChanged() throws PresentationLogicException
	{
		if(form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().getValue() != null && form.lyrInvestigations().tabGeneralDet().intMinReOrderPeriod().getValue() > 0)
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setRequired(true);
		else
			form.lyrInvestigations().tabGeneralDet().cmbMinReOrderPeriod().setRequired(false);
		
	}

	@Override
	protected void onRadioButtonGroupEventTypeValueChanged() throws PresentationLogicException
	{
		clearLinkedFields();
		onChkAddOnValueChanged(); //WDEV-16507
		onChkRequiresSiteValueChanged(); //WDEV-16668
	}

	private void clearLinkedFields()
	{
		form.chkPhlebMay().setValue(Boolean.FALSE);
		form.chkRequiresSite().setValue(Boolean.FALSE);
		form.lyrInvestigations().tabGeneralDet().chkAddOn().setValue(Boolean.FALSE);
		form.lyrInvestigations().tabGeneralDet().chkTestSeperateOrder().setValue(Boolean.FALSE);
		form.intLabelsSets().setValue(null);
		form.txtTimeSeriesInstructions().setValue(null);
		clearVisibleTabs(); //WDEV-16472
	}

	@Override
	protected void onRadioButtonGroupTypeValueChanged() throws PresentationLogicException
	{
		form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().setValue(null);
		form.lyrInvestigations().tabGeneralDet().chkAddOn().setValue(Boolean.FALSE);
		onChkAddOnValueChanged(); //WDEV-16507
	}

	@Override
	protected void onIntNoOfSpecTypesValueChanged() throws PresentationLogicException
	{
		initialiseSpecimenTabs();
		updateControlsState();
	}

	private void initialiseSpecimenTabs()
	{
		Integer noOfSpecimens = form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().getValue();
		
		if (noOfSpecimens != null)
		{
			if (noOfSpecimens >= 2)
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().ccSpecimen2().initialise();
			}
			
			if (noOfSpecimens >= 3)
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().ccSpecimen3().initialise();
			}
			
			if (noOfSpecimens >= 4)
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().ccSpecimen4().initialise();
			}
			
			if (noOfSpecimens >= 5)
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().ccSpecimen5().initialise();
			}
			
			if (noOfSpecimens >= 6)
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().ccSpecimen6().initialise();
			}
			
			if (noOfSpecimens >= 7)
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().ccSpecimen7().initialise();
			}
			
			if (noOfSpecimens >= 8)
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().ccSpecimen8().initialise();
			}
			
			if (noOfSpecimens == 9)
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().ccSpecimen9().initialise();
			}
		}	
	}

	private void showHideSpecimenTabs()
	{
		Integer noOfSpecimens = form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().getValue();
		
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().setHeaderVisible(form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().isVisible() && noOfSpecimens != null && (noOfSpecimens >= 2));
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().setHeaderVisible(form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().isVisible() && noOfSpecimens != null && (noOfSpecimens >= 3));
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().setHeaderVisible(form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().isVisible() && noOfSpecimens != null && (noOfSpecimens >= 4));
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().setHeaderVisible(form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().isVisible() && noOfSpecimens != null && (noOfSpecimens >= 5));
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().setHeaderVisible(form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().isVisible() && noOfSpecimens != null && (noOfSpecimens >= 6));
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().setHeaderVisible(form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().isVisible() && noOfSpecimens != null && (noOfSpecimens >= 7));
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().setHeaderVisible(form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().isVisible() && noOfSpecimens != null && (noOfSpecimens >= 8));
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().setHeaderVisible(form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().isVisible() && noOfSpecimens != null && (noOfSpecimens == 9));
		
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().isDftInvestigation(GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()) ? Boolean.TRUE : Boolean.FALSE);
		
		//WDEV-16425
		if ((MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) || MODE_EDIT_DETAIL_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) && FormMode.EDIT.equals(form.getMode()))
		{
			if (GroupTypeEnumeration.rdoSimple.equals(form.GroupType().getValue()))
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().setMode(FormMode.EDIT);

				if (form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull() && (! PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getGlobalContext().OCRR.getCurrentInvestigation().getActiveStatus())))
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().disableSpecimenType();
			}
			else if (GroupTypeEnumeration.rdoComplex.equals(form.GroupType().getValue())) //WDEV-16486
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().setMode((form.lyrInvestigations().tabPathologyDetails().intNoOfSpecTypes().getValue() == null && MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) ? FormMode.VIEW : FormMode.EDIT);
				
				if (form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull() && (! PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getGlobalContext().OCRR.getCurrentInvestigation().getActiveStatus())))
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().disableSpecimenType();
			}
		}
		else
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen1().ccSpecimen1().setMode(FormMode.VIEW);
		}
		
		form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().showtabSpecimen1();
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().ccSpecimen2().isDftInvestigation(GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()) ? Boolean.TRUE : Boolean.FALSE);
			
			if ((MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) || MODE_EDIT_DETAIL_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) && FormMode.EDIT.equals(form.getMode()))
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().ccSpecimen2().setMode(FormMode.EDIT);
				
				if (form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull() && (! PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getGlobalContext().OCRR.getCurrentInvestigation().getActiveStatus())))
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().ccSpecimen2().disableSpecimenType();
			}
			else
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen2().ccSpecimen2().setMode(FormMode.VIEW);
			}
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().ccSpecimen3().isDftInvestigation(GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()) ? Boolean.TRUE : Boolean.FALSE);
			
			if ((MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) || MODE_EDIT_DETAIL_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) && FormMode.EDIT.equals(form.getMode()))
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().ccSpecimen3().setMode(FormMode.EDIT);
				
				if (form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull() && (! PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getGlobalContext().OCRR.getCurrentInvestigation().getActiveStatus())))
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().ccSpecimen3().disableSpecimenType();
			}
			else
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen3().ccSpecimen3().setMode(FormMode.VIEW);
			}
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().ccSpecimen4().isDftInvestigation(GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()) ? Boolean.TRUE : Boolean.FALSE);
			
			if ((MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) || MODE_EDIT_DETAIL_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) && FormMode.EDIT.equals(form.getMode()))
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().ccSpecimen4().setMode(FormMode.EDIT);
				
				if (form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull() && (! PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getGlobalContext().OCRR.getCurrentInvestigation().getActiveStatus())))
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().ccSpecimen4().disableSpecimenType();
			}
			else
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen4().ccSpecimen4().setMode(FormMode.VIEW);
			}
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().ccSpecimen5().isDftInvestigation(GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()) ? Boolean.TRUE : Boolean.FALSE);
			
			if ((MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) || MODE_EDIT_DETAIL_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) && FormMode.EDIT.equals(form.getMode()))
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().ccSpecimen5().setMode(FormMode.EDIT);
				
				if (form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull() && (! PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getGlobalContext().OCRR.getCurrentInvestigation().getActiveStatus())))
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().ccSpecimen5().disableSpecimenType();
			}
			else
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen5().ccSpecimen5().setMode(FormMode.VIEW);
			}
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().ccSpecimen6().isDftInvestigation(GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()) ? Boolean.TRUE : Boolean.FALSE);
			
			if ((MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) || MODE_EDIT_DETAIL_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) && FormMode.EDIT.equals(form.getMode()))
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().ccSpecimen6().setMode(FormMode.EDIT);
				
				if (form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull()  && (! PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getGlobalContext().OCRR.getCurrentInvestigation().getActiveStatus())))
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().ccSpecimen6().disableSpecimenType();
			}
			else
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen6().ccSpecimen6().setMode(FormMode.VIEW);
			}
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().ccSpecimen7().isDftInvestigation(GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()) ? Boolean.TRUE : Boolean.FALSE);
			
			if ((MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) || MODE_EDIT_DETAIL_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) && FormMode.EDIT.equals(form.getMode()))
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().ccSpecimen7().setMode(FormMode.EDIT);
				
				if (form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull() && (! PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getGlobalContext().OCRR.getCurrentInvestigation().getActiveStatus())))
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().ccSpecimen7().disableSpecimenType();
			}
			else
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen7().ccSpecimen7().setMode(FormMode.VIEW);
			}
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().ccSpecimen8().isDftInvestigation(GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()) ? Boolean.TRUE : Boolean.FALSE);
			
			if ((MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) || MODE_EDIT_DETAIL_RECORD.equals(form.getLocalContext().getCurrentScreenMode())) && FormMode.EDIT.equals(form.getMode()))
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().ccSpecimen8().setMode(FormMode.EDIT);
				
				if (form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull() && (! PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getGlobalContext().OCRR.getCurrentInvestigation().getActiveStatus())))
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().ccSpecimen8().disableSpecimenType();
			}
			else
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen8().ccSpecimen8().setMode(FormMode.VIEW);
			}
		}
		
		if (form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().isHeaderVisible())
		{
			form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().ccSpecimen9().isDftInvestigation(GroupEventTypeEnumeration.rdoTimeSeries.equals(form.GroupEventType().getValue()) ? Boolean.TRUE : Boolean.FALSE);
			
			if (MODE_NEW_MAIN_RECORD.equals(form.getLocalContext().getCurrentScreenMode()) && FormMode.EDIT.equals(form.getMode()))
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().ccSpecimen9().setMode(FormMode.EDIT);
				
				if (form.getGlobalContext().OCRR.getCurrentInvestigationIsNotNull() && (! PreActiveActiveInactiveStatus.PREACTIVE.equals(form.getGlobalContext().OCRR.getCurrentInvestigation().getActiveStatus())))
					form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().ccSpecimen9().disableSpecimenType();
			}
			else
			{
				form.lyrInvestigations().tabPathologyDetails().lyrSpecimens().tabSpecimen9().ccSpecimen9().setMode(FormMode.VIEW);
			}
		}
	}
}
