//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.53 build 2656.22861)
// Copyright (C) 1995-2007 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.radiologyorders;

import ims.admin.vo.ReportTemplateVo;
import ims.admin.vo.ReportVo;
import ims.admin.vo.ReportVoCollection;
import ims.RefMan.vo.CatsReferralListVo;
import ims.configuration.gen.ConfigFlag;
import ims.core.clinical.vo.ServiceRefVo;
import ims.core.resource.place.vo.LocationRefVo;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.PatientShort;
import ims.core.vo.ServiceLiteVoCollection;
import ims.core.vo.lookups.LocationType;
import ims.core.vo.lookups.PatIdType;
import ims.core.vo.lookups.ServiceCategory;
import ims.domain.exceptions.DomainInterfaceException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.DateTime;
import ims.framework.utils.DateTimeFormat;
import ims.ocrr.forms.radiologyorders.GenForm.grdResultsRow;
import ims.ocrr.vo.OrdInvXOStatusHistoryLiteVo;
import ims.ocrr.vo.OrdInvXOStatusHistoryLiteVoCollection;
import ims.ocrr.vo.RadiologyOrderVo;
import ims.ocrr.vo.RadiologyOrderVoCollection;
import ims.ocrr.vo.RoleDisciplineSecurityLevelLiteGCVo;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.OrderInvStatus;
import ims.utils.textile.Textile;

import java.util.Comparator;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	private static final Integer COL_ORDEREDDATETIME = new Integer(0);

	protected void onFormOpen(Object[] args)
	{
		initialize();
	}

	protected void onImbClearClick()
	{
		form.cmbDepartment().setValue(null);
		form.cmbService().clear();
		// WDEV-11643
		form.dteFrom().setValue(null);
		form.dteTo().setValue(null);
		form.grdResults().getRows().clear();
		form.getLocalContext().setPrintingContext(null);
		form.getLocalContext().setSortOrder(null);
		
		displayGridFooter();
		setDefaultDepartmentValue();
		enablePrintButton();
	}
	
	protected void onImbSearchClick()
	{
		if(validateUISearchCriteria() == false)
			return;
		
		form.getLocalContext().setPrintingContext(null);
		
		// WDEV-11643
		RadiologyOrderVoCollection listRadOrderInvestigation = domain.listRadOrderInvestigation(form.cmbService().getValue(), form.cmbDepartment().getValue(), Category.CLINICALIMAGING, form.chkCompleted().isVisible() ? form.chkCompleted().getValue() : Boolean.FALSE, form.dteFrom().getValue(), form.dteTo().getValue());
		
		// WDEV-12571 - Show 'No records found' message
		if (listRadOrderInvestigation == null || listRadOrderInvestigation.size() == 0)
		{
			engine.showMessage("No records found to match search criteria.");
		}
		
		populateResultsGrid(listRadOrderInvestigation);
		
		enablePrintButton();
	}

	protected void onCmbDepartmentValueChanged()
	{
		loadService(form.cmbDepartment().getValue());
	}
	
	protected void onGrdResultsSelectionChanged()
	{
		form.getGlobalContext().OCRR.PathologyResults.setOrder(form.grdResults().getValue().getOrderDetails());
		
		RadiologyOrderVo voRadiologyOrder = form.grdResults().getValue();
		
		form.getLocalContext().setPrintingContext(voRadiologyOrder);
		
		if(voRadiologyOrder != null && voRadiologyOrder.getOrderDetailsIsNotNull() && voRadiologyOrder.getOrderDetails().getPatientIsNotNull())
		{
			form.getGlobalContext().Core.setPatientShort(voRadiologyOrder.getOrderDetails().getPatient());
			CatsReferralListVo voCats = domain.getCatsReferralByOrder(voRadiologyOrder.getOrderDetails());
			form.getGlobalContext().RefMan.setCatsReferral(voCats);
			form.getGlobalContext().RefMan.setReferralContractTypeForPatient((voCats != null && voCats.getContractIsNotNull()) ? voCats.getContract().getContractType() : null);//wdev-12682 //wdev-12838
			engine.open(form.getForms().OCRR.OrderSummaryDialog);
		}
		else
		{
			engine.showMessage("No patient associated with the selected record.");
		}
	}
	
	protected void onBtnPrintClick()
	{
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();

		ReportVoCollection coll = domain.listAssignedReports(new Integer(engine.getFormName().getID()));

		ReportVo rep = null;
		if(coll != null && coll.size() > 0)
		{
			for (int i = 0; i < coll.size(); i++)
			{
				if(coll.get(i).getSeeds() == null || coll.get(i).getSeeds().size() == 0)
				{
					if(rep != null)
					{
						engine.showMessage("More than one report assigned to this form.");
						return;
					}
					
					rep = coll.get(i);
				}
			}
			
			/*
			if(coll.size() > 1)
			{
				engine.showMessage("More than one report assigned to this form.");
				return;
			}
			*/
			//this form must have a single report asigned to it and single template
			//ReportVo rep = coll.get(0);
			
			if(rep == null)
				engine.showMessage("I could not find a suitable report for this form.\n\rPlease go to Admin->Reports and assign a report to this form.");
			
			if(rep != null &&
					rep.getTemplatesIsNotNull() &&
						rep.getTemplates().size() > 0)
			{
				ReportTemplateVo template = rep.getTemplates().get(0);
				
				String[] obj = null;
				try
				{
					obj = domain.getReportAndTemplate(rep.getID_ReportBo(), template.getID_TemplateBo());				
				}
				catch (DomainInterfaceException e)
				{
					engine.showMessage("Error retrieving report template !\r\n" + e.getMessage());
					return;
				}
				
				if(obj == null || obj.length == 0)
				{
					engine.showMessage("I could not get the report and template !");
					return;
				}

				QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());
				
				client.addSeed(new SeedValue("SERVICE_ID", form.cmbService().getValue().getID_Service(), Integer.class));
				client.addSeed(new SeedValue("STATUS_ID",  new Integer(OrderInvStatus.SENT.getID()), Integer.class));
				client.addSeed(new SeedValue("CATEGORY_ID",  new Integer(Category.CLINICALIMAGING.getId()), Integer.class));
				client.addSeed(new SeedValue("DISPLAY_PATID_TYPE",  getPatIdentifier(), Integer.class));
				
				/*// Pass the CLINIC_ID and CLINIC_NAME
				for (int i = 0; i < form.grdResults().getRows().size(); i++)
				{
					RadilogyOrderVo newResult = form.grdResults().getRows().get(i).getValue();

					// Clinic Name seeds collection
					if (newResult.getOrderDetailsIsNotNull() && newResult.getOrderDetails().getClinicalInfoIsNotNull())
					{
						String clinic_name = MyOrderQuestionsPopulation.getTextualQuestionAndAnswers(newResult.getOrderDetails().getClinicalInfo());
						if (newResult.getOrderDetails().getAdditClinNotesIsNotNull())
							clinic_name += "\n" + newResult.getOrderDetails().getAdditClinNotes();
						client.addSeed(new SeedValue("CLINIC_ID", newResult.getOrderDetails().getID_OcsOrder(), Integer.class));
						client.addSeed(new SeedValue("CLINIC_NAME", clinic_name, String.class));
					}
				}*/
								
				String resultUrl = "";
				try
				{
					resultUrl = client.buildReportAsUrl(obj[0], obj[1], urlReportServer, "PDF", "", 1);
				} 
				catch (QueryBuilderClientException e1)
				{
					engine.showMessage("Error creating report: " + e1.getMessage());
					return;
				}
				
				engine.openUrl(resultUrl);
			}
		}
		else
		{
			engine.showMessage("No report was assigned to this form.\n\rPlease go to Admin->Reports and assign a report to this form.");
		}
	}

	private Integer getPatIdentifier()
	{
		PatIdType patIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		if(patIdType != null)
			return new Integer(patIdType.getID());
			
		return null;
	}

	// Private methods
	private void initialize()
	{
		form.getGlobalContext().Core.setPatientShort(null);
		form.getGlobalContext().RefMan.setCatsReferral(null);
		form.getGlobalContext().RefMan.setReferralContractTypeForPatient(null);//wdev-12682

		loadLocation();
		displayGridFooter();
		enablePrintButton();
		setPatientIdentifierColumnCaption();
	
		form.chkCompleted().setVisible(ConfigFlag.UI.DISPLAY_COMPLETE_FILTER_RESULTS_STATUS.getValue());//wdev-17322
		form.chkCompleted().setValue(ConfigFlag.UI.DISPLAY_COMPLETE_FILTER_RESULTS_STATUS.getValue());

		//security level WDEV-9780
		RoleDisciplineSecurityLevelLiteGCVo voRoleDisciplineSecurityLevels = form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels();
		if(voRoleDisciplineSecurityLevels == null || (voRoleDisciplineSecurityLevels != null &&  voRoleDisciplineSecurityLevels.getIsConfigLoadedIsNotNull() && !voRoleDisciplineSecurityLevels.getIsConfigLoaded().equals(false)))
			form.getGlobalContext().OCRR.setRoleDisciplineSecurityLevels(domain.getRoleDisciplineSecurityLevels(engine.getLoggedInRole()));
	}

	private void loadLocation()
	{
		form.cmbDepartment().clear();

		LocationLiteVoCollection voColl = domain.listLocation(LocationType.CLINICALIMAGINGDEPARTMENT, Boolean.TRUE);
		int currentLocId;
		for (int i = 0; voColl != null && i < voColl.size(); i++)
		{
			LocationLiteVo voLocation = voColl.get(i);
			form.cmbDepartment().newRow(voLocation, voLocation.getName());
			
			//WDEV-2847
			if(engine.getCurrentLocation() != null)
			{
				if (engine.getCurrentLocation().getID() == voLocation.getID_Location().intValue())
					form.cmbDepartment().setValue(voLocation);
			}
		}

		setDefaultDepartmentValue();
	}

	private void setDefaultDepartmentValue()
	{
		ILocation defaultLocation = engine.getCurrentLocation();
		if(defaultLocation == null)
			return;
		
		for (int i = 0; i < form.cmbDepartment().getValues().size(); i++)
		{
			if(defaultLocation.equals(form.cmbDepartment().getValues().get(i)))
			{
				if(form.cmbDepartment().getValues().get(i) instanceof LocationRefVo)
					form.cmbDepartment().setValue((LocationLiteVo)form.cmbDepartment().getValues().get(i));
			}
		}
		
		loadService(form.cmbDepartment().getValue());
	}

	private void loadService(LocationLiteVo value)
	{
		form.cmbService().clear();
		if (value != null)
		{
			ServiceLiteVoCollection voServiceLiteVoCollection = domain.listService(value, ServiceCategory.RADIOLOGY_MODALITY);
			
			for (int i = 0; voServiceLiteVoCollection != null && i < voServiceLiteVoCollection.size(); i++)
			{
				form.cmbService().newRow(voServiceLiteVoCollection.get(i), voServiceLiteVoCollection.get(i).getServiceName());
			}
		}
	}

	private void populateResultsGrid(RadiologyOrderVoCollection coll)
	{
		if (coll == null)
			return;
		
		form.grdResults().getRows().clear();
		
		coll.sort(SortOrder.DESCENDING);
		for (int i = 0; i < coll.size(); i++)
		{
			RadiologyOrderVo result = coll.get(i);
			setResultGridRowData(result);
		}

		displayGridFooter();
	}
	
	//WDEV-12054
	private String generateXoStatusTooltip(OrdInvXOStatusHistoryLiteVoCollection voCollOrdInvXOStatusHistory)
	{
		if(voCollOrdInvXOStatusHistory == null)
			return "";
		
		String tooltip = "";
		voCollOrdInvXOStatusHistory.sort(SortOrder.DESCENDING);
		StringBuffer sb = new StringBuffer();
		
		tooltip += "<br><b>Change Order(XO)</b>";
		for(OrdInvXOStatusHistoryLiteVo voStatus : voCollOrdInvXOStatusHistory)
		{
			sb.append("<br><b>Date changed: </b>" + voStatus.getChangeDateTime());
			sb.append("<br><b>Status reason: </b>" + (voStatus.getStatusReasonIsNotNull() ? voStatus.getStatusReason() : ""));
			tooltip += sb.toString();
		}
		
		return tooltip;

	}

	private void setResultGridRowData(RadiologyOrderVo voRadiologyOrder)
	{	
		//WDEV-9780
		if(form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevelsIsNotNull())
		{
			ServiceRefVo voInvService =  voRadiologyOrder.getInvestigationIsNotNull() && voRadiologyOrder.getInvestigation().getProviderServiceIsNotNull() && voRadiologyOrder.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voRadiologyOrder.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull() ? voRadiologyOrder.getInvestigation().getProviderService().getLocationService().getService() : null;
			SecurityLevelConfigVo voInvSecurityLevel = voRadiologyOrder.getInvestigationIsNotNull() && voRadiologyOrder.getInvestigation().getInvestigationIndexIsNotNull() ? voRadiologyOrder.getInvestigation().getInvestigationIndex().getSecurityLevel() : null;

			if(!form.getGlobalContext().OCRR.getRoleDisciplineSecurityLevels().doesInvPassSecurityCheck(voInvService, voInvSecurityLevel, false)) //WDEV-11622
				return;
		}		
		
		grdResultsRow row = form.grdResults().getRows().newRow();
		
		if (voRadiologyOrder.getDisplayDateTimeIsNotNull())
			row.setColDateTime(voRadiologyOrder.getDisplayDateTime().toString(DateTimeFormat.STANDARD));

		if (voRadiologyOrder.getInvestigationIsNotNull() && voRadiologyOrder.getInvestigation().getInvestigationIndexIsNotNull())
			row.setColExamName(voRadiologyOrder.getInvestigation().getInvestigationIndex().getName());
		
		//WDEV-12054
		if(voRadiologyOrder.getOrdInvXOStatusHistoryIsNotNull())
			row.setTooltipForColExamName(voRadiologyOrder.getOrdInvXOStatusHistory().generateXoStatusTooltip());
		
		if (voRadiologyOrder.getInvestigationIsNotNull() && voRadiologyOrder.getInvestigation().getProviderServiceIsNotNull() && voRadiologyOrder.getInvestigation().getProviderService().getLocationServiceIsNotNull() && voRadiologyOrder.getInvestigation().getProviderService().getLocationService().getServiceIsNotNull())
			row.setColDepartment(voRadiologyOrder.getInvestigation().getProviderService().getLocationService().getService().getServiceName());

		if (voRadiologyOrder.getOrderDetailsIsNotNull())
			row.setColOrderingLocation(voRadiologyOrder.getOrderDetails().getCorrectLocation());

		if (voRadiologyOrder.getOrderDetailsIsNotNull())
			row.setColClinician(voRadiologyOrder.getOrderDetails().getCorrectClinician());

		//Patient details
		if (voRadiologyOrder.getOrderDetailsIsNotNull() && voRadiologyOrder.getOrderDetails().getPatientIsNotNull())
		{
			PatientShort patient = voRadiologyOrder.getOrderDetails().getPatient();

			if (patient.getDisplayId() != null)
			{
				row.setColHospNum(patient.getDisplayId().getValue());
			}

			if (patient.getName() != null)
				row.setColName(patient.getName().toString());

			if (patient.getSexIsNotNull())
				row.setColSex(patient.getSex().getText());
		}
		
		row.setValue(voRadiologyOrder);
	}

	private void displayGridFooter()
	{
		int count = form.grdResults().getRows().size();
		form.grdResults().setFooterMaxHeight(20);
		form.grdResults().setFooterValue(new Textile().process("*Total: * " + count));
	}
	
	private void enablePrintButton()
	{
		form.btnPrint().setEnabled(form.grdResults().getRows().size() > 0);
	}
	
	private boolean validateUISearchCriteria()
	{
		if (form.cmbDepartment().getValue() == null)
		{
			engine.showMessage("Please select a " + getStringNoComa(form.lblLocation().getValue()));
			form.cmbDepartment().setFocus();
			return false;
		}

		if (form.cmbService().getValue() == null)
		{
			engine.showMessage("Please select a " + getStringNoComa(form.lblModality().getValue()));
			form.cmbService().setFocus();
			return false;
		}
		
		// WDEV-11643
		if (form.dteFrom().getValue() != null && form.dteTo().getValue() != null && form.dteTo().getValue().isLessThan(form.dteFrom().getValue()))
		{
			engine.showMessage("From date can not be set after To date");
			form.dteFrom().setFocus();
			return false;
		}
		
		return true;
	}
	
	private String getStringNoComa(String label)
	{
		if(label != null)
		{
			int index = label.indexOf(":");
			if(index == (label.length() - 1) && label.length() > 0)
				return label.substring(0, (label.length() - 1));
		}
		
		return label;
	}
	
	private void setPatientIdentifierColumnCaption()
	{
		form.grdResults().setColHospNumCaption(getPatientIdentifier());
	}
	
	private String getPatientIdentifier()
	{
		PatIdType dispIdType = PatIdType.getNegativeInstance(ConfigFlag.UI.DISPLAY_PATID_TYPE.getValue());
		if(dispIdType != null)
			return dispIdType.getText();
		
		return "Hospital No.";
	}

	
	protected void onGrdResultsGridHeaderClicked(int column)throws PresentationLogicException 
	{
		if(column == COL_ORDEREDDATETIME)
		{
			if(form.getLocalContext().getSortOrder() == null || !form.getLocalContext().getSortOrder().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
			else
				form.getLocalContext().setSortOrder(SortOrder.DESCENDING);
			
			populateGridOrdersResults(manualSortOrderedDateTime(form.getLocalContext().getSortOrder()));
		}
		
	}
	private RadiologyOrderVoCollection manualSortOrderedDateTime(SortOrder sortOrder)
	{
		RadiologyOrderVoCollection tempColl = new RadiologyOrderVoCollection();
		for(int i = 0; form.grdResults().getRows() != null && i < form.grdResults().getRows().size();i++)
		{
			tempColl.add(form.grdResults().getRows().get(i).getValue());
		}
		form.grdResults().getRows().clear();
		tempColl.sort(new OrderedDateTimeComparator(sortOrder));
		return tempColl;
		
	}
	private void populateGridOrdersResults(RadiologyOrderVoCollection coll)
	{
		if(coll == null)
			return;
		for(int i = 0; i < coll.size();i++)
		{
			RadiologyOrderVo result = coll.get(i);
			setResultGridRowData(result);
		}
		displayGridFooter();
	}
	public class OrderedDateTimeComparator implements Comparator
	{
		private int direction = 1;
		
		public OrderedDateTimeComparator()
		{
			this(SortOrder.ASCENDING);
		}
		
		public OrderedDateTimeComparator(SortOrder order)
		{
			if (order == SortOrder.DESCENDING)
				direction = -1;
			
		}
		public int compare(Object ob1, Object ob2) 
		{
			DateTime date1 = null;
			DateTime date2 = null;
			if(ob1 instanceof RadiologyOrderVo )
			{
				RadiologyOrderVo dts1 = (RadiologyOrderVo)ob1;
				date1 = dts1.getDisplayDateTime();
			}
			if(ob2 instanceof RadiologyOrderVo)
			{
				RadiologyOrderVo dts2 = (RadiologyOrderVo)ob2;
				date2 = dts2.getDisplayDateTime();
			}
			if(date1 != null )
				return  date1.compareTo(date2)*direction;
			if(date2 != null)
				return (-1)*direction;
			
			return 0;
		}
	
	}
	// End Private method	
	//wdev-11861
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(formName.equals(form.getForms().OCRR.OrderSummaryDialog))
		{
			if(result.equals(DialogResult.OK))
			{
				if(validateUISearchCriteria() == false)
					return;
				
				form.getLocalContext().setPrintingContext(null);
				
				// WDEV-11643
				populateResultsGrid(domain.listRadOrderInvestigation(form.cmbService().getValue(), form.cmbDepartment().getValue(), Category.CLINICALIMAGING, form.chkCompleted().isVisible() ? form.chkCompleted().getValue() : Boolean.FALSE, form.dteFrom().getValue(), form.dteTo().getValue()));
				
				enablePrintButton();
			}
		}
				
	}
	//----------
}
