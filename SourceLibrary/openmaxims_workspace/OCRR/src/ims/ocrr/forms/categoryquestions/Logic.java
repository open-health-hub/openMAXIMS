//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Alexie Ursache using IMS Development Environment (version 1.43 build 2232.25589)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.categoryquestions;

import java.util.ArrayList;

import ims.core.vo.QuestionInformationShortVo;
import ims.core.vo.QuestionInformationShortVoCollection;
import ims.core.vo.lookups.QuestionType;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.forms.categoryquestions.GenForm.grdDetailsRow;
import ims.ocrr.vo.CategoryQuestionShortVo;
import ims.ocrr.vo.CategoryQuestionShortVoCollection;
import ims.ocrr.vo.ServiceQuestionShortVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.CategoryCollection;
import ims.ocrr.vo.lookups.LookupHelper;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (result.equals(DialogResult.OK))
		{
			QuestionInformationShortVoCollection voColl = form.getGlobalContext().Admin.getSelectedQuestions();
			for (int i = 0; voColl != null && i < voColl.size(); i++)
			{
				QuestionInformationShortVo voQuestionInformationShort = voColl.get(i);
				GenForm.grdDetailsRow row = getGridRow(voQuestionInformationShort);
				CategoryQuestionShortVo voCategoryQuestionShort = row.getValue();
				if (voCategoryQuestionShort == null)
					voCategoryQuestionShort = new CategoryQuestionShortVo();
				voCategoryQuestionShort.setQuestionInformation(voQuestionInformationShort);
				voCategoryQuestionShort.setIsMandatory(new Boolean(row.getcolMandatory()));

				setCategoryQuestion(row, voCategoryQuestionShort);
				
				form.getLocalContext().setUnsavedQuestions(true);
			}
		}
		else
		{
			if (form.getLocalContext().getUnsavedQuestionsIsNotNull()
				&& form.getLocalContext().getUnsavedQuestions() == false)
				form.setMode(FormMode.VIEW);
		}
	}

	protected void onFormModeChanged()
	{
		enableContextMenu();
	}

	protected void onCmbCategoryValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		open();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (save())
		{
			form.setMode(FormMode.VIEW);
			open();
		}
	}

	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
		open();
	}

	protected void onGrdDetailsSelectionChanged() throws PresentationLogicException
	{
		enableContextMenu();
	}

	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add :
				addQuestion();
			break;

			case GenForm.ContextMenus.GenericGrid.Update :
				editQuestion();
			break;
			
			case GenForm.ContextMenus.GenericGrid.Remove :
				removeQuestion();
			break;
		}
	}

	private void editQuestion()
	{
		form.setMode(FormMode.EDIT);
	}

	// Private Methods
	private void populateListControl(CategoryQuestionShortVoCollection voCollCatQuestions)
	{
		for (int j = 0; voCollCatQuestions != null && j < voCollCatQuestions.size(); j++)
		{
			CategoryQuestionShortVo voCategoryQuestionShortVo = voCollCatQuestions.get(j);
			GenForm.grdDetailsRow row = form.grdDetails().getRows().newRow();
			setCategoryQuestion(row, voCategoryQuestionShortVo);
		}
	}

	/**
	 * @param row
	 * @param voCategoryQuestionShortVo
	 */
	private void setCategoryQuestion(GenForm.grdDetailsRow row, CategoryQuestionShortVo voCategoryQuestionShortVo)
	{
		if (voCategoryQuestionShortVo.getQuestionInformationIsNotNull())
		{
			row.setcolQuestion(voCategoryQuestionShortVo.getQuestionInformation().getText());
			row.setcolMandatory(voCategoryQuestionShortVo.getIsMandatoryIsNotNull() ? voCategoryQuestionShortVo.getIsMandatory().booleanValue() : false);
			row.setcolAskForInvestigation(voCategoryQuestionShortVo.getAskForInvestigationsIsNotNull()?voCategoryQuestionShortVo.getAskForInvestigations().booleanValue():false);
			row.setTooltip(voCategoryQuestionShortVo.getQuestionInformation().getTooltip());
		}
		voCategoryQuestionShortVo.setID_CategoryQuestion(null);
		row.setValue(voCategoryQuestionShortVo);
	}

	private void initialise()
	{
		form.getContextMenus().getGenericGridAddItem().setText("Add Category Questions");
		form.getContextMenus().getGenericGridUpdateItem().setText("Configure Category Questions");
		form.setMode(FormMode.VIEW);
		form.cmbCategory().removeRow(Category.PAS);
	}

	private void open()
	{
		clearInstanceControls();

		Category category = form.cmbCategory().getValue();
		if (category != null)
		{
			CategoryQuestionShortVoCollection voCollCatQuestions = domain.listCategoryQuestions(category).sort();
			populateListControl(voCollCatQuestions);
		}
		enableContextMenu();
		form.getLocalContext().setUnsavedQuestions(false);
	}

	private boolean save()
	{
		CategoryQuestionShortVoCollection voCollCatQuestions = populateInstancesData();
		String[] error = null;
		for(CategoryQuestionShortVo item : voCollCatQuestions)
		{
			if (item.getIsMandatory())
			{
				boolean isQuestion =item.getIQuestionTypeQuestion().getIsQuestion(); 
				
				if(!isQuestion)
				{					
					ArrayList<String> err = new ArrayList<String>();					
					err.add("An Information Question can't be set as Mandatory");					
					error = new String[err.size()];
					err.toArray(error);
				}
			}
		}
		
		String[] errors = voCollCatQuestions.validate(error);

		if (errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try
		{
			domain.saveCategoryQuestions(voCollCatQuestions, form.cmbCategory().getValue());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ims.configuration.gen.ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			open();
			return false;
		}

		return true;
	}

	private CategoryQuestionShortVoCollection populateInstancesData()
	{
		CategoryQuestionShortVoCollection voCollCategoryQuestions = new CategoryQuestionShortVoCollection();

		for (int i = 0; i < form.grdDetails().getRows().size(); i++)
		{
			CategoryQuestionShortVo voCatQShort = form.grdDetails().getRows().get(i).getValue();
			voCatQShort.setOCRRCategory(form.cmbCategory().getValue());
			voCatQShort.setIsMandatory(new Boolean(form.grdDetails().getRows().get(i).getcolMandatory()));
			voCatQShort.setAskForInvestigations(form.grdDetails().getRows().get(i).getcolAskForInvestigation()?Boolean.TRUE:Boolean.FALSE);
			voCollCategoryQuestions.add(voCatQShort);
		}

		return voCollCategoryQuestions;
	}

	private void removeQuestion()
	{
		form.grdDetails().removeSelectedRow();
		form.setMode(FormMode.EDIT);
		enableContextMenu();
	}

	private void addQuestion()
	{
		if (form.cmbCategory().getValue() == null)
		{
			engine.showMessage("Please select a Category");
			form.cmbCategory().setFocus();
			return;
		}
		form.getGlobalContext().Core.setQuestionType(QuestionType.PRIMARY);
		form.getGlobalContext().Core.setQuestionFormMode(null);
		engine.open(form.getForms().Core.QuestionSelectNew);
		form.setMode(FormMode.EDIT);
	}

	private void clearInstanceControls()
	{
		form.grdDetails().getRows().clear();
	}

	private void enableContextMenu()
	{
		boolean viewMode = form.getMode().equals(FormMode.VIEW);
		boolean isCategorySelected = form.cmbCategory().getValue() != null;
		boolean recordsSaved = form.grdDetails().getRows().size() > 0;
		form.getContextMenus().getGenericGridAddItem().setVisible((isCategorySelected && viewMode) || !viewMode);
		form.getContextMenus().getGenericGridRemoveItem().setVisible(form.grdDetails().getSelectedRow() != null && !viewMode);
		form.getContextMenus().getGenericGridUpdateItem().setVisible(isCategorySelected && viewMode && recordsSaved);
	}

	private grdDetailsRow getGridRow(QuestionInformationShortVo voQInfoShort)
	{
		// Check the existing questions
		CategoryQuestionShortVo voCategoryQuestionShort = null;
		for (int i = 0; i < form.grdDetails().getRows().size(); i++)
		{
			voCategoryQuestionShort = form.grdDetails().getRows().get(i).getValue();
			if (voCategoryQuestionShort != null && voCategoryQuestionShort.getQuestionInformationIsNotNull() && voCategoryQuestionShort.getQuestionInformation().equals(voQInfoShort))
				return form.grdDetails().getRows().get(i);

		}

		// Set the value
		voCategoryQuestionShort = new CategoryQuestionShortVo();
		voCategoryQuestionShort.setQuestionInformation(voQInfoShort);
		GenForm.grdDetailsRow row = form.grdDetails().getRows().newRow();
		row.setValue(voCategoryQuestionShort);

		return row;
	}
}
