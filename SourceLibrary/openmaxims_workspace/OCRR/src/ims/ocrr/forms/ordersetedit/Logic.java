//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.30 build 2043.20884)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.ordersetedit;

import java.util.ArrayList;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.lookups.PreActiveActiveInactiveStatus;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.Control;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.FormOpenException;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.ocrr.forms.ordersetedit.GenForm.grdHelpTextRow;
import ims.ocrr.vo.HelpTextVo;
import ims.ocrr.vo.HelpTextVoCollection;
import ims.ocrr.vo.InvestShortVoCollection;
import ims.ocrr.vo.OrderSetComponentEditVo;
import ims.ocrr.vo.OrderSetComponentEditVoCollection;
import ims.ocrr.vo.OrderSetEditVo;
import ims.ocrr.vo.lookups.ItemSelectionType;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws FormOpenException 
	{
		initialize();
		open();
	}
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException 
	{
		if(result.equals(DialogResult.OK) && formName.equals(form.getForms().OCRR.ItemSelection))
		{
			addSelectedItems();
		}
	}
	protected void onLnkReturnClick() throws PresentationLogicException 
	{
		returnToList();
	}
	protected void onGrdComponentsSelectionChanged() throws PresentationLogicException 
	{		
		setComponentsContextMenuState();
	}
	protected void onBtnSaveClick() throws PresentationLogicException 
	{
		if(save())
			returnToList();
	}
	protected void onBtnCancelClick() throws PresentationLogicException 
	{
		returnToList();
	}
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException 
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.OCRROrderEntryTemplateEdit.ADDINVESTIGATION:
				addInvestigations();
				break;
			case GenForm.ContextMenus.OCRROrderEntryTemplateEdit.ADDPROFILES:
				addProfiles();
				break;
			case GenForm.ContextMenus.OCRROrderEntryTemplateEdit.REMOVE:
				removeSelectedComponent();
				break;
			case GenForm.ContextMenus.OCRROrderEntryTemplateEdit.MOVEUP:
				moveUp();
				break;
			case GenForm.ContextMenus.OCRROrderEntryTemplateEdit.MOVEDOWN:
				moveDown();
				break;
			
			//WDEV-11938 - starts here
			case GenForm.ContextMenus.OCRRHelpText.ADD_HELPTEXT:
				addHelpText();
			break;
			
			case GenForm.ContextMenus.OCRRHelpText.REMOVE_HELPTEXT:
				removeHelpText();
			break;
			//WDEV-11938 - ends here
		}
		
		setComponentsContextMenuState();
	}
	
	//WDEV-11938 
	private void removeHelpText() 
	{
		if(form.grdHelpText().getSelectedRowIndex() >= 0)
			form.grdHelpText().removeSelectedRow();
	}
	
	//WDEV-11938 
	private void addHelpText() 
	{
		grdHelpTextRow newRow = form.grdHelpText().getRows().newRow(true);
	}
	
	protected void onFormModeChanged() 
	{
		setComponentsContextMenuState();
	}
	protected void onBtnUpdateClick() throws PresentationLogicException 
	{
		form.setMode(FormMode.EDIT);
	}
	private void initialize()
	{		
		if(form.getGlobalContext().OCRR.getOrderSetEditorReadOnlyIsNotNull())
		{
			form.setMode(form.getGlobalContext().OCRR.getOrderSetEditorReadOnly().booleanValue() ? FormMode.VIEW : FormMode.EDIT);			
		}
		
		loadColors();		
		setComponentsContextMenuState();
	}
	private void setComponentsContextMenuState()
	{
		boolean editable = form.getMode() == FormMode.EDIT;		
		boolean selected = editable && form.grdComponents().getSelectedRowIndex() >= 0;
		boolean canMoveUp = selected && form.grdComponents().canMoveCurrentUp();
		boolean canMoveDown = selected && form.grdComponents().canMoveCurrentDown();
		
		form.getContextMenus().getOCRROrderEntryTemplateEditADDINVESTIGATIONItem().setVisible(editable);
		form.getContextMenus().getOCRROrderEntryTemplateEditADDPROFILESItem().setVisible(editable);
		form.getContextMenus().getOCRROrderEntryTemplateEditADDORDERSETSItem().setVisible(false);
		form.getContextMenus().getOCRROrderEntryTemplateEditADDSEPARATORItem().setVisible(false);
		form.getContextMenus().getOCRROrderEntryTemplateEditADDCOLUMNSEPARATORItem().setVisible(false);
		form.getContextMenus().getOCRROrderEntryTemplateEditMOVEUPItem().setVisible(canMoveUp);
		form.getContextMenus().getOCRROrderEntryTemplateEditMOVEDOWNItem().setVisible(canMoveDown);
		form.getContextMenus().getOCRROrderEntryTemplateEditREMOVEItem().setVisible(selected);
		
		//WDEV-11938 - starts here
		form.getContextMenus().getOCRRHelpTextADD_HELPTEXTItem().setVisible(editable);
		form.getContextMenus().getOCRRHelpTextREMOVE_HELPTEXTItem().setVisible(editable && form.grdHelpText().getSelectedRowIndex() >= 0);
		//WDEV-11938 - ends here
	}
	private void open()
	{
		if(form.getGlobalContext().OCRR.getSelectedOrderSetIDIsNotNull())
		{
			OrderSetEditVo record = domain.getOrderSet(form.getGlobalContext().OCRR.getSelectedOrderSetID());
			if(record != null)
			{
				form.getLocalContext().setEditedRecord(record);
				populateScreenFromData(record);								
			}
			else
				engine.showMessage("Order set not found");
		}		
		else
		{
			form.cmbStatus().setValue(PreActiveActiveInactiveStatus.PREACTIVE);
		}		
	}
	private boolean save()
	{
		OrderSetEditVo record = form.getLocalContext().getEditedRecord();
		if(record == null)
			record = new OrderSetEditVo();
		
		//WDEV-770
		boolean wasPrevStatusActive = false;
		if(record.getActiveStatusIsNotNull() && record.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
			wasPrevStatusActive = true;

		if(form.cmbStatus().getValue() != null && form.cmbStatus().getValue().equals(PreActiveActiveInactiveStatus.PREACTIVE) && wasPrevStatusActive)
		{
			engine.showMessage("The status cannot be changed from Active to PreActive !");
			return false;
		}
		
		record = populateDataFromScreen(record);
		
		
		String[] errors = record.validate(validateData(record));
		if(errors != null)
		{
			engine.showErrors(errors);
			return false;
		}
		
		try 
		{
			record = domain.saveOrderSet(record);
		} 
		catch (ForeignKeyViolationException e) 
		{
			engine.showMessage(e.getMessage());
			return false;
		} 
		catch (StaleObjectException e) 
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			return false;
		}
		
		if(record != null && record.getID_OrderSetIsNotNull())
			form.getGlobalContext().OCRR.setSelectedOrderSetID(record.getID_OrderSet());
		
		return true;		
	}
	private String[] validateData(OrderSetEditVo record) 
	{		
		if(record == null)
			throw new CodingRuntimeException("Invalid order set record");
		
		if(record.getActiveStatus() == null || !record.getActiveStatus().equals(PreActiveActiveInactiveStatus.ACTIVE))
			return null;
		
		ArrayList errors = new ArrayList();
		
		if(record.getComponent() == null || record.getComponent().size() == 0)
		{
			errors.add("No order set components configured");
		}
		else
		{
			boolean exist = false;
			for(int x = 0; x < record.getComponent().size(); x++)
			{
				OrderSetComponentEditVo component = record.getComponent().get(x);
				if(component == null || (component.getInvestigation() == null && component.getOrderSet() == null))
				{
					errors.add("Invalid order set component at position #" + String.valueOf(x + 1));
				}				
				else if(component.getInvestigation() != null || component.getOrderSet() != null)
				{
					exist = true;
					break;
				}
			}
			
			if(!exist)
				errors.add("No order set components configured");
		}
		
		if(errors.size() == 0)
			return null;
		
		String[] err = new String[errors.size()];
		for(int x = 0; x < errors.size(); x++)
		{
			err[x] = (String)errors.get(x);
		}
		
		return err;
	}
	private void returnToList()
	{
		engine.open(form.getForms().OCRR.OrderSetList);
	}	
	private void addInvestigations()
	{		
		selectItems(ItemSelectionType.INVESTIGATION);
	}
	private void addProfiles()
	{
		selectItems(ItemSelectionType.PROFILE);
	}
	private void selectItems(ItemSelectionType type)
	{
		populateItemsAlreadySelected();
		form.getGlobalContext().OCRR.setSelectedInvestigations(null);
		form.getGlobalContext().OCRR.setSelectedProfiles(null);		
		form.getGlobalContext().OCRR.setItemSelectionType(type);
		engine.open(form.getForms().OCRR.ItemSelection);
	}
	private void removeSelectedComponent()
	{		
		if(form.grdComponents().getValue() != null)			
			form.grdComponents().removeSelectedRow();			
	}
	private void moveUp()
	{		
		form.grdComponents().moveUp();
	}
	private void moveDown()
	{	
		form.grdComponents().moveDown();
	}
	private void addComponent(OrderSetComponentEditVo component, boolean select)
	{
		if(component == null || component.getInvestigation() == null)
			return;
		
		GenForm.grdComponentsRow row = form.grdComponents().getRows().newRow(select);
		row.setValue(component);
		
		// investigation or profile		
		if(component.getInvestigation().getInvestigationIndexIsNotNull())
		{
			row.setcolName(component.getInvestigation().getNameWithLocationInfo());
			row.setcolStatus(component.getInvestigation().getActiveStatus());
			if(component.getInvestigation().getInvestigationIndexIsNotNull() && component.getInvestigation().getInvestigationIndex().getIsProfile().booleanValue())
				row.setcolImage(form.getImages().OCRR.Profile);				
			else
				row.setcolImage(form.getImages().OCRR.Investigation);			
		}
	}
	private void addSelectedItems()
	{
		// investigations
		if(form.getGlobalContext().OCRR.getSelectedInvestigationsIsNotNull())
		{
			InvestShortVoCollection selectedInvestigations = form.getGlobalContext().OCRR.getSelectedInvestigations();  
			for(int x = 0; x < selectedInvestigations.size(); x++)
			{
				OrderSetComponentEditVo item = new OrderSetComponentEditVo();
				item.setInvestigation(selectedInvestigations.get(x));
				addComponent(item, false);
			}		
		}
		
		// profiles
		if(form.getGlobalContext().OCRR.getSelectedProfilesIsNotNull())
		{
			InvestShortVoCollection selectedProfiles = form.getGlobalContext().OCRR.getSelectedProfiles();  
			for(int x = 0; x < selectedProfiles.size(); x++)
			{
				OrderSetComponentEditVo item = new OrderSetComponentEditVo();
				item.setInvestigation(selectedProfiles.get(x));
				addComponent(item, false);
			}		
		}
	}
	private void loadColors()
	{
		Color[] ca = Color.getColors();

		form.cmbColor().clear();
		for (int i = 0; i < ca.length; i++) 
		{
			form.cmbColor().newRow(ca[i], ca[i].getName(), ca[i].getImage());			
		}
	}
	private void clearScreen()
	{
		this.form.cmbColor().setValue(null);
		this.form.txtCommonName().setValue("");
		this.form.cmbStatus().setValue(null);
		this.form.grdComponents().getRows().clear();
		this.form.txtName().setValue("");
		this.form.txtDescription().setValue("");
		
		//wdev-11938
		form.grdHelpText().getRows().clear();
	}
	private void populateScreenFromData(ims.ocrr.vo.OrderSetEditVo value)
	{
		clearScreen();
		if(value == null)
			return;

		this.form.txtCommonName().setValue(value.getCommonNameIsNotNull() ? value.getCommonName(): null);
		// ----- Start of grdComponents Grid --------------------------
		ims.ocrr.vo.OrderSetComponentEditVoCollection fieldgrdComponents = value.getComponentIsNotNull() ? value.getComponent() : null;		
		if(fieldgrdComponents != null)
		{
			fieldgrdComponents.sort();
			
			for(int x = 0; x < fieldgrdComponents.size(); x++)
			{
				if(fieldgrdComponents.get(x) != null)
				{
					addComponent(fieldgrdComponents.get(x), false);					
				}
			}
		}
		// ----- End of grdComponents Grid ----------------------------
		this.form.txtName().setValue(value.getNameIsNotNull() ? value.getName(): null);
		this.form.cmbStatus().setValue(value.getActiveStatusIsNotNull() ? value.getActiveStatus() : null);
		this.form.txtDescription().setValue(value.getDescriptionIsNotNull() ? value.getDescription(): null);
		this.form.cmbColor().setValue(value.getColorIsNotNull() ? value.getColor() : null);
		
		//WDEV-11938 - starts here
		HelpTextVoCollection helpTextCol = value.getHelpText();
	
		if(helpTextCol != null)
		{
			for(int i=0; i<helpTextCol.size(); i++)
			{
				HelpTextVo rowValue = helpTextCol.get(i);
				
				if(rowValue == null)
					continue;
				
				grdHelpTextRow newRow = form.grdHelpText().getRows().newRow();
				newRow.setValue(rowValue);
				
				newRow.setcolTitle(rowValue.getTextCategory());
				newRow.setcolText(rowValue.getHelpText());
			}
		}
		//WDEV-11938 - ends here
	}
	private ims.ocrr.vo.OrderSetEditVo populateDataFromScreen(ims.ocrr.vo.OrderSetEditVo value)
	{
		if(value == null)
			value = new ims.ocrr.vo.OrderSetEditVo();

		value.setCommonName(this.form.txtCommonName().getValue());
		// ----- Start of grdComponents Grid --------------------------
		OrderSetComponentEditVoCollection components = new OrderSetComponentEditVoCollection();		
		for(int x = 0; x < this.form.grdComponents().getRows().size(); x++)
		{
			ims.ocrr.vo.OrderSetComponentEditVo item = this.form.grdComponents().getRows().get(x).getValue();			
			item.setComponentSeq(new Integer(x));
			item.setOrderSet(value);			
			components.add(item);
		}
		value.setComponent(components);
		// ----- End of grdComponents Grid ----------------------------
		value.setName(this.form.txtName().getValue());
		value.setDescription(this.form.txtDescription().getValue());
		value.setActiveStatus(this.form.cmbStatus().getValue());
		value.setColor(this.form.cmbColor().getValue());
		
		//WDEV-11938 - starts here
		HelpTextVoCollection helpTextCol = new HelpTextVoCollection();
		
		for(int i=0; i<form.grdHelpText().getRows().size(); i++)
		{
			HelpTextVo rowValue = form.grdHelpText().getRows().get(i).getValue();
			
			if(rowValue == null)
				rowValue = new HelpTextVo();
			
			rowValue.setTextCategory(form.grdHelpText().getRows().get(i).getcolTitle());
			rowValue.setHelpText(form.grdHelpText().getRows().get(i).getcolText());
			
			helpTextCol.add(rowValue);
		}
		
		value.setHelpText(helpTextCol.size() > 0 ? helpTextCol : null);
		//WDEV-11938 - ends here

		return value;
	}
	
	private void populateItemsAlreadySelected()
	{
		InvestShortVoCollection investigations = new InvestShortVoCollection();
		InvestShortVoCollection profiles = new InvestShortVoCollection();
		
		for(int x = 0; x < form.grdComponents().getRows().size(); x++)
		{
			OrderSetComponentEditVo item = form.grdComponents().getRows().get(x).getValue();
			if(item != null)
			{
				if(item.getInvestigationIsNotNull() && item.getInvestigation().getInvestigationIndexIsNotNull())
				{
					if(item.getInvestigation().getInvestigationIndex().getIsProfileIsNotNull() && item.getInvestigation().getInvestigationIndex().getIsProfile().booleanValue())
						profiles.add(item.getInvestigation());
					else						
						investigations.add(item.getInvestigation());
				}
			}		
		}
		
		form.getGlobalContext().OCRR.setPreselectedInvestigations(investigations);
		form.getGlobalContext().OCRR.setPreselectedProfiles(profiles);
		
	}
	@Override
	protected void onGrdHelpTextSelectionChanged() throws PresentationLogicException 
	{
		setComponentsContextMenuState();
	}
}
