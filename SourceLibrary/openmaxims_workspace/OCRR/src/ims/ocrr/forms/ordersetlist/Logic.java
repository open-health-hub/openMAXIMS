//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Marius Mihalec using IMS Development Environment (version 1.30 build 2043.20884)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.ordersetlist;

import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.ocrr.vo.OrderSetListSearchCriteriaVo;
import ims.ocrr.vo.OrderSetShortVo;
import ims.ocrr.vo.OrderSetShortVoCollection;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		restoreSearchCriteria();
		search();
	}
	protected void onGrdOrderSetSelectionChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		if(form.grdOrderSet().getValue() != null)
			form.getGlobalContext().OCRR.setSelectedOrderSetID(form.grdOrderSet().getValue().getID_OrderSet());
		setContextMenu();
	}
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.GenericGrid.Add:
				add();
				break;			
			case GenForm.ContextMenus.GenericGrid.Update:
				editSelected();
				break;
			case GenForm.ContextMenus.GenericGrid.View:
				viewSelected();
				break;
		}
	}
	protected void onBtnSearchClick() throws PresentationLogicException 
	{		
		buildSearchCriteria();
		search();
	}
	private void initialize()
	{
		form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
		form.getContextMenus().getGenericGridAddItem().setText("Add Order Set");
		form.getContextMenus().getGenericGridUpdateItem().setText("Edit Order Set");
		form.getContextMenus().getGenericGridViewItem().setText("View Order Set");
		form.getContextMenus().getGenericGridRemoveItem().setText("Remove Order Set");
		form.getContextMenus().getGenericGridAddItem().setVisible(true);		
		setContextMenu();		
	}
	private void restoreSearchCriteria()
	{
		OrderSetListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getOrderSetListSearchCriteria();
		if(searchCriteria == null)
			return;
		
		form.txtName().setValue(searchCriteria.getName());
		form.cmbStatus().setValue(searchCriteria.getStatus());
	}
	private void buildSearchCriteria()
	{
		OrderSetListSearchCriteriaVo searchCriteria = new OrderSetListSearchCriteriaVo();				
		searchCriteria.setName(form.txtName().getValue());
		searchCriteria.setStatus(form.cmbStatus().getValue());
		form.getGlobalContext().OCRR.setOrderSetListSearchCriteria(searchCriteria);
	}
	private boolean isValidSearchCriteria()
	{
		OrderSetListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getOrderSetListSearchCriteria();
		if(searchCriteria == null)
			return false;
		
		if(searchCriteria.getNameIsNotNull() && searchCriteria.getName().trim().length() > 0)
			return true;
		if(searchCriteria.getStatusIsNotNull())
			return true;
		
		return false;
	}
	private void search()
	{	
		form.grdOrderSet().getRows().clear();	
		
		OrderSetListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getOrderSetListSearchCriteria();
		if(searchCriteria == null)
			return;
		
		if(!isValidSearchCriteria())
		{
			form.getGlobalContext().OCRR.setOrderSetListSearchCriteria(null);
			engine.showMessage("Please Enter Some Search Criteria");		
			return;
		}
		
		OrderSetShortVoCollection records = domain.listOrderSets(searchCriteria);
		
		form.grdOrderSet().getRows().clear();
		
		if(records == null || records.size() == 0)
		{
			engine.showMessage("There are no Records for the Search Criteria Provided");
			setContextMenu(); //WDEV-16434
			return;
		}
		
		populateScreenFromData(records);
		setContextMenu();
	}

	private void populateScreenFromData(OrderSetShortVoCollection records) 
	{
		if(records != null)
		{
			for(int x = 0; x < records.size(); x++)
			{
				OrderSetShortVo item = records.get(x);
				GenForm.grdOrderSetRow row = form.grdOrderSet().getRows().newRow(form.getGlobalContext().OCRR.getSelectedOrderSetIDIsNotNull() && form.getGlobalContext().OCRR.getSelectedOrderSetID().equals(item.getID_OrderSet()));
				row.setValue(item);
				row.setcolImage(form.getImages().OCRR.OrderSet);
				row.setcolName(item.getName());
				
				if(item.getColorIsNotNull())
				{
					Color color = Color.getColor(item.getColor().getName());
					if(color != null)
						row.setcolColour(color.getImage());
				}
				if(item.getActiveStatusIsNotNull())
					row.setcolStatus(item.getActiveStatus().getText());
				
				row.setcolDescription(item.getDescription());							
			}
			
			if(form.grdOrderSet().getSelectedRowIndex() < 0)
				form.getGlobalContext().OCRR.setSelectedOrderSetID(null);
		}
		
	}
	
	private void setContextMenu()
	{
		form.getContextMenus().getGenericGridUpdateItem().setVisible(form.grdOrderSet().getSelectedRowIndex() >= 0);		
		form.getContextMenus().getGenericGridViewItem().setVisible(form.grdOrderSet().getSelectedRowIndex() >= 0);
	}
	private void add()
	{
		form.getGlobalContext().OCRR.setOrderSetEditorReadOnly(Boolean.FALSE);
		form.getGlobalContext().OCRR.setSelectedOrderSetID(null);
		engine.open(form.getForms().OCRR.OrderSetEdit);
	}
	private void editSelected()
	{
		editViewSelected(true);
	}
	private void viewSelected()
	{
		editViewSelected(false);
	}
	
	private void editViewSelected(boolean edit)
	{
		if(form.grdOrderSet().getSelectedRowIndex() < 0 || form.grdOrderSet().getValue() == null)
			return;
		
		form.getGlobalContext().OCRR.setSelectedOrderSetID(form.grdOrderSet().getValue().getID_OrderSet());
		form.getGlobalContext().OCRR.setOrderSetEditorReadOnly(new Boolean(!edit));
		engine.open(form.getForms().OCRR.OrderSetEdit);
	}

	protected void onGrdOrderSetGridHeaderClicked(int column) throws PresentationLogicException 
	{
		if(column == 2)
		{
			if(form.getLocalContext().getSortOrder() == null)
			{
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
			}
			
			OrderSetShortVoCollection voCollOrderSetShort = form.grdOrderSet().getValues();	
			voCollOrderSetShort.sort(OrderSetShortVo.getColourComparator(form.getLocalContext().getSortOrder()));
			
			if(form.getLocalContext().getSortOrder().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrder(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrder().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
				
			form.grdOrderSet().getRows().clear();
			populateScreenFromData(voCollOrderSetShort);
		}
	}
}
