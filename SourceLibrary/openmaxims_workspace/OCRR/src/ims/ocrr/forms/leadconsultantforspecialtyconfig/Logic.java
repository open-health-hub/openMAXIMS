//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Florin Blindu using IMS Development Environment (version 1.80 build 4342.23748)
// Copyright (C) 1995-2011 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.leadconsultantforspecialtyconfig;

import ims.configuration.gen.ConfigFlag;
import ims.core.vo.HcpLiteVo;
import ims.core.vo.lookups.LookupHelper;
import ims.core.vo.lookups.Specialty;
import ims.core.vo.lookups.SpecialtyCollection;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.framework.FormName;
import ims.framework.controls.TreeNode;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.vo.LeadConsultantForSpecialtyConfigVo;
import ims.ocrr.vo.LeadConsultantForSpecialtyConfigVoCollection;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onTreLeadConsTreeViewSelectionChanged(ims.framework.controls.TreeNode node) throws ims.framework.exceptions.PresentationLogicException
	{
		updateControlsState();
	}
	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
			case GenForm.ContextMenus.OCRRNamespace.LeadConsultantForSpecialtyConfig.ADD:
				newInstance();
				break;
			case GenForm.ContextMenus.OCRRNamespace.LeadConsultantForSpecialtyConfig.EDIT:
				updateInstance();
				break;
			case GenForm.ContextMenus.OCRRNamespace.LeadConsultantForSpecialtyConfig.REMOVE:
				removeInstance();
				break;
		}
	}
	
	private void removeInstance()
	{
		setGlobalContext();
		
		if (domain.isStale(form.getGlobalContext().OCRR.getLeadConsultantForSpecialtyConfigFB()))
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			form.getGlobalContext().OCRR.setLeadConsultantForSpecialtyConfigFB(null);
			open();
			return;
		}
		
		try
		{
			domain.removeLeadCons(form.getGlobalContext().OCRR.getLeadConsultantForSpecialtyConfigFB());
			open();	
		}
			
		catch (ForeignKeyViolationException e)
		{
			engine.showMessage(e.getMessage());
			return ;
		}	
					
		return ;
		
	}
	
	private void setGlobalContext()
	{
		if (form.treLeadCons().getValue() instanceof LeadConsultantForSpecialtyConfigVo)
			form.getGlobalContext().OCRR.setLeadConsultantForSpecialtyConfigFB((LeadConsultantForSpecialtyConfigVo) form.treLeadCons().getSelectedNode().getValue());
		else if (form.treLeadCons().getSelectedNode().getValue() instanceof HcpLiteVo)
			form.getGlobalContext().OCRR.setLeadConsultantForSpecialtyConfigFB((LeadConsultantForSpecialtyConfigVo) form.treLeadCons().getSelectedNode().getParent().getValue());
	}
	
	private void updateInstance()
	{
		setGlobalContext();
		engine.open(form.getForms().OCRR.LeadConsultantForSpecialtyConfigDialog);	
	}
	
	private void newInstance()
	{
		LeadConsultantForSpecialtyConfigVo spec = new LeadConsultantForSpecialtyConfigVo();
		
		if (form.treLeadCons().getSelectedNode().getValue() instanceof LeadConsultantForSpecialtyConfigVo)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return;
		}
		
		if (form.treLeadCons().getSelectedNode().getValue() instanceof Specialty)
		{
			spec.setSpecialty((Specialty) form.treLeadCons().getSelectedNode().getValue());
			form.getGlobalContext().OCRR.setLeadConsultantForSpecialtyConfigFB(spec);
			engine.open(form.getForms().OCRR.LeadConsultantForSpecialtyConfigDialog);
		}		
	}
	@Override
	protected void onFormOpen(Object[] args) throws PresentationLogicException
	{
		open();	
	}

	private void open()
	{
		listSpecialties();
		populateScreenFromData();
		form.setMode(FormMode.VIEW);
	}
	
	private void listSpecialties()
	{
		form.treLeadCons().clear();
		SpecialtyCollection lkpCollSpecialties = LookupHelper.getSpecialty(domain.getLookupService());
		if (lkpCollSpecialties == null)
			return;
		
		for (int i=0; i < lkpCollSpecialties.size(); i++)
		{
			TreeNode nodeSpecialty=form.treLeadCons().getNodes().add(lkpCollSpecialties.get(i), lkpCollSpecialties.get(i).getText());	
			
			//put images for Specialty Node
			nodeSpecialty.setExpandedImage(form.getImages().Admin.Specialty01);
			nodeSpecialty.setCollapsedImage(form.getImages().Admin.Specialty01);
		}			
	}
	
	public void updateControlsState()
	{									 
		form.getContextMenus().OCRR.getLeadConsultantForSpecialtyConfigADDItem().setVisible(form.getMode().equals(FormMode.VIEW) && form.treLeadCons().getValue() instanceof Specialty);
		
		//to appear edit and remove for the parent and for the child
		form.getContextMenus().OCRR.getLeadConsultantForSpecialtyConfigEDITItem().setVisible(form.getMode().equals(FormMode.VIEW) &&((form.treLeadCons().getValue() instanceof LeadConsultantForSpecialtyConfigVo ) || ((form.treLeadCons().getSelectedNode() != null) && (form.treLeadCons().getSelectedNode().getValue() instanceof HcpLiteVo ))));
		form.getContextMenus().OCRR.getLeadConsultantForSpecialtyConfigREMOVEItem().setVisible(form.getMode().equals(FormMode.VIEW) &&((form.treLeadCons().getValue() instanceof LeadConsultantForSpecialtyConfigVo ) || ((form.treLeadCons().getSelectedNode() != null) && (form.treLeadCons().getSelectedNode().getValue() instanceof HcpLiteVo ))));	
	}
	@Override
	protected void onFormModeChanged()
	{
		updateControlsState();
		
	}
	@Override
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		open();
	}
	
	private void populateScreenFromData() 
	{	
		populateLeadConsforSpecTree();	
	}
	
	private void populateLeadConsforSpecTree()
	{
		LeadConsultantForSpecialtyConfigVoCollection leadConsCollection=domain.listLeadConsultantForSpecialty();
		if (leadConsCollection == null)
			return;
		
		for (int i = 0; i < leadConsCollection.size(); i++)
		{
			LeadConsultantForSpecialtyConfigVo leadCons = leadConsCollection.get(i);
			
			TreeNode nodeSpecialty = form.treLeadCons().getNodeByValue(leadCons.getSpecialty());
			
			if (nodeSpecialty != null)
			{
			addLeadConsultantToSpecialty(nodeSpecialty, leadCons);
			}
		}
	}
	
	private void addLeadConsultantToSpecialty(TreeNode nodeSpecialty, LeadConsultantForSpecialtyConfigVo leadCons)
	{
		TreeNode nodeLeadCons =nodeSpecialty.getNodes().add(leadCons.getLeadConsultant(), leadCons.getLeadConsultant().getIHcpName());
		nodeSpecialty.setValue(leadCons);
		nodeSpecialty.setExpanded(true);
		
		// TreeNode nodeLeadCons=form.treLeadCons().getNodeByValue(leadCons.getLeadConsultant());
		//put images to LeadCons Node
		nodeLeadCons.setExpandedImage(form.getImages().Admin.StaffRed);
		nodeLeadCons.setCollapsedImage(form.getImages().Admin.StaffRed);
		
		
	}
}
