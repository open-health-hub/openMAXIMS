//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.71 build 3716.26758)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.securitylevelconfig;

import ims.configuration.gen.ConfigFlag;
import ims.domain.exceptions.ForeignKeyViolationException;
import ims.domain.exceptions.StaleObjectException;
import ims.domain.exceptions.UniqueKeyViolationException;
import ims.framework.MessageButtons;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.CodingRuntimeException;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.forms.securitylevelconfig.GenForm.grdSecurityRow;
import ims.ocrr.vo.SecurityLevelConfigVo;
import ims.ocrr.vo.SecurityLevelConfigVoCollection;

public class Logic extends BaseLogic
{
	private static final long	serialVersionUID	= 1L;
	
	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void open()
	{
		form.grdSecurity().getRows().clear();

		SecurityLevelConfigVoCollection voCollSecurityLevelConfig = domain.listSecurityLevel();
		if (voCollSecurityLevelConfig == null)
			return;

		for (SecurityLevelConfigVo voSecurityLevelConfig : voCollSecurityLevelConfig)
		{
			grdSecurityRow row = form.grdSecurity().getRows().newRow();
			row.setColSecurityLevelDesc(voSecurityLevelConfig.getSecurityLevelDescription());
			row.setValue(voSecurityLevelConfig);
		}

		updateControlState();
	}

	private void initialise()
	{
		form.imgLow().setValue(form.getImages().OCRR.SecurityLevelLow);
		form.imgHigh().setValue(form.getImages().OCRR.SecurityLevelHigh);
		form.imgUp().setValue(form.getImages().Admin.Up);
		form.imgDown().setValue(form.getImages().Admin.Down);
	}

	private void updateControlState()
	{
		form.getContextMenus().OCRR.hideAllSecurityLevelConfigMenuItems();		
		if(form.getMode().equals(FormMode.EDIT))
		{			
			form.getContextMenus().OCRR.getSecurityLevelConfigNEWSECURITYLEVELItem().setVisible(true);
			boolean isRowSelected = form.grdSecurity().getValue() != null;

			form.getContextMenus().OCRR.getSecurityLevelConfigEDITSECURITYLEVELItem().setVisible(isRowSelected);
			form.getContextMenus().OCRR.getSecurityLevelConfigREMOVESECURITYLEVELItem().setVisible(isRowSelected);

			if (!isRowSelected)
			{
				form.getContextMenus().OCRR.getSecurityLevelConfigDECREASESECURITYLEVELItem().setVisible(false);
				form.getContextMenus().OCRR.getSecurityLevelConfigINCREASESECURITYLEVELItem().setVisible(false);
			}
			else
			{
				if (form.grdSecurity().canMoveCurrentUp())
					form.getContextMenus().OCRR.getSecurityLevelConfigDECREASESECURITYLEVELItem().setVisible(true);
				else
					form.getContextMenus().OCRR.getSecurityLevelConfigDECREASESECURITYLEVELItem().setVisible(false);

				if (form.grdSecurity().canMoveCurrentDown())
					form.getContextMenus().OCRR.getSecurityLevelConfigINCREASESECURITYLEVELItem().setVisible(true);
				else
					form.getContextMenus().OCRR.getSecurityLevelConfigINCREASESECURITYLEVELItem().setVisible(false);
			}
		}
	}

	@Override
	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().OCRR.SecurityLevelDescriptionDialog))
		{
			if (result.equals(DialogResult.OK))
			{
				if (form.getGlobalContext().OCRR.getSecurityLevelConfigVoRecordIsNotNull())
				{
					if(save(form.getGlobalContext().OCRR.getSecurityLevelConfigVoRecord()))
						open();
				}
			}
			else if(result.equals(DialogResult.CANCEL))
			{
				form.getGlobalContext().OCRR.setSecurityLevelConfigVoRecord(form.grdSecurity().getValue());
			}
		}
	}

	private boolean save(SecurityLevelConfigVo voSecurityLevelConfig)
	{
		if (voSecurityLevelConfig == null)
			throw new CodingRuntimeException("voSecurityLevelConfig is null in method save");
		
		String[] arrErrors = voSecurityLevelConfig.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return false;
		}
		
		try
		{
			domain.saveSecurityLevel(voSecurityLevelConfig);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
			open();
			return false;
		}
		catch (UniqueKeyViolationException e)
		{
			engine.showMessage("'Security Level Description' must be unique");
			return false;
		}
		
		return true;
	}

	@Override
	protected void onGrdSecuritySelectionChanged()
	{
		updateControlState();
	}

	@Override
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.OCRRNamespace.SecurityLevelConfig.NEWSECURITYLEVEL:
				newSecurityLevel();
				break;
			case GenForm.ContextMenus.OCRRNamespace.SecurityLevelConfig.EDITSECURITYLEVEL:
				editSecurityLevel();
				break;
			case GenForm.ContextMenus.OCRRNamespace.SecurityLevelConfig.DECREASESECURITYLEVEL:
				decreaseSecurityLevel();
				break;
			case GenForm.ContextMenus.OCRRNamespace.SecurityLevelConfig.INCREASESECURITYLEVEL:
				increaseSecurityLevel();
				break;
			case GenForm.ContextMenus.OCRRNamespace.SecurityLevelConfig.REMOVESECURITYLEVEL:
				confirmSecurityLevelDelete();
				break;
			default:
		}
	}

	private void confirmSecurityLevelDelete()
	{
		int msgBoxId = engine.showMessage("Please confirm you wish to delete this Security Level", "Delete Security Level", MessageButtons.CONFIRMCANCEL);
		form.getLocalContext().setMessageBoxId(msgBoxId);
	}

	private void newSecurityLevel()
	{
		SecurityLevelConfigVo voSecurityLevel = new SecurityLevelConfigVo();
		voSecurityLevel.setSecurityLevel(getNextIndexValue());
		
		form.getGlobalContext().OCRR.setSecurityLevelConfigVoRecord(voSecurityLevel);
		engine.open(form.getForms().OCRR.SecurityLevelDescriptionDialog);
	}
	
	private Integer getNextIndexValue()
	{
		SecurityLevelConfigVoCollection voCollSecurityLevelConfig = form.grdSecurity().getValues();
		if(voCollSecurityLevelConfig.size() == 0)
			return new Integer(0);
		
		voCollSecurityLevelConfig.sort();
		return voCollSecurityLevelConfig.get(voCollSecurityLevelConfig.size() - 1).getSecurityLevel() + 1;
	}

	private void editSecurityLevel()
	{
		form.getGlobalContext().OCRR.setSecurityLevelConfigVoRecord((SecurityLevelConfigVo)form.grdSecurity().getValue().clone());
		engine.open(form.getForms().OCRR.SecurityLevelDescriptionDialog);
	}
	
	private void increaseSecurityLevel()
	{
		//moveDown
		form.grdSecurity().moveDown();
		
		//moved up
		SecurityLevelConfigVo voMoveUp = form.grdSecurity().getRows().get(form.grdSecurity().getSelectedRowIndex() -1).getValue();
		voMoveUp.setSecurityLevel( voMoveUp.getSecurityLevel() - 1 );
		
		//moved down
		SecurityLevelConfigVo voMoveDown = form.grdSecurity().getSelectedRow().getValue();
		voMoveDown.setSecurityLevel( voMoveDown.getSecurityLevel() + 1 );
		
		try
		{
			domain.saveSecurityLevelSwop(voMoveUp, voMoveDown);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		open();
	}
	
	private void decreaseSecurityLevel()
	{
		//move up	
		form.grdSecurity().moveUp();
		
		//moved down
		SecurityLevelConfigVo voMoveDown = form.grdSecurity().getRows().get(form.grdSecurity().getSelectedRowIndex() + 1).getValue();
		voMoveDown.setSecurityLevel( voMoveDown.getSecurityLevel() + 1 );
		
		//moved up
		SecurityLevelConfigVo voMoveUp = form.grdSecurity().getSelectedRow().getValue();
		voMoveUp.setSecurityLevel( voMoveUp.getSecurityLevel() - 1 );
		
		try
		{
			domain.saveSecurityLevelSwop(voMoveUp, voMoveDown);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		
		open();
	}

	private void deleteSecurityLevel()
	{
		//delete will have to reorder the numbers from scratch
		SecurityLevelConfigVoCollection voCollSecurityLevelConfig = form.grdSecurity().getValues();
		voCollSecurityLevelConfig.remove(form.grdSecurity().getValue());
		voCollSecurityLevelConfig.sort();
		
		int i=0;
		for(SecurityLevelConfigVo voSecurityLevel : voCollSecurityLevelConfig)
		{
			voSecurityLevel.setSecurityLevel(new Integer(i));
			i++;
		}
		
		try
		{
			domain.deleteSecurityLevel(form.grdSecurity().getValue(), voCollSecurityLevelConfig);
		}
		catch (StaleObjectException e)
		{
			engine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());
		}
		catch (ForeignKeyViolationException e)
		{
			engine.showErrors(new String[]{"This Security Level record cannot be deleted as it is in use"});	
		}
		
		open();
	}

	@Override
	protected void onBtnCompletedClick() throws PresentationLogicException
	{
		form.setMode(FormMode.VIEW);
	}

	@Override
	protected void onBtnEditClick() throws PresentationLogicException
	{
		form.setMode(FormMode.EDIT);
	}

	@Override
	protected void onFormModeChanged()
	{
		updateControlState();
	}

	@Override
	protected void onMessageBoxClosed(int messageBoxId, DialogResult result) throws PresentationLogicException
	{
		if(form.getLocalContext().getMessageBoxId() == null)
			throw new CodingRuntimeException("MessageBox Id not retrieved");
			
		if(messageBoxId == form.getLocalContext().getMessageBoxId())
		{
			form.getLocalContext().setMessageBoxId(null);
			if(result.equals(DialogResult.CONFIRM))
				deleteSecurityLevel();
		}
	}
}
