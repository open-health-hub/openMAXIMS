//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 3985.26753)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.alternativecontainerdialog;

import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.FormMode;
import ims.framework.exceptions.PresentationLogicException;
import ims.ocrr.vo.PathSpecimenContainerDetailVo;
import ims.ocrr.vo.SpecimenContainerVo;

import java.util.ArrayList;
import java.util.List;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		initialise();
		open();
	}

	private void open()
	{
		if (form.getGlobalContext().OCRR.getAdultSpecimenContainerIsNotNull())
		{
			SpecimenContainerVo adultContainer = form.getGlobalContext().OCRR.getAdultSpecimenContainer();

			form.cmbContainer().setValue(adultContainer.getSpecContainer());
			
			if (adultContainer.getVolume() != null && adultContainer.getVolume() == 0)
			{
				form.txtVol().setValue("N/A");
				form.decVol().setValue((float)0);
			}
			else
				form.decVol().setValue(adultContainer.getVolume());
			
			form.txtLabelSuffix().setValue(adultContainer.getLabelSuffix());
		}
		else if (form.getGlobalContext().OCRR.getPaediatricsContainerIsNotNull())
		{
			SpecimenContainerVo paedContainer = form.getGlobalContext().OCRR.getPaediatricsContainer();

			form.cmbContainer().setValue(paedContainer.getSpecContainer());
			
			if (paedContainer.getVolume() != null && paedContainer.getVolume() == 0)
			{
				form.txtVol().setValue("N/A");
				form.decVol().setValue((float)0);
			}
			else
				form.decVol().setValue(paedContainer.getVolume());
			
			form.txtLabelSuffix().setValue(paedContainer.getLabelSuffix());
		}
		else if (form.getGlobalContext().OCRR.getAlternativePaediatricsContainerIsNotNull())
		{
			SpecimenContainerVo alternativePaedContainer = form.getGlobalContext().OCRR.getAlternativePaediatricsContainer();

			form.cmbContainer().setValue(alternativePaedContainer.getSpecContainer());
			
			if (alternativePaedContainer.getVolume() != null && alternativePaedContainer.getVolume() == 0)
			{
				form.txtVol().setValue("N/A");
				form.decVol().setValue((float)0);
			}
			else
				form.decVol().setValue(alternativePaedContainer.getVolume());
			
			form.txtLabelSuffix().setValue(alternativePaedContainer.getLabelSuffix());
		}
		
		updateControlState();
	}

	private void initialise()
	{
		if (form.getGlobalContext().OCRR.getSpecimenContainers() == null)
			return;

		for (PathSpecimenContainerDetailVo container : form.getGlobalContext().OCRR.getSpecimenContainers())
		{
			StringBuffer containerName = new StringBuffer();
			
			containerName.append(container.getName());
			containerName.append(" ( Cap: ");
			
			if (container.getVolume() != null)
			{
				containerName.append(container.getVolume());
				containerName.append(" )");
			}
			else
			{
				containerName.append("N/A )");
			}
			
			form.cmbContainer().newRow(container, containerName.toString());
		}
	}

	@Override
	protected void onBtnOkClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (!validateUI())
			return;

		if (form.getGlobalContext().OCRR.getAdultSpecimenContainerIsNotNull())
		{
			SpecimenContainerVo adultContainer = form.getGlobalContext().OCRR.getAdultSpecimenContainer();

			adultContainer.setSpecContainer(form.cmbContainer().getValue());
			adultContainer.setVolume(form.decVol().getValue());
			adultContainer.setLabelSuffix(form.txtLabelSuffix().getValue());

			form.getGlobalContext().OCRR.setAdultSpecimenContainer(adultContainer);
		}
		else if (form.getGlobalContext().OCRR.getPaediatricsContainerIsNotNull())
		{
			SpecimenContainerVo paedContainer = form.getGlobalContext().OCRR.getPaediatricsContainer();

			paedContainer.setSpecContainer(form.cmbContainer().getValue());
			paedContainer.setVolume(form.decVol().getValue());
			paedContainer.setLabelSuffix(form.txtLabelSuffix().getValue());

			form.getGlobalContext().OCRR.setPaediatricsContainer(paedContainer);
		}
		else if (form.getGlobalContext().OCRR.getAlternativePaediatricsContainerIsNotNull())
		{
			SpecimenContainerVo alternativePaedContainer = form.getGlobalContext().OCRR.getAlternativePaediatricsContainer();

			alternativePaedContainer.setSpecContainer(form.cmbContainer().getValue());
			alternativePaedContainer.setVolume(form.decVol().getValue());
			alternativePaedContainer.setLabelSuffix(form.txtLabelSuffix().getValue());

			form.getGlobalContext().OCRR.setAlternativePaediatricsContainer(alternativePaedContainer);
		}

		engine.close(DialogResult.OK);
	}

	private boolean validateUI()
	{
		List<String> errors = new ArrayList();

		if (form.cmbContainer().getValue() == null)
		{
			errors.add("Container is mandatory");
		}

		if (form.decVol().getValue() == null)
		{
			errors.add("Volume is mandatory");
		}

		String[] arrErrors = errors.toArray(new String[0]);

		if (arrErrors != null && arrErrors.length > 0)
		{
			engine.showErrors(arrErrors);
			return false;
		}

		return true;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}

	@Override
	protected void onCmbContainerValueChanged() throws PresentationLogicException
	{
		if (form.cmbContainer().getValue() != null && form.cmbContainer().getValue().getVolume() == null)
		{
			form.txtVol().setValue("N/A");
			form.decVol().setValue((float)0);
		}
		else
		{
			form.txtVol().setValue(null);
			form.decVol().setValue(null);
		}
		
		updateControlState();
	}

	private void updateControlState()
	{
		form.txtVol().setVisible(form.cmbContainer().getValue() != null && form.cmbContainer().getValue().getVolume() == null);
		form.txtVol().setEnabled(false);
		form.decVol().setVisible(form.cmbContainer().getValue() == null || form.cmbContainer().getValue().getVolume() != null);
		form.decVol().setEnabled(FormMode.EDIT.equals(form.getMode()) && form.cmbContainer().getValue() == null || form.cmbContainer().getValue().getVolume() != null);
		form.cmbContainer().setEnabled(FormMode.EDIT.equals(form.getMode()) && (form.getGlobalContext().OCRR.getAdultSpecimenContainer() == null || (form.getGlobalContext().OCRR.getAdultSpecimenContainerIsNotNull() && form.getGlobalContext().OCRR.getAdultSpecimenContainer().getSpecContainer() == null)) && (form.getGlobalContext().OCRR.getPaediatricsContainer() == null || (form.getGlobalContext().OCRR.getPaediatricsContainerIsNotNull() && form.getGlobalContext().OCRR.getPaediatricsContainer().getSpecContainer() == null)) && (form.getGlobalContext().OCRR.getAlternativePaediatricsContainer() == null || (form.getGlobalContext().OCRR.getAlternativePaediatricsContainerIsNotNull() && form.getGlobalContext().OCRR.getAlternativePaediatricsContainer().getSpecContainer() == null)) );
	}
}
