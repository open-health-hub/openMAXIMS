//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2391.24488)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.phlebotomycollectionround;


import ims.configuration.EnvironmentConfig;
import ims.configuration.gen.ConfigFlag;
import ims.core.vo.Hcp;
import ims.core.vo.HcpCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.LocationLiteVoCollection;
import ims.core.vo.ServiceLiteVo;
import ims.domain.exceptions.DomainInterfaceException;
import ims.domain.exceptions.StaleObjectException;
import ims.framework.FormName;
import ims.framework.enumerations.DialogResult;
import ims.framework.enumerations.PrinterScope;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.IPrinter;
import ims.framework.utils.Date;
import ims.ocrr.vo.OrderSpecimenLiteVo;
import ims.ocrr.vo.PhlebotomyRoundVo;
import ims.ocrr.vo.SpecimenWorkListitemCustomVoCollection;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.InvEventType;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import com.ims.query.builder.client.QueryBuilderClient;
import com.ims.query.builder.client.SeedValue;
import com.ims.query.builder.client.exceptions.QueryBuilderClientException;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfCopyFields;
import com.itextpdf.text.pdf.PdfReader;

public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;
	private static final int	LABELS_PRINTED_FROM_ORDER	= 47;
	private static final int	PHLEBOTOMY_ROUND	= 54;
	int totalPages=1;
	
	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		Hcp hcp = (Hcp) domain.getHcpUser();
		
		if (hcp != null)
		{
			form.qmbCollector().newRow(hcp, hcp.toString());
			form.qmbCollector().setValue(hcp);
		}
		
		if(form.getGlobalContext().OCRR.getRoundDateIsNotNull())
		{
			form.dteDate().setValue(form.getGlobalContext().OCRR.getRoundDate());
			form.dteDate().setEnabled(false);
		}
		else
		{
			form.dteDate().setValue(new Date());
		}
		
		if (noCollectionsPresent())//WDEV-12893
		{
			form.qmbPrinter().setEnabled(false);//WDEV-12893
			form.qmbPrinterLabels().setEnabled(false);
			form.btnPrint().setText("Close Round");//WDEV-12893
		}
		else//WDEV-12893
		{
    		IPrinter[] printers = domain.getPrintersForLocation(domain.getCurrentLocation());
    		addPrinters(printers);
    		form.qmbPrinter().setRequired(true);//wdev-13260
    		form.qmbPrinterLabels().setRequired(true);	
		}
	}
	private boolean noCollectionsPresent()//WDEV-12893
	{
		return !form.getGlobalContext().OCRR.getWorkListItemsIsNotNull() || form.getGlobalContext().OCRR.getWorkListItems().size() == 0;
	}
	private void addPrinters(IPrinter[] printers)
	{
		if(printers != null && printers.length > 0)
		{
			for (int i = 0; i < printers.length; i++)
			{
				form.qmbPrinter().newRow(printers[i].getIPrinterName(), printers[i].getIPrinterName());
				form.qmbPrinterLabels().newRow(printers[i].getIPrinterName(), printers[i].getIPrinterName());
			}
		}
		IPrinter defaultPrinter = domain.getPrinterByLocationAndScope(domain.getCurrentLocation(), PrinterScope.DEFAULT);
		if (defaultPrinter != null)
			form.qmbPrinter().setValue(defaultPrinter.getIPrinterName());

		IPrinter labelPrinter = domain.getPrinterByLocationAndScope(domain.getCurrentLocation(), PrinterScope.OCSORDER);
		if (labelPrinter != null)
			form.qmbPrinterLabels().setValue(labelPrinter.getIPrinterName());
	}
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
	protected void onBtnPrintClick() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().OCRR.setClosedRound(null);
		
		if(form.qmbCollector().getValue() == null)
		{
			engine.showMessage("Please select a HCP !");
			return;
		}
		if(form.dteDate().getValue() == null)
		{
			engine.showMessage("Please select a date !");
			return;
		}
		if(form.qmbPrinter().getValue() == null && !noCollectionsPresent())//WDEV-12893
		{
			engine.showMessage("Please select a printer where to print the round !");
			return;
		}
		if(form.qmbPrinterLabels().getValue() == null && !noCollectionsPresent())//WDEV-12893
		{
			engine.showMessage("Please select a printer where to print the labels !");
			return;
		}
		
		PhlebotomyRoundVo phlebotomyRound = new PhlebotomyRoundVo();
		
		phlebotomyRound.setCollector(form.qmbCollector().getValue());
		phlebotomyRound.setDate(form.dteDate().getValue());
		phlebotomyRound.setRoundToCollect(form.getGlobalContext().OCRR.getRoundToCollect());
		
		LocationLiteVoCollection wards = new LocationLiteVoCollection();
		for (int i = 0; i < form.getGlobalContext().Core.getItems().size(); i++)
		{
			if(form.getGlobalContext().Core.getItems().get(i).getSelectedIsNotNull() && form.getGlobalContext().Core.getItems().get(i).getSelected().booleanValue())
			{
				LocationLiteVo item = (LocationLiteVo) form.getGlobalContext().Core.getItems().get(i).getItem();
				wards.add(item);
			}
		}
		phlebotomyRound.setWards(wards);
		
		PhlebotomyRoundVo round = null;
		
		try
		{
			round = domain.savePhlebotomyRound(phlebotomyRound, form.getGlobalContext().OCRR.getWorkListItems());
		}
		catch (StaleObjectException e)
		{
			engine.showMessage("Failed to save PhlebotomyRound record (StaleObjectException).");
			return;
		}
		
		form.getGlobalContext().OCRR.setClosedRound(round);

		form.getLocalContext().setCurrentRound(round);
		
		if (noCollectionsPresent())//WDEV-12893
		{
			engine.close(DialogResult.OK);//WDEV-12893
		}
		else//WDEV-12893
		{
			//engine.open(form.getForms().Core.Reports);
			try //WDEV-14844 
			{
				printRound(round);
			} catch (Exception e)
			{
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			engine.close(DialogResult.OK);
		}
	}
	private void printRound(PhlebotomyRoundVo round)throws Exception
	{				
		String urlQueryServer = ConfigFlag.GEN.QUERY_SERVER_URL.getValue();
		String urlReportServer = ConfigFlag.GEN.REPORT_SERVER_URL.getValue();
		
		java.util.Date date = new java.util.Date();
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
		String timestamp = df.format(date);		
		String fileName = "PhlebotomyRoundandLabels"+engine.getSessionId()+timestamp+".pdf";	
		
				
		QueryBuilderClient client = new QueryBuilderClient(urlQueryServer, engine.getSessionId());			
		
		if(checkConfigFlags(urlQueryServer, urlReportServer) == false)
			return;	
		
		
	    String[] obj = domain.getSystemReportAndTemplate(new Integer(PHLEBOTOMY_ROUND));				
		if(obj == null || obj.length < 2)
		{
			engine.showMessage("I could not get the report and template !");
			return;
		}
		
		if(obj[0] == null || obj[1] == null)
		{
			engine.showMessage("The report has not been deployed !");
			return;
		}
		String repXml = (String) obj[0];
		String templXml = (String) obj[1];
		if(templXml != null && repXml != null)
		{
			processPhlebotomyReport(client, urlReportServer, repXml, templXml, round);						
		}
		
		//WDEV-17760
		processPrintLabelsReport(urlReportServer, client);
			
		/*String folderName = getOutputFolder();		
		String path= folderName +fileName;
		byte[] report=readBytes(path);
		
		try
		{
			client.printReport(report, urlReportServer, form.qmbPrinterLabels().getValue(), 1);
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error creating report: " + e1.getMessage());
			return;
		}
		
		File finalFile = new File(path);
		
		if(finalFile.exists())
		{
			deleteFile(finalFile);
		}*/			
	}
	private void processPrintLabelsReport(String urlReportServer, QueryBuilderClient client) throws QueryBuilderClientException
	{
		SpecimenWorkListitemCustomVoCollection worklistItems = form.getGlobalContext().OCRR.getWorkListItems();
		
		boolean useModalityReportsConfig = ConfigFlag.UI.USE_MODALITY_REPORTS_CONFIGURATION.getValue();
		ServiceLiteVo modality = null;
		
		String[] report = null;
		String[] DFTReport = null;
		String[] pathologyReport = null;
		ArrayList<String> orderInvestigationAdded = new ArrayList<String>();
		ArrayList<Integer> specimenAdded = new ArrayList<Integer>();
		
		for(int i=0;i < worklistItems.size();i++)
		{	
			int labelSetsNo = 1;
			
			boolean isDFT = worklistItems.get(i).getContainerQuantity() == null;
			
			client.getSeeds().clear();
			
			if (isDFT)
			{
				if (worklistItems.get(i).getDftNoOfLabelSets() != null && worklistItems.get(i).getDftNoOfLabelSets() > 0)
				{
					labelSetsNo = worklistItems.get(i).getDftNoOfLabelSets();
				}
				
				modality = domain.getModality(worklistItems.get(i).getOrderInvestigationId());
				client.addSeed(new SeedValue("OrderInvestigation_id", worklistItems.get(i).getOrderInvestigationId(), Integer.class));
				
				if(useModalityReportsConfig)
				{
					report = domain.getSystemReportAndTemplateByReportMapping(null, modality, isDFT);
					
					if(!validateModalityReports(report, report, !isDFT, isDFT, modality))
						return;
					
					client.printReport(report[0], report[1], urlReportServer, form.qmbPrinterLabels().getValue(), labelSetsNo);
				}
				else
				{
					DFTReport = domain.getSystemReportAndTemplateByReportMapping(InvEventType.TIME_SERIES.getID(),null,null);
					
					if(!validateReports(null, null, DFTReport, null, false, false, true, false))
		    			return;
					
					client.printReport(DFTReport[0], DFTReport[1], urlReportServer, form.qmbPrinterLabels().getValue(), labelSetsNo);
				}
					
			}
			//check if the report was already printed for this patient and specimen
			else if (!orderInvestigationAdded.contains(worklistItems.get(i).getPlacerOrdNum()) || !specimenAdded.contains(worklistItems.get(i).getOrderSpecimenId()))
			{
				orderInvestigationAdded.add(worklistItems.get(i).getPlacerOrdNum());
				specimenAdded.add(worklistItems.get(i).getOrderSpecimenId());
				
				modality = domain.getModalityBySpecimenId(worklistItems.get(i).getOrderSpecimenId());
				client.addSeed(new SeedValue("OrderSpecimen_id", worklistItems.get(i).getOrderSpecimenId(), Integer.class));
				
				if(useModalityReportsConfig)
				{
					report = domain.getSystemReportAndTemplateByReportMapping(null, modality, isDFT);
					
					if(!validateModalityReports(report, report, !isDFT, isDFT, modality))
						return;
					
					client.printReport(report[0], report[1], urlReportServer, form.qmbPrinterLabels().getValue(), labelSetsNo);
				}
				else
				{
					pathologyReport = domain.getSystemReportAndTemplateByReportMapping(Category.PATHOLOGY.getID(),null,null);
	    			
	    			if(!validateReports(pathologyReport, null, null, null, true, false, false, false))
		    			return;
	    			
	    			client.printReport(pathologyReport[0], pathologyReport[1], urlReportServer, form.qmbPrinterLabels().getValue(), labelSetsNo);
				}
			}
		}
	}
	
	private boolean validateModalityReports(String[] pathologyReport, String[] dftReport, boolean isPathology, boolean isDFT, ServiceLiteVo modality)
	{
		if(isPathology)
		{
			if(pathologyReport == null || pathologyReport.length < 2)
			{
				engine.showMessage("No template was linked to modality '" + modality.getServiceName() + "', DFT='False'");
				return false;
			}

			if(pathologyReport[0] == null || pathologyReport[1] == null)
			{
				engine.showMessage("The report/template linked to modality '" + modality.getServiceName() + "', DFT='False' was not deployed !");
				return false;
			}
		}

		if(isDFT)
		{
			if(dftReport == null || dftReport.length < 2)
			{
				engine.showMessage("No template was linked to modality '" + modality.getServiceName() + "', DFT='True'");
				return false;
			}

			if(dftReport[0] == null || dftReport[1] == null)
			{
				engine.showMessage("The report/template linked to modality '" + modality.getServiceName() + "', DFT='True' was not deployed !");
				return false;
			}
		}
		
		return true;
	}
	private boolean validateReports(Object[] pathologyReport, Object[] radiologyReport, Object[] DFTReport, String[] clinicalReport, boolean hasPathology, boolean hasRadiology, boolean hasDFT, boolean hasClinical) 
	{
		if(hasPathology)
		{
			if(pathologyReport == null || pathologyReport.length < 2)
			{
				engine.showMessage("I could not get the Pathology report and template! Please set the taxonomy mapping of type REPORT for Category.PATHOLOGY lookup instance with the relevant report Id.");
				return false;
			}

			if(pathologyReport[0] == null || pathologyReport[1] == null)
			{
				engine.showMessage("The Pathology report has not been deployed !");
				return false;
			}
		}
		if(hasRadiology)
		{
			if(radiologyReport == null || radiologyReport.length < 2)
			{
				engine.showMessage("I could not get the Radiology report and template! Please set the taxonomy mapping of type REPORT for Category.CLINICALIMAGING lookup instance with the relevant report Id.");
				return false;
			}

			if(radiologyReport[0] == null || radiologyReport[1] == null)
			{
				engine.showMessage("The Radiology report has not been deployed !");
				return false;
			}
		}
		
		if(hasClinical)
		{
			if(clinicalReport == null || clinicalReport.length < 2)
			{
				engine.showMessage("I could not get the Clinical report and template! Please set the taxonomy mapping of type REPORT for Category.CLINICAL lookup instance with the relevant report Id.");
				return false;
			}

			if(clinicalReport[0] == null || clinicalReport[1] == null)
			{
				engine.showMessage("The Clinical report has not been deployed !");
				return false;
			}
		}
		
		if(hasDFT)
		{
			if(DFTReport == null || DFTReport.length < 2)
			{
				engine.showMessage("I could not get the DFT report and template! Please set the taxonomy mapping of type REPORT for InvEventType.TIME_SERIES lookup instance with the relevant report Id.");
				return false;
			}

			if(DFTReport[0] == null || DFTReport[1] == null)
			{
				engine.showMessage("The DFT report has not been deployed !");
				return false;
			}
		}
		
		return true;
	}
	
	private byte[] readBytes(String fileName) throws DomainInterfaceException 
	{
		File file = new File(fileName);
		if(file.exists())
		{
			try
			{	
				FileInputStream fin = new FileInputStream(file);
				
				byte fileContent[] = new byte[(int)file.length()];
				
				fin.read(fileContent);
				fin.close();
				
				return fileContent;
			}
			catch(FileNotFoundException e)
			{      
				e.printStackTrace();
				throw new DomainInterfaceException("Printing " + fileName +  " failed when attempting to print - " + e.getMessage());
				
			}    
			catch(IOException ioe)    
			{      
				throw new DomainInterfaceException("Printing " + fileName +  " failed when attempting to print - " + ioe.getMessage());
			}
		}
		
		return null;
	}
	private void processPhlebotomyReport(QueryBuilderClient client,String urlReportServer, String repXml, String templXml, PhlebotomyRoundVo round) 
	{			
		client.getSeeds().clear();
		client.addSeed(new SeedValue("PhlebotomyRound_id", round.getID_PhlebotomyRound(), Integer.class));
		client.addSeed(new SeedValue("Patient_id", null, Integer.class));
		
		try
		{					
			client.printReport(repXml, templXml, urlReportServer,form.qmbPrinter().getValue(), 1);
			
		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return;
		}						
		
	}
	private void processLabelsPrintedFromOrderReport(QueryBuilderClient client,String urlReportServer, String repXml2, String templXml2,OrderSpecimenLiteVo specimen) 
	{
						
		client.getSeeds().clear();
		client.addSeed(new SeedValue("OrderSpecimen_id", specimen.getID_OrderSpecimen(), Integer.class));				
		
		try
		{					
			client.printReport(repXml2, templXml2, urlReportServer, form.qmbPrinterLabels().getValue(), 1);

		} 
		catch (QueryBuilderClientException e1)
		{
			engine.showMessage("Error building the report: " + e1.toString());
			return;
		}						
			
	}
	private void concatenateFiles(String fileName, byte[] pdfRound) throws DomainInterfaceException, IOException
	{
		java.util.Date date = new java.util.Date();
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
		String timestamp = df.format(date);			
		String tempPdfFile = "PhlebotomyRound_Temp"+engine.getSessionId()+timestamp+".pdf";

		String folderName = null;		
	    folderName = getOutputFolder();
	   
	   
		
		File tempFile = new File(folderName +tempPdfFile);		
		if(tempFile.exists())
		{
			deleteFile(tempFile);
		}		

		File file = new File(folderName +fileName);	
		File fileNew = new File(folderName +"_"+fileName);
		if(fileNew.exists())
        {
            deleteFile(fileNew);
        }		
		if(file.exists())
		{			
			writeToFile(folderName +tempPdfFile, pdfRound);
	        renameFile(file, fileNew);
		}
		else
		{
			writeToFile(folderName +fileName, pdfRound);
			PdfReader reader = new PdfReader(folderName +fileName);
			totalPages = totalPages+reader.getNumberOfPages();
			return ;
		}	
		
		try 
		{			
			PdfReader reader1 = new PdfReader(fileNew.getAbsolutePath());
		    PdfReader reader2 = new PdfReader(folderName +tempPdfFile);
		    
		    totalPages = totalPages+reader2.getNumberOfPages();
		    
		    PdfCopyFields copy = new PdfCopyFields(new FileOutputStream(folderName  +fileName));
		    copy.addDocument(reader1);
		    copy.addDocument(reader2);
		    copy.close();
		    
		    deleteFile(fileNew);
		    deleteFile(tempFile);
		    
		} 
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
			throw new DomainInterfaceException(e.toString());
		} 
		catch (DocumentException e) 
		{
			e.printStackTrace();
			throw new DomainInterfaceException(e.toString());
		}
		catch (IOException e)  
		{
			e.printStackTrace();
			throw new DomainInterfaceException(e.toString());
		}						
	}
	private void writeToFile(String tempPdfFile, byte[] pdfSummary) throws DomainInterfaceException
	{
		FileOutputStream fos;
		
		try 
		{
			fos = new FileOutputStream(tempPdfFile);
			fos.write(pdfSummary);
			fos.close();
		} 
		catch (FileNotFoundException e) 
		{
			e.printStackTrace();
			throw new DomainInterfaceException(e.toString());
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
			throw new DomainInterfaceException(e.toString());
		}
		
	}
	private void renameFile(File file, File fileNew) throws DomainInterfaceException
	{
		boolean success = false;
		success = file.renameTo(fileNew);
		
		if (!success)
		{
		    System.out.println("File '" + file.getName() + "' was not successfully renamed to '" + fileNew + "' !");
		    throw new DomainInterfaceException("File '" + file.getName() + "' was not successfully renamed to '" + fileNew + "' !");
		}
		
	}
	private void deleteFile(File tempFile) throws DomainInterfaceException
	{
		boolean success = false;
		
		success = tempFile.delete();

		if (!success)
		{
		    System.out.println("File '" + tempFile + "' was not successfully deleted !");
		    throw new DomainInterfaceException("File '" + tempFile + "' was not successfully deleted !");
		}
		
	}
	private String getOutputFolder() throws DomainInterfaceException
	{
		if ( EnvironmentConfig.getBaseUri() == null || EnvironmentConfig.getBaseUri().length() == 0)
		{
			throw new DomainInterfaceException("EnvironmentConfig.getBaseUri() returned null !");				
		}
		
		String folderName = EnvironmentConfig.getBaseUri() + "download" +System.getProperty("file.separator");				
		File folder = new File(folderName);
		
		if(folder.exists() == false)
		{
			boolean bSuccess = folder.mkdir();
			
			if(bSuccess == false)
				throw new DomainInterfaceException("I could not create the folder '" + folder.getAbsolutePath() + "' !");
		}
		
		return folderName;
	}

	
	private boolean checkConfigFlags(String queryServerUrl, String reportServerUrl)
	{		
		if(queryServerUrl == null || queryServerUrl.length() == 0 || queryServerUrl.equals(ConfigFlag.GEN.QUERY_SERVER_URL.getDefaultValue()))
		{
			engine.showMessage("The config flag QUERY_SERVER_URL was not set !");
			return false;
		}
		
		if(reportServerUrl == null || reportServerUrl.length() == 0 || reportServerUrl.equals(ConfigFlag.GEN.REPORT_SERVER_URL.getDefaultValue()))
		{
			engine.showMessage("The config flag REPORT_SERVER_URL was not set !");
			return false;
		}
		
		return true;
	}
	protected void onQmbCollectorTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbCollector().clear();
		if (value == null || value.equals(""))
		{
			engine.showMessage("Please enter at least one character to search on.");
			return;
		}

		HcpCollection voCollHcp = domain.listHcp(value);
		if (voCollHcp != null && voCollHcp.size() > 0)
		{
			for (int i = 0; i < voCollHcp.size(); i++)
			{
				form.qmbCollector().newRow(voCollHcp.get(i), voCollHcp.get(i).getName().toString());
			}
			if (voCollHcp.size() == 1)
				form.qmbCollector().setValue(voCollHcp.get(0));
			else if (voCollHcp.size() > 1)
				form.qmbCollector().showOpened();
		}
		else
			engine.showMessage("No matching records found.");
	}
	protected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException
	{
		/*if(formName.equals(form.getForms().Core.Reports) && result.equals(DialogResult.OK))		
		{
			try {
				printRound(form.getLocalContext().getCurrentRound());
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			engine.close(DialogResult.OK);
		}
		else
		{
			//form.btnPrint().setEnabled(false);
		}*/
	}
	@Override
	protected void onQmbPrinterTextSubmited(String value) throws PresentationLogicException
	{
		form.qmbPrinter().clear();
		if (value == null || value.equals(""))
		{
			engine.showMessage("Please enter at least one character to search on.");
			return;
		}
		IPrinter[] printers = domain.getPrintersForLocation(domain.getCurrentLocation());		
		if (printers != null && printers.length > 0)
		{
			if (value != null)
			{
				value = value.replace("%", ""); //WDEV-18204
				
				for (int i = 0; i < printers.length; i++)
				{
					if (printers[i].getIPrinterName().toLowerCase().contains(value.toLowerCase()))
					{
						form.qmbPrinter().newRow(printers[i].getIPrinterName(), printers[i].getIPrinterName());						
					}					 
				}
			}
			if (printers.length == 1)
				form.qmbPrinter().setValue(printers[0].getIPrinterName());
			else if (printers.length > 1)
				form.qmbPrinter().showOpened();				
		}
		else
			engine.showMessage("No matching records found.");
	}
	@Override
	protected void onQmbPrinterLabelsTextSubmited(String value)throws PresentationLogicException 
	{
		form.qmbPrinterLabels().clear();
		if (value == null || value.equals(""))
		{
			engine.showMessage("Please enter at least one character to search on.");
			return;
		}
		IPrinter[] printers = domain.getPrintersForLocation(domain.getCurrentLocation());		
		if (printers != null && printers.length > 0)
		{
			if (value != null)
			{
				value = value.replace("%", ""); //WDEV-18204
				
				for (int i = 0; i < printers.length; i++)
				{
					if (printers[i].getIPrinterName().toLowerCase().contains(value.toLowerCase()))
					{
						form.qmbPrinterLabels().newRow(printers[i].getIPrinterName(), printers[i].getIPrinterName());						
					}						
				}
			}
			if (printers.length == 1)
				form.qmbPrinterLabels().setValue(printers[0].getIPrinterName());
			else if (printers.length > 1)
				form.qmbPrinterLabels().showOpened();
		}
		else
			engine.showMessage("No matching records found.");
		
	}
}
