//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.45 build 2389.25607)
// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.phlebotomyworklist;

import ims.admin.vo.SelectItemVo;
import ims.admin.vo.SelectItemVoCollection;
import ims.core.vo.LocShortMappingsVoCollection;
import ims.core.vo.LocationLiteVo;
import ims.core.vo.PatientShort;
import ims.framework.Control;
import ims.framework.enumerations.DialogResult;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.interfaces.ILocation;
import ims.framework.utils.Date;
import ims.ocrr.forms.phlebotomyworklist.GenForm.grdWorkListRow;
import ims.ocrr.helper.PhlebotomyHelper;
import ims.ocrr.vo.MoveToWardDetailsVo;
import ims.ocrr.vo.SpecimenCollectionListConfigDetailsVoCollection;
import ims.ocrr.vo.SpecimenWorkListitemCustomVo;
import ims.ocrr.vo.SpecimenWorkListitemCustomVoCollection;
import ims.ocrr.vo.lookups.SpecimenCollectionMethod;
import ims.configuration.gen.ConfigFlag;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;

public class Logic extends BaseLogic
{
	public class ContainerKeyClass implements Comparable<ContainerKeyClass>
	{
		private String containerName;
		private Float volume;
		private String ocsNumber;
		
		public ContainerKeyClass(String name, Float volume, String ocsNumber)
		{
			this.containerName = name;
			this.volume = volume;
			this.ocsNumber = ocsNumber;
		}

		@Override
		public boolean equals(Object obj)
		{
			if (!(obj instanceof ContainerKeyClass))
				return false;
			
			ContainerKeyClass objectToCompare = (ContainerKeyClass) obj;
			
			if (this.containerName != objectToCompare.containerName)
				return false;
			
			if (this.volume != objectToCompare.volume)
				return false;
			
			return true;
		}

		public int compareTo(ContainerKeyClass container)
		{
			if (container == null || container.volume == null) //WDEV-16711
				return -1;
			
			int nameCompare = this.containerName.compareTo(container.containerName);
			
			if (nameCompare != 0)
				return nameCompare;

			return this.volume.compareTo(container.volume);
		}

		@Override
		public String toString()
		{
			//WDEV-16711
			if (ConfigFlag.UI.OCS_ORDERING_DISPLAY_BLOOD_VOLUMES.getValue() && this.volume != null)
			{
				if (this.volume == 0)//WDEV-16900
				{
					return this.containerName + " - N/A mls ";
				}
				else
					return this.containerName + " - " + this.volume + " mls ";
			}
			else
				return this.containerName + " ";
		}

	}

	private static final long	serialVersionUID	= 1L;
	private static final String	EmptyWard			= "UNASSIGNED WARD for these patient(s)";

	protected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		
		populateHospitals();
		form.dteRequired().setValue(new Date());
		refreshRounds();
	}

	private void populateHospitals()
	{
		LocShortMappingsVoCollection coll = domain.listActiveTreatingHospitals();

		ILocation defaultLoc = domain.getCurrentLocation();
		LocationLiteVo hospital  = null;//	WDEV-14957
		
		if(defaultLoc != null)//	WDEV-14957
		{
			hospital = domain.getHospitalForCurrentLocation(defaultLoc);
		}

		for (int i = 0; i < coll.size(); i++)
		{
			form.cmbHospital().newRow(coll.get(i), coll.get(i).getName());
		}
		
		form.cmbHospital().setValue(hospital);//	WDEV-14957
	}

	protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException
	{
		if (formName.equals(form.getForms().Core.SelectItems) && result.equals(DialogResult.OK))
		{
			displaySelectedWards(form.getGlobalContext().Core.getItems());
			form.grdWorkList().getRows().clear();
			form.htmContainers().setHTML("");
			
			form.btnPrintClose().setEnabled(false);
			updateControlsState();
		}

		
		if (formName.equals(form.getForms().OCRR.PhlebotomyCollectionRound) && form.getGlobalContext().OCRR.getClosedRoundIsNotNull())
		{
			roundClosed();
		}
		
		//WDEV-16582
		if (formName.equals(form.getForms().OCRR.MoveToWardSpecimenCollection) && result.equals(DialogResult.OK))
		{
			if (form.getGlobalContext().OCRR.getMoveToWardDetails() != null && Boolean.TRUE.equals(form.getGlobalContext().OCRR.getMoveToWardDetails().getIsRoundClosed()))
			{
				roundClosed();
			}
			else
				onImbSearchClick();
		}

	}

	private void roundClosed()
	{
		form.txtWard().setValue(null);
		form.getGlobalContext().Core.setItems(null);
		form.grdWorkList().getRows().clear();
		form.cmbRound().setValue(null);
		form.htmContainers().setHTML("");
		form.btnPrintClose().setEnabled(false);
		updateControlsState(); //WDEV-16819
	}

	private void displaySelectedWards(SelectItemVoCollection selectedWards)
	{
		form.txtWard().setValue(null);

		if (selectedWards != null)
		{
			StringBuffer sb = new StringBuffer();

			boolean itemsAdded = false;
			for (int i = 0; i < selectedWards.size(); i++)
			{
				if (selectedWards.get(i).getSelectedIsNotNull() && selectedWards.get(i).getSelected().equals(Boolean.TRUE))
				{
					if (itemsAdded)
						sb.append(", ");

					sb.append(selectedWards.get(i).getItem().getIGenericItemInfoName());
					itemsAdded = true;
				}
			}

			form.txtWard().setValue(sb.toString());
		}
	}

	protected void onImbAddWardClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (form.cmbHospital().getValue() == null)
		{
			engine.showMessage("Please select a hospital first !");
			return;
		}
		if (form.dteRequired().getValue() == null)
		{
			engine.showMessage("Please select a date first !");
			return;
		}
		if (form.cmbRound().getValue() == null)
		{
			engine.showMessage("Please select a round first !");
			return;
		}

		SelectItemVoCollection voCollSelectItems = form.getGlobalContext().Core.getItems();

		if (voCollSelectItems == null)
		{
			LocShortMappingsVoCollection wards = domain.listActiveWardsForHospital(form.cmbHospital().getValue(), form.dteRequired().getValue(), form.cmbRound().getValue().getTime());

			for (int i = 0; i < wards.size(); i++)
			{
				SelectItemVo voSelectItem = new SelectItemVo();
				
				voSelectItem.setItem(wards.get(i));
				voSelectItem.setSelected(Boolean.FALSE);
				
				if(voCollSelectItems == null)
					voCollSelectItems = new SelectItemVoCollection();
				
				voCollSelectItems.add(voSelectItem);
			}
		}

		form.getGlobalContext().Core.setItems(voCollSelectItems);

		if (voCollSelectItems != null && voCollSelectItems.size() > 0)
		{
			engine.open(form.getForms().Core.SelectItems, "Select Ward");
		}
		else
		{
			engine.showMessage("All wards have had the phlebotomy rounds printed and closed.");
			return;
		}
	}

	protected void onDteRequiredValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		refreshRounds();
		form.txtWard().setValue(null);
		form.getGlobalContext().Core.setItems(null);
		form.grdWorkList().getRows().clear();
		form.htmContainers().setHTML("");
		form.btnPrintClose().setEnabled(false);
		updateControlsState(); //WDEV-16810
	}

	private void refreshRounds()
	{
		form.cmbRound().clear();

		if (form.dteRequired().getValue() != null)
		{
			SpecimenCollectionListConfigDetailsVoCollection rounds = domain.listSpecimenCollectionDetails(SpecimenCollectionMethod.INPATIENT, form.dteRequired().getValue());

			if (rounds != null)
			{
				for (int i = 0; i < rounds.size(); i++)
				{
					form.cmbRound().newRow(rounds.get(i), rounds.get(i).getTime().getText());
				}
			}
		}
	}

	protected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException
	{
		clearScreen();
		updateControlsState();
	}

	private void clearScreen()
	{
		form.cmbHospital().setValue(null);
		form.cmbRound().clear();
		form.dteRequired().setValue(null);
		form.txtWard().setValue(null);
		form.grdWorkList().getRows().clear();
		form.htmContainers().setHTML("");
		form.btnPrintClose().setEnabled(false);
	}

	protected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException
	{
		if (checkSearchCriteria() == false)
			return;

		SelectItemVoCollection voCollSelectedWards = form.getGlobalContext().Core.getItems();
		Integer[] wards = null;

		if (voCollSelectedWards != null)
		{
			int num = 0;
			for (int i = 0; i < voCollSelectedWards.size(); i++)
			{
				if (voCollSelectedWards.get(i).getSelectedIsNotNull() && voCollSelectedWards.get(i).getSelected().equals(Boolean.TRUE))
				{
					num++;
				}
			}

			wards = new Integer[num];
			int idx = 0;
			for (int i = 0; i < voCollSelectedWards.size(); i++)
			{
				if (voCollSelectedWards.get(i).getSelectedIsNotNull() && voCollSelectedWards.get(i).getSelected().equals(Boolean.TRUE))
				{
					wards[idx++] = new Integer(voCollSelectedWards.get(i).getItem().getIGenericItemInfoID().intValue());
				}
			}
		}

		SpecimenWorkListitemCustomVoCollection items = domain.listWorkListItems(wards, form.dteRequired().getValue(), (form.cmbRound().getValue() != null ? form.cmbRound().getValue().getTime() : null));

		displayListItems(items);
		
		if(items == null || items.size() == 0)
		{
			engine.showMessage("There are currently no patients requiring phlebotomy on the selected wards");
		}

		form.btnPrintClose().setEnabled(true);
		
		updateControlsState();
	}

	private boolean checkSearchCriteria()
	{
		if (form.cmbHospital().getValue() == null)
		{
			engine.showMessage("Please select a hospital !");
			return false;
		}
		if (form.txtWard().getValue() == null)
		{
			engine.showMessage("Please select at least a ward !");
			return false;
		}
		if (form.dteRequired().getValue() == null)
		{
			engine.showMessage("Please select a round date !");
			return false;
		}
		if (form.cmbRound().getValue() == null)
		{
			engine.showMessage("Please select a round !");
			return false;
		}

		return true;
	}

	private void displayListItems(SpecimenWorkListitemCustomVoCollection items)
	{
		form.grdWorkList().getRows().clear();

		List<Integer> oldWard =  new ArrayList<Integer>();
		List<Integer> oldPatient = new ArrayList<Integer>();
		List<Integer> oldWorkListItemId = new ArrayList<Integer>();
		List<Integer> oldService = new ArrayList<Integer>();
		grdWorkListRow lastWardRow = null;
		grdWorkListRow lastPatientRow = null;
		grdWorkListRow lastDisciplineRow = null;
		StringBuffer lastDisciplineCaption = new StringBuffer();
		TreeMap globalContainers = new TreeMap();
		TreeMap<ContainerKeyClass, Integer> localContainers = new TreeMap<ContainerKeyClass, Integer>();
		ArrayList investigations = new ArrayList();
		ArrayList specContainers = new ArrayList();

		for (int i = 0; i < items.size(); i++)
		{
			SpecimenWorkListitemCustomVo item = items.get(i);

			if ((oldWard != null && !oldWard.contains(item.getWardId())) || (oldWard == null && item.getWardId() != null))
			{
				// create a new root node
				lastWardRow = form.grdWorkList().getRows().newRow();

				if (item.getWardIdIsNotNull())
				{
					lastWardRow.setColPatient(item.getWard());
					lastWardRow.setValue(item.getWardId());
				}
				else
				{
					lastWardRow.setColPatient(EmptyWard);
				}

				lastWardRow.setCollapsedImage(form.getImages().Admin.Location);
				lastWardRow.setExpandedImage(form.getImages().Admin.Location);

				oldWard.add(item.getWardId());
			}

			// check for patient
			if ( ! oldPatient.contains(item.getPatientId()))
			{
				// create new patient row
				lastPatientRow = getWardForPatient(item).getRows().newRow();
				lastPatientRow.setValue(item.getPatientId());

				lastPatientRow.setColPatient((item.getPatientForenameIsNotNull() ? item.getPatientForename():"") + " " + (item.getPatientSurnameIsNotNull() ? item.getPatientSurname():"")); //wdev-13308
				lastPatientRow.setCollapsedImage(form.getImages().OCRR.Patient);
				lastPatientRow.setExpandedImage(form.getImages().OCRR.Patient);

				oldPatient.add(item.getPatientId());
			}
			else
			{
				lastPatientRow = getPatientRow(getWardForPatient(item), item);
			}
			
			// check for Discipline (Service)
			if (oldService.contains(item.getServiceId()) == false || oldWorkListItemId.contains(item.getWorkListitemId().intValue()) == false)
			{
				///go through the discipline rows and check the worklist item id if its the same append to this row
				// lastPatientRow.getrows
				
				// create new Discipline row
				if (lastDisciplineRow != null)
				{
					for (Iterator iter = localContainers.keySet().iterator(); iter.hasNext();)
					{
						ContainerKeyClass key = (ContainerKeyClass) iter.next();
						Integer val = (Integer) localContainers.get(key);

						lastDisciplineCaption.append(key);
						
						if (val != null)
						{
							lastDisciplineCaption.append("(Qty: ");
							lastDisciplineCaption.append(val);
							lastDisciplineCaption.append("); ");
						}
					}

					if (lastDisciplineCaption.indexOf("X") != -1 )
					{
						lastDisciplineCaption.append("]");
					}
					
					lastDisciplineRow.setColPatient(lastDisciplineCaption.toString());
					lastDisciplineCaption.append(items.get(i-1).getPlacerOrdNum() != null ? "  OCS Number: " + items.get(i-1).getPlacerOrdNum() + ";" : "");
					lastDisciplineRow.setTooltipForColPatient(lastDisciplineCaption.toString());
					lastDisciplineCaption.setLength(0);
				}
				
				

				lastDisciplineCaption.append(item.getServiceName());
				lastDisciplineCaption.append(" - ");

				lastDisciplineRow = lastPatientRow.getRows().newRow();

				lastDisciplineRow.setCollapsedImage(form.getImages().OCRR.TestTube);
				lastDisciplineRow.setExpandedImage(form.getImages().OCRR.TestTube);
				lastDisciplineRow.setValue((SpecimenWorkListitemCustomVo) item);

				oldService.add(item.getServiceId());
				oldWorkListItemId.add(item.getWorkListitemId());
				
				localContainers.clear();
				investigations.clear();
				specContainers.clear();
			}

			if (investigations.contains(item.getInvestigation()) == false)
			{
				lastDisciplineCaption.append(item.getInvestigation());
				lastDisciplineCaption.append(";  ");
				
				if (item.getDftNoOfLabelSets() != null)
				{
					lastDisciplineCaption.append(item.getDftNoOfLabelSets() + " X [");
				}

				investigations.add(item.getInvestigation());
			}
			
			if (item.getContainerQuantity() == null && isPaediatricPatient(item.getPatientId()))  //a DFT investigation for a paediatric patient will list the PaediatricContainers   
			{

				Integer qty = 1;
				
				if (item.getContainerPaediatricVolume() != null && item.getContainerPaediatricVolume() != 0)
				{
					qty = (int) (item.getPaediatricVolume() / item.getContainerPaediatricVolume());

					BigDecimal x = new BigDecimal(item.getPaediatricVolume().toString());
					BigDecimal y = new BigDecimal(item.getContainerPaediatricVolume().toString());
					BigDecimal rem = x.remainder(y);
					
					if (rem.floatValue() > 0)
					{
						qty++;
					}
				}

				if (specContainers.contains(item.getPaediatricContainerId()) == false)
				{
					localContainers.put(new ContainerKeyClass(item.getPaediatricContainer(), item.getPaediatricVolume(), item.getPlacerOrdNum()), qty);
					
					//WDEV-16490
					Integer qtyAdded = (Integer) globalContainers.get(item.getPaediatricContainer());
					
					if (qtyAdded != null)
					{
						globalContainers.put(item.getPaediatricContainer(), qtyAdded + qty);
					}
					else
						globalContainers.put(item.getPaediatricContainer(), qty);
				}
				
				specContainers.add(item.getPaediatricContainerId());
			}
			else if (item.getSpecimenContainerId() != null && specContainers.contains(item.getSpecimenContainerId()) == false)
			{
				Integer qty = (Integer) globalContainers.get(item.getAdultContainer());
				
				if (item.getContainerQuantityIsNotNull() && item.getContainerQuantity() != 0)//WDEV-16900
				{
					if (qty == null)
						qty = new Integer(item.getContainerQuantity().intValue());
					else
						qty = new Integer(item.getContainerQuantity().intValue() + qty.intValue());

					globalContainers.put(item.getAdultContainer(), qty);
					
					localContainers.put(new ContainerKeyClass(item.getAdultContainer(), item.getAdultVolume(), item.getPlacerOrdNum()), item.getContainerQuantity().intValue());	
				}

				qty = (Integer) localContainers.get(new ContainerKeyClass(item.getAdultContainer(), item.getAdultVolume(), item.getPlacerOrdNum()));
				
				if (item.getContainerQuantity() == null)
				{
					if (item.getContainerAdultVolume() != null && item.getContainerAdultVolume() != 0)
					{
						qty = (int) (item.getAdultVolume() / item.getContainerAdultVolume());

						BigDecimal x = new BigDecimal(item.getAdultVolume().toString());
						BigDecimal y = new BigDecimal(item.getContainerAdultVolume().toString());
						BigDecimal rem = x.remainder(y);
						
						if (rem.floatValue() > 0)
						{
							qty++;
						}
					}
					else
						qty = 1;
					
					Integer qtyAdded = (Integer) globalContainers.get(item.getAdultContainer());
					
					if (qtyAdded != null)
					{
						globalContainers.put(item.getAdultContainer(), qtyAdded + qty);
					}
					else
						globalContainers.put(item.getAdultContainer(), qty);
					
					localContainers.put(new ContainerKeyClass(item.getAdultContainer(), item.getAdultVolume(), item.getPlacerOrdNum()), qty);
				}
					
				specContainers.add(item.getSpecimenContainerId());
			}

			if (item.getInstructionsToCollectorIsNotNull() && lastDisciplineRow != null)
			{
				lastDisciplineRow.setColInstructions(form.getImages().Core.Information);
				lastDisciplineRow.setTooltipForColInstructions(PhlebotomyHelper.getInstructorToCollectorTooltip(item.getInstructionsToCollector()));
			}
		}

		if (lastDisciplineRow != null)
		{
			String ocsNumber = "";
			
			for (Iterator iter = localContainers.keySet().iterator(); iter.hasNext();)
			{
				ContainerKeyClass key = (ContainerKeyClass) iter.next();
				Integer val = (Integer) localContainers.get(key);

				lastDisciplineCaption.append(key);
				if (val !=  null)
				{
					lastDisciplineCaption.append("(Qty: ");
					lastDisciplineCaption.append(val);
					lastDisciplineCaption.append("); ");
				}
				
				ocsNumber = key.ocsNumber;
			}
			
			if (lastDisciplineCaption.indexOf("X") != -1 )
			{
				lastDisciplineCaption.append("]");
			}

			lastDisciplineRow.setColPatient(lastDisciplineCaption.toString());
			//WDEV-17473
			lastDisciplineCaption.append(ocsNumber != null ? "  OCS Number: " + ocsNumber + ";" : "");
			
			lastDisciplineRow.setTooltipForColPatient(lastDisciplineCaption.toString());
		}

		lastDisciplineCaption.setLength(0);

		Set keySet = globalContainers.keySet();

		for (Iterator iter = keySet.iterator(); iter.hasNext();)
		{
			String key = (String) iter.next();
			Integer val = (Integer) globalContainers.get(key);

			lastDisciplineCaption.append("&nbsp;");
			lastDisciplineCaption.append(key);
			lastDisciplineCaption.append(" - ");
			lastDisciplineCaption.append("<font color=\"blue\">");
			lastDisciplineCaption.append(val);
			lastDisciplineCaption.append("</font>");
			lastDisciplineCaption.append("<BR>");
		}

		form.htmContainers().setHTML(lastDisciplineCaption.toString());

		form.grdWorkList().expandAll();

		form.getGlobalContext().OCRR.setWorkListItems(items);

		if (form.cmbRound().getValue() != null)
			form.getGlobalContext().OCRR.setRoundToCollect(form.cmbRound().getValue().getTime());
	}

	private grdWorkListRow getPatientRow(grdWorkListRow lastWardRow, SpecimenWorkListitemCustomVo item)
	{

		for (int i = 0; i < lastWardRow.getRows().size(); i++)
		{
			if (lastWardRow.getRows().get(i).getValue().equals(item.getPatientId()))
			{
				return lastWardRow.getRows().get(i);
			}
		}

		return null;
	}

	private boolean isPaediatricPatient(Integer patientId)
	{
		PatientShort patient = domain.getPatientById(patientId);
		Integer patientAge = patient.calculateAge();
		
		if (patientAge != null && patientAge <= ims.configuration.gen.ConfigFlag.GEN.PAEDIATRIC_AGE.getValue())
			return true;
		
		return false;
	}

	private grdWorkListRow getWardForPatient(SpecimenWorkListitemCustomVo item)
	{
		for (int i=0; i < form.grdWorkList().getRows().size(); i++)
		{
		 if (form.grdWorkList().getRows().get(i).getValue().equals(item.getWardId()))
			 {
			 	return form.grdWorkList().getRows().get(i);
			 }
		}
		
		return null;
	}

	protected void onCmbHospitalValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		form.getGlobalContext().Core.setItems(null);
		form.txtWard().setValue(null);
		form.htmContainers().setHTML("");
		form.grdWorkList().getRows().clear();
		form.btnPrintClose().setEnabled(false);
		updateControlsState();
	}

	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		/*WDEV-12893
		 * if (form.grdWorkList().getRows().size() == 0)
		{
			engine.showMessage("There are no results to print !");
			//return;
		}*/
		
		//WDEV-12893-Start
		if (form.txtWard().getValue() == null)
		{
			engine.showMessage("Please select at least a ward !");
			return;
		}
		if (form.cmbRound().getValue() == null)
		{
			engine.showMessage("Round is mandatory");
			return;
			
		}
		form.getGlobalContext().OCRR.setRoundToCollect(form.cmbRound().getValue().getTime());
		//WDEV-12893-End
		
		form.getGlobalContext().OCRR.setRoundDate(form.dteRequired().getValue());
		form.getGlobalContext().OCRR.setRoundToCollect(form.cmbRound().getValue().getTime());
		engine.open(form.getForms().OCRR.PhlebotomyCollectionRound);
	}

	protected void onCmbRoundValueChanged() throws PresentationLogicException
	{
		form.txtWard().setValue(null);
		form.getGlobalContext().Core.setItems(null);
		form.grdWorkList().getRows().clear();
		form.htmContainers().setHTML("");
		form.btnPrintClose().setEnabled(false);
		updateControlsState();
	}

	//WDEV-16582
	@Override
	protected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException
	{
		switch(menuItemID)
		{
			case GenForm.ContextMenus.OCRRNamespace.MoveToWardCollection.MoveToWardCollection:
				form.getGlobalContext().OCRR.setMoveToWardDetails(new MoveToWardDetailsVo());
				form.getGlobalContext().OCRR.getMoveToWardDetails().setSpecimenId(((SpecimenWorkListitemCustomVo)form.grdWorkList().getSelectedRow().getValue()).getWorkListitemId());
				engine.open(form.getForms().OCRR.MoveToWardSpecimenCollection);
				break;
		}
	}

	@Override
	protected void onGrdWorkListSelectionChanged() throws PresentationLogicException
	{
		updateControlsState();
	}

	private void updateControlsState()
	{
		grdWorkListRow row = form.grdWorkList().getSelectedRow();
		
		//WDEV-16767
		if (row == null)
		{
			form.getGlobalContext().Core.setPatientShort(null);
		}
		else if (row.getValue() != null && row.getValue() instanceof SpecimenWorkListitemCustomVo)
		{
			if (form.getGlobalContext().Core.getPatientShort() == null || (form.getGlobalContext().Core.getPatientShort() != null && (!form.getGlobalContext().Core.getPatientShort().getID_Patient().equals(((SpecimenWorkListitemCustomVo) row.getValue()).getPatientId()))))
			{
				form.getGlobalContext().Core.setPatientShort(domain.getPatientById(((SpecimenWorkListitemCustomVo) row.getValue()).getPatientId()));
			}
		}
		
		form.getContextMenus().OCRR.getMoveToWardCollectionMoveToWardCollectionItem().setVisible(row != null && row.getValue() != null && row.getValue() instanceof SpecimenWorkListitemCustomVo && ((SpecimenWorkListitemCustomVo)row.getValue()).getContainerQuantityIsNotNull());
	}
}
