//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Vasile Purdila using IMS Development Environment (version 1.30 build 2035.17407)
// Copyright (C) 1995-2005 IMS MAXIMS plc. All rights reserved.

package ims.ocrr.forms.profilelist;

import ims.core.vo.ServiceShortVoCollection;
import ims.core.vo.lookups.LocationType;
import ims.framework.enumerations.FormMode;
import ims.framework.enumerations.SortOrder;
import ims.framework.exceptions.PresentationLogicException;
import ims.framework.utils.Color;
import ims.ocrr.vo.InvestigationIndexShortVo;
import ims.ocrr.vo.InvestigationIndexShortVoCollection;
import ims.ocrr.vo.InvestigationProfileListSearchCriteriaVo;
import ims.ocrr.vo.lookups.Category;
import ims.ocrr.vo.lookups.CategoryCollection;
import ims.ocrr.vo.lookups.LookupHelper;

public class Logic extends BaseLogic
{
	protected void onFormOpen() throws ims.framework.exceptions.FormOpenException
	{
		initialize();
		restoreSearchCriteria();
		search();
	}

	protected void onGrdProfilesSelectionChanged() throws PresentationLogicException
	{
		changeContextMenuStatus();
	}
	
	protected void onCmbCategoryValueChanged() throws ims.framework.exceptions.PresentationLogicException
	{
		loadDiscipline(form.cmbCategory().getValue());
	}
	
	protected void onContextMenuItemClick(int menuItemID, ims.framework.Control sender) throws ims.framework.exceptions.PresentationLogicException
	{
		switch (menuItemID)
		{
		case GenForm.ContextMenus.OCRRProfileList.ADD_PROFILE:
			addRecord();
			break;
		case GenForm.ContextMenus.OCRRProfileList.UPDATE_PROFILE:
			updateRecord();
			break;
		case GenForm.ContextMenus.OCRRProfileList.VIEW_PROFILE:
			viewRecord();
			break;
		default:
			break;
		}
	}
	
	protected void onFormModeChanged()
	{
		changeContextMenuStatus();		
	}
	
	private void changeContextMenuStatus()
	{
		form.getContextMenus().getOCRRProfileListADD_PROFILEItem().setVisible(false);
		form.getContextMenus().getOCRRProfileListUPDATE_PROFILEItem().setVisible(false);
		form.getContextMenus().getOCRRProfileListVIEW_PROFILEItem().setVisible(false);

		if (form.getMode().equals(FormMode.VIEW))
		{
			form.getContextMenus().getOCRRProfileListADD_PROFILEItem().setVisible(true);
			
			if (form.grdProfiles().getSelectedRowIndex() != -1)
			{
				form.getContextMenus().getOCRRProfileListUPDATE_PROFILEItem().setVisible(true);
				form.getContextMenus().getOCRRProfileListVIEW_PROFILEItem().setVisible(true);
			}
		}
	}
	private void restoreSearchCriteria()
	{
		InvestigationProfileListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getProfileListSearchCriteria();
		if(searchCriteria == null)
			return;
		
		form.cmbCategory().setValue(searchCriteria.getCategory());
		form.cmbDiscipline().setValue(searchCriteria.getDiscipline());
		form.cmbStatus().setValue(searchCriteria.getStatus());
	}
	private void initialize()
	{
		form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
		loadCategory();
	}
	private void viewRecord()
	{
		Integer recordId = null;
		if(form.grdProfiles().getValue() != null)
			recordId = form.grdProfiles().getValue().getID_InvestigationIndex();			
		form.getGlobalContext().OCRR.setSelectedTest(domain.getInvestigationIndex(recordId));
		form.getGlobalContext().OCRR.setNewInvestigation(Boolean.FALSE);
		form.getGlobalContext().OCRR.setNewProfile(Boolean.TRUE);
		engine.open(form.getForms().OCRR.ProfileEdit);
	}
	private void buildSearchCriteria()
	{
		InvestigationProfileListSearchCriteriaVo searchCriteria = new InvestigationProfileListSearchCriteriaVo();
		searchCriteria.setCategory(form.cmbCategory().getValue());
		searchCriteria.setDiscipline(form.cmbDiscipline().getValue());
		searchCriteria.setStatus(form.cmbStatus().getValue());
		searchCriteria.setText(form.txtname().getValue());
		form.getGlobalContext().OCRR.setProfileListSearchCriteria(searchCriteria);		
	}

	private void updateRecord()
	{
		Integer recordId = null;
		if(form.grdProfiles().getValue() != null)
			recordId = form.grdProfiles().getValue().getID_InvestigationIndex();	
		form.getGlobalContext().OCRR.setSelectedTest(domain.getInvestigationIndex(recordId));
		form.getGlobalContext().OCRR.setNewInvestigation(Boolean.TRUE);
		form.getGlobalContext().OCRR.setNewProfile(Boolean.TRUE);
		engine.open(form.getForms().OCRR.ProfileEdit);

	}

	private void addRecord()
	{
		form.getGlobalContext().OCRR.setSelectedTest(null);
		form.getGlobalContext().OCRR.setNewInvestigation(null);
		form.getGlobalContext().OCRR.setNewProfile(Boolean.TRUE);
		engine.open(form.getForms().OCRR.ProfileEdit);
	}
	
	private void loadCategory()
	{
		Category category;

		form.cmbCategory().clear();

		CategoryCollection coll = LookupHelper.getCategory(domain.getLookupService());
		ims.framework.cn.data.TreeNode[] rootNodes = coll.getRootNodes();

		for (int i = 0; i < rootNodes.length; i++)
		{
			category = (Category) rootNodes[i];
			
			if (!Category.PAS.equals(category))
			{
				form.cmbCategory().newRow(category, category.getText());
			}
		}
	}
	
	private void loadDiscipline(Category value)
	{
		form.cmbDiscipline().clear();

		if(value == null)
			return;
		
		ServiceShortVoCollection voCollServiceShort = new ServiceShortVoCollection();
		
		if(form.cmbCategory().getValue().equals(Category.PATHOLOGY))
			voCollServiceShort = domain.listServiceforLocationByType(LocationType.PATHOLOGYLABORATORY);
		else
			voCollServiceShort = domain.listServiceforLocationByType(LocationType.CLINICALIMAGINGDEPARTMENT);
			
		for(int i=0;i<voCollServiceShort.size();i++)
		{
			form.cmbDiscipline().newRow(voCollServiceShort.get(i), voCollServiceShort.get(i).getServiceName());
		}
	}
	
	private boolean isValidSearchCriteria()
	{
		InvestigationProfileListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getProfileListSearchCriteria();
		if(searchCriteria == null)
			return false;
		
		if(searchCriteria.getTextIsNotNull())
			return true;
		if(searchCriteria.getCategoryIsNotNull())
			return true;
		if(searchCriteria.getDisciplineIsNotNull())
			return true;
		if(searchCriteria.getStatusIsNotNull())
			return true;

		return false;
	}
	
	private void search()
	{
		form.grdProfiles().getRows().clear();
		
		InvestigationProfileListSearchCriteriaVo searchCriteria = form.getGlobalContext().OCRR.getProfileListSearchCriteria();
		if(searchCriteria == null)
			return;
		
		if(!isValidSearchCriteria())
		{
			engine.showMessage("Please Enter Some Search Criteria");
			form.getGlobalContext().OCRR.setProfileListSearchCriteria(null);
			return;
		}	
		
		InvestigationIndexShortVoCollection coll = domain.listInvestigationIndex(form.txtname().getValue(), form.cmbDiscipline().getValue(), form.cmbCategory().getValue(), form.cmbStatus().getValue(), Boolean.TRUE);
		
		form.grdProfiles().getRows().clear();
		
		if(coll == null)
		{
			engine.showMessage("There are no Records for the Search Criteria Provided");
			return;
		}
		
		if(coll.size() == 0)
		{
			engine.showMessage("There are no Records for the Search Criteria Provided");
			return;
		}
		
		populateScreenFromData(coll);
		changeContextMenuStatus();
	}
	
	private void populateScreenFromData(InvestigationIndexShortVoCollection coll)
	{	
		for(int i = 0; i < coll.size(); i++)
		{
			InvestigationIndexShortVo item = coll.get(i);
			
			GenForm.grdProfilesRow row = form.grdProfiles().getRows().newRow();
			
			row.setcolImage(form.getImages().OCRR.Profile);
			row.setcolName(item.getName());
			row.setcolDescription(item.getDescription());
			if(item.getColourIsNotNull())
			{
				Color color = Color.getColor(item.getColour().getName());
				if(color != null)
					row.setcolColour(color.getImage());
			}
			row.setcolCategory(item.getCategoryIsNotNull() ? item.getCategory().getText() : "");
			row.setcolStatus(item.getActiveStatusIsNotNull() ? item.getActiveStatus().getText() : "");
			row.setValue(item);
		}
	}

	protected void onGrdProfilesGridHeaderClicked(int column) throws PresentationLogicException 
	{
		if(column == 4)
		{
			if(form.getLocalContext().getSortOrder() == null)
			{
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
			}
			
			InvestigationIndexShortVoCollection voCollInIndexShort = form.grdProfiles().getValues();	
			voCollInIndexShort.sort(InvestigationIndexShortVo.getColourComparator(form.getLocalContext().getSortOrder()));
			
			if(form.getLocalContext().getSortOrder().equals(SortOrder.ASCENDING))
				form.getLocalContext().setSortOrder(SortOrder.DESCENDING);
			else if(form.getLocalContext().getSortOrder().equals(SortOrder.DESCENDING))
				form.getLocalContext().setSortOrder(SortOrder.ASCENDING);
				
			form.grdProfiles().getRows().clear();
			populateScreenFromData(voCollInIndexShort);
		}
	}
	
	protected void onImbResetClick() throws PresentationLogicException
	{
		form.getGlobalContext().OCRR.setProfileListSearchCriteria(null);
		
		form.grdProfiles().getRows().clear();
		form.cmbCategory().setValue(null);
		form.cmbDiscipline().setValue(null);
		form.cmbStatus().setValue(null);
		form.txtname().setValue("");
		
		changeContextMenuStatus();
	}

	protected void onImbSearchClick() throws PresentationLogicException 
	{
		buildSearchCriteria();
		search();
		changeContextMenuStatus();	
	}
	
}
