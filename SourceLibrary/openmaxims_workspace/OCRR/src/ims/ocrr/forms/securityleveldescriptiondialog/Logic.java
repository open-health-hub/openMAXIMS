//#############################################################################
//#                                                                           #
//#  Copyright (C) <2014>  <IMS MAXIMS>                                       #
//#                                                                           #
//#  This program is free software: you can redistribute it and/or modify     #
//#  it under the terms of the GNU Affero General Public License as           #
//#  published by the Free Software Foundation, either version 3 of the       #
//#  License, or (at your option) any later version.                          # 
//#                                                                           #
//#  This program is distributed in the hope that it will be useful,          #
//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #
//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
//#  GNU Affero General Public License for more details.                      #
//#                                                                           #
//#  You should have received a copy of the GNU Affero General Public License #
//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #
//#                                                                           #
//#############################################################################
//#EOH
// This code was generated by Daniel Laffan using IMS Development Environment (version 1.71 build 3716.26758)
// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.

package ims.ocrr.forms.securityleveldescriptiondialog;

import ims.framework.enumerations.DialogResult;
import ims.ocrr.vo.SecurityLevelConfigVo;


public class Logic extends BaseLogic
{
	private static final long serialVersionUID = 1L;

	@Override
	protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException
	{
		populateScreenFromData();
		form.txtDescription().setFocus();
	}
	
	private void populateScreenFromData()
	{
		clearScreen();
		SecurityLevelConfigVo voSecurityLevel = (SecurityLevelConfigVo)form.getGlobalContext().OCRR.getSecurityLevelConfigVoRecord().clone();
		
		if(voSecurityLevel != null)
		{
			form.txtDescription().setValue(voSecurityLevel.getSecurityLevelDescription());
		}
	}
	
	private void clearScreen()
	{
		form.txtDescription().setValue(null);
	}

	@Override
	protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException
	{
		SecurityLevelConfigVo voSecurityLevel = populateDataFromScreen();
		
		String[] arrErrors = voSecurityLevel.validate();
		if(arrErrors != null)
		{
			engine.showErrors(arrErrors);
			return;
		}
		form.getGlobalContext().OCRR.setSecurityLevelConfigVoRecord(voSecurityLevel);
		engine.close(DialogResult.OK);
	}
	
	private SecurityLevelConfigVo populateDataFromScreen()
	{
		SecurityLevelConfigVo voSecurityLevel = form.getGlobalContext().OCRR.getSecurityLevelConfigVoRecord();
		
		voSecurityLevel.setSecurityLevelDescription(form.txtDescription().getValue());
		
		return voSecurityLevel;
	}

	@Override
	protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException
	{
		engine.close(DialogResult.CANCEL);
	}
}
